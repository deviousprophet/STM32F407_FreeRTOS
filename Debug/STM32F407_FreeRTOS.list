
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c4c  08003c4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c4c  08003c4c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c4c  08003c4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012de0  20000070  08003cc4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e50  08003cc4  00022e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0fa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001717  00000000  00000000  0002a19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  0002b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  0002bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002049  00000000  00000000  0002c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a9d  00000000  00000000  0002e4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00011ee9  00000000  00000000  00034f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00046e6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020ac  00000000  00000000  00046ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003b5c 	.word	0x08003b5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003b5c 	.word	0x08003b5c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f103 0208 	add.w	r2, r3, #8
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f103 0208 	add.w	r2, r3, #8
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f103 0208 	add.w	r2, r3, #8
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80002ea:	b480      	push	{r7}
 80002ec:	b085      	sub	sp, #20
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	683a      	ldr	r2, [r7, #0]
 800030e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	683a      	ldr	r2, [r7, #0]
 8000314:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	1c5a      	adds	r2, r3, #1
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000332:	b480      	push	{r7}
 8000334:	b085      	sub	sp, #20
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000348:	d103      	bne.n	8000352 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	691b      	ldr	r3, [r3, #16]
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	e00c      	b.n	800036c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3308      	adds	r3, #8
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	e002      	b.n	8000360 <vListInsert+0x2e>
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	68ba      	ldr	r2, [r7, #8]
 8000368:	429a      	cmp	r2, r3
 800036a:	d2f6      	bcs.n	800035a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	685a      	ldr	r2, [r3, #4]
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	683a      	ldr	r2, [r7, #0]
 800037a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	1c5a      	adds	r2, r3, #1
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	601a      	str	r2, [r3, #0]
}
 8000398:	bf00      	nop
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	691b      	ldr	r3, [r3, #16]
 80003b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	6892      	ldr	r2, [r2, #8]
 80003ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	6852      	ldr	r2, [r2, #4]
 80003c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d103      	bne.n	80003d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689a      	ldr	r2, [r3, #8]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	1e5a      	subs	r2, r3, #1
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	681b      	ldr	r3, [r3, #0]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d10a      	bne.n	8000422 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800040c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000410:	f383 8811 	msr	BASEPRI, r3
 8000414:	f3bf 8f6f 	isb	sy
 8000418:	f3bf 8f4f 	dsb	sy
 800041c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800041e:	bf00      	nop
 8000420:	e7fe      	b.n	8000420 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000422:	f001 ff91 	bl	8002348 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800042e:	68f9      	ldr	r1, [r7, #12]
 8000430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000432:	fb01 f303 	mul.w	r3, r1, r3
 8000436:	441a      	add	r2, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	2200      	movs	r2, #0
 8000440:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000452:	3b01      	subs	r3, #1
 8000454:	68f9      	ldr	r1, [r7, #12]
 8000456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000458:	fb01 f303 	mul.w	r3, r1, r3
 800045c:	441a      	add	r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	22ff      	movs	r2, #255	; 0xff
 8000466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	22ff      	movs	r2, #255	; 0xff
 800046e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d114      	bne.n	80004a2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	691b      	ldr	r3, [r3, #16]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d01a      	beq.n	80004b6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	3310      	adds	r3, #16
 8000484:	4618      	mov	r0, r3
 8000486:	f001 f881 	bl	800158c <xTaskRemoveFromEventList>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d012      	beq.n	80004b6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <xQueueGenericReset+0xcc>)
 8000492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	f3bf 8f4f 	dsb	sy
 800049c:	f3bf 8f6f 	isb	sy
 80004a0:	e009      	b.n	80004b6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3310      	adds	r3, #16
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff fef2 	bl	8000290 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3324      	adds	r3, #36	; 0x24
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff feed 	bl	8000290 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80004b6:	f001 ff77 	bl	80023a8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80004ba:	2301      	movs	r3, #1
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4613      	mov	r3, r2
 80004d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d10a      	bne.n	80004f2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80004dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004e0:	f383 8811 	msr	BASEPRI, r3
 80004e4:	f3bf 8f6f 	isb	sy
 80004e8:	f3bf 8f4f 	dsb	sy
 80004ec:	61bb      	str	r3, [r7, #24]
    }
 80004ee:	bf00      	nop
 80004f0:	e7fe      	b.n	80004f0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	fb02 f303 	mul.w	r3, r2, r3
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d006      	beq.n	8000510 <xQueueGenericCreate+0x48>
 8000502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	fbb2 f3f3 	udiv	r3, r2, r3
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	429a      	cmp	r2, r3
 800050e:	d101      	bne.n	8000514 <xQueueGenericCreate+0x4c>
 8000510:	2301      	movs	r3, #1
 8000512:	e000      	b.n	8000516 <xQueueGenericCreate+0x4e>
 8000514:	2300      	movs	r3, #0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10a      	bne.n	8000530 <xQueueGenericCreate+0x68>
        __asm volatile
 800051a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800051e:	f383 8811 	msr	BASEPRI, r3
 8000522:	f3bf 8f6f 	isb	sy
 8000526:	f3bf 8f4f 	dsb	sy
 800052a:	617b      	str	r3, [r7, #20]
    }
 800052c:	bf00      	nop
 800052e:	e7fe      	b.n	800052e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000532:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000536:	d90a      	bls.n	800054e <xQueueGenericCreate+0x86>
        __asm volatile
 8000538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800053c:	f383 8811 	msr	BASEPRI, r3
 8000540:	f3bf 8f6f 	isb	sy
 8000544:	f3bf 8f4f 	dsb	sy
 8000548:	613b      	str	r3, [r7, #16]
    }
 800054a:	bf00      	nop
 800054c:	e7fe      	b.n	800054c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800054e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000550:	3350      	adds	r3, #80	; 0x50
 8000552:	4618      	mov	r0, r3
 8000554:	f002 f81a 	bl	800258c <pvPortMalloc>
 8000558:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800055a:	6a3b      	ldr	r3, [r7, #32]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d00d      	beq.n	800057c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	3350      	adds	r3, #80	; 0x50
 8000568:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800056a:	79fa      	ldrb	r2, [r7, #7]
 800056c:	6a3b      	ldr	r3, [r7, #32]
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	4613      	mov	r3, r2
 8000572:	69fa      	ldr	r2, [r7, #28]
 8000574:	68b9      	ldr	r1, [r7, #8]
 8000576:	68f8      	ldr	r0, [r7, #12]
 8000578:	f000 f805 	bl	8000586 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800057c:	6a3b      	ldr	r3, [r7, #32]
    }
 800057e:	4618      	mov	r0, r3
 8000580:	3728      	adds	r7, #40	; 0x28
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b084      	sub	sp, #16
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
 8000592:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d103      	bne.n	80005a2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800059a:	69bb      	ldr	r3, [r7, #24]
 800059c:	69ba      	ldr	r2, [r7, #24]
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	e002      	b.n	80005a8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005b4:	2101      	movs	r1, #1
 80005b6:	69b8      	ldr	r0, [r7, #24]
 80005b8:	f7ff ff1e 	bl	80003f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	78fa      	ldrb	r2, [r7, #3]
 80005c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08e      	sub	sp, #56	; 0x38
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80005da:	2300      	movs	r3, #0
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80005e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10a      	bne.n	80005fe <xQueueGenericSend+0x32>
        __asm volatile
 80005e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ec:	f383 8811 	msr	BASEPRI, r3
 80005f0:	f3bf 8f6f 	isb	sy
 80005f4:	f3bf 8f4f 	dsb	sy
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80005fa:	bf00      	nop
 80005fc:	e7fe      	b.n	80005fc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d103      	bne.n	800060c <xQueueGenericSend+0x40>
 8000604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	2b00      	cmp	r3, #0
 800060a:	d101      	bne.n	8000610 <xQueueGenericSend+0x44>
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <xQueueGenericSend+0x46>
 8000610:	2300      	movs	r3, #0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d10a      	bne.n	800062c <xQueueGenericSend+0x60>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000628:	bf00      	nop
 800062a:	e7fe      	b.n	800062a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2b02      	cmp	r3, #2
 8000630:	d103      	bne.n	800063a <xQueueGenericSend+0x6e>
 8000632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000636:	2b01      	cmp	r3, #1
 8000638:	d101      	bne.n	800063e <xQueueGenericSend+0x72>
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <xQueueGenericSend+0x74>
 800063e:	2300      	movs	r3, #0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d10a      	bne.n	800065a <xQueueGenericSend+0x8e>
        __asm volatile
 8000644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000648:	f383 8811 	msr	BASEPRI, r3
 800064c:	f3bf 8f6f 	isb	sy
 8000650:	f3bf 8f4f 	dsb	sy
 8000654:	623b      	str	r3, [r7, #32]
    }
 8000656:	bf00      	nop
 8000658:	e7fe      	b.n	8000658 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800065a:	f001 f933 	bl	80018c4 <xTaskGetSchedulerState>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <xQueueGenericSend+0x9e>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <xQueueGenericSend+0xa2>
 800066a:	2301      	movs	r3, #1
 800066c:	e000      	b.n	8000670 <xQueueGenericSend+0xa4>
 800066e:	2300      	movs	r3, #0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10a      	bne.n	800068a <xQueueGenericSend+0xbe>
        __asm volatile
 8000674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000678:	f383 8811 	msr	BASEPRI, r3
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f3bf 8f4f 	dsb	sy
 8000684:	61fb      	str	r3, [r7, #28]
    }
 8000686:	bf00      	nop
 8000688:	e7fe      	b.n	8000688 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800068a:	f001 fe5d 	bl	8002348 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800068e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000696:	429a      	cmp	r2, r3
 8000698:	d302      	bcc.n	80006a0 <xQueueGenericSend+0xd4>
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d129      	bne.n	80006f4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006a6:	f000 fa19 	bl	8000adc <prvCopyDataToQueue>
 80006aa:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80006ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d010      	beq.n	80006d6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80006b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b6:	3324      	adds	r3, #36	; 0x24
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 ff67 	bl	800158c <xTaskRemoveFromEventList>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d013      	beq.n	80006ec <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80006c4:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <xQueueGenericSend+0x1f8>)
 80006c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	f3bf 8f4f 	dsb	sy
 80006d0:	f3bf 8f6f 	isb	sy
 80006d4:	e00a      	b.n	80006ec <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80006d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d007      	beq.n	80006ec <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80006dc:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <xQueueGenericSend+0x1f8>)
 80006de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	f3bf 8f4f 	dsb	sy
 80006e8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80006ec:	f001 fe5c 	bl	80023a8 <vPortExitCritical>
                return pdPASS;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e063      	b.n	80007bc <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d103      	bne.n	8000702 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80006fa:	f001 fe55 	bl	80023a8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	e05c      	b.n	80007bc <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000704:	2b00      	cmp	r3, #0
 8000706:	d106      	bne.n	8000716 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4618      	mov	r0, r3
 800070e:	f000 ff9f 	bl	8001650 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000712:	2301      	movs	r3, #1
 8000714:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000716:	f001 fe47 	bl	80023a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800071a:	f000 fd19 	bl	8001150 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800071e:	f001 fe13 	bl	8002348 <vPortEnterCritical>
 8000722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000728:	b25b      	sxtb	r3, r3
 800072a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800072e:	d103      	bne.n	8000738 <xQueueGenericSend+0x16c>
 8000730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800073a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800073e:	b25b      	sxtb	r3, r3
 8000740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000744:	d103      	bne.n	800074e <xQueueGenericSend+0x182>
 8000746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800074e:	f001 fe2b 	bl	80023a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000752:	1d3a      	adds	r2, r7, #4
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f000 ff8e 	bl	800167c <xTaskCheckForTimeOut>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d124      	bne.n	80007b0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000768:	f000 fab0 	bl	8000ccc <prvIsQueueFull>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d018      	beq.n	80007a4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000774:	3310      	adds	r3, #16
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f000 feb6 	bl	80014ec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000782:	f000 fa3b 	bl	8000bfc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000786:	f000 fcf1 	bl	800116c <xTaskResumeAll>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	f47f af7c 	bne.w	800068a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <xQueueGenericSend+0x1f8>)
 8000794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	f3bf 8f4f 	dsb	sy
 800079e:	f3bf 8f6f 	isb	sy
 80007a2:	e772      	b.n	800068a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80007a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007a6:	f000 fa29 	bl	8000bfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80007aa:	f000 fcdf 	bl	800116c <xTaskResumeAll>
 80007ae:	e76c      	b.n	800068a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80007b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007b2:	f000 fa23 	bl	8000bfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80007b6:	f000 fcd9 	bl	800116c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80007ba:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3738      	adds	r7, #56	; 0x38
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	e000ed04 	.word	0xe000ed04

080007c8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b090      	sub	sp, #64	; 0x40
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80007da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10a      	bne.n	80007f6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80007e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007e4:	f383 8811 	msr	BASEPRI, r3
 80007e8:	f3bf 8f6f 	isb	sy
 80007ec:	f3bf 8f4f 	dsb	sy
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80007f2:	bf00      	nop
 80007f4:	e7fe      	b.n	80007f4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d103      	bne.n	8000804 <xQueueGenericSendFromISR+0x3c>
 80007fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <xQueueGenericSendFromISR+0x40>
 8000804:	2301      	movs	r3, #1
 8000806:	e000      	b.n	800080a <xQueueGenericSendFromISR+0x42>
 8000808:	2300      	movs	r3, #0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10a      	bne.n	8000824 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800080e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000812:	f383 8811 	msr	BASEPRI, r3
 8000816:	f3bf 8f6f 	isb	sy
 800081a:	f3bf 8f4f 	dsb	sy
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000820:	bf00      	nop
 8000822:	e7fe      	b.n	8000822 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d103      	bne.n	8000832 <xQueueGenericSendFromISR+0x6a>
 800082a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800082c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800082e:	2b01      	cmp	r3, #1
 8000830:	d101      	bne.n	8000836 <xQueueGenericSendFromISR+0x6e>
 8000832:	2301      	movs	r3, #1
 8000834:	e000      	b.n	8000838 <xQueueGenericSendFromISR+0x70>
 8000836:	2300      	movs	r3, #0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10a      	bne.n	8000852 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800083c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000840:	f383 8811 	msr	BASEPRI, r3
 8000844:	f3bf 8f6f 	isb	sy
 8000848:	f3bf 8f4f 	dsb	sy
 800084c:	623b      	str	r3, [r7, #32]
    }
 800084e:	bf00      	nop
 8000850:	e7fe      	b.n	8000850 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000852:	f001 fe5b 	bl	800250c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000856:	f3ef 8211 	mrs	r2, BASEPRI
 800085a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800085e:	f383 8811 	msr	BASEPRI, r3
 8000862:	f3bf 8f6f 	isb	sy
 8000866:	f3bf 8f4f 	dsb	sy
 800086a:	61fa      	str	r2, [r7, #28]
 800086c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800086e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800087a:	429a      	cmp	r2, r3
 800087c:	d302      	bcc.n	8000884 <xQueueGenericSendFromISR+0xbc>
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d13e      	bne.n	8000902 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800088a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800088e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	68b9      	ldr	r1, [r7, #8]
 8000898:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800089a:	f000 f91f 	bl	8000adc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800089e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80008a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008a6:	d112      	bne.n	80008ce <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d025      	beq.n	80008fc <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008b2:	3324      	adds	r3, #36	; 0x24
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fe69 	bl	800158c <xTaskRemoveFromEventList>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d01d      	beq.n	80008fc <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d01a      	beq.n	80008fc <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	e016      	b.n	80008fc <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80008ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80008d2:	2b7f      	cmp	r3, #127	; 0x7f
 80008d4:	d10a      	bne.n	80008ec <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80008d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008da:	f383 8811 	msr	BASEPRI, r3
 80008de:	f3bf 8f6f 	isb	sy
 80008e2:	f3bf 8f4f 	dsb	sy
 80008e6:	617b      	str	r3, [r7, #20]
    }
 80008e8:	bf00      	nop
 80008ea:	e7fe      	b.n	80008ea <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80008ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	b25a      	sxtb	r2, r3
 80008f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80008fc:	2301      	movs	r3, #1
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000900:	e001      	b.n	8000906 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000902:	2300      	movs	r3, #0
 8000904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000908:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000910:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000914:	4618      	mov	r0, r3
 8000916:	3740      	adds	r7, #64	; 0x40
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10a      	bne.n	800094c <xQueueReceive+0x30>
        __asm volatile
 8000936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	623b      	str	r3, [r7, #32]
    }
 8000948:	bf00      	nop
 800094a:	e7fe      	b.n	800094a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d103      	bne.n	800095a <xQueueReceive+0x3e>
 8000952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <xQueueReceive+0x42>
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <xQueueReceive+0x44>
 800095e:	2300      	movs	r3, #0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10a      	bne.n	800097a <xQueueReceive+0x5e>
        __asm volatile
 8000964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000968:	f383 8811 	msr	BASEPRI, r3
 800096c:	f3bf 8f6f 	isb	sy
 8000970:	f3bf 8f4f 	dsb	sy
 8000974:	61fb      	str	r3, [r7, #28]
    }
 8000976:	bf00      	nop
 8000978:	e7fe      	b.n	8000978 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800097a:	f000 ffa3 	bl	80018c4 <xTaskGetSchedulerState>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <xQueueReceive+0x6e>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <xQueueReceive+0x72>
 800098a:	2301      	movs	r3, #1
 800098c:	e000      	b.n	8000990 <xQueueReceive+0x74>
 800098e:	2300      	movs	r3, #0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10a      	bne.n	80009aa <xQueueReceive+0x8e>
        __asm volatile
 8000994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000998:	f383 8811 	msr	BASEPRI, r3
 800099c:	f3bf 8f6f 	isb	sy
 80009a0:	f3bf 8f4f 	dsb	sy
 80009a4:	61bb      	str	r3, [r7, #24]
    }
 80009a6:	bf00      	nop
 80009a8:	e7fe      	b.n	80009a8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80009aa:	f001 fccd 	bl	8002348 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80009b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d01f      	beq.n	80009fa <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80009ba:	68b9      	ldr	r1, [r7, #8]
 80009bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009be:	f000 f8f7 	bl	8000bb0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009cc:	691b      	ldr	r3, [r3, #16]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00f      	beq.n	80009f2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d4:	3310      	adds	r3, #16
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fdd8 	bl	800158c <xTaskRemoveFromEventList>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d007      	beq.n	80009f2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80009e2:	4b3d      	ldr	r3, [pc, #244]	; (8000ad8 <xQueueReceive+0x1bc>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80009f2:	f001 fcd9 	bl	80023a8 <vPortExitCritical>
                return pdPASS;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e069      	b.n	8000ace <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d103      	bne.n	8000a08 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a00:	f001 fcd2 	bl	80023a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000a04:	2300      	movs	r3, #0
 8000a06:	e062      	b.n	8000ace <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d106      	bne.n	8000a1c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fe1c 	bl	8001650 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a1c:	f001 fcc4 	bl	80023a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a20:	f000 fb96 	bl	8001150 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a24:	f001 fc90 	bl	8002348 <vPortEnterCritical>
 8000a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a34:	d103      	bne.n	8000a3e <xQueueReceive+0x122>
 8000a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a44:	b25b      	sxtb	r3, r3
 8000a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a4a:	d103      	bne.n	8000a54 <xQueueReceive+0x138>
 8000a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a54:	f001 fca8 	bl	80023a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a58:	1d3a      	adds	r2, r7, #4
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fe0b 	bl	800167c <xTaskCheckForTimeOut>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d123      	bne.n	8000ab4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a6e:	f000 f917 	bl	8000ca0 <prvIsQueueEmpty>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d017      	beq.n	8000aa8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	3324      	adds	r3, #36	; 0x24
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fd33 	bl	80014ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a88:	f000 f8b8 	bl	8000bfc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a8c:	f000 fb6e 	bl	800116c <xTaskResumeAll>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d189      	bne.n	80009aa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <xQueueReceive+0x1bc>)
 8000a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	f3bf 8f4f 	dsb	sy
 8000aa2:	f3bf 8f6f 	isb	sy
 8000aa6:	e780      	b.n	80009aa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000aaa:	f000 f8a7 	bl	8000bfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000aae:	f000 fb5d 	bl	800116c <xTaskResumeAll>
 8000ab2:	e77a      	b.n	80009aa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ab6:	f000 f8a1 	bl	8000bfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000aba:	f000 fb57 	bl	800116c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ac0:	f000 f8ee 	bl	8000ca0 <prvIsQueueEmpty>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f43f af6f 	beq.w	80009aa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000acc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3730      	adds	r7, #48	; 0x30
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000ed04 	.word	0xe000ed04

08000adc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10d      	bne.n	8000b16 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 fefa 	bl	8001900 <xTaskPriorityDisinherit>
 8000b0c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	e043      	b.n	8000b9e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d119      	bne.n	8000b50 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6858      	ldr	r0, [r3, #4]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	461a      	mov	r2, r3
 8000b26:	68b9      	ldr	r1, [r7, #8]
 8000b28:	f002 f8ac 	bl	8002c84 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	441a      	add	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d32b      	bcc.n	8000b9e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	e026      	b.n	8000b9e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	68d8      	ldr	r0, [r3, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	461a      	mov	r2, r3
 8000b5a:	68b9      	ldr	r1, [r7, #8]
 8000b5c:	f002 f892 	bl	8002c84 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	425b      	negs	r3, r3
 8000b6a:	441a      	add	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	425b      	negs	r3, r3
 8000b86:	441a      	add	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d105      	bne.n	8000b9e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d002      	beq.n	8000b9e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000ba6:	697b      	ldr	r3, [r7, #20]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d018      	beq.n	8000bf4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	441a      	add	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d303      	bcc.n	8000be4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68d9      	ldr	r1, [r3, #12]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	461a      	mov	r2, r3
 8000bee:	6838      	ldr	r0, [r7, #0]
 8000bf0:	f002 f848 	bl	8002c84 <memcpy>
    }
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000c04:	f001 fba0 	bl	8002348 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c10:	e011      	b.n	8000c36 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d012      	beq.n	8000c40 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3324      	adds	r3, #36	; 0x24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fcb4 	bl	800158c <xTaskRemoveFromEventList>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000c2a:	f000 fd8d 	bl	8001748 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dce9      	bgt.n	8000c12 <prvUnlockQueue+0x16>
 8000c3e:	e000      	b.n	8000c42 <prvUnlockQueue+0x46>
                        break;
 8000c40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	22ff      	movs	r2, #255	; 0xff
 8000c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000c4a:	f001 fbad 	bl	80023a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000c4e:	f001 fb7b 	bl	8002348 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c5a:	e011      	b.n	8000c80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d012      	beq.n	8000c8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3310      	adds	r3, #16
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fc8f 	bl	800158c <xTaskRemoveFromEventList>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000c74:	f000 fd68 	bl	8001748 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	dce9      	bgt.n	8000c5c <prvUnlockQueue+0x60>
 8000c88:	e000      	b.n	8000c8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000c8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	22ff      	movs	r2, #255	; 0xff
 8000c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000c94:	f001 fb88 	bl	80023a8 <vPortExitCritical>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ca8:	f001 fb4e 	bl	8002348 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e001      	b.n	8000cbe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000cbe:	f001 fb73 	bl	80023a8 <vPortExitCritical>

    return xReturn;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000cd4:	f001 fb38 	bl	8002348 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d102      	bne.n	8000cea <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e001      	b.n	8000cee <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000cee:	f001 fb5b 	bl	80023a8 <vPortExitCritical>

    return xReturn;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e014      	b.n	8000d36 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000d0c:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <vQueueAddToRegistry+0x50>)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10b      	bne.n	8000d30 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <vQueueAddToRegistry+0x50>)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <vQueueAddToRegistry+0x50>)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	4413      	add	r3, r2
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8000d2e:	e006      	b.n	8000d3e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b07      	cmp	r3, #7
 8000d3a:	d9e7      	bls.n	8000d0c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20012e00 	.word	0x20012e00

08000d50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000d60:	f001 faf2 	bl	8002348 <vPortEnterCritical>
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d70:	d103      	bne.n	8000d7a <vQueueWaitForMessageRestricted+0x2a>
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d86:	d103      	bne.n	8000d90 <vQueueWaitForMessageRestricted+0x40>
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d90:	f001 fb0a 	bl	80023a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d106      	bne.n	8000daa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3324      	adds	r3, #36	; 0x24
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fbc5 	bl	8001534 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff ff26 	bl	8000bfc <prvUnlockQueue>
    }
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af04      	add	r7, sp, #16
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fbdd 	bl	800258c <pvPortMalloc>
 8000dd2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00e      	beq.n	8000df8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000dda:	2058      	movs	r0, #88	; 0x58
 8000ddc:	f001 fbd6 	bl	800258c <pvPortMalloc>
 8000de0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	631a      	str	r2, [r3, #48]	; 0x30
 8000dee:	e005      	b.n	8000dfc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000df0:	6978      	ldr	r0, [r7, #20]
 8000df2:	f001 fcab 	bl	800274c <vPortFree>
 8000df6:	e001      	b.n	8000dfc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d013      	beq.n	8000e2a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e02:	88fa      	ldrh	r2, [r7, #6]
 8000e04:	2300      	movs	r3, #0
 8000e06:	9303      	str	r3, [sp, #12]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f000 f80e 	bl	8000e3a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000e1e:	69f8      	ldr	r0, [r7, #28]
 8000e20:	f000 f8a2 	bl	8000f68 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	e002      	b.n	8000e30 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e2e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000e30:	69bb      	ldr	r3, [r7, #24]
    }
 8000e32:	4618      	mov	r0, r3
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b088      	sub	sp, #32
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	461a      	mov	r2, r3
 8000e52:	21a5      	movs	r1, #165	; 0xa5
 8000e54:	f001 ff24 	bl	8002ca0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e62:	3b01      	subs	r3, #1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	f023 0307 	bic.w	r3, r3, #7
 8000e70:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00a      	beq.n	8000e92 <prvInitialiseNewTask+0x58>
        __asm volatile
 8000e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e80:	f383 8811 	msr	BASEPRI, r3
 8000e84:	f3bf 8f6f 	isb	sy
 8000e88:	f3bf 8f4f 	dsb	sy
 8000e8c:	617b      	str	r3, [r7, #20]
    }
 8000e8e:	bf00      	nop
 8000e90:	e7fe      	b.n	8000e90 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d01f      	beq.n	8000ed8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	e012      	b.n	8000ec4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	7819      	ldrb	r1, [r3, #0]
 8000ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	4413      	add	r3, r2
 8000eac:	3334      	adds	r3, #52	; 0x34
 8000eae:	460a      	mov	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	2b09      	cmp	r3, #9
 8000ec8:	d9e9      	bls.n	8000e9e <prvInitialiseNewTask+0x64>
 8000eca:	e000      	b.n	8000ece <prvInitialiseNewTask+0x94>
            {
                break;
 8000ecc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000ed6:	e003      	b.n	8000ee0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d901      	bls.n	8000eea <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ef4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef8:	2200      	movs	r2, #0
 8000efa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000efe:	3304      	adds	r3, #4
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff f9e5 	bl	80002d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f08:	3318      	adds	r3, #24
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff f9e0 	bl	80002d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f14:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f18:	f1c3 0205 	rsb	r2, r3, #5
 8000f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f28:	3350      	adds	r3, #80	; 0x50
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 feb6 	bl	8002ca0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f36:	3354      	adds	r3, #84	; 0x54
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 feaf 	bl	8002ca0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	68f9      	ldr	r1, [r7, #12]
 8000f46:	69b8      	ldr	r0, [r7, #24]
 8000f48:	f001 f8cc 	bl	80020e4 <pxPortInitialiseStack>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f50:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000f70:	f001 f9ea 	bl	8002348 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <prvAddNewTaskToReadyList+0xc0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a2b      	ldr	r2, [pc, #172]	; (8001028 <prvAddNewTaskToReadyList+0xc0>)
 8000f7c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <prvAddNewTaskToReadyList+0xc4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d109      	bne.n	8000f9a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000f86:	4a29      	ldr	r2, [pc, #164]	; (800102c <prvAddNewTaskToReadyList+0xc4>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <prvAddNewTaskToReadyList+0xc0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d110      	bne.n	8000fb6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000f94:	f000 fbfc 	bl	8001790 <prvInitialiseTaskLists>
 8000f98:	e00d      	b.n	8000fb6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <prvAddNewTaskToReadyList+0xc8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d109      	bne.n	8000fb6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <prvAddNewTaskToReadyList+0xc4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d802      	bhi.n	8000fb6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	; (800102c <prvAddNewTaskToReadyList+0xc4>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <prvAddNewTaskToReadyList+0xcc>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <prvAddNewTaskToReadyList+0xcc>)
 8000fbe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <prvAddNewTaskToReadyList+0xcc>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	2201      	movs	r2, #1
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <prvAddNewTaskToReadyList+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <prvAddNewTaskToReadyList+0xd0>)
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <prvAddNewTaskToReadyList+0xd4>)
 8000fe8:	441a      	add	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3304      	adds	r3, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	f7ff f97a 	bl	80002ea <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000ff6:	f001 f9d7 	bl	80023a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <prvAddNewTaskToReadyList+0xc8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00e      	beq.n	8001020 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <prvAddNewTaskToReadyList+0xc4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <prvAddNewTaskToReadyList+0xd8>)
 8001012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	f3bf 8f4f 	dsb	sy
 800101c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000164 	.word	0x20000164
 800102c:	2000008c 	.word	0x2000008c
 8001030:	20000170 	.word	0x20000170
 8001034:	20000180 	.word	0x20000180
 8001038:	2000016c 	.word	0x2000016c
 800103c:	20000090 	.word	0x20000090
 8001040:	e000ed04 	.word	0xe000ed04

08001044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d017      	beq.n	8001086 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <vTaskDelay+0x60>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00a      	beq.n	8001074 <vTaskDelay+0x30>
        __asm volatile
 800105e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001062:	f383 8811 	msr	BASEPRI, r3
 8001066:	f3bf 8f6f 	isb	sy
 800106a:	f3bf 8f4f 	dsb	sy
 800106e:	60bb      	str	r3, [r7, #8]
    }
 8001070:	bf00      	nop
 8001072:	e7fe      	b.n	8001072 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001074:	f000 f86c 	bl	8001150 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001078:	2100      	movs	r1, #0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fcba 	bl	80019f4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001080:	f000 f874 	bl	800116c <xTaskResumeAll>
 8001084:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d107      	bne.n	800109c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <vTaskDelay+0x64>)
 800108e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	f3bf 8f4f 	dsb	sy
 8001098:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000018c 	.word	0x2000018c
 80010a8:	e000ed04 	.word	0xe000ed04

080010ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <vTaskStartScheduler+0x88>)
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	2300      	movs	r3, #0
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2300      	movs	r3, #0
 80010bc:	2282      	movs	r2, #130	; 0x82
 80010be:	491e      	ldr	r1, [pc, #120]	; (8001138 <vTaskStartScheduler+0x8c>)
 80010c0:	481e      	ldr	r0, [pc, #120]	; (800113c <vTaskStartScheduler+0x90>)
 80010c2:	f7ff fe79 	bl	8000db8 <xTaskCreate>
 80010c6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d102      	bne.n	80010d4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80010ce:	f000 fcf7 	bl	8001ac0 <xTimerCreateTimerTask>
 80010d2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d116      	bne.n	8001108 <vTaskStartScheduler+0x5c>
        __asm volatile
 80010da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	f3bf 8f6f 	isb	sy
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	60bb      	str	r3, [r7, #8]
    }
 80010ec:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <vTaskStartScheduler+0x94>)
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <vTaskStartScheduler+0x98>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <vTaskStartScheduler+0x9c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001102:	f001 f87f 	bl	8002204 <xPortStartScheduler>
 8001106:	e00e      	b.n	8001126 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800110e:	d10a      	bne.n	8001126 <vTaskStartScheduler+0x7a>
        __asm volatile
 8001110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001114:	f383 8811 	msr	BASEPRI, r3
 8001118:	f3bf 8f6f 	isb	sy
 800111c:	f3bf 8f4f 	dsb	sy
 8001120:	607b      	str	r3, [r7, #4]
    }
 8001122:	bf00      	nop
 8001124:	e7fe      	b.n	8001124 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <vTaskStartScheduler+0xa0>)
 8001128:	681b      	ldr	r3, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000188 	.word	0x20000188
 8001138:	08003b74 	.word	0x08003b74
 800113c:	08001761 	.word	0x08001761
 8001140:	20000184 	.word	0x20000184
 8001144:	20000170 	.word	0x20000170
 8001148:	20000168 	.word	0x20000168
 800114c:	20000000 	.word	0x20000000

08001150 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <vTaskSuspendAll+0x18>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4a03      	ldr	r2, [pc, #12]	; (8001168 <vTaskSuspendAll+0x18>)
 800115c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	2000018c 	.word	0x2000018c

0800116c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800117a:	4b41      	ldr	r3, [pc, #260]	; (8001280 <xTaskResumeAll+0x114>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10a      	bne.n	8001198 <xTaskResumeAll+0x2c>
        __asm volatile
 8001182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001186:	f383 8811 	msr	BASEPRI, r3
 800118a:	f3bf 8f6f 	isb	sy
 800118e:	f3bf 8f4f 	dsb	sy
 8001192:	603b      	str	r3, [r7, #0]
    }
 8001194:	bf00      	nop
 8001196:	e7fe      	b.n	8001196 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001198:	f001 f8d6 	bl	8002348 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <xTaskResumeAll+0x114>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4a37      	ldr	r2, [pc, #220]	; (8001280 <xTaskResumeAll+0x114>)
 80011a4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011a6:	4b36      	ldr	r3, [pc, #216]	; (8001280 <xTaskResumeAll+0x114>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d161      	bne.n	8001272 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80011ae:	4b35      	ldr	r3, [pc, #212]	; (8001284 <xTaskResumeAll+0x118>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d05d      	beq.n	8001272 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011b6:	e02e      	b.n	8001216 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011b8:	4b33      	ldr	r3, [pc, #204]	; (8001288 <xTaskResumeAll+0x11c>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3318      	adds	r3, #24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f8ed 	bl	80003a4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3304      	adds	r3, #4
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f8e8 	bl	80003a4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	2201      	movs	r2, #1
 80011da:	409a      	lsls	r2, r3
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <xTaskResumeAll+0x120>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	4a2a      	ldr	r2, [pc, #168]	; (800128c <xTaskResumeAll+0x120>)
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4a27      	ldr	r2, [pc, #156]	; (8001290 <xTaskResumeAll+0x124>)
 80011f4:	441a      	add	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3304      	adds	r3, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4610      	mov	r0, r2
 80011fe:	f7ff f874 	bl	80002ea <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <xTaskResumeAll+0x128>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	429a      	cmp	r2, r3
 800120e:	d302      	bcc.n	8001216 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8001210:	4b21      	ldr	r3, [pc, #132]	; (8001298 <xTaskResumeAll+0x12c>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <xTaskResumeAll+0x11c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1cc      	bne.n	80011b8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001224:	f000 fb32 	bl	800188c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <xTaskResumeAll+0x130>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d010      	beq.n	8001256 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001234:	f000 f846 	bl	80012c4 <xTaskIncrementTick>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <xTaskResumeAll+0x12c>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f1      	bne.n	8001234 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <xTaskResumeAll+0x130>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <xTaskResumeAll+0x12c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800125e:	2301      	movs	r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <xTaskResumeAll+0x134>)
 8001264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	f3bf 8f4f 	dsb	sy
 800126e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001272:	f001 f899 	bl	80023a8 <vPortExitCritical>

    return xAlreadyYielded;
 8001276:	68bb      	ldr	r3, [r7, #8]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000018c 	.word	0x2000018c
 8001284:	20000164 	.word	0x20000164
 8001288:	20000124 	.word	0x20000124
 800128c:	2000016c 	.word	0x2000016c
 8001290:	20000090 	.word	0x20000090
 8001294:	2000008c 	.word	0x2000008c
 8001298:	20000178 	.word	0x20000178
 800129c:	20000174 	.word	0x20000174
 80012a0:	e000ed04 	.word	0xe000ed04

080012a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <xTaskGetTickCount+0x1c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000168 	.word	0x20000168

080012c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012ce:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <xTaskIncrementTick+0x144>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 808e 	bne.w	80013f4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80012d8:	4b4c      	ldr	r3, [pc, #304]	; (800140c <xTaskIncrementTick+0x148>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80012e0:	4a4a      	ldr	r2, [pc, #296]	; (800140c <xTaskIncrementTick+0x148>)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d120      	bne.n	800132e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <xTaskIncrementTick+0x14c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00a      	beq.n	800130c <xTaskIncrementTick+0x48>
        __asm volatile
 80012f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012fa:	f383 8811 	msr	BASEPRI, r3
 80012fe:	f3bf 8f6f 	isb	sy
 8001302:	f3bf 8f4f 	dsb	sy
 8001306:	603b      	str	r3, [r7, #0]
    }
 8001308:	bf00      	nop
 800130a:	e7fe      	b.n	800130a <xTaskIncrementTick+0x46>
 800130c:	4b40      	ldr	r3, [pc, #256]	; (8001410 <xTaskIncrementTick+0x14c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <xTaskIncrementTick+0x150>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <xTaskIncrementTick+0x14c>)
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4a3e      	ldr	r2, [pc, #248]	; (8001414 <xTaskIncrementTick+0x150>)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <xTaskIncrementTick+0x154>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a3c      	ldr	r2, [pc, #240]	; (8001418 <xTaskIncrementTick+0x154>)
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	f000 faaf 	bl	800188c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <xTaskIncrementTick+0x158>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d348      	bcc.n	80013ca <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <xTaskIncrementTick+0x14c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d104      	bne.n	800134c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <xTaskIncrementTick+0x158>)
 8001344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001348:	601a      	str	r2, [r3, #0]
                    break;
 800134a:	e03e      	b.n	80013ca <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <xTaskIncrementTick+0x14c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	d203      	bcs.n	800136c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001364:	4a2d      	ldr	r2, [pc, #180]	; (800141c <xTaskIncrementTick+0x158>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800136a:	e02e      	b.n	80013ca <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3304      	adds	r3, #4
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f817 	bl	80003a4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3318      	adds	r3, #24
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f80e 	bl	80003a4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	2201      	movs	r2, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <xTaskIncrementTick+0x15c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4313      	orrs	r3, r2
 8001396:	4a22      	ldr	r2, [pc, #136]	; (8001420 <xTaskIncrementTick+0x15c>)
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <xTaskIncrementTick+0x160>)
 80013a8:	441a      	add	r2, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3304      	adds	r3, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4610      	mov	r0, r2
 80013b2:	f7fe ff9a 	bl	80002ea <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <xTaskIncrementTick+0x164>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3b9      	bcc.n	8001338 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013c8:	e7b6      	b.n	8001338 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <xTaskIncrementTick+0x164>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d0:	4914      	ldr	r1, [pc, #80]	; (8001424 <xTaskIncrementTick+0x160>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d901      	bls.n	80013e6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80013e2:	2301      	movs	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <xTaskIncrementTick+0x168>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e004      	b.n	80013fe <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <xTaskIncrementTick+0x16c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <xTaskIncrementTick+0x16c>)
 80013fc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80013fe:	697b      	ldr	r3, [r7, #20]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000018c 	.word	0x2000018c
 800140c:	20000168 	.word	0x20000168
 8001410:	2000011c 	.word	0x2000011c
 8001414:	20000120 	.word	0x20000120
 8001418:	2000017c 	.word	0x2000017c
 800141c:	20000184 	.word	0x20000184
 8001420:	2000016c 	.word	0x2000016c
 8001424:	20000090 	.word	0x20000090
 8001428:	2000008c 	.word	0x2000008c
 800142c:	20000178 	.word	0x20000178
 8001430:	20000174 	.word	0x20000174

08001434 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <vTaskSwitchContext+0xa4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <vTaskSwitchContext+0xa8>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001448:	e03f      	b.n	80014ca <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <vTaskSwitchContext+0xa8>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <vTaskSwitchContext+0xac>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	fab3 f383 	clz	r3, r3
 800145c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	f1c3 031f 	rsb	r3, r3, #31
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <vTaskSwitchContext+0xb0>)
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10a      	bne.n	8001490 <vTaskSwitchContext+0x5c>
        __asm volatile
 800147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147e:	f383 8811 	msr	BASEPRI, r3
 8001482:	f3bf 8f6f 	isb	sy
 8001486:	f3bf 8f4f 	dsb	sy
 800148a:	607b      	str	r3, [r7, #4]
    }
 800148c:	bf00      	nop
 800148e:	e7fe      	b.n	800148e <vTaskSwitchContext+0x5a>
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <vTaskSwitchContext+0xb0>)
 800149c:	4413      	add	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	3308      	adds	r3, #8
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d104      	bne.n	80014c0 <vTaskSwitchContext+0x8c>
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <vTaskSwitchContext+0xb4>)
 80014c8:	6013      	str	r3, [r2, #0]
}
 80014ca:	bf00      	nop
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2000018c 	.word	0x2000018c
 80014dc:	20000178 	.word	0x20000178
 80014e0:	2000016c 	.word	0x2000016c
 80014e4:	20000090 	.word	0x20000090
 80014e8:	2000008c 	.word	0x2000008c

080014ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10a      	bne.n	8001512 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80014fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001500:	f383 8811 	msr	BASEPRI, r3
 8001504:	f3bf 8f6f 	isb	sy
 8001508:	f3bf 8f4f 	dsb	sy
 800150c:	60fb      	str	r3, [r7, #12]
    }
 800150e:	bf00      	nop
 8001510:	e7fe      	b.n	8001510 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <vTaskPlaceOnEventList+0x44>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3318      	adds	r3, #24
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7fe ff09 	bl	8000332 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001520:	2101      	movs	r1, #1
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	f000 fa66 	bl	80019f4 <prvAddCurrentTaskToDelayedList>
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000008c 	.word	0x2000008c

08001534 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10a      	bne.n	800155c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154a:	f383 8811 	msr	BASEPRI, r3
 800154e:	f3bf 8f6f 	isb	sy
 8001552:	f3bf 8f4f 	dsb	sy
 8001556:	617b      	str	r3, [r7, #20]
    }
 8001558:	bf00      	nop
 800155a:	e7fe      	b.n	800155a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <vTaskPlaceOnEventListRestricted+0x54>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3318      	adds	r3, #24
 8001562:	4619      	mov	r1, r3
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7fe fec0 	bl	80002ea <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001574:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f000 fa3b 	bl	80019f4 <prvAddCurrentTaskToDelayedList>
    }
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000008c 	.word	0x2000008c

0800158c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10a      	bne.n	80015b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80015a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a6:	f383 8811 	msr	BASEPRI, r3
 80015aa:	f3bf 8f6f 	isb	sy
 80015ae:	f3bf 8f4f 	dsb	sy
 80015b2:	60fb      	str	r3, [r7, #12]
    }
 80015b4:	bf00      	nop
 80015b6:	e7fe      	b.n	80015b6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	3318      	adds	r3, #24
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fef1 	bl	80003a4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <xTaskRemoveFromEventList+0xac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d11c      	bne.n	8001604 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	3304      	adds	r3, #4
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe fee8 	bl	80003a4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	2201      	movs	r2, #1
 80015da:	409a      	lsls	r2, r3
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <xTaskRemoveFromEventList+0xb0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <xTaskRemoveFromEventList+0xb0>)
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4a13      	ldr	r2, [pc, #76]	; (8001640 <xTaskRemoveFromEventList+0xb4>)
 80015f4:	441a      	add	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	3304      	adds	r3, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4610      	mov	r0, r2
 80015fe:	f7fe fe74 	bl	80002ea <vListInsertEnd>
 8001602:	e005      	b.n	8001610 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	3318      	adds	r3, #24
 8001608:	4619      	mov	r1, r3
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <xTaskRemoveFromEventList+0xb8>)
 800160c:	f7fe fe6d 	bl	80002ea <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <xTaskRemoveFromEventList+0xbc>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	429a      	cmp	r2, r3
 800161c:	d905      	bls.n	800162a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800161e:	2301      	movs	r3, #1
 8001620:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <xTaskRemoveFromEventList+0xc0>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e001      	b.n	800162e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800162e:	697b      	ldr	r3, [r7, #20]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000018c 	.word	0x2000018c
 800163c:	2000016c 	.word	0x2000016c
 8001640:	20000090 	.word	0x20000090
 8001644:	20000124 	.word	0x20000124
 8001648:	2000008c 	.word	0x2000008c
 800164c:	20000178 	.word	0x20000178

08001650 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <vTaskInternalSetTimeOutState+0x24>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <vTaskInternalSetTimeOutState+0x28>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	605a      	str	r2, [r3, #4]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	2000017c 	.word	0x2000017c
 8001678:	20000168 	.word	0x20000168

0800167c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10a      	bne.n	80016a2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800168c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001690:	f383 8811 	msr	BASEPRI, r3
 8001694:	f3bf 8f6f 	isb	sy
 8001698:	f3bf 8f4f 	dsb	sy
 800169c:	613b      	str	r3, [r7, #16]
    }
 800169e:	bf00      	nop
 80016a0:	e7fe      	b.n	80016a0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10a      	bne.n	80016be <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80016a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ac:	f383 8811 	msr	BASEPRI, r3
 80016b0:	f3bf 8f6f 	isb	sy
 80016b4:	f3bf 8f4f 	dsb	sy
 80016b8:	60fb      	str	r3, [r7, #12]
    }
 80016ba:	bf00      	nop
 80016bc:	e7fe      	b.n	80016bc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80016be:	f000 fe43 	bl	8002348 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <xTaskCheckForTimeOut+0xc4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016da:	d102      	bne.n	80016e2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	e026      	b.n	8001730 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <xTaskCheckForTimeOut+0xc8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d00a      	beq.n	8001704 <xTaskCheckForTimeOut+0x88>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d305      	bcc.n	8001704 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e015      	b.n	8001730 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	429a      	cmp	r2, r3
 800170c:	d20b      	bcs.n	8001726 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	1ad2      	subs	r2, r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ff98 	bl	8001650 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	e004      	b.n	8001730 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800172c:	2301      	movs	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001730:	f000 fe3a 	bl	80023a8 <vPortExitCritical>

    return xReturn;
 8001734:	69fb      	ldr	r3, [r7, #28]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3720      	adds	r7, #32
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000168 	.word	0x20000168
 8001744:	2000017c 	.word	0x2000017c

08001748 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <vTaskMissedYield+0x14>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	20000178 	.word	0x20000178

08001760 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001768:	f000 f852 	bl	8001810 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <prvIdleTask+0x28>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d9f9      	bls.n	8001768 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <prvIdleTask+0x2c>)
 8001776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	f3bf 8f4f 	dsb	sy
 8001780:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001784:	e7f0      	b.n	8001768 <prvIdleTask+0x8>
 8001786:	bf00      	nop
 8001788:	20000090 	.word	0x20000090
 800178c:	e000ed04 	.word	0xe000ed04

08001790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e00c      	b.n	80017b6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <prvInitialiseTaskLists+0x60>)
 80017a8:	4413      	add	r3, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fd70 	bl	8000290 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3301      	adds	r3, #1
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d9ef      	bls.n	800179c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <prvInitialiseTaskLists+0x64>)
 80017be:	f7fe fd67 	bl	8000290 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <prvInitialiseTaskLists+0x68>)
 80017c4:	f7fe fd64 	bl	8000290 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <prvInitialiseTaskLists+0x6c>)
 80017ca:	f7fe fd61 	bl	8000290 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <prvInitialiseTaskLists+0x70>)
 80017d0:	f7fe fd5e 	bl	8000290 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80017d4:	480b      	ldr	r0, [pc, #44]	; (8001804 <prvInitialiseTaskLists+0x74>)
 80017d6:	f7fe fd5b 	bl	8000290 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <prvInitialiseTaskLists+0x78>)
 80017dc:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <prvInitialiseTaskLists+0x64>)
 80017de:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <prvInitialiseTaskLists+0x7c>)
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <prvInitialiseTaskLists+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000090 	.word	0x20000090
 80017f4:	200000f4 	.word	0x200000f4
 80017f8:	20000108 	.word	0x20000108
 80017fc:	20000124 	.word	0x20000124
 8001800:	20000138 	.word	0x20000138
 8001804:	20000150 	.word	0x20000150
 8001808:	2000011c 	.word	0x2000011c
 800180c:	20000120 	.word	0x20000120

08001810 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001816:	e019      	b.n	800184c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001818:	f000 fd96 	bl	8002348 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <prvCheckTasksWaitingTermination+0x50>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3304      	adds	r3, #4
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fdbb 	bl	80003a4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <prvCheckTasksWaitingTermination+0x54>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3b01      	subs	r3, #1
 8001834:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <prvCheckTasksWaitingTermination+0x54>)
 8001836:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <prvCheckTasksWaitingTermination+0x58>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <prvCheckTasksWaitingTermination+0x58>)
 8001840:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001842:	f000 fdb1 	bl	80023a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f810 	bl	800186c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <prvCheckTasksWaitingTermination+0x58>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1e1      	bne.n	8001818 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000138 	.word	0x20000138
 8001864:	20000164 	.word	0x20000164
 8001868:	2000014c 	.word	0x2000014c

0800186c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4618      	mov	r0, r3
 800187a:	f000 ff67 	bl	800274c <vPortFree>
                vPortFree( pxTCB );
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 ff64 	bl	800274c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <prvResetNextTaskUnblockTime+0x30>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d104      	bne.n	80018a4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <prvResetNextTaskUnblockTime+0x34>)
 800189c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018a0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80018a2:	e005      	b.n	80018b0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <prvResetNextTaskUnblockTime+0x30>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <prvResetNextTaskUnblockTime+0x34>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2000011c 	.word	0x2000011c
 80018c0:	20000184 	.word	0x20000184

080018c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <xTaskGetSchedulerState+0x34>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80018d2:	2301      	movs	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	e008      	b.n	80018ea <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <xTaskGetSchedulerState+0x38>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80018e0:	2302      	movs	r3, #2
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	e001      	b.n	80018ea <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80018ea:	687b      	ldr	r3, [r7, #4]
    }
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	20000170 	.word	0x20000170
 80018fc:	2000018c 	.word	0x2000018c

08001900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d063      	beq.n	80019de <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <xTaskPriorityDisinherit+0xe8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d00a      	beq.n	8001936 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	f3bf 8f6f 	isb	sy
 800192c:	f3bf 8f4f 	dsb	sy
 8001930:	60fb      	str	r3, [r7, #12]
    }
 8001932:	bf00      	nop
 8001934:	e7fe      	b.n	8001934 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10a      	bne.n	8001954 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001942:	f383 8811 	msr	BASEPRI, r3
 8001946:	f3bf 8f6f 	isb	sy
 800194a:	f3bf 8f4f 	dsb	sy
 800194e:	60bb      	str	r3, [r7, #8]
    }
 8001950:	bf00      	nop
 8001952:	e7fe      	b.n	8001952 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	1e5a      	subs	r2, r3, #1
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001966:	429a      	cmp	r2, r3
 8001968:	d039      	beq.n	80019de <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d135      	bne.n	80019de <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	3304      	adds	r3, #4
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd14 	bl	80003a4 <uxListRemove>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10a      	bne.n	8001998 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	2201      	movs	r2, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43da      	mvns	r2, r3
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <xTaskPriorityDisinherit+0xec>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4013      	ands	r3, r2
 8001994:	4a15      	ldr	r2, [pc, #84]	; (80019ec <xTaskPriorityDisinherit+0xec>)
 8001996:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	f1c3 0205 	rsb	r2, r3, #5
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	2201      	movs	r2, #1
 80019b2:	409a      	lsls	r2, r3
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <xTaskPriorityDisinherit+0xec>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <xTaskPriorityDisinherit+0xec>)
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <xTaskPriorityDisinherit+0xf0>)
 80019cc:	441a      	add	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	3304      	adds	r3, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7fe fc88 	bl	80002ea <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80019da:	2301      	movs	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80019de:	697b      	ldr	r3, [r7, #20]
    }
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000008c 	.word	0x2000008c
 80019ec:	2000016c 	.word	0x2000016c
 80019f0:	20000090 	.word	0x20000090

080019f4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fcca 	bl	80003a4 <uxListRemove>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10b      	bne.n	8001a2e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <prvAddCurrentTaskToDelayedList+0xb8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	4a20      	ldr	r2, [pc, #128]	; (8001aac <prvAddCurrentTaskToDelayedList+0xb8>)
 8001a2c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a34:	d10a      	bne.n	8001a4c <prvAddCurrentTaskToDelayedList+0x58>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3304      	adds	r3, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	481a      	ldr	r0, [pc, #104]	; (8001ab0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001a46:	f7fe fc50 	bl	80002ea <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001a4a:	e026      	b.n	8001a9a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d209      	bcs.n	8001a78 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4610      	mov	r0, r2
 8001a72:	f7fe fc5e 	bl	8000332 <vListInsert>
}
 8001a76:	e010      	b.n	8001a9a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3304      	adds	r3, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f7fe fc54 	bl	8000332 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <prvAddCurrentTaskToDelayedList+0xc8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d202      	bcs.n	8001a9a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8001a94:	4a09      	ldr	r2, [pc, #36]	; (8001abc <prvAddCurrentTaskToDelayedList+0xc8>)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	6013      	str	r3, [r2, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000168 	.word	0x20000168
 8001aa8:	2000008c 	.word	0x2000008c
 8001aac:	2000016c 	.word	0x2000016c
 8001ab0:	20000150 	.word	0x20000150
 8001ab4:	20000120 	.word	0x20000120
 8001ab8:	2000011c 	.word	0x2000011c
 8001abc:	20000184 	.word	0x20000184

08001ac0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001aca:	f000 fad5 	bl	8002078 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <xTimerCreateTimerTask+0x54>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <xTimerCreateTimerTask+0x58>)
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	2302      	movs	r3, #2
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ae4:	490d      	ldr	r1, [pc, #52]	; (8001b1c <xTimerCreateTimerTask+0x5c>)
 8001ae6:	480e      	ldr	r0, [pc, #56]	; (8001b20 <xTimerCreateTimerTask+0x60>)
 8001ae8:	f7ff f966 	bl	8000db8 <xTaskCreate>
 8001aec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10a      	bne.n	8001b0a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	603b      	str	r3, [r7, #0]
    }
 8001b06:	bf00      	nop
 8001b08:	e7fe      	b.n	8001b08 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001b0a:	687b      	ldr	r3, [r7, #4]
    }
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200001c0 	.word	0x200001c0
 8001b18:	200001c4 	.word	0x200001c4
 8001b1c:	08003b7c 	.word	0x08003b7c
 8001b20:	08001c59 	.word	0x08001c59

08001b24 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10a      	bne.n	8001b52 <xTimerGenericCommand+0x2e>
        __asm volatile
 8001b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b40:	f383 8811 	msr	BASEPRI, r3
 8001b44:	f3bf 8f6f 	isb	sy
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	623b      	str	r3, [r7, #32]
    }
 8001b4e:	bf00      	nop
 8001b50:	e7fe      	b.n	8001b50 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <xTimerGenericCommand+0x98>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d02a      	beq.n	8001bb0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	dc18      	bgt.n	8001b9e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001b6c:	f7ff feaa 	bl	80018c4 <xTaskGetSchedulerState>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d109      	bne.n	8001b8a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <xTimerGenericCommand+0x98>)
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	f107 0114 	add.w	r1, r7, #20
 8001b7e:	2300      	movs	r3, #0
 8001b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b82:	f7fe fd23 	bl	80005cc <xQueueGenericSend>
 8001b86:	6278      	str	r0, [r7, #36]	; 0x24
 8001b88:	e012      	b.n	8001bb0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <xTimerGenericCommand+0x98>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	f107 0114 	add.w	r1, r7, #20
 8001b92:	2300      	movs	r3, #0
 8001b94:	2200      	movs	r2, #0
 8001b96:	f7fe fd19 	bl	80005cc <xQueueGenericSend>
 8001b9a:	6278      	str	r0, [r7, #36]	; 0x24
 8001b9c:	e008      	b.n	8001bb0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <xTimerGenericCommand+0x98>)
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	f107 0114 	add.w	r1, r7, #20
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	f7fe fe0d 	bl	80007c8 <xQueueGenericSendFromISR>
 8001bae:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200001c0 	.word	0x200001c0

08001bc0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <prvProcessExpiredTimer+0x94>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fbe3 	bl	80003a4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d022      	beq.n	8001c32 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	18d1      	adds	r1, r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	6978      	ldr	r0, [r7, #20]
 8001bfa:	f000 f8d1 	bl	8001da0 <prvInsertTimerInActiveList>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01f      	beq.n	8001c44 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001c04:	2300      	movs	r3, #0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff88 	bl	8001b24 <xTimerGenericCommand>
 8001c14:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d113      	bne.n	8001c44 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8001c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c20:	f383 8811 	msr	BASEPRI, r3
 8001c24:	f3bf 8f6f 	isb	sy
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	60fb      	str	r3, [r7, #12]
    }
 8001c2e:	bf00      	nop
 8001c30:	e7fe      	b.n	8001c30 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	6978      	ldr	r0, [r7, #20]
 8001c4a:	4798      	blx	r3
    }
 8001c4c:	bf00      	nop
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200001b8 	.word	0x200001b8

08001c58 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f857 	bl	8001d18 <prvGetNextExpireTime>
 8001c6a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f803 	bl	8001c7c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001c76:	f000 f8d5 	bl	8001e24 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001c7a:	e7f1      	b.n	8001c60 <prvTimerTask+0x8>

08001c7c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001c86:	f7ff fa63 	bl	8001150 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f866 	bl	8001d60 <prvSampleTimeNow>
 8001c94:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d130      	bne.n	8001cfe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10a      	bne.n	8001cb8 <prvProcessTimerOrBlockTask+0x3c>
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d806      	bhi.n	8001cb8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001caa:	f7ff fa5f 	bl	800116c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001cae:	68f9      	ldr	r1, [r7, #12]
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff85 	bl	8001bc0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001cb6:	e024      	b.n	8001d02 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d008      	beq.n	8001cd0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <prvProcessTimerOrBlockTask+0x90>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <prvProcessTimerOrBlockTask+0x50>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <prvProcessTimerOrBlockTask+0x52>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <prvProcessTimerOrBlockTask+0x94>)
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7ff f837 	bl	8000d50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001ce2:	f7ff fa43 	bl	800116c <xTaskResumeAll>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <prvProcessTimerOrBlockTask+0x98>)
 8001cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f3bf 8f4f 	dsb	sy
 8001cf8:	f3bf 8f6f 	isb	sy
    }
 8001cfc:	e001      	b.n	8001d02 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001cfe:	f7ff fa35 	bl	800116c <xTaskResumeAll>
    }
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200001bc 	.word	0x200001bc
 8001d10:	200001c0 	.word	0x200001c0
 8001d14:	e000ed04 	.word	0xe000ed04

08001d18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <prvGetNextExpireTime+0x44>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <prvGetNextExpireTime+0x16>
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	e000      	b.n	8001d30 <prvGetNextExpireTime+0x18>
 8001d2e:	2200      	movs	r2, #0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <prvGetNextExpireTime+0x44>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e001      	b.n	8001d4c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    }
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	200001b8 	.word	0x200001b8

08001d60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001d68:	f7ff fa9c 	bl	80012a4 <xTaskGetTickCount>
 8001d6c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <prvSampleTimeNow+0x3c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d205      	bcs.n	8001d84 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001d78:	f000 f91a 	bl	8001fb0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e002      	b.n	8001d8a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <prvSampleTimeNow+0x3c>)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001d90:	68fb      	ldr	r3, [r7, #12]
    }
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200001c8 	.word	0x200001c8

08001da0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d812      	bhi.n	8001dec <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	1ad2      	subs	r2, r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d302      	bcc.n	8001dda <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	e01b      	b.n	8001e12 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <prvInsertTimerInActiveList+0x7c>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	3304      	adds	r3, #4
 8001de2:	4619      	mov	r1, r3
 8001de4:	4610      	mov	r0, r2
 8001de6:	f7fe faa4 	bl	8000332 <vListInsert>
 8001dea:	e012      	b.n	8001e12 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d206      	bcs.n	8001e02 <prvInsertTimerInActiveList+0x62>
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d302      	bcc.n	8001e02 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e007      	b.n	8001e12 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <prvInsertTimerInActiveList+0x80>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f7fe fa90 	bl	8000332 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001e12:	697b      	ldr	r3, [r7, #20]
    }
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200001bc 	.word	0x200001bc
 8001e20:	200001b8 	.word	0x200001b8

08001e24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001e2a:	e0ae      	b.n	8001f8a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f2c0 80aa 	blt.w	8001f88 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d004      	beq.n	8001e4a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	3304      	adds	r3, #4
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe faad 	bl	80003a4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff87 	bl	8001d60 <prvSampleTimeNow>
 8001e52:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	f200 8097 	bhi.w	8001f8a <prvProcessReceivedCommands+0x166>
 8001e5c:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <prvProcessReceivedCommands+0x40>)
 8001e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e62:	bf00      	nop
 8001e64:	08001e8d 	.word	0x08001e8d
 8001e68:	08001e8d 	.word	0x08001e8d
 8001e6c:	08001e8d 	.word	0x08001e8d
 8001e70:	08001f01 	.word	0x08001f01
 8001e74:	08001f15 	.word	0x08001f15
 8001e78:	08001f5f 	.word	0x08001f5f
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	08001e8d 	.word	0x08001e8d
 8001e84:	08001f01 	.word	0x08001f01
 8001e88:	08001f15 	.word	0x08001f15
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	18d1      	adds	r1, r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a3a      	ldr	r2, [r7, #32]
 8001eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eac:	f7ff ff78 	bl	8001da0 <prvInsertTimerInActiveList>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d069      	beq.n	8001f8a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ebc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d05e      	beq.n	8001f8a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	441a      	add	r2, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ede:	f7ff fe21 	bl	8001b24 <xTimerGenericCommand>
 8001ee2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d14f      	bne.n	8001f8a <prvProcessReceivedCommands+0x166>
        __asm volatile
 8001eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eee:	f383 8811 	msr	BASEPRI, r3
 8001ef2:	f3bf 8f6f 	isb	sy
 8001ef6:	f3bf 8f4f 	dsb	sy
 8001efa:	61bb      	str	r3, [r7, #24]
    }
 8001efc:	bf00      	nop
 8001efe:	e7fe      	b.n	8001efe <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001f12:	e03a      	b.n	8001f8a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10a      	bne.n	8001f4a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8001f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f38:	f383 8811 	msr	BASEPRI, r3
 8001f3c:	f3bf 8f6f 	isb	sy
 8001f40:	f3bf 8f4f 	dsb	sy
 8001f44:	617b      	str	r3, [r7, #20]
    }
 8001f46:	bf00      	nop
 8001f48:	e7fe      	b.n	8001f48 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	18d1      	adds	r1, r2, r3
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	6a3a      	ldr	r2, [r7, #32]
 8001f56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f58:	f7ff ff22 	bl	8001da0 <prvInsertTimerInActiveList>
                        break;
 8001f5c:	e015      	b.n	8001f8a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8001f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f6e:	f000 fbed 	bl	800274c <vPortFree>
 8001f72:	e00a      	b.n	8001f8a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001f86:	e000      	b.n	8001f8a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001f88:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <prvProcessReceivedCommands+0x188>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f107 0108 	add.w	r1, r7, #8
 8001f92:	2200      	movs	r2, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fcc1 	bl	800091c <xQueueReceive>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f47f af45 	bne.w	8001e2c <prvProcessReceivedCommands+0x8>
        }
    }
 8001fa2:	bf00      	nop
 8001fa4:	bf00      	nop
 8001fa6:	3728      	adds	r7, #40	; 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200001c0 	.word	0x200001c0

08001fb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001fb6:	e048      	b.n	800204a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <prvSwitchTimerLists+0xc0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <prvSwitchTimerLists+0xc0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe f9e7 	bl	80003a4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02e      	beq.n	800204a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90e      	bls.n	800201c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <prvSwitchTimerLists+0xc0>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3304      	adds	r3, #4
 8002012:	4619      	mov	r1, r3
 8002014:	4610      	mov	r0, r2
 8002016:	f7fe f98c 	bl	8000332 <vListInsert>
 800201a:	e016      	b.n	800204a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800201c:	2300      	movs	r3, #0
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2300      	movs	r3, #0
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	2100      	movs	r1, #0
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7ff fd7c 	bl	8001b24 <xTimerGenericCommand>
 800202c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	603b      	str	r3, [r7, #0]
    }
 8002046:	bf00      	nop
 8002048:	e7fe      	b.n	8002048 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <prvSwitchTimerLists+0xc0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1b1      	bne.n	8001fb8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <prvSwitchTimerLists+0xc0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <prvSwitchTimerLists+0xc4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <prvSwitchTimerLists+0xc0>)
 8002060:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <prvSwitchTimerLists+0xc4>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	6013      	str	r3, [r2, #0]
    }
 8002068:	bf00      	nop
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200001b8 	.word	0x200001b8
 8002074:	200001bc 	.word	0x200001bc

08002078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800207c:	f000 f964 	bl	8002348 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <prvCheckForValidListAndQueue+0x54>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d11d      	bne.n	80020c4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002088:	4811      	ldr	r0, [pc, #68]	; (80020d0 <prvCheckForValidListAndQueue+0x58>)
 800208a:	f7fe f901 	bl	8000290 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800208e:	4811      	ldr	r0, [pc, #68]	; (80020d4 <prvCheckForValidListAndQueue+0x5c>)
 8002090:	f7fe f8fe 	bl	8000290 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <prvCheckForValidListAndQueue+0x60>)
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <prvCheckForValidListAndQueue+0x58>)
 8002098:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <prvCheckForValidListAndQueue+0x64>)
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <prvCheckForValidListAndQueue+0x5c>)
 800209e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80020a0:	2200      	movs	r2, #0
 80020a2:	210c      	movs	r1, #12
 80020a4:	200a      	movs	r0, #10
 80020a6:	f7fe fa0f 	bl	80004c8 <xQueueGenericCreate>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <prvCheckForValidListAndQueue+0x54>)
 80020ae:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <prvCheckForValidListAndQueue+0x54>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <prvCheckForValidListAndQueue+0x54>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4908      	ldr	r1, [pc, #32]	; (80020e0 <prvCheckForValidListAndQueue+0x68>)
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fe1c 	bl	8000cfc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80020c4:	f000 f970 	bl	80023a8 <vPortExitCritical>
    }
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200001c0 	.word	0x200001c0
 80020d0:	20000190 	.word	0x20000190
 80020d4:	200001a4 	.word	0x200001a4
 80020d8:	200001b8 	.word	0x200001b8
 80020dc:	200001bc 	.word	0x200001bc
 80020e0:	08003b84 	.word	0x08003b84

080020e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3b04      	subs	r3, #4
 80020f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3b04      	subs	r3, #4
 8002102:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f023 0201 	bic.w	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3b04      	subs	r3, #4
 8002112:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <pxPortInitialiseStack+0x64>)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3b14      	subs	r3, #20
 800211e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3b04      	subs	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f06f 0202 	mvn.w	r2, #2
 8002132:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3b20      	subs	r3, #32
 8002138:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	0800214d 	.word	0x0800214d

0800214c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <prvTaskExitError+0x54>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800215e:	d00a      	beq.n	8002176 <prvTaskExitError+0x2a>
        __asm volatile
 8002160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002164:	f383 8811 	msr	BASEPRI, r3
 8002168:	f3bf 8f6f 	isb	sy
 800216c:	f3bf 8f4f 	dsb	sy
 8002170:	60fb      	str	r3, [r7, #12]
    }
 8002172:	bf00      	nop
 8002174:	e7fe      	b.n	8002174 <prvTaskExitError+0x28>
        __asm volatile
 8002176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	60bb      	str	r3, [r7, #8]
    }
 8002188:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800218a:	bf00      	nop
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0fc      	beq.n	800218c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000004 	.word	0x20000004
	...

080021b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <pxCurrentTCBConst2>)
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	6808      	ldr	r0, [r1, #0]
 80021b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ba:	f380 8809 	msr	PSP, r0
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f04f 0000 	mov.w	r0, #0
 80021c6:	f380 8811 	msr	BASEPRI, r0
 80021ca:	4770      	bx	lr
 80021cc:	f3af 8000 	nop.w

080021d0 <pxCurrentTCBConst2>:
 80021d0:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop

080021d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80021d8:	4808      	ldr	r0, [pc, #32]	; (80021fc <prvPortStartFirstTask+0x24>)
 80021da:	6800      	ldr	r0, [r0, #0]
 80021dc:	6800      	ldr	r0, [r0, #0]
 80021de:	f380 8808 	msr	MSP, r0
 80021e2:	f04f 0000 	mov.w	r0, #0
 80021e6:	f380 8814 	msr	CONTROL, r0
 80021ea:	b662      	cpsie	i
 80021ec:	b661      	cpsie	f
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	f3bf 8f6f 	isb	sy
 80021f6:	df00      	svc	0
 80021f8:	bf00      	nop
 80021fa:	0000      	.short	0x0000
 80021fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop

08002204 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800220a:	4b46      	ldr	r3, [pc, #280]	; (8002324 <xPortStartScheduler+0x120>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a46      	ldr	r2, [pc, #280]	; (8002328 <xPortStartScheduler+0x124>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d10a      	bne.n	800222a <xPortStartScheduler+0x26>
        __asm volatile
 8002214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002218:	f383 8811 	msr	BASEPRI, r3
 800221c:	f3bf 8f6f 	isb	sy
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	613b      	str	r3, [r7, #16]
    }
 8002226:	bf00      	nop
 8002228:	e7fe      	b.n	8002228 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800222a:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <xPortStartScheduler+0x120>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a3f      	ldr	r2, [pc, #252]	; (800232c <xPortStartScheduler+0x128>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d10a      	bne.n	800224a <xPortStartScheduler+0x46>
        __asm volatile
 8002234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	60fb      	str	r3, [r7, #12]
    }
 8002246:	bf00      	nop
 8002248:	e7fe      	b.n	8002248 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800224a:	4b39      	ldr	r3, [pc, #228]	; (8002330 <xPortStartScheduler+0x12c>)
 800224c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	22ff      	movs	r2, #255	; 0xff
 800225a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <xPortStartScheduler+0x130>)
 8002270:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002272:	4b31      	ldr	r3, [pc, #196]	; (8002338 <xPortStartScheduler+0x134>)
 8002274:	2207      	movs	r2, #7
 8002276:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002278:	e009      	b.n	800228e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800227a:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <xPortStartScheduler+0x134>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3b01      	subs	r3, #1
 8002280:	4a2d      	ldr	r2, [pc, #180]	; (8002338 <xPortStartScheduler+0x134>)
 8002282:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b80      	cmp	r3, #128	; 0x80
 8002298:	d0ef      	beq.n	800227a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <xPortStartScheduler+0x134>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d00a      	beq.n	80022bc <xPortStartScheduler+0xb8>
        __asm volatile
 80022a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022aa:	f383 8811 	msr	BASEPRI, r3
 80022ae:	f3bf 8f6f 	isb	sy
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	60bb      	str	r3, [r7, #8]
    }
 80022b8:	bf00      	nop
 80022ba:	e7fe      	b.n	80022ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <xPortStartScheduler+0x134>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <xPortStartScheduler+0x134>)
 80022c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80022c6:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <xPortStartScheduler+0x134>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022ce:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <xPortStartScheduler+0x134>)
 80022d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <xPortStartScheduler+0x138>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a17      	ldr	r2, [pc, #92]	; (800233c <xPortStartScheduler+0x138>)
 80022e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <xPortStartScheduler+0x138>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a14      	ldr	r2, [pc, #80]	; (800233c <xPortStartScheduler+0x138>)
 80022ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80022f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80022f2:	f000 f8db 	bl	80024ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <xPortStartScheduler+0x13c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80022fc:	f000 f8fa 	bl	80024f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <xPortStartScheduler+0x140>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0f      	ldr	r2, [pc, #60]	; (8002344 <xPortStartScheduler+0x140>)
 8002306:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800230a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800230c:	f7ff ff64 	bl	80021d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002310:	f7ff f890 	bl	8001434 <vTaskSwitchContext>
    prvTaskExitError();
 8002314:	f7ff ff1a 	bl	800214c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00
 8002328:	410fc271 	.word	0x410fc271
 800232c:	410fc270 	.word	0x410fc270
 8002330:	e000e400 	.word	0xe000e400
 8002334:	200001cc 	.word	0x200001cc
 8002338:	200001d0 	.word	0x200001d0
 800233c:	e000ed20 	.word	0xe000ed20
 8002340:	20000004 	.word	0x20000004
 8002344:	e000ef34 	.word	0xe000ef34

08002348 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
        __asm volatile
 800234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	607b      	str	r3, [r7, #4]
    }
 8002360:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <vPortEnterCritical+0x58>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <vPortEnterCritical+0x58>)
 800236a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <vPortEnterCritical+0x58>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10f      	bne.n	8002394 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <vPortEnterCritical+0x5c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <vPortEnterCritical+0x4c>
        __asm volatile
 800237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	603b      	str	r3, [r7, #0]
    }
 8002390:	bf00      	nop
 8002392:	e7fe      	b.n	8002392 <vPortEnterCritical+0x4a>
    }
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	20000004 	.word	0x20000004
 80023a4:	e000ed04 	.word	0xe000ed04

080023a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <vPortExitCritical+0x50>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10a      	bne.n	80023cc <vPortExitCritical+0x24>
        __asm volatile
 80023b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	607b      	str	r3, [r7, #4]
    }
 80023c8:	bf00      	nop
 80023ca:	e7fe      	b.n	80023ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <vPortExitCritical+0x50>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <vPortExitCritical+0x50>)
 80023d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <vPortExitCritical+0x50>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <vPortExitCritical+0x42>
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f383 8811 	msr	BASEPRI, r3
    }
 80023e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000004 	.word	0x20000004
 80023fc:	00000000 	.word	0x00000000

08002400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002400:	f3ef 8009 	mrs	r0, PSP
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <pxCurrentTCBConst>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	f01e 0f10 	tst.w	lr, #16
 8002410:	bf08      	it	eq
 8002412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241a:	6010      	str	r0, [r2, #0]
 800241c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002424:	f380 8811 	msr	BASEPRI, r0
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f7ff f800 	bl	8001434 <vTaskSwitchContext>
 8002434:	f04f 0000 	mov.w	r0, #0
 8002438:	f380 8811 	msr	BASEPRI, r0
 800243c:	bc09      	pop	{r0, r3}
 800243e:	6819      	ldr	r1, [r3, #0]
 8002440:	6808      	ldr	r0, [r1, #0]
 8002442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002446:	f01e 0f10 	tst.w	lr, #16
 800244a:	bf08      	it	eq
 800244c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002450:	f380 8809 	msr	PSP, r0
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	f3af 8000 	nop.w

08002460 <pxCurrentTCBConst>:
 8002460:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop

08002468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
        __asm volatile
 800246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	607b      	str	r3, [r7, #4]
    }
 8002480:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002482:	f7fe ff1f 	bl	80012c4 <xTaskIncrementTick>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <SysTick_Handler+0x40>)
 800248e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	2300      	movs	r3, #0
 8002496:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f383 8811 	msr	BASEPRI, r3
    }
 800249e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	e000ed04 	.word	0xe000ed04

080024ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <vPortSetupTimerInterrupt+0x34>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <vPortSetupTimerInterrupt+0x38>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <vPortSetupTimerInterrupt+0x3c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <vPortSetupTimerInterrupt+0x40>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <vPortSetupTimerInterrupt+0x44>)
 80024ca:	3b01      	subs	r3, #1
 80024cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <vPortSetupTimerInterrupt+0x34>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010
 80024e4:	e000e018 	.word	0xe000e018
 80024e8:	20000008 	.word	0x20000008
 80024ec:	10624dd3 	.word	0x10624dd3
 80024f0:	e000e014 	.word	0xe000e014

080024f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80024f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002504 <vPortEnableVFP+0x10>
 80024f8:	6801      	ldr	r1, [r0, #0]
 80024fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80024fe:	6001      	str	r1, [r0, #0]
 8002500:	4770      	bx	lr
 8002502:	0000      	.short	0x0000
 8002504:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop

0800250c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002512:	f3ef 8305 	mrs	r3, IPSR
 8002516:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	d914      	bls.n	8002548 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800251e:	4a17      	ldr	r2, [pc, #92]	; (800257c <vPortValidateInterruptPriority+0x70>)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <vPortValidateInterruptPriority+0x74>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	7afa      	ldrb	r2, [r7, #11]
 800252e:	429a      	cmp	r2, r3
 8002530:	d20a      	bcs.n	8002548 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	607b      	str	r3, [r7, #4]
    }
 8002544:	bf00      	nop
 8002546:	e7fe      	b.n	8002546 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <vPortValidateInterruptPriority+0x78>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <vPortValidateInterruptPriority+0x7c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d90a      	bls.n	800256e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	603b      	str	r3, [r7, #0]
    }
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <vPortValidateInterruptPriority+0x60>
    }
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e3f0 	.word	0xe000e3f0
 8002580:	200001cc 	.word	0x200001cc
 8002584:	e000ed0c 	.word	0xe000ed0c
 8002588:	200001d0 	.word	0x200001d0

0800258c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002598:	f7fe fdda 	bl	8001150 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800259c:	4b65      	ldr	r3, [pc, #404]	; (8002734 <pvPortMalloc+0x1a8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80025a4:	f000 f934 	bl	8002810 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80025a8:	4b63      	ldr	r3, [pc, #396]	; (8002738 <pvPortMalloc+0x1ac>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f040 80a7 	bne.w	8002704 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d02d      	beq.n	8002618 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80025bc:	2208      	movs	r2, #8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d227      	bcs.n	8002618 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80025c8:	2208      	movs	r2, #8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d021      	beq.n	800261e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f023 0307 	bic.w	r3, r3, #7
 80025e0:	3308      	adds	r3, #8
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d214      	bcs.n	8002612 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f023 0307 	bic.w	r3, r3, #7
 80025ee:	3308      	adds	r3, #8
 80025f0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d010      	beq.n	800261e <pvPortMalloc+0x92>
        __asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	617b      	str	r3, [r7, #20]
    }
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002616:	e002      	b.n	800261e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	e000      	b.n	8002620 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800261e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d06e      	beq.n	8002704 <pvPortMalloc+0x178>
 8002626:	4b45      	ldr	r3, [pc, #276]	; (800273c <pvPortMalloc+0x1b0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	d869      	bhi.n	8002704 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002630:	4b43      	ldr	r3, [pc, #268]	; (8002740 <pvPortMalloc+0x1b4>)
 8002632:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <pvPortMalloc+0x1b4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800263a:	e004      	b.n	8002646 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	d903      	bls.n	8002658 <pvPortMalloc+0xcc>
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f1      	bne.n	800263c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002658:	4b36      	ldr	r3, [pc, #216]	; (8002734 <pvPortMalloc+0x1a8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265e:	429a      	cmp	r2, r3
 8002660:	d050      	beq.n	8002704 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2208      	movs	r2, #8
 8002668:	4413      	add	r3, r2
 800266a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	1ad2      	subs	r2, r2, r3
 800267c:	2308      	movs	r3, #8
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	429a      	cmp	r2, r3
 8002682:	d91f      	bls.n	80026c4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <pvPortMalloc+0x120>
        __asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	613b      	str	r3, [r7, #16]
    }
 80026a8:	bf00      	nop
 80026aa:	e7fe      	b.n	80026aa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	1ad2      	subs	r2, r2, r3
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80026be:	69b8      	ldr	r0, [r7, #24]
 80026c0:	f000 f908 	bl	80028d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <pvPortMalloc+0x1b0>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	4a1b      	ldr	r2, [pc, #108]	; (800273c <pvPortMalloc+0x1b0>)
 80026d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <pvPortMalloc+0x1b0>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <pvPortMalloc+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d203      	bcs.n	80026e6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <pvPortMalloc+0x1b0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a18      	ldr	r2, [pc, #96]	; (8002744 <pvPortMalloc+0x1b8>)
 80026e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <pvPortMalloc+0x1ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <pvPortMalloc+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3301      	adds	r3, #1
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <pvPortMalloc+0x1bc>)
 8002702:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002704:	f7fe fd32 	bl	800116c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <pvPortMalloc+0x19c>
        __asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	60fb      	str	r3, [r7, #12]
    }
 8002724:	bf00      	nop
 8002726:	e7fe      	b.n	8002726 <pvPortMalloc+0x19a>
    return pvReturn;
 8002728:	69fb      	ldr	r3, [r7, #28]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3728      	adds	r7, #40	; 0x28
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20012ddc 	.word	0x20012ddc
 8002738:	20012df0 	.word	0x20012df0
 800273c:	20012de0 	.word	0x20012de0
 8002740:	20012dd4 	.word	0x20012dd4
 8002744:	20012de4 	.word	0x20012de4
 8002748:	20012de8 	.word	0x20012de8

0800274c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d04d      	beq.n	80027fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800275e:	2308      	movs	r3, #8
 8002760:	425b      	negs	r3, r3
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4413      	add	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <vPortFree+0xb8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <vPortFree+0x44>
        __asm volatile
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	60fb      	str	r3, [r7, #12]
    }
 800278c:	bf00      	nop
 800278e:	e7fe      	b.n	800278e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <vPortFree+0x62>
        __asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	60bb      	str	r3, [r7, #8]
    }
 80027aa:	bf00      	nop
 80027ac:	e7fe      	b.n	80027ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <vPortFree+0xb8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01e      	beq.n	80027fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11a      	bne.n	80027fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <vPortFree+0xb8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	401a      	ands	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80027d4:	f7fe fcbc 	bl	8001150 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <vPortFree+0xbc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a09      	ldr	r2, [pc, #36]	; (8002808 <vPortFree+0xbc>)
 80027e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80027e6:	6938      	ldr	r0, [r7, #16]
 80027e8:	f000 f874 	bl	80028d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80027ec:	4b07      	ldr	r3, [pc, #28]	; (800280c <vPortFree+0xc0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	4a06      	ldr	r2, [pc, #24]	; (800280c <vPortFree+0xc0>)
 80027f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80027f6:	f7fe fcb9 	bl	800116c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20012df0 	.word	0x20012df0
 8002808:	20012de0 	.word	0x20012de0
 800280c:	20012dec 	.word	0x20012dec

08002810 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002816:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800281a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <prvHeapInit+0xac>)
 800281e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00c      	beq.n	8002844 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3307      	adds	r3, #7
 800282e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0307 	bic.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <prvHeapInit+0xac>)
 8002840:	4413      	add	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002848:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <prvHeapInit+0xb0>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <prvHeapInit+0xb0>)
 8002850:	2200      	movs	r2, #0
 8002852:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	4413      	add	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800285c:	2208      	movs	r2, #8
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0307 	bic.w	r3, r3, #7
 800286a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <prvHeapInit+0xb4>)
 8002870:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <prvHeapInit+0xb4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <prvHeapInit+0xb4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	1ad2      	subs	r2, r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <prvHeapInit+0xb4>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <prvHeapInit+0xb8>)
 800289e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a09      	ldr	r2, [pc, #36]	; (80028cc <prvHeapInit+0xbc>)
 80028a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <prvHeapInit+0xc0>)
 80028aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028ae:	601a      	str	r2, [r3, #0]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	200001d4 	.word	0x200001d4
 80028c0:	20012dd4 	.word	0x20012dd4
 80028c4:	20012ddc 	.word	0x20012ddc
 80028c8:	20012de4 	.word	0x20012de4
 80028cc:	20012de0 	.word	0x20012de0
 80028d0:	20012df0 	.word	0x20012df0

080028d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <prvInsertBlockIntoFreeList+0xac>)
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e002      	b.n	80028e8 <prvInsertBlockIntoFreeList+0x14>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d8f7      	bhi.n	80028e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	4413      	add	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d108      	bne.n	8002916 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	441a      	add	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	441a      	add	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d118      	bne.n	800295c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <prvInsertBlockIntoFreeList+0xb0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d00d      	beq.n	8002952 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	441a      	add	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e008      	b.n	8002964 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <prvInsertBlockIntoFreeList+0xb0>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e003      	b.n	8002964 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d002      	beq.n	8002972 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20012dd4 	.word	0x20012dd4
 8002984:	20012ddc 	.word	0x20012ddc

08002988 <main>:
uint32_t SystemCoreClock = 16000000;

static void task1_handler(void* parameters);
static void task2_handler(void* parameters);

int main(void) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af02      	add	r7, sp, #8
	TaskHandle_t task1_handle;
	TaskHandle_t task2_handle;

	xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2302      	movs	r3, #2
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	22c8      	movs	r2, #200	; 0xc8
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <main+0x34>)
 800299c:	4808      	ldr	r0, [pc, #32]	; (80029c0 <main+0x38>)
 800299e:	f7fe fa0b 	bl	8000db8 <xTaskCreate>
	xTaskCreate(task2_handler, "Task-2", 200, NULL, 2, &task2_handle);
 80029a2:	463b      	mov	r3, r7
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	2302      	movs	r3, #2
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2300      	movs	r3, #0
 80029ac:	22c8      	movs	r2, #200	; 0xc8
 80029ae:	4905      	ldr	r1, [pc, #20]	; (80029c4 <main+0x3c>)
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <main+0x40>)
 80029b2:	f7fe fa01 	bl	8000db8 <xTaskCreate>
	vTaskStartScheduler();
 80029b6:	f7fe fb79 	bl	80010ac <vTaskStartScheduler>

	while (1);
 80029ba:	e7fe      	b.n	80029ba <main+0x32>
 80029bc:	08003b8c 	.word	0x08003b8c
 80029c0:	080029cd 	.word	0x080029cd
 80029c4:	08003b94 	.word	0x08003b94
 80029c8:	08002a09 	.word	0x08002a09

080029cc <task1_handler>:
}

static void task1_handler(void* parameters) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	int count = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
	while (1) {
		printf("task1 %d\n", count);
 80029d8:	68f9      	ldr	r1, [r7, #12]
 80029da:	4809      	ldr	r0, [pc, #36]	; (8002a00 <task1_handler+0x34>)
 80029dc:	f000 f968 	bl	8002cb0 <iprintf>
		count++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
		vTaskDelay(1000);
 80029e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ea:	f7fe fb2b 	bl	8001044 <vTaskDelay>
		taskYIELD();
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <task1_handler+0x38>)
 80029f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	f3bf 8f6f 	isb	sy
		printf("task1 %d\n", count);
 80029fe:	e7eb      	b.n	80029d8 <task1_handler+0xc>
 8002a00:	08003b9c 	.word	0x08003b9c
 8002a04:	e000ed04 	.word	0xe000ed04

08002a08 <task2_handler>:
	}
}

static void task2_handler(void* parameters) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	int count = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
	while (1) {
		printf("task2 %d\n", count);
 8002a14:	68f9      	ldr	r1, [r7, #12]
 8002a16:	4809      	ldr	r0, [pc, #36]	; (8002a3c <task2_handler+0x34>)
 8002a18:	f000 f94a 	bl	8002cb0 <iprintf>
		count++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
		vTaskDelay(1000);
 8002a22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a26:	f7fe fb0d 	bl	8001044 <vTaskDelay>
		taskYIELD();
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <task2_handler+0x38>)
 8002a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	f3bf 8f6f 	isb	sy
		printf("task2 %d\n", count);
 8002a3a:	e7eb      	b.n	8002a14 <task2_handler+0xc>
 8002a3c:	08003ba8 	.word	0x08003ba8
 8002a40:	e000ed04 	.word	0xe000ed04

08002a44 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <ITM_SendChar+0x48>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <ITM_SendChar+0x48>)
 8002a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a58:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <ITM_SendChar+0x4c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <ITM_SendChar+0x4c>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002a66:	bf00      	nop
 8002a68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f8      	beq.n	8002a68 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002a76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	6013      	str	r3, [r2, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000edfc 	.word	0xe000edfc
 8002a90:	e0000e00 	.word	0xe0000e00

08002a94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e00a      	b.n	8002abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aa6:	f3af 8000 	nop.w
 8002aaa:	4601      	mov	r1, r0
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	60ba      	str	r2, [r7, #8]
 8002ab2:	b2ca      	uxtb	r2, r1
 8002ab4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	dbf0      	blt.n	8002aa6 <_read+0x12>
	}

return len;
 8002ac4:	687b      	ldr	r3, [r7, #4]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e009      	b.n	8002af4 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	60ba      	str	r2, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ffab 	bl	8002a44 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3301      	adds	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	dbf1      	blt.n	8002ae0 <_write+0x12>
	}
	return len;
 8002afc:	687b      	ldr	r3, [r7, #4]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <_close>:

int _close(int file)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b2e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <_isatty>:

int _isatty(int file)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
	return 1;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <_sbrk+0x5c>)
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <_sbrk+0x60>)
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <_sbrk+0x64>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <_sbrk+0x64>)
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <_sbrk+0x68>)
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <_sbrk+0x64>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d207      	bcs.n	8002bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba0:	f000 f846 	bl	8002c30 <__errno>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bae:	e009      	b.n	8002bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <_sbrk+0x64>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <_sbrk+0x64>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <_sbrk+0x64>)
 8002bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20020000 	.word	0x20020000
 8002bd0:	00000400 	.word	0x00000400
 8002bd4:	20012df4 	.word	0x20012df4
 8002bd8:	20012e50 	.word	0x20012e50

08002bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bdc:	480d      	ldr	r0, [pc, #52]	; (8002c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bde:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002be0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002be4:	480c      	ldr	r0, [pc, #48]	; (8002c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002be6:	490d      	ldr	r1, [pc, #52]	; (8002c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <LoopForever+0xe>)
  movs r3, #0
 8002bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bec:	e002      	b.n	8002bf4 <LoopCopyDataInit>

08002bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bf2:	3304      	adds	r3, #4

08002bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bf8:	d3f9      	bcc.n	8002bee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	; (8002c28 <LoopForever+0x16>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c00:	e001      	b.n	8002c06 <LoopFillZerobss>

08002c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c04:	3204      	adds	r2, #4

08002c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c08:	d3fb      	bcc.n	8002c02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c0a:	f000 f817 	bl	8002c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c0e:	f7ff febb 	bl	8002988 <main>

08002c12 <LoopForever>:

LoopForever:
    b LoopForever
 8002c12:	e7fe      	b.n	8002c12 <LoopForever>
  ldr   r0, =_estack
 8002c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002c20:	08003c54 	.word	0x08003c54
  ldr r2, =_sbss
 8002c24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002c28:	20012e50 	.word	0x20012e50

08002c2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c2c:	e7fe      	b.n	8002c2c <ADC_IRQHandler>
	...

08002c30 <__errno>:
 8002c30:	4b01      	ldr	r3, [pc, #4]	; (8002c38 <__errno+0x8>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	2000000c 	.word	0x2000000c

08002c3c <__libc_init_array>:
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	4d0d      	ldr	r5, [pc, #52]	; (8002c74 <__libc_init_array+0x38>)
 8002c40:	4c0d      	ldr	r4, [pc, #52]	; (8002c78 <__libc_init_array+0x3c>)
 8002c42:	1b64      	subs	r4, r4, r5
 8002c44:	10a4      	asrs	r4, r4, #2
 8002c46:	2600      	movs	r6, #0
 8002c48:	42a6      	cmp	r6, r4
 8002c4a:	d109      	bne.n	8002c60 <__libc_init_array+0x24>
 8002c4c:	4d0b      	ldr	r5, [pc, #44]	; (8002c7c <__libc_init_array+0x40>)
 8002c4e:	4c0c      	ldr	r4, [pc, #48]	; (8002c80 <__libc_init_array+0x44>)
 8002c50:	f000 ff84 	bl	8003b5c <_init>
 8002c54:	1b64      	subs	r4, r4, r5
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	2600      	movs	r6, #0
 8002c5a:	42a6      	cmp	r6, r4
 8002c5c:	d105      	bne.n	8002c6a <__libc_init_array+0x2e>
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}
 8002c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c64:	4798      	blx	r3
 8002c66:	3601      	adds	r6, #1
 8002c68:	e7ee      	b.n	8002c48 <__libc_init_array+0xc>
 8002c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6e:	4798      	blx	r3
 8002c70:	3601      	adds	r6, #1
 8002c72:	e7f2      	b.n	8002c5a <__libc_init_array+0x1e>
 8002c74:	08003c4c 	.word	0x08003c4c
 8002c78:	08003c4c 	.word	0x08003c4c
 8002c7c:	08003c4c 	.word	0x08003c4c
 8002c80:	08003c50 	.word	0x08003c50

08002c84 <memcpy>:
 8002c84:	440a      	add	r2, r1
 8002c86:	4291      	cmp	r1, r2
 8002c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002c8c:	d100      	bne.n	8002c90 <memcpy+0xc>
 8002c8e:	4770      	bx	lr
 8002c90:	b510      	push	{r4, lr}
 8002c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c9a:	4291      	cmp	r1, r2
 8002c9c:	d1f9      	bne.n	8002c92 <memcpy+0xe>
 8002c9e:	bd10      	pop	{r4, pc}

08002ca0 <memset>:
 8002ca0:	4402      	add	r2, r0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d100      	bne.n	8002caa <memset+0xa>
 8002ca8:	4770      	bx	lr
 8002caa:	f803 1b01 	strb.w	r1, [r3], #1
 8002cae:	e7f9      	b.n	8002ca4 <memset+0x4>

08002cb0 <iprintf>:
 8002cb0:	b40f      	push	{r0, r1, r2, r3}
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <iprintf+0x2c>)
 8002cb4:	b513      	push	{r0, r1, r4, lr}
 8002cb6:	681c      	ldr	r4, [r3, #0]
 8002cb8:	b124      	cbz	r4, 8002cc4 <iprintf+0x14>
 8002cba:	69a3      	ldr	r3, [r4, #24]
 8002cbc:	b913      	cbnz	r3, 8002cc4 <iprintf+0x14>
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f000 f866 	bl	8002d90 <__sinit>
 8002cc4:	ab05      	add	r3, sp, #20
 8002cc6:	9a04      	ldr	r2, [sp, #16]
 8002cc8:	68a1      	ldr	r1, [r4, #8]
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f000 f983 	bl	8002fd8 <_vfiprintf_r>
 8002cd2:	b002      	add	sp, #8
 8002cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd8:	b004      	add	sp, #16
 8002cda:	4770      	bx	lr
 8002cdc:	2000000c 	.word	0x2000000c

08002ce0 <std>:
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	b510      	push	{r4, lr}
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8002cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cee:	6083      	str	r3, [r0, #8]
 8002cf0:	8181      	strh	r1, [r0, #12]
 8002cf2:	6643      	str	r3, [r0, #100]	; 0x64
 8002cf4:	81c2      	strh	r2, [r0, #14]
 8002cf6:	6183      	str	r3, [r0, #24]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	305c      	adds	r0, #92	; 0x5c
 8002cfe:	f7ff ffcf 	bl	8002ca0 <memset>
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <std+0x38>)
 8002d04:	6263      	str	r3, [r4, #36]	; 0x24
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <std+0x3c>)
 8002d08:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <std+0x40>)
 8002d0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <std+0x44>)
 8002d10:	6224      	str	r4, [r4, #32]
 8002d12:	6323      	str	r3, [r4, #48]	; 0x30
 8002d14:	bd10      	pop	{r4, pc}
 8002d16:	bf00      	nop
 8002d18:	08003581 	.word	0x08003581
 8002d1c:	080035a3 	.word	0x080035a3
 8002d20:	080035db 	.word	0x080035db
 8002d24:	080035ff 	.word	0x080035ff

08002d28 <_cleanup_r>:
 8002d28:	4901      	ldr	r1, [pc, #4]	; (8002d30 <_cleanup_r+0x8>)
 8002d2a:	f000 b8af 	b.w	8002e8c <_fwalk_reent>
 8002d2e:	bf00      	nop
 8002d30:	080038d9 	.word	0x080038d9

08002d34 <__sfmoreglue>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	1e4a      	subs	r2, r1, #1
 8002d38:	2568      	movs	r5, #104	; 0x68
 8002d3a:	4355      	muls	r5, r2
 8002d3c:	460e      	mov	r6, r1
 8002d3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d42:	f000 f8c5 	bl	8002ed0 <_malloc_r>
 8002d46:	4604      	mov	r4, r0
 8002d48:	b140      	cbz	r0, 8002d5c <__sfmoreglue+0x28>
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	e9c0 1600 	strd	r1, r6, [r0]
 8002d50:	300c      	adds	r0, #12
 8002d52:	60a0      	str	r0, [r4, #8]
 8002d54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d58:	f7ff ffa2 	bl	8002ca0 <memset>
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}

08002d60 <__sfp_lock_acquire>:
 8002d60:	4801      	ldr	r0, [pc, #4]	; (8002d68 <__sfp_lock_acquire+0x8>)
 8002d62:	f000 b8b3 	b.w	8002ecc <__retarget_lock_acquire_recursive>
 8002d66:	bf00      	nop
 8002d68:	20012e48 	.word	0x20012e48

08002d6c <__sfp_lock_release>:
 8002d6c:	4801      	ldr	r0, [pc, #4]	; (8002d74 <__sfp_lock_release+0x8>)
 8002d6e:	f000 b8ae 	b.w	8002ece <__retarget_lock_release_recursive>
 8002d72:	bf00      	nop
 8002d74:	20012e48 	.word	0x20012e48

08002d78 <__sinit_lock_acquire>:
 8002d78:	4801      	ldr	r0, [pc, #4]	; (8002d80 <__sinit_lock_acquire+0x8>)
 8002d7a:	f000 b8a7 	b.w	8002ecc <__retarget_lock_acquire_recursive>
 8002d7e:	bf00      	nop
 8002d80:	20012e43 	.word	0x20012e43

08002d84 <__sinit_lock_release>:
 8002d84:	4801      	ldr	r0, [pc, #4]	; (8002d8c <__sinit_lock_release+0x8>)
 8002d86:	f000 b8a2 	b.w	8002ece <__retarget_lock_release_recursive>
 8002d8a:	bf00      	nop
 8002d8c:	20012e43 	.word	0x20012e43

08002d90 <__sinit>:
 8002d90:	b510      	push	{r4, lr}
 8002d92:	4604      	mov	r4, r0
 8002d94:	f7ff fff0 	bl	8002d78 <__sinit_lock_acquire>
 8002d98:	69a3      	ldr	r3, [r4, #24]
 8002d9a:	b11b      	cbz	r3, 8002da4 <__sinit+0x14>
 8002d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002da0:	f7ff bff0 	b.w	8002d84 <__sinit_lock_release>
 8002da4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002da8:	6523      	str	r3, [r4, #80]	; 0x50
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <__sinit+0x68>)
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <__sinit+0x6c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002db2:	42a3      	cmp	r3, r4
 8002db4:	bf04      	itt	eq
 8002db6:	2301      	moveq	r3, #1
 8002db8:	61a3      	streq	r3, [r4, #24]
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f000 f820 	bl	8002e00 <__sfp>
 8002dc0:	6060      	str	r0, [r4, #4]
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f000 f81c 	bl	8002e00 <__sfp>
 8002dc8:	60a0      	str	r0, [r4, #8]
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f000 f818 	bl	8002e00 <__sfp>
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60e0      	str	r0, [r4, #12]
 8002dd4:	2104      	movs	r1, #4
 8002dd6:	6860      	ldr	r0, [r4, #4]
 8002dd8:	f7ff ff82 	bl	8002ce0 <std>
 8002ddc:	68a0      	ldr	r0, [r4, #8]
 8002dde:	2201      	movs	r2, #1
 8002de0:	2109      	movs	r1, #9
 8002de2:	f7ff ff7d 	bl	8002ce0 <std>
 8002de6:	68e0      	ldr	r0, [r4, #12]
 8002de8:	2202      	movs	r2, #2
 8002dea:	2112      	movs	r1, #18
 8002dec:	f7ff ff78 	bl	8002ce0 <std>
 8002df0:	2301      	movs	r3, #1
 8002df2:	61a3      	str	r3, [r4, #24]
 8002df4:	e7d2      	b.n	8002d9c <__sinit+0xc>
 8002df6:	bf00      	nop
 8002df8:	08003bb4 	.word	0x08003bb4
 8002dfc:	08002d29 	.word	0x08002d29

08002e00 <__sfp>:
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e02:	4607      	mov	r7, r0
 8002e04:	f7ff ffac 	bl	8002d60 <__sfp_lock_acquire>
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <__sfp+0x84>)
 8002e0a:	681e      	ldr	r6, [r3, #0]
 8002e0c:	69b3      	ldr	r3, [r6, #24]
 8002e0e:	b913      	cbnz	r3, 8002e16 <__sfp+0x16>
 8002e10:	4630      	mov	r0, r6
 8002e12:	f7ff ffbd 	bl	8002d90 <__sinit>
 8002e16:	3648      	adds	r6, #72	; 0x48
 8002e18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	d503      	bpl.n	8002e28 <__sfp+0x28>
 8002e20:	6833      	ldr	r3, [r6, #0]
 8002e22:	b30b      	cbz	r3, 8002e68 <__sfp+0x68>
 8002e24:	6836      	ldr	r6, [r6, #0]
 8002e26:	e7f7      	b.n	8002e18 <__sfp+0x18>
 8002e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e2c:	b9d5      	cbnz	r5, 8002e64 <__sfp+0x64>
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <__sfp+0x88>)
 8002e30:	60e3      	str	r3, [r4, #12]
 8002e32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e36:	6665      	str	r5, [r4, #100]	; 0x64
 8002e38:	f000 f847 	bl	8002eca <__retarget_lock_init_recursive>
 8002e3c:	f7ff ff96 	bl	8002d6c <__sfp_lock_release>
 8002e40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002e44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002e48:	6025      	str	r5, [r4, #0]
 8002e4a:	61a5      	str	r5, [r4, #24]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	4629      	mov	r1, r5
 8002e50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e54:	f7ff ff24 	bl	8002ca0 <memset>
 8002e58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e60:	4620      	mov	r0, r4
 8002e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e64:	3468      	adds	r4, #104	; 0x68
 8002e66:	e7d9      	b.n	8002e1c <__sfp+0x1c>
 8002e68:	2104      	movs	r1, #4
 8002e6a:	4638      	mov	r0, r7
 8002e6c:	f7ff ff62 	bl	8002d34 <__sfmoreglue>
 8002e70:	4604      	mov	r4, r0
 8002e72:	6030      	str	r0, [r6, #0]
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d1d5      	bne.n	8002e24 <__sfp+0x24>
 8002e78:	f7ff ff78 	bl	8002d6c <__sfp_lock_release>
 8002e7c:	230c      	movs	r3, #12
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	e7ee      	b.n	8002e60 <__sfp+0x60>
 8002e82:	bf00      	nop
 8002e84:	08003bb4 	.word	0x08003bb4
 8002e88:	ffff0001 	.word	0xffff0001

08002e8c <_fwalk_reent>:
 8002e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e90:	4606      	mov	r6, r0
 8002e92:	4688      	mov	r8, r1
 8002e94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e98:	2700      	movs	r7, #0
 8002e9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e9e:	f1b9 0901 	subs.w	r9, r9, #1
 8002ea2:	d505      	bpl.n	8002eb0 <_fwalk_reent+0x24>
 8002ea4:	6824      	ldr	r4, [r4, #0]
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	d1f7      	bne.n	8002e9a <_fwalk_reent+0xe>
 8002eaa:	4638      	mov	r0, r7
 8002eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eb0:	89ab      	ldrh	r3, [r5, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d907      	bls.n	8002ec6 <_fwalk_reent+0x3a>
 8002eb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	d003      	beq.n	8002ec6 <_fwalk_reent+0x3a>
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	47c0      	blx	r8
 8002ec4:	4307      	orrs	r7, r0
 8002ec6:	3568      	adds	r5, #104	; 0x68
 8002ec8:	e7e9      	b.n	8002e9e <_fwalk_reent+0x12>

08002eca <__retarget_lock_init_recursive>:
 8002eca:	4770      	bx	lr

08002ecc <__retarget_lock_acquire_recursive>:
 8002ecc:	4770      	bx	lr

08002ece <__retarget_lock_release_recursive>:
 8002ece:	4770      	bx	lr

08002ed0 <_malloc_r>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	1ccd      	adds	r5, r1, #3
 8002ed4:	f025 0503 	bic.w	r5, r5, #3
 8002ed8:	3508      	adds	r5, #8
 8002eda:	2d0c      	cmp	r5, #12
 8002edc:	bf38      	it	cc
 8002ede:	250c      	movcc	r5, #12
 8002ee0:	2d00      	cmp	r5, #0
 8002ee2:	4606      	mov	r6, r0
 8002ee4:	db01      	blt.n	8002eea <_malloc_r+0x1a>
 8002ee6:	42a9      	cmp	r1, r5
 8002ee8:	d903      	bls.n	8002ef2 <_malloc_r+0x22>
 8002eea:	230c      	movs	r3, #12
 8002eec:	6033      	str	r3, [r6, #0]
 8002eee:	2000      	movs	r0, #0
 8002ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef2:	f000 fda3 	bl	8003a3c <__malloc_lock>
 8002ef6:	4921      	ldr	r1, [pc, #132]	; (8002f7c <_malloc_r+0xac>)
 8002ef8:	680a      	ldr	r2, [r1, #0]
 8002efa:	4614      	mov	r4, r2
 8002efc:	b99c      	cbnz	r4, 8002f26 <_malloc_r+0x56>
 8002efe:	4f20      	ldr	r7, [pc, #128]	; (8002f80 <_malloc_r+0xb0>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b923      	cbnz	r3, 8002f0e <_malloc_r+0x3e>
 8002f04:	4621      	mov	r1, r4
 8002f06:	4630      	mov	r0, r6
 8002f08:	f000 fb2a 	bl	8003560 <_sbrk_r>
 8002f0c:	6038      	str	r0, [r7, #0]
 8002f0e:	4629      	mov	r1, r5
 8002f10:	4630      	mov	r0, r6
 8002f12:	f000 fb25 	bl	8003560 <_sbrk_r>
 8002f16:	1c43      	adds	r3, r0, #1
 8002f18:	d123      	bne.n	8002f62 <_malloc_r+0x92>
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	6033      	str	r3, [r6, #0]
 8002f1e:	4630      	mov	r0, r6
 8002f20:	f000 fd92 	bl	8003a48 <__malloc_unlock>
 8002f24:	e7e3      	b.n	8002eee <_malloc_r+0x1e>
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	1b5b      	subs	r3, r3, r5
 8002f2a:	d417      	bmi.n	8002f5c <_malloc_r+0x8c>
 8002f2c:	2b0b      	cmp	r3, #11
 8002f2e:	d903      	bls.n	8002f38 <_malloc_r+0x68>
 8002f30:	6023      	str	r3, [r4, #0]
 8002f32:	441c      	add	r4, r3
 8002f34:	6025      	str	r5, [r4, #0]
 8002f36:	e004      	b.n	8002f42 <_malloc_r+0x72>
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	42a2      	cmp	r2, r4
 8002f3c:	bf0c      	ite	eq
 8002f3e:	600b      	streq	r3, [r1, #0]
 8002f40:	6053      	strne	r3, [r2, #4]
 8002f42:	4630      	mov	r0, r6
 8002f44:	f000 fd80 	bl	8003a48 <__malloc_unlock>
 8002f48:	f104 000b 	add.w	r0, r4, #11
 8002f4c:	1d23      	adds	r3, r4, #4
 8002f4e:	f020 0007 	bic.w	r0, r0, #7
 8002f52:	1ac2      	subs	r2, r0, r3
 8002f54:	d0cc      	beq.n	8002ef0 <_malloc_r+0x20>
 8002f56:	1a1b      	subs	r3, r3, r0
 8002f58:	50a3      	str	r3, [r4, r2]
 8002f5a:	e7c9      	b.n	8002ef0 <_malloc_r+0x20>
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	6864      	ldr	r4, [r4, #4]
 8002f60:	e7cc      	b.n	8002efc <_malloc_r+0x2c>
 8002f62:	1cc4      	adds	r4, r0, #3
 8002f64:	f024 0403 	bic.w	r4, r4, #3
 8002f68:	42a0      	cmp	r0, r4
 8002f6a:	d0e3      	beq.n	8002f34 <_malloc_r+0x64>
 8002f6c:	1a21      	subs	r1, r4, r0
 8002f6e:	4630      	mov	r0, r6
 8002f70:	f000 faf6 	bl	8003560 <_sbrk_r>
 8002f74:	3001      	adds	r0, #1
 8002f76:	d1dd      	bne.n	8002f34 <_malloc_r+0x64>
 8002f78:	e7cf      	b.n	8002f1a <_malloc_r+0x4a>
 8002f7a:	bf00      	nop
 8002f7c:	20012df8 	.word	0x20012df8
 8002f80:	20012dfc 	.word	0x20012dfc

08002f84 <__sfputc_r>:
 8002f84:	6893      	ldr	r3, [r2, #8]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	b410      	push	{r4}
 8002f8c:	6093      	str	r3, [r2, #8]
 8002f8e:	da08      	bge.n	8002fa2 <__sfputc_r+0x1e>
 8002f90:	6994      	ldr	r4, [r2, #24]
 8002f92:	42a3      	cmp	r3, r4
 8002f94:	db01      	blt.n	8002f9a <__sfputc_r+0x16>
 8002f96:	290a      	cmp	r1, #10
 8002f98:	d103      	bne.n	8002fa2 <__sfputc_r+0x1e>
 8002f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f9e:	f000 bb33 	b.w	8003608 <__swbuf_r>
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	1c58      	adds	r0, r3, #1
 8002fa6:	6010      	str	r0, [r2, #0]
 8002fa8:	7019      	strb	r1, [r3, #0]
 8002faa:	4608      	mov	r0, r1
 8002fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <__sfputs_r>:
 8002fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb4:	4606      	mov	r6, r0
 8002fb6:	460f      	mov	r7, r1
 8002fb8:	4614      	mov	r4, r2
 8002fba:	18d5      	adds	r5, r2, r3
 8002fbc:	42ac      	cmp	r4, r5
 8002fbe:	d101      	bne.n	8002fc4 <__sfputs_r+0x12>
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e007      	b.n	8002fd4 <__sfputs_r+0x22>
 8002fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fc8:	463a      	mov	r2, r7
 8002fca:	4630      	mov	r0, r6
 8002fcc:	f7ff ffda 	bl	8002f84 <__sfputc_r>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d1f3      	bne.n	8002fbc <__sfputs_r+0xa>
 8002fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fd8 <_vfiprintf_r>:
 8002fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fdc:	460d      	mov	r5, r1
 8002fde:	b09d      	sub	sp, #116	; 0x74
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	4698      	mov	r8, r3
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	b118      	cbz	r0, 8002ff0 <_vfiprintf_r+0x18>
 8002fe8:	6983      	ldr	r3, [r0, #24]
 8002fea:	b90b      	cbnz	r3, 8002ff0 <_vfiprintf_r+0x18>
 8002fec:	f7ff fed0 	bl	8002d90 <__sinit>
 8002ff0:	4b89      	ldr	r3, [pc, #548]	; (8003218 <_vfiprintf_r+0x240>)
 8002ff2:	429d      	cmp	r5, r3
 8002ff4:	d11b      	bne.n	800302e <_vfiprintf_r+0x56>
 8002ff6:	6875      	ldr	r5, [r6, #4]
 8002ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ffa:	07d9      	lsls	r1, r3, #31
 8002ffc:	d405      	bmi.n	800300a <_vfiprintf_r+0x32>
 8002ffe:	89ab      	ldrh	r3, [r5, #12]
 8003000:	059a      	lsls	r2, r3, #22
 8003002:	d402      	bmi.n	800300a <_vfiprintf_r+0x32>
 8003004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003006:	f7ff ff61 	bl	8002ecc <__retarget_lock_acquire_recursive>
 800300a:	89ab      	ldrh	r3, [r5, #12]
 800300c:	071b      	lsls	r3, r3, #28
 800300e:	d501      	bpl.n	8003014 <_vfiprintf_r+0x3c>
 8003010:	692b      	ldr	r3, [r5, #16]
 8003012:	b9eb      	cbnz	r3, 8003050 <_vfiprintf_r+0x78>
 8003014:	4629      	mov	r1, r5
 8003016:	4630      	mov	r0, r6
 8003018:	f000 fb5a 	bl	80036d0 <__swsetup_r>
 800301c:	b1c0      	cbz	r0, 8003050 <_vfiprintf_r+0x78>
 800301e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003020:	07dc      	lsls	r4, r3, #31
 8003022:	d50e      	bpl.n	8003042 <_vfiprintf_r+0x6a>
 8003024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003028:	b01d      	add	sp, #116	; 0x74
 800302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800302e:	4b7b      	ldr	r3, [pc, #492]	; (800321c <_vfiprintf_r+0x244>)
 8003030:	429d      	cmp	r5, r3
 8003032:	d101      	bne.n	8003038 <_vfiprintf_r+0x60>
 8003034:	68b5      	ldr	r5, [r6, #8]
 8003036:	e7df      	b.n	8002ff8 <_vfiprintf_r+0x20>
 8003038:	4b79      	ldr	r3, [pc, #484]	; (8003220 <_vfiprintf_r+0x248>)
 800303a:	429d      	cmp	r5, r3
 800303c:	bf08      	it	eq
 800303e:	68f5      	ldreq	r5, [r6, #12]
 8003040:	e7da      	b.n	8002ff8 <_vfiprintf_r+0x20>
 8003042:	89ab      	ldrh	r3, [r5, #12]
 8003044:	0598      	lsls	r0, r3, #22
 8003046:	d4ed      	bmi.n	8003024 <_vfiprintf_r+0x4c>
 8003048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800304a:	f7ff ff40 	bl	8002ece <__retarget_lock_release_recursive>
 800304e:	e7e9      	b.n	8003024 <_vfiprintf_r+0x4c>
 8003050:	2300      	movs	r3, #0
 8003052:	9309      	str	r3, [sp, #36]	; 0x24
 8003054:	2320      	movs	r3, #32
 8003056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800305a:	f8cd 800c 	str.w	r8, [sp, #12]
 800305e:	2330      	movs	r3, #48	; 0x30
 8003060:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003224 <_vfiprintf_r+0x24c>
 8003064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003068:	f04f 0901 	mov.w	r9, #1
 800306c:	4623      	mov	r3, r4
 800306e:	469a      	mov	sl, r3
 8003070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003074:	b10a      	cbz	r2, 800307a <_vfiprintf_r+0xa2>
 8003076:	2a25      	cmp	r2, #37	; 0x25
 8003078:	d1f9      	bne.n	800306e <_vfiprintf_r+0x96>
 800307a:	ebba 0b04 	subs.w	fp, sl, r4
 800307e:	d00b      	beq.n	8003098 <_vfiprintf_r+0xc0>
 8003080:	465b      	mov	r3, fp
 8003082:	4622      	mov	r2, r4
 8003084:	4629      	mov	r1, r5
 8003086:	4630      	mov	r0, r6
 8003088:	f7ff ff93 	bl	8002fb2 <__sfputs_r>
 800308c:	3001      	adds	r0, #1
 800308e:	f000 80aa 	beq.w	80031e6 <_vfiprintf_r+0x20e>
 8003092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003094:	445a      	add	r2, fp
 8003096:	9209      	str	r2, [sp, #36]	; 0x24
 8003098:	f89a 3000 	ldrb.w	r3, [sl]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a2 	beq.w	80031e6 <_vfiprintf_r+0x20e>
 80030a2:	2300      	movs	r3, #0
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ac:	f10a 0a01 	add.w	sl, sl, #1
 80030b0:	9304      	str	r3, [sp, #16]
 80030b2:	9307      	str	r3, [sp, #28]
 80030b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030b8:	931a      	str	r3, [sp, #104]	; 0x68
 80030ba:	4654      	mov	r4, sl
 80030bc:	2205      	movs	r2, #5
 80030be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c2:	4858      	ldr	r0, [pc, #352]	; (8003224 <_vfiprintf_r+0x24c>)
 80030c4:	f7fd f894 	bl	80001f0 <memchr>
 80030c8:	9a04      	ldr	r2, [sp, #16]
 80030ca:	b9d8      	cbnz	r0, 8003104 <_vfiprintf_r+0x12c>
 80030cc:	06d1      	lsls	r1, r2, #27
 80030ce:	bf44      	itt	mi
 80030d0:	2320      	movmi	r3, #32
 80030d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030d6:	0713      	lsls	r3, r2, #28
 80030d8:	bf44      	itt	mi
 80030da:	232b      	movmi	r3, #43	; 0x2b
 80030dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030e0:	f89a 3000 	ldrb.w	r3, [sl]
 80030e4:	2b2a      	cmp	r3, #42	; 0x2a
 80030e6:	d015      	beq.n	8003114 <_vfiprintf_r+0x13c>
 80030e8:	9a07      	ldr	r2, [sp, #28]
 80030ea:	4654      	mov	r4, sl
 80030ec:	2000      	movs	r0, #0
 80030ee:	f04f 0c0a 	mov.w	ip, #10
 80030f2:	4621      	mov	r1, r4
 80030f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030f8:	3b30      	subs	r3, #48	; 0x30
 80030fa:	2b09      	cmp	r3, #9
 80030fc:	d94e      	bls.n	800319c <_vfiprintf_r+0x1c4>
 80030fe:	b1b0      	cbz	r0, 800312e <_vfiprintf_r+0x156>
 8003100:	9207      	str	r2, [sp, #28]
 8003102:	e014      	b.n	800312e <_vfiprintf_r+0x156>
 8003104:	eba0 0308 	sub.w	r3, r0, r8
 8003108:	fa09 f303 	lsl.w	r3, r9, r3
 800310c:	4313      	orrs	r3, r2
 800310e:	9304      	str	r3, [sp, #16]
 8003110:	46a2      	mov	sl, r4
 8003112:	e7d2      	b.n	80030ba <_vfiprintf_r+0xe2>
 8003114:	9b03      	ldr	r3, [sp, #12]
 8003116:	1d19      	adds	r1, r3, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	9103      	str	r1, [sp, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	bfbb      	ittet	lt
 8003120:	425b      	neglt	r3, r3
 8003122:	f042 0202 	orrlt.w	r2, r2, #2
 8003126:	9307      	strge	r3, [sp, #28]
 8003128:	9307      	strlt	r3, [sp, #28]
 800312a:	bfb8      	it	lt
 800312c:	9204      	strlt	r2, [sp, #16]
 800312e:	7823      	ldrb	r3, [r4, #0]
 8003130:	2b2e      	cmp	r3, #46	; 0x2e
 8003132:	d10c      	bne.n	800314e <_vfiprintf_r+0x176>
 8003134:	7863      	ldrb	r3, [r4, #1]
 8003136:	2b2a      	cmp	r3, #42	; 0x2a
 8003138:	d135      	bne.n	80031a6 <_vfiprintf_r+0x1ce>
 800313a:	9b03      	ldr	r3, [sp, #12]
 800313c:	1d1a      	adds	r2, r3, #4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	9203      	str	r2, [sp, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	bfb8      	it	lt
 8003146:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800314a:	3402      	adds	r4, #2
 800314c:	9305      	str	r3, [sp, #20]
 800314e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003234 <_vfiprintf_r+0x25c>
 8003152:	7821      	ldrb	r1, [r4, #0]
 8003154:	2203      	movs	r2, #3
 8003156:	4650      	mov	r0, sl
 8003158:	f7fd f84a 	bl	80001f0 <memchr>
 800315c:	b140      	cbz	r0, 8003170 <_vfiprintf_r+0x198>
 800315e:	2340      	movs	r3, #64	; 0x40
 8003160:	eba0 000a 	sub.w	r0, r0, sl
 8003164:	fa03 f000 	lsl.w	r0, r3, r0
 8003168:	9b04      	ldr	r3, [sp, #16]
 800316a:	4303      	orrs	r3, r0
 800316c:	3401      	adds	r4, #1
 800316e:	9304      	str	r3, [sp, #16]
 8003170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003174:	482c      	ldr	r0, [pc, #176]	; (8003228 <_vfiprintf_r+0x250>)
 8003176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800317a:	2206      	movs	r2, #6
 800317c:	f7fd f838 	bl	80001f0 <memchr>
 8003180:	2800      	cmp	r0, #0
 8003182:	d03f      	beq.n	8003204 <_vfiprintf_r+0x22c>
 8003184:	4b29      	ldr	r3, [pc, #164]	; (800322c <_vfiprintf_r+0x254>)
 8003186:	bb1b      	cbnz	r3, 80031d0 <_vfiprintf_r+0x1f8>
 8003188:	9b03      	ldr	r3, [sp, #12]
 800318a:	3307      	adds	r3, #7
 800318c:	f023 0307 	bic.w	r3, r3, #7
 8003190:	3308      	adds	r3, #8
 8003192:	9303      	str	r3, [sp, #12]
 8003194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003196:	443b      	add	r3, r7
 8003198:	9309      	str	r3, [sp, #36]	; 0x24
 800319a:	e767      	b.n	800306c <_vfiprintf_r+0x94>
 800319c:	fb0c 3202 	mla	r2, ip, r2, r3
 80031a0:	460c      	mov	r4, r1
 80031a2:	2001      	movs	r0, #1
 80031a4:	e7a5      	b.n	80030f2 <_vfiprintf_r+0x11a>
 80031a6:	2300      	movs	r3, #0
 80031a8:	3401      	adds	r4, #1
 80031aa:	9305      	str	r3, [sp, #20]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f04f 0c0a 	mov.w	ip, #10
 80031b2:	4620      	mov	r0, r4
 80031b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031b8:	3a30      	subs	r2, #48	; 0x30
 80031ba:	2a09      	cmp	r2, #9
 80031bc:	d903      	bls.n	80031c6 <_vfiprintf_r+0x1ee>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0c5      	beq.n	800314e <_vfiprintf_r+0x176>
 80031c2:	9105      	str	r1, [sp, #20]
 80031c4:	e7c3      	b.n	800314e <_vfiprintf_r+0x176>
 80031c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80031ca:	4604      	mov	r4, r0
 80031cc:	2301      	movs	r3, #1
 80031ce:	e7f0      	b.n	80031b2 <_vfiprintf_r+0x1da>
 80031d0:	ab03      	add	r3, sp, #12
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	462a      	mov	r2, r5
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <_vfiprintf_r+0x258>)
 80031d8:	a904      	add	r1, sp, #16
 80031da:	4630      	mov	r0, r6
 80031dc:	f3af 8000 	nop.w
 80031e0:	4607      	mov	r7, r0
 80031e2:	1c78      	adds	r0, r7, #1
 80031e4:	d1d6      	bne.n	8003194 <_vfiprintf_r+0x1bc>
 80031e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031e8:	07d9      	lsls	r1, r3, #31
 80031ea:	d405      	bmi.n	80031f8 <_vfiprintf_r+0x220>
 80031ec:	89ab      	ldrh	r3, [r5, #12]
 80031ee:	059a      	lsls	r2, r3, #22
 80031f0:	d402      	bmi.n	80031f8 <_vfiprintf_r+0x220>
 80031f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031f4:	f7ff fe6b 	bl	8002ece <__retarget_lock_release_recursive>
 80031f8:	89ab      	ldrh	r3, [r5, #12]
 80031fa:	065b      	lsls	r3, r3, #25
 80031fc:	f53f af12 	bmi.w	8003024 <_vfiprintf_r+0x4c>
 8003200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003202:	e711      	b.n	8003028 <_vfiprintf_r+0x50>
 8003204:	ab03      	add	r3, sp, #12
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	462a      	mov	r2, r5
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <_vfiprintf_r+0x258>)
 800320c:	a904      	add	r1, sp, #16
 800320e:	4630      	mov	r0, r6
 8003210:	f000 f880 	bl	8003314 <_printf_i>
 8003214:	e7e4      	b.n	80031e0 <_vfiprintf_r+0x208>
 8003216:	bf00      	nop
 8003218:	08003bd8 	.word	0x08003bd8
 800321c:	08003bf8 	.word	0x08003bf8
 8003220:	08003bb8 	.word	0x08003bb8
 8003224:	08003c18 	.word	0x08003c18
 8003228:	08003c22 	.word	0x08003c22
 800322c:	00000000 	.word	0x00000000
 8003230:	08002fb3 	.word	0x08002fb3
 8003234:	08003c1e 	.word	0x08003c1e

08003238 <_printf_common>:
 8003238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800323c:	4616      	mov	r6, r2
 800323e:	4699      	mov	r9, r3
 8003240:	688a      	ldr	r2, [r1, #8]
 8003242:	690b      	ldr	r3, [r1, #16]
 8003244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003248:	4293      	cmp	r3, r2
 800324a:	bfb8      	it	lt
 800324c:	4613      	movlt	r3, r2
 800324e:	6033      	str	r3, [r6, #0]
 8003250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003254:	4607      	mov	r7, r0
 8003256:	460c      	mov	r4, r1
 8003258:	b10a      	cbz	r2, 800325e <_printf_common+0x26>
 800325a:	3301      	adds	r3, #1
 800325c:	6033      	str	r3, [r6, #0]
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	0699      	lsls	r1, r3, #26
 8003262:	bf42      	ittt	mi
 8003264:	6833      	ldrmi	r3, [r6, #0]
 8003266:	3302      	addmi	r3, #2
 8003268:	6033      	strmi	r3, [r6, #0]
 800326a:	6825      	ldr	r5, [r4, #0]
 800326c:	f015 0506 	ands.w	r5, r5, #6
 8003270:	d106      	bne.n	8003280 <_printf_common+0x48>
 8003272:	f104 0a19 	add.w	sl, r4, #25
 8003276:	68e3      	ldr	r3, [r4, #12]
 8003278:	6832      	ldr	r2, [r6, #0]
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	42ab      	cmp	r3, r5
 800327e:	dc26      	bgt.n	80032ce <_printf_common+0x96>
 8003280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003284:	1e13      	subs	r3, r2, #0
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	bf18      	it	ne
 800328a:	2301      	movne	r3, #1
 800328c:	0692      	lsls	r2, r2, #26
 800328e:	d42b      	bmi.n	80032e8 <_printf_common+0xb0>
 8003290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003294:	4649      	mov	r1, r9
 8003296:	4638      	mov	r0, r7
 8003298:	47c0      	blx	r8
 800329a:	3001      	adds	r0, #1
 800329c:	d01e      	beq.n	80032dc <_printf_common+0xa4>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	68e5      	ldr	r5, [r4, #12]
 80032a2:	6832      	ldr	r2, [r6, #0]
 80032a4:	f003 0306 	and.w	r3, r3, #6
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	bf08      	it	eq
 80032ac:	1aad      	subeq	r5, r5, r2
 80032ae:	68a3      	ldr	r3, [r4, #8]
 80032b0:	6922      	ldr	r2, [r4, #16]
 80032b2:	bf0c      	ite	eq
 80032b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032b8:	2500      	movne	r5, #0
 80032ba:	4293      	cmp	r3, r2
 80032bc:	bfc4      	itt	gt
 80032be:	1a9b      	subgt	r3, r3, r2
 80032c0:	18ed      	addgt	r5, r5, r3
 80032c2:	2600      	movs	r6, #0
 80032c4:	341a      	adds	r4, #26
 80032c6:	42b5      	cmp	r5, r6
 80032c8:	d11a      	bne.n	8003300 <_printf_common+0xc8>
 80032ca:	2000      	movs	r0, #0
 80032cc:	e008      	b.n	80032e0 <_printf_common+0xa8>
 80032ce:	2301      	movs	r3, #1
 80032d0:	4652      	mov	r2, sl
 80032d2:	4649      	mov	r1, r9
 80032d4:	4638      	mov	r0, r7
 80032d6:	47c0      	blx	r8
 80032d8:	3001      	adds	r0, #1
 80032da:	d103      	bne.n	80032e4 <_printf_common+0xac>
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e4:	3501      	adds	r5, #1
 80032e6:	e7c6      	b.n	8003276 <_printf_common+0x3e>
 80032e8:	18e1      	adds	r1, r4, r3
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	2030      	movs	r0, #48	; 0x30
 80032ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032f2:	4422      	add	r2, r4
 80032f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032fc:	3302      	adds	r3, #2
 80032fe:	e7c7      	b.n	8003290 <_printf_common+0x58>
 8003300:	2301      	movs	r3, #1
 8003302:	4622      	mov	r2, r4
 8003304:	4649      	mov	r1, r9
 8003306:	4638      	mov	r0, r7
 8003308:	47c0      	blx	r8
 800330a:	3001      	adds	r0, #1
 800330c:	d0e6      	beq.n	80032dc <_printf_common+0xa4>
 800330e:	3601      	adds	r6, #1
 8003310:	e7d9      	b.n	80032c6 <_printf_common+0x8e>
	...

08003314 <_printf_i>:
 8003314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003318:	460c      	mov	r4, r1
 800331a:	4691      	mov	r9, r2
 800331c:	7e27      	ldrb	r7, [r4, #24]
 800331e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003320:	2f78      	cmp	r7, #120	; 0x78
 8003322:	4680      	mov	r8, r0
 8003324:	469a      	mov	sl, r3
 8003326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800332a:	d807      	bhi.n	800333c <_printf_i+0x28>
 800332c:	2f62      	cmp	r7, #98	; 0x62
 800332e:	d80a      	bhi.n	8003346 <_printf_i+0x32>
 8003330:	2f00      	cmp	r7, #0
 8003332:	f000 80d8 	beq.w	80034e6 <_printf_i+0x1d2>
 8003336:	2f58      	cmp	r7, #88	; 0x58
 8003338:	f000 80a3 	beq.w	8003482 <_printf_i+0x16e>
 800333c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003344:	e03a      	b.n	80033bc <_printf_i+0xa8>
 8003346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800334a:	2b15      	cmp	r3, #21
 800334c:	d8f6      	bhi.n	800333c <_printf_i+0x28>
 800334e:	a001      	add	r0, pc, #4	; (adr r0, 8003354 <_printf_i+0x40>)
 8003350:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003354:	080033ad 	.word	0x080033ad
 8003358:	080033c1 	.word	0x080033c1
 800335c:	0800333d 	.word	0x0800333d
 8003360:	0800333d 	.word	0x0800333d
 8003364:	0800333d 	.word	0x0800333d
 8003368:	0800333d 	.word	0x0800333d
 800336c:	080033c1 	.word	0x080033c1
 8003370:	0800333d 	.word	0x0800333d
 8003374:	0800333d 	.word	0x0800333d
 8003378:	0800333d 	.word	0x0800333d
 800337c:	0800333d 	.word	0x0800333d
 8003380:	080034cd 	.word	0x080034cd
 8003384:	080033f1 	.word	0x080033f1
 8003388:	080034af 	.word	0x080034af
 800338c:	0800333d 	.word	0x0800333d
 8003390:	0800333d 	.word	0x0800333d
 8003394:	080034ef 	.word	0x080034ef
 8003398:	0800333d 	.word	0x0800333d
 800339c:	080033f1 	.word	0x080033f1
 80033a0:	0800333d 	.word	0x0800333d
 80033a4:	0800333d 	.word	0x0800333d
 80033a8:	080034b7 	.word	0x080034b7
 80033ac:	680b      	ldr	r3, [r1, #0]
 80033ae:	1d1a      	adds	r2, r3, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	600a      	str	r2, [r1, #0]
 80033b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033bc:	2301      	movs	r3, #1
 80033be:	e0a3      	b.n	8003508 <_printf_i+0x1f4>
 80033c0:	6825      	ldr	r5, [r4, #0]
 80033c2:	6808      	ldr	r0, [r1, #0]
 80033c4:	062e      	lsls	r6, r5, #24
 80033c6:	f100 0304 	add.w	r3, r0, #4
 80033ca:	d50a      	bpl.n	80033e2 <_printf_i+0xce>
 80033cc:	6805      	ldr	r5, [r0, #0]
 80033ce:	600b      	str	r3, [r1, #0]
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	da03      	bge.n	80033dc <_printf_i+0xc8>
 80033d4:	232d      	movs	r3, #45	; 0x2d
 80033d6:	426d      	negs	r5, r5
 80033d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033dc:	485e      	ldr	r0, [pc, #376]	; (8003558 <_printf_i+0x244>)
 80033de:	230a      	movs	r3, #10
 80033e0:	e019      	b.n	8003416 <_printf_i+0x102>
 80033e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80033e6:	6805      	ldr	r5, [r0, #0]
 80033e8:	600b      	str	r3, [r1, #0]
 80033ea:	bf18      	it	ne
 80033ec:	b22d      	sxthne	r5, r5
 80033ee:	e7ef      	b.n	80033d0 <_printf_i+0xbc>
 80033f0:	680b      	ldr	r3, [r1, #0]
 80033f2:	6825      	ldr	r5, [r4, #0]
 80033f4:	1d18      	adds	r0, r3, #4
 80033f6:	6008      	str	r0, [r1, #0]
 80033f8:	0628      	lsls	r0, r5, #24
 80033fa:	d501      	bpl.n	8003400 <_printf_i+0xec>
 80033fc:	681d      	ldr	r5, [r3, #0]
 80033fe:	e002      	b.n	8003406 <_printf_i+0xf2>
 8003400:	0669      	lsls	r1, r5, #25
 8003402:	d5fb      	bpl.n	80033fc <_printf_i+0xe8>
 8003404:	881d      	ldrh	r5, [r3, #0]
 8003406:	4854      	ldr	r0, [pc, #336]	; (8003558 <_printf_i+0x244>)
 8003408:	2f6f      	cmp	r7, #111	; 0x6f
 800340a:	bf0c      	ite	eq
 800340c:	2308      	moveq	r3, #8
 800340e:	230a      	movne	r3, #10
 8003410:	2100      	movs	r1, #0
 8003412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003416:	6866      	ldr	r6, [r4, #4]
 8003418:	60a6      	str	r6, [r4, #8]
 800341a:	2e00      	cmp	r6, #0
 800341c:	bfa2      	ittt	ge
 800341e:	6821      	ldrge	r1, [r4, #0]
 8003420:	f021 0104 	bicge.w	r1, r1, #4
 8003424:	6021      	strge	r1, [r4, #0]
 8003426:	b90d      	cbnz	r5, 800342c <_printf_i+0x118>
 8003428:	2e00      	cmp	r6, #0
 800342a:	d04d      	beq.n	80034c8 <_printf_i+0x1b4>
 800342c:	4616      	mov	r6, r2
 800342e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003432:	fb03 5711 	mls	r7, r3, r1, r5
 8003436:	5dc7      	ldrb	r7, [r0, r7]
 8003438:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800343c:	462f      	mov	r7, r5
 800343e:	42bb      	cmp	r3, r7
 8003440:	460d      	mov	r5, r1
 8003442:	d9f4      	bls.n	800342e <_printf_i+0x11a>
 8003444:	2b08      	cmp	r3, #8
 8003446:	d10b      	bne.n	8003460 <_printf_i+0x14c>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	07df      	lsls	r7, r3, #31
 800344c:	d508      	bpl.n	8003460 <_printf_i+0x14c>
 800344e:	6923      	ldr	r3, [r4, #16]
 8003450:	6861      	ldr	r1, [r4, #4]
 8003452:	4299      	cmp	r1, r3
 8003454:	bfde      	ittt	le
 8003456:	2330      	movle	r3, #48	; 0x30
 8003458:	f806 3c01 	strble.w	r3, [r6, #-1]
 800345c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003460:	1b92      	subs	r2, r2, r6
 8003462:	6122      	str	r2, [r4, #16]
 8003464:	f8cd a000 	str.w	sl, [sp]
 8003468:	464b      	mov	r3, r9
 800346a:	aa03      	add	r2, sp, #12
 800346c:	4621      	mov	r1, r4
 800346e:	4640      	mov	r0, r8
 8003470:	f7ff fee2 	bl	8003238 <_printf_common>
 8003474:	3001      	adds	r0, #1
 8003476:	d14c      	bne.n	8003512 <_printf_i+0x1fe>
 8003478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800347c:	b004      	add	sp, #16
 800347e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003482:	4835      	ldr	r0, [pc, #212]	; (8003558 <_printf_i+0x244>)
 8003484:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	680e      	ldr	r6, [r1, #0]
 800348c:	061f      	lsls	r7, r3, #24
 800348e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003492:	600e      	str	r6, [r1, #0]
 8003494:	d514      	bpl.n	80034c0 <_printf_i+0x1ac>
 8003496:	07d9      	lsls	r1, r3, #31
 8003498:	bf44      	itt	mi
 800349a:	f043 0320 	orrmi.w	r3, r3, #32
 800349e:	6023      	strmi	r3, [r4, #0]
 80034a0:	b91d      	cbnz	r5, 80034aa <_printf_i+0x196>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	f023 0320 	bic.w	r3, r3, #32
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	2310      	movs	r3, #16
 80034ac:	e7b0      	b.n	8003410 <_printf_i+0xfc>
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	f043 0320 	orr.w	r3, r3, #32
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	2378      	movs	r3, #120	; 0x78
 80034b8:	4828      	ldr	r0, [pc, #160]	; (800355c <_printf_i+0x248>)
 80034ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034be:	e7e3      	b.n	8003488 <_printf_i+0x174>
 80034c0:	065e      	lsls	r6, r3, #25
 80034c2:	bf48      	it	mi
 80034c4:	b2ad      	uxthmi	r5, r5
 80034c6:	e7e6      	b.n	8003496 <_printf_i+0x182>
 80034c8:	4616      	mov	r6, r2
 80034ca:	e7bb      	b.n	8003444 <_printf_i+0x130>
 80034cc:	680b      	ldr	r3, [r1, #0]
 80034ce:	6826      	ldr	r6, [r4, #0]
 80034d0:	6960      	ldr	r0, [r4, #20]
 80034d2:	1d1d      	adds	r5, r3, #4
 80034d4:	600d      	str	r5, [r1, #0]
 80034d6:	0635      	lsls	r5, r6, #24
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	d501      	bpl.n	80034e0 <_printf_i+0x1cc>
 80034dc:	6018      	str	r0, [r3, #0]
 80034de:	e002      	b.n	80034e6 <_printf_i+0x1d2>
 80034e0:	0671      	lsls	r1, r6, #25
 80034e2:	d5fb      	bpl.n	80034dc <_printf_i+0x1c8>
 80034e4:	8018      	strh	r0, [r3, #0]
 80034e6:	2300      	movs	r3, #0
 80034e8:	6123      	str	r3, [r4, #16]
 80034ea:	4616      	mov	r6, r2
 80034ec:	e7ba      	b.n	8003464 <_printf_i+0x150>
 80034ee:	680b      	ldr	r3, [r1, #0]
 80034f0:	1d1a      	adds	r2, r3, #4
 80034f2:	600a      	str	r2, [r1, #0]
 80034f4:	681e      	ldr	r6, [r3, #0]
 80034f6:	6862      	ldr	r2, [r4, #4]
 80034f8:	2100      	movs	r1, #0
 80034fa:	4630      	mov	r0, r6
 80034fc:	f7fc fe78 	bl	80001f0 <memchr>
 8003500:	b108      	cbz	r0, 8003506 <_printf_i+0x1f2>
 8003502:	1b80      	subs	r0, r0, r6
 8003504:	6060      	str	r0, [r4, #4]
 8003506:	6863      	ldr	r3, [r4, #4]
 8003508:	6123      	str	r3, [r4, #16]
 800350a:	2300      	movs	r3, #0
 800350c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003510:	e7a8      	b.n	8003464 <_printf_i+0x150>
 8003512:	6923      	ldr	r3, [r4, #16]
 8003514:	4632      	mov	r2, r6
 8003516:	4649      	mov	r1, r9
 8003518:	4640      	mov	r0, r8
 800351a:	47d0      	blx	sl
 800351c:	3001      	adds	r0, #1
 800351e:	d0ab      	beq.n	8003478 <_printf_i+0x164>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	079b      	lsls	r3, r3, #30
 8003524:	d413      	bmi.n	800354e <_printf_i+0x23a>
 8003526:	68e0      	ldr	r0, [r4, #12]
 8003528:	9b03      	ldr	r3, [sp, #12]
 800352a:	4298      	cmp	r0, r3
 800352c:	bfb8      	it	lt
 800352e:	4618      	movlt	r0, r3
 8003530:	e7a4      	b.n	800347c <_printf_i+0x168>
 8003532:	2301      	movs	r3, #1
 8003534:	4632      	mov	r2, r6
 8003536:	4649      	mov	r1, r9
 8003538:	4640      	mov	r0, r8
 800353a:	47d0      	blx	sl
 800353c:	3001      	adds	r0, #1
 800353e:	d09b      	beq.n	8003478 <_printf_i+0x164>
 8003540:	3501      	adds	r5, #1
 8003542:	68e3      	ldr	r3, [r4, #12]
 8003544:	9903      	ldr	r1, [sp, #12]
 8003546:	1a5b      	subs	r3, r3, r1
 8003548:	42ab      	cmp	r3, r5
 800354a:	dcf2      	bgt.n	8003532 <_printf_i+0x21e>
 800354c:	e7eb      	b.n	8003526 <_printf_i+0x212>
 800354e:	2500      	movs	r5, #0
 8003550:	f104 0619 	add.w	r6, r4, #25
 8003554:	e7f5      	b.n	8003542 <_printf_i+0x22e>
 8003556:	bf00      	nop
 8003558:	08003c29 	.word	0x08003c29
 800355c:	08003c3a 	.word	0x08003c3a

08003560 <_sbrk_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	4d06      	ldr	r5, [pc, #24]	; (800357c <_sbrk_r+0x1c>)
 8003564:	2300      	movs	r3, #0
 8003566:	4604      	mov	r4, r0
 8003568:	4608      	mov	r0, r1
 800356a:	602b      	str	r3, [r5, #0]
 800356c:	f7ff fb00 	bl	8002b70 <_sbrk>
 8003570:	1c43      	adds	r3, r0, #1
 8003572:	d102      	bne.n	800357a <_sbrk_r+0x1a>
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	b103      	cbz	r3, 800357a <_sbrk_r+0x1a>
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	bd38      	pop	{r3, r4, r5, pc}
 800357c:	20012e4c 	.word	0x20012e4c

08003580 <__sread>:
 8003580:	b510      	push	{r4, lr}
 8003582:	460c      	mov	r4, r1
 8003584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003588:	f000 fab4 	bl	8003af4 <_read_r>
 800358c:	2800      	cmp	r0, #0
 800358e:	bfab      	itete	ge
 8003590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003592:	89a3      	ldrhlt	r3, [r4, #12]
 8003594:	181b      	addge	r3, r3, r0
 8003596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800359a:	bfac      	ite	ge
 800359c:	6563      	strge	r3, [r4, #84]	; 0x54
 800359e:	81a3      	strhlt	r3, [r4, #12]
 80035a0:	bd10      	pop	{r4, pc}

080035a2 <__swrite>:
 80035a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a6:	461f      	mov	r7, r3
 80035a8:	898b      	ldrh	r3, [r1, #12]
 80035aa:	05db      	lsls	r3, r3, #23
 80035ac:	4605      	mov	r5, r0
 80035ae:	460c      	mov	r4, r1
 80035b0:	4616      	mov	r6, r2
 80035b2:	d505      	bpl.n	80035c0 <__swrite+0x1e>
 80035b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b8:	2302      	movs	r3, #2
 80035ba:	2200      	movs	r2, #0
 80035bc:	f000 f9c8 	bl	8003950 <_lseek_r>
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ca:	81a3      	strh	r3, [r4, #12]
 80035cc:	4632      	mov	r2, r6
 80035ce:	463b      	mov	r3, r7
 80035d0:	4628      	mov	r0, r5
 80035d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035d6:	f000 b869 	b.w	80036ac <_write_r>

080035da <__sseek>:
 80035da:	b510      	push	{r4, lr}
 80035dc:	460c      	mov	r4, r1
 80035de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e2:	f000 f9b5 	bl	8003950 <_lseek_r>
 80035e6:	1c43      	adds	r3, r0, #1
 80035e8:	89a3      	ldrh	r3, [r4, #12]
 80035ea:	bf15      	itete	ne
 80035ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80035ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035f6:	81a3      	strheq	r3, [r4, #12]
 80035f8:	bf18      	it	ne
 80035fa:	81a3      	strhne	r3, [r4, #12]
 80035fc:	bd10      	pop	{r4, pc}

080035fe <__sclose>:
 80035fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003602:	f000 b8d3 	b.w	80037ac <_close_r>
	...

08003608 <__swbuf_r>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	460e      	mov	r6, r1
 800360c:	4614      	mov	r4, r2
 800360e:	4605      	mov	r5, r0
 8003610:	b118      	cbz	r0, 800361a <__swbuf_r+0x12>
 8003612:	6983      	ldr	r3, [r0, #24]
 8003614:	b90b      	cbnz	r3, 800361a <__swbuf_r+0x12>
 8003616:	f7ff fbbb 	bl	8002d90 <__sinit>
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <__swbuf_r+0x98>)
 800361c:	429c      	cmp	r4, r3
 800361e:	d12b      	bne.n	8003678 <__swbuf_r+0x70>
 8003620:	686c      	ldr	r4, [r5, #4]
 8003622:	69a3      	ldr	r3, [r4, #24]
 8003624:	60a3      	str	r3, [r4, #8]
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	071a      	lsls	r2, r3, #28
 800362a:	d52f      	bpl.n	800368c <__swbuf_r+0x84>
 800362c:	6923      	ldr	r3, [r4, #16]
 800362e:	b36b      	cbz	r3, 800368c <__swbuf_r+0x84>
 8003630:	6923      	ldr	r3, [r4, #16]
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	1ac0      	subs	r0, r0, r3
 8003636:	6963      	ldr	r3, [r4, #20]
 8003638:	b2f6      	uxtb	r6, r6
 800363a:	4283      	cmp	r3, r0
 800363c:	4637      	mov	r7, r6
 800363e:	dc04      	bgt.n	800364a <__swbuf_r+0x42>
 8003640:	4621      	mov	r1, r4
 8003642:	4628      	mov	r0, r5
 8003644:	f000 f948 	bl	80038d8 <_fflush_r>
 8003648:	bb30      	cbnz	r0, 8003698 <__swbuf_r+0x90>
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	3b01      	subs	r3, #1
 800364e:	60a3      	str	r3, [r4, #8]
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	6022      	str	r2, [r4, #0]
 8003656:	701e      	strb	r6, [r3, #0]
 8003658:	6963      	ldr	r3, [r4, #20]
 800365a:	3001      	adds	r0, #1
 800365c:	4283      	cmp	r3, r0
 800365e:	d004      	beq.n	800366a <__swbuf_r+0x62>
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	07db      	lsls	r3, r3, #31
 8003664:	d506      	bpl.n	8003674 <__swbuf_r+0x6c>
 8003666:	2e0a      	cmp	r6, #10
 8003668:	d104      	bne.n	8003674 <__swbuf_r+0x6c>
 800366a:	4621      	mov	r1, r4
 800366c:	4628      	mov	r0, r5
 800366e:	f000 f933 	bl	80038d8 <_fflush_r>
 8003672:	b988      	cbnz	r0, 8003698 <__swbuf_r+0x90>
 8003674:	4638      	mov	r0, r7
 8003676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <__swbuf_r+0x9c>)
 800367a:	429c      	cmp	r4, r3
 800367c:	d101      	bne.n	8003682 <__swbuf_r+0x7a>
 800367e:	68ac      	ldr	r4, [r5, #8]
 8003680:	e7cf      	b.n	8003622 <__swbuf_r+0x1a>
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <__swbuf_r+0xa0>)
 8003684:	429c      	cmp	r4, r3
 8003686:	bf08      	it	eq
 8003688:	68ec      	ldreq	r4, [r5, #12]
 800368a:	e7ca      	b.n	8003622 <__swbuf_r+0x1a>
 800368c:	4621      	mov	r1, r4
 800368e:	4628      	mov	r0, r5
 8003690:	f000 f81e 	bl	80036d0 <__swsetup_r>
 8003694:	2800      	cmp	r0, #0
 8003696:	d0cb      	beq.n	8003630 <__swbuf_r+0x28>
 8003698:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800369c:	e7ea      	b.n	8003674 <__swbuf_r+0x6c>
 800369e:	bf00      	nop
 80036a0:	08003bd8 	.word	0x08003bd8
 80036a4:	08003bf8 	.word	0x08003bf8
 80036a8:	08003bb8 	.word	0x08003bb8

080036ac <_write_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	4d07      	ldr	r5, [pc, #28]	; (80036cc <_write_r+0x20>)
 80036b0:	4604      	mov	r4, r0
 80036b2:	4608      	mov	r0, r1
 80036b4:	4611      	mov	r1, r2
 80036b6:	2200      	movs	r2, #0
 80036b8:	602a      	str	r2, [r5, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f7ff fa07 	bl	8002ace <_write>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d102      	bne.n	80036ca <_write_r+0x1e>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	b103      	cbz	r3, 80036ca <_write_r+0x1e>
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
 80036cc:	20012e4c 	.word	0x20012e4c

080036d0 <__swsetup_r>:
 80036d0:	4b32      	ldr	r3, [pc, #200]	; (800379c <__swsetup_r+0xcc>)
 80036d2:	b570      	push	{r4, r5, r6, lr}
 80036d4:	681d      	ldr	r5, [r3, #0]
 80036d6:	4606      	mov	r6, r0
 80036d8:	460c      	mov	r4, r1
 80036da:	b125      	cbz	r5, 80036e6 <__swsetup_r+0x16>
 80036dc:	69ab      	ldr	r3, [r5, #24]
 80036de:	b913      	cbnz	r3, 80036e6 <__swsetup_r+0x16>
 80036e0:	4628      	mov	r0, r5
 80036e2:	f7ff fb55 	bl	8002d90 <__sinit>
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <__swsetup_r+0xd0>)
 80036e8:	429c      	cmp	r4, r3
 80036ea:	d10f      	bne.n	800370c <__swsetup_r+0x3c>
 80036ec:	686c      	ldr	r4, [r5, #4]
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036f4:	0719      	lsls	r1, r3, #28
 80036f6:	d42c      	bmi.n	8003752 <__swsetup_r+0x82>
 80036f8:	06dd      	lsls	r5, r3, #27
 80036fa:	d411      	bmi.n	8003720 <__swsetup_r+0x50>
 80036fc:	2309      	movs	r3, #9
 80036fe:	6033      	str	r3, [r6, #0]
 8003700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800370a:	e03e      	b.n	800378a <__swsetup_r+0xba>
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <__swsetup_r+0xd4>)
 800370e:	429c      	cmp	r4, r3
 8003710:	d101      	bne.n	8003716 <__swsetup_r+0x46>
 8003712:	68ac      	ldr	r4, [r5, #8]
 8003714:	e7eb      	b.n	80036ee <__swsetup_r+0x1e>
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <__swsetup_r+0xd8>)
 8003718:	429c      	cmp	r4, r3
 800371a:	bf08      	it	eq
 800371c:	68ec      	ldreq	r4, [r5, #12]
 800371e:	e7e6      	b.n	80036ee <__swsetup_r+0x1e>
 8003720:	0758      	lsls	r0, r3, #29
 8003722:	d512      	bpl.n	800374a <__swsetup_r+0x7a>
 8003724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003726:	b141      	cbz	r1, 800373a <__swsetup_r+0x6a>
 8003728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800372c:	4299      	cmp	r1, r3
 800372e:	d002      	beq.n	8003736 <__swsetup_r+0x66>
 8003730:	4630      	mov	r0, r6
 8003732:	f000 f98f 	bl	8003a54 <_free_r>
 8003736:	2300      	movs	r3, #0
 8003738:	6363      	str	r3, [r4, #52]	; 0x34
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003740:	81a3      	strh	r3, [r4, #12]
 8003742:	2300      	movs	r3, #0
 8003744:	6063      	str	r3, [r4, #4]
 8003746:	6923      	ldr	r3, [r4, #16]
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	81a3      	strh	r3, [r4, #12]
 8003752:	6923      	ldr	r3, [r4, #16]
 8003754:	b94b      	cbnz	r3, 800376a <__swsetup_r+0x9a>
 8003756:	89a3      	ldrh	r3, [r4, #12]
 8003758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800375c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003760:	d003      	beq.n	800376a <__swsetup_r+0x9a>
 8003762:	4621      	mov	r1, r4
 8003764:	4630      	mov	r0, r6
 8003766:	f000 f929 	bl	80039bc <__smakebuf_r>
 800376a:	89a0      	ldrh	r0, [r4, #12]
 800376c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003770:	f010 0301 	ands.w	r3, r0, #1
 8003774:	d00a      	beq.n	800378c <__swsetup_r+0xbc>
 8003776:	2300      	movs	r3, #0
 8003778:	60a3      	str	r3, [r4, #8]
 800377a:	6963      	ldr	r3, [r4, #20]
 800377c:	425b      	negs	r3, r3
 800377e:	61a3      	str	r3, [r4, #24]
 8003780:	6923      	ldr	r3, [r4, #16]
 8003782:	b943      	cbnz	r3, 8003796 <__swsetup_r+0xc6>
 8003784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003788:	d1ba      	bne.n	8003700 <__swsetup_r+0x30>
 800378a:	bd70      	pop	{r4, r5, r6, pc}
 800378c:	0781      	lsls	r1, r0, #30
 800378e:	bf58      	it	pl
 8003790:	6963      	ldrpl	r3, [r4, #20]
 8003792:	60a3      	str	r3, [r4, #8]
 8003794:	e7f4      	b.n	8003780 <__swsetup_r+0xb0>
 8003796:	2000      	movs	r0, #0
 8003798:	e7f7      	b.n	800378a <__swsetup_r+0xba>
 800379a:	bf00      	nop
 800379c:	2000000c 	.word	0x2000000c
 80037a0:	08003bd8 	.word	0x08003bd8
 80037a4:	08003bf8 	.word	0x08003bf8
 80037a8:	08003bb8 	.word	0x08003bb8

080037ac <_close_r>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4d06      	ldr	r5, [pc, #24]	; (80037c8 <_close_r+0x1c>)
 80037b0:	2300      	movs	r3, #0
 80037b2:	4604      	mov	r4, r0
 80037b4:	4608      	mov	r0, r1
 80037b6:	602b      	str	r3, [r5, #0]
 80037b8:	f7ff f9a5 	bl	8002b06 <_close>
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	d102      	bne.n	80037c6 <_close_r+0x1a>
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	b103      	cbz	r3, 80037c6 <_close_r+0x1a>
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	bd38      	pop	{r3, r4, r5, pc}
 80037c8:	20012e4c 	.word	0x20012e4c

080037cc <__sflush_r>:
 80037cc:	898a      	ldrh	r2, [r1, #12]
 80037ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d2:	4605      	mov	r5, r0
 80037d4:	0710      	lsls	r0, r2, #28
 80037d6:	460c      	mov	r4, r1
 80037d8:	d458      	bmi.n	800388c <__sflush_r+0xc0>
 80037da:	684b      	ldr	r3, [r1, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dc05      	bgt.n	80037ec <__sflush_r+0x20>
 80037e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dc02      	bgt.n	80037ec <__sflush_r+0x20>
 80037e6:	2000      	movs	r0, #0
 80037e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037ee:	2e00      	cmp	r6, #0
 80037f0:	d0f9      	beq.n	80037e6 <__sflush_r+0x1a>
 80037f2:	2300      	movs	r3, #0
 80037f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037f8:	682f      	ldr	r7, [r5, #0]
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	d032      	beq.n	8003864 <__sflush_r+0x98>
 80037fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	075a      	lsls	r2, r3, #29
 8003804:	d505      	bpl.n	8003812 <__sflush_r+0x46>
 8003806:	6863      	ldr	r3, [r4, #4]
 8003808:	1ac0      	subs	r0, r0, r3
 800380a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800380c:	b10b      	cbz	r3, 8003812 <__sflush_r+0x46>
 800380e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003810:	1ac0      	subs	r0, r0, r3
 8003812:	2300      	movs	r3, #0
 8003814:	4602      	mov	r2, r0
 8003816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003818:	6a21      	ldr	r1, [r4, #32]
 800381a:	4628      	mov	r0, r5
 800381c:	47b0      	blx	r6
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	89a3      	ldrh	r3, [r4, #12]
 8003822:	d106      	bne.n	8003832 <__sflush_r+0x66>
 8003824:	6829      	ldr	r1, [r5, #0]
 8003826:	291d      	cmp	r1, #29
 8003828:	d82c      	bhi.n	8003884 <__sflush_r+0xb8>
 800382a:	4a2a      	ldr	r2, [pc, #168]	; (80038d4 <__sflush_r+0x108>)
 800382c:	40ca      	lsrs	r2, r1
 800382e:	07d6      	lsls	r6, r2, #31
 8003830:	d528      	bpl.n	8003884 <__sflush_r+0xb8>
 8003832:	2200      	movs	r2, #0
 8003834:	6062      	str	r2, [r4, #4]
 8003836:	04d9      	lsls	r1, r3, #19
 8003838:	6922      	ldr	r2, [r4, #16]
 800383a:	6022      	str	r2, [r4, #0]
 800383c:	d504      	bpl.n	8003848 <__sflush_r+0x7c>
 800383e:	1c42      	adds	r2, r0, #1
 8003840:	d101      	bne.n	8003846 <__sflush_r+0x7a>
 8003842:	682b      	ldr	r3, [r5, #0]
 8003844:	b903      	cbnz	r3, 8003848 <__sflush_r+0x7c>
 8003846:	6560      	str	r0, [r4, #84]	; 0x54
 8003848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800384a:	602f      	str	r7, [r5, #0]
 800384c:	2900      	cmp	r1, #0
 800384e:	d0ca      	beq.n	80037e6 <__sflush_r+0x1a>
 8003850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003854:	4299      	cmp	r1, r3
 8003856:	d002      	beq.n	800385e <__sflush_r+0x92>
 8003858:	4628      	mov	r0, r5
 800385a:	f000 f8fb 	bl	8003a54 <_free_r>
 800385e:	2000      	movs	r0, #0
 8003860:	6360      	str	r0, [r4, #52]	; 0x34
 8003862:	e7c1      	b.n	80037e8 <__sflush_r+0x1c>
 8003864:	6a21      	ldr	r1, [r4, #32]
 8003866:	2301      	movs	r3, #1
 8003868:	4628      	mov	r0, r5
 800386a:	47b0      	blx	r6
 800386c:	1c41      	adds	r1, r0, #1
 800386e:	d1c7      	bne.n	8003800 <__sflush_r+0x34>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0c4      	beq.n	8003800 <__sflush_r+0x34>
 8003876:	2b1d      	cmp	r3, #29
 8003878:	d001      	beq.n	800387e <__sflush_r+0xb2>
 800387a:	2b16      	cmp	r3, #22
 800387c:	d101      	bne.n	8003882 <__sflush_r+0xb6>
 800387e:	602f      	str	r7, [r5, #0]
 8003880:	e7b1      	b.n	80037e6 <__sflush_r+0x1a>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	e7ad      	b.n	80037e8 <__sflush_r+0x1c>
 800388c:	690f      	ldr	r7, [r1, #16]
 800388e:	2f00      	cmp	r7, #0
 8003890:	d0a9      	beq.n	80037e6 <__sflush_r+0x1a>
 8003892:	0793      	lsls	r3, r2, #30
 8003894:	680e      	ldr	r6, [r1, #0]
 8003896:	bf08      	it	eq
 8003898:	694b      	ldreq	r3, [r1, #20]
 800389a:	600f      	str	r7, [r1, #0]
 800389c:	bf18      	it	ne
 800389e:	2300      	movne	r3, #0
 80038a0:	eba6 0807 	sub.w	r8, r6, r7
 80038a4:	608b      	str	r3, [r1, #8]
 80038a6:	f1b8 0f00 	cmp.w	r8, #0
 80038aa:	dd9c      	ble.n	80037e6 <__sflush_r+0x1a>
 80038ac:	6a21      	ldr	r1, [r4, #32]
 80038ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038b0:	4643      	mov	r3, r8
 80038b2:	463a      	mov	r2, r7
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b0      	blx	r6
 80038b8:	2800      	cmp	r0, #0
 80038ba:	dc06      	bgt.n	80038ca <__sflush_r+0xfe>
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c8:	e78e      	b.n	80037e8 <__sflush_r+0x1c>
 80038ca:	4407      	add	r7, r0
 80038cc:	eba8 0800 	sub.w	r8, r8, r0
 80038d0:	e7e9      	b.n	80038a6 <__sflush_r+0xda>
 80038d2:	bf00      	nop
 80038d4:	20400001 	.word	0x20400001

080038d8 <_fflush_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	690b      	ldr	r3, [r1, #16]
 80038dc:	4605      	mov	r5, r0
 80038de:	460c      	mov	r4, r1
 80038e0:	b913      	cbnz	r3, 80038e8 <_fflush_r+0x10>
 80038e2:	2500      	movs	r5, #0
 80038e4:	4628      	mov	r0, r5
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	b118      	cbz	r0, 80038f2 <_fflush_r+0x1a>
 80038ea:	6983      	ldr	r3, [r0, #24]
 80038ec:	b90b      	cbnz	r3, 80038f2 <_fflush_r+0x1a>
 80038ee:	f7ff fa4f 	bl	8002d90 <__sinit>
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <_fflush_r+0x6c>)
 80038f4:	429c      	cmp	r4, r3
 80038f6:	d11b      	bne.n	8003930 <_fflush_r+0x58>
 80038f8:	686c      	ldr	r4, [r5, #4]
 80038fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ef      	beq.n	80038e2 <_fflush_r+0xa>
 8003902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003904:	07d0      	lsls	r0, r2, #31
 8003906:	d404      	bmi.n	8003912 <_fflush_r+0x3a>
 8003908:	0599      	lsls	r1, r3, #22
 800390a:	d402      	bmi.n	8003912 <_fflush_r+0x3a>
 800390c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800390e:	f7ff fadd 	bl	8002ecc <__retarget_lock_acquire_recursive>
 8003912:	4628      	mov	r0, r5
 8003914:	4621      	mov	r1, r4
 8003916:	f7ff ff59 	bl	80037cc <__sflush_r>
 800391a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800391c:	07da      	lsls	r2, r3, #31
 800391e:	4605      	mov	r5, r0
 8003920:	d4e0      	bmi.n	80038e4 <_fflush_r+0xc>
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	059b      	lsls	r3, r3, #22
 8003926:	d4dd      	bmi.n	80038e4 <_fflush_r+0xc>
 8003928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800392a:	f7ff fad0 	bl	8002ece <__retarget_lock_release_recursive>
 800392e:	e7d9      	b.n	80038e4 <_fflush_r+0xc>
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <_fflush_r+0x70>)
 8003932:	429c      	cmp	r4, r3
 8003934:	d101      	bne.n	800393a <_fflush_r+0x62>
 8003936:	68ac      	ldr	r4, [r5, #8]
 8003938:	e7df      	b.n	80038fa <_fflush_r+0x22>
 800393a:	4b04      	ldr	r3, [pc, #16]	; (800394c <_fflush_r+0x74>)
 800393c:	429c      	cmp	r4, r3
 800393e:	bf08      	it	eq
 8003940:	68ec      	ldreq	r4, [r5, #12]
 8003942:	e7da      	b.n	80038fa <_fflush_r+0x22>
 8003944:	08003bd8 	.word	0x08003bd8
 8003948:	08003bf8 	.word	0x08003bf8
 800394c:	08003bb8 	.word	0x08003bb8

08003950 <_lseek_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4d07      	ldr	r5, [pc, #28]	; (8003970 <_lseek_r+0x20>)
 8003954:	4604      	mov	r4, r0
 8003956:	4608      	mov	r0, r1
 8003958:	4611      	mov	r1, r2
 800395a:	2200      	movs	r2, #0
 800395c:	602a      	str	r2, [r5, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	f7ff f8f8 	bl	8002b54 <_lseek>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d102      	bne.n	800396e <_lseek_r+0x1e>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	b103      	cbz	r3, 800396e <_lseek_r+0x1e>
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	bd38      	pop	{r3, r4, r5, pc}
 8003970:	20012e4c 	.word	0x20012e4c

08003974 <__swhatbuf_r>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	460e      	mov	r6, r1
 8003978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397c:	2900      	cmp	r1, #0
 800397e:	b096      	sub	sp, #88	; 0x58
 8003980:	4614      	mov	r4, r2
 8003982:	461d      	mov	r5, r3
 8003984:	da07      	bge.n	8003996 <__swhatbuf_r+0x22>
 8003986:	2300      	movs	r3, #0
 8003988:	602b      	str	r3, [r5, #0]
 800398a:	89b3      	ldrh	r3, [r6, #12]
 800398c:	061a      	lsls	r2, r3, #24
 800398e:	d410      	bmi.n	80039b2 <__swhatbuf_r+0x3e>
 8003990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003994:	e00e      	b.n	80039b4 <__swhatbuf_r+0x40>
 8003996:	466a      	mov	r2, sp
 8003998:	f000 f8be 	bl	8003b18 <_fstat_r>
 800399c:	2800      	cmp	r0, #0
 800399e:	dbf2      	blt.n	8003986 <__swhatbuf_r+0x12>
 80039a0:	9a01      	ldr	r2, [sp, #4]
 80039a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039aa:	425a      	negs	r2, r3
 80039ac:	415a      	adcs	r2, r3
 80039ae:	602a      	str	r2, [r5, #0]
 80039b0:	e7ee      	b.n	8003990 <__swhatbuf_r+0x1c>
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	2000      	movs	r0, #0
 80039b6:	6023      	str	r3, [r4, #0]
 80039b8:	b016      	add	sp, #88	; 0x58
 80039ba:	bd70      	pop	{r4, r5, r6, pc}

080039bc <__smakebuf_r>:
 80039bc:	898b      	ldrh	r3, [r1, #12]
 80039be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039c0:	079d      	lsls	r5, r3, #30
 80039c2:	4606      	mov	r6, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	d507      	bpl.n	80039d8 <__smakebuf_r+0x1c>
 80039c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	2301      	movs	r3, #1
 80039d2:	6163      	str	r3, [r4, #20]
 80039d4:	b002      	add	sp, #8
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	ab01      	add	r3, sp, #4
 80039da:	466a      	mov	r2, sp
 80039dc:	f7ff ffca 	bl	8003974 <__swhatbuf_r>
 80039e0:	9900      	ldr	r1, [sp, #0]
 80039e2:	4605      	mov	r5, r0
 80039e4:	4630      	mov	r0, r6
 80039e6:	f7ff fa73 	bl	8002ed0 <_malloc_r>
 80039ea:	b948      	cbnz	r0, 8003a00 <__smakebuf_r+0x44>
 80039ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039f0:	059a      	lsls	r2, r3, #22
 80039f2:	d4ef      	bmi.n	80039d4 <__smakebuf_r+0x18>
 80039f4:	f023 0303 	bic.w	r3, r3, #3
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	81a3      	strh	r3, [r4, #12]
 80039fe:	e7e3      	b.n	80039c8 <__smakebuf_r+0xc>
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <__smakebuf_r+0x7c>)
 8003a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	6020      	str	r0, [r4, #0]
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	9b00      	ldr	r3, [sp, #0]
 8003a10:	6163      	str	r3, [r4, #20]
 8003a12:	9b01      	ldr	r3, [sp, #4]
 8003a14:	6120      	str	r0, [r4, #16]
 8003a16:	b15b      	cbz	r3, 8003a30 <__smakebuf_r+0x74>
 8003a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f000 f88d 	bl	8003b3c <_isatty_r>
 8003a22:	b128      	cbz	r0, 8003a30 <__smakebuf_r+0x74>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	81a3      	strh	r3, [r4, #12]
 8003a30:	89a0      	ldrh	r0, [r4, #12]
 8003a32:	4305      	orrs	r5, r0
 8003a34:	81a5      	strh	r5, [r4, #12]
 8003a36:	e7cd      	b.n	80039d4 <__smakebuf_r+0x18>
 8003a38:	08002d29 	.word	0x08002d29

08003a3c <__malloc_lock>:
 8003a3c:	4801      	ldr	r0, [pc, #4]	; (8003a44 <__malloc_lock+0x8>)
 8003a3e:	f7ff ba45 	b.w	8002ecc <__retarget_lock_acquire_recursive>
 8003a42:	bf00      	nop
 8003a44:	20012e44 	.word	0x20012e44

08003a48 <__malloc_unlock>:
 8003a48:	4801      	ldr	r0, [pc, #4]	; (8003a50 <__malloc_unlock+0x8>)
 8003a4a:	f7ff ba40 	b.w	8002ece <__retarget_lock_release_recursive>
 8003a4e:	bf00      	nop
 8003a50:	20012e44 	.word	0x20012e44

08003a54 <_free_r>:
 8003a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a56:	2900      	cmp	r1, #0
 8003a58:	d048      	beq.n	8003aec <_free_r+0x98>
 8003a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a5e:	9001      	str	r0, [sp, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f1a1 0404 	sub.w	r4, r1, #4
 8003a66:	bfb8      	it	lt
 8003a68:	18e4      	addlt	r4, r4, r3
 8003a6a:	f7ff ffe7 	bl	8003a3c <__malloc_lock>
 8003a6e:	4a20      	ldr	r2, [pc, #128]	; (8003af0 <_free_r+0x9c>)
 8003a70:	9801      	ldr	r0, [sp, #4]
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	4615      	mov	r5, r2
 8003a76:	b933      	cbnz	r3, 8003a86 <_free_r+0x32>
 8003a78:	6063      	str	r3, [r4, #4]
 8003a7a:	6014      	str	r4, [r2, #0]
 8003a7c:	b003      	add	sp, #12
 8003a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a82:	f7ff bfe1 	b.w	8003a48 <__malloc_unlock>
 8003a86:	42a3      	cmp	r3, r4
 8003a88:	d90b      	bls.n	8003aa2 <_free_r+0x4e>
 8003a8a:	6821      	ldr	r1, [r4, #0]
 8003a8c:	1862      	adds	r2, r4, r1
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	bf04      	itt	eq
 8003a92:	681a      	ldreq	r2, [r3, #0]
 8003a94:	685b      	ldreq	r3, [r3, #4]
 8003a96:	6063      	str	r3, [r4, #4]
 8003a98:	bf04      	itt	eq
 8003a9a:	1852      	addeq	r2, r2, r1
 8003a9c:	6022      	streq	r2, [r4, #0]
 8003a9e:	602c      	str	r4, [r5, #0]
 8003aa0:	e7ec      	b.n	8003a7c <_free_r+0x28>
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b10b      	cbz	r3, 8003aac <_free_r+0x58>
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	d9fa      	bls.n	8003aa2 <_free_r+0x4e>
 8003aac:	6811      	ldr	r1, [r2, #0]
 8003aae:	1855      	adds	r5, r2, r1
 8003ab0:	42a5      	cmp	r5, r4
 8003ab2:	d10b      	bne.n	8003acc <_free_r+0x78>
 8003ab4:	6824      	ldr	r4, [r4, #0]
 8003ab6:	4421      	add	r1, r4
 8003ab8:	1854      	adds	r4, r2, r1
 8003aba:	42a3      	cmp	r3, r4
 8003abc:	6011      	str	r1, [r2, #0]
 8003abe:	d1dd      	bne.n	8003a7c <_free_r+0x28>
 8003ac0:	681c      	ldr	r4, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	6053      	str	r3, [r2, #4]
 8003ac6:	4421      	add	r1, r4
 8003ac8:	6011      	str	r1, [r2, #0]
 8003aca:	e7d7      	b.n	8003a7c <_free_r+0x28>
 8003acc:	d902      	bls.n	8003ad4 <_free_r+0x80>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	6003      	str	r3, [r0, #0]
 8003ad2:	e7d3      	b.n	8003a7c <_free_r+0x28>
 8003ad4:	6825      	ldr	r5, [r4, #0]
 8003ad6:	1961      	adds	r1, r4, r5
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	bf04      	itt	eq
 8003adc:	6819      	ldreq	r1, [r3, #0]
 8003ade:	685b      	ldreq	r3, [r3, #4]
 8003ae0:	6063      	str	r3, [r4, #4]
 8003ae2:	bf04      	itt	eq
 8003ae4:	1949      	addeq	r1, r1, r5
 8003ae6:	6021      	streq	r1, [r4, #0]
 8003ae8:	6054      	str	r4, [r2, #4]
 8003aea:	e7c7      	b.n	8003a7c <_free_r+0x28>
 8003aec:	b003      	add	sp, #12
 8003aee:	bd30      	pop	{r4, r5, pc}
 8003af0:	20012df8 	.word	0x20012df8

08003af4 <_read_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	4d07      	ldr	r5, [pc, #28]	; (8003b14 <_read_r+0x20>)
 8003af8:	4604      	mov	r4, r0
 8003afa:	4608      	mov	r0, r1
 8003afc:	4611      	mov	r1, r2
 8003afe:	2200      	movs	r2, #0
 8003b00:	602a      	str	r2, [r5, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f7fe ffc6 	bl	8002a94 <_read>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d102      	bne.n	8003b12 <_read_r+0x1e>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	b103      	cbz	r3, 8003b12 <_read_r+0x1e>
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	20012e4c 	.word	0x20012e4c

08003b18 <_fstat_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4d07      	ldr	r5, [pc, #28]	; (8003b38 <_fstat_r+0x20>)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	f7fe fffa 	bl	8002b1e <_fstat>
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	d102      	bne.n	8003b34 <_fstat_r+0x1c>
 8003b2e:	682b      	ldr	r3, [r5, #0]
 8003b30:	b103      	cbz	r3, 8003b34 <_fstat_r+0x1c>
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	bd38      	pop	{r3, r4, r5, pc}
 8003b36:	bf00      	nop
 8003b38:	20012e4c 	.word	0x20012e4c

08003b3c <_isatty_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	4d06      	ldr	r5, [pc, #24]	; (8003b58 <_isatty_r+0x1c>)
 8003b40:	2300      	movs	r3, #0
 8003b42:	4604      	mov	r4, r0
 8003b44:	4608      	mov	r0, r1
 8003b46:	602b      	str	r3, [r5, #0]
 8003b48:	f7fe fff9 	bl	8002b3e <_isatty>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d102      	bne.n	8003b56 <_isatty_r+0x1a>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	b103      	cbz	r3, 8003b56 <_isatty_r+0x1a>
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
 8003b58:	20012e4c 	.word	0x20012e4c

08003b5c <_init>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr

08003b68 <_fini>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr
