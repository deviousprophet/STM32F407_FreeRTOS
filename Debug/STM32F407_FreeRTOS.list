
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b640  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0800b7f0  0800b7f0  0001b7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c184  0800c184  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c184  0800c184  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c184  0800c184  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c184  0800c184  0001c184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c188  0800c188  0001c188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014738  2000020c  0800c398  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014944  0800c398  00024944  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c79  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c0  00000000  00000000  00038eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0003c678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  0003d720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006018  00000000  00000000  0003e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b26  00000000  00000000  00044628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001e935  00000000  00000000  0005614e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00074a83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a4  00000000  00000000  00074ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b7d8 	.word	0x0800b7d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000210 	.word	0x20000210
 80001ec:	0800b7d8 	.word	0x0800b7d8

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	200147e0 	.word	0x200147e0

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <ADE_Init>:
void ADE_SPI_Init();
void ZeroX_Init();
void SAG_Init();
void IRQ_Init();

void ADE_Init(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	ADE_SPI_Init();
 8000c6e:	f000 f85b 	bl	8000d28 <ADE_SPI_Init>
//	ZeroX_Init();
//	SAG_Init();
//	IRQ_Init();

	//Reset
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2109      	movs	r1, #9
 8000c76:	4811      	ldr	r0, [pc, #68]	; (8000cbc <ADE_Init+0x54>)
 8000c78:	f003 fe46 	bl	8004908 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	e002      	b.n	8000c88 <ADE_Init+0x20>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	ddf7      	ble.n	8000c82 <ADE_Init+0x1a>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2109      	movs	r1, #9
 8000c96:	4809      	ldr	r0, [pc, #36]	; (8000cbc <ADE_Init+0x54>)
 8000c98:	f003 fe36 	bl	8004908 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e002      	b.n	8000ca8 <ADE_Init+0x40>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	ddf7      	ble.n	8000ca2 <ADE_Init+0x3a>
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <ADE_ReadData>:

uint32_t ADE_ReadData(uint8_t address, uint32_t bytes_to_read) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
	uint32_t data = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
	uint8_t dummy_write = 0xff;
 8000cd0:	23ff      	movs	r3, #255	; 0xff
 8000cd2:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4813      	ldr	r0, [pc, #76]	; (8000d24 <ADE_ReadData+0x64>)
 8000cd8:	f004 fa68 	bl	80051ac <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4810      	ldr	r0, [pc, #64]	; (8000d24 <ADE_ReadData+0x64>)
 8000ce2:	f004 fa38 	bl	8005156 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	e00e      	b.n	8000d0a <ADE_ReadData+0x4a>
		data <<= 8;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	617b      	str	r3, [r7, #20]
		data |= SPI_Transfer(ADE_SPI_HOST, dummy_write);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <ADE_ReadData+0x64>)
 8000cf8:	f004 fa2d 	bl	8005156 <SPI_Transfer>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	3301      	adds	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3ec      	bcc.n	8000cec <ADE_ReadData+0x2c>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE); //SS pin pull to high
 8000d12:	2100      	movs	r1, #0
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <ADE_ReadData+0x64>)
 8000d16:	f004 fa49 	bl	80051ac <SPI_PeripheralControl>
	return data;
 8000d1a:	697b      	ldr	r3, [r7, #20]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40003800 	.word	0x40003800

08000d28 <ADE_SPI_Init>:
			mode &= ~(1 << bit_flag);
		ADE_WriteData(MODE, mode, 2);
	}
}

void ADE_SPI_Init() {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
	 * PB13 -> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT function mode : 5
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000d2e:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <ADE_SPI_Init+0xd8>)
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000d50:	230d      	movs	r3, #13
 8000d52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fc22 	bl	80045a4 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000d60:	230f      	movs	r3, #15
 8000d62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fc1a 	bl	80045a4 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000d70:	230e      	movs	r3, #14
 8000d72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 fc12 	bl	80045a4 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000d80:	230c      	movs	r3, #12
 8000d82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fc0a 	bl	80045a4 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <ADE_SPI_Init+0xdc>)
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000d94:	2309      	movs	r3, #9
 8000d96:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(&SPIPins);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 fbfa 	bl	80045a4 <GPIO_Init>

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = ADE_SPI_HOST;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000db2:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000db4:	2301      	movs	r3, #1
 8000db6:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000db8:	2301      	movs	r3, #1
 8000dba:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;	// clock 1MHz
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;				// CPOL 0
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;				// CPHA 1
 8000dc8:	2301      	movs	r3, #1
 8000dca:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 					// Hardware slave management enabled for NSS pin
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73bb      	strb	r3, [r7, #14]

	ADE_SPI_HOST->CR1 &= ~(1 << SPI_CR1_SPE);
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dda:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 f95e 	bl	80050a0 <SPI_Init>
	ADE_SPI_HOST->CR1 |= (1 << SPI_CR1_SPE);
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dee:	6013      	str	r3, [r2, #0]

	SPI_SSOEConfig(ADE_SPI_HOST, ENABLE);
 8000df0:	2101      	movs	r1, #1
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000df4:	f004 f9f6 	bl	80051e4 <SPI_SSOEConfig>
}
 8000df8:	bf00      	nop
 8000dfa:	3730      	adds	r7, #48	; 0x30
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40020c00 	.word	0x40020c00
 8000e08:	40003800 	.word	0x40003800

08000e0c <ds1307_init>:
uint8_t bcd_to_binary(uint8_t value);
uint8_t binary_to_bcd(uint8_t value);

I2C_Handle_t g_ds1307I2cHandle;

void ds1307_init(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	ds1307_i2c_pin_config();
 8000e10:	f000 f93e 	bl	8001090 <ds1307_i2c_pin_config>
	ds1307_i2c_config();
 8000e14:	f000 f97a 	bl	800110c <ds1307_i2c_config>
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4802      	ldr	r0, [pc, #8]	; (8000e24 <ds1307_init+0x18>)
 8000e1c:	f003 fe1c 	bl	8004a58 <I2C_PeripheralControl>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40005c00 	.word	0x40005c00

08000e28 <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_time_t *rtc_time) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f9b9 	bl	80011ac <binary_to_bcd>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e44:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f974 	bl	8001138 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	785b      	ldrb	r3, [r3, #1]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f9a9 	bl	80011ac <binary_to_bcd>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f96a 	bl	8001138 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	789b      	ldrb	r3, [r3, #2]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 f99f 	bl	80011ac <binary_to_bcd>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	78db      	ldrb	r3, [r3, #3]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d104      	bne.n	8000e84 <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e011      	b.n	8000ea8 <ds1307_set_current_time+0x80>
	} else {
		hrs |= (1 << 6);
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8a:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	78db      	ldrb	r3, [r3, #3]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d104      	bne.n	8000e9e <ds1307_set_current_time+0x76>
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	f043 0320 	orr.w	r3, r3, #32
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	e003      	b.n	8000ea6 <ds1307_set_current_time+0x7e>
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	f023 0320 	bic.w	r3, r3, #32
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs, DS1307_ADDR_HRS);
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f943 	bl	8001138 <ds1307_write>
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date) {
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f970 	bl	80011ac <binary_to_bcd>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2104      	movs	r1, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f931 	bl	8001138 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f966 	bl	80011ac <binary_to_bcd>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2105      	movs	r1, #5
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f927 	bl	8001138 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	789b      	ldrb	r3, [r3, #2]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f95c 	bl	80011ac <binary_to_bcd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2106      	movs	r1, #6
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f91d 	bl	8001138 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	78db      	ldrb	r3, [r3, #3]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f952 	bl	80011ac <binary_to_bcd>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f913 	bl	8001138 <ds1307_write>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time) {
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f924 	bl	8001170 <ds1307_read>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f32:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f964 	bl	8001204 <bcd_to_binary>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 f913 	bl	8001170 <ds1307_read>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f959 	bl	8001204 <bcd_to_binary>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f000 f908 	bl	8001170 <ds1307_read>
 8000f60:	4603      	mov	r3, r0
 8000f62:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)) {
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00f      	beq.n	8000f8e <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f003 0320 	and.w	r3, r3, #32
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e002      	b.n	8000f94 <ds1307_get_current_time+0x7a>
	} else {
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2202      	movs	r2, #2
 8000f92:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f934 	bl	8001204 <bcd_to_binary>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	709a      	strb	r2, [r3, #2]

	rtc_time->time_validity = true;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	711a      	strb	r2, [r3, #4]

	if(rtc_time->hours > 23 && rtc_time->time_format == TIME_FORMAT_24HRS)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	789b      	ldrb	r3, [r3, #2]
 8000fae:	2b17      	cmp	r3, #23
 8000fb0:	d906      	bls.n	8000fc0 <ds1307_get_current_time+0xa6>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	78db      	ldrb	r3, [r3, #3]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d102      	bne.n	8000fc0 <ds1307_get_current_time+0xa6>
		rtc_time->time_validity = false;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	711a      	strb	r2, [r3, #4]
	if(rtc_time->hours > 12 && (rtc_time->time_format == TIME_FORMAT_12HRS_AM || rtc_time->time_format == TIME_FORMAT_12HRS_PM))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	2b0c      	cmp	r3, #12
 8000fc6:	d90a      	bls.n	8000fde <ds1307_get_current_time+0xc4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	78db      	ldrb	r3, [r3, #3]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <ds1307_get_current_time+0xbe>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	78db      	ldrb	r3, [r3, #3]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d102      	bne.n	8000fde <ds1307_get_current_time+0xc4>
		rtc_time->time_validity = false;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	711a      	strb	r2, [r3, #4]
	if(rtc_time->minutes > 59)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	2b3b      	cmp	r3, #59	; 0x3b
 8000fe4:	d902      	bls.n	8000fec <ds1307_get_current_time+0xd2>
		rtc_time->time_validity = false;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	711a      	strb	r2, [r3, #4]
	if(rtc_time->seconds > 59)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b3b      	cmp	r3, #59	; 0x3b
 8000ff2:	d902      	bls.n	8000ffa <ds1307_get_current_time+0xe0>
		rtc_time->time_validity = false;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	711a      	strb	r2, [r3, #4]
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date) {
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 800100a:	2003      	movs	r0, #3
 800100c:	f000 f8b0 	bl	8001170 <ds1307_read>
 8001010:	4603      	mov	r3, r0
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f8f6 	bl	8001204 <bcd_to_binary>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8001020:	2004      	movs	r0, #4
 8001022:	f000 f8a5 	bl	8001170 <ds1307_read>
 8001026:	4603      	mov	r3, r0
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f8eb 	bl	8001204 <bcd_to_binary>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8001036:	2005      	movs	r0, #5
 8001038:	f000 f89a 	bl	8001170 <ds1307_read>
 800103c:	4603      	mov	r3, r0
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f8e0 	bl	8001204 <bcd_to_binary>
 8001044:	4603      	mov	r3, r0
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 800104c:	2006      	movs	r0, #6
 800104e:	f000 f88f 	bl	8001170 <ds1307_read>
 8001052:	4603      	mov	r3, r0
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f8d5 	bl	8001204 <bcd_to_binary>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	709a      	strb	r2, [r3, #2]

	rtc_date->date_validity = true;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	711a      	strb	r2, [r3, #4]
	if(rtc_date->day == 131 || rtc_date->month == 131 || rtc_date->year == 131)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	78db      	ldrb	r3, [r3, #3]
 800106c:	2b83      	cmp	r3, #131	; 0x83
 800106e:	d007      	beq.n	8001080 <ds1307_get_current_date+0x7e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	785b      	ldrb	r3, [r3, #1]
 8001074:	2b83      	cmp	r3, #131	; 0x83
 8001076:	d003      	beq.n	8001080 <ds1307_get_current_date+0x7e>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	789b      	ldrb	r3, [r3, #2]
 800107c:	2b83      	cmp	r3, #131	; 0x83
 800107e:	d102      	bne.n	8001086 <ds1307_get_current_date+0x84>
		rtc_date->date_validity = false;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	711a      	strb	r2, [r3, #4]
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <ds1307_i2c_pin_config>:

void ds1307_i2c_pin_config(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	220c      	movs	r2, #12
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f007 fd1c 	bl	8008adc <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 80010a4:	463b      	mov	r3, r7
 80010a6:	220c      	movs	r2, #12
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f007 fd16 	bl	8008adc <memset>

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT_SDA;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <ds1307_i2c_pin_config+0x74>)
 80010b2:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80010b4:	2304      	movs	r3, #4
 80010b6:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80010b8:	2302      	movs	r3, #2
 80010ba:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80010bc:	2309      	movs	r3, #9
 80010be:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80010c0:	2301      	movs	r3, #1
 80010c2:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80010c4:	2301      	movs	r3, #1
 80010c6:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80010c8:	2302      	movs	r3, #2
 80010ca:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_sda);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fa67 	bl	80045a4 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT_SCL;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <ds1307_i2c_pin_config+0x78>)
 80010d8:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80010da:	2304      	movs	r3, #4
 80010dc:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80010de:	2302      	movs	r3, #2
 80010e0:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 80010e2:	2308      	movs	r3, #8
 80010e4:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80010e6:	2301      	movs	r3, #1
 80010e8:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80010ea:	2301      	movs	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80010ee:	2302      	movs	r3, #2
 80010f0:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 80010f2:	463b      	mov	r3, r7
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fa55 	bl	80045a4 <GPIO_Init>

}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020800 	.word	0x40020800
 8001108:	40020000 	.word	0x40020000

0800110c <ds1307_i2c_config>:

void ds1307_i2c_config(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <ds1307_i2c_config+0x20>)
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <ds1307_i2c_config+0x24>)
 8001114:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <ds1307_i2c_config+0x20>)
 8001118:	2201      	movs	r2, #1
 800111a:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <ds1307_i2c_config+0x20>)
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <ds1307_i2c_config+0x28>)
 8001120:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 8001122:	4802      	ldr	r0, [pc, #8]	; (800112c <ds1307_i2c_config+0x20>)
 8001124:	f003 fcec 	bl	8004b00 <I2C_Init>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20014578 	.word	0x20014578
 8001130:	40005c00 	.word	0x40005c00
 8001134:	000186a0 	.word	0x000186a0

08001138 <ds1307_write>:


void ds1307_write(uint8_t value,uint8_t reg_addr) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af02      	add	r7, sp, #8
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8001150:	f107 010c 	add.w	r1, r7, #12
 8001154:	2300      	movs	r3, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2368      	movs	r3, #104	; 0x68
 800115a:	2202      	movs	r2, #2
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <ds1307_write+0x34>)
 800115e:	f003 fd95 	bl	8004c8c <I2C_MasterSendData>
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20014578 	.word	0x20014578

08001170 <ds1307_read>:



uint8_t ds1307_read(uint8_t reg_addr) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af02      	add	r7, sp, #8
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 800117a:	1df9      	adds	r1, r7, #7
 800117c:	2300      	movs	r3, #0
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2368      	movs	r3, #104	; 0x68
 8001182:	2201      	movs	r2, #1
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <ds1307_read+0x38>)
 8001186:	f003 fd81 	bl	8004c8c <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 800118a:	f107 010f 	add.w	r1, r7, #15
 800118e:	2300      	movs	r3, #0
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2368      	movs	r3, #104	; 0x68
 8001194:	2201      	movs	r2, #1
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <ds1307_read+0x38>)
 8001198:	f003 fe13 	bl	8004dc2 <I2C_MasterReceiveData>
    return data;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20014578 	.word	0x20014578

080011ac <binary_to_bcd>:

uint8_t binary_to_bcd(uint8_t value) {
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	73fb      	strb	r3, [r7, #15]
	if(value >= 10) {
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b09      	cmp	r3, #9
 80011be:	d918      	bls.n	80011f2 <binary_to_bcd+0x46>
		m = value /10;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <binary_to_bcd+0x54>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	08db      	lsrs	r3, r3, #3
 80011ca:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 80011cc:	79fa      	ldrb	r2, [r7, #7]
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <binary_to_bcd+0x54>)
 80011d0:	fba3 1302 	umull	r1, r3, r3, r2
 80011d4:	08d9      	lsrs	r1, r3, #3
 80011d6:	460b      	mov	r3, r1
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	cccccccd 	.word	0xcccccccd

08001204 <bcd_to_binary>:

uint8_t bcd_to_binary(uint8_t value) {
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4413      	add	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	4413      	add	r3, r2
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <KEYPAD_Init>:

/* Private variables */
KEYPAD_Type_t KEYPAD_INT_KeypadType;
static KEYPAD_Button_t KeypadStatus = KEYPAD_NOPRESSED;

void KEYPAD_Init(KEYPAD_Type_t type) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	KEYPAD_INT_KeypadType = type;
 8001246:	4a32      	ldr	r2, [pc, #200]	; (8001310 <KEYPAD_Init+0xd4>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	7013      	strb	r3, [r2, #0]
	GPIO_Handle_t GpioR_Out, GpioC_In;

	/* Rows are output */
	/* Row 1 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_1_PORT;
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <KEYPAD_Init+0xd8>)
 800124e:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_1_PIN;
 8001250:	230b      	movs	r3, #11
 8001252:	763b      	strb	r3, [r7, #24]
	GpioR_Out.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001254:	2301      	movs	r3, #1
 8001256:	767b      	strb	r3, [r7, #25]
	GpioR_Out.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8001258:	2301      	movs	r3, #1
 800125a:	76bb      	strb	r3, [r7, #26]
	GpioR_Out.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800125c:	2300      	movs	r3, #0
 800125e:	773b      	strb	r3, [r7, #28]
	GpioR_Out.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001260:	2300      	movs	r3, #0
 8001262:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GpioR_Out);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4618      	mov	r0, r3
 800126a:	f003 f99b 	bl	80045a4 <GPIO_Init>

	/* Row 2 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_2_PORT;
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <KEYPAD_Init+0xdc>)
 8001270:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_2_PIN;
 8001272:	2300      	movs	r3, #0
 8001274:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4618      	mov	r0, r3
 800127c:	f003 f992 	bl	80045a4 <GPIO_Init>

	/* Row 3 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_3_PORT;
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <KEYPAD_Init+0xdc>)
 8001282:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_3_PIN;
 8001284:	2302      	movs	r3, #2
 8001286:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4618      	mov	r0, r3
 800128e:	f003 f989 	bl	80045a4 <GPIO_Init>

	/* Row 4 */
	if (type == KEYPAD_Type_Large) {
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d108      	bne.n	80012aa <KEYPAD_Init+0x6e>
		GpioR_Out.pGPIOx = KEYPAD_ROW_4_PORT;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <KEYPAD_Init+0xdc>)
 800129a:	617b      	str	r3, [r7, #20]
		GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_4_PIN;
 800129c:	2304      	movs	r3, #4
 800129e:	763b      	strb	r3, [r7, #24]
		GPIO_Init(&GpioR_Out);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 f97d 	bl	80045a4 <GPIO_Init>
	}


	/* Columns are inputs */
	/* Column 1 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_1_PORT;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <KEYPAD_Init+0xdc>)
 80012ac:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_1_PIN;
 80012ae:	2306      	movs	r3, #6
 80012b0:	733b      	strb	r3, [r7, #12]
	GpioC_In.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80012b2:	2300      	movs	r3, #0
 80012b4:	737b      	strb	r3, [r7, #13]
	GpioC_In.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80012b6:	2301      	movs	r3, #1
 80012b8:	73bb      	strb	r3, [r7, #14]
	GpioC_In.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80012ba:	2300      	movs	r3, #0
 80012bc:	743b      	strb	r3, [r7, #16]
	GpioC_In.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80012be:	2301      	movs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&GpioC_In);
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 f96c 	bl	80045a4 <GPIO_Init>

	/* Column 2 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_2_PORT;
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <KEYPAD_Init+0xe0>)
 80012ce:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 80012d0:	2303      	movs	r3, #3
 80012d2:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 f963 	bl	80045a4 <GPIO_Init>

	/* Column 3 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_3_PORT;
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <KEYPAD_Init+0xe0>)
 80012e0:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_3_PIN;
 80012e2:	2305      	movs	r3, #5
 80012e4:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f95a 	bl	80045a4 <GPIO_Init>

	/* Column 4 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_4_PORT;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <KEYPAD_Init+0xe0>)
 80012f2:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_4_PIN;
 80012f4:	2307      	movs	r3, #7
 80012f6:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 f951 	bl	80045a4 <GPIO_Init>

	/* All rows high */
	KEYPAD_INT_SetRow(0);
 8001302:	2000      	movs	r0, #0
 8001304:	f000 f818 	bl	8001338 <KEYPAD_INT_SetRow>
}
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200145a0 	.word	0x200145a0
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40020400 	.word	0x40020400

08001320 <KEYPAD_Read>:

KEYPAD_Button_t KEYPAD_Read(void) {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
	return KeypadStatus;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <KEYPAD_Read+0x14>)
 8001326:	781b      	ldrb	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000010 	.word	0x20000010

08001338 <KEYPAD_INT_SetRow>:

/* Private */
void KEYPAD_INT_SetRow(uint8_t row) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_ROW_1_HIGH;
 8001342:	2201      	movs	r2, #1
 8001344:	210b      	movs	r1, #11
 8001346:	481d      	ldr	r0, [pc, #116]	; (80013bc <KEYPAD_INT_SetRow+0x84>)
 8001348:	f003 fade 	bl	8004908 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_2_HIGH;
 800134c:	2201      	movs	r2, #1
 800134e:	2100      	movs	r1, #0
 8001350:	481b      	ldr	r0, [pc, #108]	; (80013c0 <KEYPAD_INT_SetRow+0x88>)
 8001352:	f003 fad9 	bl	8004908 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_3_HIGH;
 8001356:	2201      	movs	r2, #1
 8001358:	2102      	movs	r1, #2
 800135a:	4819      	ldr	r0, [pc, #100]	; (80013c0 <KEYPAD_INT_SetRow+0x88>)
 800135c:	f003 fad4 	bl	8004908 <GPIO_WriteToOutputPin>
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large)
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <KEYPAD_INT_SetRow+0x8c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d104      	bne.n	8001372 <KEYPAD_INT_SetRow+0x3a>
		KEYPAD_ROW_4_HIGH;
 8001368:	2201      	movs	r2, #1
 800136a:	2104      	movs	r1, #4
 800136c:	4814      	ldr	r0, [pc, #80]	; (80013c0 <KEYPAD_INT_SetRow+0x88>)
 800136e:	f003 facb 	bl	8004908 <GPIO_WriteToOutputPin>

	/* Set row low */
	if (row == 1)
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d104      	bne.n	8001382 <KEYPAD_INT_SetRow+0x4a>
		KEYPAD_ROW_1_LOW;
 8001378:	2200      	movs	r2, #0
 800137a:	210b      	movs	r1, #11
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <KEYPAD_INT_SetRow+0x84>)
 800137e:	f003 fac3 	bl	8004908 <GPIO_WriteToOutputPin>
	if (row == 2)
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d104      	bne.n	8001392 <KEYPAD_INT_SetRow+0x5a>
		KEYPAD_ROW_2_LOW;
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <KEYPAD_INT_SetRow+0x88>)
 800138e:	f003 fabb 	bl	8004908 <GPIO_WriteToOutputPin>
	if (row == 3)
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d104      	bne.n	80013a2 <KEYPAD_INT_SetRow+0x6a>
		KEYPAD_ROW_3_LOW;
 8001398:	2200      	movs	r2, #0
 800139a:	2102      	movs	r1, #2
 800139c:	4808      	ldr	r0, [pc, #32]	; (80013c0 <KEYPAD_INT_SetRow+0x88>)
 800139e:	f003 fab3 	bl	8004908 <GPIO_WriteToOutputPin>
	if (row == 4)
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d104      	bne.n	80013b2 <KEYPAD_INT_SetRow+0x7a>
		KEYPAD_ROW_4_LOW;
 80013a8:	2200      	movs	r2, #0
 80013aa:	2104      	movs	r1, #4
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <KEYPAD_INT_SetRow+0x88>)
 80013ae:	f003 faab 	bl	8004908 <GPIO_WriteToOutputPin>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	200145a0 	.word	0x200145a0

080013c8 <KEYPAD_INT_CheckColumn>:

uint8_t KEYPAD_INT_CheckColumn(uint8_t row) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	/* Read columns */

	/* Scan column 1 */
	if (KEYPAD_COLUMN_1_CHECK) {
 80013d2:	2106      	movs	r1, #6
 80013d4:	481f      	ldr	r0, [pc, #124]	; (8001454 <KEYPAD_INT_CheckColumn+0x8c>)
 80013d6:	f003 fa81 	bl	80048dc <GPIO_ReadFromInputPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d105      	bne.n	80013ec <KEYPAD_INT_CheckColumn+0x24>
		return KEYPAD_INT_Buttons[row - 1][0];
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <KEYPAD_INT_CheckColumn+0x90>)
 80013e6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80013ea:	e02e      	b.n	800144a <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 2 */
	if (KEYPAD_COLUMN_2_CHECK) {
 80013ec:	2103      	movs	r1, #3
 80013ee:	481b      	ldr	r0, [pc, #108]	; (800145c <KEYPAD_INT_CheckColumn+0x94>)
 80013f0:	f003 fa74 	bl	80048dc <GPIO_ReadFromInputPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <KEYPAD_INT_CheckColumn+0x40>
		return KEYPAD_INT_Buttons[row - 1][1];
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4a16      	ldr	r2, [pc, #88]	; (8001458 <KEYPAD_INT_CheckColumn+0x90>)
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	e020      	b.n	800144a <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 3 */
	if (KEYPAD_COLUMN_3_CHECK) {
 8001408:	2105      	movs	r1, #5
 800140a:	4814      	ldr	r0, [pc, #80]	; (800145c <KEYPAD_INT_CheckColumn+0x94>)
 800140c:	f003 fa66 	bl	80048dc <GPIO_ReadFromInputPin>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <KEYPAD_INT_CheckColumn+0x5c>
		return KEYPAD_INT_Buttons[row - 1][2];
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	3b01      	subs	r3, #1
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <KEYPAD_INT_CheckColumn+0x90>)
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	789b      	ldrb	r3, [r3, #2]
 8001422:	e012      	b.n	800144a <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 4 */
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large && KEYPAD_COLUMN_4_CHECK) {
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <KEYPAD_INT_CheckColumn+0x98>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10d      	bne.n	8001448 <KEYPAD_INT_CheckColumn+0x80>
 800142c:	2107      	movs	r1, #7
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <KEYPAD_INT_CheckColumn+0x94>)
 8001430:	f003 fa54 	bl	80048dc <GPIO_ReadFromInputPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d106      	bne.n	8001448 <KEYPAD_INT_CheckColumn+0x80>
		return KEYPAD_INT_Buttons[row - 1][3];
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	3b01      	subs	r3, #1
 800143e:	4a06      	ldr	r2, [pc, #24]	; (8001458 <KEYPAD_INT_CheckColumn+0x90>)
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	78db      	ldrb	r3, [r3, #3]
 8001446:	e000      	b.n	800144a <KEYPAD_INT_CheckColumn+0x82>
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 8001448:	23ff      	movs	r3, #255	; 0xff
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40020c00 	.word	0x40020c00
 8001458:	20000000 	.word	0x20000000
 800145c:	40020400 	.word	0x40020400
 8001460:	200145a0 	.word	0x200145a0

08001464 <KEYPAD_INT_Read>:

uint8_t KEYPAD_INT_Read(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	KEYPAD_INT_SetRow(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff ff64 	bl	8001338 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff ffa9 	bl	80013c8 <KEYPAD_INT_CheckColumn>
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2bff      	cmp	r3, #255	; 0xff
 800147e:	d001      	beq.n	8001484 <KEYPAD_INT_Read+0x20>
		return check;
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	e02b      	b.n	80014dc <KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	KEYPAD_INT_SetRow(2);
 8001484:	2002      	movs	r0, #2
 8001486:	f7ff ff57 	bl	8001338 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(2);
 800148a:	2002      	movs	r0, #2
 800148c:	f7ff ff9c 	bl	80013c8 <KEYPAD_INT_CheckColumn>
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2bff      	cmp	r3, #255	; 0xff
 8001498:	d001      	beq.n	800149e <KEYPAD_INT_Read+0x3a>
		return check;
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	e01e      	b.n	80014dc <KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	KEYPAD_INT_SetRow(3);
 800149e:	2003      	movs	r0, #3
 80014a0:	f7ff ff4a 	bl	8001338 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(3);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f7ff ff8f 	bl	80013c8 <KEYPAD_INT_CheckColumn>
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2bff      	cmp	r3, #255	; 0xff
 80014b2:	d001      	beq.n	80014b8 <KEYPAD_INT_Read+0x54>
		return check;
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	e011      	b.n	80014dc <KEYPAD_INT_Read+0x78>
	}

	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large) {
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <KEYPAD_INT_Read+0x80>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10c      	bne.n	80014da <KEYPAD_INT_Read+0x76>
		/* Set row 4 to LOW */
		KEYPAD_INT_SetRow(4);
 80014c0:	2004      	movs	r0, #4
 80014c2:	f7ff ff39 	bl	8001338 <KEYPAD_INT_SetRow>
		/* Check columns */
		check = KEYPAD_INT_CheckColumn(4);
 80014c6:	2004      	movs	r0, #4
 80014c8:	f7ff ff7e 	bl	80013c8 <KEYPAD_INT_CheckColumn>
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NOPRESSED) {
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2bff      	cmp	r3, #255	; 0xff
 80014d4:	d001      	beq.n	80014da <KEYPAD_INT_Read+0x76>
			return check;
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	e000      	b.n	80014dc <KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 80014da:	23ff      	movs	r3, #255	; 0xff
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200145a0 	.word	0x200145a0

080014e8 <KEYPAD_Hold_Button>:

KEYPAD_Button_t KEYPAD_Hold_Button(KEYPAD_Button_t button) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
	return button | 0x80;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f8:	b2db      	uxtb	r3, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <KEYPAD_Update>:

void KEYPAD_Update(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	KeypadStatus = (KEYPAD_Button_t) KEYPAD_INT_Read();
 800150c:	f7ff ffaa 	bl	8001464 <KEYPAD_INT_Read>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <KEYPAD_Update+0x14>)
 8001516:	701a      	strb	r2, [r3, #0]
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000010 	.word	0x20000010

08001520 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 800152a:	2101      	movs	r1, #1
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <LCD5110_send+0x40>)
 800152e:	f003 fe3d 	bl	80051ac <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2101      	movs	r1, #1
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <LCD5110_send+0x44>)
 8001538:	f003 f9e6 	bl	8004908 <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4619      	mov	r1, r3
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <LCD5110_send+0x40>)
 8001542:	f003 fe08 	bl	8005156 <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 8001546:	2201      	movs	r2, #1
 8001548:	2101      	movs	r1, #1
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <LCD5110_send+0x44>)
 800154c:	f003 f9dc 	bl	8004908 <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 8001550:	2100      	movs	r1, #0
 8001552:	4803      	ldr	r0, [pc, #12]	; (8001560 <LCD5110_send+0x40>)
 8001554:	f003 fe2a 	bl	80051ac <SPI_PeripheralControl>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40013000 	.word	0x40013000
 8001564:	40020400 	.word	0x40020400

08001568 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d002      	beq.n	8001584 <LCD5110_Pin+0x1c>
 800157e:	2b02      	cmp	r3, #2
 8001580:	d00f      	beq.n	80015a2 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 8001582:	e01d      	b.n	80015c0 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 800158a:	2201      	movs	r2, #1
 800158c:	2105      	movs	r1, #5
 800158e:	480e      	ldr	r0, [pc, #56]	; (80015c8 <LCD5110_Pin+0x60>)
 8001590:	f003 f9ba 	bl	8004908 <GPIO_WriteToOutputPin>
			break;
 8001594:	e014      	b.n	80015c0 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <LCD5110_Pin+0x60>)
 800159c:	f003 f9b4 	bl	8004908 <GPIO_WriteToOutputPin>
			break;
 80015a0:	e00e      	b.n	80015c0 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2107      	movs	r1, #7
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <LCD5110_Pin+0x64>)
 80015ae:	f003 f9ab 	bl	8004908 <GPIO_WriteToOutputPin>
			break;
 80015b2:	e004      	b.n	80015be <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2107      	movs	r1, #7
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <LCD5110_Pin+0x64>)
 80015ba:	f003 f9a5 	bl	8004908 <GPIO_WriteToOutputPin>
			break;
 80015be:	bf00      	nop
	}
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40021000 	.word	0x40021000

080015d0 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	e002      	b.n	80015e4 <LCD5110_Delay+0x14>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f8      	bhi.n	80015de <LCD5110_Delay+0xe>
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 8001606:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <LCD5110_Init+0x138>)
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800160a:	2302      	movs	r3, #2
 800160c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8001610:	2305      	movs	r3, #5
 8001612:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001622:	2302      	movs	r3, #2
 8001624:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8001628:	2305      	movs	r3, #5
 800162a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800162e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001632:	4618      	mov	r0, r3
 8001634:	f002 ffb6 	bl	80045a4 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8001638:	2307      	movs	r3, #7
 800163a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800163e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001642:	4618      	mov	r0, r3
 8001644:	f002 ffae 	bl	80045a4 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 8001648:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <LCD5110_Init+0x13c>)
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 800164c:	2301      	movs	r3, #1
 800164e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001652:	2301      	movs	r3, #1
 8001654:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800165e:	2300      	movs	r3, #0
 8001660:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 8001664:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001668:	4618      	mov	r0, r3
 800166a:	f002 ff9b 	bl	80045a4 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <LCD5110_Init+0x140>)
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 8001672:	2305      	movs	r3, #5
 8001674:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167c:	4618      	mov	r0, r3
 800167e:	f002 ff91 	bl	80045a4 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 8001682:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <LCD5110_Init+0x144>)
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 8001686:	2307      	movs	r3, #7
 8001688:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800168c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001690:	4618      	mov	r0, r3
 8001692:	f002 ff87 	bl	80045a4 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <LCD5110_Init+0x148>)
 8001698:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800169a:	2301      	movs	r3, #1
 800169c:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 800169e:	2301      	movs	r3, #1
 80016a0:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 80016a2:	2302      	movs	r3, #2
 80016a4:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 80016a6:	2300      	movs	r3, #0
 80016a8:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 80016aa:	2300      	movs	r3, #0
 80016ac:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 80016ae:	2300      	movs	r3, #0
 80016b0:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 80016b2:	2300      	movs	r3, #0
 80016b4:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fcf0 	bl	80050a0 <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 80016c0:	2101      	movs	r1, #1
 80016c2:	4820      	ldr	r0, [pc, #128]	; (8001744 <LCD5110_Init+0x148>)
 80016c4:	f003 fd8e 	bl	80051e4 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 80016c8:	2100      	movs	r1, #0
 80016ca:	2002      	movs	r0, #2
 80016cc:	f7ff ff4c 	bl	8001568 <LCD5110_Pin>
	LCD5110_Delay(10000);
 80016d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80016d4:	f7ff ff7c 	bl	80015d0 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 80016d8:	2101      	movs	r1, #1
 80016da:	2002      	movs	r0, #2
 80016dc:	f7ff ff44 	bl	8001568 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 80016e0:	2121      	movs	r1, #33	; 0x21
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 f830 	bl	8001748 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 80016e8:	2114      	movs	r1, #20
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f82c 	bl	8001748 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da01      	bge.n	80016fc <LCD5110_Init+0x100>
		contrast = 0x7F;
 80016f8:	237f      	movs	r3, #127	; 0x7f
 80016fa:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4619      	mov	r1, r3
 8001706:	2000      	movs	r0, #0
 8001708:	f000 f81e 	bl	8001748 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 800170c:	2120      	movs	r1, #32
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f81a 	bl	8001748 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001714:	210c      	movs	r1, #12
 8001716:	2000      	movs	r0, #0
 8001718:	f000 f816 	bl	8001748 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 800171c:	f000 f8b8 	bl	8001890 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001720:	210c      	movs	r1, #12
 8001722:	2000      	movs	r0, #0
 8001724:	f000 f810 	bl	8001748 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 8001728:	f000 f88c 	bl	8001844 <LCD5110_Clear>
}
 800172c:	bf00      	nop
 800172e:	3738      	adds	r7, #56	; 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40020800 	.word	0x40020800
 8001740:	40021000 	.word	0x40021000
 8001744:	40013000 	.word	0x40013000

08001748 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <LCD5110_Write+0x24>
 800175e:	2b01      	cmp	r3, #1
 8001760:	d109      	bne.n	8001776 <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 8001762:	2101      	movs	r1, #1
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff feff 	bl	8001568 <LCD5110_Pin>
			break;
 800176a:	e005      	b.n	8001778 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 800176c:	2100      	movs	r1, #0
 800176e:	2001      	movs	r0, #1
 8001770:	f7ff fefa 	bl	8001568 <LCD5110_Pin>
			break;
 8001774:	e000      	b.n	8001778 <LCD5110_Write+0x30>
		default: break;
 8001776:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fed0 	bl	8001520 <LCD5110_send>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	460b      	mov	r3, r1
 8001794:	71bb      	strb	r3, [r7, #6]
 8001796:	4613      	mov	r3, r2
 8001798:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b53      	cmp	r3, #83	; 0x53
 800179e:	d849      	bhi.n	8001834 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	2b2f      	cmp	r3, #47	; 0x2f
 80017a4:	d848      	bhi.n	8001838 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 80017a6:	797b      	ldrb	r3, [r7, #5]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d01d      	beq.n	80017e8 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 80017ac:	79fa      	ldrb	r2, [r7, #7]
 80017ae:	79bb      	ldrb	r3, [r7, #6]
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	b2d8      	uxtb	r0, r3
 80017b4:	4601      	mov	r1, r0
 80017b6:	2354      	movs	r3, #84	; 0x54
 80017b8:	fb03 f301 	mul.w	r3, r3, r1
 80017bc:	4413      	add	r3, r2
 80017be:	4a20      	ldr	r2, [pc, #128]	; (8001840 <LCD5110_DrawPixel+0xb8>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	b25a      	sxtb	r2, r3
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b259      	sxtb	r1, r3
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	2354      	movs	r3, #84	; 0x54
 80017da:	fb03 f300 	mul.w	r3, r3, r0
 80017de:	4413      	add	r3, r2
 80017e0:	b2c9      	uxtb	r1, r1
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <LCD5110_DrawPixel+0xb8>)
 80017e4:	54d1      	strb	r1, [r2, r3]
 80017e6:	e01e      	b.n	8001826 <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 80017e8:	79fa      	ldrb	r2, [r7, #7]
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	b2d8      	uxtb	r0, r3
 80017f0:	4601      	mov	r1, r0
 80017f2:	2354      	movs	r3, #84	; 0x54
 80017f4:	fb03 f301 	mul.w	r3, r3, r1
 80017f8:	4413      	add	r3, r2
 80017fa:	4a11      	ldr	r2, [pc, #68]	; (8001840 <LCD5110_DrawPixel+0xb8>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	b25a      	sxtb	r2, r3
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	2101      	movs	r1, #1
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	b25b      	sxtb	r3, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	b25b      	sxtb	r3, r3
 8001812:	4013      	ands	r3, r2
 8001814:	b259      	sxtb	r1, r3
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	2354      	movs	r3, #84	; 0x54
 800181a:	fb03 f300 	mul.w	r3, r3, r0
 800181e:	4413      	add	r3, r2
 8001820:	b2c9      	uxtb	r1, r1
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <LCD5110_DrawPixel+0xb8>)
 8001824:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 8001826:	79bb      	ldrb	r3, [r7, #6]
 8001828:	79fa      	ldrb	r2, [r7, #7]
 800182a:	79b9      	ldrb	r1, [r7, #6]
 800182c:	79f8      	ldrb	r0, [r7, #7]
 800182e:	f000 f89d 	bl	800196c <LCD5110_UpdateArea>
 8001832:	e002      	b.n	800183a <LCD5110_DrawPixel+0xb2>
		return;
 8001834:	bf00      	nop
 8001836:	e000      	b.n	800183a <LCD5110_DrawPixel+0xb2>
		return;
 8001838:	bf00      	nop
}
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200145a8 	.word	0x200145a8

08001844 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 800184a:	f000 f821 	bl	8001890 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	e007      	b.n	8001864 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <LCD5110_Clear+0x48>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3301      	adds	r3, #1
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800186a:	d3f3      	bcc.n	8001854 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 800186c:	2100      	movs	r1, #0
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f8b8 	bl	80019e4 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 8001874:	232f      	movs	r3, #47	; 0x2f
 8001876:	2253      	movs	r2, #83	; 0x53
 8001878:	2100      	movs	r1, #0
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f876 	bl	800196c <LCD5110_UpdateArea>
	LCD5110_Refresh();
 8001880:	f000 f812 	bl	80018a8 <LCD5110_Refresh>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200145a8 	.word	0x200145a8

08001890 <LCD5110_Home>:

void LCD5110_Home(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff ff56 	bl	8001748 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 800189c:	2140      	movs	r1, #64	; 0x40
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff ff52 	bl	8001748 <LCD5110_Write>
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	e03b      	b.n	800192c <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <LCD5110_Refresh+0xb0>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	3301      	adds	r3, #1
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dc2f      	bgt.n	8001924 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4a24      	ldr	r2, [pc, #144]	; (800195c <LCD5110_Refresh+0xb4>)
 80018ca:	7812      	ldrb	r2, [r2, #0]
 80018cc:	4293      	cmp	r3, r2
 80018ce:	dc31      	bgt.n	8001934 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	4619      	mov	r1, r3
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff ff34 	bl	8001748 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <LCD5110_Refresh+0xb8>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4619      	mov	r1, r3
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7ff ff2b 	bl	8001748 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <LCD5110_Refresh+0xb8>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	71bb      	strb	r3, [r7, #6]
 80018f8:	e00e      	b.n	8001918 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2254      	movs	r2, #84	; 0x54
 80018fe:	fb02 f203 	mul.w	r2, r2, r3
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	4413      	add	r3, r2
 8001906:	4a17      	ldr	r2, [pc, #92]	; (8001964 <LCD5110_Refresh+0xbc>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	4619      	mov	r1, r3
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff ff1b 	bl	8001748 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	3301      	adds	r3, #1
 8001916:	71bb      	strb	r3, [r7, #6]
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <LCD5110_Refresh+0xc0>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	79ba      	ldrb	r2, [r7, #6]
 800191e:	429a      	cmp	r2, r3
 8001920:	d9eb      	bls.n	80018fa <LCD5110_Refresh+0x52>
 8001922:	e000      	b.n	8001926 <LCD5110_Refresh+0x7e>
			continue;
 8001924:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	3301      	adds	r3, #1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d9c0      	bls.n	80018b4 <LCD5110_Refresh+0xc>
 8001932:	e000      	b.n	8001936 <LCD5110_Refresh+0x8e>
			break;
 8001934:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <LCD5110_Refresh+0xb8>)
 8001938:	2253      	movs	r2, #83	; 0x53
 800193a:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <LCD5110_Refresh+0xc0>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LCD5110_Refresh+0xb0>)
 8001944:	222f      	movs	r2, #47	; 0x2f
 8001946:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <LCD5110_Refresh+0xb4>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000022a 	.word	0x2000022a
 800195c:	2000022b 	.word	0x2000022b
 8001960:	20000228 	.word	0x20000228
 8001964:	200145a8 	.word	0x200145a8
 8001968:	20000229 	.word	0x20000229

0800196c <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 800196c:	b490      	push	{r4, r7}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4604      	mov	r4, r0
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4623      	mov	r3, r4
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	4603      	mov	r3, r0
 8001980:	71bb      	strb	r3, [r7, #6]
 8001982:	460b      	mov	r3, r1
 8001984:	717b      	strb	r3, [r7, #5]
 8001986:	4613      	mov	r3, r2
 8001988:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <LCD5110_UpdateArea+0x68>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	79fa      	ldrb	r2, [r7, #7]
 8001990:	429a      	cmp	r2, r3
 8001992:	d202      	bcs.n	800199a <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <LCD5110_UpdateArea+0x68>)
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <LCD5110_UpdateArea+0x6c>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	797a      	ldrb	r2, [r7, #5]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d902      	bls.n	80019aa <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 80019a4:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <LCD5110_UpdateArea+0x6c>)
 80019a6:	797b      	ldrb	r3, [r7, #5]
 80019a8:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <LCD5110_UpdateArea+0x70>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	79ba      	ldrb	r2, [r7, #6]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d202      	bcs.n	80019ba <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 80019b4:	4a09      	ldr	r2, [pc, #36]	; (80019dc <LCD5110_UpdateArea+0x70>)
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <LCD5110_UpdateArea+0x74>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	793a      	ldrb	r2, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d902      	bls.n	80019ca <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 80019c4:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <LCD5110_UpdateArea+0x74>)
 80019c6:	793b      	ldrb	r3, [r7, #4]
 80019c8:	7013      	strb	r3, [r2, #0]
	}
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc90      	pop	{r4, r7}
 80019d2:	4770      	bx	lr
 80019d4:	20000228 	.word	0x20000228
 80019d8:	20000229 	.word	0x20000229
 80019dc:	2000022a 	.word	0x2000022a
 80019e0:	2000022b 	.word	0x2000022b

080019e4 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	460a      	mov	r2, r1
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	4613      	mov	r3, r2
 80019f2:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 80019f4:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <LCD5110_GotoXY+0x28>)
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <LCD5110_GotoXY+0x2c>)
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	7013      	strb	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	200145a4 	.word	0x200145a4
 8001a10:	200145a5 	.word	0x200145a5

08001a14 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	71bb      	strb	r3, [r7, #6]
 8001a22:	4613      	mov	r3, r2
 8001a24:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8001a26:	797b      	ldrb	r3, [r7, #5]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d104      	bne.n	8001a36 <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8001a30:	2306      	movs	r3, #6
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e003      	b.n	8001a3e <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 8001a36:	2306      	movs	r3, #6
 8001a38:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8001a3e:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <LCD5110_Putc+0x144>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	7bbb      	ldrb	r3, [r7, #14]
 8001a46:	4413      	add	r3, r2
 8001a48:	2b54      	cmp	r3, #84	; 0x54
 8001a4a:	dd09      	ble.n	8001a60 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8001a4c:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <LCD5110_Putc+0x148>)
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	4413      	add	r3, r2
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <LCD5110_Putc+0x148>)
 8001a58:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <LCD5110_Putc+0x144>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	737b      	strb	r3, [r7, #13]
 8001a64:	e068      	b.n	8001b38 <LCD5110_Putc+0x124>
		if (c < 32) {
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b1f      	cmp	r3, #31
 8001a6a:	d91c      	bls.n	8001aa6 <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8001a6c:	797b      	ldrb	r3, [r7, #5]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f1a3 0220 	sub.w	r2, r3, #32
 8001a78:	7b79      	ldrb	r1, [r7, #13]
 8001a7a:	4839      	ldr	r0, [pc, #228]	; (8001b60 <LCD5110_Putc+0x14c>)
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	4403      	add	r3, r0
 8001a84:	440b      	add	r3, r1
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	733b      	strb	r3, [r7, #12]
 8001a8a:	e00c      	b.n	8001aa6 <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f1a3 0220 	sub.w	r2, r3, #32
 8001a92:	7b79      	ldrb	r1, [r7, #13]
 8001a94:	4833      	ldr	r0, [pc, #204]	; (8001b64 <LCD5110_Putc+0x150>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4403      	add	r3, r0
 8001aa0:	440b      	add	r3, r1
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8001aa6:	7b3b      	ldrb	r3, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <LCD5110_Putc+0xa4>
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <LCD5110_Putc+0xa4>
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d13b      	bne.n	8001b30 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8001ab8:	2300      	movs	r3, #0
 8001aba:	72fb      	strb	r3, [r7, #11]
 8001abc:	e02d      	b.n	8001b1a <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 8001abe:	79bb      	ldrb	r3, [r7, #6]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d112      	bne.n	8001aea <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <LCD5110_Putc+0x144>)
 8001ac6:	7818      	ldrb	r0, [r3, #0]
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <LCD5110_Putc+0x148>)
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	7afb      	ldrb	r3, [r7, #11]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2d9      	uxtb	r1, r3
 8001ad2:	7b3a      	ldrb	r2, [r7, #12]
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	fa42 f303 	asr.w	r3, r2, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f7ff fe50 	bl	8001788 <LCD5110_DrawPixel>
 8001ae8:	e014      	b.n	8001b14 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <LCD5110_Putc+0x144>)
 8001aec:	7818      	ldrb	r0, [r3, #0]
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <LCD5110_Putc+0x148>)
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	4413      	add	r3, r2
 8001af6:	b2d9      	uxtb	r1, r3
 8001af8:	7b3a      	ldrb	r2, [r7, #12]
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	fa42 f303 	asr.w	r3, r2, r3
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f7ff fe3a 	bl	8001788 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8001b14:	7afb      	ldrb	r3, [r7, #11]
 8001b16:	3301      	adds	r3, #1
 8001b18:	72fb      	strb	r3, [r7, #11]
 8001b1a:	7afa      	ldrb	r2, [r7, #11]
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d3cd      	bcc.n	8001abe <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <LCD5110_Putc+0x144>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <LCD5110_Putc+0x144>)
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	e000      	b.n	8001b32 <LCD5110_Putc+0x11e>
			continue;
 8001b30:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8001b32:	7b7b      	ldrb	r3, [r7, #13]
 8001b34:	3301      	adds	r3, #1
 8001b36:	737b      	strb	r3, [r7, #13]
 8001b38:	7b7a      	ldrb	r2, [r7, #13]
 8001b3a:	7bbb      	ldrb	r3, [r7, #14]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	db91      	blt.n	8001a66 <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <LCD5110_Putc+0x144>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <LCD5110_Putc+0x144>)
 8001b4c:	701a      	strb	r2, [r3, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200145a4 	.word	0x200145a4
 8001b5c:	200145a5 	.word	0x200145a5
 8001b60:	0800bc4c 	.word	0x0800bc4c
 8001b64:	0800ba04 	.word	0x0800ba04

08001b68 <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	70fb      	strb	r3, [r7, #3]
 8001b74:	4613      	mov	r3, r2
 8001b76:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8001b78:	e008      	b.n	8001b8c <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	78ba      	ldrb	r2, [r7, #2]
 8001b84:	78f9      	ldrb	r1, [r7, #3]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff44 	bl	8001a14 <LCD5110_Putc>
	while (*c) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f2      	bne.n	8001b7a <LCD5110_Puts+0x12>
	}
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f103 0208 	add.w	r2, r3, #8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb6:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f103 0208 	add.w	r2, r3, #8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f103 0208 	add.w	r2, r3, #8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	601a      	str	r2, [r3, #0]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c56:	d103      	bne.n	8001c60 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	e00c      	b.n	8001c7a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3308      	adds	r3, #8
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e002      	b.n	8001c6e <vListInsert+0x2e>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d2f6      	bcs.n	8001c68 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6892      	ldr	r2, [r2, #8]
 8001cc8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6852      	ldr	r2, [r2, #4]
 8001cd2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d103      	bne.n	8001ce6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d20:	f383 8811 	msr	BASEPRI, r3
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001d2e:	bf00      	nop
 8001d30:	e7fe      	b.n	8001d30 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001d32:	f002 f889 	bl	8003e48 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3e:	68f9      	ldr	r1, [r7, #12]
 8001d40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	441a      	add	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d62:	3b01      	subs	r3, #1
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	441a      	add	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	22ff      	movs	r2, #255	; 0xff
 8001d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	22ff      	movs	r2, #255	; 0xff
 8001d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d114      	bne.n	8001db2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01a      	beq.n	8001dc6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3310      	adds	r3, #16
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 f95f 	bl	8003058 <xTaskRemoveFromEventList>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <xQueueGenericReset+0xcc>)
 8001da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f3bf 8f4f 	dsb	sy
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	e009      	b.n	8001dc6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3310      	adds	r3, #16
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fef1 	bl	8001b9e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3324      	adds	r3, #36	; 0x24
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff feec 	bl	8001b9e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001dc6:	f002 f86f 	bl	8003ea8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	e000ed04 	.word	0xe000ed04

08001dd8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10a      	bne.n	8001e02 <xQueueGenericCreate+0x2a>
        __asm volatile
 8001dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df0:	f383 8811 	msr	BASEPRI, r3
 8001df4:	f3bf 8f6f 	isb	sy
 8001df8:	f3bf 8f4f 	dsb	sy
 8001dfc:	61bb      	str	r3, [r7, #24]
    }
 8001dfe:	bf00      	nop
 8001e00:	e7fe      	b.n	8001e00 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <xQueueGenericCreate+0x48>
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d101      	bne.n	8001e24 <xQueueGenericCreate+0x4c>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <xQueueGenericCreate+0x4e>
 8001e24:	2300      	movs	r3, #0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <xQueueGenericCreate+0x68>
        __asm volatile
 8001e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	617b      	str	r3, [r7, #20]
    }
 8001e3c:	bf00      	nop
 8001e3e:	e7fe      	b.n	8001e3e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001e46:	d90a      	bls.n	8001e5e <xQueueGenericCreate+0x86>
        __asm volatile
 8001e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4c:	f383 8811 	msr	BASEPRI, r3
 8001e50:	f3bf 8f6f 	isb	sy
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	613b      	str	r3, [r7, #16]
    }
 8001e5a:	bf00      	nop
 8001e5c:	e7fe      	b.n	8001e5c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	3350      	adds	r3, #80	; 0x50
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 f91a 	bl	800409c <pvPortMalloc>
 8001e68:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00d      	beq.n	8001e8c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3350      	adds	r3, #80	; 0x50
 8001e78:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e7a:	79fa      	ldrb	r2, [r7, #7]
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f805 	bl	8001e96 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
    }
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3728      	adds	r7, #40	; 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e002      	b.n	8001eb8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	69b8      	ldr	r0, [r7, #24]
 8001ec8:	f7ff ff1e 	bl	8001d08 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	68f9      	ldr	r1, [r7, #12]
 8001eda:	2073      	movs	r0, #115	; 0x73
 8001edc:	f004 fa9a 	bl	8006414 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b090      	sub	sp, #64	; 0x40
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <xQueueGenericSend+0x32>
        __asm volatile
 8001f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f08:	f383 8811 	msr	BASEPRI, r3
 8001f0c:	f3bf 8f6f 	isb	sy
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001f16:	bf00      	nop
 8001f18:	e7fe      	b.n	8001f18 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d103      	bne.n	8001f28 <xQueueGenericSend+0x40>
 8001f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <xQueueGenericSend+0x44>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <xQueueGenericSend+0x46>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <xQueueGenericSend+0x60>
        __asm volatile
 8001f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001f44:	bf00      	nop
 8001f46:	e7fe      	b.n	8001f46 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d103      	bne.n	8001f56 <xQueueGenericSend+0x6e>
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <xQueueGenericSend+0x72>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <xQueueGenericSend+0x74>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10a      	bne.n	8001f76 <xQueueGenericSend+0x8e>
        __asm volatile
 8001f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f64:	f383 8811 	msr	BASEPRI, r3
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	623b      	str	r3, [r7, #32]
    }
 8001f72:	bf00      	nop
 8001f74:	e7fe      	b.n	8001f74 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f76:	f001 fa0f 	bl	8003398 <xTaskGetSchedulerState>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <xQueueGenericSend+0x9e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <xQueueGenericSend+0xa2>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <xQueueGenericSend+0xa4>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10a      	bne.n	8001fa6 <xQueueGenericSend+0xbe>
        __asm volatile
 8001f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f94:	f383 8811 	msr	BASEPRI, r3
 8001f98:	f3bf 8f6f 	isb	sy
 8001f9c:	f3bf 8f4f 	dsb	sy
 8001fa0:	61fb      	str	r3, [r7, #28]
    }
 8001fa2:	bf00      	nop
 8001fa4:	e7fe      	b.n	8001fa4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001fa6:	f001 ff4f 	bl	8003e48 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <xQueueGenericSend+0xd4>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d136      	bne.n	800202a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 ffb6 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4601      	mov	r1, r0
 8001fd0:	205a      	movs	r0, #90	; 0x5a
 8001fd2:	f004 fa95 	bl	8006500 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fdc:	f000 fa78 	bl	80024d0 <prvCopyDataToQueue>
 8001fe0:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d010      	beq.n	800200c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	3324      	adds	r3, #36	; 0x24
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 f832 	bl	8003058 <xTaskRemoveFromEventList>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d013      	beq.n	8002022 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001ffa:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <xQueueGenericSend+0x248>)
 8001ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	f3bf 8f6f 	isb	sy
 800200a:	e00a      	b.n	8002022 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <xQueueGenericSend+0x248>)
 8002014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002022:	f001 ff41 	bl	8003ea8 <vPortExitCritical>
                return pdPASS;
 8002026:	2301      	movs	r3, #1
 8002028:	e07d      	b.n	8002126 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d110      	bne.n	8002052 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002030:	f001 ff3a 	bl	8003ea8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002036:	4618      	mov	r0, r3
 8002038:	f004 ff7a 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	460b      	mov	r3, r1
 8002046:	4601      	mov	r1, r0
 8002048:	205a      	movs	r0, #90	; 0x5a
 800204a:	f004 fa59 	bl	8006500 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800204e:	2300      	movs	r3, #0
 8002050:	e069      	b.n	8002126 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	2b00      	cmp	r3, #0
 8002056:	d106      	bne.n	8002066 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4618      	mov	r0, r3
 800205e:	f001 f861 	bl	8003124 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002062:	2301      	movs	r3, #1
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002066:	f001 ff1f 	bl	8003ea8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800206a:	f000 fda9 	bl	8002bc0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800206e:	f001 feeb 	bl	8003e48 <vPortEnterCritical>
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002078:	b25b      	sxtb	r3, r3
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800207e:	d103      	bne.n	8002088 <xQueueGenericSend+0x1a0>
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800208e:	b25b      	sxtb	r3, r3
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002094:	d103      	bne.n	800209e <xQueueGenericSend+0x1b6>
 8002096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800209e:	f001 ff03 	bl	8003ea8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020a2:	1d3a      	adds	r2, r7, #4
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 f850 	bl	8003150 <xTaskCheckForTimeOut>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d124      	bne.n	8002100 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020b8:	f000 fb02 	bl	80026c0 <prvIsQueueFull>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d018      	beq.n	80020f4 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c4:	3310      	adds	r3, #16
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 ff72 	bl	8002fb4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80020d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020d2:	f000 fa8d 	bl	80025f0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80020d6:	f000 fd81 	bl	8002bdc <xTaskResumeAll>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f47f af62 	bne.w	8001fa6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <xQueueGenericSend+0x248>)
 80020e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f3bf 8f4f 	dsb	sy
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	e758      	b.n	8001fa6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80020f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020f6:	f000 fa7b 	bl	80025f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80020fa:	f000 fd6f 	bl	8002bdc <xTaskResumeAll>
 80020fe:	e752      	b.n	8001fa6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002102:	f000 fa75 	bl	80025f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002106:	f000 fd69 	bl	8002bdc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	4618      	mov	r0, r3
 800210e:	f004 ff0f 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	460b      	mov	r3, r1
 800211c:	4601      	mov	r1, r0
 800211e:	205a      	movs	r0, #90	; 0x5a
 8002120:	f004 f9ee 	bl	8006500 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002124:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002126:	4618      	mov	r0, r3
 8002128:	3738      	adds	r7, #56	; 0x38
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000ed04 	.word	0xe000ed04

08002134 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b090      	sub	sp, #64	; 0x40
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800214c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002150:	f383 8811 	msr	BASEPRI, r3
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800215e:	bf00      	nop
 8002160:	e7fe      	b.n	8002160 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d103      	bne.n	8002170 <xQueueGenericSendFromISR+0x3c>
 8002168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <xQueueGenericSendFromISR+0x40>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <xQueueGenericSendFromISR+0x42>
 8002174:	2300      	movs	r3, #0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217e:	f383 8811 	msr	BASEPRI, r3
 8002182:	f3bf 8f6f 	isb	sy
 8002186:	f3bf 8f4f 	dsb	sy
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800218c:	bf00      	nop
 800218e:	e7fe      	b.n	800218e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d103      	bne.n	800219e <xQueueGenericSendFromISR+0x6a>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <xQueueGenericSendFromISR+0x6e>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <xQueueGenericSendFromISR+0x70>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	623b      	str	r3, [r7, #32]
    }
 80021ba:	bf00      	nop
 80021bc:	e7fe      	b.n	80021bc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021be:	f001 ff2d 	bl	800401c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80021c2:	f3ef 8211 	mrs	r2, BASEPRI
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	61fa      	str	r2, [r7, #28]
 80021d8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80021da:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021dc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d302      	bcc.n	80021f0 <xQueueGenericSendFromISR+0xbc>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d148      	bne.n	8002282 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80021f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002202:	4618      	mov	r0, r3
 8002204:	f004 fe94 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 8002208:	4601      	mov	r1, r0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	461a      	mov	r2, r3
 800220e:	2060      	movs	r0, #96	; 0x60
 8002210:	f004 f8a6 	bl	8006360 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800221a:	f000 f959 	bl	80024d0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800221e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002226:	d112      	bne.n	800224e <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	2b00      	cmp	r3, #0
 800222e:	d025      	beq.n	800227c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002232:	3324      	adds	r3, #36	; 0x24
 8002234:	4618      	mov	r0, r3
 8002236:	f000 ff0f 	bl	8003058 <xTaskRemoveFromEventList>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01d      	beq.n	800227c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01a      	beq.n	800227c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e016      	b.n	800227c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800224e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002252:	2b7f      	cmp	r3, #127	; 0x7f
 8002254:	d10a      	bne.n	800226c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	617b      	str	r3, [r7, #20]
    }
 8002268:	bf00      	nop
 800226a:	e7fe      	b.n	800226a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800226c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002270:	3301      	adds	r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	b25a      	sxtb	r2, r3
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800227c:	2301      	movs	r3, #1
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002280:	e00b      	b.n	800229a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002284:	4618      	mov	r0, r3
 8002286:	f004 fe53 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 800228a:	4601      	mov	r1, r0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	461a      	mov	r2, r3
 8002290:	2060      	movs	r0, #96	; 0x60
 8002292:	f004 f865 	bl	8006360 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002296:	2300      	movs	r3, #0
 8002298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80022a4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80022a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3740      	adds	r7, #64	; 0x40
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b08f      	sub	sp, #60	; 0x3c
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <xQueueReceive+0x30>
        __asm volatile
 80022ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ce:	f383 8811 	msr	BASEPRI, r3
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	623b      	str	r3, [r7, #32]
    }
 80022dc:	bf00      	nop
 80022de:	e7fe      	b.n	80022de <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <xQueueReceive+0x3e>
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <xQueueReceive+0x42>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <xQueueReceive+0x44>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <xQueueReceive+0x5e>
        __asm volatile
 80022f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fc:	f383 8811 	msr	BASEPRI, r3
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	61fb      	str	r3, [r7, #28]
    }
 800230a:	bf00      	nop
 800230c:	e7fe      	b.n	800230c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800230e:	f001 f843 	bl	8003398 <xTaskGetSchedulerState>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <xQueueReceive+0x6e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <xQueueReceive+0x72>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <xQueueReceive+0x74>
 8002322:	2300      	movs	r3, #0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <xQueueReceive+0x8e>
        __asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	61bb      	str	r3, [r7, #24]
    }
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800233e:	f001 fd83 	bl	8003e48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	2b00      	cmp	r3, #0
 800234c:	d02f      	beq.n	80023ae <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002352:	f000 f927 	bl	80025a4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	4618      	mov	r0, r3
 800235a:	f004 fde9 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 800235e:	4604      	mov	r4, r0
 8002360:	2000      	movs	r0, #0
 8002362:	f004 fde5 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2101      	movs	r1, #1
 800236c:	9100      	str	r1, [sp, #0]
 800236e:	4621      	mov	r1, r4
 8002370:	205c      	movs	r0, #92	; 0x5c
 8002372:	f004 f8c5 	bl	8006500 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	1e5a      	subs	r2, r3, #1
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00f      	beq.n	80023a6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	3310      	adds	r3, #16
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fe64 	bl	8003058 <xTaskRemoveFromEventList>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002396:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <xQueueReceive+0x21c>)
 8002398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80023a6:	f001 fd7f 	bl	8003ea8 <vPortExitCritical>
                return pdPASS;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e08a      	b.n	80024c4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d113      	bne.n	80023dc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80023b4:	f001 fd78 	bl	8003ea8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 fdb8 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 80023c0:	4604      	mov	r4, r0
 80023c2:	2000      	movs	r0, #0
 80023c4:	f004 fdb4 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2101      	movs	r1, #1
 80023ce:	9100      	str	r1, [sp, #0]
 80023d0:	4621      	mov	r1, r4
 80023d2:	205c      	movs	r0, #92	; 0x5c
 80023d4:	f004 f894 	bl	8006500 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80023d8:	2300      	movs	r3, #0
 80023da:	e073      	b.n	80024c4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023e2:	f107 0310 	add.w	r3, r7, #16
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fe9c 	bl	8003124 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023f0:	f001 fd5a 	bl	8003ea8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023f4:	f000 fbe4 	bl	8002bc0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023f8:	f001 fd26 	bl	8003e48 <vPortEnterCritical>
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002402:	b25b      	sxtb	r3, r3
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002408:	d103      	bne.n	8002412 <xQueueReceive+0x162>
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002418:	b25b      	sxtb	r3, r3
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800241e:	d103      	bne.n	8002428 <xQueueReceive+0x178>
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002428:	f001 fd3e 	bl	8003ea8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800242c:	1d3a      	adds	r2, r7, #4
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fe8b 	bl	8003150 <xTaskCheckForTimeOut>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d124      	bne.n	800248a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002442:	f000 f927 	bl	8002694 <prvIsQueueEmpty>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d018      	beq.n	800247e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	3324      	adds	r3, #36	; 0x24
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fdad 	bl	8002fb4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800245a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800245c:	f000 f8c8 	bl	80025f0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002460:	f000 fbbc 	bl	8002bdc <xTaskResumeAll>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	f47f af69 	bne.w	800233e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <xQueueReceive+0x21c>)
 800246e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	e75f      	b.n	800233e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800247e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002480:	f000 f8b6 	bl	80025f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002484:	f000 fbaa 	bl	8002bdc <xTaskResumeAll>
 8002488:	e759      	b.n	800233e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800248a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800248c:	f000 f8b0 	bl	80025f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002490:	f000 fba4 	bl	8002bdc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002496:	f000 f8fd 	bl	8002694 <prvIsQueueEmpty>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	f43f af4e 	beq.w	800233e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	4618      	mov	r0, r3
 80024a6:	f004 fd43 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 80024aa:	4604      	mov	r4, r0
 80024ac:	2000      	movs	r0, #0
 80024ae:	f004 fd3f 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 80024b2:	4602      	mov	r2, r0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2101      	movs	r1, #1
 80024b8:	9100      	str	r1, [sp, #0]
 80024ba:	4621      	mov	r1, r4
 80024bc:	205c      	movs	r0, #92	; 0x5c
 80024be:	f004 f81f 	bl	8006500 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80024c2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3734      	adds	r7, #52	; 0x34
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}
 80024cc:	e000ed04 	.word	0xe000ed04

080024d0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10d      	bne.n	800250a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d14d      	bne.n	8002592 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 ff6a 	bl	80033d4 <xTaskPriorityDisinherit>
 8002500:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	e043      	b.n	8002592 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d119      	bne.n	8002544 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6858      	ldr	r0, [r3, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	461a      	mov	r2, r3
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	f006 fad0 	bl	8008ac0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	441a      	add	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	429a      	cmp	r2, r3
 8002538:	d32b      	bcc.n	8002592 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	e026      	b.n	8002592 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68d8      	ldr	r0, [r3, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	461a      	mov	r2, r3
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	f006 fab6 	bl	8008ac0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	425b      	negs	r3, r3
 800255e:	441a      	add	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	425b      	negs	r3, r3
 800257a:	441a      	add	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d105      	bne.n	8002592 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	3b01      	subs	r3, #1
 8002590:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800259a:	697b      	ldr	r3, [r7, #20]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d018      	beq.n	80025e8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	441a      	add	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d303      	bcc.n	80025d8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68d9      	ldr	r1, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	461a      	mov	r2, r3
 80025e2:	6838      	ldr	r0, [r7, #0]
 80025e4:	f006 fa6c 	bl	8008ac0 <memcpy>
    }
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80025f8:	f001 fc26 	bl	8003e48 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002602:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002604:	e011      	b.n	800262a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	d012      	beq.n	8002634 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3324      	adds	r3, #36	; 0x24
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fd20 	bl	8003058 <xTaskRemoveFromEventList>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800261e:	f000 fdfd 	bl	800321c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	3b01      	subs	r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800262a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	dce9      	bgt.n	8002606 <prvUnlockQueue+0x16>
 8002632:	e000      	b.n	8002636 <prvUnlockQueue+0x46>
                        break;
 8002634:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800263e:	f001 fc33 	bl	8003ea8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002642:	f001 fc01 	bl	8003e48 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800264c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800264e:	e011      	b.n	8002674 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d012      	beq.n	800267e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3310      	adds	r3, #16
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fcfb 	bl	8003058 <xTaskRemoveFromEventList>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002668:	f000 fdd8 	bl	800321c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800266c:	7bbb      	ldrb	r3, [r7, #14]
 800266e:	3b01      	subs	r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002678:	2b00      	cmp	r3, #0
 800267a:	dce9      	bgt.n	8002650 <prvUnlockQueue+0x60>
 800267c:	e000      	b.n	8002680 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800267e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	22ff      	movs	r2, #255	; 0xff
 8002684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002688:	f001 fc0e 	bl	8003ea8 <vPortExitCritical>
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800269c:	f001 fbd4 	bl	8003e48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e001      	b.n	80026b2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026b2:	f001 fbf9 	bl	8003ea8 <vPortExitCritical>

    return xReturn;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026c8:	f001 fbbe 	bl	8003e48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d102      	bne.n	80026de <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80026d8:	2301      	movs	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e001      	b.n	80026e2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026e2:	f001 fbe1 	bl	8003ea8 <vPortExitCritical>

    return xReturn;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	e01e      	b.n	800273e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002700:	4a13      	ldr	r2, [pc, #76]	; (8002750 <vQueueAddToRegistry+0x60>)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d115      	bne.n	8002738 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800270c:	4910      	ldr	r1, [pc, #64]	; (8002750 <vQueueAddToRegistry+0x60>)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002716:	4a0e      	ldr	r2, [pc, #56]	; (8002750 <vQueueAddToRegistry+0x60>)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	f004 fc03 	bl	8006f30 <SEGGER_SYSVIEW_ShrinkId>
 800272a:	4601      	mov	r1, r0
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	2071      	movs	r0, #113	; 0x71
 8002732:	f003 fe15 	bl	8006360 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002736:	e006      	b.n	8002746 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3301      	adds	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b07      	cmp	r3, #7
 8002742:	d9dd      	bls.n	8002700 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200147a0 	.word	0x200147a0

08002754 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002764:	f001 fb70 	bl	8003e48 <vPortEnterCritical>
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800276e:	b25b      	sxtb	r3, r3
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002774:	d103      	bne.n	800277e <vQueueWaitForMessageRestricted+0x2a>
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002784:	b25b      	sxtb	r3, r3
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800278a:	d103      	bne.n	8002794 <vQueueWaitForMessageRestricted+0x40>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002794:	f001 fb88 	bl	8003ea8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3324      	adds	r3, #36	; 0x24
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fc27 	bl	8002ffc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff1e 	bl	80025f0 <prvUnlockQueue>
    }
 80027b4:	bf00      	nop
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08c      	sub	sp, #48	; 0x30
 80027c0:	af04      	add	r7, sp, #16
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 fc63 	bl	800409c <pvPortMalloc>
 80027d6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00e      	beq.n	80027fc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027de:	2058      	movs	r0, #88	; 0x58
 80027e0:	f001 fc5c 	bl	800409c <pvPortMalloc>
 80027e4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
 80027f2:	e005      	b.n	8002800 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80027f4:	6978      	ldr	r0, [r7, #20]
 80027f6:	f001 fd31 	bl	800425c <vPortFree>
 80027fa:	e001      	b.n	8002800 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d013      	beq.n	800282e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002806:	88fa      	ldrh	r2, [r7, #6]
 8002808:	2300      	movs	r3, #0
 800280a:	9303      	str	r3, [sp, #12]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f80e 	bl	800283e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002822:	69f8      	ldr	r0, [r7, #28]
 8002824:	f000 f8a2 	bl	800296c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002828:	2301      	movs	r3, #1
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	e002      	b.n	8002834 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002832:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002834:	69bb      	ldr	r3, [r7, #24]
    }
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b088      	sub	sp, #32
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	461a      	mov	r2, r3
 8002856:	21a5      	movs	r1, #165	; 0xa5
 8002858:	f006 f940 	bl	8008adc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002866:	3b01      	subs	r3, #1
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f023 0307 	bic.w	r3, r3, #7
 8002874:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	617b      	str	r3, [r7, #20]
    }
 8002892:	bf00      	nop
 8002894:	e7fe      	b.n	8002894 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01f      	beq.n	80028dc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	e012      	b.n	80028c8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	7819      	ldrb	r1, [r3, #0]
 80028aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	3334      	adds	r3, #52	; 0x34
 80028b2:	460a      	mov	r2, r1
 80028b4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b09      	cmp	r3, #9
 80028cc:	d9e9      	bls.n	80028a2 <prvInitialiseNewTask+0x64>
 80028ce:	e000      	b.n	80028d2 <prvInitialiseNewTask+0x94>
            {
                break;
 80028d0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028da:	e003      	b.n	80028e4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d901      	bls.n	80028ee <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028ea:	2304      	movs	r3, #4
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	2200      	movs	r2, #0
 80028fe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	3304      	adds	r3, #4
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff f96a 	bl	8001bde <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	3318      	adds	r3, #24
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f965 	bl	8001bde <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002918:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	f1c3 0205 	rsb	r2, r3, #5
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	3350      	adds	r3, #80	; 0x50
 800292e:	2204      	movs	r2, #4
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f006 f8d2 	bl	8008adc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	3354      	adds	r3, #84	; 0x54
 800293c:	2201      	movs	r2, #1
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f006 f8cb 	bl	8008adc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	68f9      	ldr	r1, [r7, #12]
 800294a:	69b8      	ldr	r0, [r7, #24]
 800294c:	f001 f94c 	bl	8003be8 <pxPortInitialiseStack>
 8002950:	4602      	mov	r2, r0
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002960:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002962:	bf00      	nop
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800296c:	b5b0      	push	{r4, r5, r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af02      	add	r7, sp, #8
 8002972:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002974:	f001 fa68 	bl	8003e48 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002978:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <prvAddNewTaskToReadyList+0xfc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	4a3a      	ldr	r2, [pc, #232]	; (8002a68 <prvAddNewTaskToReadyList+0xfc>)
 8002980:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002982:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <prvAddNewTaskToReadyList+0x100>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800298a:	4a38      	ldr	r2, [pc, #224]	; (8002a6c <prvAddNewTaskToReadyList+0x100>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002990:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <prvAddNewTaskToReadyList+0xfc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d110      	bne.n	80029ba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002998:	f000 fc64 	bl	8003264 <prvInitialiseTaskLists>
 800299c:	e00d      	b.n	80029ba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <prvAddNewTaskToReadyList+0x104>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <prvAddNewTaskToReadyList+0x100>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d802      	bhi.n	80029ba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029b4:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <prvAddNewTaskToReadyList+0x100>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029ba:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <prvAddNewTaskToReadyList+0x108>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	4a2c      	ldr	r2, [pc, #176]	; (8002a74 <prvAddNewTaskToReadyList+0x108>)
 80029c2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <prvAddNewTaskToReadyList+0x108>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <prvAddNewTaskToReadyList+0x94>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f004 f985 	bl	8006ce4 <SEGGER_SYSVIEW_OnTaskCreate>
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	461d      	mov	r5, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	461c      	mov	r4, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	1ae3      	subs	r3, r4, r3
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	462b      	mov	r3, r5
 80029fc:	f002 fd66 	bl	80054cc <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 f9f2 	bl	8006dec <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <prvAddNewTaskToReadyList+0x10c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <prvAddNewTaskToReadyList+0x10c>)
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <prvAddNewTaskToReadyList+0x110>)
 8002a28:	441a      	add	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f7ff f8e1 	bl	8001bf8 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a36:	f001 fa37 	bl	8003ea8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <prvAddNewTaskToReadyList+0x104>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00e      	beq.n	8002a60 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <prvAddNewTaskToReadyList+0x100>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d207      	bcs.n	8002a60 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <prvAddNewTaskToReadyList+0x114>)
 8002a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bdb0      	pop	{r4, r5, r7, pc}
 8002a68:	20000304 	.word	0x20000304
 8002a6c:	2000022c 	.word	0x2000022c
 8002a70:	20000310 	.word	0x20000310
 8002a74:	20000320 	.word	0x20000320
 8002a78:	2000030c 	.word	0x2000030c
 8002a7c:	20000230 	.word	0x20000230
 8002a80:	e000ed04 	.word	0xe000ed04

08002a84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01b      	beq.n	8002ace <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <vTaskDelay+0x68>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <vTaskDelay+0x30>
        __asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	60bb      	str	r3, [r7, #8]
    }
 8002ab0:	bf00      	nop
 8002ab2:	e7fe      	b.n	8002ab2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002ab4:	f000 f884 	bl	8002bc0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	2023      	movs	r0, #35	; 0x23
 8002abc:	f003 fc14 	bl	80062e8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fd06 	bl	80034d4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ac8:	f000 f888 	bl	8002bdc <xTaskResumeAll>
 8002acc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <vTaskDelay+0x6c>)
 8002ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	2000032c 	.word	0x2000032c
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002afa:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <vTaskStartScheduler+0xac>)
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	2300      	movs	r3, #0
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	2300      	movs	r3, #0
 8002b04:	2282      	movs	r2, #130	; 0x82
 8002b06:	4927      	ldr	r1, [pc, #156]	; (8002ba4 <vTaskStartScheduler+0xb0>)
 8002b08:	4827      	ldr	r0, [pc, #156]	; (8002ba8 <vTaskStartScheduler+0xb4>)
 8002b0a:	f7ff fe57 	bl	80027bc <xTaskCreate>
 8002b0e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d102      	bne.n	8002b1c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002b16:	f000 fd55 	bl	80035c4 <xTimerCreateTimerTask>
 8002b1a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d129      	bne.n	8002b76 <vTaskStartScheduler+0x82>
        __asm volatile
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	60bb      	str	r3, [r7, #8]
    }
 8002b34:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <vTaskStartScheduler+0xb8>)
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b3c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b3e:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <vTaskStartScheduler+0xbc>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <vTaskStartScheduler+0xc0>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <vTaskStartScheduler+0xc4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3334      	adds	r3, #52	; 0x34
 8002b50:	2205      	movs	r2, #5
 8002b52:	4914      	ldr	r1, [pc, #80]	; (8002ba4 <vTaskStartScheduler+0xb0>)
 8002b54:	4618      	mov	r0, r3
 8002b56:	f005 ffa5 	bl	8008aa4 <memcmp>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <vTaskStartScheduler+0x78>
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <vTaskStartScheduler+0xc4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f004 f8ff 	bl	8006d68 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002b6a:	e001      	b.n	8002b70 <vTaskStartScheduler+0x7c>
 8002b6c:	f004 f89e 	bl	8006cac <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002b70:	f001 f8c8 	bl	8003d04 <xPortStartScheduler>
 8002b74:	e00e      	b.n	8002b94 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b7c:	d10a      	bne.n	8002b94 <vTaskStartScheduler+0xa0>
        __asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	607b      	str	r3, [r7, #4]
    }
 8002b90:	bf00      	nop
 8002b92:	e7fe      	b.n	8002b92 <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <vTaskStartScheduler+0xc8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000328 	.word	0x20000328
 8002ba4:	0800b7f0 	.word	0x0800b7f0
 8002ba8:	08003235 	.word	0x08003235
 8002bac:	20000324 	.word	0x20000324
 8002bb0:	20000310 	.word	0x20000310
 8002bb4:	20000308 	.word	0x20000308
 8002bb8:	2000022c 	.word	0x2000022c
 8002bbc:	20000014 	.word	0x20000014

08002bc0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <vTaskSuspendAll+0x18>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	4a03      	ldr	r2, [pc, #12]	; (8002bd8 <vTaskSuspendAll+0x18>)
 8002bcc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	2000032c 	.word	0x2000032c

08002bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002bea:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <xTaskResumeAll+0x11c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <xTaskResumeAll+0x2c>
        __asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	603b      	str	r3, [r7, #0]
    }
 8002c04:	bf00      	nop
 8002c06:	e7fe      	b.n	8002c06 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c08:	f001 f91e 	bl	8003e48 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <xTaskResumeAll+0x11c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	4a39      	ldr	r2, [pc, #228]	; (8002cf8 <xTaskResumeAll+0x11c>)
 8002c14:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <xTaskResumeAll+0x11c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d165      	bne.n	8002cea <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <xTaskResumeAll+0x120>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d061      	beq.n	8002cea <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c26:	e032      	b.n	8002c8e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c28:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <xTaskResumeAll+0x124>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3318      	adds	r3, #24
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff f83c 	bl	8001cb2 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f837 	bl	8001cb2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f004 f8d0 	bl	8006dec <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <xTaskResumeAll+0x128>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <xTaskResumeAll+0x128>)
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <xTaskResumeAll+0x12c>)
 8002c6c:	441a      	add	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3304      	adds	r3, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	4610      	mov	r0, r2
 8002c76:	f7fe ffbf 	bl	8001bf8 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7e:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <xTaskResumeAll+0x130>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d302      	bcc.n	8002c8e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <xTaskResumeAll+0x134>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <xTaskResumeAll+0x124>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1c8      	bne.n	8002c28 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c9c:	f000 fb60 	bl	8003360 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <xTaskResumeAll+0x138>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d010      	beq.n	8002cce <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cac:	f000 f858 	bl	8002d60 <xTaskIncrementTick>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <xTaskResumeAll+0x134>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f1      	bne.n	8002cac <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <xTaskResumeAll+0x138>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <xTaskResumeAll+0x134>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <xTaskResumeAll+0x13c>)
 8002cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f3bf 8f4f 	dsb	sy
 8002ce6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002cea:	f001 f8dd 	bl	8003ea8 <vPortExitCritical>

    return xAlreadyYielded;
 8002cee:	68bb      	ldr	r3, [r7, #8]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	2000032c 	.word	0x2000032c
 8002cfc:	20000304 	.word	0x20000304
 8002d00:	200002c4 	.word	0x200002c4
 8002d04:	2000030c 	.word	0x2000030c
 8002d08:	20000230 	.word	0x20000230
 8002d0c:	2000022c 	.word	0x2000022c
 8002d10:	20000318 	.word	0x20000318
 8002d14:	20000314 	.word	0x20000314
 8002d18:	e000ed04 	.word	0xe000ed04

08002d1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <xTaskGetTickCount+0x1c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d28:	687b      	ldr	r3, [r7, #4]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000308 	.word	0x20000308

08002d3c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d42:	f001 f96b 	bl	800401c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <xTaskGetTickCountFromISR+0x20>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d50:	683b      	ldr	r3, [r7, #0]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000308 	.word	0x20000308

08002d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6a:	4b50      	ldr	r3, [pc, #320]	; (8002eac <xTaskIncrementTick+0x14c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 8092 	bne.w	8002e98 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d74:	4b4e      	ldr	r3, [pc, #312]	; (8002eb0 <xTaskIncrementTick+0x150>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d7c:	4a4c      	ldr	r2, [pc, #304]	; (8002eb0 <xTaskIncrementTick+0x150>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d120      	bne.n	8002dca <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d88:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <xTaskIncrementTick+0x154>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	603b      	str	r3, [r7, #0]
    }
 8002da4:	bf00      	nop
 8002da6:	e7fe      	b.n	8002da6 <xTaskIncrementTick+0x46>
 8002da8:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <xTaskIncrementTick+0x154>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <xTaskIncrementTick+0x158>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a40      	ldr	r2, [pc, #256]	; (8002eb4 <xTaskIncrementTick+0x154>)
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4a40      	ldr	r2, [pc, #256]	; (8002eb8 <xTaskIncrementTick+0x158>)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b3f      	ldr	r3, [pc, #252]	; (8002ebc <xTaskIncrementTick+0x15c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4a3e      	ldr	r2, [pc, #248]	; (8002ebc <xTaskIncrementTick+0x15c>)
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	f000 facb 	bl	8003360 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002dca:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <xTaskIncrementTick+0x160>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d34c      	bcc.n	8002e6e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd4:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <xTaskIncrementTick+0x154>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d104      	bne.n	8002de8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <xTaskIncrementTick+0x160>)
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002de4:	601a      	str	r2, [r3, #0]
                    break;
 8002de6:	e042      	b.n	8002e6e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002de8:	4b32      	ldr	r3, [pc, #200]	; (8002eb4 <xTaskIncrementTick+0x154>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d203      	bcs.n	8002e08 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e00:	4a2f      	ldr	r2, [pc, #188]	; (8002ec0 <xTaskIncrementTick+0x160>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e06:	e032      	b.n	8002e6e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe ff50 	bl	8001cb2 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	3318      	adds	r3, #24
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe ff47 	bl	8001cb2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 ffe0 	bl	8006dec <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	2201      	movs	r2, #1
 8002e32:	409a      	lsls	r2, r3
 8002e34:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <xTaskIncrementTick+0x164>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	4a22      	ldr	r2, [pc, #136]	; (8002ec4 <xTaskIncrementTick+0x164>)
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <xTaskIncrementTick+0x168>)
 8002e4c:	441a      	add	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3304      	adds	r3, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f7fe fecf 	bl	8001bf8 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <xTaskIncrementTick+0x16c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d3b5      	bcc.n	8002dd4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e6c:	e7b2      	b.n	8002dd4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e6e:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <xTaskIncrementTick+0x16c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	4914      	ldr	r1, [pc, #80]	; (8002ec8 <xTaskIncrementTick+0x168>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d901      	bls.n	8002e8a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002e86:	2301      	movs	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <xTaskIncrementTick+0x170>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002e92:	2301      	movs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e004      	b.n	8002ea2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <xTaskIncrementTick+0x174>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <xTaskIncrementTick+0x174>)
 8002ea0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002ea2:	697b      	ldr	r3, [r7, #20]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	2000032c 	.word	0x2000032c
 8002eb0:	20000308 	.word	0x20000308
 8002eb4:	200002bc 	.word	0x200002bc
 8002eb8:	200002c0 	.word	0x200002c0
 8002ebc:	2000031c 	.word	0x2000031c
 8002ec0:	20000324 	.word	0x20000324
 8002ec4:	2000030c 	.word	0x2000030c
 8002ec8:	20000230 	.word	0x20000230
 8002ecc:	2000022c 	.word	0x2000022c
 8002ed0:	20000318 	.word	0x20000318
 8002ed4:	20000314 	.word	0x20000314

08002ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ede:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <vTaskSwitchContext+0xc4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <vTaskSwitchContext+0xc8>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002eec:	e052      	b.n	8002f94 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8002eee:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <vTaskSwitchContext+0xc8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <vTaskSwitchContext+0xcc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f02:	7afb      	ldrb	r3, [r7, #11]
 8002f04:	f1c3 031f 	rsb	r3, r3, #31
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	4927      	ldr	r1, [pc, #156]	; (8002fa8 <vTaskSwitchContext+0xd0>)
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	607b      	str	r3, [r7, #4]
    }
 8002f30:	bf00      	nop
 8002f32:	e7fe      	b.n	8002f32 <vTaskSwitchContext+0x5a>
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <vTaskSwitchContext+0xd0>)
 8002f40:	4413      	add	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	3308      	adds	r3, #8
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d104      	bne.n	8002f64 <vTaskSwitchContext+0x8c>
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4a10      	ldr	r2, [pc, #64]	; (8002fac <vTaskSwitchContext+0xd4>)
 8002f6c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <vTaskSwitchContext+0xd4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3334      	adds	r3, #52	; 0x34
 8002f74:	2205      	movs	r2, #5
 8002f76:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <vTaskSwitchContext+0xd8>)
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f005 fd93 	bl	8008aa4 <memcmp>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <vTaskSwitchContext+0xb8>
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <vTaskSwitchContext+0xd4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 feed 	bl	8006d68 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f8e:	e001      	b.n	8002f94 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8002f90:	f003 fe8c 	bl	8006cac <SEGGER_SYSVIEW_OnIdle>
}
 8002f94:	bf00      	nop
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	2000032c 	.word	0x2000032c
 8002fa0:	20000318 	.word	0x20000318
 8002fa4:	2000030c 	.word	0x2000030c
 8002fa8:	20000230 	.word	0x20000230
 8002fac:	2000022c 	.word	0x2000022c
 8002fb0:	0800b7f0 	.word	0x0800b7f0

08002fb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	60fb      	str	r3, [r7, #12]
    }
 8002fd6:	bf00      	nop
 8002fd8:	e7fe      	b.n	8002fd8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <vTaskPlaceOnEventList+0x44>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3318      	adds	r3, #24
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe fe2c 	bl	8001c40 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fe8:	2101      	movs	r1, #1
 8002fea:	6838      	ldr	r0, [r7, #0]
 8002fec:	f000 fa72 	bl	80034d4 <prvAddCurrentTaskToDelayedList>
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	2000022c 	.word	0x2000022c

08002ffc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	617b      	str	r3, [r7, #20]
    }
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <vTaskPlaceOnEventListRestricted+0x58>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3318      	adds	r3, #24
 800302a:	4619      	mov	r1, r3
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7fe fde3 	bl	8001bf8 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800303c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800303e:	2024      	movs	r0, #36	; 0x24
 8003040:	f003 f934 	bl	80062ac <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	68b8      	ldr	r0, [r7, #8]
 8003048:	f000 fa44 	bl	80034d4 <prvAddCurrentTaskToDelayedList>
    }
 800304c:	bf00      	nop
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	2000022c 	.word	0x2000022c

08003058 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	60fb      	str	r3, [r7, #12]
    }
 8003080:	bf00      	nop
 8003082:	e7fe      	b.n	8003082 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	3318      	adds	r3, #24
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe fe12 	bl	8001cb2 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800308e:	4b1f      	ldr	r3, [pc, #124]	; (800310c <xTaskRemoveFromEventList+0xb4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d120      	bne.n	80030d8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3304      	adds	r3, #4
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fe09 	bl	8001cb2 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 fea2 	bl	8006dec <SEGGER_SYSVIEW_OnTaskStartReady>
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	2201      	movs	r2, #1
 80030ae:	409a      	lsls	r2, r3
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <xTaskRemoveFromEventList+0xb8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	4a16      	ldr	r2, [pc, #88]	; (8003110 <xTaskRemoveFromEventList+0xb8>)
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <xTaskRemoveFromEventList+0xbc>)
 80030c8:	441a      	add	r2, r3
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	3304      	adds	r3, #4
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f7fe fd91 	bl	8001bf8 <vListInsertEnd>
 80030d6:	e005      	b.n	80030e4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3318      	adds	r3, #24
 80030dc:	4619      	mov	r1, r3
 80030de:	480e      	ldr	r0, [pc, #56]	; (8003118 <xTaskRemoveFromEventList+0xc0>)
 80030e0:	f7fe fd8a 	bl	8001bf8 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <xTaskRemoveFromEventList+0xc4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d905      	bls.n	80030fe <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <xTaskRemoveFromEventList+0xc8>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e001      	b.n	8003102 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003102:	697b      	ldr	r3, [r7, #20]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	2000032c 	.word	0x2000032c
 8003110:	2000030c 	.word	0x2000030c
 8003114:	20000230 	.word	0x20000230
 8003118:	200002c4 	.word	0x200002c4
 800311c:	2000022c 	.word	0x2000022c
 8003120:	20000318 	.word	0x20000318

08003124 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <vTaskInternalSetTimeOutState+0x24>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <vTaskInternalSetTimeOutState+0x28>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	605a      	str	r2, [r3, #4]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	2000031c 	.word	0x2000031c
 800314c:	20000308 	.word	0x20000308

08003150 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	613b      	str	r3, [r7, #16]
    }
 8003172:	bf00      	nop
 8003174:	e7fe      	b.n	8003174 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	60fb      	str	r3, [r7, #12]
    }
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003192:	f000 fe59 	bl	8003e48 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003196:	4b1f      	ldr	r3, [pc, #124]	; (8003214 <xTaskCheckForTimeOut+0xc4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ae:	d102      	bne.n	80031b6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e026      	b.n	8003204 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4b17      	ldr	r3, [pc, #92]	; (8003218 <xTaskCheckForTimeOut+0xc8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d00a      	beq.n	80031d8 <xTaskCheckForTimeOut+0x88>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d305      	bcc.n	80031d8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80031cc:	2301      	movs	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e015      	b.n	8003204 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d20b      	bcs.n	80031fa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	1ad2      	subs	r2, r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff ff98 	bl	8003124 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	e004      	b.n	8003204 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003200:	2301      	movs	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003204:	f000 fe50 	bl	8003ea8 <vPortExitCritical>

    return xReturn;
 8003208:	69fb      	ldr	r3, [r7, #28]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000308 	.word	0x20000308
 8003218:	2000031c 	.word	0x2000031c

0800321c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <vTaskMissedYield+0x14>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
}
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	20000318 	.word	0x20000318

08003234 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800323c:	f000 f852 	bl	80032e4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <prvIdleTask+0x28>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d9f9      	bls.n	800323c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <prvIdleTask+0x2c>)
 800324a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003258:	e7f0      	b.n	800323c <prvIdleTask+0x8>
 800325a:	bf00      	nop
 800325c:	20000230 	.word	0x20000230
 8003260:	e000ed04 	.word	0xe000ed04

08003264 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	e00c      	b.n	800328a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <prvInitialiseTaskLists+0x60>)
 800327c:	4413      	add	r3, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fc8d 	bl	8001b9e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3301      	adds	r3, #1
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d9ef      	bls.n	8003270 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003290:	480d      	ldr	r0, [pc, #52]	; (80032c8 <prvInitialiseTaskLists+0x64>)
 8003292:	f7fe fc84 	bl	8001b9e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003296:	480d      	ldr	r0, [pc, #52]	; (80032cc <prvInitialiseTaskLists+0x68>)
 8003298:	f7fe fc81 	bl	8001b9e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800329c:	480c      	ldr	r0, [pc, #48]	; (80032d0 <prvInitialiseTaskLists+0x6c>)
 800329e:	f7fe fc7e 	bl	8001b9e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80032a2:	480c      	ldr	r0, [pc, #48]	; (80032d4 <prvInitialiseTaskLists+0x70>)
 80032a4:	f7fe fc7b 	bl	8001b9e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80032a8:	480b      	ldr	r0, [pc, #44]	; (80032d8 <prvInitialiseTaskLists+0x74>)
 80032aa:	f7fe fc78 	bl	8001b9e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <prvInitialiseTaskLists+0x78>)
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <prvInitialiseTaskLists+0x64>)
 80032b2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <prvInitialiseTaskLists+0x7c>)
 80032b6:	4a05      	ldr	r2, [pc, #20]	; (80032cc <prvInitialiseTaskLists+0x68>)
 80032b8:	601a      	str	r2, [r3, #0]
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000230 	.word	0x20000230
 80032c8:	20000294 	.word	0x20000294
 80032cc:	200002a8 	.word	0x200002a8
 80032d0:	200002c4 	.word	0x200002c4
 80032d4:	200002d8 	.word	0x200002d8
 80032d8:	200002f0 	.word	0x200002f0
 80032dc:	200002bc 	.word	0x200002bc
 80032e0:	200002c0 	.word	0x200002c0

080032e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032ea:	e019      	b.n	8003320 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80032ec:	f000 fdac 	bl	8003e48 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f0:	4b10      	ldr	r3, [pc, #64]	; (8003334 <prvCheckTasksWaitingTermination+0x50>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe fcd8 	bl	8001cb2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <prvCheckTasksWaitingTermination+0x54>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3b01      	subs	r3, #1
 8003308:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <prvCheckTasksWaitingTermination+0x54>)
 800330a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <prvCheckTasksWaitingTermination+0x58>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3b01      	subs	r3, #1
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <prvCheckTasksWaitingTermination+0x58>)
 8003314:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003316:	f000 fdc7 	bl	8003ea8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f810 	bl	8003340 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <prvCheckTasksWaitingTermination+0x58>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1e1      	bne.n	80032ec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	200002d8 	.word	0x200002d8
 8003338:	20000304 	.word	0x20000304
 800333c:	200002ec 	.word	0x200002ec

08003340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	4618      	mov	r0, r3
 800334e:	f000 ff85 	bl	800425c <vPortFree>
                vPortFree( pxTCB );
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 ff82 	bl	800425c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <prvResetNextTaskUnblockTime+0x30>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <prvResetNextTaskUnblockTime+0x34>)
 8003370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003374:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003376:	e005      	b.n	8003384 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <prvResetNextTaskUnblockTime+0x30>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <prvResetNextTaskUnblockTime+0x34>)
 8003382:	6013      	str	r3, [r2, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	200002bc 	.word	0x200002bc
 8003394:	20000324 	.word	0x20000324

08003398 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <xTaskGetSchedulerState+0x34>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80033a6:	2301      	movs	r3, #1
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	e008      	b.n	80033be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <xTaskGetSchedulerState+0x38>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80033b4:	2302      	movs	r3, #2
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	e001      	b.n	80033be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80033be:	687b      	ldr	r3, [r7, #4]
    }
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	20000310 	.word	0x20000310
 80033d0:	2000032c 	.word	0x2000032c

080033d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d068      	beq.n	80034bc <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <xTaskPriorityDisinherit+0xf4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d00a      	beq.n	800340a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	60fb      	str	r3, [r7, #12]
    }
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10a      	bne.n	8003428 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	60bb      	str	r3, [r7, #8]
    }
 8003424:	bf00      	nop
 8003426:	e7fe      	b.n	8003426 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	1e5a      	subs	r2, r3, #1
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343a:	429a      	cmp	r2, r3
 800343c:	d03e      	beq.n	80034bc <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d13a      	bne.n	80034bc <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	3304      	adds	r3, #4
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fc31 	bl	8001cb2 <uxListRemove>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	2201      	movs	r2, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43da      	mvns	r2, r3
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <xTaskPriorityDisinherit+0xf8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4013      	ands	r3, r2
 8003468:	4a18      	ldr	r2, [pc, #96]	; (80034cc <xTaskPriorityDisinherit+0xf8>)
 800346a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4619      	mov	r1, r3
 8003470:	204a      	movs	r0, #74	; 0x4a
 8003472:	f002 ff39 	bl	80062e8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	f1c3 0205 	rsb	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	2201      	movs	r2, #1
 8003490:	409a      	lsls	r2, r3
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <xTaskPriorityDisinherit+0xf8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4313      	orrs	r3, r2
 8003498:	4a0c      	ldr	r2, [pc, #48]	; (80034cc <xTaskPriorityDisinherit+0xf8>)
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <xTaskPriorityDisinherit+0xfc>)
 80034aa:	441a      	add	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f7fe fba0 	bl	8001bf8 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80034b8:	2301      	movs	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80034bc:	697b      	ldr	r3, [r7, #20]
    }
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	2000022c 	.word	0x2000022c
 80034cc:	2000030c 	.word	0x2000030c
 80034d0:	20000230 	.word	0x20000230

080034d4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80034de:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034e4:	4b31      	ldr	r3, [pc, #196]	; (80035ac <prvAddCurrentTaskToDelayedList+0xd8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3304      	adds	r3, #4
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fbe1 	bl	8001cb2 <uxListRemove>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034f6:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <prvAddCurrentTaskToDelayedList+0xd8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	2201      	movs	r2, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4013      	ands	r3, r2
 800350a:	4a29      	ldr	r2, [pc, #164]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800350c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003514:	d110      	bne.n	8003538 <prvAddCurrentTaskToDelayedList+0x64>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800351c:	4b23      	ldr	r3, [pc, #140]	; (80035ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	211b      	movs	r1, #27
 8003522:	4618      	mov	r0, r3
 8003524:	f003 fca4 	bl	8006e70 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3304      	adds	r3, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4820      	ldr	r0, [pc, #128]	; (80035b4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003532:	f7fe fb61 	bl	8001bf8 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003536:	e032      	b.n	800359e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	429a      	cmp	r2, r3
 800354e:	d20f      	bcs.n	8003570 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003550:	4b16      	ldr	r3, [pc, #88]	; (80035ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2104      	movs	r1, #4
 8003556:	4618      	mov	r0, r3
 8003558:	f003 fc8a 	bl	8006e70 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3304      	adds	r3, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f7fe fb69 	bl	8001c40 <vListInsert>
}
 800356e:	e016      	b.n	800359e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003570:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2104      	movs	r1, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f003 fc7a 	bl	8006e70 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800357c:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3304      	adds	r3, #4
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f7fe fb59 	bl	8001c40 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	429a      	cmp	r2, r3
 8003596:	d202      	bcs.n	800359e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003598:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	6013      	str	r3, [r2, #0]
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000308 	.word	0x20000308
 80035ac:	2000022c 	.word	0x2000022c
 80035b0:	2000030c 	.word	0x2000030c
 80035b4:	200002f0 	.word	0x200002f0
 80035b8:	200002c0 	.word	0x200002c0
 80035bc:	200002bc 	.word	0x200002bc
 80035c0:	20000324 	.word	0x20000324

080035c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80035ce:	f000 fad5 	bl	8003b7c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <xTimerCreateTimerTask+0x54>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <xTimerCreateTimerTask+0x58>)
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	2302      	movs	r3, #2
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2300      	movs	r3, #0
 80035e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035e8:	490d      	ldr	r1, [pc, #52]	; (8003620 <xTimerCreateTimerTask+0x5c>)
 80035ea:	480e      	ldr	r0, [pc, #56]	; (8003624 <xTimerCreateTimerTask+0x60>)
 80035ec:	f7ff f8e6 	bl	80027bc <xTaskCreate>
 80035f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	603b      	str	r3, [r7, #0]
    }
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800360e:	687b      	ldr	r3, [r7, #4]
    }
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000360 	.word	0x20000360
 800361c:	20000364 	.word	0x20000364
 8003620:	0800b7f8 	.word	0x0800b7f8
 8003624:	0800375d 	.word	0x0800375d

08003628 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	623b      	str	r3, [r7, #32]
    }
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003656:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <xTimerGenericCommand+0x98>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d02a      	beq.n	80036b4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b05      	cmp	r3, #5
 800366e:	dc18      	bgt.n	80036a2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003670:	f7ff fe92 	bl	8003398 <xTaskGetSchedulerState>
 8003674:	4603      	mov	r3, r0
 8003676:	2b02      	cmp	r3, #2
 8003678:	d109      	bne.n	800368e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800367a:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <xTimerGenericCommand+0x98>)
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	f107 0114 	add.w	r1, r7, #20
 8003682:	2300      	movs	r3, #0
 8003684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003686:	f7fe fc2f 	bl	8001ee8 <xQueueGenericSend>
 800368a:	6278      	str	r0, [r7, #36]	; 0x24
 800368c:	e012      	b.n	80036b4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <xTimerGenericCommand+0x98>)
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	f107 0114 	add.w	r1, r7, #20
 8003696:	2300      	movs	r3, #0
 8003698:	2200      	movs	r2, #0
 800369a:	f7fe fc25 	bl	8001ee8 <xQueueGenericSend>
 800369e:	6278      	str	r0, [r7, #36]	; 0x24
 80036a0:	e008      	b.n	80036b4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <xTimerGenericCommand+0x98>)
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	f107 0114 	add.w	r1, r7, #20
 80036aa:	2300      	movs	r3, #0
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	f7fe fd41 	bl	8002134 <xQueueGenericSendFromISR>
 80036b2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80036b6:	4618      	mov	r0, r3
 80036b8:	3728      	adds	r7, #40	; 0x28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000360 	.word	0x20000360

080036c4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ce:	4b22      	ldr	r3, [pc, #136]	; (8003758 <prvProcessExpiredTimer+0x94>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3304      	adds	r3, #4
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe fae8 	bl	8001cb2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d022      	beq.n	8003736 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	18d1      	adds	r1, r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	6978      	ldr	r0, [r7, #20]
 80036fe:	f000 f8d1 	bl	80038a4 <prvInsertTimerInActiveList>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01f      	beq.n	8003748 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003708:	2300      	movs	r3, #0
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	2300      	movs	r3, #0
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	2100      	movs	r1, #0
 8003712:	6978      	ldr	r0, [r7, #20]
 8003714:	f7ff ff88 	bl	8003628 <xTimerGenericCommand>
 8003718:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d113      	bne.n	8003748 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	60fb      	str	r3, [r7, #12]
    }
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	b2da      	uxtb	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	6978      	ldr	r0, [r7, #20]
 800374e:	4798      	blx	r3
    }
 8003750:	bf00      	nop
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000358 	.word	0x20000358

0800375c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003764:	f107 0308 	add.w	r3, r7, #8
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f857 	bl	800381c <prvGetNextExpireTime>
 800376e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4619      	mov	r1, r3
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f803 	bl	8003780 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800377a:	f000 f8d5 	bl	8003928 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800377e:	e7f1      	b.n	8003764 <prvTimerTask+0x8>

08003780 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800378a:	f7ff fa19 	bl	8002bc0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800378e:	f107 0308 	add.w	r3, r7, #8
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f866 	bl	8003864 <prvSampleTimeNow>
 8003798:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d130      	bne.n	8003802 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <prvProcessTimerOrBlockTask+0x3c>
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d806      	bhi.n	80037bc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80037ae:	f7ff fa15 	bl	8002bdc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff85 	bl	80036c4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80037ba:	e024      	b.n	8003806 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037c2:	4b13      	ldr	r3, [pc, #76]	; (8003810 <prvProcessTimerOrBlockTask+0x90>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <prvProcessTimerOrBlockTask+0x50>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <prvProcessTimerOrBlockTask+0x52>
 80037d0:	2300      	movs	r3, #0
 80037d2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <prvProcessTimerOrBlockTask+0x94>)
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	4619      	mov	r1, r3
 80037e2:	f7fe ffb7 	bl	8002754 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80037e6:	f7ff f9f9 	bl	8002bdc <xTaskResumeAll>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <prvProcessTimerOrBlockTask+0x98>)
 80037f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	f3bf 8f6f 	isb	sy
    }
 8003800:	e001      	b.n	8003806 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003802:	f7ff f9eb 	bl	8002bdc <xTaskResumeAll>
    }
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	2000035c 	.word	0x2000035c
 8003814:	20000360 	.word	0x20000360
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003824:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <prvGetNextExpireTime+0x44>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <prvGetNextExpireTime+0x16>
 800382e:	2201      	movs	r2, #1
 8003830:	e000      	b.n	8003834 <prvGetNextExpireTime+0x18>
 8003832:	2200      	movs	r2, #0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d105      	bne.n	800384c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <prvGetNextExpireTime+0x44>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	e001      	b.n	8003850 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003850:	68fb      	ldr	r3, [r7, #12]
    }
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000358 	.word	0x20000358

08003864 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800386c:	f7ff fa56 	bl	8002d1c <xTaskGetTickCount>
 8003870:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <prvSampleTimeNow+0x3c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	429a      	cmp	r2, r3
 800387a:	d205      	bcs.n	8003888 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800387c:	f000 f91a 	bl	8003ab4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e002      	b.n	800388e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800388e:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <prvSampleTimeNow+0x3c>)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003894:	68fb      	ldr	r3, [r7, #12]
    }
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000368 	.word	0x20000368

080038a4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d812      	bhi.n	80038f0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	1ad2      	subs	r2, r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d302      	bcc.n	80038de <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e01b      	b.n	8003916 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <prvInsertTimerInActiveList+0x7c>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7fe f9a9 	bl	8001c40 <vListInsert>
 80038ee:	e012      	b.n	8003916 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d206      	bcs.n	8003906 <prvInsertTimerInActiveList+0x62>
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d302      	bcc.n	8003906 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003900:	2301      	movs	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e007      	b.n	8003916 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <prvInsertTimerInActiveList+0x80>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3304      	adds	r3, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f7fe f995 	bl	8001c40 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003916:	697b      	ldr	r3, [r7, #20]
    }
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	2000035c 	.word	0x2000035c
 8003924:	20000358 	.word	0x20000358

08003928 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003928:	b580      	push	{r7, lr}
 800392a:	b08c      	sub	sp, #48	; 0x30
 800392c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800392e:	e0ae      	b.n	8003a8e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f2c0 80aa 	blt.w	8003a8c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	3304      	adds	r3, #4
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe f9b2 	bl	8001cb2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff87 	bl	8003864 <prvSampleTimeNow>
 8003956:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b09      	cmp	r3, #9
 800395c:	f200 8097 	bhi.w	8003a8e <prvProcessReceivedCommands+0x166>
 8003960:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <prvProcessReceivedCommands+0x40>)
 8003962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003966:	bf00      	nop
 8003968:	08003991 	.word	0x08003991
 800396c:	08003991 	.word	0x08003991
 8003970:	08003991 	.word	0x08003991
 8003974:	08003a05 	.word	0x08003a05
 8003978:	08003a19 	.word	0x08003a19
 800397c:	08003a63 	.word	0x08003a63
 8003980:	08003991 	.word	0x08003991
 8003984:	08003991 	.word	0x08003991
 8003988:	08003a05 	.word	0x08003a05
 800398c:	08003a19 	.word	0x08003a19
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	b2da      	uxtb	r2, r3
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	18d1      	adds	r1, r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039b0:	f7ff ff78 	bl	80038a4 <prvInsertTimerInActiveList>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d069      	beq.n	8003a8e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039c0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05e      	beq.n	8003a8e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	441a      	add	r2, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	2100      	movs	r1, #0
 80039e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039e2:	f7ff fe21 	bl	8003628 <xTimerGenericCommand>
 80039e6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d14f      	bne.n	8003a8e <prvProcessReceivedCommands+0x166>
        __asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	61bb      	str	r3, [r7, #24]
    }
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003a16:	e03a      	b.n	8003a8e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10a      	bne.n	8003a4e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	617b      	str	r3, [r7, #20]
    }
 8003a4a:	bf00      	nop
 8003a4c:	e7fe      	b.n	8003a4c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	18d1      	adds	r1, r2, r3
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a5c:	f7ff ff22 	bl	80038a4 <prvInsertTimerInActiveList>
                        break;
 8003a60:	e015      	b.n	8003a8e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a72:	f000 fbf3 	bl	800425c <vPortFree>
 8003a76:	e00a      	b.n	8003a8e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a8a:	e000      	b.n	8003a8e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003a8c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <prvProcessReceivedCommands+0x188>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f107 0108 	add.w	r1, r7, #8
 8003a96:	2200      	movs	r2, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe fc09 	bl	80022b0 <xQueueReceive>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f af45 	bne.w	8003930 <prvProcessReceivedCommands+0x8>
        }
    }
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000360 	.word	0x20000360

08003ab4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aba:	e048      	b.n	8003b4e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003abc:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe f8ec 	bl	8001cb2 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02e      	beq.n	8003b4e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d90e      	bls.n	8003b20 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b0e:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fe f891 	bl	8001c40 <vListInsert>
 8003b1e:	e016      	b.n	8003b4e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b20:	2300      	movs	r3, #0
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2300      	movs	r3, #0
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	2100      	movs	r1, #0
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff fd7c 	bl	8003628 <xTimerGenericCommand>
 8003b30:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	603b      	str	r3, [r7, #0]
    }
 8003b4a:	bf00      	nop
 8003b4c:	e7fe      	b.n	8003b4c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1b1      	bne.n	8003abc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <prvSwitchTimerLists+0xc4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003b64:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <prvSwitchTimerLists+0xc4>)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	6013      	str	r3, [r2, #0]
    }
 8003b6c:	bf00      	nop
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000358 	.word	0x20000358
 8003b78:	2000035c 	.word	0x2000035c

08003b7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003b80:	f000 f962 	bl	8003e48 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <prvCheckForValidListAndQueue+0x54>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d11d      	bne.n	8003bc8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003b8c:	4811      	ldr	r0, [pc, #68]	; (8003bd4 <prvCheckForValidListAndQueue+0x58>)
 8003b8e:	f7fe f806 	bl	8001b9e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003b92:	4811      	ldr	r0, [pc, #68]	; (8003bd8 <prvCheckForValidListAndQueue+0x5c>)
 8003b94:	f7fe f803 	bl	8001b9e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003b98:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <prvCheckForValidListAndQueue+0x60>)
 8003b9a:	4a0e      	ldr	r2, [pc, #56]	; (8003bd4 <prvCheckForValidListAndQueue+0x58>)
 8003b9c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <prvCheckForValidListAndQueue+0x64>)
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	; (8003bd8 <prvCheckForValidListAndQueue+0x5c>)
 8003ba2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	210c      	movs	r1, #12
 8003ba8:	200a      	movs	r0, #10
 8003baa:	f7fe f915 	bl	8001dd8 <xQueueGenericCreate>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <prvCheckForValidListAndQueue+0x54>)
 8003bb2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <prvCheckForValidListAndQueue+0x54>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <prvCheckForValidListAndQueue+0x54>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4908      	ldr	r1, [pc, #32]	; (8003be4 <prvCheckForValidListAndQueue+0x68>)
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fd94 	bl	80026f0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003bc8:	f000 f96e 	bl	8003ea8 <vPortExitCritical>
    }
 8003bcc:	bf00      	nop
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000360 	.word	0x20000360
 8003bd4:	20000330 	.word	0x20000330
 8003bd8:	20000344 	.word	0x20000344
 8003bdc:	20000358 	.word	0x20000358
 8003be0:	2000035c 	.word	0x2000035c
 8003be4:	0800b800 	.word	0x0800b800

08003be8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3b04      	subs	r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f023 0201 	bic.w	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3b04      	subs	r3, #4
 8003c16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003c18:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <pxPortInitialiseStack+0x64>)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3b14      	subs	r3, #20
 8003c22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3b04      	subs	r3, #4
 8003c2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f06f 0202 	mvn.w	r2, #2
 8003c36:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3b20      	subs	r3, #32
 8003c3c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	08003c51 	.word	0x08003c51

08003c50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <prvTaskExitError+0x54>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c62:	d00a      	beq.n	8003c7a <prvTaskExitError+0x2a>
        __asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	60fb      	str	r3, [r7, #12]
    }
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <prvTaskExitError+0x28>
        __asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	60bb      	str	r3, [r7, #8]
    }
 8003c8c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003c8e:	bf00      	nop
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0fc      	beq.n	8003c90 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000018 	.word	0x20000018
	...

08003cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <pxCurrentTCBConst2>)
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	6808      	ldr	r0, [r1, #0]
 8003cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cba:	f380 8809 	msr	PSP, r0
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f380 8811 	msr	BASEPRI, r0
 8003cca:	4770      	bx	lr
 8003ccc:	f3af 8000 	nop.w

08003cd0 <pxCurrentTCBConst2>:
 8003cd0:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop

08003cd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003cd8:	4808      	ldr	r0, [pc, #32]	; (8003cfc <prvPortStartFirstTask+0x24>)
 8003cda:	6800      	ldr	r0, [r0, #0]
 8003cdc:	6800      	ldr	r0, [r0, #0]
 8003cde:	f380 8808 	msr	MSP, r0
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f380 8814 	msr	CONTROL, r0
 8003cea:	b662      	cpsie	i
 8003cec:	b661      	cpsie	f
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	df00      	svc	0
 8003cf8:	bf00      	nop
 8003cfa:	0000      	.short	0x0000
 8003cfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop

08003d04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d0a:	4b46      	ldr	r3, [pc, #280]	; (8003e24 <xPortStartScheduler+0x120>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a46      	ldr	r2, [pc, #280]	; (8003e28 <xPortStartScheduler+0x124>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d10a      	bne.n	8003d2a <xPortStartScheduler+0x26>
        __asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	613b      	str	r3, [r7, #16]
    }
 8003d26:	bf00      	nop
 8003d28:	e7fe      	b.n	8003d28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d2a:	4b3e      	ldr	r3, [pc, #248]	; (8003e24 <xPortStartScheduler+0x120>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a3f      	ldr	r2, [pc, #252]	; (8003e2c <xPortStartScheduler+0x128>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10a      	bne.n	8003d4a <xPortStartScheduler+0x46>
        __asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	60fb      	str	r3, [r7, #12]
    }
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d4a:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <xPortStartScheduler+0x12c>)
 8003d4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	22ff      	movs	r2, #255	; 0xff
 8003d5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <xPortStartScheduler+0x130>)
 8003d70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d72:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <xPortStartScheduler+0x134>)
 8003d74:	2207      	movs	r2, #7
 8003d76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d78:	e009      	b.n	8003d8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003d7a:	4b2f      	ldr	r3, [pc, #188]	; (8003e38 <xPortStartScheduler+0x134>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	4a2d      	ldr	r2, [pc, #180]	; (8003e38 <xPortStartScheduler+0x134>)
 8003d82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b80      	cmp	r3, #128	; 0x80
 8003d98:	d0ef      	beq.n	8003d7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d9a:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <xPortStartScheduler+0x134>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f1c3 0307 	rsb	r3, r3, #7
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d00a      	beq.n	8003dbc <xPortStartScheduler+0xb8>
        __asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	60bb      	str	r3, [r7, #8]
    }
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <xPortStartScheduler+0x134>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <xPortStartScheduler+0x134>)
 8003dc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dc6:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <xPortStartScheduler+0x134>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dce:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <xPortStartScheduler+0x134>)
 8003dd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003dda:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <xPortStartScheduler+0x138>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <xPortStartScheduler+0x138>)
 8003de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003de4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <xPortStartScheduler+0x138>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <xPortStartScheduler+0x138>)
 8003dec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003df0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003df2:	f000 f8e3 	bl	8003fbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <xPortStartScheduler+0x13c>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003dfc:	f000 f902 	bl	8004004 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <xPortStartScheduler+0x140>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <xPortStartScheduler+0x140>)
 8003e06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e0c:	f7ff ff64 	bl	8003cd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e10:	f7ff f862 	bl	8002ed8 <vTaskSwitchContext>
    prvTaskExitError();
 8003e14:	f7ff ff1c 	bl	8003c50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	e000ed00 	.word	0xe000ed00
 8003e28:	410fc271 	.word	0x410fc271
 8003e2c:	410fc270 	.word	0x410fc270
 8003e30:	e000e400 	.word	0xe000e400
 8003e34:	2000036c 	.word	0x2000036c
 8003e38:	20000370 	.word	0x20000370
 8003e3c:	e000ed20 	.word	0xe000ed20
 8003e40:	20000018 	.word	0x20000018
 8003e44:	e000ef34 	.word	0xe000ef34

08003e48 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	607b      	str	r3, [r7, #4]
    }
 8003e60:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <vPortEnterCritical+0x58>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	4a0d      	ldr	r2, [pc, #52]	; (8003ea0 <vPortEnterCritical+0x58>)
 8003e6a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <vPortEnterCritical+0x58>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d10f      	bne.n	8003e94 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <vPortEnterCritical+0x5c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <vPortEnterCritical+0x4c>
        __asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	603b      	str	r3, [r7, #0]
    }
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <vPortEnterCritical+0x4a>
    }
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	20000018 	.word	0x20000018
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <vPortExitCritical+0x50>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <vPortExitCritical+0x24>
        __asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	607b      	str	r3, [r7, #4]
    }
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <vPortExitCritical+0x50>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <vPortExitCritical+0x50>)
 8003ed4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <vPortExitCritical+0x50>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d105      	bne.n	8003eea <vPortExitCritical+0x42>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f383 8811 	msr	BASEPRI, r3
    }
 8003ee8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000018 	.word	0x20000018
 8003efc:	00000000 	.word	0x00000000

08003f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003f00:	f3ef 8009 	mrs	r0, PSP
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <pxCurrentTCBConst>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	f01e 0f10 	tst.w	lr, #16
 8003f10:	bf08      	it	eq
 8003f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1a:	6010      	str	r0, [r2, #0]
 8003f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f24:	f380 8811 	msr	BASEPRI, r0
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f7fe ffd2 	bl	8002ed8 <vTaskSwitchContext>
 8003f34:	f04f 0000 	mov.w	r0, #0
 8003f38:	f380 8811 	msr	BASEPRI, r0
 8003f3c:	bc09      	pop	{r0, r3}
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	6808      	ldr	r0, [r1, #0]
 8003f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f46:	f01e 0f10 	tst.w	lr, #16
 8003f4a:	bf08      	it	eq
 8003f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f50:	f380 8809 	msr	PSP, r0
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	f3af 8000 	nop.w

08003f60 <pxCurrentTCBConst>:
 8003f60:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop

08003f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	607b      	str	r3, [r7, #4]
    }
 8003f80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003f82:	f002 fe19 	bl	8006bb8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003f86:	f7fe feeb 	bl	8002d60 <xTaskIncrementTick>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d006      	beq.n	8003f9e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003f90:	f002 fe70 	bl	8006c74 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <SysTick_Handler+0x50>)
 8003f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e001      	b.n	8003fa2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003f9e:	f002 fe4d 	bl	8006c3c <SEGGER_SYSVIEW_RecordExitISR>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f383 8811 	msr	BASEPRI, r3
    }
 8003fac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <vPortSetupTimerInterrupt+0x34>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <vPortSetupTimerInterrupt+0x38>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <vPortSetupTimerInterrupt+0x3c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <vPortSetupTimerInterrupt+0x40>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	4a09      	ldr	r2, [pc, #36]	; (8004000 <vPortSetupTimerInterrupt+0x44>)
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fde:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <vPortSetupTimerInterrupt+0x34>)
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	601a      	str	r2, [r3, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	e000e010 	.word	0xe000e010
 8003ff4:	e000e018 	.word	0xe000e018
 8003ff8:	20000038 	.word	0x20000038
 8003ffc:	10624dd3 	.word	0x10624dd3
 8004000:	e000e014 	.word	0xe000e014

08004004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004014 <vPortEnableVFP+0x10>
 8004008:	6801      	ldr	r1, [r0, #0]
 800400a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800400e:	6001      	str	r1, [r0, #0]
 8004010:	4770      	bx	lr
 8004012:	0000      	.short	0x0000
 8004014:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop

0800401c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004022:	f3ef 8305 	mrs	r3, IPSR
 8004026:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b0f      	cmp	r3, #15
 800402c:	d914      	bls.n	8004058 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <vPortValidateInterruptPriority+0x70>)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4413      	add	r3, r2
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <vPortValidateInterruptPriority+0x74>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	7afa      	ldrb	r2, [r7, #11]
 800403e:	429a      	cmp	r2, r3
 8004040:	d20a      	bcs.n	8004058 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	607b      	str	r3, [r7, #4]
    }
 8004054:	bf00      	nop
 8004056:	e7fe      	b.n	8004056 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004058:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <vPortValidateInterruptPriority+0x78>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <vPortValidateInterruptPriority+0x7c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d90a      	bls.n	800407e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	603b      	str	r3, [r7, #0]
    }
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <vPortValidateInterruptPriority+0x60>
    }
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	e000e3f0 	.word	0xe000e3f0
 8004090:	2000036c 	.word	0x2000036c
 8004094:	e000ed0c 	.word	0xe000ed0c
 8004098:	20000370 	.word	0x20000370

0800409c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80040a8:	f7fe fd8a 	bl	8002bc0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80040ac:	4b65      	ldr	r3, [pc, #404]	; (8004244 <pvPortMalloc+0x1a8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80040b4:	f000 f934 	bl	8004320 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040b8:	4b63      	ldr	r3, [pc, #396]	; (8004248 <pvPortMalloc+0x1ac>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f040 80a7 	bne.w	8004214 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02d      	beq.n	8004128 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80040cc:	2208      	movs	r2, #8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d227      	bcs.n	8004128 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80040d8:	2208      	movs	r2, #8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d021      	beq.n	800412e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f023 0307 	bic.w	r3, r3, #7
 80040f0:	3308      	adds	r3, #8
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d214      	bcs.n	8004122 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f023 0307 	bic.w	r3, r3, #7
 80040fe:	3308      	adds	r3, #8
 8004100:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	2b00      	cmp	r3, #0
 800410a:	d010      	beq.n	800412e <pvPortMalloc+0x92>
        __asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	617b      	str	r3, [r7, #20]
    }
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004126:	e002      	b.n	800412e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	e000      	b.n	8004130 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800412e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d06e      	beq.n	8004214 <pvPortMalloc+0x178>
 8004136:	4b45      	ldr	r3, [pc, #276]	; (800424c <pvPortMalloc+0x1b0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d869      	bhi.n	8004214 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004140:	4b43      	ldr	r3, [pc, #268]	; (8004250 <pvPortMalloc+0x1b4>)
 8004142:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004144:	4b42      	ldr	r3, [pc, #264]	; (8004250 <pvPortMalloc+0x1b4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800414a:	e004      	b.n	8004156 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	429a      	cmp	r2, r3
 800415e:	d903      	bls.n	8004168 <pvPortMalloc+0xcc>
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f1      	bne.n	800414c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004168:	4b36      	ldr	r3, [pc, #216]	; (8004244 <pvPortMalloc+0x1a8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	429a      	cmp	r2, r3
 8004170:	d050      	beq.n	8004214 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2208      	movs	r2, #8
 8004178:	4413      	add	r3, r2
 800417a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	1ad2      	subs	r2, r2, r3
 800418c:	2308      	movs	r3, #8
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	429a      	cmp	r2, r3
 8004192:	d91f      	bls.n	80041d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <pvPortMalloc+0x120>
        __asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	613b      	str	r3, [r7, #16]
    }
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	1ad2      	subs	r2, r2, r3
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041ce:	69b8      	ldr	r0, [r7, #24]
 80041d0:	f000 f908 	bl	80043e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041d4:	4b1d      	ldr	r3, [pc, #116]	; (800424c <pvPortMalloc+0x1b0>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	4a1b      	ldr	r2, [pc, #108]	; (800424c <pvPortMalloc+0x1b0>)
 80041e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <pvPortMalloc+0x1b0>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <pvPortMalloc+0x1b8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d203      	bcs.n	80041f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <pvPortMalloc+0x1b0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a18      	ldr	r2, [pc, #96]	; (8004254 <pvPortMalloc+0x1b8>)
 80041f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	4b13      	ldr	r3, [pc, #76]	; (8004248 <pvPortMalloc+0x1ac>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	431a      	orrs	r2, r3
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800420a:	4b13      	ldr	r3, [pc, #76]	; (8004258 <pvPortMalloc+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3301      	adds	r3, #1
 8004210:	4a11      	ldr	r2, [pc, #68]	; (8004258 <pvPortMalloc+0x1bc>)
 8004212:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004214:	f7fe fce2 	bl	8002bdc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <pvPortMalloc+0x19c>
        __asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60fb      	str	r3, [r7, #12]
    }
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <pvPortMalloc+0x19a>
    return pvReturn;
 8004238:	69fb      	ldr	r3, [r7, #28]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3728      	adds	r7, #40	; 0x28
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20012f7c 	.word	0x20012f7c
 8004248:	20012f90 	.word	0x20012f90
 800424c:	20012f80 	.word	0x20012f80
 8004250:	20012f74 	.word	0x20012f74
 8004254:	20012f84 	.word	0x20012f84
 8004258:	20012f88 	.word	0x20012f88

0800425c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d04d      	beq.n	800430a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800426e:	2308      	movs	r3, #8
 8004270:	425b      	negs	r3, r3
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4413      	add	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	4b24      	ldr	r3, [pc, #144]	; (8004314 <vPortFree+0xb8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <vPortFree+0x44>
        __asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	60fb      	str	r3, [r7, #12]
    }
 800429c:	bf00      	nop
 800429e:	e7fe      	b.n	800429e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <vPortFree+0x62>
        __asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60bb      	str	r3, [r7, #8]
    }
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <vPortFree+0xb8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01e      	beq.n	800430a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11a      	bne.n	800430a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <vPortFree+0xb8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	43db      	mvns	r3, r3
 80042de:	401a      	ands	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80042e4:	f7fe fc6c 	bl	8002bc0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <vPortFree+0xbc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4413      	add	r3, r2
 80042f2:	4a09      	ldr	r2, [pc, #36]	; (8004318 <vPortFree+0xbc>)
 80042f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042f6:	6938      	ldr	r0, [r7, #16]
 80042f8:	f000 f874 	bl	80043e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <vPortFree+0xc0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4a06      	ldr	r2, [pc, #24]	; (800431c <vPortFree+0xc0>)
 8004304:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004306:	f7fe fc69 	bl	8002bdc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800430a:	bf00      	nop
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20012f90 	.word	0x20012f90
 8004318:	20012f80 	.word	0x20012f80
 800431c:	20012f8c 	.word	0x20012f8c

08004320 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004326:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800432a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800432c:	4b27      	ldr	r3, [pc, #156]	; (80043cc <prvHeapInit+0xac>)
 800432e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00c      	beq.n	8004354 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3307      	adds	r3, #7
 800433e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0307 	bic.w	r3, r3, #7
 8004346:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <prvHeapInit+0xac>)
 8004350:	4413      	add	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004358:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <prvHeapInit+0xb0>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800435e:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <prvHeapInit+0xb0>)
 8004360:	2200      	movs	r2, #0
 8004362:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	4413      	add	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800436c:	2208      	movs	r2, #8
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0307 	bic.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a15      	ldr	r2, [pc, #84]	; (80043d4 <prvHeapInit+0xb4>)
 8004380:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <prvHeapInit+0xb4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <prvHeapInit+0xb4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	1ad2      	subs	r2, r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <prvHeapInit+0xb4>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <prvHeapInit+0xb8>)
 80043ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4a09      	ldr	r2, [pc, #36]	; (80043dc <prvHeapInit+0xbc>)
 80043b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043b8:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <prvHeapInit+0xc0>)
 80043ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043be:	601a      	str	r2, [r3, #0]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	20000374 	.word	0x20000374
 80043d0:	20012f74 	.word	0x20012f74
 80043d4:	20012f7c 	.word	0x20012f7c
 80043d8:	20012f84 	.word	0x20012f84
 80043dc:	20012f80 	.word	0x20012f80
 80043e0:	20012f90 	.word	0x20012f90

080043e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043ec:	4b28      	ldr	r3, [pc, #160]	; (8004490 <prvInsertBlockIntoFreeList+0xac>)
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e002      	b.n	80043f8 <prvInsertBlockIntoFreeList+0x14>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d8f7      	bhi.n	80043f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	4413      	add	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	d108      	bne.n	8004426 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	441a      	add	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	441a      	add	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d118      	bne.n	800446c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <prvInsertBlockIntoFreeList+0xb0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d00d      	beq.n	8004462 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	441a      	add	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	e008      	b.n	8004474 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <prvInsertBlockIntoFreeList+0xb0>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e003      	b.n	8004474 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	429a      	cmp	r2, r3
 800447a:	d002      	beq.n	8004482 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20012f74 	.word	0x20012f74
 8004494:	20012f7c 	.word	0x20012f7c

08004498 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d161      	bne.n	800456e <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a33      	ldr	r2, [pc, #204]	; (800457c <GPIO_PeriClockControl+0xe4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d106      	bne.n	80044c0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80044b2:	4b33      	ldr	r3, [pc, #204]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	4a32      	ldr	r2, [pc, #200]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 80044be:	e056      	b.n	800456e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a30      	ldr	r2, [pc, #192]	; (8004584 <GPIO_PeriClockControl+0xec>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d106      	bne.n	80044d6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80044c8:	4b2d      	ldr	r3, [pc, #180]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 80044ce:	f043 0302 	orr.w	r3, r3, #2
 80044d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80044d4:	e04b      	b.n	800456e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2b      	ldr	r2, [pc, #172]	; (8004588 <GPIO_PeriClockControl+0xf0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d106      	bne.n	80044ec <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80044de:	4b28      	ldr	r3, [pc, #160]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	4a27      	ldr	r2, [pc, #156]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80044ea:	e040      	b.n	800456e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a27      	ldr	r2, [pc, #156]	; (800458c <GPIO_PeriClockControl+0xf4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d106      	bne.n	8004502 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80044f4:	4b22      	ldr	r3, [pc, #136]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	4a21      	ldr	r2, [pc, #132]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 80044fa:	f043 0308 	orr.w	r3, r3, #8
 80044fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004500:	e035      	b.n	800456e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a22      	ldr	r2, [pc, #136]	; (8004590 <GPIO_PeriClockControl+0xf8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d106      	bne.n	8004518 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800450a:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 8004510:	f043 0310 	orr.w	r3, r3, #16
 8004514:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004516:	e02a      	b.n	800456e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a1e      	ldr	r2, [pc, #120]	; (8004594 <GPIO_PeriClockControl+0xfc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d106      	bne.n	800452e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8004520:	4b17      	ldr	r3, [pc, #92]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	4a16      	ldr	r2, [pc, #88]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 8004526:	f043 0320 	orr.w	r3, r3, #32
 800452a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800452c:	e01f      	b.n	800456e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a19      	ldr	r2, [pc, #100]	; (8004598 <GPIO_PeriClockControl+0x100>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d106      	bne.n	8004544 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	4a11      	ldr	r2, [pc, #68]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 800453c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004540:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004542:	e014      	b.n	800456e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a15      	ldr	r2, [pc, #84]	; (800459c <GPIO_PeriClockControl+0x104>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d106      	bne.n	800455a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800454c:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 8004552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004558:	e009      	b.n	800456e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a10      	ldr	r2, [pc, #64]	; (80045a0 <GPIO_PeriClockControl+0x108>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d105      	bne.n	800456e <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8004562:	4b07      	ldr	r3, [pc, #28]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a06      	ldr	r2, [pc, #24]	; (8004580 <GPIO_PeriClockControl+0xe8>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40020000 	.word	0x40020000
 8004580:	40023800 	.word	0x40023800
 8004584:	40020400 	.word	0x40020400
 8004588:	40020800 	.word	0x40020800
 800458c:	40020c00 	.word	0x40020c00
 8004590:	40021000 	.word	0x40021000
 8004594:	40021400 	.word	0x40021400
 8004598:	40021800 	.word	0x40021800
 800459c:	40021c00 	.word	0x40021c00
 80045a0:	40022000 	.word	0x40022000

080045a4 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff ff6e 	bl	8004498 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	795b      	ldrb	r3, [r3, #5]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d820      	bhi.n	8004606 <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	795b      	ldrb	r3, [r3, #5]
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	791b      	ldrb	r3, [r3, #4]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	791b      	ldrb	r3, [r3, #4]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	2103      	movs	r1, #3
 80045e4:	fa01 f303 	lsl.w	r3, r1, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	4619      	mov	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	400a      	ands	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6819      	ldr	r1, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e0cb      	b.n	800479e <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	795b      	ldrb	r3, [r3, #5]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d117      	bne.n	800463e <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800460e:	4b4b      	ldr	r3, [pc, #300]	; (800473c <GPIO_Init+0x198>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	7912      	ldrb	r2, [r2, #4]
 8004616:	4611      	mov	r1, r2
 8004618:	2201      	movs	r2, #1
 800461a:	408a      	lsls	r2, r1
 800461c:	4611      	mov	r1, r2
 800461e:	4a47      	ldr	r2, [pc, #284]	; (800473c <GPIO_Init+0x198>)
 8004620:	430b      	orrs	r3, r1
 8004622:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004624:	4b45      	ldr	r3, [pc, #276]	; (800473c <GPIO_Init+0x198>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	7912      	ldrb	r2, [r2, #4]
 800462c:	4611      	mov	r1, r2
 800462e:	2201      	movs	r2, #1
 8004630:	408a      	lsls	r2, r1
 8004632:	43d2      	mvns	r2, r2
 8004634:	4611      	mov	r1, r2
 8004636:	4a41      	ldr	r2, [pc, #260]	; (800473c <GPIO_Init+0x198>)
 8004638:	400b      	ands	r3, r1
 800463a:	6093      	str	r3, [r2, #8]
 800463c:	e035      	b.n	80046aa <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	795b      	ldrb	r3, [r3, #5]
 8004642:	2b05      	cmp	r3, #5
 8004644:	d117      	bne.n	8004676 <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004646:	4b3d      	ldr	r3, [pc, #244]	; (800473c <GPIO_Init+0x198>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	7912      	ldrb	r2, [r2, #4]
 800464e:	4611      	mov	r1, r2
 8004650:	2201      	movs	r2, #1
 8004652:	408a      	lsls	r2, r1
 8004654:	4611      	mov	r1, r2
 8004656:	4a39      	ldr	r2, [pc, #228]	; (800473c <GPIO_Init+0x198>)
 8004658:	430b      	orrs	r3, r1
 800465a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800465c:	4b37      	ldr	r3, [pc, #220]	; (800473c <GPIO_Init+0x198>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	7912      	ldrb	r2, [r2, #4]
 8004664:	4611      	mov	r1, r2
 8004666:	2201      	movs	r2, #1
 8004668:	408a      	lsls	r2, r1
 800466a:	43d2      	mvns	r2, r2
 800466c:	4611      	mov	r1, r2
 800466e:	4a33      	ldr	r2, [pc, #204]	; (800473c <GPIO_Init+0x198>)
 8004670:	400b      	ands	r3, r1
 8004672:	60d3      	str	r3, [r2, #12]
 8004674:	e019      	b.n	80046aa <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	795b      	ldrb	r3, [r3, #5]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d115      	bne.n	80046aa <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800467e:	4b2f      	ldr	r3, [pc, #188]	; (800473c <GPIO_Init+0x198>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	7912      	ldrb	r2, [r2, #4]
 8004686:	4611      	mov	r1, r2
 8004688:	2201      	movs	r2, #1
 800468a:	408a      	lsls	r2, r1
 800468c:	4611      	mov	r1, r2
 800468e:	4a2b      	ldr	r2, [pc, #172]	; (800473c <GPIO_Init+0x198>)
 8004690:	430b      	orrs	r3, r1
 8004692:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004694:	4b29      	ldr	r3, [pc, #164]	; (800473c <GPIO_Init+0x198>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	7912      	ldrb	r2, [r2, #4]
 800469c:	4611      	mov	r1, r2
 800469e:	2201      	movs	r2, #1
 80046a0:	408a      	lsls	r2, r1
 80046a2:	4611      	mov	r1, r2
 80046a4:	4a25      	ldr	r2, [pc, #148]	; (800473c <GPIO_Init+0x198>)
 80046a6:	430b      	orrs	r3, r1
 80046a8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	791b      	ldrb	r3, [r3, #4]
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	791b      	ldrb	r3, [r3, #4]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <GPIO_Init+0x19c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d04e      	beq.n	8004764 <GPIO_Init+0x1c0>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <GPIO_Init+0x1a0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d032      	beq.n	8004736 <GPIO_Init+0x192>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <GPIO_Init+0x1a4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d02b      	beq.n	8004732 <GPIO_Init+0x18e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1b      	ldr	r2, [pc, #108]	; (800474c <GPIO_Init+0x1a8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d024      	beq.n	800472e <GPIO_Init+0x18a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <GPIO_Init+0x1ac>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01d      	beq.n	800472a <GPIO_Init+0x186>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <GPIO_Init+0x1b0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d016      	beq.n	8004726 <GPIO_Init+0x182>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a16      	ldr	r2, [pc, #88]	; (8004758 <GPIO_Init+0x1b4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00f      	beq.n	8004722 <GPIO_Init+0x17e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <GPIO_Init+0x1b8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d008      	beq.n	800471e <GPIO_Init+0x17a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a13      	ldr	r2, [pc, #76]	; (8004760 <GPIO_Init+0x1bc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <GPIO_Init+0x176>
 8004716:	2308      	movs	r3, #8
 8004718:	e025      	b.n	8004766 <GPIO_Init+0x1c2>
 800471a:	2300      	movs	r3, #0
 800471c:	e023      	b.n	8004766 <GPIO_Init+0x1c2>
 800471e:	2307      	movs	r3, #7
 8004720:	e021      	b.n	8004766 <GPIO_Init+0x1c2>
 8004722:	2306      	movs	r3, #6
 8004724:	e01f      	b.n	8004766 <GPIO_Init+0x1c2>
 8004726:	2305      	movs	r3, #5
 8004728:	e01d      	b.n	8004766 <GPIO_Init+0x1c2>
 800472a:	2304      	movs	r3, #4
 800472c:	e01b      	b.n	8004766 <GPIO_Init+0x1c2>
 800472e:	2303      	movs	r3, #3
 8004730:	e019      	b.n	8004766 <GPIO_Init+0x1c2>
 8004732:	2302      	movs	r3, #2
 8004734:	e017      	b.n	8004766 <GPIO_Init+0x1c2>
 8004736:	2301      	movs	r3, #1
 8004738:	e015      	b.n	8004766 <GPIO_Init+0x1c2>
 800473a:	bf00      	nop
 800473c:	40013c00 	.word	0x40013c00
 8004740:	40020000 	.word	0x40020000
 8004744:	40020400 	.word	0x40020400
 8004748:	40020800 	.word	0x40020800
 800474c:	40020c00 	.word	0x40020c00
 8004750:	40021000 	.word	0x40021000
 8004754:	40021400 	.word	0x40021400
 8004758:	40021800 	.word	0x40021800
 800475c:	40021c00 	.word	0x40021c00
 8004760:	40022000 	.word	0x40022000
 8004764:	2300      	movs	r3, #0
 8004766:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8004768:	4b59      	ldr	r3, [pc, #356]	; (80048d0 <GPIO_Init+0x32c>)
 800476a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476c:	4a58      	ldr	r2, [pc, #352]	; (80048d0 <GPIO_Init+0x32c>)
 800476e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004772:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8004774:	7c7a      	ldrb	r2, [r7, #17]
 8004776:	7cbb      	ldrb	r3, [r7, #18]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	fa02 f103 	lsl.w	r1, r2, r3
 800477e:	4a55      	ldr	r2, [pc, #340]	; (80048d4 <GPIO_Init+0x330>)
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	3302      	adds	r3, #2
 8004784:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8004788:	4b53      	ldr	r3, [pc, #332]	; (80048d8 <GPIO_Init+0x334>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	7912      	ldrb	r2, [r2, #4]
 8004790:	4611      	mov	r1, r2
 8004792:	2201      	movs	r2, #1
 8004794:	408a      	lsls	r2, r1
 8004796:	4611      	mov	r1, r2
 8004798:	4a4f      	ldr	r2, [pc, #316]	; (80048d8 <GPIO_Init+0x334>)
 800479a:	430b      	orrs	r3, r1
 800479c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	799b      	ldrb	r3, [r3, #6]
 80047a2:	461a      	mov	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	791b      	ldrb	r3, [r3, #4]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	791b      	ldrb	r3, [r3, #4]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	2103      	movs	r1, #3
 80047be:	fa01 f303 	lsl.w	r3, r1, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	4619      	mov	r1, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	400a      	ands	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6899      	ldr	r1, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	79db      	ldrb	r3, [r3, #7]
 80047e2:	461a      	mov	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	791b      	ldrb	r3, [r3, #4]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	791b      	ldrb	r3, [r3, #4]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	2103      	movs	r1, #3
 80047fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	4619      	mov	r1, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	400a      	ands	r2, r1
 800480c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68d9      	ldr	r1, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	430a      	orrs	r2, r1
 800481c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	7a1b      	ldrb	r3, [r3, #8]
 8004822:	461a      	mov	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	791b      	ldrb	r3, [r3, #4]
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	791b      	ldrb	r3, [r3, #4]
 8004838:	4619      	mov	r1, r3
 800483a:	2301      	movs	r3, #1
 800483c:	408b      	lsls	r3, r1
 800483e:	43db      	mvns	r3, r3
 8004840:	4619      	mov	r1, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	400a      	ands	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	795b      	ldrb	r3, [r3, #5]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d131      	bne.n	80048c6 <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	791b      	ldrb	r3, [r3, #4]
 8004866:	08db      	lsrs	r3, r3, #3
 8004868:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	791b      	ldrb	r3, [r3, #4]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	7c3a      	ldrb	r2, [r7, #16]
 800487a:	3208      	adds	r2, #8
 800487c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	220f      	movs	r2, #15
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	4618      	mov	r0, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	7c3a      	ldrb	r2, [r7, #16]
 8004894:	4001      	ands	r1, r0
 8004896:	3208      	adds	r2, #8
 8004898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	7c3a      	ldrb	r2, [r7, #16]
 80048a2:	3208      	adds	r2, #8
 80048a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	7a5b      	ldrb	r3, [r3, #9]
 80048ac:	461a      	mov	r2, r3
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	4618      	mov	r0, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	7c3a      	ldrb	r2, [r7, #16]
 80048be:	4301      	orrs	r1, r0
 80048c0:	3208      	adds	r2, #8
 80048c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80048c6:	bf00      	nop
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40013800 	.word	0x40013800
 80048d8:	40013c00 	.word	0x40013c00

080048dc <GPIO_ReadFromInputPin>:
 *
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	fa22 f303 	lsr.w	r3, r2, r3
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]

   return value;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
 8004914:	4613      	mov	r3, r2
 8004916:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8004918:	78bb      	ldrb	r3, [r7, #2]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d109      	bne.n	8004932 <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	78fa      	ldrb	r2, [r7, #3]
 8004924:	2101      	movs	r1, #1
 8004926:	fa01 f202 	lsl.w	r2, r1, r2
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 8004930:	e009      	b.n	8004946 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	2101      	movs	r1, #1
 800493a:	fa01 f202 	lsl.w	r2, r1, r2
 800493e:	43d2      	mvns	r2, r2
 8004940:	401a      	ands	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	615a      	str	r2, [r3, #20]
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	611a      	str	r2, [r3, #16]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle ) {
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL)) {
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01f      	beq.n	8004a20 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX) {
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	7f1b      	ldrb	r3, [r3, #28]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d112      	bne.n	8004a0e <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize  == 1) {
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d11f      	bne.n	8004a30 <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fa9e 	bl	8004f38 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8004a0c:	e010      	b.n	8004a30 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	60fb      	str	r3, [r7, #12]
}
 8004a1e:	e007      	b.n	8004a30 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	60fb      	str	r3, [r7, #12]
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <I2C_GenerateStopCondition>:


void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <I2C_PeripheralControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi) {
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d106      	bne.n	8004a78 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f043 0201 	orr.w	r2, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	else
		pI2Cx->CR1 &= ~(1 << 0);
}
 8004a76:	e005      	b.n	8004a84 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f023 0201 	bic.w	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <I2C_PeriClockControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d11f      	bne.n	8004ae2 <I2C_PeriClockControl+0x52>
		if(pI2Cx == I2C1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a12      	ldr	r2, [pc, #72]	; (8004af0 <I2C_PeriClockControl+0x60>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d106      	bne.n	8004ab8 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <I2C_PeriClockControl+0x64>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a11      	ldr	r2, [pc, #68]	; (8004af4 <I2C_PeriClockControl+0x64>)
 8004ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C3)
			I2C3_PCLK_EN();
	} else {
		//TODO
	}
}
 8004ab6:	e014      	b.n	8004ae2 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a0f      	ldr	r2, [pc, #60]	; (8004af8 <I2C_PeriClockControl+0x68>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d106      	bne.n	8004ace <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <I2C_PeriClockControl+0x64>)
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	4a0b      	ldr	r2, [pc, #44]	; (8004af4 <I2C_PeriClockControl+0x64>)
 8004ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aca:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004acc:	e009      	b.n	8004ae2 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <I2C_PeriClockControl+0x6c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d105      	bne.n	8004ae2 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <I2C_PeriClockControl+0x64>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	4a06      	ldr	r2, [pc, #24]	; (8004af4 <I2C_PeriClockControl+0x64>)
 8004adc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ae0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40005400 	.word	0x40005400
 8004af4:	40023800 	.word	0x40023800
 8004af8:	40005800 	.word	0x40005800
 8004afc:	40005c00 	.word	0x40005c00

08004b00 <I2C_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2101      	movs	r1, #1
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ffbc 	bl	8004a90 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7a5b      	ldrb	r3, [r3, #9]
 8004b1c:	029b      	lsls	r3, r3, #10
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 8004b32:	f000 fa1d 	bl	8004f70 <RCC_GetPCLK1Value>
 8004b36:	4603      	mov	r3, r0
 8004b38:	4a47      	ldr	r2, [pc, #284]	; (8004c58 <I2C_Init+0x158>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0c9b      	lsrs	r3, r3, #18
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004b50:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	7a1b      	ldrb	r3, [r3, #8]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b6a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a36      	ldr	r2, [pc, #216]	; (8004c5c <I2C_Init+0x15c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d80f      	bhi.n	8004ba6 <I2C_Init+0xa6>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004b86:	f000 f9f3 	bl	8004f70 <RCC_GetPCLK1Value>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004b98:	897b      	ldrh	r3, [r7, #10]
 8004b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e02d      	b.n	8004c02 <I2C_Init+0x102>
	} else {
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bac:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	7a9b      	ldrb	r3, [r3, #10]
 8004bb2:	039b      	lsls	r3, r3, #14
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7a9b      	ldrb	r3, [r3, #10]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004bc4:	f000 f9d4 	bl	8004f70 <RCC_GetPCLK1Value>
 8004bc8:	4601      	mov	r1, r0
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bd8:	817b      	strh	r3, [r7, #10]
 8004bda:	e00c      	b.n	8004bf6 <I2C_Init+0xf6>
		else
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004bdc:	f000 f9c8 	bl	8004f70 <RCC_GetPCLK1Value>
 8004be0:	4601      	mov	r1, r0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009a      	lsls	r2, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bf4:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <I2C_Init+0x15c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d809      	bhi.n	8004c28 <I2C_Init+0x128>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8004c14:	f000 f9ac 	bl	8004f70 <RCC_GetPCLK1Value>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4a0f      	ldr	r2, [pc, #60]	; (8004c58 <I2C_Init+0x158>)
 8004c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c20:	0c9b      	lsrs	r3, r3, #18
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e00d      	b.n	8004c44 <I2C_Init+0x144>
	else
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8004c28:	f000 f9a2 	bl	8004f70 <RCC_GetPCLK1Value>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	0a5b      	lsrs	r3, r3, #9
 8004c38:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <I2C_Init+0x160>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	09db      	lsrs	r3, r3, #7
 8004c40:	3301      	adds	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004c4e:	621a      	str	r2, [r3, #32]

}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	431bde83 	.word	0x431bde83
 8004c5c:	000186a0 	.word	0x000186a0
 8004c60:	00044b83 	.word	0x00044b83

08004c64 <I2C_GetFlagStatus>:
void I2C_DeInit(I2C_RegDef_t *pI2Cx) {

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName) {
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <I2C_GetFlagStatus+0x1c>
	return FLAG_RESET;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	70fb      	strb	r3, [r7, #3]
	uint32_t err_break;
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fe57 	bl	8004952 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004ca8:	e006      	b.n	8004cb8 <I2C_MasterSendData+0x2c>
		if(err_break++ > 10000) break;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	617a      	str	r2, [r7, #20]
 8004cb0:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d809      	bhi.n	8004ccc <I2C_MasterSendData+0x40>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ffd0 	bl	8004c64 <I2C_GetFlagStatus>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ef      	beq.n	8004caa <I2C_MasterSendData+0x1e>
 8004cca:	e000      	b.n	8004cce <I2C_MasterSendData+0x42>
		if(err_break++ > 10000) break;
 8004ccc:	bf00      	nop
	}

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fe4b 	bl	8004972 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	err_break = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004ce0:	e006      	b.n	8004cf0 <I2C_MasterSendData+0x64>
		if(err_break++ > 10000) break;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	617a      	str	r2, [r7, #20]
 8004ce8:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d809      	bhi.n	8004d04 <I2C_MasterSendData+0x78>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff ffb4 	bl	8004c64 <I2C_GetFlagStatus>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ef      	beq.n	8004ce2 <I2C_MasterSendData+0x56>
 8004d02:	e000      	b.n	8004d06 <I2C_MasterSendData+0x7a>
		if(err_break++ > 10000) break;
 8004d04:	bf00      	nop
	}

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff fe5f 	bl	80049ca <I2C_ClearADDRFlag>

	//6. send the data until length becomes 0

	while(Len > 0) {
 8004d0c:	e01f      	b.n	8004d4e <I2C_MasterSendData+0xc2>
		err_break = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { //Wait till TXE is set
 8004d12:	e006      	b.n	8004d22 <I2C_MasterSendData+0x96>
			if(err_break++ > 10000) break;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	617a      	str	r2, [r7, #20]
 8004d1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d809      	bhi.n	8004d36 <I2C_MasterSendData+0xaa>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { //Wait till TXE is set
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2180      	movs	r1, #128	; 0x80
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ff9b 	bl	8004c64 <I2C_GetFlagStatus>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ef      	beq.n	8004d14 <I2C_MasterSendData+0x88>
 8004d34:	e000      	b.n	8004d38 <I2C_MasterSendData+0xac>
			if(err_break++ > 10000) break;
 8004d36:	bf00      	nop
		}
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	781a      	ldrb	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60bb      	str	r3, [r7, #8]
		Len--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	607b      	str	r3, [r7, #4]
	while(Len > 0) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1dc      	bne.n	8004d0e <I2C_MasterSendData+0x82>
	}

	//7. when Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8004d58:	e006      	b.n	8004d68 <I2C_MasterSendData+0xdc>
		if(err_break++ > 10000) break;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	617a      	str	r2, [r7, #20]
 8004d60:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d809      	bhi.n	8004d7c <I2C_MasterSendData+0xf0>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2180      	movs	r1, #128	; 0x80
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff ff78 	bl	8004c64 <I2C_GetFlagStatus>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0ef      	beq.n	8004d5a <I2C_MasterSendData+0xce>
 8004d7a:	e000      	b.n	8004d7e <I2C_MasterSendData+0xf2>
		if(err_break++ > 10000) break;
 8004d7c:	bf00      	nop
	}

	err_break = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) {
 8004d82:	e006      	b.n	8004d92 <I2C_MasterSendData+0x106>
		if(err_break++ > 10000) break;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	617a      	str	r2, [r7, #20]
 8004d8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d809      	bhi.n	8004da6 <I2C_MasterSendData+0x11a>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) {
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2104      	movs	r1, #4
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff ff63 	bl	8004c64 <I2C_GetFlagStatus>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ef      	beq.n	8004d84 <I2C_MasterSendData+0xf8>
 8004da4:	e000      	b.n	8004da8 <I2C_MasterSendData+0x11c>
		if(err_break++ > 10000) break;
 8004da6:	bf00      	nop
	}

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)
 8004da8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <I2C_MasterSendData+0x12e>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fe3f 	bl	8004a38 <I2C_GenerateStopCondition>
}
 8004dba:	bf00      	nop
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b086      	sub	sp, #24
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	4611      	mov	r1, r2
 8004dce:	461a      	mov	r2, r3
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	71fb      	strb	r3, [r7, #7]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	71bb      	strb	r3, [r7, #6]
	uint32_t err_break;
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fdb8 	bl	8004952 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004de6:	e006      	b.n	8004df6 <I2C_MasterReceiveData+0x34>
		if(err_break++ > 10000) break;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	617a      	str	r2, [r7, #20]
 8004dee:	f242 7210 	movw	r2, #10000	; 0x2710
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d809      	bhi.n	8004e0a <I2C_MasterReceiveData+0x48>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff ff31 	bl	8004c64 <I2C_GetFlagStatus>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0ef      	beq.n	8004de8 <I2C_MasterReceiveData+0x26>
 8004e08:	e000      	b.n	8004e0c <I2C_MasterReceiveData+0x4a>
		if(err_break++ > 10000) break;
 8004e0a:	bf00      	nop
	}

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	79ba      	ldrb	r2, [r7, #6]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fdc2 	bl	800499e <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	err_break = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004e1e:	e006      	b.n	8004e2e <I2C_MasterReceiveData+0x6c>
		if(err_break++ > 10000) break;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	617a      	str	r2, [r7, #20]
 8004e26:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d809      	bhi.n	8004e42 <I2C_MasterReceiveData+0x80>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2102      	movs	r1, #2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff ff15 	bl	8004c64 <I2C_GetFlagStatus>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ef      	beq.n	8004e20 <I2C_MasterReceiveData+0x5e>
 8004e40:	e000      	b.n	8004e44 <I2C_MasterReceiveData+0x82>
		if(err_break++ > 10000) break;
 8004e42:	bf00      	nop
	}


	//procedure to read only 1 byte from slave
	if(Len == 1) {
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d12c      	bne.n	8004ea4 <I2C_MasterReceiveData+0xe2>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f871 	bl	8004f38 <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7ff fdb7 	bl	80049ca <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		err_break = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004e60:	e006      	b.n	8004e70 <I2C_MasterReceiveData+0xae>
			if(err_break++ > 10000) break;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	617a      	str	r2, [r7, #20]
 8004e68:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d809      	bhi.n	8004e84 <I2C_MasterReceiveData+0xc2>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2140      	movs	r1, #64	; 0x40
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fef4 	bl	8004c64 <I2C_GetFlagStatus>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0ef      	beq.n	8004e62 <I2C_MasterReceiveData+0xa0>
 8004e82:	e000      	b.n	8004e86 <I2C_MasterReceiveData+0xc4>
			if(err_break++ > 10000) break;
 8004e84:	bf00      	nop
		}

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8004e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d104      	bne.n	8004e98 <I2C_MasterReceiveData+0xd6>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fdd0 	bl	8004a38 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1) {
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d938      	bls.n	8004f1c <I2C_MasterReceiveData+0x15a>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff fd8d 	bl	80049ca <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--) {
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	e02f      	b.n	8004f16 <I2C_MasterReceiveData+0x154>
			//wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
				if(err_break++ > 10000) break;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	617a      	str	r2, [r7, #20]
 8004ebc:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d809      	bhi.n	8004ed8 <I2C_MasterReceiveData+0x116>
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff feca 	bl	8004c64 <I2C_GetFlagStatus>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ef      	beq.n	8004eb6 <I2C_MasterReceiveData+0xf4>
 8004ed6:	e000      	b.n	8004eda <I2C_MasterReceiveData+0x118>
				if(err_break++ > 10000) break;
 8004ed8:	bf00      	nop
			}

			if(i == 2) { //if last 2 bytes are remaining
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d10e      	bne.n	8004efe <I2C_MasterReceiveData+0x13c>
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f826 	bl	8004f38 <I2C_ManageAcking>
				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8004eec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d104      	bne.n	8004efe <I2C_MasterReceiveData+0x13c>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fd9d 	bl	8004a38 <I2C_GenerateStopCondition>
			}
			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxBuffer++;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--) {
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1d3      	bne.n	8004ec4 <I2C_MasterReceiveData+0x102>
		}
	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	7a5b      	ldrb	r3, [r3, #9]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d105      	bne.n	8004f30 <I2C_MasterReceiveData+0x16e>
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f804 	bl	8004f38 <I2C_ManageAcking>
}
 8004f30:	bf00      	nop
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d106      	bne.n	8004f58 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
	else
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
}
 8004f56:	e005      	b.n	8004f64 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8004f76:	4b25      	ldr	r3, [pc, #148]	; (800500c <RCC_GetPCLK1Value+0x9c>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	089b      	lsrs	r3, r3, #2
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8004f84:	7a7b      	ldrb	r3, [r7, #9]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8004f8a:	4b21      	ldr	r3, [pc, #132]	; (8005010 <RCC_GetPCLK1Value+0xa0>)
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e00b      	b.n	8004fa8 <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 1)
 8004f90:	7a7b      	ldrb	r3, [r7, #9]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d102      	bne.n	8004f9c <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <RCC_GetPCLK1Value+0xa4>)
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e005      	b.n	8004fa8 <RCC_GetPCLK1Value+0x38>
	else if (clksrc == 2)
 8004f9c:	7a7b      	ldrb	r3, [r7, #9]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d102      	bne.n	8004fa8 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8004fa2:	f000 f83d 	bl	8005020 <RCC_GetPLLOutputClock>
 8004fa6:	60f8      	str	r0, [r7, #12]

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8004fa8:	4b18      	ldr	r3, [pc, #96]	; (800500c <RCC_GetPCLK1Value+0x9c>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8004fb6:	7a3b      	ldrb	r3, [r7, #8]
 8004fb8:	2b07      	cmp	r3, #7
 8004fba:	d802      	bhi.n	8004fc2 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	72fb      	strb	r3, [r7, #11]
 8004fc0:	e005      	b.n	8004fce <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_PreScaler[temp-8];
 8004fc2:	7a3b      	ldrb	r3, [r7, #8]
 8004fc4:	3b08      	subs	r3, #8
 8004fc6:	4a14      	ldr	r2, [pc, #80]	; (8005018 <RCC_GetPCLK1Value+0xa8>)
 8004fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fcc:	72fb      	strb	r3, [r7, #11]

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8004fce:	4b0f      	ldr	r3, [pc, #60]	; (800500c <RCC_GetPCLK1Value+0x9c>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0a9b      	lsrs	r3, r3, #10
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8004fdc:	7a3b      	ldrb	r3, [r7, #8]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d802      	bhi.n	8004fe8 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	72bb      	strb	r3, [r7, #10]
 8004fe6:	e004      	b.n	8004ff2 <RCC_GetPCLK1Value+0x82>
	else
		apb1p = APB1_PreScaler[temp-4];
 8004fe8:	7a3b      	ldrb	r3, [r7, #8]
 8004fea:	3b04      	subs	r3, #4
 8004fec:	4a0b      	ldr	r2, [pc, #44]	; (800501c <RCC_GetPCLK1Value+0xac>)
 8004fee:	5cd3      	ldrb	r3, [r2, r3]
 8004ff0:	72bb      	strb	r3, [r7, #10]

	pclk1 = (SystemClk / ahbp) /apb1p;
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ffa:	7abb      	ldrb	r3, [r7, #10]
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	607b      	str	r3, [r7, #4]

	return pclk1;
 8005002:	687b      	ldr	r3, [r7, #4]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40023800 	.word	0x40023800
 8005010:	00f42400 	.word	0x00f42400
 8005014:	007a1200 	.word	0x007a1200
 8005018:	2000001c 	.word	0x2000001c
 800501c:	2000002c 	.word	0x2000002c

08005020 <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock() {
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
	return 0;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d11f      	bne.n	8005082 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a12      	ldr	r2, [pc, #72]	; (8005090 <SPI_PeriClockControl+0x60>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d106      	bne.n	8005058 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <SPI_PeriClockControl+0x64>)
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	4a11      	ldr	r2, [pc, #68]	; (8005094 <SPI_PeriClockControl+0x64>)
 8005050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005054:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8005056:	e014      	b.n	8005082 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a0f      	ldr	r2, [pc, #60]	; (8005098 <SPI_PeriClockControl+0x68>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d106      	bne.n	800506e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8005060:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <SPI_PeriClockControl+0x64>)
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	4a0b      	ldr	r2, [pc, #44]	; (8005094 <SPI_PeriClockControl+0x64>)
 8005066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800506a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800506c:	e009      	b.n	8005082 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <SPI_PeriClockControl+0x6c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d105      	bne.n	8005082 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8005076:	4b07      	ldr	r3, [pc, #28]	; (8005094 <SPI_PeriClockControl+0x64>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4a06      	ldr	r2, [pc, #24]	; (8005094 <SPI_PeriClockControl+0x64>)
 800507c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005080:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40013000 	.word	0x40013000
 8005094:	40023800 	.word	0x40023800
 8005098:	40003800 	.word	0x40003800
 800509c:	40003c00 	.word	0x40003c00

080050a0 <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2101      	movs	r1, #1
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ffbe 	bl	8005030 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	791b      	ldrb	r3, [r3, #4]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	461a      	mov	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	795b      	ldrb	r3, [r3, #5]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d104      	bne.n	80050d8 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e014      	b.n	8005102 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	795b      	ldrb	r3, [r3, #5]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d104      	bne.n	80050ea <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e00b      	b.n	8005102 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	795b      	ldrb	r3, [r3, #5]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d107      	bne.n	8005102 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050f8:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005100:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	799b      	ldrb	r3, [r3, #6]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	461a      	mov	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	79db      	ldrb	r3, [r3, #7]
 8005114:	02db      	lsls	r3, r3, #11
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7a1b      	ldrb	r3, [r3, #8]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	461a      	mov	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	7a5b      	ldrb	r3, [r3, #9]
 8005130:	461a      	mov	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	7a9b      	ldrb	r3, [r3, #10]
 800513c:	025b      	lsls	r3, r3, #9
 800513e:	461a      	mov	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	601a      	str	r2, [r3, #0]

}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 8005162:	bf00      	nop
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f9      	beq.n	8005164 <SPI_Transfer+0xe>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f3      	bne.n	8005164 <SPI_Transfer+0xe>
	pSPIx->DR = data;
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60da      	str	r2, [r3, #12]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 8005182:	bf00      	nop
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f9      	beq.n	8005184 <SPI_Transfer+0x2e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f3      	bne.n	8005184 <SPI_Transfer+0x2e>
	return pSPIx->DR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d106      	bne.n	80051cc <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 80051ca:	e005      	b.n	80051d8 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	601a      	str	r2, [r3, #0]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d106      	bne.n	8005204 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f043 0204 	orr.w	r2, r3, #4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8005202:	e005      	b.n	8005210 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f023 0204 	bic.w	r2, r3, #4
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	605a      	str	r2, [r3, #4]
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <USART_IRQInterruptConfig>:
 * @return            -
 *
 * @Note              -
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	460a      	mov	r2, r1
 8005226:	71fb      	strb	r3, [r7, #7]
 8005228:	4613      	mov	r3, r2
 800522a:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 800522c:	79bb      	ldrb	r3, [r7, #6]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d133      	bne.n	800529a <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	2b1f      	cmp	r3, #31
 8005236:	d80a      	bhi.n	800524e <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8005238:	4b35      	ldr	r3, [pc, #212]	; (8005310 <USART_IRQInterruptConfig+0xf4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	79fa      	ldrb	r2, [r7, #7]
 800523e:	2101      	movs	r1, #1
 8005240:	fa01 f202 	lsl.w	r2, r1, r2
 8005244:	4611      	mov	r1, r2
 8005246:	4a32      	ldr	r2, [pc, #200]	; (8005310 <USART_IRQInterruptConfig+0xf4>)
 8005248:	430b      	orrs	r3, r1
 800524a:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 800524c:	e059      	b.n	8005302 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	2b1f      	cmp	r3, #31
 8005252:	d90f      	bls.n	8005274 <USART_IRQInterruptConfig+0x58>
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	2b3f      	cmp	r3, #63	; 0x3f
 8005258:	d80c      	bhi.n	8005274 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 800525a:	4b2e      	ldr	r3, [pc, #184]	; (8005314 <USART_IRQInterruptConfig+0xf8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	79fa      	ldrb	r2, [r7, #7]
 8005260:	f002 021f 	and.w	r2, r2, #31
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f202 	lsl.w	r2, r1, r2
 800526a:	4611      	mov	r1, r2
 800526c:	4a29      	ldr	r2, [pc, #164]	; (8005314 <USART_IRQInterruptConfig+0xf8>)
 800526e:	430b      	orrs	r3, r1
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e046      	b.n	8005302 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	2b3f      	cmp	r3, #63	; 0x3f
 8005278:	d943      	bls.n	8005302 <USART_IRQInterruptConfig+0xe6>
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	2b5f      	cmp	r3, #95	; 0x5f
 800527e:	d840      	bhi.n	8005302 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8005280:	4b25      	ldr	r3, [pc, #148]	; (8005318 <USART_IRQInterruptConfig+0xfc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	79fa      	ldrb	r2, [r7, #7]
 8005286:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800528a:	2101      	movs	r1, #1
 800528c:	fa01 f202 	lsl.w	r2, r1, r2
 8005290:	4611      	mov	r1, r2
 8005292:	4a21      	ldr	r2, [pc, #132]	; (8005318 <USART_IRQInterruptConfig+0xfc>)
 8005294:	430b      	orrs	r3, r1
 8005296:	6013      	str	r3, [r2, #0]
}
 8005298:	e033      	b.n	8005302 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	2b1f      	cmp	r3, #31
 800529e:	d80a      	bhi.n	80052b6 <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 80052a0:	4b1e      	ldr	r3, [pc, #120]	; (800531c <USART_IRQInterruptConfig+0x100>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	79fa      	ldrb	r2, [r7, #7]
 80052a6:	2101      	movs	r1, #1
 80052a8:	fa01 f202 	lsl.w	r2, r1, r2
 80052ac:	4611      	mov	r1, r2
 80052ae:	4a1b      	ldr	r2, [pc, #108]	; (800531c <USART_IRQInterruptConfig+0x100>)
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6013      	str	r3, [r2, #0]
}
 80052b4:	e025      	b.n	8005302 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	2b1f      	cmp	r3, #31
 80052ba:	d90f      	bls.n	80052dc <USART_IRQInterruptConfig+0xc0>
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	2b3f      	cmp	r3, #63	; 0x3f
 80052c0:	d80c      	bhi.n	80052dc <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80052c2:	4b17      	ldr	r3, [pc, #92]	; (8005320 <USART_IRQInterruptConfig+0x104>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	79fa      	ldrb	r2, [r7, #7]
 80052c8:	f002 021f 	and.w	r2, r2, #31
 80052cc:	2101      	movs	r1, #1
 80052ce:	fa01 f202 	lsl.w	r2, r1, r2
 80052d2:	4611      	mov	r1, r2
 80052d4:	4a12      	ldr	r2, [pc, #72]	; (8005320 <USART_IRQInterruptConfig+0x104>)
 80052d6:	430b      	orrs	r3, r1
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e012      	b.n	8005302 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d90f      	bls.n	8005302 <USART_IRQInterruptConfig+0xe6>
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	2b5f      	cmp	r3, #95	; 0x5f
 80052e6:	d80c      	bhi.n	8005302 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 80052e8:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <USART_IRQInterruptConfig+0x108>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	79fa      	ldrb	r2, [r7, #7]
 80052ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80052f2:	2101      	movs	r1, #1
 80052f4:	fa01 f202 	lsl.w	r2, r1, r2
 80052f8:	4611      	mov	r1, r2
 80052fa:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <USART_IRQInterruptConfig+0x108>)
 80052fc:	430b      	orrs	r3, r1
 80052fe:	6013      	str	r3, [r2, #0]
}
 8005300:	e7ff      	b.n	8005302 <USART_IRQInterruptConfig+0xe6>
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	e000e100 	.word	0xe000e100
 8005314:	e000e104 	.word	0xe000e104
 8005318:	e000e10c 	.word	0xe000e10c
 800531c:	e000e180 	.word	0xe000e180
 8005320:	e000e184 	.word	0xe000e184
 8005324:	e000e18c 	.word	0xe000e18c

08005328 <USART_IRQPriorityConfig>:
 * @return            -
 *
 * @Note              -
 */
void USART_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	6039      	str	r1, [r7, #0]
 8005332:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	089b      	lsrs	r3, r3, #2
 8005338:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 8005342:	7bbb      	ldrb	r3, [r7, #14]
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	3304      	adds	r3, #4
 800534a:	737b      	strb	r3, [r7, #13]

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005354:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8005358:	6819      	ldr	r1, [r3, #0]
 800535a:	7b7b      	ldrb	r3, [r7, #13]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	409a      	lsls	r2, r3
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005368:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800536c:	430a      	orrs	r2, r1
 800536e:	601a      	str	r2, [r3, #0]

}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005380:	4803      	ldr	r0, [pc, #12]	; (8005390 <_cbSendSystemDesc+0x14>)
 8005382:	f001 fbc3 	bl	8006b0c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005386:	4803      	ldr	r0, [pc, #12]	; (8005394 <_cbSendSystemDesc+0x18>)
 8005388:	f001 fbc0 	bl	8006b0c <SEGGER_SYSVIEW_SendSysDesc>
}
 800538c:	bf00      	nop
 800538e:	bd80      	pop	{r7, pc}
 8005390:	0800b808 	.word	0x0800b808
 8005394:	0800b83c 	.word	0x0800b83c

08005398 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <SEGGER_SYSVIEW_Conf+0x20>)
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <SEGGER_SYSVIEW_Conf+0x20>)
 80053a2:	6819      	ldr	r1, [r3, #0]
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <SEGGER_SYSVIEW_Conf+0x24>)
 80053a6:	4a06      	ldr	r2, [pc, #24]	; (80053c0 <SEGGER_SYSVIEW_Conf+0x28>)
 80053a8:	f000 ff2c 	bl	8006204 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80053ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80053b0:	f000 ff6c 	bl	800628c <SEGGER_SYSVIEW_SetRAMBase>
}
 80053b4:	bf00      	nop
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000038 	.word	0x20000038
 80053bc:	0800537d 	.word	0x0800537d
 80053c0:	0800bd8c 	.word	0x0800bd8c

080053c4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80053ca:	2300      	movs	r3, #0
 80053cc:	607b      	str	r3, [r7, #4]
 80053ce:	e033      	b.n	8005438 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80053d0:	491e      	ldr	r1, [pc, #120]	; (800544c <_cbSendTaskList+0x88>)
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	491a      	ldr	r1, [pc, #104]	; (800544c <_cbSendTaskList+0x88>)
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	3304      	adds	r3, #4
 80053f0:	6819      	ldr	r1, [r3, #0]
 80053f2:	4c16      	ldr	r4, [pc, #88]	; (800544c <_cbSendTaskList+0x88>)
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4423      	add	r3, r4
 8005400:	3308      	adds	r3, #8
 8005402:	681c      	ldr	r4, [r3, #0]
 8005404:	4d11      	ldr	r5, [pc, #68]	; (800544c <_cbSendTaskList+0x88>)
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	442b      	add	r3, r5
 8005412:	330c      	adds	r3, #12
 8005414:	681d      	ldr	r5, [r3, #0]
 8005416:	4e0d      	ldr	r6, [pc, #52]	; (800544c <_cbSendTaskList+0x88>)
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4433      	add	r3, r6
 8005424:	3310      	adds	r3, #16
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	462b      	mov	r3, r5
 800542c:	4622      	mov	r2, r4
 800542e:	f000 f8b5 	bl	800559c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3301      	adds	r3, #1
 8005436:	607b      	str	r3, [r7, #4]
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <_cbSendTaskList+0x8c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d3c6      	bcc.n	80053d0 <_cbSendTaskList+0xc>
  }
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544c:	20012f94 	.word	0x20012f94
 8005450:	20013034 	.word	0x20013034

08005454 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005454:	b5b0      	push	{r4, r5, r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800545a:	f7fd fc6f 	bl	8002d3c <xTaskGetTickCountFromISR>
 800545e:	4603      	mov	r3, r0
 8005460:	461a      	mov	r2, r3
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800546a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	f04f 0500 	mov.w	r5, #0
 800547a:	015d      	lsls	r5, r3, #5
 800547c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8005480:	0154      	lsls	r4, r2, #5
 8005482:	4622      	mov	r2, r4
 8005484:	462b      	mov	r3, r5
 8005486:	1a12      	subs	r2, r2, r0
 8005488:	eb63 0301 	sbc.w	r3, r3, r1
 800548c:	f04f 0400 	mov.w	r4, #0
 8005490:	f04f 0500 	mov.w	r5, #0
 8005494:	009d      	lsls	r5, r3, #2
 8005496:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800549a:	0094      	lsls	r4, r2, #2
 800549c:	4622      	mov	r2, r4
 800549e:	462b      	mov	r3, r5
 80054a0:	1812      	adds	r2, r2, r0
 80054a2:	eb41 0303 	adc.w	r3, r1, r3
 80054a6:	f04f 0000 	mov.w	r0, #0
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	00d9      	lsls	r1, r3, #3
 80054b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b4:	00d0      	lsls	r0, r2, #3
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80054be:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80054c2:	4610      	mov	r0, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bdb0      	pop	{r4, r5, r7, pc}

080054cc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80054da:	2205      	movs	r2, #5
 80054dc:	492b      	ldr	r1, [pc, #172]	; (800558c <SYSVIEW_AddTask+0xc0>)
 80054de:	68b8      	ldr	r0, [r7, #8]
 80054e0:	f003 fae0 	bl	8008aa4 <memcmp>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d04b      	beq.n	8005582 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80054ea:	4b29      	ldr	r3, [pc, #164]	; (8005590 <SYSVIEW_AddTask+0xc4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b07      	cmp	r3, #7
 80054f0:	d903      	bls.n	80054fa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80054f2:	4828      	ldr	r0, [pc, #160]	; (8005594 <SYSVIEW_AddTask+0xc8>)
 80054f4:	f001 fe08 	bl	8007108 <SEGGER_SYSVIEW_Warn>
    return;
 80054f8:	e044      	b.n	8005584 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80054fa:	4b25      	ldr	r3, [pc, #148]	; (8005590 <SYSVIEW_AddTask+0xc4>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4926      	ldr	r1, [pc, #152]	; (8005598 <SYSVIEW_AddTask+0xcc>)
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800550e:	4b20      	ldr	r3, [pc, #128]	; (8005590 <SYSVIEW_AddTask+0xc4>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4921      	ldr	r1, [pc, #132]	; (8005598 <SYSVIEW_AddTask+0xcc>)
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	3304      	adds	r3, #4
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005524:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <SYSVIEW_AddTask+0xc4>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	491b      	ldr	r1, [pc, #108]	; (8005598 <SYSVIEW_AddTask+0xcc>)
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	3308      	adds	r3, #8
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800553a:	4b15      	ldr	r3, [pc, #84]	; (8005590 <SYSVIEW_AddTask+0xc4>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4916      	ldr	r1, [pc, #88]	; (8005598 <SYSVIEW_AddTask+0xcc>)
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	330c      	adds	r3, #12
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005550:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <SYSVIEW_AddTask+0xc4>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4910      	ldr	r1, [pc, #64]	; (8005598 <SYSVIEW_AddTask+0xcc>)
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	3310      	adds	r3, #16
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <SYSVIEW_AddTask+0xc4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3301      	adds	r3, #1
 800556c:	4a08      	ldr	r2, [pc, #32]	; (8005590 <SYSVIEW_AddTask+0xc4>)
 800556e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f80e 	bl	800559c <SYSVIEW_SendTaskInfo>
 8005580:	e000      	b.n	8005584 <SYSVIEW_AddTask+0xb8>
    return;
 8005582:	bf00      	nop

}
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	0800b84c 	.word	0x0800b84c
 8005590:	20013034 	.word	0x20013034
 8005594:	0800b854 	.word	0x0800b854
 8005598:	20012f94 	.word	0x20012f94

0800559c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	; 0x28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80055aa:	f107 0314 	add.w	r3, r7, #20
 80055ae:	2214      	movs	r2, #20
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f003 fa92 	bl	8008adc <memset>
  TaskInfo.TaskID     = TaskID;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80055cc:	f107 0314 	add.w	r3, r7, #20
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 f9a3 	bl	800691c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80055d6:	bf00      	nop
 80055d8:	3728      	adds	r7, #40	; 0x28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <_DoInit+0x98>)
 80055e8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2203      	movs	r2, #3
 80055ee:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2203      	movs	r2, #3
 80055f4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a20      	ldr	r2, [pc, #128]	; (800567c <_DoInit+0x9c>)
 80055fa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a20      	ldr	r2, [pc, #128]	; (8005680 <_DoInit+0xa0>)
 8005600:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005608:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a17      	ldr	r2, [pc, #92]	; (800567c <_DoInit+0x9c>)
 8005620:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a17      	ldr	r2, [pc, #92]	; (8005684 <_DoInit+0xa4>)
 8005626:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2210      	movs	r2, #16
 800562c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3307      	adds	r3, #7
 8005644:	4a10      	ldr	r2, [pc, #64]	; (8005688 <_DoInit+0xa8>)
 8005646:	6810      	ldr	r0, [r2, #0]
 8005648:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800564a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a0e      	ldr	r2, [pc, #56]	; (800568c <_DoInit+0xac>)
 8005652:	6810      	ldr	r0, [r2, #0]
 8005654:	6018      	str	r0, [r3, #0]
 8005656:	8891      	ldrh	r1, [r2, #4]
 8005658:	7992      	ldrb	r2, [r2, #6]
 800565a:	8099      	strh	r1, [r3, #4]
 800565c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800565e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005668:	f3bf 8f5f 	dmb	sy
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	200147e0 	.word	0x200147e0
 800567c:	0800b8a4 	.word	0x0800b8a4
 8005680:	20013038 	.word	0x20013038
 8005684:	20013438 	.word	0x20013438
 8005688:	0800b8b0 	.word	0x0800b8b0
 800568c:	0800b8b4 	.word	0x0800b8b4

08005690 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800569c:	2300      	movs	r3, #0
 800569e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d905      	bls.n	80056c0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
 80056be:	e007      	b.n	80056d0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	69b9      	ldr	r1, [r7, #24]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	1acb      	subs	r3, r1, r3
 80056ca:	4413      	add	r3, r2
 80056cc:	3b01      	subs	r3, #1
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	4293      	cmp	r3, r2
 80056dc:	bf28      	it	cs
 80056de:	4613      	movcs	r3, r2
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80056e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4293      	cmp	r3, r2
 80056e8:	bf28      	it	cs
 80056ea:	4613      	movcs	r3, r2
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	6978      	ldr	r0, [r7, #20]
 80056fe:	f003 f9df 	bl	8008ac0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005702:	6a3a      	ldr	r2, [r7, #32]
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	4413      	add	r3, r2
 8005708:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	4413      	add	r3, r2
 8005710:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	4413      	add	r3, r2
 8005720:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	429a      	cmp	r2, r3
 800572a:	d101      	bne.n	8005730 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800572c:	2300      	movs	r3, #0
 800572e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005730:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1b2      	bne.n	80056a6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005740:	6a3b      	ldr	r3, [r7, #32]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3728      	adds	r7, #40	; 0x28
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800574a:	b580      	push	{r7, lr}
 800574c:	b088      	sub	sp, #32
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	429a      	cmp	r2, r3
 800576c:	d911      	bls.n	8005792 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	6938      	ldr	r0, [r7, #16]
 800577e:	f003 f99f 	bl	8008ac0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005782:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	441a      	add	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005790:	e01f      	b.n	80057d2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	6938      	ldr	r0, [r7, #16]
 80057a6:	f003 f98b 	bl	8008ac0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	4413      	add	r3, r2
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4619      	mov	r1, r3
 80057c2:	6938      	ldr	r0, [r7, #16]
 80057c4:	f003 f97c 	bl	8008ac0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80057c8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	60da      	str	r2, [r3, #12]
}
 80057d2:	bf00      	nop
 80057d4:	3720      	adds	r7, #32
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80057da:	b480      	push	{r7}
 80057dc:	b087      	sub	sp, #28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d808      	bhi.n	8005808 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad2      	subs	r2, r2, r3
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4413      	add	r3, r2
 8005802:	3b01      	subs	r3, #1
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e004      	b.n	8005812 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005812:	697b      	ldr	r3, [r7, #20]
}
 8005814:	4618      	mov	r0, r3
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	; 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800582c:	4b3e      	ldr	r3, [pc, #248]	; (8005928 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800583a:	f7ff fed1 	bl	80055e0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	4613      	mov	r3, r2
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	4413      	add	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	4a37      	ldr	r2, [pc, #220]	; (8005928 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005860:	2300      	movs	r3, #0
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d92b      	bls.n	80058c4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4293      	cmp	r3, r2
 800587c:	bf28      	it	cs
 800587e:	4613      	movcs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	4413      	add	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	6939      	ldr	r1, [r7, #16]
 8005890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005892:	f003 f915 	bl	8008ac0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800589e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058bc:	429a      	cmp	r2, r3
 80058be:	d101      	bne.n	80058c4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bf28      	it	cs
 80058d4:	4613      	movcs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d019      	beq.n	8005912 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	4413      	add	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	6939      	ldr	r1, [r7, #16]
 80058ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ee:	f003 f8e7 	bl	8008ac0 <memcpy>
    NumBytesRead += NumBytesRem;
 80058f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	4413      	add	r3, r2
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800590a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4413      	add	r3, r2
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800591c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005920:	4618      	mov	r0, r3
 8005922:	3730      	adds	r7, #48	; 0x30
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	200147e0 	.word	0x200147e0

0800592c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b08c      	sub	sp, #48	; 0x30
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005938:	4b3e      	ldr	r3, [pc, #248]	; (8005a34 <SEGGER_RTT_ReadNoLock+0x108>)
 800593a:	623b      	str	r3, [r7, #32]
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <SEGGER_RTT_ReadNoLock+0x1e>
 8005946:	f7ff fe4b 	bl	80055e0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	3360      	adds	r3, #96	; 0x60
 8005956:	4a37      	ldr	r2, [pc, #220]	; (8005a34 <SEGGER_RTT_ReadNoLock+0x108>)
 8005958:	4413      	add	r3, r2
 800595a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800596c:	2300      	movs	r3, #0
 800596e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	d92b      	bls.n	80059d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4293      	cmp	r3, r2
 8005988:	bf28      	it	cs
 800598a:	4613      	movcs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	4413      	add	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	6939      	ldr	r1, [r7, #16]
 800599c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800599e:	f003 f88f 	bl	8008ac0 <memcpy>
    NumBytesRead += NumBytesRem;
 80059a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	4413      	add	r3, r2
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80059aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	4413      	add	r3, r2
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80059ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4413      	add	r3, r2
 80059c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d101      	bne.n	80059d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4293      	cmp	r3, r2
 80059de:	bf28      	it	cs
 80059e0:	4613      	movcs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d019      	beq.n	8005a1e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	4413      	add	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	6939      	ldr	r1, [r7, #16]
 80059f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059fa:	f003 f861 	bl	8008ac0 <memcpy>
    NumBytesRead += NumBytesRem;
 80059fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	4413      	add	r3, r2
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a28:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3730      	adds	r7, #48	; 0x30
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	200147e0 	.word	0x200147e0

08005a38 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4413      	add	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	3360      	adds	r3, #96	; 0x60
 8005a54:	4a1f      	ldr	r2, [pc, #124]	; (8005ad4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005a56:	4413      	add	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d029      	beq.n	8005ab6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d82e      	bhi.n	8005ac4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d013      	beq.n	8005a96 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005a6e:	e029      	b.n	8005ac4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005a70:	6978      	ldr	r0, [r7, #20]
 8005a72:	f7ff feb2 	bl	80057da <_GetAvailWriteSpace>
 8005a76:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d202      	bcs.n	8005a86 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005a84:	e021      	b.n	8005aca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	69b9      	ldr	r1, [r7, #24]
 8005a8e:	6978      	ldr	r0, [r7, #20]
 8005a90:	f7ff fe5b 	bl	800574a <_WriteNoCheck>
    break;
 8005a94:	e019      	b.n	8005aca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005a96:	6978      	ldr	r0, [r7, #20]
 8005a98:	f7ff fe9f 	bl	80057da <_GetAvailWriteSpace>
 8005a9c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bf28      	it	cs
 8005aa6:	4613      	movcs	r3, r2
 8005aa8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	69b9      	ldr	r1, [r7, #24]
 8005aae:	6978      	ldr	r0, [r7, #20]
 8005ab0:	f7ff fe4b 	bl	800574a <_WriteNoCheck>
    break;
 8005ab4:	e009      	b.n	8005aca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	69b9      	ldr	r1, [r7, #24]
 8005aba:	6978      	ldr	r0, [r7, #20]
 8005abc:	f7ff fde8 	bl	8005690 <_WriteBlocking>
 8005ac0:	61f8      	str	r0, [r7, #28]
    break;
 8005ac2:	e002      	b.n	8005aca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]
    break;
 8005ac8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005aca:	69fb      	ldr	r3, [r7, #28]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	200147e0 	.word	0x200147e0

08005ad8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	4613      	mov	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4a1f      	ldr	r2, [pc, #124]	; (8005b74 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005af6:	4413      	add	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d029      	beq.n	8005b56 <SEGGER_RTT_WriteNoLock+0x7e>
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d82e      	bhi.n	8005b64 <SEGGER_RTT_WriteNoLock+0x8c>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <SEGGER_RTT_WriteNoLock+0x38>
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d013      	beq.n	8005b36 <SEGGER_RTT_WriteNoLock+0x5e>
 8005b0e:	e029      	b.n	8005b64 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005b10:	6978      	ldr	r0, [r7, #20]
 8005b12:	f7ff fe62 	bl	80057da <_GetAvailWriteSpace>
 8005b16:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d202      	bcs.n	8005b26 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005b24:	e021      	b.n	8005b6a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	69b9      	ldr	r1, [r7, #24]
 8005b2e:	6978      	ldr	r0, [r7, #20]
 8005b30:	f7ff fe0b 	bl	800574a <_WriteNoCheck>
    break;
 8005b34:	e019      	b.n	8005b6a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005b36:	6978      	ldr	r0, [r7, #20]
 8005b38:	f7ff fe4f 	bl	80057da <_GetAvailWriteSpace>
 8005b3c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	4293      	cmp	r3, r2
 8005b44:	bf28      	it	cs
 8005b46:	4613      	movcs	r3, r2
 8005b48:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	69b9      	ldr	r1, [r7, #24]
 8005b4e:	6978      	ldr	r0, [r7, #20]
 8005b50:	f7ff fdfb 	bl	800574a <_WriteNoCheck>
    break;
 8005b54:	e009      	b.n	8005b6a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	69b9      	ldr	r1, [r7, #24]
 8005b5a:	6978      	ldr	r0, [r7, #20]
 8005b5c:	f7ff fd98 	bl	8005690 <_WriteBlocking>
 8005b60:	61f8      	str	r0, [r7, #28]
    break;
 8005b62:	e002      	b.n	8005b6a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
    break;
 8005b68:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	200147e0 	.word	0x200147e0

08005b78 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005b84:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005b92:	f7ff fd25 	bl	80055e0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005b96:	f3ef 8311 	mrs	r3, BASEPRI
 8005b9a:	f04f 0120 	mov.w	r1, #32
 8005b9e:	f381 8811 	msr	BASEPRI, r1
 8005ba2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f7ff ff45 	bl	8005a38 <SEGGER_RTT_WriteDownBufferNoLock>
 8005bae:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005bb6:	697b      	ldr	r3, [r7, #20]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	200147e0 	.word	0x200147e0

08005bc4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005bd0:	4b0e      	ldr	r3, [pc, #56]	; (8005c0c <SEGGER_RTT_Write+0x48>)
 8005bd2:	61fb      	str	r3, [r7, #28]
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <SEGGER_RTT_Write+0x1e>
 8005bde:	f7ff fcff 	bl	80055e0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005be2:	f3ef 8311 	mrs	r3, BASEPRI
 8005be6:	f04f 0120 	mov.w	r1, #32
 8005bea:	f381 8811 	msr	BASEPRI, r1
 8005bee:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff ff6f 	bl	8005ad8 <SEGGER_RTT_WriteNoLock>
 8005bfa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005c02:	697b      	ldr	r3, [r7, #20]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3720      	adds	r7, #32
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200147e0 	.word	0x200147e0

08005c10 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005c1e:	4b3d      	ldr	r3, [pc, #244]	; (8005d14 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005c2c:	f7ff fcd8 	bl	80055e0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005c30:	f3ef 8311 	mrs	r3, BASEPRI
 8005c34:	f04f 0120 	mov.w	r1, #32
 8005c38:	f381 8811 	msr	BASEPRI, r1
 8005c3c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c3e:	4b35      	ldr	r3, [pc, #212]	; (8005d14 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005c40:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005c46:	6939      	ldr	r1, [r7, #16]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	4413      	add	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	440b      	add	r3, r1
 8005c56:	3304      	adds	r3, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3301      	adds	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	dbeb      	blt.n	8005c46 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005c6e:	e000      	b.n	8005c72 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005c70:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	da3f      	bge.n	8005cfc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005c7c:	6939      	ldr	r1, [r7, #16]
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	4613      	mov	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4413      	add	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	440b      	add	r3, r1
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005c90:	6939      	ldr	r1, [r7, #16]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	4613      	mov	r3, r2
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005ca6:	6939      	ldr	r1, [r7, #16]
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	4613      	mov	r3, r2
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	4413      	add	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	440b      	add	r3, r1
 8005cb4:	3320      	adds	r3, #32
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005cba:	6939      	ldr	r1, [r7, #16]
 8005cbc:	69fa      	ldr	r2, [r7, #28]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	4413      	add	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	440b      	add	r3, r1
 8005cc8:	3328      	adds	r3, #40	; 0x28
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005cce:	6939      	ldr	r1, [r7, #16]
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	440b      	add	r3, r1
 8005cdc:	3324      	adds	r3, #36	; 0x24
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005ce2:	6939      	ldr	r1, [r7, #16]
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	4413      	add	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	440b      	add	r3, r1
 8005cf0:	332c      	adds	r3, #44	; 0x2c
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005cf6:	f3bf 8f5f 	dmb	sy
 8005cfa:	e002      	b.n	8005d02 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d00:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005d08:	69fb      	ldr	r3, [r7, #28]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	200147e0 	.word	0x200147e0

08005d18 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	; 0x28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005d26:	4b21      	ldr	r3, [pc, #132]	; (8005dac <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005d28:	623b      	str	r3, [r7, #32]
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005d34:	f7ff fc54 	bl	80055e0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d38:	4b1c      	ldr	r3, [pc, #112]	; (8005dac <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005d3a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d82c      	bhi.n	8005d9c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005d42:	f3ef 8311 	mrs	r3, BASEPRI
 8005d46:	f04f 0120 	mov.w	r1, #32
 8005d4a:	f381 8811 	msr	BASEPRI, r1
 8005d4e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	3360      	adds	r3, #96	; 0x60
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00e      	beq.n	8005d86 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2200      	movs	r2, #0
 8005d84:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d8a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005d8c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9a:	e002      	b.n	8005da2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3728      	adds	r7, #40	; 0x28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	200147e0 	.word	0x200147e0

08005db0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00f      	beq.n	8005de6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005dc6:	e002      	b.n	8005dce <_EncodeStr+0x1e>
      Len++;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f6      	bne.n	8005dc8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d901      	bls.n	8005de6 <_EncodeStr+0x36>
      Len = Limit;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2bfe      	cmp	r3, #254	; 0xfe
 8005dea:	d806      	bhi.n	8005dfa <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	60fa      	str	r2, [r7, #12]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e011      	b.n	8005e1e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	60fa      	str	r2, [r7, #12]
 8005e00:	22ff      	movs	r2, #255	; 0xff
 8005e02:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	60fa      	str	r2, [r7, #12]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	0a19      	lsrs	r1, r3, #8
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	60fa      	str	r2, [r7, #12]
 8005e1a:	b2ca      	uxtb	r2, r1
 8005e1c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005e22:	e00a      	b.n	8005e3a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	1c53      	adds	r3, r2, #1
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1c59      	adds	r1, r3, #1
 8005e2e:	60f9      	str	r1, [r7, #12]
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	701a      	strb	r2, [r3, #0]
    n++;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	3301      	adds	r3, #1
 8005e38:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d3f0      	bcc.n	8005e24 <_EncodeStr+0x74>
  }
  return pPayload;
 8005e42:	68fb      	ldr	r3, [r7, #12]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005e6e:	4b36      	ldr	r3, [pc, #216]	; (8005f48 <_HandleIncomingPacket+0xe0>)
 8005e70:	7e1b      	ldrb	r3, [r3, #24]
 8005e72:	4618      	mov	r0, r3
 8005e74:	1cfb      	adds	r3, r7, #3
 8005e76:	2201      	movs	r2, #1
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f7ff fd57 	bl	800592c <SEGGER_RTT_ReadNoLock>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	dd54      	ble.n	8005f32 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	2b80      	cmp	r3, #128	; 0x80
 8005e8c:	d032      	beq.n	8005ef4 <_HandleIncomingPacket+0x8c>
 8005e8e:	2b80      	cmp	r3, #128	; 0x80
 8005e90:	dc42      	bgt.n	8005f18 <_HandleIncomingPacket+0xb0>
 8005e92:	2b07      	cmp	r3, #7
 8005e94:	dc16      	bgt.n	8005ec4 <_HandleIncomingPacket+0x5c>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	dd3e      	ble.n	8005f18 <_HandleIncomingPacket+0xb0>
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	2b06      	cmp	r3, #6
 8005e9e:	d83b      	bhi.n	8005f18 <_HandleIncomingPacket+0xb0>
 8005ea0:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <_HandleIncomingPacket+0x40>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005ecb 	.word	0x08005ecb
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005ed7 	.word	0x08005ed7
 8005eb4:	08005edd 	.word	0x08005edd
 8005eb8:	08005ee3 	.word	0x08005ee3
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	08005eef 	.word	0x08005eef
 8005ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec6:	d036      	beq.n	8005f36 <_HandleIncomingPacket+0xce>
 8005ec8:	e026      	b.n	8005f18 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005eca:	f000 fbab 	bl	8006624 <SEGGER_SYSVIEW_Start>
      break;
 8005ece:	e037      	b.n	8005f40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ed0:	f000 fc64 	bl	800679c <SEGGER_SYSVIEW_Stop>
      break;
 8005ed4:	e034      	b.n	8005f40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005ed6:	f000 fe3d 	bl	8006b54 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005eda:	e031      	b.n	8005f40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005edc:	f000 fe02 	bl	8006ae4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005ee0:	e02e      	b.n	8005f40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005ee2:	f000 fc81 	bl	80067e8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005ee6:	e02b      	b.n	8005f40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005ee8:	f001 f8d0 	bl	800708c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005eec:	e028      	b.n	8005f40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005eee:	f001 f8af 	bl	8007050 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005ef2:	e025      	b.n	8005f40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ef4:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <_HandleIncomingPacket+0xe0>)
 8005ef6:	7e1b      	ldrb	r3, [r3, #24]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	1cfb      	adds	r3, r7, #3
 8005efc:	2201      	movs	r2, #1
 8005efe:	4619      	mov	r1, r3
 8005f00:	f7ff fd14 	bl	800592c <SEGGER_RTT_ReadNoLock>
 8005f04:	4603      	mov	r3, r0
 8005f06:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	dd15      	ble.n	8005f3a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 f81d 	bl	8006f50 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005f16:	e010      	b.n	8005f3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	b25b      	sxtb	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	da0e      	bge.n	8005f3e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005f20:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <_HandleIncomingPacket+0xe0>)
 8005f22:	7e1b      	ldrb	r3, [r3, #24]
 8005f24:	4618      	mov	r0, r3
 8005f26:	1cfb      	adds	r3, r7, #3
 8005f28:	2201      	movs	r2, #1
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	f7ff fcfe 	bl	800592c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005f30:	e005      	b.n	8005f3e <_HandleIncomingPacket+0xd6>
    }
  }
 8005f32:	bf00      	nop
 8005f34:	e004      	b.n	8005f40 <_HandleIncomingPacket+0xd8>
      break;
 8005f36:	bf00      	nop
 8005f38:	e002      	b.n	8005f40 <_HandleIncomingPacket+0xd8>
      break;
 8005f3a:	bf00      	nop
 8005f3c:	e000      	b.n	8005f40 <_HandleIncomingPacket+0xd8>
      break;
 8005f3e:	bf00      	nop
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20014450 	.word	0x20014450

08005f4c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08c      	sub	sp, #48	; 0x30
 8005f50:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005f52:	2301      	movs	r3, #1
 8005f54:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005f56:	1d3b      	adds	r3, r7, #4
 8005f58:	3301      	adds	r3, #1
 8005f5a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f60:	4b32      	ldr	r3, [pc, #200]	; (800602c <_TrySendOverflowPacket+0xe0>)
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f66:	e00b      	b.n	8005f80 <_TrySendOverflowPacket+0x34>
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	1c59      	adds	r1, r3, #1
 8005f70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	09db      	lsrs	r3, r3, #7
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	2b7f      	cmp	r3, #127	; 0x7f
 8005f84:	d8f0      	bhi.n	8005f68 <_TrySendOverflowPacket+0x1c>
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f96:	4b26      	ldr	r3, [pc, #152]	; (8006030 <_TrySendOverflowPacket+0xe4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f9c:	4b23      	ldr	r3, [pc, #140]	; (800602c <_TrySendOverflowPacket+0xe0>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	623b      	str	r3, [r7, #32]
 8005fae:	e00b      	b.n	8005fc8 <_TrySendOverflowPacket+0x7c>
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	1c59      	adds	r1, r3, #1
 8005fb8:	6279      	str	r1, [r7, #36]	; 0x24
 8005fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	09db      	lsrs	r3, r3, #7
 8005fc6:	623b      	str	r3, [r7, #32]
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	2b7f      	cmp	r3, #127	; 0x7f
 8005fcc:	d8f0      	bhi.n	8005fb0 <_TrySendOverflowPacket+0x64>
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	627a      	str	r2, [r7, #36]	; 0x24
 8005fd4:	6a3a      	ldr	r2, [r7, #32]
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005fde:	4b13      	ldr	r3, [pc, #76]	; (800602c <_TrySendOverflowPacket+0xe0>)
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	1d3b      	adds	r3, r7, #4
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	1d3b      	adds	r3, r7, #4
 8005fee:	4619      	mov	r1, r3
 8005ff0:	f7fa f8fe 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005ff8:	f001 f9de 	bl	80073b8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006002:	4a0a      	ldr	r2, [pc, #40]	; (800602c <_TrySendOverflowPacket+0xe0>)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006008:	4b08      	ldr	r3, [pc, #32]	; (800602c <_TrySendOverflowPacket+0xe0>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	3b01      	subs	r3, #1
 800600e:	b2da      	uxtb	r2, r3
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <_TrySendOverflowPacket+0xe0>)
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	e004      	b.n	8006020 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006016:	4b05      	ldr	r3, [pc, #20]	; (800602c <_TrySendOverflowPacket+0xe0>)
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	3301      	adds	r3, #1
 800601c:	4a03      	ldr	r2, [pc, #12]	; (800602c <_TrySendOverflowPacket+0xe0>)
 800601e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006020:	693b      	ldr	r3, [r7, #16]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3730      	adds	r7, #48	; 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20014450 	.word	0x20014450
 8006030:	e0001004 	.word	0xe0001004

08006034 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006040:	4b6d      	ldr	r3, [pc, #436]	; (80061f8 <_SendPacket+0x1c4>)
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d010      	beq.n	800606a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006048:	4b6b      	ldr	r3, [pc, #428]	; (80061f8 <_SendPacket+0x1c4>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80a5 	beq.w	800619c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006052:	4b69      	ldr	r3, [pc, #420]	; (80061f8 <_SendPacket+0x1c4>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d109      	bne.n	800606e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800605a:	f7ff ff77 	bl	8005f4c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800605e:	4b66      	ldr	r3, [pc, #408]	; (80061f8 <_SendPacket+0x1c4>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b01      	cmp	r3, #1
 8006064:	f040 809c 	bne.w	80061a0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006068:	e001      	b.n	800606e <_SendPacket+0x3a>
    goto Send;
 800606a:	bf00      	nop
 800606c:	e000      	b.n	8006070 <_SendPacket+0x3c>
Send:
 800606e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b1f      	cmp	r3, #31
 8006074:	d809      	bhi.n	800608a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006076:	4b60      	ldr	r3, [pc, #384]	; (80061f8 <_SendPacket+0x1c4>)
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	f040 808d 	bne.w	80061a4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b17      	cmp	r3, #23
 800608e:	d807      	bhi.n	80060a0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3b01      	subs	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	b2da      	uxtb	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e03d      	b.n	800611c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2b7f      	cmp	r3, #127	; 0x7f
 80060ac:	d912      	bls.n	80060d4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	09da      	lsrs	r2, r3, #7
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	3a01      	subs	r2, #1
 80060c6:	60fa      	str	r2, [r7, #12]
 80060c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	e006      	b.n	80060e2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b7f      	cmp	r3, #127	; 0x7f
 80060e6:	d912      	bls.n	800610e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	09da      	lsrs	r2, r3, #7
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	3a01      	subs	r2, #1
 8006100:	60fa      	str	r2, [r7, #12]
 8006102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006106:	b2da      	uxtb	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e006      	b.n	800611c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3b01      	subs	r3, #1
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800611c:	4b37      	ldr	r3, [pc, #220]	; (80061fc <_SendPacket+0x1c8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006122:	4b35      	ldr	r3, [pc, #212]	; (80061f8 <_SendPacket+0x1c4>)
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	623b      	str	r3, [r7, #32]
 8006134:	e00b      	b.n	800614e <_SendPacket+0x11a>
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	1c59      	adds	r1, r3, #1
 800613e:	6279      	str	r1, [r7, #36]	; 0x24
 8006140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	09db      	lsrs	r3, r3, #7
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	2b7f      	cmp	r3, #127	; 0x7f
 8006152:	d8f0      	bhi.n	8006136 <_SendPacket+0x102>
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	627a      	str	r2, [r7, #36]	; 0x24
 800615a:	6a3a      	ldr	r2, [r7, #32]
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006164:	4b24      	ldr	r3, [pc, #144]	; (80061f8 <_SendPacket+0x1c4>)
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	4618      	mov	r0, r3
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	461a      	mov	r2, r3
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	f7fa f83c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006178:	4603      	mov	r3, r0
 800617a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800617c:	f001 f91c 	bl	80073b8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006186:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <_SendPacket+0x1c4>)
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	60d3      	str	r3, [r2, #12]
 800618c:	e00b      	b.n	80061a6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800618e:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <_SendPacket+0x1c4>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	b2da      	uxtb	r2, r3
 8006196:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <_SendPacket+0x1c4>)
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e004      	b.n	80061a6 <_SendPacket+0x172>
    goto SendDone;
 800619c:	bf00      	nop
 800619e:	e002      	b.n	80061a6 <_SendPacket+0x172>
      goto SendDone;
 80061a0:	bf00      	nop
 80061a2:	e000      	b.n	80061a6 <_SendPacket+0x172>
      goto SendDone;
 80061a4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80061a6:	4b14      	ldr	r3, [pc, #80]	; (80061f8 <_SendPacket+0x1c4>)
 80061a8:	7e1b      	ldrb	r3, [r3, #24]
 80061aa:	4619      	mov	r1, r3
 80061ac:	4a14      	ldr	r2, [pc, #80]	; (8006200 <_SendPacket+0x1cc>)
 80061ae:	460b      	mov	r3, r1
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	440b      	add	r3, r1
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	4413      	add	r3, r2
 80061b8:	336c      	adds	r3, #108	; 0x6c
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <_SendPacket+0x1c4>)
 80061be:	7e1b      	ldrb	r3, [r3, #24]
 80061c0:	4618      	mov	r0, r3
 80061c2:	490f      	ldr	r1, [pc, #60]	; (8006200 <_SendPacket+0x1cc>)
 80061c4:	4603      	mov	r3, r0
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4403      	add	r3, r0
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	440b      	add	r3, r1
 80061ce:	3370      	adds	r3, #112	; 0x70
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d00b      	beq.n	80061ee <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80061d6:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <_SendPacket+0x1c4>)
 80061d8:	789b      	ldrb	r3, [r3, #2]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d107      	bne.n	80061ee <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <_SendPacket+0x1c4>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80061e4:	f7ff fe40 	bl	8005e68 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80061e8:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <_SendPacket+0x1c4>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80061ee:	bf00      	nop
 80061f0:	3728      	adds	r7, #40	; 0x28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20014450 	.word	0x20014450
 80061fc:	e0001004 	.word	0xe0001004
 8006200:	200147e0 	.word	0x200147e0

08006204 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006212:	2300      	movs	r3, #0
 8006214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006218:	4917      	ldr	r1, [pc, #92]	; (8006278 <SEGGER_SYSVIEW_Init+0x74>)
 800621a:	4818      	ldr	r0, [pc, #96]	; (800627c <SEGGER_SYSVIEW_Init+0x78>)
 800621c:	f7ff fcf8 	bl	8005c10 <SEGGER_RTT_AllocUpBuffer>
 8006220:	4603      	mov	r3, r0
 8006222:	b2da      	uxtb	r2, r3
 8006224:	4b16      	ldr	r3, [pc, #88]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 8006226:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006228:	4b15      	ldr	r3, [pc, #84]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 800622a:	785a      	ldrb	r2, [r3, #1]
 800622c:	4b14      	ldr	r3, [pc, #80]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 800622e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006230:	4b13      	ldr	r3, [pc, #76]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 8006232:	7e1b      	ldrb	r3, [r3, #24]
 8006234:	4618      	mov	r0, r3
 8006236:	2300      	movs	r3, #0
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	2308      	movs	r3, #8
 800623c:	4a11      	ldr	r2, [pc, #68]	; (8006284 <SEGGER_SYSVIEW_Init+0x80>)
 800623e:	490f      	ldr	r1, [pc, #60]	; (800627c <SEGGER_SYSVIEW_Init+0x78>)
 8006240:	f7ff fd6a 	bl	8005d18 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 8006246:	2200      	movs	r2, #0
 8006248:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800624a:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <SEGGER_SYSVIEW_Init+0x84>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a0c      	ldr	r2, [pc, #48]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 8006250:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006252:	4a0b      	ldr	r2, [pc, #44]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006258:	4a09      	ldr	r2, [pc, #36]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800625e:	4a08      	ldr	r2, [pc, #32]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006264:	4a06      	ldr	r2, [pc, #24]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <SEGGER_SYSVIEW_Init+0x7c>)
 800626c:	2200      	movs	r2, #0
 800626e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20013448 	.word	0x20013448
 800627c:	0800b8bc 	.word	0x0800b8bc
 8006280:	20014450 	.word	0x20014450
 8006284:	20014448 	.word	0x20014448
 8006288:	e0001004 	.word	0xe0001004

0800628c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006294:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6113      	str	r3, [r2, #16]
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20014450 	.word	0x20014450

080062ac <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062b4:	f3ef 8311 	mrs	r3, BASEPRI
 80062b8:	f04f 0120 	mov.w	r1, #32
 80062bc:	f381 8811 	msr	BASEPRI, r1
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	4808      	ldr	r0, [pc, #32]	; (80062e4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80062c4:	f7ff fdc4 	bl	8005e50 <_PreparePacket>
 80062c8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	68b8      	ldr	r0, [r7, #8]
 80062d0:	f7ff feb0 	bl	8006034 <_SendPacket>
  RECORD_END();
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f383 8811 	msr	BASEPRI, r3
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20014480 	.word	0x20014480

080062e8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062f2:	f3ef 8311 	mrs	r3, BASEPRI
 80062f6:	f04f 0120 	mov.w	r1, #32
 80062fa:	f381 8811 	msr	BASEPRI, r1
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	4816      	ldr	r0, [pc, #88]	; (800635c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006302:	f7ff fda5 	bl	8005e50 <_PreparePacket>
 8006306:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	e00b      	b.n	800632e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	1c59      	adds	r1, r3, #1
 800631e:	61f9      	str	r1, [r7, #28]
 8006320:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	09db      	lsrs	r3, r3, #7
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	2b7f      	cmp	r3, #127	; 0x7f
 8006332:	d8f0      	bhi.n	8006316 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	61fa      	str	r2, [r7, #28]
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	6938      	ldr	r0, [r7, #16]
 800634a:	f7ff fe73 	bl	8006034 <_SendPacket>
  RECORD_END();
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f383 8811 	msr	BASEPRI, r3
}
 8006354:	bf00      	nop
 8006356:	3720      	adds	r7, #32
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20014480 	.word	0x20014480

08006360 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b08c      	sub	sp, #48	; 0x30
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800636c:	f3ef 8311 	mrs	r3, BASEPRI
 8006370:	f04f 0120 	mov.w	r1, #32
 8006374:	f381 8811 	msr	BASEPRI, r1
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	4825      	ldr	r0, [pc, #148]	; (8006410 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800637c:	f7ff fd68 	bl	8005e50 <_PreparePacket>
 8006380:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
 800638e:	e00b      	b.n	80063a8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	b2da      	uxtb	r2, r3
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	62f9      	str	r1, [r7, #44]	; 0x2c
 800639a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	09db      	lsrs	r3, r3, #7
 80063a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	2b7f      	cmp	r3, #127	; 0x7f
 80063ac:	d8f0      	bhi.n	8006390 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	623b      	str	r3, [r7, #32]
 80063c6:	e00b      	b.n	80063e0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	1c59      	adds	r1, r3, #1
 80063d0:	6279      	str	r1, [r7, #36]	; 0x24
 80063d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	09db      	lsrs	r3, r3, #7
 80063de:	623b      	str	r3, [r7, #32]
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b7f      	cmp	r3, #127	; 0x7f
 80063e4:	d8f0      	bhi.n	80063c8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	627a      	str	r2, [r7, #36]	; 0x24
 80063ec:	6a3a      	ldr	r2, [r7, #32]
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	6979      	ldr	r1, [r7, #20]
 80063fa:	69b8      	ldr	r0, [r7, #24]
 80063fc:	f7ff fe1a 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f383 8811 	msr	BASEPRI, r3
}
 8006406:	bf00      	nop
 8006408:	3730      	adds	r7, #48	; 0x30
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20014480 	.word	0x20014480

08006414 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b08e      	sub	sp, #56	; 0x38
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006422:	f3ef 8311 	mrs	r3, BASEPRI
 8006426:	f04f 0120 	mov.w	r1, #32
 800642a:	f381 8811 	msr	BASEPRI, r1
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	4832      	ldr	r0, [pc, #200]	; (80064fc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006432:	f7ff fd0d 	bl	8005e50 <_PreparePacket>
 8006436:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	633b      	str	r3, [r7, #48]	; 0x30
 8006444:	e00b      	b.n	800645e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	b2da      	uxtb	r2, r3
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	6379      	str	r1, [r7, #52]	; 0x34
 8006450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	09db      	lsrs	r3, r3, #7
 800645c:	633b      	str	r3, [r7, #48]	; 0x30
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	2b7f      	cmp	r3, #127	; 0x7f
 8006462:	d8f0      	bhi.n	8006446 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	637a      	str	r2, [r7, #52]	; 0x34
 800646a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
 800647c:	e00b      	b.n	8006496 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	b2da      	uxtb	r2, r3
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	1c59      	adds	r1, r3, #1
 8006486:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	09db      	lsrs	r3, r3, #7
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	2b7f      	cmp	r3, #127	; 0x7f
 800649a:	d8f0      	bhi.n	800647e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	623b      	str	r3, [r7, #32]
 80064b4:	e00b      	b.n	80064ce <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	1c59      	adds	r1, r3, #1
 80064be:	6279      	str	r1, [r7, #36]	; 0x24
 80064c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	09db      	lsrs	r3, r3, #7
 80064cc:	623b      	str	r3, [r7, #32]
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	2b7f      	cmp	r3, #127	; 0x7f
 80064d2:	d8f0      	bhi.n	80064b6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	627a      	str	r2, [r7, #36]	; 0x24
 80064da:	6a3a      	ldr	r2, [r7, #32]
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	6979      	ldr	r1, [r7, #20]
 80064e8:	69b8      	ldr	r0, [r7, #24]
 80064ea:	f7ff fda3 	bl	8006034 <_SendPacket>
  RECORD_END();
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f383 8811 	msr	BASEPRI, r3
}
 80064f4:	bf00      	nop
 80064f6:	3738      	adds	r7, #56	; 0x38
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20014480 	.word	0x20014480

08006500 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b090      	sub	sp, #64	; 0x40
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800650e:	f3ef 8311 	mrs	r3, BASEPRI
 8006512:	f04f 0120 	mov.w	r1, #32
 8006516:	f381 8811 	msr	BASEPRI, r1
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	4840      	ldr	r0, [pc, #256]	; (8006620 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800651e:	f7ff fc97 	bl	8005e50 <_PreparePacket>
 8006522:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006530:	e00b      	b.n	800654a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	b2da      	uxtb	r2, r3
 8006536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006538:	1c59      	adds	r1, r3, #1
 800653a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800653c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	09db      	lsrs	r3, r3, #7
 8006548:	63bb      	str	r3, [r7, #56]	; 0x38
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	2b7f      	cmp	r3, #127	; 0x7f
 800654e:	d8f0      	bhi.n	8006532 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
 800655c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	633b      	str	r3, [r7, #48]	; 0x30
 8006568:	e00b      	b.n	8006582 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	b2da      	uxtb	r2, r3
 800656e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006570:	1c59      	adds	r1, r3, #1
 8006572:	6379      	str	r1, [r7, #52]	; 0x34
 8006574:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	09db      	lsrs	r3, r3, #7
 8006580:	633b      	str	r3, [r7, #48]	; 0x30
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	2b7f      	cmp	r3, #127	; 0x7f
 8006586:	d8f0      	bhi.n	800656a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	637a      	str	r2, [r7, #52]	; 0x34
 800658e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006596:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
 80065a0:	e00b      	b.n	80065ba <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	1c59      	adds	r1, r3, #1
 80065aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	09db      	lsrs	r3, r3, #7
 80065b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	2b7f      	cmp	r3, #127	; 0x7f
 80065be:	d8f0      	bhi.n	80065a2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
 80065d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d6:	623b      	str	r3, [r7, #32]
 80065d8:	e00b      	b.n	80065f2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	1c59      	adds	r1, r3, #1
 80065e2:	6279      	str	r1, [r7, #36]	; 0x24
 80065e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	09db      	lsrs	r3, r3, #7
 80065f0:	623b      	str	r3, [r7, #32]
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	2b7f      	cmp	r3, #127	; 0x7f
 80065f6:	d8f0      	bhi.n	80065da <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	627a      	str	r2, [r7, #36]	; 0x24
 80065fe:	6a3a      	ldr	r2, [r7, #32]
 8006600:	b2d2      	uxtb	r2, r2
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	6979      	ldr	r1, [r7, #20]
 800660c:	69b8      	ldr	r0, [r7, #24]
 800660e:	f7ff fd11 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f383 8811 	msr	BASEPRI, r3
}
 8006618:	bf00      	nop
 800661a:	3740      	adds	r7, #64	; 0x40
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20014480 	.word	0x20014480

08006624 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006624:	b580      	push	{r7, lr}
 8006626:	b08c      	sub	sp, #48	; 0x30
 8006628:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800662a:	4b59      	ldr	r3, [pc, #356]	; (8006790 <SEGGER_SYSVIEW_Start+0x16c>)
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006630:	f3ef 8311 	mrs	r3, BASEPRI
 8006634:	f04f 0120 	mov.w	r1, #32
 8006638:	f381 8811 	msr	BASEPRI, r1
 800663c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800663e:	4b54      	ldr	r3, [pc, #336]	; (8006790 <SEGGER_SYSVIEW_Start+0x16c>)
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	220a      	movs	r2, #10
 8006644:	4953      	ldr	r1, [pc, #332]	; (8006794 <SEGGER_SYSVIEW_Start+0x170>)
 8006646:	4618      	mov	r0, r3
 8006648:	f7f9 fdd2 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006652:	f000 feb1 	bl	80073b8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006656:	200a      	movs	r0, #10
 8006658:	f7ff fe28 	bl	80062ac <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800665c:	f3ef 8311 	mrs	r3, BASEPRI
 8006660:	f04f 0120 	mov.w	r1, #32
 8006664:	f381 8811 	msr	BASEPRI, r1
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	484b      	ldr	r0, [pc, #300]	; (8006798 <SEGGER_SYSVIEW_Start+0x174>)
 800666c:	f7ff fbf0 	bl	8005e50 <_PreparePacket>
 8006670:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800667a:	4b45      	ldr	r3, [pc, #276]	; (8006790 <SEGGER_SYSVIEW_Start+0x16c>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006680:	e00b      	b.n	800669a <SEGGER_SYSVIEW_Start+0x76>
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	b2da      	uxtb	r2, r3
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	1c59      	adds	r1, r3, #1
 800668a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800668c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006690:	b2d2      	uxtb	r2, r2
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	09db      	lsrs	r3, r3, #7
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	2b7f      	cmp	r3, #127	; 0x7f
 800669e:	d8f0      	bhi.n	8006682 <SEGGER_SYSVIEW_Start+0x5e>
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
 80066b4:	4b36      	ldr	r3, [pc, #216]	; (8006790 <SEGGER_SYSVIEW_Start+0x16c>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	623b      	str	r3, [r7, #32]
 80066ba:	e00b      	b.n	80066d4 <SEGGER_SYSVIEW_Start+0xb0>
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	1c59      	adds	r1, r3, #1
 80066c4:	6279      	str	r1, [r7, #36]	; 0x24
 80066c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	09db      	lsrs	r3, r3, #7
 80066d2:	623b      	str	r3, [r7, #32]
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	2b7f      	cmp	r3, #127	; 0x7f
 80066d8:	d8f0      	bhi.n	80066bc <SEGGER_SYSVIEW_Start+0x98>
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	627a      	str	r2, [r7, #36]	; 0x24
 80066e0:	6a3a      	ldr	r2, [r7, #32]
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	61fb      	str	r3, [r7, #28]
 80066ee:	4b28      	ldr	r3, [pc, #160]	; (8006790 <SEGGER_SYSVIEW_Start+0x16c>)
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	e00b      	b.n	800670e <SEGGER_SYSVIEW_Start+0xea>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	61f9      	str	r1, [r7, #28]
 8006700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	09db      	lsrs	r3, r3, #7
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b7f      	cmp	r3, #127	; 0x7f
 8006712:	d8f0      	bhi.n	80066f6 <SEGGER_SYSVIEW_Start+0xd2>
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	61fa      	str	r2, [r7, #28]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	2300      	movs	r3, #0
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	e00b      	b.n	8006746 <SEGGER_SYSVIEW_Start+0x122>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	b2da      	uxtb	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	1c59      	adds	r1, r3, #1
 8006736:	6179      	str	r1, [r7, #20]
 8006738:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	09db      	lsrs	r3, r3, #7
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b7f      	cmp	r3, #127	; 0x7f
 800674a:	d8f0      	bhi.n	800672e <SEGGER_SYSVIEW_Start+0x10a>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	617a      	str	r2, [r7, #20]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800675c:	2218      	movs	r2, #24
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff fc67 	bl	8006034 <_SendPacket>
      RECORD_END();
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800676c:	4b08      	ldr	r3, [pc, #32]	; (8006790 <SEGGER_SYSVIEW_Start+0x16c>)
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006774:	4b06      	ldr	r3, [pc, #24]	; (8006790 <SEGGER_SYSVIEW_Start+0x16c>)
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800677a:	f000 f9eb 	bl	8006b54 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800677e:	f000 f9b1 	bl	8006ae4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006782:	f000 fc83 	bl	800708c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006786:	bf00      	nop
 8006788:	3730      	adds	r7, #48	; 0x30
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20014450 	.word	0x20014450
 8006794:	0800bd94 	.word	0x0800bd94
 8006798:	20014480 	.word	0x20014480

0800679c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067a2:	f3ef 8311 	mrs	r3, BASEPRI
 80067a6:	f04f 0120 	mov.w	r1, #32
 80067aa:	f381 8811 	msr	BASEPRI, r1
 80067ae:	607b      	str	r3, [r7, #4]
 80067b0:	480b      	ldr	r0, [pc, #44]	; (80067e0 <SEGGER_SYSVIEW_Stop+0x44>)
 80067b2:	f7ff fb4d 	bl	8005e50 <_PreparePacket>
 80067b6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <SEGGER_SYSVIEW_Stop+0x48>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d007      	beq.n	80067d0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80067c0:	220b      	movs	r2, #11
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6838      	ldr	r0, [r7, #0]
 80067c6:	f7ff fc35 	bl	8006034 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <SEGGER_SYSVIEW_Stop+0x48>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f383 8811 	msr	BASEPRI, r3
}
 80067d6:	bf00      	nop
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20014480 	.word	0x20014480
 80067e4:	20014450 	.word	0x20014450

080067e8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08c      	sub	sp, #48	; 0x30
 80067ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80067ee:	f3ef 8311 	mrs	r3, BASEPRI
 80067f2:	f04f 0120 	mov.w	r1, #32
 80067f6:	f381 8811 	msr	BASEPRI, r1
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	4845      	ldr	r0, [pc, #276]	; (8006914 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80067fe:	f7ff fb27 	bl	8005e50 <_PreparePacket>
 8006802:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800680c:	4b42      	ldr	r3, [pc, #264]	; (8006918 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
 8006812:	e00b      	b.n	800682c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	b2da      	uxtb	r2, r3
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	1c59      	adds	r1, r3, #1
 800681c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800681e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	09db      	lsrs	r3, r3, #7
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	2b7f      	cmp	r3, #127	; 0x7f
 8006830:	d8f0      	bhi.n	8006814 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
 8006846:	4b34      	ldr	r3, [pc, #208]	; (8006918 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	623b      	str	r3, [r7, #32]
 800684c:	e00b      	b.n	8006866 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	1c59      	adds	r1, r3, #1
 8006856:	6279      	str	r1, [r7, #36]	; 0x24
 8006858:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	09db      	lsrs	r3, r3, #7
 8006864:	623b      	str	r3, [r7, #32]
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	2b7f      	cmp	r3, #127	; 0x7f
 800686a:	d8f0      	bhi.n	800684e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	627a      	str	r2, [r7, #36]	; 0x24
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	4b25      	ldr	r3, [pc, #148]	; (8006918 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	e00b      	b.n	80068a0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	b2da      	uxtb	r2, r3
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	1c59      	adds	r1, r3, #1
 8006890:	61f9      	str	r1, [r7, #28]
 8006892:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	09db      	lsrs	r3, r3, #7
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b7f      	cmp	r3, #127	; 0x7f
 80068a4:	d8f0      	bhi.n	8006888 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	61fa      	str	r2, [r7, #28]
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	2300      	movs	r3, #0
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	e00b      	b.n	80068d8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	1c59      	adds	r1, r3, #1
 80068c8:	6179      	str	r1, [r7, #20]
 80068ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	09db      	lsrs	r3, r3, #7
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b7f      	cmp	r3, #127	; 0x7f
 80068dc:	d8f0      	bhi.n	80068c0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	617a      	str	r2, [r7, #20]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80068ee:	2218      	movs	r2, #24
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	68b8      	ldr	r0, [r7, #8]
 80068f4:	f7ff fb9e 	bl	8006034 <_SendPacket>
  RECORD_END();
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80068fe:	4b06      	ldr	r3, [pc, #24]	; (8006918 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006906:	4b04      	ldr	r3, [pc, #16]	; (8006918 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	4798      	blx	r3
  }
}
 800690c:	bf00      	nop
 800690e:	3730      	adds	r7, #48	; 0x30
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20014480 	.word	0x20014480
 8006918:	20014450 	.word	0x20014450

0800691c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b092      	sub	sp, #72	; 0x48
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006924:	f3ef 8311 	mrs	r3, BASEPRI
 8006928:	f04f 0120 	mov.w	r1, #32
 800692c:	f381 8811 	msr	BASEPRI, r1
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	486a      	ldr	r0, [pc, #424]	; (8006adc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006934:	f7ff fa8c 	bl	8005e50 <_PreparePacket>
 8006938:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	647b      	str	r3, [r7, #68]	; 0x44
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b66      	ldr	r3, [pc, #408]	; (8006ae0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	643b      	str	r3, [r7, #64]	; 0x40
 800694e:	e00b      	b.n	8006968 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006952:	b2da      	uxtb	r2, r3
 8006954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006956:	1c59      	adds	r1, r3, #1
 8006958:	6479      	str	r1, [r7, #68]	; 0x44
 800695a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006964:	09db      	lsrs	r3, r3, #7
 8006966:	643b      	str	r3, [r7, #64]	; 0x40
 8006968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696a:	2b7f      	cmp	r3, #127	; 0x7f
 800696c:	d8f0      	bhi.n	8006950 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800696e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	647a      	str	r2, [r7, #68]	; 0x44
 8006974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800697c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	63bb      	str	r3, [r7, #56]	; 0x38
 8006988:	e00b      	b.n	80069a2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006990:	1c59      	adds	r1, r3, #1
 8006992:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	09db      	lsrs	r3, r3, #7
 80069a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	2b7f      	cmp	r3, #127	; 0x7f
 80069a6:	d8f0      	bhi.n	800698a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80069a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	4619      	mov	r1, r3
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff f9f5 	bl	8005db0 <_EncodeStr>
 80069c6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80069c8:	2209      	movs	r2, #9
 80069ca:	68f9      	ldr	r1, [r7, #12]
 80069cc:	6938      	ldr	r0, [r7, #16]
 80069ce:	f7ff fb31 	bl	8006034 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	4b40      	ldr	r3, [pc, #256]	; (8006ae0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	633b      	str	r3, [r7, #48]	; 0x30
 80069e6:	e00b      	b.n	8006a00 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ee:	1c59      	adds	r1, r3, #1
 80069f0:	6379      	str	r1, [r7, #52]	; 0x34
 80069f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	09db      	lsrs	r3, r3, #7
 80069fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	2b7f      	cmp	r3, #127	; 0x7f
 8006a04:	d8f0      	bhi.n	80069e8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	637a      	str	r2, [r7, #52]	; 0x34
 8006a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a20:	e00b      	b.n	8006a3a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	1c59      	adds	r1, r3, #1
 8006a2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	09db      	lsrs	r3, r3, #7
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a3e:	d8f0      	bhi.n	8006a22 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	623b      	str	r3, [r7, #32]
 8006a5a:	e00b      	b.n	8006a74 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	6279      	str	r1, [r7, #36]	; 0x24
 8006a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	09db      	lsrs	r3, r3, #7
 8006a72:	623b      	str	r3, [r7, #32]
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	2b7f      	cmp	r3, #127	; 0x7f
 8006a78:	d8f0      	bhi.n	8006a5c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	61fb      	str	r3, [r7, #28]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	e00b      	b.n	8006aac <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	1c59      	adds	r1, r3, #1
 8006a9c:	61f9      	str	r1, [r7, #28]
 8006a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	09db      	lsrs	r3, r3, #7
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	2b7f      	cmp	r3, #127	; 0x7f
 8006ab0:	d8f0      	bhi.n	8006a94 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	61fa      	str	r2, [r7, #28]
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006ac2:	2215      	movs	r2, #21
 8006ac4:	68f9      	ldr	r1, [r7, #12]
 8006ac6:	6938      	ldr	r0, [r7, #16]
 8006ac8:	f7ff fab4 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f383 8811 	msr	BASEPRI, r3
}
 8006ad2:	bf00      	nop
 8006ad4:	3748      	adds	r7, #72	; 0x48
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20014480 	.word	0x20014480
 8006ae0:	20014450 	.word	0x20014450

08006ae4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006ae8:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006afa:	4b03      	ldr	r3, [pc, #12]	; (8006b08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4798      	blx	r3
  }
}
 8006b02:	bf00      	nop
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20014450 	.word	0x20014450

08006b0c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b14:	f3ef 8311 	mrs	r3, BASEPRI
 8006b18:	f04f 0120 	mov.w	r1, #32
 8006b1c:	f381 8811 	msr	BASEPRI, r1
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	480b      	ldr	r0, [pc, #44]	; (8006b50 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006b24:	f7ff f994 	bl	8005e50 <_PreparePacket>
 8006b28:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b2a:	2280      	movs	r2, #128	; 0x80
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	6938      	ldr	r0, [r7, #16]
 8006b30:	f7ff f93e 	bl	8005db0 <_EncodeStr>
 8006b34:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006b36:	220e      	movs	r2, #14
 8006b38:	68f9      	ldr	r1, [r7, #12]
 8006b3a:	6938      	ldr	r0, [r7, #16]
 8006b3c:	f7ff fa7a 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f383 8811 	msr	BASEPRI, r3
}
 8006b46:	bf00      	nop
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20014480 	.word	0x20014480

08006b54 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006b54:	b590      	push	{r4, r7, lr}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006b5a:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01a      	beq.n	8006b98 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d015      	beq.n	8006b98 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006b6c:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4798      	blx	r3
 8006b74:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b78:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	000a      	movs	r2, r1
 8006b88:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4621      	mov	r1, r4
 8006b90:	200d      	movs	r0, #13
 8006b92:	f7ff fbe5 	bl	8006360 <SEGGER_SYSVIEW_RecordU32x2>
 8006b96:	e006      	b.n	8006ba6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006b98:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	200c      	movs	r0, #12
 8006ba0:	f7ff fba2 	bl	80062e8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd90      	pop	{r4, r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20014450 	.word	0x20014450
 8006bb4:	e0001004 	.word	0xe0001004

08006bb8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc2:	f04f 0120 	mov.w	r1, #32
 8006bc6:	f381 8811 	msr	BASEPRI, r1
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	4819      	ldr	r0, [pc, #100]	; (8006c34 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006bce:	f7ff f93f 	bl	8005e50 <_PreparePacket>
 8006bd2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006bd8:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	e00b      	b.n	8006c04 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	1c59      	adds	r1, r3, #1
 8006bf4:	6179      	str	r1, [r7, #20]
 8006bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	09db      	lsrs	r3, r3, #7
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b7f      	cmp	r3, #127	; 0x7f
 8006c08:	d8f0      	bhi.n	8006bec <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	617a      	str	r2, [r7, #20]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	68b8      	ldr	r0, [r7, #8]
 8006c20:	f7ff fa08 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f383 8811 	msr	BASEPRI, r3
}
 8006c2a:	bf00      	nop
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20014480 	.word	0x20014480
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c42:	f3ef 8311 	mrs	r3, BASEPRI
 8006c46:	f04f 0120 	mov.w	r1, #32
 8006c4a:	f381 8811 	msr	BASEPRI, r1
 8006c4e:	607b      	str	r3, [r7, #4]
 8006c50:	4807      	ldr	r0, [pc, #28]	; (8006c70 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006c52:	f7ff f8fd 	bl	8005e50 <_PreparePacket>
 8006c56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006c58:	2203      	movs	r2, #3
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6838      	ldr	r0, [r7, #0]
 8006c5e:	f7ff f9e9 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f383 8811 	msr	BASEPRI, r3
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	20014480 	.word	0x20014480

08006c74 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7e:	f04f 0120 	mov.w	r1, #32
 8006c82:	f381 8811 	msr	BASEPRI, r1
 8006c86:	607b      	str	r3, [r7, #4]
 8006c88:	4807      	ldr	r0, [pc, #28]	; (8006ca8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006c8a:	f7ff f8e1 	bl	8005e50 <_PreparePacket>
 8006c8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006c90:	2212      	movs	r2, #18
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6838      	ldr	r0, [r7, #0]
 8006c96:	f7ff f9cd 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f383 8811 	msr	BASEPRI, r3
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	20014480 	.word	0x20014480

08006cac <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb6:	f04f 0120 	mov.w	r1, #32
 8006cba:	f381 8811 	msr	BASEPRI, r1
 8006cbe:	607b      	str	r3, [r7, #4]
 8006cc0:	4807      	ldr	r0, [pc, #28]	; (8006ce0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006cc2:	f7ff f8c5 	bl	8005e50 <_PreparePacket>
 8006cc6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006cc8:	2211      	movs	r2, #17
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6838      	ldr	r0, [r7, #0]
 8006cce:	f7ff f9b1 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f383 8811 	msr	BASEPRI, r3
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	20014480 	.word	0x20014480

08006ce4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cec:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf0:	f04f 0120 	mov.w	r1, #32
 8006cf4:	f381 8811 	msr	BASEPRI, r1
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	4819      	ldr	r0, [pc, #100]	; (8006d60 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006cfc:	f7ff f8a8 	bl	8005e50 <_PreparePacket>
 8006d00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d06:	4b17      	ldr	r3, [pc, #92]	; (8006d64 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	e00b      	b.n	8006d32 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	1c59      	adds	r1, r3, #1
 8006d22:	61f9      	str	r1, [r7, #28]
 8006d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	09db      	lsrs	r3, r3, #7
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b7f      	cmp	r3, #127	; 0x7f
 8006d36:	d8f0      	bhi.n	8006d1a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	61fa      	str	r2, [r7, #28]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006d48:	2208      	movs	r2, #8
 8006d4a:	68f9      	ldr	r1, [r7, #12]
 8006d4c:	6938      	ldr	r0, [r7, #16]
 8006d4e:	f7ff f971 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f383 8811 	msr	BASEPRI, r3
}
 8006d58:	bf00      	nop
 8006d5a:	3720      	adds	r7, #32
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20014480 	.word	0x20014480
 8006d64:	20014450 	.word	0x20014450

08006d68 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d70:	f3ef 8311 	mrs	r3, BASEPRI
 8006d74:	f04f 0120 	mov.w	r1, #32
 8006d78:	f381 8811 	msr	BASEPRI, r1
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	4819      	ldr	r0, [pc, #100]	; (8006de4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006d80:	f7ff f866 	bl	8005e50 <_PreparePacket>
 8006d84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d8a:	4b17      	ldr	r3, [pc, #92]	; (8006de8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	e00b      	b.n	8006db6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	1c59      	adds	r1, r3, #1
 8006da6:	61f9      	str	r1, [r7, #28]
 8006da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	09db      	lsrs	r3, r3, #7
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b7f      	cmp	r3, #127	; 0x7f
 8006dba:	d8f0      	bhi.n	8006d9e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	61fa      	str	r2, [r7, #28]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006dcc:	2204      	movs	r2, #4
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	6938      	ldr	r0, [r7, #16]
 8006dd2:	f7ff f92f 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f383 8811 	msr	BASEPRI, r3
}
 8006ddc:	bf00      	nop
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20014480 	.word	0x20014480
 8006de8:	20014450 	.word	0x20014450

08006dec <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006df4:	f3ef 8311 	mrs	r3, BASEPRI
 8006df8:	f04f 0120 	mov.w	r1, #32
 8006dfc:	f381 8811 	msr	BASEPRI, r1
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	4819      	ldr	r0, [pc, #100]	; (8006e68 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006e04:	f7ff f824 	bl	8005e50 <_PreparePacket>
 8006e08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e0e:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	61fb      	str	r3, [r7, #28]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	61bb      	str	r3, [r7, #24]
 8006e20:	e00b      	b.n	8006e3a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	1c59      	adds	r1, r3, #1
 8006e2a:	61f9      	str	r1, [r7, #28]
 8006e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	09db      	lsrs	r3, r3, #7
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e3e:	d8f0      	bhi.n	8006e22 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	61fa      	str	r2, [r7, #28]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006e50:	2206      	movs	r2, #6
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	6938      	ldr	r0, [r7, #16]
 8006e56:	f7ff f8ed 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f383 8811 	msr	BASEPRI, r3
}
 8006e60:	bf00      	nop
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20014480 	.word	0x20014480
 8006e6c:	20014450 	.word	0x20014450

08006e70 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08a      	sub	sp, #40	; 0x28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7e:	f04f 0120 	mov.w	r1, #32
 8006e82:	f381 8811 	msr	BASEPRI, r1
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	4827      	ldr	r0, [pc, #156]	; (8006f28 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006e8a:	f7fe ffe1 	bl	8005e50 <_PreparePacket>
 8006e8e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e94:	4b25      	ldr	r3, [pc, #148]	; (8006f2c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	623b      	str	r3, [r7, #32]
 8006ea6:	e00b      	b.n	8006ec0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	1c59      	adds	r1, r3, #1
 8006eb0:	6279      	str	r1, [r7, #36]	; 0x24
 8006eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	09db      	lsrs	r3, r3, #7
 8006ebe:	623b      	str	r3, [r7, #32]
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec4:	d8f0      	bhi.n	8006ea8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	627a      	str	r2, [r7, #36]	; 0x24
 8006ecc:	6a3a      	ldr	r2, [r7, #32]
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	e00b      	b.n	8006ef8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	1c59      	adds	r1, r3, #1
 8006ee8:	61f9      	str	r1, [r7, #28]
 8006eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	09db      	lsrs	r3, r3, #7
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	2b7f      	cmp	r3, #127	; 0x7f
 8006efc:	d8f0      	bhi.n	8006ee0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	61fa      	str	r2, [r7, #28]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006f0e:	2207      	movs	r2, #7
 8006f10:	68f9      	ldr	r1, [r7, #12]
 8006f12:	6938      	ldr	r0, [r7, #16]
 8006f14:	f7ff f88e 	bl	8006034 <_SendPacket>
  RECORD_END();
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f383 8811 	msr	BASEPRI, r3
}
 8006f1e:	bf00      	nop
 8006f20:	3728      	adds	r7, #40	; 0x28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20014480 	.word	0x20014480
 8006f2c:	20014450 	.word	0x20014450

08006f30 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	1ad3      	subs	r3, r2, r3
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	20014450 	.word	0x20014450

08006f50 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08c      	sub	sp, #48	; 0x30
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006f5a:	4b3b      	ldr	r3, [pc, #236]	; (8007048 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d06d      	beq.n	800703e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006f62:	4b39      	ldr	r3, [pc, #228]	; (8007048 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006f68:	2300      	movs	r3, #0
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f6c:	e008      	b.n	8006f80 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d3f2      	bcc.n	8006f6e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006f88:	e000      	b.n	8006f8c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006f8a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d055      	beq.n	800703e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f92:	f3ef 8311 	mrs	r3, BASEPRI
 8006f96:	f04f 0120 	mov.w	r1, #32
 8006f9a:	f381 8811 	msr	BASEPRI, r1
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	482a      	ldr	r0, [pc, #168]	; (800704c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006fa2:	f7fe ff55 	bl	8005e50 <_PreparePacket>
 8006fa6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	623b      	str	r3, [r7, #32]
 8006fb4:	e00b      	b.n	8006fce <SEGGER_SYSVIEW_SendModule+0x7e>
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	1c59      	adds	r1, r3, #1
 8006fbe:	6279      	str	r1, [r7, #36]	; 0x24
 8006fc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	701a      	strb	r2, [r3, #0]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	09db      	lsrs	r3, r3, #7
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fd2:	d8f0      	bhi.n	8006fb6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8006fda:	6a3a      	ldr	r2, [r7, #32]
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	e00b      	b.n	8007008 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	1c59      	adds	r1, r3, #1
 8006ff8:	61f9      	str	r1, [r7, #28]
 8006ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	09db      	lsrs	r3, r3, #7
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	2b7f      	cmp	r3, #127	; 0x7f
 800700c:	d8f0      	bhi.n	8006ff0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	61fa      	str	r2, [r7, #28]
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2280      	movs	r2, #128	; 0x80
 8007024:	4619      	mov	r1, r3
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7fe fec2 	bl	8005db0 <_EncodeStr>
 800702c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800702e:	2216      	movs	r2, #22
 8007030:	68f9      	ldr	r1, [r7, #12]
 8007032:	6938      	ldr	r0, [r7, #16]
 8007034:	f7fe fffe 	bl	8006034 <_SendPacket>
      RECORD_END();
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800703e:	bf00      	nop
 8007040:	3730      	adds	r7, #48	; 0x30
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20014478 	.word	0x20014478
 800704c:	20014480 	.word	0x20014480

08007050 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00f      	beq.n	800707e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800705e:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f2      	bne.n	8007064 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20014478 	.word	0x20014478

0800708c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007092:	f3ef 8311 	mrs	r3, BASEPRI
 8007096:	f04f 0120 	mov.w	r1, #32
 800709a:	f381 8811 	msr	BASEPRI, r1
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	4817      	ldr	r0, [pc, #92]	; (8007100 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80070a2:	f7fe fed5 	bl	8005e50 <_PreparePacket>
 80070a6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	4b14      	ldr	r3, [pc, #80]	; (8007104 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	613b      	str	r3, [r7, #16]
 80070b6:	e00b      	b.n	80070d0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	1c59      	adds	r1, r3, #1
 80070c0:	6179      	str	r1, [r7, #20]
 80070c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	09db      	lsrs	r3, r3, #7
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2b7f      	cmp	r3, #127	; 0x7f
 80070d4:	d8f0      	bhi.n	80070b8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	617a      	str	r2, [r7, #20]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80070e6:	221b      	movs	r2, #27
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	68b8      	ldr	r0, [r7, #8]
 80070ec:	f7fe ffa2 	bl	8006034 <_SendPacket>
  RECORD_END();
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f383 8811 	msr	BASEPRI, r3
}
 80070f6:	bf00      	nop
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20014480 	.word	0x20014480
 8007104:	2001447c 	.word	0x2001447c

08007108 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	; 0x28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007110:	f3ef 8311 	mrs	r3, BASEPRI
 8007114:	f04f 0120 	mov.w	r1, #32
 8007118:	f381 8811 	msr	BASEPRI, r1
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	4827      	ldr	r0, [pc, #156]	; (80071bc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007120:	f7fe fe96 	bl	8005e50 <_PreparePacket>
 8007124:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007126:	2280      	movs	r2, #128	; 0x80
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	6938      	ldr	r0, [r7, #16]
 800712c:	f7fe fe40 	bl	8005db0 <_EncodeStr>
 8007130:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
 8007136:	2301      	movs	r3, #1
 8007138:	623b      	str	r3, [r7, #32]
 800713a:	e00b      	b.n	8007154 <SEGGER_SYSVIEW_Warn+0x4c>
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	b2da      	uxtb	r2, r3
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	1c59      	adds	r1, r3, #1
 8007144:	6279      	str	r1, [r7, #36]	; 0x24
 8007146:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	09db      	lsrs	r3, r3, #7
 8007152:	623b      	str	r3, [r7, #32]
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	2b7f      	cmp	r3, #127	; 0x7f
 8007158:	d8f0      	bhi.n	800713c <SEGGER_SYSVIEW_Warn+0x34>
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	627a      	str	r2, [r7, #36]	; 0x24
 8007160:	6a3a      	ldr	r2, [r7, #32]
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	61fb      	str	r3, [r7, #28]
 800716e:	2300      	movs	r3, #0
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	e00b      	b.n	800718c <SEGGER_SYSVIEW_Warn+0x84>
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	b2da      	uxtb	r2, r3
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	1c59      	adds	r1, r3, #1
 800717c:	61f9      	str	r1, [r7, #28]
 800717e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	09db      	lsrs	r3, r3, #7
 800718a:	61bb      	str	r3, [r7, #24]
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	2b7f      	cmp	r3, #127	; 0x7f
 8007190:	d8f0      	bhi.n	8007174 <SEGGER_SYSVIEW_Warn+0x6c>
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	61fa      	str	r2, [r7, #28]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80071a2:	221a      	movs	r2, #26
 80071a4:	68f9      	ldr	r1, [r7, #12]
 80071a6:	6938      	ldr	r0, [r7, #16]
 80071a8:	f7fe ff44 	bl	8006034 <_SendPacket>
  RECORD_END();
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f383 8811 	msr	BASEPRI, r3
}
 80071b2:	bf00      	nop
 80071b4:	3728      	adds	r7, #40	; 0x28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20014480 	.word	0x20014480

080071c0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80071c4:	4b13      	ldr	r3, [pc, #76]	; (8007214 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80071c6:	7e1b      	ldrb	r3, [r3, #24]
 80071c8:	4619      	mov	r1, r3
 80071ca:	4a13      	ldr	r2, [pc, #76]	; (8007218 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80071cc:	460b      	mov	r3, r1
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	440b      	add	r3, r1
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	4413      	add	r3, r2
 80071d6:	336c      	adds	r3, #108	; 0x6c
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80071dc:	7e1b      	ldrb	r3, [r3, #24]
 80071de:	4618      	mov	r0, r3
 80071e0:	490d      	ldr	r1, [pc, #52]	; (8007218 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80071e2:	4603      	mov	r3, r0
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	4403      	add	r3, r0
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	440b      	add	r3, r1
 80071ec:	3370      	adds	r3, #112	; 0x70
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d00b      	beq.n	800720c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80071f4:	4b07      	ldr	r3, [pc, #28]	; (8007214 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80071f6:	789b      	ldrb	r3, [r3, #2]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d107      	bne.n	800720c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80071fe:	2201      	movs	r2, #1
 8007200:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007202:	f7fe fe31 	bl	8005e68 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007206:	4b03      	ldr	r3, [pc, #12]	; (8007214 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007208:	2200      	movs	r2, #0
 800720a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800720c:	4b01      	ldr	r3, [pc, #4]	; (8007214 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800720e:	781b      	ldrb	r3, [r3, #0]
}
 8007210:	4618      	mov	r0, r3
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20014450 	.word	0x20014450
 8007218:	200147e0 	.word	0x200147e0

0800721c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	2000      	movs	r0, #0
 8007230:	f7fe fcc8 	bl	8005bc4 <SEGGER_RTT_Write>
  return len;
 8007234:	683b      	ldr	r3, [r7, #0]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <_StartSysView>:
	U8         NumBytesHelloRcvd;
	U8         NumBytesHelloSent;
	int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
	int r;
	r = SEGGER_SYSVIEW_IsStarted();
 8007244:	f7ff ffbc 	bl	80071c0 <SEGGER_SYSVIEW_IsStarted>
 8007248:	6078      	str	r0, [r7, #4]
	if (r == 0) SEGGER_SYSVIEW_Start();
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <_StartSysView+0x16>
 8007250:	f7ff f9e8 	bl	8006624 <SEGGER_SYSVIEW_Start>
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	71fb      	strb	r3, [r7, #7]
	if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8007266:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <_cbOnUARTRx+0x3c>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b03      	cmp	r3, #3
 800726c:	d806      	bhi.n	800727c <_cbOnUARTRx+0x20>
		_SVInfo.NumBytesHelloRcvd++;
 800726e:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <_cbOnUARTRx+0x3c>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	3301      	adds	r3, #1
 8007274:	b2da      	uxtb	r2, r3
 8007276:	4b08      	ldr	r3, [pc, #32]	; (8007298 <_cbOnUARTRx+0x3c>)
 8007278:	701a      	strb	r2, [r3, #0]
		goto Done;
 800727a:	e009      	b.n	8007290 <_cbOnUARTRx+0x34>
	}
	_StartSysView();
 800727c:	f7ff ffdf 	bl	800723e <_StartSysView>
	SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <_cbOnUARTRx+0x3c>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	4618      	mov	r0, r3
 8007286:	1dfb      	adds	r3, r7, #7
 8007288:	2201      	movs	r2, #1
 800728a:	4619      	mov	r1, r3
 800728c:	f7fe fc74 	bl	8005b78 <SEGGER_RTT_WriteDownBuffer>
Done:
	return;
 8007290:	bf00      	nop
}
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	20000030 	.word	0x20000030

0800729c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
	int r;

	if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80072a4:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <_cbOnUARTTx+0x5c>)
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d80f      	bhi.n	80072cc <_cbOnUARTTx+0x30>
		*pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80072ac:	4b12      	ldr	r3, [pc, #72]	; (80072f8 <_cbOnUARTTx+0x5c>)
 80072ae:	785b      	ldrb	r3, [r3, #1]
 80072b0:	461a      	mov	r2, r3
 80072b2:	4b12      	ldr	r3, [pc, #72]	; (80072fc <_cbOnUARTTx+0x60>)
 80072b4:	5c9a      	ldrb	r2, [r3, r2]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	701a      	strb	r2, [r3, #0]
		_SVInfo.NumBytesHelloSent++;
 80072ba:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <_cbOnUARTTx+0x5c>)
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	3301      	adds	r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	4b0d      	ldr	r3, [pc, #52]	; (80072f8 <_cbOnUARTTx+0x5c>)
 80072c4:	705a      	strb	r2, [r3, #1]
		r = 1;
 80072c6:	2301      	movs	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
		goto Done;
 80072ca:	e00f      	b.n	80072ec <_cbOnUARTTx+0x50>
	}
	r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <_cbOnUARTTx+0x5c>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe faa3 	bl	8005820 <SEGGER_RTT_ReadUpBufferNoLock>
 80072da:	4603      	mov	r3, r0
 80072dc:	60fb      	str	r3, [r7, #12]
	if (r < 0) {  // Failed to read from up buffer?
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	da02      	bge.n	80072ea <_cbOnUARTTx+0x4e>
		r = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	e000      	b.n	80072ec <_cbOnUARTTx+0x50>
	}
Done:
 80072ea:	bf00      	nop
	return r;
 80072ec:	68fb      	ldr	r3, [r7, #12]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000030 	.word	0x20000030
 80072fc:	0800bda0 	.word	0x0800bda0

08007300 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8007308:	4a04      	ldr	r2, [pc, #16]	; (800731c <SEGGER_UART_init+0x1c>)
 800730a:	4905      	ldr	r1, [pc, #20]	; (8007320 <SEGGER_UART_init+0x20>)
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f863 	bl	80073d8 <HIF_UART_Init>
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	0800725d 	.word	0x0800725d
 8007320:	0800729d 	.word	0x0800729d

08007324 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
//void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
	int UsartStatus;
	uint8_t v;
	int r;

	UsartStatus = USART_SR;                              // Examine status register
 800732a:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <USART2_IRQHandler+0x80>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]
	if(UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	d011      	beq.n	800735e <USART2_IRQHandler+0x3a>
		v = USART_DR;                                      // Read data
 800733a:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <USART2_IRQHandler+0x84>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	71fb      	strb	r3, [r7, #7]
		if((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f003 030b 	and.w	r3, r3, #11
 8007348:	2b00      	cmp	r3, #0
 800734a:	d108      	bne.n	800735e <USART2_IRQHandler+0x3a>
			(void)v;                                         // Avoid warning in BTL
			if(_cbOnRx) {
 800734c:	4b17      	ldr	r3, [pc, #92]	; (80073ac <USART2_IRQHandler+0x88>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d004      	beq.n	800735e <USART2_IRQHandler+0x3a>
				_cbOnRx(v);
 8007354:	4b15      	ldr	r3, [pc, #84]	; (80073ac <USART2_IRQHandler+0x88>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	79fa      	ldrb	r2, [r7, #7]
 800735a:	4610      	mov	r0, r2
 800735c:	4798      	blx	r3
			}
		}
	}
	if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01a      	beq.n	800739e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 8007368:	4b11      	ldr	r3, [pc, #68]	; (80073b0 <USART2_IRQHandler+0x8c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d015      	beq.n	800739c <USART2_IRQHandler+0x78>
		r = _cbOnTx(&v);
 8007370:	4b0f      	ldr	r3, [pc, #60]	; (80073b0 <USART2_IRQHandler+0x8c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	1dfa      	adds	r2, r7, #7
 8007376:	4610      	mov	r0, r2
 8007378:	4798      	blx	r3
 800737a:	60b8      	str	r0, [r7, #8]
		if (r == 0) {                          // No more characters to send ?
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <USART2_IRQHandler+0x6c>
			USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8007382:	4b0c      	ldr	r3, [pc, #48]	; (80073b4 <USART2_IRQHandler+0x90>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a0b      	ldr	r2, [pc, #44]	; (80073b4 <USART2_IRQHandler+0x90>)
 8007388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	e006      	b.n	800739e <USART2_IRQHandler+0x7a>
		} else {
			USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8007390:	4b04      	ldr	r3, [pc, #16]	; (80073a4 <USART2_IRQHandler+0x80>)
 8007392:	681b      	ldr	r3, [r3, #0]
			USART_DR = v;  // Start transmission by writing to data register
 8007394:	79fa      	ldrb	r2, [r7, #7]
 8007396:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <USART2_IRQHandler+0x84>)
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	e000      	b.n	800739e <USART2_IRQHandler+0x7a>
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 800739c:	bf00      	nop
		}
	}
}
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40004400 	.word	0x40004400
 80073a8:	40004404 	.word	0x40004404
 80073ac:	20014564 	.word	0x20014564
 80073b0:	20014568 	.word	0x20014568
 80073b4:	4000440c 	.word	0x4000440c

080073b8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
	USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a04      	ldr	r2, [pc, #16]	; (80073d4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80073c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c6:	6013      	str	r3, [r2, #0]
}
 80073c8:	bf00      	nop
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	4000440c 	.word	0x4000440c

080073d8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
	uint32_t v;
	uint32_t Div;
	//
	// Configure USART RX/TX pins for alternate function AF7
	//
	RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80073e4:	4b2f      	ldr	r3, [pc, #188]	; (80074a4 <HIF_UART_Init+0xcc>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2e      	ldr	r2, [pc, #184]	; (80074a4 <HIF_UART_Init+0xcc>)
 80073ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ee:	6013      	str	r3, [r2, #0]
	RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80073f0:	4b2d      	ldr	r3, [pc, #180]	; (80074a8 <HIF_UART_Init+0xd0>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a2c      	ldr	r2, [pc, #176]	; (80074a8 <HIF_UART_Init+0xd0>)
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6013      	str	r3, [r2, #0]
	v  = GPIO_AFRL;
 80073fc:	4b2b      	ldr	r3, [pc, #172]	; (80074ac <HIF_UART_Init+0xd4>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	613b      	str	r3, [r7, #16]
	v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007408:	613b      	str	r3, [r7, #16]
	v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8007410:	613b      	str	r3, [r7, #16]
	GPIO_AFRL = v;
 8007412:	4a26      	ldr	r2, [pc, #152]	; (80074ac <HIF_UART_Init+0xd4>)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6013      	str	r3, [r2, #0]
	//
	// Configure USART RX/TX pins for alternate function usage
	//
	v  = GPIO_MODER;
 8007418:	4b25      	ldr	r3, [pc, #148]	; (80074b0 <HIF_UART_Init+0xd8>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	613b      	str	r3, [r7, #16]
	v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007424:	613b      	str	r3, [r7, #16]
	v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800742c:	613b      	str	r3, [r7, #16]
	GPIO_MODER = v;
 800742e:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <HIF_UART_Init+0xd8>)
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6013      	str	r3, [r2, #0]
	//
	// Initialize USART
	//
	USART_CR1 = 0
 8007434:	4b1f      	ldr	r3, [pc, #124]	; (80074b4 <HIF_UART_Init+0xdc>)
 8007436:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800743a:	601a      	str	r2, [r3, #0]
			| (0 << 10)                         // PCE    = 0; No parity control
			| (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
			| (1 <<  3)                         // TE     = 1; Transmitter enabled
			| (1 <<  2)                         // RE     = 1; Receiver enabled
			;
	USART_CR2 = 0
 800743c:	4b1e      	ldr	r3, [pc, #120]	; (80074b8 <HIF_UART_Init+0xe0>)
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
			| (0 << 12)                         // STOP = 00b; 1 stop bit
			;
	USART_CR3 = 0
 8007442:	4b1e      	ldr	r3, [pc, #120]	; (80074bc <HIF_UART_Init+0xe4>)
 8007444:	2280      	movs	r2, #128	; 0x80
 8007446:	601a      	str	r2, [r3, #0]
			| (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
			;
	//
	// Set baudrate
	//
	Div = Baudrate * 8;                       // We use 8x oversampling.
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	617b      	str	r3, [r7, #20]
	Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800744e:	4a1c      	ldr	r2, [pc, #112]	; (80074c0 <HIF_UART_Init+0xe8>)
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	fbb2 f3f3 	udiv	r3, r2, r3
 8007456:	3301      	adds	r3, #1
 8007458:	617b      	str	r3, [r7, #20]
	Div = Div / 2;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	085b      	lsrs	r3, r3, #1
 800745e:	617b      	str	r3, [r7, #20]
	if (Div > 0xFFF) {
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007466:	d302      	bcc.n	800746e <HIF_UART_Init+0x96>
		Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8007468:	f640 73ff 	movw	r3, #4095	; 0xfff
 800746c:	617b      	str	r3, [r7, #20]
	}
	if (Div >= 1) {
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <HIF_UART_Init+0xa6>
		USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	4a12      	ldr	r2, [pc, #72]	; (80074c4 <HIF_UART_Init+0xec>)
 800747a:	b29b      	uxth	r3, r3
 800747c:	6013      	str	r3, [r2, #0]
	}
	//
	// Setup callbacks which are called by ISR handler and enable interrupt in NVIC
	//
	_cbOnRx = cbOnRx;
 800747e:	4a12      	ldr	r2, [pc, #72]	; (80074c8 <HIF_UART_Init+0xf0>)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6013      	str	r3, [r2, #0]
	_cbOnTx = cbOnTx;
 8007484:	4a11      	ldr	r2, [pc, #68]	; (80074cc <HIF_UART_Init+0xf4>)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6013      	str	r3, [r2, #0]
	USART_IRQPriorityConfig(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800748a:	2106      	movs	r1, #6
 800748c:	2026      	movs	r0, #38	; 0x26
 800748e:	f7fd ff4b 	bl	8005328 <USART_IRQPriorityConfig>
	USART_IRQInterruptConfig(USART_IRQn, ENABLE);
 8007492:	2101      	movs	r1, #1
 8007494:	2026      	movs	r0, #38	; 0x26
 8007496:	f7fd fec1 	bl	800521c <USART_IRQInterruptConfig>
}
 800749a:	bf00      	nop
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	40023840 	.word	0x40023840
 80074a8:	40023830 	.word	0x40023830
 80074ac:	40020020 	.word	0x40020020
 80074b0:	40020000 	.word	0x40020000
 80074b4:	4000440c 	.word	0x4000440c
 80074b8:	40004410 	.word	0x40004410
 80074bc:	40004414 	.word	0x40004414
 80074c0:	0501bd00 	.word	0x0501bd00
 80074c4:	40004408 	.word	0x40004408
 80074c8:	20014564 	.word	0x20014564
 80074cc:	20014568 	.word	0x20014568

080074d0 <lcd_puts_xy>:
LCD_Data_Screen1_t screen1_data;
LCD_Data_Screen2_t screen2_data;
LCD_Data_Screen3_t screen3_data;
LCD_Data_Screen4_t screen4_data, screen4_data_config;

void lcd_puts_xy(unsigned char x, unsigned char y, char* c, LCD5110_Pixel_t color, LCD5110_FontSize_t font) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	603a      	str	r2, [r7, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	4603      	mov	r3, r0
 80074dc:	71fb      	strb	r3, [r7, #7]
 80074de:	460b      	mov	r3, r1
 80074e0:	71bb      	strb	r3, [r7, #6]
 80074e2:	4613      	mov	r3, r2
 80074e4:	717b      	strb	r3, [r7, #5]
	LCD5110_GotoXY(x, y);
 80074e6:	79ba      	ldrb	r2, [r7, #6]
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	4611      	mov	r1, r2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fa fa79 	bl	80019e4 <LCD5110_GotoXY>
	LCD5110_Puts(c, color, font);
 80074f2:	7c3a      	ldrb	r2, [r7, #16]
 80074f4:	797b      	ldrb	r3, [r7, #5]
 80074f6:	4619      	mov	r1, r3
 80074f8:	6838      	ldr	r0, [r7, #0]
 80074fa:	f7fa fb35 	bl	8001b68 <LCD5110_Puts>
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <range_scale>:

void range_scale(float value, char* value_buf, char* range) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
	if(value < 1000) {
 8007514:	edd7 7a03 	vldr	s15, [r7, #12]
 8007518:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007608 <range_scale+0x100>
 800751c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007524:	d505      	bpl.n	8007532 <range_scale+0x2a>
		sprintf(range, "%s", "m");
 8007526:	4a39      	ldr	r2, [pc, #228]	; (800760c <range_scale+0x104>)
 8007528:	4939      	ldr	r1, [pc, #228]	; (8007610 <range_scale+0x108>)
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 ff4a 	bl	80093c4 <siprintf>
 8007530:	e02c      	b.n	800758c <range_scale+0x84>
	} else if(value < 1000*1000) {
 8007532:	edd7 7a03 	vldr	s15, [r7, #12]
 8007536:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8007614 <range_scale+0x10c>
 800753a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800753e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007542:	d50d      	bpl.n	8007560 <range_scale+0x58>
		sprintf(range, "%s", " ");
 8007544:	4a34      	ldr	r2, [pc, #208]	; (8007618 <range_scale+0x110>)
 8007546:	4932      	ldr	r1, [pc, #200]	; (8007610 <range_scale+0x108>)
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 ff3b 	bl	80093c4 <siprintf>
		value /= 1000;
 800754e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007552:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007608 <range_scale+0x100>
 8007556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800755a:	edc7 7a03 	vstr	s15, [r7, #12]
 800755e:	e015      	b.n	800758c <range_scale+0x84>
	} else if(value < 1000*1000*1000) {
 8007560:	edd7 7a03 	vldr	s15, [r7, #12]
 8007564:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800761c <range_scale+0x114>
 8007568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800756c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007570:	d50c      	bpl.n	800758c <range_scale+0x84>
		sprintf(range, "%s", "k");
 8007572:	4a2b      	ldr	r2, [pc, #172]	; (8007620 <range_scale+0x118>)
 8007574:	4926      	ldr	r1, [pc, #152]	; (8007610 <range_scale+0x108>)
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 ff24 	bl	80093c4 <siprintf>
		value /= 1000*1000;
 800757c:	ed97 7a03 	vldr	s14, [r7, #12]
 8007580:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007614 <range_scale+0x10c>
 8007584:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007588:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	if(value < 10)
 800758c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007590:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759c:	d509      	bpl.n	80075b2 <range_scale+0xaa>
		sprintf(value_buf, "%1.3f", value);
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7f9 f832 	bl	8000608 <__aeabi_f2d>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	491e      	ldr	r1, [pc, #120]	; (8007624 <range_scale+0x11c>)
 80075aa:	68b8      	ldr	r0, [r7, #8]
 80075ac:	f001 ff0a 	bl	80093c4 <siprintf>
	else if(value < 100)
		sprintf(value_buf, "%2.2f", value);
	else if(value < 1000)
		sprintf(value_buf, "%3.1f", value);
}
 80075b0:	e025      	b.n	80075fe <range_scale+0xf6>
	else if(value < 100)
 80075b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80075b6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007628 <range_scale+0x120>
 80075ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c2:	d509      	bpl.n	80075d8 <range_scale+0xd0>
		sprintf(value_buf, "%2.2f", value);
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7f9 f81f 	bl	8000608 <__aeabi_f2d>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4917      	ldr	r1, [pc, #92]	; (800762c <range_scale+0x124>)
 80075d0:	68b8      	ldr	r0, [r7, #8]
 80075d2:	f001 fef7 	bl	80093c4 <siprintf>
}
 80075d6:	e012      	b.n	80075fe <range_scale+0xf6>
	else if(value < 1000)
 80075d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80075dc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007608 <range_scale+0x100>
 80075e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e8:	d400      	bmi.n	80075ec <range_scale+0xe4>
}
 80075ea:	e008      	b.n	80075fe <range_scale+0xf6>
		sprintf(value_buf, "%3.1f", value);
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f7f9 f80b 	bl	8000608 <__aeabi_f2d>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	490e      	ldr	r1, [pc, #56]	; (8007630 <range_scale+0x128>)
 80075f8:	68b8      	ldr	r0, [r7, #8]
 80075fa:	f001 fee3 	bl	80093c4 <siprintf>
}
 80075fe:	bf00      	nop
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	447a0000 	.word	0x447a0000
 800760c:	0800b8c4 	.word	0x0800b8c4
 8007610:	0800b8c8 	.word	0x0800b8c8
 8007614:	49742400 	.word	0x49742400
 8007618:	0800b8cc 	.word	0x0800b8cc
 800761c:	4e6e6b28 	.word	0x4e6e6b28
 8007620:	0800b8d0 	.word	0x0800b8d0
 8007624:	0800b8d4 	.word	0x0800b8d4
 8007628:	42c80000 	.word	0x42c80000
 800762c:	0800b8dc 	.word	0x0800b8dc
 8007630:	0800b8e4 	.word	0x0800b8e4

08007634 <lcd_screen_1_refresh>:

void lcd_screen_1_refresh() {
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 800763a:	f7fa f903 	bl	8001844 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "Vrms", 1, 1);
 800763e:	2301      	movs	r3, #1
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	2301      	movs	r3, #1
 8007644:	4a4f      	ldr	r2, [pc, #316]	; (8007784 <lcd_screen_1_refresh+0x150>)
 8007646:	2100      	movs	r1, #0
 8007648:	2000      	movs	r0, #0
 800764a:	f7ff ff41 	bl	80074d0 <lcd_puts_xy>
	range_scale(screen1_data.Vrms, val_buf, range_buf);
 800764e:	4b4e      	ldr	r3, [pc, #312]	; (8007788 <lcd_screen_1_refresh+0x154>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	463a      	mov	r2, r7
 8007654:	1d39      	adds	r1, r7, #4
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff ff56 	bl	8007508 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 800765c:	1d3a      	adds	r2, r7, #4
 800765e:	2301      	movs	r3, #1
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	2301      	movs	r3, #1
 8007664:	2100      	movs	r1, #0
 8007666:	201c      	movs	r0, #28
 8007668:	f7ff ff32 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 800766c:	463a      	mov	r2, r7
 800766e:	2301      	movs	r3, #1
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	2301      	movs	r3, #1
 8007674:	2100      	movs	r1, #0
 8007676:	203c      	movs	r0, #60	; 0x3c
 8007678:	f7ff ff2a 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "V", 1, 1);
 800767c:	2301      	movs	r3, #1
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	2301      	movs	r3, #1
 8007682:	4a42      	ldr	r2, [pc, #264]	; (800778c <lcd_screen_1_refresh+0x158>)
 8007684:	2100      	movs	r1, #0
 8007686:	2042      	movs	r0, #66	; 0x42
 8007688:	f7ff ff22 	bl	80074d0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Vp", 1, 1);
 800768c:	2301      	movs	r3, #1
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	2301      	movs	r3, #1
 8007692:	4a3f      	ldr	r2, [pc, #252]	; (8007790 <lcd_screen_1_refresh+0x15c>)
 8007694:	210c      	movs	r1, #12
 8007696:	2000      	movs	r0, #0
 8007698:	f7ff ff1a 	bl	80074d0 <lcd_puts_xy>
	range_scale(screen1_data.Vpeak, val_buf, range_buf);
 800769c:	4b3a      	ldr	r3, [pc, #232]	; (8007788 <lcd_screen_1_refresh+0x154>)
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	463a      	mov	r2, r7
 80076a2:	1d39      	adds	r1, r7, #4
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7ff ff2f 	bl	8007508 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 80076aa:	1d3a      	adds	r2, r7, #4
 80076ac:	2301      	movs	r3, #1
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	2301      	movs	r3, #1
 80076b2:	210c      	movs	r1, #12
 80076b4:	201c      	movs	r0, #28
 80076b6:	f7ff ff0b 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 80076ba:	463a      	mov	r2, r7
 80076bc:	2301      	movs	r3, #1
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	2301      	movs	r3, #1
 80076c2:	210c      	movs	r1, #12
 80076c4:	203c      	movs	r0, #60	; 0x3c
 80076c6:	f7ff ff03 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1, 1);
 80076ca:	2301      	movs	r3, #1
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	2301      	movs	r3, #1
 80076d0:	4a2e      	ldr	r2, [pc, #184]	; (800778c <lcd_screen_1_refresh+0x158>)
 80076d2:	210c      	movs	r1, #12
 80076d4:	2042      	movs	r0, #66	; 0x42
 80076d6:	f7ff fefb 	bl	80074d0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_2, "Irms", 1, 1);
 80076da:	2301      	movs	r3, #1
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	2301      	movs	r3, #1
 80076e0:	4a2c      	ldr	r2, [pc, #176]	; (8007794 <lcd_screen_1_refresh+0x160>)
 80076e2:	211d      	movs	r1, #29
 80076e4:	2000      	movs	r0, #0
 80076e6:	f7ff fef3 	bl	80074d0 <lcd_puts_xy>
	range_scale(screen1_data.Irms, val_buf, range_buf);
 80076ea:	4b27      	ldr	r3, [pc, #156]	; (8007788 <lcd_screen_1_refresh+0x154>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	463a      	mov	r2, r7
 80076f0:	1d39      	adds	r1, r7, #4
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff ff08 	bl	8007508 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_2, val_buf, 1, 1);
 80076f8:	1d3a      	adds	r2, r7, #4
 80076fa:	2301      	movs	r3, #1
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	2301      	movs	r3, #1
 8007700:	211d      	movs	r1, #29
 8007702:	201c      	movs	r0, #28
 8007704:	f7ff fee4 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_2, range_buf, 1, 1);
 8007708:	463a      	mov	r2, r7
 800770a:	2301      	movs	r3, #1
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	2301      	movs	r3, #1
 8007710:	211d      	movs	r1, #29
 8007712:	203c      	movs	r0, #60	; 0x3c
 8007714:	f7ff fedc 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_2, "A", 1, 1);
 8007718:	2301      	movs	r3, #1
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	2301      	movs	r3, #1
 800771e:	4a1e      	ldr	r2, [pc, #120]	; (8007798 <lcd_screen_1_refresh+0x164>)
 8007720:	211d      	movs	r1, #29
 8007722:	2042      	movs	r0, #66	; 0x42
 8007724:	f7ff fed4 	bl	80074d0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "Ip", 1, 1);
 8007728:	2301      	movs	r3, #1
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	2301      	movs	r3, #1
 800772e:	4a1b      	ldr	r2, [pc, #108]	; (800779c <lcd_screen_1_refresh+0x168>)
 8007730:	2129      	movs	r1, #41	; 0x29
 8007732:	2000      	movs	r0, #0
 8007734:	f7ff fecc 	bl	80074d0 <lcd_puts_xy>
	range_scale(screen1_data.Ipeak, val_buf, range_buf);
 8007738:	4b13      	ldr	r3, [pc, #76]	; (8007788 <lcd_screen_1_refresh+0x154>)
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	463a      	mov	r2, r7
 800773e:	1d39      	adds	r1, r7, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff fee1 	bl	8007508 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 8007746:	1d3a      	adds	r2, r7, #4
 8007748:	2301      	movs	r3, #1
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	2301      	movs	r3, #1
 800774e:	2129      	movs	r1, #41	; 0x29
 8007750:	201c      	movs	r0, #28
 8007752:	f7ff febd 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1, 1);
 8007756:	463a      	mov	r2, r7
 8007758:	2301      	movs	r3, #1
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	2301      	movs	r3, #1
 800775e:	2129      	movs	r1, #41	; 0x29
 8007760:	203c      	movs	r0, #60	; 0x3c
 8007762:	f7ff feb5 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "A", 1, 1);
 8007766:	2301      	movs	r3, #1
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	2301      	movs	r3, #1
 800776c:	4a0a      	ldr	r2, [pc, #40]	; (8007798 <lcd_screen_1_refresh+0x164>)
 800776e:	2129      	movs	r1, #41	; 0x29
 8007770:	2042      	movs	r0, #66	; 0x42
 8007772:	f7ff fead 	bl	80074d0 <lcd_puts_xy>

	LCD5110_Refresh();
 8007776:	f7fa f897 	bl	80018a8 <LCD5110_Refresh>
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	0800b8ec 	.word	0x0800b8ec
 8007788:	200148ac 	.word	0x200148ac
 800778c:	0800b8f4 	.word	0x0800b8f4
 8007790:	0800b8f8 	.word	0x0800b8f8
 8007794:	0800b8fc 	.word	0x0800b8fc
 8007798:	0800b904 	.word	0x0800b904
 800779c:	0800b908 	.word	0x0800b908

080077a0 <lcd_screen_2_refresh>:

void lcd_screen_2_refresh() {
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 80077a6:	f7fa f84d 	bl	8001844 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "P", 1, 1);
 80077aa:	2301      	movs	r3, #1
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	2301      	movs	r3, #1
 80077b0:	4a49      	ldr	r2, [pc, #292]	; (80078d8 <lcd_screen_2_refresh+0x138>)
 80077b2:	2100      	movs	r1, #0
 80077b4:	2000      	movs	r0, #0
 80077b6:	f7ff fe8b 	bl	80074d0 <lcd_puts_xy>
	range_scale(screen2_data.ActivePower, val_buf, range_buf);
 80077ba:	4b48      	ldr	r3, [pc, #288]	; (80078dc <lcd_screen_2_refresh+0x13c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	463a      	mov	r2, r7
 80077c0:	1d39      	adds	r1, r7, #4
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff fea0 	bl	8007508 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 80077c8:	1d3a      	adds	r2, r7, #4
 80077ca:	2301      	movs	r3, #1
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	2301      	movs	r3, #1
 80077d0:	2100      	movs	r1, #0
 80077d2:	201c      	movs	r0, #28
 80077d4:	f7ff fe7c 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 80077d8:	463a      	mov	r2, r7
 80077da:	2301      	movs	r3, #1
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	2301      	movs	r3, #1
 80077e0:	2100      	movs	r1, #0
 80077e2:	203c      	movs	r0, #60	; 0x3c
 80077e4:	f7ff fe74 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "W", 1, 1);
 80077e8:	2301      	movs	r3, #1
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	2301      	movs	r3, #1
 80077ee:	4a3c      	ldr	r2, [pc, #240]	; (80078e0 <lcd_screen_2_refresh+0x140>)
 80077f0:	2100      	movs	r1, #0
 80077f2:	2042      	movs	r0, #66	; 0x42
 80077f4:	f7ff fe6c 	bl	80074d0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Q", 1, 1);
 80077f8:	2301      	movs	r3, #1
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	2301      	movs	r3, #1
 80077fe:	4a39      	ldr	r2, [pc, #228]	; (80078e4 <lcd_screen_2_refresh+0x144>)
 8007800:	210c      	movs	r1, #12
 8007802:	2000      	movs	r0, #0
 8007804:	f7ff fe64 	bl	80074d0 <lcd_puts_xy>
	range_scale(screen2_data.ReactivePower, val_buf, range_buf);
 8007808:	4b34      	ldr	r3, [pc, #208]	; (80078dc <lcd_screen_2_refresh+0x13c>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	463a      	mov	r2, r7
 800780e:	1d39      	adds	r1, r7, #4
 8007810:	4618      	mov	r0, r3
 8007812:	f7ff fe79 	bl	8007508 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 8007816:	1d3a      	adds	r2, r7, #4
 8007818:	2301      	movs	r3, #1
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	2301      	movs	r3, #1
 800781e:	210c      	movs	r1, #12
 8007820:	201c      	movs	r0, #28
 8007822:	f7ff fe55 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8007826:	463a      	mov	r2, r7
 8007828:	2301      	movs	r3, #1
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	2301      	movs	r3, #1
 800782e:	210c      	movs	r1, #12
 8007830:	203c      	movs	r0, #60	; 0x3c
 8007832:	f7ff fe4d 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAR", 1, 1);
 8007836:	2301      	movs	r3, #1
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	2301      	movs	r3, #1
 800783c:	4a2a      	ldr	r2, [pc, #168]	; (80078e8 <lcd_screen_2_refresh+0x148>)
 800783e:	210c      	movs	r1, #12
 8007840:	2042      	movs	r0, #66	; 0x42
 8007842:	f7ff fe45 	bl	80074d0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_1, "S", 1, 1);
 8007846:	2301      	movs	r3, #1
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	2301      	movs	r3, #1
 800784c:	4a27      	ldr	r2, [pc, #156]	; (80078ec <lcd_screen_2_refresh+0x14c>)
 800784e:	2118      	movs	r1, #24
 8007850:	2000      	movs	r0, #0
 8007852:	f7ff fe3d 	bl	80074d0 <lcd_puts_xy>
	range_scale(screen2_data.ApparantPower, val_buf, range_buf);
 8007856:	4b21      	ldr	r3, [pc, #132]	; (80078dc <lcd_screen_2_refresh+0x13c>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	463a      	mov	r2, r7
 800785c:	1d39      	adds	r1, r7, #4
 800785e:	4618      	mov	r0, r3
 8007860:	f7ff fe52 	bl	8007508 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1, 1);
 8007864:	1d3a      	adds	r2, r7, #4
 8007866:	2301      	movs	r3, #1
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	2301      	movs	r3, #1
 800786c:	2118      	movs	r1, #24
 800786e:	201c      	movs	r0, #28
 8007870:	f7ff fe2e 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1, 1);
 8007874:	463a      	mov	r2, r7
 8007876:	2301      	movs	r3, #1
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	2301      	movs	r3, #1
 800787c:	2118      	movs	r1, #24
 800787e:	203c      	movs	r0, #60	; 0x3c
 8007880:	f7ff fe26 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "VA", 1, 1);
 8007884:	2301      	movs	r3, #1
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	2301      	movs	r3, #1
 800788a:	4a19      	ldr	r2, [pc, #100]	; (80078f0 <lcd_screen_2_refresh+0x150>)
 800788c:	2118      	movs	r1, #24
 800788e:	2042      	movs	r0, #66	; 0x42
 8007890:	f7ff fe1e 	bl	80074d0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "PF", 1, 1);
 8007894:	2301      	movs	r3, #1
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	2301      	movs	r3, #1
 800789a:	4a16      	ldr	r2, [pc, #88]	; (80078f4 <lcd_screen_2_refresh+0x154>)
 800789c:	2129      	movs	r1, #41	; 0x29
 800789e:	2000      	movs	r0, #0
 80078a0:	f7ff fe16 	bl	80074d0 <lcd_puts_xy>
	sprintf(val_buf, "%.2f", screen2_data.PowerFactor);
 80078a4:	4b0d      	ldr	r3, [pc, #52]	; (80078dc <lcd_screen_2_refresh+0x13c>)
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7f8 fead 	bl	8000608 <__aeabi_f2d>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	1d38      	adds	r0, r7, #4
 80078b4:	4910      	ldr	r1, [pc, #64]	; (80078f8 <lcd_screen_2_refresh+0x158>)
 80078b6:	f001 fd85 	bl	80093c4 <siprintf>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 80078ba:	1d3a      	adds	r2, r7, #4
 80078bc:	2301      	movs	r3, #1
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	2301      	movs	r3, #1
 80078c2:	2129      	movs	r1, #41	; 0x29
 80078c4:	201c      	movs	r0, #28
 80078c6:	f7ff fe03 	bl	80074d0 <lcd_puts_xy>

	LCD5110_Refresh();
 80078ca:	f7f9 ffed 	bl	80018a8 <LCD5110_Refresh>
}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	0800b90c 	.word	0x0800b90c
 80078dc:	2001488c 	.word	0x2001488c
 80078e0:	0800b910 	.word	0x0800b910
 80078e4:	0800b914 	.word	0x0800b914
 80078e8:	0800b918 	.word	0x0800b918
 80078ec:	0800b91c 	.word	0x0800b91c
 80078f0:	0800b920 	.word	0x0800b920
 80078f4:	0800b924 	.word	0x0800b924
 80078f8:	0800b928 	.word	0x0800b928

080078fc <lcd_screen_3_refresh>:

void lcd_screen_3_refresh() {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08c      	sub	sp, #48	; 0x30
 8007900:	af02      	add	r7, sp, #8
	LCD5110_Clear();
 8007902:	f7f9 ff9f 	bl	8001844 <LCD5110_Clear>

	char val_buf[10];
	char range_buf[2];

	lcd_puts_xy(0, ROW_LINE_1, "P.t", 1, 1);
 8007906:	2301      	movs	r3, #1
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	2301      	movs	r3, #1
 800790c:	4a4d      	ldr	r2, [pc, #308]	; (8007a44 <lcd_screen_3_refresh+0x148>)
 800790e:	2100      	movs	r1, #0
 8007910:	2000      	movs	r0, #0
 8007912:	f7ff fddd 	bl	80074d0 <lcd_puts_xy>
	range_scale(screen3_data.ActiveEnergy, val_buf, range_buf);
 8007916:	4b4c      	ldr	r3, [pc, #304]	; (8007a48 <lcd_screen_3_refresh+0x14c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f107 0218 	add.w	r2, r7, #24
 800791e:	f107 011c 	add.w	r1, r7, #28
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff fdf0 	bl	8007508 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8007928:	f107 021c 	add.w	r2, r7, #28
 800792c:	2301      	movs	r3, #1
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	2301      	movs	r3, #1
 8007932:	2100      	movs	r1, #0
 8007934:	201c      	movs	r0, #28
 8007936:	f7ff fdcb 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 800793a:	f107 0218 	add.w	r2, r7, #24
 800793e:	2301      	movs	r3, #1
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	2301      	movs	r3, #1
 8007944:	2100      	movs	r1, #0
 8007946:	203c      	movs	r0, #60	; 0x3c
 8007948:	f7ff fdc2 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "Wh", 1, 1);
 800794c:	2301      	movs	r3, #1
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	2301      	movs	r3, #1
 8007952:	4a3e      	ldr	r2, [pc, #248]	; (8007a4c <lcd_screen_3_refresh+0x150>)
 8007954:	2100      	movs	r1, #0
 8007956:	2042      	movs	r0, #66	; 0x42
 8007958:	f7ff fdba 	bl	80074d0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "S.t", 1, 1);
 800795c:	2301      	movs	r3, #1
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	2301      	movs	r3, #1
 8007962:	4a3b      	ldr	r2, [pc, #236]	; (8007a50 <lcd_screen_3_refresh+0x154>)
 8007964:	210c      	movs	r1, #12
 8007966:	2000      	movs	r0, #0
 8007968:	f7ff fdb2 	bl	80074d0 <lcd_puts_xy>
	range_scale(screen3_data.ApparantEnergy, val_buf, range_buf);
 800796c:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <lcd_screen_3_refresh+0x14c>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f107 0218 	add.w	r2, r7, #24
 8007974:	f107 011c 	add.w	r1, r7, #28
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fdc5 	bl	8007508 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 800797e:	f107 021c 	add.w	r2, r7, #28
 8007982:	2301      	movs	r3, #1
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	2301      	movs	r3, #1
 8007988:	210c      	movs	r1, #12
 800798a:	201c      	movs	r0, #28
 800798c:	f7ff fda0 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8007990:	f107 0218 	add.w	r2, r7, #24
 8007994:	2301      	movs	r3, #1
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	2301      	movs	r3, #1
 800799a:	210c      	movs	r1, #12
 800799c:	203c      	movs	r0, #60	; 0x3c
 800799e:	f7ff fd97 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAh", 1, 1);
 80079a2:	2301      	movs	r3, #1
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	2301      	movs	r3, #1
 80079a8:	4a2a      	ldr	r2, [pc, #168]	; (8007a54 <lcd_screen_3_refresh+0x158>)
 80079aa:	210c      	movs	r1, #12
 80079ac:	2042      	movs	r0, #66	; 0x42
 80079ae:	f7ff fd8f 	bl	80074d0 <lcd_puts_xy>

	if(screen3_mode == S3_RESET_CONFIRM) {
 80079b2:	4b29      	ldr	r3, [pc, #164]	; (8007a58 <lcd_screen_3_refresh+0x15c>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d10f      	bne.n	80079da <lcd_screen_3_refresh+0xde>
		lcd_puts_xy(12, ROW_LINE_3_1, "Clear Data?", 1, 1);
 80079ba:	2301      	movs	r3, #1
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	2301      	movs	r3, #1
 80079c0:	4a26      	ldr	r2, [pc, #152]	; (8007a5c <lcd_screen_3_refresh+0x160>)
 80079c2:	2118      	movs	r1, #24
 80079c4:	200c      	movs	r0, #12
 80079c6:	f7ff fd83 	bl	80074d0 <lcd_puts_xy>
		lcd_puts_xy(12, ROW_LINE_3_1 + 8, "[#]Y / [*]N", 1, 1);
 80079ca:	2301      	movs	r3, #1
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	2301      	movs	r3, #1
 80079d0:	4a23      	ldr	r2, [pc, #140]	; (8007a60 <lcd_screen_3_refresh+0x164>)
 80079d2:	2120      	movs	r1, #32
 80079d4:	200c      	movs	r0, #12
 80079d6:	f7ff fd7b 	bl	80074d0 <lcd_puts_xy>
	}

	char days_buf[5];
	sprintf(days_buf, "%04lu", Screen3_Timer.days);
 80079da:	4b22      	ldr	r3, [pc, #136]	; (8007a64 <lcd_screen_3_refresh+0x168>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	f107 0310 	add.w	r3, r7, #16
 80079e2:	4921      	ldr	r1, [pc, #132]	; (8007a68 <lcd_screen_3_refresh+0x16c>)
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 fced 	bl	80093c4 <siprintf>
	lcd_puts_xy(0, ROW_LINE_4, days_buf, 1, 1);
 80079ea:	f107 0210 	add.w	r2, r7, #16
 80079ee:	2301      	movs	r3, #1
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	2301      	movs	r3, #1
 80079f4:	2129      	movs	r1, #41	; 0x29
 80079f6:	2000      	movs	r0, #0
 80079f8:	f7ff fd6a 	bl	80074d0 <lcd_puts_xy>
	lcd_puts_xy(26, ROW_LINE_4 + 2, "DAY(s)", 1, 0);
 80079fc:	2300      	movs	r3, #0
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2301      	movs	r3, #1
 8007a02:	4a1a      	ldr	r2, [pc, #104]	; (8007a6c <lcd_screen_3_refresh+0x170>)
 8007a04:	212b      	movs	r1, #43	; 0x2b
 8007a06:	201a      	movs	r0, #26
 8007a08:	f7ff fd62 	bl	80074d0 <lcd_puts_xy>

	char runtime_buf[9];
	sprintf(runtime_buf, "%02u:%02u:%02u", Screen3_Timer.hours, Screen3_Timer.minutes, Screen3_Timer.seconds);
 8007a0c:	4b15      	ldr	r3, [pc, #84]	; (8007a64 <lcd_screen_3_refresh+0x168>)
 8007a0e:	791b      	ldrb	r3, [r3, #4]
 8007a10:	461a      	mov	r2, r3
 8007a12:	4b14      	ldr	r3, [pc, #80]	; (8007a64 <lcd_screen_3_refresh+0x168>)
 8007a14:	795b      	ldrb	r3, [r3, #5]
 8007a16:	4619      	mov	r1, r3
 8007a18:	4b12      	ldr	r3, [pc, #72]	; (8007a64 <lcd_screen_3_refresh+0x168>)
 8007a1a:	799b      	ldrb	r3, [r3, #6]
 8007a1c:	1d38      	adds	r0, r7, #4
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	460b      	mov	r3, r1
 8007a22:	4913      	ldr	r1, [pc, #76]	; (8007a70 <lcd_screen_3_refresh+0x174>)
 8007a24:	f001 fcce 	bl	80093c4 <siprintf>
	lcd_puts_xy(56, ROW_LINE_4 + 2, runtime_buf, 1, 0);
 8007a28:	1d3a      	adds	r2, r7, #4
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	2301      	movs	r3, #1
 8007a30:	212b      	movs	r1, #43	; 0x2b
 8007a32:	2038      	movs	r0, #56	; 0x38
 8007a34:	f7ff fd4c 	bl	80074d0 <lcd_puts_xy>

	LCD5110_Refresh();
 8007a38:	f7f9 ff36 	bl	80018a8 <LCD5110_Refresh>
}
 8007a3c:	bf00      	nop
 8007a3e:	3728      	adds	r7, #40	; 0x28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	0800b930 	.word	0x0800b930
 8007a48:	200148c8 	.word	0x200148c8
 8007a4c:	0800b934 	.word	0x0800b934
 8007a50:	0800b938 	.word	0x0800b938
 8007a54:	0800b93c 	.word	0x0800b93c
 8007a58:	2001489c 	.word	0x2001489c
 8007a5c:	0800b940 	.word	0x0800b940
 8007a60:	0800b94c 	.word	0x0800b94c
 8007a64:	200148d0 	.word	0x200148d0
 8007a68:	0800b958 	.word	0x0800b958
 8007a6c:	0800b960 	.word	0x0800b960
 8007a70:	0800b968 	.word	0x0800b968

08007a74 <lcd_screen_4_refresh>:

void lcd_screen_4_refresh() {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08e      	sub	sp, #56	; 0x38
 8007a78:	af02      	add	r7, sp, #8
	char time_buf[9];
	char val_buf[10];
	char range_buf[2];
	char interval_buf[7];

	LCD5110_Clear();
 8007a7a:	f7f9 fee3 	bl	8001844 <LCD5110_Clear>

	if(screen4_mode == S4_NORMAL_DISPLAY) {
 8007a7e:	4bbf      	ldr	r3, [pc, #764]	; (8007d7c <lcd_screen_4_refresh+0x308>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f040 80ca 	bne.w	8007c1c <lcd_screen_4_refresh+0x1a8>

		lcd_puts_xy(0, 0, "PKV", 1, 1);
 8007a88:	2301      	movs	r3, #1
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	4abc      	ldr	r2, [pc, #752]	; (8007d80 <lcd_screen_4_refresh+0x30c>)
 8007a90:	2100      	movs	r1, #0
 8007a92:	2000      	movs	r0, #0
 8007a94:	f7ff fd1c 	bl	80074d0 <lcd_puts_xy>
		range_scale(screen4_data.User_PKI, val_buf, range_buf);
 8007a98:	4bba      	ldr	r3, [pc, #744]	; (8007d84 <lcd_screen_4_refresh+0x310>)
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f107 0208 	add.w	r2, r7, #8
 8007aa0:	f107 010c 	add.w	r1, r7, #12
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff fd2f 	bl	8007508 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 0, val_buf, 1, 1);
 8007aaa:	f107 020c 	add.w	r2, r7, #12
 8007aae:	2301      	movs	r3, #1
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	201c      	movs	r0, #28
 8007ab8:	f7ff fd0a 	bl	80074d0 <lcd_puts_xy>
		lcd_puts_xy(VALUE_RANGE_COLUMN, 0, range_buf, 1, 1);
 8007abc:	f107 0208 	add.w	r2, r7, #8
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	203c      	movs	r0, #60	; 0x3c
 8007aca:	f7ff fd01 	bl	80074d0 <lcd_puts_xy>
		lcd_puts_xy(UNITS_COLUMN, 0, "V", 1, 1);
 8007ace:	2301      	movs	r3, #1
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4aac      	ldr	r2, [pc, #688]	; (8007d88 <lcd_screen_4_refresh+0x314>)
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	2042      	movs	r0, #66	; 0x42
 8007ada:	f7ff fcf9 	bl	80074d0 <lcd_puts_xy>

		lcd_puts_xy(0, 10, "PKI", 1, 1);
 8007ade:	2301      	movs	r3, #1
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	4aa9      	ldr	r2, [pc, #676]	; (8007d8c <lcd_screen_4_refresh+0x318>)
 8007ae6:	210a      	movs	r1, #10
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f7ff fcf1 	bl	80074d0 <lcd_puts_xy>
		range_scale(screen4_data.User_PKI, val_buf, range_buf);
 8007aee:	4ba5      	ldr	r3, [pc, #660]	; (8007d84 <lcd_screen_4_refresh+0x310>)
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f107 0208 	add.w	r2, r7, #8
 8007af6:	f107 010c 	add.w	r1, r7, #12
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff fd04 	bl	8007508 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 10, val_buf, 1, 1);
 8007b00:	f107 020c 	add.w	r2, r7, #12
 8007b04:	2301      	movs	r3, #1
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	2301      	movs	r3, #1
 8007b0a:	210a      	movs	r1, #10
 8007b0c:	201c      	movs	r0, #28
 8007b0e:	f7ff fcdf 	bl	80074d0 <lcd_puts_xy>
		lcd_puts_xy(VALUE_RANGE_COLUMN, 10, range_buf, 1, 1);
 8007b12:	f107 0208 	add.w	r2, r7, #8
 8007b16:	2301      	movs	r3, #1
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	210a      	movs	r1, #10
 8007b1e:	203c      	movs	r0, #60	; 0x3c
 8007b20:	f7ff fcd6 	bl	80074d0 <lcd_puts_xy>
		lcd_puts_xy(UNITS_COLUMN, 10, "A", 1, 1);
 8007b24:	2301      	movs	r3, #1
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	2301      	movs	r3, #1
 8007b2a:	4a99      	ldr	r2, [pc, #612]	; (8007d90 <lcd_screen_4_refresh+0x31c>)
 8007b2c:	210a      	movs	r1, #10
 8007b2e:	2042      	movs	r0, #66	; 0x42
 8007b30:	f7ff fcce 	bl	80074d0 <lcd_puts_xy>

		lcd_puts_xy(0, 20, "SAG", 1, 1);
 8007b34:	2301      	movs	r3, #1
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	2301      	movs	r3, #1
 8007b3a:	4a96      	ldr	r2, [pc, #600]	; (8007d94 <lcd_screen_4_refresh+0x320>)
 8007b3c:	2114      	movs	r1, #20
 8007b3e:	2000      	movs	r0, #0
 8007b40:	f7ff fcc6 	bl	80074d0 <lcd_puts_xy>
		range_scale(screen4_data.User_SAG, val_buf, range_buf);
 8007b44:	4b8f      	ldr	r3, [pc, #572]	; (8007d84 <lcd_screen_4_refresh+0x310>)
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f107 0208 	add.w	r2, r7, #8
 8007b4c:	f107 010c 	add.w	r1, r7, #12
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fcd9 	bl	8007508 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 20, val_buf, 1, 1);
 8007b56:	f107 020c 	add.w	r2, r7, #12
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2301      	movs	r3, #1
 8007b60:	2114      	movs	r1, #20
 8007b62:	201c      	movs	r0, #28
 8007b64:	f7ff fcb4 	bl	80074d0 <lcd_puts_xy>
		lcd_puts_xy(VALUE_RANGE_COLUMN, 20, range_buf, 1, 1);
 8007b68:	f107 0208 	add.w	r2, r7, #8
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	2301      	movs	r3, #1
 8007b72:	2114      	movs	r1, #20
 8007b74:	203c      	movs	r0, #60	; 0x3c
 8007b76:	f7ff fcab 	bl	80074d0 <lcd_puts_xy>
		lcd_puts_xy(UNITS_COLUMN, 20, "V", 1, 1);
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4a81      	ldr	r2, [pc, #516]	; (8007d88 <lcd_screen_4_refresh+0x314>)
 8007b82:	2114      	movs	r1, #20
 8007b84:	2042      	movs	r0, #66	; 0x42
 8007b86:	f7ff fca3 	bl	80074d0 <lcd_puts_xy>

		lcd_puts_xy(0, 30, "Intv", 1, 1);
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4a81      	ldr	r2, [pc, #516]	; (8007d98 <lcd_screen_4_refresh+0x324>)
 8007b92:	211e      	movs	r1, #30
 8007b94:	2000      	movs	r0, #0
 8007b96:	f7ff fc9b 	bl	80074d0 <lcd_puts_xy>
		sprintf(interval_buf, "%02dmins", Sample_Interval);
 8007b9a:	4b80      	ldr	r3, [pc, #512]	; (8007d9c <lcd_screen_4_refresh+0x328>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	497f      	ldr	r1, [pc, #508]	; (8007da0 <lcd_screen_4_refresh+0x32c>)
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 fc0d 	bl	80093c4 <siprintf>
		lcd_puts_xy(INTVL_COLUMN, 30, interval_buf, 1, 1);
 8007baa:	463a      	mov	r2, r7
 8007bac:	2301      	movs	r3, #1
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	211e      	movs	r1, #30
 8007bb4:	2028      	movs	r0, #40	; 0x28
 8007bb6:	f7ff fc8b 	bl	80074d0 <lcd_puts_xy>

		sprintf(date_buf, "%02u/%02u/20%02u", Screen4_RTC.date.date, Screen4_RTC.date.month, Screen4_RTC.date.year);
 8007bba:	4b7a      	ldr	r3, [pc, #488]	; (8007da4 <lcd_screen_4_refresh+0x330>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	4b78      	ldr	r3, [pc, #480]	; (8007da4 <lcd_screen_4_refresh+0x330>)
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4b77      	ldr	r3, [pc, #476]	; (8007da4 <lcd_screen_4_refresh+0x330>)
 8007bc8:	789b      	ldrb	r3, [r3, #2]
 8007bca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4975      	ldr	r1, [pc, #468]	; (8007da8 <lcd_screen_4_refresh+0x334>)
 8007bd4:	f001 fbf6 	bl	80093c4 <siprintf>
		lcd_puts_xy(0, ROW_LINE_4 + 2, date_buf, 1, 0);
 8007bd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	2301      	movs	r3, #1
 8007be2:	212b      	movs	r1, #43	; 0x2b
 8007be4:	2000      	movs	r0, #0
 8007be6:	f7ff fc73 	bl	80074d0 <lcd_puts_xy>
		sprintf(time_buf, "%02u:%02u:%02u", Screen4_RTC.time.hours, Screen4_RTC.time.minutes, Screen4_RTC.time.seconds);
 8007bea:	4b6e      	ldr	r3, [pc, #440]	; (8007da4 <lcd_screen_4_refresh+0x330>)
 8007bec:	79db      	ldrb	r3, [r3, #7]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4b6c      	ldr	r3, [pc, #432]	; (8007da4 <lcd_screen_4_refresh+0x330>)
 8007bf2:	799b      	ldrb	r3, [r3, #6]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4b6b      	ldr	r3, [pc, #428]	; (8007da4 <lcd_screen_4_refresh+0x330>)
 8007bf8:	795b      	ldrb	r3, [r3, #5]
 8007bfa:	f107 0018 	add.w	r0, r7, #24
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	460b      	mov	r3, r1
 8007c02:	496a      	ldr	r1, [pc, #424]	; (8007dac <lcd_screen_4_refresh+0x338>)
 8007c04:	f001 fbde 	bl	80093c4 <siprintf>
		lcd_puts_xy(56, ROW_LINE_4 + 2, time_buf, 1, 0);
 8007c08:	f107 0218 	add.w	r2, r7, #24
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	2301      	movs	r3, #1
 8007c12:	212b      	movs	r1, #43	; 0x2b
 8007c14:	2038      	movs	r0, #56	; 0x38
 8007c16:	f7ff fc5b 	bl	80074d0 <lcd_puts_xy>
 8007c1a:	e1bf      	b.n	8007f9c <lcd_screen_4_refresh+0x528>

	} else {
		lcd_puts_xy(5, ROW_LINE_1, "Configuration", 1, 1);
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	2301      	movs	r3, #1
 8007c22:	4a63      	ldr	r2, [pc, #396]	; (8007db0 <lcd_screen_4_refresh+0x33c>)
 8007c24:	2100      	movs	r1, #0
 8007c26:	2005      	movs	r0, #5
 8007c28:	f7ff fc52 	bl	80074d0 <lcd_puts_xy>

		if(screen4_mode == S4_CONFIG_DISPLAY) {
 8007c2c:	4b53      	ldr	r3, [pc, #332]	; (8007d7c <lcd_screen_4_refresh+0x308>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	f040 819b 	bne.w	8007f6c <lcd_screen_4_refresh+0x4f8>
			if(Screen4_Config_Target < Screen4_Config_interval) {
 8007c36:	4b5f      	ldr	r3, [pc, #380]	; (8007db4 <lcd_screen_4_refresh+0x340>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b05      	cmp	r3, #5
 8007c3c:	f200 80f2 	bhi.w	8007e24 <lcd_screen_4_refresh+0x3b0>

				lcd_puts_xy(0, ROW_LINE_2, "PKV", 1, 1);
 8007c40:	2301      	movs	r3, #1
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	2301      	movs	r3, #1
 8007c46:	4a4e      	ldr	r2, [pc, #312]	; (8007d80 <lcd_screen_4_refresh+0x30c>)
 8007c48:	210c      	movs	r1, #12
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	f7ff fc40 	bl	80074d0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_pkv)
 8007c50:	4b58      	ldr	r3, [pc, #352]	; (8007db4 <lcd_screen_4_refresh+0x340>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d108      	bne.n	8007c6a <lcd_screen_4_refresh+0x1f6>
					lcd_puts_xy(20, ROW_LINE_2, "<", 1, 1);
 8007c58:	2301      	movs	r3, #1
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	4a56      	ldr	r2, [pc, #344]	; (8007db8 <lcd_screen_4_refresh+0x344>)
 8007c60:	210c      	movs	r1, #12
 8007c62:	2014      	movs	r0, #20
 8007c64:	f7ff fc34 	bl	80074d0 <lcd_puts_xy>
 8007c68:	e00b      	b.n	8007c82 <lcd_screen_4_refresh+0x20e>
				else if(Screen4_Config_Target == Screen4_Config_pkv_selected)
 8007c6a:	4b52      	ldr	r3, [pc, #328]	; (8007db4 <lcd_screen_4_refresh+0x340>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d107      	bne.n	8007c82 <lcd_screen_4_refresh+0x20e>
					lcd_puts_xy(20, ROW_LINE_2, ">", 0, 1);
 8007c72:	2301      	movs	r3, #1
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	2300      	movs	r3, #0
 8007c78:	4a50      	ldr	r2, [pc, #320]	; (8007dbc <lcd_screen_4_refresh+0x348>)
 8007c7a:	210c      	movs	r1, #12
 8007c7c:	2014      	movs	r0, #20
 8007c7e:	f7ff fc27 	bl	80074d0 <lcd_puts_xy>
				range_scale(screen4_data_config.User_PKI, val_buf, range_buf);
 8007c82:	4b4f      	ldr	r3, [pc, #316]	; (8007dc0 <lcd_screen_4_refresh+0x34c>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f107 0208 	add.w	r2, r7, #8
 8007c8a:	f107 010c 	add.w	r1, r7, #12
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff fc3a 	bl	8007508 <range_scale>
				lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 8007c94:	f107 020c 	add.w	r2, r7, #12
 8007c98:	2301      	movs	r3, #1
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	210c      	movs	r1, #12
 8007ca0:	201c      	movs	r0, #28
 8007ca2:	f7ff fc15 	bl	80074d0 <lcd_puts_xy>
				lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8007ca6:	f107 0208 	add.w	r2, r7, #8
 8007caa:	2301      	movs	r3, #1
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	2301      	movs	r3, #1
 8007cb0:	210c      	movs	r1, #12
 8007cb2:	203c      	movs	r0, #60	; 0x3c
 8007cb4:	f7ff fc0c 	bl	80074d0 <lcd_puts_xy>
				lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1, 1);
 8007cb8:	2301      	movs	r3, #1
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	4a32      	ldr	r2, [pc, #200]	; (8007d88 <lcd_screen_4_refresh+0x314>)
 8007cc0:	210c      	movs	r1, #12
 8007cc2:	2042      	movs	r0, #66	; 0x42
 8007cc4:	f7ff fc04 	bl	80074d0 <lcd_puts_xy>


				lcd_puts_xy(0, ROW_LINE_3_1, "PKI", 1, 1);
 8007cc8:	2301      	movs	r3, #1
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	2301      	movs	r3, #1
 8007cce:	4a2f      	ldr	r2, [pc, #188]	; (8007d8c <lcd_screen_4_refresh+0x318>)
 8007cd0:	2118      	movs	r1, #24
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	f7ff fbfc 	bl	80074d0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_pki)
 8007cd8:	4b36      	ldr	r3, [pc, #216]	; (8007db4 <lcd_screen_4_refresh+0x340>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d108      	bne.n	8007cf2 <lcd_screen_4_refresh+0x27e>
					lcd_puts_xy(20, ROW_LINE_3_1, "<", 1, 1);
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	4a34      	ldr	r2, [pc, #208]	; (8007db8 <lcd_screen_4_refresh+0x344>)
 8007ce8:	2118      	movs	r1, #24
 8007cea:	2014      	movs	r0, #20
 8007cec:	f7ff fbf0 	bl	80074d0 <lcd_puts_xy>
 8007cf0:	e00b      	b.n	8007d0a <lcd_screen_4_refresh+0x296>
				else if(Screen4_Config_Target == Screen4_Config_pki_selected)
 8007cf2:	4b30      	ldr	r3, [pc, #192]	; (8007db4 <lcd_screen_4_refresh+0x340>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d107      	bne.n	8007d0a <lcd_screen_4_refresh+0x296>
					lcd_puts_xy(20, ROW_LINE_3_1, ">", 0, 1);
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4a2e      	ldr	r2, [pc, #184]	; (8007dbc <lcd_screen_4_refresh+0x348>)
 8007d02:	2118      	movs	r1, #24
 8007d04:	2014      	movs	r0, #20
 8007d06:	f7ff fbe3 	bl	80074d0 <lcd_puts_xy>
				range_scale(screen4_data_config.User_PKI, val_buf, range_buf);
 8007d0a:	4b2d      	ldr	r3, [pc, #180]	; (8007dc0 <lcd_screen_4_refresh+0x34c>)
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f107 0208 	add.w	r2, r7, #8
 8007d12:	f107 010c 	add.w	r1, r7, #12
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff fbf6 	bl	8007508 <range_scale>
				lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1, 1);
 8007d1c:	f107 020c 	add.w	r2, r7, #12
 8007d20:	2301      	movs	r3, #1
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	2301      	movs	r3, #1
 8007d26:	2118      	movs	r1, #24
 8007d28:	201c      	movs	r0, #28
 8007d2a:	f7ff fbd1 	bl	80074d0 <lcd_puts_xy>
				lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1, 1);
 8007d2e:	f107 0208 	add.w	r2, r7, #8
 8007d32:	2301      	movs	r3, #1
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	2301      	movs	r3, #1
 8007d38:	2118      	movs	r1, #24
 8007d3a:	203c      	movs	r0, #60	; 0x3c
 8007d3c:	f7ff fbc8 	bl	80074d0 <lcd_puts_xy>
				lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "A", 1, 1);
 8007d40:	2301      	movs	r3, #1
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	2301      	movs	r3, #1
 8007d46:	4a12      	ldr	r2, [pc, #72]	; (8007d90 <lcd_screen_4_refresh+0x31c>)
 8007d48:	2118      	movs	r1, #24
 8007d4a:	2042      	movs	r0, #66	; 0x42
 8007d4c:	f7ff fbc0 	bl	80074d0 <lcd_puts_xy>



				lcd_puts_xy(0, ROW_LINE_4, "SAG", 1, 1);
 8007d50:	2301      	movs	r3, #1
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	2301      	movs	r3, #1
 8007d56:	4a0f      	ldr	r2, [pc, #60]	; (8007d94 <lcd_screen_4_refresh+0x320>)
 8007d58:	2129      	movs	r1, #41	; 0x29
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f7ff fbb8 	bl	80074d0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_sag)
 8007d60:	4b14      	ldr	r3, [pc, #80]	; (8007db4 <lcd_screen_4_refresh+0x340>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d12d      	bne.n	8007dc4 <lcd_screen_4_refresh+0x350>
					lcd_puts_xy(20, ROW_LINE_4, "<", 1, 1);
 8007d68:	2301      	movs	r3, #1
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4a12      	ldr	r2, [pc, #72]	; (8007db8 <lcd_screen_4_refresh+0x344>)
 8007d70:	2129      	movs	r1, #41	; 0x29
 8007d72:	2014      	movs	r0, #20
 8007d74:	f7ff fbac 	bl	80074d0 <lcd_puts_xy>
 8007d78:	e030      	b.n	8007ddc <lcd_screen_4_refresh+0x368>
 8007d7a:	bf00      	nop
 8007d7c:	200148d9 	.word	0x200148d9
 8007d80:	0800b978 	.word	0x0800b978
 8007d84:	200148bc 	.word	0x200148bc
 8007d88:	0800b8f4 	.word	0x0800b8f4
 8007d8c:	0800b97c 	.word	0x0800b97c
 8007d90:	0800b904 	.word	0x0800b904
 8007d94:	0800b980 	.word	0x0800b980
 8007d98:	0800b984 	.word	0x0800b984
 8007d9c:	200148d8 	.word	0x200148d8
 8007da0:	0800b98c 	.word	0x0800b98c
 8007da4:	200148a0 	.word	0x200148a0
 8007da8:	0800b998 	.word	0x0800b998
 8007dac:	0800b968 	.word	0x0800b968
 8007db0:	0800b9ac 	.word	0x0800b9ac
 8007db4:	20014888 	.word	0x20014888
 8007db8:	0800b9bc 	.word	0x0800b9bc
 8007dbc:	0800b9c0 	.word	0x0800b9c0
 8007dc0:	200148e8 	.word	0x200148e8
				else if(Screen4_Config_Target == Screen4_Config_sag_selected)
 8007dc4:	4b78      	ldr	r3, [pc, #480]	; (8007fa8 <lcd_screen_4_refresh+0x534>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b05      	cmp	r3, #5
 8007dca:	d107      	bne.n	8007ddc <lcd_screen_4_refresh+0x368>
					lcd_puts_xy(20, ROW_LINE_4, ">", 0, 1);
 8007dcc:	2301      	movs	r3, #1
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4a76      	ldr	r2, [pc, #472]	; (8007fac <lcd_screen_4_refresh+0x538>)
 8007dd4:	2129      	movs	r1, #41	; 0x29
 8007dd6:	2014      	movs	r0, #20
 8007dd8:	f7ff fb7a 	bl	80074d0 <lcd_puts_xy>
				range_scale(screen4_data_config.User_SAG, val_buf, range_buf);
 8007ddc:	4b74      	ldr	r3, [pc, #464]	; (8007fb0 <lcd_screen_4_refresh+0x53c>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f107 0208 	add.w	r2, r7, #8
 8007de4:	f107 010c 	add.w	r1, r7, #12
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff fb8d 	bl	8007508 <range_scale>
				lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 8007dee:	f107 020c 	add.w	r2, r7, #12
 8007df2:	2301      	movs	r3, #1
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	2301      	movs	r3, #1
 8007df8:	2129      	movs	r1, #41	; 0x29
 8007dfa:	201c      	movs	r0, #28
 8007dfc:	f7ff fb68 	bl	80074d0 <lcd_puts_xy>
				lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1, 1);
 8007e00:	f107 0208 	add.w	r2, r7, #8
 8007e04:	2301      	movs	r3, #1
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	2301      	movs	r3, #1
 8007e0a:	2129      	movs	r1, #41	; 0x29
 8007e0c:	203c      	movs	r0, #60	; 0x3c
 8007e0e:	f7ff fb5f 	bl	80074d0 <lcd_puts_xy>
				lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "V", 1, 1);
 8007e12:	2301      	movs	r3, #1
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	2301      	movs	r3, #1
 8007e18:	4a66      	ldr	r2, [pc, #408]	; (8007fb4 <lcd_screen_4_refresh+0x540>)
 8007e1a:	2129      	movs	r1, #41	; 0x29
 8007e1c:	2042      	movs	r0, #66	; 0x42
 8007e1e:	f7ff fb57 	bl	80074d0 <lcd_puts_xy>
 8007e22:	e0bb      	b.n	8007f9c <lcd_screen_4_refresh+0x528>

			} else {
				lcd_puts_xy(0, ROW_LINE_2, "Intv", 1, 1);
 8007e24:	2301      	movs	r3, #1
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	2301      	movs	r3, #1
 8007e2a:	4a63      	ldr	r2, [pc, #396]	; (8007fb8 <lcd_screen_4_refresh+0x544>)
 8007e2c:	210c      	movs	r1, #12
 8007e2e:	2000      	movs	r0, #0
 8007e30:	f7ff fb4e 	bl	80074d0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_interval)
 8007e34:	4b5c      	ldr	r3, [pc, #368]	; (8007fa8 <lcd_screen_4_refresh+0x534>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b06      	cmp	r3, #6
 8007e3a:	d108      	bne.n	8007e4e <lcd_screen_4_refresh+0x3da>
					lcd_puts_xy(24, ROW_LINE_2, "<", 1, 1);
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	2301      	movs	r3, #1
 8007e42:	4a5e      	ldr	r2, [pc, #376]	; (8007fbc <lcd_screen_4_refresh+0x548>)
 8007e44:	210c      	movs	r1, #12
 8007e46:	2018      	movs	r0, #24
 8007e48:	f7ff fb42 	bl	80074d0 <lcd_puts_xy>
 8007e4c:	e00b      	b.n	8007e66 <lcd_screen_4_refresh+0x3f2>
				else if(Screen4_Config_Target == Screen4_Config_interval_selected)
 8007e4e:	4b56      	ldr	r3, [pc, #344]	; (8007fa8 <lcd_screen_4_refresh+0x534>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b07      	cmp	r3, #7
 8007e54:	d107      	bne.n	8007e66 <lcd_screen_4_refresh+0x3f2>
					lcd_puts_xy(24, ROW_LINE_2, ">", 0, 1);
 8007e56:	2301      	movs	r3, #1
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	4a53      	ldr	r2, [pc, #332]	; (8007fac <lcd_screen_4_refresh+0x538>)
 8007e5e:	210c      	movs	r1, #12
 8007e60:	2018      	movs	r0, #24
 8007e62:	f7ff fb35 	bl	80074d0 <lcd_puts_xy>
				sprintf(interval_buf, "%02dmins", Sample_Interval_Config);
 8007e66:	4b56      	ldr	r3, [pc, #344]	; (8007fc0 <lcd_screen_4_refresh+0x54c>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	463b      	mov	r3, r7
 8007e6e:	4955      	ldr	r1, [pc, #340]	; (8007fc4 <lcd_screen_4_refresh+0x550>)
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 faa7 	bl	80093c4 <siprintf>
				lcd_puts_xy(INTVL_COLUMN, ROW_LINE_2, interval_buf, 1, 1);
 8007e76:	463a      	mov	r2, r7
 8007e78:	2301      	movs	r3, #1
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	210c      	movs	r1, #12
 8007e80:	2028      	movs	r0, #40	; 0x28
 8007e82:	f7ff fb25 	bl	80074d0 <lcd_puts_xy>

				lcd_puts_xy(0, ROW_LINE_3_2, "DT", 1, 1);
 8007e86:	2301      	movs	r3, #1
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	4a4e      	ldr	r2, [pc, #312]	; (8007fc8 <lcd_screen_4_refresh+0x554>)
 8007e8e:	211d      	movs	r1, #29
 8007e90:	2000      	movs	r0, #0
 8007e92:	f7ff fb1d 	bl	80074d0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_date)
 8007e96:	4b44      	ldr	r3, [pc, #272]	; (8007fa8 <lcd_screen_4_refresh+0x534>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b08      	cmp	r3, #8
 8007e9c:	d108      	bne.n	8007eb0 <lcd_screen_4_refresh+0x43c>
					lcd_puts_xy(14, ROW_LINE_3_2, "<", 1, 1);
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	4a45      	ldr	r2, [pc, #276]	; (8007fbc <lcd_screen_4_refresh+0x548>)
 8007ea6:	211d      	movs	r1, #29
 8007ea8:	200e      	movs	r0, #14
 8007eaa:	f7ff fb11 	bl	80074d0 <lcd_puts_xy>
 8007eae:	e00b      	b.n	8007ec8 <lcd_screen_4_refresh+0x454>
				else if(Screen4_Config_Target == Screen4_Config_date_selected)
 8007eb0:	4b3d      	ldr	r3, [pc, #244]	; (8007fa8 <lcd_screen_4_refresh+0x534>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b09      	cmp	r3, #9
 8007eb6:	d107      	bne.n	8007ec8 <lcd_screen_4_refresh+0x454>
					lcd_puts_xy(14, ROW_LINE_3_2, ">", 0, 1);
 8007eb8:	2301      	movs	r3, #1
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4a3b      	ldr	r2, [pc, #236]	; (8007fac <lcd_screen_4_refresh+0x538>)
 8007ec0:	211d      	movs	r1, #29
 8007ec2:	200e      	movs	r0, #14
 8007ec4:	f7ff fb04 	bl	80074d0 <lcd_puts_xy>
				sprintf(date_buf, "%02u/%02u/20%02u", Screen4_RTC_Config.date.date, Screen4_RTC_Config.date.month, Screen4_RTC_Config.date.year);
 8007ec8:	4b40      	ldr	r3, [pc, #256]	; (8007fcc <lcd_screen_4_refresh+0x558>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4b3f      	ldr	r3, [pc, #252]	; (8007fcc <lcd_screen_4_refresh+0x558>)
 8007ed0:	785b      	ldrb	r3, [r3, #1]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4b3d      	ldr	r3, [pc, #244]	; (8007fcc <lcd_screen_4_refresh+0x558>)
 8007ed6:	789b      	ldrb	r3, [r3, #2]
 8007ed8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	493b      	ldr	r1, [pc, #236]	; (8007fd0 <lcd_screen_4_refresh+0x55c>)
 8007ee2:	f001 fa6f 	bl	80093c4 <siprintf>
				lcd_puts_xy(22, ROW_LINE_3_2, date_buf, 1, 1);
 8007ee6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007eea:	2301      	movs	r3, #1
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	2301      	movs	r3, #1
 8007ef0:	211d      	movs	r1, #29
 8007ef2:	2016      	movs	r0, #22
 8007ef4:	f7ff faec 	bl	80074d0 <lcd_puts_xy>

				lcd_puts_xy(0, ROW_LINE_4, "TM", 1, 1);
 8007ef8:	2301      	movs	r3, #1
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	2301      	movs	r3, #1
 8007efe:	4a35      	ldr	r2, [pc, #212]	; (8007fd4 <lcd_screen_4_refresh+0x560>)
 8007f00:	2129      	movs	r1, #41	; 0x29
 8007f02:	2000      	movs	r0, #0
 8007f04:	f7ff fae4 	bl	80074d0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_time)
 8007f08:	4b27      	ldr	r3, [pc, #156]	; (8007fa8 <lcd_screen_4_refresh+0x534>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b0a      	cmp	r3, #10
 8007f0e:	d108      	bne.n	8007f22 <lcd_screen_4_refresh+0x4ae>
					lcd_puts_xy(14, ROW_LINE_4, "<", 1, 1);
 8007f10:	2301      	movs	r3, #1
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	2301      	movs	r3, #1
 8007f16:	4a29      	ldr	r2, [pc, #164]	; (8007fbc <lcd_screen_4_refresh+0x548>)
 8007f18:	2129      	movs	r1, #41	; 0x29
 8007f1a:	200e      	movs	r0, #14
 8007f1c:	f7ff fad8 	bl	80074d0 <lcd_puts_xy>
 8007f20:	e00b      	b.n	8007f3a <lcd_screen_4_refresh+0x4c6>
				else if(Screen4_Config_Target == Screen4_Config_time_selected)
 8007f22:	4b21      	ldr	r3, [pc, #132]	; (8007fa8 <lcd_screen_4_refresh+0x534>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b0b      	cmp	r3, #11
 8007f28:	d107      	bne.n	8007f3a <lcd_screen_4_refresh+0x4c6>
					lcd_puts_xy(14, ROW_LINE_4, ">", 0, 1);
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4a1e      	ldr	r2, [pc, #120]	; (8007fac <lcd_screen_4_refresh+0x538>)
 8007f32:	2129      	movs	r1, #41	; 0x29
 8007f34:	200e      	movs	r0, #14
 8007f36:	f7ff facb 	bl	80074d0 <lcd_puts_xy>
				sprintf(time_buf, "%02u:%02u:%02u", Screen4_RTC_Config.time.hours, Screen4_RTC_Config.time.minutes, Screen4_RTC_Config.time.seconds);
 8007f3a:	4b24      	ldr	r3, [pc, #144]	; (8007fcc <lcd_screen_4_refresh+0x558>)
 8007f3c:	79db      	ldrb	r3, [r3, #7]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4b22      	ldr	r3, [pc, #136]	; (8007fcc <lcd_screen_4_refresh+0x558>)
 8007f42:	799b      	ldrb	r3, [r3, #6]
 8007f44:	4619      	mov	r1, r3
 8007f46:	4b21      	ldr	r3, [pc, #132]	; (8007fcc <lcd_screen_4_refresh+0x558>)
 8007f48:	795b      	ldrb	r3, [r3, #5]
 8007f4a:	f107 0018 	add.w	r0, r7, #24
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	460b      	mov	r3, r1
 8007f52:	4921      	ldr	r1, [pc, #132]	; (8007fd8 <lcd_screen_4_refresh+0x564>)
 8007f54:	f001 fa36 	bl	80093c4 <siprintf>
				lcd_puts_xy(22, ROW_LINE_4, time_buf, 1, 1);
 8007f58:	f107 0218 	add.w	r2, r7, #24
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	2301      	movs	r3, #1
 8007f62:	2129      	movs	r1, #41	; 0x29
 8007f64:	2016      	movs	r0, #22
 8007f66:	f7ff fab3 	bl	80074d0 <lcd_puts_xy>
 8007f6a:	e017      	b.n	8007f9c <lcd_screen_4_refresh+0x528>

			}

		} else {

			lcd_puts_xy(24, ROW_LINE_2, "Commit?", 1, 1);
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	2301      	movs	r3, #1
 8007f72:	4a1a      	ldr	r2, [pc, #104]	; (8007fdc <lcd_screen_4_refresh+0x568>)
 8007f74:	210c      	movs	r1, #12
 8007f76:	2018      	movs	r0, #24
 8007f78:	f7ff faaa 	bl	80074d0 <lcd_puts_xy>
			lcd_puts_xy(12, ROW_LINE_3_1, "[#]Y / [*]N", 1, 1);
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	2301      	movs	r3, #1
 8007f82:	4a17      	ldr	r2, [pc, #92]	; (8007fe0 <lcd_screen_4_refresh+0x56c>)
 8007f84:	2118      	movs	r1, #24
 8007f86:	200c      	movs	r0, #12
 8007f88:	f7ff faa2 	bl	80074d0 <lcd_puts_xy>
			lcd_puts_xy(24, ROW_LINE_4, "[D]Back", 1, 1);
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	2301      	movs	r3, #1
 8007f92:	4a14      	ldr	r2, [pc, #80]	; (8007fe4 <lcd_screen_4_refresh+0x570>)
 8007f94:	2129      	movs	r1, #41	; 0x29
 8007f96:	2018      	movs	r0, #24
 8007f98:	f7ff fa9a 	bl	80074d0 <lcd_puts_xy>

		}
	}

	LCD5110_Refresh();
 8007f9c:	f7f9 fc84 	bl	80018a8 <LCD5110_Refresh>
}
 8007fa0:	bf00      	nop
 8007fa2:	3730      	adds	r7, #48	; 0x30
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20014888 	.word	0x20014888
 8007fac:	0800b9c0 	.word	0x0800b9c0
 8007fb0:	200148e8 	.word	0x200148e8
 8007fb4:	0800b8f4 	.word	0x0800b8f4
 8007fb8:	0800b984 	.word	0x0800b984
 8007fbc:	0800b9bc 	.word	0x0800b9bc
 8007fc0:	200148f4 	.word	0x200148f4
 8007fc4:	0800b98c 	.word	0x0800b98c
 8007fc8:	0800b9c4 	.word	0x0800b9c4
 8007fcc:	200148dc 	.word	0x200148dc
 8007fd0:	0800b998 	.word	0x0800b998
 8007fd4:	0800b9c8 	.word	0x0800b9c8
 8007fd8:	0800b968 	.word	0x0800b968
 8007fdc:	0800b9cc 	.word	0x0800b9cc
 8007fe0:	0800b94c 	.word	0x0800b94c
 8007fe4:	0800b9d4 	.word	0x0800b9d4

08007fe8 <lcd_screen_refresh>:

void lcd_screen_refresh(LCD_Screen_t screen) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	71fb      	strb	r3, [r7, #7]
	switch (screen) {
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d817      	bhi.n	8008028 <lcd_screen_refresh+0x40>
 8007ff8:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <lcd_screen_refresh+0x18>)
 8007ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffe:	bf00      	nop
 8008000:	08008011 	.word	0x08008011
 8008004:	08008017 	.word	0x08008017
 8008008:	0800801d 	.word	0x0800801d
 800800c:	08008023 	.word	0x08008023
		case LCD_Screen_1:
			lcd_screen_1_refresh();
 8008010:	f7ff fb10 	bl	8007634 <lcd_screen_1_refresh>
			break;
 8008014:	e009      	b.n	800802a <lcd_screen_refresh+0x42>
		case LCD_Screen_2:
			lcd_screen_2_refresh();
 8008016:	f7ff fbc3 	bl	80077a0 <lcd_screen_2_refresh>
			break;
 800801a:	e006      	b.n	800802a <lcd_screen_refresh+0x42>
		case LCD_Screen_3:
			lcd_screen_3_refresh();
 800801c:	f7ff fc6e 	bl	80078fc <lcd_screen_3_refresh>
			break;
 8008020:	e003      	b.n	800802a <lcd_screen_refresh+0x42>
		case LCD_Screen_4:
			lcd_screen_4_refresh();
 8008022:	f7ff fd27 	bl	8007a74 <lcd_screen_4_refresh>
			break;
 8008026:	e000      	b.n	800802a <lcd_screen_refresh+0x42>
		default:
			break;
 8008028:	bf00      	nop
	}
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop

08008034 <lcd_screen_1_clear>:

void lcd_screen_4_data_update(LCD_Data_Screen4_t data) {
	screen4_data = data;
}

void lcd_screen_1_clear() {
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
	memset(&screen1_data, 0, sizeof(screen1_data));
 8008038:	2210      	movs	r2, #16
 800803a:	2100      	movs	r1, #0
 800803c:	4802      	ldr	r0, [pc, #8]	; (8008048 <lcd_screen_1_clear+0x14>)
 800803e:	f000 fd4d 	bl	8008adc <memset>
}
 8008042:	bf00      	nop
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	200148ac 	.word	0x200148ac

0800804c <lcd_screen_2_clear>:

void lcd_screen_2_clear() {
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
	memset(&screen2_data, 0, sizeof(screen2_data));
 8008050:	2210      	movs	r2, #16
 8008052:	2100      	movs	r1, #0
 8008054:	4802      	ldr	r0, [pc, #8]	; (8008060 <lcd_screen_2_clear+0x14>)
 8008056:	f000 fd41 	bl	8008adc <memset>
}
 800805a:	bf00      	nop
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	2001488c 	.word	0x2001488c

08008064 <lcd_screen_3_clear>:

void lcd_screen_3_clear() {
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
	screen3_mode = S3_NORMAL_DISPLAY;
 8008068:	4b07      	ldr	r3, [pc, #28]	; (8008088 <lcd_screen_3_clear+0x24>)
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
	memset(&screen3_data, 0, sizeof(screen3_data));
 800806e:	2208      	movs	r2, #8
 8008070:	2100      	movs	r1, #0
 8008072:	4806      	ldr	r0, [pc, #24]	; (800808c <lcd_screen_3_clear+0x28>)
 8008074:	f000 fd32 	bl	8008adc <memset>
	memset(&Screen3_Timer, 0, sizeof(Screen3_Timer));
 8008078:	2208      	movs	r2, #8
 800807a:	2100      	movs	r1, #0
 800807c:	4804      	ldr	r0, [pc, #16]	; (8008090 <lcd_screen_3_clear+0x2c>)
 800807e:	f000 fd2d 	bl	8008adc <memset>
}
 8008082:	bf00      	nop
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	2001489c 	.word	0x2001489c
 800808c:	200148c8 	.word	0x200148c8
 8008090:	200148d0 	.word	0x200148d0

08008094 <lcd_screen_4_clear>:

void lcd_screen_4_clear() {
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
	Sample_Interval = Sample_Interval_60;
 8008098:	4b08      	ldr	r3, [pc, #32]	; (80080bc <lcd_screen_4_clear+0x28>)
 800809a:	223c      	movs	r2, #60	; 0x3c
 800809c:	701a      	strb	r2, [r3, #0]
	screen4_mode = S4_NORMAL_DISPLAY;
 800809e:	4b08      	ldr	r3, [pc, #32]	; (80080c0 <lcd_screen_4_clear+0x2c>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
	memset(&screen4_data, 0, sizeof(screen4_data));
 80080a4:	220c      	movs	r2, #12
 80080a6:	2100      	movs	r1, #0
 80080a8:	4806      	ldr	r0, [pc, #24]	; (80080c4 <lcd_screen_4_clear+0x30>)
 80080aa:	f000 fd17 	bl	8008adc <memset>
	memset(&Screen4_RTC, 0, sizeof(Screen4_RTC));
 80080ae:	220a      	movs	r2, #10
 80080b0:	2100      	movs	r1, #0
 80080b2:	4805      	ldr	r0, [pc, #20]	; (80080c8 <lcd_screen_4_clear+0x34>)
 80080b4:	f000 fd12 	bl	8008adc <memset>
}
 80080b8:	bf00      	nop
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	200148d8 	.word	0x200148d8
 80080c0:	200148d9 	.word	0x200148d9
 80080c4:	200148bc 	.word	0x200148bc
 80080c8:	200148a0 	.word	0x200148a0

080080cc <lcd_screen_3_timer_count_up>:

void lcd_screen_3_timer_count_up() {
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
	Screen3_Timer.seconds++;
 80080d0:	4b1c      	ldr	r3, [pc, #112]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 80080d2:	799b      	ldrb	r3, [r3, #6]
 80080d4:	3301      	adds	r3, #1
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	4b1a      	ldr	r3, [pc, #104]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 80080da:	719a      	strb	r2, [r3, #6]
	if(Screen3_Timer.seconds > 59) {
 80080dc:	4b19      	ldr	r3, [pc, #100]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 80080de:	799b      	ldrb	r3, [r3, #6]
 80080e0:	2b3b      	cmp	r3, #59	; 0x3b
 80080e2:	d92a      	bls.n	800813a <lcd_screen_3_timer_count_up+0x6e>
		Screen3_Timer.seconds -= 60;
 80080e4:	4b17      	ldr	r3, [pc, #92]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 80080e6:	799b      	ldrb	r3, [r3, #6]
 80080e8:	3b3c      	subs	r3, #60	; 0x3c
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	4b15      	ldr	r3, [pc, #84]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 80080ee:	719a      	strb	r2, [r3, #6]
		Screen3_Timer.minutes++;
 80080f0:	4b14      	ldr	r3, [pc, #80]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 80080f2:	795b      	ldrb	r3, [r3, #5]
 80080f4:	3301      	adds	r3, #1
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	4b12      	ldr	r3, [pc, #72]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 80080fa:	715a      	strb	r2, [r3, #5]
		if(Screen3_Timer.minutes > 59) {
 80080fc:	4b11      	ldr	r3, [pc, #68]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 80080fe:	795b      	ldrb	r3, [r3, #5]
 8008100:	2b3b      	cmp	r3, #59	; 0x3b
 8008102:	d91a      	bls.n	800813a <lcd_screen_3_timer_count_up+0x6e>
			Screen3_Timer.minutes -= 60;
 8008104:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 8008106:	795b      	ldrb	r3, [r3, #5]
 8008108:	3b3c      	subs	r3, #60	; 0x3c
 800810a:	b2da      	uxtb	r2, r3
 800810c:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 800810e:	715a      	strb	r2, [r3, #5]
			Screen3_Timer.hours++;
 8008110:	4b0c      	ldr	r3, [pc, #48]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 8008112:	791b      	ldrb	r3, [r3, #4]
 8008114:	3301      	adds	r3, #1
 8008116:	b2da      	uxtb	r2, r3
 8008118:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 800811a:	711a      	strb	r2, [r3, #4]
			if(Screen3_Timer.hours > 23) {
 800811c:	4b09      	ldr	r3, [pc, #36]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 800811e:	791b      	ldrb	r3, [r3, #4]
 8008120:	2b17      	cmp	r3, #23
 8008122:	d90a      	bls.n	800813a <lcd_screen_3_timer_count_up+0x6e>
				Screen3_Timer.hours -= 24;
 8008124:	4b07      	ldr	r3, [pc, #28]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 8008126:	791b      	ldrb	r3, [r3, #4]
 8008128:	3b18      	subs	r3, #24
 800812a:	b2da      	uxtb	r2, r3
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 800812e:	711a      	strb	r2, [r3, #4]
				Screen3_Timer.days++;
 8008130:	4b04      	ldr	r3, [pc, #16]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3301      	adds	r3, #1
 8008136:	4a03      	ldr	r2, [pc, #12]	; (8008144 <lcd_screen_3_timer_count_up+0x78>)
 8008138:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 800813a:	bf00      	nop
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	200148d0 	.word	0x200148d0

08008148 <lcd_screen_3_switch_mode>:

void lcd_screen_3_switch_mode() {
 8008148:	b480      	push	{r7}
 800814a:	af00      	add	r7, sp, #0
	screen3_mode ^= 1;
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <lcd_screen_3_switch_mode+0x1c>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f083 0301 	eor.w	r3, r3, #1
 8008154:	b2da      	uxtb	r2, r3
 8008156:	4b03      	ldr	r3, [pc, #12]	; (8008164 <lcd_screen_3_switch_mode+0x1c>)
 8008158:	701a      	strb	r2, [r3, #0]
}
 800815a:	bf00      	nop
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	2001489c 	.word	0x2001489c

08008168 <lcd_screen_4_rtc_update>:

LCD_Screen3_Mode lcd_screen_3_mode() {
	return screen3_mode;
}

void lcd_screen_4_rtc_update(LCD_Screen4_RTC_t datetime) {
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Screen4_RTC = datetime;
 8008174:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <lcd_screen_4_rtc_update+0x40>)
 8008176:	461a      	mov	r2, r3
 8008178:	1d3b      	adds	r3, r7, #4
 800817a:	cb03      	ldmia	r3!, {r0, r1}
 800817c:	6010      	str	r0, [r2, #0]
 800817e:	6051      	str	r1, [r2, #4]
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	8113      	strh	r3, [r2, #8]
	if(screen4_mode == S4_NORMAL_DISPLAY) Screen4_RTC_Config = datetime;
 8008184:	4b09      	ldr	r3, [pc, #36]	; (80081ac <lcd_screen_4_rtc_update+0x44>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d107      	bne.n	800819c <lcd_screen_4_rtc_update+0x34>
 800818c:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <lcd_screen_4_rtc_update+0x48>)
 800818e:	461a      	mov	r2, r3
 8008190:	1d3b      	adds	r3, r7, #4
 8008192:	cb03      	ldmia	r3!, {r0, r1}
 8008194:	6010      	str	r0, [r2, #0]
 8008196:	6051      	str	r1, [r2, #4]
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	8113      	strh	r3, [r2, #8]
}
 800819c:	bf00      	nop
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	200148a0 	.word	0x200148a0
 80081ac:	200148d9 	.word	0x200148d9
 80081b0:	200148dc 	.word	0x200148dc

080081b4 <lcd_screen_4_switch_mode>:

void lcd_screen_4_switch_mode() {
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
	if(++screen4_mode == S4_No_of_Mode)
 80081b8:	4b08      	ldr	r3, [pc, #32]	; (80081dc <lcd_screen_4_switch_mode+0x28>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	3301      	adds	r3, #1
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <lcd_screen_4_switch_mode+0x28>)
 80081c2:	701a      	strb	r2, [r3, #0]
 80081c4:	4b05      	ldr	r3, [pc, #20]	; (80081dc <lcd_screen_4_switch_mode+0x28>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d102      	bne.n	80081d2 <lcd_screen_4_switch_mode+0x1e>
		screen4_mode = 0;
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <lcd_screen_4_switch_mode+0x28>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	701a      	strb	r2, [r3, #0]
}
 80081d2:	bf00      	nop
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	200148d9 	.word	0x200148d9

080081e0 <lcd_screen_4_mode>:

LCD_Screen4_Mode lcd_screen_4_mode() {
 80081e0:	b480      	push	{r7}
 80081e2:	af00      	add	r7, sp, #0
	return screen4_mode;
 80081e4:	4b03      	ldr	r3, [pc, #12]	; (80081f4 <lcd_screen_4_mode+0x14>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	200148d9 	.word	0x200148d9

080081f8 <lcd_screen_4_next_config_target>:

void lcd_screen_4_next_config_target() {
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
	if(!(Screen4_Config_Target % 2)) {
 80081fc:	4b0c      	ldr	r3, [pc, #48]	; (8008230 <lcd_screen_4_next_config_target+0x38>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10c      	bne.n	8008224 <lcd_screen_4_next_config_target+0x2c>
		Screen4_Config_Target += 2;
 800820a:	4b09      	ldr	r3, [pc, #36]	; (8008230 <lcd_screen_4_next_config_target+0x38>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	3302      	adds	r3, #2
 8008210:	b2da      	uxtb	r2, r3
 8008212:	4b07      	ldr	r3, [pc, #28]	; (8008230 <lcd_screen_4_next_config_target+0x38>)
 8008214:	701a      	strb	r2, [r3, #0]
		if(Screen4_Config_Target == Screen4_No_of_Config_items)
 8008216:	4b06      	ldr	r3, [pc, #24]	; (8008230 <lcd_screen_4_next_config_target+0x38>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b0c      	cmp	r3, #12
 800821c:	d102      	bne.n	8008224 <lcd_screen_4_next_config_target+0x2c>
			Screen4_Config_Target = 0;
 800821e:	4b04      	ldr	r3, [pc, #16]	; (8008230 <lcd_screen_4_next_config_target+0x38>)
 8008220:	2200      	movs	r2, #0
 8008222:	701a      	strb	r2, [r3, #0]
	}
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	20014888 	.word	0x20014888

08008234 <lcd_screen_4_config_target>:

void lcd_screen_4_config_target(Config_Select_t select) {
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	71fb      	strb	r3, [r7, #7]
	if(select == CONFIG_SELECT) {
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d10d      	bne.n	8008260 <lcd_screen_4_config_target+0x2c>
		if(!(Screen4_Config_Target % 2))
 8008244:	4b10      	ldr	r3, [pc, #64]	; (8008288 <lcd_screen_4_config_target+0x54>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d113      	bne.n	800827a <lcd_screen_4_config_target+0x46>
			Screen4_Config_Target++;
 8008252:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <lcd_screen_4_config_target+0x54>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	b2da      	uxtb	r2, r3
 800825a:	4b0b      	ldr	r3, [pc, #44]	; (8008288 <lcd_screen_4_config_target+0x54>)
 800825c:	701a      	strb	r2, [r3, #0]
	} else if(Screen4_Config_Target % 2)
		Screen4_Config_Target--;
}
 800825e:	e00c      	b.n	800827a <lcd_screen_4_config_target+0x46>
	} else if(Screen4_Config_Target % 2)
 8008260:	4b09      	ldr	r3, [pc, #36]	; (8008288 <lcd_screen_4_config_target+0x54>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <lcd_screen_4_config_target+0x46>
		Screen4_Config_Target--;
 800826e:	4b06      	ldr	r3, [pc, #24]	; (8008288 <lcd_screen_4_config_target+0x54>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	3b01      	subs	r3, #1
 8008274:	b2da      	uxtb	r2, r3
 8008276:	4b04      	ldr	r3, [pc, #16]	; (8008288 <lcd_screen_4_config_target+0x54>)
 8008278:	701a      	strb	r2, [r3, #0]
}
 800827a:	bf00      	nop
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20014888 	.word	0x20014888

0800828c <lcd_screen_4_commit_config>:
			Sample_Interval = Sample_Interval_5;
			break;
	}
}

LCD_Screen4_RTC_t lcd_screen_4_commit_config(Config_Commit_t commit) {
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
	if(commit == CONFIG_COMMIT) {
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d110      	bne.n	80082c0 <lcd_screen_4_commit_config+0x34>
		screen4_data = screen4_data_config;
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <lcd_screen_4_commit_config+0x50>)
 80082a0:	4a0f      	ldr	r2, [pc, #60]	; (80082e0 <lcd_screen_4_commit_config+0x54>)
 80082a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80082a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Sample_Interval = Sample_Interval_Config;
 80082a8:	4b0e      	ldr	r3, [pc, #56]	; (80082e4 <lcd_screen_4_commit_config+0x58>)
 80082aa:	781a      	ldrb	r2, [r3, #0]
 80082ac:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <lcd_screen_4_commit_config+0x5c>)
 80082ae:	701a      	strb	r2, [r3, #0]
		Screen4_RTC = Screen4_RTC_Config;
 80082b0:	4b0e      	ldr	r3, [pc, #56]	; (80082ec <lcd_screen_4_commit_config+0x60>)
 80082b2:	4a0f      	ldr	r2, [pc, #60]	; (80082f0 <lcd_screen_4_commit_config+0x64>)
 80082b4:	6810      	ldr	r0, [r2, #0]
 80082b6:	6851      	ldr	r1, [r2, #4]
 80082b8:	6018      	str	r0, [r3, #0]
 80082ba:	6059      	str	r1, [r3, #4]
 80082bc:	8912      	ldrh	r2, [r2, #8]
 80082be:	811a      	strh	r2, [r3, #8]
	}

	lcd_screen_4_switch_mode();
 80082c0:	f7ff ff78 	bl	80081b4 <lcd_screen_4_switch_mode>
	return Screen4_RTC;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a09      	ldr	r2, [pc, #36]	; (80082ec <lcd_screen_4_commit_config+0x60>)
 80082c8:	6810      	ldr	r0, [r2, #0]
 80082ca:	6851      	ldr	r1, [r2, #4]
 80082cc:	6018      	str	r0, [r3, #0]
 80082ce:	6059      	str	r1, [r3, #4]
 80082d0:	8912      	ldrh	r2, [r2, #8]
 80082d2:	811a      	strh	r2, [r3, #8]
}
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	200148bc 	.word	0x200148bc
 80082e0:	200148e8 	.word	0x200148e8
 80082e4:	200148f4 	.word	0x200148f4
 80082e8:	200148d8 	.word	0x200148d8
 80082ec:	200148a0 	.word	0x200148a0
 80082f0:	200148dc 	.word	0x200148dc

080082f4 <lcd_is_busy>:

bool lcd_is_busy() {
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
	return screen3_mode || screen4_mode;
 80082f8:	4b09      	ldr	r3, [pc, #36]	; (8008320 <lcd_is_busy+0x2c>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <lcd_is_busy+0x14>
 8008300:	4b08      	ldr	r3, [pc, #32]	; (8008324 <lcd_is_busy+0x30>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <lcd_is_busy+0x18>
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <lcd_is_busy+0x1a>
 800830c:	2300      	movs	r3, #0
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	b2db      	uxtb	r3, r3
}
 8008314:	4618      	mov	r0, r3
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	2001489c 	.word	0x2001489c
 8008324:	200148d9 	.word	0x200148d9

08008328 <SEGGER_setup>:
void rtc_handler(void* parameters);
void usart_handler(void* parameters);

void LED_Init();

void SEGGER_setup() {
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
	RCC->CFGR = 0
 800832c:	4b08      	ldr	r3, [pc, #32]	; (8008350 <SEGGER_setup+0x28>)
 800832e:	f44f 4214 	mov.w	r2, #37888	; 0x9400
 8008332:	609a      	str	r2, [r3, #8]
			| (1 << 10)
			| (1 << 12)
			| (1 << 15);
	(*(volatile uint32_t*) 0XE0001000) |= (1 << 0);
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <SEGGER_setup+0x2c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a06      	ldr	r2, [pc, #24]	; (8008354 <SEGGER_setup+0x2c>)
 800833a:	f043 0301 	orr.w	r3, r3, #1
 800833e:	6013      	str	r3, [r2, #0]
	SEGGER_UART_init(500000);
 8008340:	4805      	ldr	r0, [pc, #20]	; (8008358 <SEGGER_setup+0x30>)
 8008342:	f7fe ffdd 	bl	8007300 <SEGGER_UART_init>
	SEGGER_SYSVIEW_Conf();
 8008346:	f7fd f827 	bl	8005398 <SEGGER_SYSVIEW_Conf>
}
 800834a:	bf00      	nop
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40023800 	.word	0x40023800
 8008354:	e0001000 	.word	0xe0001000
 8008358:	0007a120 	.word	0x0007a120

0800835c <main>:

int main(void) {
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af02      	add	r7, sp, #8
	SEGGER_setup();
 8008362:	f7ff ffe1 	bl	8008328 <SEGGER_setup>

	LED_Init();
 8008366:	f000 fa39 	bl	80087dc <LED_Init>

	xTaskCreate(lcd_handler, "LCD5110", 2048, NULL, 1, NULL);
 800836a:	2300      	movs	r3, #0
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	2301      	movs	r3, #1
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	2300      	movs	r3, #0
 8008374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008378:	4921      	ldr	r1, [pc, #132]	; (8008400 <main+0xa4>)
 800837a:	4822      	ldr	r0, [pc, #136]	; (8008404 <main+0xa8>)
 800837c:	f7fa fa1e 	bl	80027bc <xTaskCreate>
	xTaskCreate(ade_handler, "ADE7753", 512, NULL, 1, NULL);
 8008380:	2300      	movs	r3, #0
 8008382:	9301      	str	r3, [sp, #4]
 8008384:	2301      	movs	r3, #1
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	2300      	movs	r3, #0
 800838a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800838e:	491e      	ldr	r1, [pc, #120]	; (8008408 <main+0xac>)
 8008390:	481e      	ldr	r0, [pc, #120]	; (800840c <main+0xb0>)
 8008392:	f7fa fa13 	bl	80027bc <xTaskCreate>
	xTaskCreate(keypad_handler, "Keypad", 256, NULL, 1, NULL);
 8008396:	2300      	movs	r3, #0
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	2301      	movs	r3, #1
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	2300      	movs	r3, #0
 80083a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083a4:	491a      	ldr	r1, [pc, #104]	; (8008410 <main+0xb4>)
 80083a6:	481b      	ldr	r0, [pc, #108]	; (8008414 <main+0xb8>)
 80083a8:	f7fa fa08 	bl	80027bc <xTaskCreate>
	xTaskCreate(rtc_handler, "DS1307", 512, NULL, 1, NULL);
 80083ac:	2300      	movs	r3, #0
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	2301      	movs	r3, #1
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	2300      	movs	r3, #0
 80083b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083ba:	4917      	ldr	r1, [pc, #92]	; (8008418 <main+0xbc>)
 80083bc:	4817      	ldr	r0, [pc, #92]	; (800841c <main+0xc0>)
 80083be:	f7fa f9fd 	bl	80027bc <xTaskCreate>
	xTaskCreate(usart_handler, "USART", 512, NULL, 1, NULL);
 80083c2:	2300      	movs	r3, #0
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	2301      	movs	r3, #1
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	2300      	movs	r3, #0
 80083cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083d0:	4913      	ldr	r1, [pc, #76]	; (8008420 <main+0xc4>)
 80083d2:	4814      	ldr	r0, [pc, #80]	; (8008424 <main+0xc8>)
 80083d4:	f7fa f9f2 	bl	80027bc <xTaskCreate>

	keypad_queue_handle = xQueueCreate(5, sizeof(KEYPAD_Button_t));
 80083d8:	2200      	movs	r2, #0
 80083da:	2101      	movs	r1, #1
 80083dc:	2005      	movs	r0, #5
 80083de:	f7f9 fcfb 	bl	8001dd8 <xQueueGenericCreate>
 80083e2:	4603      	mov	r3, r0
 80083e4:	4a10      	ldr	r2, [pc, #64]	; (8008428 <main+0xcc>)
 80083e6:	6013      	str	r3, [r2, #0]
	rtc_queue_handle = xQueueCreate(1, sizeof(LCD_Screen4_RTC_t));
 80083e8:	2200      	movs	r2, #0
 80083ea:	210a      	movs	r1, #10
 80083ec:	2001      	movs	r0, #1
 80083ee:	f7f9 fcf3 	bl	8001dd8 <xQueueGenericCreate>
 80083f2:	4603      	mov	r3, r0
 80083f4:	4a0d      	ldr	r2, [pc, #52]	; (800842c <main+0xd0>)
 80083f6:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 80083f8:	f7fa fb7c 	bl	8002af4 <vTaskStartScheduler>

	while(1);
 80083fc:	e7fe      	b.n	80083fc <main+0xa0>
 80083fe:	bf00      	nop
 8008400:	0800b9dc 	.word	0x0800b9dc
 8008404:	08008431 	.word	0x08008431
 8008408:	0800b9e4 	.word	0x0800b9e4
 800840c:	080085f1 	.word	0x080085f1
 8008410:	0800b9ec 	.word	0x0800b9ec
 8008414:	08008619 	.word	0x08008619
 8008418:	0800b9f4 	.word	0x0800b9f4
 800841c:	080086d1 	.word	0x080086d1
 8008420:	0800b9fc 	.word	0x0800b9fc
 8008424:	080087b9 	.word	0x080087b9
 8008428:	200148f8 	.word	0x200148f8
 800842c:	20014930 	.word	0x20014930

08008430 <lcd_handler>:
	return 0;
}

void lcd_handler(void* parameters) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b08a      	sub	sp, #40	; 0x28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6178      	str	r0, [r7, #20]
	LCD5110_Init(0x37);
 8008438:	2037      	movs	r0, #55	; 0x37
 800843a:	f7f9 f8df 	bl	80015fc <LCD5110_Init>

	memset(&screen1_ade_data, 0, sizeof(screen1_ade_data));
 800843e:	2210      	movs	r2, #16
 8008440:	2100      	movs	r1, #0
 8008442:	4864      	ldr	r0, [pc, #400]	; (80085d4 <lcd_handler+0x1a4>)
 8008444:	f000 fb4a 	bl	8008adc <memset>
	memset(&screen2_ade_data, 0, sizeof(screen2_ade_data));
 8008448:	2210      	movs	r2, #16
 800844a:	2100      	movs	r1, #0
 800844c:	4862      	ldr	r0, [pc, #392]	; (80085d8 <lcd_handler+0x1a8>)
 800844e:	f000 fb45 	bl	8008adc <memset>
	memset(&screen3_ade_data, 0, sizeof(screen3_ade_data));
 8008452:	2208      	movs	r2, #8
 8008454:	2100      	movs	r1, #0
 8008456:	4861      	ldr	r0, [pc, #388]	; (80085dc <lcd_handler+0x1ac>)
 8008458:	f000 fb40 	bl	8008adc <memset>
	memset(&screen4_ade_data, 0, sizeof(screen4_ade_data));
 800845c:	220c      	movs	r2, #12
 800845e:	2100      	movs	r1, #0
 8008460:	485f      	ldr	r0, [pc, #380]	; (80085e0 <lcd_handler+0x1b0>)
 8008462:	f000 fb3b 	bl	8008adc <memset>

	lcd_screen_1_clear();
 8008466:	f7ff fde5 	bl	8008034 <lcd_screen_1_clear>
	lcd_screen_2_clear();
 800846a:	f7ff fdef 	bl	800804c <lcd_screen_2_clear>
	lcd_screen_3_clear();
 800846e:	f7ff fdf9 	bl	8008064 <lcd_screen_3_clear>
	lcd_screen_4_clear();
 8008472:	f7ff fe0f 	bl	8008094 <lcd_screen_4_clear>

	LCD_Screen4_RTC_t rtc_set;
	KEYPAD_Button_t keypad;
	LCD_Screen_t screen = LCD_Screen_4;
 8008476:	2303      	movs	r3, #3
 8008478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	while(1) {
		if(keypad_queue_handle != NULL) {
 800847c:	4b59      	ldr	r3, [pc, #356]	; (80085e4 <lcd_handler+0x1b4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 8096 	beq.w	80085b2 <lcd_handler+0x182>
			if(xQueueReceive(keypad_queue_handle, &keypad, (TickType_t) 10) == pdPASS) {
 8008486:	4b57      	ldr	r3, [pc, #348]	; (80085e4 <lcd_handler+0x1b4>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f107 011b 	add.w	r1, r7, #27
 800848e:	220a      	movs	r2, #10
 8008490:	4618      	mov	r0, r3
 8008492:	f7f9 ff0d 	bl	80022b0 <xQueueReceive>
 8008496:	4603      	mov	r3, r0
 8008498:	2b01      	cmp	r3, #1
 800849a:	f040 808a 	bne.w	80085b2 <lcd_handler+0x182>
				if(lcd_is_busy()) {
 800849e:	f7ff ff29 	bl	80082f4 <lcd_is_busy>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d05a      	beq.n	800855e <lcd_handler+0x12e>
					if(screen == LCD_Screen_3) {
 80084a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d109      	bne.n	80084c4 <lcd_handler+0x94>
						if(keypad == KEYPAD_Button_HASH)
 80084b0:	7efb      	ldrb	r3, [r7, #27]
 80084b2:	2b0b      	cmp	r3, #11
 80084b4:	d101      	bne.n	80084ba <lcd_handler+0x8a>
							lcd_screen_3_clear();
 80084b6:	f7ff fdd5 	bl	8008064 <lcd_screen_3_clear>
						if(keypad == KEYPAD_Button_STAR)
 80084ba:	7efb      	ldrb	r3, [r7, #27]
 80084bc:	2b0a      	cmp	r3, #10
 80084be:	d101      	bne.n	80084c4 <lcd_handler+0x94>
							lcd_screen_3_switch_mode();
 80084c0:	f7ff fe42 	bl	8008148 <lcd_screen_3_switch_mode>
					}
					if(screen == LCD_Screen_4) {
 80084c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d172      	bne.n	80085b2 <lcd_handler+0x182>
						if(lcd_screen_4_mode() == S4_CONFIG_DISPLAY) {
 80084cc:	f7ff fe88 	bl	80081e0 <lcd_screen_4_mode>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d11b      	bne.n	800850e <lcd_handler+0xde>
							if(keypad == KEYPAD_Button_HOLD_D)
 80084d6:	7efb      	ldrb	r3, [r7, #27]
 80084d8:	2b8f      	cmp	r3, #143	; 0x8f
 80084da:	d101      	bne.n	80084e0 <lcd_handler+0xb0>
								lcd_screen_4_switch_mode();
 80084dc:	f7ff fe6a 	bl	80081b4 <lcd_screen_4_switch_mode>
							if(keypad == KEYPAD_Button_D && lcd_screen_4_mode())
 80084e0:	7efb      	ldrb	r3, [r7, #27]
 80084e2:	2b0f      	cmp	r3, #15
 80084e4:	d106      	bne.n	80084f4 <lcd_handler+0xc4>
 80084e6:	f7ff fe7b 	bl	80081e0 <lcd_screen_4_mode>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <lcd_handler+0xc4>
								lcd_screen_4_next_config_target();
 80084f0:	f7ff fe82 	bl	80081f8 <lcd_screen_4_next_config_target>
							if(keypad == KEYPAD_Button_HASH)
 80084f4:	7efb      	ldrb	r3, [r7, #27]
 80084f6:	2b0b      	cmp	r3, #11
 80084f8:	d102      	bne.n	8008500 <lcd_handler+0xd0>
								lcd_screen_4_config_target(CONFIG_SELECT);
 80084fa:	2001      	movs	r0, #1
 80084fc:	f7ff fe9a 	bl	8008234 <lcd_screen_4_config_target>
							if(keypad == KEYPAD_Button_STAR)
 8008500:	7efb      	ldrb	r3, [r7, #27]
 8008502:	2b0a      	cmp	r3, #10
 8008504:	d155      	bne.n	80085b2 <lcd_handler+0x182>
								lcd_screen_4_config_target(CONFIG_DESELECT);
 8008506:	2000      	movs	r0, #0
 8008508:	f7ff fe94 	bl	8008234 <lcd_screen_4_config_target>
 800850c:	e051      	b.n	80085b2 <lcd_handler+0x182>
						} else {
							if(keypad == KEYPAD_Button_HASH) {
 800850e:	7efb      	ldrb	r3, [r7, #27]
 8008510:	2b0b      	cmp	r3, #11
 8008512:	d114      	bne.n	800853e <lcd_handler+0x10e>
								rtc_set = lcd_screen_4_commit_config(CONFIG_COMMIT);
 8008514:	463b      	mov	r3, r7
 8008516:	2101      	movs	r1, #1
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff feb7 	bl	800828c <lcd_screen_4_commit_config>
 800851e:	f107 031c 	add.w	r3, r7, #28
 8008522:	463a      	mov	r2, r7
 8008524:	6810      	ldr	r0, [r2, #0]
 8008526:	6851      	ldr	r1, [r2, #4]
 8008528:	c303      	stmia	r3!, {r0, r1}
 800852a:	8912      	ldrh	r2, [r2, #8]
 800852c:	801a      	strh	r2, [r3, #0]
								xQueueSend(rtc_queue_handle, (void*) &rtc_set, (TickType_t) 0);
 800852e:	4b2e      	ldr	r3, [pc, #184]	; (80085e8 <lcd_handler+0x1b8>)
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	f107 011c 	add.w	r1, r7, #28
 8008536:	2300      	movs	r3, #0
 8008538:	2200      	movs	r2, #0
 800853a:	f7f9 fcd5 	bl	8001ee8 <xQueueGenericSend>
							}
							if(keypad == KEYPAD_Button_STAR)
 800853e:	7efb      	ldrb	r3, [r7, #27]
 8008540:	2b0a      	cmp	r3, #10
 8008542:	d104      	bne.n	800854e <lcd_handler+0x11e>
								lcd_screen_4_commit_config(CONFIG_CANCEL);
 8008544:	463b      	mov	r3, r7
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fe9f 	bl	800828c <lcd_screen_4_commit_config>
							if(keypad == KEYPAD_Button_D) {
 800854e:	7efb      	ldrb	r3, [r7, #27]
 8008550:	2b0f      	cmp	r3, #15
 8008552:	d12e      	bne.n	80085b2 <lcd_handler+0x182>
								lcd_screen_4_switch_mode();
 8008554:	f7ff fe2e 	bl	80081b4 <lcd_screen_4_switch_mode>
								lcd_screen_4_switch_mode();
 8008558:	f7ff fe2c 	bl	80081b4 <lcd_screen_4_switch_mode>
 800855c:	e029      	b.n	80085b2 <lcd_handler+0x182>
							}
						}
					}

				} else {
					if(keypad == KEYPAD_Button_A)
 800855e:	7efb      	ldrb	r3, [r7, #27]
 8008560:	2b0c      	cmp	r3, #12
 8008562:	d102      	bne.n	800856a <lcd_handler+0x13a>
						screen = LCD_Screen_1;
 8008564:	2300      	movs	r3, #0
 8008566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(keypad == KEYPAD_Button_B)
 800856a:	7efb      	ldrb	r3, [r7, #27]
 800856c:	2b0d      	cmp	r3, #13
 800856e:	d102      	bne.n	8008576 <lcd_handler+0x146>
						screen = LCD_Screen_2;
 8008570:	2301      	movs	r3, #1
 8008572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(keypad == KEYPAD_Button_C)
 8008576:	7efb      	ldrb	r3, [r7, #27]
 8008578:	2b0e      	cmp	r3, #14
 800857a:	d102      	bne.n	8008582 <lcd_handler+0x152>
						screen = LCD_Screen_3;
 800857c:	2302      	movs	r3, #2
 800857e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(keypad == KEYPAD_Button_D)
 8008582:	7efb      	ldrb	r3, [r7, #27]
 8008584:	2b0f      	cmp	r3, #15
 8008586:	d102      	bne.n	800858e <lcd_handler+0x15e>
						screen = LCD_Screen_4;
 8008588:	2303      	movs	r3, #3
 800858a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(keypad == KEYPAD_Button_HOLD_C && screen == LCD_Screen_3)
 800858e:	7efb      	ldrb	r3, [r7, #27]
 8008590:	2b8e      	cmp	r3, #142	; 0x8e
 8008592:	d105      	bne.n	80085a0 <lcd_handler+0x170>
 8008594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008598:	2b02      	cmp	r3, #2
 800859a:	d101      	bne.n	80085a0 <lcd_handler+0x170>
						lcd_screen_3_switch_mode();
 800859c:	f7ff fdd4 	bl	8008148 <lcd_screen_3_switch_mode>
					if(keypad == KEYPAD_Button_HOLD_D && screen == LCD_Screen_4)
 80085a0:	7efb      	ldrb	r3, [r7, #27]
 80085a2:	2b8f      	cmp	r3, #143	; 0x8f
 80085a4:	d105      	bne.n	80085b2 <lcd_handler+0x182>
 80085a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d101      	bne.n	80085b2 <lcd_handler+0x182>
						lcd_screen_4_switch_mode();
 80085ae:	f7ff fe01 	bl	80081b4 <lcd_screen_4_switch_mode>
				}
			}
		}

		lcd_screen_refresh(screen);
 80085b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff fd16 	bl	8007fe8 <lcd_screen_refresh>
		vTaskDelay(100);
 80085bc:	2064      	movs	r0, #100	; 0x64
 80085be:	f7fa fa61 	bl	8002a84 <vTaskDelay>
		taskYIELD();
 80085c2:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <lcd_handler+0x1bc>)
 80085c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	f3bf 8f6f 	isb	sy
		if(keypad_queue_handle != NULL) {
 80085d2:	e753      	b.n	800847c <lcd_handler+0x4c>
 80085d4:	20014920 	.word	0x20014920
 80085d8:	20014910 	.word	0x20014910
 80085dc:	20014908 	.word	0x20014908
 80085e0:	200148fc 	.word	0x200148fc
 80085e4:	200148f8 	.word	0x200148f8
 80085e8:	20014930 	.word	0x20014930
 80085ec:	e000ed04 	.word	0xe000ed04

080085f0 <ade_handler>:
	}
}

void ade_handler(void* parameters) {
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	ADE_Init();
 80085f8:	f7f8 fb36 	bl	8000c68 <ADE_Init>

	while(1) {
		vTaskDelay(100);
 80085fc:	2064      	movs	r0, #100	; 0x64
 80085fe:	f7fa fa41 	bl	8002a84 <vTaskDelay>
		taskYIELD();
 8008602:	4b04      	ldr	r3, [pc, #16]	; (8008614 <ade_handler+0x24>)
 8008604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	f3bf 8f6f 	isb	sy
		vTaskDelay(100);
 8008612:	e7f3      	b.n	80085fc <ade_handler+0xc>
 8008614:	e000ed04 	.word	0xe000ed04

08008618 <keypad_handler>:
	}
}

void keypad_handler(void* parameters) {
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	KEYPAD_Init(KEYPAD_Type_Large);
 8008620:	2000      	movs	r0, #0
 8008622:	f7f8 fe0b 	bl	800123c <KEYPAD_Init>
	KEYPAD_Button_t Keypad_Hold_Button, Keypad_Button, Keypad_prev = KEYPAD_NOPRESSED;
 8008626:	23ff      	movs	r3, #255	; 0xff
 8008628:	727b      	strb	r3, [r7, #9]
	int hold_timeout = 600;
 800862a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800862e:	60fb      	str	r3, [r7, #12]

	while(1) {
		KEYPAD_Update();
 8008630:	f7f8 ff6a 	bl	8001508 <KEYPAD_Update>
		Keypad_Button = KEYPAD_Read();
 8008634:	f7f8 fe74 	bl	8001320 <KEYPAD_Read>
 8008638:	4603      	mov	r3, r0
 800863a:	72fb      	strb	r3, [r7, #11]

		if(Keypad_Button != KEYPAD_NOPRESSED && Keypad_Button == Keypad_prev) {
 800863c:	7afb      	ldrb	r3, [r7, #11]
 800863e:	2bff      	cmp	r3, #255	; 0xff
 8008640:	d01f      	beq.n	8008682 <keypad_handler+0x6a>
 8008642:	7a7b      	ldrb	r3, [r7, #9]
 8008644:	7afa      	ldrb	r2, [r7, #11]
 8008646:	429a      	cmp	r2, r3
 8008648:	d11b      	bne.n	8008682 <keypad_handler+0x6a>
			if(hold_timeout > 0) hold_timeout--;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	dd03      	ble.n	8008658 <keypad_handler+0x40>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3b01      	subs	r3, #1
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	e027      	b.n	80086a8 <keypad_handler+0x90>
			else if (!hold_timeout) {
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d124      	bne.n	80086a8 <keypad_handler+0x90>
				hold_timeout--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3b01      	subs	r3, #1
 8008662:	60fb      	str	r3, [r7, #12]
				Keypad_Hold_Button = KEYPAD_Hold_Button(Keypad_Button);
 8008664:	7afb      	ldrb	r3, [r7, #11]
 8008666:	4618      	mov	r0, r3
 8008668:	f7f8 ff3e 	bl	80014e8 <KEYPAD_Hold_Button>
 800866c:	4603      	mov	r3, r0
 800866e:	72bb      	strb	r3, [r7, #10]
				xQueueSend(keypad_queue_handle, (void*) &Keypad_Hold_Button, (TickType_t) 0);
 8008670:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <keypad_handler+0xb0>)
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	f107 010a 	add.w	r1, r7, #10
 8008678:	2300      	movs	r3, #0
 800867a:	2200      	movs	r2, #0
 800867c:	f7f9 fc34 	bl	8001ee8 <xQueueGenericSend>
			if(hold_timeout > 0) hold_timeout--;
 8008680:	e012      	b.n	80086a8 <keypad_handler+0x90>
			}
		} else if(Keypad_prev != KEYPAD_NOPRESSED && hold_timeout > 0)
 8008682:	7a7b      	ldrb	r3, [r7, #9]
 8008684:	2bff      	cmp	r3, #255	; 0xff
 8008686:	d00b      	beq.n	80086a0 <keypad_handler+0x88>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	dd08      	ble.n	80086a0 <keypad_handler+0x88>
			xQueueSend(keypad_queue_handle, (void*) &Keypad_prev, (TickType_t) 0);
 800868e:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <keypad_handler+0xb0>)
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	f107 0109 	add.w	r1, r7, #9
 8008696:	2300      	movs	r3, #0
 8008698:	2200      	movs	r2, #0
 800869a:	f7f9 fc25 	bl	8001ee8 <xQueueGenericSend>
 800869e:	e004      	b.n	80086aa <keypad_handler+0x92>
		else hold_timeout = 600;
 80086a0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	e000      	b.n	80086aa <keypad_handler+0x92>
			if(hold_timeout > 0) hold_timeout--;
 80086a8:	bf00      	nop

		Keypad_prev = Keypad_Button;
 80086aa:	7afb      	ldrb	r3, [r7, #11]
 80086ac:	727b      	strb	r3, [r7, #9]
		vTaskDelay(5);
 80086ae:	2005      	movs	r0, #5
 80086b0:	f7fa f9e8 	bl	8002a84 <vTaskDelay>
		taskYIELD();
 80086b4:	4b05      	ldr	r3, [pc, #20]	; (80086cc <keypad_handler+0xb4>)
 80086b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	f3bf 8f6f 	isb	sy
		KEYPAD_Update();
 80086c4:	e7b4      	b.n	8008630 <keypad_handler+0x18>
 80086c6:	bf00      	nop
 80086c8:	200148f8 	.word	0x200148f8
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <rtc_handler>:
	}
}

void rtc_handler(void* parameters) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	ds1307_init();
 80086d8:	f7f8 fb98 	bl	8000e0c <ds1307_init>
	RTC_time_t rtc_time_prev;
	LCD_Screen4_RTC_t screen4_rtc;

	while(1) {

		if(rtc_queue_handle != NULL) {
 80086dc:	4b34      	ldr	r3, [pc, #208]	; (80087b0 <rtc_handler+0xe0>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d015      	beq.n	8008710 <rtc_handler+0x40>
			if(xQueueReceive(rtc_queue_handle, &screen4_rtc, (TickType_t) 10) == pdPASS) {
 80086e4:	4b32      	ldr	r3, [pc, #200]	; (80087b0 <rtc_handler+0xe0>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f107 0108 	add.w	r1, r7, #8
 80086ec:	220a      	movs	r2, #10
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7f9 fdde 	bl	80022b0 <xQueueReceive>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d10a      	bne.n	8008710 <rtc_handler+0x40>
				ds1307_set_current_time(&screen4_rtc.time);
 80086fa:	f107 0308 	add.w	r3, r7, #8
 80086fe:	3305      	adds	r3, #5
 8008700:	4618      	mov	r0, r3
 8008702:	f7f8 fb91 	bl	8000e28 <ds1307_set_current_time>
				ds1307_set_current_date(&screen4_rtc.date);
 8008706:	f107 0308 	add.w	r3, r7, #8
 800870a:	4618      	mov	r0, r3
 800870c:	f7f8 fbd5 	bl	8000eba <ds1307_set_current_date>
			}
		}

		ds1307_get_current_time(&screen4_rtc.time);
 8008710:	f107 0308 	add.w	r3, r7, #8
 8008714:	3305      	adds	r3, #5
 8008716:	4618      	mov	r0, r3
 8008718:	f7f8 fbff 	bl	8000f1a <ds1307_get_current_time>
		ds1307_get_current_date(&screen4_rtc.date);
 800871c:	f107 0308 	add.w	r3, r7, #8
 8008720:	4618      	mov	r0, r3
 8008722:	f7f8 fc6e 	bl	8001002 <ds1307_get_current_date>

		if(screen4_rtc.date.date_validity && screen4_rtc.time.time_validity) {
 8008726:	7b3b      	ldrb	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d02d      	beq.n	8008788 <rtc_handler+0xb8>
 800872c:	7c7b      	ldrb	r3, [r7, #17]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d02a      	beq.n	8008788 <rtc_handler+0xb8>
			time_in_sec = screen4_rtc.time.minutes*60 + screen4_rtc.time.seconds;
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	b29b      	uxth	r3, r3
 8008736:	461a      	mov	r2, r3
 8008738:	0112      	lsls	r2, r2, #4
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	b29a      	uxth	r2, r3
 8008740:	7b7b      	ldrb	r3, [r7, #13]
 8008742:	b29b      	uxth	r3, r3
 8008744:	4413      	add	r3, r2
 8008746:	83fb      	strh	r3, [r7, #30]
			time_in_sec_prev = rtc_time_prev.minutes*60 + rtc_time_prev.seconds;
 8008748:	7d7b      	ldrb	r3, [r7, #21]
 800874a:	b29b      	uxth	r3, r3
 800874c:	461a      	mov	r2, r3
 800874e:	0112      	lsls	r2, r2, #4
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	b29a      	uxth	r2, r3
 8008756:	7d3b      	ldrb	r3, [r7, #20]
 8008758:	b29b      	uxth	r3, r3
 800875a:	4413      	add	r3, r2
 800875c:	83bb      	strh	r3, [r7, #28]

			if(time_in_sec < time_in_sec_prev) time_in_sec += 3600;
 800875e:	8bfa      	ldrh	r2, [r7, #30]
 8008760:	8bbb      	ldrh	r3, [r7, #28]
 8008762:	429a      	cmp	r2, r3
 8008764:	d203      	bcs.n	800876e <rtc_handler+0x9e>
 8008766:	8bfb      	ldrh	r3, [r7, #30]
 8008768:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800876c:	83fb      	strh	r3, [r7, #30]
			if(time_in_sec - time_in_sec_prev == 1) lcd_screen_3_timer_count_up();
 800876e:	8bfa      	ldrh	r2, [r7, #30]
 8008770:	8bbb      	ldrh	r3, [r7, #28]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b01      	cmp	r3, #1
 8008776:	d101      	bne.n	800877c <rtc_handler+0xac>
 8008778:	f7ff fca8 	bl	80080cc <lcd_screen_3_timer_count_up>
			lcd_screen_4_rtc_update(screen4_rtc);
 800877c:	f107 0308 	add.w	r3, r7, #8
 8008780:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008784:	f7ff fcf0 	bl	8008168 <lcd_screen_4_rtc_update>
		}

		rtc_time_prev = screen4_rtc.time;
 8008788:	f107 0314 	add.w	r3, r7, #20
 800878c:	f107 020d 	add.w	r2, r7, #13
 8008790:	6810      	ldr	r0, [r2, #0]
 8008792:	6018      	str	r0, [r3, #0]
 8008794:	7912      	ldrb	r2, [r2, #4]
 8008796:	711a      	strb	r2, [r3, #4]

		vTaskDelay(200);
 8008798:	20c8      	movs	r0, #200	; 0xc8
 800879a:	f7fa f973 	bl	8002a84 <vTaskDelay>
		taskYIELD();
 800879e:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <rtc_handler+0xe4>)
 80087a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	f3bf 8f6f 	isb	sy
		if(rtc_queue_handle != NULL) {
 80087ae:	e795      	b.n	80086dc <rtc_handler+0xc>
 80087b0:	20014930 	.word	0x20014930
 80087b4:	e000ed04 	.word	0xe000ed04

080087b8 <usart_handler>:
	}
}

void usart_handler(void* parameters) {
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

	while(1) {
		vTaskDelay(100);
 80087c0:	2064      	movs	r0, #100	; 0x64
 80087c2:	f7fa f95f 	bl	8002a84 <vTaskDelay>
		taskYIELD();
 80087c6:	4b04      	ldr	r3, [pc, #16]	; (80087d8 <usart_handler+0x20>)
 80087c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	f3bf 8f6f 	isb	sy
		vTaskDelay(100);
 80087d6:	e7f3      	b.n	80087c0 <usart_handler+0x8>
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <LED_Init>:
	}
}

void LED_Init() {
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = PORT_LED;
 80087e2:	4b17      	ldr	r3, [pc, #92]	; (8008840 <LED_Init+0x64>)
 80087e4:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80087e6:	2301      	movs	r3, #1
 80087e8:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80087ea:	2302      	movs	r3, #2
 80087ec:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80087ee:	2300      	movs	r3, #0
 80087f0:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80087f2:	2300      	movs	r3, #0
 80087f4:	72fb      	strb	r3, [r7, #11]

//	Red LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_R_LED;
 80087f6:	2301      	movs	r3, #1
 80087f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 80087fa:	1d3b      	adds	r3, r7, #4
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fb fed1 	bl	80045a4 <GPIO_Init>

//	Green LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_G_LED;
 8008802:	2303      	movs	r3, #3
 8008804:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8008806:	1d3b      	adds	r3, r7, #4
 8008808:	4618      	mov	r0, r3
 800880a:	f7fb fecb 	bl	80045a4 <GPIO_Init>

//	Blue LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_B_LED;
 800880e:	2305      	movs	r3, #5
 8008810:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8008812:	1d3b      	adds	r3, r7, #4
 8008814:	4618      	mov	r0, r3
 8008816:	f7fb fec5 	bl	80045a4 <GPIO_Init>

	R_LED_OFF;
 800881a:	2201      	movs	r2, #1
 800881c:	2101      	movs	r1, #1
 800881e:	4808      	ldr	r0, [pc, #32]	; (8008840 <LED_Init+0x64>)
 8008820:	f7fc f872 	bl	8004908 <GPIO_WriteToOutputPin>
	G_LED_OFF;
 8008824:	2201      	movs	r2, #1
 8008826:	2103      	movs	r1, #3
 8008828:	4805      	ldr	r0, [pc, #20]	; (8008840 <LED_Init+0x64>)
 800882a:	f7fc f86d 	bl	8004908 <GPIO_WriteToOutputPin>
	B_LED_OFF;
 800882e:	2201      	movs	r2, #1
 8008830:	2105      	movs	r1, #5
 8008832:	4803      	ldr	r0, [pc, #12]	; (8008840 <LED_Init+0x64>)
 8008834:	f7fc f868 	bl	8004908 <GPIO_WriteToOutputPin>

//	R_LED_ON;
//	G_LED_ON;
//	B_LED_ON;
}
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40021000 	.word	0x40021000

08008844 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
    uint32_t pending = EXTI->PR;
 800884a:	4b16      	ldr	r3, [pc, #88]	; (80088a4 <EXTI15_10_IRQHandler+0x60>)
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	607b      	str	r3, [r7, #4]

    if(pending & (1 << PIN_SAG)) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <EXTI15_10_IRQHandler+0x22>
        EXTI->PR |= 1 << PIN_SAG;		// clear pending flag, otherwise we'd get endless interrupts
 800885a:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <EXTI15_10_IRQHandler+0x60>)
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	4a11      	ldr	r2, [pc, #68]	; (80088a4 <EXTI15_10_IRQHandler+0x60>)
 8008860:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008864:	6153      	str	r3, [r2, #20]
        // handle pin SAG here
    }

    if(pending & (1 << PIN_ZX_IT)) {
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800886c:	2b00      	cmp	r3, #0
 800886e:	d005      	beq.n	800887c <EXTI15_10_IRQHandler+0x38>
        EXTI->PR |= 1 << PIN_ZX_IT;		// clear pending flag, otherwise we'd get endless interrupts
 8008870:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <EXTI15_10_IRQHandler+0x60>)
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	4a0b      	ldr	r2, [pc, #44]	; (80088a4 <EXTI15_10_IRQHandler+0x60>)
 8008876:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800887a:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
    }

    if(pending & (1 << PIN_IRQ_IT)) {
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <EXTI15_10_IRQHandler+0x58>
        EXTI->PR |= 1 << PIN_IRQ_IT;	// clear pending flag, otherwise we'd get endless interrupts
 8008886:	4b07      	ldr	r3, [pc, #28]	; (80088a4 <EXTI15_10_IRQHandler+0x60>)
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	4a06      	ldr	r2, [pc, #24]	; (80088a4 <EXTI15_10_IRQHandler+0x60>)
 800888c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008890:	6153      	str	r3, [r2, #20]
        // handle pin I here
        uint32_t rststatus = ADE_ReadData(RSTSTATUS, 2);
 8008892:	2102      	movs	r1, #2
 8008894:	200c      	movs	r0, #12
 8008896:	f7f8 fa13 	bl	8000cc0 <ADE_ReadData>
 800889a:	6038      	str	r0, [r7, #0]

        if(rststatus & (1 << IRQ_PKI)) {

		}
    }
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	40013c00 	.word	0x40013c00

080088a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
	return 1;
 80088ac:	2301      	movs	r3, #1
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <_kill>:

int _kill(int pid, int sig)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80088c2:	f000 f8c5 	bl	8008a50 <__errno>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2216      	movs	r2, #22
 80088ca:	601a      	str	r2, [r3, #0]
	return -1;
 80088cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <_exit>:

void _exit (int status)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80088e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff ffe7 	bl	80088b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80088ea:	e7fe      	b.n	80088ea <_exit+0x12>

080088ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	e00a      	b.n	8008914 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80088fe:	f3af 8000 	nop.w
 8008902:	4601      	mov	r1, r0
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	60ba      	str	r2, [r7, #8]
 800890a:	b2ca      	uxtb	r2, r1
 800890c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	3301      	adds	r3, #1
 8008912:	617b      	str	r3, [r7, #20]
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	dbf0      	blt.n	80088fe <_read+0x12>
	}

return len;
 800891c:	687b      	ldr	r3, [r7, #4]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
	return -1;
 800892e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800894e:	605a      	str	r2, [r3, #4]
	return 0;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <_isatty>:

int _isatty(int file)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
	return 1;
 8008966:	2301      	movs	r3, #1
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
	return 0;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008998:	4a14      	ldr	r2, [pc, #80]	; (80089ec <_sbrk+0x5c>)
 800899a:	4b15      	ldr	r3, [pc, #84]	; (80089f0 <_sbrk+0x60>)
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80089a4:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <_sbrk+0x64>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d102      	bne.n	80089b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80089ac:	4b11      	ldr	r3, [pc, #68]	; (80089f4 <_sbrk+0x64>)
 80089ae:	4a12      	ldr	r2, [pc, #72]	; (80089f8 <_sbrk+0x68>)
 80089b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80089b2:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <_sbrk+0x64>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4413      	add	r3, r2
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d207      	bcs.n	80089d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80089c0:	f000 f846 	bl	8008a50 <__errno>
 80089c4:	4603      	mov	r3, r0
 80089c6:	220c      	movs	r2, #12
 80089c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80089ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089ce:	e009      	b.n	80089e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80089d0:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <_sbrk+0x64>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80089d6:	4b07      	ldr	r3, [pc, #28]	; (80089f4 <_sbrk+0x64>)
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	4a05      	ldr	r2, [pc, #20]	; (80089f4 <_sbrk+0x64>)
 80089e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80089e2:	68fb      	ldr	r3, [r7, #12]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	20020000 	.word	0x20020000
 80089f0:	00000400 	.word	0x00000400
 80089f4:	2001456c 	.word	0x2001456c
 80089f8:	20014948 	.word	0x20014948

080089fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80089fc:	480d      	ldr	r0, [pc, #52]	; (8008a34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80089fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008a00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008a04:	480c      	ldr	r0, [pc, #48]	; (8008a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8008a06:	490d      	ldr	r1, [pc, #52]	; (8008a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008a08:	4a0d      	ldr	r2, [pc, #52]	; (8008a40 <LoopForever+0xe>)
  movs r3, #0
 8008a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a0c:	e002      	b.n	8008a14 <LoopCopyDataInit>

08008a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a12:	3304      	adds	r3, #4

08008a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a18:	d3f9      	bcc.n	8008a0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a1a:	4a0a      	ldr	r2, [pc, #40]	; (8008a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008a1c:	4c0a      	ldr	r4, [pc, #40]	; (8008a48 <LoopForever+0x16>)
  movs r3, #0
 8008a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a20:	e001      	b.n	8008a26 <LoopFillZerobss>

08008a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a24:	3204      	adds	r2, #4

08008a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a28:	d3fb      	bcc.n	8008a22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008a2a:	f000 f817 	bl	8008a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008a2e:	f7ff fc95 	bl	800835c <main>

08008a32 <LoopForever>:

LoopForever:
    b LoopForever
 8008a32:	e7fe      	b.n	8008a32 <LoopForever>
  ldr   r0, =_estack
 8008a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008a3c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8008a40:	0800c18c 	.word	0x0800c18c
  ldr r2, =_sbss
 8008a44:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8008a48:	20014944 	.word	0x20014944

08008a4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008a4c:	e7fe      	b.n	8008a4c <ADC_IRQHandler>
	...

08008a50 <__errno>:
 8008a50:	4b01      	ldr	r3, [pc, #4]	; (8008a58 <__errno+0x8>)
 8008a52:	6818      	ldr	r0, [r3, #0]
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	2000003c 	.word	0x2000003c

08008a5c <__libc_init_array>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	4d0d      	ldr	r5, [pc, #52]	; (8008a94 <__libc_init_array+0x38>)
 8008a60:	4c0d      	ldr	r4, [pc, #52]	; (8008a98 <__libc_init_array+0x3c>)
 8008a62:	1b64      	subs	r4, r4, r5
 8008a64:	10a4      	asrs	r4, r4, #2
 8008a66:	2600      	movs	r6, #0
 8008a68:	42a6      	cmp	r6, r4
 8008a6a:	d109      	bne.n	8008a80 <__libc_init_array+0x24>
 8008a6c:	4d0b      	ldr	r5, [pc, #44]	; (8008a9c <__libc_init_array+0x40>)
 8008a6e:	4c0c      	ldr	r4, [pc, #48]	; (8008aa0 <__libc_init_array+0x44>)
 8008a70:	f002 feb2 	bl	800b7d8 <_init>
 8008a74:	1b64      	subs	r4, r4, r5
 8008a76:	10a4      	asrs	r4, r4, #2
 8008a78:	2600      	movs	r6, #0
 8008a7a:	42a6      	cmp	r6, r4
 8008a7c:	d105      	bne.n	8008a8a <__libc_init_array+0x2e>
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a84:	4798      	blx	r3
 8008a86:	3601      	adds	r6, #1
 8008a88:	e7ee      	b.n	8008a68 <__libc_init_array+0xc>
 8008a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a8e:	4798      	blx	r3
 8008a90:	3601      	adds	r6, #1
 8008a92:	e7f2      	b.n	8008a7a <__libc_init_array+0x1e>
 8008a94:	0800c184 	.word	0x0800c184
 8008a98:	0800c184 	.word	0x0800c184
 8008a9c:	0800c184 	.word	0x0800c184
 8008aa0:	0800c188 	.word	0x0800c188

08008aa4 <memcmp>:
 8008aa4:	b530      	push	{r4, r5, lr}
 8008aa6:	3901      	subs	r1, #1
 8008aa8:	2400      	movs	r4, #0
 8008aaa:	42a2      	cmp	r2, r4
 8008aac:	d101      	bne.n	8008ab2 <memcmp+0xe>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	e005      	b.n	8008abe <memcmp+0x1a>
 8008ab2:	5d03      	ldrb	r3, [r0, r4]
 8008ab4:	3401      	adds	r4, #1
 8008ab6:	5d0d      	ldrb	r5, [r1, r4]
 8008ab8:	42ab      	cmp	r3, r5
 8008aba:	d0f6      	beq.n	8008aaa <memcmp+0x6>
 8008abc:	1b58      	subs	r0, r3, r5
 8008abe:	bd30      	pop	{r4, r5, pc}

08008ac0 <memcpy>:
 8008ac0:	440a      	add	r2, r1
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ac8:	d100      	bne.n	8008acc <memcpy+0xc>
 8008aca:	4770      	bx	lr
 8008acc:	b510      	push	{r4, lr}
 8008ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	d1f9      	bne.n	8008ace <memcpy+0xe>
 8008ada:	bd10      	pop	{r4, pc}

08008adc <memset>:
 8008adc:	4402      	add	r2, r0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d100      	bne.n	8008ae6 <memset+0xa>
 8008ae4:	4770      	bx	lr
 8008ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8008aea:	e7f9      	b.n	8008ae0 <memset+0x4>

08008aec <__cvt>:
 8008aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	b088      	sub	sp, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	461d      	mov	r5, r3
 8008af6:	4614      	mov	r4, r2
 8008af8:	bfbc      	itt	lt
 8008afa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008afe:	4614      	movlt	r4, r2
 8008b00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b02:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008b04:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008b08:	bfb6      	itet	lt
 8008b0a:	461d      	movlt	r5, r3
 8008b0c:	2300      	movge	r3, #0
 8008b0e:	232d      	movlt	r3, #45	; 0x2d
 8008b10:	7013      	strb	r3, [r2, #0]
 8008b12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b14:	f023 0820 	bic.w	r8, r3, #32
 8008b18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b1c:	d005      	beq.n	8008b2a <__cvt+0x3e>
 8008b1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b22:	d100      	bne.n	8008b26 <__cvt+0x3a>
 8008b24:	3601      	adds	r6, #1
 8008b26:	2302      	movs	r3, #2
 8008b28:	e000      	b.n	8008b2c <__cvt+0x40>
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	aa07      	add	r2, sp, #28
 8008b2e:	9204      	str	r2, [sp, #16]
 8008b30:	aa06      	add	r2, sp, #24
 8008b32:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008b36:	e9cd 3600 	strd	r3, r6, [sp]
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	462b      	mov	r3, r5
 8008b3e:	f000 fcef 	bl	8009520 <_dtoa_r>
 8008b42:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b46:	4607      	mov	r7, r0
 8008b48:	d102      	bne.n	8008b50 <__cvt+0x64>
 8008b4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b4c:	07db      	lsls	r3, r3, #31
 8008b4e:	d522      	bpl.n	8008b96 <__cvt+0xaa>
 8008b50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b54:	eb07 0906 	add.w	r9, r7, r6
 8008b58:	d110      	bne.n	8008b7c <__cvt+0x90>
 8008b5a:	783b      	ldrb	r3, [r7, #0]
 8008b5c:	2b30      	cmp	r3, #48	; 0x30
 8008b5e:	d10a      	bne.n	8008b76 <__cvt+0x8a>
 8008b60:	2200      	movs	r2, #0
 8008b62:	2300      	movs	r3, #0
 8008b64:	4620      	mov	r0, r4
 8008b66:	4629      	mov	r1, r5
 8008b68:	f7f8 f80e 	bl	8000b88 <__aeabi_dcmpeq>
 8008b6c:	b918      	cbnz	r0, 8008b76 <__cvt+0x8a>
 8008b6e:	f1c6 0601 	rsb	r6, r6, #1
 8008b72:	f8ca 6000 	str.w	r6, [sl]
 8008b76:	f8da 3000 	ldr.w	r3, [sl]
 8008b7a:	4499      	add	r9, r3
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	4620      	mov	r0, r4
 8008b82:	4629      	mov	r1, r5
 8008b84:	f7f8 f800 	bl	8000b88 <__aeabi_dcmpeq>
 8008b88:	b108      	cbz	r0, 8008b8e <__cvt+0xa2>
 8008b8a:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b8e:	2230      	movs	r2, #48	; 0x30
 8008b90:	9b07      	ldr	r3, [sp, #28]
 8008b92:	454b      	cmp	r3, r9
 8008b94:	d307      	bcc.n	8008ba6 <__cvt+0xba>
 8008b96:	9b07      	ldr	r3, [sp, #28]
 8008b98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b9a:	1bdb      	subs	r3, r3, r7
 8008b9c:	4638      	mov	r0, r7
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	b008      	add	sp, #32
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	1c59      	adds	r1, r3, #1
 8008ba8:	9107      	str	r1, [sp, #28]
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	e7f0      	b.n	8008b90 <__cvt+0xa4>

08008bae <__exponent>:
 8008bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	bfb8      	it	lt
 8008bb6:	4249      	neglt	r1, r1
 8008bb8:	f803 2b02 	strb.w	r2, [r3], #2
 8008bbc:	bfb4      	ite	lt
 8008bbe:	222d      	movlt	r2, #45	; 0x2d
 8008bc0:	222b      	movge	r2, #43	; 0x2b
 8008bc2:	2909      	cmp	r1, #9
 8008bc4:	7042      	strb	r2, [r0, #1]
 8008bc6:	dd2a      	ble.n	8008c1e <__exponent+0x70>
 8008bc8:	f10d 0407 	add.w	r4, sp, #7
 8008bcc:	46a4      	mov	ip, r4
 8008bce:	270a      	movs	r7, #10
 8008bd0:	46a6      	mov	lr, r4
 8008bd2:	460a      	mov	r2, r1
 8008bd4:	fb91 f6f7 	sdiv	r6, r1, r7
 8008bd8:	fb07 1516 	mls	r5, r7, r6, r1
 8008bdc:	3530      	adds	r5, #48	; 0x30
 8008bde:	2a63      	cmp	r2, #99	; 0x63
 8008be0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008be4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008be8:	4631      	mov	r1, r6
 8008bea:	dcf1      	bgt.n	8008bd0 <__exponent+0x22>
 8008bec:	3130      	adds	r1, #48	; 0x30
 8008bee:	f1ae 0502 	sub.w	r5, lr, #2
 8008bf2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008bf6:	1c44      	adds	r4, r0, #1
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4561      	cmp	r1, ip
 8008bfc:	d30a      	bcc.n	8008c14 <__exponent+0x66>
 8008bfe:	f10d 0209 	add.w	r2, sp, #9
 8008c02:	eba2 020e 	sub.w	r2, r2, lr
 8008c06:	4565      	cmp	r5, ip
 8008c08:	bf88      	it	hi
 8008c0a:	2200      	movhi	r2, #0
 8008c0c:	4413      	add	r3, r2
 8008c0e:	1a18      	subs	r0, r3, r0
 8008c10:	b003      	add	sp, #12
 8008c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c18:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c1c:	e7ed      	b.n	8008bfa <__exponent+0x4c>
 8008c1e:	2330      	movs	r3, #48	; 0x30
 8008c20:	3130      	adds	r1, #48	; 0x30
 8008c22:	7083      	strb	r3, [r0, #2]
 8008c24:	70c1      	strb	r1, [r0, #3]
 8008c26:	1d03      	adds	r3, r0, #4
 8008c28:	e7f1      	b.n	8008c0e <__exponent+0x60>
	...

08008c2c <_printf_float>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	ed2d 8b02 	vpush	{d8}
 8008c34:	b091      	sub	sp, #68	; 0x44
 8008c36:	460c      	mov	r4, r1
 8008c38:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008c3c:	4616      	mov	r6, r2
 8008c3e:	461f      	mov	r7, r3
 8008c40:	4605      	mov	r5, r0
 8008c42:	f001 fa59 	bl	800a0f8 <_localeconv_r>
 8008c46:	f8d0 a000 	ldr.w	sl, [r0]
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	f7f7 fb1a 	bl	8000284 <strlen>
 8008c50:	2300      	movs	r3, #0
 8008c52:	930e      	str	r3, [sp, #56]	; 0x38
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	9309      	str	r3, [sp, #36]	; 0x24
 8008c58:	f8d8 3000 	ldr.w	r3, [r8]
 8008c5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c60:	3307      	adds	r3, #7
 8008c62:	f023 0307 	bic.w	r3, r3, #7
 8008c66:	f103 0208 	add.w	r2, r3, #8
 8008c6a:	f8c8 2000 	str.w	r2, [r8]
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c80:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008c84:	ee08 0a10 	vmov	s16, r0
 8008c88:	4ba0      	ldr	r3, [pc, #640]	; (8008f0c <_printf_float+0x2e0>)
 8008c8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c92:	f7f7 ffab 	bl	8000bec <__aeabi_dcmpun>
 8008c96:	bb88      	cbnz	r0, 8008cfc <_printf_float+0xd0>
 8008c98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c9c:	4b9b      	ldr	r3, [pc, #620]	; (8008f0c <_printf_float+0x2e0>)
 8008c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ca2:	f7f7 ff85 	bl	8000bb0 <__aeabi_dcmple>
 8008ca6:	bb48      	cbnz	r0, 8008cfc <_printf_float+0xd0>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2300      	movs	r3, #0
 8008cac:	4640      	mov	r0, r8
 8008cae:	4649      	mov	r1, r9
 8008cb0:	f7f7 ff74 	bl	8000b9c <__aeabi_dcmplt>
 8008cb4:	b110      	cbz	r0, 8008cbc <_printf_float+0x90>
 8008cb6:	232d      	movs	r3, #45	; 0x2d
 8008cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cbc:	4b94      	ldr	r3, [pc, #592]	; (8008f10 <_printf_float+0x2e4>)
 8008cbe:	4895      	ldr	r0, [pc, #596]	; (8008f14 <_printf_float+0x2e8>)
 8008cc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008cc4:	bf94      	ite	ls
 8008cc6:	4698      	movls	r8, r3
 8008cc8:	4680      	movhi	r8, r0
 8008cca:	2303      	movs	r3, #3
 8008ccc:	6123      	str	r3, [r4, #16]
 8008cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd0:	f023 0304 	bic.w	r3, r3, #4
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	f04f 0900 	mov.w	r9, #0
 8008cda:	9700      	str	r7, [sp, #0]
 8008cdc:	4633      	mov	r3, r6
 8008cde:	aa0f      	add	r2, sp, #60	; 0x3c
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 f9da 	bl	800909c <_printf_common>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f040 8092 	bne.w	8008e12 <_printf_float+0x1e6>
 8008cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cf2:	b011      	add	sp, #68	; 0x44
 8008cf4:	ecbd 8b02 	vpop	{d8}
 8008cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	464b      	mov	r3, r9
 8008d00:	4640      	mov	r0, r8
 8008d02:	4649      	mov	r1, r9
 8008d04:	f7f7 ff72 	bl	8000bec <__aeabi_dcmpun>
 8008d08:	b140      	cbz	r0, 8008d1c <_printf_float+0xf0>
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bfbc      	itt	lt
 8008d10:	232d      	movlt	r3, #45	; 0x2d
 8008d12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d16:	4880      	ldr	r0, [pc, #512]	; (8008f18 <_printf_float+0x2ec>)
 8008d18:	4b80      	ldr	r3, [pc, #512]	; (8008f1c <_printf_float+0x2f0>)
 8008d1a:	e7d1      	b.n	8008cc0 <_printf_float+0x94>
 8008d1c:	6863      	ldr	r3, [r4, #4]
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 8008d24:	d143      	bne.n	8008dae <_printf_float+0x182>
 8008d26:	2306      	movs	r3, #6
 8008d28:	6063      	str	r3, [r4, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2e:	9206      	str	r2, [sp, #24]
 8008d30:	aa0e      	add	r2, sp, #56	; 0x38
 8008d32:	e9cd b204 	strd	fp, r2, [sp, #16]
 8008d36:	aa0d      	add	r2, sp, #52	; 0x34
 8008d38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d3c:	9203      	str	r2, [sp, #12]
 8008d3e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008d42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	464b      	mov	r3, r9
 8008d50:	4628      	mov	r0, r5
 8008d52:	910a      	str	r1, [sp, #40]	; 0x28
 8008d54:	f7ff feca 	bl	8008aec <__cvt>
 8008d58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d5a:	2947      	cmp	r1, #71	; 0x47
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d60:	d108      	bne.n	8008d74 <_printf_float+0x148>
 8008d62:	1cc8      	adds	r0, r1, #3
 8008d64:	db02      	blt.n	8008d6c <_printf_float+0x140>
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	4299      	cmp	r1, r3
 8008d6a:	dd40      	ble.n	8008dee <_printf_float+0x1c2>
 8008d6c:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d70:	fa5f fb8b 	uxtb.w	fp, fp
 8008d74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d78:	d81f      	bhi.n	8008dba <_printf_float+0x18e>
 8008d7a:	3901      	subs	r1, #1
 8008d7c:	465a      	mov	r2, fp
 8008d7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d82:	910d      	str	r1, [sp, #52]	; 0x34
 8008d84:	f7ff ff13 	bl	8008bae <__exponent>
 8008d88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d8a:	1813      	adds	r3, r2, r0
 8008d8c:	2a01      	cmp	r2, #1
 8008d8e:	4681      	mov	r9, r0
 8008d90:	6123      	str	r3, [r4, #16]
 8008d92:	dc02      	bgt.n	8008d9a <_printf_float+0x16e>
 8008d94:	6822      	ldr	r2, [r4, #0]
 8008d96:	07d2      	lsls	r2, r2, #31
 8008d98:	d501      	bpl.n	8008d9e <_printf_float+0x172>
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	6123      	str	r3, [r4, #16]
 8008d9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d099      	beq.n	8008cda <_printf_float+0xae>
 8008da6:	232d      	movs	r3, #45	; 0x2d
 8008da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dac:	e795      	b.n	8008cda <_printf_float+0xae>
 8008dae:	2947      	cmp	r1, #71	; 0x47
 8008db0:	d1bb      	bne.n	8008d2a <_printf_float+0xfe>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1b9      	bne.n	8008d2a <_printf_float+0xfe>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e7b6      	b.n	8008d28 <_printf_float+0xfc>
 8008dba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008dbe:	d118      	bne.n	8008df2 <_printf_float+0x1c6>
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	6863      	ldr	r3, [r4, #4]
 8008dc4:	dd0b      	ble.n	8008dde <_printf_float+0x1b2>
 8008dc6:	6121      	str	r1, [r4, #16]
 8008dc8:	b913      	cbnz	r3, 8008dd0 <_printf_float+0x1a4>
 8008dca:	6822      	ldr	r2, [r4, #0]
 8008dcc:	07d0      	lsls	r0, r2, #31
 8008dce:	d502      	bpl.n	8008dd6 <_printf_float+0x1aa>
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	440b      	add	r3, r1
 8008dd4:	6123      	str	r3, [r4, #16]
 8008dd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008dd8:	f04f 0900 	mov.w	r9, #0
 8008ddc:	e7df      	b.n	8008d9e <_printf_float+0x172>
 8008dde:	b913      	cbnz	r3, 8008de6 <_printf_float+0x1ba>
 8008de0:	6822      	ldr	r2, [r4, #0]
 8008de2:	07d2      	lsls	r2, r2, #31
 8008de4:	d501      	bpl.n	8008dea <_printf_float+0x1be>
 8008de6:	3302      	adds	r3, #2
 8008de8:	e7f4      	b.n	8008dd4 <_printf_float+0x1a8>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e7f2      	b.n	8008dd4 <_printf_float+0x1a8>
 8008dee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008df4:	4299      	cmp	r1, r3
 8008df6:	db05      	blt.n	8008e04 <_printf_float+0x1d8>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	6121      	str	r1, [r4, #16]
 8008dfc:	07d8      	lsls	r0, r3, #31
 8008dfe:	d5ea      	bpl.n	8008dd6 <_printf_float+0x1aa>
 8008e00:	1c4b      	adds	r3, r1, #1
 8008e02:	e7e7      	b.n	8008dd4 <_printf_float+0x1a8>
 8008e04:	2900      	cmp	r1, #0
 8008e06:	bfd4      	ite	le
 8008e08:	f1c1 0202 	rsble	r2, r1, #2
 8008e0c:	2201      	movgt	r2, #1
 8008e0e:	4413      	add	r3, r2
 8008e10:	e7e0      	b.n	8008dd4 <_printf_float+0x1a8>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	055a      	lsls	r2, r3, #21
 8008e16:	d407      	bmi.n	8008e28 <_printf_float+0x1fc>
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	4642      	mov	r2, r8
 8008e1c:	4631      	mov	r1, r6
 8008e1e:	4628      	mov	r0, r5
 8008e20:	47b8      	blx	r7
 8008e22:	3001      	adds	r0, #1
 8008e24:	d12c      	bne.n	8008e80 <_printf_float+0x254>
 8008e26:	e762      	b.n	8008cee <_printf_float+0xc2>
 8008e28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e2c:	f240 80e0 	bls.w	8008ff0 <_printf_float+0x3c4>
 8008e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e34:	2200      	movs	r2, #0
 8008e36:	2300      	movs	r3, #0
 8008e38:	f7f7 fea6 	bl	8000b88 <__aeabi_dcmpeq>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d034      	beq.n	8008eaa <_printf_float+0x27e>
 8008e40:	4a37      	ldr	r2, [pc, #220]	; (8008f20 <_printf_float+0x2f4>)
 8008e42:	2301      	movs	r3, #1
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	f43f af4f 	beq.w	8008cee <_printf_float+0xc2>
 8008e50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008e54:	429a      	cmp	r2, r3
 8008e56:	db02      	blt.n	8008e5e <_printf_float+0x232>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	07d8      	lsls	r0, r3, #31
 8008e5c:	d510      	bpl.n	8008e80 <_printf_float+0x254>
 8008e5e:	ee18 3a10 	vmov	r3, s16
 8008e62:	4652      	mov	r2, sl
 8008e64:	4631      	mov	r1, r6
 8008e66:	4628      	mov	r0, r5
 8008e68:	47b8      	blx	r7
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	f43f af3f 	beq.w	8008cee <_printf_float+0xc2>
 8008e70:	f04f 0800 	mov.w	r8, #0
 8008e74:	f104 091a 	add.w	r9, r4, #26
 8008e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	4543      	cmp	r3, r8
 8008e7e:	dc09      	bgt.n	8008e94 <_printf_float+0x268>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	079b      	lsls	r3, r3, #30
 8008e84:	f100 8105 	bmi.w	8009092 <_printf_float+0x466>
 8008e88:	68e0      	ldr	r0, [r4, #12]
 8008e8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e8c:	4298      	cmp	r0, r3
 8008e8e:	bfb8      	it	lt
 8008e90:	4618      	movlt	r0, r3
 8008e92:	e72e      	b.n	8008cf2 <_printf_float+0xc6>
 8008e94:	2301      	movs	r3, #1
 8008e96:	464a      	mov	r2, r9
 8008e98:	4631      	mov	r1, r6
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	47b8      	blx	r7
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f43f af25 	beq.w	8008cee <_printf_float+0xc2>
 8008ea4:	f108 0801 	add.w	r8, r8, #1
 8008ea8:	e7e6      	b.n	8008e78 <_printf_float+0x24c>
 8008eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dc39      	bgt.n	8008f24 <_printf_float+0x2f8>
 8008eb0:	4a1b      	ldr	r2, [pc, #108]	; (8008f20 <_printf_float+0x2f4>)
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	47b8      	blx	r7
 8008eba:	3001      	adds	r0, #1
 8008ebc:	f43f af17 	beq.w	8008cee <_printf_float+0xc2>
 8008ec0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	d102      	bne.n	8008ece <_printf_float+0x2a2>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	07d9      	lsls	r1, r3, #31
 8008ecc:	d5d8      	bpl.n	8008e80 <_printf_float+0x254>
 8008ece:	ee18 3a10 	vmov	r3, s16
 8008ed2:	4652      	mov	r2, sl
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	47b8      	blx	r7
 8008eda:	3001      	adds	r0, #1
 8008edc:	f43f af07 	beq.w	8008cee <_printf_float+0xc2>
 8008ee0:	f04f 0900 	mov.w	r9, #0
 8008ee4:	f104 0a1a 	add.w	sl, r4, #26
 8008ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eea:	425b      	negs	r3, r3
 8008eec:	454b      	cmp	r3, r9
 8008eee:	dc01      	bgt.n	8008ef4 <_printf_float+0x2c8>
 8008ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ef2:	e792      	b.n	8008e1a <_printf_float+0x1ee>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4652      	mov	r2, sl
 8008ef8:	4631      	mov	r1, r6
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	f43f aef5 	beq.w	8008cee <_printf_float+0xc2>
 8008f04:	f109 0901 	add.w	r9, r9, #1
 8008f08:	e7ee      	b.n	8008ee8 <_printf_float+0x2bc>
 8008f0a:	bf00      	nop
 8008f0c:	7fefffff 	.word	0x7fefffff
 8008f10:	0800bda8 	.word	0x0800bda8
 8008f14:	0800bdac 	.word	0x0800bdac
 8008f18:	0800bdb4 	.word	0x0800bdb4
 8008f1c:	0800bdb0 	.word	0x0800bdb0
 8008f20:	0800bdb8 	.word	0x0800bdb8
 8008f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	bfa8      	it	ge
 8008f2c:	461a      	movge	r2, r3
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	4691      	mov	r9, r2
 8008f32:	dc37      	bgt.n	8008fa4 <_printf_float+0x378>
 8008f34:	f04f 0b00 	mov.w	fp, #0
 8008f38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f3c:	f104 021a 	add.w	r2, r4, #26
 8008f40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f42:	9309      	str	r3, [sp, #36]	; 0x24
 8008f44:	eba3 0309 	sub.w	r3, r3, r9
 8008f48:	455b      	cmp	r3, fp
 8008f4a:	dc33      	bgt.n	8008fb4 <_printf_float+0x388>
 8008f4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f50:	429a      	cmp	r2, r3
 8008f52:	db3b      	blt.n	8008fcc <_printf_float+0x3a0>
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	07da      	lsls	r2, r3, #31
 8008f58:	d438      	bmi.n	8008fcc <_printf_float+0x3a0>
 8008f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	eba2 0901 	sub.w	r9, r2, r1
 8008f66:	4599      	cmp	r9, r3
 8008f68:	bfa8      	it	ge
 8008f6a:	4699      	movge	r9, r3
 8008f6c:	f1b9 0f00 	cmp.w	r9, #0
 8008f70:	dc35      	bgt.n	8008fde <_printf_float+0x3b2>
 8008f72:	f04f 0800 	mov.w	r8, #0
 8008f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f7a:	f104 0a1a 	add.w	sl, r4, #26
 8008f7e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f82:	1a9b      	subs	r3, r3, r2
 8008f84:	eba3 0309 	sub.w	r3, r3, r9
 8008f88:	4543      	cmp	r3, r8
 8008f8a:	f77f af79 	ble.w	8008e80 <_printf_float+0x254>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4652      	mov	r2, sl
 8008f92:	4631      	mov	r1, r6
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b8      	blx	r7
 8008f98:	3001      	adds	r0, #1
 8008f9a:	f43f aea8 	beq.w	8008cee <_printf_float+0xc2>
 8008f9e:	f108 0801 	add.w	r8, r8, #1
 8008fa2:	e7ec      	b.n	8008f7e <_printf_float+0x352>
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	4642      	mov	r2, r8
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b8      	blx	r7
 8008fae:	3001      	adds	r0, #1
 8008fb0:	d1c0      	bne.n	8008f34 <_printf_float+0x308>
 8008fb2:	e69c      	b.n	8008cee <_printf_float+0xc2>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	4628      	mov	r0, r5
 8008fba:	9209      	str	r2, [sp, #36]	; 0x24
 8008fbc:	47b8      	blx	r7
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	f43f ae95 	beq.w	8008cee <_printf_float+0xc2>
 8008fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fc6:	f10b 0b01 	add.w	fp, fp, #1
 8008fca:	e7b9      	b.n	8008f40 <_printf_float+0x314>
 8008fcc:	ee18 3a10 	vmov	r3, s16
 8008fd0:	4652      	mov	r2, sl
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b8      	blx	r7
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d1be      	bne.n	8008f5a <_printf_float+0x32e>
 8008fdc:	e687      	b.n	8008cee <_printf_float+0xc2>
 8008fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	4442      	add	r2, r8
 8008fe4:	4631      	mov	r1, r6
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	47b8      	blx	r7
 8008fea:	3001      	adds	r0, #1
 8008fec:	d1c1      	bne.n	8008f72 <_printf_float+0x346>
 8008fee:	e67e      	b.n	8008cee <_printf_float+0xc2>
 8008ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ff2:	2a01      	cmp	r2, #1
 8008ff4:	dc01      	bgt.n	8008ffa <_printf_float+0x3ce>
 8008ff6:	07db      	lsls	r3, r3, #31
 8008ff8:	d538      	bpl.n	800906c <_printf_float+0x440>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	f43f ae72 	beq.w	8008cee <_printf_float+0xc2>
 800900a:	ee18 3a10 	vmov	r3, s16
 800900e:	4652      	mov	r2, sl
 8009010:	4631      	mov	r1, r6
 8009012:	4628      	mov	r0, r5
 8009014:	47b8      	blx	r7
 8009016:	3001      	adds	r0, #1
 8009018:	f43f ae69 	beq.w	8008cee <_printf_float+0xc2>
 800901c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009020:	2200      	movs	r2, #0
 8009022:	2300      	movs	r3, #0
 8009024:	f7f7 fdb0 	bl	8000b88 <__aeabi_dcmpeq>
 8009028:	b9d8      	cbnz	r0, 8009062 <_printf_float+0x436>
 800902a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800902c:	f108 0201 	add.w	r2, r8, #1
 8009030:	3b01      	subs	r3, #1
 8009032:	4631      	mov	r1, r6
 8009034:	4628      	mov	r0, r5
 8009036:	47b8      	blx	r7
 8009038:	3001      	adds	r0, #1
 800903a:	d10e      	bne.n	800905a <_printf_float+0x42e>
 800903c:	e657      	b.n	8008cee <_printf_float+0xc2>
 800903e:	2301      	movs	r3, #1
 8009040:	4652      	mov	r2, sl
 8009042:	4631      	mov	r1, r6
 8009044:	4628      	mov	r0, r5
 8009046:	47b8      	blx	r7
 8009048:	3001      	adds	r0, #1
 800904a:	f43f ae50 	beq.w	8008cee <_printf_float+0xc2>
 800904e:	f108 0801 	add.w	r8, r8, #1
 8009052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009054:	3b01      	subs	r3, #1
 8009056:	4543      	cmp	r3, r8
 8009058:	dcf1      	bgt.n	800903e <_printf_float+0x412>
 800905a:	464b      	mov	r3, r9
 800905c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009060:	e6dc      	b.n	8008e1c <_printf_float+0x1f0>
 8009062:	f04f 0800 	mov.w	r8, #0
 8009066:	f104 0a1a 	add.w	sl, r4, #26
 800906a:	e7f2      	b.n	8009052 <_printf_float+0x426>
 800906c:	2301      	movs	r3, #1
 800906e:	4642      	mov	r2, r8
 8009070:	e7df      	b.n	8009032 <_printf_float+0x406>
 8009072:	2301      	movs	r3, #1
 8009074:	464a      	mov	r2, r9
 8009076:	4631      	mov	r1, r6
 8009078:	4628      	mov	r0, r5
 800907a:	47b8      	blx	r7
 800907c:	3001      	adds	r0, #1
 800907e:	f43f ae36 	beq.w	8008cee <_printf_float+0xc2>
 8009082:	f108 0801 	add.w	r8, r8, #1
 8009086:	68e3      	ldr	r3, [r4, #12]
 8009088:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800908a:	1a5b      	subs	r3, r3, r1
 800908c:	4543      	cmp	r3, r8
 800908e:	dcf0      	bgt.n	8009072 <_printf_float+0x446>
 8009090:	e6fa      	b.n	8008e88 <_printf_float+0x25c>
 8009092:	f04f 0800 	mov.w	r8, #0
 8009096:	f104 0919 	add.w	r9, r4, #25
 800909a:	e7f4      	b.n	8009086 <_printf_float+0x45a>

0800909c <_printf_common>:
 800909c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a0:	4616      	mov	r6, r2
 80090a2:	4699      	mov	r9, r3
 80090a4:	688a      	ldr	r2, [r1, #8]
 80090a6:	690b      	ldr	r3, [r1, #16]
 80090a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090ac:	4293      	cmp	r3, r2
 80090ae:	bfb8      	it	lt
 80090b0:	4613      	movlt	r3, r2
 80090b2:	6033      	str	r3, [r6, #0]
 80090b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090b8:	4607      	mov	r7, r0
 80090ba:	460c      	mov	r4, r1
 80090bc:	b10a      	cbz	r2, 80090c2 <_printf_common+0x26>
 80090be:	3301      	adds	r3, #1
 80090c0:	6033      	str	r3, [r6, #0]
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	0699      	lsls	r1, r3, #26
 80090c6:	bf42      	ittt	mi
 80090c8:	6833      	ldrmi	r3, [r6, #0]
 80090ca:	3302      	addmi	r3, #2
 80090cc:	6033      	strmi	r3, [r6, #0]
 80090ce:	6825      	ldr	r5, [r4, #0]
 80090d0:	f015 0506 	ands.w	r5, r5, #6
 80090d4:	d106      	bne.n	80090e4 <_printf_common+0x48>
 80090d6:	f104 0a19 	add.w	sl, r4, #25
 80090da:	68e3      	ldr	r3, [r4, #12]
 80090dc:	6832      	ldr	r2, [r6, #0]
 80090de:	1a9b      	subs	r3, r3, r2
 80090e0:	42ab      	cmp	r3, r5
 80090e2:	dc26      	bgt.n	8009132 <_printf_common+0x96>
 80090e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090e8:	1e13      	subs	r3, r2, #0
 80090ea:	6822      	ldr	r2, [r4, #0]
 80090ec:	bf18      	it	ne
 80090ee:	2301      	movne	r3, #1
 80090f0:	0692      	lsls	r2, r2, #26
 80090f2:	d42b      	bmi.n	800914c <_printf_common+0xb0>
 80090f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090f8:	4649      	mov	r1, r9
 80090fa:	4638      	mov	r0, r7
 80090fc:	47c0      	blx	r8
 80090fe:	3001      	adds	r0, #1
 8009100:	d01e      	beq.n	8009140 <_printf_common+0xa4>
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	68e5      	ldr	r5, [r4, #12]
 8009106:	6832      	ldr	r2, [r6, #0]
 8009108:	f003 0306 	and.w	r3, r3, #6
 800910c:	2b04      	cmp	r3, #4
 800910e:	bf08      	it	eq
 8009110:	1aad      	subeq	r5, r5, r2
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	6922      	ldr	r2, [r4, #16]
 8009116:	bf0c      	ite	eq
 8009118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800911c:	2500      	movne	r5, #0
 800911e:	4293      	cmp	r3, r2
 8009120:	bfc4      	itt	gt
 8009122:	1a9b      	subgt	r3, r3, r2
 8009124:	18ed      	addgt	r5, r5, r3
 8009126:	2600      	movs	r6, #0
 8009128:	341a      	adds	r4, #26
 800912a:	42b5      	cmp	r5, r6
 800912c:	d11a      	bne.n	8009164 <_printf_common+0xc8>
 800912e:	2000      	movs	r0, #0
 8009130:	e008      	b.n	8009144 <_printf_common+0xa8>
 8009132:	2301      	movs	r3, #1
 8009134:	4652      	mov	r2, sl
 8009136:	4649      	mov	r1, r9
 8009138:	4638      	mov	r0, r7
 800913a:	47c0      	blx	r8
 800913c:	3001      	adds	r0, #1
 800913e:	d103      	bne.n	8009148 <_printf_common+0xac>
 8009140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009148:	3501      	adds	r5, #1
 800914a:	e7c6      	b.n	80090da <_printf_common+0x3e>
 800914c:	18e1      	adds	r1, r4, r3
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	2030      	movs	r0, #48	; 0x30
 8009152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009156:	4422      	add	r2, r4
 8009158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800915c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009160:	3302      	adds	r3, #2
 8009162:	e7c7      	b.n	80090f4 <_printf_common+0x58>
 8009164:	2301      	movs	r3, #1
 8009166:	4622      	mov	r2, r4
 8009168:	4649      	mov	r1, r9
 800916a:	4638      	mov	r0, r7
 800916c:	47c0      	blx	r8
 800916e:	3001      	adds	r0, #1
 8009170:	d0e6      	beq.n	8009140 <_printf_common+0xa4>
 8009172:	3601      	adds	r6, #1
 8009174:	e7d9      	b.n	800912a <_printf_common+0x8e>
	...

08009178 <_printf_i>:
 8009178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800917c:	460c      	mov	r4, r1
 800917e:	4691      	mov	r9, r2
 8009180:	7e27      	ldrb	r7, [r4, #24]
 8009182:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009184:	2f78      	cmp	r7, #120	; 0x78
 8009186:	4680      	mov	r8, r0
 8009188:	469a      	mov	sl, r3
 800918a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800918e:	d807      	bhi.n	80091a0 <_printf_i+0x28>
 8009190:	2f62      	cmp	r7, #98	; 0x62
 8009192:	d80a      	bhi.n	80091aa <_printf_i+0x32>
 8009194:	2f00      	cmp	r7, #0
 8009196:	f000 80d8 	beq.w	800934a <_printf_i+0x1d2>
 800919a:	2f58      	cmp	r7, #88	; 0x58
 800919c:	f000 80a3 	beq.w	80092e6 <_printf_i+0x16e>
 80091a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091a8:	e03a      	b.n	8009220 <_printf_i+0xa8>
 80091aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091ae:	2b15      	cmp	r3, #21
 80091b0:	d8f6      	bhi.n	80091a0 <_printf_i+0x28>
 80091b2:	a001      	add	r0, pc, #4	; (adr r0, 80091b8 <_printf_i+0x40>)
 80091b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80091b8:	08009211 	.word	0x08009211
 80091bc:	08009225 	.word	0x08009225
 80091c0:	080091a1 	.word	0x080091a1
 80091c4:	080091a1 	.word	0x080091a1
 80091c8:	080091a1 	.word	0x080091a1
 80091cc:	080091a1 	.word	0x080091a1
 80091d0:	08009225 	.word	0x08009225
 80091d4:	080091a1 	.word	0x080091a1
 80091d8:	080091a1 	.word	0x080091a1
 80091dc:	080091a1 	.word	0x080091a1
 80091e0:	080091a1 	.word	0x080091a1
 80091e4:	08009331 	.word	0x08009331
 80091e8:	08009255 	.word	0x08009255
 80091ec:	08009313 	.word	0x08009313
 80091f0:	080091a1 	.word	0x080091a1
 80091f4:	080091a1 	.word	0x080091a1
 80091f8:	08009353 	.word	0x08009353
 80091fc:	080091a1 	.word	0x080091a1
 8009200:	08009255 	.word	0x08009255
 8009204:	080091a1 	.word	0x080091a1
 8009208:	080091a1 	.word	0x080091a1
 800920c:	0800931b 	.word	0x0800931b
 8009210:	680b      	ldr	r3, [r1, #0]
 8009212:	1d1a      	adds	r2, r3, #4
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	600a      	str	r2, [r1, #0]
 8009218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800921c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009220:	2301      	movs	r3, #1
 8009222:	e0a3      	b.n	800936c <_printf_i+0x1f4>
 8009224:	6825      	ldr	r5, [r4, #0]
 8009226:	6808      	ldr	r0, [r1, #0]
 8009228:	062e      	lsls	r6, r5, #24
 800922a:	f100 0304 	add.w	r3, r0, #4
 800922e:	d50a      	bpl.n	8009246 <_printf_i+0xce>
 8009230:	6805      	ldr	r5, [r0, #0]
 8009232:	600b      	str	r3, [r1, #0]
 8009234:	2d00      	cmp	r5, #0
 8009236:	da03      	bge.n	8009240 <_printf_i+0xc8>
 8009238:	232d      	movs	r3, #45	; 0x2d
 800923a:	426d      	negs	r5, r5
 800923c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009240:	485e      	ldr	r0, [pc, #376]	; (80093bc <_printf_i+0x244>)
 8009242:	230a      	movs	r3, #10
 8009244:	e019      	b.n	800927a <_printf_i+0x102>
 8009246:	f015 0f40 	tst.w	r5, #64	; 0x40
 800924a:	6805      	ldr	r5, [r0, #0]
 800924c:	600b      	str	r3, [r1, #0]
 800924e:	bf18      	it	ne
 8009250:	b22d      	sxthne	r5, r5
 8009252:	e7ef      	b.n	8009234 <_printf_i+0xbc>
 8009254:	680b      	ldr	r3, [r1, #0]
 8009256:	6825      	ldr	r5, [r4, #0]
 8009258:	1d18      	adds	r0, r3, #4
 800925a:	6008      	str	r0, [r1, #0]
 800925c:	0628      	lsls	r0, r5, #24
 800925e:	d501      	bpl.n	8009264 <_printf_i+0xec>
 8009260:	681d      	ldr	r5, [r3, #0]
 8009262:	e002      	b.n	800926a <_printf_i+0xf2>
 8009264:	0669      	lsls	r1, r5, #25
 8009266:	d5fb      	bpl.n	8009260 <_printf_i+0xe8>
 8009268:	881d      	ldrh	r5, [r3, #0]
 800926a:	4854      	ldr	r0, [pc, #336]	; (80093bc <_printf_i+0x244>)
 800926c:	2f6f      	cmp	r7, #111	; 0x6f
 800926e:	bf0c      	ite	eq
 8009270:	2308      	moveq	r3, #8
 8009272:	230a      	movne	r3, #10
 8009274:	2100      	movs	r1, #0
 8009276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800927a:	6866      	ldr	r6, [r4, #4]
 800927c:	60a6      	str	r6, [r4, #8]
 800927e:	2e00      	cmp	r6, #0
 8009280:	bfa2      	ittt	ge
 8009282:	6821      	ldrge	r1, [r4, #0]
 8009284:	f021 0104 	bicge.w	r1, r1, #4
 8009288:	6021      	strge	r1, [r4, #0]
 800928a:	b90d      	cbnz	r5, 8009290 <_printf_i+0x118>
 800928c:	2e00      	cmp	r6, #0
 800928e:	d04d      	beq.n	800932c <_printf_i+0x1b4>
 8009290:	4616      	mov	r6, r2
 8009292:	fbb5 f1f3 	udiv	r1, r5, r3
 8009296:	fb03 5711 	mls	r7, r3, r1, r5
 800929a:	5dc7      	ldrb	r7, [r0, r7]
 800929c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092a0:	462f      	mov	r7, r5
 80092a2:	42bb      	cmp	r3, r7
 80092a4:	460d      	mov	r5, r1
 80092a6:	d9f4      	bls.n	8009292 <_printf_i+0x11a>
 80092a8:	2b08      	cmp	r3, #8
 80092aa:	d10b      	bne.n	80092c4 <_printf_i+0x14c>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	07df      	lsls	r7, r3, #31
 80092b0:	d508      	bpl.n	80092c4 <_printf_i+0x14c>
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	6861      	ldr	r1, [r4, #4]
 80092b6:	4299      	cmp	r1, r3
 80092b8:	bfde      	ittt	le
 80092ba:	2330      	movle	r3, #48	; 0x30
 80092bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80092c4:	1b92      	subs	r2, r2, r6
 80092c6:	6122      	str	r2, [r4, #16]
 80092c8:	f8cd a000 	str.w	sl, [sp]
 80092cc:	464b      	mov	r3, r9
 80092ce:	aa03      	add	r2, sp, #12
 80092d0:	4621      	mov	r1, r4
 80092d2:	4640      	mov	r0, r8
 80092d4:	f7ff fee2 	bl	800909c <_printf_common>
 80092d8:	3001      	adds	r0, #1
 80092da:	d14c      	bne.n	8009376 <_printf_i+0x1fe>
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092e0:	b004      	add	sp, #16
 80092e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e6:	4835      	ldr	r0, [pc, #212]	; (80093bc <_printf_i+0x244>)
 80092e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	680e      	ldr	r6, [r1, #0]
 80092f0:	061f      	lsls	r7, r3, #24
 80092f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80092f6:	600e      	str	r6, [r1, #0]
 80092f8:	d514      	bpl.n	8009324 <_printf_i+0x1ac>
 80092fa:	07d9      	lsls	r1, r3, #31
 80092fc:	bf44      	itt	mi
 80092fe:	f043 0320 	orrmi.w	r3, r3, #32
 8009302:	6023      	strmi	r3, [r4, #0]
 8009304:	b91d      	cbnz	r5, 800930e <_printf_i+0x196>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	f023 0320 	bic.w	r3, r3, #32
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	2310      	movs	r3, #16
 8009310:	e7b0      	b.n	8009274 <_printf_i+0xfc>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	f043 0320 	orr.w	r3, r3, #32
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	2378      	movs	r3, #120	; 0x78
 800931c:	4828      	ldr	r0, [pc, #160]	; (80093c0 <_printf_i+0x248>)
 800931e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009322:	e7e3      	b.n	80092ec <_printf_i+0x174>
 8009324:	065e      	lsls	r6, r3, #25
 8009326:	bf48      	it	mi
 8009328:	b2ad      	uxthmi	r5, r5
 800932a:	e7e6      	b.n	80092fa <_printf_i+0x182>
 800932c:	4616      	mov	r6, r2
 800932e:	e7bb      	b.n	80092a8 <_printf_i+0x130>
 8009330:	680b      	ldr	r3, [r1, #0]
 8009332:	6826      	ldr	r6, [r4, #0]
 8009334:	6960      	ldr	r0, [r4, #20]
 8009336:	1d1d      	adds	r5, r3, #4
 8009338:	600d      	str	r5, [r1, #0]
 800933a:	0635      	lsls	r5, r6, #24
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	d501      	bpl.n	8009344 <_printf_i+0x1cc>
 8009340:	6018      	str	r0, [r3, #0]
 8009342:	e002      	b.n	800934a <_printf_i+0x1d2>
 8009344:	0671      	lsls	r1, r6, #25
 8009346:	d5fb      	bpl.n	8009340 <_printf_i+0x1c8>
 8009348:	8018      	strh	r0, [r3, #0]
 800934a:	2300      	movs	r3, #0
 800934c:	6123      	str	r3, [r4, #16]
 800934e:	4616      	mov	r6, r2
 8009350:	e7ba      	b.n	80092c8 <_printf_i+0x150>
 8009352:	680b      	ldr	r3, [r1, #0]
 8009354:	1d1a      	adds	r2, r3, #4
 8009356:	600a      	str	r2, [r1, #0]
 8009358:	681e      	ldr	r6, [r3, #0]
 800935a:	6862      	ldr	r2, [r4, #4]
 800935c:	2100      	movs	r1, #0
 800935e:	4630      	mov	r0, r6
 8009360:	f7f6 ff9e 	bl	80002a0 <memchr>
 8009364:	b108      	cbz	r0, 800936a <_printf_i+0x1f2>
 8009366:	1b80      	subs	r0, r0, r6
 8009368:	6060      	str	r0, [r4, #4]
 800936a:	6863      	ldr	r3, [r4, #4]
 800936c:	6123      	str	r3, [r4, #16]
 800936e:	2300      	movs	r3, #0
 8009370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009374:	e7a8      	b.n	80092c8 <_printf_i+0x150>
 8009376:	6923      	ldr	r3, [r4, #16]
 8009378:	4632      	mov	r2, r6
 800937a:	4649      	mov	r1, r9
 800937c:	4640      	mov	r0, r8
 800937e:	47d0      	blx	sl
 8009380:	3001      	adds	r0, #1
 8009382:	d0ab      	beq.n	80092dc <_printf_i+0x164>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	079b      	lsls	r3, r3, #30
 8009388:	d413      	bmi.n	80093b2 <_printf_i+0x23a>
 800938a:	68e0      	ldr	r0, [r4, #12]
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	4298      	cmp	r0, r3
 8009390:	bfb8      	it	lt
 8009392:	4618      	movlt	r0, r3
 8009394:	e7a4      	b.n	80092e0 <_printf_i+0x168>
 8009396:	2301      	movs	r3, #1
 8009398:	4632      	mov	r2, r6
 800939a:	4649      	mov	r1, r9
 800939c:	4640      	mov	r0, r8
 800939e:	47d0      	blx	sl
 80093a0:	3001      	adds	r0, #1
 80093a2:	d09b      	beq.n	80092dc <_printf_i+0x164>
 80093a4:	3501      	adds	r5, #1
 80093a6:	68e3      	ldr	r3, [r4, #12]
 80093a8:	9903      	ldr	r1, [sp, #12]
 80093aa:	1a5b      	subs	r3, r3, r1
 80093ac:	42ab      	cmp	r3, r5
 80093ae:	dcf2      	bgt.n	8009396 <_printf_i+0x21e>
 80093b0:	e7eb      	b.n	800938a <_printf_i+0x212>
 80093b2:	2500      	movs	r5, #0
 80093b4:	f104 0619 	add.w	r6, r4, #25
 80093b8:	e7f5      	b.n	80093a6 <_printf_i+0x22e>
 80093ba:	bf00      	nop
 80093bc:	0800bdba 	.word	0x0800bdba
 80093c0:	0800bdcb 	.word	0x0800bdcb

080093c4 <siprintf>:
 80093c4:	b40e      	push	{r1, r2, r3}
 80093c6:	b500      	push	{lr}
 80093c8:	b09c      	sub	sp, #112	; 0x70
 80093ca:	ab1d      	add	r3, sp, #116	; 0x74
 80093cc:	9002      	str	r0, [sp, #8]
 80093ce:	9006      	str	r0, [sp, #24]
 80093d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093d4:	4809      	ldr	r0, [pc, #36]	; (80093fc <siprintf+0x38>)
 80093d6:	9107      	str	r1, [sp, #28]
 80093d8:	9104      	str	r1, [sp, #16]
 80093da:	4909      	ldr	r1, [pc, #36]	; (8009400 <siprintf+0x3c>)
 80093dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093e0:	9105      	str	r1, [sp, #20]
 80093e2:	6800      	ldr	r0, [r0, #0]
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	a902      	add	r1, sp, #8
 80093e8:	f001 fb24 	bl	800aa34 <_svfiprintf_r>
 80093ec:	9b02      	ldr	r3, [sp, #8]
 80093ee:	2200      	movs	r2, #0
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	b01c      	add	sp, #112	; 0x70
 80093f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093f8:	b003      	add	sp, #12
 80093fa:	4770      	bx	lr
 80093fc:	2000003c 	.word	0x2000003c
 8009400:	ffff0208 	.word	0xffff0208

08009404 <quorem>:
 8009404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	6903      	ldr	r3, [r0, #16]
 800940a:	690c      	ldr	r4, [r1, #16]
 800940c:	42a3      	cmp	r3, r4
 800940e:	4607      	mov	r7, r0
 8009410:	f2c0 8081 	blt.w	8009516 <quorem+0x112>
 8009414:	3c01      	subs	r4, #1
 8009416:	f101 0814 	add.w	r8, r1, #20
 800941a:	f100 0514 	add.w	r5, r0, #20
 800941e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009428:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800942c:	3301      	adds	r3, #1
 800942e:	429a      	cmp	r2, r3
 8009430:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009434:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009438:	fbb2 f6f3 	udiv	r6, r2, r3
 800943c:	d331      	bcc.n	80094a2 <quorem+0x9e>
 800943e:	f04f 0e00 	mov.w	lr, #0
 8009442:	4640      	mov	r0, r8
 8009444:	46ac      	mov	ip, r5
 8009446:	46f2      	mov	sl, lr
 8009448:	f850 2b04 	ldr.w	r2, [r0], #4
 800944c:	b293      	uxth	r3, r2
 800944e:	fb06 e303 	mla	r3, r6, r3, lr
 8009452:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009456:	b29b      	uxth	r3, r3
 8009458:	ebaa 0303 	sub.w	r3, sl, r3
 800945c:	0c12      	lsrs	r2, r2, #16
 800945e:	f8dc a000 	ldr.w	sl, [ip]
 8009462:	fb06 e202 	mla	r2, r6, r2, lr
 8009466:	fa13 f38a 	uxtah	r3, r3, sl
 800946a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800946e:	fa1f fa82 	uxth.w	sl, r2
 8009472:	f8dc 2000 	ldr.w	r2, [ip]
 8009476:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800947a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800947e:	b29b      	uxth	r3, r3
 8009480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009484:	4581      	cmp	r9, r0
 8009486:	f84c 3b04 	str.w	r3, [ip], #4
 800948a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800948e:	d2db      	bcs.n	8009448 <quorem+0x44>
 8009490:	f855 300b 	ldr.w	r3, [r5, fp]
 8009494:	b92b      	cbnz	r3, 80094a2 <quorem+0x9e>
 8009496:	9b01      	ldr	r3, [sp, #4]
 8009498:	3b04      	subs	r3, #4
 800949a:	429d      	cmp	r5, r3
 800949c:	461a      	mov	r2, r3
 800949e:	d32e      	bcc.n	80094fe <quorem+0xfa>
 80094a0:	613c      	str	r4, [r7, #16]
 80094a2:	4638      	mov	r0, r7
 80094a4:	f001 f8b2 	bl	800a60c <__mcmp>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	db24      	blt.n	80094f6 <quorem+0xf2>
 80094ac:	3601      	adds	r6, #1
 80094ae:	4628      	mov	r0, r5
 80094b0:	f04f 0c00 	mov.w	ip, #0
 80094b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80094b8:	f8d0 e000 	ldr.w	lr, [r0]
 80094bc:	b293      	uxth	r3, r2
 80094be:	ebac 0303 	sub.w	r3, ip, r3
 80094c2:	0c12      	lsrs	r2, r2, #16
 80094c4:	fa13 f38e 	uxtah	r3, r3, lr
 80094c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80094cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094d6:	45c1      	cmp	r9, r8
 80094d8:	f840 3b04 	str.w	r3, [r0], #4
 80094dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80094e0:	d2e8      	bcs.n	80094b4 <quorem+0xb0>
 80094e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094ea:	b922      	cbnz	r2, 80094f6 <quorem+0xf2>
 80094ec:	3b04      	subs	r3, #4
 80094ee:	429d      	cmp	r5, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	d30a      	bcc.n	800950a <quorem+0x106>
 80094f4:	613c      	str	r4, [r7, #16]
 80094f6:	4630      	mov	r0, r6
 80094f8:	b003      	add	sp, #12
 80094fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fe:	6812      	ldr	r2, [r2, #0]
 8009500:	3b04      	subs	r3, #4
 8009502:	2a00      	cmp	r2, #0
 8009504:	d1cc      	bne.n	80094a0 <quorem+0x9c>
 8009506:	3c01      	subs	r4, #1
 8009508:	e7c7      	b.n	800949a <quorem+0x96>
 800950a:	6812      	ldr	r2, [r2, #0]
 800950c:	3b04      	subs	r3, #4
 800950e:	2a00      	cmp	r2, #0
 8009510:	d1f0      	bne.n	80094f4 <quorem+0xf0>
 8009512:	3c01      	subs	r4, #1
 8009514:	e7eb      	b.n	80094ee <quorem+0xea>
 8009516:	2000      	movs	r0, #0
 8009518:	e7ee      	b.n	80094f8 <quorem+0xf4>
 800951a:	0000      	movs	r0, r0
 800951c:	0000      	movs	r0, r0
	...

08009520 <_dtoa_r>:
 8009520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	ed2d 8b02 	vpush	{d8}
 8009528:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800952a:	b095      	sub	sp, #84	; 0x54
 800952c:	4616      	mov	r6, r2
 800952e:	461f      	mov	r7, r3
 8009530:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009534:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8009538:	4604      	mov	r4, r0
 800953a:	b975      	cbnz	r5, 800955a <_dtoa_r+0x3a>
 800953c:	2010      	movs	r0, #16
 800953e:	f000 fddf 	bl	800a100 <malloc>
 8009542:	4602      	mov	r2, r0
 8009544:	6260      	str	r0, [r4, #36]	; 0x24
 8009546:	b920      	cbnz	r0, 8009552 <_dtoa_r+0x32>
 8009548:	4bb1      	ldr	r3, [pc, #708]	; (8009810 <_dtoa_r+0x2f0>)
 800954a:	21ea      	movs	r1, #234	; 0xea
 800954c:	48b1      	ldr	r0, [pc, #708]	; (8009814 <_dtoa_r+0x2f4>)
 800954e:	f001 fb81 	bl	800ac54 <__assert_func>
 8009552:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009556:	6005      	str	r5, [r0, #0]
 8009558:	60c5      	str	r5, [r0, #12]
 800955a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800955c:	6819      	ldr	r1, [r3, #0]
 800955e:	b151      	cbz	r1, 8009576 <_dtoa_r+0x56>
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	604a      	str	r2, [r1, #4]
 8009564:	2301      	movs	r3, #1
 8009566:	4093      	lsls	r3, r2
 8009568:	608b      	str	r3, [r1, #8]
 800956a:	4620      	mov	r0, r4
 800956c:	f000 fe10 	bl	800a190 <_Bfree>
 8009570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	1e3b      	subs	r3, r7, #0
 8009578:	bfb9      	ittee	lt
 800957a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800957e:	9305      	strlt	r3, [sp, #20]
 8009580:	2300      	movge	r3, #0
 8009582:	f8c8 3000 	strge.w	r3, [r8]
 8009586:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800958a:	4ba3      	ldr	r3, [pc, #652]	; (8009818 <_dtoa_r+0x2f8>)
 800958c:	bfbc      	itt	lt
 800958e:	2201      	movlt	r2, #1
 8009590:	f8c8 2000 	strlt.w	r2, [r8]
 8009594:	ea33 0309 	bics.w	r3, r3, r9
 8009598:	d11b      	bne.n	80095d2 <_dtoa_r+0xb2>
 800959a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800959c:	f242 730f 	movw	r3, #9999	; 0x270f
 80095a0:	6013      	str	r3, [r2, #0]
 80095a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095a6:	4333      	orrs	r3, r6
 80095a8:	f000 857d 	beq.w	800a0a6 <_dtoa_r+0xb86>
 80095ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80095ae:	b963      	cbnz	r3, 80095ca <_dtoa_r+0xaa>
 80095b0:	4b9a      	ldr	r3, [pc, #616]	; (800981c <_dtoa_r+0x2fc>)
 80095b2:	e024      	b.n	80095fe <_dtoa_r+0xde>
 80095b4:	4b9a      	ldr	r3, [pc, #616]	; (8009820 <_dtoa_r+0x300>)
 80095b6:	9303      	str	r3, [sp, #12]
 80095b8:	3308      	adds	r3, #8
 80095ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80095bc:	6013      	str	r3, [r2, #0]
 80095be:	9803      	ldr	r0, [sp, #12]
 80095c0:	b015      	add	sp, #84	; 0x54
 80095c2:	ecbd 8b02 	vpop	{d8}
 80095c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ca:	4b94      	ldr	r3, [pc, #592]	; (800981c <_dtoa_r+0x2fc>)
 80095cc:	9303      	str	r3, [sp, #12]
 80095ce:	3303      	adds	r3, #3
 80095d0:	e7f3      	b.n	80095ba <_dtoa_r+0x9a>
 80095d2:	ed9d 7b04 	vldr	d7, [sp, #16]
 80095d6:	2200      	movs	r2, #0
 80095d8:	ec51 0b17 	vmov	r0, r1, d7
 80095dc:	2300      	movs	r3, #0
 80095de:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80095e2:	f7f7 fad1 	bl	8000b88 <__aeabi_dcmpeq>
 80095e6:	4680      	mov	r8, r0
 80095e8:	b158      	cbz	r0, 8009602 <_dtoa_r+0xe2>
 80095ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80095ec:	2301      	movs	r3, #1
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 8554 	beq.w	800a0a0 <_dtoa_r+0xb80>
 80095f8:	488a      	ldr	r0, [pc, #552]	; (8009824 <_dtoa_r+0x304>)
 80095fa:	6018      	str	r0, [r3, #0]
 80095fc:	1e43      	subs	r3, r0, #1
 80095fe:	9303      	str	r3, [sp, #12]
 8009600:	e7dd      	b.n	80095be <_dtoa_r+0x9e>
 8009602:	ab12      	add	r3, sp, #72	; 0x48
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	ab13      	add	r3, sp, #76	; 0x4c
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	4620      	mov	r0, r4
 800960c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009610:	f001 f8a0 	bl	800a754 <__d2b>
 8009614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009618:	4683      	mov	fp, r0
 800961a:	2d00      	cmp	r5, #0
 800961c:	d07c      	beq.n	8009718 <_dtoa_r+0x1f8>
 800961e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009620:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009628:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800962c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009630:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009634:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009638:	4b7b      	ldr	r3, [pc, #492]	; (8009828 <_dtoa_r+0x308>)
 800963a:	2200      	movs	r2, #0
 800963c:	4630      	mov	r0, r6
 800963e:	4639      	mov	r1, r7
 8009640:	f7f6 fe82 	bl	8000348 <__aeabi_dsub>
 8009644:	a36c      	add	r3, pc, #432	; (adr r3, 80097f8 <_dtoa_r+0x2d8>)
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	f7f7 f835 	bl	80006b8 <__aeabi_dmul>
 800964e:	a36c      	add	r3, pc, #432	; (adr r3, 8009800 <_dtoa_r+0x2e0>)
 8009650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009654:	f7f6 fe7a 	bl	800034c <__adddf3>
 8009658:	4606      	mov	r6, r0
 800965a:	4628      	mov	r0, r5
 800965c:	460f      	mov	r7, r1
 800965e:	f7f6 ffc1 	bl	80005e4 <__aeabi_i2d>
 8009662:	a369      	add	r3, pc, #420	; (adr r3, 8009808 <_dtoa_r+0x2e8>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f7f7 f826 	bl	80006b8 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4630      	mov	r0, r6
 8009672:	4639      	mov	r1, r7
 8009674:	f7f6 fe6a 	bl	800034c <__adddf3>
 8009678:	4606      	mov	r6, r0
 800967a:	460f      	mov	r7, r1
 800967c:	f7f7 facc 	bl	8000c18 <__aeabi_d2iz>
 8009680:	2200      	movs	r2, #0
 8009682:	4682      	mov	sl, r0
 8009684:	2300      	movs	r3, #0
 8009686:	4630      	mov	r0, r6
 8009688:	4639      	mov	r1, r7
 800968a:	f7f7 fa87 	bl	8000b9c <__aeabi_dcmplt>
 800968e:	b148      	cbz	r0, 80096a4 <_dtoa_r+0x184>
 8009690:	4650      	mov	r0, sl
 8009692:	f7f6 ffa7 	bl	80005e4 <__aeabi_i2d>
 8009696:	4632      	mov	r2, r6
 8009698:	463b      	mov	r3, r7
 800969a:	f7f7 fa75 	bl	8000b88 <__aeabi_dcmpeq>
 800969e:	b908      	cbnz	r0, 80096a4 <_dtoa_r+0x184>
 80096a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80096a4:	f1ba 0f16 	cmp.w	sl, #22
 80096a8:	d854      	bhi.n	8009754 <_dtoa_r+0x234>
 80096aa:	4b60      	ldr	r3, [pc, #384]	; (800982c <_dtoa_r+0x30c>)
 80096ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096b8:	f7f7 fa70 	bl	8000b9c <__aeabi_dcmplt>
 80096bc:	2800      	cmp	r0, #0
 80096be:	d04b      	beq.n	8009758 <_dtoa_r+0x238>
 80096c0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80096c4:	2300      	movs	r3, #0
 80096c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80096c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096ca:	1b5d      	subs	r5, r3, r5
 80096cc:	1e6b      	subs	r3, r5, #1
 80096ce:	9307      	str	r3, [sp, #28]
 80096d0:	bf43      	ittte	mi
 80096d2:	2300      	movmi	r3, #0
 80096d4:	f1c5 0801 	rsbmi	r8, r5, #1
 80096d8:	9307      	strmi	r3, [sp, #28]
 80096da:	f04f 0800 	movpl.w	r8, #0
 80096de:	f1ba 0f00 	cmp.w	sl, #0
 80096e2:	db3b      	blt.n	800975c <_dtoa_r+0x23c>
 80096e4:	9b07      	ldr	r3, [sp, #28]
 80096e6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80096ea:	4453      	add	r3, sl
 80096ec:	9307      	str	r3, [sp, #28]
 80096ee:	2300      	movs	r3, #0
 80096f0:	9308      	str	r3, [sp, #32]
 80096f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80096f4:	2b09      	cmp	r3, #9
 80096f6:	d869      	bhi.n	80097cc <_dtoa_r+0x2ac>
 80096f8:	2b05      	cmp	r3, #5
 80096fa:	bfc4      	itt	gt
 80096fc:	3b04      	subgt	r3, #4
 80096fe:	9320      	strgt	r3, [sp, #128]	; 0x80
 8009700:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009702:	f1a3 0302 	sub.w	r3, r3, #2
 8009706:	bfcc      	ite	gt
 8009708:	2500      	movgt	r5, #0
 800970a:	2501      	movle	r5, #1
 800970c:	2b03      	cmp	r3, #3
 800970e:	d869      	bhi.n	80097e4 <_dtoa_r+0x2c4>
 8009710:	e8df f003 	tbb	[pc, r3]
 8009714:	5a4c4e2c 	.word	0x5a4c4e2c
 8009718:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800971c:	441d      	add	r5, r3
 800971e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009722:	2b20      	cmp	r3, #32
 8009724:	bfc1      	itttt	gt
 8009726:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800972a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800972e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009732:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009736:	bfda      	itte	le
 8009738:	f1c3 0320 	rsble	r3, r3, #32
 800973c:	fa06 f003 	lslle.w	r0, r6, r3
 8009740:	4318      	orrgt	r0, r3
 8009742:	f7f6 ff3f 	bl	80005c4 <__aeabi_ui2d>
 8009746:	2301      	movs	r3, #1
 8009748:	4606      	mov	r6, r0
 800974a:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800974e:	3d01      	subs	r5, #1
 8009750:	9310      	str	r3, [sp, #64]	; 0x40
 8009752:	e771      	b.n	8009638 <_dtoa_r+0x118>
 8009754:	2301      	movs	r3, #1
 8009756:	e7b6      	b.n	80096c6 <_dtoa_r+0x1a6>
 8009758:	900f      	str	r0, [sp, #60]	; 0x3c
 800975a:	e7b5      	b.n	80096c8 <_dtoa_r+0x1a8>
 800975c:	f1ca 0300 	rsb	r3, sl, #0
 8009760:	9308      	str	r3, [sp, #32]
 8009762:	2300      	movs	r3, #0
 8009764:	eba8 080a 	sub.w	r8, r8, sl
 8009768:	930e      	str	r3, [sp, #56]	; 0x38
 800976a:	e7c2      	b.n	80096f2 <_dtoa_r+0x1d2>
 800976c:	2300      	movs	r3, #0
 800976e:	930c      	str	r3, [sp, #48]	; 0x30
 8009770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009772:	2b00      	cmp	r3, #0
 8009774:	dc39      	bgt.n	80097ea <_dtoa_r+0x2ca>
 8009776:	f04f 0901 	mov.w	r9, #1
 800977a:	f8cd 9018 	str.w	r9, [sp, #24]
 800977e:	464b      	mov	r3, r9
 8009780:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8009784:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009786:	2200      	movs	r2, #0
 8009788:	6042      	str	r2, [r0, #4]
 800978a:	2204      	movs	r2, #4
 800978c:	f102 0614 	add.w	r6, r2, #20
 8009790:	429e      	cmp	r6, r3
 8009792:	6841      	ldr	r1, [r0, #4]
 8009794:	d94e      	bls.n	8009834 <_dtoa_r+0x314>
 8009796:	4620      	mov	r0, r4
 8009798:	f000 fcba 	bl	800a110 <_Balloc>
 800979c:	9003      	str	r0, [sp, #12]
 800979e:	2800      	cmp	r0, #0
 80097a0:	d14c      	bne.n	800983c <_dtoa_r+0x31c>
 80097a2:	4b23      	ldr	r3, [pc, #140]	; (8009830 <_dtoa_r+0x310>)
 80097a4:	4602      	mov	r2, r0
 80097a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80097aa:	e6cf      	b.n	800954c <_dtoa_r+0x2c>
 80097ac:	2301      	movs	r3, #1
 80097ae:	e7de      	b.n	800976e <_dtoa_r+0x24e>
 80097b0:	2300      	movs	r3, #0
 80097b2:	930c      	str	r3, [sp, #48]	; 0x30
 80097b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097b6:	eb0a 0903 	add.w	r9, sl, r3
 80097ba:	f109 0301 	add.w	r3, r9, #1
 80097be:	2b01      	cmp	r3, #1
 80097c0:	9306      	str	r3, [sp, #24]
 80097c2:	bfb8      	it	lt
 80097c4:	2301      	movlt	r3, #1
 80097c6:	e7dd      	b.n	8009784 <_dtoa_r+0x264>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e7f2      	b.n	80097b2 <_dtoa_r+0x292>
 80097cc:	2501      	movs	r5, #1
 80097ce:	2300      	movs	r3, #0
 80097d0:	9320      	str	r3, [sp, #128]	; 0x80
 80097d2:	950c      	str	r5, [sp, #48]	; 0x30
 80097d4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80097d8:	2200      	movs	r2, #0
 80097da:	f8cd 9018 	str.w	r9, [sp, #24]
 80097de:	2312      	movs	r3, #18
 80097e0:	9221      	str	r2, [sp, #132]	; 0x84
 80097e2:	e7cf      	b.n	8009784 <_dtoa_r+0x264>
 80097e4:	2301      	movs	r3, #1
 80097e6:	930c      	str	r3, [sp, #48]	; 0x30
 80097e8:	e7f4      	b.n	80097d4 <_dtoa_r+0x2b4>
 80097ea:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 80097ee:	f8cd 9018 	str.w	r9, [sp, #24]
 80097f2:	464b      	mov	r3, r9
 80097f4:	e7c6      	b.n	8009784 <_dtoa_r+0x264>
 80097f6:	bf00      	nop
 80097f8:	636f4361 	.word	0x636f4361
 80097fc:	3fd287a7 	.word	0x3fd287a7
 8009800:	8b60c8b3 	.word	0x8b60c8b3
 8009804:	3fc68a28 	.word	0x3fc68a28
 8009808:	509f79fb 	.word	0x509f79fb
 800980c:	3fd34413 	.word	0x3fd34413
 8009810:	0800bde9 	.word	0x0800bde9
 8009814:	0800be00 	.word	0x0800be00
 8009818:	7ff00000 	.word	0x7ff00000
 800981c:	0800bde5 	.word	0x0800bde5
 8009820:	0800bddc 	.word	0x0800bddc
 8009824:	0800bdb9 	.word	0x0800bdb9
 8009828:	3ff80000 	.word	0x3ff80000
 800982c:	0800bef8 	.word	0x0800bef8
 8009830:	0800be5f 	.word	0x0800be5f
 8009834:	3101      	adds	r1, #1
 8009836:	6041      	str	r1, [r0, #4]
 8009838:	0052      	lsls	r2, r2, #1
 800983a:	e7a7      	b.n	800978c <_dtoa_r+0x26c>
 800983c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800983e:	9a03      	ldr	r2, [sp, #12]
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	9b06      	ldr	r3, [sp, #24]
 8009844:	2b0e      	cmp	r3, #14
 8009846:	f200 80ad 	bhi.w	80099a4 <_dtoa_r+0x484>
 800984a:	2d00      	cmp	r5, #0
 800984c:	f000 80aa 	beq.w	80099a4 <_dtoa_r+0x484>
 8009850:	f1ba 0f00 	cmp.w	sl, #0
 8009854:	dd36      	ble.n	80098c4 <_dtoa_r+0x3a4>
 8009856:	4ac3      	ldr	r2, [pc, #780]	; (8009b64 <_dtoa_r+0x644>)
 8009858:	f00a 030f 	and.w	r3, sl, #15
 800985c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009860:	ed93 7b00 	vldr	d7, [r3]
 8009864:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009868:	ea4f 172a 	mov.w	r7, sl, asr #4
 800986c:	eeb0 8a47 	vmov.f32	s16, s14
 8009870:	eef0 8a67 	vmov.f32	s17, s15
 8009874:	d016      	beq.n	80098a4 <_dtoa_r+0x384>
 8009876:	4bbc      	ldr	r3, [pc, #752]	; (8009b68 <_dtoa_r+0x648>)
 8009878:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800987c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009880:	f7f7 f844 	bl	800090c <__aeabi_ddiv>
 8009884:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009888:	f007 070f 	and.w	r7, r7, #15
 800988c:	2503      	movs	r5, #3
 800988e:	4eb6      	ldr	r6, [pc, #728]	; (8009b68 <_dtoa_r+0x648>)
 8009890:	b957      	cbnz	r7, 80098a8 <_dtoa_r+0x388>
 8009892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009896:	ec53 2b18 	vmov	r2, r3, d8
 800989a:	f7f7 f837 	bl	800090c <__aeabi_ddiv>
 800989e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098a2:	e029      	b.n	80098f8 <_dtoa_r+0x3d8>
 80098a4:	2502      	movs	r5, #2
 80098a6:	e7f2      	b.n	800988e <_dtoa_r+0x36e>
 80098a8:	07f9      	lsls	r1, r7, #31
 80098aa:	d508      	bpl.n	80098be <_dtoa_r+0x39e>
 80098ac:	ec51 0b18 	vmov	r0, r1, d8
 80098b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098b4:	f7f6 ff00 	bl	80006b8 <__aeabi_dmul>
 80098b8:	ec41 0b18 	vmov	d8, r0, r1
 80098bc:	3501      	adds	r5, #1
 80098be:	107f      	asrs	r7, r7, #1
 80098c0:	3608      	adds	r6, #8
 80098c2:	e7e5      	b.n	8009890 <_dtoa_r+0x370>
 80098c4:	f000 80a6 	beq.w	8009a14 <_dtoa_r+0x4f4>
 80098c8:	f1ca 0600 	rsb	r6, sl, #0
 80098cc:	4ba5      	ldr	r3, [pc, #660]	; (8009b64 <_dtoa_r+0x644>)
 80098ce:	4fa6      	ldr	r7, [pc, #664]	; (8009b68 <_dtoa_r+0x648>)
 80098d0:	f006 020f 	and.w	r2, r6, #15
 80098d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098e0:	f7f6 feea 	bl	80006b8 <__aeabi_dmul>
 80098e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098e8:	1136      	asrs	r6, r6, #4
 80098ea:	2300      	movs	r3, #0
 80098ec:	2502      	movs	r5, #2
 80098ee:	2e00      	cmp	r6, #0
 80098f0:	f040 8085 	bne.w	80099fe <_dtoa_r+0x4de>
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1d2      	bne.n	800989e <_dtoa_r+0x37e>
 80098f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 808c 	beq.w	8009a18 <_dtoa_r+0x4f8>
 8009900:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009904:	4b99      	ldr	r3, [pc, #612]	; (8009b6c <_dtoa_r+0x64c>)
 8009906:	2200      	movs	r2, #0
 8009908:	4630      	mov	r0, r6
 800990a:	4639      	mov	r1, r7
 800990c:	f7f7 f946 	bl	8000b9c <__aeabi_dcmplt>
 8009910:	2800      	cmp	r0, #0
 8009912:	f000 8081 	beq.w	8009a18 <_dtoa_r+0x4f8>
 8009916:	9b06      	ldr	r3, [sp, #24]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d07d      	beq.n	8009a18 <_dtoa_r+0x4f8>
 800991c:	f1b9 0f00 	cmp.w	r9, #0
 8009920:	dd3c      	ble.n	800999c <_dtoa_r+0x47c>
 8009922:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009926:	9309      	str	r3, [sp, #36]	; 0x24
 8009928:	2200      	movs	r2, #0
 800992a:	4b91      	ldr	r3, [pc, #580]	; (8009b70 <_dtoa_r+0x650>)
 800992c:	4630      	mov	r0, r6
 800992e:	4639      	mov	r1, r7
 8009930:	f7f6 fec2 	bl	80006b8 <__aeabi_dmul>
 8009934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009938:	3501      	adds	r5, #1
 800993a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800993e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009942:	4628      	mov	r0, r5
 8009944:	f7f6 fe4e 	bl	80005e4 <__aeabi_i2d>
 8009948:	4632      	mov	r2, r6
 800994a:	463b      	mov	r3, r7
 800994c:	f7f6 feb4 	bl	80006b8 <__aeabi_dmul>
 8009950:	4b88      	ldr	r3, [pc, #544]	; (8009b74 <_dtoa_r+0x654>)
 8009952:	2200      	movs	r2, #0
 8009954:	f7f6 fcfa 	bl	800034c <__adddf3>
 8009958:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800995c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009960:	9305      	str	r3, [sp, #20]
 8009962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009964:	2b00      	cmp	r3, #0
 8009966:	d15c      	bne.n	8009a22 <_dtoa_r+0x502>
 8009968:	4b83      	ldr	r3, [pc, #524]	; (8009b78 <_dtoa_r+0x658>)
 800996a:	2200      	movs	r2, #0
 800996c:	4630      	mov	r0, r6
 800996e:	4639      	mov	r1, r7
 8009970:	f7f6 fcea 	bl	8000348 <__aeabi_dsub>
 8009974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009978:	4606      	mov	r6, r0
 800997a:	460f      	mov	r7, r1
 800997c:	f7f7 f92c 	bl	8000bd8 <__aeabi_dcmpgt>
 8009980:	2800      	cmp	r0, #0
 8009982:	f040 8296 	bne.w	8009eb2 <_dtoa_r+0x992>
 8009986:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800998a:	4630      	mov	r0, r6
 800998c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009990:	4639      	mov	r1, r7
 8009992:	f7f7 f903 	bl	8000b9c <__aeabi_dcmplt>
 8009996:	2800      	cmp	r0, #0
 8009998:	f040 8288 	bne.w	8009eac <_dtoa_r+0x98c>
 800999c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80099a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f2c0 8158 	blt.w	8009c5c <_dtoa_r+0x73c>
 80099ac:	f1ba 0f0e 	cmp.w	sl, #14
 80099b0:	f300 8154 	bgt.w	8009c5c <_dtoa_r+0x73c>
 80099b4:	4b6b      	ldr	r3, [pc, #428]	; (8009b64 <_dtoa_r+0x644>)
 80099b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f280 80e3 	bge.w	8009b8c <_dtoa_r+0x66c>
 80099c6:	9b06      	ldr	r3, [sp, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f300 80df 	bgt.w	8009b8c <_dtoa_r+0x66c>
 80099ce:	f040 826d 	bne.w	8009eac <_dtoa_r+0x98c>
 80099d2:	4b69      	ldr	r3, [pc, #420]	; (8009b78 <_dtoa_r+0x658>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	4640      	mov	r0, r8
 80099d8:	4649      	mov	r1, r9
 80099da:	f7f6 fe6d 	bl	80006b8 <__aeabi_dmul>
 80099de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099e2:	f7f7 f8ef 	bl	8000bc4 <__aeabi_dcmpge>
 80099e6:	9e06      	ldr	r6, [sp, #24]
 80099e8:	4637      	mov	r7, r6
 80099ea:	2800      	cmp	r0, #0
 80099ec:	f040 8243 	bne.w	8009e76 <_dtoa_r+0x956>
 80099f0:	9d03      	ldr	r5, [sp, #12]
 80099f2:	2331      	movs	r3, #49	; 0x31
 80099f4:	f805 3b01 	strb.w	r3, [r5], #1
 80099f8:	f10a 0a01 	add.w	sl, sl, #1
 80099fc:	e23f      	b.n	8009e7e <_dtoa_r+0x95e>
 80099fe:	07f2      	lsls	r2, r6, #31
 8009a00:	d505      	bpl.n	8009a0e <_dtoa_r+0x4ee>
 8009a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a06:	f7f6 fe57 	bl	80006b8 <__aeabi_dmul>
 8009a0a:	3501      	adds	r5, #1
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	1076      	asrs	r6, r6, #1
 8009a10:	3708      	adds	r7, #8
 8009a12:	e76c      	b.n	80098ee <_dtoa_r+0x3ce>
 8009a14:	2502      	movs	r5, #2
 8009a16:	e76f      	b.n	80098f8 <_dtoa_r+0x3d8>
 8009a18:	9b06      	ldr	r3, [sp, #24]
 8009a1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8009a20:	e78d      	b.n	800993e <_dtoa_r+0x41e>
 8009a22:	9903      	ldr	r1, [sp, #12]
 8009a24:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009a26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a28:	4b4e      	ldr	r3, [pc, #312]	; (8009b64 <_dtoa_r+0x644>)
 8009a2a:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a2e:	4401      	add	r1, r0
 8009a30:	9104      	str	r1, [sp, #16]
 8009a32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a34:	eeb0 8a47 	vmov.f32	s16, s14
 8009a38:	eef0 8a67 	vmov.f32	s17, s15
 8009a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d045      	beq.n	8009ad4 <_dtoa_r+0x5b4>
 8009a48:	494c      	ldr	r1, [pc, #304]	; (8009b7c <_dtoa_r+0x65c>)
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	f7f6 ff5e 	bl	800090c <__aeabi_ddiv>
 8009a50:	ec53 2b18 	vmov	r2, r3, d8
 8009a54:	f7f6 fc78 	bl	8000348 <__aeabi_dsub>
 8009a58:	9d03      	ldr	r5, [sp, #12]
 8009a5a:	ec41 0b18 	vmov	d8, r0, r1
 8009a5e:	4639      	mov	r1, r7
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7f7 f8d9 	bl	8000c18 <__aeabi_d2iz>
 8009a66:	900d      	str	r0, [sp, #52]	; 0x34
 8009a68:	f7f6 fdbc 	bl	80005e4 <__aeabi_i2d>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4630      	mov	r0, r6
 8009a72:	4639      	mov	r1, r7
 8009a74:	f7f6 fc68 	bl	8000348 <__aeabi_dsub>
 8009a78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a7a:	3330      	adds	r3, #48	; 0x30
 8009a7c:	f805 3b01 	strb.w	r3, [r5], #1
 8009a80:	ec53 2b18 	vmov	r2, r3, d8
 8009a84:	4606      	mov	r6, r0
 8009a86:	460f      	mov	r7, r1
 8009a88:	f7f7 f888 	bl	8000b9c <__aeabi_dcmplt>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d165      	bne.n	8009b5c <_dtoa_r+0x63c>
 8009a90:	4632      	mov	r2, r6
 8009a92:	463b      	mov	r3, r7
 8009a94:	4935      	ldr	r1, [pc, #212]	; (8009b6c <_dtoa_r+0x64c>)
 8009a96:	2000      	movs	r0, #0
 8009a98:	f7f6 fc56 	bl	8000348 <__aeabi_dsub>
 8009a9c:	ec53 2b18 	vmov	r2, r3, d8
 8009aa0:	f7f7 f87c 	bl	8000b9c <__aeabi_dcmplt>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	f040 80b9 	bne.w	8009c1c <_dtoa_r+0x6fc>
 8009aaa:	9b04      	ldr	r3, [sp, #16]
 8009aac:	429d      	cmp	r5, r3
 8009aae:	f43f af75 	beq.w	800999c <_dtoa_r+0x47c>
 8009ab2:	4b2f      	ldr	r3, [pc, #188]	; (8009b70 <_dtoa_r+0x650>)
 8009ab4:	ec51 0b18 	vmov	r0, r1, d8
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f7f6 fdfd 	bl	80006b8 <__aeabi_dmul>
 8009abe:	4b2c      	ldr	r3, [pc, #176]	; (8009b70 <_dtoa_r+0x650>)
 8009ac0:	ec41 0b18 	vmov	d8, r0, r1
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	4639      	mov	r1, r7
 8009aca:	f7f6 fdf5 	bl	80006b8 <__aeabi_dmul>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	460f      	mov	r7, r1
 8009ad2:	e7c4      	b.n	8009a5e <_dtoa_r+0x53e>
 8009ad4:	ec51 0b17 	vmov	r0, r1, d7
 8009ad8:	f7f6 fdee 	bl	80006b8 <__aeabi_dmul>
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	9d03      	ldr	r5, [sp, #12]
 8009ae0:	930d      	str	r3, [sp, #52]	; 0x34
 8009ae2:	ec41 0b18 	vmov	d8, r0, r1
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f7f7 f895 	bl	8000c18 <__aeabi_d2iz>
 8009aee:	9011      	str	r0, [sp, #68]	; 0x44
 8009af0:	f7f6 fd78 	bl	80005e4 <__aeabi_i2d>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	4630      	mov	r0, r6
 8009afa:	4639      	mov	r1, r7
 8009afc:	f7f6 fc24 	bl	8000348 <__aeabi_dsub>
 8009b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b02:	3330      	adds	r3, #48	; 0x30
 8009b04:	f805 3b01 	strb.w	r3, [r5], #1
 8009b08:	9b04      	ldr	r3, [sp, #16]
 8009b0a:	429d      	cmp	r5, r3
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	460f      	mov	r7, r1
 8009b10:	f04f 0200 	mov.w	r2, #0
 8009b14:	d134      	bne.n	8009b80 <_dtoa_r+0x660>
 8009b16:	4b19      	ldr	r3, [pc, #100]	; (8009b7c <_dtoa_r+0x65c>)
 8009b18:	ec51 0b18 	vmov	r0, r1, d8
 8009b1c:	f7f6 fc16 	bl	800034c <__adddf3>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4630      	mov	r0, r6
 8009b26:	4639      	mov	r1, r7
 8009b28:	f7f7 f856 	bl	8000bd8 <__aeabi_dcmpgt>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d175      	bne.n	8009c1c <_dtoa_r+0x6fc>
 8009b30:	ec53 2b18 	vmov	r2, r3, d8
 8009b34:	4911      	ldr	r1, [pc, #68]	; (8009b7c <_dtoa_r+0x65c>)
 8009b36:	2000      	movs	r0, #0
 8009b38:	f7f6 fc06 	bl	8000348 <__aeabi_dsub>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4630      	mov	r0, r6
 8009b42:	4639      	mov	r1, r7
 8009b44:	f7f7 f82a 	bl	8000b9c <__aeabi_dcmplt>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	f43f af27 	beq.w	800999c <_dtoa_r+0x47c>
 8009b4e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009b50:	1e6b      	subs	r3, r5, #1
 8009b52:	930d      	str	r3, [sp, #52]	; 0x34
 8009b54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b58:	2b30      	cmp	r3, #48	; 0x30
 8009b5a:	d0f8      	beq.n	8009b4e <_dtoa_r+0x62e>
 8009b5c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009b60:	e04a      	b.n	8009bf8 <_dtoa_r+0x6d8>
 8009b62:	bf00      	nop
 8009b64:	0800bef8 	.word	0x0800bef8
 8009b68:	0800bed0 	.word	0x0800bed0
 8009b6c:	3ff00000 	.word	0x3ff00000
 8009b70:	40240000 	.word	0x40240000
 8009b74:	401c0000 	.word	0x401c0000
 8009b78:	40140000 	.word	0x40140000
 8009b7c:	3fe00000 	.word	0x3fe00000
 8009b80:	4baf      	ldr	r3, [pc, #700]	; (8009e40 <_dtoa_r+0x920>)
 8009b82:	f7f6 fd99 	bl	80006b8 <__aeabi_dmul>
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	e7ac      	b.n	8009ae6 <_dtoa_r+0x5c6>
 8009b8c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009b90:	9d03      	ldr	r5, [sp, #12]
 8009b92:	4642      	mov	r2, r8
 8009b94:	464b      	mov	r3, r9
 8009b96:	4630      	mov	r0, r6
 8009b98:	4639      	mov	r1, r7
 8009b9a:	f7f6 feb7 	bl	800090c <__aeabi_ddiv>
 8009b9e:	f7f7 f83b 	bl	8000c18 <__aeabi_d2iz>
 8009ba2:	9004      	str	r0, [sp, #16]
 8009ba4:	f7f6 fd1e 	bl	80005e4 <__aeabi_i2d>
 8009ba8:	4642      	mov	r2, r8
 8009baa:	464b      	mov	r3, r9
 8009bac:	f7f6 fd84 	bl	80006b8 <__aeabi_dmul>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	f7f6 fbc6 	bl	8000348 <__aeabi_dsub>
 8009bbc:	9e04      	ldr	r6, [sp, #16]
 8009bbe:	9f06      	ldr	r7, [sp, #24]
 8009bc0:	3630      	adds	r6, #48	; 0x30
 8009bc2:	f805 6b01 	strb.w	r6, [r5], #1
 8009bc6:	9e03      	ldr	r6, [sp, #12]
 8009bc8:	1bae      	subs	r6, r5, r6
 8009bca:	42b7      	cmp	r7, r6
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	d137      	bne.n	8009c42 <_dtoa_r+0x722>
 8009bd2:	f7f6 fbbb 	bl	800034c <__adddf3>
 8009bd6:	4642      	mov	r2, r8
 8009bd8:	464b      	mov	r3, r9
 8009bda:	4606      	mov	r6, r0
 8009bdc:	460f      	mov	r7, r1
 8009bde:	f7f6 fffb 	bl	8000bd8 <__aeabi_dcmpgt>
 8009be2:	b9c8      	cbnz	r0, 8009c18 <_dtoa_r+0x6f8>
 8009be4:	4642      	mov	r2, r8
 8009be6:	464b      	mov	r3, r9
 8009be8:	4630      	mov	r0, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	f7f6 ffcc 	bl	8000b88 <__aeabi_dcmpeq>
 8009bf0:	b110      	cbz	r0, 8009bf8 <_dtoa_r+0x6d8>
 8009bf2:	9b04      	ldr	r3, [sp, #16]
 8009bf4:	07d9      	lsls	r1, r3, #31
 8009bf6:	d40f      	bmi.n	8009c18 <_dtoa_r+0x6f8>
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	4659      	mov	r1, fp
 8009bfc:	f000 fac8 	bl	800a190 <_Bfree>
 8009c00:	2300      	movs	r3, #0
 8009c02:	702b      	strb	r3, [r5, #0]
 8009c04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c06:	f10a 0001 	add.w	r0, sl, #1
 8009c0a:	6018      	str	r0, [r3, #0]
 8009c0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f43f acd5 	beq.w	80095be <_dtoa_r+0x9e>
 8009c14:	601d      	str	r5, [r3, #0]
 8009c16:	e4d2      	b.n	80095be <_dtoa_r+0x9e>
 8009c18:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	461d      	mov	r5, r3
 8009c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c24:	2a39      	cmp	r2, #57	; 0x39
 8009c26:	d108      	bne.n	8009c3a <_dtoa_r+0x71a>
 8009c28:	9a03      	ldr	r2, [sp, #12]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d1f7      	bne.n	8009c1e <_dtoa_r+0x6fe>
 8009c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c30:	9903      	ldr	r1, [sp, #12]
 8009c32:	3201      	adds	r2, #1
 8009c34:	9209      	str	r2, [sp, #36]	; 0x24
 8009c36:	2230      	movs	r2, #48	; 0x30
 8009c38:	700a      	strb	r2, [r1, #0]
 8009c3a:	781a      	ldrb	r2, [r3, #0]
 8009c3c:	3201      	adds	r2, #1
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	e78c      	b.n	8009b5c <_dtoa_r+0x63c>
 8009c42:	4b7f      	ldr	r3, [pc, #508]	; (8009e40 <_dtoa_r+0x920>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	f7f6 fd37 	bl	80006b8 <__aeabi_dmul>
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4606      	mov	r6, r0
 8009c50:	460f      	mov	r7, r1
 8009c52:	f7f6 ff99 	bl	8000b88 <__aeabi_dcmpeq>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d09b      	beq.n	8009b92 <_dtoa_r+0x672>
 8009c5a:	e7cd      	b.n	8009bf8 <_dtoa_r+0x6d8>
 8009c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c5e:	2a00      	cmp	r2, #0
 8009c60:	f000 80c4 	beq.w	8009dec <_dtoa_r+0x8cc>
 8009c64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c66:	2a01      	cmp	r2, #1
 8009c68:	f300 80a8 	bgt.w	8009dbc <_dtoa_r+0x89c>
 8009c6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c6e:	2a00      	cmp	r2, #0
 8009c70:	f000 80a0 	beq.w	8009db4 <_dtoa_r+0x894>
 8009c74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c78:	9e08      	ldr	r6, [sp, #32]
 8009c7a:	4645      	mov	r5, r8
 8009c7c:	9a07      	ldr	r2, [sp, #28]
 8009c7e:	2101      	movs	r1, #1
 8009c80:	441a      	add	r2, r3
 8009c82:	4620      	mov	r0, r4
 8009c84:	4498      	add	r8, r3
 8009c86:	9207      	str	r2, [sp, #28]
 8009c88:	f000 fb3e 	bl	800a308 <__i2b>
 8009c8c:	4607      	mov	r7, r0
 8009c8e:	2d00      	cmp	r5, #0
 8009c90:	dd0b      	ble.n	8009caa <_dtoa_r+0x78a>
 8009c92:	9b07      	ldr	r3, [sp, #28]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dd08      	ble.n	8009caa <_dtoa_r+0x78a>
 8009c98:	42ab      	cmp	r3, r5
 8009c9a:	9a07      	ldr	r2, [sp, #28]
 8009c9c:	bfa8      	it	ge
 8009c9e:	462b      	movge	r3, r5
 8009ca0:	eba8 0803 	sub.w	r8, r8, r3
 8009ca4:	1aed      	subs	r5, r5, r3
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	9307      	str	r3, [sp, #28]
 8009caa:	9b08      	ldr	r3, [sp, #32]
 8009cac:	b1fb      	cbz	r3, 8009cee <_dtoa_r+0x7ce>
 8009cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f000 809f 	beq.w	8009df4 <_dtoa_r+0x8d4>
 8009cb6:	2e00      	cmp	r6, #0
 8009cb8:	dd11      	ble.n	8009cde <_dtoa_r+0x7be>
 8009cba:	4639      	mov	r1, r7
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 fbde 	bl	800a480 <__pow5mult>
 8009cc4:	465a      	mov	r2, fp
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	4607      	mov	r7, r0
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f000 fb32 	bl	800a334 <__multiply>
 8009cd0:	4659      	mov	r1, fp
 8009cd2:	9009      	str	r0, [sp, #36]	; 0x24
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f000 fa5b 	bl	800a190 <_Bfree>
 8009cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cdc:	469b      	mov	fp, r3
 8009cde:	9b08      	ldr	r3, [sp, #32]
 8009ce0:	1b9a      	subs	r2, r3, r6
 8009ce2:	d004      	beq.n	8009cee <_dtoa_r+0x7ce>
 8009ce4:	4659      	mov	r1, fp
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f000 fbca 	bl	800a480 <__pow5mult>
 8009cec:	4683      	mov	fp, r0
 8009cee:	2101      	movs	r1, #1
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 fb09 	bl	800a308 <__i2b>
 8009cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	dd7c      	ble.n	8009df8 <_dtoa_r+0x8d8>
 8009cfe:	461a      	mov	r2, r3
 8009d00:	4601      	mov	r1, r0
 8009d02:	4620      	mov	r0, r4
 8009d04:	f000 fbbc 	bl	800a480 <__pow5mult>
 8009d08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	dd76      	ble.n	8009dfe <_dtoa_r+0x8de>
 8009d10:	2300      	movs	r3, #0
 8009d12:	9308      	str	r3, [sp, #32]
 8009d14:	6933      	ldr	r3, [r6, #16]
 8009d16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d1a:	6918      	ldr	r0, [r3, #16]
 8009d1c:	f000 faa4 	bl	800a268 <__hi0bits>
 8009d20:	f1c0 0020 	rsb	r0, r0, #32
 8009d24:	9b07      	ldr	r3, [sp, #28]
 8009d26:	4418      	add	r0, r3
 8009d28:	f010 001f 	ands.w	r0, r0, #31
 8009d2c:	f000 8086 	beq.w	8009e3c <_dtoa_r+0x91c>
 8009d30:	f1c0 0320 	rsb	r3, r0, #32
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	dd7f      	ble.n	8009e38 <_dtoa_r+0x918>
 8009d38:	f1c0 001c 	rsb	r0, r0, #28
 8009d3c:	9b07      	ldr	r3, [sp, #28]
 8009d3e:	4403      	add	r3, r0
 8009d40:	4480      	add	r8, r0
 8009d42:	4405      	add	r5, r0
 8009d44:	9307      	str	r3, [sp, #28]
 8009d46:	f1b8 0f00 	cmp.w	r8, #0
 8009d4a:	dd05      	ble.n	8009d58 <_dtoa_r+0x838>
 8009d4c:	4659      	mov	r1, fp
 8009d4e:	4642      	mov	r2, r8
 8009d50:	4620      	mov	r0, r4
 8009d52:	f000 fbef 	bl	800a534 <__lshift>
 8009d56:	4683      	mov	fp, r0
 8009d58:	9b07      	ldr	r3, [sp, #28]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	dd05      	ble.n	8009d6a <_dtoa_r+0x84a>
 8009d5e:	4631      	mov	r1, r6
 8009d60:	461a      	mov	r2, r3
 8009d62:	4620      	mov	r0, r4
 8009d64:	f000 fbe6 	bl	800a534 <__lshift>
 8009d68:	4606      	mov	r6, r0
 8009d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d069      	beq.n	8009e44 <_dtoa_r+0x924>
 8009d70:	4631      	mov	r1, r6
 8009d72:	4658      	mov	r0, fp
 8009d74:	f000 fc4a 	bl	800a60c <__mcmp>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	da63      	bge.n	8009e44 <_dtoa_r+0x924>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4659      	mov	r1, fp
 8009d80:	220a      	movs	r2, #10
 8009d82:	4620      	mov	r0, r4
 8009d84:	f000 fa26 	bl	800a1d4 <__multadd>
 8009d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009d8e:	4683      	mov	fp, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 818f 	beq.w	800a0b4 <_dtoa_r+0xb94>
 8009d96:	4639      	mov	r1, r7
 8009d98:	2300      	movs	r3, #0
 8009d9a:	220a      	movs	r2, #10
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 fa19 	bl	800a1d4 <__multadd>
 8009da2:	f1b9 0f00 	cmp.w	r9, #0
 8009da6:	4607      	mov	r7, r0
 8009da8:	f300 808e 	bgt.w	8009ec8 <_dtoa_r+0x9a8>
 8009dac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	dc50      	bgt.n	8009e54 <_dtoa_r+0x934>
 8009db2:	e089      	b.n	8009ec8 <_dtoa_r+0x9a8>
 8009db4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009db6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009dba:	e75d      	b.n	8009c78 <_dtoa_r+0x758>
 8009dbc:	9b06      	ldr	r3, [sp, #24]
 8009dbe:	1e5e      	subs	r6, r3, #1
 8009dc0:	9b08      	ldr	r3, [sp, #32]
 8009dc2:	42b3      	cmp	r3, r6
 8009dc4:	bfbf      	itttt	lt
 8009dc6:	9b08      	ldrlt	r3, [sp, #32]
 8009dc8:	9608      	strlt	r6, [sp, #32]
 8009dca:	1af2      	sublt	r2, r6, r3
 8009dcc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009dce:	bfb6      	itet	lt
 8009dd0:	189b      	addlt	r3, r3, r2
 8009dd2:	1b9e      	subge	r6, r3, r6
 8009dd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009dd6:	9b06      	ldr	r3, [sp, #24]
 8009dd8:	bfb8      	it	lt
 8009dda:	2600      	movlt	r6, #0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	bfb5      	itete	lt
 8009de0:	eba8 0503 	sublt.w	r5, r8, r3
 8009de4:	9b06      	ldrge	r3, [sp, #24]
 8009de6:	2300      	movlt	r3, #0
 8009de8:	4645      	movge	r5, r8
 8009dea:	e747      	b.n	8009c7c <_dtoa_r+0x75c>
 8009dec:	9e08      	ldr	r6, [sp, #32]
 8009dee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009df0:	4645      	mov	r5, r8
 8009df2:	e74c      	b.n	8009c8e <_dtoa_r+0x76e>
 8009df4:	9a08      	ldr	r2, [sp, #32]
 8009df6:	e775      	b.n	8009ce4 <_dtoa_r+0x7c4>
 8009df8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	dc18      	bgt.n	8009e30 <_dtoa_r+0x910>
 8009dfe:	9b04      	ldr	r3, [sp, #16]
 8009e00:	b9b3      	cbnz	r3, 8009e30 <_dtoa_r+0x910>
 8009e02:	9b05      	ldr	r3, [sp, #20]
 8009e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e08:	b9a3      	cbnz	r3, 8009e34 <_dtoa_r+0x914>
 8009e0a:	9b05      	ldr	r3, [sp, #20]
 8009e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e10:	0d1b      	lsrs	r3, r3, #20
 8009e12:	051b      	lsls	r3, r3, #20
 8009e14:	b12b      	cbz	r3, 8009e22 <_dtoa_r+0x902>
 8009e16:	9b07      	ldr	r3, [sp, #28]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	9307      	str	r3, [sp, #28]
 8009e1c:	f108 0801 	add.w	r8, r8, #1
 8009e20:	2301      	movs	r3, #1
 8009e22:	9308      	str	r3, [sp, #32]
 8009e24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f47f af74 	bne.w	8009d14 <_dtoa_r+0x7f4>
 8009e2c:	2001      	movs	r0, #1
 8009e2e:	e779      	b.n	8009d24 <_dtoa_r+0x804>
 8009e30:	2300      	movs	r3, #0
 8009e32:	e7f6      	b.n	8009e22 <_dtoa_r+0x902>
 8009e34:	9b04      	ldr	r3, [sp, #16]
 8009e36:	e7f4      	b.n	8009e22 <_dtoa_r+0x902>
 8009e38:	d085      	beq.n	8009d46 <_dtoa_r+0x826>
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	301c      	adds	r0, #28
 8009e3e:	e77d      	b.n	8009d3c <_dtoa_r+0x81c>
 8009e40:	40240000 	.word	0x40240000
 8009e44:	9b06      	ldr	r3, [sp, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	dc38      	bgt.n	8009ebc <_dtoa_r+0x99c>
 8009e4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	dd35      	ble.n	8009ebc <_dtoa_r+0x99c>
 8009e50:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009e54:	f1b9 0f00 	cmp.w	r9, #0
 8009e58:	d10d      	bne.n	8009e76 <_dtoa_r+0x956>
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	464b      	mov	r3, r9
 8009e5e:	2205      	movs	r2, #5
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 f9b7 	bl	800a1d4 <__multadd>
 8009e66:	4601      	mov	r1, r0
 8009e68:	4606      	mov	r6, r0
 8009e6a:	4658      	mov	r0, fp
 8009e6c:	f000 fbce 	bl	800a60c <__mcmp>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	f73f adbd 	bgt.w	80099f0 <_dtoa_r+0x4d0>
 8009e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e78:	9d03      	ldr	r5, [sp, #12]
 8009e7a:	ea6f 0a03 	mvn.w	sl, r3
 8009e7e:	f04f 0800 	mov.w	r8, #0
 8009e82:	4631      	mov	r1, r6
 8009e84:	4620      	mov	r0, r4
 8009e86:	f000 f983 	bl	800a190 <_Bfree>
 8009e8a:	2f00      	cmp	r7, #0
 8009e8c:	f43f aeb4 	beq.w	8009bf8 <_dtoa_r+0x6d8>
 8009e90:	f1b8 0f00 	cmp.w	r8, #0
 8009e94:	d005      	beq.n	8009ea2 <_dtoa_r+0x982>
 8009e96:	45b8      	cmp	r8, r7
 8009e98:	d003      	beq.n	8009ea2 <_dtoa_r+0x982>
 8009e9a:	4641      	mov	r1, r8
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f000 f977 	bl	800a190 <_Bfree>
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f000 f973 	bl	800a190 <_Bfree>
 8009eaa:	e6a5      	b.n	8009bf8 <_dtoa_r+0x6d8>
 8009eac:	2600      	movs	r6, #0
 8009eae:	4637      	mov	r7, r6
 8009eb0:	e7e1      	b.n	8009e76 <_dtoa_r+0x956>
 8009eb2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009eb4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009eb8:	4637      	mov	r7, r6
 8009eba:	e599      	b.n	80099f0 <_dtoa_r+0x4d0>
 8009ebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ebe:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f000 80fd 	beq.w	800a0c2 <_dtoa_r+0xba2>
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	dd05      	ble.n	8009ed8 <_dtoa_r+0x9b8>
 8009ecc:	4639      	mov	r1, r7
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 fb2f 	bl	800a534 <__lshift>
 8009ed6:	4607      	mov	r7, r0
 8009ed8:	9b08      	ldr	r3, [sp, #32]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d05c      	beq.n	8009f98 <_dtoa_r+0xa78>
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 f915 	bl	800a110 <_Balloc>
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	b928      	cbnz	r0, 8009ef6 <_dtoa_r+0x9d6>
 8009eea:	4b80      	ldr	r3, [pc, #512]	; (800a0ec <_dtoa_r+0xbcc>)
 8009eec:	4602      	mov	r2, r0
 8009eee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ef2:	f7ff bb2b 	b.w	800954c <_dtoa_r+0x2c>
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	3202      	adds	r2, #2
 8009efa:	0092      	lsls	r2, r2, #2
 8009efc:	f107 010c 	add.w	r1, r7, #12
 8009f00:	300c      	adds	r0, #12
 8009f02:	f7fe fddd 	bl	8008ac0 <memcpy>
 8009f06:	2201      	movs	r2, #1
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 fb12 	bl	800a534 <__lshift>
 8009f10:	9b03      	ldr	r3, [sp, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	9306      	str	r3, [sp, #24]
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	444b      	add	r3, r9
 8009f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1c:	9b04      	ldr	r3, [sp, #16]
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	46b8      	mov	r8, r7
 8009f24:	9308      	str	r3, [sp, #32]
 8009f26:	4607      	mov	r7, r0
 8009f28:	9b06      	ldr	r3, [sp, #24]
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	4658      	mov	r0, fp
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	f7ff fa67 	bl	8009404 <quorem>
 8009f36:	4603      	mov	r3, r0
 8009f38:	3330      	adds	r3, #48	; 0x30
 8009f3a:	9007      	str	r0, [sp, #28]
 8009f3c:	4641      	mov	r1, r8
 8009f3e:	4658      	mov	r0, fp
 8009f40:	930c      	str	r3, [sp, #48]	; 0x30
 8009f42:	f000 fb63 	bl	800a60c <__mcmp>
 8009f46:	463a      	mov	r2, r7
 8009f48:	4681      	mov	r9, r0
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 fb79 	bl	800a644 <__mdiff>
 8009f52:	68c2      	ldr	r2, [r0, #12]
 8009f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f56:	4605      	mov	r5, r0
 8009f58:	bb02      	cbnz	r2, 8009f9c <_dtoa_r+0xa7c>
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	4658      	mov	r0, fp
 8009f5e:	f000 fb55 	bl	800a60c <__mcmp>
 8009f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f64:	4602      	mov	r2, r0
 8009f66:	4629      	mov	r1, r5
 8009f68:	4620      	mov	r0, r4
 8009f6a:	920a      	str	r2, [sp, #40]	; 0x28
 8009f6c:	930c      	str	r3, [sp, #48]	; 0x30
 8009f6e:	f000 f90f 	bl	800a190 <_Bfree>
 8009f72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f76:	9d06      	ldr	r5, [sp, #24]
 8009f78:	ea43 0102 	orr.w	r1, r3, r2
 8009f7c:	9b08      	ldr	r3, [sp, #32]
 8009f7e:	430b      	orrs	r3, r1
 8009f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f82:	d10d      	bne.n	8009fa0 <_dtoa_r+0xa80>
 8009f84:	2b39      	cmp	r3, #57	; 0x39
 8009f86:	d029      	beq.n	8009fdc <_dtoa_r+0xabc>
 8009f88:	f1b9 0f00 	cmp.w	r9, #0
 8009f8c:	dd01      	ble.n	8009f92 <_dtoa_r+0xa72>
 8009f8e:	9b07      	ldr	r3, [sp, #28]
 8009f90:	3331      	adds	r3, #49	; 0x31
 8009f92:	9a04      	ldr	r2, [sp, #16]
 8009f94:	7013      	strb	r3, [r2, #0]
 8009f96:	e774      	b.n	8009e82 <_dtoa_r+0x962>
 8009f98:	4638      	mov	r0, r7
 8009f9a:	e7b9      	b.n	8009f10 <_dtoa_r+0x9f0>
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	e7e2      	b.n	8009f66 <_dtoa_r+0xa46>
 8009fa0:	f1b9 0f00 	cmp.w	r9, #0
 8009fa4:	db06      	blt.n	8009fb4 <_dtoa_r+0xa94>
 8009fa6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009fa8:	ea41 0909 	orr.w	r9, r1, r9
 8009fac:	9908      	ldr	r1, [sp, #32]
 8009fae:	ea59 0101 	orrs.w	r1, r9, r1
 8009fb2:	d120      	bne.n	8009ff6 <_dtoa_r+0xad6>
 8009fb4:	2a00      	cmp	r2, #0
 8009fb6:	ddec      	ble.n	8009f92 <_dtoa_r+0xa72>
 8009fb8:	4659      	mov	r1, fp
 8009fba:	2201      	movs	r2, #1
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	9306      	str	r3, [sp, #24]
 8009fc0:	f000 fab8 	bl	800a534 <__lshift>
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	4683      	mov	fp, r0
 8009fc8:	f000 fb20 	bl	800a60c <__mcmp>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	9b06      	ldr	r3, [sp, #24]
 8009fd0:	dc02      	bgt.n	8009fd8 <_dtoa_r+0xab8>
 8009fd2:	d1de      	bne.n	8009f92 <_dtoa_r+0xa72>
 8009fd4:	07da      	lsls	r2, r3, #31
 8009fd6:	d5dc      	bpl.n	8009f92 <_dtoa_r+0xa72>
 8009fd8:	2b39      	cmp	r3, #57	; 0x39
 8009fda:	d1d8      	bne.n	8009f8e <_dtoa_r+0xa6e>
 8009fdc:	9a04      	ldr	r2, [sp, #16]
 8009fde:	2339      	movs	r3, #57	; 0x39
 8009fe0:	7013      	strb	r3, [r2, #0]
 8009fe2:	462b      	mov	r3, r5
 8009fe4:	461d      	mov	r5, r3
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fec:	2a39      	cmp	r2, #57	; 0x39
 8009fee:	d050      	beq.n	800a092 <_dtoa_r+0xb72>
 8009ff0:	3201      	adds	r2, #1
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	e745      	b.n	8009e82 <_dtoa_r+0x962>
 8009ff6:	2a00      	cmp	r2, #0
 8009ff8:	dd03      	ble.n	800a002 <_dtoa_r+0xae2>
 8009ffa:	2b39      	cmp	r3, #57	; 0x39
 8009ffc:	d0ee      	beq.n	8009fdc <_dtoa_r+0xabc>
 8009ffe:	3301      	adds	r3, #1
 800a000:	e7c7      	b.n	8009f92 <_dtoa_r+0xa72>
 800a002:	9a06      	ldr	r2, [sp, #24]
 800a004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a006:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a00a:	428a      	cmp	r2, r1
 800a00c:	d02a      	beq.n	800a064 <_dtoa_r+0xb44>
 800a00e:	4659      	mov	r1, fp
 800a010:	2300      	movs	r3, #0
 800a012:	220a      	movs	r2, #10
 800a014:	4620      	mov	r0, r4
 800a016:	f000 f8dd 	bl	800a1d4 <__multadd>
 800a01a:	45b8      	cmp	r8, r7
 800a01c:	4683      	mov	fp, r0
 800a01e:	f04f 0300 	mov.w	r3, #0
 800a022:	f04f 020a 	mov.w	r2, #10
 800a026:	4641      	mov	r1, r8
 800a028:	4620      	mov	r0, r4
 800a02a:	d107      	bne.n	800a03c <_dtoa_r+0xb1c>
 800a02c:	f000 f8d2 	bl	800a1d4 <__multadd>
 800a030:	4680      	mov	r8, r0
 800a032:	4607      	mov	r7, r0
 800a034:	9b06      	ldr	r3, [sp, #24]
 800a036:	3301      	adds	r3, #1
 800a038:	9306      	str	r3, [sp, #24]
 800a03a:	e775      	b.n	8009f28 <_dtoa_r+0xa08>
 800a03c:	f000 f8ca 	bl	800a1d4 <__multadd>
 800a040:	4639      	mov	r1, r7
 800a042:	4680      	mov	r8, r0
 800a044:	2300      	movs	r3, #0
 800a046:	220a      	movs	r2, #10
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 f8c3 	bl	800a1d4 <__multadd>
 800a04e:	4607      	mov	r7, r0
 800a050:	e7f0      	b.n	800a034 <_dtoa_r+0xb14>
 800a052:	f1b9 0f00 	cmp.w	r9, #0
 800a056:	9a03      	ldr	r2, [sp, #12]
 800a058:	bfcc      	ite	gt
 800a05a:	464d      	movgt	r5, r9
 800a05c:	2501      	movle	r5, #1
 800a05e:	4415      	add	r5, r2
 800a060:	f04f 0800 	mov.w	r8, #0
 800a064:	4659      	mov	r1, fp
 800a066:	2201      	movs	r2, #1
 800a068:	4620      	mov	r0, r4
 800a06a:	9306      	str	r3, [sp, #24]
 800a06c:	f000 fa62 	bl	800a534 <__lshift>
 800a070:	4631      	mov	r1, r6
 800a072:	4683      	mov	fp, r0
 800a074:	f000 faca 	bl	800a60c <__mcmp>
 800a078:	2800      	cmp	r0, #0
 800a07a:	dcb2      	bgt.n	8009fe2 <_dtoa_r+0xac2>
 800a07c:	d102      	bne.n	800a084 <_dtoa_r+0xb64>
 800a07e:	9b06      	ldr	r3, [sp, #24]
 800a080:	07db      	lsls	r3, r3, #31
 800a082:	d4ae      	bmi.n	8009fe2 <_dtoa_r+0xac2>
 800a084:	462b      	mov	r3, r5
 800a086:	461d      	mov	r5, r3
 800a088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a08c:	2a30      	cmp	r2, #48	; 0x30
 800a08e:	d0fa      	beq.n	800a086 <_dtoa_r+0xb66>
 800a090:	e6f7      	b.n	8009e82 <_dtoa_r+0x962>
 800a092:	9a03      	ldr	r2, [sp, #12]
 800a094:	429a      	cmp	r2, r3
 800a096:	d1a5      	bne.n	8009fe4 <_dtoa_r+0xac4>
 800a098:	f10a 0a01 	add.w	sl, sl, #1
 800a09c:	2331      	movs	r3, #49	; 0x31
 800a09e:	e779      	b.n	8009f94 <_dtoa_r+0xa74>
 800a0a0:	4b13      	ldr	r3, [pc, #76]	; (800a0f0 <_dtoa_r+0xbd0>)
 800a0a2:	f7ff baac 	b.w	80095fe <_dtoa_r+0xde>
 800a0a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f47f aa83 	bne.w	80095b4 <_dtoa_r+0x94>
 800a0ae:	4b11      	ldr	r3, [pc, #68]	; (800a0f4 <_dtoa_r+0xbd4>)
 800a0b0:	f7ff baa5 	b.w	80095fe <_dtoa_r+0xde>
 800a0b4:	f1b9 0f00 	cmp.w	r9, #0
 800a0b8:	dc03      	bgt.n	800a0c2 <_dtoa_r+0xba2>
 800a0ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	f73f aec9 	bgt.w	8009e54 <_dtoa_r+0x934>
 800a0c2:	9d03      	ldr	r5, [sp, #12]
 800a0c4:	4631      	mov	r1, r6
 800a0c6:	4658      	mov	r0, fp
 800a0c8:	f7ff f99c 	bl	8009404 <quorem>
 800a0cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a0d0:	f805 3b01 	strb.w	r3, [r5], #1
 800a0d4:	9a03      	ldr	r2, [sp, #12]
 800a0d6:	1aaa      	subs	r2, r5, r2
 800a0d8:	4591      	cmp	r9, r2
 800a0da:	ddba      	ble.n	800a052 <_dtoa_r+0xb32>
 800a0dc:	4659      	mov	r1, fp
 800a0de:	2300      	movs	r3, #0
 800a0e0:	220a      	movs	r2, #10
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f000 f876 	bl	800a1d4 <__multadd>
 800a0e8:	4683      	mov	fp, r0
 800a0ea:	e7eb      	b.n	800a0c4 <_dtoa_r+0xba4>
 800a0ec:	0800be5f 	.word	0x0800be5f
 800a0f0:	0800bdb8 	.word	0x0800bdb8
 800a0f4:	0800bddc 	.word	0x0800bddc

0800a0f8 <_localeconv_r>:
 800a0f8:	4800      	ldr	r0, [pc, #0]	; (800a0fc <_localeconv_r+0x4>)
 800a0fa:	4770      	bx	lr
 800a0fc:	20000190 	.word	0x20000190

0800a100 <malloc>:
 800a100:	4b02      	ldr	r3, [pc, #8]	; (800a10c <malloc+0xc>)
 800a102:	4601      	mov	r1, r0
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	f000 bbdf 	b.w	800a8c8 <_malloc_r>
 800a10a:	bf00      	nop
 800a10c:	2000003c 	.word	0x2000003c

0800a110 <_Balloc>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a114:	4604      	mov	r4, r0
 800a116:	460d      	mov	r5, r1
 800a118:	b976      	cbnz	r6, 800a138 <_Balloc+0x28>
 800a11a:	2010      	movs	r0, #16
 800a11c:	f7ff fff0 	bl	800a100 <malloc>
 800a120:	4602      	mov	r2, r0
 800a122:	6260      	str	r0, [r4, #36]	; 0x24
 800a124:	b920      	cbnz	r0, 800a130 <_Balloc+0x20>
 800a126:	4b18      	ldr	r3, [pc, #96]	; (800a188 <_Balloc+0x78>)
 800a128:	4818      	ldr	r0, [pc, #96]	; (800a18c <_Balloc+0x7c>)
 800a12a:	2166      	movs	r1, #102	; 0x66
 800a12c:	f000 fd92 	bl	800ac54 <__assert_func>
 800a130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a134:	6006      	str	r6, [r0, #0]
 800a136:	60c6      	str	r6, [r0, #12]
 800a138:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a13a:	68f3      	ldr	r3, [r6, #12]
 800a13c:	b183      	cbz	r3, 800a160 <_Balloc+0x50>
 800a13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a146:	b9b8      	cbnz	r0, 800a178 <_Balloc+0x68>
 800a148:	2101      	movs	r1, #1
 800a14a:	fa01 f605 	lsl.w	r6, r1, r5
 800a14e:	1d72      	adds	r2, r6, #5
 800a150:	0092      	lsls	r2, r2, #2
 800a152:	4620      	mov	r0, r4
 800a154:	f000 fb58 	bl	800a808 <_calloc_r>
 800a158:	b160      	cbz	r0, 800a174 <_Balloc+0x64>
 800a15a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a15e:	e00e      	b.n	800a17e <_Balloc+0x6e>
 800a160:	2221      	movs	r2, #33	; 0x21
 800a162:	2104      	movs	r1, #4
 800a164:	4620      	mov	r0, r4
 800a166:	f000 fb4f 	bl	800a808 <_calloc_r>
 800a16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a16c:	60f0      	str	r0, [r6, #12]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e4      	bne.n	800a13e <_Balloc+0x2e>
 800a174:	2000      	movs	r0, #0
 800a176:	bd70      	pop	{r4, r5, r6, pc}
 800a178:	6802      	ldr	r2, [r0, #0]
 800a17a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a17e:	2300      	movs	r3, #0
 800a180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a184:	e7f7      	b.n	800a176 <_Balloc+0x66>
 800a186:	bf00      	nop
 800a188:	0800bde9 	.word	0x0800bde9
 800a18c:	0800be70 	.word	0x0800be70

0800a190 <_Bfree>:
 800a190:	b570      	push	{r4, r5, r6, lr}
 800a192:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a194:	4605      	mov	r5, r0
 800a196:	460c      	mov	r4, r1
 800a198:	b976      	cbnz	r6, 800a1b8 <_Bfree+0x28>
 800a19a:	2010      	movs	r0, #16
 800a19c:	f7ff ffb0 	bl	800a100 <malloc>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	6268      	str	r0, [r5, #36]	; 0x24
 800a1a4:	b920      	cbnz	r0, 800a1b0 <_Bfree+0x20>
 800a1a6:	4b09      	ldr	r3, [pc, #36]	; (800a1cc <_Bfree+0x3c>)
 800a1a8:	4809      	ldr	r0, [pc, #36]	; (800a1d0 <_Bfree+0x40>)
 800a1aa:	218a      	movs	r1, #138	; 0x8a
 800a1ac:	f000 fd52 	bl	800ac54 <__assert_func>
 800a1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1b4:	6006      	str	r6, [r0, #0]
 800a1b6:	60c6      	str	r6, [r0, #12]
 800a1b8:	b13c      	cbz	r4, 800a1ca <_Bfree+0x3a>
 800a1ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1bc:	6862      	ldr	r2, [r4, #4]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1c4:	6021      	str	r1, [r4, #0]
 800a1c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
 800a1cc:	0800bde9 	.word	0x0800bde9
 800a1d0:	0800be70 	.word	0x0800be70

0800a1d4 <__multadd>:
 800a1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d8:	690e      	ldr	r6, [r1, #16]
 800a1da:	4607      	mov	r7, r0
 800a1dc:	4698      	mov	r8, r3
 800a1de:	460c      	mov	r4, r1
 800a1e0:	f101 0014 	add.w	r0, r1, #20
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	6805      	ldr	r5, [r0, #0]
 800a1e8:	b2a9      	uxth	r1, r5
 800a1ea:	fb02 8101 	mla	r1, r2, r1, r8
 800a1ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a1f2:	0c2d      	lsrs	r5, r5, #16
 800a1f4:	fb02 c505 	mla	r5, r2, r5, ip
 800a1f8:	b289      	uxth	r1, r1
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a200:	429e      	cmp	r6, r3
 800a202:	f840 1b04 	str.w	r1, [r0], #4
 800a206:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a20a:	dcec      	bgt.n	800a1e6 <__multadd+0x12>
 800a20c:	f1b8 0f00 	cmp.w	r8, #0
 800a210:	d022      	beq.n	800a258 <__multadd+0x84>
 800a212:	68a3      	ldr	r3, [r4, #8]
 800a214:	42b3      	cmp	r3, r6
 800a216:	dc19      	bgt.n	800a24c <__multadd+0x78>
 800a218:	6861      	ldr	r1, [r4, #4]
 800a21a:	4638      	mov	r0, r7
 800a21c:	3101      	adds	r1, #1
 800a21e:	f7ff ff77 	bl	800a110 <_Balloc>
 800a222:	4605      	mov	r5, r0
 800a224:	b928      	cbnz	r0, 800a232 <__multadd+0x5e>
 800a226:	4602      	mov	r2, r0
 800a228:	4b0d      	ldr	r3, [pc, #52]	; (800a260 <__multadd+0x8c>)
 800a22a:	480e      	ldr	r0, [pc, #56]	; (800a264 <__multadd+0x90>)
 800a22c:	21b5      	movs	r1, #181	; 0xb5
 800a22e:	f000 fd11 	bl	800ac54 <__assert_func>
 800a232:	6922      	ldr	r2, [r4, #16]
 800a234:	3202      	adds	r2, #2
 800a236:	f104 010c 	add.w	r1, r4, #12
 800a23a:	0092      	lsls	r2, r2, #2
 800a23c:	300c      	adds	r0, #12
 800a23e:	f7fe fc3f 	bl	8008ac0 <memcpy>
 800a242:	4621      	mov	r1, r4
 800a244:	4638      	mov	r0, r7
 800a246:	f7ff ffa3 	bl	800a190 <_Bfree>
 800a24a:	462c      	mov	r4, r5
 800a24c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a250:	3601      	adds	r6, #1
 800a252:	f8c3 8014 	str.w	r8, [r3, #20]
 800a256:	6126      	str	r6, [r4, #16]
 800a258:	4620      	mov	r0, r4
 800a25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25e:	bf00      	nop
 800a260:	0800be5f 	.word	0x0800be5f
 800a264:	0800be70 	.word	0x0800be70

0800a268 <__hi0bits>:
 800a268:	0c03      	lsrs	r3, r0, #16
 800a26a:	041b      	lsls	r3, r3, #16
 800a26c:	b9d3      	cbnz	r3, 800a2a4 <__hi0bits+0x3c>
 800a26e:	0400      	lsls	r0, r0, #16
 800a270:	2310      	movs	r3, #16
 800a272:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a276:	bf04      	itt	eq
 800a278:	0200      	lsleq	r0, r0, #8
 800a27a:	3308      	addeq	r3, #8
 800a27c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a280:	bf04      	itt	eq
 800a282:	0100      	lsleq	r0, r0, #4
 800a284:	3304      	addeq	r3, #4
 800a286:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a28a:	bf04      	itt	eq
 800a28c:	0080      	lsleq	r0, r0, #2
 800a28e:	3302      	addeq	r3, #2
 800a290:	2800      	cmp	r0, #0
 800a292:	db05      	blt.n	800a2a0 <__hi0bits+0x38>
 800a294:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a298:	f103 0301 	add.w	r3, r3, #1
 800a29c:	bf08      	it	eq
 800a29e:	2320      	moveq	r3, #32
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	4770      	bx	lr
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e7e4      	b.n	800a272 <__hi0bits+0xa>

0800a2a8 <__lo0bits>:
 800a2a8:	6803      	ldr	r3, [r0, #0]
 800a2aa:	f013 0207 	ands.w	r2, r3, #7
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	d00b      	beq.n	800a2ca <__lo0bits+0x22>
 800a2b2:	07da      	lsls	r2, r3, #31
 800a2b4:	d424      	bmi.n	800a300 <__lo0bits+0x58>
 800a2b6:	0798      	lsls	r0, r3, #30
 800a2b8:	bf49      	itett	mi
 800a2ba:	085b      	lsrmi	r3, r3, #1
 800a2bc:	089b      	lsrpl	r3, r3, #2
 800a2be:	2001      	movmi	r0, #1
 800a2c0:	600b      	strmi	r3, [r1, #0]
 800a2c2:	bf5c      	itt	pl
 800a2c4:	600b      	strpl	r3, [r1, #0]
 800a2c6:	2002      	movpl	r0, #2
 800a2c8:	4770      	bx	lr
 800a2ca:	b298      	uxth	r0, r3
 800a2cc:	b9b0      	cbnz	r0, 800a2fc <__lo0bits+0x54>
 800a2ce:	0c1b      	lsrs	r3, r3, #16
 800a2d0:	2010      	movs	r0, #16
 800a2d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a2d6:	bf04      	itt	eq
 800a2d8:	0a1b      	lsreq	r3, r3, #8
 800a2da:	3008      	addeq	r0, #8
 800a2dc:	071a      	lsls	r2, r3, #28
 800a2de:	bf04      	itt	eq
 800a2e0:	091b      	lsreq	r3, r3, #4
 800a2e2:	3004      	addeq	r0, #4
 800a2e4:	079a      	lsls	r2, r3, #30
 800a2e6:	bf04      	itt	eq
 800a2e8:	089b      	lsreq	r3, r3, #2
 800a2ea:	3002      	addeq	r0, #2
 800a2ec:	07da      	lsls	r2, r3, #31
 800a2ee:	d403      	bmi.n	800a2f8 <__lo0bits+0x50>
 800a2f0:	085b      	lsrs	r3, r3, #1
 800a2f2:	f100 0001 	add.w	r0, r0, #1
 800a2f6:	d005      	beq.n	800a304 <__lo0bits+0x5c>
 800a2f8:	600b      	str	r3, [r1, #0]
 800a2fa:	4770      	bx	lr
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	e7e8      	b.n	800a2d2 <__lo0bits+0x2a>
 800a300:	2000      	movs	r0, #0
 800a302:	4770      	bx	lr
 800a304:	2020      	movs	r0, #32
 800a306:	4770      	bx	lr

0800a308 <__i2b>:
 800a308:	b510      	push	{r4, lr}
 800a30a:	460c      	mov	r4, r1
 800a30c:	2101      	movs	r1, #1
 800a30e:	f7ff feff 	bl	800a110 <_Balloc>
 800a312:	4602      	mov	r2, r0
 800a314:	b928      	cbnz	r0, 800a322 <__i2b+0x1a>
 800a316:	4b05      	ldr	r3, [pc, #20]	; (800a32c <__i2b+0x24>)
 800a318:	4805      	ldr	r0, [pc, #20]	; (800a330 <__i2b+0x28>)
 800a31a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a31e:	f000 fc99 	bl	800ac54 <__assert_func>
 800a322:	2301      	movs	r3, #1
 800a324:	6144      	str	r4, [r0, #20]
 800a326:	6103      	str	r3, [r0, #16]
 800a328:	bd10      	pop	{r4, pc}
 800a32a:	bf00      	nop
 800a32c:	0800be5f 	.word	0x0800be5f
 800a330:	0800be70 	.word	0x0800be70

0800a334 <__multiply>:
 800a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a338:	4614      	mov	r4, r2
 800a33a:	690a      	ldr	r2, [r1, #16]
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	429a      	cmp	r2, r3
 800a340:	bfb8      	it	lt
 800a342:	460b      	movlt	r3, r1
 800a344:	460d      	mov	r5, r1
 800a346:	bfbc      	itt	lt
 800a348:	4625      	movlt	r5, r4
 800a34a:	461c      	movlt	r4, r3
 800a34c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a350:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a354:	68ab      	ldr	r3, [r5, #8]
 800a356:	6869      	ldr	r1, [r5, #4]
 800a358:	eb0a 0709 	add.w	r7, sl, r9
 800a35c:	42bb      	cmp	r3, r7
 800a35e:	b085      	sub	sp, #20
 800a360:	bfb8      	it	lt
 800a362:	3101      	addlt	r1, #1
 800a364:	f7ff fed4 	bl	800a110 <_Balloc>
 800a368:	b930      	cbnz	r0, 800a378 <__multiply+0x44>
 800a36a:	4602      	mov	r2, r0
 800a36c:	4b42      	ldr	r3, [pc, #264]	; (800a478 <__multiply+0x144>)
 800a36e:	4843      	ldr	r0, [pc, #268]	; (800a47c <__multiply+0x148>)
 800a370:	f240 115d 	movw	r1, #349	; 0x15d
 800a374:	f000 fc6e 	bl	800ac54 <__assert_func>
 800a378:	f100 0614 	add.w	r6, r0, #20
 800a37c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a380:	4633      	mov	r3, r6
 800a382:	2200      	movs	r2, #0
 800a384:	4543      	cmp	r3, r8
 800a386:	d31e      	bcc.n	800a3c6 <__multiply+0x92>
 800a388:	f105 0c14 	add.w	ip, r5, #20
 800a38c:	f104 0314 	add.w	r3, r4, #20
 800a390:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a394:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a398:	9202      	str	r2, [sp, #8]
 800a39a:	ebac 0205 	sub.w	r2, ip, r5
 800a39e:	3a15      	subs	r2, #21
 800a3a0:	f022 0203 	bic.w	r2, r2, #3
 800a3a4:	3204      	adds	r2, #4
 800a3a6:	f105 0115 	add.w	r1, r5, #21
 800a3aa:	458c      	cmp	ip, r1
 800a3ac:	bf38      	it	cc
 800a3ae:	2204      	movcc	r2, #4
 800a3b0:	9201      	str	r2, [sp, #4]
 800a3b2:	9a02      	ldr	r2, [sp, #8]
 800a3b4:	9303      	str	r3, [sp, #12]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d808      	bhi.n	800a3cc <__multiply+0x98>
 800a3ba:	2f00      	cmp	r7, #0
 800a3bc:	dc55      	bgt.n	800a46a <__multiply+0x136>
 800a3be:	6107      	str	r7, [r0, #16]
 800a3c0:	b005      	add	sp, #20
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c6:	f843 2b04 	str.w	r2, [r3], #4
 800a3ca:	e7db      	b.n	800a384 <__multiply+0x50>
 800a3cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3d0:	f1ba 0f00 	cmp.w	sl, #0
 800a3d4:	d020      	beq.n	800a418 <__multiply+0xe4>
 800a3d6:	f105 0e14 	add.w	lr, r5, #20
 800a3da:	46b1      	mov	r9, r6
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a3e2:	f8d9 b000 	ldr.w	fp, [r9]
 800a3e6:	b2a1      	uxth	r1, r4
 800a3e8:	fa1f fb8b 	uxth.w	fp, fp
 800a3ec:	fb0a b101 	mla	r1, sl, r1, fp
 800a3f0:	4411      	add	r1, r2
 800a3f2:	f8d9 2000 	ldr.w	r2, [r9]
 800a3f6:	0c24      	lsrs	r4, r4, #16
 800a3f8:	0c12      	lsrs	r2, r2, #16
 800a3fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800a3fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a402:	b289      	uxth	r1, r1
 800a404:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a408:	45f4      	cmp	ip, lr
 800a40a:	f849 1b04 	str.w	r1, [r9], #4
 800a40e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a412:	d8e4      	bhi.n	800a3de <__multiply+0xaa>
 800a414:	9901      	ldr	r1, [sp, #4]
 800a416:	5072      	str	r2, [r6, r1]
 800a418:	9a03      	ldr	r2, [sp, #12]
 800a41a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a41e:	3304      	adds	r3, #4
 800a420:	f1b9 0f00 	cmp.w	r9, #0
 800a424:	d01f      	beq.n	800a466 <__multiply+0x132>
 800a426:	6834      	ldr	r4, [r6, #0]
 800a428:	f105 0114 	add.w	r1, r5, #20
 800a42c:	46b6      	mov	lr, r6
 800a42e:	f04f 0a00 	mov.w	sl, #0
 800a432:	880a      	ldrh	r2, [r1, #0]
 800a434:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a438:	fb09 b202 	mla	r2, r9, r2, fp
 800a43c:	4492      	add	sl, r2
 800a43e:	b2a4      	uxth	r4, r4
 800a440:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a444:	f84e 4b04 	str.w	r4, [lr], #4
 800a448:	f851 4b04 	ldr.w	r4, [r1], #4
 800a44c:	f8be 2000 	ldrh.w	r2, [lr]
 800a450:	0c24      	lsrs	r4, r4, #16
 800a452:	fb09 2404 	mla	r4, r9, r4, r2
 800a456:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a45a:	458c      	cmp	ip, r1
 800a45c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a460:	d8e7      	bhi.n	800a432 <__multiply+0xfe>
 800a462:	9a01      	ldr	r2, [sp, #4]
 800a464:	50b4      	str	r4, [r6, r2]
 800a466:	3604      	adds	r6, #4
 800a468:	e7a3      	b.n	800a3b2 <__multiply+0x7e>
 800a46a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1a5      	bne.n	800a3be <__multiply+0x8a>
 800a472:	3f01      	subs	r7, #1
 800a474:	e7a1      	b.n	800a3ba <__multiply+0x86>
 800a476:	bf00      	nop
 800a478:	0800be5f 	.word	0x0800be5f
 800a47c:	0800be70 	.word	0x0800be70

0800a480 <__pow5mult>:
 800a480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a484:	4615      	mov	r5, r2
 800a486:	f012 0203 	ands.w	r2, r2, #3
 800a48a:	4606      	mov	r6, r0
 800a48c:	460f      	mov	r7, r1
 800a48e:	d007      	beq.n	800a4a0 <__pow5mult+0x20>
 800a490:	4c25      	ldr	r4, [pc, #148]	; (800a528 <__pow5mult+0xa8>)
 800a492:	3a01      	subs	r2, #1
 800a494:	2300      	movs	r3, #0
 800a496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a49a:	f7ff fe9b 	bl	800a1d4 <__multadd>
 800a49e:	4607      	mov	r7, r0
 800a4a0:	10ad      	asrs	r5, r5, #2
 800a4a2:	d03d      	beq.n	800a520 <__pow5mult+0xa0>
 800a4a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4a6:	b97c      	cbnz	r4, 800a4c8 <__pow5mult+0x48>
 800a4a8:	2010      	movs	r0, #16
 800a4aa:	f7ff fe29 	bl	800a100 <malloc>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	6270      	str	r0, [r6, #36]	; 0x24
 800a4b2:	b928      	cbnz	r0, 800a4c0 <__pow5mult+0x40>
 800a4b4:	4b1d      	ldr	r3, [pc, #116]	; (800a52c <__pow5mult+0xac>)
 800a4b6:	481e      	ldr	r0, [pc, #120]	; (800a530 <__pow5mult+0xb0>)
 800a4b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4bc:	f000 fbca 	bl	800ac54 <__assert_func>
 800a4c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4c4:	6004      	str	r4, [r0, #0]
 800a4c6:	60c4      	str	r4, [r0, #12]
 800a4c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4d0:	b94c      	cbnz	r4, 800a4e6 <__pow5mult+0x66>
 800a4d2:	f240 2171 	movw	r1, #625	; 0x271
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f7ff ff16 	bl	800a308 <__i2b>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	6003      	str	r3, [r0, #0]
 800a4e6:	f04f 0900 	mov.w	r9, #0
 800a4ea:	07eb      	lsls	r3, r5, #31
 800a4ec:	d50a      	bpl.n	800a504 <__pow5mult+0x84>
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f7ff ff1e 	bl	800a334 <__multiply>
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	4680      	mov	r8, r0
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f7ff fe47 	bl	800a190 <_Bfree>
 800a502:	4647      	mov	r7, r8
 800a504:	106d      	asrs	r5, r5, #1
 800a506:	d00b      	beq.n	800a520 <__pow5mult+0xa0>
 800a508:	6820      	ldr	r0, [r4, #0]
 800a50a:	b938      	cbnz	r0, 800a51c <__pow5mult+0x9c>
 800a50c:	4622      	mov	r2, r4
 800a50e:	4621      	mov	r1, r4
 800a510:	4630      	mov	r0, r6
 800a512:	f7ff ff0f 	bl	800a334 <__multiply>
 800a516:	6020      	str	r0, [r4, #0]
 800a518:	f8c0 9000 	str.w	r9, [r0]
 800a51c:	4604      	mov	r4, r0
 800a51e:	e7e4      	b.n	800a4ea <__pow5mult+0x6a>
 800a520:	4638      	mov	r0, r7
 800a522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a526:	bf00      	nop
 800a528:	0800bfc0 	.word	0x0800bfc0
 800a52c:	0800bde9 	.word	0x0800bde9
 800a530:	0800be70 	.word	0x0800be70

0800a534 <__lshift>:
 800a534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a538:	460c      	mov	r4, r1
 800a53a:	6849      	ldr	r1, [r1, #4]
 800a53c:	6923      	ldr	r3, [r4, #16]
 800a53e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	4607      	mov	r7, r0
 800a546:	4691      	mov	r9, r2
 800a548:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a54c:	f108 0601 	add.w	r6, r8, #1
 800a550:	42b3      	cmp	r3, r6
 800a552:	db0b      	blt.n	800a56c <__lshift+0x38>
 800a554:	4638      	mov	r0, r7
 800a556:	f7ff fddb 	bl	800a110 <_Balloc>
 800a55a:	4605      	mov	r5, r0
 800a55c:	b948      	cbnz	r0, 800a572 <__lshift+0x3e>
 800a55e:	4602      	mov	r2, r0
 800a560:	4b28      	ldr	r3, [pc, #160]	; (800a604 <__lshift+0xd0>)
 800a562:	4829      	ldr	r0, [pc, #164]	; (800a608 <__lshift+0xd4>)
 800a564:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a568:	f000 fb74 	bl	800ac54 <__assert_func>
 800a56c:	3101      	adds	r1, #1
 800a56e:	005b      	lsls	r3, r3, #1
 800a570:	e7ee      	b.n	800a550 <__lshift+0x1c>
 800a572:	2300      	movs	r3, #0
 800a574:	f100 0114 	add.w	r1, r0, #20
 800a578:	f100 0210 	add.w	r2, r0, #16
 800a57c:	4618      	mov	r0, r3
 800a57e:	4553      	cmp	r3, sl
 800a580:	db33      	blt.n	800a5ea <__lshift+0xb6>
 800a582:	6920      	ldr	r0, [r4, #16]
 800a584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a588:	f104 0314 	add.w	r3, r4, #20
 800a58c:	f019 091f 	ands.w	r9, r9, #31
 800a590:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a594:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a598:	d02b      	beq.n	800a5f2 <__lshift+0xbe>
 800a59a:	f1c9 0e20 	rsb	lr, r9, #32
 800a59e:	468a      	mov	sl, r1
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	6818      	ldr	r0, [r3, #0]
 800a5a4:	fa00 f009 	lsl.w	r0, r0, r9
 800a5a8:	4302      	orrs	r2, r0
 800a5aa:	f84a 2b04 	str.w	r2, [sl], #4
 800a5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b2:	459c      	cmp	ip, r3
 800a5b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5b8:	d8f3      	bhi.n	800a5a2 <__lshift+0x6e>
 800a5ba:	ebac 0304 	sub.w	r3, ip, r4
 800a5be:	3b15      	subs	r3, #21
 800a5c0:	f023 0303 	bic.w	r3, r3, #3
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	f104 0015 	add.w	r0, r4, #21
 800a5ca:	4584      	cmp	ip, r0
 800a5cc:	bf38      	it	cc
 800a5ce:	2304      	movcc	r3, #4
 800a5d0:	50ca      	str	r2, [r1, r3]
 800a5d2:	b10a      	cbz	r2, 800a5d8 <__lshift+0xa4>
 800a5d4:	f108 0602 	add.w	r6, r8, #2
 800a5d8:	3e01      	subs	r6, #1
 800a5da:	4638      	mov	r0, r7
 800a5dc:	612e      	str	r6, [r5, #16]
 800a5de:	4621      	mov	r1, r4
 800a5e0:	f7ff fdd6 	bl	800a190 <_Bfree>
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	e7c5      	b.n	800a57e <__lshift+0x4a>
 800a5f2:	3904      	subs	r1, #4
 800a5f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5fc:	459c      	cmp	ip, r3
 800a5fe:	d8f9      	bhi.n	800a5f4 <__lshift+0xc0>
 800a600:	e7ea      	b.n	800a5d8 <__lshift+0xa4>
 800a602:	bf00      	nop
 800a604:	0800be5f 	.word	0x0800be5f
 800a608:	0800be70 	.word	0x0800be70

0800a60c <__mcmp>:
 800a60c:	b530      	push	{r4, r5, lr}
 800a60e:	6902      	ldr	r2, [r0, #16]
 800a610:	690c      	ldr	r4, [r1, #16]
 800a612:	1b12      	subs	r2, r2, r4
 800a614:	d10e      	bne.n	800a634 <__mcmp+0x28>
 800a616:	f100 0314 	add.w	r3, r0, #20
 800a61a:	3114      	adds	r1, #20
 800a61c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a62c:	42a5      	cmp	r5, r4
 800a62e:	d003      	beq.n	800a638 <__mcmp+0x2c>
 800a630:	d305      	bcc.n	800a63e <__mcmp+0x32>
 800a632:	2201      	movs	r2, #1
 800a634:	4610      	mov	r0, r2
 800a636:	bd30      	pop	{r4, r5, pc}
 800a638:	4283      	cmp	r3, r0
 800a63a:	d3f3      	bcc.n	800a624 <__mcmp+0x18>
 800a63c:	e7fa      	b.n	800a634 <__mcmp+0x28>
 800a63e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a642:	e7f7      	b.n	800a634 <__mcmp+0x28>

0800a644 <__mdiff>:
 800a644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a648:	460c      	mov	r4, r1
 800a64a:	4606      	mov	r6, r0
 800a64c:	4611      	mov	r1, r2
 800a64e:	4620      	mov	r0, r4
 800a650:	4617      	mov	r7, r2
 800a652:	f7ff ffdb 	bl	800a60c <__mcmp>
 800a656:	1e05      	subs	r5, r0, #0
 800a658:	d110      	bne.n	800a67c <__mdiff+0x38>
 800a65a:	4629      	mov	r1, r5
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7ff fd57 	bl	800a110 <_Balloc>
 800a662:	b930      	cbnz	r0, 800a672 <__mdiff+0x2e>
 800a664:	4b39      	ldr	r3, [pc, #228]	; (800a74c <__mdiff+0x108>)
 800a666:	4602      	mov	r2, r0
 800a668:	f240 2132 	movw	r1, #562	; 0x232
 800a66c:	4838      	ldr	r0, [pc, #224]	; (800a750 <__mdiff+0x10c>)
 800a66e:	f000 faf1 	bl	800ac54 <__assert_func>
 800a672:	2301      	movs	r3, #1
 800a674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67c:	bfa4      	itt	ge
 800a67e:	463b      	movge	r3, r7
 800a680:	4627      	movge	r7, r4
 800a682:	4630      	mov	r0, r6
 800a684:	6879      	ldr	r1, [r7, #4]
 800a686:	bfa6      	itte	ge
 800a688:	461c      	movge	r4, r3
 800a68a:	2500      	movge	r5, #0
 800a68c:	2501      	movlt	r5, #1
 800a68e:	f7ff fd3f 	bl	800a110 <_Balloc>
 800a692:	b920      	cbnz	r0, 800a69e <__mdiff+0x5a>
 800a694:	4b2d      	ldr	r3, [pc, #180]	; (800a74c <__mdiff+0x108>)
 800a696:	4602      	mov	r2, r0
 800a698:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a69c:	e7e6      	b.n	800a66c <__mdiff+0x28>
 800a69e:	693e      	ldr	r6, [r7, #16]
 800a6a0:	60c5      	str	r5, [r0, #12]
 800a6a2:	6925      	ldr	r5, [r4, #16]
 800a6a4:	f107 0114 	add.w	r1, r7, #20
 800a6a8:	f104 0914 	add.w	r9, r4, #20
 800a6ac:	f100 0e14 	add.w	lr, r0, #20
 800a6b0:	f107 0210 	add.w	r2, r7, #16
 800a6b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a6b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a6bc:	46f2      	mov	sl, lr
 800a6be:	2700      	movs	r7, #0
 800a6c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6c8:	fa1f f883 	uxth.w	r8, r3
 800a6cc:	fa17 f78b 	uxtah	r7, r7, fp
 800a6d0:	0c1b      	lsrs	r3, r3, #16
 800a6d2:	eba7 0808 	sub.w	r8, r7, r8
 800a6d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6de:	fa1f f888 	uxth.w	r8, r8
 800a6e2:	141f      	asrs	r7, r3, #16
 800a6e4:	454d      	cmp	r5, r9
 800a6e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6ea:	f84a 3b04 	str.w	r3, [sl], #4
 800a6ee:	d8e7      	bhi.n	800a6c0 <__mdiff+0x7c>
 800a6f0:	1b2b      	subs	r3, r5, r4
 800a6f2:	3b15      	subs	r3, #21
 800a6f4:	f023 0303 	bic.w	r3, r3, #3
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	3415      	adds	r4, #21
 800a6fc:	42a5      	cmp	r5, r4
 800a6fe:	bf38      	it	cc
 800a700:	2304      	movcc	r3, #4
 800a702:	4419      	add	r1, r3
 800a704:	4473      	add	r3, lr
 800a706:	469e      	mov	lr, r3
 800a708:	460d      	mov	r5, r1
 800a70a:	4565      	cmp	r5, ip
 800a70c:	d30e      	bcc.n	800a72c <__mdiff+0xe8>
 800a70e:	f10c 0203 	add.w	r2, ip, #3
 800a712:	1a52      	subs	r2, r2, r1
 800a714:	f022 0203 	bic.w	r2, r2, #3
 800a718:	3903      	subs	r1, #3
 800a71a:	458c      	cmp	ip, r1
 800a71c:	bf38      	it	cc
 800a71e:	2200      	movcc	r2, #0
 800a720:	441a      	add	r2, r3
 800a722:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a726:	b17b      	cbz	r3, 800a748 <__mdiff+0x104>
 800a728:	6106      	str	r6, [r0, #16]
 800a72a:	e7a5      	b.n	800a678 <__mdiff+0x34>
 800a72c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a730:	fa17 f488 	uxtah	r4, r7, r8
 800a734:	1422      	asrs	r2, r4, #16
 800a736:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a73a:	b2a4      	uxth	r4, r4
 800a73c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a740:	f84e 4b04 	str.w	r4, [lr], #4
 800a744:	1417      	asrs	r7, r2, #16
 800a746:	e7e0      	b.n	800a70a <__mdiff+0xc6>
 800a748:	3e01      	subs	r6, #1
 800a74a:	e7ea      	b.n	800a722 <__mdiff+0xde>
 800a74c:	0800be5f 	.word	0x0800be5f
 800a750:	0800be70 	.word	0x0800be70

0800a754 <__d2b>:
 800a754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a758:	2101      	movs	r1, #1
 800a75a:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 800a75e:	4690      	mov	r8, r2
 800a760:	4699      	mov	r9, r3
 800a762:	f7ff fcd5 	bl	800a110 <_Balloc>
 800a766:	4604      	mov	r4, r0
 800a768:	b930      	cbnz	r0, 800a778 <__d2b+0x24>
 800a76a:	4602      	mov	r2, r0
 800a76c:	4b24      	ldr	r3, [pc, #144]	; (800a800 <__d2b+0xac>)
 800a76e:	4825      	ldr	r0, [pc, #148]	; (800a804 <__d2b+0xb0>)
 800a770:	f240 310a 	movw	r1, #778	; 0x30a
 800a774:	f000 fa6e 	bl	800ac54 <__assert_func>
 800a778:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a77c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a780:	bb2d      	cbnz	r5, 800a7ce <__d2b+0x7a>
 800a782:	f1b8 0200 	subs.w	r2, r8, #0
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	d026      	beq.n	800a7d8 <__d2b+0x84>
 800a78a:	4668      	mov	r0, sp
 800a78c:	9200      	str	r2, [sp, #0]
 800a78e:	f7ff fd8b 	bl	800a2a8 <__lo0bits>
 800a792:	9900      	ldr	r1, [sp, #0]
 800a794:	b1f0      	cbz	r0, 800a7d4 <__d2b+0x80>
 800a796:	9a01      	ldr	r2, [sp, #4]
 800a798:	f1c0 0320 	rsb	r3, r0, #32
 800a79c:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a0:	430b      	orrs	r3, r1
 800a7a2:	40c2      	lsrs	r2, r0
 800a7a4:	6163      	str	r3, [r4, #20]
 800a7a6:	9201      	str	r2, [sp, #4]
 800a7a8:	9b01      	ldr	r3, [sp, #4]
 800a7aa:	61a3      	str	r3, [r4, #24]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	bf14      	ite	ne
 800a7b0:	2202      	movne	r2, #2
 800a7b2:	2201      	moveq	r2, #1
 800a7b4:	6122      	str	r2, [r4, #16]
 800a7b6:	b1c5      	cbz	r5, 800a7ea <__d2b+0x96>
 800a7b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7bc:	4405      	add	r5, r0
 800a7be:	603d      	str	r5, [r7, #0]
 800a7c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7c4:	6030      	str	r0, [r6, #0]
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	b003      	add	sp, #12
 800a7ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7d2:	e7d6      	b.n	800a782 <__d2b+0x2e>
 800a7d4:	6161      	str	r1, [r4, #20]
 800a7d6:	e7e7      	b.n	800a7a8 <__d2b+0x54>
 800a7d8:	a801      	add	r0, sp, #4
 800a7da:	f7ff fd65 	bl	800a2a8 <__lo0bits>
 800a7de:	9b01      	ldr	r3, [sp, #4]
 800a7e0:	6163      	str	r3, [r4, #20]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	6122      	str	r2, [r4, #16]
 800a7e6:	3020      	adds	r0, #32
 800a7e8:	e7e5      	b.n	800a7b6 <__d2b+0x62>
 800a7ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7f2:	6038      	str	r0, [r7, #0]
 800a7f4:	6918      	ldr	r0, [r3, #16]
 800a7f6:	f7ff fd37 	bl	800a268 <__hi0bits>
 800a7fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7fe:	e7e1      	b.n	800a7c4 <__d2b+0x70>
 800a800:	0800be5f 	.word	0x0800be5f
 800a804:	0800be70 	.word	0x0800be70

0800a808 <_calloc_r>:
 800a808:	b513      	push	{r0, r1, r4, lr}
 800a80a:	434a      	muls	r2, r1
 800a80c:	4611      	mov	r1, r2
 800a80e:	9201      	str	r2, [sp, #4]
 800a810:	f000 f85a 	bl	800a8c8 <_malloc_r>
 800a814:	4604      	mov	r4, r0
 800a816:	b118      	cbz	r0, 800a820 <_calloc_r+0x18>
 800a818:	9a01      	ldr	r2, [sp, #4]
 800a81a:	2100      	movs	r1, #0
 800a81c:	f7fe f95e 	bl	8008adc <memset>
 800a820:	4620      	mov	r0, r4
 800a822:	b002      	add	sp, #8
 800a824:	bd10      	pop	{r4, pc}
	...

0800a828 <_free_r>:
 800a828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a82a:	2900      	cmp	r1, #0
 800a82c:	d048      	beq.n	800a8c0 <_free_r+0x98>
 800a82e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a832:	9001      	str	r0, [sp, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f1a1 0404 	sub.w	r4, r1, #4
 800a83a:	bfb8      	it	lt
 800a83c:	18e4      	addlt	r4, r4, r3
 800a83e:	f000 fa65 	bl	800ad0c <__malloc_lock>
 800a842:	4a20      	ldr	r2, [pc, #128]	; (800a8c4 <_free_r+0x9c>)
 800a844:	9801      	ldr	r0, [sp, #4]
 800a846:	6813      	ldr	r3, [r2, #0]
 800a848:	4615      	mov	r5, r2
 800a84a:	b933      	cbnz	r3, 800a85a <_free_r+0x32>
 800a84c:	6063      	str	r3, [r4, #4]
 800a84e:	6014      	str	r4, [r2, #0]
 800a850:	b003      	add	sp, #12
 800a852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a856:	f000 ba5f 	b.w	800ad18 <__malloc_unlock>
 800a85a:	42a3      	cmp	r3, r4
 800a85c:	d90b      	bls.n	800a876 <_free_r+0x4e>
 800a85e:	6821      	ldr	r1, [r4, #0]
 800a860:	1862      	adds	r2, r4, r1
 800a862:	4293      	cmp	r3, r2
 800a864:	bf04      	itt	eq
 800a866:	681a      	ldreq	r2, [r3, #0]
 800a868:	685b      	ldreq	r3, [r3, #4]
 800a86a:	6063      	str	r3, [r4, #4]
 800a86c:	bf04      	itt	eq
 800a86e:	1852      	addeq	r2, r2, r1
 800a870:	6022      	streq	r2, [r4, #0]
 800a872:	602c      	str	r4, [r5, #0]
 800a874:	e7ec      	b.n	800a850 <_free_r+0x28>
 800a876:	461a      	mov	r2, r3
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	b10b      	cbz	r3, 800a880 <_free_r+0x58>
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	d9fa      	bls.n	800a876 <_free_r+0x4e>
 800a880:	6811      	ldr	r1, [r2, #0]
 800a882:	1855      	adds	r5, r2, r1
 800a884:	42a5      	cmp	r5, r4
 800a886:	d10b      	bne.n	800a8a0 <_free_r+0x78>
 800a888:	6824      	ldr	r4, [r4, #0]
 800a88a:	4421      	add	r1, r4
 800a88c:	1854      	adds	r4, r2, r1
 800a88e:	42a3      	cmp	r3, r4
 800a890:	6011      	str	r1, [r2, #0]
 800a892:	d1dd      	bne.n	800a850 <_free_r+0x28>
 800a894:	681c      	ldr	r4, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	6053      	str	r3, [r2, #4]
 800a89a:	4421      	add	r1, r4
 800a89c:	6011      	str	r1, [r2, #0]
 800a89e:	e7d7      	b.n	800a850 <_free_r+0x28>
 800a8a0:	d902      	bls.n	800a8a8 <_free_r+0x80>
 800a8a2:	230c      	movs	r3, #12
 800a8a4:	6003      	str	r3, [r0, #0]
 800a8a6:	e7d3      	b.n	800a850 <_free_r+0x28>
 800a8a8:	6825      	ldr	r5, [r4, #0]
 800a8aa:	1961      	adds	r1, r4, r5
 800a8ac:	428b      	cmp	r3, r1
 800a8ae:	bf04      	itt	eq
 800a8b0:	6819      	ldreq	r1, [r3, #0]
 800a8b2:	685b      	ldreq	r3, [r3, #4]
 800a8b4:	6063      	str	r3, [r4, #4]
 800a8b6:	bf04      	itt	eq
 800a8b8:	1949      	addeq	r1, r1, r5
 800a8ba:	6021      	streq	r1, [r4, #0]
 800a8bc:	6054      	str	r4, [r2, #4]
 800a8be:	e7c7      	b.n	800a850 <_free_r+0x28>
 800a8c0:	b003      	add	sp, #12
 800a8c2:	bd30      	pop	{r4, r5, pc}
 800a8c4:	20014570 	.word	0x20014570

0800a8c8 <_malloc_r>:
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	1ccd      	adds	r5, r1, #3
 800a8cc:	f025 0503 	bic.w	r5, r5, #3
 800a8d0:	3508      	adds	r5, #8
 800a8d2:	2d0c      	cmp	r5, #12
 800a8d4:	bf38      	it	cc
 800a8d6:	250c      	movcc	r5, #12
 800a8d8:	2d00      	cmp	r5, #0
 800a8da:	4606      	mov	r6, r0
 800a8dc:	db01      	blt.n	800a8e2 <_malloc_r+0x1a>
 800a8de:	42a9      	cmp	r1, r5
 800a8e0:	d903      	bls.n	800a8ea <_malloc_r+0x22>
 800a8e2:	230c      	movs	r3, #12
 800a8e4:	6033      	str	r3, [r6, #0]
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ea:	f000 fa0f 	bl	800ad0c <__malloc_lock>
 800a8ee:	4921      	ldr	r1, [pc, #132]	; (800a974 <_malloc_r+0xac>)
 800a8f0:	680a      	ldr	r2, [r1, #0]
 800a8f2:	4614      	mov	r4, r2
 800a8f4:	b99c      	cbnz	r4, 800a91e <_malloc_r+0x56>
 800a8f6:	4f20      	ldr	r7, [pc, #128]	; (800a978 <_malloc_r+0xb0>)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	b923      	cbnz	r3, 800a906 <_malloc_r+0x3e>
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4630      	mov	r0, r6
 800a900:	f000 f998 	bl	800ac34 <_sbrk_r>
 800a904:	6038      	str	r0, [r7, #0]
 800a906:	4629      	mov	r1, r5
 800a908:	4630      	mov	r0, r6
 800a90a:	f000 f993 	bl	800ac34 <_sbrk_r>
 800a90e:	1c43      	adds	r3, r0, #1
 800a910:	d123      	bne.n	800a95a <_malloc_r+0x92>
 800a912:	230c      	movs	r3, #12
 800a914:	6033      	str	r3, [r6, #0]
 800a916:	4630      	mov	r0, r6
 800a918:	f000 f9fe 	bl	800ad18 <__malloc_unlock>
 800a91c:	e7e3      	b.n	800a8e6 <_malloc_r+0x1e>
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	1b5b      	subs	r3, r3, r5
 800a922:	d417      	bmi.n	800a954 <_malloc_r+0x8c>
 800a924:	2b0b      	cmp	r3, #11
 800a926:	d903      	bls.n	800a930 <_malloc_r+0x68>
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	441c      	add	r4, r3
 800a92c:	6025      	str	r5, [r4, #0]
 800a92e:	e004      	b.n	800a93a <_malloc_r+0x72>
 800a930:	6863      	ldr	r3, [r4, #4]
 800a932:	42a2      	cmp	r2, r4
 800a934:	bf0c      	ite	eq
 800a936:	600b      	streq	r3, [r1, #0]
 800a938:	6053      	strne	r3, [r2, #4]
 800a93a:	4630      	mov	r0, r6
 800a93c:	f000 f9ec 	bl	800ad18 <__malloc_unlock>
 800a940:	f104 000b 	add.w	r0, r4, #11
 800a944:	1d23      	adds	r3, r4, #4
 800a946:	f020 0007 	bic.w	r0, r0, #7
 800a94a:	1ac2      	subs	r2, r0, r3
 800a94c:	d0cc      	beq.n	800a8e8 <_malloc_r+0x20>
 800a94e:	1a1b      	subs	r3, r3, r0
 800a950:	50a3      	str	r3, [r4, r2]
 800a952:	e7c9      	b.n	800a8e8 <_malloc_r+0x20>
 800a954:	4622      	mov	r2, r4
 800a956:	6864      	ldr	r4, [r4, #4]
 800a958:	e7cc      	b.n	800a8f4 <_malloc_r+0x2c>
 800a95a:	1cc4      	adds	r4, r0, #3
 800a95c:	f024 0403 	bic.w	r4, r4, #3
 800a960:	42a0      	cmp	r0, r4
 800a962:	d0e3      	beq.n	800a92c <_malloc_r+0x64>
 800a964:	1a21      	subs	r1, r4, r0
 800a966:	4630      	mov	r0, r6
 800a968:	f000 f964 	bl	800ac34 <_sbrk_r>
 800a96c:	3001      	adds	r0, #1
 800a96e:	d1dd      	bne.n	800a92c <_malloc_r+0x64>
 800a970:	e7cf      	b.n	800a912 <_malloc_r+0x4a>
 800a972:	bf00      	nop
 800a974:	20014570 	.word	0x20014570
 800a978:	20014574 	.word	0x20014574

0800a97c <__ssputs_r>:
 800a97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a980:	688e      	ldr	r6, [r1, #8]
 800a982:	429e      	cmp	r6, r3
 800a984:	4682      	mov	sl, r0
 800a986:	460c      	mov	r4, r1
 800a988:	4690      	mov	r8, r2
 800a98a:	461f      	mov	r7, r3
 800a98c:	d838      	bhi.n	800aa00 <__ssputs_r+0x84>
 800a98e:	898a      	ldrh	r2, [r1, #12]
 800a990:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a994:	d032      	beq.n	800a9fc <__ssputs_r+0x80>
 800a996:	6825      	ldr	r5, [r4, #0]
 800a998:	6909      	ldr	r1, [r1, #16]
 800a99a:	eba5 0901 	sub.w	r9, r5, r1
 800a99e:	6965      	ldr	r5, [r4, #20]
 800a9a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	444b      	add	r3, r9
 800a9ac:	106d      	asrs	r5, r5, #1
 800a9ae:	429d      	cmp	r5, r3
 800a9b0:	bf38      	it	cc
 800a9b2:	461d      	movcc	r5, r3
 800a9b4:	0553      	lsls	r3, r2, #21
 800a9b6:	d531      	bpl.n	800aa1c <__ssputs_r+0xa0>
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	f7ff ff85 	bl	800a8c8 <_malloc_r>
 800a9be:	4606      	mov	r6, r0
 800a9c0:	b950      	cbnz	r0, 800a9d8 <__ssputs_r+0x5c>
 800a9c2:	230c      	movs	r3, #12
 800a9c4:	f8ca 3000 	str.w	r3, [sl]
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ce:	81a3      	strh	r3, [r4, #12]
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d8:	6921      	ldr	r1, [r4, #16]
 800a9da:	464a      	mov	r2, r9
 800a9dc:	f7fe f870 	bl	8008ac0 <memcpy>
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ea:	81a3      	strh	r3, [r4, #12]
 800a9ec:	6126      	str	r6, [r4, #16]
 800a9ee:	6165      	str	r5, [r4, #20]
 800a9f0:	444e      	add	r6, r9
 800a9f2:	eba5 0509 	sub.w	r5, r5, r9
 800a9f6:	6026      	str	r6, [r4, #0]
 800a9f8:	60a5      	str	r5, [r4, #8]
 800a9fa:	463e      	mov	r6, r7
 800a9fc:	42be      	cmp	r6, r7
 800a9fe:	d900      	bls.n	800aa02 <__ssputs_r+0x86>
 800aa00:	463e      	mov	r6, r7
 800aa02:	4632      	mov	r2, r6
 800aa04:	6820      	ldr	r0, [r4, #0]
 800aa06:	4641      	mov	r1, r8
 800aa08:	f000 f966 	bl	800acd8 <memmove>
 800aa0c:	68a3      	ldr	r3, [r4, #8]
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	1b9b      	subs	r3, r3, r6
 800aa12:	4432      	add	r2, r6
 800aa14:	60a3      	str	r3, [r4, #8]
 800aa16:	6022      	str	r2, [r4, #0]
 800aa18:	2000      	movs	r0, #0
 800aa1a:	e7db      	b.n	800a9d4 <__ssputs_r+0x58>
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	f000 f981 	bl	800ad24 <_realloc_r>
 800aa22:	4606      	mov	r6, r0
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d1e1      	bne.n	800a9ec <__ssputs_r+0x70>
 800aa28:	6921      	ldr	r1, [r4, #16]
 800aa2a:	4650      	mov	r0, sl
 800aa2c:	f7ff fefc 	bl	800a828 <_free_r>
 800aa30:	e7c7      	b.n	800a9c2 <__ssputs_r+0x46>
	...

0800aa34 <_svfiprintf_r>:
 800aa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa38:	4698      	mov	r8, r3
 800aa3a:	898b      	ldrh	r3, [r1, #12]
 800aa3c:	061b      	lsls	r3, r3, #24
 800aa3e:	b09d      	sub	sp, #116	; 0x74
 800aa40:	4607      	mov	r7, r0
 800aa42:	460d      	mov	r5, r1
 800aa44:	4614      	mov	r4, r2
 800aa46:	d50e      	bpl.n	800aa66 <_svfiprintf_r+0x32>
 800aa48:	690b      	ldr	r3, [r1, #16]
 800aa4a:	b963      	cbnz	r3, 800aa66 <_svfiprintf_r+0x32>
 800aa4c:	2140      	movs	r1, #64	; 0x40
 800aa4e:	f7ff ff3b 	bl	800a8c8 <_malloc_r>
 800aa52:	6028      	str	r0, [r5, #0]
 800aa54:	6128      	str	r0, [r5, #16]
 800aa56:	b920      	cbnz	r0, 800aa62 <_svfiprintf_r+0x2e>
 800aa58:	230c      	movs	r3, #12
 800aa5a:	603b      	str	r3, [r7, #0]
 800aa5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa60:	e0d1      	b.n	800ac06 <_svfiprintf_r+0x1d2>
 800aa62:	2340      	movs	r3, #64	; 0x40
 800aa64:	616b      	str	r3, [r5, #20]
 800aa66:	2300      	movs	r3, #0
 800aa68:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6a:	2320      	movs	r3, #32
 800aa6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa70:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa74:	2330      	movs	r3, #48	; 0x30
 800aa76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac20 <_svfiprintf_r+0x1ec>
 800aa7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa7e:	f04f 0901 	mov.w	r9, #1
 800aa82:	4623      	mov	r3, r4
 800aa84:	469a      	mov	sl, r3
 800aa86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa8a:	b10a      	cbz	r2, 800aa90 <_svfiprintf_r+0x5c>
 800aa8c:	2a25      	cmp	r2, #37	; 0x25
 800aa8e:	d1f9      	bne.n	800aa84 <_svfiprintf_r+0x50>
 800aa90:	ebba 0b04 	subs.w	fp, sl, r4
 800aa94:	d00b      	beq.n	800aaae <_svfiprintf_r+0x7a>
 800aa96:	465b      	mov	r3, fp
 800aa98:	4622      	mov	r2, r4
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	f7ff ff6d 	bl	800a97c <__ssputs_r>
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	f000 80aa 	beq.w	800abfc <_svfiprintf_r+0x1c8>
 800aaa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaaa:	445a      	add	r2, fp
 800aaac:	9209      	str	r2, [sp, #36]	; 0x24
 800aaae:	f89a 3000 	ldrb.w	r3, [sl]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 80a2 	beq.w	800abfc <_svfiprintf_r+0x1c8>
 800aab8:	2300      	movs	r3, #0
 800aaba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aabe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aac2:	f10a 0a01 	add.w	sl, sl, #1
 800aac6:	9304      	str	r3, [sp, #16]
 800aac8:	9307      	str	r3, [sp, #28]
 800aaca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aace:	931a      	str	r3, [sp, #104]	; 0x68
 800aad0:	4654      	mov	r4, sl
 800aad2:	2205      	movs	r2, #5
 800aad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad8:	4851      	ldr	r0, [pc, #324]	; (800ac20 <_svfiprintf_r+0x1ec>)
 800aada:	f7f5 fbe1 	bl	80002a0 <memchr>
 800aade:	9a04      	ldr	r2, [sp, #16]
 800aae0:	b9d8      	cbnz	r0, 800ab1a <_svfiprintf_r+0xe6>
 800aae2:	06d0      	lsls	r0, r2, #27
 800aae4:	bf44      	itt	mi
 800aae6:	2320      	movmi	r3, #32
 800aae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaec:	0711      	lsls	r1, r2, #28
 800aaee:	bf44      	itt	mi
 800aaf0:	232b      	movmi	r3, #43	; 0x2b
 800aaf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaf6:	f89a 3000 	ldrb.w	r3, [sl]
 800aafa:	2b2a      	cmp	r3, #42	; 0x2a
 800aafc:	d015      	beq.n	800ab2a <_svfiprintf_r+0xf6>
 800aafe:	9a07      	ldr	r2, [sp, #28]
 800ab00:	4654      	mov	r4, sl
 800ab02:	2000      	movs	r0, #0
 800ab04:	f04f 0c0a 	mov.w	ip, #10
 800ab08:	4621      	mov	r1, r4
 800ab0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab0e:	3b30      	subs	r3, #48	; 0x30
 800ab10:	2b09      	cmp	r3, #9
 800ab12:	d94e      	bls.n	800abb2 <_svfiprintf_r+0x17e>
 800ab14:	b1b0      	cbz	r0, 800ab44 <_svfiprintf_r+0x110>
 800ab16:	9207      	str	r2, [sp, #28]
 800ab18:	e014      	b.n	800ab44 <_svfiprintf_r+0x110>
 800ab1a:	eba0 0308 	sub.w	r3, r0, r8
 800ab1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ab22:	4313      	orrs	r3, r2
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	46a2      	mov	sl, r4
 800ab28:	e7d2      	b.n	800aad0 <_svfiprintf_r+0x9c>
 800ab2a:	9b03      	ldr	r3, [sp, #12]
 800ab2c:	1d19      	adds	r1, r3, #4
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	9103      	str	r1, [sp, #12]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	bfbb      	ittet	lt
 800ab36:	425b      	neglt	r3, r3
 800ab38:	f042 0202 	orrlt.w	r2, r2, #2
 800ab3c:	9307      	strge	r3, [sp, #28]
 800ab3e:	9307      	strlt	r3, [sp, #28]
 800ab40:	bfb8      	it	lt
 800ab42:	9204      	strlt	r2, [sp, #16]
 800ab44:	7823      	ldrb	r3, [r4, #0]
 800ab46:	2b2e      	cmp	r3, #46	; 0x2e
 800ab48:	d10c      	bne.n	800ab64 <_svfiprintf_r+0x130>
 800ab4a:	7863      	ldrb	r3, [r4, #1]
 800ab4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab4e:	d135      	bne.n	800abbc <_svfiprintf_r+0x188>
 800ab50:	9b03      	ldr	r3, [sp, #12]
 800ab52:	1d1a      	adds	r2, r3, #4
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	9203      	str	r2, [sp, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bfb8      	it	lt
 800ab5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab60:	3402      	adds	r4, #2
 800ab62:	9305      	str	r3, [sp, #20]
 800ab64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac30 <_svfiprintf_r+0x1fc>
 800ab68:	7821      	ldrb	r1, [r4, #0]
 800ab6a:	2203      	movs	r2, #3
 800ab6c:	4650      	mov	r0, sl
 800ab6e:	f7f5 fb97 	bl	80002a0 <memchr>
 800ab72:	b140      	cbz	r0, 800ab86 <_svfiprintf_r+0x152>
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	eba0 000a 	sub.w	r0, r0, sl
 800ab7a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab7e:	9b04      	ldr	r3, [sp, #16]
 800ab80:	4303      	orrs	r3, r0
 800ab82:	3401      	adds	r4, #1
 800ab84:	9304      	str	r3, [sp, #16]
 800ab86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab8a:	4826      	ldr	r0, [pc, #152]	; (800ac24 <_svfiprintf_r+0x1f0>)
 800ab8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab90:	2206      	movs	r2, #6
 800ab92:	f7f5 fb85 	bl	80002a0 <memchr>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d038      	beq.n	800ac0c <_svfiprintf_r+0x1d8>
 800ab9a:	4b23      	ldr	r3, [pc, #140]	; (800ac28 <_svfiprintf_r+0x1f4>)
 800ab9c:	bb1b      	cbnz	r3, 800abe6 <_svfiprintf_r+0x1b2>
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	3307      	adds	r3, #7
 800aba2:	f023 0307 	bic.w	r3, r3, #7
 800aba6:	3308      	adds	r3, #8
 800aba8:	9303      	str	r3, [sp, #12]
 800abaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abac:	4433      	add	r3, r6
 800abae:	9309      	str	r3, [sp, #36]	; 0x24
 800abb0:	e767      	b.n	800aa82 <_svfiprintf_r+0x4e>
 800abb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800abb6:	460c      	mov	r4, r1
 800abb8:	2001      	movs	r0, #1
 800abba:	e7a5      	b.n	800ab08 <_svfiprintf_r+0xd4>
 800abbc:	2300      	movs	r3, #0
 800abbe:	3401      	adds	r4, #1
 800abc0:	9305      	str	r3, [sp, #20]
 800abc2:	4619      	mov	r1, r3
 800abc4:	f04f 0c0a 	mov.w	ip, #10
 800abc8:	4620      	mov	r0, r4
 800abca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abce:	3a30      	subs	r2, #48	; 0x30
 800abd0:	2a09      	cmp	r2, #9
 800abd2:	d903      	bls.n	800abdc <_svfiprintf_r+0x1a8>
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0c5      	beq.n	800ab64 <_svfiprintf_r+0x130>
 800abd8:	9105      	str	r1, [sp, #20]
 800abda:	e7c3      	b.n	800ab64 <_svfiprintf_r+0x130>
 800abdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800abe0:	4604      	mov	r4, r0
 800abe2:	2301      	movs	r3, #1
 800abe4:	e7f0      	b.n	800abc8 <_svfiprintf_r+0x194>
 800abe6:	ab03      	add	r3, sp, #12
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	462a      	mov	r2, r5
 800abec:	4b0f      	ldr	r3, [pc, #60]	; (800ac2c <_svfiprintf_r+0x1f8>)
 800abee:	a904      	add	r1, sp, #16
 800abf0:	4638      	mov	r0, r7
 800abf2:	f7fe f81b 	bl	8008c2c <_printf_float>
 800abf6:	1c42      	adds	r2, r0, #1
 800abf8:	4606      	mov	r6, r0
 800abfa:	d1d6      	bne.n	800abaa <_svfiprintf_r+0x176>
 800abfc:	89ab      	ldrh	r3, [r5, #12]
 800abfe:	065b      	lsls	r3, r3, #25
 800ac00:	f53f af2c 	bmi.w	800aa5c <_svfiprintf_r+0x28>
 800ac04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac06:	b01d      	add	sp, #116	; 0x74
 800ac08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0c:	ab03      	add	r3, sp, #12
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	462a      	mov	r2, r5
 800ac12:	4b06      	ldr	r3, [pc, #24]	; (800ac2c <_svfiprintf_r+0x1f8>)
 800ac14:	a904      	add	r1, sp, #16
 800ac16:	4638      	mov	r0, r7
 800ac18:	f7fe faae 	bl	8009178 <_printf_i>
 800ac1c:	e7eb      	b.n	800abf6 <_svfiprintf_r+0x1c2>
 800ac1e:	bf00      	nop
 800ac20:	0800bfcc 	.word	0x0800bfcc
 800ac24:	0800bfd6 	.word	0x0800bfd6
 800ac28:	08008c2d 	.word	0x08008c2d
 800ac2c:	0800a97d 	.word	0x0800a97d
 800ac30:	0800bfd2 	.word	0x0800bfd2

0800ac34 <_sbrk_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4d06      	ldr	r5, [pc, #24]	; (800ac50 <_sbrk_r+0x1c>)
 800ac38:	2300      	movs	r3, #0
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	602b      	str	r3, [r5, #0]
 800ac40:	f7fd fea6 	bl	8008990 <_sbrk>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d102      	bne.n	800ac4e <_sbrk_r+0x1a>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	b103      	cbz	r3, 800ac4e <_sbrk_r+0x1a>
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	20014934 	.word	0x20014934

0800ac54 <__assert_func>:
 800ac54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac56:	4614      	mov	r4, r2
 800ac58:	461a      	mov	r2, r3
 800ac5a:	4b09      	ldr	r3, [pc, #36]	; (800ac80 <__assert_func+0x2c>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4605      	mov	r5, r0
 800ac60:	68d8      	ldr	r0, [r3, #12]
 800ac62:	b14c      	cbz	r4, 800ac78 <__assert_func+0x24>
 800ac64:	4b07      	ldr	r3, [pc, #28]	; (800ac84 <__assert_func+0x30>)
 800ac66:	9100      	str	r1, [sp, #0]
 800ac68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac6c:	4906      	ldr	r1, [pc, #24]	; (800ac88 <__assert_func+0x34>)
 800ac6e:	462b      	mov	r3, r5
 800ac70:	f000 f80e 	bl	800ac90 <fiprintf>
 800ac74:	f000 faa4 	bl	800b1c0 <abort>
 800ac78:	4b04      	ldr	r3, [pc, #16]	; (800ac8c <__assert_func+0x38>)
 800ac7a:	461c      	mov	r4, r3
 800ac7c:	e7f3      	b.n	800ac66 <__assert_func+0x12>
 800ac7e:	bf00      	nop
 800ac80:	2000003c 	.word	0x2000003c
 800ac84:	0800bfdd 	.word	0x0800bfdd
 800ac88:	0800bfea 	.word	0x0800bfea
 800ac8c:	0800c018 	.word	0x0800c018

0800ac90 <fiprintf>:
 800ac90:	b40e      	push	{r1, r2, r3}
 800ac92:	b503      	push	{r0, r1, lr}
 800ac94:	4601      	mov	r1, r0
 800ac96:	ab03      	add	r3, sp, #12
 800ac98:	4805      	ldr	r0, [pc, #20]	; (800acb0 <fiprintf+0x20>)
 800ac9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9e:	6800      	ldr	r0, [r0, #0]
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	f000 f88f 	bl	800adc4 <_vfiprintf_r>
 800aca6:	b002      	add	sp, #8
 800aca8:	f85d eb04 	ldr.w	lr, [sp], #4
 800acac:	b003      	add	sp, #12
 800acae:	4770      	bx	lr
 800acb0:	2000003c 	.word	0x2000003c

0800acb4 <__ascii_mbtowc>:
 800acb4:	b082      	sub	sp, #8
 800acb6:	b901      	cbnz	r1, 800acba <__ascii_mbtowc+0x6>
 800acb8:	a901      	add	r1, sp, #4
 800acba:	b142      	cbz	r2, 800acce <__ascii_mbtowc+0x1a>
 800acbc:	b14b      	cbz	r3, 800acd2 <__ascii_mbtowc+0x1e>
 800acbe:	7813      	ldrb	r3, [r2, #0]
 800acc0:	600b      	str	r3, [r1, #0]
 800acc2:	7812      	ldrb	r2, [r2, #0]
 800acc4:	1e10      	subs	r0, r2, #0
 800acc6:	bf18      	it	ne
 800acc8:	2001      	movne	r0, #1
 800acca:	b002      	add	sp, #8
 800accc:	4770      	bx	lr
 800acce:	4610      	mov	r0, r2
 800acd0:	e7fb      	b.n	800acca <__ascii_mbtowc+0x16>
 800acd2:	f06f 0001 	mvn.w	r0, #1
 800acd6:	e7f8      	b.n	800acca <__ascii_mbtowc+0x16>

0800acd8 <memmove>:
 800acd8:	4288      	cmp	r0, r1
 800acda:	b510      	push	{r4, lr}
 800acdc:	eb01 0402 	add.w	r4, r1, r2
 800ace0:	d902      	bls.n	800ace8 <memmove+0x10>
 800ace2:	4284      	cmp	r4, r0
 800ace4:	4623      	mov	r3, r4
 800ace6:	d807      	bhi.n	800acf8 <memmove+0x20>
 800ace8:	1e43      	subs	r3, r0, #1
 800acea:	42a1      	cmp	r1, r4
 800acec:	d008      	beq.n	800ad00 <memmove+0x28>
 800acee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acf6:	e7f8      	b.n	800acea <memmove+0x12>
 800acf8:	4402      	add	r2, r0
 800acfa:	4601      	mov	r1, r0
 800acfc:	428a      	cmp	r2, r1
 800acfe:	d100      	bne.n	800ad02 <memmove+0x2a>
 800ad00:	bd10      	pop	{r4, pc}
 800ad02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad0a:	e7f7      	b.n	800acfc <memmove+0x24>

0800ad0c <__malloc_lock>:
 800ad0c:	4801      	ldr	r0, [pc, #4]	; (800ad14 <__malloc_lock+0x8>)
 800ad0e:	f000 bc17 	b.w	800b540 <__retarget_lock_acquire_recursive>
 800ad12:	bf00      	nop
 800ad14:	2001493c 	.word	0x2001493c

0800ad18 <__malloc_unlock>:
 800ad18:	4801      	ldr	r0, [pc, #4]	; (800ad20 <__malloc_unlock+0x8>)
 800ad1a:	f000 bc12 	b.w	800b542 <__retarget_lock_release_recursive>
 800ad1e:	bf00      	nop
 800ad20:	2001493c 	.word	0x2001493c

0800ad24 <_realloc_r>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	4607      	mov	r7, r0
 800ad28:	4614      	mov	r4, r2
 800ad2a:	460e      	mov	r6, r1
 800ad2c:	b921      	cbnz	r1, 800ad38 <_realloc_r+0x14>
 800ad2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad32:	4611      	mov	r1, r2
 800ad34:	f7ff bdc8 	b.w	800a8c8 <_malloc_r>
 800ad38:	b922      	cbnz	r2, 800ad44 <_realloc_r+0x20>
 800ad3a:	f7ff fd75 	bl	800a828 <_free_r>
 800ad3e:	4625      	mov	r5, r4
 800ad40:	4628      	mov	r0, r5
 800ad42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad44:	f000 fc62 	bl	800b60c <_malloc_usable_size_r>
 800ad48:	42a0      	cmp	r0, r4
 800ad4a:	d20f      	bcs.n	800ad6c <_realloc_r+0x48>
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	4638      	mov	r0, r7
 800ad50:	f7ff fdba 	bl	800a8c8 <_malloc_r>
 800ad54:	4605      	mov	r5, r0
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d0f2      	beq.n	800ad40 <_realloc_r+0x1c>
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4622      	mov	r2, r4
 800ad5e:	f7fd feaf 	bl	8008ac0 <memcpy>
 800ad62:	4631      	mov	r1, r6
 800ad64:	4638      	mov	r0, r7
 800ad66:	f7ff fd5f 	bl	800a828 <_free_r>
 800ad6a:	e7e9      	b.n	800ad40 <_realloc_r+0x1c>
 800ad6c:	4635      	mov	r5, r6
 800ad6e:	e7e7      	b.n	800ad40 <_realloc_r+0x1c>

0800ad70 <__sfputc_r>:
 800ad70:	6893      	ldr	r3, [r2, #8]
 800ad72:	3b01      	subs	r3, #1
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	b410      	push	{r4}
 800ad78:	6093      	str	r3, [r2, #8]
 800ad7a:	da08      	bge.n	800ad8e <__sfputc_r+0x1e>
 800ad7c:	6994      	ldr	r4, [r2, #24]
 800ad7e:	42a3      	cmp	r3, r4
 800ad80:	db01      	blt.n	800ad86 <__sfputc_r+0x16>
 800ad82:	290a      	cmp	r1, #10
 800ad84:	d103      	bne.n	800ad8e <__sfputc_r+0x1e>
 800ad86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad8a:	f000 b94b 	b.w	800b024 <__swbuf_r>
 800ad8e:	6813      	ldr	r3, [r2, #0]
 800ad90:	1c58      	adds	r0, r3, #1
 800ad92:	6010      	str	r0, [r2, #0]
 800ad94:	7019      	strb	r1, [r3, #0]
 800ad96:	4608      	mov	r0, r1
 800ad98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <__sfputs_r>:
 800ad9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada0:	4606      	mov	r6, r0
 800ada2:	460f      	mov	r7, r1
 800ada4:	4614      	mov	r4, r2
 800ada6:	18d5      	adds	r5, r2, r3
 800ada8:	42ac      	cmp	r4, r5
 800adaa:	d101      	bne.n	800adb0 <__sfputs_r+0x12>
 800adac:	2000      	movs	r0, #0
 800adae:	e007      	b.n	800adc0 <__sfputs_r+0x22>
 800adb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb4:	463a      	mov	r2, r7
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ffda 	bl	800ad70 <__sfputc_r>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d1f3      	bne.n	800ada8 <__sfputs_r+0xa>
 800adc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800adc4 <_vfiprintf_r>:
 800adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	460d      	mov	r5, r1
 800adca:	b09d      	sub	sp, #116	; 0x74
 800adcc:	4614      	mov	r4, r2
 800adce:	4698      	mov	r8, r3
 800add0:	4606      	mov	r6, r0
 800add2:	b118      	cbz	r0, 800addc <_vfiprintf_r+0x18>
 800add4:	6983      	ldr	r3, [r0, #24]
 800add6:	b90b      	cbnz	r3, 800addc <_vfiprintf_r+0x18>
 800add8:	f000 fb14 	bl	800b404 <__sinit>
 800addc:	4b89      	ldr	r3, [pc, #548]	; (800b004 <_vfiprintf_r+0x240>)
 800adde:	429d      	cmp	r5, r3
 800ade0:	d11b      	bne.n	800ae1a <_vfiprintf_r+0x56>
 800ade2:	6875      	ldr	r5, [r6, #4]
 800ade4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ade6:	07d9      	lsls	r1, r3, #31
 800ade8:	d405      	bmi.n	800adf6 <_vfiprintf_r+0x32>
 800adea:	89ab      	ldrh	r3, [r5, #12]
 800adec:	059a      	lsls	r2, r3, #22
 800adee:	d402      	bmi.n	800adf6 <_vfiprintf_r+0x32>
 800adf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adf2:	f000 fba5 	bl	800b540 <__retarget_lock_acquire_recursive>
 800adf6:	89ab      	ldrh	r3, [r5, #12]
 800adf8:	071b      	lsls	r3, r3, #28
 800adfa:	d501      	bpl.n	800ae00 <_vfiprintf_r+0x3c>
 800adfc:	692b      	ldr	r3, [r5, #16]
 800adfe:	b9eb      	cbnz	r3, 800ae3c <_vfiprintf_r+0x78>
 800ae00:	4629      	mov	r1, r5
 800ae02:	4630      	mov	r0, r6
 800ae04:	f000 f96e 	bl	800b0e4 <__swsetup_r>
 800ae08:	b1c0      	cbz	r0, 800ae3c <_vfiprintf_r+0x78>
 800ae0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae0c:	07dc      	lsls	r4, r3, #31
 800ae0e:	d50e      	bpl.n	800ae2e <_vfiprintf_r+0x6a>
 800ae10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae14:	b01d      	add	sp, #116	; 0x74
 800ae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1a:	4b7b      	ldr	r3, [pc, #492]	; (800b008 <_vfiprintf_r+0x244>)
 800ae1c:	429d      	cmp	r5, r3
 800ae1e:	d101      	bne.n	800ae24 <_vfiprintf_r+0x60>
 800ae20:	68b5      	ldr	r5, [r6, #8]
 800ae22:	e7df      	b.n	800ade4 <_vfiprintf_r+0x20>
 800ae24:	4b79      	ldr	r3, [pc, #484]	; (800b00c <_vfiprintf_r+0x248>)
 800ae26:	429d      	cmp	r5, r3
 800ae28:	bf08      	it	eq
 800ae2a:	68f5      	ldreq	r5, [r6, #12]
 800ae2c:	e7da      	b.n	800ade4 <_vfiprintf_r+0x20>
 800ae2e:	89ab      	ldrh	r3, [r5, #12]
 800ae30:	0598      	lsls	r0, r3, #22
 800ae32:	d4ed      	bmi.n	800ae10 <_vfiprintf_r+0x4c>
 800ae34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae36:	f000 fb84 	bl	800b542 <__retarget_lock_release_recursive>
 800ae3a:	e7e9      	b.n	800ae10 <_vfiprintf_r+0x4c>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae40:	2320      	movs	r3, #32
 800ae42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae4a:	2330      	movs	r3, #48	; 0x30
 800ae4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b010 <_vfiprintf_r+0x24c>
 800ae50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae54:	f04f 0901 	mov.w	r9, #1
 800ae58:	4623      	mov	r3, r4
 800ae5a:	469a      	mov	sl, r3
 800ae5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae60:	b10a      	cbz	r2, 800ae66 <_vfiprintf_r+0xa2>
 800ae62:	2a25      	cmp	r2, #37	; 0x25
 800ae64:	d1f9      	bne.n	800ae5a <_vfiprintf_r+0x96>
 800ae66:	ebba 0b04 	subs.w	fp, sl, r4
 800ae6a:	d00b      	beq.n	800ae84 <_vfiprintf_r+0xc0>
 800ae6c:	465b      	mov	r3, fp
 800ae6e:	4622      	mov	r2, r4
 800ae70:	4629      	mov	r1, r5
 800ae72:	4630      	mov	r0, r6
 800ae74:	f7ff ff93 	bl	800ad9e <__sfputs_r>
 800ae78:	3001      	adds	r0, #1
 800ae7a:	f000 80aa 	beq.w	800afd2 <_vfiprintf_r+0x20e>
 800ae7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae80:	445a      	add	r2, fp
 800ae82:	9209      	str	r2, [sp, #36]	; 0x24
 800ae84:	f89a 3000 	ldrb.w	r3, [sl]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 80a2 	beq.w	800afd2 <_vfiprintf_r+0x20e>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae98:	f10a 0a01 	add.w	sl, sl, #1
 800ae9c:	9304      	str	r3, [sp, #16]
 800ae9e:	9307      	str	r3, [sp, #28]
 800aea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aea4:	931a      	str	r3, [sp, #104]	; 0x68
 800aea6:	4654      	mov	r4, sl
 800aea8:	2205      	movs	r2, #5
 800aeaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeae:	4858      	ldr	r0, [pc, #352]	; (800b010 <_vfiprintf_r+0x24c>)
 800aeb0:	f7f5 f9f6 	bl	80002a0 <memchr>
 800aeb4:	9a04      	ldr	r2, [sp, #16]
 800aeb6:	b9d8      	cbnz	r0, 800aef0 <_vfiprintf_r+0x12c>
 800aeb8:	06d1      	lsls	r1, r2, #27
 800aeba:	bf44      	itt	mi
 800aebc:	2320      	movmi	r3, #32
 800aebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec2:	0713      	lsls	r3, r2, #28
 800aec4:	bf44      	itt	mi
 800aec6:	232b      	movmi	r3, #43	; 0x2b
 800aec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aecc:	f89a 3000 	ldrb.w	r3, [sl]
 800aed0:	2b2a      	cmp	r3, #42	; 0x2a
 800aed2:	d015      	beq.n	800af00 <_vfiprintf_r+0x13c>
 800aed4:	9a07      	ldr	r2, [sp, #28]
 800aed6:	4654      	mov	r4, sl
 800aed8:	2000      	movs	r0, #0
 800aeda:	f04f 0c0a 	mov.w	ip, #10
 800aede:	4621      	mov	r1, r4
 800aee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aee4:	3b30      	subs	r3, #48	; 0x30
 800aee6:	2b09      	cmp	r3, #9
 800aee8:	d94e      	bls.n	800af88 <_vfiprintf_r+0x1c4>
 800aeea:	b1b0      	cbz	r0, 800af1a <_vfiprintf_r+0x156>
 800aeec:	9207      	str	r2, [sp, #28]
 800aeee:	e014      	b.n	800af1a <_vfiprintf_r+0x156>
 800aef0:	eba0 0308 	sub.w	r3, r0, r8
 800aef4:	fa09 f303 	lsl.w	r3, r9, r3
 800aef8:	4313      	orrs	r3, r2
 800aefa:	9304      	str	r3, [sp, #16]
 800aefc:	46a2      	mov	sl, r4
 800aefe:	e7d2      	b.n	800aea6 <_vfiprintf_r+0xe2>
 800af00:	9b03      	ldr	r3, [sp, #12]
 800af02:	1d19      	adds	r1, r3, #4
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	9103      	str	r1, [sp, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	bfbb      	ittet	lt
 800af0c:	425b      	neglt	r3, r3
 800af0e:	f042 0202 	orrlt.w	r2, r2, #2
 800af12:	9307      	strge	r3, [sp, #28]
 800af14:	9307      	strlt	r3, [sp, #28]
 800af16:	bfb8      	it	lt
 800af18:	9204      	strlt	r2, [sp, #16]
 800af1a:	7823      	ldrb	r3, [r4, #0]
 800af1c:	2b2e      	cmp	r3, #46	; 0x2e
 800af1e:	d10c      	bne.n	800af3a <_vfiprintf_r+0x176>
 800af20:	7863      	ldrb	r3, [r4, #1]
 800af22:	2b2a      	cmp	r3, #42	; 0x2a
 800af24:	d135      	bne.n	800af92 <_vfiprintf_r+0x1ce>
 800af26:	9b03      	ldr	r3, [sp, #12]
 800af28:	1d1a      	adds	r2, r3, #4
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	9203      	str	r2, [sp, #12]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	bfb8      	it	lt
 800af32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800af36:	3402      	adds	r4, #2
 800af38:	9305      	str	r3, [sp, #20]
 800af3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b020 <_vfiprintf_r+0x25c>
 800af3e:	7821      	ldrb	r1, [r4, #0]
 800af40:	2203      	movs	r2, #3
 800af42:	4650      	mov	r0, sl
 800af44:	f7f5 f9ac 	bl	80002a0 <memchr>
 800af48:	b140      	cbz	r0, 800af5c <_vfiprintf_r+0x198>
 800af4a:	2340      	movs	r3, #64	; 0x40
 800af4c:	eba0 000a 	sub.w	r0, r0, sl
 800af50:	fa03 f000 	lsl.w	r0, r3, r0
 800af54:	9b04      	ldr	r3, [sp, #16]
 800af56:	4303      	orrs	r3, r0
 800af58:	3401      	adds	r4, #1
 800af5a:	9304      	str	r3, [sp, #16]
 800af5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af60:	482c      	ldr	r0, [pc, #176]	; (800b014 <_vfiprintf_r+0x250>)
 800af62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af66:	2206      	movs	r2, #6
 800af68:	f7f5 f99a 	bl	80002a0 <memchr>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d03f      	beq.n	800aff0 <_vfiprintf_r+0x22c>
 800af70:	4b29      	ldr	r3, [pc, #164]	; (800b018 <_vfiprintf_r+0x254>)
 800af72:	bb1b      	cbnz	r3, 800afbc <_vfiprintf_r+0x1f8>
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	3307      	adds	r3, #7
 800af78:	f023 0307 	bic.w	r3, r3, #7
 800af7c:	3308      	adds	r3, #8
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af82:	443b      	add	r3, r7
 800af84:	9309      	str	r3, [sp, #36]	; 0x24
 800af86:	e767      	b.n	800ae58 <_vfiprintf_r+0x94>
 800af88:	fb0c 3202 	mla	r2, ip, r2, r3
 800af8c:	460c      	mov	r4, r1
 800af8e:	2001      	movs	r0, #1
 800af90:	e7a5      	b.n	800aede <_vfiprintf_r+0x11a>
 800af92:	2300      	movs	r3, #0
 800af94:	3401      	adds	r4, #1
 800af96:	9305      	str	r3, [sp, #20]
 800af98:	4619      	mov	r1, r3
 800af9a:	f04f 0c0a 	mov.w	ip, #10
 800af9e:	4620      	mov	r0, r4
 800afa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afa4:	3a30      	subs	r2, #48	; 0x30
 800afa6:	2a09      	cmp	r2, #9
 800afa8:	d903      	bls.n	800afb2 <_vfiprintf_r+0x1ee>
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0c5      	beq.n	800af3a <_vfiprintf_r+0x176>
 800afae:	9105      	str	r1, [sp, #20]
 800afb0:	e7c3      	b.n	800af3a <_vfiprintf_r+0x176>
 800afb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800afb6:	4604      	mov	r4, r0
 800afb8:	2301      	movs	r3, #1
 800afba:	e7f0      	b.n	800af9e <_vfiprintf_r+0x1da>
 800afbc:	ab03      	add	r3, sp, #12
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	462a      	mov	r2, r5
 800afc2:	4b16      	ldr	r3, [pc, #88]	; (800b01c <_vfiprintf_r+0x258>)
 800afc4:	a904      	add	r1, sp, #16
 800afc6:	4630      	mov	r0, r6
 800afc8:	f7fd fe30 	bl	8008c2c <_printf_float>
 800afcc:	4607      	mov	r7, r0
 800afce:	1c78      	adds	r0, r7, #1
 800afd0:	d1d6      	bne.n	800af80 <_vfiprintf_r+0x1bc>
 800afd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afd4:	07d9      	lsls	r1, r3, #31
 800afd6:	d405      	bmi.n	800afe4 <_vfiprintf_r+0x220>
 800afd8:	89ab      	ldrh	r3, [r5, #12]
 800afda:	059a      	lsls	r2, r3, #22
 800afdc:	d402      	bmi.n	800afe4 <_vfiprintf_r+0x220>
 800afde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afe0:	f000 faaf 	bl	800b542 <__retarget_lock_release_recursive>
 800afe4:	89ab      	ldrh	r3, [r5, #12]
 800afe6:	065b      	lsls	r3, r3, #25
 800afe8:	f53f af12 	bmi.w	800ae10 <_vfiprintf_r+0x4c>
 800afec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afee:	e711      	b.n	800ae14 <_vfiprintf_r+0x50>
 800aff0:	ab03      	add	r3, sp, #12
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	462a      	mov	r2, r5
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <_vfiprintf_r+0x258>)
 800aff8:	a904      	add	r1, sp, #16
 800affa:	4630      	mov	r0, r6
 800affc:	f7fe f8bc 	bl	8009178 <_printf_i>
 800b000:	e7e4      	b.n	800afcc <_vfiprintf_r+0x208>
 800b002:	bf00      	nop
 800b004:	0800c144 	.word	0x0800c144
 800b008:	0800c164 	.word	0x0800c164
 800b00c:	0800c124 	.word	0x0800c124
 800b010:	0800bfcc 	.word	0x0800bfcc
 800b014:	0800bfd6 	.word	0x0800bfd6
 800b018:	08008c2d 	.word	0x08008c2d
 800b01c:	0800ad9f 	.word	0x0800ad9f
 800b020:	0800bfd2 	.word	0x0800bfd2

0800b024 <__swbuf_r>:
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b026:	460e      	mov	r6, r1
 800b028:	4614      	mov	r4, r2
 800b02a:	4605      	mov	r5, r0
 800b02c:	b118      	cbz	r0, 800b036 <__swbuf_r+0x12>
 800b02e:	6983      	ldr	r3, [r0, #24]
 800b030:	b90b      	cbnz	r3, 800b036 <__swbuf_r+0x12>
 800b032:	f000 f9e7 	bl	800b404 <__sinit>
 800b036:	4b21      	ldr	r3, [pc, #132]	; (800b0bc <__swbuf_r+0x98>)
 800b038:	429c      	cmp	r4, r3
 800b03a:	d12b      	bne.n	800b094 <__swbuf_r+0x70>
 800b03c:	686c      	ldr	r4, [r5, #4]
 800b03e:	69a3      	ldr	r3, [r4, #24]
 800b040:	60a3      	str	r3, [r4, #8]
 800b042:	89a3      	ldrh	r3, [r4, #12]
 800b044:	071a      	lsls	r2, r3, #28
 800b046:	d52f      	bpl.n	800b0a8 <__swbuf_r+0x84>
 800b048:	6923      	ldr	r3, [r4, #16]
 800b04a:	b36b      	cbz	r3, 800b0a8 <__swbuf_r+0x84>
 800b04c:	6923      	ldr	r3, [r4, #16]
 800b04e:	6820      	ldr	r0, [r4, #0]
 800b050:	1ac0      	subs	r0, r0, r3
 800b052:	6963      	ldr	r3, [r4, #20]
 800b054:	b2f6      	uxtb	r6, r6
 800b056:	4283      	cmp	r3, r0
 800b058:	4637      	mov	r7, r6
 800b05a:	dc04      	bgt.n	800b066 <__swbuf_r+0x42>
 800b05c:	4621      	mov	r1, r4
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 f93c 	bl	800b2dc <_fflush_r>
 800b064:	bb30      	cbnz	r0, 800b0b4 <__swbuf_r+0x90>
 800b066:	68a3      	ldr	r3, [r4, #8]
 800b068:	3b01      	subs	r3, #1
 800b06a:	60a3      	str	r3, [r4, #8]
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	6022      	str	r2, [r4, #0]
 800b072:	701e      	strb	r6, [r3, #0]
 800b074:	6963      	ldr	r3, [r4, #20]
 800b076:	3001      	adds	r0, #1
 800b078:	4283      	cmp	r3, r0
 800b07a:	d004      	beq.n	800b086 <__swbuf_r+0x62>
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	07db      	lsls	r3, r3, #31
 800b080:	d506      	bpl.n	800b090 <__swbuf_r+0x6c>
 800b082:	2e0a      	cmp	r6, #10
 800b084:	d104      	bne.n	800b090 <__swbuf_r+0x6c>
 800b086:	4621      	mov	r1, r4
 800b088:	4628      	mov	r0, r5
 800b08a:	f000 f927 	bl	800b2dc <_fflush_r>
 800b08e:	b988      	cbnz	r0, 800b0b4 <__swbuf_r+0x90>
 800b090:	4638      	mov	r0, r7
 800b092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b094:	4b0a      	ldr	r3, [pc, #40]	; (800b0c0 <__swbuf_r+0x9c>)
 800b096:	429c      	cmp	r4, r3
 800b098:	d101      	bne.n	800b09e <__swbuf_r+0x7a>
 800b09a:	68ac      	ldr	r4, [r5, #8]
 800b09c:	e7cf      	b.n	800b03e <__swbuf_r+0x1a>
 800b09e:	4b09      	ldr	r3, [pc, #36]	; (800b0c4 <__swbuf_r+0xa0>)
 800b0a0:	429c      	cmp	r4, r3
 800b0a2:	bf08      	it	eq
 800b0a4:	68ec      	ldreq	r4, [r5, #12]
 800b0a6:	e7ca      	b.n	800b03e <__swbuf_r+0x1a>
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f000 f81a 	bl	800b0e4 <__swsetup_r>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d0cb      	beq.n	800b04c <__swbuf_r+0x28>
 800b0b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b0b8:	e7ea      	b.n	800b090 <__swbuf_r+0x6c>
 800b0ba:	bf00      	nop
 800b0bc:	0800c144 	.word	0x0800c144
 800b0c0:	0800c164 	.word	0x0800c164
 800b0c4:	0800c124 	.word	0x0800c124

0800b0c8 <__ascii_wctomb>:
 800b0c8:	b149      	cbz	r1, 800b0de <__ascii_wctomb+0x16>
 800b0ca:	2aff      	cmp	r2, #255	; 0xff
 800b0cc:	bf85      	ittet	hi
 800b0ce:	238a      	movhi	r3, #138	; 0x8a
 800b0d0:	6003      	strhi	r3, [r0, #0]
 800b0d2:	700a      	strbls	r2, [r1, #0]
 800b0d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b0d8:	bf98      	it	ls
 800b0da:	2001      	movls	r0, #1
 800b0dc:	4770      	bx	lr
 800b0de:	4608      	mov	r0, r1
 800b0e0:	4770      	bx	lr
	...

0800b0e4 <__swsetup_r>:
 800b0e4:	4b32      	ldr	r3, [pc, #200]	; (800b1b0 <__swsetup_r+0xcc>)
 800b0e6:	b570      	push	{r4, r5, r6, lr}
 800b0e8:	681d      	ldr	r5, [r3, #0]
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	b125      	cbz	r5, 800b0fa <__swsetup_r+0x16>
 800b0f0:	69ab      	ldr	r3, [r5, #24]
 800b0f2:	b913      	cbnz	r3, 800b0fa <__swsetup_r+0x16>
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f000 f985 	bl	800b404 <__sinit>
 800b0fa:	4b2e      	ldr	r3, [pc, #184]	; (800b1b4 <__swsetup_r+0xd0>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	d10f      	bne.n	800b120 <__swsetup_r+0x3c>
 800b100:	686c      	ldr	r4, [r5, #4]
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b108:	0719      	lsls	r1, r3, #28
 800b10a:	d42c      	bmi.n	800b166 <__swsetup_r+0x82>
 800b10c:	06dd      	lsls	r5, r3, #27
 800b10e:	d411      	bmi.n	800b134 <__swsetup_r+0x50>
 800b110:	2309      	movs	r3, #9
 800b112:	6033      	str	r3, [r6, #0]
 800b114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b118:	81a3      	strh	r3, [r4, #12]
 800b11a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b11e:	e03e      	b.n	800b19e <__swsetup_r+0xba>
 800b120:	4b25      	ldr	r3, [pc, #148]	; (800b1b8 <__swsetup_r+0xd4>)
 800b122:	429c      	cmp	r4, r3
 800b124:	d101      	bne.n	800b12a <__swsetup_r+0x46>
 800b126:	68ac      	ldr	r4, [r5, #8]
 800b128:	e7eb      	b.n	800b102 <__swsetup_r+0x1e>
 800b12a:	4b24      	ldr	r3, [pc, #144]	; (800b1bc <__swsetup_r+0xd8>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	bf08      	it	eq
 800b130:	68ec      	ldreq	r4, [r5, #12]
 800b132:	e7e6      	b.n	800b102 <__swsetup_r+0x1e>
 800b134:	0758      	lsls	r0, r3, #29
 800b136:	d512      	bpl.n	800b15e <__swsetup_r+0x7a>
 800b138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b13a:	b141      	cbz	r1, 800b14e <__swsetup_r+0x6a>
 800b13c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b140:	4299      	cmp	r1, r3
 800b142:	d002      	beq.n	800b14a <__swsetup_r+0x66>
 800b144:	4630      	mov	r0, r6
 800b146:	f7ff fb6f 	bl	800a828 <_free_r>
 800b14a:	2300      	movs	r3, #0
 800b14c:	6363      	str	r3, [r4, #52]	; 0x34
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b154:	81a3      	strh	r3, [r4, #12]
 800b156:	2300      	movs	r3, #0
 800b158:	6063      	str	r3, [r4, #4]
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f043 0308 	orr.w	r3, r3, #8
 800b164:	81a3      	strh	r3, [r4, #12]
 800b166:	6923      	ldr	r3, [r4, #16]
 800b168:	b94b      	cbnz	r3, 800b17e <__swsetup_r+0x9a>
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b174:	d003      	beq.n	800b17e <__swsetup_r+0x9a>
 800b176:	4621      	mov	r1, r4
 800b178:	4630      	mov	r0, r6
 800b17a:	f000 fa07 	bl	800b58c <__smakebuf_r>
 800b17e:	89a0      	ldrh	r0, [r4, #12]
 800b180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b184:	f010 0301 	ands.w	r3, r0, #1
 800b188:	d00a      	beq.n	800b1a0 <__swsetup_r+0xbc>
 800b18a:	2300      	movs	r3, #0
 800b18c:	60a3      	str	r3, [r4, #8]
 800b18e:	6963      	ldr	r3, [r4, #20]
 800b190:	425b      	negs	r3, r3
 800b192:	61a3      	str	r3, [r4, #24]
 800b194:	6923      	ldr	r3, [r4, #16]
 800b196:	b943      	cbnz	r3, 800b1aa <__swsetup_r+0xc6>
 800b198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b19c:	d1ba      	bne.n	800b114 <__swsetup_r+0x30>
 800b19e:	bd70      	pop	{r4, r5, r6, pc}
 800b1a0:	0781      	lsls	r1, r0, #30
 800b1a2:	bf58      	it	pl
 800b1a4:	6963      	ldrpl	r3, [r4, #20]
 800b1a6:	60a3      	str	r3, [r4, #8]
 800b1a8:	e7f4      	b.n	800b194 <__swsetup_r+0xb0>
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	e7f7      	b.n	800b19e <__swsetup_r+0xba>
 800b1ae:	bf00      	nop
 800b1b0:	2000003c 	.word	0x2000003c
 800b1b4:	0800c144 	.word	0x0800c144
 800b1b8:	0800c164 	.word	0x0800c164
 800b1bc:	0800c124 	.word	0x0800c124

0800b1c0 <abort>:
 800b1c0:	b508      	push	{r3, lr}
 800b1c2:	2006      	movs	r0, #6
 800b1c4:	f000 fa52 	bl	800b66c <raise>
 800b1c8:	2001      	movs	r0, #1
 800b1ca:	f7fd fb85 	bl	80088d8 <_exit>
	...

0800b1d0 <__sflush_r>:
 800b1d0:	898a      	ldrh	r2, [r1, #12]
 800b1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	0710      	lsls	r0, r2, #28
 800b1da:	460c      	mov	r4, r1
 800b1dc:	d458      	bmi.n	800b290 <__sflush_r+0xc0>
 800b1de:	684b      	ldr	r3, [r1, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	dc05      	bgt.n	800b1f0 <__sflush_r+0x20>
 800b1e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	dc02      	bgt.n	800b1f0 <__sflush_r+0x20>
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1f2:	2e00      	cmp	r6, #0
 800b1f4:	d0f9      	beq.n	800b1ea <__sflush_r+0x1a>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1fc:	682f      	ldr	r7, [r5, #0]
 800b1fe:	602b      	str	r3, [r5, #0]
 800b200:	d032      	beq.n	800b268 <__sflush_r+0x98>
 800b202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b204:	89a3      	ldrh	r3, [r4, #12]
 800b206:	075a      	lsls	r2, r3, #29
 800b208:	d505      	bpl.n	800b216 <__sflush_r+0x46>
 800b20a:	6863      	ldr	r3, [r4, #4]
 800b20c:	1ac0      	subs	r0, r0, r3
 800b20e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b210:	b10b      	cbz	r3, 800b216 <__sflush_r+0x46>
 800b212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b214:	1ac0      	subs	r0, r0, r3
 800b216:	2300      	movs	r3, #0
 800b218:	4602      	mov	r2, r0
 800b21a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b21c:	6a21      	ldr	r1, [r4, #32]
 800b21e:	4628      	mov	r0, r5
 800b220:	47b0      	blx	r6
 800b222:	1c43      	adds	r3, r0, #1
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	d106      	bne.n	800b236 <__sflush_r+0x66>
 800b228:	6829      	ldr	r1, [r5, #0]
 800b22a:	291d      	cmp	r1, #29
 800b22c:	d82c      	bhi.n	800b288 <__sflush_r+0xb8>
 800b22e:	4a2a      	ldr	r2, [pc, #168]	; (800b2d8 <__sflush_r+0x108>)
 800b230:	40ca      	lsrs	r2, r1
 800b232:	07d6      	lsls	r6, r2, #31
 800b234:	d528      	bpl.n	800b288 <__sflush_r+0xb8>
 800b236:	2200      	movs	r2, #0
 800b238:	6062      	str	r2, [r4, #4]
 800b23a:	04d9      	lsls	r1, r3, #19
 800b23c:	6922      	ldr	r2, [r4, #16]
 800b23e:	6022      	str	r2, [r4, #0]
 800b240:	d504      	bpl.n	800b24c <__sflush_r+0x7c>
 800b242:	1c42      	adds	r2, r0, #1
 800b244:	d101      	bne.n	800b24a <__sflush_r+0x7a>
 800b246:	682b      	ldr	r3, [r5, #0]
 800b248:	b903      	cbnz	r3, 800b24c <__sflush_r+0x7c>
 800b24a:	6560      	str	r0, [r4, #84]	; 0x54
 800b24c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b24e:	602f      	str	r7, [r5, #0]
 800b250:	2900      	cmp	r1, #0
 800b252:	d0ca      	beq.n	800b1ea <__sflush_r+0x1a>
 800b254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b258:	4299      	cmp	r1, r3
 800b25a:	d002      	beq.n	800b262 <__sflush_r+0x92>
 800b25c:	4628      	mov	r0, r5
 800b25e:	f7ff fae3 	bl	800a828 <_free_r>
 800b262:	2000      	movs	r0, #0
 800b264:	6360      	str	r0, [r4, #52]	; 0x34
 800b266:	e7c1      	b.n	800b1ec <__sflush_r+0x1c>
 800b268:	6a21      	ldr	r1, [r4, #32]
 800b26a:	2301      	movs	r3, #1
 800b26c:	4628      	mov	r0, r5
 800b26e:	47b0      	blx	r6
 800b270:	1c41      	adds	r1, r0, #1
 800b272:	d1c7      	bne.n	800b204 <__sflush_r+0x34>
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0c4      	beq.n	800b204 <__sflush_r+0x34>
 800b27a:	2b1d      	cmp	r3, #29
 800b27c:	d001      	beq.n	800b282 <__sflush_r+0xb2>
 800b27e:	2b16      	cmp	r3, #22
 800b280:	d101      	bne.n	800b286 <__sflush_r+0xb6>
 800b282:	602f      	str	r7, [r5, #0]
 800b284:	e7b1      	b.n	800b1ea <__sflush_r+0x1a>
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b28c:	81a3      	strh	r3, [r4, #12]
 800b28e:	e7ad      	b.n	800b1ec <__sflush_r+0x1c>
 800b290:	690f      	ldr	r7, [r1, #16]
 800b292:	2f00      	cmp	r7, #0
 800b294:	d0a9      	beq.n	800b1ea <__sflush_r+0x1a>
 800b296:	0793      	lsls	r3, r2, #30
 800b298:	680e      	ldr	r6, [r1, #0]
 800b29a:	bf08      	it	eq
 800b29c:	694b      	ldreq	r3, [r1, #20]
 800b29e:	600f      	str	r7, [r1, #0]
 800b2a0:	bf18      	it	ne
 800b2a2:	2300      	movne	r3, #0
 800b2a4:	eba6 0807 	sub.w	r8, r6, r7
 800b2a8:	608b      	str	r3, [r1, #8]
 800b2aa:	f1b8 0f00 	cmp.w	r8, #0
 800b2ae:	dd9c      	ble.n	800b1ea <__sflush_r+0x1a>
 800b2b0:	6a21      	ldr	r1, [r4, #32]
 800b2b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2b4:	4643      	mov	r3, r8
 800b2b6:	463a      	mov	r2, r7
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	47b0      	blx	r6
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	dc06      	bgt.n	800b2ce <__sflush_r+0xfe>
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c6:	81a3      	strh	r3, [r4, #12]
 800b2c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2cc:	e78e      	b.n	800b1ec <__sflush_r+0x1c>
 800b2ce:	4407      	add	r7, r0
 800b2d0:	eba8 0800 	sub.w	r8, r8, r0
 800b2d4:	e7e9      	b.n	800b2aa <__sflush_r+0xda>
 800b2d6:	bf00      	nop
 800b2d8:	20400001 	.word	0x20400001

0800b2dc <_fflush_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	690b      	ldr	r3, [r1, #16]
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	b913      	cbnz	r3, 800b2ec <_fflush_r+0x10>
 800b2e6:	2500      	movs	r5, #0
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	b118      	cbz	r0, 800b2f6 <_fflush_r+0x1a>
 800b2ee:	6983      	ldr	r3, [r0, #24]
 800b2f0:	b90b      	cbnz	r3, 800b2f6 <_fflush_r+0x1a>
 800b2f2:	f000 f887 	bl	800b404 <__sinit>
 800b2f6:	4b14      	ldr	r3, [pc, #80]	; (800b348 <_fflush_r+0x6c>)
 800b2f8:	429c      	cmp	r4, r3
 800b2fa:	d11b      	bne.n	800b334 <_fflush_r+0x58>
 800b2fc:	686c      	ldr	r4, [r5, #4]
 800b2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0ef      	beq.n	800b2e6 <_fflush_r+0xa>
 800b306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b308:	07d0      	lsls	r0, r2, #31
 800b30a:	d404      	bmi.n	800b316 <_fflush_r+0x3a>
 800b30c:	0599      	lsls	r1, r3, #22
 800b30e:	d402      	bmi.n	800b316 <_fflush_r+0x3a>
 800b310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b312:	f000 f915 	bl	800b540 <__retarget_lock_acquire_recursive>
 800b316:	4628      	mov	r0, r5
 800b318:	4621      	mov	r1, r4
 800b31a:	f7ff ff59 	bl	800b1d0 <__sflush_r>
 800b31e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b320:	07da      	lsls	r2, r3, #31
 800b322:	4605      	mov	r5, r0
 800b324:	d4e0      	bmi.n	800b2e8 <_fflush_r+0xc>
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	059b      	lsls	r3, r3, #22
 800b32a:	d4dd      	bmi.n	800b2e8 <_fflush_r+0xc>
 800b32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b32e:	f000 f908 	bl	800b542 <__retarget_lock_release_recursive>
 800b332:	e7d9      	b.n	800b2e8 <_fflush_r+0xc>
 800b334:	4b05      	ldr	r3, [pc, #20]	; (800b34c <_fflush_r+0x70>)
 800b336:	429c      	cmp	r4, r3
 800b338:	d101      	bne.n	800b33e <_fflush_r+0x62>
 800b33a:	68ac      	ldr	r4, [r5, #8]
 800b33c:	e7df      	b.n	800b2fe <_fflush_r+0x22>
 800b33e:	4b04      	ldr	r3, [pc, #16]	; (800b350 <_fflush_r+0x74>)
 800b340:	429c      	cmp	r4, r3
 800b342:	bf08      	it	eq
 800b344:	68ec      	ldreq	r4, [r5, #12]
 800b346:	e7da      	b.n	800b2fe <_fflush_r+0x22>
 800b348:	0800c144 	.word	0x0800c144
 800b34c:	0800c164 	.word	0x0800c164
 800b350:	0800c124 	.word	0x0800c124

0800b354 <std>:
 800b354:	2300      	movs	r3, #0
 800b356:	b510      	push	{r4, lr}
 800b358:	4604      	mov	r4, r0
 800b35a:	e9c0 3300 	strd	r3, r3, [r0]
 800b35e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b362:	6083      	str	r3, [r0, #8]
 800b364:	8181      	strh	r1, [r0, #12]
 800b366:	6643      	str	r3, [r0, #100]	; 0x64
 800b368:	81c2      	strh	r2, [r0, #14]
 800b36a:	6183      	str	r3, [r0, #24]
 800b36c:	4619      	mov	r1, r3
 800b36e:	2208      	movs	r2, #8
 800b370:	305c      	adds	r0, #92	; 0x5c
 800b372:	f7fd fbb3 	bl	8008adc <memset>
 800b376:	4b05      	ldr	r3, [pc, #20]	; (800b38c <std+0x38>)
 800b378:	6263      	str	r3, [r4, #36]	; 0x24
 800b37a:	4b05      	ldr	r3, [pc, #20]	; (800b390 <std+0x3c>)
 800b37c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b37e:	4b05      	ldr	r3, [pc, #20]	; (800b394 <std+0x40>)
 800b380:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b382:	4b05      	ldr	r3, [pc, #20]	; (800b398 <std+0x44>)
 800b384:	6224      	str	r4, [r4, #32]
 800b386:	6323      	str	r3, [r4, #48]	; 0x30
 800b388:	bd10      	pop	{r4, pc}
 800b38a:	bf00      	nop
 800b38c:	0800b6a5 	.word	0x0800b6a5
 800b390:	0800b6c7 	.word	0x0800b6c7
 800b394:	0800b6ff 	.word	0x0800b6ff
 800b398:	0800b723 	.word	0x0800b723

0800b39c <_cleanup_r>:
 800b39c:	4901      	ldr	r1, [pc, #4]	; (800b3a4 <_cleanup_r+0x8>)
 800b39e:	f000 b8af 	b.w	800b500 <_fwalk_reent>
 800b3a2:	bf00      	nop
 800b3a4:	0800b2dd 	.word	0x0800b2dd

0800b3a8 <__sfmoreglue>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	1e4a      	subs	r2, r1, #1
 800b3ac:	2568      	movs	r5, #104	; 0x68
 800b3ae:	4355      	muls	r5, r2
 800b3b0:	460e      	mov	r6, r1
 800b3b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3b6:	f7ff fa87 	bl	800a8c8 <_malloc_r>
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	b140      	cbz	r0, 800b3d0 <__sfmoreglue+0x28>
 800b3be:	2100      	movs	r1, #0
 800b3c0:	e9c0 1600 	strd	r1, r6, [r0]
 800b3c4:	300c      	adds	r0, #12
 800b3c6:	60a0      	str	r0, [r4, #8]
 800b3c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3cc:	f7fd fb86 	bl	8008adc <memset>
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}

0800b3d4 <__sfp_lock_acquire>:
 800b3d4:	4801      	ldr	r0, [pc, #4]	; (800b3dc <__sfp_lock_acquire+0x8>)
 800b3d6:	f000 b8b3 	b.w	800b540 <__retarget_lock_acquire_recursive>
 800b3da:	bf00      	nop
 800b3dc:	20014940 	.word	0x20014940

0800b3e0 <__sfp_lock_release>:
 800b3e0:	4801      	ldr	r0, [pc, #4]	; (800b3e8 <__sfp_lock_release+0x8>)
 800b3e2:	f000 b8ae 	b.w	800b542 <__retarget_lock_release_recursive>
 800b3e6:	bf00      	nop
 800b3e8:	20014940 	.word	0x20014940

0800b3ec <__sinit_lock_acquire>:
 800b3ec:	4801      	ldr	r0, [pc, #4]	; (800b3f4 <__sinit_lock_acquire+0x8>)
 800b3ee:	f000 b8a7 	b.w	800b540 <__retarget_lock_acquire_recursive>
 800b3f2:	bf00      	nop
 800b3f4:	2001493b 	.word	0x2001493b

0800b3f8 <__sinit_lock_release>:
 800b3f8:	4801      	ldr	r0, [pc, #4]	; (800b400 <__sinit_lock_release+0x8>)
 800b3fa:	f000 b8a2 	b.w	800b542 <__retarget_lock_release_recursive>
 800b3fe:	bf00      	nop
 800b400:	2001493b 	.word	0x2001493b

0800b404 <__sinit>:
 800b404:	b510      	push	{r4, lr}
 800b406:	4604      	mov	r4, r0
 800b408:	f7ff fff0 	bl	800b3ec <__sinit_lock_acquire>
 800b40c:	69a3      	ldr	r3, [r4, #24]
 800b40e:	b11b      	cbz	r3, 800b418 <__sinit+0x14>
 800b410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b414:	f7ff bff0 	b.w	800b3f8 <__sinit_lock_release>
 800b418:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b41c:	6523      	str	r3, [r4, #80]	; 0x50
 800b41e:	4b13      	ldr	r3, [pc, #76]	; (800b46c <__sinit+0x68>)
 800b420:	4a13      	ldr	r2, [pc, #76]	; (800b470 <__sinit+0x6c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	62a2      	str	r2, [r4, #40]	; 0x28
 800b426:	42a3      	cmp	r3, r4
 800b428:	bf04      	itt	eq
 800b42a:	2301      	moveq	r3, #1
 800b42c:	61a3      	streq	r3, [r4, #24]
 800b42e:	4620      	mov	r0, r4
 800b430:	f000 f820 	bl	800b474 <__sfp>
 800b434:	6060      	str	r0, [r4, #4]
 800b436:	4620      	mov	r0, r4
 800b438:	f000 f81c 	bl	800b474 <__sfp>
 800b43c:	60a0      	str	r0, [r4, #8]
 800b43e:	4620      	mov	r0, r4
 800b440:	f000 f818 	bl	800b474 <__sfp>
 800b444:	2200      	movs	r2, #0
 800b446:	60e0      	str	r0, [r4, #12]
 800b448:	2104      	movs	r1, #4
 800b44a:	6860      	ldr	r0, [r4, #4]
 800b44c:	f7ff ff82 	bl	800b354 <std>
 800b450:	68a0      	ldr	r0, [r4, #8]
 800b452:	2201      	movs	r2, #1
 800b454:	2109      	movs	r1, #9
 800b456:	f7ff ff7d 	bl	800b354 <std>
 800b45a:	68e0      	ldr	r0, [r4, #12]
 800b45c:	2202      	movs	r2, #2
 800b45e:	2112      	movs	r1, #18
 800b460:	f7ff ff78 	bl	800b354 <std>
 800b464:	2301      	movs	r3, #1
 800b466:	61a3      	str	r3, [r4, #24]
 800b468:	e7d2      	b.n	800b410 <__sinit+0xc>
 800b46a:	bf00      	nop
 800b46c:	0800bda4 	.word	0x0800bda4
 800b470:	0800b39d 	.word	0x0800b39d

0800b474 <__sfp>:
 800b474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b476:	4607      	mov	r7, r0
 800b478:	f7ff ffac 	bl	800b3d4 <__sfp_lock_acquire>
 800b47c:	4b1e      	ldr	r3, [pc, #120]	; (800b4f8 <__sfp+0x84>)
 800b47e:	681e      	ldr	r6, [r3, #0]
 800b480:	69b3      	ldr	r3, [r6, #24]
 800b482:	b913      	cbnz	r3, 800b48a <__sfp+0x16>
 800b484:	4630      	mov	r0, r6
 800b486:	f7ff ffbd 	bl	800b404 <__sinit>
 800b48a:	3648      	adds	r6, #72	; 0x48
 800b48c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b490:	3b01      	subs	r3, #1
 800b492:	d503      	bpl.n	800b49c <__sfp+0x28>
 800b494:	6833      	ldr	r3, [r6, #0]
 800b496:	b30b      	cbz	r3, 800b4dc <__sfp+0x68>
 800b498:	6836      	ldr	r6, [r6, #0]
 800b49a:	e7f7      	b.n	800b48c <__sfp+0x18>
 800b49c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4a0:	b9d5      	cbnz	r5, 800b4d8 <__sfp+0x64>
 800b4a2:	4b16      	ldr	r3, [pc, #88]	; (800b4fc <__sfp+0x88>)
 800b4a4:	60e3      	str	r3, [r4, #12]
 800b4a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4aa:	6665      	str	r5, [r4, #100]	; 0x64
 800b4ac:	f000 f847 	bl	800b53e <__retarget_lock_init_recursive>
 800b4b0:	f7ff ff96 	bl	800b3e0 <__sfp_lock_release>
 800b4b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4bc:	6025      	str	r5, [r4, #0]
 800b4be:	61a5      	str	r5, [r4, #24]
 800b4c0:	2208      	movs	r2, #8
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4c8:	f7fd fb08 	bl	8008adc <memset>
 800b4cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d8:	3468      	adds	r4, #104	; 0x68
 800b4da:	e7d9      	b.n	800b490 <__sfp+0x1c>
 800b4dc:	2104      	movs	r1, #4
 800b4de:	4638      	mov	r0, r7
 800b4e0:	f7ff ff62 	bl	800b3a8 <__sfmoreglue>
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	6030      	str	r0, [r6, #0]
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d1d5      	bne.n	800b498 <__sfp+0x24>
 800b4ec:	f7ff ff78 	bl	800b3e0 <__sfp_lock_release>
 800b4f0:	230c      	movs	r3, #12
 800b4f2:	603b      	str	r3, [r7, #0]
 800b4f4:	e7ee      	b.n	800b4d4 <__sfp+0x60>
 800b4f6:	bf00      	nop
 800b4f8:	0800bda4 	.word	0x0800bda4
 800b4fc:	ffff0001 	.word	0xffff0001

0800b500 <_fwalk_reent>:
 800b500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b504:	4606      	mov	r6, r0
 800b506:	4688      	mov	r8, r1
 800b508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b50c:	2700      	movs	r7, #0
 800b50e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b512:	f1b9 0901 	subs.w	r9, r9, #1
 800b516:	d505      	bpl.n	800b524 <_fwalk_reent+0x24>
 800b518:	6824      	ldr	r4, [r4, #0]
 800b51a:	2c00      	cmp	r4, #0
 800b51c:	d1f7      	bne.n	800b50e <_fwalk_reent+0xe>
 800b51e:	4638      	mov	r0, r7
 800b520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b524:	89ab      	ldrh	r3, [r5, #12]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d907      	bls.n	800b53a <_fwalk_reent+0x3a>
 800b52a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b52e:	3301      	adds	r3, #1
 800b530:	d003      	beq.n	800b53a <_fwalk_reent+0x3a>
 800b532:	4629      	mov	r1, r5
 800b534:	4630      	mov	r0, r6
 800b536:	47c0      	blx	r8
 800b538:	4307      	orrs	r7, r0
 800b53a:	3568      	adds	r5, #104	; 0x68
 800b53c:	e7e9      	b.n	800b512 <_fwalk_reent+0x12>

0800b53e <__retarget_lock_init_recursive>:
 800b53e:	4770      	bx	lr

0800b540 <__retarget_lock_acquire_recursive>:
 800b540:	4770      	bx	lr

0800b542 <__retarget_lock_release_recursive>:
 800b542:	4770      	bx	lr

0800b544 <__swhatbuf_r>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	460e      	mov	r6, r1
 800b548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b54c:	2900      	cmp	r1, #0
 800b54e:	b096      	sub	sp, #88	; 0x58
 800b550:	4614      	mov	r4, r2
 800b552:	461d      	mov	r5, r3
 800b554:	da07      	bge.n	800b566 <__swhatbuf_r+0x22>
 800b556:	2300      	movs	r3, #0
 800b558:	602b      	str	r3, [r5, #0]
 800b55a:	89b3      	ldrh	r3, [r6, #12]
 800b55c:	061a      	lsls	r2, r3, #24
 800b55e:	d410      	bmi.n	800b582 <__swhatbuf_r+0x3e>
 800b560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b564:	e00e      	b.n	800b584 <__swhatbuf_r+0x40>
 800b566:	466a      	mov	r2, sp
 800b568:	f000 f8f0 	bl	800b74c <_fstat_r>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	dbf2      	blt.n	800b556 <__swhatbuf_r+0x12>
 800b570:	9a01      	ldr	r2, [sp, #4]
 800b572:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b576:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b57a:	425a      	negs	r2, r3
 800b57c:	415a      	adcs	r2, r3
 800b57e:	602a      	str	r2, [r5, #0]
 800b580:	e7ee      	b.n	800b560 <__swhatbuf_r+0x1c>
 800b582:	2340      	movs	r3, #64	; 0x40
 800b584:	2000      	movs	r0, #0
 800b586:	6023      	str	r3, [r4, #0]
 800b588:	b016      	add	sp, #88	; 0x58
 800b58a:	bd70      	pop	{r4, r5, r6, pc}

0800b58c <__smakebuf_r>:
 800b58c:	898b      	ldrh	r3, [r1, #12]
 800b58e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b590:	079d      	lsls	r5, r3, #30
 800b592:	4606      	mov	r6, r0
 800b594:	460c      	mov	r4, r1
 800b596:	d507      	bpl.n	800b5a8 <__smakebuf_r+0x1c>
 800b598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	6123      	str	r3, [r4, #16]
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	6163      	str	r3, [r4, #20]
 800b5a4:	b002      	add	sp, #8
 800b5a6:	bd70      	pop	{r4, r5, r6, pc}
 800b5a8:	ab01      	add	r3, sp, #4
 800b5aa:	466a      	mov	r2, sp
 800b5ac:	f7ff ffca 	bl	800b544 <__swhatbuf_r>
 800b5b0:	9900      	ldr	r1, [sp, #0]
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f7ff f987 	bl	800a8c8 <_malloc_r>
 800b5ba:	b948      	cbnz	r0, 800b5d0 <__smakebuf_r+0x44>
 800b5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5c0:	059a      	lsls	r2, r3, #22
 800b5c2:	d4ef      	bmi.n	800b5a4 <__smakebuf_r+0x18>
 800b5c4:	f023 0303 	bic.w	r3, r3, #3
 800b5c8:	f043 0302 	orr.w	r3, r3, #2
 800b5cc:	81a3      	strh	r3, [r4, #12]
 800b5ce:	e7e3      	b.n	800b598 <__smakebuf_r+0xc>
 800b5d0:	4b0d      	ldr	r3, [pc, #52]	; (800b608 <__smakebuf_r+0x7c>)
 800b5d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	6020      	str	r0, [r4, #0]
 800b5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5dc:	81a3      	strh	r3, [r4, #12]
 800b5de:	9b00      	ldr	r3, [sp, #0]
 800b5e0:	6163      	str	r3, [r4, #20]
 800b5e2:	9b01      	ldr	r3, [sp, #4]
 800b5e4:	6120      	str	r0, [r4, #16]
 800b5e6:	b15b      	cbz	r3, 800b600 <__smakebuf_r+0x74>
 800b5e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f000 f8bf 	bl	800b770 <_isatty_r>
 800b5f2:	b128      	cbz	r0, 800b600 <__smakebuf_r+0x74>
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	f023 0303 	bic.w	r3, r3, #3
 800b5fa:	f043 0301 	orr.w	r3, r3, #1
 800b5fe:	81a3      	strh	r3, [r4, #12]
 800b600:	89a0      	ldrh	r0, [r4, #12]
 800b602:	4305      	orrs	r5, r0
 800b604:	81a5      	strh	r5, [r4, #12]
 800b606:	e7cd      	b.n	800b5a4 <__smakebuf_r+0x18>
 800b608:	0800b39d 	.word	0x0800b39d

0800b60c <_malloc_usable_size_r>:
 800b60c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b610:	1f18      	subs	r0, r3, #4
 800b612:	2b00      	cmp	r3, #0
 800b614:	bfbc      	itt	lt
 800b616:	580b      	ldrlt	r3, [r1, r0]
 800b618:	18c0      	addlt	r0, r0, r3
 800b61a:	4770      	bx	lr

0800b61c <_raise_r>:
 800b61c:	291f      	cmp	r1, #31
 800b61e:	b538      	push	{r3, r4, r5, lr}
 800b620:	4604      	mov	r4, r0
 800b622:	460d      	mov	r5, r1
 800b624:	d904      	bls.n	800b630 <_raise_r+0x14>
 800b626:	2316      	movs	r3, #22
 800b628:	6003      	str	r3, [r0, #0]
 800b62a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b632:	b112      	cbz	r2, 800b63a <_raise_r+0x1e>
 800b634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b638:	b94b      	cbnz	r3, 800b64e <_raise_r+0x32>
 800b63a:	4620      	mov	r0, r4
 800b63c:	f000 f830 	bl	800b6a0 <_getpid_r>
 800b640:	462a      	mov	r2, r5
 800b642:	4601      	mov	r1, r0
 800b644:	4620      	mov	r0, r4
 800b646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b64a:	f000 b817 	b.w	800b67c <_kill_r>
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d00a      	beq.n	800b668 <_raise_r+0x4c>
 800b652:	1c59      	adds	r1, r3, #1
 800b654:	d103      	bne.n	800b65e <_raise_r+0x42>
 800b656:	2316      	movs	r3, #22
 800b658:	6003      	str	r3, [r0, #0]
 800b65a:	2001      	movs	r0, #1
 800b65c:	e7e7      	b.n	800b62e <_raise_r+0x12>
 800b65e:	2400      	movs	r4, #0
 800b660:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b664:	4628      	mov	r0, r5
 800b666:	4798      	blx	r3
 800b668:	2000      	movs	r0, #0
 800b66a:	e7e0      	b.n	800b62e <_raise_r+0x12>

0800b66c <raise>:
 800b66c:	4b02      	ldr	r3, [pc, #8]	; (800b678 <raise+0xc>)
 800b66e:	4601      	mov	r1, r0
 800b670:	6818      	ldr	r0, [r3, #0]
 800b672:	f7ff bfd3 	b.w	800b61c <_raise_r>
 800b676:	bf00      	nop
 800b678:	2000003c 	.word	0x2000003c

0800b67c <_kill_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	4d07      	ldr	r5, [pc, #28]	; (800b69c <_kill_r+0x20>)
 800b680:	2300      	movs	r3, #0
 800b682:	4604      	mov	r4, r0
 800b684:	4608      	mov	r0, r1
 800b686:	4611      	mov	r1, r2
 800b688:	602b      	str	r3, [r5, #0]
 800b68a:	f7fd f915 	bl	80088b8 <_kill>
 800b68e:	1c43      	adds	r3, r0, #1
 800b690:	d102      	bne.n	800b698 <_kill_r+0x1c>
 800b692:	682b      	ldr	r3, [r5, #0]
 800b694:	b103      	cbz	r3, 800b698 <_kill_r+0x1c>
 800b696:	6023      	str	r3, [r4, #0]
 800b698:	bd38      	pop	{r3, r4, r5, pc}
 800b69a:	bf00      	nop
 800b69c:	20014934 	.word	0x20014934

0800b6a0 <_getpid_r>:
 800b6a0:	f7fd b902 	b.w	80088a8 <_getpid>

0800b6a4 <__sread>:
 800b6a4:	b510      	push	{r4, lr}
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ac:	f000 f882 	bl	800b7b4 <_read_r>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	bfab      	itete	ge
 800b6b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b6b8:	181b      	addge	r3, r3, r0
 800b6ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6be:	bfac      	ite	ge
 800b6c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6c2:	81a3      	strhlt	r3, [r4, #12]
 800b6c4:	bd10      	pop	{r4, pc}

0800b6c6 <__swrite>:
 800b6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ca:	461f      	mov	r7, r3
 800b6cc:	898b      	ldrh	r3, [r1, #12]
 800b6ce:	05db      	lsls	r3, r3, #23
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	4616      	mov	r6, r2
 800b6d6:	d505      	bpl.n	800b6e4 <__swrite+0x1e>
 800b6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6dc:	2302      	movs	r3, #2
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f000 f856 	bl	800b790 <_lseek_r>
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6ee:	81a3      	strh	r3, [r4, #12]
 800b6f0:	4632      	mov	r2, r6
 800b6f2:	463b      	mov	r3, r7
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fa:	f7fb bd8f 	b.w	800721c <_write_r>

0800b6fe <__sseek>:
 800b6fe:	b510      	push	{r4, lr}
 800b700:	460c      	mov	r4, r1
 800b702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b706:	f000 f843 	bl	800b790 <_lseek_r>
 800b70a:	1c43      	adds	r3, r0, #1
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	bf15      	itete	ne
 800b710:	6560      	strne	r0, [r4, #84]	; 0x54
 800b712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b71a:	81a3      	strheq	r3, [r4, #12]
 800b71c:	bf18      	it	ne
 800b71e:	81a3      	strhne	r3, [r4, #12]
 800b720:	bd10      	pop	{r4, pc}

0800b722 <__sclose>:
 800b722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b726:	f000 b801 	b.w	800b72c <_close_r>
	...

0800b72c <_close_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d06      	ldr	r5, [pc, #24]	; (800b748 <_close_r+0x1c>)
 800b730:	2300      	movs	r3, #0
 800b732:	4604      	mov	r4, r0
 800b734:	4608      	mov	r0, r1
 800b736:	602b      	str	r3, [r5, #0]
 800b738:	f7fd f8f5 	bl	8008926 <_close>
 800b73c:	1c43      	adds	r3, r0, #1
 800b73e:	d102      	bne.n	800b746 <_close_r+0x1a>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	b103      	cbz	r3, 800b746 <_close_r+0x1a>
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	20014934 	.word	0x20014934

0800b74c <_fstat_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	4d07      	ldr	r5, [pc, #28]	; (800b76c <_fstat_r+0x20>)
 800b750:	2300      	movs	r3, #0
 800b752:	4604      	mov	r4, r0
 800b754:	4608      	mov	r0, r1
 800b756:	4611      	mov	r1, r2
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	f7fd f8f0 	bl	800893e <_fstat>
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	d102      	bne.n	800b768 <_fstat_r+0x1c>
 800b762:	682b      	ldr	r3, [r5, #0]
 800b764:	b103      	cbz	r3, 800b768 <_fstat_r+0x1c>
 800b766:	6023      	str	r3, [r4, #0]
 800b768:	bd38      	pop	{r3, r4, r5, pc}
 800b76a:	bf00      	nop
 800b76c:	20014934 	.word	0x20014934

0800b770 <_isatty_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4d06      	ldr	r5, [pc, #24]	; (800b78c <_isatty_r+0x1c>)
 800b774:	2300      	movs	r3, #0
 800b776:	4604      	mov	r4, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	602b      	str	r3, [r5, #0]
 800b77c:	f7fd f8ef 	bl	800895e <_isatty>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	d102      	bne.n	800b78a <_isatty_r+0x1a>
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	b103      	cbz	r3, 800b78a <_isatty_r+0x1a>
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	bd38      	pop	{r3, r4, r5, pc}
 800b78c:	20014934 	.word	0x20014934

0800b790 <_lseek_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4d07      	ldr	r5, [pc, #28]	; (800b7b0 <_lseek_r+0x20>)
 800b794:	4604      	mov	r4, r0
 800b796:	4608      	mov	r0, r1
 800b798:	4611      	mov	r1, r2
 800b79a:	2200      	movs	r2, #0
 800b79c:	602a      	str	r2, [r5, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f7fd f8e8 	bl	8008974 <_lseek>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d102      	bne.n	800b7ae <_lseek_r+0x1e>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	b103      	cbz	r3, 800b7ae <_lseek_r+0x1e>
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	20014934 	.word	0x20014934

0800b7b4 <_read_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	4d07      	ldr	r5, [pc, #28]	; (800b7d4 <_read_r+0x20>)
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	4608      	mov	r0, r1
 800b7bc:	4611      	mov	r1, r2
 800b7be:	2200      	movs	r2, #0
 800b7c0:	602a      	str	r2, [r5, #0]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f7fd f892 	bl	80088ec <_read>
 800b7c8:	1c43      	adds	r3, r0, #1
 800b7ca:	d102      	bne.n	800b7d2 <_read_r+0x1e>
 800b7cc:	682b      	ldr	r3, [r5, #0]
 800b7ce:	b103      	cbz	r3, 800b7d2 <_read_r+0x1e>
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	20014934 	.word	0x20014934

0800b7d8 <_init>:
 800b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7da:	bf00      	nop
 800b7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7de:	bc08      	pop	{r3}
 800b7e0:	469e      	mov	lr, r3
 800b7e2:	4770      	bx	lr

0800b7e4 <_fini>:
 800b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e6:	bf00      	nop
 800b7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ea:	bc08      	pop	{r3}
 800b7ec:	469e      	mov	lr, r3
 800b7ee:	4770      	bx	lr
