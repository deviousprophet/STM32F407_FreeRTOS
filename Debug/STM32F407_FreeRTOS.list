
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b450  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  0800b600  0800b600  0001b600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf7c  0800bf7c  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf7c  0800bf7c  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf7c  0800bf7c  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf7c  0800bf7c  0001bf7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf80  0800bf80  0001bf80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800bf84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000136e0  20000208  0800c18c  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200138e8  0800c18c  000238e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ef1  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d7  00000000  00000000  00039127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0003c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  0003d888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000065d6  00000000  00000000  0003e768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ebf  00000000  00000000  00044d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001e6e5  00000000  00000000  00055bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000742e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005454  00000000  00000000  00074338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000208 	.word	0x20000208
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b5e8 	.word	0x0800b5e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	0800b5e8 	.word	0x0800b5e8

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	200137bc 	.word	0x200137bc

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <ADE_Init>:
void ADE_SPI_Init();
void ZeroX_Init();
void SAG_Init();
void IRQ_Init();

void ADE_Init(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
	ADE_SPI_Init();
 8000d0e:	f000 f893 	bl	8000e38 <ADE_SPI_Init>
//	ZeroX_Init();
//	SAG_Init();
//	IRQ_Init();

	//Reset
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2109      	movs	r1, #9
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <ADE_Init+0x54>)
 8000d18:	f003 fe0e 	bl	8004938 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	e002      	b.n	8000d28 <ADE_Init+0x20>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3301      	adds	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	ddf7      	ble.n	8000d22 <ADE_Init+0x1a>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2109      	movs	r1, #9
 8000d36:	4809      	ldr	r0, [pc, #36]	; (8000d5c <ADE_Init+0x54>)
 8000d38:	f003 fdfe 	bl	8004938 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	e002      	b.n	8000d48 <ADE_Init+0x40>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	3301      	adds	r3, #1
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	ddf7      	ble.n	8000d42 <ADE_Init+0x3a>
}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40020c00 	.word	0x40020c00

08000d60 <ADE_ReadData>:

uint32_t ADE_ReadData(uint8_t address, uint32_t bytes_to_read) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
	uint32_t data = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
	uint8_t dummy_write = 0xff;
 8000d70:	23ff      	movs	r3, #255	; 0xff
 8000d72:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000d74:	2101      	movs	r1, #1
 8000d76:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <ADE_ReadData+0x64>)
 8000d78:	f004 f966 	bl	8005048 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4810      	ldr	r0, [pc, #64]	; (8000dc4 <ADE_ReadData+0x64>)
 8000d82:	f004 f936 	bl	8004ff2 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	e00e      	b.n	8000daa <ADE_ReadData+0x4a>
		data <<= 8;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	617b      	str	r3, [r7, #20]
		data |= SPI_Transfer(ADE_SPI_HOST, dummy_write);
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4619      	mov	r1, r3
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <ADE_ReadData+0x64>)
 8000d98:	f004 f92b 	bl	8004ff2 <SPI_Transfer>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	3301      	adds	r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3ec      	bcc.n	8000d8c <ADE_ReadData+0x2c>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE); //SS pin pull to high
 8000db2:	2100      	movs	r1, #0
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <ADE_ReadData+0x64>)
 8000db6:	f004 f947 	bl	8005048 <SPI_PeripheralControl>
	return data;
 8000dba:	697b      	ldr	r3, [r7, #20]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40003800 	.word	0x40003800

08000dc8 <ADE_WriteData>:

void ADE_WriteData(uint8_t address, uint32_t write_buffer, uint32_t bytes_to_write) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	74fb      	strb	r3, [r7, #19]
	address |= 0x80;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000de0:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000de2:	2101      	movs	r1, #1
 8000de4:	4813      	ldr	r0, [pc, #76]	; (8000e34 <ADE_WriteData+0x6c>)
 8000de6:	f004 f92f 	bl	8005048 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <ADE_WriteData+0x6c>)
 8000df0:	f004 f8ff 	bl	8004ff2 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e010      	b.n	8000e1c <ADE_WriteData+0x54>
		data = (uint8_t)(write_buffer >> 8*(bytes_to_write - i - 1));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	3b01      	subs	r3, #1
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0a:	74fb      	strb	r3, [r7, #19]
		SPI_Transfer(ADE_SPI_HOST, data);
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <ADE_WriteData+0x6c>)
 8000e12:	f004 f8ee 	bl	8004ff2 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++) {
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3ea      	bcc.n	8000dfa <ADE_WriteData+0x32>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE);; //SS pin pull to high
 8000e24:	2100      	movs	r1, #0
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <ADE_WriteData+0x6c>)
 8000e28:	f004 f90e 	bl	8005048 <SPI_PeripheralControl>
}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40003800 	.word	0x40003800

08000e38 <ADE_SPI_Init>:
			mode &= ~(1 << bit_flag);
		ADE_WriteData(MODE, mode, 2);
	}
}

void ADE_SPI_Init() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
	 * PB13 -> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT function mode : 5
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <ADE_SPI_Init+0xd8>)
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e42:	2302      	movs	r3, #2
 8000e44:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000e60:	230d      	movs	r3, #13
 8000e62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fbb2 	bl	80045d4 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000e70:	230f      	movs	r3, #15
 8000e72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fbaa 	bl	80045d4 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000e80:	230e      	movs	r3, #14
 8000e82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fba2 	bl	80045d4 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000e90:	230c      	movs	r3, #12
 8000e92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 fb9a 	bl	80045d4 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <ADE_SPI_Init+0xdc>)
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000ea4:	2309      	movs	r3, #9
 8000ea6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(&SPIPins);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fb8a 	bl	80045d4 <GPIO_Init>

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = ADE_SPI_HOST;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ec2:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;	// clock 1MHz
 8000ecc:	2303      	movs	r3, #3
 8000ece:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;				// CPOL 0
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;				// CPHA 1
 8000ed8:	2301      	movs	r3, #1
 8000eda:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 					// Hardware slave management enabled for NSS pin
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]

	ADE_SPI_HOST->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eea:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 f824 	bl	8004f3c <SPI_Init>
	ADE_SPI_HOST->CR1 |= (1 << SPI_CR1_SPE);
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efe:	6013      	str	r3, [r2, #0]

	SPI_SSOEConfig(ADE_SPI_HOST, ENABLE);
 8000f00:	2101      	movs	r1, #1
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000f04:	f004 f8bc 	bl	8005080 <SPI_SSOEConfig>
}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40003800 	.word	0x40003800

08000f1c <DS1307_Init>:

uint8_t DS1307_Bcd2Bin(uint8_t bcd);
uint8_t DS1307_Bin2Bcd(uint8_t bin);
uint8_t DS1307_CheckMinMax(uint8_t val, uint8_t min, uint8_t max);

DS1307_Result_t DS1307_Init(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	; 0x38
 8000f20:	af00      	add	r7, sp, #0
//	I2C GPIO Init
	GPIO_Handle_t ds_gpio;
	ds_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000f22:	2304      	movs	r3, #4
 8000f24:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ds_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ds_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	ds_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ds_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	ds_gpio.pGPIOx = DS1307_I2C_SCL_GPIO_PORT;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <DS1307_Init+0x80>)
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	ds_gpio.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_GPIO_PIN;
 8000f44:	2308      	movs	r3, #8
 8000f46:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&ds_gpio);
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 fb40 	bl	80045d4 <GPIO_Init>

	ds_gpio.pGPIOx = DS1307_I2C_SDA_GPIO_PORT;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <DS1307_Init+0x84>)
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
	ds_gpio.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_GPIO_PIN;
 8000f58:	2309      	movs	r3, #9
 8000f5a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&ds_gpio);
 8000f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 fb36 	bl	80045d4 <GPIO_Init>

	I2C_Handle_t ds_i2c;
	ds_i2c.pI2Cx = DS1307_I2C;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <DS1307_Init+0x88>)
 8000f6a:	607b      	str	r3, [r7, #4]
	ds_i2c.I2C_Config.I2C_AckControl = I2C_ACK_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	737b      	strb	r3, [r7, #13]
	ds_i2c.I2C_Config.I2C_SCLSpeed = DS1307_I2C_CLOCK;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <DS1307_Init+0x8c>)
 8000f72:	60bb      	str	r3, [r7, #8]
	ds_i2c.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73bb      	strb	r3, [r7, #14]

	I2C_Init(&ds_i2c);
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fd56 	bl	8004a2c <I2C_Init>

	if(!I2C_IsDeviceConnected(DS1307_I2C, DS1307_I2C_ADDR)) return DS1307_Result_DeviceNotConnected;
 8000f80:	21d0      	movs	r1, #208	; 0xd0
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <DS1307_Init+0x88>)
 8000f84:	f003 fe58 	bl	8004c38 <I2C_IsDeviceConnected>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <DS1307_Init+0x76>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e000      	b.n	8000f94 <DS1307_Init+0x78>
	return DS1307_Result_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3738      	adds	r7, #56	; 0x38
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40005c00 	.word	0x40005c00
 8000fa8:	000186a0 	.word	0x000186a0

08000fac <DS1307_GetSeconds>:

uint8_t DS1307_GetSeconds(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_SECONDS));
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	21d0      	movs	r1, #208	; 0xd0
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <DS1307_GetSeconds+0x1c>)
 8000fb6:	f003 fdf7 	bl	8004ba8 <I2C_Read>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f986 	bl	80012ce <DS1307_Bcd2Bin>
 8000fc2:	4603      	mov	r3, r0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40005c00 	.word	0x40005c00

08000fcc <DS1307_GetMinutes>:

uint8_t DS1307_GetMinutes(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MINUTES));
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	21d0      	movs	r1, #208	; 0xd0
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <DS1307_GetMinutes+0x1c>)
 8000fd6:	f003 fde7 	bl	8004ba8 <I2C_Read>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f976 	bl	80012ce <DS1307_Bcd2Bin>
 8000fe2:	4603      	mov	r3, r0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40005c00 	.word	0x40005c00

08000fec <DS1307_GetHours>:

uint8_t DS1307_GetHours(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_HOURS));
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	21d0      	movs	r1, #208	; 0xd0
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <DS1307_GetHours+0x1c>)
 8000ff6:	f003 fdd7 	bl	8004ba8 <I2C_Read>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f966 	bl	80012ce <DS1307_Bcd2Bin>
 8001002:	4603      	mov	r3, r0
}
 8001004:	4618      	mov	r0, r3
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40005c00 	.word	0x40005c00

0800100c <DS1307_GetDay>:

uint8_t DS1307_GetDay(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DAY));
 8001010:	2203      	movs	r2, #3
 8001012:	21d0      	movs	r1, #208	; 0xd0
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <DS1307_GetDay+0x1c>)
 8001016:	f003 fdc7 	bl	8004ba8 <I2C_Read>
 800101a:	4603      	mov	r3, r0
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f956 	bl	80012ce <DS1307_Bcd2Bin>
 8001022:	4603      	mov	r3, r0
}
 8001024:	4618      	mov	r0, r3
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40005c00 	.word	0x40005c00

0800102c <DS1307_GetDate>:

uint8_t DS1307_GetDate(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DATE));
 8001030:	2204      	movs	r2, #4
 8001032:	21d0      	movs	r1, #208	; 0xd0
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <DS1307_GetDate+0x1c>)
 8001036:	f003 fdb7 	bl	8004ba8 <I2C_Read>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f946 	bl	80012ce <DS1307_Bcd2Bin>
 8001042:	4603      	mov	r3, r0
}
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40005c00 	.word	0x40005c00

0800104c <DS1307_GetMonth>:

uint8_t DS1307_GetMonth(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MONTH));
 8001050:	2205      	movs	r2, #5
 8001052:	21d0      	movs	r1, #208	; 0xd0
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <DS1307_GetMonth+0x1c>)
 8001056:	f003 fda7 	bl	8004ba8 <I2C_Read>
 800105a:	4603      	mov	r3, r0
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f936 	bl	80012ce <DS1307_Bcd2Bin>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40005c00 	.word	0x40005c00

0800106c <DS1307_GetYear>:

uint8_t DS1307_GetYear(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_YEAR));
 8001070:	2206      	movs	r2, #6
 8001072:	21d0      	movs	r1, #208	; 0xd0
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <DS1307_GetYear+0x1c>)
 8001076:	f003 fd97 	bl	8004ba8 <I2C_Read>
 800107a:	4603      	mov	r3, r0
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f926 	bl	80012ce <DS1307_Bcd2Bin>
 8001082:	4603      	mov	r3, r0
}
 8001084:	4618      	mov	r0, r3
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40005c00 	.word	0x40005c00

0800108c <DS1307_SetSeconds>:

void DS1307_SetSeconds(uint8_t seconds) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_SECONDS, DS1307_Bin2Bcd(DS1307_CheckMinMax(seconds, 0, 59)));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	223b      	movs	r2, #59	; 0x3b
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f953 	bl	8001348 <DS1307_CheckMinMax>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f92b 	bl	8001300 <DS1307_Bin2Bcd>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2200      	movs	r2, #0
 80010ae:	21d0      	movs	r1, #208	; 0xd0
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <DS1307_SetSeconds+0x34>)
 80010b2:	f003 fd9d 	bl	8004bf0 <I2C_Write>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40005c00 	.word	0x40005c00

080010c4 <DS1307_SetMinutes>:

void DS1307_SetMinutes(uint8_t minutes) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MINUTES, DS1307_Bin2Bcd(DS1307_CheckMinMax(minutes, 0, 59)));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	223b      	movs	r2, #59	; 0x3b
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f937 	bl	8001348 <DS1307_CheckMinMax>
 80010da:	4603      	mov	r3, r0
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f90f 	bl	8001300 <DS1307_Bin2Bcd>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2201      	movs	r2, #1
 80010e6:	21d0      	movs	r1, #208	; 0xd0
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <DS1307_SetMinutes+0x34>)
 80010ea:	f003 fd81 	bl	8004bf0 <I2C_Write>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40005c00 	.word	0x40005c00

080010fc <DS1307_SetHours>:

void DS1307_SetHours(uint8_t hours) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_HOURS, DS1307_Bin2Bcd(DS1307_CheckMinMax(hours, 0, 23)));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2217      	movs	r2, #23
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f91b 	bl	8001348 <DS1307_CheckMinMax>
 8001112:	4603      	mov	r3, r0
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f8f3 	bl	8001300 <DS1307_Bin2Bcd>
 800111a:	4603      	mov	r3, r0
 800111c:	2202      	movs	r2, #2
 800111e:	21d0      	movs	r1, #208	; 0xd0
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <DS1307_SetHours+0x34>)
 8001122:	f003 fd65 	bl	8004bf0 <I2C_Write>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40005c00 	.word	0x40005c00

08001134 <DS1307_SetDay>:

void DS1307_SetDay(uint8_t day) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DAY, DS1307_Bin2Bcd(DS1307_CheckMinMax(day, 1, 7)));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2207      	movs	r2, #7
 8001142:	2101      	movs	r1, #1
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f8ff 	bl	8001348 <DS1307_CheckMinMax>
 800114a:	4603      	mov	r3, r0
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f8d7 	bl	8001300 <DS1307_Bin2Bcd>
 8001152:	4603      	mov	r3, r0
 8001154:	2203      	movs	r2, #3
 8001156:	21d0      	movs	r1, #208	; 0xd0
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <DS1307_SetDay+0x34>)
 800115a:	f003 fd49 	bl	8004bf0 <I2C_Write>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40005c00 	.word	0x40005c00

0800116c <DS1307_SetDate>:

void DS1307_SetDate(uint8_t date) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DATE, DS1307_Bin2Bcd(DS1307_CheckMinMax(date, 1, 31)));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	221f      	movs	r2, #31
 800117a:	2101      	movs	r1, #1
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f8e3 	bl	8001348 <DS1307_CheckMinMax>
 8001182:	4603      	mov	r3, r0
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f8bb 	bl	8001300 <DS1307_Bin2Bcd>
 800118a:	4603      	mov	r3, r0
 800118c:	2204      	movs	r2, #4
 800118e:	21d0      	movs	r1, #208	; 0xd0
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <DS1307_SetDate+0x34>)
 8001192:	f003 fd2d 	bl	8004bf0 <I2C_Write>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40005c00 	.word	0x40005c00

080011a4 <DS1307_SetMonth>:

void DS1307_SetMonth(uint8_t month) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MONTH, DS1307_Bin2Bcd(DS1307_CheckMinMax(month, 1, 12)));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	220c      	movs	r2, #12
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f8c7 	bl	8001348 <DS1307_CheckMinMax>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f89f 	bl	8001300 <DS1307_Bin2Bcd>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2205      	movs	r2, #5
 80011c6:	21d0      	movs	r1, #208	; 0xd0
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <DS1307_SetMonth+0x34>)
 80011ca:	f003 fd11 	bl	8004bf0 <I2C_Write>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40005c00 	.word	0x40005c00

080011dc <DS1307_SetYear>:

void DS1307_SetYear(uint8_t year) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_YEAR, DS1307_Bin2Bcd(DS1307_CheckMinMax(year, 0, 99)));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2263      	movs	r2, #99	; 0x63
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 f8ab 	bl	8001348 <DS1307_CheckMinMax>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f883 	bl	8001300 <DS1307_Bin2Bcd>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2206      	movs	r2, #6
 80011fe:	21d0      	movs	r1, #208	; 0xd0
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <DS1307_SetYear+0x34>)
 8001202:	f003 fcf5 	bl	8004bf0 <I2C_Write>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40005c00 	.word	0x40005c00

08001214 <DS1307_GetDateTime>:

void DS1307_GetDateTime(DS1307_DateTime_t* time) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	time->seconds = DS1307_GetSeconds();
 800121c:	f7ff fec6 	bl	8000fac <DS1307_GetSeconds>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	701a      	strb	r2, [r3, #0]
	time->minutes = DS1307_GetMinutes();
 8001228:	f7ff fed0 	bl	8000fcc <DS1307_GetMinutes>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	705a      	strb	r2, [r3, #1]
	time->hours = DS1307_GetHours();
 8001234:	f7ff feda 	bl	8000fec <DS1307_GetHours>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	709a      	strb	r2, [r3, #2]
	time->day = DS1307_GetDay();
 8001240:	f7ff fee4 	bl	800100c <DS1307_GetDay>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	70da      	strb	r2, [r3, #3]
	time->date = DS1307_GetDate();
 800124c:	f7ff feee 	bl	800102c <DS1307_GetDate>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	711a      	strb	r2, [r3, #4]
	time->month = DS1307_GetMonth();
 8001258:	f7ff fef8 	bl	800104c <DS1307_GetMonth>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	715a      	strb	r2, [r3, #5]
	time->year = DS1307_GetYear();
 8001264:	f7ff ff02 	bl	800106c <DS1307_GetYear>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	719a      	strb	r2, [r3, #6]
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <DS1307_SetDateTime>:

void DS1307_SetDateTime(DS1307_DateTime_t* time) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	DS1307_SetSeconds(time->seconds);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff01 	bl	800108c <DS1307_SetSeconds>
	DS1307_SetMinutes(time->minutes);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff18 	bl	80010c4 <DS1307_SetMinutes>
	DS1307_SetHours(time->hours);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	789b      	ldrb	r3, [r3, #2]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff2f 	bl	80010fc <DS1307_SetHours>
	DS1307_SetDay(time->day);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	78db      	ldrb	r3, [r3, #3]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff46 	bl	8001134 <DS1307_SetDay>
	DS1307_SetDate(time->date);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <DS1307_SetDate>
	DS1307_SetMonth(time->month);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	795b      	ldrb	r3, [r3, #5]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff74 	bl	80011a4 <DS1307_SetMonth>
	DS1307_SetYear(time->year);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	799b      	ldrb	r3, [r3, #6]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff8b 	bl	80011dc <DS1307_SetYear>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <DS1307_Bcd2Bin>:

void DS1307_DisableOutputPin(void) {
	DS1307_EnableOutputPin(DS1307_OutputFreq_HIGH);
}

uint8_t DS1307_Bcd2Bin(uint8_t bcd) {
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	b2db      	uxtb	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <DS1307_Bin2Bcd>:

uint8_t DS1307_Bin2Bcd(uint8_t bin) {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
	return (bin / 10) << 4 | bin % 10;
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <DS1307_Bin2Bcd+0x44>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	08db      	lsrs	r3, r3, #3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	b258      	sxtb	r0, r3
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <DS1307_Bin2Bcd+0x44>)
 800131e:	fba3 1302 	umull	r1, r3, r3, r2
 8001322:	08d9      	lsrs	r1, r3, #3
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	4303      	orrs	r3, r0
 8001334:	b25b      	sxtb	r3, r3
 8001336:	b2db      	uxtb	r3, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	cccccccd 	.word	0xcccccccd

08001348 <DS1307_CheckMinMax>:

uint8_t DS1307_CheckMinMax(uint8_t val, uint8_t min, uint8_t max) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	460b      	mov	r3, r1
 8001354:	71bb      	strb	r3, [r7, #6]
 8001356:	4613      	mov	r3, r2
 8001358:	717b      	strb	r3, [r7, #5]
	if(val < min)
 800135a:	79fa      	ldrb	r2, [r7, #7]
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	429a      	cmp	r2, r3
 8001360:	d201      	bcs.n	8001366 <DS1307_CheckMinMax+0x1e>
		return min;
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	e006      	b.n	8001374 <DS1307_CheckMinMax+0x2c>
	else if (val > max)
 8001366:	79fa      	ldrb	r2, [r7, #7]
 8001368:	797b      	ldrb	r3, [r7, #5]
 800136a:	429a      	cmp	r2, r3
 800136c:	d901      	bls.n	8001372 <DS1307_CheckMinMax+0x2a>
		return max;
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	e000      	b.n	8001374 <DS1307_CheckMinMax+0x2c>
	else return val;
 8001372:	79fb      	ldrb	r3, [r7, #7]
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <KEYPAD_Init>:

/* Private variables */
KEYPAD_Type_t KEYPAD_INT_KeypadType;
static KEYPAD_Button_t KeypadStatus = KEYPAD_NOPRESSED;

void KEYPAD_Init(KEYPAD_Type_t type) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	KEYPAD_INT_KeypadType = type;
 800138a:	4a32      	ldr	r2, [pc, #200]	; (8001454 <KEYPAD_Init+0xd4>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	7013      	strb	r3, [r2, #0]
	GPIO_Handle_t GpioR_Out, GpioC_In;

	/* Rows are output */
	/* Row 1 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_1_PORT;
 8001390:	4b31      	ldr	r3, [pc, #196]	; (8001458 <KEYPAD_Init+0xd8>)
 8001392:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_1_PIN;
 8001394:	230b      	movs	r3, #11
 8001396:	763b      	strb	r3, [r7, #24]
	GpioR_Out.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001398:	2301      	movs	r3, #1
 800139a:	767b      	strb	r3, [r7, #25]
	GpioR_Out.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 800139c:	2301      	movs	r3, #1
 800139e:	76bb      	strb	r3, [r7, #26]
	GpioR_Out.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80013a0:	2300      	movs	r3, #0
 80013a2:	773b      	strb	r3, [r7, #28]
	GpioR_Out.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80013a4:	2300      	movs	r3, #0
 80013a6:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GpioR_Out);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 f911 	bl	80045d4 <GPIO_Init>

	/* Row 2 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_2_PORT;
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <KEYPAD_Init+0xdc>)
 80013b4:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_2_PIN;
 80013b6:	2300      	movs	r3, #0
 80013b8:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 f908 	bl	80045d4 <GPIO_Init>

	/* Row 3 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_3_PORT;
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <KEYPAD_Init+0xdc>)
 80013c6:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_3_PIN;
 80013c8:	2302      	movs	r3, #2
 80013ca:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 f8ff 	bl	80045d4 <GPIO_Init>

	/* Row 4 */
	if (type == KEYPAD_Type_Large) {
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d108      	bne.n	80013ee <KEYPAD_Init+0x6e>
		GpioR_Out.pGPIOx = KEYPAD_ROW_4_PORT;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <KEYPAD_Init+0xdc>)
 80013de:	617b      	str	r3, [r7, #20]
		GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_4_PIN;
 80013e0:	2304      	movs	r3, #4
 80013e2:	763b      	strb	r3, [r7, #24]
		GPIO_Init(&GpioR_Out);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 f8f3 	bl	80045d4 <GPIO_Init>
	}


	/* Columns are inputs */
	/* Column 1 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_1_PORT;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <KEYPAD_Init+0xdc>)
 80013f0:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_1_PIN;
 80013f2:	2306      	movs	r3, #6
 80013f4:	733b      	strb	r3, [r7, #12]
	GpioC_In.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80013f6:	2300      	movs	r3, #0
 80013f8:	737b      	strb	r3, [r7, #13]
	GpioC_In.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73bb      	strb	r3, [r7, #14]
	GpioC_In.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80013fe:	2300      	movs	r3, #0
 8001400:	743b      	strb	r3, [r7, #16]
	GpioC_In.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&GpioC_In);
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4618      	mov	r0, r3
 800140c:	f003 f8e2 	bl	80045d4 <GPIO_Init>

	/* Column 2 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_2_PORT;
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <KEYPAD_Init+0xe0>)
 8001412:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 8001414:	2303      	movs	r3, #3
 8001416:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	4618      	mov	r0, r3
 800141e:	f003 f8d9 	bl	80045d4 <GPIO_Init>

	/* Column 3 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_3_PORT;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <KEYPAD_Init+0xe0>)
 8001424:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_3_PIN;
 8001426:	2305      	movs	r3, #5
 8001428:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f8d0 	bl	80045d4 <GPIO_Init>

	/* Column 4 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_4_PORT;
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <KEYPAD_Init+0xe0>)
 8001436:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_4_PIN;
 8001438:	2307      	movs	r3, #7
 800143a:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	4618      	mov	r0, r3
 8001442:	f003 f8c7 	bl	80045d4 <GPIO_Init>

	/* All rows high */
	KEYPAD_INT_SetRow(0);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f818 	bl	800147c <KEYPAD_INT_SetRow>
}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2001357c 	.word	0x2001357c
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40020400 	.word	0x40020400

08001464 <KEYPAD_Read>:

KEYPAD_Button_t KEYPAD_Read(void) {
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	return KeypadStatus;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <KEYPAD_Read+0x14>)
 800146a:	781b      	ldrb	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000010 	.word	0x20000010

0800147c <KEYPAD_INT_SetRow>:

/* Private */
void KEYPAD_INT_SetRow(uint8_t row) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_ROW_1_HIGH;
 8001486:	2201      	movs	r2, #1
 8001488:	210b      	movs	r1, #11
 800148a:	481d      	ldr	r0, [pc, #116]	; (8001500 <KEYPAD_INT_SetRow+0x84>)
 800148c:	f003 fa54 	bl	8004938 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_2_HIGH;
 8001490:	2201      	movs	r2, #1
 8001492:	2100      	movs	r1, #0
 8001494:	481b      	ldr	r0, [pc, #108]	; (8001504 <KEYPAD_INT_SetRow+0x88>)
 8001496:	f003 fa4f 	bl	8004938 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_3_HIGH;
 800149a:	2201      	movs	r2, #1
 800149c:	2102      	movs	r1, #2
 800149e:	4819      	ldr	r0, [pc, #100]	; (8001504 <KEYPAD_INT_SetRow+0x88>)
 80014a0:	f003 fa4a 	bl	8004938 <GPIO_WriteToOutputPin>
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large)
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <KEYPAD_INT_SetRow+0x8c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d104      	bne.n	80014b6 <KEYPAD_INT_SetRow+0x3a>
		KEYPAD_ROW_4_HIGH;
 80014ac:	2201      	movs	r2, #1
 80014ae:	2104      	movs	r1, #4
 80014b0:	4814      	ldr	r0, [pc, #80]	; (8001504 <KEYPAD_INT_SetRow+0x88>)
 80014b2:	f003 fa41 	bl	8004938 <GPIO_WriteToOutputPin>

	/* Set row low */
	if (row == 1)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d104      	bne.n	80014c6 <KEYPAD_INT_SetRow+0x4a>
		KEYPAD_ROW_1_LOW;
 80014bc:	2200      	movs	r2, #0
 80014be:	210b      	movs	r1, #11
 80014c0:	480f      	ldr	r0, [pc, #60]	; (8001500 <KEYPAD_INT_SetRow+0x84>)
 80014c2:	f003 fa39 	bl	8004938 <GPIO_WriteToOutputPin>
	if (row == 2)
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d104      	bne.n	80014d6 <KEYPAD_INT_SetRow+0x5a>
		KEYPAD_ROW_2_LOW;
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <KEYPAD_INT_SetRow+0x88>)
 80014d2:	f003 fa31 	bl	8004938 <GPIO_WriteToOutputPin>
	if (row == 3)
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d104      	bne.n	80014e6 <KEYPAD_INT_SetRow+0x6a>
		KEYPAD_ROW_3_LOW;
 80014dc:	2200      	movs	r2, #0
 80014de:	2102      	movs	r1, #2
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <KEYPAD_INT_SetRow+0x88>)
 80014e2:	f003 fa29 	bl	8004938 <GPIO_WriteToOutputPin>
	if (row == 4)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d104      	bne.n	80014f6 <KEYPAD_INT_SetRow+0x7a>
		KEYPAD_ROW_4_LOW;
 80014ec:	2200      	movs	r2, #0
 80014ee:	2104      	movs	r1, #4
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <KEYPAD_INT_SetRow+0x88>)
 80014f2:	f003 fa21 	bl	8004938 <GPIO_WriteToOutputPin>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020800 	.word	0x40020800
 8001504:	40020c00 	.word	0x40020c00
 8001508:	2001357c 	.word	0x2001357c

0800150c <KEYPAD_INT_CheckColumn>:

uint8_t KEYPAD_INT_CheckColumn(uint8_t row) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	/* Read columns */

	/* Scan column 1 */
	if (KEYPAD_COLUMN_1_CHECK) {
 8001516:	2106      	movs	r1, #6
 8001518:	481f      	ldr	r0, [pc, #124]	; (8001598 <KEYPAD_INT_CheckColumn+0x8c>)
 800151a:	f003 f9f7 	bl	800490c <GPIO_ReadFromInputPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <KEYPAD_INT_CheckColumn+0x24>
		return KEYPAD_INT_Buttons[row - 1][0];
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	3b01      	subs	r3, #1
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <KEYPAD_INT_CheckColumn+0x90>)
 800152a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800152e:	e02e      	b.n	800158e <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 2 */
	if (KEYPAD_COLUMN_2_CHECK) {
 8001530:	2103      	movs	r1, #3
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <KEYPAD_INT_CheckColumn+0x94>)
 8001534:	f003 f9ea 	bl	800490c <GPIO_ReadFromInputPin>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <KEYPAD_INT_CheckColumn+0x40>
		return KEYPAD_INT_Buttons[row - 1][1];
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	3b01      	subs	r3, #1
 8001542:	4a16      	ldr	r2, [pc, #88]	; (800159c <KEYPAD_INT_CheckColumn+0x90>)
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	e020      	b.n	800158e <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 3 */
	if (KEYPAD_COLUMN_3_CHECK) {
 800154c:	2105      	movs	r1, #5
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <KEYPAD_INT_CheckColumn+0x94>)
 8001550:	f003 f9dc 	bl	800490c <GPIO_ReadFromInputPin>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <KEYPAD_INT_CheckColumn+0x5c>
		return KEYPAD_INT_Buttons[row - 1][2];
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	3b01      	subs	r3, #1
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <KEYPAD_INT_CheckColumn+0x90>)
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	789b      	ldrb	r3, [r3, #2]
 8001566:	e012      	b.n	800158e <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 4 */
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large && KEYPAD_COLUMN_4_CHECK) {
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <KEYPAD_INT_CheckColumn+0x98>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10d      	bne.n	800158c <KEYPAD_INT_CheckColumn+0x80>
 8001570:	2107      	movs	r1, #7
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <KEYPAD_INT_CheckColumn+0x94>)
 8001574:	f003 f9ca 	bl	800490c <GPIO_ReadFromInputPin>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <KEYPAD_INT_CheckColumn+0x80>
		return KEYPAD_INT_Buttons[row - 1][3];
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <KEYPAD_INT_CheckColumn+0x90>)
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	78db      	ldrb	r3, [r3, #3]
 800158a:	e000      	b.n	800158e <KEYPAD_INT_CheckColumn+0x82>
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 800158c:	23ff      	movs	r3, #255	; 0xff
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40020c00 	.word	0x40020c00
 800159c:	20000000 	.word	0x20000000
 80015a0:	40020400 	.word	0x40020400
 80015a4:	2001357c 	.word	0x2001357c

080015a8 <KEYPAD_INT_Read>:

uint8_t KEYPAD_INT_Read(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	KEYPAD_INT_SetRow(1);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff ff64 	bl	800147c <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(1);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7ff ffa9 	bl	800150c <KEYPAD_INT_CheckColumn>
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2bff      	cmp	r3, #255	; 0xff
 80015c2:	d001      	beq.n	80015c8 <KEYPAD_INT_Read+0x20>
		return check;
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	e02b      	b.n	8001620 <KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	KEYPAD_INT_SetRow(2);
 80015c8:	2002      	movs	r0, #2
 80015ca:	f7ff ff57 	bl	800147c <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(2);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff ff9c 	bl	800150c <KEYPAD_INT_CheckColumn>
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2bff      	cmp	r3, #255	; 0xff
 80015dc:	d001      	beq.n	80015e2 <KEYPAD_INT_Read+0x3a>
		return check;
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	e01e      	b.n	8001620 <KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	KEYPAD_INT_SetRow(3);
 80015e2:	2003      	movs	r0, #3
 80015e4:	f7ff ff4a 	bl	800147c <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(3);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f7ff ff8f 	bl	800150c <KEYPAD_INT_CheckColumn>
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2bff      	cmp	r3, #255	; 0xff
 80015f6:	d001      	beq.n	80015fc <KEYPAD_INT_Read+0x54>
		return check;
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	e011      	b.n	8001620 <KEYPAD_INT_Read+0x78>
	}

	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large) {
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <KEYPAD_INT_Read+0x80>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10c      	bne.n	800161e <KEYPAD_INT_Read+0x76>
		/* Set row 4 to LOW */
		KEYPAD_INT_SetRow(4);
 8001604:	2004      	movs	r0, #4
 8001606:	f7ff ff39 	bl	800147c <KEYPAD_INT_SetRow>
		/* Check columns */
		check = KEYPAD_INT_CheckColumn(4);
 800160a:	2004      	movs	r0, #4
 800160c:	f7ff ff7e 	bl	800150c <KEYPAD_INT_CheckColumn>
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NOPRESSED) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2bff      	cmp	r3, #255	; 0xff
 8001618:	d001      	beq.n	800161e <KEYPAD_INT_Read+0x76>
			return check;
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	e000      	b.n	8001620 <KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 800161e:	23ff      	movs	r3, #255	; 0xff
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2001357c 	.word	0x2001357c

0800162c <KEYPAD_Hold_Button>:

KEYPAD_Button_t KEYPAD_Hold_Button(KEYPAD_Button_t button) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	return button | 0x80;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800163c:	b2db      	uxtb	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <KEYPAD_Update>:

void KEYPAD_Update(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	KeypadStatus = (KEYPAD_Button_t) KEYPAD_INT_Read();
 8001650:	f7ff ffaa 	bl	80015a8 <KEYPAD_INT_Read>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	4b01      	ldr	r3, [pc, #4]	; (8001660 <KEYPAD_Update+0x14>)
 800165a:	701a      	strb	r2, [r3, #0]
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000010 	.word	0x20000010

08001664 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 800166e:	2101      	movs	r1, #1
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <LCD5110_send+0x40>)
 8001672:	f003 fce9 	bl	8005048 <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2101      	movs	r1, #1
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <LCD5110_send+0x44>)
 800167c:	f003 f95c 	bl	8004938 <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <LCD5110_send+0x40>)
 8001686:	f003 fcb4 	bl	8004ff2 <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 800168a:	2201      	movs	r2, #1
 800168c:	2101      	movs	r1, #1
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <LCD5110_send+0x44>)
 8001690:	f003 f952 	bl	8004938 <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 8001694:	2100      	movs	r1, #0
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <LCD5110_send+0x40>)
 8001698:	f003 fcd6 	bl	8005048 <SPI_PeripheralControl>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013000 	.word	0x40013000
 80016a8:	40020400 	.word	0x40020400

080016ac <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	460a      	mov	r2, r1
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	4613      	mov	r3, r2
 80016ba:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d002      	beq.n	80016c8 <LCD5110_Pin+0x1c>
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d00f      	beq.n	80016e6 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 80016c6:	e01d      	b.n	8001704 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 80016c8:	79bb      	ldrb	r3, [r7, #6]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2105      	movs	r1, #5
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <LCD5110_Pin+0x60>)
 80016d4:	f003 f930 	bl	8004938 <GPIO_WriteToOutputPin>
			break;
 80016d8:	e014      	b.n	8001704 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2105      	movs	r1, #5
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <LCD5110_Pin+0x60>)
 80016e0:	f003 f92a 	bl	8004938 <GPIO_WriteToOutputPin>
			break;
 80016e4:	e00e      	b.n	8001704 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2107      	movs	r1, #7
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <LCD5110_Pin+0x64>)
 80016f2:	f003 f921 	bl	8004938 <GPIO_WriteToOutputPin>
			break;
 80016f6:	e004      	b.n	8001702 <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2107      	movs	r1, #7
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <LCD5110_Pin+0x64>)
 80016fe:	f003 f91b 	bl	8004938 <GPIO_WriteToOutputPin>
			break;
 8001702:	bf00      	nop
	}
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40020800 	.word	0x40020800
 8001710:	40021000 	.word	0x40021000

08001714 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e002      	b.n	8001728 <LCD5110_Delay+0x14>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3301      	adds	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f8      	bhi.n	8001722 <LCD5110_Delay+0xe>
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b08e      	sub	sp, #56	; 0x38
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 800174a:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <LCD5110_Init+0x138>)
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800174e:	2302      	movs	r3, #2
 8001750:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8001754:	2305      	movs	r3, #5
 8001756:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001760:	2300      	movs	r3, #0
 8001762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001766:	2302      	movs	r3, #2
 8001768:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800176c:	2305      	movs	r3, #5
 800176e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4618      	mov	r0, r3
 8001778:	f002 ff2c 	bl	80045d4 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800177c:	2307      	movs	r3, #7
 800177e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001786:	4618      	mov	r0, r3
 8001788:	f002 ff24 	bl	80045d4 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 800178c:	4b3b      	ldr	r3, [pc, #236]	; (800187c <LCD5110_Init+0x13c>)
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 8001790:	2301      	movs	r3, #1
 8001792:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 80017a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 ff11 	bl	80045d4 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <LCD5110_Init+0x140>)
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 80017b6:	2305      	movs	r3, #5
 80017b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80017bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 ff07 	bl	80045d4 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 80017c6:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <LCD5110_Init+0x144>)
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 80017ca:	2307      	movs	r3, #7
 80017cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80017d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fefd 	bl	80045d4 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <LCD5110_Init+0x148>)
 80017dc:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 80017de:	2301      	movs	r3, #1
 80017e0:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 80017e2:	2301      	movs	r3, #1
 80017e4:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 80017e6:	2302      	movs	r3, #2
 80017e8:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 80017ea:	2300      	movs	r3, #0
 80017ec:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 80017ee:	2300      	movs	r3, #0
 80017f0:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 80017f2:	2300      	movs	r3, #0
 80017f4:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 80017f6:	2300      	movs	r3, #0
 80017f8:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fb9c 	bl	8004f3c <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 8001804:	2101      	movs	r1, #1
 8001806:	4820      	ldr	r0, [pc, #128]	; (8001888 <LCD5110_Init+0x148>)
 8001808:	f003 fc3a 	bl	8005080 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 800180c:	2100      	movs	r1, #0
 800180e:	2002      	movs	r0, #2
 8001810:	f7ff ff4c 	bl	80016ac <LCD5110_Pin>
	LCD5110_Delay(10000);
 8001814:	f242 7010 	movw	r0, #10000	; 0x2710
 8001818:	f7ff ff7c 	bl	8001714 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 800181c:	2101      	movs	r1, #1
 800181e:	2002      	movs	r0, #2
 8001820:	f7ff ff44 	bl	80016ac <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 8001824:	2121      	movs	r1, #33	; 0x21
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f830 	bl	800188c <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 800182c:	2114      	movs	r1, #20
 800182e:	2000      	movs	r0, #0
 8001830:	f000 f82c 	bl	800188c <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	da01      	bge.n	8001840 <LCD5110_Init+0x100>
		contrast = 0x7F;
 800183c:	237f      	movs	r3, #127	; 0x7f
 800183e:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4619      	mov	r1, r3
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f81e 	bl	800188c <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 8001850:	2120      	movs	r1, #32
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f81a 	bl	800188c <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001858:	210c      	movs	r1, #12
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f816 	bl	800188c <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 8001860:	f000 f8b8 	bl	80019d4 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001864:	210c      	movs	r1, #12
 8001866:	2000      	movs	r0, #0
 8001868:	f000 f810 	bl	800188c <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 800186c:	f000 f88c 	bl	8001988 <LCD5110_Clear>
}
 8001870:	bf00      	nop
 8001872:	3738      	adds	r7, #56	; 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40020000 	.word	0x40020000
 800187c:	40020400 	.word	0x40020400
 8001880:	40020800 	.word	0x40020800
 8001884:	40021000 	.word	0x40021000
 8001888:	40013000 	.word	0x40013000

0800188c <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	4613      	mov	r3, r2
 800189a:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <LCD5110_Write+0x24>
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d109      	bne.n	80018ba <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 80018a6:	2101      	movs	r1, #1
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff feff 	bl	80016ac <LCD5110_Pin>
			break;
 80018ae:	e005      	b.n	80018bc <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 80018b0:	2100      	movs	r1, #0
 80018b2:	2001      	movs	r0, #1
 80018b4:	f7ff fefa 	bl	80016ac <LCD5110_Pin>
			break;
 80018b8:	e000      	b.n	80018bc <LCD5110_Write+0x30>
		default: break;
 80018ba:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fed0 	bl	8001664 <LCD5110_send>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	460b      	mov	r3, r1
 80018d8:	71bb      	strb	r3, [r7, #6]
 80018da:	4613      	mov	r3, r2
 80018dc:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b53      	cmp	r3, #83	; 0x53
 80018e2:	d849      	bhi.n	8001978 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 80018e4:	79bb      	ldrb	r3, [r7, #6]
 80018e6:	2b2f      	cmp	r3, #47	; 0x2f
 80018e8:	d848      	bhi.n	800197c <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 80018ea:	797b      	ldrb	r3, [r7, #5]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01d      	beq.n	800192c <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	08db      	lsrs	r3, r3, #3
 80018f6:	b2d8      	uxtb	r0, r3
 80018f8:	4601      	mov	r1, r0
 80018fa:	2354      	movs	r3, #84	; 0x54
 80018fc:	fb03 f301 	mul.w	r3, r3, r1
 8001900:	4413      	add	r3, r2
 8001902:	4a20      	ldr	r2, [pc, #128]	; (8001984 <LCD5110_DrawPixel+0xb8>)
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	b25a      	sxtb	r2, r3
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	b25b      	sxtb	r3, r3
 8001916:	4313      	orrs	r3, r2
 8001918:	b259      	sxtb	r1, r3
 800191a:	79fa      	ldrb	r2, [r7, #7]
 800191c:	2354      	movs	r3, #84	; 0x54
 800191e:	fb03 f300 	mul.w	r3, r3, r0
 8001922:	4413      	add	r3, r2
 8001924:	b2c9      	uxtb	r1, r1
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <LCD5110_DrawPixel+0xb8>)
 8001928:	54d1      	strb	r1, [r2, r3]
 800192a:	e01e      	b.n	800196a <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 800192c:	79fa      	ldrb	r2, [r7, #7]
 800192e:	79bb      	ldrb	r3, [r7, #6]
 8001930:	08db      	lsrs	r3, r3, #3
 8001932:	b2d8      	uxtb	r0, r3
 8001934:	4601      	mov	r1, r0
 8001936:	2354      	movs	r3, #84	; 0x54
 8001938:	fb03 f301 	mul.w	r3, r3, r1
 800193c:	4413      	add	r3, r2
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <LCD5110_DrawPixel+0xb8>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	b25a      	sxtb	r2, r3
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	b25b      	sxtb	r3, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	b25b      	sxtb	r3, r3
 8001956:	4013      	ands	r3, r2
 8001958:	b259      	sxtb	r1, r3
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	2354      	movs	r3, #84	; 0x54
 800195e:	fb03 f300 	mul.w	r3, r3, r0
 8001962:	4413      	add	r3, r2
 8001964:	b2c9      	uxtb	r1, r1
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <LCD5110_DrawPixel+0xb8>)
 8001968:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 800196a:	79bb      	ldrb	r3, [r7, #6]
 800196c:	79fa      	ldrb	r2, [r7, #7]
 800196e:	79b9      	ldrb	r1, [r7, #6]
 8001970:	79f8      	ldrb	r0, [r7, #7]
 8001972:	f000 f89d 	bl	8001ab0 <LCD5110_UpdateArea>
 8001976:	e002      	b.n	800197e <LCD5110_DrawPixel+0xb2>
		return;
 8001978:	bf00      	nop
 800197a:	e000      	b.n	800197e <LCD5110_DrawPixel+0xb2>
		return;
 800197c:	bf00      	nop
}
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20013584 	.word	0x20013584

08001988 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 800198e:	f000 f821 	bl	80019d4 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	e007      	b.n	80019a8 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <LCD5110_Clear+0x48>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3301      	adds	r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80019ae:	d3f3      	bcc.n	8001998 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 80019b0:	2100      	movs	r1, #0
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 f8b8 	bl	8001b28 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 80019b8:	232f      	movs	r3, #47	; 0x2f
 80019ba:	2253      	movs	r2, #83	; 0x53
 80019bc:	2100      	movs	r1, #0
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f876 	bl	8001ab0 <LCD5110_UpdateArea>
	LCD5110_Refresh();
 80019c4:	f000 f812 	bl	80019ec <LCD5110_Refresh>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20013584 	.word	0x20013584

080019d4 <LCD5110_Home>:

void LCD5110_Home(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff ff56 	bl	800188c <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 80019e0:	2140      	movs	r1, #64	; 0x40
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff ff52 	bl	800188c <LCD5110_Write>
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	e03b      	b.n	8001a70 <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <LCD5110_Refresh+0xb0>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	3301      	adds	r3, #1
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dc2f      	bgt.n	8001a68 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4a24      	ldr	r2, [pc, #144]	; (8001aa0 <LCD5110_Refresh+0xb4>)
 8001a0e:	7812      	ldrb	r2, [r2, #0]
 8001a10:	4293      	cmp	r3, r2
 8001a12:	dc31      	bgt.n	8001a78 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff ff34 	bl	800188c <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <LCD5110_Refresh+0xb8>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff ff2b 	bl	800188c <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <LCD5110_Refresh+0xb8>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	71bb      	strb	r3, [r7, #6]
 8001a3c:	e00e      	b.n	8001a5c <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2254      	movs	r2, #84	; 0x54
 8001a42:	fb02 f203 	mul.w	r2, r2, r3
 8001a46:	79bb      	ldrb	r3, [r7, #6]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <LCD5110_Refresh+0xbc>)
 8001a4c:	5cd3      	ldrb	r3, [r2, r3]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff ff1b 	bl	800188c <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	71bb      	strb	r3, [r7, #6]
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <LCD5110_Refresh+0xc0>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	79ba      	ldrb	r2, [r7, #6]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d9eb      	bls.n	8001a3e <LCD5110_Refresh+0x52>
 8001a66:	e000      	b.n	8001a6a <LCD5110_Refresh+0x7e>
			continue;
 8001a68:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d9c0      	bls.n	80019f8 <LCD5110_Refresh+0xc>
 8001a76:	e000      	b.n	8001a7a <LCD5110_Refresh+0x8e>
			break;
 8001a78:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <LCD5110_Refresh+0xb8>)
 8001a7c:	2253      	movs	r2, #83	; 0x53
 8001a7e:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <LCD5110_Refresh+0xc0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <LCD5110_Refresh+0xb0>)
 8001a88:	222f      	movs	r2, #47	; 0x2f
 8001a8a:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <LCD5110_Refresh+0xb4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000226 	.word	0x20000226
 8001aa0:	20000227 	.word	0x20000227
 8001aa4:	20000224 	.word	0x20000224
 8001aa8:	20013584 	.word	0x20013584
 8001aac:	20000225 	.word	0x20000225

08001ab0 <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8001ab0:	b490      	push	{r4, r7}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4623      	mov	r3, r4
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71bb      	strb	r3, [r7, #6]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	717b      	strb	r3, [r7, #5]
 8001aca:	4613      	mov	r3, r2
 8001acc:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <LCD5110_UpdateArea+0x68>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d202      	bcs.n	8001ade <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <LCD5110_UpdateArea+0x68>)
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <LCD5110_UpdateArea+0x6c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	797a      	ldrb	r2, [r7, #5]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d902      	bls.n	8001aee <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <LCD5110_UpdateArea+0x6c>)
 8001aea:	797b      	ldrb	r3, [r7, #5]
 8001aec:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <LCD5110_UpdateArea+0x70>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	79ba      	ldrb	r2, [r7, #6]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d202      	bcs.n	8001afe <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8001af8:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <LCD5110_UpdateArea+0x70>)
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <LCD5110_UpdateArea+0x74>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	793a      	ldrb	r2, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d902      	bls.n	8001b0e <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <LCD5110_UpdateArea+0x74>)
 8001b0a:	793b      	ldrb	r3, [r7, #4]
 8001b0c:	7013      	strb	r3, [r2, #0]
	}
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc90      	pop	{r4, r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000224 	.word	0x20000224
 8001b1c:	20000225 	.word	0x20000225
 8001b20:	20000226 	.word	0x20000226
 8001b24:	20000227 	.word	0x20000227

08001b28 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460a      	mov	r2, r1
 8001b32:	71fb      	strb	r3, [r7, #7]
 8001b34:	4613      	mov	r3, r2
 8001b36:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8001b38:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <LCD5110_GotoXY+0x28>)
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <LCD5110_GotoXY+0x2c>)
 8001b40:	79bb      	ldrb	r3, [r7, #6]
 8001b42:	7013      	strb	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20013580 	.word	0x20013580
 8001b54:	20013581 	.word	0x20013581

08001b58 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	460b      	mov	r3, r1
 8001b64:	71bb      	strb	r3, [r7, #6]
 8001b66:	4613      	mov	r3, r2
 8001b68:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8001b6a:	797b      	ldrb	r3, [r7, #5]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8001b70:	2304      	movs	r3, #4
 8001b72:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8001b74:	2306      	movs	r3, #6
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e003      	b.n	8001b82 <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 8001b7e:	2308      	movs	r3, #8
 8001b80:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8001b82:	4b46      	ldr	r3, [pc, #280]	; (8001c9c <LCD5110_Putc+0x144>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	7bbb      	ldrb	r3, [r7, #14]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2b54      	cmp	r3, #84	; 0x54
 8001b8e:	dd09      	ble.n	8001ba4 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8001b90:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <LCD5110_Putc+0x148>)
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	4413      	add	r3, r2
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <LCD5110_Putc+0x148>)
 8001b9c:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <LCD5110_Putc+0x144>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	737b      	strb	r3, [r7, #13]
 8001ba8:	e068      	b.n	8001c7c <LCD5110_Putc+0x124>
		if (c < 32) {
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b1f      	cmp	r3, #31
 8001bae:	d91c      	bls.n	8001bea <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8001bb0:	797b      	ldrb	r3, [r7, #5]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f1a3 0220 	sub.w	r2, r3, #32
 8001bbc:	7b79      	ldrb	r1, [r7, #13]
 8001bbe:	4839      	ldr	r0, [pc, #228]	; (8001ca4 <LCD5110_Putc+0x14c>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4403      	add	r3, r0
 8001bc8:	440b      	add	r3, r1
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	733b      	strb	r3, [r7, #12]
 8001bce:	e00c      	b.n	8001bea <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f1a3 0220 	sub.w	r2, r3, #32
 8001bd6:	7b79      	ldrb	r1, [r7, #13]
 8001bd8:	4833      	ldr	r0, [pc, #204]	; (8001ca8 <LCD5110_Putc+0x150>)
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4403      	add	r3, r0
 8001be4:	440b      	add	r3, r1
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8001bea:	7b3b      	ldrb	r3, [r7, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <LCD5110_Putc+0xa4>
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <LCD5110_Putc+0xa4>
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d13b      	bne.n	8001c74 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	72fb      	strb	r3, [r7, #11]
 8001c00:	e02d      	b.n	8001c5e <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 8001c02:	79bb      	ldrb	r3, [r7, #6]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d112      	bne.n	8001c2e <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <LCD5110_Putc+0x144>)
 8001c0a:	7818      	ldrb	r0, [r3, #0]
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <LCD5110_Putc+0x148>)
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	7afb      	ldrb	r3, [r7, #11]
 8001c12:	4413      	add	r3, r2
 8001c14:	b2d9      	uxtb	r1, r3
 8001c16:	7b3a      	ldrb	r2, [r7, #12]
 8001c18:	7afb      	ldrb	r3, [r7, #11]
 8001c1a:	fa42 f303 	asr.w	r3, r2, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	f7ff fe50 	bl	80018cc <LCD5110_DrawPixel>
 8001c2c:	e014      	b.n	8001c58 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <LCD5110_Putc+0x144>)
 8001c30:	7818      	ldrb	r0, [r3, #0]
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <LCD5110_Putc+0x148>)
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	7afb      	ldrb	r3, [r7, #11]
 8001c38:	4413      	add	r3, r2
 8001c3a:	b2d9      	uxtb	r1, r3
 8001c3c:	7b3a      	ldrb	r2, [r7, #12]
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
 8001c40:	fa42 f303 	asr.w	r3, r2, r3
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	f7ff fe3a 	bl	80018cc <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	72fb      	strb	r3, [r7, #11]
 8001c5e:	7afa      	ldrb	r2, [r7, #11]
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3cd      	bcc.n	8001c02 <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <LCD5110_Putc+0x144>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <LCD5110_Putc+0x144>)
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	e000      	b.n	8001c76 <LCD5110_Putc+0x11e>
			continue;
 8001c74:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8001c76:	7b7b      	ldrb	r3, [r7, #13]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	737b      	strb	r3, [r7, #13]
 8001c7c:	7b7a      	ldrb	r2, [r7, #13]
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	429a      	cmp	r2, r3
 8001c84:	db91      	blt.n	8001baa <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <LCD5110_Putc+0x144>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <LCD5110_Putc+0x144>)
 8001c90:	701a      	strb	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20013580 	.word	0x20013580
 8001ca0:	20013581 	.word	0x20013581
 8001ca4:	0800ba4c 	.word	0x0800ba4c
 8001ca8:	0800b804 	.word	0x0800b804

08001cac <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8001cbc:	e008      	b.n	8001cd0 <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	78ba      	ldrb	r2, [r7, #2]
 8001cc8:	78f9      	ldrb	r1, [r7, #3]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff44 	bl	8001b58 <LCD5110_Putc>
	while (*c) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f2      	bne.n	8001cbe <LCD5110_Puts+0x12>
	}
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f103 0208 	add.w	r2, r3, #8
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cfa:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f103 0208 	add.w	r2, r3, #8
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f103 0208 	add.w	r2, r3, #8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	601a      	str	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d9a:	d103      	bne.n	8001da4 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e00c      	b.n	8001dbe <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3308      	adds	r3, #8
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e002      	b.n	8001db2 <vListInsert+0x2e>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d2f6      	bcs.n	8001dac <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6892      	ldr	r2, [r2, #8]
 8001e0c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6852      	ldr	r2, [r2, #4]
 8001e16:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d103      	bne.n	8001e2a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10a      	bne.n	8001e74 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e62:	f383 8811 	msr	BASEPRI, r3
 8001e66:	f3bf 8f6f 	isb	sy
 8001e6a:	f3bf 8f4f 	dsb	sy
 8001e6e:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001e70:	bf00      	nop
 8001e72:	e7fe      	b.n	8001e72 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001e74:	f002 f800 	bl	8003e78 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	68f9      	ldr	r1, [r7, #12]
 8001e82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	441a      	add	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	68f9      	ldr	r1, [r7, #12]
 8001ea8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	441a      	add	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	22ff      	movs	r2, #255	; 0xff
 8001eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	22ff      	movs	r2, #255	; 0xff
 8001ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00f      	beq.n	8001ef2 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3310      	adds	r3, #16
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f001 f8e0 	bl	800309c <xTaskRemoveFromEventList>
 8001edc:	e009      	b.n	8001ef2 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3310      	adds	r3, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fefd 	bl	8001ce2 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3324      	adds	r3, #36	; 0x24
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fef8 	bl	8001ce2 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001ef2:	f001 fff1 	bl	8003ed8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10a      	bne.n	8001f2a <xQueueGenericCreate+0x2a>
        __asm volatile
 8001f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f18:	f383 8811 	msr	BASEPRI, r3
 8001f1c:	f3bf 8f6f 	isb	sy
 8001f20:	f3bf 8f4f 	dsb	sy
 8001f24:	61bb      	str	r3, [r7, #24]
    }
 8001f26:	bf00      	nop
 8001f28:	e7fe      	b.n	8001f28 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <xQueueGenericCreate+0x48>
 8001f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d101      	bne.n	8001f4c <xQueueGenericCreate+0x4c>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <xQueueGenericCreate+0x4e>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10a      	bne.n	8001f68 <xQueueGenericCreate+0x68>
        __asm volatile
 8001f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f56:	f383 8811 	msr	BASEPRI, r3
 8001f5a:	f3bf 8f6f 	isb	sy
 8001f5e:	f3bf 8f4f 	dsb	sy
 8001f62:	617b      	str	r3, [r7, #20]
    }
 8001f64:	bf00      	nop
 8001f66:	e7fe      	b.n	8001f66 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001f6e:	d90a      	bls.n	8001f86 <xQueueGenericCreate+0x86>
        __asm volatile
 8001f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f74:	f383 8811 	msr	BASEPRI, r3
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	613b      	str	r3, [r7, #16]
    }
 8001f82:	bf00      	nop
 8001f84:	e7fe      	b.n	8001f84 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	3350      	adds	r3, #80	; 0x50
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 f89e 	bl	80040cc <pvPortMalloc>
 8001f90:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	3350      	adds	r3, #80	; 0x50
 8001fa0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f805 	bl	8001fbe <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
    }
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e002      	b.n	8001fe0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fec:	2101      	movs	r1, #1
 8001fee:	69b8      	ldr	r0, [r7, #24]
 8001ff0:	f7ff ff2b 	bl	8001e4a <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	2073      	movs	r0, #115	; 0x73
 8002004:	f003 fddc 	bl	8005bc0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b090      	sub	sp, #64	; 0x40
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800201e:	2300      	movs	r3, #0
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <xQueueGenericSend+0x32>
        __asm volatile
 800202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800203e:	bf00      	nop
 8002040:	e7fe      	b.n	8002040 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d103      	bne.n	8002050 <xQueueGenericSend+0x40>
 8002048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <xQueueGenericSend+0x44>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <xQueueGenericSend+0x46>
 8002054:	2300      	movs	r3, #0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10a      	bne.n	8002070 <xQueueGenericSend+0x60>
        __asm volatile
 800205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800206c:	bf00      	nop
 800206e:	e7fe      	b.n	800206e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d103      	bne.n	800207e <xQueueGenericSend+0x6e>
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <xQueueGenericSend+0x72>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <xQueueGenericSend+0x74>
 8002082:	2300      	movs	r3, #0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <xQueueGenericSend+0x8e>
        __asm volatile
 8002088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208c:	f383 8811 	msr	BASEPRI, r3
 8002090:	f3bf 8f6f 	isb	sy
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	623b      	str	r3, [r7, #32]
    }
 800209a:	bf00      	nop
 800209c:	e7fe      	b.n	800209c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800209e:	f001 f997 	bl	80033d0 <xTaskGetSchedulerState>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <xQueueGenericSend+0x9e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <xQueueGenericSend+0xa2>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <xQueueGenericSend+0xa4>
 80020b2:	2300      	movs	r3, #0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <xQueueGenericSend+0xbe>
        __asm volatile
 80020b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	61fb      	str	r3, [r7, #28]
    }
 80020ca:	bf00      	nop
 80020cc:	e7fe      	b.n	80020cc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80020ce:	f001 fed3 	bl	8003e78 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	429a      	cmp	r2, r3
 80020dc:	d302      	bcc.n	80020e4 <xQueueGenericSend+0xd4>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d11f      	bne.n	8002124 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80020e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fad4 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	460b      	mov	r3, r1
 80020f6:	4601      	mov	r1, r0
 80020f8:	205a      	movs	r0, #90	; 0x5a
 80020fa:	f003 fdd7 	bl	8005cac <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002104:	f000 fa56 	bl	80025b4 <prvCopyDataToQueue>
 8002108:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	3324      	adds	r3, #36	; 0x24
 8002116:	4618      	mov	r0, r3
 8002118:	f000 ffc0 	bl	800309c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800211c:	f001 fedc 	bl	8003ed8 <vPortExitCritical>
                return pdPASS;
 8002120:	2301      	movs	r3, #1
 8002122:	e07d      	b.n	8002220 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d110      	bne.n	800214c <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800212a:	f001 fed5 	bl	8003ed8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	4618      	mov	r0, r3
 8002132:	f004 faaf 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	460b      	mov	r3, r1
 8002140:	4601      	mov	r1, r0
 8002142:	205a      	movs	r0, #90	; 0x5a
 8002144:	f003 fdb2 	bl	8005cac <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002148:	2300      	movs	r3, #0
 800214a:	e069      	b.n	8002220 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 800214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4618      	mov	r0, r3
 8002158:	f001 f806 	bl	8003168 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800215c:	2301      	movs	r3, #1
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002160:	f001 feba 	bl	8003ed8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002164:	f000 fd90 	bl	8002c88 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002168:	f001 fe86 	bl	8003e78 <vPortEnterCritical>
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002172:	b25b      	sxtb	r3, r3
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002178:	d103      	bne.n	8002182 <xQueueGenericSend+0x172>
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002188:	b25b      	sxtb	r3, r3
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218e:	d103      	bne.n	8002198 <xQueueGenericSend+0x188>
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002198:	f001 fe9e 	bl	8003ed8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800219c:	1d3a      	adds	r2, r7, #4
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fff5 	bl	8003194 <xTaskCheckForTimeOut>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d124      	bne.n	80021fa <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021b2:	f000 faf7 	bl	80027a4 <prvIsQueueFull>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d018      	beq.n	80021ee <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	3310      	adds	r3, #16
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 ff17 	bl	8002ff8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80021ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021cc:	f000 fa82 	bl	80026d4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80021d0:	f000 fd68 	bl	8002ca4 <xTaskResumeAll>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f47f af79 	bne.w	80020ce <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <xQueueGenericSend+0x218>)
 80021de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	e76f      	b.n	80020ce <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80021ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021f0:	f000 fa70 	bl	80026d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80021f4:	f000 fd56 	bl	8002ca4 <xTaskResumeAll>
 80021f8:	e769      	b.n	80020ce <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80021fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021fc:	f000 fa6a 	bl	80026d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002200:	f000 fd50 	bl	8002ca4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fa44 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	460b      	mov	r3, r1
 8002216:	4601      	mov	r1, r0
 8002218:	205a      	movs	r0, #90	; 0x5a
 800221a:	f003 fd47 	bl	8005cac <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800221e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002220:	4618      	mov	r0, r3
 8002222:	3738      	adds	r7, #56	; 0x38
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b090      	sub	sp, #64	; 0x40
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002256:	bf00      	nop
 8002258:	e7fe      	b.n	8002258 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <xQueueGenericSendFromISR+0x3c>
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <xQueueGenericSendFromISR+0x40>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <xQueueGenericSendFromISR+0x42>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10a      	bne.n	8002288 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002276:	f383 8811 	msr	BASEPRI, r3
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002284:	bf00      	nop
 8002286:	e7fe      	b.n	8002286 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d103      	bne.n	8002296 <xQueueGenericSendFromISR+0x6a>
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <xQueueGenericSendFromISR+0x6e>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <xQueueGenericSendFromISR+0x70>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	623b      	str	r3, [r7, #32]
    }
 80022b2:	bf00      	nop
 80022b4:	e7fe      	b.n	80022b4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022b6:	f001 fec9 	bl	800404c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80022ba:	f3ef 8211 	mrs	r2, BASEPRI
 80022be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	61fa      	str	r2, [r7, #28]
 80022d0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80022d2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <xQueueGenericSendFromISR+0xbc>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d148      	bne.n	800237a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80022e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	4618      	mov	r0, r3
 80022fc:	f004 f9ca 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 8002300:	4601      	mov	r1, r0
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	461a      	mov	r2, r3
 8002306:	2060      	movs	r0, #96	; 0x60
 8002308:	f003 fc00 	bl	8005b0c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	68b9      	ldr	r1, [r7, #8]
 8002310:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002312:	f000 f94f 	bl	80025b4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002316:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800231a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800231e:	d112      	bne.n	8002346 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	2b00      	cmp	r3, #0
 8002326:	d025      	beq.n	8002374 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	3324      	adds	r3, #36	; 0x24
 800232c:	4618      	mov	r0, r3
 800232e:	f000 feb5 	bl	800309c <xTaskRemoveFromEventList>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01d      	beq.n	8002374 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01a      	beq.n	8002374 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e016      	b.n	8002374 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002346:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800234a:	2b7f      	cmp	r3, #127	; 0x7f
 800234c:	d10a      	bne.n	8002364 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	617b      	str	r3, [r7, #20]
    }
 8002360:	bf00      	nop
 8002362:	e7fe      	b.n	8002362 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002364:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002368:	3301      	adds	r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	b25a      	sxtb	r2, r3
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002374:	2301      	movs	r3, #1
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002378:	e00b      	b.n	8002392 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237c:	4618      	mov	r0, r3
 800237e:	f004 f989 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 8002382:	4601      	mov	r1, r0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	461a      	mov	r2, r3
 8002388:	2060      	movs	r0, #96	; 0x60
 800238a:	f003 fbbf 	bl	8005b0c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800238e:	2300      	movs	r3, #0
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002394:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800239c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800239e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3740      	adds	r7, #64	; 0x40
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b08f      	sub	sp, #60	; 0x3c
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <xQueueReceive+0x30>
        __asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	623b      	str	r3, [r7, #32]
    }
 80023d4:	bf00      	nop
 80023d6:	e7fe      	b.n	80023d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <xQueueReceive+0x3e>
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <xQueueReceive+0x42>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <xQueueReceive+0x44>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <xQueueReceive+0x5e>
        __asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	61fb      	str	r3, [r7, #28]
    }
 8002402:	bf00      	nop
 8002404:	e7fe      	b.n	8002404 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002406:	f000 ffe3 	bl	80033d0 <xTaskGetSchedulerState>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <xQueueReceive+0x6e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <xQueueReceive+0x72>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <xQueueReceive+0x74>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueReceive+0x8e>
        __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	61bb      	str	r3, [r7, #24]
    }
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002436:	f001 fd1f 	bl	8003e78 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	2b00      	cmp	r3, #0
 8002444:	d024      	beq.n	8002490 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800244a:	f000 f91d 	bl	8002688 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	4618      	mov	r0, r3
 8002452:	f004 f91f 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 8002456:	4604      	mov	r4, r0
 8002458:	2000      	movs	r0, #0
 800245a:	f004 f91b 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 800245e:	4602      	mov	r2, r0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2101      	movs	r1, #1
 8002464:	9100      	str	r1, [sp, #0]
 8002466:	4621      	mov	r1, r4
 8002468:	205c      	movs	r0, #92	; 0x5c
 800246a:	f003 fc1f 	bl	8005cac <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	1e5a      	subs	r2, r3, #1
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d004      	beq.n	8002488 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	3310      	adds	r3, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fe0a 	bl	800309c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002488:	f001 fd26 	bl	8003ed8 <vPortExitCritical>
                return pdPASS;
 800248c:	2301      	movs	r3, #1
 800248e:	e08a      	b.n	80025a6 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d113      	bne.n	80024be <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002496:	f001 fd1f 	bl	8003ed8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	4618      	mov	r0, r3
 800249e:	f004 f8f9 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 80024a2:	4604      	mov	r4, r0
 80024a4:	2000      	movs	r0, #0
 80024a6:	f004 f8f5 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 80024aa:	4602      	mov	r2, r0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2101      	movs	r1, #1
 80024b0:	9100      	str	r1, [sp, #0]
 80024b2:	4621      	mov	r1, r4
 80024b4:	205c      	movs	r0, #92	; 0x5c
 80024b6:	f003 fbf9 	bl	8005cac <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e073      	b.n	80025a6 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d106      	bne.n	80024d2 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fe4d 	bl	8003168 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024ce:	2301      	movs	r3, #1
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024d2:	f001 fd01 	bl	8003ed8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024d6:	f000 fbd7 	bl	8002c88 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024da:	f001 fccd 	bl	8003e78 <vPortEnterCritical>
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ea:	d103      	bne.n	80024f4 <xQueueReceive+0x14c>
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002500:	d103      	bne.n	800250a <xQueueReceive+0x162>
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800250a:	f001 fce5 	bl	8003ed8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800250e:	1d3a      	adds	r2, r7, #4
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fe3c 	bl	8003194 <xTaskCheckForTimeOut>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d124      	bne.n	800256c <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002524:	f000 f928 	bl	8002778 <prvIsQueueEmpty>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d018      	beq.n	8002560 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	3324      	adds	r3, #36	; 0x24
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fd5e 	bl	8002ff8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800253c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800253e:	f000 f8c9 	bl	80026d4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002542:	f000 fbaf 	bl	8002ca4 <xTaskResumeAll>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	f47f af74 	bne.w	8002436 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <xQueueReceive+0x208>)
 8002550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	e76a      	b.n	8002436 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002562:	f000 f8b7 	bl	80026d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002566:	f000 fb9d 	bl	8002ca4 <xTaskResumeAll>
 800256a:	e764      	b.n	8002436 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800256c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800256e:	f000 f8b1 	bl	80026d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002572:	f000 fb97 	bl	8002ca4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002578:	f000 f8fe 	bl	8002778 <prvIsQueueEmpty>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f43f af59 	beq.w	8002436 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	4618      	mov	r0, r3
 8002588:	f004 f884 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 800258c:	4604      	mov	r4, r0
 800258e:	2000      	movs	r0, #0
 8002590:	f004 f880 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 8002594:	4602      	mov	r2, r0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2101      	movs	r1, #1
 800259a:	9100      	str	r1, [sp, #0]
 800259c:	4621      	mov	r1, r4
 800259e:	205c      	movs	r0, #92	; 0x5c
 80025a0:	f003 fb84 	bl	8005cac <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80025a4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3734      	adds	r7, #52	; 0x34
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	bf00      	nop
 80025b0:	e000ed04 	.word	0xe000ed04

080025b4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10d      	bne.n	80025ee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d14d      	bne.n	8002676 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 ff14 	bl	800340c <xTaskPriorityDisinherit>
 80025e4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	e043      	b.n	8002676 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d119      	bne.n	8002628 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6858      	ldr	r0, [r3, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	461a      	mov	r2, r3
 80025fe:	68b9      	ldr	r1, [r7, #8]
 8002600:	f006 f966 	bl	80088d0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	441a      	add	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	d32b      	bcc.n	8002676 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	e026      	b.n	8002676 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68d8      	ldr	r0, [r3, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	461a      	mov	r2, r3
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	f006 f94c 	bl	80088d0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	425b      	negs	r3, r3
 8002642:	441a      	add	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d207      	bcs.n	8002664 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	425b      	negs	r3, r3
 800265e:	441a      	add	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d105      	bne.n	8002676 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	3b01      	subs	r3, #1
 8002674:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800267e:	697b      	ldr	r3, [r7, #20]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d018      	beq.n	80026cc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	441a      	add	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d303      	bcc.n	80026bc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68d9      	ldr	r1, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	461a      	mov	r2, r3
 80026c6:	6838      	ldr	r0, [r7, #0]
 80026c8:	f006 f902 	bl	80088d0 <memcpy>
    }
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026dc:	f001 fbcc 	bl	8003e78 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026e6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026e8:	e011      	b.n	800270e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d012      	beq.n	8002718 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3324      	adds	r3, #36	; 0x24
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fcd0 	bl	800309c <xTaskRemoveFromEventList>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002702:	f000 fdad 	bl	8003260 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	3b01      	subs	r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	dce9      	bgt.n	80026ea <prvUnlockQueue+0x16>
 8002716:	e000      	b.n	800271a <prvUnlockQueue+0x46>
                        break;
 8002718:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	22ff      	movs	r2, #255	; 0xff
 800271e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002722:	f001 fbd9 	bl	8003ed8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002726:	f001 fba7 	bl	8003e78 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002730:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002732:	e011      	b.n	8002758 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d012      	beq.n	8002762 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3310      	adds	r3, #16
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fcab 	bl	800309c <xTaskRemoveFromEventList>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800274c:	f000 fd88 	bl	8003260 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	3b01      	subs	r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800275c:	2b00      	cmp	r3, #0
 800275e:	dce9      	bgt.n	8002734 <prvUnlockQueue+0x60>
 8002760:	e000      	b.n	8002764 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002762:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	22ff      	movs	r2, #255	; 0xff
 8002768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800276c:	f001 fbb4 	bl	8003ed8 <vPortExitCritical>
}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002780:	f001 fb7a 	bl	8003e78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800278c:	2301      	movs	r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e001      	b.n	8002796 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002796:	f001 fb9f 	bl	8003ed8 <vPortExitCritical>

    return xReturn;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80027ac:	f001 fb64 	bl	8003e78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d102      	bne.n	80027c2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80027bc:	2301      	movs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e001      	b.n	80027c6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80027c6:	f001 fb87 	bl	8003ed8 <vPortExitCritical>

    return xReturn;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e01e      	b.n	8002822 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80027e4:	4a13      	ldr	r2, [pc, #76]	; (8002834 <vQueueAddToRegistry+0x60>)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d115      	bne.n	800281c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80027f0:	4910      	ldr	r1, [pc, #64]	; (8002834 <vQueueAddToRegistry+0x60>)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80027fa:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <vQueueAddToRegistry+0x60>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	f003 ff43 	bl	8006694 <SEGGER_SYSVIEW_ShrinkId>
 800280e:	4601      	mov	r1, r0
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	2071      	movs	r0, #113	; 0x71
 8002816:	f003 f979 	bl	8005b0c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800281a:	e006      	b.n	800282a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3301      	adds	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b07      	cmp	r3, #7
 8002826:	d9dd      	bls.n	80027e4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2001377c 	.word	0x2001377c

08002838 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002848:	f001 fb16 	bl	8003e78 <vPortEnterCritical>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002852:	b25b      	sxtb	r3, r3
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002858:	d103      	bne.n	8002862 <vQueueWaitForMessageRestricted+0x2a>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002868:	b25b      	sxtb	r3, r3
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800286e:	d103      	bne.n	8002878 <vQueueWaitForMessageRestricted+0x40>
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002878:	f001 fb2e 	bl	8003ed8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3324      	adds	r3, #36	; 0x24
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fbd7 	bl	8003040 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f7ff ff1e 	bl	80026d4 <prvUnlockQueue>
    }
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08c      	sub	sp, #48	; 0x30
 80028a4:	af04      	add	r7, sp, #16
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 fc09 	bl	80040cc <pvPortMalloc>
 80028ba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00e      	beq.n	80028e0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028c2:	2058      	movs	r0, #88	; 0x58
 80028c4:	f001 fc02 	bl	80040cc <pvPortMalloc>
 80028c8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
 80028d6:	e005      	b.n	80028e4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80028d8:	6978      	ldr	r0, [r7, #20]
 80028da:	f001 fcd7 	bl	800428c <vPortFree>
 80028de:	e001      	b.n	80028e4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d013      	beq.n	8002912 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	2300      	movs	r3, #0
 80028ee:	9303      	str	r3, [sp, #12]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f80e 	bl	8002922 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002906:	69f8      	ldr	r0, [r7, #28]
 8002908:	f000 f8a2 	bl	8002a50 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800290c:	2301      	movs	r3, #1
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	e002      	b.n	8002918 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002916:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002918:	69bb      	ldr	r3, [r7, #24]
    }
 800291a:	4618      	mov	r0, r3
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b088      	sub	sp, #32
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	461a      	mov	r2, r3
 800293a:	21a5      	movs	r1, #165	; 0xa5
 800293c:	f005 ffd6 	bl	80088ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800294a:	3b01      	subs	r3, #1
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f023 0307 	bic.w	r3, r3, #7
 8002958:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	617b      	str	r3, [r7, #20]
    }
 8002976:	bf00      	nop
 8002978:	e7fe      	b.n	8002978 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01f      	beq.n	80029c0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	e012      	b.n	80029ac <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	7819      	ldrb	r1, [r3, #0]
 800298e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	3334      	adds	r3, #52	; 0x34
 8002996:	460a      	mov	r2, r1
 8002998:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4413      	add	r3, r2
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3301      	adds	r3, #1
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b09      	cmp	r3, #9
 80029b0:	d9e9      	bls.n	8002986 <prvInitialiseNewTask+0x64>
 80029b2:	e000      	b.n	80029b6 <prvInitialiseNewTask+0x94>
            {
                break;
 80029b4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029be:	e003      	b.n	80029c8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d901      	bls.n	80029d2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029ce:	2304      	movs	r3, #4
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029dc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	2200      	movs	r2, #0
 80029e2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	3304      	adds	r3, #4
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f99a 	bl	8001d22 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	3318      	adds	r3, #24
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f995 	bl	8001d22 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	f1c3 0205 	rsb	r2, r3, #5
 8002a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a06:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	3350      	adds	r3, #80	; 0x50
 8002a12:	2204      	movs	r2, #4
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 ff68 	bl	80088ec <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1e:	3354      	adds	r3, #84	; 0x54
 8002a20:	2201      	movs	r2, #1
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f005 ff61 	bl	80088ec <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	68f9      	ldr	r1, [r7, #12]
 8002a2e:	69b8      	ldr	r0, [r7, #24]
 8002a30:	f001 f8f6 	bl	8003c20 <pxPortInitialiseStack>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a44:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a46:	bf00      	nop
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a50:	b5b0      	push	{r4, r5, r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a58:	f001 fa0e 	bl	8003e78 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a5c:	4b35      	ldr	r3, [pc, #212]	; (8002b34 <prvAddNewTaskToReadyList+0xe4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	4a34      	ldr	r2, [pc, #208]	; (8002b34 <prvAddNewTaskToReadyList+0xe4>)
 8002a64:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <prvAddNewTaskToReadyList+0xe8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a6e:	4a32      	ldr	r2, [pc, #200]	; (8002b38 <prvAddNewTaskToReadyList+0xe8>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a74:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <prvAddNewTaskToReadyList+0xe4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d110      	bne.n	8002a9e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a7c:	f000 fc0e 	bl	800329c <prvInitialiseTaskLists>
 8002a80:	e00d      	b.n	8002a9e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <prvAddNewTaskToReadyList+0xec>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <prvAddNewTaskToReadyList+0xe8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d802      	bhi.n	8002a9e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a98:	4a27      	ldr	r2, [pc, #156]	; (8002b38 <prvAddNewTaskToReadyList+0xe8>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a9e:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <prvAddNewTaskToReadyList+0xf0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <prvAddNewTaskToReadyList+0xf0>)
 8002aa6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <prvAddNewTaskToReadyList+0xf0>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d016      	beq.n	8002ae4 <prvAddNewTaskToReadyList+0x94>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fcc5 	bl	8006448 <SEGGER_SYSVIEW_OnTaskCreate>
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	461d      	mov	r5, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461c      	mov	r4, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	1ae3      	subs	r3, r4, r3
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	462b      	mov	r3, r5
 8002ae0:	f002 faea 	bl	80050b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 fd32 	bl	8006550 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	2201      	movs	r2, #1
 8002af2:	409a      	lsls	r2, r3
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <prvAddNewTaskToReadyList+0xf4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <prvAddNewTaskToReadyList+0xf4>)
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <prvAddNewTaskToReadyList+0xf8>)
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f7ff f911 	bl	8001d3c <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b1a:	f001 f9dd 	bl	8003ed8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <prvAddNewTaskToReadyList+0xec>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <prvAddNewTaskToReadyList+0xe8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bdb0      	pop	{r4, r5, r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000300 	.word	0x20000300
 8002b38:	20000228 	.word	0x20000228
 8002b3c:	2000030c 	.word	0x2000030c
 8002b40:	2000031c 	.word	0x2000031c
 8002b44:	20000308 	.word	0x20000308
 8002b48:	2000022c 	.word	0x2000022c

08002b4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01b      	beq.n	8002b96 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <vTaskDelay+0x68>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <vTaskDelay+0x30>
        __asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	60bb      	str	r3, [r7, #8]
    }
 8002b78:	bf00      	nop
 8002b7a:	e7fe      	b.n	8002b7a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002b7c:	f000 f884 	bl	8002c88 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	2023      	movs	r0, #35	; 0x23
 8002b84:	f002 ff86 	bl	8005a94 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b88:	2100      	movs	r1, #0
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fcbe 	bl	800350c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002b90:	f000 f888 	bl	8002ca4 <xTaskResumeAll>
 8002b94:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <vTaskDelay+0x6c>)
 8002b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000328 	.word	0x20000328
 8002bb8:	e000ed04 	.word	0xe000ed04

08002bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002bc2:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <vTaskStartScheduler+0xac>)
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2282      	movs	r2, #130	; 0x82
 8002bce:	4927      	ldr	r1, [pc, #156]	; (8002c6c <vTaskStartScheduler+0xb0>)
 8002bd0:	4827      	ldr	r0, [pc, #156]	; (8002c70 <vTaskStartScheduler+0xb4>)
 8002bd2:	f7ff fe65 	bl	80028a0 <xTaskCreate>
 8002bd6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d102      	bne.n	8002be4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002bde:	f000 fd0d 	bl	80035fc <xTimerCreateTimerTask>
 8002be2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d129      	bne.n	8002c3e <vTaskStartScheduler+0x82>
        __asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	60bb      	str	r3, [r7, #8]
    }
 8002bfc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <vTaskStartScheduler+0xb8>)
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c04:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <vTaskStartScheduler+0xbc>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <vTaskStartScheduler+0xc0>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <vTaskStartScheduler+0xc4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3334      	adds	r3, #52	; 0x34
 8002c18:	2205      	movs	r2, #5
 8002c1a:	4914      	ldr	r1, [pc, #80]	; (8002c6c <vTaskStartScheduler+0xb0>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f005 fe49 	bl	80088b4 <memcmp>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <vTaskStartScheduler+0x78>
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <vTaskStartScheduler+0xc4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 fc4d 	bl	80064cc <SEGGER_SYSVIEW_OnTaskStartExec>
 8002c32:	e001      	b.n	8002c38 <vTaskStartScheduler+0x7c>
 8002c34:	f003 fbec 	bl	8006410 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002c38:	f001 f87c 	bl	8003d34 <xPortStartScheduler>
 8002c3c:	e00e      	b.n	8002c5c <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c44:	d10a      	bne.n	8002c5c <vTaskStartScheduler+0xa0>
        __asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	607b      	str	r3, [r7, #4]
    }
 8002c58:	bf00      	nop
 8002c5a:	e7fe      	b.n	8002c5a <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <vTaskStartScheduler+0xc8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000324 	.word	0x20000324
 8002c6c:	0800b600 	.word	0x0800b600
 8002c70:	08003279 	.word	0x08003279
 8002c74:	20000320 	.word	0x20000320
 8002c78:	2000030c 	.word	0x2000030c
 8002c7c:	20000304 	.word	0x20000304
 8002c80:	20000228 	.word	0x20000228
 8002c84:	20000014 	.word	0x20000014

08002c88 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <vTaskSuspendAll+0x18>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3301      	adds	r3, #1
 8002c92:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <vTaskSuspendAll+0x18>)
 8002c94:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	20000328 	.word	0x20000328

08002ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <xTaskResumeAll+0x104>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <xTaskResumeAll+0x2c>
        __asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	603b      	str	r3, [r7, #0]
    }
 8002ccc:	bf00      	nop
 8002cce:	e7fe      	b.n	8002cce <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002cd0:	f001 f8d2 	bl	8003e78 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <xTaskResumeAll+0x104>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	4a33      	ldr	r2, [pc, #204]	; (8002da8 <xTaskResumeAll+0x104>)
 8002cdc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cde:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <xTaskResumeAll+0x104>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d159      	bne.n	8002d9a <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ce6:	4b31      	ldr	r3, [pc, #196]	; (8002dac <xTaskResumeAll+0x108>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d055      	beq.n	8002d9a <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cee:	e032      	b.n	8002d56 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cf0:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <xTaskResumeAll+0x10c>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f87a 	bl	8001df6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff f875 	bl	8001df6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 fc1e 	bl	8006550 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2201      	movs	r2, #1
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <xTaskResumeAll+0x110>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <xTaskResumeAll+0x110>)
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <xTaskResumeAll+0x114>)
 8002d34:	441a      	add	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f7fe fffd 	bl	8001d3c <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <xTaskResumeAll+0x118>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <xTaskResumeAll+0x11c>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <xTaskResumeAll+0x10c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1c8      	bne.n	8002cf0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d64:	f000 fb18 	bl	8003398 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <xTaskResumeAll+0x120>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d010      	beq.n	8002d96 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d74:	f000 f838 	bl	8002de8 <xTaskIncrementTick>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <xTaskResumeAll+0x11c>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f1      	bne.n	8002d74 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <xTaskResumeAll+0x120>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <xTaskResumeAll+0x11c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d9a:	f001 f89d 	bl	8003ed8 <vPortExitCritical>

    return xAlreadyYielded;
 8002d9e:	687b      	ldr	r3, [r7, #4]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000328 	.word	0x20000328
 8002dac:	20000300 	.word	0x20000300
 8002db0:	200002c0 	.word	0x200002c0
 8002db4:	20000308 	.word	0x20000308
 8002db8:	2000022c 	.word	0x2000022c
 8002dbc:	20000228 	.word	0x20000228
 8002dc0:	20000314 	.word	0x20000314
 8002dc4:	20000310 	.word	0x20000310

08002dc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <xTaskGetTickCount+0x1c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002dd4:	687b      	ldr	r3, [r7, #4]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000304 	.word	0x20000304

08002de8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <xTaskIncrementTick+0x110>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d173      	bne.n	8002ee2 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002dfa:	4b40      	ldr	r3, [pc, #256]	; (8002efc <xTaskIncrementTick+0x114>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e02:	4a3e      	ldr	r2, [pc, #248]	; (8002efc <xTaskIncrementTick+0x114>)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d120      	bne.n	8002e50 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e0e:	4b3c      	ldr	r3, [pc, #240]	; (8002f00 <xTaskIncrementTick+0x118>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <xTaskIncrementTick+0x46>
        __asm volatile
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	603b      	str	r3, [r7, #0]
    }
 8002e2a:	bf00      	nop
 8002e2c:	e7fe      	b.n	8002e2c <xTaskIncrementTick+0x44>
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <xTaskIncrementTick+0x118>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <xTaskIncrementTick+0x11c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a31      	ldr	r2, [pc, #196]	; (8002f00 <xTaskIncrementTick+0x118>)
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <xTaskIncrementTick+0x11c>)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <xTaskIncrementTick+0x120>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <xTaskIncrementTick+0x120>)
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	f000 faa4 	bl	8003398 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002e50:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <xTaskIncrementTick+0x124>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d348      	bcc.n	8002eec <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <xTaskIncrementTick+0x118>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e64:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <xTaskIncrementTick+0x124>)
 8002e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e6a:	601a      	str	r2, [r3, #0]
                    break;
 8002e6c:	e03e      	b.n	8002eec <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <xTaskIncrementTick+0x118>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d203      	bcs.n	8002e8e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e86:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <xTaskIncrementTick+0x124>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e8c:	e02e      	b.n	8002eec <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe ffaf 	bl	8001df6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	3318      	adds	r3, #24
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe ffa6 	bl	8001df6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 fb4f 	bl	8006550 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <xTaskIncrementTick+0x128>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <xTaskIncrementTick+0x128>)
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <xTaskIncrementTick+0x12c>)
 8002ed2:	441a      	add	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f7fe ff2e 	bl	8001d3c <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ee0:	e7bb      	b.n	8002e5a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <xTaskIncrementTick+0x130>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <xTaskIncrementTick+0x130>)
 8002eea:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002eec:	697b      	ldr	r3, [r7, #20]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000328 	.word	0x20000328
 8002efc:	20000304 	.word	0x20000304
 8002f00:	200002b8 	.word	0x200002b8
 8002f04:	200002bc 	.word	0x200002bc
 8002f08:	20000318 	.word	0x20000318
 8002f0c:	20000320 	.word	0x20000320
 8002f10:	20000308 	.word	0x20000308
 8002f14:	2000022c 	.word	0x2000022c
 8002f18:	20000310 	.word	0x20000310

08002f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f22:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <vTaskSwitchContext+0xc4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f2a:	4b2e      	ldr	r3, [pc, #184]	; (8002fe4 <vTaskSwitchContext+0xc8>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002f30:	e052      	b.n	8002fd8 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8002f32:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <vTaskSwitchContext+0xc8>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <vTaskSwitchContext+0xcc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f46:	7afb      	ldrb	r3, [r7, #11]
 8002f48:	f1c3 031f 	rsb	r3, r3, #31
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	4927      	ldr	r1, [pc, #156]	; (8002fec <vTaskSwitchContext+0xd0>)
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	607b      	str	r3, [r7, #4]
    }
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <vTaskSwitchContext+0x5a>
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <vTaskSwitchContext+0xd0>)
 8002f84:	4413      	add	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	3308      	adds	r3, #8
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d104      	bne.n	8002fa8 <vTaskSwitchContext+0x8c>
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <vTaskSwitchContext+0xd4>)
 8002fb0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <vTaskSwitchContext+0xd4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3334      	adds	r3, #52	; 0x34
 8002fb8:	2205      	movs	r2, #5
 8002fba:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <vTaskSwitchContext+0xd8>)
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f005 fc79 	bl	80088b4 <memcmp>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <vTaskSwitchContext+0xb8>
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <vTaskSwitchContext+0xd4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fa7d 	bl	80064cc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002fd2:	e001      	b.n	8002fd8 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8002fd4:	f003 fa1c 	bl	8006410 <SEGGER_SYSVIEW_OnIdle>
}
 8002fd8:	bf00      	nop
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000328 	.word	0x20000328
 8002fe4:	20000314 	.word	0x20000314
 8002fe8:	20000308 	.word	0x20000308
 8002fec:	2000022c 	.word	0x2000022c
 8002ff0:	20000228 	.word	0x20000228
 8002ff4:	0800b600 	.word	0x0800b600

08002ff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	60fb      	str	r3, [r7, #12]
    }
 800301a:	bf00      	nop
 800301c:	e7fe      	b.n	800301c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <vTaskPlaceOnEventList+0x44>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3318      	adds	r3, #24
 8003024:	4619      	mov	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe feac 	bl	8001d84 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800302c:	2101      	movs	r1, #1
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f000 fa6c 	bl	800350c <prvAddCurrentTaskToDelayedList>
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000228 	.word	0x20000228

08003040 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	617b      	str	r3, [r7, #20]
    }
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <vTaskPlaceOnEventListRestricted+0x58>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3318      	adds	r3, #24
 800306e:	4619      	mov	r1, r3
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7fe fe63 	bl	8001d3c <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003080:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003082:	2024      	movs	r0, #36	; 0x24
 8003084:	f002 fce8 	bl	8005a58 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	68b8      	ldr	r0, [r7, #8]
 800308c:	f000 fa3e 	bl	800350c <prvAddCurrentTaskToDelayedList>
    }
 8003090:	bf00      	nop
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000228 	.word	0x20000228

0800309c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	60fb      	str	r3, [r7, #12]
    }
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	3318      	adds	r3, #24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fe92 	bl	8001df6 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <xTaskRemoveFromEventList+0xb4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d120      	bne.n	800311c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	3304      	adds	r3, #4
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fe89 	bl	8001df6 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fa32 	bl	8006550 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	2201      	movs	r2, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	4b17      	ldr	r3, [pc, #92]	; (8003154 <xTaskRemoveFromEventList+0xb8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <xTaskRemoveFromEventList+0xb8>)
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4a13      	ldr	r2, [pc, #76]	; (8003158 <xTaskRemoveFromEventList+0xbc>)
 800310c:	441a      	add	r2, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	3304      	adds	r3, #4
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f7fe fe11 	bl	8001d3c <vListInsertEnd>
 800311a:	e005      	b.n	8003128 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	3318      	adds	r3, #24
 8003120:	4619      	mov	r1, r3
 8003122:	480e      	ldr	r0, [pc, #56]	; (800315c <xTaskRemoveFromEventList+0xc0>)
 8003124:	f7fe fe0a 	bl	8001d3c <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <xTaskRemoveFromEventList+0xc4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	429a      	cmp	r2, r3
 8003134:	d905      	bls.n	8003142 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003136:	2301      	movs	r3, #1
 8003138:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <xTaskRemoveFromEventList+0xc8>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e001      	b.n	8003146 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003146:	697b      	ldr	r3, [r7, #20]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000328 	.word	0x20000328
 8003154:	20000308 	.word	0x20000308
 8003158:	2000022c 	.word	0x2000022c
 800315c:	200002c0 	.word	0x200002c0
 8003160:	20000228 	.word	0x20000228
 8003164:	20000314 	.word	0x20000314

08003168 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <vTaskInternalSetTimeOutState+0x24>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <vTaskInternalSetTimeOutState+0x28>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	605a      	str	r2, [r3, #4]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	20000318 	.word	0x20000318
 8003190:	20000304 	.word	0x20000304

08003194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	613b      	str	r3, [r7, #16]
    }
 80031b6:	bf00      	nop
 80031b8:	e7fe      	b.n	80031b8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	60fb      	str	r3, [r7, #12]
    }
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80031d6:	f000 fe4f 	bl	8003e78 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80031da:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <xTaskCheckForTimeOut+0xc4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f2:	d102      	bne.n	80031fa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	e026      	b.n	8003248 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <xTaskCheckForTimeOut+0xc8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d00a      	beq.n	800321c <xTaskCheckForTimeOut+0x88>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	429a      	cmp	r2, r3
 800320e:	d305      	bcc.n	800321c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003210:	2301      	movs	r3, #1
 8003212:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e015      	b.n	8003248 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	429a      	cmp	r2, r3
 8003224:	d20b      	bcs.n	800323e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	1ad2      	subs	r2, r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ff98 	bl	8003168 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e004      	b.n	8003248 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003244:	2301      	movs	r3, #1
 8003246:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003248:	f000 fe46 	bl	8003ed8 <vPortExitCritical>

    return xReturn;
 800324c:	69fb      	ldr	r3, [r7, #28]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000304 	.word	0x20000304
 800325c:	20000318 	.word	0x20000318

08003260 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <vTaskMissedYield+0x14>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]
}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	20000314 	.word	0x20000314

08003278 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003280:	f000 f84c 	bl	800331c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <prvIdleTask+0x20>)
 8003286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003294:	e7f4      	b.n	8003280 <prvIdleTask+0x8>
 8003296:	bf00      	nop
 8003298:	e000ed04 	.word	0xe000ed04

0800329c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032a2:	2300      	movs	r3, #0
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	e00c      	b.n	80032c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4a12      	ldr	r2, [pc, #72]	; (80032fc <prvInitialiseTaskLists+0x60>)
 80032b4:	4413      	add	r3, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fd13 	bl	8001ce2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3301      	adds	r3, #1
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d9ef      	bls.n	80032a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80032c8:	480d      	ldr	r0, [pc, #52]	; (8003300 <prvInitialiseTaskLists+0x64>)
 80032ca:	f7fe fd0a 	bl	8001ce2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80032ce:	480d      	ldr	r0, [pc, #52]	; (8003304 <prvInitialiseTaskLists+0x68>)
 80032d0:	f7fe fd07 	bl	8001ce2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80032d4:	480c      	ldr	r0, [pc, #48]	; (8003308 <prvInitialiseTaskLists+0x6c>)
 80032d6:	f7fe fd04 	bl	8001ce2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80032da:	480c      	ldr	r0, [pc, #48]	; (800330c <prvInitialiseTaskLists+0x70>)
 80032dc:	f7fe fd01 	bl	8001ce2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80032e0:	480b      	ldr	r0, [pc, #44]	; (8003310 <prvInitialiseTaskLists+0x74>)
 80032e2:	f7fe fcfe 	bl	8001ce2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <prvInitialiseTaskLists+0x78>)
 80032e8:	4a05      	ldr	r2, [pc, #20]	; (8003300 <prvInitialiseTaskLists+0x64>)
 80032ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <prvInitialiseTaskLists+0x7c>)
 80032ee:	4a05      	ldr	r2, [pc, #20]	; (8003304 <prvInitialiseTaskLists+0x68>)
 80032f0:	601a      	str	r2, [r3, #0]
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2000022c 	.word	0x2000022c
 8003300:	20000290 	.word	0x20000290
 8003304:	200002a4 	.word	0x200002a4
 8003308:	200002c0 	.word	0x200002c0
 800330c:	200002d4 	.word	0x200002d4
 8003310:	200002ec 	.word	0x200002ec
 8003314:	200002b8 	.word	0x200002b8
 8003318:	200002bc 	.word	0x200002bc

0800331c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003322:	e019      	b.n	8003358 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003324:	f000 fda8 	bl	8003e78 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <prvCheckTasksWaitingTermination+0x50>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe fd5e 	bl	8001df6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <prvCheckTasksWaitingTermination+0x54>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3b01      	subs	r3, #1
 8003340:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <prvCheckTasksWaitingTermination+0x54>)
 8003342:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <prvCheckTasksWaitingTermination+0x58>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3b01      	subs	r3, #1
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <prvCheckTasksWaitingTermination+0x58>)
 800334c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800334e:	f000 fdc3 	bl	8003ed8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f810 	bl	8003378 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <prvCheckTasksWaitingTermination+0x58>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e1      	bne.n	8003324 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200002d4 	.word	0x200002d4
 8003370:	20000300 	.word	0x20000300
 8003374:	200002e8 	.word	0x200002e8

08003378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	4618      	mov	r0, r3
 8003386:	f000 ff81 	bl	800428c <vPortFree>
                vPortFree( pxTCB );
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 ff7e 	bl	800428c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <prvResetNextTaskUnblockTime+0x30>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <prvResetNextTaskUnblockTime+0x34>)
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80033ae:	e005      	b.n	80033bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <prvResetNextTaskUnblockTime+0x30>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a04      	ldr	r2, [pc, #16]	; (80033cc <prvResetNextTaskUnblockTime+0x34>)
 80033ba:	6013      	str	r3, [r2, #0]
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	200002b8 	.word	0x200002b8
 80033cc:	20000320 	.word	0x20000320

080033d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <xTaskGetSchedulerState+0x34>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80033de:	2301      	movs	r3, #1
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	e008      	b.n	80033f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <xTaskGetSchedulerState+0x38>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80033ec:	2302      	movs	r3, #2
 80033ee:	607b      	str	r3, [r7, #4]
 80033f0:	e001      	b.n	80033f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80033f6:	687b      	ldr	r3, [r7, #4]
    }
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	2000030c 	.word	0x2000030c
 8003408:	20000328 	.word	0x20000328

0800340c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d068      	beq.n	80034f4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003422:	4b37      	ldr	r3, [pc, #220]	; (8003500 <xTaskPriorityDisinherit+0xf4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	429a      	cmp	r2, r3
 800342a:	d00a      	beq.n	8003442 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	60fb      	str	r3, [r7, #12]
    }
 800343e:	bf00      	nop
 8003440:	e7fe      	b.n	8003440 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	60bb      	str	r3, [r7, #8]
    }
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003464:	1e5a      	subs	r2, r3, #1
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003472:	429a      	cmp	r2, r3
 8003474:	d03e      	beq.n	80034f4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d13a      	bne.n	80034f4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	3304      	adds	r3, #4
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fcb7 	bl	8001df6 <uxListRemove>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	2201      	movs	r2, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43da      	mvns	r2, r3
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <xTaskPriorityDisinherit+0xf8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4013      	ands	r3, r2
 80034a0:	4a18      	ldr	r2, [pc, #96]	; (8003504 <xTaskPriorityDisinherit+0xf8>)
 80034a2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4619      	mov	r1, r3
 80034a8:	204a      	movs	r0, #74	; 0x4a
 80034aa:	f002 faf3 	bl	8005a94 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f1c3 0205 	rsb	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	2201      	movs	r2, #1
 80034c8:	409a      	lsls	r2, r3
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <xTaskPriorityDisinherit+0xf8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <xTaskPriorityDisinherit+0xf8>)
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4a09      	ldr	r2, [pc, #36]	; (8003508 <xTaskPriorityDisinherit+0xfc>)
 80034e2:	441a      	add	r2, r3
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f7fe fc26 	bl	8001d3c <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80034f0:	2301      	movs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80034f4:	697b      	ldr	r3, [r7, #20]
    }
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000228 	.word	0x20000228
 8003504:	20000308 	.word	0x20000308
 8003508:	2000022c 	.word	0x2000022c

0800350c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003516:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3304      	adds	r3, #4
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe fc67 	bl	8001df6 <uxListRemove>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800352e:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	2201      	movs	r2, #1
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43da      	mvns	r2, r3
 800353c:	4b2a      	ldr	r3, [pc, #168]	; (80035e8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4013      	ands	r3, r2
 8003542:	4a29      	ldr	r2, [pc, #164]	; (80035e8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003544:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800354c:	d110      	bne.n	8003570 <prvAddCurrentTaskToDelayedList+0x64>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003554:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	211b      	movs	r1, #27
 800355a:	4618      	mov	r0, r3
 800355c:	f003 f83a 	bl	80065d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003560:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3304      	adds	r3, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4820      	ldr	r0, [pc, #128]	; (80035ec <prvAddCurrentTaskToDelayedList+0xe0>)
 800356a:	f7fe fbe7 	bl	8001d3c <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800356e:	e032      	b.n	80035d6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	429a      	cmp	r2, r3
 8003586:	d20f      	bcs.n	80035a8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003588:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2104      	movs	r1, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f003 f820 	bl	80065d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3304      	adds	r3, #4
 800359e:	4619      	mov	r1, r3
 80035a0:	4610      	mov	r0, r2
 80035a2:	f7fe fbef 	bl	8001d84 <vListInsert>
}
 80035a6:	e016      	b.n	80035d6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80035a8:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2104      	movs	r1, #4
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 f810 	bl	80065d4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7fe fbdf 	bl	8001d84 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xec>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d202      	bcs.n	80035d6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80035d0:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xec>)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6013      	str	r3, [r2, #0]
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000304 	.word	0x20000304
 80035e4:	20000228 	.word	0x20000228
 80035e8:	20000308 	.word	0x20000308
 80035ec:	200002ec 	.word	0x200002ec
 80035f0:	200002bc 	.word	0x200002bc
 80035f4:	200002b8 	.word	0x200002b8
 80035f8:	20000320 	.word	0x20000320

080035fc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003602:	2300      	movs	r3, #0
 8003604:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003606:	f000 fad5 	bl	8003bb4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <xTimerCreateTimerTask+0x54>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <xTimerCreateTimerTask+0x58>)
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2302      	movs	r3, #2
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003620:	490d      	ldr	r1, [pc, #52]	; (8003658 <xTimerCreateTimerTask+0x5c>)
 8003622:	480e      	ldr	r0, [pc, #56]	; (800365c <xTimerCreateTimerTask+0x60>)
 8003624:	f7ff f93c 	bl	80028a0 <xTaskCreate>
 8003628:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	603b      	str	r3, [r7, #0]
    }
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003646:	687b      	ldr	r3, [r7, #4]
    }
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	2000035c 	.word	0x2000035c
 8003654:	20000360 	.word	0x20000360
 8003658:	0800b608 	.word	0x0800b608
 800365c:	08003795 	.word	0x08003795

08003660 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	623b      	str	r3, [r7, #32]
    }
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <xTimerGenericCommand+0x98>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d02a      	beq.n	80036ec <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	dc18      	bgt.n	80036da <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80036a8:	f7ff fe92 	bl	80033d0 <xTaskGetSchedulerState>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d109      	bne.n	80036c6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <xTimerGenericCommand+0x98>)
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	f107 0114 	add.w	r1, r7, #20
 80036ba:	2300      	movs	r3, #0
 80036bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036be:	f7fe fca7 	bl	8002010 <xQueueGenericSend>
 80036c2:	6278      	str	r0, [r7, #36]	; 0x24
 80036c4:	e012      	b.n	80036ec <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <xTimerGenericCommand+0x98>)
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	f107 0114 	add.w	r1, r7, #20
 80036ce:	2300      	movs	r3, #0
 80036d0:	2200      	movs	r2, #0
 80036d2:	f7fe fc9d 	bl	8002010 <xQueueGenericSend>
 80036d6:	6278      	str	r0, [r7, #36]	; 0x24
 80036d8:	e008      	b.n	80036ec <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80036da:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <xTimerGenericCommand+0x98>)
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	f107 0114 	add.w	r1, r7, #20
 80036e2:	2300      	movs	r3, #0
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	f7fe fda1 	bl	800222c <xQueueGenericSendFromISR>
 80036ea:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80036ee:	4618      	mov	r0, r3
 80036f0:	3728      	adds	r7, #40	; 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	2000035c 	.word	0x2000035c

080036fc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af02      	add	r7, sp, #8
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <prvProcessExpiredTimer+0x94>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3304      	adds	r3, #4
 8003714:	4618      	mov	r0, r3
 8003716:	f7fe fb6e 	bl	8001df6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d022      	beq.n	800376e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	18d1      	adds	r1, r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	6978      	ldr	r0, [r7, #20]
 8003736:	f000 f8d1 	bl	80038dc <prvInsertTimerInActiveList>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01f      	beq.n	8003780 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003740:	2300      	movs	r3, #0
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	2100      	movs	r1, #0
 800374a:	6978      	ldr	r0, [r7, #20]
 800374c:	f7ff ff88 	bl	8003660 <xTimerGenericCommand>
 8003750:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d113      	bne.n	8003780 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	60fb      	str	r3, [r7, #12]
    }
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	b2da      	uxtb	r2, r3
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	6978      	ldr	r0, [r7, #20]
 8003786:	4798      	blx	r3
    }
 8003788:	bf00      	nop
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000354 	.word	0x20000354

08003794 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800379c:	f107 0308 	add.w	r3, r7, #8
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 f857 	bl	8003854 <prvGetNextExpireTime>
 80037a6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4619      	mov	r1, r3
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f803 	bl	80037b8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80037b2:	f000 f8d5 	bl	8003960 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037b6:	e7f1      	b.n	800379c <prvTimerTask+0x8>

080037b8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80037c2:	f7ff fa61 	bl	8002c88 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037c6:	f107 0308 	add.w	r3, r7, #8
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f866 	bl	800389c <prvSampleTimeNow>
 80037d0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d130      	bne.n	800383a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <prvProcessTimerOrBlockTask+0x3c>
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d806      	bhi.n	80037f4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80037e6:	f7ff fa5d 	bl	8002ca4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80037ea:	68f9      	ldr	r1, [r7, #12]
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff85 	bl	80036fc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80037f2:	e024      	b.n	800383e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <prvProcessTimerOrBlockTask+0x90>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <prvProcessTimerOrBlockTask+0x50>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <prvProcessTimerOrBlockTask+0x52>
 8003808:	2300      	movs	r3, #0
 800380a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <prvProcessTimerOrBlockTask+0x94>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	f7ff f80d 	bl	8002838 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800381e:	f7ff fa41 	bl	8002ca4 <xTaskResumeAll>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <prvProcessTimerOrBlockTask+0x98>)
 800382a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	f3bf 8f6f 	isb	sy
    }
 8003838:	e001      	b.n	800383e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800383a:	f7ff fa33 	bl	8002ca4 <xTaskResumeAll>
    }
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000358 	.word	0x20000358
 800384c:	2000035c 	.word	0x2000035c
 8003850:	e000ed04 	.word	0xe000ed04

08003854 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <prvGetNextExpireTime+0x44>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <prvGetNextExpireTime+0x16>
 8003866:	2201      	movs	r2, #1
 8003868:	e000      	b.n	800386c <prvGetNextExpireTime+0x18>
 800386a:	2200      	movs	r2, #0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <prvGetNextExpireTime+0x44>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e001      	b.n	8003888 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003888:	68fb      	ldr	r3, [r7, #12]
    }
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000354 	.word	0x20000354

0800389c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80038a4:	f7ff fa90 	bl	8002dc8 <xTaskGetTickCount>
 80038a8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <prvSampleTimeNow+0x3c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d205      	bcs.n	80038c0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80038b4:	f000 f91a 	bl	8003aec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e002      	b.n	80038c6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80038c6:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <prvSampleTimeNow+0x3c>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80038cc:	68fb      	ldr	r3, [r7, #12]
    }
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000364 	.word	0x20000364

080038dc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d812      	bhi.n	8003928 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	1ad2      	subs	r2, r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	429a      	cmp	r2, r3
 800390e:	d302      	bcc.n	8003916 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003910:	2301      	movs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e01b      	b.n	800394e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <prvInsertTimerInActiveList+0x7c>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3304      	adds	r3, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f7fe fa2f 	bl	8001d84 <vListInsert>
 8003926:	e012      	b.n	800394e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d206      	bcs.n	800393e <prvInsertTimerInActiveList+0x62>
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d302      	bcc.n	800393e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003938:	2301      	movs	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e007      	b.n	800394e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <prvInsertTimerInActiveList+0x80>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3304      	adds	r3, #4
 8003946:	4619      	mov	r1, r3
 8003948:	4610      	mov	r0, r2
 800394a:	f7fe fa1b 	bl	8001d84 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800394e:	697b      	ldr	r3, [r7, #20]
    }
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000358 	.word	0x20000358
 800395c:	20000354 	.word	0x20000354

08003960 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003966:	e0ae      	b.n	8003ac6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f2c0 80aa 	blt.w	8003ac4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	3304      	adds	r3, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fa38 	bl	8001df6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003986:	1d3b      	adds	r3, r7, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff87 	bl	800389c <prvSampleTimeNow>
 800398e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b09      	cmp	r3, #9
 8003994:	f200 8097 	bhi.w	8003ac6 <prvProcessReceivedCommands+0x166>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <prvProcessReceivedCommands+0x40>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039c9 	.word	0x080039c9
 80039a4:	080039c9 	.word	0x080039c9
 80039a8:	080039c9 	.word	0x080039c9
 80039ac:	08003a3d 	.word	0x08003a3d
 80039b0:	08003a51 	.word	0x08003a51
 80039b4:	08003a9b 	.word	0x08003a9b
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039c9 	.word	0x080039c9
 80039c0:	08003a3d 	.word	0x08003a3d
 80039c4:	08003a51 	.word	0x08003a51
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	18d1      	adds	r1, r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a3a      	ldr	r2, [r7, #32]
 80039e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039e8:	f7ff ff78 	bl	80038dc <prvInsertTimerInActiveList>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d069      	beq.n	8003ac6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039f8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d05e      	beq.n	8003ac6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	441a      	add	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	2100      	movs	r1, #0
 8003a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a1a:	f7ff fe21 	bl	8003660 <xTimerGenericCommand>
 8003a1e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d14f      	bne.n	8003ac6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	61bb      	str	r3, [r7, #24]
    }
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003a4e:	e03a      	b.n	8003ac6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	617b      	str	r3, [r7, #20]
    }
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	18d1      	adds	r1, r2, r3
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	6a3a      	ldr	r2, [r7, #32]
 8003a92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a94:	f7ff ff22 	bl	80038dc <prvInsertTimerInActiveList>
                        break;
 8003a98:	e015      	b.n	8003ac6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aaa:	f000 fbef 	bl	800428c <vPortFree>
 8003aae:	e00a      	b.n	8003ac6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ac2:	e000      	b.n	8003ac6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ac4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <prvProcessReceivedCommands+0x188>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f107 0108 	add.w	r1, r7, #8
 8003ace:	2200      	movs	r2, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fc69 	bl	80023a8 <xQueueReceive>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f47f af45 	bne.w	8003968 <prvProcessReceivedCommands+0x8>
        }
    }
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	3728      	adds	r7, #40	; 0x28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	2000035c 	.word	0x2000035c

08003aec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003af2:	e048      	b.n	8003b86 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003af4:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <prvSwitchTimerLists+0xc0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003afe:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <prvSwitchTimerLists+0xc0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe f972 	bl	8001df6 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02e      	beq.n	8003b86 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d90e      	bls.n	8003b58 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b46:	4b19      	ldr	r3, [pc, #100]	; (8003bac <prvSwitchTimerLists+0xc0>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f7fe f917 	bl	8001d84 <vListInsert>
 8003b56:	e016      	b.n	8003b86 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b58:	2300      	movs	r3, #0
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	2100      	movs	r1, #0
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff fd7c 	bl	8003660 <xTimerGenericCommand>
 8003b68:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	603b      	str	r3, [r7, #0]
    }
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <prvSwitchTimerLists+0xc0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1b1      	bne.n	8003af4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <prvSwitchTimerLists+0xc0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <prvSwitchTimerLists+0xc4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <prvSwitchTimerLists+0xc0>)
 8003b9c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b9e:	4a04      	ldr	r2, [pc, #16]	; (8003bb0 <prvSwitchTimerLists+0xc4>)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	6013      	str	r3, [r2, #0]
    }
 8003ba4:	bf00      	nop
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000354 	.word	0x20000354
 8003bb0:	20000358 	.word	0x20000358

08003bb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003bb8:	f000 f95e 	bl	8003e78 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <prvCheckForValidListAndQueue+0x54>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11d      	bne.n	8003c00 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003bc4:	4811      	ldr	r0, [pc, #68]	; (8003c0c <prvCheckForValidListAndQueue+0x58>)
 8003bc6:	f7fe f88c 	bl	8001ce2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003bca:	4811      	ldr	r0, [pc, #68]	; (8003c10 <prvCheckForValidListAndQueue+0x5c>)
 8003bcc:	f7fe f889 	bl	8001ce2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <prvCheckForValidListAndQueue+0x60>)
 8003bd2:	4a0e      	ldr	r2, [pc, #56]	; (8003c0c <prvCheckForValidListAndQueue+0x58>)
 8003bd4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <prvCheckForValidListAndQueue+0x64>)
 8003bd8:	4a0d      	ldr	r2, [pc, #52]	; (8003c10 <prvCheckForValidListAndQueue+0x5c>)
 8003bda:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003bdc:	2200      	movs	r2, #0
 8003bde:	210c      	movs	r1, #12
 8003be0:	200a      	movs	r0, #10
 8003be2:	f7fe f98d 	bl	8001f00 <xQueueGenericCreate>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4a07      	ldr	r2, [pc, #28]	; (8003c08 <prvCheckForValidListAndQueue+0x54>)
 8003bea:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <prvCheckForValidListAndQueue+0x54>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <prvCheckForValidListAndQueue+0x54>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4908      	ldr	r1, [pc, #32]	; (8003c1c <prvCheckForValidListAndQueue+0x68>)
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fdea 	bl	80027d4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c00:	f000 f96a 	bl	8003ed8 <vPortExitCritical>
    }
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	2000035c 	.word	0x2000035c
 8003c0c:	2000032c 	.word	0x2000032c
 8003c10:	20000340 	.word	0x20000340
 8003c14:	20000354 	.word	0x20000354
 8003c18:	20000358 	.word	0x20000358
 8003c1c:	0800b610 	.word	0x0800b610

08003c20 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3b04      	subs	r3, #4
 8003c30:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3b04      	subs	r3, #4
 8003c3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f023 0201 	bic.w	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b04      	subs	r3, #4
 8003c4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003c50:	4a0c      	ldr	r2, [pc, #48]	; (8003c84 <pxPortInitialiseStack+0x64>)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3b14      	subs	r3, #20
 8003c5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3b04      	subs	r3, #4
 8003c66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f06f 0202 	mvn.w	r2, #2
 8003c6e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3b20      	subs	r3, #32
 8003c74:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003c76:	68fb      	ldr	r3, [r7, #12]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	08003c89 	.word	0x08003c89

08003c88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <prvTaskExitError+0x54>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c9a:	d00a      	beq.n	8003cb2 <prvTaskExitError+0x2a>
        __asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
    }
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <prvTaskExitError+0x28>
        __asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	60bb      	str	r3, [r7, #8]
    }
 8003cc4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003cc6:	bf00      	nop
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0fc      	beq.n	8003cc8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	20000018 	.word	0x20000018

08003ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <pxCurrentTCBConst2>)
 8003ce2:	6819      	ldr	r1, [r3, #0]
 8003ce4:	6808      	ldr	r0, [r1, #0]
 8003ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cea:	f380 8809 	msr	PSP, r0
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f380 8811 	msr	BASEPRI, r0
 8003cfa:	4770      	bx	lr
 8003cfc:	f3af 8000 	nop.w

08003d00 <pxCurrentTCBConst2>:
 8003d00:	20000228 	.word	0x20000228
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop

08003d08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003d08:	4808      	ldr	r0, [pc, #32]	; (8003d2c <prvPortStartFirstTask+0x24>)
 8003d0a:	6800      	ldr	r0, [r0, #0]
 8003d0c:	6800      	ldr	r0, [r0, #0]
 8003d0e:	f380 8808 	msr	MSP, r0
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f380 8814 	msr	CONTROL, r0
 8003d1a:	b662      	cpsie	i
 8003d1c:	b661      	cpsie	f
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	df00      	svc	0
 8003d28:	bf00      	nop
 8003d2a:	0000      	.short	0x0000
 8003d2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop

08003d34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d3a:	4b46      	ldr	r3, [pc, #280]	; (8003e54 <xPortStartScheduler+0x120>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a46      	ldr	r2, [pc, #280]	; (8003e58 <xPortStartScheduler+0x124>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10a      	bne.n	8003d5a <xPortStartScheduler+0x26>
        __asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	613b      	str	r3, [r7, #16]
    }
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d5a:	4b3e      	ldr	r3, [pc, #248]	; (8003e54 <xPortStartScheduler+0x120>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a3f      	ldr	r2, [pc, #252]	; (8003e5c <xPortStartScheduler+0x128>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d10a      	bne.n	8003d7a <xPortStartScheduler+0x46>
        __asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	60fb      	str	r3, [r7, #12]
    }
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d7a:	4b39      	ldr	r3, [pc, #228]	; (8003e60 <xPortStartScheduler+0x12c>)
 8003d7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	22ff      	movs	r2, #255	; 0xff
 8003d8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <xPortStartScheduler+0x130>)
 8003da0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003da2:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <xPortStartScheduler+0x134>)
 8003da4:	2207      	movs	r2, #7
 8003da6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003da8:	e009      	b.n	8003dbe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003daa:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <xPortStartScheduler+0x134>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	4a2d      	ldr	r2, [pc, #180]	; (8003e68 <xPortStartScheduler+0x134>)
 8003db2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d0ef      	beq.n	8003daa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dca:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <xPortStartScheduler+0x134>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f1c3 0307 	rsb	r3, r3, #7
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d00a      	beq.n	8003dec <xPortStartScheduler+0xb8>
        __asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	60bb      	str	r3, [r7, #8]
    }
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003dec:	4b1e      	ldr	r3, [pc, #120]	; (8003e68 <xPortStartScheduler+0x134>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	4a1d      	ldr	r2, [pc, #116]	; (8003e68 <xPortStartScheduler+0x134>)
 8003df4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003df6:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <xPortStartScheduler+0x134>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dfe:	4a1a      	ldr	r2, [pc, #104]	; (8003e68 <xPortStartScheduler+0x134>)
 8003e00:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003e0a:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <xPortStartScheduler+0x138>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <xPortStartScheduler+0x138>)
 8003e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e14:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e16:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <xPortStartScheduler+0x138>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <xPortStartScheduler+0x138>)
 8003e1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e20:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003e22:	f000 f8e3 	bl	8003fec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <xPortStartScheduler+0x13c>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003e2c:	f000 f902 	bl	8004034 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e30:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <xPortStartScheduler+0x140>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <xPortStartScheduler+0x140>)
 8003e36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e3a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e3c:	f7ff ff64 	bl	8003d08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e40:	f7ff f86c 	bl	8002f1c <vTaskSwitchContext>
    prvTaskExitError();
 8003e44:	f7ff ff20 	bl	8003c88 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	e000ed00 	.word	0xe000ed00
 8003e58:	410fc271 	.word	0x410fc271
 8003e5c:	410fc270 	.word	0x410fc270
 8003e60:	e000e400 	.word	0xe000e400
 8003e64:	20000368 	.word	0x20000368
 8003e68:	2000036c 	.word	0x2000036c
 8003e6c:	e000ed20 	.word	0xe000ed20
 8003e70:	20000018 	.word	0x20000018
 8003e74:	e000ef34 	.word	0xe000ef34

08003e78 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	607b      	str	r3, [r7, #4]
    }
 8003e90:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <vPortEnterCritical+0x58>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3301      	adds	r3, #1
 8003e98:	4a0d      	ldr	r2, [pc, #52]	; (8003ed0 <vPortEnterCritical+0x58>)
 8003e9a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <vPortEnterCritical+0x58>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d10f      	bne.n	8003ec4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <vPortEnterCritical+0x5c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <vPortEnterCritical+0x4c>
        __asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	603b      	str	r3, [r7, #0]
    }
 8003ec0:	bf00      	nop
 8003ec2:	e7fe      	b.n	8003ec2 <vPortEnterCritical+0x4a>
    }
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	20000018 	.word	0x20000018
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003ede:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <vPortExitCritical+0x50>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <vPortExitCritical+0x24>
        __asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	607b      	str	r3, [r7, #4]
    }
 8003ef8:	bf00      	nop
 8003efa:	e7fe      	b.n	8003efa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <vPortExitCritical+0x50>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <vPortExitCritical+0x50>)
 8003f04:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <vPortExitCritical+0x50>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <vPortExitCritical+0x42>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f383 8811 	msr	BASEPRI, r3
    }
 8003f18:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000018 	.word	0x20000018
 8003f2c:	00000000 	.word	0x00000000

08003f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003f30:	f3ef 8009 	mrs	r0, PSP
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <pxCurrentTCBConst>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	f01e 0f10 	tst.w	lr, #16
 8003f40:	bf08      	it	eq
 8003f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4a:	6010      	str	r0, [r2, #0]
 8003f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f54:	f380 8811 	msr	BASEPRI, r0
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f7fe ffdc 	bl	8002f1c <vTaskSwitchContext>
 8003f64:	f04f 0000 	mov.w	r0, #0
 8003f68:	f380 8811 	msr	BASEPRI, r0
 8003f6c:	bc09      	pop	{r0, r3}
 8003f6e:	6819      	ldr	r1, [r3, #0]
 8003f70:	6808      	ldr	r0, [r1, #0]
 8003f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f76:	f01e 0f10 	tst.w	lr, #16
 8003f7a:	bf08      	it	eq
 8003f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f80:	f380 8809 	msr	PSP, r0
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	f3af 8000 	nop.w

08003f90 <pxCurrentTCBConst>:
 8003f90:	20000228 	.word	0x20000228
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop

08003f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	607b      	str	r3, [r7, #4]
    }
 8003fb0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003fb2:	f002 f9b3 	bl	800631c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003fb6:	f7fe ff17 	bl	8002de8 <xTaskIncrementTick>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003fc0:	f002 fa0a 	bl	80063d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <SysTick_Handler+0x50>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e001      	b.n	8003fd2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003fce:	f002 f9e7 	bl	80063a0 <SEGGER_SYSVIEW_RecordExitISR>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f383 8811 	msr	BASEPRI, r3
    }
 8003fdc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <vPortSetupTimerInterrupt+0x34>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <vPortSetupTimerInterrupt+0x38>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <vPortSetupTimerInterrupt+0x3c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0a      	ldr	r2, [pc, #40]	; (800402c <vPortSetupTimerInterrupt+0x40>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	4a09      	ldr	r2, [pc, #36]	; (8004030 <vPortSetupTimerInterrupt+0x44>)
 800400a:	3b01      	subs	r3, #1
 800400c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <vPortSetupTimerInterrupt+0x34>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000e010 	.word	0xe000e010
 8004024:	e000e018 	.word	0xe000e018
 8004028:	20000034 	.word	0x20000034
 800402c:	10624dd3 	.word	0x10624dd3
 8004030:	e000e014 	.word	0xe000e014

08004034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004044 <vPortEnableVFP+0x10>
 8004038:	6801      	ldr	r1, [r0, #0]
 800403a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800403e:	6001      	str	r1, [r0, #0]
 8004040:	4770      	bx	lr
 8004042:	0000      	.short	0x0000
 8004044:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop

0800404c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004052:	f3ef 8305 	mrs	r3, IPSR
 8004056:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b0f      	cmp	r3, #15
 800405c:	d914      	bls.n	8004088 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800405e:	4a17      	ldr	r2, [pc, #92]	; (80040bc <vPortValidateInterruptPriority+0x70>)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004068:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <vPortValidateInterruptPriority+0x74>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	7afa      	ldrb	r2, [r7, #11]
 800406e:	429a      	cmp	r2, r3
 8004070:	d20a      	bcs.n	8004088 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	607b      	str	r3, [r7, #4]
    }
 8004084:	bf00      	nop
 8004086:	e7fe      	b.n	8004086 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004088:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <vPortValidateInterruptPriority+0x78>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <vPortValidateInterruptPriority+0x7c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d90a      	bls.n	80040ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	603b      	str	r3, [r7, #0]
    }
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <vPortValidateInterruptPriority+0x60>
    }
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e000e3f0 	.word	0xe000e3f0
 80040c0:	20000368 	.word	0x20000368
 80040c4:	e000ed0c 	.word	0xe000ed0c
 80040c8:	2000036c 	.word	0x2000036c

080040cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80040d8:	f7fe fdd6 	bl	8002c88 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80040dc:	4b65      	ldr	r3, [pc, #404]	; (8004274 <pvPortMalloc+0x1a8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80040e4:	f000 f934 	bl	8004350 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040e8:	4b63      	ldr	r3, [pc, #396]	; (8004278 <pvPortMalloc+0x1ac>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f040 80a7 	bne.w	8004244 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d02d      	beq.n	8004158 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80040fc:	2208      	movs	r2, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d227      	bcs.n	8004158 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004108:	2208      	movs	r2, #8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	2b00      	cmp	r3, #0
 8004118:	d021      	beq.n	800415e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f023 0307 	bic.w	r3, r3, #7
 8004120:	3308      	adds	r3, #8
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d214      	bcs.n	8004152 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	3308      	adds	r3, #8
 8004130:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	2b00      	cmp	r3, #0
 800413a:	d010      	beq.n	800415e <pvPortMalloc+0x92>
        __asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	617b      	str	r3, [r7, #20]
    }
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004156:	e002      	b.n	800415e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	e000      	b.n	8004160 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800415e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d06e      	beq.n	8004244 <pvPortMalloc+0x178>
 8004166:	4b45      	ldr	r3, [pc, #276]	; (800427c <pvPortMalloc+0x1b0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d869      	bhi.n	8004244 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004170:	4b43      	ldr	r3, [pc, #268]	; (8004280 <pvPortMalloc+0x1b4>)
 8004172:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004174:	4b42      	ldr	r3, [pc, #264]	; (8004280 <pvPortMalloc+0x1b4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800417a:	e004      	b.n	8004186 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	d903      	bls.n	8004198 <pvPortMalloc+0xcc>
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f1      	bne.n	800417c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004198:	4b36      	ldr	r3, [pc, #216]	; (8004274 <pvPortMalloc+0x1a8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419e:	429a      	cmp	r2, r3
 80041a0:	d050      	beq.n	8004244 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2208      	movs	r2, #8
 80041a8:	4413      	add	r3, r2
 80041aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	1ad2      	subs	r2, r2, r3
 80041bc:	2308      	movs	r3, #8
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d91f      	bls.n	8004204 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <pvPortMalloc+0x120>
        __asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	613b      	str	r3, [r7, #16]
    }
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	1ad2      	subs	r2, r2, r3
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041fe:	69b8      	ldr	r0, [r7, #24]
 8004200:	f000 f908 	bl	8004414 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <pvPortMalloc+0x1b0>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	4a1b      	ldr	r2, [pc, #108]	; (800427c <pvPortMalloc+0x1b0>)
 8004210:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004212:	4b1a      	ldr	r3, [pc, #104]	; (800427c <pvPortMalloc+0x1b0>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <pvPortMalloc+0x1b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d203      	bcs.n	8004226 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800421e:	4b17      	ldr	r3, [pc, #92]	; (800427c <pvPortMalloc+0x1b0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a18      	ldr	r2, [pc, #96]	; (8004284 <pvPortMalloc+0x1b8>)
 8004224:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <pvPortMalloc+0x1ac>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	431a      	orrs	r2, r3
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800423a:	4b13      	ldr	r3, [pc, #76]	; (8004288 <pvPortMalloc+0x1bc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	4a11      	ldr	r2, [pc, #68]	; (8004288 <pvPortMalloc+0x1bc>)
 8004242:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004244:	f7fe fd2e 	bl	8002ca4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <pvPortMalloc+0x19c>
        __asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	60fb      	str	r3, [r7, #12]
    }
 8004264:	bf00      	nop
 8004266:	e7fe      	b.n	8004266 <pvPortMalloc+0x19a>
    return pvReturn;
 8004268:	69fb      	ldr	r3, [r7, #28]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3728      	adds	r7, #40	; 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20012f78 	.word	0x20012f78
 8004278:	20012f8c 	.word	0x20012f8c
 800427c:	20012f7c 	.word	0x20012f7c
 8004280:	20012f70 	.word	0x20012f70
 8004284:	20012f80 	.word	0x20012f80
 8004288:	20012f84 	.word	0x20012f84

0800428c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d04d      	beq.n	800433a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800429e:	2308      	movs	r3, #8
 80042a0:	425b      	negs	r3, r3
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4413      	add	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	4b24      	ldr	r3, [pc, #144]	; (8004344 <vPortFree+0xb8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <vPortFree+0x44>
        __asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	60fb      	str	r3, [r7, #12]
    }
 80042cc:	bf00      	nop
 80042ce:	e7fe      	b.n	80042ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <vPortFree+0x62>
        __asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	60bb      	str	r3, [r7, #8]
    }
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4b14      	ldr	r3, [pc, #80]	; (8004344 <vPortFree+0xb8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01e      	beq.n	800433a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d11a      	bne.n	800433a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <vPortFree+0xb8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	43db      	mvns	r3, r3
 800430e:	401a      	ands	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004314:	f7fe fcb8 	bl	8002c88 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <vPortFree+0xbc>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4413      	add	r3, r2
 8004322:	4a09      	ldr	r2, [pc, #36]	; (8004348 <vPortFree+0xbc>)
 8004324:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004326:	6938      	ldr	r0, [r7, #16]
 8004328:	f000 f874 	bl	8004414 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800432c:	4b07      	ldr	r3, [pc, #28]	; (800434c <vPortFree+0xc0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	4a06      	ldr	r2, [pc, #24]	; (800434c <vPortFree+0xc0>)
 8004334:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004336:	f7fe fcb5 	bl	8002ca4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800433a:	bf00      	nop
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20012f8c 	.word	0x20012f8c
 8004348:	20012f7c 	.word	0x20012f7c
 800434c:	20012f88 	.word	0x20012f88

08004350 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004356:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800435a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <prvHeapInit+0xac>)
 800435e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3307      	adds	r3, #7
 800436e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0307 	bic.w	r3, r3, #7
 8004376:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	4a1f      	ldr	r2, [pc, #124]	; (80043fc <prvHeapInit+0xac>)
 8004380:	4413      	add	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004388:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <prvHeapInit+0xb0>)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800438e:	4b1c      	ldr	r3, [pc, #112]	; (8004400 <prvHeapInit+0xb0>)
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800439c:	2208      	movs	r2, #8
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0307 	bic.w	r3, r3, #7
 80043aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a15      	ldr	r2, [pc, #84]	; (8004404 <prvHeapInit+0xb4>)
 80043b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80043b2:	4b14      	ldr	r3, [pc, #80]	; (8004404 <prvHeapInit+0xb4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <prvHeapInit+0xb4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <prvHeapInit+0xb4>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <prvHeapInit+0xb8>)
 80043de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4a09      	ldr	r2, [pc, #36]	; (800440c <prvHeapInit+0xbc>)
 80043e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043e8:	4b09      	ldr	r3, [pc, #36]	; (8004410 <prvHeapInit+0xc0>)
 80043ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20000370 	.word	0x20000370
 8004400:	20012f70 	.word	0x20012f70
 8004404:	20012f78 	.word	0x20012f78
 8004408:	20012f80 	.word	0x20012f80
 800440c:	20012f7c 	.word	0x20012f7c
 8004410:	20012f8c 	.word	0x20012f8c

08004414 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800441c:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <prvInsertBlockIntoFreeList+0xac>)
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e002      	b.n	8004428 <prvInsertBlockIntoFreeList+0x14>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	d8f7      	bhi.n	8004422 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4413      	add	r3, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	d108      	bne.n	8004456 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	441a      	add	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	441a      	add	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d118      	bne.n	800449c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d00d      	beq.n	8004492 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	441a      	add	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	e008      	b.n	80044a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004492:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e003      	b.n	80044a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d002      	beq.n	80044b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20012f70 	.word	0x20012f70
 80044c4:	20012f78 	.word	0x20012f78

080044c8 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d161      	bne.n	800459e <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a33      	ldr	r2, [pc, #204]	; (80045ac <GPIO_PeriClockControl+0xe4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d106      	bne.n	80044f0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80044e2:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a32      	ldr	r2, [pc, #200]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 80044ee:	e056      	b.n	800459e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a30      	ldr	r2, [pc, #192]	; (80045b4 <GPIO_PeriClockControl+0xec>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d106      	bne.n	8004506 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80044f8:	4b2d      	ldr	r3, [pc, #180]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	4a2c      	ldr	r2, [pc, #176]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 80044fe:	f043 0302 	orr.w	r3, r3, #2
 8004502:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004504:	e04b      	b.n	800459e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <GPIO_PeriClockControl+0xf0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d106      	bne.n	800451c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800450e:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	4a27      	ldr	r2, [pc, #156]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 8004514:	f043 0304 	orr.w	r3, r3, #4
 8004518:	6313      	str	r3, [r2, #48]	; 0x30
}
 800451a:	e040      	b.n	800459e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a27      	ldr	r2, [pc, #156]	; (80045bc <GPIO_PeriClockControl+0xf4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d106      	bne.n	8004532 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8004524:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 800452a:	f043 0308 	orr.w	r3, r3, #8
 800452e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004530:	e035      	b.n	800459e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a22      	ldr	r2, [pc, #136]	; (80045c0 <GPIO_PeriClockControl+0xf8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d106      	bne.n	8004548 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800453a:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 8004540:	f043 0310 	orr.w	r3, r3, #16
 8004544:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004546:	e02a      	b.n	800459e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <GPIO_PeriClockControl+0xfc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d106      	bne.n	800455e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8004550:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 8004556:	f043 0320 	orr.w	r3, r3, #32
 800455a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800455c:	e01f      	b.n	800459e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <GPIO_PeriClockControl+0x100>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d106      	bne.n	8004574 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	4a11      	ldr	r2, [pc, #68]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 800456c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004570:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004572:	e014      	b.n	800459e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a15      	ldr	r2, [pc, #84]	; (80045cc <GPIO_PeriClockControl+0x104>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d106      	bne.n	800458a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 8004582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004586:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004588:	e009      	b.n	800459e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <GPIO_PeriClockControl+0x108>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d105      	bne.n	800459e <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8004592:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	4a06      	ldr	r2, [pc, #24]	; (80045b0 <GPIO_PeriClockControl+0xe8>)
 8004598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40020000 	.word	0x40020000
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40020400 	.word	0x40020400
 80045b8:	40020800 	.word	0x40020800
 80045bc:	40020c00 	.word	0x40020c00
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40021400 	.word	0x40021400
 80045c8:	40021800 	.word	0x40021800
 80045cc:	40021c00 	.word	0x40021c00
 80045d0:	40022000 	.word	0x40022000

080045d4 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2101      	movs	r1, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff ff6e 	bl	80044c8 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	795b      	ldrb	r3, [r3, #5]
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d820      	bhi.n	8004636 <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	795b      	ldrb	r3, [r3, #5]
 80045f8:	461a      	mov	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	791b      	ldrb	r3, [r3, #4]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	791b      	ldrb	r3, [r3, #4]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	2103      	movs	r1, #3
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	4619      	mov	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	400a      	ands	r2, r1
 8004622:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e0cb      	b.n	80047ce <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	795b      	ldrb	r3, [r3, #5]
 800463a:	2b04      	cmp	r3, #4
 800463c:	d117      	bne.n	800466e <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800463e:	4b4b      	ldr	r3, [pc, #300]	; (800476c <GPIO_Init+0x198>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	7912      	ldrb	r2, [r2, #4]
 8004646:	4611      	mov	r1, r2
 8004648:	2201      	movs	r2, #1
 800464a:	408a      	lsls	r2, r1
 800464c:	4611      	mov	r1, r2
 800464e:	4a47      	ldr	r2, [pc, #284]	; (800476c <GPIO_Init+0x198>)
 8004650:	430b      	orrs	r3, r1
 8004652:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004654:	4b45      	ldr	r3, [pc, #276]	; (800476c <GPIO_Init+0x198>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	7912      	ldrb	r2, [r2, #4]
 800465c:	4611      	mov	r1, r2
 800465e:	2201      	movs	r2, #1
 8004660:	408a      	lsls	r2, r1
 8004662:	43d2      	mvns	r2, r2
 8004664:	4611      	mov	r1, r2
 8004666:	4a41      	ldr	r2, [pc, #260]	; (800476c <GPIO_Init+0x198>)
 8004668:	400b      	ands	r3, r1
 800466a:	6093      	str	r3, [r2, #8]
 800466c:	e035      	b.n	80046da <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	795b      	ldrb	r3, [r3, #5]
 8004672:	2b05      	cmp	r3, #5
 8004674:	d117      	bne.n	80046a6 <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004676:	4b3d      	ldr	r3, [pc, #244]	; (800476c <GPIO_Init+0x198>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	7912      	ldrb	r2, [r2, #4]
 800467e:	4611      	mov	r1, r2
 8004680:	2201      	movs	r2, #1
 8004682:	408a      	lsls	r2, r1
 8004684:	4611      	mov	r1, r2
 8004686:	4a39      	ldr	r2, [pc, #228]	; (800476c <GPIO_Init+0x198>)
 8004688:	430b      	orrs	r3, r1
 800468a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800468c:	4b37      	ldr	r3, [pc, #220]	; (800476c <GPIO_Init+0x198>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	7912      	ldrb	r2, [r2, #4]
 8004694:	4611      	mov	r1, r2
 8004696:	2201      	movs	r2, #1
 8004698:	408a      	lsls	r2, r1
 800469a:	43d2      	mvns	r2, r2
 800469c:	4611      	mov	r1, r2
 800469e:	4a33      	ldr	r2, [pc, #204]	; (800476c <GPIO_Init+0x198>)
 80046a0:	400b      	ands	r3, r1
 80046a2:	60d3      	str	r3, [r2, #12]
 80046a4:	e019      	b.n	80046da <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	795b      	ldrb	r3, [r3, #5]
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d115      	bne.n	80046da <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80046ae:	4b2f      	ldr	r3, [pc, #188]	; (800476c <GPIO_Init+0x198>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	7912      	ldrb	r2, [r2, #4]
 80046b6:	4611      	mov	r1, r2
 80046b8:	2201      	movs	r2, #1
 80046ba:	408a      	lsls	r2, r1
 80046bc:	4611      	mov	r1, r2
 80046be:	4a2b      	ldr	r2, [pc, #172]	; (800476c <GPIO_Init+0x198>)
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80046c4:	4b29      	ldr	r3, [pc, #164]	; (800476c <GPIO_Init+0x198>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	7912      	ldrb	r2, [r2, #4]
 80046cc:	4611      	mov	r1, r2
 80046ce:	2201      	movs	r2, #1
 80046d0:	408a      	lsls	r2, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	4a25      	ldr	r2, [pc, #148]	; (800476c <GPIO_Init+0x198>)
 80046d6:	430b      	orrs	r3, r1
 80046d8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	791b      	ldrb	r3, [r3, #4]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	791b      	ldrb	r3, [r3, #4]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <GPIO_Init+0x19c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d04e      	beq.n	8004794 <GPIO_Init+0x1c0>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <GPIO_Init+0x1a0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d032      	beq.n	8004766 <GPIO_Init+0x192>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <GPIO_Init+0x1a4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02b      	beq.n	8004762 <GPIO_Init+0x18e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1b      	ldr	r2, [pc, #108]	; (800477c <GPIO_Init+0x1a8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d024      	beq.n	800475e <GPIO_Init+0x18a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a19      	ldr	r2, [pc, #100]	; (8004780 <GPIO_Init+0x1ac>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01d      	beq.n	800475a <GPIO_Init+0x186>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a18      	ldr	r2, [pc, #96]	; (8004784 <GPIO_Init+0x1b0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d016      	beq.n	8004756 <GPIO_Init+0x182>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a16      	ldr	r2, [pc, #88]	; (8004788 <GPIO_Init+0x1b4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00f      	beq.n	8004752 <GPIO_Init+0x17e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a15      	ldr	r2, [pc, #84]	; (800478c <GPIO_Init+0x1b8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d008      	beq.n	800474e <GPIO_Init+0x17a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a13      	ldr	r2, [pc, #76]	; (8004790 <GPIO_Init+0x1bc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <GPIO_Init+0x176>
 8004746:	2308      	movs	r3, #8
 8004748:	e025      	b.n	8004796 <GPIO_Init+0x1c2>
 800474a:	2300      	movs	r3, #0
 800474c:	e023      	b.n	8004796 <GPIO_Init+0x1c2>
 800474e:	2307      	movs	r3, #7
 8004750:	e021      	b.n	8004796 <GPIO_Init+0x1c2>
 8004752:	2306      	movs	r3, #6
 8004754:	e01f      	b.n	8004796 <GPIO_Init+0x1c2>
 8004756:	2305      	movs	r3, #5
 8004758:	e01d      	b.n	8004796 <GPIO_Init+0x1c2>
 800475a:	2304      	movs	r3, #4
 800475c:	e01b      	b.n	8004796 <GPIO_Init+0x1c2>
 800475e:	2303      	movs	r3, #3
 8004760:	e019      	b.n	8004796 <GPIO_Init+0x1c2>
 8004762:	2302      	movs	r3, #2
 8004764:	e017      	b.n	8004796 <GPIO_Init+0x1c2>
 8004766:	2301      	movs	r3, #1
 8004768:	e015      	b.n	8004796 <GPIO_Init+0x1c2>
 800476a:	bf00      	nop
 800476c:	40013c00 	.word	0x40013c00
 8004770:	40020000 	.word	0x40020000
 8004774:	40020400 	.word	0x40020400
 8004778:	40020800 	.word	0x40020800
 800477c:	40020c00 	.word	0x40020c00
 8004780:	40021000 	.word	0x40021000
 8004784:	40021400 	.word	0x40021400
 8004788:	40021800 	.word	0x40021800
 800478c:	40021c00 	.word	0x40021c00
 8004790:	40022000 	.word	0x40022000
 8004794:	2300      	movs	r3, #0
 8004796:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8004798:	4b59      	ldr	r3, [pc, #356]	; (8004900 <GPIO_Init+0x32c>)
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479c:	4a58      	ldr	r2, [pc, #352]	; (8004900 <GPIO_Init+0x32c>)
 800479e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047a2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80047a4:	7c7a      	ldrb	r2, [r7, #17]
 80047a6:	7cbb      	ldrb	r3, [r7, #18]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	fa02 f103 	lsl.w	r1, r2, r3
 80047ae:	4a55      	ldr	r2, [pc, #340]	; (8004904 <GPIO_Init+0x330>)
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	3302      	adds	r3, #2
 80047b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80047b8:	4b53      	ldr	r3, [pc, #332]	; (8004908 <GPIO_Init+0x334>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	7912      	ldrb	r2, [r2, #4]
 80047c0:	4611      	mov	r1, r2
 80047c2:	2201      	movs	r2, #1
 80047c4:	408a      	lsls	r2, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	4a4f      	ldr	r2, [pc, #316]	; (8004908 <GPIO_Init+0x334>)
 80047ca:	430b      	orrs	r3, r1
 80047cc:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	799b      	ldrb	r3, [r3, #6]
 80047d2:	461a      	mov	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	791b      	ldrb	r3, [r3, #4]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	791b      	ldrb	r3, [r3, #4]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	2103      	movs	r1, #3
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	43db      	mvns	r3, r3
 80047f4:	4619      	mov	r1, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	400a      	ands	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6899      	ldr	r1, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	430a      	orrs	r2, r1
 800480c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	79db      	ldrb	r3, [r3, #7]
 8004812:	461a      	mov	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	791b      	ldrb	r3, [r3, #4]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	791b      	ldrb	r3, [r3, #4]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	2103      	movs	r1, #3
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	4619      	mov	r1, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	400a      	ands	r2, r1
 800483c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68d9      	ldr	r1, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	430a      	orrs	r2, r1
 800484c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	7a1b      	ldrb	r3, [r3, #8]
 8004852:	461a      	mov	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	791b      	ldrb	r3, [r3, #4]
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	791b      	ldrb	r3, [r3, #4]
 8004868:	4619      	mov	r1, r3
 800486a:	2301      	movs	r3, #1
 800486c:	408b      	lsls	r3, r1
 800486e:	43db      	mvns	r3, r3
 8004870:	4619      	mov	r1, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	400a      	ands	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6859      	ldr	r1, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	795b      	ldrb	r3, [r3, #5]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d131      	bne.n	80048f6 <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	791b      	ldrb	r3, [r3, #4]
 8004896:	08db      	lsrs	r3, r3, #3
 8004898:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	791b      	ldrb	r3, [r3, #4]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	7c3a      	ldrb	r2, [r7, #16]
 80048aa:	3208      	adds	r2, #8
 80048ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	220f      	movs	r2, #15
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	4618      	mov	r0, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	7c3a      	ldrb	r2, [r7, #16]
 80048c4:	4001      	ands	r1, r0
 80048c6:	3208      	adds	r2, #8
 80048c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	7c3a      	ldrb	r2, [r7, #16]
 80048d2:	3208      	adds	r2, #8
 80048d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	7a5b      	ldrb	r3, [r3, #9]
 80048dc:	461a      	mov	r2, r3
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	4618      	mov	r0, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	7c3a      	ldrb	r2, [r7, #16]
 80048ee:	4301      	orrs	r1, r0
 80048f0:	3208      	adds	r2, #8
 80048f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80048f6:	bf00      	nop
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40023800 	.word	0x40023800
 8004904:	40013800 	.word	0x40013800
 8004908:	40013c00 	.word	0x40013c00

0800490c <GPIO_ReadFromInputPin>:
 *
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	fa22 f303 	lsr.w	r3, r2, r3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]

   return value;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
 8004944:	4613      	mov	r3, r2
 8004946:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8004948:	78bb      	ldrb	r3, [r7, #2]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d109      	bne.n	8004962 <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f202 	lsl.w	r2, r1, r2
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 8004960:	e009      	b.n	8004976 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	2101      	movs	r1, #1
 800496a:	fa01 f202 	lsl.w	r2, r1, r2
 800496e:	43d2      	mvns	r2, r2
 8004970:	401a      	ands	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	615a      	str	r2, [r3, #20]
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <I2C_PeripheralControl>:


#include "stm32f407xx_i2c.h"
#include "stm32f407xx_rcc.h"

void I2C_PeripheralControl(I2C_RegDef_t *I2Cx, uint8_t EnOrDi) {
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d106      	bne.n	80049a2 <I2C_PeripheralControl+0x20>
		I2Cx->CR1 |= (1 << I2C_CR1_PE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f043 0201 	orr.w	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	else
		I2Cx->CR1 &= ~(1 << 0);
}
 80049a0:	e005      	b.n	80049ae <I2C_PeripheralControl+0x2c>
		I2Cx->CR1 &= ~(1 << 0);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 0201 	bic.w	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *I2Cx, uint8_t EnorDi) {
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d11f      	bne.n	8004a0e <I2C_PeriClockControl+0x52>
		if(I2Cx == I2C1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <I2C_PeriClockControl+0x60>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d106      	bne.n	80049e4 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <I2C_PeriClockControl+0x64>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <I2C_PeriClockControl+0x64>)
 80049dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049e0:	6413      	str	r3, [r2, #64]	; 0x40
		else if (I2Cx == I2C3)
			I2C3_PCLK_EN();
	} else {
		//TODO
	}
}
 80049e2:	e014      	b.n	8004a0e <I2C_PeriClockControl+0x52>
		else if (I2Cx == I2C2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a0f      	ldr	r2, [pc, #60]	; (8004a24 <I2C_PeriClockControl+0x68>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d106      	bne.n	80049fa <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <I2C_PeriClockControl+0x64>)
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <I2C_PeriClockControl+0x64>)
 80049f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80049f8:	e009      	b.n	8004a0e <I2C_PeriClockControl+0x52>
		else if (I2Cx == I2C3)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <I2C_PeriClockControl+0x6c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d105      	bne.n	8004a0e <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8004a02:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <I2C_PeriClockControl+0x64>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	4a06      	ldr	r2, [pc, #24]	; (8004a20 <I2C_PeriClockControl+0x64>)
 8004a08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a0c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40005400 	.word	0x40005400
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40005800 	.word	0x40005800
 8004a28:	40005c00 	.word	0x40005c00

08004a2c <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff ffbc 	bl	80049bc <I2C_PeriClockControl>

	I2C_PeripheralControl(pI2CHandle->pI2Cx, DISABLE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ff99 	bl	8004982 <I2C_PeripheralControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	7a5b      	ldrb	r3, [r3, #9]
 8004a54:	029b      	lsls	r3, r3, #10
 8004a56:	461a      	mov	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 8004a6a:	f000 f9cf 	bl	8004e0c <RCC_GetPCLK1Value>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4a4a      	ldr	r2, [pc, #296]	; (8004b9c <I2C_Init+0x170>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0c9b      	lsrs	r3, r3, #18
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004a88:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	7a1b      	ldrb	r3, [r3, #8]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	461a      	mov	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aa2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a39      	ldr	r2, [pc, #228]	; (8004ba0 <I2C_Init+0x174>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d80f      	bhi.n	8004ade <I2C_Init+0xb2>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004abe:	f000 f9a5 	bl	8004e0c <RCC_GetPCLK1Value>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ace:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004ad0:	897b      	ldrh	r3, [r7, #10]
 8004ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e02d      	b.n	8004b3a <I2C_Init+0x10e>
	} else {
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae4:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	7a9b      	ldrb	r3, [r3, #10]
 8004aea:	039b      	lsls	r3, r3, #14
 8004aec:	461a      	mov	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	7a9b      	ldrb	r3, [r3, #10]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <I2C_Init+0xe8>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004afc:	f000 f986 	bl	8004e0c <RCC_GetPCLK1Value>
 8004b00:	4601      	mov	r1, r0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b10:	817b      	strh	r3, [r7, #10]
 8004b12:	e00c      	b.n	8004b2e <I2C_Init+0x102>
		else
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004b14:	f000 f97a 	bl	8004e0c <RCC_GetPCLK1Value>
 8004b18:	4601      	mov	r1, r0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	009a      	lsls	r2, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b2c:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004b2e:	897b      	ldrh	r3, [r7, #10]
 8004b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <I2C_Init+0x174>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d809      	bhi.n	8004b60 <I2C_Init+0x134>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8004b4c:	f000 f95e 	bl	8004e0c <RCC_GetPCLK1Value>
 8004b50:	4603      	mov	r3, r0
 8004b52:	4a12      	ldr	r2, [pc, #72]	; (8004b9c <I2C_Init+0x170>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	0c9b      	lsrs	r3, r3, #18
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e00d      	b.n	8004b7c <I2C_Init+0x150>
	else
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8004b60:	f000 f954 	bl	8004e0c <RCC_GetPCLK1Value>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	0a5b      	lsrs	r3, r3, #9
 8004b70:	4a0c      	ldr	r2, [pc, #48]	; (8004ba4 <I2C_Init+0x178>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	09db      	lsrs	r3, r3, #7
 8004b78:	3301      	adds	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004b86:	621a      	str	r2, [r3, #32]

	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fef7 	bl	8004982 <I2C_PeripheralControl>
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	431bde83 	.word	0x431bde83
 8004ba0:	000186a0 	.word	0x000186a0
 8004ba4:	00044b83 	.word	0x00044b83

08004ba8 <I2C_Read>:

uint8_t I2C_Read(I2C_RegDef_t *I2Cx, uint8_t address, uint8_t reg) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	70bb      	strb	r3, [r7, #2]
	I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8004bb8:	78f9      	ldrb	r1, [r7, #3]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f855 	bl	8004c6e <I2C_Start>
	I2C_WriteData(I2Cx, reg);
 8004bc4:	78bb      	ldrb	r3, [r7, #2]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8fd 	bl	8004dc8 <I2C_WriteData>
	I2C_Stop(I2Cx);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f8a6 	bl	8004d20 <I2C_Stop>
	I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_DISABLE);
 8004bd4:	78f9      	ldrb	r1, [r7, #3]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2201      	movs	r2, #1
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f847 	bl	8004c6e <I2C_Start>
	return I2C_ReadNack(I2Cx);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8c6 	bl	8004d72 <I2C_ReadNack>
 8004be6:	4603      	mov	r3, r0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_Write>:
		else
			*data++ = I2C_ReadAck(I2Cx);
	}
}

void I2C_Write(I2C_RegDef_t *I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4603      	mov	r3, r0
 8004c00:	70fb      	strb	r3, [r7, #3]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70bb      	strb	r3, [r7, #2]
 8004c06:	4613      	mov	r3, r2
 8004c08:	707b      	strb	r3, [r7, #1]
	I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8004c0a:	78f9      	ldrb	r1, [r7, #3]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2200      	movs	r2, #0
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f82c 	bl	8004c6e <I2C_Start>
	I2C_WriteData(I2Cx, reg);
 8004c16:	78bb      	ldrb	r3, [r7, #2]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f8d4 	bl	8004dc8 <I2C_WriteData>
	I2C_WriteData(I2Cx, data);
 8004c20:	787b      	ldrb	r3, [r7, #1]
 8004c22:	4619      	mov	r1, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8cf 	bl	8004dc8 <I2C_WriteData>
	I2C_Stop(I2Cx);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f878 	bl	8004d20 <I2C_Stop>
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <I2C_IsDeviceConnected>:
	I2C_WriteData(I2Cx, reg);
	while(count--) I2C_WriteData(I2Cx, *data++);
	I2C_Stop(I2Cx);
}

uint8_t I2C_IsDeviceConnected(I2C_RegDef_t* I2Cx, uint8_t address) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	73fb      	strb	r3, [r7, #15]
	if(!I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) connected = 1;
 8004c48:	78f9      	ldrb	r1, [r7, #3]
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f80d 	bl	8004c6e <I2C_Start>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <I2C_IsDeviceConnected+0x26>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
	I2C_Stop(I2Cx);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f85e 	bl	8004d20 <I2C_Stop>
	return connected;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <I2C_Start>:

int16_t I2C_Start(I2C_RegDef_t* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	4608      	mov	r0, r1
 8004c78:	4611      	mov	r1, r2
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	70fb      	strb	r3, [r7, #3]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70bb      	strb	r3, [r7, #2]
 8004c84:	4613      	mov	r3, r2
 8004c86:	707b      	strb	r3, [r7, #1]
	I2Cx->CR1 |= (1 << I2C_CR1_START);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]

	uint32_t timeout = I2C_TIMEOUT;
 8004c94:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004c98:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_SB)))
 8004c9a:	e007      	b.n	8004cac <I2C_Start+0x3e>
		if(--timeout == 0) return 1;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <I2C_Start+0x3e>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e033      	b.n	8004d14 <I2C_Start+0xa6>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_SB)))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f1      	beq.n	8004c9c <I2C_Start+0x2e>

	if(ack) I2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8004cb8:	787b      	ldrb	r3, [r7, #1]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <I2C_Start+0x5c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]

	if(direction == I2C_TRANSMITTER_MODE)
 8004cca:	78bb      	ldrb	r3, [r7, #2]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d105      	bne.n	8004cdc <I2C_Start+0x6e>
		I2Cx->DR = address & ~(0x01);
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	f023 0201 	bic.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	611a      	str	r2, [r3, #16]
 8004cda:	e006      	b.n	8004cea <I2C_Start+0x7c>
	else I2Cx->DR = address | 0x01;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	611a      	str	r2, [r3, #16]

	timeout = I2C_TIMEOUT;
 8004cea:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004cee:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_ADDR)))
 8004cf0:	e007      	b.n	8004d02 <I2C_Start+0x94>
		if(--timeout == 0) return 1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <I2C_Start+0x94>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e008      	b.n	8004d14 <I2C_Start+0xa6>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_ADDR)))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f1      	beq.n	8004cf2 <I2C_Start+0x84>

	I2Cx->SR2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]

	return 0;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <I2C_Stop>:

uint8_t I2C_Stop(I2C_RegDef_t* I2Cx) {
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	uint32_t timeout = I2C_TIMEOUT;
 8004d28:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004d2c:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)) || !(I2Cx->SR1 & (1 << I2C_SR1_BTF)))
 8004d2e:	e007      	b.n	8004d40 <I2C_Stop+0x20>
		if(--timeout == 0) return 1;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <I2C_Stop+0x20>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e012      	b.n	8004d66 <I2C_Stop+0x46>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)) || !(I2Cx->SR1 & (1 << I2C_SR1_BTF)))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f1      	beq.n	8004d30 <I2C_Stop+0x10>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0eb      	beq.n	8004d30 <I2C_Stop+0x10>

	I2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	601a      	str	r2, [r3, #0]

	return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <I2C_ReadNack>:

uint8_t I2C_ReadNack(I2C_RegDef_t* I2Cx) {
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
	I2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]

	I2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	601a      	str	r2, [r3, #0]

	uint32_t timeout = I2C_TIMEOUT;
 8004d92:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004d96:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_RXNE)))
 8004d98:	e007      	b.n	8004daa <I2C_ReadNack+0x38>
		if(--timeout == 0) return 1;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <I2C_ReadNack+0x38>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e008      	b.n	8004dbc <I2C_ReadNack+0x4a>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_RXNE)))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f1      	beq.n	8004d9a <I2C_ReadNack+0x28>

	return I2Cx->DR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	b2db      	uxtb	r3, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <I2C_WriteData>:
		if(--timeout == 0) return 1;

	return I2Cx->DR;
}

void I2C_WriteData(I2C_RegDef_t* I2Cx, uint8_t data) {
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout = I2C_TIMEOUT;
 8004dd4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004dd8:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)))
 8004dda:	e005      	b.n	8004de8 <I2C_WriteData+0x20>
		if(--timeout == 0) break;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d006      	beq.n	8004df6 <I2C_WriteData+0x2e>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f3      	beq.n	8004ddc <I2C_WriteData+0x14>
 8004df4:	e000      	b.n	8004df8 <I2C_WriteData+0x30>
		if(--timeout == 0) break;
 8004df6:	bf00      	nop
	I2Cx->DR = data;
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	611a      	str	r2, [r3, #16]
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8004e12:	4b25      	ldr	r3, [pc, #148]	; (8004ea8 <RCC_GetPCLK1Value+0x9c>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	089b      	lsrs	r3, r3, #2
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8004e20:	7a7b      	ldrb	r3, [r7, #9]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8004e26:	4b21      	ldr	r3, [pc, #132]	; (8004eac <RCC_GetPCLK1Value+0xa0>)
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e00b      	b.n	8004e44 <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 1)
 8004e2c:	7a7b      	ldrb	r3, [r7, #9]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d102      	bne.n	8004e38 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8004e32:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <RCC_GetPCLK1Value+0xa4>)
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e005      	b.n	8004e44 <RCC_GetPCLK1Value+0x38>
	else if (clksrc == 2)
 8004e38:	7a7b      	ldrb	r3, [r7, #9]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d102      	bne.n	8004e44 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8004e3e:	f000 f83d 	bl	8004ebc <RCC_GetPLLOutputClock>
 8004e42:	60f8      	str	r0, [r7, #12]

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8004e44:	4b18      	ldr	r3, [pc, #96]	; (8004ea8 <RCC_GetPCLK1Value+0x9c>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8004e52:	7a3b      	ldrb	r3, [r7, #8]
 8004e54:	2b07      	cmp	r3, #7
 8004e56:	d802      	bhi.n	8004e5e <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	72fb      	strb	r3, [r7, #11]
 8004e5c:	e005      	b.n	8004e6a <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_PreScaler[temp-8];
 8004e5e:	7a3b      	ldrb	r3, [r7, #8]
 8004e60:	3b08      	subs	r3, #8
 8004e62:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <RCC_GetPCLK1Value+0xa8>)
 8004e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e68:	72fb      	strb	r3, [r7, #11]

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <RCC_GetPCLK1Value+0x9c>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0a9b      	lsrs	r3, r3, #10
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8004e78:	7a3b      	ldrb	r3, [r7, #8]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d802      	bhi.n	8004e84 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	72bb      	strb	r3, [r7, #10]
 8004e82:	e004      	b.n	8004e8e <RCC_GetPCLK1Value+0x82>
	else
		apb1p = APB1_PreScaler[temp-4];
 8004e84:	7a3b      	ldrb	r3, [r7, #8]
 8004e86:	3b04      	subs	r3, #4
 8004e88:	4a0b      	ldr	r2, [pc, #44]	; (8004eb8 <RCC_GetPCLK1Value+0xac>)
 8004e8a:	5cd3      	ldrb	r3, [r2, r3]
 8004e8c:	72bb      	strb	r3, [r7, #10]

	pclk1 = (SystemClk / ahbp) /apb1p;
 8004e8e:	7afb      	ldrb	r3, [r7, #11]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e96:	7abb      	ldrb	r3, [r7, #10]
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	607b      	str	r3, [r7, #4]

	return pclk1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	007a1200 	.word	0x007a1200
 8004eb4:	2000001c 	.word	0x2000001c
 8004eb8:	2000002c 	.word	0x2000002c

08004ebc <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock() {
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
	return 0;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d11f      	bne.n	8004f1e <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <SPI_PeriClockControl+0x60>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d106      	bne.n	8004ef4 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <SPI_PeriClockControl+0x64>)
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <SPI_PeriClockControl+0x64>)
 8004eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ef0:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8004ef2:	e014      	b.n	8004f1e <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a0f      	ldr	r2, [pc, #60]	; (8004f34 <SPI_PeriClockControl+0x68>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d106      	bne.n	8004f0a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <SPI_PeriClockControl+0x64>)
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <SPI_PeriClockControl+0x64>)
 8004f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f06:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004f08:	e009      	b.n	8004f1e <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <SPI_PeriClockControl+0x6c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d105      	bne.n	8004f1e <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8004f12:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <SPI_PeriClockControl+0x64>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	4a06      	ldr	r2, [pc, #24]	; (8004f30 <SPI_PeriClockControl+0x64>)
 8004f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40013000 	.word	0x40013000
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40003800 	.word	0x40003800
 8004f38:	40003c00 	.word	0x40003c00

08004f3c <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2101      	movs	r1, #1
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ffbe 	bl	8004ecc <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	791b      	ldrb	r3, [r3, #4]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	795b      	ldrb	r3, [r3, #5]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d104      	bne.n	8004f74 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e014      	b.n	8004f9e <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	795b      	ldrb	r3, [r3, #5]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d104      	bne.n	8004f86 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e00b      	b.n	8004f9e <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	795b      	ldrb	r3, [r3, #5]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d107      	bne.n	8004f9e <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f94:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f9c:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	799b      	ldrb	r3, [r3, #6]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	79db      	ldrb	r3, [r3, #7]
 8004fb0:	02db      	lsls	r3, r3, #11
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	7a1b      	ldrb	r3, [r3, #8]
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	7a5b      	ldrb	r3, [r3, #9]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	7a9b      	ldrb	r3, [r3, #10]
 8004fd8:	025b      	lsls	r3, r3, #9
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	601a      	str	r2, [r3, #0]

}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	70fb      	strb	r3, [r7, #3]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 8004ffe:	bf00      	nop
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f9      	beq.n	8005000 <SPI_Transfer+0xe>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f3      	bne.n	8005000 <SPI_Transfer+0xe>
	pSPIx->DR = data;
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60da      	str	r2, [r3, #12]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 800501e:	bf00      	nop
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f9      	beq.n	8005020 <SPI_Transfer+0x2e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f3      	bne.n	8005020 <SPI_Transfer+0x2e>
	return pSPIx->DR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d106      	bne.n	8005068 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8005066:	e005      	b.n	8005074 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	601a      	str	r2, [r3, #0]
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d106      	bne.n	80050a0 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f043 0204 	orr.w	r2, r3, #4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 800509e:	e005      	b.n	80050ac <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f023 0204 	bic.w	r2, r3, #4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	605a      	str	r2, [r3, #4]
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80050c6:	2205      	movs	r2, #5
 80050c8:	492b      	ldr	r1, [pc, #172]	; (8005178 <SYSVIEW_AddTask+0xc0>)
 80050ca:	68b8      	ldr	r0, [r7, #8]
 80050cc:	f003 fbf2 	bl	80088b4 <memcmp>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d04b      	beq.n	800516e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80050d6:	4b29      	ldr	r3, [pc, #164]	; (800517c <SYSVIEW_AddTask+0xc4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b07      	cmp	r3, #7
 80050dc:	d903      	bls.n	80050e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80050de:	4828      	ldr	r0, [pc, #160]	; (8005180 <SYSVIEW_AddTask+0xc8>)
 80050e0:	f001 fbc4 	bl	800686c <SEGGER_SYSVIEW_Warn>
    return;
 80050e4:	e044      	b.n	8005170 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80050e6:	4b25      	ldr	r3, [pc, #148]	; (800517c <SYSVIEW_AddTask+0xc4>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4926      	ldr	r1, [pc, #152]	; (8005184 <SYSVIEW_AddTask+0xcc>)
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80050fa:	4b20      	ldr	r3, [pc, #128]	; (800517c <SYSVIEW_AddTask+0xc4>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4921      	ldr	r1, [pc, #132]	; (8005184 <SYSVIEW_AddTask+0xcc>)
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	3304      	adds	r3, #4
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005110:	4b1a      	ldr	r3, [pc, #104]	; (800517c <SYSVIEW_AddTask+0xc4>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	491b      	ldr	r1, [pc, #108]	; (8005184 <SYSVIEW_AddTask+0xcc>)
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	3308      	adds	r3, #8
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <SYSVIEW_AddTask+0xc4>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4916      	ldr	r1, [pc, #88]	; (8005184 <SYSVIEW_AddTask+0xcc>)
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	330c      	adds	r3, #12
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800513c:	4b0f      	ldr	r3, [pc, #60]	; (800517c <SYSVIEW_AddTask+0xc4>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4910      	ldr	r1, [pc, #64]	; (8005184 <SYSVIEW_AddTask+0xcc>)
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	3310      	adds	r3, #16
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005152:	4b0a      	ldr	r3, [pc, #40]	; (800517c <SYSVIEW_AddTask+0xc4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3301      	adds	r3, #1
 8005158:	4a08      	ldr	r2, [pc, #32]	; (800517c <SYSVIEW_AddTask+0xc4>)
 800515a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f80e 	bl	8005188 <SYSVIEW_SendTaskInfo>
 800516c:	e000      	b.n	8005170 <SYSVIEW_AddTask+0xb8>
    return;
 800516e:	bf00      	nop

}
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	0800b618 	.word	0x0800b618
 800517c:	20013030 	.word	0x20013030
 8005180:	0800b620 	.word	0x0800b620
 8005184:	20012f90 	.word	0x20012f90

08005188 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005196:	f107 0314 	add.w	r3, r7, #20
 800519a:	2214      	movs	r2, #20
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f003 fba4 	bl	80088ec <memset>
  TaskInfo.TaskID     = TaskID;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80051b8:	f107 0314 	add.w	r3, r7, #20
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 ff83 	bl	80060c8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80051c2:	bf00      	nop
 80051c4:	3728      	adds	r7, #40	; 0x28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80051d2:	4b24      	ldr	r3, [pc, #144]	; (8005264 <_DoInit+0x98>)
 80051d4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2203      	movs	r2, #3
 80051da:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2203      	movs	r2, #3
 80051e0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a20      	ldr	r2, [pc, #128]	; (8005268 <_DoInit+0x9c>)
 80051e6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a20      	ldr	r2, [pc, #128]	; (800526c <_DoInit+0xa0>)
 80051ec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051f4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a17      	ldr	r2, [pc, #92]	; (8005268 <_DoInit+0x9c>)
 800520c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a17      	ldr	r2, [pc, #92]	; (8005270 <_DoInit+0xa4>)
 8005212:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2210      	movs	r2, #16
 8005218:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3307      	adds	r3, #7
 8005230:	4a10      	ldr	r2, [pc, #64]	; (8005274 <_DoInit+0xa8>)
 8005232:	6810      	ldr	r0, [r2, #0]
 8005234:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005236:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a0e      	ldr	r2, [pc, #56]	; (8005278 <_DoInit+0xac>)
 800523e:	6810      	ldr	r0, [r2, #0]
 8005240:	6018      	str	r0, [r3, #0]
 8005242:	8891      	ldrh	r1, [r2, #4]
 8005244:	7992      	ldrb	r2, [r2, #6]
 8005246:	8099      	strh	r1, [r3, #4]
 8005248:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800524a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005254:	f3bf 8f5f 	dmb	sy
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	200137bc 	.word	0x200137bc
 8005268:	0800b670 	.word	0x0800b670
 800526c:	20013034 	.word	0x20013034
 8005270:	20013434 	.word	0x20013434
 8005274:	0800b67c 	.word	0x0800b67c
 8005278:	0800b680 	.word	0x0800b680

0800527c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005288:	2300      	movs	r3, #0
 800528a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	429a      	cmp	r2, r3
 800529e:	d905      	bls.n	80052ac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	e007      	b.n	80052bc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	69b9      	ldr	r1, [r7, #24]
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	1acb      	subs	r3, r1, r3
 80052b6:	4413      	add	r3, r2
 80052b8:	3b01      	subs	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c6:	4293      	cmp	r3, r2
 80052c8:	bf28      	it	cs
 80052ca:	4613      	movcs	r3, r2
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80052ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4293      	cmp	r3, r2
 80052d4:	bf28      	it	cs
 80052d6:	4613      	movcs	r3, r2
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80052e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	6978      	ldr	r0, [r7, #20]
 80052ea:	f003 faf1 	bl	80088d0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80052ee:	6a3a      	ldr	r2, [r7, #32]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	4413      	add	r3, r2
 80052f4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	4413      	add	r3, r2
 80052fc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	4413      	add	r3, r2
 800530c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	429a      	cmp	r2, r3
 8005316:	d101      	bne.n	800531c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800531c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1b2      	bne.n	8005292 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800532c:	6a3b      	ldr	r3, [r7, #32]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3728      	adds	r7, #40	; 0x28
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005336:	b580      	push	{r7, lr}
 8005338:	b088      	sub	sp, #32
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d911      	bls.n	800537e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	6938      	ldr	r0, [r7, #16]
 800536a:	f003 fab1 	bl	80088d0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800536e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	441a      	add	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800537c:	e01f      	b.n	80053be <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	6938      	ldr	r0, [r7, #16]
 8005392:	f003 fa9d 	bl	80088d0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	4413      	add	r3, r2
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4619      	mov	r1, r3
 80053ae:	6938      	ldr	r0, [r7, #16]
 80053b0:	f003 fa8e 	bl	80088d0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053b4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	60da      	str	r2, [r3, #12]
}
 80053be:	bf00      	nop
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80053c6:	b480      	push	{r7}
 80053c8:	b087      	sub	sp, #28
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d808      	bhi.n	80053f4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad2      	subs	r2, r2, r3
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4413      	add	r3, r2
 80053ee:	3b01      	subs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e004      	b.n	80053fe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80053fe:	697b      	ldr	r3, [r7, #20]
}
 8005400:	4618      	mov	r0, r3
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b08c      	sub	sp, #48	; 0x30
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005418:	4b3e      	ldr	r3, [pc, #248]	; (8005514 <SEGGER_RTT_ReadNoLock+0x108>)
 800541a:	623b      	str	r3, [r7, #32]
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <SEGGER_RTT_ReadNoLock+0x1e>
 8005426:	f7ff fed1 	bl	80051cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4613      	mov	r3, r2
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	4413      	add	r3, r2
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	3360      	adds	r3, #96	; 0x60
 8005436:	4a37      	ldr	r2, [pc, #220]	; (8005514 <SEGGER_RTT_ReadNoLock+0x108>)
 8005438:	4413      	add	r3, r2
 800543a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800544c:	2300      	movs	r3, #0
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	429a      	cmp	r2, r3
 8005456:	d92b      	bls.n	80054b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4293      	cmp	r3, r2
 8005468:	bf28      	it	cs
 800546a:	4613      	movcs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	4413      	add	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	6939      	ldr	r1, [r7, #16]
 800547c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800547e:	f003 fa27 	bl	80088d0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	4413      	add	r3, r2
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800548a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4413      	add	r3, r2
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800549a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d101      	bne.n	80054b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80054ac:	2300      	movs	r3, #0
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4293      	cmp	r3, r2
 80054be:	bf28      	it	cs
 80054c0:	4613      	movcs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d019      	beq.n	80054fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	4413      	add	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	6939      	ldr	r1, [r7, #16]
 80054d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054da:	f003 f9f9 	bl	80088d0 <memcpy>
    NumBytesRead += NumBytesRem;
 80054de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005508:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800550c:	4618      	mov	r0, r3
 800550e:	3730      	adds	r7, #48	; 0x30
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	200137bc 	.word	0x200137bc

08005518 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	4613      	mov	r3, r2
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	4413      	add	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005536:	4413      	add	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d029      	beq.n	8005596 <SEGGER_RTT_WriteNoLock+0x7e>
 8005542:	2b02      	cmp	r3, #2
 8005544:	d82e      	bhi.n	80055a4 <SEGGER_RTT_WriteNoLock+0x8c>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <SEGGER_RTT_WriteNoLock+0x38>
 800554a:	2b01      	cmp	r3, #1
 800554c:	d013      	beq.n	8005576 <SEGGER_RTT_WriteNoLock+0x5e>
 800554e:	e029      	b.n	80055a4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005550:	6978      	ldr	r0, [r7, #20]
 8005552:	f7ff ff38 	bl	80053c6 <_GetAvailWriteSpace>
 8005556:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d202      	bcs.n	8005566 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005564:	e021      	b.n	80055aa <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	69b9      	ldr	r1, [r7, #24]
 800556e:	6978      	ldr	r0, [r7, #20]
 8005570:	f7ff fee1 	bl	8005336 <_WriteNoCheck>
    break;
 8005574:	e019      	b.n	80055aa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005576:	6978      	ldr	r0, [r7, #20]
 8005578:	f7ff ff25 	bl	80053c6 <_GetAvailWriteSpace>
 800557c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4293      	cmp	r3, r2
 8005584:	bf28      	it	cs
 8005586:	4613      	movcs	r3, r2
 8005588:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	6978      	ldr	r0, [r7, #20]
 8005590:	f7ff fed1 	bl	8005336 <_WriteNoCheck>
    break;
 8005594:	e009      	b.n	80055aa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	69b9      	ldr	r1, [r7, #24]
 800559a:	6978      	ldr	r0, [r7, #20]
 800559c:	f7ff fe6e 	bl	800527c <_WriteBlocking>
 80055a0:	61f8      	str	r0, [r7, #28]
    break;
 80055a2:	e002      	b.n	80055aa <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]
    break;
 80055a8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80055aa:	69fb      	ldr	r3, [r7, #28]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	200137bc 	.word	0x200137bc

080055b8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <SEGGER_RTT_Write+0x48>)
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <SEGGER_RTT_Write+0x1e>
 80055d2:	f7ff fdfb 	bl	80051cc <_DoInit>
  SEGGER_RTT_LOCK();
 80055d6:	f3ef 8311 	mrs	r3, BASEPRI
 80055da:	f04f 0120 	mov.w	r1, #32
 80055de:	f381 8811 	msr	BASEPRI, r1
 80055e2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff ff95 	bl	8005518 <SEGGER_RTT_WriteNoLock>
 80055ee:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80055f6:	697b      	ldr	r3, [r7, #20]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	200137bc 	.word	0x200137bc

08005604 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00f      	beq.n	800563a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800561a:	e002      	b.n	8005622 <_EncodeStr+0x1e>
      Len++;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	3301      	adds	r3, #1
 8005620:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4413      	add	r3, r2
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1f6      	bne.n	800561c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	d901      	bls.n	800563a <_EncodeStr+0x36>
      Len = Limit;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2bfe      	cmp	r3, #254	; 0xfe
 800563e:	d806      	bhi.n	800564e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	60fa      	str	r2, [r7, #12]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e011      	b.n	8005672 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	60fa      	str	r2, [r7, #12]
 8005654:	22ff      	movs	r2, #255	; 0xff
 8005656:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	60fa      	str	r2, [r7, #12]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	0a19      	lsrs	r1, r3, #8
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	60fa      	str	r2, [r7, #12]
 800566e:	b2ca      	uxtb	r2, r1
 8005670:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005676:	e00a      	b.n	800568e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	1c53      	adds	r3, r2, #1
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1c59      	adds	r1, r3, #1
 8005682:	60f9      	str	r1, [r7, #12]
 8005684:	7812      	ldrb	r2, [r2, #0]
 8005686:	701a      	strb	r2, [r3, #0]
    n++;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	3301      	adds	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	429a      	cmp	r2, r3
 8005694:	d3f0      	bcc.n	8005678 <_EncodeStr+0x74>
  }
  return pPayload;
 8005696:	68fb      	ldr	r3, [r7, #12]
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3304      	adds	r3, #4
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80056c2:	4b36      	ldr	r3, [pc, #216]	; (800579c <_HandleIncomingPacket+0xe0>)
 80056c4:	7e1b      	ldrb	r3, [r3, #24]
 80056c6:	4618      	mov	r0, r3
 80056c8:	1cfb      	adds	r3, r7, #3
 80056ca:	2201      	movs	r2, #1
 80056cc:	4619      	mov	r1, r3
 80056ce:	f7ff fe9d 	bl	800540c <SEGGER_RTT_ReadNoLock>
 80056d2:	4603      	mov	r3, r0
 80056d4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	dd54      	ble.n	8005786 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d032      	beq.n	8005748 <_HandleIncomingPacket+0x8c>
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	dc42      	bgt.n	800576c <_HandleIncomingPacket+0xb0>
 80056e6:	2b07      	cmp	r3, #7
 80056e8:	dc16      	bgt.n	8005718 <_HandleIncomingPacket+0x5c>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	dd3e      	ble.n	800576c <_HandleIncomingPacket+0xb0>
 80056ee:	3b01      	subs	r3, #1
 80056f0:	2b06      	cmp	r3, #6
 80056f2:	d83b      	bhi.n	800576c <_HandleIncomingPacket+0xb0>
 80056f4:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <_HandleIncomingPacket+0x40>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	0800571f 	.word	0x0800571f
 8005700:	08005725 	.word	0x08005725
 8005704:	0800572b 	.word	0x0800572b
 8005708:	08005731 	.word	0x08005731
 800570c:	08005737 	.word	0x08005737
 8005710:	0800573d 	.word	0x0800573d
 8005714:	08005743 	.word	0x08005743
 8005718:	2b7f      	cmp	r3, #127	; 0x7f
 800571a:	d036      	beq.n	800578a <_HandleIncomingPacket+0xce>
 800571c:	e026      	b.n	800576c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800571e:	f000 fb57 	bl	8005dd0 <SEGGER_SYSVIEW_Start>
      break;
 8005722:	e037      	b.n	8005794 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005724:	f000 fc10 	bl	8005f48 <SEGGER_SYSVIEW_Stop>
      break;
 8005728:	e034      	b.n	8005794 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800572a:	f000 fdc5 	bl	80062b8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800572e:	e031      	b.n	8005794 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005730:	f000 fdae 	bl	8006290 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005734:	e02e      	b.n	8005794 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005736:	f000 fc2d 	bl	8005f94 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800573a:	e02b      	b.n	8005794 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800573c:	f001 f858 	bl	80067f0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005740:	e028      	b.n	8005794 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005742:	f001 f837 	bl	80067b4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005746:	e025      	b.n	8005794 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005748:	4b14      	ldr	r3, [pc, #80]	; (800579c <_HandleIncomingPacket+0xe0>)
 800574a:	7e1b      	ldrb	r3, [r3, #24]
 800574c:	4618      	mov	r0, r3
 800574e:	1cfb      	adds	r3, r7, #3
 8005750:	2201      	movs	r2, #1
 8005752:	4619      	mov	r1, r3
 8005754:	f7ff fe5a 	bl	800540c <SEGGER_RTT_ReadNoLock>
 8005758:	4603      	mov	r3, r0
 800575a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	dd15      	ble.n	800578e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	4618      	mov	r0, r3
 8005766:	f000 ffa5 	bl	80066b4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800576a:	e010      	b.n	800578e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	b25b      	sxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	da0e      	bge.n	8005792 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005774:	4b09      	ldr	r3, [pc, #36]	; (800579c <_HandleIncomingPacket+0xe0>)
 8005776:	7e1b      	ldrb	r3, [r3, #24]
 8005778:	4618      	mov	r0, r3
 800577a:	1cfb      	adds	r3, r7, #3
 800577c:	2201      	movs	r2, #1
 800577e:	4619      	mov	r1, r3
 8005780:	f7ff fe44 	bl	800540c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005784:	e005      	b.n	8005792 <_HandleIncomingPacket+0xd6>
    }
  }
 8005786:	bf00      	nop
 8005788:	e004      	b.n	8005794 <_HandleIncomingPacket+0xd8>
      break;
 800578a:	bf00      	nop
 800578c:	e002      	b.n	8005794 <_HandleIncomingPacket+0xd8>
      break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <_HandleIncomingPacket+0xd8>
      break;
 8005792:	bf00      	nop
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20013444 	.word	0x20013444

080057a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08c      	sub	sp, #48	; 0x30
 80057a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80057a6:	2301      	movs	r3, #1
 80057a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b4:	4b32      	ldr	r3, [pc, #200]	; (8005880 <_TrySendOverflowPacket+0xe0>)
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ba:	e00b      	b.n	80057d4 <_TrySendOverflowPacket+0x34>
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	1c59      	adds	r1, r3, #1
 80057c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	09db      	lsrs	r3, r3, #7
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	2b7f      	cmp	r3, #127	; 0x7f
 80057d8:	d8f0      	bhi.n	80057bc <_TrySendOverflowPacket+0x1c>
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057ea:	4b26      	ldr	r3, [pc, #152]	; (8005884 <_TrySendOverflowPacket+0xe4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057f0:	4b23      	ldr	r3, [pc, #140]	; (8005880 <_TrySendOverflowPacket+0xe0>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	623b      	str	r3, [r7, #32]
 8005802:	e00b      	b.n	800581c <_TrySendOverflowPacket+0x7c>
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	b2da      	uxtb	r2, r3
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	1c59      	adds	r1, r3, #1
 800580c:	6279      	str	r1, [r7, #36]	; 0x24
 800580e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	09db      	lsrs	r3, r3, #7
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	2b7f      	cmp	r3, #127	; 0x7f
 8005820:	d8f0      	bhi.n	8005804 <_TrySendOverflowPacket+0x64>
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	627a      	str	r2, [r7, #36]	; 0x24
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005832:	4b13      	ldr	r3, [pc, #76]	; (8005880 <_TrySendOverflowPacket+0xe0>)
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	4618      	mov	r0, r3
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	461a      	mov	r2, r3
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	4619      	mov	r1, r3
 8005844:	f7fa fcd4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005848:	4603      	mov	r3, r0
 800584a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800584c:	f001 f8c6 	bl	80069dc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005856:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <_TrySendOverflowPacket+0xe0>)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <_TrySendOverflowPacket+0xe0>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	3b01      	subs	r3, #1
 8005862:	b2da      	uxtb	r2, r3
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <_TrySendOverflowPacket+0xe0>)
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e004      	b.n	8005874 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800586a:	4b05      	ldr	r3, [pc, #20]	; (8005880 <_TrySendOverflowPacket+0xe0>)
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	3301      	adds	r3, #1
 8005870:	4a03      	ldr	r2, [pc, #12]	; (8005880 <_TrySendOverflowPacket+0xe0>)
 8005872:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005874:	693b      	ldr	r3, [r7, #16]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3730      	adds	r7, #48	; 0x30
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20013444 	.word	0x20013444
 8005884:	e0001004 	.word	0xe0001004

08005888 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005894:	4b6d      	ldr	r3, [pc, #436]	; (8005a4c <_SendPacket+0x1c4>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d010      	beq.n	80058be <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800589c:	4b6b      	ldr	r3, [pc, #428]	; (8005a4c <_SendPacket+0x1c4>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80a5 	beq.w	80059f0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80058a6:	4b69      	ldr	r3, [pc, #420]	; (8005a4c <_SendPacket+0x1c4>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d109      	bne.n	80058c2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80058ae:	f7ff ff77 	bl	80057a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80058b2:	4b66      	ldr	r3, [pc, #408]	; (8005a4c <_SendPacket+0x1c4>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	f040 809c 	bne.w	80059f4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80058bc:	e001      	b.n	80058c2 <_SendPacket+0x3a>
    goto Send;
 80058be:	bf00      	nop
 80058c0:	e000      	b.n	80058c4 <_SendPacket+0x3c>
Send:
 80058c2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b1f      	cmp	r3, #31
 80058c8:	d809      	bhi.n	80058de <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80058ca:	4b60      	ldr	r3, [pc, #384]	; (8005a4c <_SendPacket+0x1c4>)
 80058cc:	69da      	ldr	r2, [r3, #28]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	fa22 f303 	lsr.w	r3, r2, r3
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f040 808d 	bne.w	80059f8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b17      	cmp	r3, #23
 80058e2:	d807      	bhi.n	80058f4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	e03d      	b.n	8005970 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005900:	d912      	bls.n	8005928 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	09da      	lsrs	r2, r3, #7
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3b01      	subs	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	3a01      	subs	r2, #1
 800591a:	60fa      	str	r2, [r7, #12]
 800591c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	e006      	b.n	8005936 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3b01      	subs	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b7f      	cmp	r3, #127	; 0x7f
 800593a:	d912      	bls.n	8005962 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	09da      	lsrs	r2, r3, #7
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3b01      	subs	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	3a01      	subs	r2, #1
 8005954:	60fa      	str	r2, [r7, #12]
 8005956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800595a:	b2da      	uxtb	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	e006      	b.n	8005970 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3b01      	subs	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	b2da      	uxtb	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005970:	4b37      	ldr	r3, [pc, #220]	; (8005a50 <_SendPacket+0x1c8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005976:	4b35      	ldr	r3, [pc, #212]	; (8005a4c <_SendPacket+0x1c4>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	623b      	str	r3, [r7, #32]
 8005988:	e00b      	b.n	80059a2 <_SendPacket+0x11a>
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	b2da      	uxtb	r2, r3
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	1c59      	adds	r1, r3, #1
 8005992:	6279      	str	r1, [r7, #36]	; 0x24
 8005994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	09db      	lsrs	r3, r3, #7
 80059a0:	623b      	str	r3, [r7, #32]
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	2b7f      	cmp	r3, #127	; 0x7f
 80059a6:	d8f0      	bhi.n	800598a <_SendPacket+0x102>
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	627a      	str	r2, [r7, #36]	; 0x24
 80059ae:	6a3a      	ldr	r2, [r7, #32]
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80059b8:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <_SendPacket+0x1c4>)
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	4618      	mov	r0, r3
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	68f9      	ldr	r1, [r7, #12]
 80059c8:	f7fa fc12 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80059cc:	4603      	mov	r3, r0
 80059ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80059d0:	f001 f804 	bl	80069dc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80059da:	4a1c      	ldr	r2, [pc, #112]	; (8005a4c <_SendPacket+0x1c4>)
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	60d3      	str	r3, [r2, #12]
 80059e0:	e00b      	b.n	80059fa <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80059e2:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <_SendPacket+0x1c4>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	3301      	adds	r3, #1
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	4b18      	ldr	r3, [pc, #96]	; (8005a4c <_SendPacket+0x1c4>)
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e004      	b.n	80059fa <_SendPacket+0x172>
    goto SendDone;
 80059f0:	bf00      	nop
 80059f2:	e002      	b.n	80059fa <_SendPacket+0x172>
      goto SendDone;
 80059f4:	bf00      	nop
 80059f6:	e000      	b.n	80059fa <_SendPacket+0x172>
      goto SendDone;
 80059f8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80059fa:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <_SendPacket+0x1c4>)
 80059fc:	7e1b      	ldrb	r3, [r3, #24]
 80059fe:	4619      	mov	r1, r3
 8005a00:	4a14      	ldr	r2, [pc, #80]	; (8005a54 <_SendPacket+0x1cc>)
 8005a02:	460b      	mov	r3, r1
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	440b      	add	r3, r1
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	336c      	adds	r3, #108	; 0x6c
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	4b0e      	ldr	r3, [pc, #56]	; (8005a4c <_SendPacket+0x1c4>)
 8005a12:	7e1b      	ldrb	r3, [r3, #24]
 8005a14:	4618      	mov	r0, r3
 8005a16:	490f      	ldr	r1, [pc, #60]	; (8005a54 <_SendPacket+0x1cc>)
 8005a18:	4603      	mov	r3, r0
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4403      	add	r3, r0
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	3370      	adds	r3, #112	; 0x70
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d00b      	beq.n	8005a42 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005a2a:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <_SendPacket+0x1c4>)
 8005a2c:	789b      	ldrb	r3, [r3, #2]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005a32:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <_SendPacket+0x1c4>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005a38:	f7ff fe40 	bl	80056bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <_SendPacket+0x1c4>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005a42:	bf00      	nop
 8005a44:	3728      	adds	r7, #40	; 0x28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20013444 	.word	0x20013444
 8005a50:	e0001004 	.word	0xe0001004
 8005a54:	200137bc 	.word	0x200137bc

08005a58 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a60:	f3ef 8311 	mrs	r3, BASEPRI
 8005a64:	f04f 0120 	mov.w	r1, #32
 8005a68:	f381 8811 	msr	BASEPRI, r1
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	4808      	ldr	r0, [pc, #32]	; (8005a90 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005a70:	f7ff fe18 	bl	80056a4 <_PreparePacket>
 8005a74:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	68b8      	ldr	r0, [r7, #8]
 8005a7c:	f7ff ff04 	bl	8005888 <_SendPacket>
  RECORD_END();
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f383 8811 	msr	BASEPRI, r3
}
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20013474 	.word	0x20013474

08005a94 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa2:	f04f 0120 	mov.w	r1, #32
 8005aa6:	f381 8811 	msr	BASEPRI, r1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	4816      	ldr	r0, [pc, #88]	; (8005b08 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005aae:	f7ff fdf9 	bl	80056a4 <_PreparePacket>
 8005ab2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	e00b      	b.n	8005ada <SEGGER_SYSVIEW_RecordU32+0x46>
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	1c59      	adds	r1, r3, #1
 8005aca:	61f9      	str	r1, [r7, #28]
 8005acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	09db      	lsrs	r3, r3, #7
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ade:	d8f0      	bhi.n	8005ac2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	61fa      	str	r2, [r7, #28]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	68f9      	ldr	r1, [r7, #12]
 8005af4:	6938      	ldr	r0, [r7, #16]
 8005af6:	f7ff fec7 	bl	8005888 <_SendPacket>
  RECORD_END();
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f383 8811 	msr	BASEPRI, r3
}
 8005b00:	bf00      	nop
 8005b02:	3720      	adds	r7, #32
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20013474 	.word	0x20013474

08005b0c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	; 0x30
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b18:	f3ef 8311 	mrs	r3, BASEPRI
 8005b1c:	f04f 0120 	mov.w	r1, #32
 8005b20:	f381 8811 	msr	BASEPRI, r1
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	4825      	ldr	r0, [pc, #148]	; (8005bbc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005b28:	f7ff fdbc 	bl	80056a4 <_PreparePacket>
 8005b2c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3a:	e00b      	b.n	8005b54 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	09db      	lsrs	r3, r3, #7
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	2b7f      	cmp	r3, #127	; 0x7f
 8005b58:	d8f0      	bhi.n	8005b3c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	e00b      	b.n	8005b8c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	1c59      	adds	r1, r3, #1
 8005b7c:	6279      	str	r1, [r7, #36]	; 0x24
 8005b7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	09db      	lsrs	r3, r3, #7
 8005b8a:	623b      	str	r3, [r7, #32]
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b90:	d8f0      	bhi.n	8005b74 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	627a      	str	r2, [r7, #36]	; 0x24
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	6979      	ldr	r1, [r7, #20]
 8005ba6:	69b8      	ldr	r0, [r7, #24]
 8005ba8:	f7ff fe6e 	bl	8005888 <_SendPacket>
  RECORD_END();
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f383 8811 	msr	BASEPRI, r3
}
 8005bb2:	bf00      	nop
 8005bb4:	3730      	adds	r7, #48	; 0x30
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20013474 	.word	0x20013474

08005bc0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08e      	sub	sp, #56	; 0x38
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bce:	f3ef 8311 	mrs	r3, BASEPRI
 8005bd2:	f04f 0120 	mov.w	r1, #32
 8005bd6:	f381 8811 	msr	BASEPRI, r1
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	4832      	ldr	r0, [pc, #200]	; (8005ca8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005bde:	f7ff fd61 	bl	80056a4 <_PreparePacket>
 8005be2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	633b      	str	r3, [r7, #48]	; 0x30
 8005bf0:	e00b      	b.n	8005c0a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf8:	1c59      	adds	r1, r3, #1
 8005bfa:	6379      	str	r1, [r7, #52]	; 0x34
 8005bfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	09db      	lsrs	r3, r3, #7
 8005c08:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c0e:	d8f0      	bhi.n	8005bf2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	637a      	str	r2, [r7, #52]	; 0x34
 8005c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c28:	e00b      	b.n	8005c42 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c30:	1c59      	adds	r1, r3, #1
 8005c32:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	09db      	lsrs	r3, r3, #7
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	2b7f      	cmp	r3, #127	; 0x7f
 8005c46:	d8f0      	bhi.n	8005c2a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	623b      	str	r3, [r7, #32]
 8005c60:	e00b      	b.n	8005c7a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	1c59      	adds	r1, r3, #1
 8005c6a:	6279      	str	r1, [r7, #36]	; 0x24
 8005c6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	09db      	lsrs	r3, r3, #7
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c7e:	d8f0      	bhi.n	8005c62 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	627a      	str	r2, [r7, #36]	; 0x24
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	6979      	ldr	r1, [r7, #20]
 8005c94:	69b8      	ldr	r0, [r7, #24]
 8005c96:	f7ff fdf7 	bl	8005888 <_SendPacket>
  RECORD_END();
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f383 8811 	msr	BASEPRI, r3
}
 8005ca0:	bf00      	nop
 8005ca2:	3738      	adds	r7, #56	; 0x38
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20013474 	.word	0x20013474

08005cac <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b090      	sub	sp, #64	; 0x40
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cba:	f3ef 8311 	mrs	r3, BASEPRI
 8005cbe:	f04f 0120 	mov.w	r1, #32
 8005cc2:	f381 8811 	msr	BASEPRI, r1
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	4840      	ldr	r0, [pc, #256]	; (8005dcc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005cca:	f7ff fceb 	bl	80056a4 <_PreparePacket>
 8005cce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cdc:	e00b      	b.n	8005cf6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	1c59      	adds	r1, r3, #1
 8005ce6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	09db      	lsrs	r3, r3, #7
 8005cf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cfa:	d8f0      	bhi.n	8005cde <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	633b      	str	r3, [r7, #48]	; 0x30
 8005d14:	e00b      	b.n	8005d2e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1c:	1c59      	adds	r1, r3, #1
 8005d1e:	6379      	str	r1, [r7, #52]	; 0x34
 8005d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	09db      	lsrs	r3, r3, #7
 8005d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	2b7f      	cmp	r3, #127	; 0x7f
 8005d32:	d8f0      	bhi.n	8005d16 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	637a      	str	r2, [r7, #52]	; 0x34
 8005d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d4c:	e00b      	b.n	8005d66 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	1c59      	adds	r1, r3, #1
 8005d56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	09db      	lsrs	r3, r3, #7
 8005d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	2b7f      	cmp	r3, #127	; 0x7f
 8005d6a:	d8f0      	bhi.n	8005d4e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d82:	623b      	str	r3, [r7, #32]
 8005d84:	e00b      	b.n	8005d9e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	1c59      	adds	r1, r3, #1
 8005d8e:	6279      	str	r1, [r7, #36]	; 0x24
 8005d90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	09db      	lsrs	r3, r3, #7
 8005d9c:	623b      	str	r3, [r7, #32]
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	2b7f      	cmp	r3, #127	; 0x7f
 8005da2:	d8f0      	bhi.n	8005d86 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	627a      	str	r2, [r7, #36]	; 0x24
 8005daa:	6a3a      	ldr	r2, [r7, #32]
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	6979      	ldr	r1, [r7, #20]
 8005db8:	69b8      	ldr	r0, [r7, #24]
 8005dba:	f7ff fd65 	bl	8005888 <_SendPacket>
  RECORD_END();
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f383 8811 	msr	BASEPRI, r3
}
 8005dc4:	bf00      	nop
 8005dc6:	3740      	adds	r7, #64	; 0x40
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20013474 	.word	0x20013474

08005dd0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	; 0x30
 8005dd4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005dd6:	4b59      	ldr	r3, [pc, #356]	; (8005f3c <SEGGER_SYSVIEW_Start+0x16c>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005ddc:	f3ef 8311 	mrs	r3, BASEPRI
 8005de0:	f04f 0120 	mov.w	r1, #32
 8005de4:	f381 8811 	msr	BASEPRI, r1
 8005de8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005dea:	4b54      	ldr	r3, [pc, #336]	; (8005f3c <SEGGER_SYSVIEW_Start+0x16c>)
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	220a      	movs	r2, #10
 8005df0:	4953      	ldr	r1, [pc, #332]	; (8005f40 <SEGGER_SYSVIEW_Start+0x170>)
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fa f9fc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005dfe:	f000 fded 	bl	80069dc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005e02:	200a      	movs	r0, #10
 8005e04:	f7ff fe28 	bl	8005a58 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e08:	f3ef 8311 	mrs	r3, BASEPRI
 8005e0c:	f04f 0120 	mov.w	r1, #32
 8005e10:	f381 8811 	msr	BASEPRI, r1
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	484b      	ldr	r0, [pc, #300]	; (8005f44 <SEGGER_SYSVIEW_Start+0x174>)
 8005e18:	f7ff fc44 	bl	80056a4 <_PreparePacket>
 8005e1c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e26:	4b45      	ldr	r3, [pc, #276]	; (8005f3c <SEGGER_SYSVIEW_Start+0x16c>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e2c:	e00b      	b.n	8005e46 <SEGGER_SYSVIEW_Start+0x76>
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	1c59      	adds	r1, r3, #1
 8005e36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	09db      	lsrs	r3, r3, #7
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	2b7f      	cmp	r3, #127	; 0x7f
 8005e4a:	d8f0      	bhi.n	8005e2e <SEGGER_SYSVIEW_Start+0x5e>
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e60:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <SEGGER_SYSVIEW_Start+0x16c>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	623b      	str	r3, [r7, #32]
 8005e66:	e00b      	b.n	8005e80 <SEGGER_SYSVIEW_Start+0xb0>
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	1c59      	adds	r1, r3, #1
 8005e70:	6279      	str	r1, [r7, #36]	; 0x24
 8005e72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	09db      	lsrs	r3, r3, #7
 8005e7e:	623b      	str	r3, [r7, #32]
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	2b7f      	cmp	r3, #127	; 0x7f
 8005e84:	d8f0      	bhi.n	8005e68 <SEGGER_SYSVIEW_Start+0x98>
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	627a      	str	r2, [r7, #36]	; 0x24
 8005e8c:	6a3a      	ldr	r2, [r7, #32]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	4b28      	ldr	r3, [pc, #160]	; (8005f3c <SEGGER_SYSVIEW_Start+0x16c>)
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	e00b      	b.n	8005eba <SEGGER_SYSVIEW_Start+0xea>
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	1c59      	adds	r1, r3, #1
 8005eaa:	61f9      	str	r1, [r7, #28]
 8005eac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	09db      	lsrs	r3, r3, #7
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ebe:	d8f0      	bhi.n	8005ea2 <SEGGER_SYSVIEW_Start+0xd2>
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	61fa      	str	r2, [r7, #28]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	613b      	str	r3, [r7, #16]
 8005ed8:	e00b      	b.n	8005ef2 <SEGGER_SYSVIEW_Start+0x122>
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	1c59      	adds	r1, r3, #1
 8005ee2:	6179      	str	r1, [r7, #20]
 8005ee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	09db      	lsrs	r3, r3, #7
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef6:	d8f0      	bhi.n	8005eda <SEGGER_SYSVIEW_Start+0x10a>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	617a      	str	r2, [r7, #20]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005f08:	2218      	movs	r2, #24
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff fcbb 	bl	8005888 <_SendPacket>
      RECORD_END();
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005f18:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <SEGGER_SYSVIEW_Start+0x16c>)
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <SEGGER_SYSVIEW_Start+0x16c>)
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005f26:	f000 f9c7 	bl	80062b8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005f2a:	f000 f9b1 	bl	8006290 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005f2e:	f000 fc5f 	bl	80067f0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005f32:	bf00      	nop
 8005f34:	3730      	adds	r7, #48	; 0x30
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20013444 	.word	0x20013444
 8005f40:	0800bb8c 	.word	0x0800bb8c
 8005f44:	20013474 	.word	0x20013474

08005f48 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f52:	f04f 0120 	mov.w	r1, #32
 8005f56:	f381 8811 	msr	BASEPRI, r1
 8005f5a:	607b      	str	r3, [r7, #4]
 8005f5c:	480b      	ldr	r0, [pc, #44]	; (8005f8c <SEGGER_SYSVIEW_Stop+0x44>)
 8005f5e:	f7ff fba1 	bl	80056a4 <_PreparePacket>
 8005f62:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005f64:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <SEGGER_SYSVIEW_Stop+0x48>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005f6c:	220b      	movs	r2, #11
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	6838      	ldr	r0, [r7, #0]
 8005f72:	f7ff fc89 	bl	8005888 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <SEGGER_SYSVIEW_Stop+0x48>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f383 8811 	msr	BASEPRI, r3
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20013474 	.word	0x20013474
 8005f90:	20013444 	.word	0x20013444

08005f94 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08c      	sub	sp, #48	; 0x30
 8005f98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f9e:	f04f 0120 	mov.w	r1, #32
 8005fa2:	f381 8811 	msr	BASEPRI, r1
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	4845      	ldr	r0, [pc, #276]	; (80060c0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005faa:	f7ff fb7b 	bl	80056a4 <_PreparePacket>
 8005fae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb8:	4b42      	ldr	r3, [pc, #264]	; (80060c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fbe:	e00b      	b.n	8005fd8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	1c59      	adds	r1, r3, #1
 8005fc8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	09db      	lsrs	r3, r3, #7
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	2b7f      	cmp	r3, #127	; 0x7f
 8005fdc:	d8f0      	bhi.n	8005fc0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff2:	4b34      	ldr	r3, [pc, #208]	; (80060c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	623b      	str	r3, [r7, #32]
 8005ff8:	e00b      	b.n	8006012 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	1c59      	adds	r1, r3, #1
 8006002:	6279      	str	r1, [r7, #36]	; 0x24
 8006004:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	09db      	lsrs	r3, r3, #7
 8006010:	623b      	str	r3, [r7, #32]
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	2b7f      	cmp	r3, #127	; 0x7f
 8006016:	d8f0      	bhi.n	8005ffa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	627a      	str	r2, [r7, #36]	; 0x24
 800601e:	6a3a      	ldr	r2, [r7, #32]
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	4b25      	ldr	r3, [pc, #148]	; (80060c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e00b      	b.n	800604c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	1c59      	adds	r1, r3, #1
 800603c:	61f9      	str	r1, [r7, #28]
 800603e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	09db      	lsrs	r3, r3, #7
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b7f      	cmp	r3, #127	; 0x7f
 8006050:	d8f0      	bhi.n	8006034 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	61fa      	str	r2, [r7, #28]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e00b      	b.n	8006084 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	b2da      	uxtb	r2, r3
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	1c59      	adds	r1, r3, #1
 8006074:	6179      	str	r1, [r7, #20]
 8006076:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	09db      	lsrs	r3, r3, #7
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b7f      	cmp	r3, #127	; 0x7f
 8006088:	d8f0      	bhi.n	800606c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	617a      	str	r2, [r7, #20]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800609a:	2218      	movs	r2, #24
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	68b8      	ldr	r0, [r7, #8]
 80060a0:	f7ff fbf2 	bl	8005888 <_SendPacket>
  RECORD_END();
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80060b2:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	4798      	blx	r3
  }
}
 80060b8:	bf00      	nop
 80060ba:	3730      	adds	r7, #48	; 0x30
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20013474 	.word	0x20013474
 80060c4:	20013444 	.word	0x20013444

080060c8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b092      	sub	sp, #72	; 0x48
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80060d0:	f3ef 8311 	mrs	r3, BASEPRI
 80060d4:	f04f 0120 	mov.w	r1, #32
 80060d8:	f381 8811 	msr	BASEPRI, r1
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	486a      	ldr	r0, [pc, #424]	; (8006288 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80060e0:	f7ff fae0 	bl	80056a4 <_PreparePacket>
 80060e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	647b      	str	r3, [r7, #68]	; 0x44
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b66      	ldr	r3, [pc, #408]	; (800628c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	643b      	str	r3, [r7, #64]	; 0x40
 80060fa:	e00b      	b.n	8006114 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80060fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006102:	1c59      	adds	r1, r3, #1
 8006104:	6479      	str	r1, [r7, #68]	; 0x44
 8006106:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006110:	09db      	lsrs	r3, r3, #7
 8006112:	643b      	str	r3, [r7, #64]	; 0x40
 8006114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006116:	2b7f      	cmp	r3, #127	; 0x7f
 8006118:	d8f0      	bhi.n	80060fc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800611a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	647a      	str	r2, [r7, #68]	; 0x44
 8006120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006128:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	63bb      	str	r3, [r7, #56]	; 0x38
 8006134:	e00b      	b.n	800614e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	b2da      	uxtb	r2, r3
 800613a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613c:	1c59      	adds	r1, r3, #1
 800613e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006140:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	09db      	lsrs	r3, r3, #7
 800614c:	63bb      	str	r3, [r7, #56]	; 0x38
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	2b7f      	cmp	r3, #127	; 0x7f
 8006152:	d8f0      	bhi.n	8006136 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	63fa      	str	r2, [r7, #60]	; 0x3c
 800615a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006162:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	4619      	mov	r1, r3
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff fa49 	bl	8005604 <_EncodeStr>
 8006172:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006174:	2209      	movs	r2, #9
 8006176:	68f9      	ldr	r1, [r7, #12]
 8006178:	6938      	ldr	r0, [r7, #16]
 800617a:	f7ff fb85 	bl	8005888 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b40      	ldr	r3, [pc, #256]	; (800628c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	633b      	str	r3, [r7, #48]	; 0x30
 8006192:	e00b      	b.n	80061ac <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	b2da      	uxtb	r2, r3
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619a:	1c59      	adds	r1, r3, #1
 800619c:	6379      	str	r1, [r7, #52]	; 0x34
 800619e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	09db      	lsrs	r3, r3, #7
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	2b7f      	cmp	r3, #127	; 0x7f
 80061b0:	d8f0      	bhi.n	8006194 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80061b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	637a      	str	r2, [r7, #52]	; 0x34
 80061b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80061cc:	e00b      	b.n	80061e6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	1c59      	adds	r1, r3, #1
 80061d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	09db      	lsrs	r3, r3, #7
 80061e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ea:	d8f0      	bhi.n	80061ce <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	623b      	str	r3, [r7, #32]
 8006206:	e00b      	b.n	8006220 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	b2da      	uxtb	r2, r3
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	6279      	str	r1, [r7, #36]	; 0x24
 8006212:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	09db      	lsrs	r3, r3, #7
 800621e:	623b      	str	r3, [r7, #32]
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b7f      	cmp	r3, #127	; 0x7f
 8006224:	d8f0      	bhi.n	8006208 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	627a      	str	r2, [r7, #36]	; 0x24
 800622c:	6a3a      	ldr	r2, [r7, #32]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	2300      	movs	r3, #0
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	e00b      	b.n	8006258 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	1c59      	adds	r1, r3, #1
 8006248:	61f9      	str	r1, [r7, #28]
 800624a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	09db      	lsrs	r3, r3, #7
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b7f      	cmp	r3, #127	; 0x7f
 800625c:	d8f0      	bhi.n	8006240 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	61fa      	str	r2, [r7, #28]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800626e:	2215      	movs	r2, #21
 8006270:	68f9      	ldr	r1, [r7, #12]
 8006272:	6938      	ldr	r0, [r7, #16]
 8006274:	f7ff fb08 	bl	8005888 <_SendPacket>
  RECORD_END();
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f383 8811 	msr	BASEPRI, r3
}
 800627e:	bf00      	nop
 8006280:	3748      	adds	r7, #72	; 0x48
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20013474 	.word	0x20013474
 800628c:	20013444 	.word	0x20013444

08006290 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006294:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800629c:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80062a6:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4798      	blx	r3
  }
}
 80062ae:	bf00      	nop
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20013444 	.word	0x20013444

080062b8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80062b8:	b590      	push	{r4, r7, lr}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80062be:	4b15      	ldr	r3, [pc, #84]	; (8006314 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01a      	beq.n	80062fc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80062c6:	4b13      	ldr	r3, [pc, #76]	; (8006314 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d015      	beq.n	80062fc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80062d0:	4b10      	ldr	r3, [pc, #64]	; (8006314 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4798      	blx	r3
 80062d8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80062dc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80062de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	000a      	movs	r2, r1
 80062ec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80062ee:	4613      	mov	r3, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	4621      	mov	r1, r4
 80062f4:	200d      	movs	r0, #13
 80062f6:	f7ff fc09 	bl	8005b0c <SEGGER_SYSVIEW_RecordU32x2>
 80062fa:	e006      	b.n	800630a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80062fc:	4b06      	ldr	r3, [pc, #24]	; (8006318 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4619      	mov	r1, r3
 8006302:	200c      	movs	r0, #12
 8006304:	f7ff fbc6 	bl	8005a94 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	bd90      	pop	{r4, r7, pc}
 8006312:	bf00      	nop
 8006314:	20013444 	.word	0x20013444
 8006318:	e0001004 	.word	0xe0001004

0800631c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006322:	f3ef 8311 	mrs	r3, BASEPRI
 8006326:	f04f 0120 	mov.w	r1, #32
 800632a:	f381 8811 	msr	BASEPRI, r1
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	4819      	ldr	r0, [pc, #100]	; (8006398 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006332:	f7ff f9b7 	bl	80056a4 <_PreparePacket>
 8006336:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800633c:	4b17      	ldr	r3, [pc, #92]	; (800639c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006344:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	e00b      	b.n	8006368 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	6179      	str	r1, [r7, #20]
 800635a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	09db      	lsrs	r3, r3, #7
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b7f      	cmp	r3, #127	; 0x7f
 800636c:	d8f0      	bhi.n	8006350 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	617a      	str	r2, [r7, #20]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800637e:	2202      	movs	r2, #2
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	68b8      	ldr	r0, [r7, #8]
 8006384:	f7ff fa80 	bl	8005888 <_SendPacket>
  RECORD_END();
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f383 8811 	msr	BASEPRI, r3
}
 800638e:	bf00      	nop
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20013474 	.word	0x20013474
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063a6:	f3ef 8311 	mrs	r3, BASEPRI
 80063aa:	f04f 0120 	mov.w	r1, #32
 80063ae:	f381 8811 	msr	BASEPRI, r1
 80063b2:	607b      	str	r3, [r7, #4]
 80063b4:	4807      	ldr	r0, [pc, #28]	; (80063d4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80063b6:	f7ff f975 	bl	80056a4 <_PreparePacket>
 80063ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80063bc:	2203      	movs	r2, #3
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6838      	ldr	r0, [r7, #0]
 80063c2:	f7ff fa61 	bl	8005888 <_SendPacket>
  RECORD_END();
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f383 8811 	msr	BASEPRI, r3
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20013474 	.word	0x20013474

080063d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063de:	f3ef 8311 	mrs	r3, BASEPRI
 80063e2:	f04f 0120 	mov.w	r1, #32
 80063e6:	f381 8811 	msr	BASEPRI, r1
 80063ea:	607b      	str	r3, [r7, #4]
 80063ec:	4807      	ldr	r0, [pc, #28]	; (800640c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80063ee:	f7ff f959 	bl	80056a4 <_PreparePacket>
 80063f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80063f4:	2212      	movs	r2, #18
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6838      	ldr	r0, [r7, #0]
 80063fa:	f7ff fa45 	bl	8005888 <_SendPacket>
  RECORD_END();
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f383 8811 	msr	BASEPRI, r3
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20013474 	.word	0x20013474

08006410 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006416:	f3ef 8311 	mrs	r3, BASEPRI
 800641a:	f04f 0120 	mov.w	r1, #32
 800641e:	f381 8811 	msr	BASEPRI, r1
 8006422:	607b      	str	r3, [r7, #4]
 8006424:	4807      	ldr	r0, [pc, #28]	; (8006444 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006426:	f7ff f93d 	bl	80056a4 <_PreparePacket>
 800642a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800642c:	2211      	movs	r2, #17
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6838      	ldr	r0, [r7, #0]
 8006432:	f7ff fa29 	bl	8005888 <_SendPacket>
  RECORD_END();
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f383 8811 	msr	BASEPRI, r3
}
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20013474 	.word	0x20013474

08006448 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006450:	f3ef 8311 	mrs	r3, BASEPRI
 8006454:	f04f 0120 	mov.w	r1, #32
 8006458:	f381 8811 	msr	BASEPRI, r1
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	4819      	ldr	r0, [pc, #100]	; (80064c4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006460:	f7ff f920 	bl	80056a4 <_PreparePacket>
 8006464:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800646a:	4b17      	ldr	r3, [pc, #92]	; (80064c8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	61bb      	str	r3, [r7, #24]
 800647c:	e00b      	b.n	8006496 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	1c59      	adds	r1, r3, #1
 8006486:	61f9      	str	r1, [r7, #28]
 8006488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	09db      	lsrs	r3, r3, #7
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b7f      	cmp	r3, #127	; 0x7f
 800649a:	d8f0      	bhi.n	800647e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	61fa      	str	r2, [r7, #28]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80064ac:	2208      	movs	r2, #8
 80064ae:	68f9      	ldr	r1, [r7, #12]
 80064b0:	6938      	ldr	r0, [r7, #16]
 80064b2:	f7ff f9e9 	bl	8005888 <_SendPacket>
  RECORD_END();
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f383 8811 	msr	BASEPRI, r3
}
 80064bc:	bf00      	nop
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20013474 	.word	0x20013474
 80064c8:	20013444 	.word	0x20013444

080064cc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064d4:	f3ef 8311 	mrs	r3, BASEPRI
 80064d8:	f04f 0120 	mov.w	r1, #32
 80064dc:	f381 8811 	msr	BASEPRI, r1
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	4819      	ldr	r0, [pc, #100]	; (8006548 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80064e4:	f7ff f8de 	bl	80056a4 <_PreparePacket>
 80064e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80064ee:	4b17      	ldr	r3, [pc, #92]	; (800654c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	61bb      	str	r3, [r7, #24]
 8006500:	e00b      	b.n	800651a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	1c59      	adds	r1, r3, #1
 800650a:	61f9      	str	r1, [r7, #28]
 800650c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	09db      	lsrs	r3, r3, #7
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b7f      	cmp	r3, #127	; 0x7f
 800651e:	d8f0      	bhi.n	8006502 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	61fa      	str	r2, [r7, #28]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006530:	2204      	movs	r2, #4
 8006532:	68f9      	ldr	r1, [r7, #12]
 8006534:	6938      	ldr	r0, [r7, #16]
 8006536:	f7ff f9a7 	bl	8005888 <_SendPacket>
  RECORD_END();
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f383 8811 	msr	BASEPRI, r3
}
 8006540:	bf00      	nop
 8006542:	3720      	adds	r7, #32
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20013474 	.word	0x20013474
 800654c:	20013444 	.word	0x20013444

08006550 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006558:	f3ef 8311 	mrs	r3, BASEPRI
 800655c:	f04f 0120 	mov.w	r1, #32
 8006560:	f381 8811 	msr	BASEPRI, r1
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	4819      	ldr	r0, [pc, #100]	; (80065cc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006568:	f7ff f89c 	bl	80056a4 <_PreparePacket>
 800656c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006572:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	61fb      	str	r3, [r7, #28]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	e00b      	b.n	800659e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	1c59      	adds	r1, r3, #1
 800658e:	61f9      	str	r1, [r7, #28]
 8006590:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	09db      	lsrs	r3, r3, #7
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b7f      	cmp	r3, #127	; 0x7f
 80065a2:	d8f0      	bhi.n	8006586 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	61fa      	str	r2, [r7, #28]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80065b4:	2206      	movs	r2, #6
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	6938      	ldr	r0, [r7, #16]
 80065ba:	f7ff f965 	bl	8005888 <_SendPacket>
  RECORD_END();
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f383 8811 	msr	BASEPRI, r3
}
 80065c4:	bf00      	nop
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20013474 	.word	0x20013474
 80065d0:	20013444 	.word	0x20013444

080065d4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	; 0x28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80065de:	f3ef 8311 	mrs	r3, BASEPRI
 80065e2:	f04f 0120 	mov.w	r1, #32
 80065e6:	f381 8811 	msr	BASEPRI, r1
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	4827      	ldr	r0, [pc, #156]	; (800668c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80065ee:	f7ff f859 	bl	80056a4 <_PreparePacket>
 80065f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	e00b      	b.n	8006624 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	6279      	str	r1, [r7, #36]	; 0x24
 8006616:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	09db      	lsrs	r3, r3, #7
 8006622:	623b      	str	r3, [r7, #32]
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	2b7f      	cmp	r3, #127	; 0x7f
 8006628:	d8f0      	bhi.n	800660c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	627a      	str	r2, [r7, #36]	; 0x24
 8006630:	6a3a      	ldr	r2, [r7, #32]
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	61fb      	str	r3, [r7, #28]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	e00b      	b.n	800665c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	b2da      	uxtb	r2, r3
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	1c59      	adds	r1, r3, #1
 800664c:	61f9      	str	r1, [r7, #28]
 800664e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	09db      	lsrs	r3, r3, #7
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	2b7f      	cmp	r3, #127	; 0x7f
 8006660:	d8f0      	bhi.n	8006644 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	61fa      	str	r2, [r7, #28]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006672:	2207      	movs	r2, #7
 8006674:	68f9      	ldr	r1, [r7, #12]
 8006676:	6938      	ldr	r0, [r7, #16]
 8006678:	f7ff f906 	bl	8005888 <_SendPacket>
  RECORD_END();
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f383 8811 	msr	BASEPRI, r3
}
 8006682:	bf00      	nop
 8006684:	3728      	adds	r7, #40	; 0x28
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20013474 	.word	0x20013474
 8006690:	20013444 	.word	0x20013444

08006694 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800669c:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	1ad3      	subs	r3, r2, r3
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	20013444 	.word	0x20013444

080066b4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08c      	sub	sp, #48	; 0x30
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80066be:	4b3b      	ldr	r3, [pc, #236]	; (80067ac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d06d      	beq.n	80067a2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80066c6:	4b39      	ldr	r3, [pc, #228]	; (80067ac <SEGGER_SYSVIEW_SendModule+0xf8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80066cc:	2300      	movs	r3, #0
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d0:	e008      	b.n	80066e4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	3301      	adds	r3, #1
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d3f2      	bcc.n	80066d2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80066ec:	e000      	b.n	80066f0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80066ee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d055      	beq.n	80067a2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066f6:	f3ef 8311 	mrs	r3, BASEPRI
 80066fa:	f04f 0120 	mov.w	r1, #32
 80066fe:	f381 8811 	msr	BASEPRI, r1
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	482a      	ldr	r0, [pc, #168]	; (80067b0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006706:	f7fe ffcd 	bl	80056a4 <_PreparePacket>
 800670a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	623b      	str	r3, [r7, #32]
 8006718:	e00b      	b.n	8006732 <SEGGER_SYSVIEW_SendModule+0x7e>
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	1c59      	adds	r1, r3, #1
 8006722:	6279      	str	r1, [r7, #36]	; 0x24
 8006724:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	09db      	lsrs	r3, r3, #7
 8006730:	623b      	str	r3, [r7, #32]
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	2b7f      	cmp	r3, #127	; 0x7f
 8006736:	d8f0      	bhi.n	800671a <SEGGER_SYSVIEW_SendModule+0x66>
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	627a      	str	r2, [r7, #36]	; 0x24
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	e00b      	b.n	800676c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	b2da      	uxtb	r2, r3
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	1c59      	adds	r1, r3, #1
 800675c:	61f9      	str	r1, [r7, #28]
 800675e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	09db      	lsrs	r3, r3, #7
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b7f      	cmp	r3, #127	; 0x7f
 8006770:	d8f0      	bhi.n	8006754 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	61fa      	str	r2, [r7, #28]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2280      	movs	r2, #128	; 0x80
 8006788:	4619      	mov	r1, r3
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7fe ff3a 	bl	8005604 <_EncodeStr>
 8006790:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006792:	2216      	movs	r2, #22
 8006794:	68f9      	ldr	r1, [r7, #12]
 8006796:	6938      	ldr	r0, [r7, #16]
 8006798:	f7ff f876 	bl	8005888 <_SendPacket>
      RECORD_END();
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80067a2:	bf00      	nop
 80067a4:	3730      	adds	r7, #48	; 0x30
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	2001346c 	.word	0x2001346c
 80067b0:	20013474 	.word	0x20013474

080067b4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80067ba:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00f      	beq.n	80067e2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f2      	bne.n	80067c8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	2001346c 	.word	0x2001346c

080067f0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80067f6:	f3ef 8311 	mrs	r3, BASEPRI
 80067fa:	f04f 0120 	mov.w	r1, #32
 80067fe:	f381 8811 	msr	BASEPRI, r1
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	4817      	ldr	r0, [pc, #92]	; (8006864 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006806:	f7fe ff4d 	bl	80056a4 <_PreparePacket>
 800680a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	4b14      	ldr	r3, [pc, #80]	; (8006868 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	e00b      	b.n	8006834 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	b2da      	uxtb	r2, r3
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	1c59      	adds	r1, r3, #1
 8006824:	6179      	str	r1, [r7, #20]
 8006826:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	09db      	lsrs	r3, r3, #7
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b7f      	cmp	r3, #127	; 0x7f
 8006838:	d8f0      	bhi.n	800681c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	617a      	str	r2, [r7, #20]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800684a:	221b      	movs	r2, #27
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	68b8      	ldr	r0, [r7, #8]
 8006850:	f7ff f81a 	bl	8005888 <_SendPacket>
  RECORD_END();
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f383 8811 	msr	BASEPRI, r3
}
 800685a:	bf00      	nop
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20013474 	.word	0x20013474
 8006868:	20013470 	.word	0x20013470

0800686c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006874:	f3ef 8311 	mrs	r3, BASEPRI
 8006878:	f04f 0120 	mov.w	r1, #32
 800687c:	f381 8811 	msr	BASEPRI, r1
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	4827      	ldr	r0, [pc, #156]	; (8006920 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006884:	f7fe ff0e 	bl	80056a4 <_PreparePacket>
 8006888:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800688a:	2280      	movs	r2, #128	; 0x80
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	6938      	ldr	r0, [r7, #16]
 8006890:	f7fe feb8 	bl	8005604 <_EncodeStr>
 8006894:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
 800689a:	2301      	movs	r3, #1
 800689c:	623b      	str	r3, [r7, #32]
 800689e:	e00b      	b.n	80068b8 <SEGGER_SYSVIEW_Warn+0x4c>
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	6279      	str	r1, [r7, #36]	; 0x24
 80068aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	09db      	lsrs	r3, r3, #7
 80068b6:	623b      	str	r3, [r7, #32]
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	2b7f      	cmp	r3, #127	; 0x7f
 80068bc:	d8f0      	bhi.n	80068a0 <SEGGER_SYSVIEW_Warn+0x34>
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	627a      	str	r2, [r7, #36]	; 0x24
 80068c4:	6a3a      	ldr	r2, [r7, #32]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	2300      	movs	r3, #0
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	e00b      	b.n	80068f0 <SEGGER_SYSVIEW_Warn+0x84>
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	1c59      	adds	r1, r3, #1
 80068e0:	61f9      	str	r1, [r7, #28]
 80068e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	09db      	lsrs	r3, r3, #7
 80068ee:	61bb      	str	r3, [r7, #24]
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b7f      	cmp	r3, #127	; 0x7f
 80068f4:	d8f0      	bhi.n	80068d8 <SEGGER_SYSVIEW_Warn+0x6c>
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	61fa      	str	r2, [r7, #28]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006906:	221a      	movs	r2, #26
 8006908:	68f9      	ldr	r1, [r7, #12]
 800690a:	6938      	ldr	r0, [r7, #16]
 800690c:	f7fe ffbc 	bl	8005888 <_SendPacket>
  RECORD_END();
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f383 8811 	msr	BASEPRI, r3
}
 8006916:	bf00      	nop
 8006918:	3728      	adds	r7, #40	; 0x28
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20013474 	.word	0x20013474

08006924 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	2000      	movs	r0, #0
 8006938:	f7fe fe3e 	bl	80055b8 <SEGGER_RTT_Write>
  return len;
 800693c:	683b      	ldr	r3, [r7, #0]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
//void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
	int UsartStatus;
	uint8_t v;
	int r;

	UsartStatus = USART_SR;                              // Examine status register
 800694e:	4b1e      	ldr	r3, [pc, #120]	; (80069c8 <USART2_IRQHandler+0x80>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]
	if(UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d011      	beq.n	8006982 <USART2_IRQHandler+0x3a>
		v = USART_DR;                                      // Read data
 800695e:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <USART2_IRQHandler+0x84>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	71fb      	strb	r3, [r7, #7]
		if((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f003 030b 	and.w	r3, r3, #11
 800696c:	2b00      	cmp	r3, #0
 800696e:	d108      	bne.n	8006982 <USART2_IRQHandler+0x3a>
			(void)v;                                         // Avoid warning in BTL
			if(_cbOnRx) {
 8006970:	4b17      	ldr	r3, [pc, #92]	; (80069d0 <USART2_IRQHandler+0x88>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <USART2_IRQHandler+0x3a>
				_cbOnRx(v);
 8006978:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <USART2_IRQHandler+0x88>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	79fa      	ldrb	r2, [r7, #7]
 800697e:	4610      	mov	r0, r2
 8006980:	4798      	blx	r3
			}
		}
	}
	if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01a      	beq.n	80069c2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 800698c:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <USART2_IRQHandler+0x8c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <USART2_IRQHandler+0x78>
		r = _cbOnTx(&v);
 8006994:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <USART2_IRQHandler+0x8c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	1dfa      	adds	r2, r7, #7
 800699a:	4610      	mov	r0, r2
 800699c:	4798      	blx	r3
 800699e:	60b8      	str	r0, [r7, #8]
		if (r == 0) {                          // No more characters to send ?
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <USART2_IRQHandler+0x6c>
			USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80069a6:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <USART2_IRQHandler+0x90>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a0b      	ldr	r2, [pc, #44]	; (80069d8 <USART2_IRQHandler+0x90>)
 80069ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	e006      	b.n	80069c2 <USART2_IRQHandler+0x7a>
		} else {
			USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <USART2_IRQHandler+0x80>)
 80069b6:	681b      	ldr	r3, [r3, #0]
			USART_DR = v;  // Start transmission by writing to data register
 80069b8:	79fa      	ldrb	r2, [r7, #7]
 80069ba:	4b04      	ldr	r3, [pc, #16]	; (80069cc <USART2_IRQHandler+0x84>)
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e000      	b.n	80069c2 <USART2_IRQHandler+0x7a>
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 80069c0:	bf00      	nop
		}
	}
}
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40004400 	.word	0x40004400
 80069cc:	40004404 	.word	0x40004404
 80069d0:	20013558 	.word	0x20013558
 80069d4:	2001355c 	.word	0x2001355c
 80069d8:	4000440c 	.word	0x4000440c

080069dc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
	USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80069e0:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a04      	ldr	r2, [pc, #16]	; (80069f8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80069e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ea:	6013      	str	r3, [r2, #0]
}
 80069ec:	bf00      	nop
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	4000440c 	.word	0x4000440c

080069fc <ade_signed_value>:

#include "ade_value_scale.h"

float power = 0, apparant_power = 0;

int ade_signed_value(uint32_t value, uint8_t msb) {
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
	int val = value;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	60fb      	str	r3, [r7, #12]
	if(val & (1 << msb)) {
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	fa42 f303 	asr.w	r3, r2, r3
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d016      	beq.n	8006a4a <ade_signed_value+0x4e>
		for(int i = 0; i <= msb; i++)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	e009      	b.n	8006a36 <ade_signed_value+0x3a>
			val ^= (1 << i);
 8006a22:	2201      	movs	r2, #1
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4053      	eors	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i <= msb; i++)
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	ddf1      	ble.n	8006a22 <ade_signed_value+0x26>
		val++;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	3301      	adds	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
		val *= -1;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	425b      	negs	r3, r3
 8006a48:	60fb      	str	r3, [r7, #12]
	}
	return val;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <ade_scale_vrms>:

float ade_scale_vrms(uint32_t value) {
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	return value;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	ee17 3a90 	vmov	r3, s15
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	0000      	movs	r0, r0
 8006a7c:	0000      	movs	r0, r0
	...

08006a80 <ade_scale_irms>:

float ade_scale_vpeak(uint32_t value) {
	return value;
}

float ade_scale_irms(uint32_t value) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
	return ((float) value) / 764.9270602;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	ee17 0a90 	vmov	r0, s15
 8006a96:	f7f9 fdb7 	bl	8000608 <__aeabi_f2d>
 8006a9a:	a309      	add	r3, pc, #36	; (adr r3, 8006ac0 <ade_scale_irms+0x40>)
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f7f9 ff34 	bl	800090c <__aeabi_ddiv>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f7fa f8dc 	bl	8000c68 <__aeabi_d2f>
 8006ab0:	4603      	mov	r3, r0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w
 8006ac0:	9e89c363 	.word	0x9e89c363
 8006ac4:	4087e76a 	.word	0x4087e76a

08006ac8 <ade_scale_power>:

float ade_scale_ipeak(uint32_t value) {
	return value;
}

float ade_scale_power(uint32_t value) {
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	return power = ((float) ade_signed_value(value, 23)) * 26.95655;
 8006ad0:	2117      	movs	r1, #23
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff ff92 	bl	80069fc <ade_signed_value>
 8006ad8:	ee07 0a90 	vmov	s15, r0
 8006adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ae0:	ee17 0a90 	vmov	r0, s15
 8006ae4:	f7f9 fd90 	bl	8000608 <__aeabi_f2d>
 8006ae8:	a30a      	add	r3, pc, #40	; (adr r3, 8006b14 <ade_scale_power+0x4c>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 fde3 	bl	80006b8 <__aeabi_dmul>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	4610      	mov	r0, r2
 8006af8:	4619      	mov	r1, r3
 8006afa:	f7fa f8b5 	bl	8000c68 <__aeabi_d2f>
 8006afe:	4603      	mov	r3, r0
 8006b00:	4a03      	ldr	r2, [pc, #12]	; (8006b10 <ade_scale_power+0x48>)
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	4b02      	ldr	r3, [pc, #8]	; (8006b10 <ade_scale_power+0x48>)
 8006b06:	681b      	ldr	r3, [r3, #0]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	20013560 	.word	0x20013560
 8006b14:	75f6fd22 	.word	0x75f6fd22
 8006b18:	403af4e0 	.word	0x403af4e0
 8006b1c:	00000000 	.word	0x00000000

08006b20 <ade_scale_reactive_power>:

float ade_scale_reactive_power(uint32_t value) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	return ((float) ade_signed_value(value, 23)) * 71.27522;
 8006b28:	2117      	movs	r1, #23
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff ff66 	bl	80069fc <ade_signed_value>
 8006b30:	ee07 0a90 	vmov	s15, r0
 8006b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b38:	ee17 0a90 	vmov	r0, s15
 8006b3c:	f7f9 fd64 	bl	8000608 <__aeabi_f2d>
 8006b40:	a307      	add	r3, pc, #28	; (adr r3, 8006b60 <ade_scale_reactive_power+0x40>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fdb7 	bl	80006b8 <__aeabi_dmul>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	f7fa f889 	bl	8000c68 <__aeabi_d2f>
 8006b56:	4603      	mov	r3, r0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	3458cd21 	.word	0x3458cd21
 8006b64:	4051d19d 	.word	0x4051d19d

08006b68 <ade_scale_apparant_power>:

float ade_scale_apparant_power(uint32_t value) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
	return apparant_power = ((float) value) * 30.42205;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7a:	ee17 0a90 	vmov	r0, s15
 8006b7e:	f7f9 fd43 	bl	8000608 <__aeabi_f2d>
 8006b82:	a30c      	add	r3, pc, #48	; (adr r3, 8006bb4 <ade_scale_apparant_power+0x4c>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f7f9 fd96 	bl	80006b8 <__aeabi_dmul>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4610      	mov	r0, r2
 8006b92:	4619      	mov	r1, r3
 8006b94:	f7fa f868 	bl	8000c68 <__aeabi_d2f>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	4a05      	ldr	r2, [pc, #20]	; (8006bb0 <ade_scale_apparant_power+0x48>)
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <ade_scale_apparant_power+0x48>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	f3af 8000 	nop.w
 8006bb0:	20013564 	.word	0x20013564
 8006bb4:	780346dc 	.word	0x780346dc
 8006bb8:	403e6c0b 	.word	0x403e6c0b

08006bbc <ade_get_power_factor>:

float ade_get_power_factor() {
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
	if(power && apparant_power)
 8006bc0:	4b10      	ldr	r3, [pc, #64]	; (8006c04 <ade_get_power_factor+0x48>)
 8006bc2:	edd3 7a00 	vldr	s15, [r3]
 8006bc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bce:	d010      	beq.n	8006bf2 <ade_get_power_factor+0x36>
 8006bd0:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <ade_get_power_factor+0x4c>)
 8006bd2:	edd3 7a00 	vldr	s15, [r3]
 8006bd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bde:	d008      	beq.n	8006bf2 <ade_get_power_factor+0x36>
		return power/apparant_power;
 8006be0:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <ade_get_power_factor+0x48>)
 8006be2:	ed93 7a00 	vldr	s14, [r3]
 8006be6:	4b08      	ldr	r3, [pc, #32]	; (8006c08 <ade_get_power_factor+0x4c>)
 8006be8:	edd3 7a00 	vldr	s15, [r3]
 8006bec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006bf0:	e001      	b.n	8006bf6 <ade_get_power_factor+0x3a>
	else return 0;
 8006bf2:	eddf 6a06 	vldr	s13, [pc, #24]	; 8006c0c <ade_get_power_factor+0x50>
 8006bf6:	ee16 3a90 	vmov	r3, s13
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	20013560 	.word	0x20013560
 8006c08:	20013564 	.word	0x20013564
 8006c0c:	00000000 	.word	0x00000000

08006c10 <lcd_puts_xy>:
LCD_Data_Screen3_t screen3_data;
LCD_Data_Screen4_t screen4_data, screen4_data_config;

DS1307_DateTime_t rtc_display, rtc_config;

void lcd_puts_xy(unsigned char x, unsigned char y, char* c, LCD5110_Pixel_t color, LCD5110_FontSize_t font) {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	603a      	str	r2, [r7, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	71fb      	strb	r3, [r7, #7]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	71bb      	strb	r3, [r7, #6]
 8006c22:	4613      	mov	r3, r2
 8006c24:	717b      	strb	r3, [r7, #5]
	LCD5110_GotoXY(x, y);
 8006c26:	79ba      	ldrb	r2, [r7, #6]
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fa ff7b 	bl	8001b28 <LCD5110_GotoXY>
	LCD5110_Puts(c, color, font);
 8006c32:	7c3a      	ldrb	r2, [r7, #16]
 8006c34:	797b      	ldrb	r3, [r7, #5]
 8006c36:	4619      	mov	r1, r3
 8006c38:	6838      	ldr	r0, [r7, #0]
 8006c3a:	f7fb f837 	bl	8001cac <LCD5110_Puts>
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <range_scale>:

void range_scale(float value, char* value_buf, char* range) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
	if(value < 0) value *= -1;
 8006c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c60:	d505      	bpl.n	8006c6e <range_scale+0x26>
 8006c62:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c66:	eef1 7a67 	vneg.f32	s15, s15
 8006c6a:	edc7 7a03 	vstr	s15, [r7, #12]
	if(value < 1000) {
 8006c6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c72:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006d60 <range_scale+0x118>
 8006c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7e:	d505      	bpl.n	8006c8c <range_scale+0x44>
		sprintf(range, "%s", "m");
 8006c80:	4a38      	ldr	r2, [pc, #224]	; (8006d64 <range_scale+0x11c>)
 8006c82:	4939      	ldr	r1, [pc, #228]	; (8006d68 <range_scale+0x120>)
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f002 faa5 	bl	80091d4 <siprintf>
 8006c8a:	e02c      	b.n	8006ce6 <range_scale+0x9e>
	} else if(value < 1000*1000) {
 8006c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c90:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006d6c <range_scale+0x124>
 8006c94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9c:	d50d      	bpl.n	8006cba <range_scale+0x72>
		sprintf(range, "%s", " ");
 8006c9e:	4a34      	ldr	r2, [pc, #208]	; (8006d70 <range_scale+0x128>)
 8006ca0:	4931      	ldr	r1, [pc, #196]	; (8006d68 <range_scale+0x120>)
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f002 fa96 	bl	80091d4 <siprintf>
		value /= 1000;
 8006ca8:	ed97 7a03 	vldr	s14, [r7, #12]
 8006cac:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8006d60 <range_scale+0x118>
 8006cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cb4:	edc7 7a03 	vstr	s15, [r7, #12]
 8006cb8:	e015      	b.n	8006ce6 <range_scale+0x9e>
	} else if(value < 1000*1000*1000) {
 8006cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cbe:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006d74 <range_scale+0x12c>
 8006cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cca:	d50c      	bpl.n	8006ce6 <range_scale+0x9e>
		sprintf(range, "%s", "k");
 8006ccc:	4a2a      	ldr	r2, [pc, #168]	; (8006d78 <range_scale+0x130>)
 8006cce:	4926      	ldr	r1, [pc, #152]	; (8006d68 <range_scale+0x120>)
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f002 fa7f 	bl	80091d4 <siprintf>
		value /= 1000*1000;
 8006cd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8006cda:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006d6c <range_scale+0x124>
 8006cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ce2:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	if(value < 10)
 8006ce6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf6:	d509      	bpl.n	8006d0c <range_scale+0xc4>
		sprintf(value_buf, "%1.3f", value);
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7f9 fc85 	bl	8000608 <__aeabi_f2d>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	491e      	ldr	r1, [pc, #120]	; (8006d7c <range_scale+0x134>)
 8006d04:	68b8      	ldr	r0, [r7, #8]
 8006d06:	f002 fa65 	bl	80091d4 <siprintf>
	else if(value < 100)
		sprintf(value_buf, "%2.2f", value);
	else if(value < 1000)
		sprintf(value_buf, "%3.1f", value);
}
 8006d0a:	e025      	b.n	8006d58 <range_scale+0x110>
	else if(value < 100)
 8006d0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d10:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006d80 <range_scale+0x138>
 8006d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1c:	d509      	bpl.n	8006d32 <range_scale+0xea>
		sprintf(value_buf, "%2.2f", value);
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f7f9 fc72 	bl	8000608 <__aeabi_f2d>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4916      	ldr	r1, [pc, #88]	; (8006d84 <range_scale+0x13c>)
 8006d2a:	68b8      	ldr	r0, [r7, #8]
 8006d2c:	f002 fa52 	bl	80091d4 <siprintf>
}
 8006d30:	e012      	b.n	8006d58 <range_scale+0x110>
	else if(value < 1000)
 8006d32:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d36:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006d60 <range_scale+0x118>
 8006d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d42:	d400      	bmi.n	8006d46 <range_scale+0xfe>
}
 8006d44:	e008      	b.n	8006d58 <range_scale+0x110>
		sprintf(value_buf, "%3.1f", value);
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7f9 fc5e 	bl	8000608 <__aeabi_f2d>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	490d      	ldr	r1, [pc, #52]	; (8006d88 <range_scale+0x140>)
 8006d52:	68b8      	ldr	r0, [r7, #8]
 8006d54:	f002 fa3e 	bl	80091d4 <siprintf>
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	447a0000 	.word	0x447a0000
 8006d64:	0800b688 	.word	0x0800b688
 8006d68:	0800b68c 	.word	0x0800b68c
 8006d6c:	49742400 	.word	0x49742400
 8006d70:	0800b690 	.word	0x0800b690
 8006d74:	4e6e6b28 	.word	0x4e6e6b28
 8006d78:	0800b694 	.word	0x0800b694
 8006d7c:	0800b698 	.word	0x0800b698
 8006d80:	42c80000 	.word	0x42c80000
 8006d84:	0800b6a0 	.word	0x0800b6a0
 8006d88:	0800b6a8 	.word	0x0800b6a8

08006d8c <lcd_screen_1_refresh>:

void lcd_screen_1_refresh() {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8006d92:	f7fa fdf9 	bl	8001988 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "Vrms", 1, 1);
 8006d96:	2301      	movs	r3, #1
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4a4f      	ldr	r2, [pc, #316]	; (8006edc <lcd_screen_1_refresh+0x150>)
 8006d9e:	2100      	movs	r1, #0
 8006da0:	2000      	movs	r0, #0
 8006da2:	f7ff ff35 	bl	8006c10 <lcd_puts_xy>
	range_scale(screen1_data.Vrms, val_buf, range_buf);
 8006da6:	4b4e      	ldr	r3, [pc, #312]	; (8006ee0 <lcd_screen_1_refresh+0x154>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	463a      	mov	r2, r7
 8006dac:	1d39      	adds	r1, r7, #4
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff ff4a 	bl	8006c48 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8006db4:	1d3a      	adds	r2, r7, #4
 8006db6:	2301      	movs	r3, #1
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	2301      	movs	r3, #1
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	201c      	movs	r0, #28
 8006dc0:	f7ff ff26 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 8006dc4:	463a      	mov	r2, r7
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	2301      	movs	r3, #1
 8006dcc:	2100      	movs	r1, #0
 8006dce:	203c      	movs	r0, #60	; 0x3c
 8006dd0:	f7ff ff1e 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "V", 1, 1);
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4a42      	ldr	r2, [pc, #264]	; (8006ee4 <lcd_screen_1_refresh+0x158>)
 8006ddc:	2100      	movs	r1, #0
 8006dde:	2042      	movs	r0, #66	; 0x42
 8006de0:	f7ff ff16 	bl	8006c10 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Vp", 1, 1);
 8006de4:	2301      	movs	r3, #1
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2301      	movs	r3, #1
 8006dea:	4a3f      	ldr	r2, [pc, #252]	; (8006ee8 <lcd_screen_1_refresh+0x15c>)
 8006dec:	210c      	movs	r1, #12
 8006dee:	2000      	movs	r0, #0
 8006df0:	f7ff ff0e 	bl	8006c10 <lcd_puts_xy>
	range_scale(screen1_data.Vpeak, val_buf, range_buf);
 8006df4:	4b3a      	ldr	r3, [pc, #232]	; (8006ee0 <lcd_screen_1_refresh+0x154>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	463a      	mov	r2, r7
 8006dfa:	1d39      	adds	r1, r7, #4
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7ff ff23 	bl	8006c48 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 8006e02:	1d3a      	adds	r2, r7, #4
 8006e04:	2301      	movs	r3, #1
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	2301      	movs	r3, #1
 8006e0a:	210c      	movs	r1, #12
 8006e0c:	201c      	movs	r0, #28
 8006e0e:	f7ff feff 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8006e12:	463a      	mov	r2, r7
 8006e14:	2301      	movs	r3, #1
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2301      	movs	r3, #1
 8006e1a:	210c      	movs	r1, #12
 8006e1c:	203c      	movs	r0, #60	; 0x3c
 8006e1e:	f7ff fef7 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1, 1);
 8006e22:	2301      	movs	r3, #1
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	2301      	movs	r3, #1
 8006e28:	4a2e      	ldr	r2, [pc, #184]	; (8006ee4 <lcd_screen_1_refresh+0x158>)
 8006e2a:	210c      	movs	r1, #12
 8006e2c:	2042      	movs	r0, #66	; 0x42
 8006e2e:	f7ff feef 	bl	8006c10 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_2, "Irms", 1, 1);
 8006e32:	2301      	movs	r3, #1
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	2301      	movs	r3, #1
 8006e38:	4a2c      	ldr	r2, [pc, #176]	; (8006eec <lcd_screen_1_refresh+0x160>)
 8006e3a:	211d      	movs	r1, #29
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	f7ff fee7 	bl	8006c10 <lcd_puts_xy>
	range_scale(screen1_data.Irms, val_buf, range_buf);
 8006e42:	4b27      	ldr	r3, [pc, #156]	; (8006ee0 <lcd_screen_1_refresh+0x154>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	463a      	mov	r2, r7
 8006e48:	1d39      	adds	r1, r7, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fefc 	bl	8006c48 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_2, val_buf, 1, 1);
 8006e50:	1d3a      	adds	r2, r7, #4
 8006e52:	2301      	movs	r3, #1
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	2301      	movs	r3, #1
 8006e58:	211d      	movs	r1, #29
 8006e5a:	201c      	movs	r0, #28
 8006e5c:	f7ff fed8 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_2, range_buf, 1, 1);
 8006e60:	463a      	mov	r2, r7
 8006e62:	2301      	movs	r3, #1
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	2301      	movs	r3, #1
 8006e68:	211d      	movs	r1, #29
 8006e6a:	203c      	movs	r0, #60	; 0x3c
 8006e6c:	f7ff fed0 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_2, "A", 1, 1);
 8006e70:	2301      	movs	r3, #1
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	2301      	movs	r3, #1
 8006e76:	4a1e      	ldr	r2, [pc, #120]	; (8006ef0 <lcd_screen_1_refresh+0x164>)
 8006e78:	211d      	movs	r1, #29
 8006e7a:	2042      	movs	r0, #66	; 0x42
 8006e7c:	f7ff fec8 	bl	8006c10 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "Ip", 1, 1);
 8006e80:	2301      	movs	r3, #1
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	2301      	movs	r3, #1
 8006e86:	4a1b      	ldr	r2, [pc, #108]	; (8006ef4 <lcd_screen_1_refresh+0x168>)
 8006e88:	2129      	movs	r1, #41	; 0x29
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	f7ff fec0 	bl	8006c10 <lcd_puts_xy>
	range_scale(screen1_data.Ipeak, val_buf, range_buf);
 8006e90:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <lcd_screen_1_refresh+0x154>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	463a      	mov	r2, r7
 8006e96:	1d39      	adds	r1, r7, #4
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff fed5 	bl	8006c48 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 8006e9e:	1d3a      	adds	r2, r7, #4
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	2129      	movs	r1, #41	; 0x29
 8006ea8:	201c      	movs	r0, #28
 8006eaa:	f7ff feb1 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1, 1);
 8006eae:	463a      	mov	r2, r7
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	2129      	movs	r1, #41	; 0x29
 8006eb8:	203c      	movs	r0, #60	; 0x3c
 8006eba:	f7ff fea9 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "A", 1, 1);
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4a0a      	ldr	r2, [pc, #40]	; (8006ef0 <lcd_screen_1_refresh+0x164>)
 8006ec6:	2129      	movs	r1, #41	; 0x29
 8006ec8:	2042      	movs	r0, #66	; 0x42
 8006eca:	f7ff fea1 	bl	8006c10 <lcd_puts_xy>

	LCD5110_Refresh();
 8006ece:	f7fa fd8d 	bl	80019ec <LCD5110_Refresh>
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	0800b6b0 	.word	0x0800b6b0
 8006ee0:	20013888 	.word	0x20013888
 8006ee4:	0800b6b8 	.word	0x0800b6b8
 8006ee8:	0800b6bc 	.word	0x0800b6bc
 8006eec:	0800b6c0 	.word	0x0800b6c0
 8006ef0:	0800b6c8 	.word	0x0800b6c8
 8006ef4:	0800b6cc 	.word	0x0800b6cc

08006ef8 <lcd_screen_2_refresh>:

void lcd_screen_2_refresh() {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8006efe:	f7fa fd43 	bl	8001988 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "P", 1, 1);
 8006f02:	2301      	movs	r3, #1
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	2301      	movs	r3, #1
 8006f08:	4a49      	ldr	r2, [pc, #292]	; (8007030 <lcd_screen_2_refresh+0x138>)
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	f7ff fe7f 	bl	8006c10 <lcd_puts_xy>
	range_scale(screen2_data.ActivePower, val_buf, range_buf);
 8006f12:	4b48      	ldr	r3, [pc, #288]	; (8007034 <lcd_screen_2_refresh+0x13c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	463a      	mov	r2, r7
 8006f18:	1d39      	adds	r1, r7, #4
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff fe94 	bl	8006c48 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8006f20:	1d3a      	adds	r2, r7, #4
 8006f22:	2301      	movs	r3, #1
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	2301      	movs	r3, #1
 8006f28:	2100      	movs	r1, #0
 8006f2a:	201c      	movs	r0, #28
 8006f2c:	f7ff fe70 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 8006f30:	463a      	mov	r2, r7
 8006f32:	2301      	movs	r3, #1
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	2301      	movs	r3, #1
 8006f38:	2100      	movs	r1, #0
 8006f3a:	203c      	movs	r0, #60	; 0x3c
 8006f3c:	f7ff fe68 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "W", 1, 1);
 8006f40:	2301      	movs	r3, #1
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	2301      	movs	r3, #1
 8006f46:	4a3c      	ldr	r2, [pc, #240]	; (8007038 <lcd_screen_2_refresh+0x140>)
 8006f48:	2100      	movs	r1, #0
 8006f4a:	2042      	movs	r0, #66	; 0x42
 8006f4c:	f7ff fe60 	bl	8006c10 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Q", 1, 1);
 8006f50:	2301      	movs	r3, #1
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	2301      	movs	r3, #1
 8006f56:	4a39      	ldr	r2, [pc, #228]	; (800703c <lcd_screen_2_refresh+0x144>)
 8006f58:	210c      	movs	r1, #12
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	f7ff fe58 	bl	8006c10 <lcd_puts_xy>
	range_scale(screen2_data.ReactivePower, val_buf, range_buf);
 8006f60:	4b34      	ldr	r3, [pc, #208]	; (8007034 <lcd_screen_2_refresh+0x13c>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	463a      	mov	r2, r7
 8006f66:	1d39      	adds	r1, r7, #4
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fe6d 	bl	8006c48 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 8006f6e:	1d3a      	adds	r2, r7, #4
 8006f70:	2301      	movs	r3, #1
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	2301      	movs	r3, #1
 8006f76:	210c      	movs	r1, #12
 8006f78:	201c      	movs	r0, #28
 8006f7a:	f7ff fe49 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8006f7e:	463a      	mov	r2, r7
 8006f80:	2301      	movs	r3, #1
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	2301      	movs	r3, #1
 8006f86:	210c      	movs	r1, #12
 8006f88:	203c      	movs	r0, #60	; 0x3c
 8006f8a:	f7ff fe41 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAR", 1, 1);
 8006f8e:	2301      	movs	r3, #1
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	2301      	movs	r3, #1
 8006f94:	4a2a      	ldr	r2, [pc, #168]	; (8007040 <lcd_screen_2_refresh+0x148>)
 8006f96:	210c      	movs	r1, #12
 8006f98:	2042      	movs	r0, #66	; 0x42
 8006f9a:	f7ff fe39 	bl	8006c10 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_1, "S", 1, 1);
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4a27      	ldr	r2, [pc, #156]	; (8007044 <lcd_screen_2_refresh+0x14c>)
 8006fa6:	2118      	movs	r1, #24
 8006fa8:	2000      	movs	r0, #0
 8006faa:	f7ff fe31 	bl	8006c10 <lcd_puts_xy>
	range_scale(screen2_data.ApparantPower, val_buf, range_buf);
 8006fae:	4b21      	ldr	r3, [pc, #132]	; (8007034 <lcd_screen_2_refresh+0x13c>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	463a      	mov	r2, r7
 8006fb4:	1d39      	adds	r1, r7, #4
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff fe46 	bl	8006c48 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1, 1);
 8006fbc:	1d3a      	adds	r2, r7, #4
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	2118      	movs	r1, #24
 8006fc6:	201c      	movs	r0, #28
 8006fc8:	f7ff fe22 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1, 1);
 8006fcc:	463a      	mov	r2, r7
 8006fce:	2301      	movs	r3, #1
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	2118      	movs	r1, #24
 8006fd6:	203c      	movs	r0, #60	; 0x3c
 8006fd8:	f7ff fe1a 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "VA", 1, 1);
 8006fdc:	2301      	movs	r3, #1
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	4a19      	ldr	r2, [pc, #100]	; (8007048 <lcd_screen_2_refresh+0x150>)
 8006fe4:	2118      	movs	r1, #24
 8006fe6:	2042      	movs	r0, #66	; 0x42
 8006fe8:	f7ff fe12 	bl	8006c10 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "PF", 1, 1);
 8006fec:	2301      	movs	r3, #1
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	4a16      	ldr	r2, [pc, #88]	; (800704c <lcd_screen_2_refresh+0x154>)
 8006ff4:	2129      	movs	r1, #41	; 0x29
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	f7ff fe0a 	bl	8006c10 <lcd_puts_xy>
	sprintf(val_buf, "%.2f", screen2_data.PowerFactor);
 8006ffc:	4b0d      	ldr	r3, [pc, #52]	; (8007034 <lcd_screen_2_refresh+0x13c>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	4618      	mov	r0, r3
 8007002:	f7f9 fb01 	bl	8000608 <__aeabi_f2d>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	1d38      	adds	r0, r7, #4
 800700c:	4910      	ldr	r1, [pc, #64]	; (8007050 <lcd_screen_2_refresh+0x158>)
 800700e:	f002 f8e1 	bl	80091d4 <siprintf>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 8007012:	1d3a      	adds	r2, r7, #4
 8007014:	2301      	movs	r3, #1
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	2301      	movs	r3, #1
 800701a:	2129      	movs	r1, #41	; 0x29
 800701c:	201c      	movs	r0, #28
 800701e:	f7ff fdf7 	bl	8006c10 <lcd_puts_xy>

	LCD5110_Refresh();
 8007022:	f7fa fce3 	bl	80019ec <LCD5110_Refresh>
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	0800b6d0 	.word	0x0800b6d0
 8007034:	20013874 	.word	0x20013874
 8007038:	0800b6d4 	.word	0x0800b6d4
 800703c:	0800b6d8 	.word	0x0800b6d8
 8007040:	0800b6dc 	.word	0x0800b6dc
 8007044:	0800b6e0 	.word	0x0800b6e0
 8007048:	0800b6e4 	.word	0x0800b6e4
 800704c:	0800b6e8 	.word	0x0800b6e8
 8007050:	0800b6ec 	.word	0x0800b6ec

08007054 <lcd_screen_3_refresh>:

void lcd_screen_3_refresh() {
 8007054:	b580      	push	{r7, lr}
 8007056:	b08c      	sub	sp, #48	; 0x30
 8007058:	af02      	add	r7, sp, #8
	LCD5110_Clear();
 800705a:	f7fa fc95 	bl	8001988 <LCD5110_Clear>

	char val_buf[10];
	char range_buf[2];

	lcd_puts_xy(0, ROW_LINE_1, "P.t", 1, 1);
 800705e:	2301      	movs	r3, #1
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	2301      	movs	r3, #1
 8007064:	4a4d      	ldr	r2, [pc, #308]	; (800719c <lcd_screen_3_refresh+0x148>)
 8007066:	2100      	movs	r1, #0
 8007068:	2000      	movs	r0, #0
 800706a:	f7ff fdd1 	bl	8006c10 <lcd_puts_xy>
	range_scale(screen3_data.ActiveEnergy, val_buf, range_buf);
 800706e:	4b4c      	ldr	r3, [pc, #304]	; (80071a0 <lcd_screen_3_refresh+0x14c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f107 0218 	add.w	r2, r7, #24
 8007076:	f107 011c 	add.w	r1, r7, #28
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff fde4 	bl	8006c48 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8007080:	f107 021c 	add.w	r2, r7, #28
 8007084:	2301      	movs	r3, #1
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	2301      	movs	r3, #1
 800708a:	2100      	movs	r1, #0
 800708c:	201c      	movs	r0, #28
 800708e:	f7ff fdbf 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 8007092:	f107 0218 	add.w	r2, r7, #24
 8007096:	2301      	movs	r3, #1
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2301      	movs	r3, #1
 800709c:	2100      	movs	r1, #0
 800709e:	203c      	movs	r0, #60	; 0x3c
 80070a0:	f7ff fdb6 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "Wh", 1, 1);
 80070a4:	2301      	movs	r3, #1
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	2301      	movs	r3, #1
 80070aa:	4a3e      	ldr	r2, [pc, #248]	; (80071a4 <lcd_screen_3_refresh+0x150>)
 80070ac:	2100      	movs	r1, #0
 80070ae:	2042      	movs	r0, #66	; 0x42
 80070b0:	f7ff fdae 	bl	8006c10 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "S.t", 1, 1);
 80070b4:	2301      	movs	r3, #1
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	2301      	movs	r3, #1
 80070ba:	4a3b      	ldr	r2, [pc, #236]	; (80071a8 <lcd_screen_3_refresh+0x154>)
 80070bc:	210c      	movs	r1, #12
 80070be:	2000      	movs	r0, #0
 80070c0:	f7ff fda6 	bl	8006c10 <lcd_puts_xy>
	range_scale(screen3_data.ApparantEnergy, val_buf, range_buf);
 80070c4:	4b36      	ldr	r3, [pc, #216]	; (80071a0 <lcd_screen_3_refresh+0x14c>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f107 0218 	add.w	r2, r7, #24
 80070cc:	f107 011c 	add.w	r1, r7, #28
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff fdb9 	bl	8006c48 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 80070d6:	f107 021c 	add.w	r2, r7, #28
 80070da:	2301      	movs	r3, #1
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	2301      	movs	r3, #1
 80070e0:	210c      	movs	r1, #12
 80070e2:	201c      	movs	r0, #28
 80070e4:	f7ff fd94 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 80070e8:	f107 0218 	add.w	r2, r7, #24
 80070ec:	2301      	movs	r3, #1
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	2301      	movs	r3, #1
 80070f2:	210c      	movs	r1, #12
 80070f4:	203c      	movs	r0, #60	; 0x3c
 80070f6:	f7ff fd8b 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAh", 1, 1);
 80070fa:	2301      	movs	r3, #1
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	2301      	movs	r3, #1
 8007100:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <lcd_screen_3_refresh+0x158>)
 8007102:	210c      	movs	r1, #12
 8007104:	2042      	movs	r0, #66	; 0x42
 8007106:	f7ff fd83 	bl	8006c10 <lcd_puts_xy>

	if(screen3_mode == S3_RESET_CONFIRM_DISPLAY) {
 800710a:	4b29      	ldr	r3, [pc, #164]	; (80071b0 <lcd_screen_3_refresh+0x15c>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d10f      	bne.n	8007132 <lcd_screen_3_refresh+0xde>
		lcd_puts_xy(12, ROW_LINE_3_1, "Clear Data?", 1, 1);
 8007112:	2301      	movs	r3, #1
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	2301      	movs	r3, #1
 8007118:	4a26      	ldr	r2, [pc, #152]	; (80071b4 <lcd_screen_3_refresh+0x160>)
 800711a:	2118      	movs	r1, #24
 800711c:	200c      	movs	r0, #12
 800711e:	f7ff fd77 	bl	8006c10 <lcd_puts_xy>
		lcd_puts_xy(12, ROW_LINE_3_1 + 8, "[#]Y / [*]N", 1, 1);
 8007122:	2301      	movs	r3, #1
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	2301      	movs	r3, #1
 8007128:	4a23      	ldr	r2, [pc, #140]	; (80071b8 <lcd_screen_3_refresh+0x164>)
 800712a:	2120      	movs	r1, #32
 800712c:	200c      	movs	r0, #12
 800712e:	f7ff fd6f 	bl	8006c10 <lcd_puts_xy>
	}

	char days_buf[5];
	sprintf(days_buf, "%04lu", screen3_timer.days);
 8007132:	4b22      	ldr	r3, [pc, #136]	; (80071bc <lcd_screen_3_refresh+0x168>)
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	f107 0310 	add.w	r3, r7, #16
 800713a:	4921      	ldr	r1, [pc, #132]	; (80071c0 <lcd_screen_3_refresh+0x16c>)
 800713c:	4618      	mov	r0, r3
 800713e:	f002 f849 	bl	80091d4 <siprintf>
	lcd_puts_xy(0, ROW_LINE_4, days_buf, 1, 1);
 8007142:	f107 0210 	add.w	r2, r7, #16
 8007146:	2301      	movs	r3, #1
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	2301      	movs	r3, #1
 800714c:	2129      	movs	r1, #41	; 0x29
 800714e:	2000      	movs	r0, #0
 8007150:	f7ff fd5e 	bl	8006c10 <lcd_puts_xy>
	lcd_puts_xy(26, ROW_LINE_4 + 2, "DAY(s)", 1, 0);
 8007154:	2300      	movs	r3, #0
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	2301      	movs	r3, #1
 800715a:	4a1a      	ldr	r2, [pc, #104]	; (80071c4 <lcd_screen_3_refresh+0x170>)
 800715c:	212b      	movs	r1, #43	; 0x2b
 800715e:	201a      	movs	r0, #26
 8007160:	f7ff fd56 	bl	8006c10 <lcd_puts_xy>

	char runtime_buf[9];
	sprintf(runtime_buf, "%02u:%02u:%02u", screen3_timer.hours, screen3_timer.minutes, screen3_timer.seconds);
 8007164:	4b15      	ldr	r3, [pc, #84]	; (80071bc <lcd_screen_3_refresh+0x168>)
 8007166:	791b      	ldrb	r3, [r3, #4]
 8007168:	461a      	mov	r2, r3
 800716a:	4b14      	ldr	r3, [pc, #80]	; (80071bc <lcd_screen_3_refresh+0x168>)
 800716c:	795b      	ldrb	r3, [r3, #5]
 800716e:	4619      	mov	r1, r3
 8007170:	4b12      	ldr	r3, [pc, #72]	; (80071bc <lcd_screen_3_refresh+0x168>)
 8007172:	799b      	ldrb	r3, [r3, #6]
 8007174:	1d38      	adds	r0, r7, #4
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	460b      	mov	r3, r1
 800717a:	4913      	ldr	r1, [pc, #76]	; (80071c8 <lcd_screen_3_refresh+0x174>)
 800717c:	f002 f82a 	bl	80091d4 <siprintf>
	lcd_puts_xy(56, ROW_LINE_4 + 2, runtime_buf, 1, 0);
 8007180:	1d3a      	adds	r2, r7, #4
 8007182:	2300      	movs	r3, #0
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	2301      	movs	r3, #1
 8007188:	212b      	movs	r1, #43	; 0x2b
 800718a:	2038      	movs	r0, #56	; 0x38
 800718c:	f7ff fd40 	bl	8006c10 <lcd_puts_xy>

	LCD5110_Refresh();
 8007190:	f7fa fc2c 	bl	80019ec <LCD5110_Refresh>
}
 8007194:	bf00      	nop
 8007196:	3728      	adds	r7, #40	; 0x28
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	0800b6f4 	.word	0x0800b6f4
 80071a0:	200138b0 	.word	0x200138b0
 80071a4:	0800b6f8 	.word	0x0800b6f8
 80071a8:	0800b6fc 	.word	0x0800b6fc
 80071ac:	0800b700 	.word	0x0800b700
 80071b0:	20013884 	.word	0x20013884
 80071b4:	0800b704 	.word	0x0800b704
 80071b8:	0800b710 	.word	0x0800b710
 80071bc:	20013864 	.word	0x20013864
 80071c0:	0800b71c 	.word	0x0800b71c
 80071c4:	0800b724 	.word	0x0800b724
 80071c8:	0800b72c 	.word	0x0800b72c

080071cc <lcd_screen_4_refresh>:

void lcd_screen_4_refresh() {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08e      	sub	sp, #56	; 0x38
 80071d0:	af02      	add	r7, sp, #8
	char time_buf[9];
	char val_buf[10];
	char range_buf[2];
	char interval_buf[7];

	LCD5110_Clear();
 80071d2:	f7fa fbd9 	bl	8001988 <LCD5110_Clear>

	if(screen4_mode == S4_NORMAL_DISPLAY) {
 80071d6:	4bc0      	ldr	r3, [pc, #768]	; (80074d8 <lcd_screen_4_refresh+0x30c>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f040 80af 	bne.w	800733e <lcd_screen_4_refresh+0x172>

		lcd_puts_xy(0, 0, "PKV", 1, 1);
 80071e0:	2301      	movs	r3, #1
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	2301      	movs	r3, #1
 80071e6:	4abd      	ldr	r2, [pc, #756]	; (80074dc <lcd_screen_4_refresh+0x310>)
 80071e8:	2100      	movs	r1, #0
 80071ea:	2000      	movs	r0, #0
 80071ec:	f7ff fd10 	bl	8006c10 <lcd_puts_xy>
		range_scale(screen4_data.User_PKV, val_buf, range_buf);
 80071f0:	4bbb      	ldr	r3, [pc, #748]	; (80074e0 <lcd_screen_4_refresh+0x314>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f107 0208 	add.w	r2, r7, #8
 80071f8:	f107 010c 	add.w	r1, r7, #12
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff fd23 	bl	8006c48 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 0, val_buf, 1, 1);
 8007202:	f107 020c 	add.w	r2, r7, #12
 8007206:	2301      	movs	r3, #1
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	2301      	movs	r3, #1
 800720c:	2100      	movs	r1, #0
 800720e:	201c      	movs	r0, #28
 8007210:	f7ff fcfe 	bl	8006c10 <lcd_puts_xy>
//		lcd_puts_xy(VALUE_RANGE_COLUMN, 0, range_buf, 1, 1);
		lcd_puts_xy(UNITS_COLUMN, 0, "V", 1, 1);
 8007214:	2301      	movs	r3, #1
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2301      	movs	r3, #1
 800721a:	4ab2      	ldr	r2, [pc, #712]	; (80074e4 <lcd_screen_4_refresh+0x318>)
 800721c:	2100      	movs	r1, #0
 800721e:	2042      	movs	r0, #66	; 0x42
 8007220:	f7ff fcf6 	bl	8006c10 <lcd_puts_xy>

		lcd_puts_xy(0, 10, "PKI", 1, 1);
 8007224:	2301      	movs	r3, #1
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2301      	movs	r3, #1
 800722a:	4aaf      	ldr	r2, [pc, #700]	; (80074e8 <lcd_screen_4_refresh+0x31c>)
 800722c:	210a      	movs	r1, #10
 800722e:	2000      	movs	r0, #0
 8007230:	f7ff fcee 	bl	8006c10 <lcd_puts_xy>
		range_scale(screen4_data.User_PKI, val_buf, range_buf);
 8007234:	4baa      	ldr	r3, [pc, #680]	; (80074e0 <lcd_screen_4_refresh+0x314>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f107 0208 	add.w	r2, r7, #8
 800723c:	f107 010c 	add.w	r1, r7, #12
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff fd01 	bl	8006c48 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 10, val_buf, 1, 1);
 8007246:	f107 020c 	add.w	r2, r7, #12
 800724a:	2301      	movs	r3, #1
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	2301      	movs	r3, #1
 8007250:	210a      	movs	r1, #10
 8007252:	201c      	movs	r0, #28
 8007254:	f7ff fcdc 	bl	8006c10 <lcd_puts_xy>
//		lcd_puts_xy(VALUE_RANGE_COLUMN, 10, range_buf, 1, 1);
		lcd_puts_xy(UNITS_COLUMN, 10, "A", 1, 1);
 8007258:	2301      	movs	r3, #1
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	2301      	movs	r3, #1
 800725e:	4aa3      	ldr	r2, [pc, #652]	; (80074ec <lcd_screen_4_refresh+0x320>)
 8007260:	210a      	movs	r1, #10
 8007262:	2042      	movs	r0, #66	; 0x42
 8007264:	f7ff fcd4 	bl	8006c10 <lcd_puts_xy>

		lcd_puts_xy(0, 20, "SAG", 1, 1);
 8007268:	2301      	movs	r3, #1
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	2301      	movs	r3, #1
 800726e:	4aa0      	ldr	r2, [pc, #640]	; (80074f0 <lcd_screen_4_refresh+0x324>)
 8007270:	2114      	movs	r1, #20
 8007272:	2000      	movs	r0, #0
 8007274:	f7ff fccc 	bl	8006c10 <lcd_puts_xy>
		range_scale(screen4_data.User_SAG, val_buf, range_buf);
 8007278:	4b99      	ldr	r3, [pc, #612]	; (80074e0 <lcd_screen_4_refresh+0x314>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f107 0208 	add.w	r2, r7, #8
 8007280:	f107 010c 	add.w	r1, r7, #12
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff fcdf 	bl	8006c48 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 20, val_buf, 1, 1);
 800728a:	f107 020c 	add.w	r2, r7, #12
 800728e:	2301      	movs	r3, #1
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	2301      	movs	r3, #1
 8007294:	2114      	movs	r1, #20
 8007296:	201c      	movs	r0, #28
 8007298:	f7ff fcba 	bl	8006c10 <lcd_puts_xy>
//		lcd_puts_xy(VALUE_RANGE_COLUMN, 20, range_buf, 1, 1);
		lcd_puts_xy(UNITS_COLUMN, 20, "V", 1, 1);
 800729c:	2301      	movs	r3, #1
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	2301      	movs	r3, #1
 80072a2:	4a90      	ldr	r2, [pc, #576]	; (80074e4 <lcd_screen_4_refresh+0x318>)
 80072a4:	2114      	movs	r1, #20
 80072a6:	2042      	movs	r0, #66	; 0x42
 80072a8:	f7ff fcb2 	bl	8006c10 <lcd_puts_xy>

		lcd_puts_xy(0, 30, "Intv", 1, 1);
 80072ac:	2301      	movs	r3, #1
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	2301      	movs	r3, #1
 80072b2:	4a90      	ldr	r2, [pc, #576]	; (80074f4 <lcd_screen_4_refresh+0x328>)
 80072b4:	211e      	movs	r1, #30
 80072b6:	2000      	movs	r0, #0
 80072b8:	f7ff fcaa 	bl	8006c10 <lcd_puts_xy>
		sprintf(interval_buf, "%02dmins", screen4_data.User_Interval);
 80072bc:	4b88      	ldr	r3, [pc, #544]	; (80074e0 <lcd_screen_4_refresh+0x314>)
 80072be:	7b1b      	ldrb	r3, [r3, #12]
 80072c0:	461a      	mov	r2, r3
 80072c2:	463b      	mov	r3, r7
 80072c4:	498c      	ldr	r1, [pc, #560]	; (80074f8 <lcd_screen_4_refresh+0x32c>)
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 ff84 	bl	80091d4 <siprintf>
		lcd_puts_xy(INTVL_COLUMN, 30, interval_buf, 1, 1);
 80072cc:	463a      	mov	r2, r7
 80072ce:	2301      	movs	r3, #1
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	2301      	movs	r3, #1
 80072d4:	211e      	movs	r1, #30
 80072d6:	2028      	movs	r0, #40	; 0x28
 80072d8:	f7ff fc9a 	bl	8006c10 <lcd_puts_xy>

		sprintf(date_buf, "%02u/%02u/20%02u",
				rtc_display.date,
 80072dc:	4b87      	ldr	r3, [pc, #540]	; (80074fc <lcd_screen_4_refresh+0x330>)
 80072de:	791b      	ldrb	r3, [r3, #4]
		sprintf(date_buf, "%02u/%02u/20%02u",
 80072e0:	461a      	mov	r2, r3
				rtc_display.month,
 80072e2:	4b86      	ldr	r3, [pc, #536]	; (80074fc <lcd_screen_4_refresh+0x330>)
 80072e4:	795b      	ldrb	r3, [r3, #5]
		sprintf(date_buf, "%02u/%02u/20%02u",
 80072e6:	4619      	mov	r1, r3
				rtc_display.year);
 80072e8:	4b84      	ldr	r3, [pc, #528]	; (80074fc <lcd_screen_4_refresh+0x330>)
 80072ea:	799b      	ldrb	r3, [r3, #6]
		sprintf(date_buf, "%02u/%02u/20%02u",
 80072ec:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	460b      	mov	r3, r1
 80072f4:	4982      	ldr	r1, [pc, #520]	; (8007500 <lcd_screen_4_refresh+0x334>)
 80072f6:	f001 ff6d 	bl	80091d4 <siprintf>
		lcd_puts_xy(0, ROW_LINE_4 + 2, date_buf, 1, 0);
 80072fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80072fe:	2300      	movs	r3, #0
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	2301      	movs	r3, #1
 8007304:	212b      	movs	r1, #43	; 0x2b
 8007306:	2000      	movs	r0, #0
 8007308:	f7ff fc82 	bl	8006c10 <lcd_puts_xy>
		sprintf(time_buf, "%02u:%02u:%02u",
				rtc_display.hours,
 800730c:	4b7b      	ldr	r3, [pc, #492]	; (80074fc <lcd_screen_4_refresh+0x330>)
 800730e:	789b      	ldrb	r3, [r3, #2]
		sprintf(time_buf, "%02u:%02u:%02u",
 8007310:	461a      	mov	r2, r3
				rtc_display.minutes,
 8007312:	4b7a      	ldr	r3, [pc, #488]	; (80074fc <lcd_screen_4_refresh+0x330>)
 8007314:	785b      	ldrb	r3, [r3, #1]
		sprintf(time_buf, "%02u:%02u:%02u",
 8007316:	4619      	mov	r1, r3
				rtc_display.seconds);
 8007318:	4b78      	ldr	r3, [pc, #480]	; (80074fc <lcd_screen_4_refresh+0x330>)
 800731a:	781b      	ldrb	r3, [r3, #0]
		sprintf(time_buf, "%02u:%02u:%02u",
 800731c:	f107 0018 	add.w	r0, r7, #24
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	460b      	mov	r3, r1
 8007324:	4977      	ldr	r1, [pc, #476]	; (8007504 <lcd_screen_4_refresh+0x338>)
 8007326:	f001 ff55 	bl	80091d4 <siprintf>
		lcd_puts_xy(56, ROW_LINE_4 + 2, time_buf, 1, 0);
 800732a:	f107 0218 	add.w	r2, r7, #24
 800732e:	2300      	movs	r3, #0
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	2301      	movs	r3, #1
 8007334:	212b      	movs	r1, #43	; 0x2b
 8007336:	2038      	movs	r0, #56	; 0x38
 8007338:	f7ff fc6a 	bl	8006c10 <lcd_puts_xy>
 800733c:	e1f8      	b.n	8007730 <lcd_screen_4_refresh+0x564>

	} else {

		lcd_puts_xy(5, 0, "Configuration", 1, 1);
 800733e:	2301      	movs	r3, #1
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	2301      	movs	r3, #1
 8007344:	4a70      	ldr	r2, [pc, #448]	; (8007508 <lcd_screen_4_refresh+0x33c>)
 8007346:	2100      	movs	r1, #0
 8007348:	2005      	movs	r0, #5
 800734a:	f7ff fc61 	bl	8006c10 <lcd_puts_xy>

		if(screen4_mode == S4_CONFIG_DISPLAY) {
 800734e:	4b62      	ldr	r3, [pc, #392]	; (80074d8 <lcd_screen_4_refresh+0x30c>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d155      	bne.n	8007402 <lcd_screen_4_refresh+0x236>
			lcd_puts_xy(10, 10, "Parameters", 1, 1);
 8007356:	2301      	movs	r3, #1
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	2301      	movs	r3, #1
 800735c:	4a6b      	ldr	r2, [pc, #428]	; (800750c <lcd_screen_4_refresh+0x340>)
 800735e:	210a      	movs	r1, #10
 8007360:	200a      	movs	r0, #10
 8007362:	f7ff fc55 	bl	8006c10 <lcd_puts_xy>
			lcd_puts_xy(10, 20, "Date & Time", 1, 1);
 8007366:	2301      	movs	r3, #1
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	2301      	movs	r3, #1
 800736c:	4a68      	ldr	r2, [pc, #416]	; (8007510 <lcd_screen_4_refresh+0x344>)
 800736e:	2114      	movs	r1, #20
 8007370:	200a      	movs	r0, #10
 8007372:	f7ff fc4d 	bl	8006c10 <lcd_puts_xy>
			if(screen4_config_option == Config_Params)
 8007376:	4b67      	ldr	r3, [pc, #412]	; (8007514 <lcd_screen_4_refresh+0x348>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d108      	bne.n	8007390 <lcd_screen_4_refresh+0x1c4>
				lcd_puts_xy(0, 10, ">", 1, 1);
 800737e:	2301      	movs	r3, #1
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	2301      	movs	r3, #1
 8007384:	4a64      	ldr	r2, [pc, #400]	; (8007518 <lcd_screen_4_refresh+0x34c>)
 8007386:	210a      	movs	r1, #10
 8007388:	2000      	movs	r0, #0
 800738a:	f7ff fc41 	bl	8006c10 <lcd_puts_xy>
 800738e:	e007      	b.n	80073a0 <lcd_screen_4_refresh+0x1d4>
			else lcd_puts_xy(0, 20, ">", 1, 1);
 8007390:	2301      	movs	r3, #1
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	2301      	movs	r3, #1
 8007396:	4a60      	ldr	r2, [pc, #384]	; (8007518 <lcd_screen_4_refresh+0x34c>)
 8007398:	2114      	movs	r1, #20
 800739a:	2000      	movs	r0, #0
 800739c:	f7ff fc38 	bl	8006c10 <lcd_puts_xy>

			sprintf(date_buf, "%02u/%02u/20%02u",
					rtc_display.date,
 80073a0:	4b56      	ldr	r3, [pc, #344]	; (80074fc <lcd_screen_4_refresh+0x330>)
 80073a2:	791b      	ldrb	r3, [r3, #4]
			sprintf(date_buf, "%02u/%02u/20%02u",
 80073a4:	461a      	mov	r2, r3
					rtc_display.month,
 80073a6:	4b55      	ldr	r3, [pc, #340]	; (80074fc <lcd_screen_4_refresh+0x330>)
 80073a8:	795b      	ldrb	r3, [r3, #5]
			sprintf(date_buf, "%02u/%02u/20%02u",
 80073aa:	4619      	mov	r1, r3
					rtc_display.year);
 80073ac:	4b53      	ldr	r3, [pc, #332]	; (80074fc <lcd_screen_4_refresh+0x330>)
 80073ae:	799b      	ldrb	r3, [r3, #6]
			sprintf(date_buf, "%02u/%02u/20%02u",
 80073b0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	460b      	mov	r3, r1
 80073b8:	4951      	ldr	r1, [pc, #324]	; (8007500 <lcd_screen_4_refresh+0x334>)
 80073ba:	f001 ff0b 	bl	80091d4 <siprintf>
			lcd_puts_xy(0, ROW_LINE_4 + 2, date_buf, 1, 0);
 80073be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80073c2:	2300      	movs	r3, #0
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	2301      	movs	r3, #1
 80073c8:	212b      	movs	r1, #43	; 0x2b
 80073ca:	2000      	movs	r0, #0
 80073cc:	f7ff fc20 	bl	8006c10 <lcd_puts_xy>
			sprintf(time_buf, "%02u:%02u:%02u",
					rtc_display.hours,
 80073d0:	4b4a      	ldr	r3, [pc, #296]	; (80074fc <lcd_screen_4_refresh+0x330>)
 80073d2:	789b      	ldrb	r3, [r3, #2]
			sprintf(time_buf, "%02u:%02u:%02u",
 80073d4:	461a      	mov	r2, r3
					rtc_display.minutes,
 80073d6:	4b49      	ldr	r3, [pc, #292]	; (80074fc <lcd_screen_4_refresh+0x330>)
 80073d8:	785b      	ldrb	r3, [r3, #1]
			sprintf(time_buf, "%02u:%02u:%02u",
 80073da:	4619      	mov	r1, r3
					rtc_display.seconds);
 80073dc:	4b47      	ldr	r3, [pc, #284]	; (80074fc <lcd_screen_4_refresh+0x330>)
 80073de:	781b      	ldrb	r3, [r3, #0]
			sprintf(time_buf, "%02u:%02u:%02u",
 80073e0:	f107 0018 	add.w	r0, r7, #24
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	460b      	mov	r3, r1
 80073e8:	4946      	ldr	r1, [pc, #280]	; (8007504 <lcd_screen_4_refresh+0x338>)
 80073ea:	f001 fef3 	bl	80091d4 <siprintf>
			lcd_puts_xy(56, ROW_LINE_4 + 2, time_buf, 1, 0);
 80073ee:	f107 0218 	add.w	r2, r7, #24
 80073f2:	2300      	movs	r3, #0
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	2301      	movs	r3, #1
 80073f8:	212b      	movs	r1, #43	; 0x2b
 80073fa:	2038      	movs	r0, #56	; 0x38
 80073fc:	f7ff fc08 	bl	8006c10 <lcd_puts_xy>
 8007400:	e196      	b.n	8007730 <lcd_screen_4_refresh+0x564>

		} else if (screen4_mode == S4_CONFIG_PARAMS_DISPLAY) {
 8007402:	4b35      	ldr	r3, [pc, #212]	; (80074d8 <lcd_screen_4_refresh+0x30c>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b02      	cmp	r3, #2
 8007408:	f040 8107 	bne.w	800761a <lcd_screen_4_refresh+0x44e>
			lcd_puts_xy(0, 10, "PKV", 1, 1);
 800740c:	2301      	movs	r3, #1
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	2301      	movs	r3, #1
 8007412:	4a32      	ldr	r2, [pc, #200]	; (80074dc <lcd_screen_4_refresh+0x310>)
 8007414:	210a      	movs	r1, #10
 8007416:	2000      	movs	r0, #0
 8007418:	f7ff fbfa 	bl	8006c10 <lcd_puts_xy>
			lcd_puts_xy(0, 20, "PKI", 1, 1);
 800741c:	2301      	movs	r3, #1
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	2301      	movs	r3, #1
 8007422:	4a31      	ldr	r2, [pc, #196]	; (80074e8 <lcd_screen_4_refresh+0x31c>)
 8007424:	2114      	movs	r1, #20
 8007426:	2000      	movs	r0, #0
 8007428:	f7ff fbf2 	bl	8006c10 <lcd_puts_xy>
			lcd_puts_xy(0, 30, "SAG", 1, 1);
 800742c:	2301      	movs	r3, #1
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	2301      	movs	r3, #1
 8007432:	4a2f      	ldr	r2, [pc, #188]	; (80074f0 <lcd_screen_4_refresh+0x324>)
 8007434:	211e      	movs	r1, #30
 8007436:	2000      	movs	r0, #0
 8007438:	f7ff fbea 	bl	8006c10 <lcd_puts_xy>
			lcd_puts_xy(0, 40, "Intv", 1, 1);
 800743c:	2301      	movs	r3, #1
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	2301      	movs	r3, #1
 8007442:	4a2c      	ldr	r2, [pc, #176]	; (80074f4 <lcd_screen_4_refresh+0x328>)
 8007444:	2128      	movs	r1, #40	; 0x28
 8007446:	2000      	movs	r0, #0
 8007448:	f7ff fbe2 	bl	8006c10 <lcd_puts_xy>

			switch (screen4_config_item) {
 800744c:	4b33      	ldr	r3, [pc, #204]	; (800751c <lcd_screen_4_refresh+0x350>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b07      	cmp	r3, #7
 8007452:	f200 8082 	bhi.w	800755a <lcd_screen_4_refresh+0x38e>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <lcd_screen_4_refresh+0x290>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	0800747d 	.word	0x0800747d
 8007460:	0800748f 	.word	0x0800748f
 8007464:	080074a1 	.word	0x080074a1
 8007468:	080074b3 	.word	0x080074b3
 800746c:	080074c5 	.word	0x080074c5
 8007470:	08007525 	.word	0x08007525
 8007474:	08007537 	.word	0x08007537
 8007478:	08007549 	.word	0x08007549
				case Config_pkv:
					lcd_puts_xy(20, 10, "<", 1, 1);
 800747c:	2301      	movs	r3, #1
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	2301      	movs	r3, #1
 8007482:	4a27      	ldr	r2, [pc, #156]	; (8007520 <lcd_screen_4_refresh+0x354>)
 8007484:	210a      	movs	r1, #10
 8007486:	2014      	movs	r0, #20
 8007488:	f7ff fbc2 	bl	8006c10 <lcd_puts_xy>
					break;
 800748c:	e066      	b.n	800755c <lcd_screen_4_refresh+0x390>
				case Config_pkv_selected:
					lcd_puts_xy(20, 10, ">", 1, 1);
 800748e:	2301      	movs	r3, #1
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	2301      	movs	r3, #1
 8007494:	4a20      	ldr	r2, [pc, #128]	; (8007518 <lcd_screen_4_refresh+0x34c>)
 8007496:	210a      	movs	r1, #10
 8007498:	2014      	movs	r0, #20
 800749a:	f7ff fbb9 	bl	8006c10 <lcd_puts_xy>
					break;
 800749e:	e05d      	b.n	800755c <lcd_screen_4_refresh+0x390>
				case Config_pki:
					lcd_puts_xy(20, 20, "<", 1, 1);
 80074a0:	2301      	movs	r3, #1
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	2301      	movs	r3, #1
 80074a6:	4a1e      	ldr	r2, [pc, #120]	; (8007520 <lcd_screen_4_refresh+0x354>)
 80074a8:	2114      	movs	r1, #20
 80074aa:	2014      	movs	r0, #20
 80074ac:	f7ff fbb0 	bl	8006c10 <lcd_puts_xy>
					break;
 80074b0:	e054      	b.n	800755c <lcd_screen_4_refresh+0x390>
				case Config_pki_selected:
					lcd_puts_xy(20, 20, ">", 1, 1);
 80074b2:	2301      	movs	r3, #1
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	2301      	movs	r3, #1
 80074b8:	4a17      	ldr	r2, [pc, #92]	; (8007518 <lcd_screen_4_refresh+0x34c>)
 80074ba:	2114      	movs	r1, #20
 80074bc:	2014      	movs	r0, #20
 80074be:	f7ff fba7 	bl	8006c10 <lcd_puts_xy>
					break;
 80074c2:	e04b      	b.n	800755c <lcd_screen_4_refresh+0x390>
				case Config_sag:
					lcd_puts_xy(20, 30, "<", 1, 1);
 80074c4:	2301      	movs	r3, #1
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2301      	movs	r3, #1
 80074ca:	4a15      	ldr	r2, [pc, #84]	; (8007520 <lcd_screen_4_refresh+0x354>)
 80074cc:	211e      	movs	r1, #30
 80074ce:	2014      	movs	r0, #20
 80074d0:	f7ff fb9e 	bl	8006c10 <lcd_puts_xy>
					break;
 80074d4:	e042      	b.n	800755c <lcd_screen_4_refresh+0x390>
 80074d6:	bf00      	nop
 80074d8:	200138b8 	.word	0x200138b8
 80074dc:	0800b73c 	.word	0x0800b73c
 80074e0:	200138a0 	.word	0x200138a0
 80074e4:	0800b6b8 	.word	0x0800b6b8
 80074e8:	0800b740 	.word	0x0800b740
 80074ec:	0800b6c8 	.word	0x0800b6c8
 80074f0:	0800b744 	.word	0x0800b744
 80074f4:	0800b748 	.word	0x0800b748
 80074f8:	0800b750 	.word	0x0800b750
 80074fc:	20013898 	.word	0x20013898
 8007500:	0800b75c 	.word	0x0800b75c
 8007504:	0800b72c 	.word	0x0800b72c
 8007508:	0800b770 	.word	0x0800b770
 800750c:	0800b780 	.word	0x0800b780
 8007510:	0800b78c 	.word	0x0800b78c
 8007514:	200138b9 	.word	0x200138b9
 8007518:	0800b798 	.word	0x0800b798
 800751c:	20013885 	.word	0x20013885
 8007520:	0800b79c 	.word	0x0800b79c
				case Config_sag_selected:
					lcd_puts_xy(20, 30, ">", 1, 1);
 8007524:	2301      	movs	r3, #1
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	2301      	movs	r3, #1
 800752a:	4a84      	ldr	r2, [pc, #528]	; (800773c <lcd_screen_4_refresh+0x570>)
 800752c:	211e      	movs	r1, #30
 800752e:	2014      	movs	r0, #20
 8007530:	f7ff fb6e 	bl	8006c10 <lcd_puts_xy>
					break;
 8007534:	e012      	b.n	800755c <lcd_screen_4_refresh+0x390>
				case Config_interval:
					lcd_puts_xy(26, 40, "<", 1, 1);
 8007536:	2301      	movs	r3, #1
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	2301      	movs	r3, #1
 800753c:	4a80      	ldr	r2, [pc, #512]	; (8007740 <lcd_screen_4_refresh+0x574>)
 800753e:	2128      	movs	r1, #40	; 0x28
 8007540:	201a      	movs	r0, #26
 8007542:	f7ff fb65 	bl	8006c10 <lcd_puts_xy>
					break;
 8007546:	e009      	b.n	800755c <lcd_screen_4_refresh+0x390>
				case Config_interval_selected:
					lcd_puts_xy(26, 40, ">", 1, 1);
 8007548:	2301      	movs	r3, #1
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	2301      	movs	r3, #1
 800754e:	4a7b      	ldr	r2, [pc, #492]	; (800773c <lcd_screen_4_refresh+0x570>)
 8007550:	2128      	movs	r1, #40	; 0x28
 8007552:	201a      	movs	r0, #26
 8007554:	f7ff fb5c 	bl	8006c10 <lcd_puts_xy>
					break;
 8007558:	e000      	b.n	800755c <lcd_screen_4_refresh+0x390>
				default:
					break;
 800755a:	bf00      	nop
			}

			range_scale(screen4_data_config.User_PKV, val_buf, range_buf);
 800755c:	4b79      	ldr	r3, [pc, #484]	; (8007744 <lcd_screen_4_refresh+0x578>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f107 0208 	add.w	r2, r7, #8
 8007564:	f107 010c 	add.w	r1, r7, #12
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff fb6d 	bl	8006c48 <range_scale>
			lcd_puts_xy(VALUE_COLUMN, 10, val_buf, 1, 1);
 800756e:	f107 020c 	add.w	r2, r7, #12
 8007572:	2301      	movs	r3, #1
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	2301      	movs	r3, #1
 8007578:	210a      	movs	r1, #10
 800757a:	201c      	movs	r0, #28
 800757c:	f7ff fb48 	bl	8006c10 <lcd_puts_xy>
//			lcd_puts_xy(VALUE_RANGE_COLUMN, 10, range_buf, 1, 1);
			lcd_puts_xy(UNITS_COLUMN, 10, "V", 1, 1);
 8007580:	2301      	movs	r3, #1
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	2301      	movs	r3, #1
 8007586:	4a70      	ldr	r2, [pc, #448]	; (8007748 <lcd_screen_4_refresh+0x57c>)
 8007588:	210a      	movs	r1, #10
 800758a:	2042      	movs	r0, #66	; 0x42
 800758c:	f7ff fb40 	bl	8006c10 <lcd_puts_xy>

			range_scale(screen4_data_config.User_PKI, val_buf, range_buf);
 8007590:	4b6c      	ldr	r3, [pc, #432]	; (8007744 <lcd_screen_4_refresh+0x578>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f107 0208 	add.w	r2, r7, #8
 8007598:	f107 010c 	add.w	r1, r7, #12
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff fb53 	bl	8006c48 <range_scale>
			lcd_puts_xy(VALUE_COLUMN, 20, val_buf, 1, 1);
 80075a2:	f107 020c 	add.w	r2, r7, #12
 80075a6:	2301      	movs	r3, #1
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	2301      	movs	r3, #1
 80075ac:	2114      	movs	r1, #20
 80075ae:	201c      	movs	r0, #28
 80075b0:	f7ff fb2e 	bl	8006c10 <lcd_puts_xy>
//			lcd_puts_xy(VALUE_RANGE_COLUMN, 20, range_buf, 1, 1);
			lcd_puts_xy(UNITS_COLUMN, 20, "A", 1, 1);
 80075b4:	2301      	movs	r3, #1
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	2301      	movs	r3, #1
 80075ba:	4a64      	ldr	r2, [pc, #400]	; (800774c <lcd_screen_4_refresh+0x580>)
 80075bc:	2114      	movs	r1, #20
 80075be:	2042      	movs	r0, #66	; 0x42
 80075c0:	f7ff fb26 	bl	8006c10 <lcd_puts_xy>

			range_scale(screen4_data_config.User_SAG, val_buf, range_buf);
 80075c4:	4b5f      	ldr	r3, [pc, #380]	; (8007744 <lcd_screen_4_refresh+0x578>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f107 0208 	add.w	r2, r7, #8
 80075cc:	f107 010c 	add.w	r1, r7, #12
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fb39 	bl	8006c48 <range_scale>
			lcd_puts_xy(VALUE_COLUMN, 30, val_buf, 1, 1);
 80075d6:	f107 020c 	add.w	r2, r7, #12
 80075da:	2301      	movs	r3, #1
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	2301      	movs	r3, #1
 80075e0:	211e      	movs	r1, #30
 80075e2:	201c      	movs	r0, #28
 80075e4:	f7ff fb14 	bl	8006c10 <lcd_puts_xy>
//			lcd_puts_xy(VALUE_RANGE_COLUMN, 30, range_buf, 1, 1);
			lcd_puts_xy(UNITS_COLUMN, 30, "V", 1, 1);
 80075e8:	2301      	movs	r3, #1
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2301      	movs	r3, #1
 80075ee:	4a56      	ldr	r2, [pc, #344]	; (8007748 <lcd_screen_4_refresh+0x57c>)
 80075f0:	211e      	movs	r1, #30
 80075f2:	2042      	movs	r0, #66	; 0x42
 80075f4:	f7ff fb0c 	bl	8006c10 <lcd_puts_xy>

			sprintf(interval_buf, "%02dmins", screen4_data_config.User_Interval);
 80075f8:	4b52      	ldr	r3, [pc, #328]	; (8007744 <lcd_screen_4_refresh+0x578>)
 80075fa:	7b1b      	ldrb	r3, [r3, #12]
 80075fc:	461a      	mov	r2, r3
 80075fe:	463b      	mov	r3, r7
 8007600:	4953      	ldr	r1, [pc, #332]	; (8007750 <lcd_screen_4_refresh+0x584>)
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fde6 	bl	80091d4 <siprintf>
			lcd_puts_xy(INTVL_COLUMN, 40, interval_buf, 1, 1);
 8007608:	463a      	mov	r2, r7
 800760a:	2301      	movs	r3, #1
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	2301      	movs	r3, #1
 8007610:	2128      	movs	r1, #40	; 0x28
 8007612:	2028      	movs	r0, #40	; 0x28
 8007614:	f7ff fafc 	bl	8006c10 <lcd_puts_xy>
 8007618:	e08a      	b.n	8007730 <lcd_screen_4_refresh+0x564>


		} else if (screen4_mode == S4_CONFIG_DATETIME_DISPLAY) {
 800761a:	4b4e      	ldr	r3, [pc, #312]	; (8007754 <lcd_screen_4_refresh+0x588>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b03      	cmp	r3, #3
 8007620:	d176      	bne.n	8007710 <lcd_screen_4_refresh+0x544>
			lcd_puts_xy(0, 10, "Date", 1, 1);
 8007622:	2301      	movs	r3, #1
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	2301      	movs	r3, #1
 8007628:	4a4b      	ldr	r2, [pc, #300]	; (8007758 <lcd_screen_4_refresh+0x58c>)
 800762a:	210a      	movs	r1, #10
 800762c:	2000      	movs	r0, #0
 800762e:	f7ff faef 	bl	8006c10 <lcd_puts_xy>
			lcd_puts_xy(0, 30, "Time", 1, 1);
 8007632:	2301      	movs	r3, #1
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	2301      	movs	r3, #1
 8007638:	4a48      	ldr	r2, [pc, #288]	; (800775c <lcd_screen_4_refresh+0x590>)
 800763a:	211e      	movs	r1, #30
 800763c:	2000      	movs	r0, #0
 800763e:	f7ff fae7 	bl	8006c10 <lcd_puts_xy>

			switch (screen4_config_item) {
 8007642:	4b47      	ldr	r3, [pc, #284]	; (8007760 <lcd_screen_4_refresh+0x594>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	3b08      	subs	r3, #8
 8007648:	2b03      	cmp	r3, #3
 800764a:	d82f      	bhi.n	80076ac <lcd_screen_4_refresh+0x4e0>
 800764c:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <lcd_screen_4_refresh+0x488>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	08007665 	.word	0x08007665
 8007658:	08007677 	.word	0x08007677
 800765c:	08007689 	.word	0x08007689
 8007660:	0800769b 	.word	0x0800769b
				case Config_date:
					lcd_puts_xy(26, 10, "<", 1, 1);
 8007664:	2301      	movs	r3, #1
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	2301      	movs	r3, #1
 800766a:	4a35      	ldr	r2, [pc, #212]	; (8007740 <lcd_screen_4_refresh+0x574>)
 800766c:	210a      	movs	r1, #10
 800766e:	201a      	movs	r0, #26
 8007670:	f7ff face 	bl	8006c10 <lcd_puts_xy>
					break;
 8007674:	e01b      	b.n	80076ae <lcd_screen_4_refresh+0x4e2>
				case Config_date_selected:
					lcd_puts_xy(0, 20, ">", 1, 1);
 8007676:	2301      	movs	r3, #1
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	2301      	movs	r3, #1
 800767c:	4a2f      	ldr	r2, [pc, #188]	; (800773c <lcd_screen_4_refresh+0x570>)
 800767e:	2114      	movs	r1, #20
 8007680:	2000      	movs	r0, #0
 8007682:	f7ff fac5 	bl	8006c10 <lcd_puts_xy>
					break;
 8007686:	e012      	b.n	80076ae <lcd_screen_4_refresh+0x4e2>
				case Config_time:
					lcd_puts_xy(26, 30, "<", 1, 1);
 8007688:	2301      	movs	r3, #1
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	2301      	movs	r3, #1
 800768e:	4a2c      	ldr	r2, [pc, #176]	; (8007740 <lcd_screen_4_refresh+0x574>)
 8007690:	211e      	movs	r1, #30
 8007692:	201a      	movs	r0, #26
 8007694:	f7ff fabc 	bl	8006c10 <lcd_puts_xy>
					break;
 8007698:	e009      	b.n	80076ae <lcd_screen_4_refresh+0x4e2>
				case Config_time_selected:
					lcd_puts_xy(0, 40, ">", 1, 1);
 800769a:	2301      	movs	r3, #1
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	2301      	movs	r3, #1
 80076a0:	4a26      	ldr	r2, [pc, #152]	; (800773c <lcd_screen_4_refresh+0x570>)
 80076a2:	2128      	movs	r1, #40	; 0x28
 80076a4:	2000      	movs	r0, #0
 80076a6:	f7ff fab3 	bl	8006c10 <lcd_puts_xy>
					break;
 80076aa:	e000      	b.n	80076ae <lcd_screen_4_refresh+0x4e2>
				default:
					break;
 80076ac:	bf00      	nop
			}

			sprintf(date_buf, "%02d/%02d/20%02d",
					rtc_config.date,
 80076ae:	4b2d      	ldr	r3, [pc, #180]	; (8007764 <lcd_screen_4_refresh+0x598>)
 80076b0:	791b      	ldrb	r3, [r3, #4]
			sprintf(date_buf, "%02d/%02d/20%02d",
 80076b2:	461a      	mov	r2, r3
					rtc_config.month,
 80076b4:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <lcd_screen_4_refresh+0x598>)
 80076b6:	795b      	ldrb	r3, [r3, #5]
			sprintf(date_buf, "%02d/%02d/20%02d",
 80076b8:	4619      	mov	r1, r3
					rtc_config.year);
 80076ba:	4b2a      	ldr	r3, [pc, #168]	; (8007764 <lcd_screen_4_refresh+0x598>)
 80076bc:	799b      	ldrb	r3, [r3, #6]
			sprintf(date_buf, "%02d/%02d/20%02d",
 80076be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	460b      	mov	r3, r1
 80076c6:	4928      	ldr	r1, [pc, #160]	; (8007768 <lcd_screen_4_refresh+0x59c>)
 80076c8:	f001 fd84 	bl	80091d4 <siprintf>
			lcd_puts_xy(20, 20, date_buf, 1, 1);
 80076cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80076d0:	2301      	movs	r3, #1
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2301      	movs	r3, #1
 80076d6:	2114      	movs	r1, #20
 80076d8:	2014      	movs	r0, #20
 80076da:	f7ff fa99 	bl	8006c10 <lcd_puts_xy>

			sprintf(time_buf, "%02d:%02d:%02d",
					rtc_config.hours,
 80076de:	4b21      	ldr	r3, [pc, #132]	; (8007764 <lcd_screen_4_refresh+0x598>)
 80076e0:	789b      	ldrb	r3, [r3, #2]
			sprintf(time_buf, "%02d:%02d:%02d",
 80076e2:	461a      	mov	r2, r3
					rtc_config.minutes,
 80076e4:	4b1f      	ldr	r3, [pc, #124]	; (8007764 <lcd_screen_4_refresh+0x598>)
 80076e6:	785b      	ldrb	r3, [r3, #1]
			sprintf(time_buf, "%02d:%02d:%02d",
 80076e8:	4619      	mov	r1, r3
					rtc_config.seconds);
 80076ea:	4b1e      	ldr	r3, [pc, #120]	; (8007764 <lcd_screen_4_refresh+0x598>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
			sprintf(time_buf, "%02d:%02d:%02d",
 80076ee:	f107 0018 	add.w	r0, r7, #24
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	460b      	mov	r3, r1
 80076f6:	491d      	ldr	r1, [pc, #116]	; (800776c <lcd_screen_4_refresh+0x5a0>)
 80076f8:	f001 fd6c 	bl	80091d4 <siprintf>
			lcd_puts_xy(20, 40, time_buf, 1, 1);
 80076fc:	f107 0218 	add.w	r2, r7, #24
 8007700:	2301      	movs	r3, #1
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	2301      	movs	r3, #1
 8007706:	2128      	movs	r1, #40	; 0x28
 8007708:	2014      	movs	r0, #20
 800770a:	f7ff fa81 	bl	8006c10 <lcd_puts_xy>
 800770e:	e00f      	b.n	8007730 <lcd_screen_4_refresh+0x564>

		} else {
			lcd_puts_xy(24, ROW_LINE_2, "Commit?", 1, 1);
 8007710:	2301      	movs	r3, #1
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	2301      	movs	r3, #1
 8007716:	4a16      	ldr	r2, [pc, #88]	; (8007770 <lcd_screen_4_refresh+0x5a4>)
 8007718:	210c      	movs	r1, #12
 800771a:	2018      	movs	r0, #24
 800771c:	f7ff fa78 	bl	8006c10 <lcd_puts_xy>
			lcd_puts_xy(12, ROW_LINE_3_1, "[#]Y / [*]N", 1, 1);
 8007720:	2301      	movs	r3, #1
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	2301      	movs	r3, #1
 8007726:	4a13      	ldr	r2, [pc, #76]	; (8007774 <lcd_screen_4_refresh+0x5a8>)
 8007728:	2118      	movs	r1, #24
 800772a:	200c      	movs	r0, #12
 800772c:	f7ff fa70 	bl	8006c10 <lcd_puts_xy>
		}
	}

	LCD5110_Refresh();
 8007730:	f7fa f95c 	bl	80019ec <LCD5110_Refresh>
}
 8007734:	bf00      	nop
 8007736:	3730      	adds	r7, #48	; 0x30
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	0800b798 	.word	0x0800b798
 8007740:	0800b79c 	.word	0x0800b79c
 8007744:	200138bc 	.word	0x200138bc
 8007748:	0800b6b8 	.word	0x0800b6b8
 800774c:	0800b6c8 	.word	0x0800b6c8
 8007750:	0800b750 	.word	0x0800b750
 8007754:	200138b8 	.word	0x200138b8
 8007758:	0800b7a0 	.word	0x0800b7a0
 800775c:	0800b7a8 	.word	0x0800b7a8
 8007760:	20013885 	.word	0x20013885
 8007764:	2001386c 	.word	0x2001386c
 8007768:	0800b7b0 	.word	0x0800b7b0
 800776c:	0800b7c4 	.word	0x0800b7c4
 8007770:	0800b7d4 	.word	0x0800b7d4
 8007774:	0800b710 	.word	0x0800b710

08007778 <lcd_screen_refresh>:

void lcd_screen_refresh(LCD_Screen_t screen) {
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
	switch (screen) {
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	2b03      	cmp	r3, #3
 8007786:	d817      	bhi.n	80077b8 <lcd_screen_refresh+0x40>
 8007788:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <lcd_screen_refresh+0x18>)
 800778a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778e:	bf00      	nop
 8007790:	080077a1 	.word	0x080077a1
 8007794:	080077a7 	.word	0x080077a7
 8007798:	080077ad 	.word	0x080077ad
 800779c:	080077b3 	.word	0x080077b3
		case LCD_Screen_1:
			lcd_screen_1_refresh();
 80077a0:	f7ff faf4 	bl	8006d8c <lcd_screen_1_refresh>
			break;
 80077a4:	e009      	b.n	80077ba <lcd_screen_refresh+0x42>
		case LCD_Screen_2:
			lcd_screen_2_refresh();
 80077a6:	f7ff fba7 	bl	8006ef8 <lcd_screen_2_refresh>
			break;
 80077aa:	e006      	b.n	80077ba <lcd_screen_refresh+0x42>
		case LCD_Screen_3:
			lcd_screen_3_refresh();
 80077ac:	f7ff fc52 	bl	8007054 <lcd_screen_3_refresh>
			break;
 80077b0:	e003      	b.n	80077ba <lcd_screen_refresh+0x42>
		case LCD_Screen_4:
			lcd_screen_4_refresh();
 80077b2:	f7ff fd0b 	bl	80071cc <lcd_screen_4_refresh>
			break;
 80077b6:	e000      	b.n	80077ba <lcd_screen_refresh+0x42>
		default:
			break;
 80077b8:	bf00      	nop
	}
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop

080077c4 <lcd_screen_1_data_update>:

void lcd_screen_1_data_update(LCD_Data_Screen1_t data) {
 80077c4:	b490      	push	{r4, r7}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	463c      	mov	r4, r7
 80077cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	screen1_data = data;
 80077d0:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <lcd_screen_1_data_update+0x24>)
 80077d2:	461c      	mov	r4, r3
 80077d4:	463b      	mov	r3, r7
 80077d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80077d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80077dc:	bf00      	nop
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bc90      	pop	{r4, r7}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20013888 	.word	0x20013888

080077ec <lcd_screen_2_data_update>:

void lcd_screen_2_data_update(LCD_Data_Screen2_t data) {
 80077ec:	b490      	push	{r4, r7}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	463c      	mov	r4, r7
 80077f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	screen2_data = data;
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <lcd_screen_2_data_update+0x24>)
 80077fa:	461c      	mov	r4, r3
 80077fc:	463b      	mov	r3, r7
 80077fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007804:	bf00      	nop
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bc90      	pop	{r4, r7}
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	20013874 	.word	0x20013874

08007814 <lcd_screen_1_clear>:

void lcd_screen_4_data_update(LCD_Data_Screen4_t data) {
	screen4_data = data;
}

void lcd_screen_1_clear() {
 8007814:	b580      	push	{r7, lr}
 8007816:	af00      	add	r7, sp, #0
	memset(&screen1_data, 0, sizeof(screen1_data));
 8007818:	2210      	movs	r2, #16
 800781a:	2100      	movs	r1, #0
 800781c:	4802      	ldr	r0, [pc, #8]	; (8007828 <lcd_screen_1_clear+0x14>)
 800781e:	f001 f865 	bl	80088ec <memset>
}
 8007822:	bf00      	nop
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20013888 	.word	0x20013888

0800782c <lcd_screen_2_clear>:

void lcd_screen_2_clear() {
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
	memset(&screen2_data, 0, sizeof(screen2_data));
 8007830:	2210      	movs	r2, #16
 8007832:	2100      	movs	r1, #0
 8007834:	4802      	ldr	r0, [pc, #8]	; (8007840 <lcd_screen_2_clear+0x14>)
 8007836:	f001 f859 	bl	80088ec <memset>
}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20013874 	.word	0x20013874

08007844 <lcd_screen_3_clear>:

void lcd_screen_3_clear() {
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
	memset(&screen3_data, 0, sizeof(screen3_data));
 8007848:	2208      	movs	r2, #8
 800784a:	2100      	movs	r1, #0
 800784c:	4806      	ldr	r0, [pc, #24]	; (8007868 <lcd_screen_3_clear+0x24>)
 800784e:	f001 f84d 	bl	80088ec <memset>
	memset(&screen3_timer, 0, sizeof(screen3_timer));
 8007852:	2208      	movs	r2, #8
 8007854:	2100      	movs	r1, #0
 8007856:	4805      	ldr	r0, [pc, #20]	; (800786c <lcd_screen_3_clear+0x28>)
 8007858:	f001 f848 	bl	80088ec <memset>
	screen3_mode = S3_NORMAL_DISPLAY;
 800785c:	4b04      	ldr	r3, [pc, #16]	; (8007870 <lcd_screen_3_clear+0x2c>)
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
}
 8007862:	bf00      	nop
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200138b0 	.word	0x200138b0
 800786c:	20013864 	.word	0x20013864
 8007870:	20013884 	.word	0x20013884

08007874 <lcd_screen_4_clear>:

void lcd_screen_4_clear() {
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
	memset(&screen4_data, 0, sizeof(screen4_data));
 8007878:	2210      	movs	r2, #16
 800787a:	2100      	movs	r1, #0
 800787c:	4808      	ldr	r0, [pc, #32]	; (80078a0 <lcd_screen_4_clear+0x2c>)
 800787e:	f001 f835 	bl	80088ec <memset>
	screen4_data.User_Interval = Sample_Interval_60;
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <lcd_screen_4_clear+0x2c>)
 8007884:	223c      	movs	r2, #60	; 0x3c
 8007886:	731a      	strb	r2, [r3, #12]
	screen4_mode = S4_NORMAL_DISPLAY;
 8007888:	4b06      	ldr	r3, [pc, #24]	; (80078a4 <lcd_screen_4_clear+0x30>)
 800788a:	2200      	movs	r2, #0
 800788c:	701a      	strb	r2, [r3, #0]
	screen4_config_option = Config_Params;
 800788e:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <lcd_screen_4_clear+0x34>)
 8007890:	2200      	movs	r2, #0
 8007892:	701a      	strb	r2, [r3, #0]
	screen4_config_item = Config_pkv;
 8007894:	4b05      	ldr	r3, [pc, #20]	; (80078ac <lcd_screen_4_clear+0x38>)
 8007896:	2200      	movs	r2, #0
 8007898:	701a      	strb	r2, [r3, #0]
}
 800789a:	bf00      	nop
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	200138a0 	.word	0x200138a0
 80078a4:	200138b8 	.word	0x200138b8
 80078a8:	200138b9 	.word	0x200138b9
 80078ac:	20013885 	.word	0x20013885

080078b0 <lcd_screen_3_timer_count_up>:

void lcd_screen_3_timer_count_up() {
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
	screen3_timer.seconds++;
 80078b4:	4b1c      	ldr	r3, [pc, #112]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078b6:	799b      	ldrb	r3, [r3, #6]
 80078b8:	3301      	adds	r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078be:	719a      	strb	r2, [r3, #6]
	if(screen3_timer.seconds > 59) {
 80078c0:	4b19      	ldr	r3, [pc, #100]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078c2:	799b      	ldrb	r3, [r3, #6]
 80078c4:	2b3b      	cmp	r3, #59	; 0x3b
 80078c6:	d92a      	bls.n	800791e <lcd_screen_3_timer_count_up+0x6e>
		screen3_timer.seconds -= 60;
 80078c8:	4b17      	ldr	r3, [pc, #92]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078ca:	799b      	ldrb	r3, [r3, #6]
 80078cc:	3b3c      	subs	r3, #60	; 0x3c
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	4b15      	ldr	r3, [pc, #84]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078d2:	719a      	strb	r2, [r3, #6]
		screen3_timer.minutes++;
 80078d4:	4b14      	ldr	r3, [pc, #80]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078d6:	795b      	ldrb	r3, [r3, #5]
 80078d8:	3301      	adds	r3, #1
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	4b12      	ldr	r3, [pc, #72]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078de:	715a      	strb	r2, [r3, #5]
		if(screen3_timer.minutes > 59) {
 80078e0:	4b11      	ldr	r3, [pc, #68]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078e2:	795b      	ldrb	r3, [r3, #5]
 80078e4:	2b3b      	cmp	r3, #59	; 0x3b
 80078e6:	d91a      	bls.n	800791e <lcd_screen_3_timer_count_up+0x6e>
			screen3_timer.minutes -= 60;
 80078e8:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078ea:	795b      	ldrb	r3, [r3, #5]
 80078ec:	3b3c      	subs	r3, #60	; 0x3c
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	4b0d      	ldr	r3, [pc, #52]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078f2:	715a      	strb	r2, [r3, #5]
			screen3_timer.hours++;
 80078f4:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078f6:	791b      	ldrb	r3, [r3, #4]
 80078f8:	3301      	adds	r3, #1
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 80078fe:	711a      	strb	r2, [r3, #4]
			if(screen3_timer.hours > 23) {
 8007900:	4b09      	ldr	r3, [pc, #36]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 8007902:	791b      	ldrb	r3, [r3, #4]
 8007904:	2b17      	cmp	r3, #23
 8007906:	d90a      	bls.n	800791e <lcd_screen_3_timer_count_up+0x6e>
				screen3_timer.hours -= 24;
 8007908:	4b07      	ldr	r3, [pc, #28]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 800790a:	791b      	ldrb	r3, [r3, #4]
 800790c:	3b18      	subs	r3, #24
 800790e:	b2da      	uxtb	r2, r3
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 8007912:	711a      	strb	r2, [r3, #4]
				screen3_timer.days++;
 8007914:	4b04      	ldr	r3, [pc, #16]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3301      	adds	r3, #1
 800791a:	4a03      	ldr	r2, [pc, #12]	; (8007928 <lcd_screen_3_timer_count_up+0x78>)
 800791c:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 800791e:	bf00      	nop
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	20013864 	.word	0x20013864

0800792c <lcd_screen_3_switch_mode>:

void lcd_screen_3_switch_mode(LCD_Screen3_Mode mode) {
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	71fb      	strb	r3, [r7, #7]
	screen3_mode = mode;
 8007936:	4a04      	ldr	r2, [pc, #16]	; (8007948 <lcd_screen_3_switch_mode+0x1c>)
 8007938:	79fb      	ldrb	r3, [r7, #7]
 800793a:	7013      	strb	r3, [r2, #0]
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	20013884 	.word	0x20013884

0800794c <lcd_screen_4_rtc_update>:

LCD_Screen3_Mode lcd_screen_3_mode() {
	return screen3_mode;
}

void lcd_screen_4_rtc_update(DS1307_DateTime_t datetime) {
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	463b      	mov	r3, r7
 8007954:	e883 0003 	stmia.w	r3, {r0, r1}
	rtc_display = datetime;
 8007958:	4b07      	ldr	r3, [pc, #28]	; (8007978 <lcd_screen_4_rtc_update+0x2c>)
 800795a:	461a      	mov	r2, r3
 800795c:	463b      	mov	r3, r7
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	6010      	str	r0, [r2, #0]
 8007962:	8899      	ldrh	r1, [r3, #4]
 8007964:	799b      	ldrb	r3, [r3, #6]
 8007966:	8091      	strh	r1, [r2, #4]
 8007968:	7193      	strb	r3, [r2, #6]
}
 800796a:	bf00      	nop
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20013898 	.word	0x20013898

0800797c <lcd_screen_4_switch_mode>:

void lcd_screen_4_switch_mode(LCD_Screen4_Mode mode) {
 800797c:	b490      	push	{r4, r7}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	71fb      	strb	r3, [r7, #7]
	if(mode == S4_CONFIG_PARAMS_DISPLAY) {
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d10c      	bne.n	80079a6 <lcd_screen_4_switch_mode+0x2a>
		if(screen4_mode == S4_CONFIG_DISPLAY) {
 800798c:	4b18      	ldr	r3, [pc, #96]	; (80079f0 <lcd_screen_4_switch_mode+0x74>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d108      	bne.n	80079a6 <lcd_screen_4_switch_mode+0x2a>
			screen4_config_item = Config_pkv;
 8007994:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <lcd_screen_4_switch_mode+0x78>)
 8007996:	2200      	movs	r2, #0
 8007998:	701a      	strb	r2, [r3, #0]
			screen4_data_config = screen4_data;
 800799a:	4a17      	ldr	r2, [pc, #92]	; (80079f8 <lcd_screen_4_switch_mode+0x7c>)
 800799c:	4b17      	ldr	r3, [pc, #92]	; (80079fc <lcd_screen_4_switch_mode+0x80>)
 800799e:	4614      	mov	r4, r2
 80079a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}

	if(mode == S4_CONFIG_DATETIME_DISPLAY) {
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d106      	bne.n	80079ba <lcd_screen_4_switch_mode+0x3e>
		if(screen4_mode == S4_CONFIG_DISPLAY) {
 80079ac:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <lcd_screen_4_switch_mode+0x74>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d102      	bne.n	80079ba <lcd_screen_4_switch_mode+0x3e>
			screen4_config_item = Config_date;
 80079b4:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <lcd_screen_4_switch_mode+0x78>)
 80079b6:	2208      	movs	r2, #8
 80079b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(mode == S4_CONFIG_DISPLAY) {
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d10e      	bne.n	80079de <lcd_screen_4_switch_mode+0x62>
		if(screen4_mode == S4_NORMAL_DISPLAY) {
 80079c0:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <lcd_screen_4_switch_mode+0x74>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <lcd_screen_4_switch_mode+0x62>
			screen4_config_option = Config_Params;
 80079c8:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <lcd_screen_4_switch_mode+0x84>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	701a      	strb	r2, [r3, #0]
			rtc_config = rtc_display;
 80079ce:	4b0d      	ldr	r3, [pc, #52]	; (8007a04 <lcd_screen_4_switch_mode+0x88>)
 80079d0:	4a0d      	ldr	r2, [pc, #52]	; (8007a08 <lcd_screen_4_switch_mode+0x8c>)
 80079d2:	6811      	ldr	r1, [r2, #0]
 80079d4:	6019      	str	r1, [r3, #0]
 80079d6:	8891      	ldrh	r1, [r2, #4]
 80079d8:	7992      	ldrb	r2, [r2, #6]
 80079da:	8099      	strh	r1, [r3, #4]
 80079dc:	719a      	strb	r2, [r3, #6]
		}
	}
	screen4_mode = mode;
 80079de:	4a04      	ldr	r2, [pc, #16]	; (80079f0 <lcd_screen_4_switch_mode+0x74>)
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	7013      	strb	r3, [r2, #0]
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc90      	pop	{r4, r7}
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	200138b8 	.word	0x200138b8
 80079f4:	20013885 	.word	0x20013885
 80079f8:	200138bc 	.word	0x200138bc
 80079fc:	200138a0 	.word	0x200138a0
 8007a00:	200138b9 	.word	0x200138b9
 8007a04:	2001386c 	.word	0x2001386c
 8007a08:	20013898 	.word	0x20013898

08007a0c <lcd_screen_4_mode>:

LCD_Screen4_Mode lcd_screen_4_mode() {
 8007a0c:	b480      	push	{r7}
 8007a0e:	af00      	add	r7, sp, #0
	return screen4_mode;
 8007a10:	4b03      	ldr	r3, [pc, #12]	; (8007a20 <lcd_screen_4_mode+0x14>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	200138b8 	.word	0x200138b8

08007a24 <lcd_screen_4_config_option>:

Config_Option_t lcd_screen_4_config_option() {
 8007a24:	b480      	push	{r7}
 8007a26:	af00      	add	r7, sp, #0
	return screen4_config_option;
 8007a28:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <lcd_screen_4_config_option+0x14>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	200138b9 	.word	0x200138b9

08007a3c <lcd_screen_4_config_item>:

Config_Items_t lcd_screen_4_config_item() {
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
	return screen4_config_item;
 8007a40:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <lcd_screen_4_config_item+0x14>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20013885 	.word	0x20013885

08007a54 <lcd_screen_4_next_config_option>:

void lcd_screen_4_next_config_option() {
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
	screen4_config_option ^= 1;
 8007a58:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <lcd_screen_4_next_config_option+0x1c>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	f083 0301 	eor.w	r3, r3, #1
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	4b03      	ldr	r3, [pc, #12]	; (8007a70 <lcd_screen_4_next_config_option+0x1c>)
 8007a64:	701a      	strb	r2, [r3, #0]
}
 8007a66:	bf00      	nop
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	200138b9 	.word	0x200138b9

08007a74 <lcd_screen_4_next_config_item>:

void lcd_screen_4_next_config_item() {
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
	if(!(screen4_config_item % 2)) {
 8007a78:	4b13      	ldr	r3, [pc, #76]	; (8007ac8 <lcd_screen_4_next_config_item+0x54>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d11b      	bne.n	8007abe <lcd_screen_4_next_config_item+0x4a>
		screen4_config_item += 2;
 8007a86:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <lcd_screen_4_next_config_item+0x54>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	3302      	adds	r3, #2
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <lcd_screen_4_next_config_item+0x54>)
 8007a90:	701a      	strb	r2, [r3, #0]
		if(screen4_mode == S4_CONFIG_PARAMS_DISPLAY) {
 8007a92:	4b0e      	ldr	r3, [pc, #56]	; (8007acc <lcd_screen_4_next_config_item+0x58>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d106      	bne.n	8007aa8 <lcd_screen_4_next_config_item+0x34>
			if(screen4_config_item > Config_interval)
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <lcd_screen_4_next_config_item+0x54>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b06      	cmp	r3, #6
 8007aa0:	d902      	bls.n	8007aa8 <lcd_screen_4_next_config_item+0x34>
				screen4_config_item = Config_pkv;
 8007aa2:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <lcd_screen_4_next_config_item+0x54>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	701a      	strb	r2, [r3, #0]
		}
		if(screen4_mode == S4_CONFIG_DATETIME_DISPLAY) {
 8007aa8:	4b08      	ldr	r3, [pc, #32]	; (8007acc <lcd_screen_4_next_config_item+0x58>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d106      	bne.n	8007abe <lcd_screen_4_next_config_item+0x4a>
			if(screen4_config_item == Max_Config_Items)
 8007ab0:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <lcd_screen_4_next_config_item+0x54>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b0c      	cmp	r3, #12
 8007ab6:	d102      	bne.n	8007abe <lcd_screen_4_next_config_item+0x4a>
				screen4_config_item = Config_date;
 8007ab8:	4b03      	ldr	r3, [pc, #12]	; (8007ac8 <lcd_screen_4_next_config_item+0x54>)
 8007aba:	2208      	movs	r2, #8
 8007abc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8007abe:	bf00      	nop
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	20013885 	.word	0x20013885
 8007acc:	200138b8 	.word	0x200138b8

08007ad0 <lcd_screen_4_config_select>:

void lcd_screen_4_config_select(Config_Select_t select) {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	71fb      	strb	r3, [r7, #7]
	if(select == CONFIG_SELECT) {
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d133      	bne.n	8007b48 <lcd_screen_4_config_select+0x78>
		if(!(screen4_config_item % 2)) {
 8007ae0:	4b24      	ldr	r3, [pc, #144]	; (8007b74 <lcd_screen_4_config_select+0xa4>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d13a      	bne.n	8007b64 <lcd_screen_4_config_select+0x94>
			switch (++screen4_config_item) {
 8007aee:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <lcd_screen_4_config_select+0xa4>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	3301      	adds	r3, #1
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	4b1f      	ldr	r3, [pc, #124]	; (8007b74 <lcd_screen_4_config_select+0xa4>)
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <lcd_screen_4_config_select+0xa4>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	2b0a      	cmp	r3, #10
 8007b02:	d831      	bhi.n	8007b68 <lcd_screen_4_config_select+0x98>
 8007b04:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <lcd_screen_4_config_select+0x3c>)
 8007b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0a:	bf00      	nop
 8007b0c:	08007b39 	.word	0x08007b39
 8007b10:	08007b69 	.word	0x08007b69
 8007b14:	08007b39 	.word	0x08007b39
 8007b18:	08007b69 	.word	0x08007b69
 8007b1c:	08007b39 	.word	0x08007b39
 8007b20:	08007b69 	.word	0x08007b69
 8007b24:	08007b69 	.word	0x08007b69
 8007b28:	08007b69 	.word	0x08007b69
 8007b2c:	08007b41 	.word	0x08007b41
 8007b30:	08007b69 	.word	0x08007b69
 8007b34:	08007b41 	.word	0x08007b41
				case Config_pkv_selected:
				case Config_pki_selected:
				case Config_sag_selected:
					lcd_enter_params_value(0xff);
 8007b38:	20ff      	movs	r0, #255	; 0xff
 8007b3a:	f000 f909 	bl	8007d50 <lcd_enter_params_value>
					break;
 8007b3e:	e014      	b.n	8007b6a <lcd_screen_4_config_select+0x9a>
				case Config_date_selected:
				case Config_time_selected:
					lcd_enter_datetime_value(0xff);
 8007b40:	20ff      	movs	r0, #255	; 0xff
 8007b42:	f000 f871 	bl	8007c28 <lcd_enter_datetime_value>
					break;
 8007b46:	e010      	b.n	8007b6a <lcd_screen_4_config_select+0x9a>
				default:
					break;
			}
		}
	} else if(screen4_config_item % 2) screen4_config_item--;
 8007b48:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <lcd_screen_4_config_select+0xa4>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d009      	beq.n	8007b6a <lcd_screen_4_config_select+0x9a>
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <lcd_screen_4_config_select+0xa4>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <lcd_screen_4_config_select+0xa4>)
 8007b60:	701a      	strb	r2, [r3, #0]
}
 8007b62:	e002      	b.n	8007b6a <lcd_screen_4_config_select+0x9a>
		}
 8007b64:	bf00      	nop
 8007b66:	e000      	b.n	8007b6a <lcd_screen_4_config_select+0x9a>
					break;
 8007b68:	bf00      	nop
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20013885 	.word	0x20013885

08007b78 <lcd_screen_4_next_interval_set>:

void lcd_screen_4_next_interval_set() {
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
	switch(screen4_data_config.User_Interval) {
 8007b7c:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <lcd_screen_4_next_interval_set+0x50>)
 8007b7e:	7b1b      	ldrb	r3, [r3, #12]
 8007b80:	2b3c      	cmp	r3, #60	; 0x3c
 8007b82:	d016      	beq.n	8007bb2 <lcd_screen_4_next_interval_set+0x3a>
 8007b84:	2b3c      	cmp	r3, #60	; 0x3c
 8007b86:	dc18      	bgt.n	8007bba <lcd_screen_4_next_interval_set+0x42>
 8007b88:	2b1e      	cmp	r3, #30
 8007b8a:	d00e      	beq.n	8007baa <lcd_screen_4_next_interval_set+0x32>
 8007b8c:	2b1e      	cmp	r3, #30
 8007b8e:	dc14      	bgt.n	8007bba <lcd_screen_4_next_interval_set+0x42>
 8007b90:	2b05      	cmp	r3, #5
 8007b92:	d002      	beq.n	8007b9a <lcd_screen_4_next_interval_set+0x22>
 8007b94:	2b0f      	cmp	r3, #15
 8007b96:	d004      	beq.n	8007ba2 <lcd_screen_4_next_interval_set+0x2a>
			break;
		case Sample_Interval_60:
			screen4_data_config.User_Interval = Sample_Interval_5;
			break;
		default:
			break;
 8007b98:	e00f      	b.n	8007bba <lcd_screen_4_next_interval_set+0x42>
			screen4_data_config.User_Interval = Sample_Interval_15;
 8007b9a:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <lcd_screen_4_next_interval_set+0x50>)
 8007b9c:	220f      	movs	r2, #15
 8007b9e:	731a      	strb	r2, [r3, #12]
			break;
 8007ba0:	e00c      	b.n	8007bbc <lcd_screen_4_next_interval_set+0x44>
			screen4_data_config.User_Interval = Sample_Interval_30;
 8007ba2:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <lcd_screen_4_next_interval_set+0x50>)
 8007ba4:	221e      	movs	r2, #30
 8007ba6:	731a      	strb	r2, [r3, #12]
			break;
 8007ba8:	e008      	b.n	8007bbc <lcd_screen_4_next_interval_set+0x44>
			screen4_data_config.User_Interval = Sample_Interval_60;
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <lcd_screen_4_next_interval_set+0x50>)
 8007bac:	223c      	movs	r2, #60	; 0x3c
 8007bae:	731a      	strb	r2, [r3, #12]
			break;
 8007bb0:	e004      	b.n	8007bbc <lcd_screen_4_next_interval_set+0x44>
			screen4_data_config.User_Interval = Sample_Interval_5;
 8007bb2:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <lcd_screen_4_next_interval_set+0x50>)
 8007bb4:	2205      	movs	r2, #5
 8007bb6:	731a      	strb	r2, [r3, #12]
			break;
 8007bb8:	e000      	b.n	8007bbc <lcd_screen_4_next_interval_set+0x44>
			break;
 8007bba:	bf00      	nop
	}
}
 8007bbc:	bf00      	nop
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	200138bc 	.word	0x200138bc

08007bcc <lcd_screen_4_commit_rtc>:

DS1307_DateTime_t lcd_screen_4_commit_rtc() {
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	return rtc_config;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a06      	ldr	r2, [pc, #24]	; (8007bf0 <lcd_screen_4_commit_rtc+0x24>)
 8007bd8:	6811      	ldr	r1, [r2, #0]
 8007bda:	6019      	str	r1, [r3, #0]
 8007bdc:	8891      	ldrh	r1, [r2, #4]
 8007bde:	7992      	ldrb	r2, [r2, #6]
 8007be0:	8099      	strh	r1, [r3, #4]
 8007be2:	719a      	strb	r2, [r3, #6]
}
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	2001386c 	.word	0x2001386c

08007bf4 <lcd_screen_4_commit_parameters>:

LCD_Data_Screen4_t lcd_screen_4_commit_parameters() {
 8007bf4:	b490      	push	{r4, r7}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	return screen4_data = screen4_data_config;
 8007bfc:	4a08      	ldr	r2, [pc, #32]	; (8007c20 <lcd_screen_4_commit_parameters+0x2c>)
 8007bfe:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <lcd_screen_4_commit_parameters+0x30>)
 8007c00:	4614      	mov	r4, r2
 8007c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a05      	ldr	r2, [pc, #20]	; (8007c20 <lcd_screen_4_commit_parameters+0x2c>)
 8007c0c:	461c      	mov	r4, r3
 8007c0e:	4613      	mov	r3, r2
 8007c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc90      	pop	{r4, r7}
 8007c1e:	4770      	bx	lr
 8007c20:	200138a0 	.word	0x200138a0
 8007c24:	200138bc 	.word	0x200138bc

08007c28 <lcd_enter_datetime_value>:

void lcd_enter_datetime_value(KEYPAD_Button_t key) {
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	71fb      	strb	r3, [r7, #7]
	static uint32_t base_value = 0;
	static uint32_t range = 100000;

	switch (key) {
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	d812      	bhi.n	8007c5e <lcd_enter_datetime_value+0x36>
		case KEYPAD_Button_6:
		case KEYPAD_Button_7:
		case KEYPAD_Button_8:
		case KEYPAD_Button_9:
			if(true) {
				base_value += ((uint8_t) key) * range;
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	4a3d      	ldr	r2, [pc, #244]	; (8007d30 <lcd_enter_datetime_value+0x108>)
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	fb02 f203 	mul.w	r2, r2, r3
 8007c42:	4b3c      	ldr	r3, [pc, #240]	; (8007d34 <lcd_enter_datetime_value+0x10c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4413      	add	r3, r2
 8007c48:	4a3a      	ldr	r2, [pc, #232]	; (8007d34 <lcd_enter_datetime_value+0x10c>)
 8007c4a:	6013      	str	r3, [r2, #0]
				range /= 10;
 8007c4c:	4b38      	ldr	r3, [pc, #224]	; (8007d30 <lcd_enter_datetime_value+0x108>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a39      	ldr	r2, [pc, #228]	; (8007d38 <lcd_enter_datetime_value+0x110>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	08db      	lsrs	r3, r3, #3
 8007c58:	4a35      	ldr	r2, [pc, #212]	; (8007d30 <lcd_enter_datetime_value+0x108>)
 8007c5a:	6013      	str	r3, [r2, #0]
			}
			break;
 8007c5c:	e006      	b.n	8007c6c <lcd_enter_datetime_value+0x44>
		default:
			base_value = 0;
 8007c5e:	4b35      	ldr	r3, [pc, #212]	; (8007d34 <lcd_enter_datetime_value+0x10c>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
			range = 100000;
 8007c64:	4b32      	ldr	r3, [pc, #200]	; (8007d30 <lcd_enter_datetime_value+0x108>)
 8007c66:	4a35      	ldr	r2, [pc, #212]	; (8007d3c <lcd_enter_datetime_value+0x114>)
 8007c68:	601a      	str	r2, [r3, #0]
			break;
 8007c6a:	bf00      	nop
	}

	if(screen4_config_item == Config_date_selected) {
 8007c6c:	4b34      	ldr	r3, [pc, #208]	; (8007d40 <lcd_enter_datetime_value+0x118>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b09      	cmp	r3, #9
 8007c72:	d12a      	bne.n	8007cca <lcd_enter_datetime_value+0xa2>
		rtc_config.day = MONDAY;
 8007c74:	4b33      	ldr	r3, [pc, #204]	; (8007d44 <lcd_enter_datetime_value+0x11c>)
 8007c76:	2202      	movs	r2, #2
 8007c78:	70da      	strb	r2, [r3, #3]
		rtc_config.date = base_value / 10000;
 8007c7a:	4b2e      	ldr	r3, [pc, #184]	; (8007d34 <lcd_enter_datetime_value+0x10c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a32      	ldr	r2, [pc, #200]	; (8007d48 <lcd_enter_datetime_value+0x120>)
 8007c80:	fba2 2303 	umull	r2, r3, r2, r3
 8007c84:	0b5b      	lsrs	r3, r3, #13
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	4b2e      	ldr	r3, [pc, #184]	; (8007d44 <lcd_enter_datetime_value+0x11c>)
 8007c8a:	711a      	strb	r2, [r3, #4]
		rtc_config.month = (base_value % 10000) / 100;
 8007c8c:	4b29      	ldr	r3, [pc, #164]	; (8007d34 <lcd_enter_datetime_value+0x10c>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	4b2d      	ldr	r3, [pc, #180]	; (8007d48 <lcd_enter_datetime_value+0x120>)
 8007c92:	fba3 1302 	umull	r1, r3, r3, r2
 8007c96:	0b5b      	lsrs	r3, r3, #13
 8007c98:	f242 7110 	movw	r1, #10000	; 0x2710
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	4a2a      	ldr	r2, [pc, #168]	; (8007d4c <lcd_enter_datetime_value+0x124>)
 8007ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	4b25      	ldr	r3, [pc, #148]	; (8007d44 <lcd_enter_datetime_value+0x11c>)
 8007cae:	715a      	strb	r2, [r3, #5]
		rtc_config.year = base_value % 100;
 8007cb0:	4b20      	ldr	r3, [pc, #128]	; (8007d34 <lcd_enter_datetime_value+0x10c>)
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <lcd_enter_datetime_value+0x124>)
 8007cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	2164      	movs	r1, #100	; 0x64
 8007cbe:	fb01 f303 	mul.w	r3, r1, r3
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	4b1f      	ldr	r3, [pc, #124]	; (8007d44 <lcd_enter_datetime_value+0x11c>)
 8007cc8:	719a      	strb	r2, [r3, #6]
	}
	if(screen4_config_item == Config_time_selected) {
 8007cca:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <lcd_enter_datetime_value+0x118>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	2b0b      	cmp	r3, #11
 8007cd0:	d127      	bne.n	8007d22 <lcd_enter_datetime_value+0xfa>
		rtc_config.hours = base_value / 10000;
 8007cd2:	4b18      	ldr	r3, [pc, #96]	; (8007d34 <lcd_enter_datetime_value+0x10c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a1c      	ldr	r2, [pc, #112]	; (8007d48 <lcd_enter_datetime_value+0x120>)
 8007cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cdc:	0b5b      	lsrs	r3, r3, #13
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	4b18      	ldr	r3, [pc, #96]	; (8007d44 <lcd_enter_datetime_value+0x11c>)
 8007ce2:	709a      	strb	r2, [r3, #2]
		rtc_config.minutes = (base_value % 10000) / 100;
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <lcd_enter_datetime_value+0x10c>)
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	4b17      	ldr	r3, [pc, #92]	; (8007d48 <lcd_enter_datetime_value+0x120>)
 8007cea:	fba3 1302 	umull	r1, r3, r3, r2
 8007cee:	0b5b      	lsrs	r3, r3, #13
 8007cf0:	f242 7110 	movw	r1, #10000	; 0x2710
 8007cf4:	fb01 f303 	mul.w	r3, r1, r3
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	4a14      	ldr	r2, [pc, #80]	; (8007d4c <lcd_enter_datetime_value+0x124>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	4b0f      	ldr	r3, [pc, #60]	; (8007d44 <lcd_enter_datetime_value+0x11c>)
 8007d06:	705a      	strb	r2, [r3, #1]
		rtc_config.seconds = base_value % 100;
 8007d08:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <lcd_enter_datetime_value+0x10c>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <lcd_enter_datetime_value+0x124>)
 8007d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8007d12:	095b      	lsrs	r3, r3, #5
 8007d14:	2164      	movs	r1, #100	; 0x64
 8007d16:	fb01 f303 	mul.w	r3, r1, r3
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <lcd_enter_datetime_value+0x11c>)
 8007d20:	701a      	strb	r2, [r3, #0]
	}
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	20000030 	.word	0x20000030
 8007d34:	20013568 	.word	0x20013568
 8007d38:	cccccccd 	.word	0xcccccccd
 8007d3c:	000186a0 	.word	0x000186a0
 8007d40:	20013885 	.word	0x20013885
 8007d44:	2001386c 	.word	0x2001386c
 8007d48:	d1b71759 	.word	0xd1b71759
 8007d4c:	51eb851f 	.word	0x51eb851f

08007d50 <lcd_enter_params_value>:

void lcd_enter_params_value(KEYPAD_Button_t key) {
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	71fb      	strb	r3, [r7, #7]
	static uint16_t base_value = 0;
	static uint16_t afterpoint = 0;

	switch (key) {
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	2b09      	cmp	r3, #9
 8007d5e:	dc02      	bgt.n	8007d66 <lcd_enter_params_value+0x16>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	da03      	bge.n	8007d6c <lcd_enter_params_value+0x1c>
 8007d64:	e038      	b.n	8007dd8 <lcd_enter_params_value+0x88>
 8007d66:	2b0f      	cmp	r3, #15
 8007d68:	d02e      	beq.n	8007dc8 <lcd_enter_params_value+0x78>
 8007d6a:	e035      	b.n	8007dd8 <lcd_enter_params_value+0x88>
		case KEYPAD_Button_5:
		case KEYPAD_Button_6:
		case KEYPAD_Button_7:
		case KEYPAD_Button_8:
		case KEYPAD_Button_9:
			if(base_value < 1000 && afterpoint < 1000) {
 8007d6c:	4b3a      	ldr	r3, [pc, #232]	; (8007e58 <lcd_enter_params_value+0x108>)
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d74:	d237      	bcs.n	8007de6 <lcd_enter_params_value+0x96>
 8007d76:	4b39      	ldr	r3, [pc, #228]	; (8007e5c <lcd_enter_params_value+0x10c>)
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d7e:	d232      	bcs.n	8007de6 <lcd_enter_params_value+0x96>
				base_value = base_value * 10 + ((uint8_t) key);
 8007d80:	4b35      	ldr	r3, [pc, #212]	; (8007e58 <lcd_enter_params_value+0x108>)
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	0092      	lsls	r2, r2, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4413      	add	r3, r2
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	4b30      	ldr	r3, [pc, #192]	; (8007e58 <lcd_enter_params_value+0x108>)
 8007d98:	801a      	strh	r2, [r3, #0]
				if(afterpoint) afterpoint *= 10;
 8007d9a:	4b30      	ldr	r3, [pc, #192]	; (8007e5c <lcd_enter_params_value+0x10c>)
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <lcd_enter_params_value+0x66>
 8007da2:	4b2e      	ldr	r3, [pc, #184]	; (8007e5c <lcd_enter_params_value+0x10c>)
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	0092      	lsls	r2, r2, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	4b2a      	ldr	r3, [pc, #168]	; (8007e5c <lcd_enter_params_value+0x10c>)
 8007db2:	801a      	strh	r2, [r3, #0]
				else if(base_value >= 1000) afterpoint = 10;
			}
			break;
 8007db4:	e017      	b.n	8007de6 <lcd_enter_params_value+0x96>
				else if(base_value >= 1000) afterpoint = 10;
 8007db6:	4b28      	ldr	r3, [pc, #160]	; (8007e58 <lcd_enter_params_value+0x108>)
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dbe:	d312      	bcc.n	8007de6 <lcd_enter_params_value+0x96>
 8007dc0:	4b26      	ldr	r3, [pc, #152]	; (8007e5c <lcd_enter_params_value+0x10c>)
 8007dc2:	220a      	movs	r2, #10
 8007dc4:	801a      	strh	r2, [r3, #0]
			break;
 8007dc6:	e00e      	b.n	8007de6 <lcd_enter_params_value+0x96>
		case KEYPAD_Button_D:
			if(!afterpoint) afterpoint = 1;
 8007dc8:	4b24      	ldr	r3, [pc, #144]	; (8007e5c <lcd_enter_params_value+0x10c>)
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10c      	bne.n	8007dea <lcd_enter_params_value+0x9a>
 8007dd0:	4b22      	ldr	r3, [pc, #136]	; (8007e5c <lcd_enter_params_value+0x10c>)
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	801a      	strh	r2, [r3, #0]
			break;
 8007dd6:	e008      	b.n	8007dea <lcd_enter_params_value+0x9a>
		default:
			base_value = 0;
 8007dd8:	4b1f      	ldr	r3, [pc, #124]	; (8007e58 <lcd_enter_params_value+0x108>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	801a      	strh	r2, [r3, #0]
			afterpoint = 0;
 8007dde:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <lcd_enter_params_value+0x10c>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	801a      	strh	r2, [r3, #0]
			break;
 8007de4:	e002      	b.n	8007dec <lcd_enter_params_value+0x9c>
			break;
 8007de6:	bf00      	nop
 8007de8:	e000      	b.n	8007dec <lcd_enter_params_value+0x9c>
			break;
 8007dea:	bf00      	nop
	}

	float key_input = (float) base_value;
 8007dec:	4b1a      	ldr	r3, [pc, #104]	; (8007e58 <lcd_enter_params_value+0x108>)
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	ee07 3a90 	vmov	s15, r3
 8007df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df8:	edc7 7a03 	vstr	s15, [r7, #12]
	if(afterpoint) key_input /= afterpoint;
 8007dfc:	4b17      	ldr	r3, [pc, #92]	; (8007e5c <lcd_enter_params_value+0x10c>)
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <lcd_enter_params_value+0xcc>
 8007e04:	4b15      	ldr	r3, [pc, #84]	; (8007e5c <lcd_enter_params_value+0x10c>)
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	ee07 3a90 	vmov	s15, r3
 8007e0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e10:	edd7 6a03 	vldr	s13, [r7, #12]
 8007e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e18:	edc7 7a03 	vstr	s15, [r7, #12]

	switch (screen4_config_item) {
 8007e1c:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <lcd_enter_params_value+0x110>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b05      	cmp	r3, #5
 8007e22:	d00e      	beq.n	8007e42 <lcd_enter_params_value+0xf2>
 8007e24:	2b05      	cmp	r3, #5
 8007e26:	dc10      	bgt.n	8007e4a <lcd_enter_params_value+0xfa>
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d002      	beq.n	8007e32 <lcd_enter_params_value+0xe2>
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d004      	beq.n	8007e3a <lcd_enter_params_value+0xea>
			break;
		case Config_sag_selected:
			screen4_data_config.User_SAG = key_input;
			break;
		default:
			break;
 8007e30:	e00b      	b.n	8007e4a <lcd_enter_params_value+0xfa>
			screen4_data_config.User_PKV = key_input;
 8007e32:	4a0c      	ldr	r2, [pc, #48]	; (8007e64 <lcd_enter_params_value+0x114>)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6013      	str	r3, [r2, #0]
			break;
 8007e38:	e008      	b.n	8007e4c <lcd_enter_params_value+0xfc>
			screen4_data_config.User_PKI = key_input;
 8007e3a:	4a0a      	ldr	r2, [pc, #40]	; (8007e64 <lcd_enter_params_value+0x114>)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6053      	str	r3, [r2, #4]
			break;
 8007e40:	e004      	b.n	8007e4c <lcd_enter_params_value+0xfc>
			screen4_data_config.User_SAG = key_input;
 8007e42:	4a08      	ldr	r2, [pc, #32]	; (8007e64 <lcd_enter_params_value+0x114>)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6093      	str	r3, [r2, #8]
			break;
 8007e48:	e000      	b.n	8007e4c <lcd_enter_params_value+0xfc>
			break;
 8007e4a:	bf00      	nop
	}
}
 8007e4c:	bf00      	nop
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	2001356c 	.word	0x2001356c
 8007e5c:	2001356e 	.word	0x2001356e
 8007e60:	20013885 	.word	0x20013885
 8007e64:	200138bc 	.word	0x200138bc

08007e68 <lcd_is_busy>:

bool lcd_is_busy() {
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
	return screen3_mode || screen4_mode;
 8007e6c:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <lcd_is_busy+0x2c>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d103      	bne.n	8007e7c <lcd_is_busy+0x14>
 8007e74:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <lcd_is_busy+0x30>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <lcd_is_busy+0x18>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <lcd_is_busy+0x1a>
 8007e80:	2300      	movs	r3, #0
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	b2db      	uxtb	r3, r3
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20013884 	.word	0x20013884
 8007e98:	200138b8 	.word	0x200138b8

08007e9c <main>:
	(*(volatile uint32_t*) 0XE0001000) |= (1 << 0);
	SEGGER_UART_init(500000);
	SEGGER_SYSVIEW_Conf();
}

int main(void) {
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af02      	add	r7, sp, #8
//	SEGGER_setup();

	LED_Init();
 8007ea2:	f000 fb55 	bl	8008550 <LED_Init>

	xTaskCreate(lcd_handler, "LCD5110", 2048, NULL, 1, NULL);
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	2301      	movs	r3, #1
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eb4:	4925      	ldr	r1, [pc, #148]	; (8007f4c <main+0xb0>)
 8007eb6:	4826      	ldr	r0, [pc, #152]	; (8007f50 <main+0xb4>)
 8007eb8:	f7fa fcf2 	bl	80028a0 <xTaskCreate>
	xTaskCreate(ade_handler, "ADE7753", 512, NULL, 1, NULL);
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eca:	4922      	ldr	r1, [pc, #136]	; (8007f54 <main+0xb8>)
 8007ecc:	4822      	ldr	r0, [pc, #136]	; (8007f58 <main+0xbc>)
 8007ece:	f7fa fce7 	bl	80028a0 <xTaskCreate>
	xTaskCreate(keypad_handler, "Keypad", 256, NULL, 1, NULL);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	2300      	movs	r3, #0
 8007edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ee0:	491e      	ldr	r1, [pc, #120]	; (8007f5c <main+0xc0>)
 8007ee2:	481f      	ldr	r0, [pc, #124]	; (8007f60 <main+0xc4>)
 8007ee4:	f7fa fcdc 	bl	80028a0 <xTaskCreate>
	xTaskCreate(rtc_handler, "DS1307", 512, NULL, 1, NULL);
 8007ee8:	2300      	movs	r3, #0
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	2301      	movs	r3, #1
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ef6:	491b      	ldr	r1, [pc, #108]	; (8007f64 <main+0xc8>)
 8007ef8:	481b      	ldr	r0, [pc, #108]	; (8007f68 <main+0xcc>)
 8007efa:	f7fa fcd1 	bl	80028a0 <xTaskCreate>
	xTaskCreate(usart_handler, "USART", 512, NULL, 1, NULL);
 8007efe:	2300      	movs	r3, #0
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	2301      	movs	r3, #1
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	2300      	movs	r3, #0
 8007f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f0c:	4917      	ldr	r1, [pc, #92]	; (8007f6c <main+0xd0>)
 8007f0e:	4818      	ldr	r0, [pc, #96]	; (8007f70 <main+0xd4>)
 8007f10:	f7fa fcc6 	bl	80028a0 <xTaskCreate>

	keypad_queue_handle = xQueueCreate(5, sizeof(KEYPAD_Button_t));
 8007f14:	2200      	movs	r2, #0
 8007f16:	2101      	movs	r1, #1
 8007f18:	2005      	movs	r0, #5
 8007f1a:	f7f9 fff1 	bl	8001f00 <xQueueGenericCreate>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4a14      	ldr	r2, [pc, #80]	; (8007f74 <main+0xd8>)
 8007f22:	6013      	str	r3, [r2, #0]
	rtc_queue_handle = xQueueCreate(1, sizeof(DS1307_DateTime_t));
 8007f24:	2200      	movs	r2, #0
 8007f26:	2107      	movs	r1, #7
 8007f28:	2001      	movs	r0, #1
 8007f2a:	f7f9 ffe9 	bl	8001f00 <xQueueGenericCreate>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	4a11      	ldr	r2, [pc, #68]	; (8007f78 <main+0xdc>)
 8007f32:	6013      	str	r3, [r2, #0]
	ade_write_queue_handle = xQueueCreate(10, sizeof(ADE_Write_Data_t));
 8007f34:	2200      	movs	r2, #0
 8007f36:	210c      	movs	r1, #12
 8007f38:	200a      	movs	r0, #10
 8007f3a:	f7f9 ffe1 	bl	8001f00 <xQueueGenericCreate>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4a0e      	ldr	r2, [pc, #56]	; (8007f7c <main+0xe0>)
 8007f42:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8007f44:	f7fa fe3a 	bl	8002bbc <vTaskStartScheduler>

	while(1);
 8007f48:	e7fe      	b.n	8007f48 <main+0xac>
 8007f4a:	bf00      	nop
 8007f4c:	0800b7dc 	.word	0x0800b7dc
 8007f50:	08007f81 	.word	0x08007f81
 8007f54:	0800b7e4 	.word	0x0800b7e4
 8007f58:	08008349 	.word	0x08008349
 8007f5c:	0800b7ec 	.word	0x0800b7ec
 8007f60:	080083d1 	.word	0x080083d1
 8007f64:	0800b7f4 	.word	0x0800b7f4
 8007f68:	08008491 	.word	0x08008491
 8007f6c:	0800b7fc 	.word	0x0800b7fc
 8007f70:	0800852d 	.word	0x0800852d
 8007f74:	200138cc 	.word	0x200138cc
 8007f78:	200138d4 	.word	0x200138d4
 8007f7c:	200138d0 	.word	0x200138d0

08007f80 <lcd_handler>:
	return 0;
}

void lcd_handler(void* parameters) {
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	b08b      	sub	sp, #44	; 0x2c
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6178      	str	r0, [r7, #20]
	LCD5110_Init(0x37);
 8007f88:	2037      	movs	r0, #55	; 0x37
 8007f8a:	f7f9 fbd9 	bl	8001740 <LCD5110_Init>

	memset(&screen1_data, 0, sizeof(screen1_data));
 8007f8e:	2210      	movs	r2, #16
 8007f90:	2100      	movs	r1, #0
 8007f92:	48d1      	ldr	r0, [pc, #836]	; (80082d8 <lcd_handler+0x358>)
 8007f94:	f000 fcaa 	bl	80088ec <memset>
	memset(&screen2_data, 0, sizeof(screen2_data));
 8007f98:	2210      	movs	r2, #16
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	48cf      	ldr	r0, [pc, #828]	; (80082dc <lcd_handler+0x35c>)
 8007f9e:	f000 fca5 	bl	80088ec <memset>
	memset(&screen3_data, 0, sizeof(screen3_data));
 8007fa2:	2208      	movs	r2, #8
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	48ce      	ldr	r0, [pc, #824]	; (80082e0 <lcd_handler+0x360>)
 8007fa8:	f000 fca0 	bl	80088ec <memset>
	memset(&screen4_data, 0, sizeof(screen4_data));
 8007fac:	2210      	movs	r2, #16
 8007fae:	2100      	movs	r1, #0
 8007fb0:	48cc      	ldr	r0, [pc, #816]	; (80082e4 <lcd_handler+0x364>)
 8007fb2:	f000 fc9b 	bl	80088ec <memset>

	lcd_screen_1_clear();
 8007fb6:	f7ff fc2d 	bl	8007814 <lcd_screen_1_clear>
	lcd_screen_2_clear();
 8007fba:	f7ff fc37 	bl	800782c <lcd_screen_2_clear>
	lcd_screen_3_clear();
 8007fbe:	f7ff fc41 	bl	8007844 <lcd_screen_3_clear>
	lcd_screen_4_clear();
 8007fc2:	f7ff fc57 	bl	8007874 <lcd_screen_4_clear>

	KEYPAD_Button_t keypad;
	LCD_Screen_t screen = LCD_Screen_4;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

//	ADE_Write_Data_t ade_write_data;

	while(1) {
		if(keypad_queue_handle != NULL) {
 8007fcc:	4bc6      	ldr	r3, [pc, #792]	; (80082e8 <lcd_handler+0x368>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 8196 	beq.w	8008302 <lcd_handler+0x382>
			if(xQueueReceive(keypad_queue_handle, &keypad, (TickType_t) 10) == pdPASS) {
 8007fd6:	4bc4      	ldr	r3, [pc, #784]	; (80082e8 <lcd_handler+0x368>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8007fde:	220a      	movs	r2, #10
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fa f9e1 	bl	80023a8 <xQueueReceive>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	f040 818a 	bne.w	8008302 <lcd_handler+0x382>
				switch (keypad) {
 8007fee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ff2:	2b0f      	cmp	r3, #15
 8007ff4:	dc50      	bgt.n	8008098 <lcd_handler+0x118>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da28      	bge.n	800804c <lcd_handler+0xcc>

					case KEYPAD_Button_HOLD_HASH:
					case KEYPAD_Button_HOLD_STAR:
						break;
					default:
						break;
 8007ffa:	e184      	b.n	8008306 <lcd_handler+0x386>
 8007ffc:	3b80      	subs	r3, #128	; 0x80
 8007ffe:	2b0f      	cmp	r3, #15
 8008000:	f200 8181 	bhi.w	8008306 <lcd_handler+0x386>
 8008004:	a201      	add	r2, pc, #4	; (adr r2, 800800c <lcd_handler+0x8c>)
 8008006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800a:	bf00      	nop
 800800c:	08008307 	.word	0x08008307
 8008010:	08008307 	.word	0x08008307
 8008014:	08008307 	.word	0x08008307
 8008018:	08008307 	.word	0x08008307
 800801c:	08008307 	.word	0x08008307
 8008020:	08008307 	.word	0x08008307
 8008024:	08008307 	.word	0x08008307
 8008028:	08008307 	.word	0x08008307
 800802c:	08008307 	.word	0x08008307
 8008030:	08008307 	.word	0x08008307
 8008034:	08008307 	.word	0x08008307
 8008038:	08008307 	.word	0x08008307
 800803c:	08008307 	.word	0x08008307
 8008040:	08008307 	.word	0x08008307
 8008044:	08008299 	.word	0x08008299
 8008048:	080082b9 	.word	0x080082b9
 800804c:	2b0f      	cmp	r3, #15
 800804e:	f200 815a 	bhi.w	8008306 <lcd_handler+0x386>
 8008052:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <lcd_handler+0xd8>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	080080a5 	.word	0x080080a5
 800805c:	080080a5 	.word	0x080080a5
 8008060:	080080a5 	.word	0x080080a5
 8008064:	080080a5 	.word	0x080080a5
 8008068:	080080a5 	.word	0x080080a5
 800806c:	080080a5 	.word	0x080080a5
 8008070:	080080a5 	.word	0x080080a5
 8008074:	080080a5 	.word	0x080080a5
 8008078:	080080a5 	.word	0x080080a5
 800807c:	080080a5 	.word	0x080080a5
 8008080:	08008237 	.word	0x08008237
 8008084:	08008181 	.word	0x08008181
 8008088:	080080d1 	.word	0x080080d1
 800808c:	080080eb 	.word	0x080080eb
 8008090:	08008105 	.word	0x08008105
 8008094:	0800811f 	.word	0x0800811f
				switch (keypad) {
 8008098:	2b8f      	cmp	r3, #143	; 0x8f
 800809a:	f300 8134 	bgt.w	8008306 <lcd_handler+0x386>
 800809e:	2b80      	cmp	r3, #128	; 0x80
 80080a0:	daac      	bge.n	8007ffc <lcd_handler+0x7c>
						break;
 80080a2:	e130      	b.n	8008306 <lcd_handler+0x386>
						if(lcd_screen_4_mode() == S4_CONFIG_PARAMS_DISPLAY)
 80080a4:	f7ff fcb2 	bl	8007a0c <lcd_screen_4_mode>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d104      	bne.n	80080b8 <lcd_handler+0x138>
							lcd_enter_params_value(keypad);
 80080ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fe4c 	bl	8007d50 <lcd_enter_params_value>
						if(lcd_screen_4_mode() == S4_CONFIG_DATETIME_DISPLAY)
 80080b8:	f7ff fca8 	bl	8007a0c <lcd_screen_4_mode>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b03      	cmp	r3, #3
 80080c0:	f040 8123 	bne.w	800830a <lcd_handler+0x38a>
							lcd_enter_datetime_value(keypad);
 80080c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff fdad 	bl	8007c28 <lcd_enter_datetime_value>
						break;
 80080ce:	e11c      	b.n	800830a <lcd_handler+0x38a>
						if(!lcd_is_busy()) screen = LCD_Screen_1;
 80080d0:	f7ff feca 	bl	8007e68 <lcd_is_busy>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f083 0301 	eor.w	r3, r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 8116 	beq.w	800830e <lcd_handler+0x38e>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 80080e8:	e111      	b.n	800830e <lcd_handler+0x38e>
						if(!lcd_is_busy()) screen = LCD_Screen_2;
 80080ea:	f7ff febd 	bl	8007e68 <lcd_is_busy>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f083 0301 	eor.w	r3, r3, #1
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 810b 	beq.w	8008312 <lcd_handler+0x392>
 80080fc:	2301      	movs	r3, #1
 80080fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 8008102:	e106      	b.n	8008312 <lcd_handler+0x392>
						if(!lcd_is_busy()) screen = LCD_Screen_3;
 8008104:	f7ff feb0 	bl	8007e68 <lcd_is_busy>
 8008108:	4603      	mov	r3, r0
 800810a:	f083 0301 	eor.w	r3, r3, #1
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 8100 	beq.w	8008316 <lcd_handler+0x396>
 8008116:	2302      	movs	r3, #2
 8008118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 800811c:	e0fb      	b.n	8008316 <lcd_handler+0x396>
						if(!lcd_is_busy()) screen = LCD_Screen_4;
 800811e:	f7ff fea3 	bl	8007e68 <lcd_is_busy>
 8008122:	4603      	mov	r3, r0
 8008124:	f083 0301 	eor.w	r3, r3, #1
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <lcd_handler+0x1b6>
 800812e:	2303      	movs	r3, #3
 8008130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 8008134:	e0f4      	b.n	8008320 <lcd_handler+0x3a0>
							switch (lcd_screen_4_mode()) {
 8008136:	f7ff fc69 	bl	8007a0c <lcd_screen_4_mode>
 800813a:	4603      	mov	r3, r0
 800813c:	2b03      	cmp	r3, #3
 800813e:	d01a      	beq.n	8008176 <lcd_handler+0x1f6>
 8008140:	2b03      	cmp	r3, #3
 8008142:	dc1b      	bgt.n	800817c <lcd_handler+0x1fc>
 8008144:	2b01      	cmp	r3, #1
 8008146:	d002      	beq.n	800814e <lcd_handler+0x1ce>
 8008148:	2b02      	cmp	r3, #2
 800814a:	d003      	beq.n	8008154 <lcd_handler+0x1d4>
									break;
 800814c:	e016      	b.n	800817c <lcd_handler+0x1fc>
									lcd_screen_4_next_config_option();
 800814e:	f7ff fc81 	bl	8007a54 <lcd_screen_4_next_config_option>
									break;
 8008152:	e014      	b.n	800817e <lcd_handler+0x1fe>
									if(lcd_screen_4_config_item() % 2)
 8008154:	f7ff fc72 	bl	8007a3c <lcd_screen_4_config_item>
 8008158:	4603      	mov	r3, r0
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d005      	beq.n	8008170 <lcd_handler+0x1f0>
										lcd_enter_params_value(keypad);
 8008164:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fdf1 	bl	8007d50 <lcd_enter_params_value>
									break;
 800816e:	e006      	b.n	800817e <lcd_handler+0x1fe>
									else lcd_screen_4_next_config_item();
 8008170:	f7ff fc80 	bl	8007a74 <lcd_screen_4_next_config_item>
									break;
 8008174:	e003      	b.n	800817e <lcd_handler+0x1fe>
									lcd_screen_4_next_config_item();
 8008176:	f7ff fc7d 	bl	8007a74 <lcd_screen_4_next_config_item>
									break;
 800817a:	e000      	b.n	800817e <lcd_handler+0x1fe>
									break;
 800817c:	bf00      	nop
						break;
 800817e:	e0cf      	b.n	8008320 <lcd_handler+0x3a0>
						if(lcd_is_busy()) {
 8008180:	f7ff fe72 	bl	8007e68 <lcd_is_busy>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d051      	beq.n	800822e <lcd_handler+0x2ae>
							if(screen == LCD_Screen_3)
 800818a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800818e:	2b02      	cmp	r3, #2
 8008190:	d101      	bne.n	8008196 <lcd_handler+0x216>
								lcd_screen_3_clear();
 8008192:	f7ff fb57 	bl	8007844 <lcd_screen_3_clear>
							if(screen == LCD_Screen_4) {
 8008196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800819a:	2b03      	cmp	r3, #3
 800819c:	d147      	bne.n	800822e <lcd_handler+0x2ae>
								switch (lcd_screen_4_mode()) {
 800819e:	f7ff fc35 	bl	8007a0c <lcd_screen_4_mode>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d022      	beq.n	80081ee <lcd_handler+0x26e>
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	dc42      	bgt.n	8008232 <lcd_handler+0x2b2>
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d005      	beq.n	80081bc <lcd_handler+0x23c>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	dd3e      	ble.n	8008232 <lcd_handler+0x2b2>
 80081b4:	3b02      	subs	r3, #2
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d83b      	bhi.n	8008232 <lcd_handler+0x2b2>
 80081ba:	e00c      	b.n	80081d6 <lcd_handler+0x256>
										if(lcd_screen_4_config_option() == Config_Params)
 80081bc:	f7ff fc32 	bl	8007a24 <lcd_screen_4_config_option>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d103      	bne.n	80081ce <lcd_handler+0x24e>
											lcd_screen_4_switch_mode(S4_CONFIG_PARAMS_DISPLAY);
 80081c6:	2002      	movs	r0, #2
 80081c8:	f7ff fbd8 	bl	800797c <lcd_screen_4_switch_mode>
										break;
 80081cc:	e032      	b.n	8008234 <lcd_handler+0x2b4>
										else lcd_screen_4_switch_mode(S4_CONFIG_DATETIME_DISPLAY);
 80081ce:	2003      	movs	r0, #3
 80081d0:	f7ff fbd4 	bl	800797c <lcd_screen_4_switch_mode>
										break;
 80081d4:	e02e      	b.n	8008234 <lcd_handler+0x2b4>
										if(lcd_screen_4_config_item() == Config_interval_selected)
 80081d6:	f7ff fc31 	bl	8007a3c <lcd_screen_4_config_item>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b07      	cmp	r3, #7
 80081de:	d102      	bne.n	80081e6 <lcd_handler+0x266>
											lcd_screen_4_next_interval_set();
 80081e0:	f7ff fcca 	bl	8007b78 <lcd_screen_4_next_interval_set>
										break;
 80081e4:	e026      	b.n	8008234 <lcd_handler+0x2b4>
										else lcd_screen_4_config_select(CONFIG_SELECT);
 80081e6:	2001      	movs	r0, #1
 80081e8:	f7ff fc72 	bl	8007ad0 <lcd_screen_4_config_select>
										break;
 80081ec:	e022      	b.n	8008234 <lcd_handler+0x2b4>
										if(lcd_screen_4_config_option() == Config_Params) {
 80081ee:	f7ff fc19 	bl	8007a24 <lcd_screen_4_config_option>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d109      	bne.n	800820c <lcd_handler+0x28c>
											screen4_data = lcd_screen_4_commit_parameters();
 80081f8:	4c3a      	ldr	r4, [pc, #232]	; (80082e4 <lcd_handler+0x364>)
 80081fa:	463b      	mov	r3, r7
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fcf9 	bl	8007bf4 <lcd_screen_4_commit_parameters>
 8008202:	463b      	mov	r3, r7
 8008204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800820a:	e00c      	b.n	8008226 <lcd_handler+0x2a6>
											DS1307_DateTime_t config_rtc = lcd_screen_4_commit_rtc();
 800820c:	f107 031c 	add.w	r3, r7, #28
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff fcdb 	bl	8007bcc <lcd_screen_4_commit_rtc>
											xQueueSend(rtc_queue_handle, (void*) &config_rtc, (TickType_t) 0);
 8008216:	4b35      	ldr	r3, [pc, #212]	; (80082ec <lcd_handler+0x36c>)
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	f107 011c 	add.w	r1, r7, #28
 800821e:	2300      	movs	r3, #0
 8008220:	2200      	movs	r2, #0
 8008222:	f7f9 fef5 	bl	8002010 <xQueueGenericSend>
										lcd_screen_4_switch_mode(S4_CONFIG_DISPLAY);
 8008226:	2001      	movs	r0, #1
 8008228:	f7ff fba8 	bl	800797c <lcd_screen_4_switch_mode>
										break;
 800822c:	e002      	b.n	8008234 <lcd_handler+0x2b4>
							}
 800822e:	bf00      	nop
 8008230:	e076      	b.n	8008320 <lcd_handler+0x3a0>
										break;
 8008232:	bf00      	nop
						break;
 8008234:	e074      	b.n	8008320 <lcd_handler+0x3a0>
						if(lcd_is_busy()) {
 8008236:	f7ff fe17 	bl	8007e68 <lcd_is_busy>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d029      	beq.n	8008294 <lcd_handler+0x314>
							if(screen == LCD_Screen_3)
 8008240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008244:	2b02      	cmp	r3, #2
 8008246:	d102      	bne.n	800824e <lcd_handler+0x2ce>
								lcd_screen_3_switch_mode(S3_NORMAL_DISPLAY);
 8008248:	2000      	movs	r0, #0
 800824a:	f7ff fb6f 	bl	800792c <lcd_screen_3_switch_mode>
							if(screen == LCD_Screen_4) {
 800824e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008252:	2b03      	cmp	r3, #3
 8008254:	d11e      	bne.n	8008294 <lcd_handler+0x314>
								switch (lcd_screen_4_mode()) {
 8008256:	f7ff fbd9 	bl	8007a0c <lcd_screen_4_mode>
 800825a:	4603      	mov	r3, r0
 800825c:	2b03      	cmp	r3, #3
 800825e:	dc02      	bgt.n	8008266 <lcd_handler+0x2e6>
 8008260:	2b02      	cmp	r3, #2
 8008262:	da03      	bge.n	800826c <lcd_handler+0x2ec>
										break;
 8008264:	e017      	b.n	8008296 <lcd_handler+0x316>
 8008266:	2b04      	cmp	r3, #4
 8008268:	d010      	beq.n	800828c <lcd_handler+0x30c>
 800826a:	e014      	b.n	8008296 <lcd_handler+0x316>
										if(lcd_screen_4_config_item() % 2)
 800826c:	f7ff fbe6 	bl	8007a3c <lcd_screen_4_config_item>
 8008270:	4603      	mov	r3, r0
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <lcd_handler+0x304>
											lcd_screen_4_config_select(CONFIG_DESELECT);
 800827c:	2000      	movs	r0, #0
 800827e:	f7ff fc27 	bl	8007ad0 <lcd_screen_4_config_select>
										break;
 8008282:	e008      	b.n	8008296 <lcd_handler+0x316>
										else lcd_screen_4_switch_mode(S4_COMMIT_DISPLAY);
 8008284:	2004      	movs	r0, #4
 8008286:	f7ff fb79 	bl	800797c <lcd_screen_4_switch_mode>
										break;
 800828a:	e004      	b.n	8008296 <lcd_handler+0x316>
										lcd_screen_4_switch_mode(S4_CONFIG_DISPLAY);
 800828c:	2001      	movs	r0, #1
 800828e:	f7ff fb75 	bl	800797c <lcd_screen_4_switch_mode>
										break;
 8008292:	e000      	b.n	8008296 <lcd_handler+0x316>
							}
 8008294:	bf00      	nop
						break;
 8008296:	e043      	b.n	8008320 <lcd_handler+0x3a0>
						if(!lcd_is_busy() && screen == LCD_Screen_3)
 8008298:	f7ff fde6 	bl	8007e68 <lcd_is_busy>
 800829c:	4603      	mov	r3, r0
 800829e:	f083 0301 	eor.w	r3, r3, #1
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d038      	beq.n	800831a <lcd_handler+0x39a>
 80082a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d134      	bne.n	800831a <lcd_handler+0x39a>
							lcd_screen_3_switch_mode(S3_RESET_CONFIRM_DISPLAY);
 80082b0:	2001      	movs	r0, #1
 80082b2:	f7ff fb3b 	bl	800792c <lcd_screen_3_switch_mode>
						break;
 80082b6:	e030      	b.n	800831a <lcd_handler+0x39a>
						if(!lcd_is_busy()) {
 80082b8:	f7ff fdd6 	bl	8007e68 <lcd_is_busy>
 80082bc:	4603      	mov	r3, r0
 80082be:	f083 0301 	eor.w	r3, r3, #1
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d013      	beq.n	80082f0 <lcd_handler+0x370>
							if(screen == LCD_Screen_4)
 80082c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d126      	bne.n	800831e <lcd_handler+0x39e>
								lcd_screen_4_switch_mode(S4_CONFIG_DISPLAY);
 80082d0:	2001      	movs	r0, #1
 80082d2:	f7ff fb53 	bl	800797c <lcd_screen_4_switch_mode>
						break;
 80082d6:	e022      	b.n	800831e <lcd_handler+0x39e>
 80082d8:	20013888 	.word	0x20013888
 80082dc:	20013874 	.word	0x20013874
 80082e0:	200138b0 	.word	0x200138b0
 80082e4:	200138a0 	.word	0x200138a0
 80082e8:	200138cc 	.word	0x200138cc
 80082ec:	200138d4 	.word	0x200138d4
						} else if(lcd_screen_4_mode() == S4_CONFIG_DISPLAY)
 80082f0:	f7ff fb8c 	bl	8007a0c <lcd_screen_4_mode>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d111      	bne.n	800831e <lcd_handler+0x39e>
							lcd_screen_4_switch_mode(S4_NORMAL_DISPLAY);
 80082fa:	2000      	movs	r0, #0
 80082fc:	f7ff fb3e 	bl	800797c <lcd_screen_4_switch_mode>
						break;
 8008300:	e00d      	b.n	800831e <lcd_handler+0x39e>
				}
			}
 8008302:	bf00      	nop
 8008304:	e00c      	b.n	8008320 <lcd_handler+0x3a0>
						break;
 8008306:	bf00      	nop
 8008308:	e00a      	b.n	8008320 <lcd_handler+0x3a0>
						break;
 800830a:	bf00      	nop
 800830c:	e008      	b.n	8008320 <lcd_handler+0x3a0>
						break;
 800830e:	bf00      	nop
 8008310:	e006      	b.n	8008320 <lcd_handler+0x3a0>
						break;
 8008312:	bf00      	nop
 8008314:	e004      	b.n	8008320 <lcd_handler+0x3a0>
						break;
 8008316:	bf00      	nop
 8008318:	e002      	b.n	8008320 <lcd_handler+0x3a0>
						break;
 800831a:	bf00      	nop
 800831c:	e000      	b.n	8008320 <lcd_handler+0x3a0>
						break;
 800831e:	bf00      	nop
		}

		lcd_screen_refresh(screen);
 8008320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fa27 	bl	8007778 <lcd_screen_refresh>
		vTaskDelay(200);
 800832a:	20c8      	movs	r0, #200	; 0xc8
 800832c:	f7fa fc0e 	bl	8002b4c <vTaskDelay>
		taskYIELD();
 8008330:	4b04      	ldr	r3, [pc, #16]	; (8008344 <lcd_handler+0x3c4>)
 8008332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	f3bf 8f6f 	isb	sy
		if(keypad_queue_handle != NULL) {
 8008340:	e644      	b.n	8007fcc <lcd_handler+0x4c>
 8008342:	bf00      	nop
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <ade_handler>:
	}
}

void ade_handler(void* parameters) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
	ADE_Write_Data_t write_data;

	ADE_Init();
 8008350:	f7f8 fcda 	bl	8000d08 <ADE_Init>

	ADE_WriteData(GAIN, 0x34, 1);
 8008354:	2201      	movs	r2, #1
 8008356:	2134      	movs	r1, #52	; 0x34
 8008358:	200f      	movs	r0, #15
 800835a:	f7f8 fd35 	bl	8000dc8 <ADE_WriteData>
	ADE_WriteData(MODE, 0x008c, 2);
 800835e:	2202      	movs	r2, #2
 8008360:	218c      	movs	r1, #140	; 0x8c
 8008362:	2009      	movs	r0, #9
 8008364:	f7f8 fd30 	bl	8000dc8 <ADE_WriteData>
	ADE_WriteData(LINECYC, 0x00c8, 2);
 8008368:	2202      	movs	r2, #2
 800836a:	21c8      	movs	r1, #200	; 0xc8
 800836c:	201c      	movs	r0, #28
 800836e:	f7f8 fd2b 	bl	8000dc8 <ADE_WriteData>
	ADE_WriteData(IRQEN, 0x0044, 2);
 8008372:	2202      	movs	r2, #2
 8008374:	2144      	movs	r1, #68	; 0x44
 8008376:	200a      	movs	r0, #10
 8008378:	f7f8 fd26 	bl	8000dc8 <ADE_WriteData>
	ADE_ReadData(RSTSTATUS, 2);
 800837c:	2102      	movs	r1, #2
 800837e:	200c      	movs	r0, #12
 8008380:	f7f8 fcee 	bl	8000d60 <ADE_ReadData>

	while(1) {
		if(ade_write_queue_handle != NULL)
 8008384:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <ade_handler+0x80>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d010      	beq.n	80083ae <ade_handler+0x66>
			if(xQueueReceive(ade_write_queue_handle, &write_data, (TickType_t) 10) == pdPASS)
 800838c:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <ade_handler+0x80>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f107 010c 	add.w	r1, r7, #12
 8008394:	220a      	movs	r2, #10
 8008396:	4618      	mov	r0, r3
 8008398:	f7fa f806 	bl	80023a8 <xQueueReceive>
 800839c:	4603      	mov	r3, r0
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d105      	bne.n	80083ae <ade_handler+0x66>
				ADE_WriteData(write_data.address, write_data.data, write_data.bytes);
 80083a2:	7b3b      	ldrb	r3, [r7, #12]
 80083a4:	6939      	ldr	r1, [r7, #16]
 80083a6:	7d3a      	ldrb	r2, [r7, #20]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7f8 fd0d 	bl	8000dc8 <ADE_WriteData>

		vTaskDelay(100);
 80083ae:	2064      	movs	r0, #100	; 0x64
 80083b0:	f7fa fbcc 	bl	8002b4c <vTaskDelay>
		taskYIELD();
 80083b4:	4b05      	ldr	r3, [pc, #20]	; (80083cc <ade_handler+0x84>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
		if(ade_write_queue_handle != NULL)
 80083c4:	e7de      	b.n	8008384 <ade_handler+0x3c>
 80083c6:	bf00      	nop
 80083c8:	200138d0 	.word	0x200138d0
 80083cc:	e000ed04 	.word	0xe000ed04

080083d0 <keypad_handler>:
	}
}

void keypad_handler(void* parameters) {
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	KEYPAD_Init(KEYPAD_Type_Large);
 80083d8:	2000      	movs	r0, #0
 80083da:	f7f8 ffd1 	bl	8001380 <KEYPAD_Init>
	KEYPAD_Button_t Keypad_Hold_Button, Keypad_Button, Keypad_prev = KEYPAD_NOPRESSED;
 80083de:	23ff      	movs	r3, #255	; 0xff
 80083e0:	727b      	strb	r3, [r7, #9]
	int hold_timeout = 400;
 80083e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80083e6:	60fb      	str	r3, [r7, #12]

	while(1) {
		KEYPAD_Update();
 80083e8:	f7f9 f930 	bl	800164c <KEYPAD_Update>
		Keypad_Button = KEYPAD_Read();
 80083ec:	f7f9 f83a 	bl	8001464 <KEYPAD_Read>
 80083f0:	4603      	mov	r3, r0
 80083f2:	72fb      	strb	r3, [r7, #11]

		if(Keypad_Button != KEYPAD_NOPRESSED && Keypad_Button == Keypad_prev) {
 80083f4:	7afb      	ldrb	r3, [r7, #11]
 80083f6:	2bff      	cmp	r3, #255	; 0xff
 80083f8:	d01e      	beq.n	8008438 <keypad_handler+0x68>
 80083fa:	7a7b      	ldrb	r3, [r7, #9]
 80083fc:	7afa      	ldrb	r2, [r7, #11]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d11a      	bne.n	8008438 <keypad_handler+0x68>
			if(hold_timeout > 0) hold_timeout--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	dd03      	ble.n	8008410 <keypad_handler+0x40>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3b01      	subs	r3, #1
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	e013      	b.n	8008438 <keypad_handler+0x68>
			else if (!hold_timeout) {
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d110      	bne.n	8008438 <keypad_handler+0x68>
				hold_timeout--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3b01      	subs	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
				Keypad_Hold_Button = KEYPAD_Hold_Button(Keypad_Button);
 800841c:	7afb      	ldrb	r3, [r7, #11]
 800841e:	4618      	mov	r0, r3
 8008420:	f7f9 f904 	bl	800162c <KEYPAD_Hold_Button>
 8008424:	4603      	mov	r3, r0
 8008426:	72bb      	strb	r3, [r7, #10]
				xQueueSend(keypad_queue_handle, (void*) &Keypad_Hold_Button, (TickType_t) 0);
 8008428:	4b17      	ldr	r3, [pc, #92]	; (8008488 <keypad_handler+0xb8>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	f107 010a 	add.w	r1, r7, #10
 8008430:	2300      	movs	r3, #0
 8008432:	2200      	movs	r2, #0
 8008434:	f7f9 fdec 	bl	8002010 <xQueueGenericSend>
			}
		}
		if(Keypad_Button == KEYPAD_NOPRESSED && Keypad_prev != KEYPAD_NOPRESSED)
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	2bff      	cmp	r3, #255	; 0xff
 800843c:	d10d      	bne.n	800845a <keypad_handler+0x8a>
 800843e:	7a7b      	ldrb	r3, [r7, #9]
 8008440:	2bff      	cmp	r3, #255	; 0xff
 8008442:	d00a      	beq.n	800845a <keypad_handler+0x8a>
			if(hold_timeout > 0)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	dd07      	ble.n	800845a <keypad_handler+0x8a>
				xQueueSend(keypad_queue_handle, (void*) &Keypad_prev, (TickType_t) 0);
 800844a:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <keypad_handler+0xb8>)
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	f107 0109 	add.w	r1, r7, #9
 8008452:	2300      	movs	r3, #0
 8008454:	2200      	movs	r2, #0
 8008456:	f7f9 fddb 	bl	8002010 <xQueueGenericSend>
		if(Keypad_Button == KEYPAD_NOPRESSED && Keypad_prev != KEYPAD_NOPRESSED)
 800845a:	7afb      	ldrb	r3, [r7, #11]
 800845c:	2bff      	cmp	r3, #255	; 0xff
 800845e:	d105      	bne.n	800846c <keypad_handler+0x9c>
 8008460:	7a7b      	ldrb	r3, [r7, #9]
 8008462:	2bff      	cmp	r3, #255	; 0xff
 8008464:	d002      	beq.n	800846c <keypad_handler+0x9c>
			hold_timeout = 600;
 8008466:	f44f 7316 	mov.w	r3, #600	; 0x258
 800846a:	60fb      	str	r3, [r7, #12]

		Keypad_prev = Keypad_Button;
 800846c:	7afb      	ldrb	r3, [r7, #11]
 800846e:	727b      	strb	r3, [r7, #9]
		vTaskDelay(5);
 8008470:	2005      	movs	r0, #5
 8008472:	f7fa fb6b 	bl	8002b4c <vTaskDelay>
		taskYIELD();
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <keypad_handler+0xbc>)
 8008478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	f3bf 8f6f 	isb	sy
		KEYPAD_Update();
 8008486:	e7af      	b.n	80083e8 <keypad_handler+0x18>
 8008488:	200138cc 	.word	0x200138cc
 800848c:	e000ed04 	.word	0xe000ed04

08008490 <rtc_handler>:
	}
}

void rtc_handler(void* parameters) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b088      	sub	sp, #32
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	DS1307_DateTime_t rtc_datetime, rtc_config_data;
	int sec, sec_prev = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	61fb      	str	r3, [r7, #28]

	while(DS1307_Init() != DS1307_Result_OK) vTaskDelay(10);
 800849c:	e002      	b.n	80084a4 <rtc_handler+0x14>
 800849e:	200a      	movs	r0, #10
 80084a0:	f7fa fb54 	bl	8002b4c <vTaskDelay>
 80084a4:	f7f8 fd3a 	bl	8000f1c <DS1307_Init>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f7      	bne.n	800849e <rtc_handler+0xe>

	while(1) {
		if(rtc_queue_handle != NULL) {
 80084ae:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <rtc_handler+0x94>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00f      	beq.n	80084d6 <rtc_handler+0x46>
			if(xQueueReceive(rtc_queue_handle, &rtc_config_data, (TickType_t) 10) == pdPASS)
 80084b6:	4b1b      	ldr	r3, [pc, #108]	; (8008524 <rtc_handler+0x94>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f107 0108 	add.w	r1, r7, #8
 80084be:	220a      	movs	r2, #10
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7f9 ff71 	bl	80023a8 <xQueueReceive>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d104      	bne.n	80084d6 <rtc_handler+0x46>
				DS1307_SetDateTime(&rtc_config_data);
 80084cc:	f107 0308 	add.w	r3, r7, #8
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7f8 fed1 	bl	8001278 <DS1307_SetDateTime>
		}

		DS1307_GetDateTime(&rtc_datetime);
 80084d6:	f107 0310 	add.w	r3, r7, #16
 80084da:	4618      	mov	r0, r3
 80084dc:	f7f8 fe9a 	bl	8001214 <DS1307_GetDateTime>
		sec = rtc_datetime.seconds;
 80084e0:	7c3b      	ldrb	r3, [r7, #16]
 80084e2:	61bb      	str	r3, [r7, #24]
		if((sec - sec_prev == 1) || (sec_prev - sec == 59)) lcd_screen_3_timer_count_up();
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d004      	beq.n	80084f8 <rtc_handler+0x68>
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b3b      	cmp	r3, #59	; 0x3b
 80084f6:	d101      	bne.n	80084fc <rtc_handler+0x6c>
 80084f8:	f7ff f9da 	bl	80078b0 <lcd_screen_3_timer_count_up>
		lcd_screen_4_rtc_update(rtc_datetime);
 80084fc:	f107 0310 	add.w	r3, r7, #16
 8008500:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008504:	f7ff fa22 	bl	800794c <lcd_screen_4_rtc_update>

		sec_prev = sec;
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	61fb      	str	r3, [r7, #28]
		vTaskDelay(100);
 800850c:	2064      	movs	r0, #100	; 0x64
 800850e:	f7fa fb1d 	bl	8002b4c <vTaskDelay>
		taskYIELD();
 8008512:	4b05      	ldr	r3, [pc, #20]	; (8008528 <rtc_handler+0x98>)
 8008514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	f3bf 8f6f 	isb	sy
		if(rtc_queue_handle != NULL) {
 8008522:	e7c4      	b.n	80084ae <rtc_handler+0x1e>
 8008524:	200138d4 	.word	0x200138d4
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <usart_handler>:
	}
}

void usart_handler(void* parameters) {
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

	while(1) {
		vTaskDelay(100);
 8008534:	2064      	movs	r0, #100	; 0x64
 8008536:	f7fa fb09 	bl	8002b4c <vTaskDelay>
		taskYIELD();
 800853a:	4b04      	ldr	r3, [pc, #16]	; (800854c <usart_handler+0x20>)
 800853c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	f3bf 8f6f 	isb	sy
		vTaskDelay(100);
 800854a:	e7f3      	b.n	8008534 <usart_handler+0x8>
 800854c:	e000ed04 	.word	0xe000ed04

08008550 <LED_Init>:
	}
}

void LED_Init() {
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = PORT_LED;
 8008556:	4b17      	ldr	r3, [pc, #92]	; (80085b4 <LED_Init+0x64>)
 8008558:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800855a:	2301      	movs	r3, #1
 800855c:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800855e:	2302      	movs	r3, #2
 8008560:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8008562:	2300      	movs	r3, #0
 8008564:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8008566:	2300      	movs	r3, #0
 8008568:	72fb      	strb	r3, [r7, #11]

//	Red LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_R_LED;
 800856a:	2301      	movs	r3, #1
 800856c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 800856e:	1d3b      	adds	r3, r7, #4
 8008570:	4618      	mov	r0, r3
 8008572:	f7fc f82f 	bl	80045d4 <GPIO_Init>

//	Green LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_G_LED;
 8008576:	2303      	movs	r3, #3
 8008578:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 800857a:	1d3b      	adds	r3, r7, #4
 800857c:	4618      	mov	r0, r3
 800857e:	f7fc f829 	bl	80045d4 <GPIO_Init>

//	Blue LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_B_LED;
 8008582:	2305      	movs	r3, #5
 8008584:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8008586:	1d3b      	adds	r3, r7, #4
 8008588:	4618      	mov	r0, r3
 800858a:	f7fc f823 	bl	80045d4 <GPIO_Init>

	R_LED_OFF;
 800858e:	2201      	movs	r2, #1
 8008590:	2101      	movs	r1, #1
 8008592:	4808      	ldr	r0, [pc, #32]	; (80085b4 <LED_Init+0x64>)
 8008594:	f7fc f9d0 	bl	8004938 <GPIO_WriteToOutputPin>
	G_LED_OFF;
 8008598:	2201      	movs	r2, #1
 800859a:	2103      	movs	r1, #3
 800859c:	4805      	ldr	r0, [pc, #20]	; (80085b4 <LED_Init+0x64>)
 800859e:	f7fc f9cb 	bl	8004938 <GPIO_WriteToOutputPin>
	B_LED_OFF;
 80085a2:	2201      	movs	r2, #1
 80085a4:	2105      	movs	r1, #5
 80085a6:	4803      	ldr	r0, [pc, #12]	; (80085b4 <LED_Init+0x64>)
 80085a8:	f7fc f9c6 	bl	8004938 <GPIO_WriteToOutputPin>

//	R_LED_ON;
//	G_LED_ON;
//	B_LED_ON;
}
 80085ac:	bf00      	nop
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40021000 	.word	0x40021000

080085b8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
    uint32_t pending = EXTI->PR;
 80085be:	4b3b      	ldr	r3, [pc, #236]	; (80086ac <EXTI15_10_IRQHandler+0xf4>)
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	607b      	str	r3, [r7, #4]

    if(pending & (1 << PIN_SAG)) {
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <EXTI15_10_IRQHandler+0x22>
        EXTI->PR |= 1 << PIN_SAG;		// clear pending flag, otherwise we'd get endless interrupts
 80085ce:	4b37      	ldr	r3, [pc, #220]	; (80086ac <EXTI15_10_IRQHandler+0xf4>)
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	4a36      	ldr	r2, [pc, #216]	; (80086ac <EXTI15_10_IRQHandler+0xf4>)
 80085d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085d8:	6153      	str	r3, [r2, #20]
        // handle pin SAG here
    }

    if(pending & (1 << PIN_ZX_IT)) {
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01f      	beq.n	8008624 <EXTI15_10_IRQHandler+0x6c>
        EXTI->PR |= 1 << PIN_ZX_IT;		// clear pending flag, otherwise we'd get endless interrupts
 80085e4:	4b31      	ldr	r3, [pc, #196]	; (80086ac <EXTI15_10_IRQHandler+0xf4>)
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	4a30      	ldr	r2, [pc, #192]	; (80086ac <EXTI15_10_IRQHandler+0xf4>)
 80085ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80085ee:	6153      	str	r3, [r2, #20]
        screen1_data.Vrms = ade_scale_vrms(ADE_ReadData(VRMS, 3));
 80085f0:	2103      	movs	r1, #3
 80085f2:	2017      	movs	r0, #23
 80085f4:	f7f8 fbb4 	bl	8000d60 <ADE_ReadData>
 80085f8:	4603      	mov	r3, r0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fa2c 	bl	8006a58 <ade_scale_vrms>
 8008600:	4603      	mov	r3, r0
 8008602:	4a2b      	ldr	r2, [pc, #172]	; (80086b0 <EXTI15_10_IRQHandler+0xf8>)
 8008604:	6013      	str	r3, [r2, #0]
        screen1_data.Irms = ade_scale_irms(ADE_ReadData(IRMS, 3));
 8008606:	2103      	movs	r1, #3
 8008608:	2016      	movs	r0, #22
 800860a:	f7f8 fba9 	bl	8000d60 <ADE_ReadData>
 800860e:	4603      	mov	r3, r0
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe fa35 	bl	8006a80 <ade_scale_irms>
 8008616:	4603      	mov	r3, r0
 8008618:	4a25      	ldr	r2, [pc, #148]	; (80086b0 <EXTI15_10_IRQHandler+0xf8>)
 800861a:	6093      	str	r3, [r2, #8]
        lcd_screen_1_data_update(screen1_data);
 800861c:	4b24      	ldr	r3, [pc, #144]	; (80086b0 <EXTI15_10_IRQHandler+0xf8>)
 800861e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008620:	f7ff f8d0 	bl	80077c4 <lcd_screen_1_data_update>
    }

    if(pending & (1 << PIN_IRQ_IT)) {
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d039      	beq.n	80086a2 <EXTI15_10_IRQHandler+0xea>
        EXTI->PR |= 1 << PIN_IRQ_IT;	// clear pending flag, otherwise we'd get endless interrupts
 800862e:	4b1f      	ldr	r3, [pc, #124]	; (80086ac <EXTI15_10_IRQHandler+0xf4>)
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <EXTI15_10_IRQHandler+0xf4>)
 8008634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008638:	6153      	str	r3, [r2, #20]
        // handle pin I here
        uint32_t rststatus = ADE_ReadData(RSTSTATUS, 2);
 800863a:	2102      	movs	r1, #2
 800863c:	200c      	movs	r0, #12
 800863e:	f7f8 fb8f 	bl	8000d60 <ADE_ReadData>
 8008642:	6038      	str	r0, [r7, #0]

        if(rststatus & (1 << IRQ_CYCEND)) {
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b00      	cmp	r3, #0
 800864c:	d029      	beq.n	80086a2 <EXTI15_10_IRQHandler+0xea>
        	screen2_data.ActivePower = ade_scale_power(ADE_ReadData(LAENERGY, 3));
 800864e:	2103      	movs	r1, #3
 8008650:	2004      	movs	r0, #4
 8008652:	f7f8 fb85 	bl	8000d60 <ADE_ReadData>
 8008656:	4603      	mov	r3, r0
 8008658:	4618      	mov	r0, r3
 800865a:	f7fe fa35 	bl	8006ac8 <ade_scale_power>
 800865e:	4603      	mov	r3, r0
 8008660:	4a14      	ldr	r2, [pc, #80]	; (80086b4 <EXTI15_10_IRQHandler+0xfc>)
 8008662:	6013      	str	r3, [r2, #0]
        	screen2_data.ReactivePower = ade_scale_reactive_power(ADE_ReadData(LVARENERGY, 3));
 8008664:	2103      	movs	r1, #3
 8008666:	2008      	movs	r0, #8
 8008668:	f7f8 fb7a 	bl	8000d60 <ADE_ReadData>
 800866c:	4603      	mov	r3, r0
 800866e:	4618      	mov	r0, r3
 8008670:	f7fe fa56 	bl	8006b20 <ade_scale_reactive_power>
 8008674:	4603      	mov	r3, r0
 8008676:	4a0f      	ldr	r2, [pc, #60]	; (80086b4 <EXTI15_10_IRQHandler+0xfc>)
 8008678:	6053      	str	r3, [r2, #4]
        	screen2_data.ApparantPower = ade_scale_apparant_power(ADE_ReadData(LVAENERGY, 3));
 800867a:	2103      	movs	r1, #3
 800867c:	2007      	movs	r0, #7
 800867e:	f7f8 fb6f 	bl	8000d60 <ADE_ReadData>
 8008682:	4603      	mov	r3, r0
 8008684:	4618      	mov	r0, r3
 8008686:	f7fe fa6f 	bl	8006b68 <ade_scale_apparant_power>
 800868a:	4603      	mov	r3, r0
 800868c:	4a09      	ldr	r2, [pc, #36]	; (80086b4 <EXTI15_10_IRQHandler+0xfc>)
 800868e:	6093      	str	r3, [r2, #8]
        	screen2_data.PowerFactor = ade_get_power_factor();
 8008690:	f7fe fa94 	bl	8006bbc <ade_get_power_factor>
 8008694:	4603      	mov	r3, r0
 8008696:	4a07      	ldr	r2, [pc, #28]	; (80086b4 <EXTI15_10_IRQHandler+0xfc>)
 8008698:	60d3      	str	r3, [r2, #12]
        	lcd_screen_2_data_update(screen2_data);
 800869a:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <EXTI15_10_IRQHandler+0xfc>)
 800869c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800869e:	f7ff f8a5 	bl	80077ec <lcd_screen_2_data_update>

        if(rststatus & (1 << IRQ_PKI)) {

		}
    }
}
 80086a2:	bf00      	nop
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	40013c00 	.word	0x40013c00
 80086b0:	20013888 	.word	0x20013888
 80086b4:	20013874 	.word	0x20013874

080086b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
	return 1;
 80086bc:	2301      	movs	r3, #1
}
 80086be:	4618      	mov	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <_kill>:

int _kill(int pid, int sig)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80086d2:	f000 f8c5 	bl	8008860 <__errno>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2216      	movs	r2, #22
 80086da:	601a      	str	r2, [r3, #0]
	return -1;
 80086dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <_exit>:

void _exit (int status)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80086f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff ffe7 	bl	80086c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80086fa:	e7fe      	b.n	80086fa <_exit+0x12>

080086fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]
 800870c:	e00a      	b.n	8008724 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800870e:	f3af 8000 	nop.w
 8008712:	4601      	mov	r1, r0
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	60ba      	str	r2, [r7, #8]
 800871a:	b2ca      	uxtb	r2, r1
 800871c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	3301      	adds	r3, #1
 8008722:	617b      	str	r3, [r7, #20]
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	429a      	cmp	r2, r3
 800872a:	dbf0      	blt.n	800870e <_read+0x12>
	}

return len;
 800872c:	687b      	ldr	r3, [r7, #4]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
	return -1;
 800873e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008742:	4618      	mov	r0, r3
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800875e:	605a      	str	r2, [r3, #4]
	return 0;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <_isatty>:

int _isatty(int file)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
	return 1;
 8008776:	2301      	movs	r3, #1
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
	return 0;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
	...

080087a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80087a8:	4a14      	ldr	r2, [pc, #80]	; (80087fc <_sbrk+0x5c>)
 80087aa:	4b15      	ldr	r3, [pc, #84]	; (8008800 <_sbrk+0x60>)
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80087b4:	4b13      	ldr	r3, [pc, #76]	; (8008804 <_sbrk+0x64>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d102      	bne.n	80087c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80087bc:	4b11      	ldr	r3, [pc, #68]	; (8008804 <_sbrk+0x64>)
 80087be:	4a12      	ldr	r2, [pc, #72]	; (8008808 <_sbrk+0x68>)
 80087c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80087c2:	4b10      	ldr	r3, [pc, #64]	; (8008804 <_sbrk+0x64>)
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4413      	add	r3, r2
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d207      	bcs.n	80087e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80087d0:	f000 f846 	bl	8008860 <__errno>
 80087d4:	4603      	mov	r3, r0
 80087d6:	220c      	movs	r2, #12
 80087d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80087da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087de:	e009      	b.n	80087f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80087e0:	4b08      	ldr	r3, [pc, #32]	; (8008804 <_sbrk+0x64>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <_sbrk+0x64>)
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4413      	add	r3, r2
 80087ee:	4a05      	ldr	r2, [pc, #20]	; (8008804 <_sbrk+0x64>)
 80087f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80087f2:	68fb      	ldr	r3, [r7, #12]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20020000 	.word	0x20020000
 8008800:	00000400 	.word	0x00000400
 8008804:	20013570 	.word	0x20013570
 8008808:	200138e8 	.word	0x200138e8

0800880c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800880c:	480d      	ldr	r0, [pc, #52]	; (8008844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800880e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008810:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008814:	480c      	ldr	r0, [pc, #48]	; (8008848 <LoopForever+0x6>)
  ldr r1, =_edata
 8008816:	490d      	ldr	r1, [pc, #52]	; (800884c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008818:	4a0d      	ldr	r2, [pc, #52]	; (8008850 <LoopForever+0xe>)
  movs r3, #0
 800881a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800881c:	e002      	b.n	8008824 <LoopCopyDataInit>

0800881e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800881e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008822:	3304      	adds	r3, #4

08008824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008828:	d3f9      	bcc.n	800881e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800882a:	4a0a      	ldr	r2, [pc, #40]	; (8008854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800882c:	4c0a      	ldr	r4, [pc, #40]	; (8008858 <LoopForever+0x16>)
  movs r3, #0
 800882e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008830:	e001      	b.n	8008836 <LoopFillZerobss>

08008832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008834:	3204      	adds	r2, #4

08008836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008838:	d3fb      	bcc.n	8008832 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800883a:	f000 f817 	bl	800886c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800883e:	f7ff fb2d 	bl	8007e9c <main>

08008842 <LoopForever>:

LoopForever:
    b LoopForever
 8008842:	e7fe      	b.n	8008842 <LoopForever>
  ldr   r0, =_estack
 8008844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800884c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8008850:	0800bf84 	.word	0x0800bf84
  ldr r2, =_sbss
 8008854:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8008858:	200138e8 	.word	0x200138e8

0800885c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800885c:	e7fe      	b.n	800885c <ADC_IRQHandler>
	...

08008860 <__errno>:
 8008860:	4b01      	ldr	r3, [pc, #4]	; (8008868 <__errno+0x8>)
 8008862:	6818      	ldr	r0, [r3, #0]
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	20000038 	.word	0x20000038

0800886c <__libc_init_array>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	4d0d      	ldr	r5, [pc, #52]	; (80088a4 <__libc_init_array+0x38>)
 8008870:	4c0d      	ldr	r4, [pc, #52]	; (80088a8 <__libc_init_array+0x3c>)
 8008872:	1b64      	subs	r4, r4, r5
 8008874:	10a4      	asrs	r4, r4, #2
 8008876:	2600      	movs	r6, #0
 8008878:	42a6      	cmp	r6, r4
 800887a:	d109      	bne.n	8008890 <__libc_init_array+0x24>
 800887c:	4d0b      	ldr	r5, [pc, #44]	; (80088ac <__libc_init_array+0x40>)
 800887e:	4c0c      	ldr	r4, [pc, #48]	; (80088b0 <__libc_init_array+0x44>)
 8008880:	f002 feb2 	bl	800b5e8 <_init>
 8008884:	1b64      	subs	r4, r4, r5
 8008886:	10a4      	asrs	r4, r4, #2
 8008888:	2600      	movs	r6, #0
 800888a:	42a6      	cmp	r6, r4
 800888c:	d105      	bne.n	800889a <__libc_init_array+0x2e>
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	f855 3b04 	ldr.w	r3, [r5], #4
 8008894:	4798      	blx	r3
 8008896:	3601      	adds	r6, #1
 8008898:	e7ee      	b.n	8008878 <__libc_init_array+0xc>
 800889a:	f855 3b04 	ldr.w	r3, [r5], #4
 800889e:	4798      	blx	r3
 80088a0:	3601      	adds	r6, #1
 80088a2:	e7f2      	b.n	800888a <__libc_init_array+0x1e>
 80088a4:	0800bf7c 	.word	0x0800bf7c
 80088a8:	0800bf7c 	.word	0x0800bf7c
 80088ac:	0800bf7c 	.word	0x0800bf7c
 80088b0:	0800bf80 	.word	0x0800bf80

080088b4 <memcmp>:
 80088b4:	b530      	push	{r4, r5, lr}
 80088b6:	3901      	subs	r1, #1
 80088b8:	2400      	movs	r4, #0
 80088ba:	42a2      	cmp	r2, r4
 80088bc:	d101      	bne.n	80088c2 <memcmp+0xe>
 80088be:	2000      	movs	r0, #0
 80088c0:	e005      	b.n	80088ce <memcmp+0x1a>
 80088c2:	5d03      	ldrb	r3, [r0, r4]
 80088c4:	3401      	adds	r4, #1
 80088c6:	5d0d      	ldrb	r5, [r1, r4]
 80088c8:	42ab      	cmp	r3, r5
 80088ca:	d0f6      	beq.n	80088ba <memcmp+0x6>
 80088cc:	1b58      	subs	r0, r3, r5
 80088ce:	bd30      	pop	{r4, r5, pc}

080088d0 <memcpy>:
 80088d0:	440a      	add	r2, r1
 80088d2:	4291      	cmp	r1, r2
 80088d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088d8:	d100      	bne.n	80088dc <memcpy+0xc>
 80088da:	4770      	bx	lr
 80088dc:	b510      	push	{r4, lr}
 80088de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088e6:	4291      	cmp	r1, r2
 80088e8:	d1f9      	bne.n	80088de <memcpy+0xe>
 80088ea:	bd10      	pop	{r4, pc}

080088ec <memset>:
 80088ec:	4402      	add	r2, r0
 80088ee:	4603      	mov	r3, r0
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d100      	bne.n	80088f6 <memset+0xa>
 80088f4:	4770      	bx	lr
 80088f6:	f803 1b01 	strb.w	r1, [r3], #1
 80088fa:	e7f9      	b.n	80088f0 <memset+0x4>

080088fc <__cvt>:
 80088fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008900:	b088      	sub	sp, #32
 8008902:	2b00      	cmp	r3, #0
 8008904:	461d      	mov	r5, r3
 8008906:	4614      	mov	r4, r2
 8008908:	bfbc      	itt	lt
 800890a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800890e:	4614      	movlt	r4, r2
 8008910:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008912:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008914:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008918:	bfb6      	itet	lt
 800891a:	461d      	movlt	r5, r3
 800891c:	2300      	movge	r3, #0
 800891e:	232d      	movlt	r3, #45	; 0x2d
 8008920:	7013      	strb	r3, [r2, #0]
 8008922:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008924:	f023 0820 	bic.w	r8, r3, #32
 8008928:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800892c:	d005      	beq.n	800893a <__cvt+0x3e>
 800892e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008932:	d100      	bne.n	8008936 <__cvt+0x3a>
 8008934:	3601      	adds	r6, #1
 8008936:	2302      	movs	r3, #2
 8008938:	e000      	b.n	800893c <__cvt+0x40>
 800893a:	2303      	movs	r3, #3
 800893c:	aa07      	add	r2, sp, #28
 800893e:	9204      	str	r2, [sp, #16]
 8008940:	aa06      	add	r2, sp, #24
 8008942:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008946:	e9cd 3600 	strd	r3, r6, [sp]
 800894a:	4622      	mov	r2, r4
 800894c:	462b      	mov	r3, r5
 800894e:	f000 fcef 	bl	8009330 <_dtoa_r>
 8008952:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008956:	4607      	mov	r7, r0
 8008958:	d102      	bne.n	8008960 <__cvt+0x64>
 800895a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800895c:	07db      	lsls	r3, r3, #31
 800895e:	d522      	bpl.n	80089a6 <__cvt+0xaa>
 8008960:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008964:	eb07 0906 	add.w	r9, r7, r6
 8008968:	d110      	bne.n	800898c <__cvt+0x90>
 800896a:	783b      	ldrb	r3, [r7, #0]
 800896c:	2b30      	cmp	r3, #48	; 0x30
 800896e:	d10a      	bne.n	8008986 <__cvt+0x8a>
 8008970:	2200      	movs	r2, #0
 8008972:	2300      	movs	r3, #0
 8008974:	4620      	mov	r0, r4
 8008976:	4629      	mov	r1, r5
 8008978:	f7f8 f906 	bl	8000b88 <__aeabi_dcmpeq>
 800897c:	b918      	cbnz	r0, 8008986 <__cvt+0x8a>
 800897e:	f1c6 0601 	rsb	r6, r6, #1
 8008982:	f8ca 6000 	str.w	r6, [sl]
 8008986:	f8da 3000 	ldr.w	r3, [sl]
 800898a:	4499      	add	r9, r3
 800898c:	2200      	movs	r2, #0
 800898e:	2300      	movs	r3, #0
 8008990:	4620      	mov	r0, r4
 8008992:	4629      	mov	r1, r5
 8008994:	f7f8 f8f8 	bl	8000b88 <__aeabi_dcmpeq>
 8008998:	b108      	cbz	r0, 800899e <__cvt+0xa2>
 800899a:	f8cd 901c 	str.w	r9, [sp, #28]
 800899e:	2230      	movs	r2, #48	; 0x30
 80089a0:	9b07      	ldr	r3, [sp, #28]
 80089a2:	454b      	cmp	r3, r9
 80089a4:	d307      	bcc.n	80089b6 <__cvt+0xba>
 80089a6:	9b07      	ldr	r3, [sp, #28]
 80089a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80089aa:	1bdb      	subs	r3, r3, r7
 80089ac:	4638      	mov	r0, r7
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	b008      	add	sp, #32
 80089b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b6:	1c59      	adds	r1, r3, #1
 80089b8:	9107      	str	r1, [sp, #28]
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	e7f0      	b.n	80089a0 <__cvt+0xa4>

080089be <__exponent>:
 80089be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089c0:	4603      	mov	r3, r0
 80089c2:	2900      	cmp	r1, #0
 80089c4:	bfb8      	it	lt
 80089c6:	4249      	neglt	r1, r1
 80089c8:	f803 2b02 	strb.w	r2, [r3], #2
 80089cc:	bfb4      	ite	lt
 80089ce:	222d      	movlt	r2, #45	; 0x2d
 80089d0:	222b      	movge	r2, #43	; 0x2b
 80089d2:	2909      	cmp	r1, #9
 80089d4:	7042      	strb	r2, [r0, #1]
 80089d6:	dd2a      	ble.n	8008a2e <__exponent+0x70>
 80089d8:	f10d 0407 	add.w	r4, sp, #7
 80089dc:	46a4      	mov	ip, r4
 80089de:	270a      	movs	r7, #10
 80089e0:	46a6      	mov	lr, r4
 80089e2:	460a      	mov	r2, r1
 80089e4:	fb91 f6f7 	sdiv	r6, r1, r7
 80089e8:	fb07 1516 	mls	r5, r7, r6, r1
 80089ec:	3530      	adds	r5, #48	; 0x30
 80089ee:	2a63      	cmp	r2, #99	; 0x63
 80089f0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80089f4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80089f8:	4631      	mov	r1, r6
 80089fa:	dcf1      	bgt.n	80089e0 <__exponent+0x22>
 80089fc:	3130      	adds	r1, #48	; 0x30
 80089fe:	f1ae 0502 	sub.w	r5, lr, #2
 8008a02:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008a06:	1c44      	adds	r4, r0, #1
 8008a08:	4629      	mov	r1, r5
 8008a0a:	4561      	cmp	r1, ip
 8008a0c:	d30a      	bcc.n	8008a24 <__exponent+0x66>
 8008a0e:	f10d 0209 	add.w	r2, sp, #9
 8008a12:	eba2 020e 	sub.w	r2, r2, lr
 8008a16:	4565      	cmp	r5, ip
 8008a18:	bf88      	it	hi
 8008a1a:	2200      	movhi	r2, #0
 8008a1c:	4413      	add	r3, r2
 8008a1e:	1a18      	subs	r0, r3, r0
 8008a20:	b003      	add	sp, #12
 8008a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a28:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008a2c:	e7ed      	b.n	8008a0a <__exponent+0x4c>
 8008a2e:	2330      	movs	r3, #48	; 0x30
 8008a30:	3130      	adds	r1, #48	; 0x30
 8008a32:	7083      	strb	r3, [r0, #2]
 8008a34:	70c1      	strb	r1, [r0, #3]
 8008a36:	1d03      	adds	r3, r0, #4
 8008a38:	e7f1      	b.n	8008a1e <__exponent+0x60>
	...

08008a3c <_printf_float>:
 8008a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a40:	ed2d 8b02 	vpush	{d8}
 8008a44:	b091      	sub	sp, #68	; 0x44
 8008a46:	460c      	mov	r4, r1
 8008a48:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008a4c:	4616      	mov	r6, r2
 8008a4e:	461f      	mov	r7, r3
 8008a50:	4605      	mov	r5, r0
 8008a52:	f001 fa59 	bl	8009f08 <_localeconv_r>
 8008a56:	f8d0 a000 	ldr.w	sl, [r0]
 8008a5a:	4650      	mov	r0, sl
 8008a5c:	f7f7 fc12 	bl	8000284 <strlen>
 8008a60:	2300      	movs	r3, #0
 8008a62:	930e      	str	r3, [sp, #56]	; 0x38
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	9309      	str	r3, [sp, #36]	; 0x24
 8008a68:	f8d8 3000 	ldr.w	r3, [r8]
 8008a6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008a70:	3307      	adds	r3, #7
 8008a72:	f023 0307 	bic.w	r3, r3, #7
 8008a76:	f103 0208 	add.w	r2, r3, #8
 8008a7a:	f8c8 2000 	str.w	r2, [r8]
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a90:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008a94:	ee08 0a10 	vmov	s16, r0
 8008a98:	4ba0      	ldr	r3, [pc, #640]	; (8008d1c <_printf_float+0x2e0>)
 8008a9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aa2:	f7f8 f8a3 	bl	8000bec <__aeabi_dcmpun>
 8008aa6:	bb88      	cbnz	r0, 8008b0c <_printf_float+0xd0>
 8008aa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008aac:	4b9b      	ldr	r3, [pc, #620]	; (8008d1c <_printf_float+0x2e0>)
 8008aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ab2:	f7f8 f87d 	bl	8000bb0 <__aeabi_dcmple>
 8008ab6:	bb48      	cbnz	r0, 8008b0c <_printf_float+0xd0>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2300      	movs	r3, #0
 8008abc:	4640      	mov	r0, r8
 8008abe:	4649      	mov	r1, r9
 8008ac0:	f7f8 f86c 	bl	8000b9c <__aeabi_dcmplt>
 8008ac4:	b110      	cbz	r0, 8008acc <_printf_float+0x90>
 8008ac6:	232d      	movs	r3, #45	; 0x2d
 8008ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008acc:	4b94      	ldr	r3, [pc, #592]	; (8008d20 <_printf_float+0x2e4>)
 8008ace:	4895      	ldr	r0, [pc, #596]	; (8008d24 <_printf_float+0x2e8>)
 8008ad0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ad4:	bf94      	ite	ls
 8008ad6:	4698      	movls	r8, r3
 8008ad8:	4680      	movhi	r8, r0
 8008ada:	2303      	movs	r3, #3
 8008adc:	6123      	str	r3, [r4, #16]
 8008ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae0:	f023 0304 	bic.w	r3, r3, #4
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	f04f 0900 	mov.w	r9, #0
 8008aea:	9700      	str	r7, [sp, #0]
 8008aec:	4633      	mov	r3, r6
 8008aee:	aa0f      	add	r2, sp, #60	; 0x3c
 8008af0:	4621      	mov	r1, r4
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 f9da 	bl	8008eac <_printf_common>
 8008af8:	3001      	adds	r0, #1
 8008afa:	f040 8092 	bne.w	8008c22 <_printf_float+0x1e6>
 8008afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b02:	b011      	add	sp, #68	; 0x44
 8008b04:	ecbd 8b02 	vpop	{d8}
 8008b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0c:	4642      	mov	r2, r8
 8008b0e:	464b      	mov	r3, r9
 8008b10:	4640      	mov	r0, r8
 8008b12:	4649      	mov	r1, r9
 8008b14:	f7f8 f86a 	bl	8000bec <__aeabi_dcmpun>
 8008b18:	b140      	cbz	r0, 8008b2c <_printf_float+0xf0>
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	bfbc      	itt	lt
 8008b20:	232d      	movlt	r3, #45	; 0x2d
 8008b22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008b26:	4880      	ldr	r0, [pc, #512]	; (8008d28 <_printf_float+0x2ec>)
 8008b28:	4b80      	ldr	r3, [pc, #512]	; (8008d2c <_printf_float+0x2f0>)
 8008b2a:	e7d1      	b.n	8008ad0 <_printf_float+0x94>
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 8008b34:	d143      	bne.n	8008bbe <_printf_float+0x182>
 8008b36:	2306      	movs	r3, #6
 8008b38:	6063      	str	r3, [r4, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3e:	9206      	str	r2, [sp, #24]
 8008b40:	aa0e      	add	r2, sp, #56	; 0x38
 8008b42:	e9cd b204 	strd	fp, r2, [sp, #16]
 8008b46:	aa0d      	add	r2, sp, #52	; 0x34
 8008b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b4c:	9203      	str	r2, [sp, #12]
 8008b4e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008b52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008b56:	6023      	str	r3, [r4, #0]
 8008b58:	6863      	ldr	r3, [r4, #4]
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	464b      	mov	r3, r9
 8008b60:	4628      	mov	r0, r5
 8008b62:	910a      	str	r1, [sp, #40]	; 0x28
 8008b64:	f7ff feca 	bl	80088fc <__cvt>
 8008b68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b6a:	2947      	cmp	r1, #71	; 0x47
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b70:	d108      	bne.n	8008b84 <_printf_float+0x148>
 8008b72:	1cc8      	adds	r0, r1, #3
 8008b74:	db02      	blt.n	8008b7c <_printf_float+0x140>
 8008b76:	6863      	ldr	r3, [r4, #4]
 8008b78:	4299      	cmp	r1, r3
 8008b7a:	dd40      	ble.n	8008bfe <_printf_float+0x1c2>
 8008b7c:	f1ab 0b02 	sub.w	fp, fp, #2
 8008b80:	fa5f fb8b 	uxtb.w	fp, fp
 8008b84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b88:	d81f      	bhi.n	8008bca <_printf_float+0x18e>
 8008b8a:	3901      	subs	r1, #1
 8008b8c:	465a      	mov	r2, fp
 8008b8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b92:	910d      	str	r1, [sp, #52]	; 0x34
 8008b94:	f7ff ff13 	bl	80089be <__exponent>
 8008b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b9a:	1813      	adds	r3, r2, r0
 8008b9c:	2a01      	cmp	r2, #1
 8008b9e:	4681      	mov	r9, r0
 8008ba0:	6123      	str	r3, [r4, #16]
 8008ba2:	dc02      	bgt.n	8008baa <_printf_float+0x16e>
 8008ba4:	6822      	ldr	r2, [r4, #0]
 8008ba6:	07d2      	lsls	r2, r2, #31
 8008ba8:	d501      	bpl.n	8008bae <_printf_float+0x172>
 8008baa:	3301      	adds	r3, #1
 8008bac:	6123      	str	r3, [r4, #16]
 8008bae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d099      	beq.n	8008aea <_printf_float+0xae>
 8008bb6:	232d      	movs	r3, #45	; 0x2d
 8008bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bbc:	e795      	b.n	8008aea <_printf_float+0xae>
 8008bbe:	2947      	cmp	r1, #71	; 0x47
 8008bc0:	d1bb      	bne.n	8008b3a <_printf_float+0xfe>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1b9      	bne.n	8008b3a <_printf_float+0xfe>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e7b6      	b.n	8008b38 <_printf_float+0xfc>
 8008bca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008bce:	d118      	bne.n	8008c02 <_printf_float+0x1c6>
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	6863      	ldr	r3, [r4, #4]
 8008bd4:	dd0b      	ble.n	8008bee <_printf_float+0x1b2>
 8008bd6:	6121      	str	r1, [r4, #16]
 8008bd8:	b913      	cbnz	r3, 8008be0 <_printf_float+0x1a4>
 8008bda:	6822      	ldr	r2, [r4, #0]
 8008bdc:	07d0      	lsls	r0, r2, #31
 8008bde:	d502      	bpl.n	8008be6 <_printf_float+0x1aa>
 8008be0:	3301      	adds	r3, #1
 8008be2:	440b      	add	r3, r1
 8008be4:	6123      	str	r3, [r4, #16]
 8008be6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008be8:	f04f 0900 	mov.w	r9, #0
 8008bec:	e7df      	b.n	8008bae <_printf_float+0x172>
 8008bee:	b913      	cbnz	r3, 8008bf6 <_printf_float+0x1ba>
 8008bf0:	6822      	ldr	r2, [r4, #0]
 8008bf2:	07d2      	lsls	r2, r2, #31
 8008bf4:	d501      	bpl.n	8008bfa <_printf_float+0x1be>
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	e7f4      	b.n	8008be4 <_printf_float+0x1a8>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e7f2      	b.n	8008be4 <_printf_float+0x1a8>
 8008bfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c04:	4299      	cmp	r1, r3
 8008c06:	db05      	blt.n	8008c14 <_printf_float+0x1d8>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	6121      	str	r1, [r4, #16]
 8008c0c:	07d8      	lsls	r0, r3, #31
 8008c0e:	d5ea      	bpl.n	8008be6 <_printf_float+0x1aa>
 8008c10:	1c4b      	adds	r3, r1, #1
 8008c12:	e7e7      	b.n	8008be4 <_printf_float+0x1a8>
 8008c14:	2900      	cmp	r1, #0
 8008c16:	bfd4      	ite	le
 8008c18:	f1c1 0202 	rsble	r2, r1, #2
 8008c1c:	2201      	movgt	r2, #1
 8008c1e:	4413      	add	r3, r2
 8008c20:	e7e0      	b.n	8008be4 <_printf_float+0x1a8>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	055a      	lsls	r2, r3, #21
 8008c26:	d407      	bmi.n	8008c38 <_printf_float+0x1fc>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	4642      	mov	r2, r8
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4628      	mov	r0, r5
 8008c30:	47b8      	blx	r7
 8008c32:	3001      	adds	r0, #1
 8008c34:	d12c      	bne.n	8008c90 <_printf_float+0x254>
 8008c36:	e762      	b.n	8008afe <_printf_float+0xc2>
 8008c38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c3c:	f240 80e0 	bls.w	8008e00 <_printf_float+0x3c4>
 8008c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c44:	2200      	movs	r2, #0
 8008c46:	2300      	movs	r3, #0
 8008c48:	f7f7 ff9e 	bl	8000b88 <__aeabi_dcmpeq>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d034      	beq.n	8008cba <_printf_float+0x27e>
 8008c50:	4a37      	ldr	r2, [pc, #220]	; (8008d30 <_printf_float+0x2f4>)
 8008c52:	2301      	movs	r3, #1
 8008c54:	4631      	mov	r1, r6
 8008c56:	4628      	mov	r0, r5
 8008c58:	47b8      	blx	r7
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	f43f af4f 	beq.w	8008afe <_printf_float+0xc2>
 8008c60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c64:	429a      	cmp	r2, r3
 8008c66:	db02      	blt.n	8008c6e <_printf_float+0x232>
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	07d8      	lsls	r0, r3, #31
 8008c6c:	d510      	bpl.n	8008c90 <_printf_float+0x254>
 8008c6e:	ee18 3a10 	vmov	r3, s16
 8008c72:	4652      	mov	r2, sl
 8008c74:	4631      	mov	r1, r6
 8008c76:	4628      	mov	r0, r5
 8008c78:	47b8      	blx	r7
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	f43f af3f 	beq.w	8008afe <_printf_float+0xc2>
 8008c80:	f04f 0800 	mov.w	r8, #0
 8008c84:	f104 091a 	add.w	r9, r4, #26
 8008c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	4543      	cmp	r3, r8
 8008c8e:	dc09      	bgt.n	8008ca4 <_printf_float+0x268>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	079b      	lsls	r3, r3, #30
 8008c94:	f100 8105 	bmi.w	8008ea2 <_printf_float+0x466>
 8008c98:	68e0      	ldr	r0, [r4, #12]
 8008c9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c9c:	4298      	cmp	r0, r3
 8008c9e:	bfb8      	it	lt
 8008ca0:	4618      	movlt	r0, r3
 8008ca2:	e72e      	b.n	8008b02 <_printf_float+0xc6>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	464a      	mov	r2, r9
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4628      	mov	r0, r5
 8008cac:	47b8      	blx	r7
 8008cae:	3001      	adds	r0, #1
 8008cb0:	f43f af25 	beq.w	8008afe <_printf_float+0xc2>
 8008cb4:	f108 0801 	add.w	r8, r8, #1
 8008cb8:	e7e6      	b.n	8008c88 <_printf_float+0x24c>
 8008cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dc39      	bgt.n	8008d34 <_printf_float+0x2f8>
 8008cc0:	4a1b      	ldr	r2, [pc, #108]	; (8008d30 <_printf_float+0x2f4>)
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	47b8      	blx	r7
 8008cca:	3001      	adds	r0, #1
 8008ccc:	f43f af17 	beq.w	8008afe <_printf_float+0xc2>
 8008cd0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	d102      	bne.n	8008cde <_printf_float+0x2a2>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	07d9      	lsls	r1, r3, #31
 8008cdc:	d5d8      	bpl.n	8008c90 <_printf_float+0x254>
 8008cde:	ee18 3a10 	vmov	r3, s16
 8008ce2:	4652      	mov	r2, sl
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	47b8      	blx	r7
 8008cea:	3001      	adds	r0, #1
 8008cec:	f43f af07 	beq.w	8008afe <_printf_float+0xc2>
 8008cf0:	f04f 0900 	mov.w	r9, #0
 8008cf4:	f104 0a1a 	add.w	sl, r4, #26
 8008cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cfa:	425b      	negs	r3, r3
 8008cfc:	454b      	cmp	r3, r9
 8008cfe:	dc01      	bgt.n	8008d04 <_printf_float+0x2c8>
 8008d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d02:	e792      	b.n	8008c2a <_printf_float+0x1ee>
 8008d04:	2301      	movs	r3, #1
 8008d06:	4652      	mov	r2, sl
 8008d08:	4631      	mov	r1, r6
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	47b8      	blx	r7
 8008d0e:	3001      	adds	r0, #1
 8008d10:	f43f aef5 	beq.w	8008afe <_printf_float+0xc2>
 8008d14:	f109 0901 	add.w	r9, r9, #1
 8008d18:	e7ee      	b.n	8008cf8 <_printf_float+0x2bc>
 8008d1a:	bf00      	nop
 8008d1c:	7fefffff 	.word	0x7fefffff
 8008d20:	0800bb9c 	.word	0x0800bb9c
 8008d24:	0800bba0 	.word	0x0800bba0
 8008d28:	0800bba8 	.word	0x0800bba8
 8008d2c:	0800bba4 	.word	0x0800bba4
 8008d30:	0800bbac 	.word	0x0800bbac
 8008d34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	bfa8      	it	ge
 8008d3c:	461a      	movge	r2, r3
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	4691      	mov	r9, r2
 8008d42:	dc37      	bgt.n	8008db4 <_printf_float+0x378>
 8008d44:	f04f 0b00 	mov.w	fp, #0
 8008d48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d4c:	f104 021a 	add.w	r2, r4, #26
 8008d50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d52:	9309      	str	r3, [sp, #36]	; 0x24
 8008d54:	eba3 0309 	sub.w	r3, r3, r9
 8008d58:	455b      	cmp	r3, fp
 8008d5a:	dc33      	bgt.n	8008dc4 <_printf_float+0x388>
 8008d5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d60:	429a      	cmp	r2, r3
 8008d62:	db3b      	blt.n	8008ddc <_printf_float+0x3a0>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	07da      	lsls	r2, r3, #31
 8008d68:	d438      	bmi.n	8008ddc <_printf_float+0x3a0>
 8008d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	eba2 0901 	sub.w	r9, r2, r1
 8008d76:	4599      	cmp	r9, r3
 8008d78:	bfa8      	it	ge
 8008d7a:	4699      	movge	r9, r3
 8008d7c:	f1b9 0f00 	cmp.w	r9, #0
 8008d80:	dc35      	bgt.n	8008dee <_printf_float+0x3b2>
 8008d82:	f04f 0800 	mov.w	r8, #0
 8008d86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d8a:	f104 0a1a 	add.w	sl, r4, #26
 8008d8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	eba3 0309 	sub.w	r3, r3, r9
 8008d98:	4543      	cmp	r3, r8
 8008d9a:	f77f af79 	ble.w	8008c90 <_printf_float+0x254>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	4652      	mov	r2, sl
 8008da2:	4631      	mov	r1, r6
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b8      	blx	r7
 8008da8:	3001      	adds	r0, #1
 8008daa:	f43f aea8 	beq.w	8008afe <_printf_float+0xc2>
 8008dae:	f108 0801 	add.w	r8, r8, #1
 8008db2:	e7ec      	b.n	8008d8e <_printf_float+0x352>
 8008db4:	4613      	mov	r3, r2
 8008db6:	4631      	mov	r1, r6
 8008db8:	4642      	mov	r2, r8
 8008dba:	4628      	mov	r0, r5
 8008dbc:	47b8      	blx	r7
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d1c0      	bne.n	8008d44 <_printf_float+0x308>
 8008dc2:	e69c      	b.n	8008afe <_printf_float+0xc2>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4628      	mov	r0, r5
 8008dca:	9209      	str	r2, [sp, #36]	; 0x24
 8008dcc:	47b8      	blx	r7
 8008dce:	3001      	adds	r0, #1
 8008dd0:	f43f ae95 	beq.w	8008afe <_printf_float+0xc2>
 8008dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd6:	f10b 0b01 	add.w	fp, fp, #1
 8008dda:	e7b9      	b.n	8008d50 <_printf_float+0x314>
 8008ddc:	ee18 3a10 	vmov	r3, s16
 8008de0:	4652      	mov	r2, sl
 8008de2:	4631      	mov	r1, r6
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b8      	blx	r7
 8008de8:	3001      	adds	r0, #1
 8008dea:	d1be      	bne.n	8008d6a <_printf_float+0x32e>
 8008dec:	e687      	b.n	8008afe <_printf_float+0xc2>
 8008dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008df0:	464b      	mov	r3, r9
 8008df2:	4442      	add	r2, r8
 8008df4:	4631      	mov	r1, r6
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b8      	blx	r7
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d1c1      	bne.n	8008d82 <_printf_float+0x346>
 8008dfe:	e67e      	b.n	8008afe <_printf_float+0xc2>
 8008e00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e02:	2a01      	cmp	r2, #1
 8008e04:	dc01      	bgt.n	8008e0a <_printf_float+0x3ce>
 8008e06:	07db      	lsls	r3, r3, #31
 8008e08:	d538      	bpl.n	8008e7c <_printf_float+0x440>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4642      	mov	r2, r8
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4628      	mov	r0, r5
 8008e12:	47b8      	blx	r7
 8008e14:	3001      	adds	r0, #1
 8008e16:	f43f ae72 	beq.w	8008afe <_printf_float+0xc2>
 8008e1a:	ee18 3a10 	vmov	r3, s16
 8008e1e:	4652      	mov	r2, sl
 8008e20:	4631      	mov	r1, r6
 8008e22:	4628      	mov	r0, r5
 8008e24:	47b8      	blx	r7
 8008e26:	3001      	adds	r0, #1
 8008e28:	f43f ae69 	beq.w	8008afe <_printf_float+0xc2>
 8008e2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e30:	2200      	movs	r2, #0
 8008e32:	2300      	movs	r3, #0
 8008e34:	f7f7 fea8 	bl	8000b88 <__aeabi_dcmpeq>
 8008e38:	b9d8      	cbnz	r0, 8008e72 <_printf_float+0x436>
 8008e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e3c:	f108 0201 	add.w	r2, r8, #1
 8008e40:	3b01      	subs	r3, #1
 8008e42:	4631      	mov	r1, r6
 8008e44:	4628      	mov	r0, r5
 8008e46:	47b8      	blx	r7
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d10e      	bne.n	8008e6a <_printf_float+0x42e>
 8008e4c:	e657      	b.n	8008afe <_printf_float+0xc2>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4652      	mov	r2, sl
 8008e52:	4631      	mov	r1, r6
 8008e54:	4628      	mov	r0, r5
 8008e56:	47b8      	blx	r7
 8008e58:	3001      	adds	r0, #1
 8008e5a:	f43f ae50 	beq.w	8008afe <_printf_float+0xc2>
 8008e5e:	f108 0801 	add.w	r8, r8, #1
 8008e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e64:	3b01      	subs	r3, #1
 8008e66:	4543      	cmp	r3, r8
 8008e68:	dcf1      	bgt.n	8008e4e <_printf_float+0x412>
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008e70:	e6dc      	b.n	8008c2c <_printf_float+0x1f0>
 8008e72:	f04f 0800 	mov.w	r8, #0
 8008e76:	f104 0a1a 	add.w	sl, r4, #26
 8008e7a:	e7f2      	b.n	8008e62 <_printf_float+0x426>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	4642      	mov	r2, r8
 8008e80:	e7df      	b.n	8008e42 <_printf_float+0x406>
 8008e82:	2301      	movs	r3, #1
 8008e84:	464a      	mov	r2, r9
 8008e86:	4631      	mov	r1, r6
 8008e88:	4628      	mov	r0, r5
 8008e8a:	47b8      	blx	r7
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	f43f ae36 	beq.w	8008afe <_printf_float+0xc2>
 8008e92:	f108 0801 	add.w	r8, r8, #1
 8008e96:	68e3      	ldr	r3, [r4, #12]
 8008e98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008e9a:	1a5b      	subs	r3, r3, r1
 8008e9c:	4543      	cmp	r3, r8
 8008e9e:	dcf0      	bgt.n	8008e82 <_printf_float+0x446>
 8008ea0:	e6fa      	b.n	8008c98 <_printf_float+0x25c>
 8008ea2:	f04f 0800 	mov.w	r8, #0
 8008ea6:	f104 0919 	add.w	r9, r4, #25
 8008eaa:	e7f4      	b.n	8008e96 <_printf_float+0x45a>

08008eac <_printf_common>:
 8008eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	4699      	mov	r9, r3
 8008eb4:	688a      	ldr	r2, [r1, #8]
 8008eb6:	690b      	ldr	r3, [r1, #16]
 8008eb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	bfb8      	it	lt
 8008ec0:	4613      	movlt	r3, r2
 8008ec2:	6033      	str	r3, [r6, #0]
 8008ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ec8:	4607      	mov	r7, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	b10a      	cbz	r2, 8008ed2 <_printf_common+0x26>
 8008ece:	3301      	adds	r3, #1
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	0699      	lsls	r1, r3, #26
 8008ed6:	bf42      	ittt	mi
 8008ed8:	6833      	ldrmi	r3, [r6, #0]
 8008eda:	3302      	addmi	r3, #2
 8008edc:	6033      	strmi	r3, [r6, #0]
 8008ede:	6825      	ldr	r5, [r4, #0]
 8008ee0:	f015 0506 	ands.w	r5, r5, #6
 8008ee4:	d106      	bne.n	8008ef4 <_printf_common+0x48>
 8008ee6:	f104 0a19 	add.w	sl, r4, #25
 8008eea:	68e3      	ldr	r3, [r4, #12]
 8008eec:	6832      	ldr	r2, [r6, #0]
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	dc26      	bgt.n	8008f42 <_printf_common+0x96>
 8008ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ef8:	1e13      	subs	r3, r2, #0
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	bf18      	it	ne
 8008efe:	2301      	movne	r3, #1
 8008f00:	0692      	lsls	r2, r2, #26
 8008f02:	d42b      	bmi.n	8008f5c <_printf_common+0xb0>
 8008f04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	47c0      	blx	r8
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d01e      	beq.n	8008f50 <_printf_common+0xa4>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	68e5      	ldr	r5, [r4, #12]
 8008f16:	6832      	ldr	r2, [r6, #0]
 8008f18:	f003 0306 	and.w	r3, r3, #6
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	bf08      	it	eq
 8008f20:	1aad      	subeq	r5, r5, r2
 8008f22:	68a3      	ldr	r3, [r4, #8]
 8008f24:	6922      	ldr	r2, [r4, #16]
 8008f26:	bf0c      	ite	eq
 8008f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f2c:	2500      	movne	r5, #0
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	bfc4      	itt	gt
 8008f32:	1a9b      	subgt	r3, r3, r2
 8008f34:	18ed      	addgt	r5, r5, r3
 8008f36:	2600      	movs	r6, #0
 8008f38:	341a      	adds	r4, #26
 8008f3a:	42b5      	cmp	r5, r6
 8008f3c:	d11a      	bne.n	8008f74 <_printf_common+0xc8>
 8008f3e:	2000      	movs	r0, #0
 8008f40:	e008      	b.n	8008f54 <_printf_common+0xa8>
 8008f42:	2301      	movs	r3, #1
 8008f44:	4652      	mov	r2, sl
 8008f46:	4649      	mov	r1, r9
 8008f48:	4638      	mov	r0, r7
 8008f4a:	47c0      	blx	r8
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d103      	bne.n	8008f58 <_printf_common+0xac>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f58:	3501      	adds	r5, #1
 8008f5a:	e7c6      	b.n	8008eea <_printf_common+0x3e>
 8008f5c:	18e1      	adds	r1, r4, r3
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	2030      	movs	r0, #48	; 0x30
 8008f62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f66:	4422      	add	r2, r4
 8008f68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f70:	3302      	adds	r3, #2
 8008f72:	e7c7      	b.n	8008f04 <_printf_common+0x58>
 8008f74:	2301      	movs	r3, #1
 8008f76:	4622      	mov	r2, r4
 8008f78:	4649      	mov	r1, r9
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	47c0      	blx	r8
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d0e6      	beq.n	8008f50 <_printf_common+0xa4>
 8008f82:	3601      	adds	r6, #1
 8008f84:	e7d9      	b.n	8008f3a <_printf_common+0x8e>
	...

08008f88 <_printf_i>:
 8008f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	4691      	mov	r9, r2
 8008f90:	7e27      	ldrb	r7, [r4, #24]
 8008f92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f94:	2f78      	cmp	r7, #120	; 0x78
 8008f96:	4680      	mov	r8, r0
 8008f98:	469a      	mov	sl, r3
 8008f9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f9e:	d807      	bhi.n	8008fb0 <_printf_i+0x28>
 8008fa0:	2f62      	cmp	r7, #98	; 0x62
 8008fa2:	d80a      	bhi.n	8008fba <_printf_i+0x32>
 8008fa4:	2f00      	cmp	r7, #0
 8008fa6:	f000 80d8 	beq.w	800915a <_printf_i+0x1d2>
 8008faa:	2f58      	cmp	r7, #88	; 0x58
 8008fac:	f000 80a3 	beq.w	80090f6 <_printf_i+0x16e>
 8008fb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fb8:	e03a      	b.n	8009030 <_printf_i+0xa8>
 8008fba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fbe:	2b15      	cmp	r3, #21
 8008fc0:	d8f6      	bhi.n	8008fb0 <_printf_i+0x28>
 8008fc2:	a001      	add	r0, pc, #4	; (adr r0, 8008fc8 <_printf_i+0x40>)
 8008fc4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008fc8:	08009021 	.word	0x08009021
 8008fcc:	08009035 	.word	0x08009035
 8008fd0:	08008fb1 	.word	0x08008fb1
 8008fd4:	08008fb1 	.word	0x08008fb1
 8008fd8:	08008fb1 	.word	0x08008fb1
 8008fdc:	08008fb1 	.word	0x08008fb1
 8008fe0:	08009035 	.word	0x08009035
 8008fe4:	08008fb1 	.word	0x08008fb1
 8008fe8:	08008fb1 	.word	0x08008fb1
 8008fec:	08008fb1 	.word	0x08008fb1
 8008ff0:	08008fb1 	.word	0x08008fb1
 8008ff4:	08009141 	.word	0x08009141
 8008ff8:	08009065 	.word	0x08009065
 8008ffc:	08009123 	.word	0x08009123
 8009000:	08008fb1 	.word	0x08008fb1
 8009004:	08008fb1 	.word	0x08008fb1
 8009008:	08009163 	.word	0x08009163
 800900c:	08008fb1 	.word	0x08008fb1
 8009010:	08009065 	.word	0x08009065
 8009014:	08008fb1 	.word	0x08008fb1
 8009018:	08008fb1 	.word	0x08008fb1
 800901c:	0800912b 	.word	0x0800912b
 8009020:	680b      	ldr	r3, [r1, #0]
 8009022:	1d1a      	adds	r2, r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	600a      	str	r2, [r1, #0]
 8009028:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800902c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009030:	2301      	movs	r3, #1
 8009032:	e0a3      	b.n	800917c <_printf_i+0x1f4>
 8009034:	6825      	ldr	r5, [r4, #0]
 8009036:	6808      	ldr	r0, [r1, #0]
 8009038:	062e      	lsls	r6, r5, #24
 800903a:	f100 0304 	add.w	r3, r0, #4
 800903e:	d50a      	bpl.n	8009056 <_printf_i+0xce>
 8009040:	6805      	ldr	r5, [r0, #0]
 8009042:	600b      	str	r3, [r1, #0]
 8009044:	2d00      	cmp	r5, #0
 8009046:	da03      	bge.n	8009050 <_printf_i+0xc8>
 8009048:	232d      	movs	r3, #45	; 0x2d
 800904a:	426d      	negs	r5, r5
 800904c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009050:	485e      	ldr	r0, [pc, #376]	; (80091cc <_printf_i+0x244>)
 8009052:	230a      	movs	r3, #10
 8009054:	e019      	b.n	800908a <_printf_i+0x102>
 8009056:	f015 0f40 	tst.w	r5, #64	; 0x40
 800905a:	6805      	ldr	r5, [r0, #0]
 800905c:	600b      	str	r3, [r1, #0]
 800905e:	bf18      	it	ne
 8009060:	b22d      	sxthne	r5, r5
 8009062:	e7ef      	b.n	8009044 <_printf_i+0xbc>
 8009064:	680b      	ldr	r3, [r1, #0]
 8009066:	6825      	ldr	r5, [r4, #0]
 8009068:	1d18      	adds	r0, r3, #4
 800906a:	6008      	str	r0, [r1, #0]
 800906c:	0628      	lsls	r0, r5, #24
 800906e:	d501      	bpl.n	8009074 <_printf_i+0xec>
 8009070:	681d      	ldr	r5, [r3, #0]
 8009072:	e002      	b.n	800907a <_printf_i+0xf2>
 8009074:	0669      	lsls	r1, r5, #25
 8009076:	d5fb      	bpl.n	8009070 <_printf_i+0xe8>
 8009078:	881d      	ldrh	r5, [r3, #0]
 800907a:	4854      	ldr	r0, [pc, #336]	; (80091cc <_printf_i+0x244>)
 800907c:	2f6f      	cmp	r7, #111	; 0x6f
 800907e:	bf0c      	ite	eq
 8009080:	2308      	moveq	r3, #8
 8009082:	230a      	movne	r3, #10
 8009084:	2100      	movs	r1, #0
 8009086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800908a:	6866      	ldr	r6, [r4, #4]
 800908c:	60a6      	str	r6, [r4, #8]
 800908e:	2e00      	cmp	r6, #0
 8009090:	bfa2      	ittt	ge
 8009092:	6821      	ldrge	r1, [r4, #0]
 8009094:	f021 0104 	bicge.w	r1, r1, #4
 8009098:	6021      	strge	r1, [r4, #0]
 800909a:	b90d      	cbnz	r5, 80090a0 <_printf_i+0x118>
 800909c:	2e00      	cmp	r6, #0
 800909e:	d04d      	beq.n	800913c <_printf_i+0x1b4>
 80090a0:	4616      	mov	r6, r2
 80090a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80090a6:	fb03 5711 	mls	r7, r3, r1, r5
 80090aa:	5dc7      	ldrb	r7, [r0, r7]
 80090ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090b0:	462f      	mov	r7, r5
 80090b2:	42bb      	cmp	r3, r7
 80090b4:	460d      	mov	r5, r1
 80090b6:	d9f4      	bls.n	80090a2 <_printf_i+0x11a>
 80090b8:	2b08      	cmp	r3, #8
 80090ba:	d10b      	bne.n	80090d4 <_printf_i+0x14c>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	07df      	lsls	r7, r3, #31
 80090c0:	d508      	bpl.n	80090d4 <_printf_i+0x14c>
 80090c2:	6923      	ldr	r3, [r4, #16]
 80090c4:	6861      	ldr	r1, [r4, #4]
 80090c6:	4299      	cmp	r1, r3
 80090c8:	bfde      	ittt	le
 80090ca:	2330      	movle	r3, #48	; 0x30
 80090cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090d0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80090d4:	1b92      	subs	r2, r2, r6
 80090d6:	6122      	str	r2, [r4, #16]
 80090d8:	f8cd a000 	str.w	sl, [sp]
 80090dc:	464b      	mov	r3, r9
 80090de:	aa03      	add	r2, sp, #12
 80090e0:	4621      	mov	r1, r4
 80090e2:	4640      	mov	r0, r8
 80090e4:	f7ff fee2 	bl	8008eac <_printf_common>
 80090e8:	3001      	adds	r0, #1
 80090ea:	d14c      	bne.n	8009186 <_printf_i+0x1fe>
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090f0:	b004      	add	sp, #16
 80090f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f6:	4835      	ldr	r0, [pc, #212]	; (80091cc <_printf_i+0x244>)
 80090f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	680e      	ldr	r6, [r1, #0]
 8009100:	061f      	lsls	r7, r3, #24
 8009102:	f856 5b04 	ldr.w	r5, [r6], #4
 8009106:	600e      	str	r6, [r1, #0]
 8009108:	d514      	bpl.n	8009134 <_printf_i+0x1ac>
 800910a:	07d9      	lsls	r1, r3, #31
 800910c:	bf44      	itt	mi
 800910e:	f043 0320 	orrmi.w	r3, r3, #32
 8009112:	6023      	strmi	r3, [r4, #0]
 8009114:	b91d      	cbnz	r5, 800911e <_printf_i+0x196>
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	f023 0320 	bic.w	r3, r3, #32
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	2310      	movs	r3, #16
 8009120:	e7b0      	b.n	8009084 <_printf_i+0xfc>
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	f043 0320 	orr.w	r3, r3, #32
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	2378      	movs	r3, #120	; 0x78
 800912c:	4828      	ldr	r0, [pc, #160]	; (80091d0 <_printf_i+0x248>)
 800912e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009132:	e7e3      	b.n	80090fc <_printf_i+0x174>
 8009134:	065e      	lsls	r6, r3, #25
 8009136:	bf48      	it	mi
 8009138:	b2ad      	uxthmi	r5, r5
 800913a:	e7e6      	b.n	800910a <_printf_i+0x182>
 800913c:	4616      	mov	r6, r2
 800913e:	e7bb      	b.n	80090b8 <_printf_i+0x130>
 8009140:	680b      	ldr	r3, [r1, #0]
 8009142:	6826      	ldr	r6, [r4, #0]
 8009144:	6960      	ldr	r0, [r4, #20]
 8009146:	1d1d      	adds	r5, r3, #4
 8009148:	600d      	str	r5, [r1, #0]
 800914a:	0635      	lsls	r5, r6, #24
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	d501      	bpl.n	8009154 <_printf_i+0x1cc>
 8009150:	6018      	str	r0, [r3, #0]
 8009152:	e002      	b.n	800915a <_printf_i+0x1d2>
 8009154:	0671      	lsls	r1, r6, #25
 8009156:	d5fb      	bpl.n	8009150 <_printf_i+0x1c8>
 8009158:	8018      	strh	r0, [r3, #0]
 800915a:	2300      	movs	r3, #0
 800915c:	6123      	str	r3, [r4, #16]
 800915e:	4616      	mov	r6, r2
 8009160:	e7ba      	b.n	80090d8 <_printf_i+0x150>
 8009162:	680b      	ldr	r3, [r1, #0]
 8009164:	1d1a      	adds	r2, r3, #4
 8009166:	600a      	str	r2, [r1, #0]
 8009168:	681e      	ldr	r6, [r3, #0]
 800916a:	6862      	ldr	r2, [r4, #4]
 800916c:	2100      	movs	r1, #0
 800916e:	4630      	mov	r0, r6
 8009170:	f7f7 f896 	bl	80002a0 <memchr>
 8009174:	b108      	cbz	r0, 800917a <_printf_i+0x1f2>
 8009176:	1b80      	subs	r0, r0, r6
 8009178:	6060      	str	r0, [r4, #4]
 800917a:	6863      	ldr	r3, [r4, #4]
 800917c:	6123      	str	r3, [r4, #16]
 800917e:	2300      	movs	r3, #0
 8009180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009184:	e7a8      	b.n	80090d8 <_printf_i+0x150>
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	4632      	mov	r2, r6
 800918a:	4649      	mov	r1, r9
 800918c:	4640      	mov	r0, r8
 800918e:	47d0      	blx	sl
 8009190:	3001      	adds	r0, #1
 8009192:	d0ab      	beq.n	80090ec <_printf_i+0x164>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	079b      	lsls	r3, r3, #30
 8009198:	d413      	bmi.n	80091c2 <_printf_i+0x23a>
 800919a:	68e0      	ldr	r0, [r4, #12]
 800919c:	9b03      	ldr	r3, [sp, #12]
 800919e:	4298      	cmp	r0, r3
 80091a0:	bfb8      	it	lt
 80091a2:	4618      	movlt	r0, r3
 80091a4:	e7a4      	b.n	80090f0 <_printf_i+0x168>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4632      	mov	r2, r6
 80091aa:	4649      	mov	r1, r9
 80091ac:	4640      	mov	r0, r8
 80091ae:	47d0      	blx	sl
 80091b0:	3001      	adds	r0, #1
 80091b2:	d09b      	beq.n	80090ec <_printf_i+0x164>
 80091b4:	3501      	adds	r5, #1
 80091b6:	68e3      	ldr	r3, [r4, #12]
 80091b8:	9903      	ldr	r1, [sp, #12]
 80091ba:	1a5b      	subs	r3, r3, r1
 80091bc:	42ab      	cmp	r3, r5
 80091be:	dcf2      	bgt.n	80091a6 <_printf_i+0x21e>
 80091c0:	e7eb      	b.n	800919a <_printf_i+0x212>
 80091c2:	2500      	movs	r5, #0
 80091c4:	f104 0619 	add.w	r6, r4, #25
 80091c8:	e7f5      	b.n	80091b6 <_printf_i+0x22e>
 80091ca:	bf00      	nop
 80091cc:	0800bbae 	.word	0x0800bbae
 80091d0:	0800bbbf 	.word	0x0800bbbf

080091d4 <siprintf>:
 80091d4:	b40e      	push	{r1, r2, r3}
 80091d6:	b500      	push	{lr}
 80091d8:	b09c      	sub	sp, #112	; 0x70
 80091da:	ab1d      	add	r3, sp, #116	; 0x74
 80091dc:	9002      	str	r0, [sp, #8]
 80091de:	9006      	str	r0, [sp, #24]
 80091e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091e4:	4809      	ldr	r0, [pc, #36]	; (800920c <siprintf+0x38>)
 80091e6:	9107      	str	r1, [sp, #28]
 80091e8:	9104      	str	r1, [sp, #16]
 80091ea:	4909      	ldr	r1, [pc, #36]	; (8009210 <siprintf+0x3c>)
 80091ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f0:	9105      	str	r1, [sp, #20]
 80091f2:	6800      	ldr	r0, [r0, #0]
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	a902      	add	r1, sp, #8
 80091f8:	f001 fb24 	bl	800a844 <_svfiprintf_r>
 80091fc:	9b02      	ldr	r3, [sp, #8]
 80091fe:	2200      	movs	r2, #0
 8009200:	701a      	strb	r2, [r3, #0]
 8009202:	b01c      	add	sp, #112	; 0x70
 8009204:	f85d eb04 	ldr.w	lr, [sp], #4
 8009208:	b003      	add	sp, #12
 800920a:	4770      	bx	lr
 800920c:	20000038 	.word	0x20000038
 8009210:	ffff0208 	.word	0xffff0208

08009214 <quorem>:
 8009214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	6903      	ldr	r3, [r0, #16]
 800921a:	690c      	ldr	r4, [r1, #16]
 800921c:	42a3      	cmp	r3, r4
 800921e:	4607      	mov	r7, r0
 8009220:	f2c0 8081 	blt.w	8009326 <quorem+0x112>
 8009224:	3c01      	subs	r4, #1
 8009226:	f101 0814 	add.w	r8, r1, #20
 800922a:	f100 0514 	add.w	r5, r0, #20
 800922e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009238:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800923c:	3301      	adds	r3, #1
 800923e:	429a      	cmp	r2, r3
 8009240:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009244:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009248:	fbb2 f6f3 	udiv	r6, r2, r3
 800924c:	d331      	bcc.n	80092b2 <quorem+0x9e>
 800924e:	f04f 0e00 	mov.w	lr, #0
 8009252:	4640      	mov	r0, r8
 8009254:	46ac      	mov	ip, r5
 8009256:	46f2      	mov	sl, lr
 8009258:	f850 2b04 	ldr.w	r2, [r0], #4
 800925c:	b293      	uxth	r3, r2
 800925e:	fb06 e303 	mla	r3, r6, r3, lr
 8009262:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009266:	b29b      	uxth	r3, r3
 8009268:	ebaa 0303 	sub.w	r3, sl, r3
 800926c:	0c12      	lsrs	r2, r2, #16
 800926e:	f8dc a000 	ldr.w	sl, [ip]
 8009272:	fb06 e202 	mla	r2, r6, r2, lr
 8009276:	fa13 f38a 	uxtah	r3, r3, sl
 800927a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800927e:	fa1f fa82 	uxth.w	sl, r2
 8009282:	f8dc 2000 	ldr.w	r2, [ip]
 8009286:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800928a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800928e:	b29b      	uxth	r3, r3
 8009290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009294:	4581      	cmp	r9, r0
 8009296:	f84c 3b04 	str.w	r3, [ip], #4
 800929a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800929e:	d2db      	bcs.n	8009258 <quorem+0x44>
 80092a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80092a4:	b92b      	cbnz	r3, 80092b2 <quorem+0x9e>
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	3b04      	subs	r3, #4
 80092aa:	429d      	cmp	r5, r3
 80092ac:	461a      	mov	r2, r3
 80092ae:	d32e      	bcc.n	800930e <quorem+0xfa>
 80092b0:	613c      	str	r4, [r7, #16]
 80092b2:	4638      	mov	r0, r7
 80092b4:	f001 f8b2 	bl	800a41c <__mcmp>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	db24      	blt.n	8009306 <quorem+0xf2>
 80092bc:	3601      	adds	r6, #1
 80092be:	4628      	mov	r0, r5
 80092c0:	f04f 0c00 	mov.w	ip, #0
 80092c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80092c8:	f8d0 e000 	ldr.w	lr, [r0]
 80092cc:	b293      	uxth	r3, r2
 80092ce:	ebac 0303 	sub.w	r3, ip, r3
 80092d2:	0c12      	lsrs	r2, r2, #16
 80092d4:	fa13 f38e 	uxtah	r3, r3, lr
 80092d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092e6:	45c1      	cmp	r9, r8
 80092e8:	f840 3b04 	str.w	r3, [r0], #4
 80092ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80092f0:	d2e8      	bcs.n	80092c4 <quorem+0xb0>
 80092f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092fa:	b922      	cbnz	r2, 8009306 <quorem+0xf2>
 80092fc:	3b04      	subs	r3, #4
 80092fe:	429d      	cmp	r5, r3
 8009300:	461a      	mov	r2, r3
 8009302:	d30a      	bcc.n	800931a <quorem+0x106>
 8009304:	613c      	str	r4, [r7, #16]
 8009306:	4630      	mov	r0, r6
 8009308:	b003      	add	sp, #12
 800930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930e:	6812      	ldr	r2, [r2, #0]
 8009310:	3b04      	subs	r3, #4
 8009312:	2a00      	cmp	r2, #0
 8009314:	d1cc      	bne.n	80092b0 <quorem+0x9c>
 8009316:	3c01      	subs	r4, #1
 8009318:	e7c7      	b.n	80092aa <quorem+0x96>
 800931a:	6812      	ldr	r2, [r2, #0]
 800931c:	3b04      	subs	r3, #4
 800931e:	2a00      	cmp	r2, #0
 8009320:	d1f0      	bne.n	8009304 <quorem+0xf0>
 8009322:	3c01      	subs	r4, #1
 8009324:	e7eb      	b.n	80092fe <quorem+0xea>
 8009326:	2000      	movs	r0, #0
 8009328:	e7ee      	b.n	8009308 <quorem+0xf4>
 800932a:	0000      	movs	r0, r0
 800932c:	0000      	movs	r0, r0
	...

08009330 <_dtoa_r>:
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	ed2d 8b02 	vpush	{d8}
 8009338:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800933a:	b095      	sub	sp, #84	; 0x54
 800933c:	4616      	mov	r6, r2
 800933e:	461f      	mov	r7, r3
 8009340:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009344:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8009348:	4604      	mov	r4, r0
 800934a:	b975      	cbnz	r5, 800936a <_dtoa_r+0x3a>
 800934c:	2010      	movs	r0, #16
 800934e:	f000 fddf 	bl	8009f10 <malloc>
 8009352:	4602      	mov	r2, r0
 8009354:	6260      	str	r0, [r4, #36]	; 0x24
 8009356:	b920      	cbnz	r0, 8009362 <_dtoa_r+0x32>
 8009358:	4bb1      	ldr	r3, [pc, #708]	; (8009620 <_dtoa_r+0x2f0>)
 800935a:	21ea      	movs	r1, #234	; 0xea
 800935c:	48b1      	ldr	r0, [pc, #708]	; (8009624 <_dtoa_r+0x2f4>)
 800935e:	f001 fb81 	bl	800aa64 <__assert_func>
 8009362:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009366:	6005      	str	r5, [r0, #0]
 8009368:	60c5      	str	r5, [r0, #12]
 800936a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800936c:	6819      	ldr	r1, [r3, #0]
 800936e:	b151      	cbz	r1, 8009386 <_dtoa_r+0x56>
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	604a      	str	r2, [r1, #4]
 8009374:	2301      	movs	r3, #1
 8009376:	4093      	lsls	r3, r2
 8009378:	608b      	str	r3, [r1, #8]
 800937a:	4620      	mov	r0, r4
 800937c:	f000 fe10 	bl	8009fa0 <_Bfree>
 8009380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	1e3b      	subs	r3, r7, #0
 8009388:	bfb9      	ittee	lt
 800938a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800938e:	9305      	strlt	r3, [sp, #20]
 8009390:	2300      	movge	r3, #0
 8009392:	f8c8 3000 	strge.w	r3, [r8]
 8009396:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800939a:	4ba3      	ldr	r3, [pc, #652]	; (8009628 <_dtoa_r+0x2f8>)
 800939c:	bfbc      	itt	lt
 800939e:	2201      	movlt	r2, #1
 80093a0:	f8c8 2000 	strlt.w	r2, [r8]
 80093a4:	ea33 0309 	bics.w	r3, r3, r9
 80093a8:	d11b      	bne.n	80093e2 <_dtoa_r+0xb2>
 80093aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80093ac:	f242 730f 	movw	r3, #9999	; 0x270f
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093b6:	4333      	orrs	r3, r6
 80093b8:	f000 857d 	beq.w	8009eb6 <_dtoa_r+0xb86>
 80093bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80093be:	b963      	cbnz	r3, 80093da <_dtoa_r+0xaa>
 80093c0:	4b9a      	ldr	r3, [pc, #616]	; (800962c <_dtoa_r+0x2fc>)
 80093c2:	e024      	b.n	800940e <_dtoa_r+0xde>
 80093c4:	4b9a      	ldr	r3, [pc, #616]	; (8009630 <_dtoa_r+0x300>)
 80093c6:	9303      	str	r3, [sp, #12]
 80093c8:	3308      	adds	r3, #8
 80093ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	9803      	ldr	r0, [sp, #12]
 80093d0:	b015      	add	sp, #84	; 0x54
 80093d2:	ecbd 8b02 	vpop	{d8}
 80093d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093da:	4b94      	ldr	r3, [pc, #592]	; (800962c <_dtoa_r+0x2fc>)
 80093dc:	9303      	str	r3, [sp, #12]
 80093de:	3303      	adds	r3, #3
 80093e0:	e7f3      	b.n	80093ca <_dtoa_r+0x9a>
 80093e2:	ed9d 7b04 	vldr	d7, [sp, #16]
 80093e6:	2200      	movs	r2, #0
 80093e8:	ec51 0b17 	vmov	r0, r1, d7
 80093ec:	2300      	movs	r3, #0
 80093ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80093f2:	f7f7 fbc9 	bl	8000b88 <__aeabi_dcmpeq>
 80093f6:	4680      	mov	r8, r0
 80093f8:	b158      	cbz	r0, 8009412 <_dtoa_r+0xe2>
 80093fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80093fc:	2301      	movs	r3, #1
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 8554 	beq.w	8009eb0 <_dtoa_r+0xb80>
 8009408:	488a      	ldr	r0, [pc, #552]	; (8009634 <_dtoa_r+0x304>)
 800940a:	6018      	str	r0, [r3, #0]
 800940c:	1e43      	subs	r3, r0, #1
 800940e:	9303      	str	r3, [sp, #12]
 8009410:	e7dd      	b.n	80093ce <_dtoa_r+0x9e>
 8009412:	ab12      	add	r3, sp, #72	; 0x48
 8009414:	9301      	str	r3, [sp, #4]
 8009416:	ab13      	add	r3, sp, #76	; 0x4c
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	4620      	mov	r0, r4
 800941c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009420:	f001 f8a0 	bl	800a564 <__d2b>
 8009424:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009428:	4683      	mov	fp, r0
 800942a:	2d00      	cmp	r5, #0
 800942c:	d07c      	beq.n	8009528 <_dtoa_r+0x1f8>
 800942e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009430:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009438:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800943c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009440:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009444:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009448:	4b7b      	ldr	r3, [pc, #492]	; (8009638 <_dtoa_r+0x308>)
 800944a:	2200      	movs	r2, #0
 800944c:	4630      	mov	r0, r6
 800944e:	4639      	mov	r1, r7
 8009450:	f7f6 ff7a 	bl	8000348 <__aeabi_dsub>
 8009454:	a36c      	add	r3, pc, #432	; (adr r3, 8009608 <_dtoa_r+0x2d8>)
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f7f7 f92d 	bl	80006b8 <__aeabi_dmul>
 800945e:	a36c      	add	r3, pc, #432	; (adr r3, 8009610 <_dtoa_r+0x2e0>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f7f6 ff72 	bl	800034c <__adddf3>
 8009468:	4606      	mov	r6, r0
 800946a:	4628      	mov	r0, r5
 800946c:	460f      	mov	r7, r1
 800946e:	f7f7 f8b9 	bl	80005e4 <__aeabi_i2d>
 8009472:	a369      	add	r3, pc, #420	; (adr r3, 8009618 <_dtoa_r+0x2e8>)
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f7f7 f91e 	bl	80006b8 <__aeabi_dmul>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4630      	mov	r0, r6
 8009482:	4639      	mov	r1, r7
 8009484:	f7f6 ff62 	bl	800034c <__adddf3>
 8009488:	4606      	mov	r6, r0
 800948a:	460f      	mov	r7, r1
 800948c:	f7f7 fbc4 	bl	8000c18 <__aeabi_d2iz>
 8009490:	2200      	movs	r2, #0
 8009492:	4682      	mov	sl, r0
 8009494:	2300      	movs	r3, #0
 8009496:	4630      	mov	r0, r6
 8009498:	4639      	mov	r1, r7
 800949a:	f7f7 fb7f 	bl	8000b9c <__aeabi_dcmplt>
 800949e:	b148      	cbz	r0, 80094b4 <_dtoa_r+0x184>
 80094a0:	4650      	mov	r0, sl
 80094a2:	f7f7 f89f 	bl	80005e4 <__aeabi_i2d>
 80094a6:	4632      	mov	r2, r6
 80094a8:	463b      	mov	r3, r7
 80094aa:	f7f7 fb6d 	bl	8000b88 <__aeabi_dcmpeq>
 80094ae:	b908      	cbnz	r0, 80094b4 <_dtoa_r+0x184>
 80094b0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80094b4:	f1ba 0f16 	cmp.w	sl, #22
 80094b8:	d854      	bhi.n	8009564 <_dtoa_r+0x234>
 80094ba:	4b60      	ldr	r3, [pc, #384]	; (800963c <_dtoa_r+0x30c>)
 80094bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094c8:	f7f7 fb68 	bl	8000b9c <__aeabi_dcmplt>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d04b      	beq.n	8009568 <_dtoa_r+0x238>
 80094d0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80094d4:	2300      	movs	r3, #0
 80094d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80094d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094da:	1b5d      	subs	r5, r3, r5
 80094dc:	1e6b      	subs	r3, r5, #1
 80094de:	9307      	str	r3, [sp, #28]
 80094e0:	bf43      	ittte	mi
 80094e2:	2300      	movmi	r3, #0
 80094e4:	f1c5 0801 	rsbmi	r8, r5, #1
 80094e8:	9307      	strmi	r3, [sp, #28]
 80094ea:	f04f 0800 	movpl.w	r8, #0
 80094ee:	f1ba 0f00 	cmp.w	sl, #0
 80094f2:	db3b      	blt.n	800956c <_dtoa_r+0x23c>
 80094f4:	9b07      	ldr	r3, [sp, #28]
 80094f6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80094fa:	4453      	add	r3, sl
 80094fc:	9307      	str	r3, [sp, #28]
 80094fe:	2300      	movs	r3, #0
 8009500:	9308      	str	r3, [sp, #32]
 8009502:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009504:	2b09      	cmp	r3, #9
 8009506:	d869      	bhi.n	80095dc <_dtoa_r+0x2ac>
 8009508:	2b05      	cmp	r3, #5
 800950a:	bfc4      	itt	gt
 800950c:	3b04      	subgt	r3, #4
 800950e:	9320      	strgt	r3, [sp, #128]	; 0x80
 8009510:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009512:	f1a3 0302 	sub.w	r3, r3, #2
 8009516:	bfcc      	ite	gt
 8009518:	2500      	movgt	r5, #0
 800951a:	2501      	movle	r5, #1
 800951c:	2b03      	cmp	r3, #3
 800951e:	d869      	bhi.n	80095f4 <_dtoa_r+0x2c4>
 8009520:	e8df f003 	tbb	[pc, r3]
 8009524:	5a4c4e2c 	.word	0x5a4c4e2c
 8009528:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800952c:	441d      	add	r5, r3
 800952e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009532:	2b20      	cmp	r3, #32
 8009534:	bfc1      	itttt	gt
 8009536:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800953a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800953e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009542:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009546:	bfda      	itte	le
 8009548:	f1c3 0320 	rsble	r3, r3, #32
 800954c:	fa06 f003 	lslle.w	r0, r6, r3
 8009550:	4318      	orrgt	r0, r3
 8009552:	f7f7 f837 	bl	80005c4 <__aeabi_ui2d>
 8009556:	2301      	movs	r3, #1
 8009558:	4606      	mov	r6, r0
 800955a:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800955e:	3d01      	subs	r5, #1
 8009560:	9310      	str	r3, [sp, #64]	; 0x40
 8009562:	e771      	b.n	8009448 <_dtoa_r+0x118>
 8009564:	2301      	movs	r3, #1
 8009566:	e7b6      	b.n	80094d6 <_dtoa_r+0x1a6>
 8009568:	900f      	str	r0, [sp, #60]	; 0x3c
 800956a:	e7b5      	b.n	80094d8 <_dtoa_r+0x1a8>
 800956c:	f1ca 0300 	rsb	r3, sl, #0
 8009570:	9308      	str	r3, [sp, #32]
 8009572:	2300      	movs	r3, #0
 8009574:	eba8 080a 	sub.w	r8, r8, sl
 8009578:	930e      	str	r3, [sp, #56]	; 0x38
 800957a:	e7c2      	b.n	8009502 <_dtoa_r+0x1d2>
 800957c:	2300      	movs	r3, #0
 800957e:	930c      	str	r3, [sp, #48]	; 0x30
 8009580:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009582:	2b00      	cmp	r3, #0
 8009584:	dc39      	bgt.n	80095fa <_dtoa_r+0x2ca>
 8009586:	f04f 0901 	mov.w	r9, #1
 800958a:	f8cd 9018 	str.w	r9, [sp, #24]
 800958e:	464b      	mov	r3, r9
 8009590:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8009594:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009596:	2200      	movs	r2, #0
 8009598:	6042      	str	r2, [r0, #4]
 800959a:	2204      	movs	r2, #4
 800959c:	f102 0614 	add.w	r6, r2, #20
 80095a0:	429e      	cmp	r6, r3
 80095a2:	6841      	ldr	r1, [r0, #4]
 80095a4:	d94e      	bls.n	8009644 <_dtoa_r+0x314>
 80095a6:	4620      	mov	r0, r4
 80095a8:	f000 fcba 	bl	8009f20 <_Balloc>
 80095ac:	9003      	str	r0, [sp, #12]
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d14c      	bne.n	800964c <_dtoa_r+0x31c>
 80095b2:	4b23      	ldr	r3, [pc, #140]	; (8009640 <_dtoa_r+0x310>)
 80095b4:	4602      	mov	r2, r0
 80095b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095ba:	e6cf      	b.n	800935c <_dtoa_r+0x2c>
 80095bc:	2301      	movs	r3, #1
 80095be:	e7de      	b.n	800957e <_dtoa_r+0x24e>
 80095c0:	2300      	movs	r3, #0
 80095c2:	930c      	str	r3, [sp, #48]	; 0x30
 80095c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095c6:	eb0a 0903 	add.w	r9, sl, r3
 80095ca:	f109 0301 	add.w	r3, r9, #1
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	9306      	str	r3, [sp, #24]
 80095d2:	bfb8      	it	lt
 80095d4:	2301      	movlt	r3, #1
 80095d6:	e7dd      	b.n	8009594 <_dtoa_r+0x264>
 80095d8:	2301      	movs	r3, #1
 80095da:	e7f2      	b.n	80095c2 <_dtoa_r+0x292>
 80095dc:	2501      	movs	r5, #1
 80095de:	2300      	movs	r3, #0
 80095e0:	9320      	str	r3, [sp, #128]	; 0x80
 80095e2:	950c      	str	r5, [sp, #48]	; 0x30
 80095e4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8cd 9018 	str.w	r9, [sp, #24]
 80095ee:	2312      	movs	r3, #18
 80095f0:	9221      	str	r2, [sp, #132]	; 0x84
 80095f2:	e7cf      	b.n	8009594 <_dtoa_r+0x264>
 80095f4:	2301      	movs	r3, #1
 80095f6:	930c      	str	r3, [sp, #48]	; 0x30
 80095f8:	e7f4      	b.n	80095e4 <_dtoa_r+0x2b4>
 80095fa:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 80095fe:	f8cd 9018 	str.w	r9, [sp, #24]
 8009602:	464b      	mov	r3, r9
 8009604:	e7c6      	b.n	8009594 <_dtoa_r+0x264>
 8009606:	bf00      	nop
 8009608:	636f4361 	.word	0x636f4361
 800960c:	3fd287a7 	.word	0x3fd287a7
 8009610:	8b60c8b3 	.word	0x8b60c8b3
 8009614:	3fc68a28 	.word	0x3fc68a28
 8009618:	509f79fb 	.word	0x509f79fb
 800961c:	3fd34413 	.word	0x3fd34413
 8009620:	0800bbdd 	.word	0x0800bbdd
 8009624:	0800bbf4 	.word	0x0800bbf4
 8009628:	7ff00000 	.word	0x7ff00000
 800962c:	0800bbd9 	.word	0x0800bbd9
 8009630:	0800bbd0 	.word	0x0800bbd0
 8009634:	0800bbad 	.word	0x0800bbad
 8009638:	3ff80000 	.word	0x3ff80000
 800963c:	0800bcf0 	.word	0x0800bcf0
 8009640:	0800bc53 	.word	0x0800bc53
 8009644:	3101      	adds	r1, #1
 8009646:	6041      	str	r1, [r0, #4]
 8009648:	0052      	lsls	r2, r2, #1
 800964a:	e7a7      	b.n	800959c <_dtoa_r+0x26c>
 800964c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800964e:	9a03      	ldr	r2, [sp, #12]
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	9b06      	ldr	r3, [sp, #24]
 8009654:	2b0e      	cmp	r3, #14
 8009656:	f200 80ad 	bhi.w	80097b4 <_dtoa_r+0x484>
 800965a:	2d00      	cmp	r5, #0
 800965c:	f000 80aa 	beq.w	80097b4 <_dtoa_r+0x484>
 8009660:	f1ba 0f00 	cmp.w	sl, #0
 8009664:	dd36      	ble.n	80096d4 <_dtoa_r+0x3a4>
 8009666:	4ac3      	ldr	r2, [pc, #780]	; (8009974 <_dtoa_r+0x644>)
 8009668:	f00a 030f 	and.w	r3, sl, #15
 800966c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009670:	ed93 7b00 	vldr	d7, [r3]
 8009674:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009678:	ea4f 172a 	mov.w	r7, sl, asr #4
 800967c:	eeb0 8a47 	vmov.f32	s16, s14
 8009680:	eef0 8a67 	vmov.f32	s17, s15
 8009684:	d016      	beq.n	80096b4 <_dtoa_r+0x384>
 8009686:	4bbc      	ldr	r3, [pc, #752]	; (8009978 <_dtoa_r+0x648>)
 8009688:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800968c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009690:	f7f7 f93c 	bl	800090c <__aeabi_ddiv>
 8009694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009698:	f007 070f 	and.w	r7, r7, #15
 800969c:	2503      	movs	r5, #3
 800969e:	4eb6      	ldr	r6, [pc, #728]	; (8009978 <_dtoa_r+0x648>)
 80096a0:	b957      	cbnz	r7, 80096b8 <_dtoa_r+0x388>
 80096a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096a6:	ec53 2b18 	vmov	r2, r3, d8
 80096aa:	f7f7 f92f 	bl	800090c <__aeabi_ddiv>
 80096ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096b2:	e029      	b.n	8009708 <_dtoa_r+0x3d8>
 80096b4:	2502      	movs	r5, #2
 80096b6:	e7f2      	b.n	800969e <_dtoa_r+0x36e>
 80096b8:	07f9      	lsls	r1, r7, #31
 80096ba:	d508      	bpl.n	80096ce <_dtoa_r+0x39e>
 80096bc:	ec51 0b18 	vmov	r0, r1, d8
 80096c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096c4:	f7f6 fff8 	bl	80006b8 <__aeabi_dmul>
 80096c8:	ec41 0b18 	vmov	d8, r0, r1
 80096cc:	3501      	adds	r5, #1
 80096ce:	107f      	asrs	r7, r7, #1
 80096d0:	3608      	adds	r6, #8
 80096d2:	e7e5      	b.n	80096a0 <_dtoa_r+0x370>
 80096d4:	f000 80a6 	beq.w	8009824 <_dtoa_r+0x4f4>
 80096d8:	f1ca 0600 	rsb	r6, sl, #0
 80096dc:	4ba5      	ldr	r3, [pc, #660]	; (8009974 <_dtoa_r+0x644>)
 80096de:	4fa6      	ldr	r7, [pc, #664]	; (8009978 <_dtoa_r+0x648>)
 80096e0:	f006 020f 	and.w	r2, r6, #15
 80096e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096f0:	f7f6 ffe2 	bl	80006b8 <__aeabi_dmul>
 80096f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096f8:	1136      	asrs	r6, r6, #4
 80096fa:	2300      	movs	r3, #0
 80096fc:	2502      	movs	r5, #2
 80096fe:	2e00      	cmp	r6, #0
 8009700:	f040 8085 	bne.w	800980e <_dtoa_r+0x4de>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1d2      	bne.n	80096ae <_dtoa_r+0x37e>
 8009708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 808c 	beq.w	8009828 <_dtoa_r+0x4f8>
 8009710:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009714:	4b99      	ldr	r3, [pc, #612]	; (800997c <_dtoa_r+0x64c>)
 8009716:	2200      	movs	r2, #0
 8009718:	4630      	mov	r0, r6
 800971a:	4639      	mov	r1, r7
 800971c:	f7f7 fa3e 	bl	8000b9c <__aeabi_dcmplt>
 8009720:	2800      	cmp	r0, #0
 8009722:	f000 8081 	beq.w	8009828 <_dtoa_r+0x4f8>
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d07d      	beq.n	8009828 <_dtoa_r+0x4f8>
 800972c:	f1b9 0f00 	cmp.w	r9, #0
 8009730:	dd3c      	ble.n	80097ac <_dtoa_r+0x47c>
 8009732:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009736:	9309      	str	r3, [sp, #36]	; 0x24
 8009738:	2200      	movs	r2, #0
 800973a:	4b91      	ldr	r3, [pc, #580]	; (8009980 <_dtoa_r+0x650>)
 800973c:	4630      	mov	r0, r6
 800973e:	4639      	mov	r1, r7
 8009740:	f7f6 ffba 	bl	80006b8 <__aeabi_dmul>
 8009744:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009748:	3501      	adds	r5, #1
 800974a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800974e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009752:	4628      	mov	r0, r5
 8009754:	f7f6 ff46 	bl	80005e4 <__aeabi_i2d>
 8009758:	4632      	mov	r2, r6
 800975a:	463b      	mov	r3, r7
 800975c:	f7f6 ffac 	bl	80006b8 <__aeabi_dmul>
 8009760:	4b88      	ldr	r3, [pc, #544]	; (8009984 <_dtoa_r+0x654>)
 8009762:	2200      	movs	r2, #0
 8009764:	f7f6 fdf2 	bl	800034c <__adddf3>
 8009768:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800976c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009770:	9305      	str	r3, [sp, #20]
 8009772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009774:	2b00      	cmp	r3, #0
 8009776:	d15c      	bne.n	8009832 <_dtoa_r+0x502>
 8009778:	4b83      	ldr	r3, [pc, #524]	; (8009988 <_dtoa_r+0x658>)
 800977a:	2200      	movs	r2, #0
 800977c:	4630      	mov	r0, r6
 800977e:	4639      	mov	r1, r7
 8009780:	f7f6 fde2 	bl	8000348 <__aeabi_dsub>
 8009784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009788:	4606      	mov	r6, r0
 800978a:	460f      	mov	r7, r1
 800978c:	f7f7 fa24 	bl	8000bd8 <__aeabi_dcmpgt>
 8009790:	2800      	cmp	r0, #0
 8009792:	f040 8296 	bne.w	8009cc2 <_dtoa_r+0x992>
 8009796:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800979a:	4630      	mov	r0, r6
 800979c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097a0:	4639      	mov	r1, r7
 80097a2:	f7f7 f9fb 	bl	8000b9c <__aeabi_dcmplt>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f040 8288 	bne.w	8009cbc <_dtoa_r+0x98c>
 80097ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80097b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f2c0 8158 	blt.w	8009a6c <_dtoa_r+0x73c>
 80097bc:	f1ba 0f0e 	cmp.w	sl, #14
 80097c0:	f300 8154 	bgt.w	8009a6c <_dtoa_r+0x73c>
 80097c4:	4b6b      	ldr	r3, [pc, #428]	; (8009974 <_dtoa_r+0x644>)
 80097c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80097ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f280 80e3 	bge.w	800999c <_dtoa_r+0x66c>
 80097d6:	9b06      	ldr	r3, [sp, #24]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f300 80df 	bgt.w	800999c <_dtoa_r+0x66c>
 80097de:	f040 826d 	bne.w	8009cbc <_dtoa_r+0x98c>
 80097e2:	4b69      	ldr	r3, [pc, #420]	; (8009988 <_dtoa_r+0x658>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	4640      	mov	r0, r8
 80097e8:	4649      	mov	r1, r9
 80097ea:	f7f6 ff65 	bl	80006b8 <__aeabi_dmul>
 80097ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097f2:	f7f7 f9e7 	bl	8000bc4 <__aeabi_dcmpge>
 80097f6:	9e06      	ldr	r6, [sp, #24]
 80097f8:	4637      	mov	r7, r6
 80097fa:	2800      	cmp	r0, #0
 80097fc:	f040 8243 	bne.w	8009c86 <_dtoa_r+0x956>
 8009800:	9d03      	ldr	r5, [sp, #12]
 8009802:	2331      	movs	r3, #49	; 0x31
 8009804:	f805 3b01 	strb.w	r3, [r5], #1
 8009808:	f10a 0a01 	add.w	sl, sl, #1
 800980c:	e23f      	b.n	8009c8e <_dtoa_r+0x95e>
 800980e:	07f2      	lsls	r2, r6, #31
 8009810:	d505      	bpl.n	800981e <_dtoa_r+0x4ee>
 8009812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009816:	f7f6 ff4f 	bl	80006b8 <__aeabi_dmul>
 800981a:	3501      	adds	r5, #1
 800981c:	2301      	movs	r3, #1
 800981e:	1076      	asrs	r6, r6, #1
 8009820:	3708      	adds	r7, #8
 8009822:	e76c      	b.n	80096fe <_dtoa_r+0x3ce>
 8009824:	2502      	movs	r5, #2
 8009826:	e76f      	b.n	8009708 <_dtoa_r+0x3d8>
 8009828:	9b06      	ldr	r3, [sp, #24]
 800982a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800982e:	930d      	str	r3, [sp, #52]	; 0x34
 8009830:	e78d      	b.n	800974e <_dtoa_r+0x41e>
 8009832:	9903      	ldr	r1, [sp, #12]
 8009834:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009838:	4b4e      	ldr	r3, [pc, #312]	; (8009974 <_dtoa_r+0x644>)
 800983a:	ed9d 7b04 	vldr	d7, [sp, #16]
 800983e:	4401      	add	r1, r0
 8009840:	9104      	str	r1, [sp, #16]
 8009842:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009844:	eeb0 8a47 	vmov.f32	s16, s14
 8009848:	eef0 8a67 	vmov.f32	s17, s15
 800984c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009850:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009854:	2900      	cmp	r1, #0
 8009856:	d045      	beq.n	80098e4 <_dtoa_r+0x5b4>
 8009858:	494c      	ldr	r1, [pc, #304]	; (800998c <_dtoa_r+0x65c>)
 800985a:	2000      	movs	r0, #0
 800985c:	f7f7 f856 	bl	800090c <__aeabi_ddiv>
 8009860:	ec53 2b18 	vmov	r2, r3, d8
 8009864:	f7f6 fd70 	bl	8000348 <__aeabi_dsub>
 8009868:	9d03      	ldr	r5, [sp, #12]
 800986a:	ec41 0b18 	vmov	d8, r0, r1
 800986e:	4639      	mov	r1, r7
 8009870:	4630      	mov	r0, r6
 8009872:	f7f7 f9d1 	bl	8000c18 <__aeabi_d2iz>
 8009876:	900d      	str	r0, [sp, #52]	; 0x34
 8009878:	f7f6 feb4 	bl	80005e4 <__aeabi_i2d>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4630      	mov	r0, r6
 8009882:	4639      	mov	r1, r7
 8009884:	f7f6 fd60 	bl	8000348 <__aeabi_dsub>
 8009888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800988a:	3330      	adds	r3, #48	; 0x30
 800988c:	f805 3b01 	strb.w	r3, [r5], #1
 8009890:	ec53 2b18 	vmov	r2, r3, d8
 8009894:	4606      	mov	r6, r0
 8009896:	460f      	mov	r7, r1
 8009898:	f7f7 f980 	bl	8000b9c <__aeabi_dcmplt>
 800989c:	2800      	cmp	r0, #0
 800989e:	d165      	bne.n	800996c <_dtoa_r+0x63c>
 80098a0:	4632      	mov	r2, r6
 80098a2:	463b      	mov	r3, r7
 80098a4:	4935      	ldr	r1, [pc, #212]	; (800997c <_dtoa_r+0x64c>)
 80098a6:	2000      	movs	r0, #0
 80098a8:	f7f6 fd4e 	bl	8000348 <__aeabi_dsub>
 80098ac:	ec53 2b18 	vmov	r2, r3, d8
 80098b0:	f7f7 f974 	bl	8000b9c <__aeabi_dcmplt>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	f040 80b9 	bne.w	8009a2c <_dtoa_r+0x6fc>
 80098ba:	9b04      	ldr	r3, [sp, #16]
 80098bc:	429d      	cmp	r5, r3
 80098be:	f43f af75 	beq.w	80097ac <_dtoa_r+0x47c>
 80098c2:	4b2f      	ldr	r3, [pc, #188]	; (8009980 <_dtoa_r+0x650>)
 80098c4:	ec51 0b18 	vmov	r0, r1, d8
 80098c8:	2200      	movs	r2, #0
 80098ca:	f7f6 fef5 	bl	80006b8 <__aeabi_dmul>
 80098ce:	4b2c      	ldr	r3, [pc, #176]	; (8009980 <_dtoa_r+0x650>)
 80098d0:	ec41 0b18 	vmov	d8, r0, r1
 80098d4:	2200      	movs	r2, #0
 80098d6:	4630      	mov	r0, r6
 80098d8:	4639      	mov	r1, r7
 80098da:	f7f6 feed 	bl	80006b8 <__aeabi_dmul>
 80098de:	4606      	mov	r6, r0
 80098e0:	460f      	mov	r7, r1
 80098e2:	e7c4      	b.n	800986e <_dtoa_r+0x53e>
 80098e4:	ec51 0b17 	vmov	r0, r1, d7
 80098e8:	f7f6 fee6 	bl	80006b8 <__aeabi_dmul>
 80098ec:	9b04      	ldr	r3, [sp, #16]
 80098ee:	9d03      	ldr	r5, [sp, #12]
 80098f0:	930d      	str	r3, [sp, #52]	; 0x34
 80098f2:	ec41 0b18 	vmov	d8, r0, r1
 80098f6:	4639      	mov	r1, r7
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7f7 f98d 	bl	8000c18 <__aeabi_d2iz>
 80098fe:	9011      	str	r0, [sp, #68]	; 0x44
 8009900:	f7f6 fe70 	bl	80005e4 <__aeabi_i2d>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4630      	mov	r0, r6
 800990a:	4639      	mov	r1, r7
 800990c:	f7f6 fd1c 	bl	8000348 <__aeabi_dsub>
 8009910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009912:	3330      	adds	r3, #48	; 0x30
 8009914:	f805 3b01 	strb.w	r3, [r5], #1
 8009918:	9b04      	ldr	r3, [sp, #16]
 800991a:	429d      	cmp	r5, r3
 800991c:	4606      	mov	r6, r0
 800991e:	460f      	mov	r7, r1
 8009920:	f04f 0200 	mov.w	r2, #0
 8009924:	d134      	bne.n	8009990 <_dtoa_r+0x660>
 8009926:	4b19      	ldr	r3, [pc, #100]	; (800998c <_dtoa_r+0x65c>)
 8009928:	ec51 0b18 	vmov	r0, r1, d8
 800992c:	f7f6 fd0e 	bl	800034c <__adddf3>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f7 f94e 	bl	8000bd8 <__aeabi_dcmpgt>
 800993c:	2800      	cmp	r0, #0
 800993e:	d175      	bne.n	8009a2c <_dtoa_r+0x6fc>
 8009940:	ec53 2b18 	vmov	r2, r3, d8
 8009944:	4911      	ldr	r1, [pc, #68]	; (800998c <_dtoa_r+0x65c>)
 8009946:	2000      	movs	r0, #0
 8009948:	f7f6 fcfe 	bl	8000348 <__aeabi_dsub>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4630      	mov	r0, r6
 8009952:	4639      	mov	r1, r7
 8009954:	f7f7 f922 	bl	8000b9c <__aeabi_dcmplt>
 8009958:	2800      	cmp	r0, #0
 800995a:	f43f af27 	beq.w	80097ac <_dtoa_r+0x47c>
 800995e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009960:	1e6b      	subs	r3, r5, #1
 8009962:	930d      	str	r3, [sp, #52]	; 0x34
 8009964:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009968:	2b30      	cmp	r3, #48	; 0x30
 800996a:	d0f8      	beq.n	800995e <_dtoa_r+0x62e>
 800996c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009970:	e04a      	b.n	8009a08 <_dtoa_r+0x6d8>
 8009972:	bf00      	nop
 8009974:	0800bcf0 	.word	0x0800bcf0
 8009978:	0800bcc8 	.word	0x0800bcc8
 800997c:	3ff00000 	.word	0x3ff00000
 8009980:	40240000 	.word	0x40240000
 8009984:	401c0000 	.word	0x401c0000
 8009988:	40140000 	.word	0x40140000
 800998c:	3fe00000 	.word	0x3fe00000
 8009990:	4baf      	ldr	r3, [pc, #700]	; (8009c50 <_dtoa_r+0x920>)
 8009992:	f7f6 fe91 	bl	80006b8 <__aeabi_dmul>
 8009996:	4606      	mov	r6, r0
 8009998:	460f      	mov	r7, r1
 800999a:	e7ac      	b.n	80098f6 <_dtoa_r+0x5c6>
 800999c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80099a0:	9d03      	ldr	r5, [sp, #12]
 80099a2:	4642      	mov	r2, r8
 80099a4:	464b      	mov	r3, r9
 80099a6:	4630      	mov	r0, r6
 80099a8:	4639      	mov	r1, r7
 80099aa:	f7f6 ffaf 	bl	800090c <__aeabi_ddiv>
 80099ae:	f7f7 f933 	bl	8000c18 <__aeabi_d2iz>
 80099b2:	9004      	str	r0, [sp, #16]
 80099b4:	f7f6 fe16 	bl	80005e4 <__aeabi_i2d>
 80099b8:	4642      	mov	r2, r8
 80099ba:	464b      	mov	r3, r9
 80099bc:	f7f6 fe7c 	bl	80006b8 <__aeabi_dmul>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4630      	mov	r0, r6
 80099c6:	4639      	mov	r1, r7
 80099c8:	f7f6 fcbe 	bl	8000348 <__aeabi_dsub>
 80099cc:	9e04      	ldr	r6, [sp, #16]
 80099ce:	9f06      	ldr	r7, [sp, #24]
 80099d0:	3630      	adds	r6, #48	; 0x30
 80099d2:	f805 6b01 	strb.w	r6, [r5], #1
 80099d6:	9e03      	ldr	r6, [sp, #12]
 80099d8:	1bae      	subs	r6, r5, r6
 80099da:	42b7      	cmp	r7, r6
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	d137      	bne.n	8009a52 <_dtoa_r+0x722>
 80099e2:	f7f6 fcb3 	bl	800034c <__adddf3>
 80099e6:	4642      	mov	r2, r8
 80099e8:	464b      	mov	r3, r9
 80099ea:	4606      	mov	r6, r0
 80099ec:	460f      	mov	r7, r1
 80099ee:	f7f7 f8f3 	bl	8000bd8 <__aeabi_dcmpgt>
 80099f2:	b9c8      	cbnz	r0, 8009a28 <_dtoa_r+0x6f8>
 80099f4:	4642      	mov	r2, r8
 80099f6:	464b      	mov	r3, r9
 80099f8:	4630      	mov	r0, r6
 80099fa:	4639      	mov	r1, r7
 80099fc:	f7f7 f8c4 	bl	8000b88 <__aeabi_dcmpeq>
 8009a00:	b110      	cbz	r0, 8009a08 <_dtoa_r+0x6d8>
 8009a02:	9b04      	ldr	r3, [sp, #16]
 8009a04:	07d9      	lsls	r1, r3, #31
 8009a06:	d40f      	bmi.n	8009a28 <_dtoa_r+0x6f8>
 8009a08:	4620      	mov	r0, r4
 8009a0a:	4659      	mov	r1, fp
 8009a0c:	f000 fac8 	bl	8009fa0 <_Bfree>
 8009a10:	2300      	movs	r3, #0
 8009a12:	702b      	strb	r3, [r5, #0]
 8009a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a16:	f10a 0001 	add.w	r0, sl, #1
 8009a1a:	6018      	str	r0, [r3, #0]
 8009a1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f43f acd5 	beq.w	80093ce <_dtoa_r+0x9e>
 8009a24:	601d      	str	r5, [r3, #0]
 8009a26:	e4d2      	b.n	80093ce <_dtoa_r+0x9e>
 8009a28:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	461d      	mov	r5, r3
 8009a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a34:	2a39      	cmp	r2, #57	; 0x39
 8009a36:	d108      	bne.n	8009a4a <_dtoa_r+0x71a>
 8009a38:	9a03      	ldr	r2, [sp, #12]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d1f7      	bne.n	8009a2e <_dtoa_r+0x6fe>
 8009a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a40:	9903      	ldr	r1, [sp, #12]
 8009a42:	3201      	adds	r2, #1
 8009a44:	9209      	str	r2, [sp, #36]	; 0x24
 8009a46:	2230      	movs	r2, #48	; 0x30
 8009a48:	700a      	strb	r2, [r1, #0]
 8009a4a:	781a      	ldrb	r2, [r3, #0]
 8009a4c:	3201      	adds	r2, #1
 8009a4e:	701a      	strb	r2, [r3, #0]
 8009a50:	e78c      	b.n	800996c <_dtoa_r+0x63c>
 8009a52:	4b7f      	ldr	r3, [pc, #508]	; (8009c50 <_dtoa_r+0x920>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	f7f6 fe2f 	bl	80006b8 <__aeabi_dmul>
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460f      	mov	r7, r1
 8009a62:	f7f7 f891 	bl	8000b88 <__aeabi_dcmpeq>
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d09b      	beq.n	80099a2 <_dtoa_r+0x672>
 8009a6a:	e7cd      	b.n	8009a08 <_dtoa_r+0x6d8>
 8009a6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a6e:	2a00      	cmp	r2, #0
 8009a70:	f000 80c4 	beq.w	8009bfc <_dtoa_r+0x8cc>
 8009a74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a76:	2a01      	cmp	r2, #1
 8009a78:	f300 80a8 	bgt.w	8009bcc <_dtoa_r+0x89c>
 8009a7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a7e:	2a00      	cmp	r2, #0
 8009a80:	f000 80a0 	beq.w	8009bc4 <_dtoa_r+0x894>
 8009a84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a88:	9e08      	ldr	r6, [sp, #32]
 8009a8a:	4645      	mov	r5, r8
 8009a8c:	9a07      	ldr	r2, [sp, #28]
 8009a8e:	2101      	movs	r1, #1
 8009a90:	441a      	add	r2, r3
 8009a92:	4620      	mov	r0, r4
 8009a94:	4498      	add	r8, r3
 8009a96:	9207      	str	r2, [sp, #28]
 8009a98:	f000 fb3e 	bl	800a118 <__i2b>
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	dd0b      	ble.n	8009aba <_dtoa_r+0x78a>
 8009aa2:	9b07      	ldr	r3, [sp, #28]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	dd08      	ble.n	8009aba <_dtoa_r+0x78a>
 8009aa8:	42ab      	cmp	r3, r5
 8009aaa:	9a07      	ldr	r2, [sp, #28]
 8009aac:	bfa8      	it	ge
 8009aae:	462b      	movge	r3, r5
 8009ab0:	eba8 0803 	sub.w	r8, r8, r3
 8009ab4:	1aed      	subs	r5, r5, r3
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	9307      	str	r3, [sp, #28]
 8009aba:	9b08      	ldr	r3, [sp, #32]
 8009abc:	b1fb      	cbz	r3, 8009afe <_dtoa_r+0x7ce>
 8009abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 809f 	beq.w	8009c04 <_dtoa_r+0x8d4>
 8009ac6:	2e00      	cmp	r6, #0
 8009ac8:	dd11      	ble.n	8009aee <_dtoa_r+0x7be>
 8009aca:	4639      	mov	r1, r7
 8009acc:	4632      	mov	r2, r6
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 fbde 	bl	800a290 <__pow5mult>
 8009ad4:	465a      	mov	r2, fp
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	4607      	mov	r7, r0
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 fb32 	bl	800a144 <__multiply>
 8009ae0:	4659      	mov	r1, fp
 8009ae2:	9009      	str	r0, [sp, #36]	; 0x24
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 fa5b 	bl	8009fa0 <_Bfree>
 8009aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aec:	469b      	mov	fp, r3
 8009aee:	9b08      	ldr	r3, [sp, #32]
 8009af0:	1b9a      	subs	r2, r3, r6
 8009af2:	d004      	beq.n	8009afe <_dtoa_r+0x7ce>
 8009af4:	4659      	mov	r1, fp
 8009af6:	4620      	mov	r0, r4
 8009af8:	f000 fbca 	bl	800a290 <__pow5mult>
 8009afc:	4683      	mov	fp, r0
 8009afe:	2101      	movs	r1, #1
 8009b00:	4620      	mov	r0, r4
 8009b02:	f000 fb09 	bl	800a118 <__i2b>
 8009b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	dd7c      	ble.n	8009c08 <_dtoa_r+0x8d8>
 8009b0e:	461a      	mov	r2, r3
 8009b10:	4601      	mov	r1, r0
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 fbbc 	bl	800a290 <__pow5mult>
 8009b18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	dd76      	ble.n	8009c0e <_dtoa_r+0x8de>
 8009b20:	2300      	movs	r3, #0
 8009b22:	9308      	str	r3, [sp, #32]
 8009b24:	6933      	ldr	r3, [r6, #16]
 8009b26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b2a:	6918      	ldr	r0, [r3, #16]
 8009b2c:	f000 faa4 	bl	800a078 <__hi0bits>
 8009b30:	f1c0 0020 	rsb	r0, r0, #32
 8009b34:	9b07      	ldr	r3, [sp, #28]
 8009b36:	4418      	add	r0, r3
 8009b38:	f010 001f 	ands.w	r0, r0, #31
 8009b3c:	f000 8086 	beq.w	8009c4c <_dtoa_r+0x91c>
 8009b40:	f1c0 0320 	rsb	r3, r0, #32
 8009b44:	2b04      	cmp	r3, #4
 8009b46:	dd7f      	ble.n	8009c48 <_dtoa_r+0x918>
 8009b48:	f1c0 001c 	rsb	r0, r0, #28
 8009b4c:	9b07      	ldr	r3, [sp, #28]
 8009b4e:	4403      	add	r3, r0
 8009b50:	4480      	add	r8, r0
 8009b52:	4405      	add	r5, r0
 8009b54:	9307      	str	r3, [sp, #28]
 8009b56:	f1b8 0f00 	cmp.w	r8, #0
 8009b5a:	dd05      	ble.n	8009b68 <_dtoa_r+0x838>
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	4642      	mov	r2, r8
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 fbef 	bl	800a344 <__lshift>
 8009b66:	4683      	mov	fp, r0
 8009b68:	9b07      	ldr	r3, [sp, #28]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	dd05      	ble.n	8009b7a <_dtoa_r+0x84a>
 8009b6e:	4631      	mov	r1, r6
 8009b70:	461a      	mov	r2, r3
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fbe6 	bl	800a344 <__lshift>
 8009b78:	4606      	mov	r6, r0
 8009b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d069      	beq.n	8009c54 <_dtoa_r+0x924>
 8009b80:	4631      	mov	r1, r6
 8009b82:	4658      	mov	r0, fp
 8009b84:	f000 fc4a 	bl	800a41c <__mcmp>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	da63      	bge.n	8009c54 <_dtoa_r+0x924>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	4659      	mov	r1, fp
 8009b90:	220a      	movs	r2, #10
 8009b92:	4620      	mov	r0, r4
 8009b94:	f000 fa26 	bl	8009fe4 <__multadd>
 8009b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009b9e:	4683      	mov	fp, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 818f 	beq.w	8009ec4 <_dtoa_r+0xb94>
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	2300      	movs	r3, #0
 8009baa:	220a      	movs	r2, #10
 8009bac:	4620      	mov	r0, r4
 8009bae:	f000 fa19 	bl	8009fe4 <__multadd>
 8009bb2:	f1b9 0f00 	cmp.w	r9, #0
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	f300 808e 	bgt.w	8009cd8 <_dtoa_r+0x9a8>
 8009bbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	dc50      	bgt.n	8009c64 <_dtoa_r+0x934>
 8009bc2:	e089      	b.n	8009cd8 <_dtoa_r+0x9a8>
 8009bc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009bca:	e75d      	b.n	8009a88 <_dtoa_r+0x758>
 8009bcc:	9b06      	ldr	r3, [sp, #24]
 8009bce:	1e5e      	subs	r6, r3, #1
 8009bd0:	9b08      	ldr	r3, [sp, #32]
 8009bd2:	42b3      	cmp	r3, r6
 8009bd4:	bfbf      	itttt	lt
 8009bd6:	9b08      	ldrlt	r3, [sp, #32]
 8009bd8:	9608      	strlt	r6, [sp, #32]
 8009bda:	1af2      	sublt	r2, r6, r3
 8009bdc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009bde:	bfb6      	itet	lt
 8009be0:	189b      	addlt	r3, r3, r2
 8009be2:	1b9e      	subge	r6, r3, r6
 8009be4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009be6:	9b06      	ldr	r3, [sp, #24]
 8009be8:	bfb8      	it	lt
 8009bea:	2600      	movlt	r6, #0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	bfb5      	itete	lt
 8009bf0:	eba8 0503 	sublt.w	r5, r8, r3
 8009bf4:	9b06      	ldrge	r3, [sp, #24]
 8009bf6:	2300      	movlt	r3, #0
 8009bf8:	4645      	movge	r5, r8
 8009bfa:	e747      	b.n	8009a8c <_dtoa_r+0x75c>
 8009bfc:	9e08      	ldr	r6, [sp, #32]
 8009bfe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009c00:	4645      	mov	r5, r8
 8009c02:	e74c      	b.n	8009a9e <_dtoa_r+0x76e>
 8009c04:	9a08      	ldr	r2, [sp, #32]
 8009c06:	e775      	b.n	8009af4 <_dtoa_r+0x7c4>
 8009c08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	dc18      	bgt.n	8009c40 <_dtoa_r+0x910>
 8009c0e:	9b04      	ldr	r3, [sp, #16]
 8009c10:	b9b3      	cbnz	r3, 8009c40 <_dtoa_r+0x910>
 8009c12:	9b05      	ldr	r3, [sp, #20]
 8009c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c18:	b9a3      	cbnz	r3, 8009c44 <_dtoa_r+0x914>
 8009c1a:	9b05      	ldr	r3, [sp, #20]
 8009c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c20:	0d1b      	lsrs	r3, r3, #20
 8009c22:	051b      	lsls	r3, r3, #20
 8009c24:	b12b      	cbz	r3, 8009c32 <_dtoa_r+0x902>
 8009c26:	9b07      	ldr	r3, [sp, #28]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	9307      	str	r3, [sp, #28]
 8009c2c:	f108 0801 	add.w	r8, r8, #1
 8009c30:	2301      	movs	r3, #1
 8009c32:	9308      	str	r3, [sp, #32]
 8009c34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f47f af74 	bne.w	8009b24 <_dtoa_r+0x7f4>
 8009c3c:	2001      	movs	r0, #1
 8009c3e:	e779      	b.n	8009b34 <_dtoa_r+0x804>
 8009c40:	2300      	movs	r3, #0
 8009c42:	e7f6      	b.n	8009c32 <_dtoa_r+0x902>
 8009c44:	9b04      	ldr	r3, [sp, #16]
 8009c46:	e7f4      	b.n	8009c32 <_dtoa_r+0x902>
 8009c48:	d085      	beq.n	8009b56 <_dtoa_r+0x826>
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	301c      	adds	r0, #28
 8009c4e:	e77d      	b.n	8009b4c <_dtoa_r+0x81c>
 8009c50:	40240000 	.word	0x40240000
 8009c54:	9b06      	ldr	r3, [sp, #24]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	dc38      	bgt.n	8009ccc <_dtoa_r+0x99c>
 8009c5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	dd35      	ble.n	8009ccc <_dtoa_r+0x99c>
 8009c60:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009c64:	f1b9 0f00 	cmp.w	r9, #0
 8009c68:	d10d      	bne.n	8009c86 <_dtoa_r+0x956>
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	464b      	mov	r3, r9
 8009c6e:	2205      	movs	r2, #5
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 f9b7 	bl	8009fe4 <__multadd>
 8009c76:	4601      	mov	r1, r0
 8009c78:	4606      	mov	r6, r0
 8009c7a:	4658      	mov	r0, fp
 8009c7c:	f000 fbce 	bl	800a41c <__mcmp>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	f73f adbd 	bgt.w	8009800 <_dtoa_r+0x4d0>
 8009c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c88:	9d03      	ldr	r5, [sp, #12]
 8009c8a:	ea6f 0a03 	mvn.w	sl, r3
 8009c8e:	f04f 0800 	mov.w	r8, #0
 8009c92:	4631      	mov	r1, r6
 8009c94:	4620      	mov	r0, r4
 8009c96:	f000 f983 	bl	8009fa0 <_Bfree>
 8009c9a:	2f00      	cmp	r7, #0
 8009c9c:	f43f aeb4 	beq.w	8009a08 <_dtoa_r+0x6d8>
 8009ca0:	f1b8 0f00 	cmp.w	r8, #0
 8009ca4:	d005      	beq.n	8009cb2 <_dtoa_r+0x982>
 8009ca6:	45b8      	cmp	r8, r7
 8009ca8:	d003      	beq.n	8009cb2 <_dtoa_r+0x982>
 8009caa:	4641      	mov	r1, r8
 8009cac:	4620      	mov	r0, r4
 8009cae:	f000 f977 	bl	8009fa0 <_Bfree>
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 f973 	bl	8009fa0 <_Bfree>
 8009cba:	e6a5      	b.n	8009a08 <_dtoa_r+0x6d8>
 8009cbc:	2600      	movs	r6, #0
 8009cbe:	4637      	mov	r7, r6
 8009cc0:	e7e1      	b.n	8009c86 <_dtoa_r+0x956>
 8009cc2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009cc4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009cc8:	4637      	mov	r7, r6
 8009cca:	e599      	b.n	8009800 <_dtoa_r+0x4d0>
 8009ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cce:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 80fd 	beq.w	8009ed2 <_dtoa_r+0xba2>
 8009cd8:	2d00      	cmp	r5, #0
 8009cda:	dd05      	ble.n	8009ce8 <_dtoa_r+0x9b8>
 8009cdc:	4639      	mov	r1, r7
 8009cde:	462a      	mov	r2, r5
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f000 fb2f 	bl	800a344 <__lshift>
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	9b08      	ldr	r3, [sp, #32]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d05c      	beq.n	8009da8 <_dtoa_r+0xa78>
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 f915 	bl	8009f20 <_Balloc>
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	b928      	cbnz	r0, 8009d06 <_dtoa_r+0x9d6>
 8009cfa:	4b80      	ldr	r3, [pc, #512]	; (8009efc <_dtoa_r+0xbcc>)
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d02:	f7ff bb2b 	b.w	800935c <_dtoa_r+0x2c>
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	3202      	adds	r2, #2
 8009d0a:	0092      	lsls	r2, r2, #2
 8009d0c:	f107 010c 	add.w	r1, r7, #12
 8009d10:	300c      	adds	r0, #12
 8009d12:	f7fe fddd 	bl	80088d0 <memcpy>
 8009d16:	2201      	movs	r2, #1
 8009d18:	4629      	mov	r1, r5
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 fb12 	bl	800a344 <__lshift>
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	3301      	adds	r3, #1
 8009d24:	9306      	str	r3, [sp, #24]
 8009d26:	9b03      	ldr	r3, [sp, #12]
 8009d28:	444b      	add	r3, r9
 8009d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	46b8      	mov	r8, r7
 8009d34:	9308      	str	r3, [sp, #32]
 8009d36:	4607      	mov	r7, r0
 8009d38:	9b06      	ldr	r3, [sp, #24]
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	4658      	mov	r0, fp
 8009d40:	9304      	str	r3, [sp, #16]
 8009d42:	f7ff fa67 	bl	8009214 <quorem>
 8009d46:	4603      	mov	r3, r0
 8009d48:	3330      	adds	r3, #48	; 0x30
 8009d4a:	9007      	str	r0, [sp, #28]
 8009d4c:	4641      	mov	r1, r8
 8009d4e:	4658      	mov	r0, fp
 8009d50:	930c      	str	r3, [sp, #48]	; 0x30
 8009d52:	f000 fb63 	bl	800a41c <__mcmp>
 8009d56:	463a      	mov	r2, r7
 8009d58:	4681      	mov	r9, r0
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 fb79 	bl	800a454 <__mdiff>
 8009d62:	68c2      	ldr	r2, [r0, #12]
 8009d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d66:	4605      	mov	r5, r0
 8009d68:	bb02      	cbnz	r2, 8009dac <_dtoa_r+0xa7c>
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	4658      	mov	r0, fp
 8009d6e:	f000 fb55 	bl	800a41c <__mcmp>
 8009d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d74:	4602      	mov	r2, r0
 8009d76:	4629      	mov	r1, r5
 8009d78:	4620      	mov	r0, r4
 8009d7a:	920a      	str	r2, [sp, #40]	; 0x28
 8009d7c:	930c      	str	r3, [sp, #48]	; 0x30
 8009d7e:	f000 f90f 	bl	8009fa0 <_Bfree>
 8009d82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d86:	9d06      	ldr	r5, [sp, #24]
 8009d88:	ea43 0102 	orr.w	r1, r3, r2
 8009d8c:	9b08      	ldr	r3, [sp, #32]
 8009d8e:	430b      	orrs	r3, r1
 8009d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d92:	d10d      	bne.n	8009db0 <_dtoa_r+0xa80>
 8009d94:	2b39      	cmp	r3, #57	; 0x39
 8009d96:	d029      	beq.n	8009dec <_dtoa_r+0xabc>
 8009d98:	f1b9 0f00 	cmp.w	r9, #0
 8009d9c:	dd01      	ble.n	8009da2 <_dtoa_r+0xa72>
 8009d9e:	9b07      	ldr	r3, [sp, #28]
 8009da0:	3331      	adds	r3, #49	; 0x31
 8009da2:	9a04      	ldr	r2, [sp, #16]
 8009da4:	7013      	strb	r3, [r2, #0]
 8009da6:	e774      	b.n	8009c92 <_dtoa_r+0x962>
 8009da8:	4638      	mov	r0, r7
 8009daa:	e7b9      	b.n	8009d20 <_dtoa_r+0x9f0>
 8009dac:	2201      	movs	r2, #1
 8009dae:	e7e2      	b.n	8009d76 <_dtoa_r+0xa46>
 8009db0:	f1b9 0f00 	cmp.w	r9, #0
 8009db4:	db06      	blt.n	8009dc4 <_dtoa_r+0xa94>
 8009db6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009db8:	ea41 0909 	orr.w	r9, r1, r9
 8009dbc:	9908      	ldr	r1, [sp, #32]
 8009dbe:	ea59 0101 	orrs.w	r1, r9, r1
 8009dc2:	d120      	bne.n	8009e06 <_dtoa_r+0xad6>
 8009dc4:	2a00      	cmp	r2, #0
 8009dc6:	ddec      	ble.n	8009da2 <_dtoa_r+0xa72>
 8009dc8:	4659      	mov	r1, fp
 8009dca:	2201      	movs	r2, #1
 8009dcc:	4620      	mov	r0, r4
 8009dce:	9306      	str	r3, [sp, #24]
 8009dd0:	f000 fab8 	bl	800a344 <__lshift>
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4683      	mov	fp, r0
 8009dd8:	f000 fb20 	bl	800a41c <__mcmp>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	9b06      	ldr	r3, [sp, #24]
 8009de0:	dc02      	bgt.n	8009de8 <_dtoa_r+0xab8>
 8009de2:	d1de      	bne.n	8009da2 <_dtoa_r+0xa72>
 8009de4:	07da      	lsls	r2, r3, #31
 8009de6:	d5dc      	bpl.n	8009da2 <_dtoa_r+0xa72>
 8009de8:	2b39      	cmp	r3, #57	; 0x39
 8009dea:	d1d8      	bne.n	8009d9e <_dtoa_r+0xa6e>
 8009dec:	9a04      	ldr	r2, [sp, #16]
 8009dee:	2339      	movs	r3, #57	; 0x39
 8009df0:	7013      	strb	r3, [r2, #0]
 8009df2:	462b      	mov	r3, r5
 8009df4:	461d      	mov	r5, r3
 8009df6:	3b01      	subs	r3, #1
 8009df8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009dfc:	2a39      	cmp	r2, #57	; 0x39
 8009dfe:	d050      	beq.n	8009ea2 <_dtoa_r+0xb72>
 8009e00:	3201      	adds	r2, #1
 8009e02:	701a      	strb	r2, [r3, #0]
 8009e04:	e745      	b.n	8009c92 <_dtoa_r+0x962>
 8009e06:	2a00      	cmp	r2, #0
 8009e08:	dd03      	ble.n	8009e12 <_dtoa_r+0xae2>
 8009e0a:	2b39      	cmp	r3, #57	; 0x39
 8009e0c:	d0ee      	beq.n	8009dec <_dtoa_r+0xabc>
 8009e0e:	3301      	adds	r3, #1
 8009e10:	e7c7      	b.n	8009da2 <_dtoa_r+0xa72>
 8009e12:	9a06      	ldr	r2, [sp, #24]
 8009e14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e1a:	428a      	cmp	r2, r1
 8009e1c:	d02a      	beq.n	8009e74 <_dtoa_r+0xb44>
 8009e1e:	4659      	mov	r1, fp
 8009e20:	2300      	movs	r3, #0
 8009e22:	220a      	movs	r2, #10
 8009e24:	4620      	mov	r0, r4
 8009e26:	f000 f8dd 	bl	8009fe4 <__multadd>
 8009e2a:	45b8      	cmp	r8, r7
 8009e2c:	4683      	mov	fp, r0
 8009e2e:	f04f 0300 	mov.w	r3, #0
 8009e32:	f04f 020a 	mov.w	r2, #10
 8009e36:	4641      	mov	r1, r8
 8009e38:	4620      	mov	r0, r4
 8009e3a:	d107      	bne.n	8009e4c <_dtoa_r+0xb1c>
 8009e3c:	f000 f8d2 	bl	8009fe4 <__multadd>
 8009e40:	4680      	mov	r8, r0
 8009e42:	4607      	mov	r7, r0
 8009e44:	9b06      	ldr	r3, [sp, #24]
 8009e46:	3301      	adds	r3, #1
 8009e48:	9306      	str	r3, [sp, #24]
 8009e4a:	e775      	b.n	8009d38 <_dtoa_r+0xa08>
 8009e4c:	f000 f8ca 	bl	8009fe4 <__multadd>
 8009e50:	4639      	mov	r1, r7
 8009e52:	4680      	mov	r8, r0
 8009e54:	2300      	movs	r3, #0
 8009e56:	220a      	movs	r2, #10
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 f8c3 	bl	8009fe4 <__multadd>
 8009e5e:	4607      	mov	r7, r0
 8009e60:	e7f0      	b.n	8009e44 <_dtoa_r+0xb14>
 8009e62:	f1b9 0f00 	cmp.w	r9, #0
 8009e66:	9a03      	ldr	r2, [sp, #12]
 8009e68:	bfcc      	ite	gt
 8009e6a:	464d      	movgt	r5, r9
 8009e6c:	2501      	movle	r5, #1
 8009e6e:	4415      	add	r5, r2
 8009e70:	f04f 0800 	mov.w	r8, #0
 8009e74:	4659      	mov	r1, fp
 8009e76:	2201      	movs	r2, #1
 8009e78:	4620      	mov	r0, r4
 8009e7a:	9306      	str	r3, [sp, #24]
 8009e7c:	f000 fa62 	bl	800a344 <__lshift>
 8009e80:	4631      	mov	r1, r6
 8009e82:	4683      	mov	fp, r0
 8009e84:	f000 faca 	bl	800a41c <__mcmp>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	dcb2      	bgt.n	8009df2 <_dtoa_r+0xac2>
 8009e8c:	d102      	bne.n	8009e94 <_dtoa_r+0xb64>
 8009e8e:	9b06      	ldr	r3, [sp, #24]
 8009e90:	07db      	lsls	r3, r3, #31
 8009e92:	d4ae      	bmi.n	8009df2 <_dtoa_r+0xac2>
 8009e94:	462b      	mov	r3, r5
 8009e96:	461d      	mov	r5, r3
 8009e98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e9c:	2a30      	cmp	r2, #48	; 0x30
 8009e9e:	d0fa      	beq.n	8009e96 <_dtoa_r+0xb66>
 8009ea0:	e6f7      	b.n	8009c92 <_dtoa_r+0x962>
 8009ea2:	9a03      	ldr	r2, [sp, #12]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d1a5      	bne.n	8009df4 <_dtoa_r+0xac4>
 8009ea8:	f10a 0a01 	add.w	sl, sl, #1
 8009eac:	2331      	movs	r3, #49	; 0x31
 8009eae:	e779      	b.n	8009da4 <_dtoa_r+0xa74>
 8009eb0:	4b13      	ldr	r3, [pc, #76]	; (8009f00 <_dtoa_r+0xbd0>)
 8009eb2:	f7ff baac 	b.w	800940e <_dtoa_r+0xde>
 8009eb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f47f aa83 	bne.w	80093c4 <_dtoa_r+0x94>
 8009ebe:	4b11      	ldr	r3, [pc, #68]	; (8009f04 <_dtoa_r+0xbd4>)
 8009ec0:	f7ff baa5 	b.w	800940e <_dtoa_r+0xde>
 8009ec4:	f1b9 0f00 	cmp.w	r9, #0
 8009ec8:	dc03      	bgt.n	8009ed2 <_dtoa_r+0xba2>
 8009eca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	f73f aec9 	bgt.w	8009c64 <_dtoa_r+0x934>
 8009ed2:	9d03      	ldr	r5, [sp, #12]
 8009ed4:	4631      	mov	r1, r6
 8009ed6:	4658      	mov	r0, fp
 8009ed8:	f7ff f99c 	bl	8009214 <quorem>
 8009edc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009ee0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ee4:	9a03      	ldr	r2, [sp, #12]
 8009ee6:	1aaa      	subs	r2, r5, r2
 8009ee8:	4591      	cmp	r9, r2
 8009eea:	ddba      	ble.n	8009e62 <_dtoa_r+0xb32>
 8009eec:	4659      	mov	r1, fp
 8009eee:	2300      	movs	r3, #0
 8009ef0:	220a      	movs	r2, #10
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 f876 	bl	8009fe4 <__multadd>
 8009ef8:	4683      	mov	fp, r0
 8009efa:	e7eb      	b.n	8009ed4 <_dtoa_r+0xba4>
 8009efc:	0800bc53 	.word	0x0800bc53
 8009f00:	0800bbac 	.word	0x0800bbac
 8009f04:	0800bbd0 	.word	0x0800bbd0

08009f08 <_localeconv_r>:
 8009f08:	4800      	ldr	r0, [pc, #0]	; (8009f0c <_localeconv_r+0x4>)
 8009f0a:	4770      	bx	lr
 8009f0c:	2000018c 	.word	0x2000018c

08009f10 <malloc>:
 8009f10:	4b02      	ldr	r3, [pc, #8]	; (8009f1c <malloc+0xc>)
 8009f12:	4601      	mov	r1, r0
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f000 bbdf 	b.w	800a6d8 <_malloc_r>
 8009f1a:	bf00      	nop
 8009f1c:	20000038 	.word	0x20000038

08009f20 <_Balloc>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f24:	4604      	mov	r4, r0
 8009f26:	460d      	mov	r5, r1
 8009f28:	b976      	cbnz	r6, 8009f48 <_Balloc+0x28>
 8009f2a:	2010      	movs	r0, #16
 8009f2c:	f7ff fff0 	bl	8009f10 <malloc>
 8009f30:	4602      	mov	r2, r0
 8009f32:	6260      	str	r0, [r4, #36]	; 0x24
 8009f34:	b920      	cbnz	r0, 8009f40 <_Balloc+0x20>
 8009f36:	4b18      	ldr	r3, [pc, #96]	; (8009f98 <_Balloc+0x78>)
 8009f38:	4818      	ldr	r0, [pc, #96]	; (8009f9c <_Balloc+0x7c>)
 8009f3a:	2166      	movs	r1, #102	; 0x66
 8009f3c:	f000 fd92 	bl	800aa64 <__assert_func>
 8009f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f44:	6006      	str	r6, [r0, #0]
 8009f46:	60c6      	str	r6, [r0, #12]
 8009f48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f4a:	68f3      	ldr	r3, [r6, #12]
 8009f4c:	b183      	cbz	r3, 8009f70 <_Balloc+0x50>
 8009f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f56:	b9b8      	cbnz	r0, 8009f88 <_Balloc+0x68>
 8009f58:	2101      	movs	r1, #1
 8009f5a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f5e:	1d72      	adds	r2, r6, #5
 8009f60:	0092      	lsls	r2, r2, #2
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 fb58 	bl	800a618 <_calloc_r>
 8009f68:	b160      	cbz	r0, 8009f84 <_Balloc+0x64>
 8009f6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f6e:	e00e      	b.n	8009f8e <_Balloc+0x6e>
 8009f70:	2221      	movs	r2, #33	; 0x21
 8009f72:	2104      	movs	r1, #4
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 fb4f 	bl	800a618 <_calloc_r>
 8009f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f7c:	60f0      	str	r0, [r6, #12]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1e4      	bne.n	8009f4e <_Balloc+0x2e>
 8009f84:	2000      	movs	r0, #0
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	6802      	ldr	r2, [r0, #0]
 8009f8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f94:	e7f7      	b.n	8009f86 <_Balloc+0x66>
 8009f96:	bf00      	nop
 8009f98:	0800bbdd 	.word	0x0800bbdd
 8009f9c:	0800bc64 	.word	0x0800bc64

08009fa0 <_Bfree>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	b976      	cbnz	r6, 8009fc8 <_Bfree+0x28>
 8009faa:	2010      	movs	r0, #16
 8009fac:	f7ff ffb0 	bl	8009f10 <malloc>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	6268      	str	r0, [r5, #36]	; 0x24
 8009fb4:	b920      	cbnz	r0, 8009fc0 <_Bfree+0x20>
 8009fb6:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <_Bfree+0x3c>)
 8009fb8:	4809      	ldr	r0, [pc, #36]	; (8009fe0 <_Bfree+0x40>)
 8009fba:	218a      	movs	r1, #138	; 0x8a
 8009fbc:	f000 fd52 	bl	800aa64 <__assert_func>
 8009fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fc4:	6006      	str	r6, [r0, #0]
 8009fc6:	60c6      	str	r6, [r0, #12]
 8009fc8:	b13c      	cbz	r4, 8009fda <_Bfree+0x3a>
 8009fca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fcc:	6862      	ldr	r2, [r4, #4]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fd4:	6021      	str	r1, [r4, #0]
 8009fd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	0800bbdd 	.word	0x0800bbdd
 8009fe0:	0800bc64 	.word	0x0800bc64

08009fe4 <__multadd>:
 8009fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	690e      	ldr	r6, [r1, #16]
 8009fea:	4607      	mov	r7, r0
 8009fec:	4698      	mov	r8, r3
 8009fee:	460c      	mov	r4, r1
 8009ff0:	f101 0014 	add.w	r0, r1, #20
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	6805      	ldr	r5, [r0, #0]
 8009ff8:	b2a9      	uxth	r1, r5
 8009ffa:	fb02 8101 	mla	r1, r2, r1, r8
 8009ffe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a002:	0c2d      	lsrs	r5, r5, #16
 800a004:	fb02 c505 	mla	r5, r2, r5, ip
 800a008:	b289      	uxth	r1, r1
 800a00a:	3301      	adds	r3, #1
 800a00c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a010:	429e      	cmp	r6, r3
 800a012:	f840 1b04 	str.w	r1, [r0], #4
 800a016:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a01a:	dcec      	bgt.n	8009ff6 <__multadd+0x12>
 800a01c:	f1b8 0f00 	cmp.w	r8, #0
 800a020:	d022      	beq.n	800a068 <__multadd+0x84>
 800a022:	68a3      	ldr	r3, [r4, #8]
 800a024:	42b3      	cmp	r3, r6
 800a026:	dc19      	bgt.n	800a05c <__multadd+0x78>
 800a028:	6861      	ldr	r1, [r4, #4]
 800a02a:	4638      	mov	r0, r7
 800a02c:	3101      	adds	r1, #1
 800a02e:	f7ff ff77 	bl	8009f20 <_Balloc>
 800a032:	4605      	mov	r5, r0
 800a034:	b928      	cbnz	r0, 800a042 <__multadd+0x5e>
 800a036:	4602      	mov	r2, r0
 800a038:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <__multadd+0x8c>)
 800a03a:	480e      	ldr	r0, [pc, #56]	; (800a074 <__multadd+0x90>)
 800a03c:	21b5      	movs	r1, #181	; 0xb5
 800a03e:	f000 fd11 	bl	800aa64 <__assert_func>
 800a042:	6922      	ldr	r2, [r4, #16]
 800a044:	3202      	adds	r2, #2
 800a046:	f104 010c 	add.w	r1, r4, #12
 800a04a:	0092      	lsls	r2, r2, #2
 800a04c:	300c      	adds	r0, #12
 800a04e:	f7fe fc3f 	bl	80088d0 <memcpy>
 800a052:	4621      	mov	r1, r4
 800a054:	4638      	mov	r0, r7
 800a056:	f7ff ffa3 	bl	8009fa0 <_Bfree>
 800a05a:	462c      	mov	r4, r5
 800a05c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a060:	3601      	adds	r6, #1
 800a062:	f8c3 8014 	str.w	r8, [r3, #20]
 800a066:	6126      	str	r6, [r4, #16]
 800a068:	4620      	mov	r0, r4
 800a06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a06e:	bf00      	nop
 800a070:	0800bc53 	.word	0x0800bc53
 800a074:	0800bc64 	.word	0x0800bc64

0800a078 <__hi0bits>:
 800a078:	0c03      	lsrs	r3, r0, #16
 800a07a:	041b      	lsls	r3, r3, #16
 800a07c:	b9d3      	cbnz	r3, 800a0b4 <__hi0bits+0x3c>
 800a07e:	0400      	lsls	r0, r0, #16
 800a080:	2310      	movs	r3, #16
 800a082:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a086:	bf04      	itt	eq
 800a088:	0200      	lsleq	r0, r0, #8
 800a08a:	3308      	addeq	r3, #8
 800a08c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a090:	bf04      	itt	eq
 800a092:	0100      	lsleq	r0, r0, #4
 800a094:	3304      	addeq	r3, #4
 800a096:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a09a:	bf04      	itt	eq
 800a09c:	0080      	lsleq	r0, r0, #2
 800a09e:	3302      	addeq	r3, #2
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	db05      	blt.n	800a0b0 <__hi0bits+0x38>
 800a0a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a0a8:	f103 0301 	add.w	r3, r3, #1
 800a0ac:	bf08      	it	eq
 800a0ae:	2320      	moveq	r3, #32
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	4770      	bx	lr
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	e7e4      	b.n	800a082 <__hi0bits+0xa>

0800a0b8 <__lo0bits>:
 800a0b8:	6803      	ldr	r3, [r0, #0]
 800a0ba:	f013 0207 	ands.w	r2, r3, #7
 800a0be:	4601      	mov	r1, r0
 800a0c0:	d00b      	beq.n	800a0da <__lo0bits+0x22>
 800a0c2:	07da      	lsls	r2, r3, #31
 800a0c4:	d424      	bmi.n	800a110 <__lo0bits+0x58>
 800a0c6:	0798      	lsls	r0, r3, #30
 800a0c8:	bf49      	itett	mi
 800a0ca:	085b      	lsrmi	r3, r3, #1
 800a0cc:	089b      	lsrpl	r3, r3, #2
 800a0ce:	2001      	movmi	r0, #1
 800a0d0:	600b      	strmi	r3, [r1, #0]
 800a0d2:	bf5c      	itt	pl
 800a0d4:	600b      	strpl	r3, [r1, #0]
 800a0d6:	2002      	movpl	r0, #2
 800a0d8:	4770      	bx	lr
 800a0da:	b298      	uxth	r0, r3
 800a0dc:	b9b0      	cbnz	r0, 800a10c <__lo0bits+0x54>
 800a0de:	0c1b      	lsrs	r3, r3, #16
 800a0e0:	2010      	movs	r0, #16
 800a0e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a0e6:	bf04      	itt	eq
 800a0e8:	0a1b      	lsreq	r3, r3, #8
 800a0ea:	3008      	addeq	r0, #8
 800a0ec:	071a      	lsls	r2, r3, #28
 800a0ee:	bf04      	itt	eq
 800a0f0:	091b      	lsreq	r3, r3, #4
 800a0f2:	3004      	addeq	r0, #4
 800a0f4:	079a      	lsls	r2, r3, #30
 800a0f6:	bf04      	itt	eq
 800a0f8:	089b      	lsreq	r3, r3, #2
 800a0fa:	3002      	addeq	r0, #2
 800a0fc:	07da      	lsls	r2, r3, #31
 800a0fe:	d403      	bmi.n	800a108 <__lo0bits+0x50>
 800a100:	085b      	lsrs	r3, r3, #1
 800a102:	f100 0001 	add.w	r0, r0, #1
 800a106:	d005      	beq.n	800a114 <__lo0bits+0x5c>
 800a108:	600b      	str	r3, [r1, #0]
 800a10a:	4770      	bx	lr
 800a10c:	4610      	mov	r0, r2
 800a10e:	e7e8      	b.n	800a0e2 <__lo0bits+0x2a>
 800a110:	2000      	movs	r0, #0
 800a112:	4770      	bx	lr
 800a114:	2020      	movs	r0, #32
 800a116:	4770      	bx	lr

0800a118 <__i2b>:
 800a118:	b510      	push	{r4, lr}
 800a11a:	460c      	mov	r4, r1
 800a11c:	2101      	movs	r1, #1
 800a11e:	f7ff feff 	bl	8009f20 <_Balloc>
 800a122:	4602      	mov	r2, r0
 800a124:	b928      	cbnz	r0, 800a132 <__i2b+0x1a>
 800a126:	4b05      	ldr	r3, [pc, #20]	; (800a13c <__i2b+0x24>)
 800a128:	4805      	ldr	r0, [pc, #20]	; (800a140 <__i2b+0x28>)
 800a12a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a12e:	f000 fc99 	bl	800aa64 <__assert_func>
 800a132:	2301      	movs	r3, #1
 800a134:	6144      	str	r4, [r0, #20]
 800a136:	6103      	str	r3, [r0, #16]
 800a138:	bd10      	pop	{r4, pc}
 800a13a:	bf00      	nop
 800a13c:	0800bc53 	.word	0x0800bc53
 800a140:	0800bc64 	.word	0x0800bc64

0800a144 <__multiply>:
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	4614      	mov	r4, r2
 800a14a:	690a      	ldr	r2, [r1, #16]
 800a14c:	6923      	ldr	r3, [r4, #16]
 800a14e:	429a      	cmp	r2, r3
 800a150:	bfb8      	it	lt
 800a152:	460b      	movlt	r3, r1
 800a154:	460d      	mov	r5, r1
 800a156:	bfbc      	itt	lt
 800a158:	4625      	movlt	r5, r4
 800a15a:	461c      	movlt	r4, r3
 800a15c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a160:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a164:	68ab      	ldr	r3, [r5, #8]
 800a166:	6869      	ldr	r1, [r5, #4]
 800a168:	eb0a 0709 	add.w	r7, sl, r9
 800a16c:	42bb      	cmp	r3, r7
 800a16e:	b085      	sub	sp, #20
 800a170:	bfb8      	it	lt
 800a172:	3101      	addlt	r1, #1
 800a174:	f7ff fed4 	bl	8009f20 <_Balloc>
 800a178:	b930      	cbnz	r0, 800a188 <__multiply+0x44>
 800a17a:	4602      	mov	r2, r0
 800a17c:	4b42      	ldr	r3, [pc, #264]	; (800a288 <__multiply+0x144>)
 800a17e:	4843      	ldr	r0, [pc, #268]	; (800a28c <__multiply+0x148>)
 800a180:	f240 115d 	movw	r1, #349	; 0x15d
 800a184:	f000 fc6e 	bl	800aa64 <__assert_func>
 800a188:	f100 0614 	add.w	r6, r0, #20
 800a18c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a190:	4633      	mov	r3, r6
 800a192:	2200      	movs	r2, #0
 800a194:	4543      	cmp	r3, r8
 800a196:	d31e      	bcc.n	800a1d6 <__multiply+0x92>
 800a198:	f105 0c14 	add.w	ip, r5, #20
 800a19c:	f104 0314 	add.w	r3, r4, #20
 800a1a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a1a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a1a8:	9202      	str	r2, [sp, #8]
 800a1aa:	ebac 0205 	sub.w	r2, ip, r5
 800a1ae:	3a15      	subs	r2, #21
 800a1b0:	f022 0203 	bic.w	r2, r2, #3
 800a1b4:	3204      	adds	r2, #4
 800a1b6:	f105 0115 	add.w	r1, r5, #21
 800a1ba:	458c      	cmp	ip, r1
 800a1bc:	bf38      	it	cc
 800a1be:	2204      	movcc	r2, #4
 800a1c0:	9201      	str	r2, [sp, #4]
 800a1c2:	9a02      	ldr	r2, [sp, #8]
 800a1c4:	9303      	str	r3, [sp, #12]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d808      	bhi.n	800a1dc <__multiply+0x98>
 800a1ca:	2f00      	cmp	r7, #0
 800a1cc:	dc55      	bgt.n	800a27a <__multiply+0x136>
 800a1ce:	6107      	str	r7, [r0, #16]
 800a1d0:	b005      	add	sp, #20
 800a1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d6:	f843 2b04 	str.w	r2, [r3], #4
 800a1da:	e7db      	b.n	800a194 <__multiply+0x50>
 800a1dc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1e0:	f1ba 0f00 	cmp.w	sl, #0
 800a1e4:	d020      	beq.n	800a228 <__multiply+0xe4>
 800a1e6:	f105 0e14 	add.w	lr, r5, #20
 800a1ea:	46b1      	mov	r9, r6
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a1f2:	f8d9 b000 	ldr.w	fp, [r9]
 800a1f6:	b2a1      	uxth	r1, r4
 800a1f8:	fa1f fb8b 	uxth.w	fp, fp
 800a1fc:	fb0a b101 	mla	r1, sl, r1, fp
 800a200:	4411      	add	r1, r2
 800a202:	f8d9 2000 	ldr.w	r2, [r9]
 800a206:	0c24      	lsrs	r4, r4, #16
 800a208:	0c12      	lsrs	r2, r2, #16
 800a20a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a20e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a212:	b289      	uxth	r1, r1
 800a214:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a218:	45f4      	cmp	ip, lr
 800a21a:	f849 1b04 	str.w	r1, [r9], #4
 800a21e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a222:	d8e4      	bhi.n	800a1ee <__multiply+0xaa>
 800a224:	9901      	ldr	r1, [sp, #4]
 800a226:	5072      	str	r2, [r6, r1]
 800a228:	9a03      	ldr	r2, [sp, #12]
 800a22a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a22e:	3304      	adds	r3, #4
 800a230:	f1b9 0f00 	cmp.w	r9, #0
 800a234:	d01f      	beq.n	800a276 <__multiply+0x132>
 800a236:	6834      	ldr	r4, [r6, #0]
 800a238:	f105 0114 	add.w	r1, r5, #20
 800a23c:	46b6      	mov	lr, r6
 800a23e:	f04f 0a00 	mov.w	sl, #0
 800a242:	880a      	ldrh	r2, [r1, #0]
 800a244:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a248:	fb09 b202 	mla	r2, r9, r2, fp
 800a24c:	4492      	add	sl, r2
 800a24e:	b2a4      	uxth	r4, r4
 800a250:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a254:	f84e 4b04 	str.w	r4, [lr], #4
 800a258:	f851 4b04 	ldr.w	r4, [r1], #4
 800a25c:	f8be 2000 	ldrh.w	r2, [lr]
 800a260:	0c24      	lsrs	r4, r4, #16
 800a262:	fb09 2404 	mla	r4, r9, r4, r2
 800a266:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a26a:	458c      	cmp	ip, r1
 800a26c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a270:	d8e7      	bhi.n	800a242 <__multiply+0xfe>
 800a272:	9a01      	ldr	r2, [sp, #4]
 800a274:	50b4      	str	r4, [r6, r2]
 800a276:	3604      	adds	r6, #4
 800a278:	e7a3      	b.n	800a1c2 <__multiply+0x7e>
 800a27a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1a5      	bne.n	800a1ce <__multiply+0x8a>
 800a282:	3f01      	subs	r7, #1
 800a284:	e7a1      	b.n	800a1ca <__multiply+0x86>
 800a286:	bf00      	nop
 800a288:	0800bc53 	.word	0x0800bc53
 800a28c:	0800bc64 	.word	0x0800bc64

0800a290 <__pow5mult>:
 800a290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a294:	4615      	mov	r5, r2
 800a296:	f012 0203 	ands.w	r2, r2, #3
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	d007      	beq.n	800a2b0 <__pow5mult+0x20>
 800a2a0:	4c25      	ldr	r4, [pc, #148]	; (800a338 <__pow5mult+0xa8>)
 800a2a2:	3a01      	subs	r2, #1
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2aa:	f7ff fe9b 	bl	8009fe4 <__multadd>
 800a2ae:	4607      	mov	r7, r0
 800a2b0:	10ad      	asrs	r5, r5, #2
 800a2b2:	d03d      	beq.n	800a330 <__pow5mult+0xa0>
 800a2b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a2b6:	b97c      	cbnz	r4, 800a2d8 <__pow5mult+0x48>
 800a2b8:	2010      	movs	r0, #16
 800a2ba:	f7ff fe29 	bl	8009f10 <malloc>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	6270      	str	r0, [r6, #36]	; 0x24
 800a2c2:	b928      	cbnz	r0, 800a2d0 <__pow5mult+0x40>
 800a2c4:	4b1d      	ldr	r3, [pc, #116]	; (800a33c <__pow5mult+0xac>)
 800a2c6:	481e      	ldr	r0, [pc, #120]	; (800a340 <__pow5mult+0xb0>)
 800a2c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a2cc:	f000 fbca 	bl	800aa64 <__assert_func>
 800a2d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2d4:	6004      	str	r4, [r0, #0]
 800a2d6:	60c4      	str	r4, [r0, #12]
 800a2d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2e0:	b94c      	cbnz	r4, 800a2f6 <__pow5mult+0x66>
 800a2e2:	f240 2171 	movw	r1, #625	; 0x271
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f7ff ff16 	bl	800a118 <__i2b>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	6003      	str	r3, [r0, #0]
 800a2f6:	f04f 0900 	mov.w	r9, #0
 800a2fa:	07eb      	lsls	r3, r5, #31
 800a2fc:	d50a      	bpl.n	800a314 <__pow5mult+0x84>
 800a2fe:	4639      	mov	r1, r7
 800a300:	4622      	mov	r2, r4
 800a302:	4630      	mov	r0, r6
 800a304:	f7ff ff1e 	bl	800a144 <__multiply>
 800a308:	4639      	mov	r1, r7
 800a30a:	4680      	mov	r8, r0
 800a30c:	4630      	mov	r0, r6
 800a30e:	f7ff fe47 	bl	8009fa0 <_Bfree>
 800a312:	4647      	mov	r7, r8
 800a314:	106d      	asrs	r5, r5, #1
 800a316:	d00b      	beq.n	800a330 <__pow5mult+0xa0>
 800a318:	6820      	ldr	r0, [r4, #0]
 800a31a:	b938      	cbnz	r0, 800a32c <__pow5mult+0x9c>
 800a31c:	4622      	mov	r2, r4
 800a31e:	4621      	mov	r1, r4
 800a320:	4630      	mov	r0, r6
 800a322:	f7ff ff0f 	bl	800a144 <__multiply>
 800a326:	6020      	str	r0, [r4, #0]
 800a328:	f8c0 9000 	str.w	r9, [r0]
 800a32c:	4604      	mov	r4, r0
 800a32e:	e7e4      	b.n	800a2fa <__pow5mult+0x6a>
 800a330:	4638      	mov	r0, r7
 800a332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a336:	bf00      	nop
 800a338:	0800bdb8 	.word	0x0800bdb8
 800a33c:	0800bbdd 	.word	0x0800bbdd
 800a340:	0800bc64 	.word	0x0800bc64

0800a344 <__lshift>:
 800a344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a348:	460c      	mov	r4, r1
 800a34a:	6849      	ldr	r1, [r1, #4]
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a352:	68a3      	ldr	r3, [r4, #8]
 800a354:	4607      	mov	r7, r0
 800a356:	4691      	mov	r9, r2
 800a358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a35c:	f108 0601 	add.w	r6, r8, #1
 800a360:	42b3      	cmp	r3, r6
 800a362:	db0b      	blt.n	800a37c <__lshift+0x38>
 800a364:	4638      	mov	r0, r7
 800a366:	f7ff fddb 	bl	8009f20 <_Balloc>
 800a36a:	4605      	mov	r5, r0
 800a36c:	b948      	cbnz	r0, 800a382 <__lshift+0x3e>
 800a36e:	4602      	mov	r2, r0
 800a370:	4b28      	ldr	r3, [pc, #160]	; (800a414 <__lshift+0xd0>)
 800a372:	4829      	ldr	r0, [pc, #164]	; (800a418 <__lshift+0xd4>)
 800a374:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a378:	f000 fb74 	bl	800aa64 <__assert_func>
 800a37c:	3101      	adds	r1, #1
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	e7ee      	b.n	800a360 <__lshift+0x1c>
 800a382:	2300      	movs	r3, #0
 800a384:	f100 0114 	add.w	r1, r0, #20
 800a388:	f100 0210 	add.w	r2, r0, #16
 800a38c:	4618      	mov	r0, r3
 800a38e:	4553      	cmp	r3, sl
 800a390:	db33      	blt.n	800a3fa <__lshift+0xb6>
 800a392:	6920      	ldr	r0, [r4, #16]
 800a394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a398:	f104 0314 	add.w	r3, r4, #20
 800a39c:	f019 091f 	ands.w	r9, r9, #31
 800a3a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3a8:	d02b      	beq.n	800a402 <__lshift+0xbe>
 800a3aa:	f1c9 0e20 	rsb	lr, r9, #32
 800a3ae:	468a      	mov	sl, r1
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	6818      	ldr	r0, [r3, #0]
 800a3b4:	fa00 f009 	lsl.w	r0, r0, r9
 800a3b8:	4302      	orrs	r2, r0
 800a3ba:	f84a 2b04 	str.w	r2, [sl], #4
 800a3be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c2:	459c      	cmp	ip, r3
 800a3c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3c8:	d8f3      	bhi.n	800a3b2 <__lshift+0x6e>
 800a3ca:	ebac 0304 	sub.w	r3, ip, r4
 800a3ce:	3b15      	subs	r3, #21
 800a3d0:	f023 0303 	bic.w	r3, r3, #3
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	f104 0015 	add.w	r0, r4, #21
 800a3da:	4584      	cmp	ip, r0
 800a3dc:	bf38      	it	cc
 800a3de:	2304      	movcc	r3, #4
 800a3e0:	50ca      	str	r2, [r1, r3]
 800a3e2:	b10a      	cbz	r2, 800a3e8 <__lshift+0xa4>
 800a3e4:	f108 0602 	add.w	r6, r8, #2
 800a3e8:	3e01      	subs	r6, #1
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	612e      	str	r6, [r5, #16]
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	f7ff fdd6 	bl	8009fa0 <_Bfree>
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3fe:	3301      	adds	r3, #1
 800a400:	e7c5      	b.n	800a38e <__lshift+0x4a>
 800a402:	3904      	subs	r1, #4
 800a404:	f853 2b04 	ldr.w	r2, [r3], #4
 800a408:	f841 2f04 	str.w	r2, [r1, #4]!
 800a40c:	459c      	cmp	ip, r3
 800a40e:	d8f9      	bhi.n	800a404 <__lshift+0xc0>
 800a410:	e7ea      	b.n	800a3e8 <__lshift+0xa4>
 800a412:	bf00      	nop
 800a414:	0800bc53 	.word	0x0800bc53
 800a418:	0800bc64 	.word	0x0800bc64

0800a41c <__mcmp>:
 800a41c:	b530      	push	{r4, r5, lr}
 800a41e:	6902      	ldr	r2, [r0, #16]
 800a420:	690c      	ldr	r4, [r1, #16]
 800a422:	1b12      	subs	r2, r2, r4
 800a424:	d10e      	bne.n	800a444 <__mcmp+0x28>
 800a426:	f100 0314 	add.w	r3, r0, #20
 800a42a:	3114      	adds	r1, #20
 800a42c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a430:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a434:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a438:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a43c:	42a5      	cmp	r5, r4
 800a43e:	d003      	beq.n	800a448 <__mcmp+0x2c>
 800a440:	d305      	bcc.n	800a44e <__mcmp+0x32>
 800a442:	2201      	movs	r2, #1
 800a444:	4610      	mov	r0, r2
 800a446:	bd30      	pop	{r4, r5, pc}
 800a448:	4283      	cmp	r3, r0
 800a44a:	d3f3      	bcc.n	800a434 <__mcmp+0x18>
 800a44c:	e7fa      	b.n	800a444 <__mcmp+0x28>
 800a44e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a452:	e7f7      	b.n	800a444 <__mcmp+0x28>

0800a454 <__mdiff>:
 800a454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a458:	460c      	mov	r4, r1
 800a45a:	4606      	mov	r6, r0
 800a45c:	4611      	mov	r1, r2
 800a45e:	4620      	mov	r0, r4
 800a460:	4617      	mov	r7, r2
 800a462:	f7ff ffdb 	bl	800a41c <__mcmp>
 800a466:	1e05      	subs	r5, r0, #0
 800a468:	d110      	bne.n	800a48c <__mdiff+0x38>
 800a46a:	4629      	mov	r1, r5
 800a46c:	4630      	mov	r0, r6
 800a46e:	f7ff fd57 	bl	8009f20 <_Balloc>
 800a472:	b930      	cbnz	r0, 800a482 <__mdiff+0x2e>
 800a474:	4b39      	ldr	r3, [pc, #228]	; (800a55c <__mdiff+0x108>)
 800a476:	4602      	mov	r2, r0
 800a478:	f240 2132 	movw	r1, #562	; 0x232
 800a47c:	4838      	ldr	r0, [pc, #224]	; (800a560 <__mdiff+0x10c>)
 800a47e:	f000 faf1 	bl	800aa64 <__assert_func>
 800a482:	2301      	movs	r3, #1
 800a484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	bfa4      	itt	ge
 800a48e:	463b      	movge	r3, r7
 800a490:	4627      	movge	r7, r4
 800a492:	4630      	mov	r0, r6
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	bfa6      	itte	ge
 800a498:	461c      	movge	r4, r3
 800a49a:	2500      	movge	r5, #0
 800a49c:	2501      	movlt	r5, #1
 800a49e:	f7ff fd3f 	bl	8009f20 <_Balloc>
 800a4a2:	b920      	cbnz	r0, 800a4ae <__mdiff+0x5a>
 800a4a4:	4b2d      	ldr	r3, [pc, #180]	; (800a55c <__mdiff+0x108>)
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a4ac:	e7e6      	b.n	800a47c <__mdiff+0x28>
 800a4ae:	693e      	ldr	r6, [r7, #16]
 800a4b0:	60c5      	str	r5, [r0, #12]
 800a4b2:	6925      	ldr	r5, [r4, #16]
 800a4b4:	f107 0114 	add.w	r1, r7, #20
 800a4b8:	f104 0914 	add.w	r9, r4, #20
 800a4bc:	f100 0e14 	add.w	lr, r0, #20
 800a4c0:	f107 0210 	add.w	r2, r7, #16
 800a4c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a4c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a4cc:	46f2      	mov	sl, lr
 800a4ce:	2700      	movs	r7, #0
 800a4d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4d8:	fa1f f883 	uxth.w	r8, r3
 800a4dc:	fa17 f78b 	uxtah	r7, r7, fp
 800a4e0:	0c1b      	lsrs	r3, r3, #16
 800a4e2:	eba7 0808 	sub.w	r8, r7, r8
 800a4e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4ee:	fa1f f888 	uxth.w	r8, r8
 800a4f2:	141f      	asrs	r7, r3, #16
 800a4f4:	454d      	cmp	r5, r9
 800a4f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4fa:	f84a 3b04 	str.w	r3, [sl], #4
 800a4fe:	d8e7      	bhi.n	800a4d0 <__mdiff+0x7c>
 800a500:	1b2b      	subs	r3, r5, r4
 800a502:	3b15      	subs	r3, #21
 800a504:	f023 0303 	bic.w	r3, r3, #3
 800a508:	3304      	adds	r3, #4
 800a50a:	3415      	adds	r4, #21
 800a50c:	42a5      	cmp	r5, r4
 800a50e:	bf38      	it	cc
 800a510:	2304      	movcc	r3, #4
 800a512:	4419      	add	r1, r3
 800a514:	4473      	add	r3, lr
 800a516:	469e      	mov	lr, r3
 800a518:	460d      	mov	r5, r1
 800a51a:	4565      	cmp	r5, ip
 800a51c:	d30e      	bcc.n	800a53c <__mdiff+0xe8>
 800a51e:	f10c 0203 	add.w	r2, ip, #3
 800a522:	1a52      	subs	r2, r2, r1
 800a524:	f022 0203 	bic.w	r2, r2, #3
 800a528:	3903      	subs	r1, #3
 800a52a:	458c      	cmp	ip, r1
 800a52c:	bf38      	it	cc
 800a52e:	2200      	movcc	r2, #0
 800a530:	441a      	add	r2, r3
 800a532:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a536:	b17b      	cbz	r3, 800a558 <__mdiff+0x104>
 800a538:	6106      	str	r6, [r0, #16]
 800a53a:	e7a5      	b.n	800a488 <__mdiff+0x34>
 800a53c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a540:	fa17 f488 	uxtah	r4, r7, r8
 800a544:	1422      	asrs	r2, r4, #16
 800a546:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a54a:	b2a4      	uxth	r4, r4
 800a54c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a550:	f84e 4b04 	str.w	r4, [lr], #4
 800a554:	1417      	asrs	r7, r2, #16
 800a556:	e7e0      	b.n	800a51a <__mdiff+0xc6>
 800a558:	3e01      	subs	r6, #1
 800a55a:	e7ea      	b.n	800a532 <__mdiff+0xde>
 800a55c:	0800bc53 	.word	0x0800bc53
 800a560:	0800bc64 	.word	0x0800bc64

0800a564 <__d2b>:
 800a564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a568:	2101      	movs	r1, #1
 800a56a:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 800a56e:	4690      	mov	r8, r2
 800a570:	4699      	mov	r9, r3
 800a572:	f7ff fcd5 	bl	8009f20 <_Balloc>
 800a576:	4604      	mov	r4, r0
 800a578:	b930      	cbnz	r0, 800a588 <__d2b+0x24>
 800a57a:	4602      	mov	r2, r0
 800a57c:	4b24      	ldr	r3, [pc, #144]	; (800a610 <__d2b+0xac>)
 800a57e:	4825      	ldr	r0, [pc, #148]	; (800a614 <__d2b+0xb0>)
 800a580:	f240 310a 	movw	r1, #778	; 0x30a
 800a584:	f000 fa6e 	bl	800aa64 <__assert_func>
 800a588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a58c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a590:	bb2d      	cbnz	r5, 800a5de <__d2b+0x7a>
 800a592:	f1b8 0200 	subs.w	r2, r8, #0
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	d026      	beq.n	800a5e8 <__d2b+0x84>
 800a59a:	4668      	mov	r0, sp
 800a59c:	9200      	str	r2, [sp, #0]
 800a59e:	f7ff fd8b 	bl	800a0b8 <__lo0bits>
 800a5a2:	9900      	ldr	r1, [sp, #0]
 800a5a4:	b1f0      	cbz	r0, 800a5e4 <__d2b+0x80>
 800a5a6:	9a01      	ldr	r2, [sp, #4]
 800a5a8:	f1c0 0320 	rsb	r3, r0, #32
 800a5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	40c2      	lsrs	r2, r0
 800a5b4:	6163      	str	r3, [r4, #20]
 800a5b6:	9201      	str	r2, [sp, #4]
 800a5b8:	9b01      	ldr	r3, [sp, #4]
 800a5ba:	61a3      	str	r3, [r4, #24]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	bf14      	ite	ne
 800a5c0:	2202      	movne	r2, #2
 800a5c2:	2201      	moveq	r2, #1
 800a5c4:	6122      	str	r2, [r4, #16]
 800a5c6:	b1c5      	cbz	r5, 800a5fa <__d2b+0x96>
 800a5c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a5cc:	4405      	add	r5, r0
 800a5ce:	603d      	str	r5, [r7, #0]
 800a5d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5d4:	6030      	str	r0, [r6, #0]
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	b003      	add	sp, #12
 800a5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5e2:	e7d6      	b.n	800a592 <__d2b+0x2e>
 800a5e4:	6161      	str	r1, [r4, #20]
 800a5e6:	e7e7      	b.n	800a5b8 <__d2b+0x54>
 800a5e8:	a801      	add	r0, sp, #4
 800a5ea:	f7ff fd65 	bl	800a0b8 <__lo0bits>
 800a5ee:	9b01      	ldr	r3, [sp, #4]
 800a5f0:	6163      	str	r3, [r4, #20]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	6122      	str	r2, [r4, #16]
 800a5f6:	3020      	adds	r0, #32
 800a5f8:	e7e5      	b.n	800a5c6 <__d2b+0x62>
 800a5fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a602:	6038      	str	r0, [r7, #0]
 800a604:	6918      	ldr	r0, [r3, #16]
 800a606:	f7ff fd37 	bl	800a078 <__hi0bits>
 800a60a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a60e:	e7e1      	b.n	800a5d4 <__d2b+0x70>
 800a610:	0800bc53 	.word	0x0800bc53
 800a614:	0800bc64 	.word	0x0800bc64

0800a618 <_calloc_r>:
 800a618:	b513      	push	{r0, r1, r4, lr}
 800a61a:	434a      	muls	r2, r1
 800a61c:	4611      	mov	r1, r2
 800a61e:	9201      	str	r2, [sp, #4]
 800a620:	f000 f85a 	bl	800a6d8 <_malloc_r>
 800a624:	4604      	mov	r4, r0
 800a626:	b118      	cbz	r0, 800a630 <_calloc_r+0x18>
 800a628:	9a01      	ldr	r2, [sp, #4]
 800a62a:	2100      	movs	r1, #0
 800a62c:	f7fe f95e 	bl	80088ec <memset>
 800a630:	4620      	mov	r0, r4
 800a632:	b002      	add	sp, #8
 800a634:	bd10      	pop	{r4, pc}
	...

0800a638 <_free_r>:
 800a638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a63a:	2900      	cmp	r1, #0
 800a63c:	d048      	beq.n	800a6d0 <_free_r+0x98>
 800a63e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a642:	9001      	str	r0, [sp, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	f1a1 0404 	sub.w	r4, r1, #4
 800a64a:	bfb8      	it	lt
 800a64c:	18e4      	addlt	r4, r4, r3
 800a64e:	f000 fa65 	bl	800ab1c <__malloc_lock>
 800a652:	4a20      	ldr	r2, [pc, #128]	; (800a6d4 <_free_r+0x9c>)
 800a654:	9801      	ldr	r0, [sp, #4]
 800a656:	6813      	ldr	r3, [r2, #0]
 800a658:	4615      	mov	r5, r2
 800a65a:	b933      	cbnz	r3, 800a66a <_free_r+0x32>
 800a65c:	6063      	str	r3, [r4, #4]
 800a65e:	6014      	str	r4, [r2, #0]
 800a660:	b003      	add	sp, #12
 800a662:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a666:	f000 ba5f 	b.w	800ab28 <__malloc_unlock>
 800a66a:	42a3      	cmp	r3, r4
 800a66c:	d90b      	bls.n	800a686 <_free_r+0x4e>
 800a66e:	6821      	ldr	r1, [r4, #0]
 800a670:	1862      	adds	r2, r4, r1
 800a672:	4293      	cmp	r3, r2
 800a674:	bf04      	itt	eq
 800a676:	681a      	ldreq	r2, [r3, #0]
 800a678:	685b      	ldreq	r3, [r3, #4]
 800a67a:	6063      	str	r3, [r4, #4]
 800a67c:	bf04      	itt	eq
 800a67e:	1852      	addeq	r2, r2, r1
 800a680:	6022      	streq	r2, [r4, #0]
 800a682:	602c      	str	r4, [r5, #0]
 800a684:	e7ec      	b.n	800a660 <_free_r+0x28>
 800a686:	461a      	mov	r2, r3
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	b10b      	cbz	r3, 800a690 <_free_r+0x58>
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	d9fa      	bls.n	800a686 <_free_r+0x4e>
 800a690:	6811      	ldr	r1, [r2, #0]
 800a692:	1855      	adds	r5, r2, r1
 800a694:	42a5      	cmp	r5, r4
 800a696:	d10b      	bne.n	800a6b0 <_free_r+0x78>
 800a698:	6824      	ldr	r4, [r4, #0]
 800a69a:	4421      	add	r1, r4
 800a69c:	1854      	adds	r4, r2, r1
 800a69e:	42a3      	cmp	r3, r4
 800a6a0:	6011      	str	r1, [r2, #0]
 800a6a2:	d1dd      	bne.n	800a660 <_free_r+0x28>
 800a6a4:	681c      	ldr	r4, [r3, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	6053      	str	r3, [r2, #4]
 800a6aa:	4421      	add	r1, r4
 800a6ac:	6011      	str	r1, [r2, #0]
 800a6ae:	e7d7      	b.n	800a660 <_free_r+0x28>
 800a6b0:	d902      	bls.n	800a6b8 <_free_r+0x80>
 800a6b2:	230c      	movs	r3, #12
 800a6b4:	6003      	str	r3, [r0, #0]
 800a6b6:	e7d3      	b.n	800a660 <_free_r+0x28>
 800a6b8:	6825      	ldr	r5, [r4, #0]
 800a6ba:	1961      	adds	r1, r4, r5
 800a6bc:	428b      	cmp	r3, r1
 800a6be:	bf04      	itt	eq
 800a6c0:	6819      	ldreq	r1, [r3, #0]
 800a6c2:	685b      	ldreq	r3, [r3, #4]
 800a6c4:	6063      	str	r3, [r4, #4]
 800a6c6:	bf04      	itt	eq
 800a6c8:	1949      	addeq	r1, r1, r5
 800a6ca:	6021      	streq	r1, [r4, #0]
 800a6cc:	6054      	str	r4, [r2, #4]
 800a6ce:	e7c7      	b.n	800a660 <_free_r+0x28>
 800a6d0:	b003      	add	sp, #12
 800a6d2:	bd30      	pop	{r4, r5, pc}
 800a6d4:	20013574 	.word	0x20013574

0800a6d8 <_malloc_r>:
 800a6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6da:	1ccd      	adds	r5, r1, #3
 800a6dc:	f025 0503 	bic.w	r5, r5, #3
 800a6e0:	3508      	adds	r5, #8
 800a6e2:	2d0c      	cmp	r5, #12
 800a6e4:	bf38      	it	cc
 800a6e6:	250c      	movcc	r5, #12
 800a6e8:	2d00      	cmp	r5, #0
 800a6ea:	4606      	mov	r6, r0
 800a6ec:	db01      	blt.n	800a6f2 <_malloc_r+0x1a>
 800a6ee:	42a9      	cmp	r1, r5
 800a6f0:	d903      	bls.n	800a6fa <_malloc_r+0x22>
 800a6f2:	230c      	movs	r3, #12
 800a6f4:	6033      	str	r3, [r6, #0]
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6fa:	f000 fa0f 	bl	800ab1c <__malloc_lock>
 800a6fe:	4921      	ldr	r1, [pc, #132]	; (800a784 <_malloc_r+0xac>)
 800a700:	680a      	ldr	r2, [r1, #0]
 800a702:	4614      	mov	r4, r2
 800a704:	b99c      	cbnz	r4, 800a72e <_malloc_r+0x56>
 800a706:	4f20      	ldr	r7, [pc, #128]	; (800a788 <_malloc_r+0xb0>)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	b923      	cbnz	r3, 800a716 <_malloc_r+0x3e>
 800a70c:	4621      	mov	r1, r4
 800a70e:	4630      	mov	r0, r6
 800a710:	f000 f998 	bl	800aa44 <_sbrk_r>
 800a714:	6038      	str	r0, [r7, #0]
 800a716:	4629      	mov	r1, r5
 800a718:	4630      	mov	r0, r6
 800a71a:	f000 f993 	bl	800aa44 <_sbrk_r>
 800a71e:	1c43      	adds	r3, r0, #1
 800a720:	d123      	bne.n	800a76a <_malloc_r+0x92>
 800a722:	230c      	movs	r3, #12
 800a724:	6033      	str	r3, [r6, #0]
 800a726:	4630      	mov	r0, r6
 800a728:	f000 f9fe 	bl	800ab28 <__malloc_unlock>
 800a72c:	e7e3      	b.n	800a6f6 <_malloc_r+0x1e>
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	1b5b      	subs	r3, r3, r5
 800a732:	d417      	bmi.n	800a764 <_malloc_r+0x8c>
 800a734:	2b0b      	cmp	r3, #11
 800a736:	d903      	bls.n	800a740 <_malloc_r+0x68>
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	441c      	add	r4, r3
 800a73c:	6025      	str	r5, [r4, #0]
 800a73e:	e004      	b.n	800a74a <_malloc_r+0x72>
 800a740:	6863      	ldr	r3, [r4, #4]
 800a742:	42a2      	cmp	r2, r4
 800a744:	bf0c      	ite	eq
 800a746:	600b      	streq	r3, [r1, #0]
 800a748:	6053      	strne	r3, [r2, #4]
 800a74a:	4630      	mov	r0, r6
 800a74c:	f000 f9ec 	bl	800ab28 <__malloc_unlock>
 800a750:	f104 000b 	add.w	r0, r4, #11
 800a754:	1d23      	adds	r3, r4, #4
 800a756:	f020 0007 	bic.w	r0, r0, #7
 800a75a:	1ac2      	subs	r2, r0, r3
 800a75c:	d0cc      	beq.n	800a6f8 <_malloc_r+0x20>
 800a75e:	1a1b      	subs	r3, r3, r0
 800a760:	50a3      	str	r3, [r4, r2]
 800a762:	e7c9      	b.n	800a6f8 <_malloc_r+0x20>
 800a764:	4622      	mov	r2, r4
 800a766:	6864      	ldr	r4, [r4, #4]
 800a768:	e7cc      	b.n	800a704 <_malloc_r+0x2c>
 800a76a:	1cc4      	adds	r4, r0, #3
 800a76c:	f024 0403 	bic.w	r4, r4, #3
 800a770:	42a0      	cmp	r0, r4
 800a772:	d0e3      	beq.n	800a73c <_malloc_r+0x64>
 800a774:	1a21      	subs	r1, r4, r0
 800a776:	4630      	mov	r0, r6
 800a778:	f000 f964 	bl	800aa44 <_sbrk_r>
 800a77c:	3001      	adds	r0, #1
 800a77e:	d1dd      	bne.n	800a73c <_malloc_r+0x64>
 800a780:	e7cf      	b.n	800a722 <_malloc_r+0x4a>
 800a782:	bf00      	nop
 800a784:	20013574 	.word	0x20013574
 800a788:	20013578 	.word	0x20013578

0800a78c <__ssputs_r>:
 800a78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a790:	688e      	ldr	r6, [r1, #8]
 800a792:	429e      	cmp	r6, r3
 800a794:	4682      	mov	sl, r0
 800a796:	460c      	mov	r4, r1
 800a798:	4690      	mov	r8, r2
 800a79a:	461f      	mov	r7, r3
 800a79c:	d838      	bhi.n	800a810 <__ssputs_r+0x84>
 800a79e:	898a      	ldrh	r2, [r1, #12]
 800a7a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7a4:	d032      	beq.n	800a80c <__ssputs_r+0x80>
 800a7a6:	6825      	ldr	r5, [r4, #0]
 800a7a8:	6909      	ldr	r1, [r1, #16]
 800a7aa:	eba5 0901 	sub.w	r9, r5, r1
 800a7ae:	6965      	ldr	r5, [r4, #20]
 800a7b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	444b      	add	r3, r9
 800a7bc:	106d      	asrs	r5, r5, #1
 800a7be:	429d      	cmp	r5, r3
 800a7c0:	bf38      	it	cc
 800a7c2:	461d      	movcc	r5, r3
 800a7c4:	0553      	lsls	r3, r2, #21
 800a7c6:	d531      	bpl.n	800a82c <__ssputs_r+0xa0>
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7ff ff85 	bl	800a6d8 <_malloc_r>
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	b950      	cbnz	r0, 800a7e8 <__ssputs_r+0x5c>
 800a7d2:	230c      	movs	r3, #12
 800a7d4:	f8ca 3000 	str.w	r3, [sl]
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7de:	81a3      	strh	r3, [r4, #12]
 800a7e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e8:	6921      	ldr	r1, [r4, #16]
 800a7ea:	464a      	mov	r2, r9
 800a7ec:	f7fe f870 	bl	80088d0 <memcpy>
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7fa:	81a3      	strh	r3, [r4, #12]
 800a7fc:	6126      	str	r6, [r4, #16]
 800a7fe:	6165      	str	r5, [r4, #20]
 800a800:	444e      	add	r6, r9
 800a802:	eba5 0509 	sub.w	r5, r5, r9
 800a806:	6026      	str	r6, [r4, #0]
 800a808:	60a5      	str	r5, [r4, #8]
 800a80a:	463e      	mov	r6, r7
 800a80c:	42be      	cmp	r6, r7
 800a80e:	d900      	bls.n	800a812 <__ssputs_r+0x86>
 800a810:	463e      	mov	r6, r7
 800a812:	4632      	mov	r2, r6
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	4641      	mov	r1, r8
 800a818:	f000 f966 	bl	800aae8 <memmove>
 800a81c:	68a3      	ldr	r3, [r4, #8]
 800a81e:	6822      	ldr	r2, [r4, #0]
 800a820:	1b9b      	subs	r3, r3, r6
 800a822:	4432      	add	r2, r6
 800a824:	60a3      	str	r3, [r4, #8]
 800a826:	6022      	str	r2, [r4, #0]
 800a828:	2000      	movs	r0, #0
 800a82a:	e7db      	b.n	800a7e4 <__ssputs_r+0x58>
 800a82c:	462a      	mov	r2, r5
 800a82e:	f000 f981 	bl	800ab34 <_realloc_r>
 800a832:	4606      	mov	r6, r0
 800a834:	2800      	cmp	r0, #0
 800a836:	d1e1      	bne.n	800a7fc <__ssputs_r+0x70>
 800a838:	6921      	ldr	r1, [r4, #16]
 800a83a:	4650      	mov	r0, sl
 800a83c:	f7ff fefc 	bl	800a638 <_free_r>
 800a840:	e7c7      	b.n	800a7d2 <__ssputs_r+0x46>
	...

0800a844 <_svfiprintf_r>:
 800a844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a848:	4698      	mov	r8, r3
 800a84a:	898b      	ldrh	r3, [r1, #12]
 800a84c:	061b      	lsls	r3, r3, #24
 800a84e:	b09d      	sub	sp, #116	; 0x74
 800a850:	4607      	mov	r7, r0
 800a852:	460d      	mov	r5, r1
 800a854:	4614      	mov	r4, r2
 800a856:	d50e      	bpl.n	800a876 <_svfiprintf_r+0x32>
 800a858:	690b      	ldr	r3, [r1, #16]
 800a85a:	b963      	cbnz	r3, 800a876 <_svfiprintf_r+0x32>
 800a85c:	2140      	movs	r1, #64	; 0x40
 800a85e:	f7ff ff3b 	bl	800a6d8 <_malloc_r>
 800a862:	6028      	str	r0, [r5, #0]
 800a864:	6128      	str	r0, [r5, #16]
 800a866:	b920      	cbnz	r0, 800a872 <_svfiprintf_r+0x2e>
 800a868:	230c      	movs	r3, #12
 800a86a:	603b      	str	r3, [r7, #0]
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a870:	e0d1      	b.n	800aa16 <_svfiprintf_r+0x1d2>
 800a872:	2340      	movs	r3, #64	; 0x40
 800a874:	616b      	str	r3, [r5, #20]
 800a876:	2300      	movs	r3, #0
 800a878:	9309      	str	r3, [sp, #36]	; 0x24
 800a87a:	2320      	movs	r3, #32
 800a87c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a880:	f8cd 800c 	str.w	r8, [sp, #12]
 800a884:	2330      	movs	r3, #48	; 0x30
 800a886:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa30 <_svfiprintf_r+0x1ec>
 800a88a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a88e:	f04f 0901 	mov.w	r9, #1
 800a892:	4623      	mov	r3, r4
 800a894:	469a      	mov	sl, r3
 800a896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a89a:	b10a      	cbz	r2, 800a8a0 <_svfiprintf_r+0x5c>
 800a89c:	2a25      	cmp	r2, #37	; 0x25
 800a89e:	d1f9      	bne.n	800a894 <_svfiprintf_r+0x50>
 800a8a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a4:	d00b      	beq.n	800a8be <_svfiprintf_r+0x7a>
 800a8a6:	465b      	mov	r3, fp
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	f7ff ff6d 	bl	800a78c <__ssputs_r>
 800a8b2:	3001      	adds	r0, #1
 800a8b4:	f000 80aa 	beq.w	800aa0c <_svfiprintf_r+0x1c8>
 800a8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ba:	445a      	add	r2, fp
 800a8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a8be:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 80a2 	beq.w	800aa0c <_svfiprintf_r+0x1c8>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8d2:	f10a 0a01 	add.w	sl, sl, #1
 800a8d6:	9304      	str	r3, [sp, #16]
 800a8d8:	9307      	str	r3, [sp, #28]
 800a8da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8de:	931a      	str	r3, [sp, #104]	; 0x68
 800a8e0:	4654      	mov	r4, sl
 800a8e2:	2205      	movs	r2, #5
 800a8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e8:	4851      	ldr	r0, [pc, #324]	; (800aa30 <_svfiprintf_r+0x1ec>)
 800a8ea:	f7f5 fcd9 	bl	80002a0 <memchr>
 800a8ee:	9a04      	ldr	r2, [sp, #16]
 800a8f0:	b9d8      	cbnz	r0, 800a92a <_svfiprintf_r+0xe6>
 800a8f2:	06d0      	lsls	r0, r2, #27
 800a8f4:	bf44      	itt	mi
 800a8f6:	2320      	movmi	r3, #32
 800a8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8fc:	0711      	lsls	r1, r2, #28
 800a8fe:	bf44      	itt	mi
 800a900:	232b      	movmi	r3, #43	; 0x2b
 800a902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a906:	f89a 3000 	ldrb.w	r3, [sl]
 800a90a:	2b2a      	cmp	r3, #42	; 0x2a
 800a90c:	d015      	beq.n	800a93a <_svfiprintf_r+0xf6>
 800a90e:	9a07      	ldr	r2, [sp, #28]
 800a910:	4654      	mov	r4, sl
 800a912:	2000      	movs	r0, #0
 800a914:	f04f 0c0a 	mov.w	ip, #10
 800a918:	4621      	mov	r1, r4
 800a91a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a91e:	3b30      	subs	r3, #48	; 0x30
 800a920:	2b09      	cmp	r3, #9
 800a922:	d94e      	bls.n	800a9c2 <_svfiprintf_r+0x17e>
 800a924:	b1b0      	cbz	r0, 800a954 <_svfiprintf_r+0x110>
 800a926:	9207      	str	r2, [sp, #28]
 800a928:	e014      	b.n	800a954 <_svfiprintf_r+0x110>
 800a92a:	eba0 0308 	sub.w	r3, r0, r8
 800a92e:	fa09 f303 	lsl.w	r3, r9, r3
 800a932:	4313      	orrs	r3, r2
 800a934:	9304      	str	r3, [sp, #16]
 800a936:	46a2      	mov	sl, r4
 800a938:	e7d2      	b.n	800a8e0 <_svfiprintf_r+0x9c>
 800a93a:	9b03      	ldr	r3, [sp, #12]
 800a93c:	1d19      	adds	r1, r3, #4
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	9103      	str	r1, [sp, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	bfbb      	ittet	lt
 800a946:	425b      	neglt	r3, r3
 800a948:	f042 0202 	orrlt.w	r2, r2, #2
 800a94c:	9307      	strge	r3, [sp, #28]
 800a94e:	9307      	strlt	r3, [sp, #28]
 800a950:	bfb8      	it	lt
 800a952:	9204      	strlt	r2, [sp, #16]
 800a954:	7823      	ldrb	r3, [r4, #0]
 800a956:	2b2e      	cmp	r3, #46	; 0x2e
 800a958:	d10c      	bne.n	800a974 <_svfiprintf_r+0x130>
 800a95a:	7863      	ldrb	r3, [r4, #1]
 800a95c:	2b2a      	cmp	r3, #42	; 0x2a
 800a95e:	d135      	bne.n	800a9cc <_svfiprintf_r+0x188>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	1d1a      	adds	r2, r3, #4
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	9203      	str	r2, [sp, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	bfb8      	it	lt
 800a96c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a970:	3402      	adds	r4, #2
 800a972:	9305      	str	r3, [sp, #20]
 800a974:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa40 <_svfiprintf_r+0x1fc>
 800a978:	7821      	ldrb	r1, [r4, #0]
 800a97a:	2203      	movs	r2, #3
 800a97c:	4650      	mov	r0, sl
 800a97e:	f7f5 fc8f 	bl	80002a0 <memchr>
 800a982:	b140      	cbz	r0, 800a996 <_svfiprintf_r+0x152>
 800a984:	2340      	movs	r3, #64	; 0x40
 800a986:	eba0 000a 	sub.w	r0, r0, sl
 800a98a:	fa03 f000 	lsl.w	r0, r3, r0
 800a98e:	9b04      	ldr	r3, [sp, #16]
 800a990:	4303      	orrs	r3, r0
 800a992:	3401      	adds	r4, #1
 800a994:	9304      	str	r3, [sp, #16]
 800a996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99a:	4826      	ldr	r0, [pc, #152]	; (800aa34 <_svfiprintf_r+0x1f0>)
 800a99c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9a0:	2206      	movs	r2, #6
 800a9a2:	f7f5 fc7d 	bl	80002a0 <memchr>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d038      	beq.n	800aa1c <_svfiprintf_r+0x1d8>
 800a9aa:	4b23      	ldr	r3, [pc, #140]	; (800aa38 <_svfiprintf_r+0x1f4>)
 800a9ac:	bb1b      	cbnz	r3, 800a9f6 <_svfiprintf_r+0x1b2>
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	3307      	adds	r3, #7
 800a9b2:	f023 0307 	bic.w	r3, r3, #7
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9bc:	4433      	add	r3, r6
 800a9be:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c0:	e767      	b.n	800a892 <_svfiprintf_r+0x4e>
 800a9c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	e7a5      	b.n	800a918 <_svfiprintf_r+0xd4>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	3401      	adds	r4, #1
 800a9d0:	9305      	str	r3, [sp, #20]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	f04f 0c0a 	mov.w	ip, #10
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9de:	3a30      	subs	r2, #48	; 0x30
 800a9e0:	2a09      	cmp	r2, #9
 800a9e2:	d903      	bls.n	800a9ec <_svfiprintf_r+0x1a8>
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0c5      	beq.n	800a974 <_svfiprintf_r+0x130>
 800a9e8:	9105      	str	r1, [sp, #20]
 800a9ea:	e7c3      	b.n	800a974 <_svfiprintf_r+0x130>
 800a9ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e7f0      	b.n	800a9d8 <_svfiprintf_r+0x194>
 800a9f6:	ab03      	add	r3, sp, #12
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	462a      	mov	r2, r5
 800a9fc:	4b0f      	ldr	r3, [pc, #60]	; (800aa3c <_svfiprintf_r+0x1f8>)
 800a9fe:	a904      	add	r1, sp, #16
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7fe f81b 	bl	8008a3c <_printf_float>
 800aa06:	1c42      	adds	r2, r0, #1
 800aa08:	4606      	mov	r6, r0
 800aa0a:	d1d6      	bne.n	800a9ba <_svfiprintf_r+0x176>
 800aa0c:	89ab      	ldrh	r3, [r5, #12]
 800aa0e:	065b      	lsls	r3, r3, #25
 800aa10:	f53f af2c 	bmi.w	800a86c <_svfiprintf_r+0x28>
 800aa14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa16:	b01d      	add	sp, #116	; 0x74
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	ab03      	add	r3, sp, #12
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	462a      	mov	r2, r5
 800aa22:	4b06      	ldr	r3, [pc, #24]	; (800aa3c <_svfiprintf_r+0x1f8>)
 800aa24:	a904      	add	r1, sp, #16
 800aa26:	4638      	mov	r0, r7
 800aa28:	f7fe faae 	bl	8008f88 <_printf_i>
 800aa2c:	e7eb      	b.n	800aa06 <_svfiprintf_r+0x1c2>
 800aa2e:	bf00      	nop
 800aa30:	0800bdc4 	.word	0x0800bdc4
 800aa34:	0800bdce 	.word	0x0800bdce
 800aa38:	08008a3d 	.word	0x08008a3d
 800aa3c:	0800a78d 	.word	0x0800a78d
 800aa40:	0800bdca 	.word	0x0800bdca

0800aa44 <_sbrk_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d06      	ldr	r5, [pc, #24]	; (800aa60 <_sbrk_r+0x1c>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	602b      	str	r3, [r5, #0]
 800aa50:	f7fd fea6 	bl	80087a0 <_sbrk>
 800aa54:	1c43      	adds	r3, r0, #1
 800aa56:	d102      	bne.n	800aa5e <_sbrk_r+0x1a>
 800aa58:	682b      	ldr	r3, [r5, #0]
 800aa5a:	b103      	cbz	r3, 800aa5e <_sbrk_r+0x1a>
 800aa5c:	6023      	str	r3, [r4, #0]
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	200138d8 	.word	0x200138d8

0800aa64 <__assert_func>:
 800aa64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa66:	4614      	mov	r4, r2
 800aa68:	461a      	mov	r2, r3
 800aa6a:	4b09      	ldr	r3, [pc, #36]	; (800aa90 <__assert_func+0x2c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4605      	mov	r5, r0
 800aa70:	68d8      	ldr	r0, [r3, #12]
 800aa72:	b14c      	cbz	r4, 800aa88 <__assert_func+0x24>
 800aa74:	4b07      	ldr	r3, [pc, #28]	; (800aa94 <__assert_func+0x30>)
 800aa76:	9100      	str	r1, [sp, #0]
 800aa78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa7c:	4906      	ldr	r1, [pc, #24]	; (800aa98 <__assert_func+0x34>)
 800aa7e:	462b      	mov	r3, r5
 800aa80:	f000 f80e 	bl	800aaa0 <fiprintf>
 800aa84:	f000 faa4 	bl	800afd0 <abort>
 800aa88:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <__assert_func+0x38>)
 800aa8a:	461c      	mov	r4, r3
 800aa8c:	e7f3      	b.n	800aa76 <__assert_func+0x12>
 800aa8e:	bf00      	nop
 800aa90:	20000038 	.word	0x20000038
 800aa94:	0800bdd5 	.word	0x0800bdd5
 800aa98:	0800bde2 	.word	0x0800bde2
 800aa9c:	0800be10 	.word	0x0800be10

0800aaa0 <fiprintf>:
 800aaa0:	b40e      	push	{r1, r2, r3}
 800aaa2:	b503      	push	{r0, r1, lr}
 800aaa4:	4601      	mov	r1, r0
 800aaa6:	ab03      	add	r3, sp, #12
 800aaa8:	4805      	ldr	r0, [pc, #20]	; (800aac0 <fiprintf+0x20>)
 800aaaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaae:	6800      	ldr	r0, [r0, #0]
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	f000 f88f 	bl	800abd4 <_vfiprintf_r>
 800aab6:	b002      	add	sp, #8
 800aab8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aabc:	b003      	add	sp, #12
 800aabe:	4770      	bx	lr
 800aac0:	20000038 	.word	0x20000038

0800aac4 <__ascii_mbtowc>:
 800aac4:	b082      	sub	sp, #8
 800aac6:	b901      	cbnz	r1, 800aaca <__ascii_mbtowc+0x6>
 800aac8:	a901      	add	r1, sp, #4
 800aaca:	b142      	cbz	r2, 800aade <__ascii_mbtowc+0x1a>
 800aacc:	b14b      	cbz	r3, 800aae2 <__ascii_mbtowc+0x1e>
 800aace:	7813      	ldrb	r3, [r2, #0]
 800aad0:	600b      	str	r3, [r1, #0]
 800aad2:	7812      	ldrb	r2, [r2, #0]
 800aad4:	1e10      	subs	r0, r2, #0
 800aad6:	bf18      	it	ne
 800aad8:	2001      	movne	r0, #1
 800aada:	b002      	add	sp, #8
 800aadc:	4770      	bx	lr
 800aade:	4610      	mov	r0, r2
 800aae0:	e7fb      	b.n	800aada <__ascii_mbtowc+0x16>
 800aae2:	f06f 0001 	mvn.w	r0, #1
 800aae6:	e7f8      	b.n	800aada <__ascii_mbtowc+0x16>

0800aae8 <memmove>:
 800aae8:	4288      	cmp	r0, r1
 800aaea:	b510      	push	{r4, lr}
 800aaec:	eb01 0402 	add.w	r4, r1, r2
 800aaf0:	d902      	bls.n	800aaf8 <memmove+0x10>
 800aaf2:	4284      	cmp	r4, r0
 800aaf4:	4623      	mov	r3, r4
 800aaf6:	d807      	bhi.n	800ab08 <memmove+0x20>
 800aaf8:	1e43      	subs	r3, r0, #1
 800aafa:	42a1      	cmp	r1, r4
 800aafc:	d008      	beq.n	800ab10 <memmove+0x28>
 800aafe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab06:	e7f8      	b.n	800aafa <memmove+0x12>
 800ab08:	4402      	add	r2, r0
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	428a      	cmp	r2, r1
 800ab0e:	d100      	bne.n	800ab12 <memmove+0x2a>
 800ab10:	bd10      	pop	{r4, pc}
 800ab12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab1a:	e7f7      	b.n	800ab0c <memmove+0x24>

0800ab1c <__malloc_lock>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	; (800ab24 <__malloc_lock+0x8>)
 800ab1e:	f000 bc17 	b.w	800b350 <__retarget_lock_acquire_recursive>
 800ab22:	bf00      	nop
 800ab24:	200138e0 	.word	0x200138e0

0800ab28 <__malloc_unlock>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__malloc_unlock+0x8>)
 800ab2a:	f000 bc12 	b.w	800b352 <__retarget_lock_release_recursive>
 800ab2e:	bf00      	nop
 800ab30:	200138e0 	.word	0x200138e0

0800ab34 <_realloc_r>:
 800ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab36:	4607      	mov	r7, r0
 800ab38:	4614      	mov	r4, r2
 800ab3a:	460e      	mov	r6, r1
 800ab3c:	b921      	cbnz	r1, 800ab48 <_realloc_r+0x14>
 800ab3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab42:	4611      	mov	r1, r2
 800ab44:	f7ff bdc8 	b.w	800a6d8 <_malloc_r>
 800ab48:	b922      	cbnz	r2, 800ab54 <_realloc_r+0x20>
 800ab4a:	f7ff fd75 	bl	800a638 <_free_r>
 800ab4e:	4625      	mov	r5, r4
 800ab50:	4628      	mov	r0, r5
 800ab52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab54:	f000 fc62 	bl	800b41c <_malloc_usable_size_r>
 800ab58:	42a0      	cmp	r0, r4
 800ab5a:	d20f      	bcs.n	800ab7c <_realloc_r+0x48>
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f7ff fdba 	bl	800a6d8 <_malloc_r>
 800ab64:	4605      	mov	r5, r0
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d0f2      	beq.n	800ab50 <_realloc_r+0x1c>
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	f7fd feaf 	bl	80088d0 <memcpy>
 800ab72:	4631      	mov	r1, r6
 800ab74:	4638      	mov	r0, r7
 800ab76:	f7ff fd5f 	bl	800a638 <_free_r>
 800ab7a:	e7e9      	b.n	800ab50 <_realloc_r+0x1c>
 800ab7c:	4635      	mov	r5, r6
 800ab7e:	e7e7      	b.n	800ab50 <_realloc_r+0x1c>

0800ab80 <__sfputc_r>:
 800ab80:	6893      	ldr	r3, [r2, #8]
 800ab82:	3b01      	subs	r3, #1
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	b410      	push	{r4}
 800ab88:	6093      	str	r3, [r2, #8]
 800ab8a:	da08      	bge.n	800ab9e <__sfputc_r+0x1e>
 800ab8c:	6994      	ldr	r4, [r2, #24]
 800ab8e:	42a3      	cmp	r3, r4
 800ab90:	db01      	blt.n	800ab96 <__sfputc_r+0x16>
 800ab92:	290a      	cmp	r1, #10
 800ab94:	d103      	bne.n	800ab9e <__sfputc_r+0x1e>
 800ab96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab9a:	f000 b94b 	b.w	800ae34 <__swbuf_r>
 800ab9e:	6813      	ldr	r3, [r2, #0]
 800aba0:	1c58      	adds	r0, r3, #1
 800aba2:	6010      	str	r0, [r2, #0]
 800aba4:	7019      	strb	r1, [r3, #0]
 800aba6:	4608      	mov	r0, r1
 800aba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abac:	4770      	bx	lr

0800abae <__sfputs_r>:
 800abae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb0:	4606      	mov	r6, r0
 800abb2:	460f      	mov	r7, r1
 800abb4:	4614      	mov	r4, r2
 800abb6:	18d5      	adds	r5, r2, r3
 800abb8:	42ac      	cmp	r4, r5
 800abba:	d101      	bne.n	800abc0 <__sfputs_r+0x12>
 800abbc:	2000      	movs	r0, #0
 800abbe:	e007      	b.n	800abd0 <__sfputs_r+0x22>
 800abc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc4:	463a      	mov	r2, r7
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7ff ffda 	bl	800ab80 <__sfputc_r>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	d1f3      	bne.n	800abb8 <__sfputs_r+0xa>
 800abd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abd4 <_vfiprintf_r>:
 800abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd8:	460d      	mov	r5, r1
 800abda:	b09d      	sub	sp, #116	; 0x74
 800abdc:	4614      	mov	r4, r2
 800abde:	4698      	mov	r8, r3
 800abe0:	4606      	mov	r6, r0
 800abe2:	b118      	cbz	r0, 800abec <_vfiprintf_r+0x18>
 800abe4:	6983      	ldr	r3, [r0, #24]
 800abe6:	b90b      	cbnz	r3, 800abec <_vfiprintf_r+0x18>
 800abe8:	f000 fb14 	bl	800b214 <__sinit>
 800abec:	4b89      	ldr	r3, [pc, #548]	; (800ae14 <_vfiprintf_r+0x240>)
 800abee:	429d      	cmp	r5, r3
 800abf0:	d11b      	bne.n	800ac2a <_vfiprintf_r+0x56>
 800abf2:	6875      	ldr	r5, [r6, #4]
 800abf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abf6:	07d9      	lsls	r1, r3, #31
 800abf8:	d405      	bmi.n	800ac06 <_vfiprintf_r+0x32>
 800abfa:	89ab      	ldrh	r3, [r5, #12]
 800abfc:	059a      	lsls	r2, r3, #22
 800abfe:	d402      	bmi.n	800ac06 <_vfiprintf_r+0x32>
 800ac00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac02:	f000 fba5 	bl	800b350 <__retarget_lock_acquire_recursive>
 800ac06:	89ab      	ldrh	r3, [r5, #12]
 800ac08:	071b      	lsls	r3, r3, #28
 800ac0a:	d501      	bpl.n	800ac10 <_vfiprintf_r+0x3c>
 800ac0c:	692b      	ldr	r3, [r5, #16]
 800ac0e:	b9eb      	cbnz	r3, 800ac4c <_vfiprintf_r+0x78>
 800ac10:	4629      	mov	r1, r5
 800ac12:	4630      	mov	r0, r6
 800ac14:	f000 f96e 	bl	800aef4 <__swsetup_r>
 800ac18:	b1c0      	cbz	r0, 800ac4c <_vfiprintf_r+0x78>
 800ac1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac1c:	07dc      	lsls	r4, r3, #31
 800ac1e:	d50e      	bpl.n	800ac3e <_vfiprintf_r+0x6a>
 800ac20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac24:	b01d      	add	sp, #116	; 0x74
 800ac26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2a:	4b7b      	ldr	r3, [pc, #492]	; (800ae18 <_vfiprintf_r+0x244>)
 800ac2c:	429d      	cmp	r5, r3
 800ac2e:	d101      	bne.n	800ac34 <_vfiprintf_r+0x60>
 800ac30:	68b5      	ldr	r5, [r6, #8]
 800ac32:	e7df      	b.n	800abf4 <_vfiprintf_r+0x20>
 800ac34:	4b79      	ldr	r3, [pc, #484]	; (800ae1c <_vfiprintf_r+0x248>)
 800ac36:	429d      	cmp	r5, r3
 800ac38:	bf08      	it	eq
 800ac3a:	68f5      	ldreq	r5, [r6, #12]
 800ac3c:	e7da      	b.n	800abf4 <_vfiprintf_r+0x20>
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	0598      	lsls	r0, r3, #22
 800ac42:	d4ed      	bmi.n	800ac20 <_vfiprintf_r+0x4c>
 800ac44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac46:	f000 fb84 	bl	800b352 <__retarget_lock_release_recursive>
 800ac4a:	e7e9      	b.n	800ac20 <_vfiprintf_r+0x4c>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac50:	2320      	movs	r3, #32
 800ac52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac5a:	2330      	movs	r3, #48	; 0x30
 800ac5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae20 <_vfiprintf_r+0x24c>
 800ac60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac64:	f04f 0901 	mov.w	r9, #1
 800ac68:	4623      	mov	r3, r4
 800ac6a:	469a      	mov	sl, r3
 800ac6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac70:	b10a      	cbz	r2, 800ac76 <_vfiprintf_r+0xa2>
 800ac72:	2a25      	cmp	r2, #37	; 0x25
 800ac74:	d1f9      	bne.n	800ac6a <_vfiprintf_r+0x96>
 800ac76:	ebba 0b04 	subs.w	fp, sl, r4
 800ac7a:	d00b      	beq.n	800ac94 <_vfiprintf_r+0xc0>
 800ac7c:	465b      	mov	r3, fp
 800ac7e:	4622      	mov	r2, r4
 800ac80:	4629      	mov	r1, r5
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7ff ff93 	bl	800abae <__sfputs_r>
 800ac88:	3001      	adds	r0, #1
 800ac8a:	f000 80aa 	beq.w	800ade2 <_vfiprintf_r+0x20e>
 800ac8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac90:	445a      	add	r2, fp
 800ac92:	9209      	str	r2, [sp, #36]	; 0x24
 800ac94:	f89a 3000 	ldrb.w	r3, [sl]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 80a2 	beq.w	800ade2 <_vfiprintf_r+0x20e>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aca8:	f10a 0a01 	add.w	sl, sl, #1
 800acac:	9304      	str	r3, [sp, #16]
 800acae:	9307      	str	r3, [sp, #28]
 800acb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acb4:	931a      	str	r3, [sp, #104]	; 0x68
 800acb6:	4654      	mov	r4, sl
 800acb8:	2205      	movs	r2, #5
 800acba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acbe:	4858      	ldr	r0, [pc, #352]	; (800ae20 <_vfiprintf_r+0x24c>)
 800acc0:	f7f5 faee 	bl	80002a0 <memchr>
 800acc4:	9a04      	ldr	r2, [sp, #16]
 800acc6:	b9d8      	cbnz	r0, 800ad00 <_vfiprintf_r+0x12c>
 800acc8:	06d1      	lsls	r1, r2, #27
 800acca:	bf44      	itt	mi
 800accc:	2320      	movmi	r3, #32
 800acce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acd2:	0713      	lsls	r3, r2, #28
 800acd4:	bf44      	itt	mi
 800acd6:	232b      	movmi	r3, #43	; 0x2b
 800acd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acdc:	f89a 3000 	ldrb.w	r3, [sl]
 800ace0:	2b2a      	cmp	r3, #42	; 0x2a
 800ace2:	d015      	beq.n	800ad10 <_vfiprintf_r+0x13c>
 800ace4:	9a07      	ldr	r2, [sp, #28]
 800ace6:	4654      	mov	r4, sl
 800ace8:	2000      	movs	r0, #0
 800acea:	f04f 0c0a 	mov.w	ip, #10
 800acee:	4621      	mov	r1, r4
 800acf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acf4:	3b30      	subs	r3, #48	; 0x30
 800acf6:	2b09      	cmp	r3, #9
 800acf8:	d94e      	bls.n	800ad98 <_vfiprintf_r+0x1c4>
 800acfa:	b1b0      	cbz	r0, 800ad2a <_vfiprintf_r+0x156>
 800acfc:	9207      	str	r2, [sp, #28]
 800acfe:	e014      	b.n	800ad2a <_vfiprintf_r+0x156>
 800ad00:	eba0 0308 	sub.w	r3, r0, r8
 800ad04:	fa09 f303 	lsl.w	r3, r9, r3
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	46a2      	mov	sl, r4
 800ad0e:	e7d2      	b.n	800acb6 <_vfiprintf_r+0xe2>
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	1d19      	adds	r1, r3, #4
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	9103      	str	r1, [sp, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bfbb      	ittet	lt
 800ad1c:	425b      	neglt	r3, r3
 800ad1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad22:	9307      	strge	r3, [sp, #28]
 800ad24:	9307      	strlt	r3, [sp, #28]
 800ad26:	bfb8      	it	lt
 800ad28:	9204      	strlt	r2, [sp, #16]
 800ad2a:	7823      	ldrb	r3, [r4, #0]
 800ad2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad2e:	d10c      	bne.n	800ad4a <_vfiprintf_r+0x176>
 800ad30:	7863      	ldrb	r3, [r4, #1]
 800ad32:	2b2a      	cmp	r3, #42	; 0x2a
 800ad34:	d135      	bne.n	800ada2 <_vfiprintf_r+0x1ce>
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	1d1a      	adds	r2, r3, #4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	9203      	str	r2, [sp, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	bfb8      	it	lt
 800ad42:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad46:	3402      	adds	r4, #2
 800ad48:	9305      	str	r3, [sp, #20]
 800ad4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae30 <_vfiprintf_r+0x25c>
 800ad4e:	7821      	ldrb	r1, [r4, #0]
 800ad50:	2203      	movs	r2, #3
 800ad52:	4650      	mov	r0, sl
 800ad54:	f7f5 faa4 	bl	80002a0 <memchr>
 800ad58:	b140      	cbz	r0, 800ad6c <_vfiprintf_r+0x198>
 800ad5a:	2340      	movs	r3, #64	; 0x40
 800ad5c:	eba0 000a 	sub.w	r0, r0, sl
 800ad60:	fa03 f000 	lsl.w	r0, r3, r0
 800ad64:	9b04      	ldr	r3, [sp, #16]
 800ad66:	4303      	orrs	r3, r0
 800ad68:	3401      	adds	r4, #1
 800ad6a:	9304      	str	r3, [sp, #16]
 800ad6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad70:	482c      	ldr	r0, [pc, #176]	; (800ae24 <_vfiprintf_r+0x250>)
 800ad72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad76:	2206      	movs	r2, #6
 800ad78:	f7f5 fa92 	bl	80002a0 <memchr>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d03f      	beq.n	800ae00 <_vfiprintf_r+0x22c>
 800ad80:	4b29      	ldr	r3, [pc, #164]	; (800ae28 <_vfiprintf_r+0x254>)
 800ad82:	bb1b      	cbnz	r3, 800adcc <_vfiprintf_r+0x1f8>
 800ad84:	9b03      	ldr	r3, [sp, #12]
 800ad86:	3307      	adds	r3, #7
 800ad88:	f023 0307 	bic.w	r3, r3, #7
 800ad8c:	3308      	adds	r3, #8
 800ad8e:	9303      	str	r3, [sp, #12]
 800ad90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad92:	443b      	add	r3, r7
 800ad94:	9309      	str	r3, [sp, #36]	; 0x24
 800ad96:	e767      	b.n	800ac68 <_vfiprintf_r+0x94>
 800ad98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad9c:	460c      	mov	r4, r1
 800ad9e:	2001      	movs	r0, #1
 800ada0:	e7a5      	b.n	800acee <_vfiprintf_r+0x11a>
 800ada2:	2300      	movs	r3, #0
 800ada4:	3401      	adds	r4, #1
 800ada6:	9305      	str	r3, [sp, #20]
 800ada8:	4619      	mov	r1, r3
 800adaa:	f04f 0c0a 	mov.w	ip, #10
 800adae:	4620      	mov	r0, r4
 800adb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adb4:	3a30      	subs	r2, #48	; 0x30
 800adb6:	2a09      	cmp	r2, #9
 800adb8:	d903      	bls.n	800adc2 <_vfiprintf_r+0x1ee>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0c5      	beq.n	800ad4a <_vfiprintf_r+0x176>
 800adbe:	9105      	str	r1, [sp, #20]
 800adc0:	e7c3      	b.n	800ad4a <_vfiprintf_r+0x176>
 800adc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800adc6:	4604      	mov	r4, r0
 800adc8:	2301      	movs	r3, #1
 800adca:	e7f0      	b.n	800adae <_vfiprintf_r+0x1da>
 800adcc:	ab03      	add	r3, sp, #12
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	462a      	mov	r2, r5
 800add2:	4b16      	ldr	r3, [pc, #88]	; (800ae2c <_vfiprintf_r+0x258>)
 800add4:	a904      	add	r1, sp, #16
 800add6:	4630      	mov	r0, r6
 800add8:	f7fd fe30 	bl	8008a3c <_printf_float>
 800addc:	4607      	mov	r7, r0
 800adde:	1c78      	adds	r0, r7, #1
 800ade0:	d1d6      	bne.n	800ad90 <_vfiprintf_r+0x1bc>
 800ade2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ade4:	07d9      	lsls	r1, r3, #31
 800ade6:	d405      	bmi.n	800adf4 <_vfiprintf_r+0x220>
 800ade8:	89ab      	ldrh	r3, [r5, #12]
 800adea:	059a      	lsls	r2, r3, #22
 800adec:	d402      	bmi.n	800adf4 <_vfiprintf_r+0x220>
 800adee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adf0:	f000 faaf 	bl	800b352 <__retarget_lock_release_recursive>
 800adf4:	89ab      	ldrh	r3, [r5, #12]
 800adf6:	065b      	lsls	r3, r3, #25
 800adf8:	f53f af12 	bmi.w	800ac20 <_vfiprintf_r+0x4c>
 800adfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adfe:	e711      	b.n	800ac24 <_vfiprintf_r+0x50>
 800ae00:	ab03      	add	r3, sp, #12
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	462a      	mov	r2, r5
 800ae06:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <_vfiprintf_r+0x258>)
 800ae08:	a904      	add	r1, sp, #16
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f7fe f8bc 	bl	8008f88 <_printf_i>
 800ae10:	e7e4      	b.n	800addc <_vfiprintf_r+0x208>
 800ae12:	bf00      	nop
 800ae14:	0800bf3c 	.word	0x0800bf3c
 800ae18:	0800bf5c 	.word	0x0800bf5c
 800ae1c:	0800bf1c 	.word	0x0800bf1c
 800ae20:	0800bdc4 	.word	0x0800bdc4
 800ae24:	0800bdce 	.word	0x0800bdce
 800ae28:	08008a3d 	.word	0x08008a3d
 800ae2c:	0800abaf 	.word	0x0800abaf
 800ae30:	0800bdca 	.word	0x0800bdca

0800ae34 <__swbuf_r>:
 800ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae36:	460e      	mov	r6, r1
 800ae38:	4614      	mov	r4, r2
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	b118      	cbz	r0, 800ae46 <__swbuf_r+0x12>
 800ae3e:	6983      	ldr	r3, [r0, #24]
 800ae40:	b90b      	cbnz	r3, 800ae46 <__swbuf_r+0x12>
 800ae42:	f000 f9e7 	bl	800b214 <__sinit>
 800ae46:	4b21      	ldr	r3, [pc, #132]	; (800aecc <__swbuf_r+0x98>)
 800ae48:	429c      	cmp	r4, r3
 800ae4a:	d12b      	bne.n	800aea4 <__swbuf_r+0x70>
 800ae4c:	686c      	ldr	r4, [r5, #4]
 800ae4e:	69a3      	ldr	r3, [r4, #24]
 800ae50:	60a3      	str	r3, [r4, #8]
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	071a      	lsls	r2, r3, #28
 800ae56:	d52f      	bpl.n	800aeb8 <__swbuf_r+0x84>
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	b36b      	cbz	r3, 800aeb8 <__swbuf_r+0x84>
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	6820      	ldr	r0, [r4, #0]
 800ae60:	1ac0      	subs	r0, r0, r3
 800ae62:	6963      	ldr	r3, [r4, #20]
 800ae64:	b2f6      	uxtb	r6, r6
 800ae66:	4283      	cmp	r3, r0
 800ae68:	4637      	mov	r7, r6
 800ae6a:	dc04      	bgt.n	800ae76 <__swbuf_r+0x42>
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f000 f93c 	bl	800b0ec <_fflush_r>
 800ae74:	bb30      	cbnz	r0, 800aec4 <__swbuf_r+0x90>
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	60a3      	str	r3, [r4, #8]
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	6022      	str	r2, [r4, #0]
 800ae82:	701e      	strb	r6, [r3, #0]
 800ae84:	6963      	ldr	r3, [r4, #20]
 800ae86:	3001      	adds	r0, #1
 800ae88:	4283      	cmp	r3, r0
 800ae8a:	d004      	beq.n	800ae96 <__swbuf_r+0x62>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	07db      	lsls	r3, r3, #31
 800ae90:	d506      	bpl.n	800aea0 <__swbuf_r+0x6c>
 800ae92:	2e0a      	cmp	r6, #10
 800ae94:	d104      	bne.n	800aea0 <__swbuf_r+0x6c>
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 f927 	bl	800b0ec <_fflush_r>
 800ae9e:	b988      	cbnz	r0, 800aec4 <__swbuf_r+0x90>
 800aea0:	4638      	mov	r0, r7
 800aea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea4:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <__swbuf_r+0x9c>)
 800aea6:	429c      	cmp	r4, r3
 800aea8:	d101      	bne.n	800aeae <__swbuf_r+0x7a>
 800aeaa:	68ac      	ldr	r4, [r5, #8]
 800aeac:	e7cf      	b.n	800ae4e <__swbuf_r+0x1a>
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <__swbuf_r+0xa0>)
 800aeb0:	429c      	cmp	r4, r3
 800aeb2:	bf08      	it	eq
 800aeb4:	68ec      	ldreq	r4, [r5, #12]
 800aeb6:	e7ca      	b.n	800ae4e <__swbuf_r+0x1a>
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 f81a 	bl	800aef4 <__swsetup_r>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d0cb      	beq.n	800ae5c <__swbuf_r+0x28>
 800aec4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aec8:	e7ea      	b.n	800aea0 <__swbuf_r+0x6c>
 800aeca:	bf00      	nop
 800aecc:	0800bf3c 	.word	0x0800bf3c
 800aed0:	0800bf5c 	.word	0x0800bf5c
 800aed4:	0800bf1c 	.word	0x0800bf1c

0800aed8 <__ascii_wctomb>:
 800aed8:	b149      	cbz	r1, 800aeee <__ascii_wctomb+0x16>
 800aeda:	2aff      	cmp	r2, #255	; 0xff
 800aedc:	bf85      	ittet	hi
 800aede:	238a      	movhi	r3, #138	; 0x8a
 800aee0:	6003      	strhi	r3, [r0, #0]
 800aee2:	700a      	strbls	r2, [r1, #0]
 800aee4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800aee8:	bf98      	it	ls
 800aeea:	2001      	movls	r0, #1
 800aeec:	4770      	bx	lr
 800aeee:	4608      	mov	r0, r1
 800aef0:	4770      	bx	lr
	...

0800aef4 <__swsetup_r>:
 800aef4:	4b32      	ldr	r3, [pc, #200]	; (800afc0 <__swsetup_r+0xcc>)
 800aef6:	b570      	push	{r4, r5, r6, lr}
 800aef8:	681d      	ldr	r5, [r3, #0]
 800aefa:	4606      	mov	r6, r0
 800aefc:	460c      	mov	r4, r1
 800aefe:	b125      	cbz	r5, 800af0a <__swsetup_r+0x16>
 800af00:	69ab      	ldr	r3, [r5, #24]
 800af02:	b913      	cbnz	r3, 800af0a <__swsetup_r+0x16>
 800af04:	4628      	mov	r0, r5
 800af06:	f000 f985 	bl	800b214 <__sinit>
 800af0a:	4b2e      	ldr	r3, [pc, #184]	; (800afc4 <__swsetup_r+0xd0>)
 800af0c:	429c      	cmp	r4, r3
 800af0e:	d10f      	bne.n	800af30 <__swsetup_r+0x3c>
 800af10:	686c      	ldr	r4, [r5, #4]
 800af12:	89a3      	ldrh	r3, [r4, #12]
 800af14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af18:	0719      	lsls	r1, r3, #28
 800af1a:	d42c      	bmi.n	800af76 <__swsetup_r+0x82>
 800af1c:	06dd      	lsls	r5, r3, #27
 800af1e:	d411      	bmi.n	800af44 <__swsetup_r+0x50>
 800af20:	2309      	movs	r3, #9
 800af22:	6033      	str	r3, [r6, #0]
 800af24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af28:	81a3      	strh	r3, [r4, #12]
 800af2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af2e:	e03e      	b.n	800afae <__swsetup_r+0xba>
 800af30:	4b25      	ldr	r3, [pc, #148]	; (800afc8 <__swsetup_r+0xd4>)
 800af32:	429c      	cmp	r4, r3
 800af34:	d101      	bne.n	800af3a <__swsetup_r+0x46>
 800af36:	68ac      	ldr	r4, [r5, #8]
 800af38:	e7eb      	b.n	800af12 <__swsetup_r+0x1e>
 800af3a:	4b24      	ldr	r3, [pc, #144]	; (800afcc <__swsetup_r+0xd8>)
 800af3c:	429c      	cmp	r4, r3
 800af3e:	bf08      	it	eq
 800af40:	68ec      	ldreq	r4, [r5, #12]
 800af42:	e7e6      	b.n	800af12 <__swsetup_r+0x1e>
 800af44:	0758      	lsls	r0, r3, #29
 800af46:	d512      	bpl.n	800af6e <__swsetup_r+0x7a>
 800af48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af4a:	b141      	cbz	r1, 800af5e <__swsetup_r+0x6a>
 800af4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af50:	4299      	cmp	r1, r3
 800af52:	d002      	beq.n	800af5a <__swsetup_r+0x66>
 800af54:	4630      	mov	r0, r6
 800af56:	f7ff fb6f 	bl	800a638 <_free_r>
 800af5a:	2300      	movs	r3, #0
 800af5c:	6363      	str	r3, [r4, #52]	; 0x34
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af64:	81a3      	strh	r3, [r4, #12]
 800af66:	2300      	movs	r3, #0
 800af68:	6063      	str	r3, [r4, #4]
 800af6a:	6923      	ldr	r3, [r4, #16]
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	f043 0308 	orr.w	r3, r3, #8
 800af74:	81a3      	strh	r3, [r4, #12]
 800af76:	6923      	ldr	r3, [r4, #16]
 800af78:	b94b      	cbnz	r3, 800af8e <__swsetup_r+0x9a>
 800af7a:	89a3      	ldrh	r3, [r4, #12]
 800af7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af84:	d003      	beq.n	800af8e <__swsetup_r+0x9a>
 800af86:	4621      	mov	r1, r4
 800af88:	4630      	mov	r0, r6
 800af8a:	f000 fa07 	bl	800b39c <__smakebuf_r>
 800af8e:	89a0      	ldrh	r0, [r4, #12]
 800af90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af94:	f010 0301 	ands.w	r3, r0, #1
 800af98:	d00a      	beq.n	800afb0 <__swsetup_r+0xbc>
 800af9a:	2300      	movs	r3, #0
 800af9c:	60a3      	str	r3, [r4, #8]
 800af9e:	6963      	ldr	r3, [r4, #20]
 800afa0:	425b      	negs	r3, r3
 800afa2:	61a3      	str	r3, [r4, #24]
 800afa4:	6923      	ldr	r3, [r4, #16]
 800afa6:	b943      	cbnz	r3, 800afba <__swsetup_r+0xc6>
 800afa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afac:	d1ba      	bne.n	800af24 <__swsetup_r+0x30>
 800afae:	bd70      	pop	{r4, r5, r6, pc}
 800afb0:	0781      	lsls	r1, r0, #30
 800afb2:	bf58      	it	pl
 800afb4:	6963      	ldrpl	r3, [r4, #20]
 800afb6:	60a3      	str	r3, [r4, #8]
 800afb8:	e7f4      	b.n	800afa4 <__swsetup_r+0xb0>
 800afba:	2000      	movs	r0, #0
 800afbc:	e7f7      	b.n	800afae <__swsetup_r+0xba>
 800afbe:	bf00      	nop
 800afc0:	20000038 	.word	0x20000038
 800afc4:	0800bf3c 	.word	0x0800bf3c
 800afc8:	0800bf5c 	.word	0x0800bf5c
 800afcc:	0800bf1c 	.word	0x0800bf1c

0800afd0 <abort>:
 800afd0:	b508      	push	{r3, lr}
 800afd2:	2006      	movs	r0, #6
 800afd4:	f000 fa52 	bl	800b47c <raise>
 800afd8:	2001      	movs	r0, #1
 800afda:	f7fd fb85 	bl	80086e8 <_exit>
	...

0800afe0 <__sflush_r>:
 800afe0:	898a      	ldrh	r2, [r1, #12]
 800afe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe6:	4605      	mov	r5, r0
 800afe8:	0710      	lsls	r0, r2, #28
 800afea:	460c      	mov	r4, r1
 800afec:	d458      	bmi.n	800b0a0 <__sflush_r+0xc0>
 800afee:	684b      	ldr	r3, [r1, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	dc05      	bgt.n	800b000 <__sflush_r+0x20>
 800aff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dc02      	bgt.n	800b000 <__sflush_r+0x20>
 800affa:	2000      	movs	r0, #0
 800affc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b002:	2e00      	cmp	r6, #0
 800b004:	d0f9      	beq.n	800affa <__sflush_r+0x1a>
 800b006:	2300      	movs	r3, #0
 800b008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b00c:	682f      	ldr	r7, [r5, #0]
 800b00e:	602b      	str	r3, [r5, #0]
 800b010:	d032      	beq.n	800b078 <__sflush_r+0x98>
 800b012:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	075a      	lsls	r2, r3, #29
 800b018:	d505      	bpl.n	800b026 <__sflush_r+0x46>
 800b01a:	6863      	ldr	r3, [r4, #4]
 800b01c:	1ac0      	subs	r0, r0, r3
 800b01e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b020:	b10b      	cbz	r3, 800b026 <__sflush_r+0x46>
 800b022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b024:	1ac0      	subs	r0, r0, r3
 800b026:	2300      	movs	r3, #0
 800b028:	4602      	mov	r2, r0
 800b02a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b02c:	6a21      	ldr	r1, [r4, #32]
 800b02e:	4628      	mov	r0, r5
 800b030:	47b0      	blx	r6
 800b032:	1c43      	adds	r3, r0, #1
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	d106      	bne.n	800b046 <__sflush_r+0x66>
 800b038:	6829      	ldr	r1, [r5, #0]
 800b03a:	291d      	cmp	r1, #29
 800b03c:	d82c      	bhi.n	800b098 <__sflush_r+0xb8>
 800b03e:	4a2a      	ldr	r2, [pc, #168]	; (800b0e8 <__sflush_r+0x108>)
 800b040:	40ca      	lsrs	r2, r1
 800b042:	07d6      	lsls	r6, r2, #31
 800b044:	d528      	bpl.n	800b098 <__sflush_r+0xb8>
 800b046:	2200      	movs	r2, #0
 800b048:	6062      	str	r2, [r4, #4]
 800b04a:	04d9      	lsls	r1, r3, #19
 800b04c:	6922      	ldr	r2, [r4, #16]
 800b04e:	6022      	str	r2, [r4, #0]
 800b050:	d504      	bpl.n	800b05c <__sflush_r+0x7c>
 800b052:	1c42      	adds	r2, r0, #1
 800b054:	d101      	bne.n	800b05a <__sflush_r+0x7a>
 800b056:	682b      	ldr	r3, [r5, #0]
 800b058:	b903      	cbnz	r3, 800b05c <__sflush_r+0x7c>
 800b05a:	6560      	str	r0, [r4, #84]	; 0x54
 800b05c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b05e:	602f      	str	r7, [r5, #0]
 800b060:	2900      	cmp	r1, #0
 800b062:	d0ca      	beq.n	800affa <__sflush_r+0x1a>
 800b064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b068:	4299      	cmp	r1, r3
 800b06a:	d002      	beq.n	800b072 <__sflush_r+0x92>
 800b06c:	4628      	mov	r0, r5
 800b06e:	f7ff fae3 	bl	800a638 <_free_r>
 800b072:	2000      	movs	r0, #0
 800b074:	6360      	str	r0, [r4, #52]	; 0x34
 800b076:	e7c1      	b.n	800affc <__sflush_r+0x1c>
 800b078:	6a21      	ldr	r1, [r4, #32]
 800b07a:	2301      	movs	r3, #1
 800b07c:	4628      	mov	r0, r5
 800b07e:	47b0      	blx	r6
 800b080:	1c41      	adds	r1, r0, #1
 800b082:	d1c7      	bne.n	800b014 <__sflush_r+0x34>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0c4      	beq.n	800b014 <__sflush_r+0x34>
 800b08a:	2b1d      	cmp	r3, #29
 800b08c:	d001      	beq.n	800b092 <__sflush_r+0xb2>
 800b08e:	2b16      	cmp	r3, #22
 800b090:	d101      	bne.n	800b096 <__sflush_r+0xb6>
 800b092:	602f      	str	r7, [r5, #0]
 800b094:	e7b1      	b.n	800affa <__sflush_r+0x1a>
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	e7ad      	b.n	800affc <__sflush_r+0x1c>
 800b0a0:	690f      	ldr	r7, [r1, #16]
 800b0a2:	2f00      	cmp	r7, #0
 800b0a4:	d0a9      	beq.n	800affa <__sflush_r+0x1a>
 800b0a6:	0793      	lsls	r3, r2, #30
 800b0a8:	680e      	ldr	r6, [r1, #0]
 800b0aa:	bf08      	it	eq
 800b0ac:	694b      	ldreq	r3, [r1, #20]
 800b0ae:	600f      	str	r7, [r1, #0]
 800b0b0:	bf18      	it	ne
 800b0b2:	2300      	movne	r3, #0
 800b0b4:	eba6 0807 	sub.w	r8, r6, r7
 800b0b8:	608b      	str	r3, [r1, #8]
 800b0ba:	f1b8 0f00 	cmp.w	r8, #0
 800b0be:	dd9c      	ble.n	800affa <__sflush_r+0x1a>
 800b0c0:	6a21      	ldr	r1, [r4, #32]
 800b0c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0c4:	4643      	mov	r3, r8
 800b0c6:	463a      	mov	r2, r7
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b0      	blx	r6
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	dc06      	bgt.n	800b0de <__sflush_r+0xfe>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0d6:	81a3      	strh	r3, [r4, #12]
 800b0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0dc:	e78e      	b.n	800affc <__sflush_r+0x1c>
 800b0de:	4407      	add	r7, r0
 800b0e0:	eba8 0800 	sub.w	r8, r8, r0
 800b0e4:	e7e9      	b.n	800b0ba <__sflush_r+0xda>
 800b0e6:	bf00      	nop
 800b0e8:	20400001 	.word	0x20400001

0800b0ec <_fflush_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	690b      	ldr	r3, [r1, #16]
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	b913      	cbnz	r3, 800b0fc <_fflush_r+0x10>
 800b0f6:	2500      	movs	r5, #0
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	b118      	cbz	r0, 800b106 <_fflush_r+0x1a>
 800b0fe:	6983      	ldr	r3, [r0, #24]
 800b100:	b90b      	cbnz	r3, 800b106 <_fflush_r+0x1a>
 800b102:	f000 f887 	bl	800b214 <__sinit>
 800b106:	4b14      	ldr	r3, [pc, #80]	; (800b158 <_fflush_r+0x6c>)
 800b108:	429c      	cmp	r4, r3
 800b10a:	d11b      	bne.n	800b144 <_fflush_r+0x58>
 800b10c:	686c      	ldr	r4, [r5, #4]
 800b10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0ef      	beq.n	800b0f6 <_fflush_r+0xa>
 800b116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b118:	07d0      	lsls	r0, r2, #31
 800b11a:	d404      	bmi.n	800b126 <_fflush_r+0x3a>
 800b11c:	0599      	lsls	r1, r3, #22
 800b11e:	d402      	bmi.n	800b126 <_fflush_r+0x3a>
 800b120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b122:	f000 f915 	bl	800b350 <__retarget_lock_acquire_recursive>
 800b126:	4628      	mov	r0, r5
 800b128:	4621      	mov	r1, r4
 800b12a:	f7ff ff59 	bl	800afe0 <__sflush_r>
 800b12e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b130:	07da      	lsls	r2, r3, #31
 800b132:	4605      	mov	r5, r0
 800b134:	d4e0      	bmi.n	800b0f8 <_fflush_r+0xc>
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	059b      	lsls	r3, r3, #22
 800b13a:	d4dd      	bmi.n	800b0f8 <_fflush_r+0xc>
 800b13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b13e:	f000 f908 	bl	800b352 <__retarget_lock_release_recursive>
 800b142:	e7d9      	b.n	800b0f8 <_fflush_r+0xc>
 800b144:	4b05      	ldr	r3, [pc, #20]	; (800b15c <_fflush_r+0x70>)
 800b146:	429c      	cmp	r4, r3
 800b148:	d101      	bne.n	800b14e <_fflush_r+0x62>
 800b14a:	68ac      	ldr	r4, [r5, #8]
 800b14c:	e7df      	b.n	800b10e <_fflush_r+0x22>
 800b14e:	4b04      	ldr	r3, [pc, #16]	; (800b160 <_fflush_r+0x74>)
 800b150:	429c      	cmp	r4, r3
 800b152:	bf08      	it	eq
 800b154:	68ec      	ldreq	r4, [r5, #12]
 800b156:	e7da      	b.n	800b10e <_fflush_r+0x22>
 800b158:	0800bf3c 	.word	0x0800bf3c
 800b15c:	0800bf5c 	.word	0x0800bf5c
 800b160:	0800bf1c 	.word	0x0800bf1c

0800b164 <std>:
 800b164:	2300      	movs	r3, #0
 800b166:	b510      	push	{r4, lr}
 800b168:	4604      	mov	r4, r0
 800b16a:	e9c0 3300 	strd	r3, r3, [r0]
 800b16e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b172:	6083      	str	r3, [r0, #8]
 800b174:	8181      	strh	r1, [r0, #12]
 800b176:	6643      	str	r3, [r0, #100]	; 0x64
 800b178:	81c2      	strh	r2, [r0, #14]
 800b17a:	6183      	str	r3, [r0, #24]
 800b17c:	4619      	mov	r1, r3
 800b17e:	2208      	movs	r2, #8
 800b180:	305c      	adds	r0, #92	; 0x5c
 800b182:	f7fd fbb3 	bl	80088ec <memset>
 800b186:	4b05      	ldr	r3, [pc, #20]	; (800b19c <std+0x38>)
 800b188:	6263      	str	r3, [r4, #36]	; 0x24
 800b18a:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <std+0x3c>)
 800b18c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b18e:	4b05      	ldr	r3, [pc, #20]	; (800b1a4 <std+0x40>)
 800b190:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b192:	4b05      	ldr	r3, [pc, #20]	; (800b1a8 <std+0x44>)
 800b194:	6224      	str	r4, [r4, #32]
 800b196:	6323      	str	r3, [r4, #48]	; 0x30
 800b198:	bd10      	pop	{r4, pc}
 800b19a:	bf00      	nop
 800b19c:	0800b4b5 	.word	0x0800b4b5
 800b1a0:	0800b4d7 	.word	0x0800b4d7
 800b1a4:	0800b50f 	.word	0x0800b50f
 800b1a8:	0800b533 	.word	0x0800b533

0800b1ac <_cleanup_r>:
 800b1ac:	4901      	ldr	r1, [pc, #4]	; (800b1b4 <_cleanup_r+0x8>)
 800b1ae:	f000 b8af 	b.w	800b310 <_fwalk_reent>
 800b1b2:	bf00      	nop
 800b1b4:	0800b0ed 	.word	0x0800b0ed

0800b1b8 <__sfmoreglue>:
 800b1b8:	b570      	push	{r4, r5, r6, lr}
 800b1ba:	1e4a      	subs	r2, r1, #1
 800b1bc:	2568      	movs	r5, #104	; 0x68
 800b1be:	4355      	muls	r5, r2
 800b1c0:	460e      	mov	r6, r1
 800b1c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1c6:	f7ff fa87 	bl	800a6d8 <_malloc_r>
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	b140      	cbz	r0, 800b1e0 <__sfmoreglue+0x28>
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	e9c0 1600 	strd	r1, r6, [r0]
 800b1d4:	300c      	adds	r0, #12
 800b1d6:	60a0      	str	r0, [r4, #8]
 800b1d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1dc:	f7fd fb86 	bl	80088ec <memset>
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	bd70      	pop	{r4, r5, r6, pc}

0800b1e4 <__sfp_lock_acquire>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <__sfp_lock_acquire+0x8>)
 800b1e6:	f000 b8b3 	b.w	800b350 <__retarget_lock_acquire_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	200138e4 	.word	0x200138e4

0800b1f0 <__sfp_lock_release>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	; (800b1f8 <__sfp_lock_release+0x8>)
 800b1f2:	f000 b8ae 	b.w	800b352 <__retarget_lock_release_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	200138e4 	.word	0x200138e4

0800b1fc <__sinit_lock_acquire>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <__sinit_lock_acquire+0x8>)
 800b1fe:	f000 b8a7 	b.w	800b350 <__retarget_lock_acquire_recursive>
 800b202:	bf00      	nop
 800b204:	200138df 	.word	0x200138df

0800b208 <__sinit_lock_release>:
 800b208:	4801      	ldr	r0, [pc, #4]	; (800b210 <__sinit_lock_release+0x8>)
 800b20a:	f000 b8a2 	b.w	800b352 <__retarget_lock_release_recursive>
 800b20e:	bf00      	nop
 800b210:	200138df 	.word	0x200138df

0800b214 <__sinit>:
 800b214:	b510      	push	{r4, lr}
 800b216:	4604      	mov	r4, r0
 800b218:	f7ff fff0 	bl	800b1fc <__sinit_lock_acquire>
 800b21c:	69a3      	ldr	r3, [r4, #24]
 800b21e:	b11b      	cbz	r3, 800b228 <__sinit+0x14>
 800b220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b224:	f7ff bff0 	b.w	800b208 <__sinit_lock_release>
 800b228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b22c:	6523      	str	r3, [r4, #80]	; 0x50
 800b22e:	4b13      	ldr	r3, [pc, #76]	; (800b27c <__sinit+0x68>)
 800b230:	4a13      	ldr	r2, [pc, #76]	; (800b280 <__sinit+0x6c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	62a2      	str	r2, [r4, #40]	; 0x28
 800b236:	42a3      	cmp	r3, r4
 800b238:	bf04      	itt	eq
 800b23a:	2301      	moveq	r3, #1
 800b23c:	61a3      	streq	r3, [r4, #24]
 800b23e:	4620      	mov	r0, r4
 800b240:	f000 f820 	bl	800b284 <__sfp>
 800b244:	6060      	str	r0, [r4, #4]
 800b246:	4620      	mov	r0, r4
 800b248:	f000 f81c 	bl	800b284 <__sfp>
 800b24c:	60a0      	str	r0, [r4, #8]
 800b24e:	4620      	mov	r0, r4
 800b250:	f000 f818 	bl	800b284 <__sfp>
 800b254:	2200      	movs	r2, #0
 800b256:	60e0      	str	r0, [r4, #12]
 800b258:	2104      	movs	r1, #4
 800b25a:	6860      	ldr	r0, [r4, #4]
 800b25c:	f7ff ff82 	bl	800b164 <std>
 800b260:	68a0      	ldr	r0, [r4, #8]
 800b262:	2201      	movs	r2, #1
 800b264:	2109      	movs	r1, #9
 800b266:	f7ff ff7d 	bl	800b164 <std>
 800b26a:	68e0      	ldr	r0, [r4, #12]
 800b26c:	2202      	movs	r2, #2
 800b26e:	2112      	movs	r1, #18
 800b270:	f7ff ff78 	bl	800b164 <std>
 800b274:	2301      	movs	r3, #1
 800b276:	61a3      	str	r3, [r4, #24]
 800b278:	e7d2      	b.n	800b220 <__sinit+0xc>
 800b27a:	bf00      	nop
 800b27c:	0800bb98 	.word	0x0800bb98
 800b280:	0800b1ad 	.word	0x0800b1ad

0800b284 <__sfp>:
 800b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b286:	4607      	mov	r7, r0
 800b288:	f7ff ffac 	bl	800b1e4 <__sfp_lock_acquire>
 800b28c:	4b1e      	ldr	r3, [pc, #120]	; (800b308 <__sfp+0x84>)
 800b28e:	681e      	ldr	r6, [r3, #0]
 800b290:	69b3      	ldr	r3, [r6, #24]
 800b292:	b913      	cbnz	r3, 800b29a <__sfp+0x16>
 800b294:	4630      	mov	r0, r6
 800b296:	f7ff ffbd 	bl	800b214 <__sinit>
 800b29a:	3648      	adds	r6, #72	; 0x48
 800b29c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	d503      	bpl.n	800b2ac <__sfp+0x28>
 800b2a4:	6833      	ldr	r3, [r6, #0]
 800b2a6:	b30b      	cbz	r3, 800b2ec <__sfp+0x68>
 800b2a8:	6836      	ldr	r6, [r6, #0]
 800b2aa:	e7f7      	b.n	800b29c <__sfp+0x18>
 800b2ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2b0:	b9d5      	cbnz	r5, 800b2e8 <__sfp+0x64>
 800b2b2:	4b16      	ldr	r3, [pc, #88]	; (800b30c <__sfp+0x88>)
 800b2b4:	60e3      	str	r3, [r4, #12]
 800b2b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2ba:	6665      	str	r5, [r4, #100]	; 0x64
 800b2bc:	f000 f847 	bl	800b34e <__retarget_lock_init_recursive>
 800b2c0:	f7ff ff96 	bl	800b1f0 <__sfp_lock_release>
 800b2c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2cc:	6025      	str	r5, [r4, #0]
 800b2ce:	61a5      	str	r5, [r4, #24]
 800b2d0:	2208      	movs	r2, #8
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2d8:	f7fd fb08 	bl	80088ec <memset>
 800b2dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e8:	3468      	adds	r4, #104	; 0x68
 800b2ea:	e7d9      	b.n	800b2a0 <__sfp+0x1c>
 800b2ec:	2104      	movs	r1, #4
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	f7ff ff62 	bl	800b1b8 <__sfmoreglue>
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	6030      	str	r0, [r6, #0]
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1d5      	bne.n	800b2a8 <__sfp+0x24>
 800b2fc:	f7ff ff78 	bl	800b1f0 <__sfp_lock_release>
 800b300:	230c      	movs	r3, #12
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	e7ee      	b.n	800b2e4 <__sfp+0x60>
 800b306:	bf00      	nop
 800b308:	0800bb98 	.word	0x0800bb98
 800b30c:	ffff0001 	.word	0xffff0001

0800b310 <_fwalk_reent>:
 800b310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b314:	4606      	mov	r6, r0
 800b316:	4688      	mov	r8, r1
 800b318:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b31c:	2700      	movs	r7, #0
 800b31e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b322:	f1b9 0901 	subs.w	r9, r9, #1
 800b326:	d505      	bpl.n	800b334 <_fwalk_reent+0x24>
 800b328:	6824      	ldr	r4, [r4, #0]
 800b32a:	2c00      	cmp	r4, #0
 800b32c:	d1f7      	bne.n	800b31e <_fwalk_reent+0xe>
 800b32e:	4638      	mov	r0, r7
 800b330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b334:	89ab      	ldrh	r3, [r5, #12]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d907      	bls.n	800b34a <_fwalk_reent+0x3a>
 800b33a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b33e:	3301      	adds	r3, #1
 800b340:	d003      	beq.n	800b34a <_fwalk_reent+0x3a>
 800b342:	4629      	mov	r1, r5
 800b344:	4630      	mov	r0, r6
 800b346:	47c0      	blx	r8
 800b348:	4307      	orrs	r7, r0
 800b34a:	3568      	adds	r5, #104	; 0x68
 800b34c:	e7e9      	b.n	800b322 <_fwalk_reent+0x12>

0800b34e <__retarget_lock_init_recursive>:
 800b34e:	4770      	bx	lr

0800b350 <__retarget_lock_acquire_recursive>:
 800b350:	4770      	bx	lr

0800b352 <__retarget_lock_release_recursive>:
 800b352:	4770      	bx	lr

0800b354 <__swhatbuf_r>:
 800b354:	b570      	push	{r4, r5, r6, lr}
 800b356:	460e      	mov	r6, r1
 800b358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35c:	2900      	cmp	r1, #0
 800b35e:	b096      	sub	sp, #88	; 0x58
 800b360:	4614      	mov	r4, r2
 800b362:	461d      	mov	r5, r3
 800b364:	da07      	bge.n	800b376 <__swhatbuf_r+0x22>
 800b366:	2300      	movs	r3, #0
 800b368:	602b      	str	r3, [r5, #0]
 800b36a:	89b3      	ldrh	r3, [r6, #12]
 800b36c:	061a      	lsls	r2, r3, #24
 800b36e:	d410      	bmi.n	800b392 <__swhatbuf_r+0x3e>
 800b370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b374:	e00e      	b.n	800b394 <__swhatbuf_r+0x40>
 800b376:	466a      	mov	r2, sp
 800b378:	f000 f8f0 	bl	800b55c <_fstat_r>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	dbf2      	blt.n	800b366 <__swhatbuf_r+0x12>
 800b380:	9a01      	ldr	r2, [sp, #4]
 800b382:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b386:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b38a:	425a      	negs	r2, r3
 800b38c:	415a      	adcs	r2, r3
 800b38e:	602a      	str	r2, [r5, #0]
 800b390:	e7ee      	b.n	800b370 <__swhatbuf_r+0x1c>
 800b392:	2340      	movs	r3, #64	; 0x40
 800b394:	2000      	movs	r0, #0
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	b016      	add	sp, #88	; 0x58
 800b39a:	bd70      	pop	{r4, r5, r6, pc}

0800b39c <__smakebuf_r>:
 800b39c:	898b      	ldrh	r3, [r1, #12]
 800b39e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3a0:	079d      	lsls	r5, r3, #30
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	d507      	bpl.n	800b3b8 <__smakebuf_r+0x1c>
 800b3a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	6123      	str	r3, [r4, #16]
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	6163      	str	r3, [r4, #20]
 800b3b4:	b002      	add	sp, #8
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
 800b3b8:	ab01      	add	r3, sp, #4
 800b3ba:	466a      	mov	r2, sp
 800b3bc:	f7ff ffca 	bl	800b354 <__swhatbuf_r>
 800b3c0:	9900      	ldr	r1, [sp, #0]
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f7ff f987 	bl	800a6d8 <_malloc_r>
 800b3ca:	b948      	cbnz	r0, 800b3e0 <__smakebuf_r+0x44>
 800b3cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d0:	059a      	lsls	r2, r3, #22
 800b3d2:	d4ef      	bmi.n	800b3b4 <__smakebuf_r+0x18>
 800b3d4:	f023 0303 	bic.w	r3, r3, #3
 800b3d8:	f043 0302 	orr.w	r3, r3, #2
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	e7e3      	b.n	800b3a8 <__smakebuf_r+0xc>
 800b3e0:	4b0d      	ldr	r3, [pc, #52]	; (800b418 <__smakebuf_r+0x7c>)
 800b3e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	6020      	str	r0, [r4, #0]
 800b3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	9b00      	ldr	r3, [sp, #0]
 800b3f0:	6163      	str	r3, [r4, #20]
 800b3f2:	9b01      	ldr	r3, [sp, #4]
 800b3f4:	6120      	str	r0, [r4, #16]
 800b3f6:	b15b      	cbz	r3, 800b410 <__smakebuf_r+0x74>
 800b3f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	f000 f8bf 	bl	800b580 <_isatty_r>
 800b402:	b128      	cbz	r0, 800b410 <__smakebuf_r+0x74>
 800b404:	89a3      	ldrh	r3, [r4, #12]
 800b406:	f023 0303 	bic.w	r3, r3, #3
 800b40a:	f043 0301 	orr.w	r3, r3, #1
 800b40e:	81a3      	strh	r3, [r4, #12]
 800b410:	89a0      	ldrh	r0, [r4, #12]
 800b412:	4305      	orrs	r5, r0
 800b414:	81a5      	strh	r5, [r4, #12]
 800b416:	e7cd      	b.n	800b3b4 <__smakebuf_r+0x18>
 800b418:	0800b1ad 	.word	0x0800b1ad

0800b41c <_malloc_usable_size_r>:
 800b41c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b420:	1f18      	subs	r0, r3, #4
 800b422:	2b00      	cmp	r3, #0
 800b424:	bfbc      	itt	lt
 800b426:	580b      	ldrlt	r3, [r1, r0]
 800b428:	18c0      	addlt	r0, r0, r3
 800b42a:	4770      	bx	lr

0800b42c <_raise_r>:
 800b42c:	291f      	cmp	r1, #31
 800b42e:	b538      	push	{r3, r4, r5, lr}
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	d904      	bls.n	800b440 <_raise_r+0x14>
 800b436:	2316      	movs	r3, #22
 800b438:	6003      	str	r3, [r0, #0]
 800b43a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b43e:	bd38      	pop	{r3, r4, r5, pc}
 800b440:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b442:	b112      	cbz	r2, 800b44a <_raise_r+0x1e>
 800b444:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b448:	b94b      	cbnz	r3, 800b45e <_raise_r+0x32>
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 f830 	bl	800b4b0 <_getpid_r>
 800b450:	462a      	mov	r2, r5
 800b452:	4601      	mov	r1, r0
 800b454:	4620      	mov	r0, r4
 800b456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b45a:	f000 b817 	b.w	800b48c <_kill_r>
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d00a      	beq.n	800b478 <_raise_r+0x4c>
 800b462:	1c59      	adds	r1, r3, #1
 800b464:	d103      	bne.n	800b46e <_raise_r+0x42>
 800b466:	2316      	movs	r3, #22
 800b468:	6003      	str	r3, [r0, #0]
 800b46a:	2001      	movs	r0, #1
 800b46c:	e7e7      	b.n	800b43e <_raise_r+0x12>
 800b46e:	2400      	movs	r4, #0
 800b470:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b474:	4628      	mov	r0, r5
 800b476:	4798      	blx	r3
 800b478:	2000      	movs	r0, #0
 800b47a:	e7e0      	b.n	800b43e <_raise_r+0x12>

0800b47c <raise>:
 800b47c:	4b02      	ldr	r3, [pc, #8]	; (800b488 <raise+0xc>)
 800b47e:	4601      	mov	r1, r0
 800b480:	6818      	ldr	r0, [r3, #0]
 800b482:	f7ff bfd3 	b.w	800b42c <_raise_r>
 800b486:	bf00      	nop
 800b488:	20000038 	.word	0x20000038

0800b48c <_kill_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4d07      	ldr	r5, [pc, #28]	; (800b4ac <_kill_r+0x20>)
 800b490:	2300      	movs	r3, #0
 800b492:	4604      	mov	r4, r0
 800b494:	4608      	mov	r0, r1
 800b496:	4611      	mov	r1, r2
 800b498:	602b      	str	r3, [r5, #0]
 800b49a:	f7fd f915 	bl	80086c8 <_kill>
 800b49e:	1c43      	adds	r3, r0, #1
 800b4a0:	d102      	bne.n	800b4a8 <_kill_r+0x1c>
 800b4a2:	682b      	ldr	r3, [r5, #0]
 800b4a4:	b103      	cbz	r3, 800b4a8 <_kill_r+0x1c>
 800b4a6:	6023      	str	r3, [r4, #0]
 800b4a8:	bd38      	pop	{r3, r4, r5, pc}
 800b4aa:	bf00      	nop
 800b4ac:	200138d8 	.word	0x200138d8

0800b4b0 <_getpid_r>:
 800b4b0:	f7fd b902 	b.w	80086b8 <_getpid>

0800b4b4 <__sread>:
 800b4b4:	b510      	push	{r4, lr}
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4bc:	f000 f882 	bl	800b5c4 <_read_r>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	bfab      	itete	ge
 800b4c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b4c8:	181b      	addge	r3, r3, r0
 800b4ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4ce:	bfac      	ite	ge
 800b4d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4d2:	81a3      	strhlt	r3, [r4, #12]
 800b4d4:	bd10      	pop	{r4, pc}

0800b4d6 <__swrite>:
 800b4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4da:	461f      	mov	r7, r3
 800b4dc:	898b      	ldrh	r3, [r1, #12]
 800b4de:	05db      	lsls	r3, r3, #23
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	4616      	mov	r6, r2
 800b4e6:	d505      	bpl.n	800b4f4 <__swrite+0x1e>
 800b4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f000 f856 	bl	800b5a0 <_lseek_r>
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4fe:	81a3      	strh	r3, [r4, #12]
 800b500:	4632      	mov	r2, r6
 800b502:	463b      	mov	r3, r7
 800b504:	4628      	mov	r0, r5
 800b506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b50a:	f7fb ba0b 	b.w	8006924 <_write_r>

0800b50e <__sseek>:
 800b50e:	b510      	push	{r4, lr}
 800b510:	460c      	mov	r4, r1
 800b512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b516:	f000 f843 	bl	800b5a0 <_lseek_r>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	bf15      	itete	ne
 800b520:	6560      	strne	r0, [r4, #84]	; 0x54
 800b522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b52a:	81a3      	strheq	r3, [r4, #12]
 800b52c:	bf18      	it	ne
 800b52e:	81a3      	strhne	r3, [r4, #12]
 800b530:	bd10      	pop	{r4, pc}

0800b532 <__sclose>:
 800b532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b536:	f000 b801 	b.w	800b53c <_close_r>
	...

0800b53c <_close_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d06      	ldr	r5, [pc, #24]	; (800b558 <_close_r+0x1c>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	602b      	str	r3, [r5, #0]
 800b548:	f7fd f8f5 	bl	8008736 <_close>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	d102      	bne.n	800b556 <_close_r+0x1a>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	b103      	cbz	r3, 800b556 <_close_r+0x1a>
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	200138d8 	.word	0x200138d8

0800b55c <_fstat_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	4d07      	ldr	r5, [pc, #28]	; (800b57c <_fstat_r+0x20>)
 800b560:	2300      	movs	r3, #0
 800b562:	4604      	mov	r4, r0
 800b564:	4608      	mov	r0, r1
 800b566:	4611      	mov	r1, r2
 800b568:	602b      	str	r3, [r5, #0]
 800b56a:	f7fd f8f0 	bl	800874e <_fstat>
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	d102      	bne.n	800b578 <_fstat_r+0x1c>
 800b572:	682b      	ldr	r3, [r5, #0]
 800b574:	b103      	cbz	r3, 800b578 <_fstat_r+0x1c>
 800b576:	6023      	str	r3, [r4, #0]
 800b578:	bd38      	pop	{r3, r4, r5, pc}
 800b57a:	bf00      	nop
 800b57c:	200138d8 	.word	0x200138d8

0800b580 <_isatty_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	4d06      	ldr	r5, [pc, #24]	; (800b59c <_isatty_r+0x1c>)
 800b584:	2300      	movs	r3, #0
 800b586:	4604      	mov	r4, r0
 800b588:	4608      	mov	r0, r1
 800b58a:	602b      	str	r3, [r5, #0]
 800b58c:	f7fd f8ef 	bl	800876e <_isatty>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d102      	bne.n	800b59a <_isatty_r+0x1a>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	b103      	cbz	r3, 800b59a <_isatty_r+0x1a>
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	200138d8 	.word	0x200138d8

0800b5a0 <_lseek_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4d07      	ldr	r5, [pc, #28]	; (800b5c0 <_lseek_r+0x20>)
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	4608      	mov	r0, r1
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	602a      	str	r2, [r5, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	f7fd f8e8 	bl	8008784 <_lseek>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d102      	bne.n	800b5be <_lseek_r+0x1e>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	b103      	cbz	r3, 800b5be <_lseek_r+0x1e>
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	200138d8 	.word	0x200138d8

0800b5c4 <_read_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4d07      	ldr	r5, [pc, #28]	; (800b5e4 <_read_r+0x20>)
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	4608      	mov	r0, r1
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	602a      	str	r2, [r5, #0]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	f7fd f892 	bl	80086fc <_read>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d102      	bne.n	800b5e2 <_read_r+0x1e>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	b103      	cbz	r3, 800b5e2 <_read_r+0x1e>
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	200138d8 	.word	0x200138d8

0800b5e8 <_init>:
 800b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ea:	bf00      	nop
 800b5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ee:	bc08      	pop	{r3}
 800b5f0:	469e      	mov	lr, r3
 800b5f2:	4770      	bx	lr

0800b5f4 <_fini>:
 800b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f6:	bf00      	nop
 800b5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fa:	bc08      	pop	{r3}
 800b5fc:	469e      	mov	lr, r3
 800b5fe:	4770      	bx	lr
