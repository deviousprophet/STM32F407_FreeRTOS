
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000864  08008b88  08008b88  00018b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093ec  080093ec  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  080093ec  080093ec  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093ec  080093ec  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093ec  080093ec  000193ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080093f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000130a4  20000204  080095f8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200132a8  080095f8  000232a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8da  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d2  00000000  00000000  0002fb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  000322e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00032dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051e5  00000000  00000000  00033798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b60a  00000000  00000000  0003897d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00017446  00000000  00000000  00043f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0005b3cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cbc  00000000  00000000  0005b420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008b6c 	.word	0x08008b6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	08008b6c 	.word	0x08008b6c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <ADE_Init>:
void ADE_SPI_Init();
void ZeroX_Init();
void SAG_Init();
void IRQ_Init();

void ADE_Init(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	ADE_SPI_Init();
 8000bce:	f000 f895 	bl	8000cfc <ADE_SPI_Init>

//	ZeroX_Init();
//	SAG_Init();
	IRQ_Init();
 8000bd2:	f000 f905 	bl	8000de0 <IRQ_Init>

	//Reset
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2109      	movs	r1, #9
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <ADE_Init+0x58>)
 8000bdc:	f003 fcc4 	bl	8004568 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	e002      	b.n	8000bec <ADE_Init+0x24>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3301      	adds	r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	ddf7      	ble.n	8000be6 <ADE_Init+0x1e>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2109      	movs	r1, #9
 8000bfa:	4809      	ldr	r0, [pc, #36]	; (8000c20 <ADE_Init+0x58>)
 8000bfc:	f003 fcb4 	bl	8004568 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000c00:	2300      	movs	r3, #0
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	e002      	b.n	8000c0c <ADE_Init+0x44>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000c12:	4293      	cmp	r3, r2
 8000c14:	ddf7      	ble.n	8000c06 <ADE_Init+0x3e>

//	CYCEND, PKV, PKI
//	ADE_WriteData(IRQEN, 0x0344, 2);
//	ADE_WriteData(VPKLVL, 0x29, 1);
//	ADE_WriteData(IPKLVL, 0x2D, 1);
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40020c00 	.word	0x40020c00

08000c24 <ADE_ReadData>:

uint32_t ADE_ReadData(uint8_t address, uint32_t bytes_to_read) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
	uint32_t data = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
	uint8_t dummy_write = 0xff;
 8000c34:	23ff      	movs	r3, #255	; 0xff
 8000c36:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4813      	ldr	r0, [pc, #76]	; (8000c88 <ADE_ReadData+0x64>)
 8000c3c:	f004 f9aa 	bl	8004f94 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4810      	ldr	r0, [pc, #64]	; (8000c88 <ADE_ReadData+0x64>)
 8000c46:	f004 f968 	bl	8004f1a <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	e00e      	b.n	8000c6e <ADE_ReadData+0x4a>
		data <<= 8;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	617b      	str	r3, [r7, #20]
		data |= SPI_Transfer(ADE_SPI_HOST, dummy_write);
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480b      	ldr	r0, [pc, #44]	; (8000c88 <ADE_ReadData+0x64>)
 8000c5c:	f004 f95d 	bl	8004f1a <SPI_Transfer>
 8000c60:	4602      	mov	r2, r0
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d3ec      	bcc.n	8000c50 <ADE_ReadData+0x2c>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE); //SS pin pull to high
 8000c76:	2100      	movs	r1, #0
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <ADE_ReadData+0x64>)
 8000c7a:	f004 f98b 	bl	8004f94 <SPI_PeripheralControl>
	return data;
 8000c7e:	697b      	ldr	r3, [r7, #20]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40003800 	.word	0x40003800

08000c8c <ADE_WriteData>:

void ADE_WriteData(uint8_t address, uint32_t write_buffer, uint32_t bytes_to_write) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	74fb      	strb	r3, [r7, #19]
	address |= 0x80;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca4:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <ADE_WriteData+0x6c>)
 8000caa:	f004 f973 	bl	8004f94 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <ADE_WriteData+0x6c>)
 8000cb4:	f004 f931 	bl	8004f1a <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e010      	b.n	8000ce0 <ADE_WriteData+0x54>
		data = (uint8_t)(write_buffer >> 8*(bytes_to_write - i - 1));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	fa22 f303 	lsr.w	r3, r2, r3
 8000cce:	74fb      	strb	r3, [r7, #19]
		SPI_Transfer(ADE_SPI_HOST, data);
 8000cd0:	7cfb      	ldrb	r3, [r7, #19]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <ADE_WriteData+0x6c>)
 8000cd6:	f004 f920 	bl	8004f1a <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++) {
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d3ea      	bcc.n	8000cbe <ADE_WriteData+0x32>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE);; //SS pin pull to high
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <ADE_WriteData+0x6c>)
 8000cec:	f004 f952 	bl	8004f94 <SPI_PeripheralControl>
}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40003800 	.word	0x40003800

08000cfc <ADE_SPI_Init>:
			mode &= ~(1 << bit_flag);
		ADE_WriteData(MODE, mode, 2);
	}
}

void ADE_SPI_Init() {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	; 0x30
 8000d00:	af00      	add	r7, sp, #0
	 * PB13 -> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT function mode : 5
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000d02:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <ADE_SPI_Init+0xd8>)
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000d24:	230d      	movs	r3, #13
 8000d26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fa68 	bl	8004204 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000d34:	230f      	movs	r3, #15
 8000d36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fa60 	bl	8004204 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000d44:	230e      	movs	r3, #14
 8000d46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 fa58 	bl	8004204 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000d54:	230c      	movs	r3, #12
 8000d56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 fa50 	bl	8004204 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <ADE_SPI_Init+0xdc>)
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000d68:	2309      	movs	r3, #9
 8000d6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(&SPIPins);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fa40 	bl	8004204 <GPIO_Init>

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = ADE_SPI_HOST;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000d86:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;	// clock 1MHz
 8000d90:	2303      	movs	r3, #3
 8000d92:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000d94:	2300      	movs	r3, #0
 8000d96:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;				// CPOL 0
 8000d98:	2300      	movs	r3, #0
 8000d9a:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;				// CPHA 1
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 					// Hardware slave management enabled for NSS pin
 8000da0:	2300      	movs	r3, #0
 8000da2:	73bb      	strb	r3, [r7, #14]

	ADE_SPI_HOST->CR1 &= ~(1 << SPI_CR1_SPE);
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dae:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 f856 	bl	8004e64 <SPI_Init>
	ADE_SPI_HOST->CR1 |= (1 << SPI_CR1_SPE);
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc2:	6013      	str	r3, [r2, #0]

	SPI_SSOEConfig(ADE_SPI_HOST, ENABLE);
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000dc8:	f004 f900 	bl	8004fcc <SPI_SSOEConfig>
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40020c00 	.word	0x40020c00
 8000ddc:	40003800 	.word	0x40003800

08000de0 <IRQ_Init>:
//	IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI10);
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
}

void IRQ_Init() {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
//	Input pin trigger as falling edge
	GPIO_Handle_t GpioIRQ;
	GpioIRQ.pGPIOx = PORT_IRQ_IT;
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <IRQ_Init+0x3c>)
 8000de8:	607b      	str	r3, [r7, #4]
	GpioIRQ.GPIO_PinConfig.GPIO_PinNumber = PIN_IRQ_IT;
 8000dea:	230f      	movs	r3, #15
 8000dec:	723b      	strb	r3, [r7, #8]
	GpioIRQ.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000dee:	2304      	movs	r3, #4
 8000df0:	727b      	strb	r3, [r7, #9]
	GpioIRQ.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000df2:	2302      	movs	r3, #2
 8000df4:	72bb      	strb	r3, [r7, #10]
	GpioIRQ.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000df6:	2301      	movs	r3, #1
 8000df8:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioIRQ);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 fa01 	bl	8004204 <GPIO_Init>

//	IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI15);
 8000e02:	210f      	movs	r1, #15
 8000e04:	2028      	movs	r0, #40	; 0x28
 8000e06:	f003 fc5b 	bl	80046c0 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2028      	movs	r0, #40	; 0x28
 8000e0e:	f003 fbd1 	bl	80045b4 <GPIO_IRQInterruptConfig>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <ds1307_init>:
uint8_t bcd_to_binary(uint8_t value);
uint8_t binary_to_bcd(uint8_t value);

I2C_Handle_t g_ds1307I2cHandle;

void ds1307_init(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	ds1307_i2c_pin_config();
 8000e24:	f000 f8b2 	bl	8000f8c <ds1307_i2c_pin_config>
	ds1307_i2c_config();
 8000e28:	f000 f8ee 	bl	8001008 <ds1307_i2c_config>
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4802      	ldr	r0, [pc, #8]	; (8000e38 <ds1307_init+0x18>)
 8000e30:	f003 fcf3 	bl	800481a <I2C_PeripheralControl>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40005c00 	.word	0x40005c00

08000e3c <ds1307_get_current_time>:
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
}

void ds1307_get_current_time(RTC_time_t *rtc_time) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 f8f5 	bl	8001034 <ds1307_read>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e54:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f909 	bl	8001070 <bcd_to_binary>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 f8e4 	bl	8001034 <ds1307_read>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f8fe 	bl	8001070 <bcd_to_binary>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f000 f8d9 	bl	8001034 <ds1307_read>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)) {
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00f      	beq.n	8000eb0 <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e002      	b.n	8000eb6 <ds1307_get_current_time+0x7a>
	} else {
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f8d9 	bl	8001070 <bcd_to_binary>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	709a      	strb	r2, [r3, #2]

	rtc_time->time_validity = true;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	711a      	strb	r2, [r3, #4]

	if(rtc_time->hours > 23 && rtc_time->time_format == TIME_FORMAT_24HRS)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	2b17      	cmp	r3, #23
 8000ed2:	d906      	bls.n	8000ee2 <ds1307_get_current_time+0xa6>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	78db      	ldrb	r3, [r3, #3]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d102      	bne.n	8000ee2 <ds1307_get_current_time+0xa6>
		rtc_time->time_validity = false;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	711a      	strb	r2, [r3, #4]
	if(rtc_time->hours > 12 && (rtc_time->time_format == TIME_FORMAT_12HRS_AM || rtc_time->time_format == TIME_FORMAT_12HRS_PM))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	789b      	ldrb	r3, [r3, #2]
 8000ee6:	2b0c      	cmp	r3, #12
 8000ee8:	d90a      	bls.n	8000f00 <ds1307_get_current_time+0xc4>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	78db      	ldrb	r3, [r3, #3]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <ds1307_get_current_time+0xbe>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	78db      	ldrb	r3, [r3, #3]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d102      	bne.n	8000f00 <ds1307_get_current_time+0xc4>
		rtc_time->time_validity = false;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	711a      	strb	r2, [r3, #4]
	if(rtc_time->minutes > 59)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	785b      	ldrb	r3, [r3, #1]
 8000f04:	2b3b      	cmp	r3, #59	; 0x3b
 8000f06:	d902      	bls.n	8000f0e <ds1307_get_current_time+0xd2>
		rtc_time->time_validity = false;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	711a      	strb	r2, [r3, #4]
	if(rtc_time->seconds > 59)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b3b      	cmp	r3, #59	; 0x3b
 8000f14:	d902      	bls.n	8000f1c <ds1307_get_current_time+0xe0>
		rtc_time->time_validity = false;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	711a      	strb	r2, [r3, #4]
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	rtc_date->day =  bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f881 	bl	8001034 <ds1307_read>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f89b 	bl	8001070 <bcd_to_binary>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000f42:	2004      	movs	r0, #4
 8000f44:	f000 f876 	bl	8001034 <ds1307_read>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f890 	bl	8001070 <bcd_to_binary>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000f58:	2005      	movs	r0, #5
 8000f5a:	f000 f86b 	bl	8001034 <ds1307_read>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f885 	bl	8001070 <bcd_to_binary>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000f6e:	2006      	movs	r0, #6
 8000f70:	f000 f860 	bl	8001034 <ds1307_read>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f87a 	bl	8001070 <bcd_to_binary>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	709a      	strb	r2, [r3, #2]
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <ds1307_i2c_pin_config>:

void ds1307_i2c_pin_config(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	220c      	movs	r2, #12
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 ff58 	bl	8005e50 <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 ff52 	bl	8005e50 <memset>

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT_SDA;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <ds1307_i2c_pin_config+0x74>)
 8000fae:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_sda);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 f919 	bl	8004204 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT_SCL;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <ds1307_i2c_pin_config+0x78>)
 8000fd4:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000fea:	2302      	movs	r3, #2
 8000fec:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 f907 	bl	8004204 <GPIO_Init>

}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020800 	.word	0x40020800
 8001004:	40020000 	.word	0x40020000

08001008 <ds1307_i2c_config>:

void ds1307_i2c_config(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <ds1307_i2c_config+0x20>)
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <ds1307_i2c_config+0x24>)
 8001010:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <ds1307_i2c_config+0x20>)
 8001014:	2201      	movs	r2, #1
 8001016:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <ds1307_i2c_config+0x20>)
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <ds1307_i2c_config+0x28>)
 800101c:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 800101e:	4802      	ldr	r0, [pc, #8]	; (8001028 <ds1307_i2c_config+0x20>)
 8001020:	f003 fc50 	bl	80048c4 <I2C_Init>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20012f9c 	.word	0x20012f9c
 800102c:	40005c00 	.word	0x40005c00
 8001030:	000186a0 	.word	0x000186a0

08001034 <ds1307_read>:
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
}



uint8_t ds1307_read(uint8_t reg_addr) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af02      	add	r7, sp, #8
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 800103e:	1df9      	adds	r1, r7, #7
 8001040:	2300      	movs	r3, #0
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2368      	movs	r3, #104	; 0x68
 8001046:	2201      	movs	r2, #1
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <ds1307_read+0x38>)
 800104a:	f003 fd01 	bl	8004a50 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 800104e:	f107 010f 	add.w	r1, r7, #15
 8001052:	2300      	movs	r3, #0
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2368      	movs	r3, #104	; 0x68
 8001058:	2201      	movs	r2, #1
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <ds1307_read+0x38>)
 800105c:	f003 fd93 	bl	8004b86 <I2C_MasterReceiveData>
    return data;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20012f9c 	.word	0x20012f9c

08001070 <bcd_to_binary>:
		bcd = (m << 4) | n ;
	}
	return bcd;
}

uint8_t bcd_to_binary(uint8_t value) {
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4413      	add	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 030f 	and.w	r3, r3, #15
 8001090:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	4413      	add	r3, r2
 8001098:	b2db      	uxtb	r3, r3
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <KEYPAD_Init>:

/* Private variables */
KEYPAD_Type_t KEYPAD_INT_KeypadType;
static KEYPAD_Button_t KeypadStatus = KEYPAD_NOPRESSED;

void KEYPAD_Init(KEYPAD_Type_t type) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	KEYPAD_INT_KeypadType = type;
 80010b2:	4a32      	ldr	r2, [pc, #200]	; (800117c <KEYPAD_Init+0xd4>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	7013      	strb	r3, [r2, #0]
	GPIO_Handle_t GpioR_Out, GpioC_In;

	/* Rows are output */
	/* Row 1 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_1_PORT;
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <KEYPAD_Init+0xd8>)
 80010ba:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_1_PIN;
 80010bc:	230b      	movs	r3, #11
 80010be:	763b      	strb	r3, [r7, #24]
	GpioR_Out.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010c0:	2301      	movs	r3, #1
 80010c2:	767b      	strb	r3, [r7, #25]
	GpioR_Out.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80010c4:	2301      	movs	r3, #1
 80010c6:	76bb      	strb	r3, [r7, #26]
	GpioR_Out.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80010c8:	2300      	movs	r3, #0
 80010ca:	773b      	strb	r3, [r7, #28]
	GpioR_Out.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80010cc:	2300      	movs	r3, #0
 80010ce:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GpioR_Out);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 f895 	bl	8004204 <GPIO_Init>

	/* Row 2 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_2_PORT;
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <KEYPAD_Init+0xdc>)
 80010dc:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_2_PIN;
 80010de:	2300      	movs	r3, #0
 80010e0:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 f88c 	bl	8004204 <GPIO_Init>

	/* Row 3 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_3_PORT;
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <KEYPAD_Init+0xdc>)
 80010ee:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_3_PIN;
 80010f0:	2302      	movs	r3, #2
 80010f2:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 f883 	bl	8004204 <GPIO_Init>

	/* Row 4 */
	if (type == KEYPAD_Type_Large) {
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d108      	bne.n	8001116 <KEYPAD_Init+0x6e>
		GpioR_Out.pGPIOx = KEYPAD_ROW_4_PORT;
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <KEYPAD_Init+0xdc>)
 8001106:	617b      	str	r3, [r7, #20]
		GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_4_PIN;
 8001108:	2304      	movs	r3, #4
 800110a:	763b      	strb	r3, [r7, #24]
		GPIO_Init(&GpioR_Out);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f003 f877 	bl	8004204 <GPIO_Init>
	}


	/* Columns are inputs */
	/* Column 1 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_1_PORT;
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <KEYPAD_Init+0xdc>)
 8001118:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_1_PIN;
 800111a:	2306      	movs	r3, #6
 800111c:	733b      	strb	r3, [r7, #12]
	GpioC_In.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800111e:	2300      	movs	r3, #0
 8001120:	737b      	strb	r3, [r7, #13]
	GpioC_In.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8001122:	2301      	movs	r3, #1
 8001124:	73bb      	strb	r3, [r7, #14]
	GpioC_In.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001126:	2300      	movs	r3, #0
 8001128:	743b      	strb	r3, [r7, #16]
	GpioC_In.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&GpioC_In);
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	4618      	mov	r0, r3
 8001134:	f003 f866 	bl	8004204 <GPIO_Init>

	/* Column 2 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_2_PORT;
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <KEYPAD_Init+0xe0>)
 800113a:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 800113c:	2303      	movs	r3, #3
 800113e:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4618      	mov	r0, r3
 8001146:	f003 f85d 	bl	8004204 <GPIO_Init>

	/* Column 3 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_3_PORT;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <KEYPAD_Init+0xe0>)
 800114c:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_3_PIN;
 800114e:	2305      	movs	r3, #5
 8001150:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	4618      	mov	r0, r3
 8001158:	f003 f854 	bl	8004204 <GPIO_Init>

	/* Column 4 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_4_PORT;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <KEYPAD_Init+0xe0>)
 800115e:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_4_PIN;
 8001160:	2307      	movs	r3, #7
 8001162:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	4618      	mov	r0, r3
 800116a:	f003 f84b 	bl	8004204 <GPIO_Init>

	/* All rows high */
	KEYPAD_INT_SetRow(0);
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f818 	bl	80011a4 <KEYPAD_INT_SetRow>
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20012fc4 	.word	0x20012fc4
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40020400 	.word	0x40020400

0800118c <KEYPAD_Read>:

KEYPAD_Button_t KEYPAD_Read(void) {
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
	return KeypadStatus;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <KEYPAD_Read+0x14>)
 8001192:	781b      	ldrb	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000010 	.word	0x20000010

080011a4 <KEYPAD_INT_SetRow>:

/* Private */
void KEYPAD_INT_SetRow(uint8_t row) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_ROW_1_HIGH;
 80011ae:	2201      	movs	r2, #1
 80011b0:	210b      	movs	r1, #11
 80011b2:	481d      	ldr	r0, [pc, #116]	; (8001228 <KEYPAD_INT_SetRow+0x84>)
 80011b4:	f003 f9d8 	bl	8004568 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_2_HIGH;
 80011b8:	2201      	movs	r2, #1
 80011ba:	2100      	movs	r1, #0
 80011bc:	481b      	ldr	r0, [pc, #108]	; (800122c <KEYPAD_INT_SetRow+0x88>)
 80011be:	f003 f9d3 	bl	8004568 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_3_HIGH;
 80011c2:	2201      	movs	r2, #1
 80011c4:	2102      	movs	r1, #2
 80011c6:	4819      	ldr	r0, [pc, #100]	; (800122c <KEYPAD_INT_SetRow+0x88>)
 80011c8:	f003 f9ce 	bl	8004568 <GPIO_WriteToOutputPin>
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large)
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <KEYPAD_INT_SetRow+0x8c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <KEYPAD_INT_SetRow+0x3a>
		KEYPAD_ROW_4_HIGH;
 80011d4:	2201      	movs	r2, #1
 80011d6:	2104      	movs	r1, #4
 80011d8:	4814      	ldr	r0, [pc, #80]	; (800122c <KEYPAD_INT_SetRow+0x88>)
 80011da:	f003 f9c5 	bl	8004568 <GPIO_WriteToOutputPin>

	/* Set row low */
	if (row == 1)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d104      	bne.n	80011ee <KEYPAD_INT_SetRow+0x4a>
		KEYPAD_ROW_1_LOW;
 80011e4:	2200      	movs	r2, #0
 80011e6:	210b      	movs	r1, #11
 80011e8:	480f      	ldr	r0, [pc, #60]	; (8001228 <KEYPAD_INT_SetRow+0x84>)
 80011ea:	f003 f9bd 	bl	8004568 <GPIO_WriteToOutputPin>
	if (row == 2)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d104      	bne.n	80011fe <KEYPAD_INT_SetRow+0x5a>
		KEYPAD_ROW_2_LOW;
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <KEYPAD_INT_SetRow+0x88>)
 80011fa:	f003 f9b5 	bl	8004568 <GPIO_WriteToOutputPin>
	if (row == 3)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b03      	cmp	r3, #3
 8001202:	d104      	bne.n	800120e <KEYPAD_INT_SetRow+0x6a>
		KEYPAD_ROW_3_LOW;
 8001204:	2200      	movs	r2, #0
 8001206:	2102      	movs	r1, #2
 8001208:	4808      	ldr	r0, [pc, #32]	; (800122c <KEYPAD_INT_SetRow+0x88>)
 800120a:	f003 f9ad 	bl	8004568 <GPIO_WriteToOutputPin>
	if (row == 4)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d104      	bne.n	800121e <KEYPAD_INT_SetRow+0x7a>
		KEYPAD_ROW_4_LOW;
 8001214:	2200      	movs	r2, #0
 8001216:	2104      	movs	r1, #4
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <KEYPAD_INT_SetRow+0x88>)
 800121a:	f003 f9a5 	bl	8004568 <GPIO_WriteToOutputPin>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	20012fc4 	.word	0x20012fc4

08001234 <KEYPAD_INT_CheckColumn>:

uint8_t KEYPAD_INT_CheckColumn(uint8_t row) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	/* Read columns */

	/* Scan column 1 */
	if (KEYPAD_COLUMN_1_CHECK) {
 800123e:	2106      	movs	r1, #6
 8001240:	481f      	ldr	r0, [pc, #124]	; (80012c0 <KEYPAD_INT_CheckColumn+0x8c>)
 8001242:	f003 f97b 	bl	800453c <GPIO_ReadFromInputPin>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <KEYPAD_INT_CheckColumn+0x24>
		return KEYPAD_INT_Buttons[row - 1][0];
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3b01      	subs	r3, #1
 8001250:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <KEYPAD_INT_CheckColumn+0x90>)
 8001252:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001256:	e02e      	b.n	80012b6 <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 2 */
	if (KEYPAD_COLUMN_2_CHECK) {
 8001258:	2103      	movs	r1, #3
 800125a:	481b      	ldr	r0, [pc, #108]	; (80012c8 <KEYPAD_INT_CheckColumn+0x94>)
 800125c:	f003 f96e 	bl	800453c <GPIO_ReadFromInputPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d106      	bne.n	8001274 <KEYPAD_INT_CheckColumn+0x40>
		return KEYPAD_INT_Buttons[row - 1][1];
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	3b01      	subs	r3, #1
 800126a:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <KEYPAD_INT_CheckColumn+0x90>)
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	e020      	b.n	80012b6 <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 3 */
	if (KEYPAD_COLUMN_3_CHECK) {
 8001274:	2105      	movs	r1, #5
 8001276:	4814      	ldr	r0, [pc, #80]	; (80012c8 <KEYPAD_INT_CheckColumn+0x94>)
 8001278:	f003 f960 	bl	800453c <GPIO_ReadFromInputPin>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d106      	bne.n	8001290 <KEYPAD_INT_CheckColumn+0x5c>
		return KEYPAD_INT_Buttons[row - 1][2];
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	3b01      	subs	r3, #1
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <KEYPAD_INT_CheckColumn+0x90>)
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	789b      	ldrb	r3, [r3, #2]
 800128e:	e012      	b.n	80012b6 <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 4 */
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large && KEYPAD_COLUMN_4_CHECK) {
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <KEYPAD_INT_CheckColumn+0x98>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10d      	bne.n	80012b4 <KEYPAD_INT_CheckColumn+0x80>
 8001298:	2107      	movs	r1, #7
 800129a:	480b      	ldr	r0, [pc, #44]	; (80012c8 <KEYPAD_INT_CheckColumn+0x94>)
 800129c:	f003 f94e 	bl	800453c <GPIO_ReadFromInputPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <KEYPAD_INT_CheckColumn+0x80>
		return KEYPAD_INT_Buttons[row - 1][3];
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <KEYPAD_INT_CheckColumn+0x90>)
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	78db      	ldrb	r3, [r3, #3]
 80012b2:	e000      	b.n	80012b6 <KEYPAD_INT_CheckColumn+0x82>
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 80012b4:	23ff      	movs	r3, #255	; 0xff
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	20000000 	.word	0x20000000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	20012fc4 	.word	0x20012fc4

080012d0 <KEYPAD_INT_Read>:

uint8_t KEYPAD_INT_Read(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	KEYPAD_INT_SetRow(1);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff ff64 	bl	80011a4 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(1);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff ffa9 	bl	8001234 <KEYPAD_INT_CheckColumn>
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2bff      	cmp	r3, #255	; 0xff
 80012ea:	d001      	beq.n	80012f0 <KEYPAD_INT_Read+0x20>
		return check;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	e02b      	b.n	8001348 <KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	KEYPAD_INT_SetRow(2);
 80012f0:	2002      	movs	r0, #2
 80012f2:	f7ff ff57 	bl	80011a4 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(2);
 80012f6:	2002      	movs	r0, #2
 80012f8:	f7ff ff9c 	bl	8001234 <KEYPAD_INT_CheckColumn>
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2bff      	cmp	r3, #255	; 0xff
 8001304:	d001      	beq.n	800130a <KEYPAD_INT_Read+0x3a>
		return check;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	e01e      	b.n	8001348 <KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	KEYPAD_INT_SetRow(3);
 800130a:	2003      	movs	r0, #3
 800130c:	f7ff ff4a 	bl	80011a4 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(3);
 8001310:	2003      	movs	r0, #3
 8001312:	f7ff ff8f 	bl	8001234 <KEYPAD_INT_CheckColumn>
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2bff      	cmp	r3, #255	; 0xff
 800131e:	d001      	beq.n	8001324 <KEYPAD_INT_Read+0x54>
		return check;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	e011      	b.n	8001348 <KEYPAD_INT_Read+0x78>
	}

	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large) {
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <KEYPAD_INT_Read+0x80>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10c      	bne.n	8001346 <KEYPAD_INT_Read+0x76>
		/* Set row 4 to LOW */
		KEYPAD_INT_SetRow(4);
 800132c:	2004      	movs	r0, #4
 800132e:	f7ff ff39 	bl	80011a4 <KEYPAD_INT_SetRow>
		/* Check columns */
		check = KEYPAD_INT_CheckColumn(4);
 8001332:	2004      	movs	r0, #4
 8001334:	f7ff ff7e 	bl	8001234 <KEYPAD_INT_CheckColumn>
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NOPRESSED) {
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2bff      	cmp	r3, #255	; 0xff
 8001340:	d001      	beq.n	8001346 <KEYPAD_INT_Read+0x76>
			return check;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	e000      	b.n	8001348 <KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 8001346:	23ff      	movs	r3, #255	; 0xff
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20012fc4 	.word	0x20012fc4

08001354 <KEYPAD_Update>:

void KEYPAD_Update(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;
	if (++millis >= KEYPAD_READ_INTERVAL) {
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <KEYPAD_Update+0x30>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <KEYPAD_Update+0x30>)
 8001362:	801a      	strh	r2, [r3, #0]
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <KEYPAD_Update+0x30>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	2b31      	cmp	r3, #49	; 0x31
 800136a:	d908      	bls.n	800137e <KEYPAD_Update+0x2a>
		millis = 0;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <KEYPAD_Update+0x30>)
 800136e:	2200      	movs	r2, #0
 8001370:	801a      	strh	r2, [r3, #0]
		KeypadStatus = (KEYPAD_Button_t) KEYPAD_INT_Read();
 8001372:	f7ff ffad 	bl	80012d0 <KEYPAD_INT_Read>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b03      	ldr	r3, [pc, #12]	; (8001388 <KEYPAD_Update+0x34>)
 800137c:	701a      	strb	r2, [r3, #0]
	}
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000220 	.word	0x20000220
 8001388:	20000010 	.word	0x20000010

0800138c <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 8001396:	2101      	movs	r1, #1
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <LCD5110_send+0x40>)
 800139a:	f003 fdfb 	bl	8004f94 <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2101      	movs	r1, #1
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <LCD5110_send+0x44>)
 80013a4:	f003 f8e0 	bl	8004568 <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <LCD5110_send+0x40>)
 80013ae:	f003 fdb4 	bl	8004f1a <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2101      	movs	r1, #1
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <LCD5110_send+0x44>)
 80013b8:	f003 f8d6 	bl	8004568 <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 80013bc:	2100      	movs	r1, #0
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <LCD5110_send+0x40>)
 80013c0:	f003 fde8 	bl	8004f94 <SPI_PeripheralControl>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40013000 	.word	0x40013000
 80013d0:	40020400 	.word	0x40020400

080013d4 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d002      	beq.n	80013f0 <LCD5110_Pin+0x1c>
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d00f      	beq.n	800140e <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 80013ee:	e01d      	b.n	800142c <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2105      	movs	r1, #5
 80013fa:	480e      	ldr	r0, [pc, #56]	; (8001434 <LCD5110_Pin+0x60>)
 80013fc:	f003 f8b4 	bl	8004568 <GPIO_WriteToOutputPin>
			break;
 8001400:	e014      	b.n	800142c <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2105      	movs	r1, #5
 8001406:	480b      	ldr	r0, [pc, #44]	; (8001434 <LCD5110_Pin+0x60>)
 8001408:	f003 f8ae 	bl	8004568 <GPIO_WriteToOutputPin>
			break;
 800140c:	e00e      	b.n	800142c <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 800140e:	79bb      	ldrb	r3, [r7, #6]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 8001414:	2201      	movs	r2, #1
 8001416:	2107      	movs	r1, #7
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <LCD5110_Pin+0x64>)
 800141a:	f003 f8a5 	bl	8004568 <GPIO_WriteToOutputPin>
			break;
 800141e:	e004      	b.n	800142a <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8001420:	2200      	movs	r2, #0
 8001422:	2107      	movs	r1, #7
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <LCD5110_Pin+0x64>)
 8001426:	f003 f89f 	bl	8004568 <GPIO_WriteToOutputPin>
			break;
 800142a:	bf00      	nop
	}
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40020800 	.word	0x40020800
 8001438:	40021000 	.word	0x40021000

0800143c <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e002      	b.n	8001450 <LCD5110_Delay+0x14>
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3301      	adds	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f8      	bhi.n	800144a <LCD5110_Delay+0xe>
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	; 0x38
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <LCD5110_Init+0x138>)
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001476:	2302      	movs	r3, #2
 8001478:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800147c:	2305      	movs	r3, #5
 800147e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800148e:	2302      	movs	r3, #2
 8001490:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8001494:	2305      	movs	r3, #5
 8001496:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800149a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 feb0 	bl	8004204 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80014a4:	2307      	movs	r3, #7
 80014a6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80014aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fea8 	bl	8004204 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 80014b4:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <LCD5110_Init+0x13c>)
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80014be:	2301      	movs	r3, #1
 80014c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 80014d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d4:	4618      	mov	r0, r3
 80014d6:	f002 fe95 	bl	8004204 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <LCD5110_Init+0x140>)
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 80014de:	2305      	movs	r3, #5
 80014e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80014e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fe8b 	bl	8004204 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 80014ee:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <LCD5110_Init+0x144>)
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 80014f2:	2307      	movs	r3, #7
 80014f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80014f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fe81 	bl	8004204 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <LCD5110_Init+0x148>)
 8001504:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 8001506:	2301      	movs	r3, #1
 8001508:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 800150a:	2301      	movs	r3, #1
 800150c:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 800150e:	2302      	movs	r3, #2
 8001510:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8001512:	2300      	movs	r3, #0
 8001514:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 8001516:	2300      	movs	r3, #0
 8001518:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 800151a:	2300      	movs	r3, #0
 800151c:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 800151e:	2300      	movs	r3, #0
 8001520:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4618      	mov	r0, r3
 8001528:	f003 fc9c 	bl	8004e64 <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 800152c:	2101      	movs	r1, #1
 800152e:	4820      	ldr	r0, [pc, #128]	; (80015b0 <LCD5110_Init+0x148>)
 8001530:	f003 fd4c 	bl	8004fcc <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 8001534:	2100      	movs	r1, #0
 8001536:	2002      	movs	r0, #2
 8001538:	f7ff ff4c 	bl	80013d4 <LCD5110_Pin>
	LCD5110_Delay(10000);
 800153c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001540:	f7ff ff7c 	bl	800143c <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 8001544:	2101      	movs	r1, #1
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff ff44 	bl	80013d4 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 800154c:	2121      	movs	r1, #33	; 0x21
 800154e:	2000      	movs	r0, #0
 8001550:	f000 f830 	bl	80015b4 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 8001554:	2114      	movs	r1, #20
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f82c 	bl	80015b4 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	da01      	bge.n	8001568 <LCD5110_Init+0x100>
		contrast = 0x7F;
 8001564:	237f      	movs	r3, #127	; 0x7f
 8001566:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	2000      	movs	r0, #0
 8001574:	f000 f81e 	bl	80015b4 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 8001578:	2120      	movs	r1, #32
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f81a 	bl	80015b4 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001580:	210c      	movs	r1, #12
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f816 	bl	80015b4 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 8001588:	f000 f8b8 	bl	80016fc <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 800158c:	210c      	movs	r1, #12
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f810 	bl	80015b4 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 8001594:	f000 f88c 	bl	80016b0 <LCD5110_Clear>
}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	; 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40013000 	.word	0x40013000

080015b4 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	460a      	mov	r2, r1
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	4613      	mov	r3, r2
 80015c2:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <LCD5110_Write+0x24>
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d109      	bne.n	80015e2 <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 80015ce:	2101      	movs	r1, #1
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff feff 	bl	80013d4 <LCD5110_Pin>
			break;
 80015d6:	e005      	b.n	80015e4 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 80015d8:	2100      	movs	r1, #0
 80015da:	2001      	movs	r0, #1
 80015dc:	f7ff fefa 	bl	80013d4 <LCD5110_Pin>
			break;
 80015e0:	e000      	b.n	80015e4 <LCD5110_Write+0x30>
		default: break;
 80015e2:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fed0 	bl	800138c <LCD5110_send>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	460b      	mov	r3, r1
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	4613      	mov	r3, r2
 8001604:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b53      	cmp	r3, #83	; 0x53
 800160a:	d849      	bhi.n	80016a0 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	2b2f      	cmp	r3, #47	; 0x2f
 8001610:	d848      	bhi.n	80016a4 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 8001612:	797b      	ldrb	r3, [r7, #5]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01d      	beq.n	8001654 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	79bb      	ldrb	r3, [r7, #6]
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	b2d8      	uxtb	r0, r3
 8001620:	4601      	mov	r1, r0
 8001622:	2354      	movs	r3, #84	; 0x54
 8001624:	fb03 f301 	mul.w	r3, r3, r1
 8001628:	4413      	add	r3, r2
 800162a:	4a20      	ldr	r2, [pc, #128]	; (80016ac <LCD5110_DrawPixel+0xb8>)
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	b25a      	sxtb	r2, r3
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	2101      	movs	r1, #1
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	b25b      	sxtb	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b259      	sxtb	r1, r3
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	2354      	movs	r3, #84	; 0x54
 8001646:	fb03 f300 	mul.w	r3, r3, r0
 800164a:	4413      	add	r3, r2
 800164c:	b2c9      	uxtb	r1, r1
 800164e:	4a17      	ldr	r2, [pc, #92]	; (80016ac <LCD5110_DrawPixel+0xb8>)
 8001650:	54d1      	strb	r1, [r2, r3]
 8001652:	e01e      	b.n	8001692 <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	08db      	lsrs	r3, r3, #3
 800165a:	b2d8      	uxtb	r0, r3
 800165c:	4601      	mov	r1, r0
 800165e:	2354      	movs	r3, #84	; 0x54
 8001660:	fb03 f301 	mul.w	r3, r3, r1
 8001664:	4413      	add	r3, r2
 8001666:	4a11      	ldr	r2, [pc, #68]	; (80016ac <LCD5110_DrawPixel+0xb8>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	b25a      	sxtb	r2, r3
 800166c:	79bb      	ldrb	r3, [r7, #6]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	2101      	movs	r1, #1
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	b25b      	sxtb	r3, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	b25b      	sxtb	r3, r3
 800167e:	4013      	ands	r3, r2
 8001680:	b259      	sxtb	r1, r3
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	2354      	movs	r3, #84	; 0x54
 8001686:	fb03 f300 	mul.w	r3, r3, r0
 800168a:	4413      	add	r3, r2
 800168c:	b2c9      	uxtb	r1, r1
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <LCD5110_DrawPixel+0xb8>)
 8001690:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 8001692:	79bb      	ldrb	r3, [r7, #6]
 8001694:	79fa      	ldrb	r2, [r7, #7]
 8001696:	79b9      	ldrb	r1, [r7, #6]
 8001698:	79f8      	ldrb	r0, [r7, #7]
 800169a:	f000 f89d 	bl	80017d8 <LCD5110_UpdateArea>
 800169e:	e002      	b.n	80016a6 <LCD5110_DrawPixel+0xb2>
		return;
 80016a0:	bf00      	nop
 80016a2:	e000      	b.n	80016a6 <LCD5110_DrawPixel+0xb2>
		return;
 80016a4:	bf00      	nop
}
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20012fcc 	.word	0x20012fcc

080016b0 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 80016b6:	f000 f821 	bl	80016fc <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	e007      	b.n	80016d0 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <LCD5110_Clear+0x48>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80016d6:	d3f3      	bcc.n	80016c0 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 80016d8:	2100      	movs	r1, #0
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f8b8 	bl	8001850 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 80016e0:	232f      	movs	r3, #47	; 0x2f
 80016e2:	2253      	movs	r2, #83	; 0x53
 80016e4:	2100      	movs	r1, #0
 80016e6:	2000      	movs	r0, #0
 80016e8:	f000 f876 	bl	80017d8 <LCD5110_UpdateArea>
	LCD5110_Refresh();
 80016ec:	f000 f812 	bl	8001714 <LCD5110_Refresh>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20012fcc 	.word	0x20012fcc

080016fc <LCD5110_Home>:

void LCD5110_Home(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff ff56 	bl	80015b4 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 8001708:	2140      	movs	r1, #64	; 0x40
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff ff52 	bl	80015b4 <LCD5110_Write>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	e03b      	b.n	8001798 <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <LCD5110_Refresh+0xb0>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	3301      	adds	r3, #1
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	429a      	cmp	r2, r3
 800172e:	dc2f      	bgt.n	8001790 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <LCD5110_Refresh+0xb4>)
 8001736:	7812      	ldrb	r2, [r2, #0]
 8001738:	4293      	cmp	r3, r2
 800173a:	dc31      	bgt.n	80017a0 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4619      	mov	r1, r3
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff ff34 	bl	80015b4 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <LCD5110_Refresh+0xb8>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff ff2b 	bl	80015b4 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <LCD5110_Refresh+0xb8>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	71bb      	strb	r3, [r7, #6]
 8001764:	e00e      	b.n	8001784 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2254      	movs	r2, #84	; 0x54
 800176a:	fb02 f203 	mul.w	r2, r2, r3
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	4413      	add	r3, r2
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <LCD5110_Refresh+0xbc>)
 8001774:	5cd3      	ldrb	r3, [r2, r3]
 8001776:	4619      	mov	r1, r3
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff ff1b 	bl	80015b4 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	3301      	adds	r3, #1
 8001782:	71bb      	strb	r3, [r7, #6]
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <LCD5110_Refresh+0xc0>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	79ba      	ldrb	r2, [r7, #6]
 800178a:	429a      	cmp	r2, r3
 800178c:	d9eb      	bls.n	8001766 <LCD5110_Refresh+0x52>
 800178e:	e000      	b.n	8001792 <LCD5110_Refresh+0x7e>
			continue;
 8001790:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	3301      	adds	r3, #1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b05      	cmp	r3, #5
 800179c:	d9c0      	bls.n	8001720 <LCD5110_Refresh+0xc>
 800179e:	e000      	b.n	80017a2 <LCD5110_Refresh+0x8e>
			break;
 80017a0:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <LCD5110_Refresh+0xb8>)
 80017a4:	2253      	movs	r2, #83	; 0x53
 80017a6:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <LCD5110_Refresh+0xc0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <LCD5110_Refresh+0xb0>)
 80017b0:	222f      	movs	r2, #47	; 0x2f
 80017b2:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <LCD5110_Refresh+0xb4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000224 	.word	0x20000224
 80017c8:	20000225 	.word	0x20000225
 80017cc:	20000222 	.word	0x20000222
 80017d0:	20012fcc 	.word	0x20012fcc
 80017d4:	20000223 	.word	0x20000223

080017d8 <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 80017d8:	b490      	push	{r4, r7}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4604      	mov	r4, r0
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	4603      	mov	r3, r0
 80017ec:	71bb      	strb	r3, [r7, #6]
 80017ee:	460b      	mov	r3, r1
 80017f0:	717b      	strb	r3, [r7, #5]
 80017f2:	4613      	mov	r3, r2
 80017f4:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <LCD5110_UpdateArea+0x68>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	79fa      	ldrb	r2, [r7, #7]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d202      	bcs.n	8001806 <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8001800:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <LCD5110_UpdateArea+0x68>)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <LCD5110_UpdateArea+0x6c>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	797a      	ldrb	r2, [r7, #5]
 800180c:	429a      	cmp	r2, r3
 800180e:	d902      	bls.n	8001816 <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8001810:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <LCD5110_UpdateArea+0x6c>)
 8001812:	797b      	ldrb	r3, [r7, #5]
 8001814:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <LCD5110_UpdateArea+0x70>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	79ba      	ldrb	r2, [r7, #6]
 800181c:	429a      	cmp	r2, r3
 800181e:	d202      	bcs.n	8001826 <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8001820:	4a09      	ldr	r2, [pc, #36]	; (8001848 <LCD5110_UpdateArea+0x70>)
 8001822:	79bb      	ldrb	r3, [r7, #6]
 8001824:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <LCD5110_UpdateArea+0x74>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	793a      	ldrb	r2, [r7, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	d902      	bls.n	8001836 <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8001830:	4a06      	ldr	r2, [pc, #24]	; (800184c <LCD5110_UpdateArea+0x74>)
 8001832:	793b      	ldrb	r3, [r7, #4]
 8001834:	7013      	strb	r3, [r2, #0]
	}
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bc90      	pop	{r4, r7}
 800183e:	4770      	bx	lr
 8001840:	20000222 	.word	0x20000222
 8001844:	20000223 	.word	0x20000223
 8001848:	20000224 	.word	0x20000224
 800184c:	20000225 	.word	0x20000225

08001850 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	460a      	mov	r2, r1
 800185a:	71fb      	strb	r3, [r7, #7]
 800185c:	4613      	mov	r3, r2
 800185e:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8001860:	4a05      	ldr	r2, [pc, #20]	; (8001878 <LCD5110_GotoXY+0x28>)
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <LCD5110_GotoXY+0x2c>)
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	7013      	strb	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	20012fc8 	.word	0x20012fc8
 800187c:	20012fc9 	.word	0x20012fc9

08001880 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	460b      	mov	r3, r1
 800188c:	71bb      	strb	r3, [r7, #6]
 800188e:	4613      	mov	r3, r2
 8001890:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d104      	bne.n	80018a2 <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8001898:	2304      	movs	r3, #4
 800189a:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 800189c:	2306      	movs	r3, #6
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e003      	b.n	80018aa <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 80018a2:	2306      	movs	r3, #6
 80018a4:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 80018a6:	2308      	movs	r3, #8
 80018a8:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 80018aa:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <LCD5110_Putc+0x144>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
 80018b2:	4413      	add	r3, r2
 80018b4:	2b54      	cmp	r3, #84	; 0x54
 80018b6:	dd09      	ble.n	80018cc <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 80018b8:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <LCD5110_Putc+0x148>)
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	4413      	add	r3, r2
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <LCD5110_Putc+0x148>)
 80018c4:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 80018c6:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <LCD5110_Putc+0x144>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	737b      	strb	r3, [r7, #13]
 80018d0:	e068      	b.n	80019a4 <LCD5110_Putc+0x124>
		if (c < 32) {
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b1f      	cmp	r3, #31
 80018d6:	d91c      	bls.n	8001912 <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 80018d8:	797b      	ldrb	r3, [r7, #5]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d10c      	bne.n	80018f8 <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f1a3 0220 	sub.w	r2, r3, #32
 80018e4:	7b79      	ldrb	r1, [r7, #13]
 80018e6:	4839      	ldr	r0, [pc, #228]	; (80019cc <LCD5110_Putc+0x14c>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	4403      	add	r3, r0
 80018f0:	440b      	add	r3, r1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	733b      	strb	r3, [r7, #12]
 80018f6:	e00c      	b.n	8001912 <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f1a3 0220 	sub.w	r2, r3, #32
 80018fe:	7b79      	ldrb	r1, [r7, #13]
 8001900:	4833      	ldr	r0, [pc, #204]	; (80019d0 <LCD5110_Putc+0x150>)
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4403      	add	r3, r0
 800190c:	440b      	add	r3, r1
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8001912:	7b3b      	ldrb	r3, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <LCD5110_Putc+0xa4>
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <LCD5110_Putc+0xa4>
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b20      	cmp	r3, #32
 8001922:	d13b      	bne.n	800199c <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8001924:	2300      	movs	r3, #0
 8001926:	72fb      	strb	r3, [r7, #11]
 8001928:	e02d      	b.n	8001986 <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 800192a:	79bb      	ldrb	r3, [r7, #6]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d112      	bne.n	8001956 <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <LCD5110_Putc+0x144>)
 8001932:	7818      	ldrb	r0, [r3, #0]
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <LCD5110_Putc+0x148>)
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	4413      	add	r3, r2
 800193c:	b2d9      	uxtb	r1, r3
 800193e:	7b3a      	ldrb	r2, [r7, #12]
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	fa42 f303 	asr.w	r3, r2, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	f7ff fe50 	bl	80015f4 <LCD5110_DrawPixel>
 8001954:	e014      	b.n	8001980 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <LCD5110_Putc+0x144>)
 8001958:	7818      	ldrb	r0, [r3, #0]
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <LCD5110_Putc+0x148>)
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	7afb      	ldrb	r3, [r7, #11]
 8001960:	4413      	add	r3, r2
 8001962:	b2d9      	uxtb	r1, r3
 8001964:	7b3a      	ldrb	r2, [r7, #12]
 8001966:	7afb      	ldrb	r3, [r7, #11]
 8001968:	fa42 f303 	asr.w	r3, r2, r3
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	f7ff fe3a 	bl	80015f4 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8001980:	7afb      	ldrb	r3, [r7, #11]
 8001982:	3301      	adds	r3, #1
 8001984:	72fb      	strb	r3, [r7, #11]
 8001986:	7afa      	ldrb	r2, [r7, #11]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	429a      	cmp	r2, r3
 800198c:	d3cd      	bcc.n	800192a <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <LCD5110_Putc+0x144>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <LCD5110_Putc+0x144>)
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e000      	b.n	800199e <LCD5110_Putc+0x11e>
			continue;
 800199c:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 800199e:	7b7b      	ldrb	r3, [r7, #13]
 80019a0:	3301      	adds	r3, #1
 80019a2:	737b      	strb	r3, [r7, #13]
 80019a4:	7b7a      	ldrb	r2, [r7, #13]
 80019a6:	7bbb      	ldrb	r3, [r7, #14]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	429a      	cmp	r2, r3
 80019ac:	db91      	blt.n	80018d2 <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <LCD5110_Putc+0x144>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <LCD5110_Putc+0x144>)
 80019b8:	701a      	strb	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20012fc8 	.word	0x20012fc8
 80019c8:	20012fc9 	.word	0x20012fc9
 80019cc:	08008ec8 	.word	0x08008ec8
 80019d0:	08008c80 	.word	0x08008c80

080019d4 <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	70fb      	strb	r3, [r7, #3]
 80019e0:	4613      	mov	r3, r2
 80019e2:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 80019e4:	e008      	b.n	80019f8 <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	78ba      	ldrb	r2, [r7, #2]
 80019f0:	78f9      	ldrb	r1, [r7, #3]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff44 	bl	8001880 <LCD5110_Putc>
	while (*c) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f2      	bne.n	80019e6 <LCD5110_Puts+0x12>
	}
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f103 0208 	add.w	r2, r3, #8
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a22:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f103 0208 	add.w	r2, r3, #8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f103 0208 	add.w	r2, r3, #8
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ac2:	d103      	bne.n	8001acc <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e00c      	b.n	8001ae6 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e002      	b.n	8001ada <vListInsert+0x2e>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d2f6      	bcs.n	8001ad4 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	601a      	str	r2, [r3, #0]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6892      	ldr	r2, [r2, #8]
 8001b34:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6852      	ldr	r2, [r2, #4]
 8001b3e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d103      	bne.n	8001b52 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8c:	f383 8811 	msr	BASEPRI, r3
 8001b90:	f3bf 8f6f 	isb	sy
 8001b94:	f3bf 8f4f 	dsb	sy
 8001b98:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001b9a:	bf00      	nop
 8001b9c:	e7fe      	b.n	8001b9c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001b9e:	f001 ff8b 	bl	8003ab8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001baa:	68f9      	ldr	r1, [r7, #12]
 8001bac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	441a      	add	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	68f9      	ldr	r1, [r7, #12]
 8001bd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	441a      	add	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	22ff      	movs	r2, #255	; 0xff
 8001be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	22ff      	movs	r2, #255	; 0xff
 8001bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d114      	bne.n	8001c1e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01a      	beq.n	8001c32 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3310      	adds	r3, #16
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 f881 	bl	8002d08 <xTaskRemoveFromEventList>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d012      	beq.n	8001c32 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <xQueueGenericReset+0xcc>)
 8001c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	f3bf 8f4f 	dsb	sy
 8001c18:	f3bf 8f6f 	isb	sy
 8001c1c:	e009      	b.n	8001c32 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3310      	adds	r3, #16
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fef1 	bl	8001a0a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3324      	adds	r3, #36	; 0x24
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff feec 	bl	8001a0a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001c32:	f001 ff71 	bl	8003b18 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	e000ed04 	.word	0xe000ed04

08001c44 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	; 0x30
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10a      	bne.n	8001c6e <xQueueGenericCreate+0x2a>
        __asm volatile
 8001c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5c:	f383 8811 	msr	BASEPRI, r3
 8001c60:	f3bf 8f6f 	isb	sy
 8001c64:	f3bf 8f4f 	dsb	sy
 8001c68:	61bb      	str	r3, [r7, #24]
    }
 8001c6a:	bf00      	nop
 8001c6c:	e7fe      	b.n	8001c6c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <xQueueGenericCreate+0x48>
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d101      	bne.n	8001c90 <xQueueGenericCreate+0x4c>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <xQueueGenericCreate+0x4e>
 8001c90:	2300      	movs	r3, #0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <xQueueGenericCreate+0x68>
        __asm volatile
 8001c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9a:	f383 8811 	msr	BASEPRI, r3
 8001c9e:	f3bf 8f6f 	isb	sy
 8001ca2:	f3bf 8f4f 	dsb	sy
 8001ca6:	617b      	str	r3, [r7, #20]
    }
 8001ca8:	bf00      	nop
 8001caa:	e7fe      	b.n	8001caa <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001cb2:	d90a      	bls.n	8001cca <xQueueGenericCreate+0x86>
        __asm volatile
 8001cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	613b      	str	r3, [r7, #16]
    }
 8001cc6:	bf00      	nop
 8001cc8:	e7fe      	b.n	8001cc8 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	3350      	adds	r3, #80	; 0x50
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 f814 	bl	8003cfc <pvPortMalloc>
 8001cd4:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00d      	beq.n	8001cf8 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	3350      	adds	r3, #80	; 0x50
 8001ce4:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f805 	bl	8001d02 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
    }
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d103      	bne.n	8001d1e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e002      	b.n	8001d24 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d30:	2101      	movs	r1, #1
 8001d32:	69b8      	ldr	r0, [r7, #24]
 8001d34:	f7ff ff1e 	bl	8001b74 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d56:	2300      	movs	r3, #0
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10a      	bne.n	8001d7a <xQueueGenericSend+0x32>
        __asm volatile
 8001d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d68:	f383 8811 	msr	BASEPRI, r3
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001d76:	bf00      	nop
 8001d78:	e7fe      	b.n	8001d78 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d103      	bne.n	8001d88 <xQueueGenericSend+0x40>
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <xQueueGenericSend+0x44>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <xQueueGenericSend+0x46>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <xQueueGenericSend+0x60>
        __asm volatile
 8001d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001da4:	bf00      	nop
 8001da6:	e7fe      	b.n	8001da6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d103      	bne.n	8001db6 <xQueueGenericSend+0x6e>
 8001dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <xQueueGenericSend+0x72>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <xQueueGenericSend+0x74>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10a      	bne.n	8001dd6 <xQueueGenericSend+0x8e>
        __asm volatile
 8001dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc4:	f383 8811 	msr	BASEPRI, r3
 8001dc8:	f3bf 8f6f 	isb	sy
 8001dcc:	f3bf 8f4f 	dsb	sy
 8001dd0:	623b      	str	r3, [r7, #32]
    }
 8001dd2:	bf00      	nop
 8001dd4:	e7fe      	b.n	8001dd4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dd6:	f001 f933 	bl	8003040 <xTaskGetSchedulerState>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <xQueueGenericSend+0x9e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <xQueueGenericSend+0xa2>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <xQueueGenericSend+0xa4>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10a      	bne.n	8001e06 <xQueueGenericSend+0xbe>
        __asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	61fb      	str	r3, [r7, #28]
    }
 8001e02:	bf00      	nop
 8001e04:	e7fe      	b.n	8001e04 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001e06:	f001 fe57 	bl	8003ab8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <xQueueGenericSend+0xd4>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d129      	bne.n	8001e70 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e22:	f000 fa19 	bl	8002258 <prvCopyDataToQueue>
 8001e26:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e32:	3324      	adds	r3, #36	; 0x24
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 ff67 	bl	8002d08 <xTaskRemoveFromEventList>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <xQueueGenericSend+0x1f8>)
 8001e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	e00a      	b.n	8001e68 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001e58:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <xQueueGenericSend+0x1f8>)
 8001e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001e68:	f001 fe56 	bl	8003b18 <vPortExitCritical>
                return pdPASS;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e063      	b.n	8001f38 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001e76:	f001 fe4f 	bl	8003b18 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e05c      	b.n	8001f38 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d106      	bne.n	8001e92 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 ff9f 	bl	8002dcc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e92:	f001 fe41 	bl	8003b18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001e96:	f000 fd19 	bl	80028cc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e9a:	f001 fe0d 	bl	8003ab8 <vPortEnterCritical>
 8001e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eaa:	d103      	bne.n	8001eb4 <xQueueGenericSend+0x16c>
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec0:	d103      	bne.n	8001eca <xQueueGenericSend+0x182>
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001eca:	f001 fe25 	bl	8003b18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ece:	1d3a      	adds	r2, r7, #4
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 ff8e 	bl	8002df8 <xTaskCheckForTimeOut>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d124      	bne.n	8001f2c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ee4:	f000 fab0 	bl	8002448 <prvIsQueueFull>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d018      	beq.n	8001f20 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef0:	3310      	adds	r3, #16
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 feb6 	bl	8002c68 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001efe:	f000 fa3b 	bl	8002378 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001f02:	f000 fcf1 	bl	80028e8 <xTaskResumeAll>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f47f af7c 	bne.w	8001e06 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <xQueueGenericSend+0x1f8>)
 8001f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	f3bf 8f6f 	isb	sy
 8001f1e:	e772      	b.n	8001e06 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f22:	f000 fa29 	bl	8002378 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f26:	f000 fcdf 	bl	80028e8 <xTaskResumeAll>
 8001f2a:	e76c      	b.n	8001e06 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f2e:	f000 fa23 	bl	8002378 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f32:	f000 fcd9 	bl	80028e8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001f36:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3738      	adds	r7, #56	; 0x38
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	e000ed04 	.word	0xe000ed04

08001f44 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b090      	sub	sp, #64	; 0x40
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001f6e:	bf00      	nop
 8001f70:	e7fe      	b.n	8001f70 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d103      	bne.n	8001f80 <xQueueGenericSendFromISR+0x3c>
 8001f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <xQueueGenericSendFromISR+0x40>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <xQueueGenericSendFromISR+0x42>
 8001f84:	2300      	movs	r3, #0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10a      	bne.n	8001fa0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8001f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8e:	f383 8811 	msr	BASEPRI, r3
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001f9c:	bf00      	nop
 8001f9e:	e7fe      	b.n	8001f9e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d103      	bne.n	8001fae <xQueueGenericSendFromISR+0x6a>
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <xQueueGenericSendFromISR+0x6e>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <xQueueGenericSendFromISR+0x70>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8001fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fbc:	f383 8811 	msr	BASEPRI, r3
 8001fc0:	f3bf 8f6f 	isb	sy
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	623b      	str	r3, [r7, #32]
    }
 8001fca:	bf00      	nop
 8001fcc:	e7fe      	b.n	8001fcc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fce:	f001 fe55 	bl	8003c7c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001fd2:	f3ef 8211 	mrs	r2, BASEPRI
 8001fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	61fa      	str	r2, [r7, #28]
 8001fe8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001fea:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d302      	bcc.n	8002000 <xQueueGenericSendFromISR+0xbc>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d13e      	bne.n	800207e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002016:	f000 f91f 	bl	8002258 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800201a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002022:	d112      	bne.n	800204a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	2b00      	cmp	r3, #0
 800202a:	d025      	beq.n	8002078 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800202c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202e:	3324      	adds	r3, #36	; 0x24
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fe69 	bl	8002d08 <xTaskRemoveFromEventList>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01d      	beq.n	8002078 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d01a      	beq.n	8002078 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e016      	b.n	8002078 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800204a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800204e:	2b7f      	cmp	r3, #127	; 0x7f
 8002050:	d10a      	bne.n	8002068 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	617b      	str	r3, [r7, #20]
    }
 8002064:	bf00      	nop
 8002066:	e7fe      	b.n	8002066 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002068:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800206c:	3301      	adds	r3, #1
 800206e:	b2db      	uxtb	r3, r3
 8002070:	b25a      	sxtb	r2, r3
 8002072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002078:	2301      	movs	r3, #1
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800207c:	e001      	b.n	8002082 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800207e:	2300      	movs	r3, #0
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002084:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800208c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800208e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002090:	4618      	mov	r0, r3
 8002092:	3740      	adds	r7, #64	; 0x40
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08c      	sub	sp, #48	; 0x30
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10a      	bne.n	80020c8 <xQueueReceive+0x30>
        __asm volatile
 80020b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b6:	f383 8811 	msr	BASEPRI, r3
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	623b      	str	r3, [r7, #32]
    }
 80020c4:	bf00      	nop
 80020c6:	e7fe      	b.n	80020c6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <xQueueReceive+0x3e>
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <xQueueReceive+0x42>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <xQueueReceive+0x44>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10a      	bne.n	80020f6 <xQueueReceive+0x5e>
        __asm volatile
 80020e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e4:	f383 8811 	msr	BASEPRI, r3
 80020e8:	f3bf 8f6f 	isb	sy
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	61fb      	str	r3, [r7, #28]
    }
 80020f2:	bf00      	nop
 80020f4:	e7fe      	b.n	80020f4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020f6:	f000 ffa3 	bl	8003040 <xTaskGetSchedulerState>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <xQueueReceive+0x6e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <xQueueReceive+0x72>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <xQueueReceive+0x74>
 800210a:	2300      	movs	r3, #0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <xQueueReceive+0x8e>
        __asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	61bb      	str	r3, [r7, #24]
    }
 8002122:	bf00      	nop
 8002124:	e7fe      	b.n	8002124 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002126:	f001 fcc7 	bl	8003ab8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	2b00      	cmp	r3, #0
 8002134:	d01f      	beq.n	8002176 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002136:	68b9      	ldr	r1, [r7, #8]
 8002138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800213a:	f000 f8f7 	bl	800232c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00f      	beq.n	800216e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	3310      	adds	r3, #16
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fdd8 	bl	8002d08 <xTaskRemoveFromEventList>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <xQueueReceive+0x1bc>)
 8002160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800216e:	f001 fcd3 	bl	8003b18 <vPortExitCritical>
                return pdPASS;
 8002172:	2301      	movs	r3, #1
 8002174:	e069      	b.n	800224a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d103      	bne.n	8002184 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800217c:	f001 fccc 	bl	8003b18 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002180:	2300      	movs	r3, #0
 8002182:	e062      	b.n	800224a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fe1c 	bl	8002dcc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002194:	2301      	movs	r3, #1
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002198:	f001 fcbe 	bl	8003b18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800219c:	f000 fb96 	bl	80028cc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80021a0:	f001 fc8a 	bl	8003ab8 <vPortEnterCritical>
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b0:	d103      	bne.n	80021ba <xQueueReceive+0x122>
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c6:	d103      	bne.n	80021d0 <xQueueReceive+0x138>
 80021c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021d0:	f001 fca2 	bl	8003b18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021d4:	1d3a      	adds	r2, r7, #4
 80021d6:	f107 0310 	add.w	r3, r7, #16
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fe0b 	bl	8002df8 <xTaskCheckForTimeOut>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d123      	bne.n	8002230 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ea:	f000 f917 	bl	800241c <prvIsQueueEmpty>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d017      	beq.n	8002224 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f6:	3324      	adds	r3, #36	; 0x24
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fd33 	bl	8002c68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002204:	f000 f8b8 	bl	8002378 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002208:	f000 fb6e 	bl	80028e8 <xTaskResumeAll>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d189      	bne.n	8002126 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <xQueueReceive+0x1bc>)
 8002214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	e780      	b.n	8002126 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002226:	f000 f8a7 	bl	8002378 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800222a:	f000 fb5d 	bl	80028e8 <xTaskResumeAll>
 800222e:	e77a      	b.n	8002126 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002232:	f000 f8a1 	bl	8002378 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002236:	f000 fb57 	bl	80028e8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800223a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800223c:	f000 f8ee 	bl	800241c <prvIsQueueEmpty>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	f43f af6f 	beq.w	8002126 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002248:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800224a:	4618      	mov	r0, r3
 800224c:	3730      	adds	r7, #48	; 0x30
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000ed04 	.word	0xe000ed04

08002258 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10d      	bne.n	8002292 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d14d      	bne.n	800231a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fefa 	bl	800307c <xTaskPriorityDisinherit>
 8002288:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e043      	b.n	800231a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d119      	bne.n	80022cc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6858      	ldr	r0, [r3, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	461a      	mov	r2, r3
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	f003 fdc6 	bl	8005e34 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	441a      	add	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d32b      	bcc.n	800231a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	e026      	b.n	800231a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68d8      	ldr	r0, [r3, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	461a      	mov	r2, r3
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	f003 fdac 	bl	8005e34 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	425b      	negs	r3, r3
 80022e6:	441a      	add	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d207      	bcs.n	8002308 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	425b      	negs	r3, r3
 8002302:	441a      	add	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d105      	bne.n	800231a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	3b01      	subs	r3, #1
 8002318:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002322:	697b      	ldr	r3, [r7, #20]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d018      	beq.n	8002370 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	441a      	add	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	429a      	cmp	r2, r3
 8002356:	d303      	bcc.n	8002360 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68d9      	ldr	r1, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	461a      	mov	r2, r3
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f003 fd62 	bl	8005e34 <memcpy>
    }
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002380:	f001 fb9a 	bl	8003ab8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800238a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800238c:	e011      	b.n	80023b2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3324      	adds	r3, #36	; 0x24
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fcb4 	bl	8002d08 <xTaskRemoveFromEventList>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80023a6:	f000 fd8d 	bl	8002ec4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80023b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	dce9      	bgt.n	800238e <prvUnlockQueue+0x16>
 80023ba:	e000      	b.n	80023be <prvUnlockQueue+0x46>
                        break;
 80023bc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	22ff      	movs	r2, #255	; 0xff
 80023c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80023c6:	f001 fba7 	bl	8003b18 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80023ca:	f001 fb75 	bl	8003ab8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023d4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80023d6:	e011      	b.n	80023fc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d012      	beq.n	8002406 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3310      	adds	r3, #16
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fc8f 	bl	8002d08 <xTaskRemoveFromEventList>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80023f0:	f000 fd68 	bl	8002ec4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80023f4:	7bbb      	ldrb	r3, [r7, #14]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80023fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002400:	2b00      	cmp	r3, #0
 8002402:	dce9      	bgt.n	80023d8 <prvUnlockQueue+0x60>
 8002404:	e000      	b.n	8002408 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002406:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002410:	f001 fb82 	bl	8003b18 <vPortExitCritical>
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002424:	f001 fb48 	bl	8003ab8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002430:	2301      	movs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e001      	b.n	800243a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800243a:	f001 fb6d 	bl	8003b18 <vPortExitCritical>

    return xReturn;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002450:	f001 fb32 	bl	8003ab8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	429a      	cmp	r2, r3
 800245e:	d102      	bne.n	8002466 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002460:	2301      	movs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e001      	b.n	800246a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800246a:	f001 fb55 	bl	8003b18 <vPortExitCritical>

    return xReturn;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e014      	b.n	80024b2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002488:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <vQueueAddToRegistry+0x50>)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002494:	490c      	ldr	r1, [pc, #48]	; (80024c8 <vQueueAddToRegistry+0x50>)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <vQueueAddToRegistry+0x50>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80024aa:	e006      	b.n	80024ba <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b07      	cmp	r3, #7
 80024b6:	d9e7      	bls.n	8002488 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	200131c4 	.word	0x200131c4

080024cc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80024dc:	f001 faec 	bl	8003ab8 <vPortEnterCritical>
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ec:	d103      	bne.n	80024f6 <vQueueWaitForMessageRestricted+0x2a>
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002502:	d103      	bne.n	800250c <vQueueWaitForMessageRestricted+0x40>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800250c:	f001 fb04 	bl	8003b18 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	2b00      	cmp	r3, #0
 8002516:	d106      	bne.n	8002526 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3324      	adds	r3, #36	; 0x24
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fbc5 	bl	8002cb0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7ff ff26 	bl	8002378 <prvUnlockQueue>
    }
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002534:	b580      	push	{r7, lr}
 8002536:	b08c      	sub	sp, #48	; 0x30
 8002538:	af04      	add	r7, sp, #16
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4618      	mov	r0, r3
 800254a:	f001 fbd7 	bl	8003cfc <pvPortMalloc>
 800254e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00e      	beq.n	8002574 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002556:	2058      	movs	r0, #88	; 0x58
 8002558:	f001 fbd0 	bl	8003cfc <pvPortMalloc>
 800255c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
 800256a:	e005      	b.n	8002578 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800256c:	6978      	ldr	r0, [r7, #20]
 800256e:	f001 fca5 	bl	8003ebc <vPortFree>
 8002572:	e001      	b.n	8002578 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d013      	beq.n	80025a6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800257e:	88fa      	ldrh	r2, [r7, #6]
 8002580:	2300      	movs	r3, #0
 8002582:	9303      	str	r3, [sp, #12]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f80e 	bl	80025b6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800259a:	69f8      	ldr	r0, [r7, #28]
 800259c:	f000 f8a2 	bl	80026e4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80025a0:	2301      	movs	r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	e002      	b.n	80025ac <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025aa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80025ac:	69bb      	ldr	r3, [r7, #24]
    }
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b088      	sub	sp, #32
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	461a      	mov	r2, r3
 80025ce:	21a5      	movs	r1, #165	; 0xa5
 80025d0:	f003 fc3e 	bl	8005e50 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025de:	3b01      	subs	r3, #1
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f023 0307 	bic.w	r3, r3, #7
 80025ec:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <prvInitialiseNewTask+0x58>
        __asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	617b      	str	r3, [r7, #20]
    }
 800260a:	bf00      	nop
 800260c:	e7fe      	b.n	800260c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01f      	beq.n	8002654 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	e012      	b.n	8002640 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	7819      	ldrb	r1, [r3, #0]
 8002622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	4413      	add	r3, r2
 8002628:	3334      	adds	r3, #52	; 0x34
 800262a:	460a      	mov	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b09      	cmp	r3, #9
 8002644:	d9e9      	bls.n	800261a <prvInitialiseNewTask+0x64>
 8002646:	e000      	b.n	800264a <prvInitialiseNewTask+0x94>
            {
                break;
 8002648:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002652:	e003      	b.n	800265c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	2b04      	cmp	r3, #4
 8002660:	d901      	bls.n	8002666 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002662:	2304      	movs	r3, #4
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002670:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	2200      	movs	r2, #0
 8002676:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	3304      	adds	r3, #4
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff f9e4 	bl	8001a4a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	3318      	adds	r3, #24
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff f9df 	bl	8001a4a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002690:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	f1c3 0205 	rsb	r2, r3, #5
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	3350      	adds	r3, #80	; 0x50
 80026a6:	2204      	movs	r2, #4
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fbd0 	bl	8005e50 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	3354      	adds	r3, #84	; 0x54
 80026b4:	2201      	movs	r2, #1
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fbc9 	bl	8005e50 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	69b8      	ldr	r0, [r7, #24]
 80026c4:	f001 f8cc 	bl	8003860 <pxPortInitialiseStack>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026da:	bf00      	nop
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80026ec:	f001 f9e4 	bl	8003ab8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <prvAddNewTaskToReadyList+0xc0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	4a2b      	ldr	r2, [pc, #172]	; (80027a4 <prvAddNewTaskToReadyList+0xc0>)
 80026f8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80026fa:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <prvAddNewTaskToReadyList+0xc4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002702:	4a29      	ldr	r2, [pc, #164]	; (80027a8 <prvAddNewTaskToReadyList+0xc4>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <prvAddNewTaskToReadyList+0xc0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d110      	bne.n	8002732 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002710:	f000 fbfc 	bl	8002f0c <prvInitialiseTaskLists>
 8002714:	e00d      	b.n	8002732 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002716:	4b25      	ldr	r3, [pc, #148]	; (80027ac <prvAddNewTaskToReadyList+0xc8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <prvAddNewTaskToReadyList+0xc4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	429a      	cmp	r2, r3
 800272a:	d802      	bhi.n	8002732 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800272c:	4a1e      	ldr	r2, [pc, #120]	; (80027a8 <prvAddNewTaskToReadyList+0xc4>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002732:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <prvAddNewTaskToReadyList+0xcc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <prvAddNewTaskToReadyList+0xcc>)
 800273a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <prvAddNewTaskToReadyList+0xcc>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	2201      	movs	r2, #1
 800274a:	409a      	lsls	r2, r3
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <prvAddNewTaskToReadyList+0xd0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4313      	orrs	r3, r2
 8002752:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <prvAddNewTaskToReadyList+0xd0>)
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <prvAddNewTaskToReadyList+0xd4>)
 8002764:	441a      	add	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	4619      	mov	r1, r3
 800276c:	4610      	mov	r0, r2
 800276e:	f7ff f979 	bl	8001a64 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002772:	f001 f9d1 	bl	8003b18 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <prvAddNewTaskToReadyList+0xc8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00e      	beq.n	800279c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <prvAddNewTaskToReadyList+0xc4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	429a      	cmp	r2, r3
 800278a:	d207      	bcs.n	800279c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <prvAddNewTaskToReadyList+0xd8>)
 800278e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000300 	.word	0x20000300
 80027a8:	20000228 	.word	0x20000228
 80027ac:	2000030c 	.word	0x2000030c
 80027b0:	2000031c 	.word	0x2000031c
 80027b4:	20000308 	.word	0x20000308
 80027b8:	2000022c 	.word	0x2000022c
 80027bc:	e000ed04 	.word	0xe000ed04

080027c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d017      	beq.n	8002802 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <vTaskDelay+0x60>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <vTaskDelay+0x30>
        __asm volatile
 80027da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027de:	f383 8811 	msr	BASEPRI, r3
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	60bb      	str	r3, [r7, #8]
    }
 80027ec:	bf00      	nop
 80027ee:	e7fe      	b.n	80027ee <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80027f0:	f000 f86c 	bl	80028cc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027f4:	2100      	movs	r1, #0
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fcba 	bl	8003170 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80027fc:	f000 f874 	bl	80028e8 <xTaskResumeAll>
 8002800:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <vTaskDelay+0x64>)
 800280a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000328 	.word	0x20000328
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <vTaskStartScheduler+0x88>)
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	2300      	movs	r3, #0
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2300      	movs	r3, #0
 8002838:	2282      	movs	r2, #130	; 0x82
 800283a:	491e      	ldr	r1, [pc, #120]	; (80028b4 <vTaskStartScheduler+0x8c>)
 800283c:	481e      	ldr	r0, [pc, #120]	; (80028b8 <vTaskStartScheduler+0x90>)
 800283e:	f7ff fe79 	bl	8002534 <xTaskCreate>
 8002842:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800284a:	f000 fcf7 	bl	800323c <xTimerCreateTimerTask>
 800284e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d116      	bne.n	8002884 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	60bb      	str	r3, [r7, #8]
    }
 8002868:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <vTaskStartScheduler+0x94>)
 800286c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002870:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <vTaskStartScheduler+0x98>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <vTaskStartScheduler+0x9c>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800287e:	f001 f879 	bl	8003974 <xPortStartScheduler>
 8002882:	e00e      	b.n	80028a2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800288a:	d10a      	bne.n	80028a2 <vTaskStartScheduler+0x7a>
        __asm volatile
 800288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	607b      	str	r3, [r7, #4]
    }
 800289e:	bf00      	nop
 80028a0:	e7fe      	b.n	80028a0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <vTaskStartScheduler+0xa0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000324 	.word	0x20000324
 80028b4:	08008b88 	.word	0x08008b88
 80028b8:	08002edd 	.word	0x08002edd
 80028bc:	20000320 	.word	0x20000320
 80028c0:	2000030c 	.word	0x2000030c
 80028c4:	20000304 	.word	0x20000304
 80028c8:	20000014 	.word	0x20000014

080028cc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <vTaskSuspendAll+0x18>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3301      	adds	r3, #1
 80028d6:	4a03      	ldr	r2, [pc, #12]	; (80028e4 <vTaskSuspendAll+0x18>)
 80028d8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	20000328 	.word	0x20000328

080028e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <xTaskResumeAll+0x114>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <xTaskResumeAll+0x2c>
        __asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	603b      	str	r3, [r7, #0]
    }
 8002910:	bf00      	nop
 8002912:	e7fe      	b.n	8002912 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002914:	f001 f8d0 	bl	8003ab8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002918:	4b38      	ldr	r3, [pc, #224]	; (80029fc <xTaskResumeAll+0x114>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3b01      	subs	r3, #1
 800291e:	4a37      	ldr	r2, [pc, #220]	; (80029fc <xTaskResumeAll+0x114>)
 8002920:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002922:	4b36      	ldr	r3, [pc, #216]	; (80029fc <xTaskResumeAll+0x114>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d161      	bne.n	80029ee <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800292a:	4b35      	ldr	r3, [pc, #212]	; (8002a00 <xTaskResumeAll+0x118>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d05d      	beq.n	80029ee <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002932:	e02e      	b.n	8002992 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002934:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <xTaskResumeAll+0x11c>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3318      	adds	r3, #24
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff f8ec 	bl	8001b1e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3304      	adds	r3, #4
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f8e7 	bl	8001b1e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	2201      	movs	r2, #1
 8002956:	409a      	lsls	r2, r3
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <xTaskResumeAll+0x120>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <xTaskResumeAll+0x120>)
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4a27      	ldr	r2, [pc, #156]	; (8002a0c <xTaskResumeAll+0x124>)
 8002970:	441a      	add	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3304      	adds	r3, #4
 8002976:	4619      	mov	r1, r3
 8002978:	4610      	mov	r0, r2
 800297a:	f7ff f873 	bl	8001a64 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <xTaskResumeAll+0x128>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	429a      	cmp	r2, r3
 800298a:	d302      	bcc.n	8002992 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <xTaskResumeAll+0x12c>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <xTaskResumeAll+0x11c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1cc      	bne.n	8002934 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80029a0:	f000 fb32 	bl	8003008 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <xTaskResumeAll+0x130>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d010      	beq.n	80029d2 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80029b0:	f000 f846 	bl	8002a40 <xTaskIncrementTick>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <xTaskResumeAll+0x12c>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f1      	bne.n	80029b0 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <xTaskResumeAll+0x130>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <xTaskResumeAll+0x12c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80029da:	2301      	movs	r3, #1
 80029dc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <xTaskResumeAll+0x134>)
 80029e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80029ee:	f001 f893 	bl	8003b18 <vPortExitCritical>

    return xAlreadyYielded;
 80029f2:	68bb      	ldr	r3, [r7, #8]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000328 	.word	0x20000328
 8002a00:	20000300 	.word	0x20000300
 8002a04:	200002c0 	.word	0x200002c0
 8002a08:	20000308 	.word	0x20000308
 8002a0c:	2000022c 	.word	0x2000022c
 8002a10:	20000228 	.word	0x20000228
 8002a14:	20000314 	.word	0x20000314
 8002a18:	20000310 	.word	0x20000310
 8002a1c:	e000ed04 	.word	0xe000ed04

08002a20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <xTaskGetTickCount+0x1c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000304 	.word	0x20000304

08002a40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a4a:	4b4e      	ldr	r3, [pc, #312]	; (8002b84 <xTaskIncrementTick+0x144>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 808e 	bne.w	8002b70 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a54:	4b4c      	ldr	r3, [pc, #304]	; (8002b88 <xTaskIncrementTick+0x148>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a5c:	4a4a      	ldr	r2, [pc, #296]	; (8002b88 <xTaskIncrementTick+0x148>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d120      	bne.n	8002aaa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a68:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <xTaskIncrementTick+0x14c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <xTaskIncrementTick+0x48>
        __asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	603b      	str	r3, [r7, #0]
    }
 8002a84:	bf00      	nop
 8002a86:	e7fe      	b.n	8002a86 <xTaskIncrementTick+0x46>
 8002a88:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <xTaskIncrementTick+0x14c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b40      	ldr	r3, [pc, #256]	; (8002b90 <xTaskIncrementTick+0x150>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a3e      	ldr	r2, [pc, #248]	; (8002b8c <xTaskIncrementTick+0x14c>)
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4a3e      	ldr	r2, [pc, #248]	; (8002b90 <xTaskIncrementTick+0x150>)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <xTaskIncrementTick+0x154>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	4a3c      	ldr	r2, [pc, #240]	; (8002b94 <xTaskIncrementTick+0x154>)
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	f000 faaf 	bl	8003008 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <xTaskIncrementTick+0x158>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d348      	bcc.n	8002b46 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <xTaskIncrementTick+0x14c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d104      	bne.n	8002ac8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002abe:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <xTaskIncrementTick+0x158>)
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ac4:	601a      	str	r2, [r3, #0]
                    break;
 8002ac6:	e03e      	b.n	8002b46 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ac8:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <xTaskIncrementTick+0x14c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d203      	bcs.n	8002ae8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <xTaskIncrementTick+0x158>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ae6:	e02e      	b.n	8002b46 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	3304      	adds	r3, #4
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff f816 	bl	8001b1e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3318      	adds	r3, #24
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f80d 	bl	8001b1e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	2201      	movs	r2, #1
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <xTaskIncrementTick+0x15c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <xTaskIncrementTick+0x15c>)
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <xTaskIncrementTick+0x160>)
 8002b24:	441a      	add	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	f7fe ff99 	bl	8001a64 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <xTaskIncrementTick+0x164>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d3b9      	bcc.n	8002ab4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b44:	e7b6      	b.n	8002ab4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <xTaskIncrementTick+0x164>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4c:	4914      	ldr	r1, [pc, #80]	; (8002ba0 <xTaskIncrementTick+0x160>)
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d901      	bls.n	8002b62 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <xTaskIncrementTick+0x168>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	e004      	b.n	8002b7a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <xTaskIncrementTick+0x16c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <xTaskIncrementTick+0x16c>)
 8002b78:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002b7a:	697b      	ldr	r3, [r7, #20]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000328 	.word	0x20000328
 8002b88:	20000304 	.word	0x20000304
 8002b8c:	200002b8 	.word	0x200002b8
 8002b90:	200002bc 	.word	0x200002bc
 8002b94:	20000318 	.word	0x20000318
 8002b98:	20000320 	.word	0x20000320
 8002b9c:	20000308 	.word	0x20000308
 8002ba0:	2000022c 	.word	0x2000022c
 8002ba4:	20000228 	.word	0x20000228
 8002ba8:	20000314 	.word	0x20000314
 8002bac:	20000310 	.word	0x20000310

08002bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bb6:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <vTaskSwitchContext+0xa4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002bbe:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <vTaskSwitchContext+0xa8>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002bc4:	e03f      	b.n	8002c46 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <vTaskSwitchContext+0xa8>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bcc:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <vTaskSwitchContext+0xac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002bda:	7afb      	ldrb	r3, [r7, #11]
 8002bdc:	f1c3 031f 	rsb	r3, r3, #31
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	491f      	ldr	r1, [pc, #124]	; (8002c60 <vTaskSwitchContext+0xb0>)
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	607b      	str	r3, [r7, #4]
    }
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <vTaskSwitchContext+0x5a>
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <vTaskSwitchContext+0xb0>)
 8002c18:	4413      	add	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	3308      	adds	r3, #8
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d104      	bne.n	8002c3c <vTaskSwitchContext+0x8c>
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <vTaskSwitchContext+0xb4>)
 8002c44:	6013      	str	r3, [r2, #0]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000328 	.word	0x20000328
 8002c58:	20000314 	.word	0x20000314
 8002c5c:	20000308 	.word	0x20000308
 8002c60:	2000022c 	.word	0x2000022c
 8002c64:	20000228 	.word	0x20000228

08002c68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	60fb      	str	r3, [r7, #12]
    }
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <vTaskPlaceOnEventList+0x44>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3318      	adds	r3, #24
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe ff08 	bl	8001aac <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	6838      	ldr	r0, [r7, #0]
 8002ca0:	f000 fa66 	bl	8003170 <prvAddCurrentTaskToDelayedList>
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000228 	.word	0x20000228

08002cb0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	617b      	str	r3, [r7, #20]
    }
 8002cd4:	bf00      	nop
 8002cd6:	e7fe      	b.n	8002cd6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <vTaskPlaceOnEventListRestricted+0x54>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3318      	adds	r3, #24
 8002cde:	4619      	mov	r1, r3
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7fe febf 	bl	8001a64 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cf0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	68b8      	ldr	r0, [r7, #8]
 8002cf6:	f000 fa3b 	bl	8003170 <prvAddCurrentTaskToDelayedList>
    }
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000228 	.word	0x20000228

08002d08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	60fb      	str	r3, [r7, #12]
    }
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	3318      	adds	r3, #24
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fef0 	bl	8001b1e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <xTaskRemoveFromEventList+0xac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11c      	bne.n	8002d80 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fee7 	bl	8001b1e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	2201      	movs	r2, #1
 8002d56:	409a      	lsls	r2, r3
 8002d58:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <xTaskRemoveFromEventList+0xb0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <xTaskRemoveFromEventList+0xb0>)
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <xTaskRemoveFromEventList+0xb4>)
 8002d70:	441a      	add	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	3304      	adds	r3, #4
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f7fe fe73 	bl	8001a64 <vListInsertEnd>
 8002d7e:	e005      	b.n	8002d8c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	3318      	adds	r3, #24
 8002d84:	4619      	mov	r1, r3
 8002d86:	480e      	ldr	r0, [pc, #56]	; (8002dc0 <xTaskRemoveFromEventList+0xb8>)
 8002d88:	f7fe fe6c 	bl	8001a64 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <xTaskRemoveFromEventList+0xbc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d905      	bls.n	8002da6 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <xTaskRemoveFromEventList+0xc0>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e001      	b.n	8002daa <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002daa:	697b      	ldr	r3, [r7, #20]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000328 	.word	0x20000328
 8002db8:	20000308 	.word	0x20000308
 8002dbc:	2000022c 	.word	0x2000022c
 8002dc0:	200002c0 	.word	0x200002c0
 8002dc4:	20000228 	.word	0x20000228
 8002dc8:	20000314 	.word	0x20000314

08002dcc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <vTaskInternalSetTimeOutState+0x24>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <vTaskInternalSetTimeOutState+0x28>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	605a      	str	r2, [r3, #4]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	20000318 	.word	0x20000318
 8002df4:	20000304 	.word	0x20000304

08002df8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	613b      	str	r3, [r7, #16]
    }
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	60fb      	str	r3, [r7, #12]
    }
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002e3a:	f000 fe3d 	bl	8003ab8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002e3e:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <xTaskCheckForTimeOut+0xc4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e56:	d102      	bne.n	8002e5e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	e026      	b.n	8002eac <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <xTaskCheckForTimeOut+0xc8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d00a      	beq.n	8002e80 <xTaskCheckForTimeOut+0x88>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d305      	bcc.n	8002e80 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002e74:	2301      	movs	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e015      	b.n	8002eac <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d20b      	bcs.n	8002ea2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	1ad2      	subs	r2, r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ff98 	bl	8002dcc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	e004      	b.n	8002eac <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002eac:	f000 fe34 	bl	8003b18 <vPortExitCritical>

    return xReturn;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000304 	.word	0x20000304
 8002ec0:	20000318 	.word	0x20000318

08002ec4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <vTaskMissedYield+0x14>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	20000314 	.word	0x20000314

08002edc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ee4:	f000 f852 	bl	8002f8c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <prvIdleTask+0x28>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d9f9      	bls.n	8002ee4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <prvIdleTask+0x2c>)
 8002ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002f00:	e7f0      	b.n	8002ee4 <prvIdleTask+0x8>
 8002f02:	bf00      	nop
 8002f04:	2000022c 	.word	0x2000022c
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	e00c      	b.n	8002f32 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <prvInitialiseTaskLists+0x60>)
 8002f24:	4413      	add	r3, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fd6f 	bl	8001a0a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d9ef      	bls.n	8002f18 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002f38:	480d      	ldr	r0, [pc, #52]	; (8002f70 <prvInitialiseTaskLists+0x64>)
 8002f3a:	f7fe fd66 	bl	8001a0a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002f3e:	480d      	ldr	r0, [pc, #52]	; (8002f74 <prvInitialiseTaskLists+0x68>)
 8002f40:	f7fe fd63 	bl	8001a0a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002f44:	480c      	ldr	r0, [pc, #48]	; (8002f78 <prvInitialiseTaskLists+0x6c>)
 8002f46:	f7fe fd60 	bl	8001a0a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002f4a:	480c      	ldr	r0, [pc, #48]	; (8002f7c <prvInitialiseTaskLists+0x70>)
 8002f4c:	f7fe fd5d 	bl	8001a0a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002f50:	480b      	ldr	r0, [pc, #44]	; (8002f80 <prvInitialiseTaskLists+0x74>)
 8002f52:	f7fe fd5a 	bl	8001a0a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <prvInitialiseTaskLists+0x78>)
 8002f58:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <prvInitialiseTaskLists+0x64>)
 8002f5a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <prvInitialiseTaskLists+0x7c>)
 8002f5e:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <prvInitialiseTaskLists+0x68>)
 8002f60:	601a      	str	r2, [r3, #0]
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	2000022c 	.word	0x2000022c
 8002f70:	20000290 	.word	0x20000290
 8002f74:	200002a4 	.word	0x200002a4
 8002f78:	200002c0 	.word	0x200002c0
 8002f7c:	200002d4 	.word	0x200002d4
 8002f80:	200002ec 	.word	0x200002ec
 8002f84:	200002b8 	.word	0x200002b8
 8002f88:	200002bc 	.word	0x200002bc

08002f8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f92:	e019      	b.n	8002fc8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002f94:	f000 fd90 	bl	8003ab8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f98:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <prvCheckTasksWaitingTermination+0x50>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fdba 	bl	8001b1e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <prvCheckTasksWaitingTermination+0x54>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <prvCheckTasksWaitingTermination+0x54>)
 8002fb2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <prvCheckTasksWaitingTermination+0x58>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <prvCheckTasksWaitingTermination+0x58>)
 8002fbc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002fbe:	f000 fdab 	bl	8003b18 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f810 	bl	8002fe8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <prvCheckTasksWaitingTermination+0x58>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e1      	bne.n	8002f94 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200002d4 	.word	0x200002d4
 8002fe0:	20000300 	.word	0x20000300
 8002fe4:	200002e8 	.word	0x200002e8

08002fe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 ff61 	bl	8003ebc <vPortFree>
                vPortFree( pxTCB );
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 ff5e 	bl	8003ebc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <prvResetNextTaskUnblockTime+0x30>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d104      	bne.n	8003020 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <prvResetNextTaskUnblockTime+0x34>)
 8003018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800301c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800301e:	e005      	b.n	800302c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <prvResetNextTaskUnblockTime+0x30>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a04      	ldr	r2, [pc, #16]	; (800303c <prvResetNextTaskUnblockTime+0x34>)
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	200002b8 	.word	0x200002b8
 800303c:	20000320 	.word	0x20000320

08003040 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <xTaskGetSchedulerState+0x34>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800304e:	2301      	movs	r3, #1
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	e008      	b.n	8003066 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <xTaskGetSchedulerState+0x38>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800305c:	2302      	movs	r3, #2
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	e001      	b.n	8003066 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003062:	2300      	movs	r3, #0
 8003064:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003066:	687b      	ldr	r3, [r7, #4]
    }
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	2000030c 	.word	0x2000030c
 8003078:	20000328 	.word	0x20000328

0800307c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d063      	beq.n	800315a <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003092:	4b34      	ldr	r3, [pc, #208]	; (8003164 <xTaskPriorityDisinherit+0xe8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	429a      	cmp	r2, r3
 800309a:	d00a      	beq.n	80030b2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	60fb      	str	r3, [r7, #12]
    }
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	60bb      	str	r3, [r7, #8]
    }
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d039      	beq.n	800315a <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d135      	bne.n	800315a <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	3304      	adds	r3, #4
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe fd13 	bl	8001b1e <uxListRemove>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	2201      	movs	r2, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43da      	mvns	r2, r3
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <xTaskPriorityDisinherit+0xec>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4013      	ands	r3, r2
 8003110:	4a15      	ldr	r2, [pc, #84]	; (8003168 <xTaskPriorityDisinherit+0xec>)
 8003112:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f1c3 0205 	rsb	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <xTaskPriorityDisinherit+0xec>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4313      	orrs	r3, r2
 8003136:	4a0c      	ldr	r2, [pc, #48]	; (8003168 <xTaskPriorityDisinherit+0xec>)
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <xTaskPriorityDisinherit+0xf0>)
 8003148:	441a      	add	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	4610      	mov	r0, r2
 8003152:	f7fe fc87 	bl	8001a64 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003156:	2301      	movs	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800315a:	697b      	ldr	r3, [r7, #20]
    }
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000228 	.word	0x20000228
 8003168:	20000308 	.word	0x20000308
 800316c:	2000022c 	.word	0x2000022c

08003170 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800317a:	4b29      	ldr	r3, [pc, #164]	; (8003220 <prvAddCurrentTaskToDelayedList+0xb0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003180:	4b28      	ldr	r3, [pc, #160]	; (8003224 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3304      	adds	r3, #4
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe fcc9 	bl	8001b1e <uxListRemove>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	2201      	movs	r2, #1
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	4b21      	ldr	r3, [pc, #132]	; (8003228 <prvAddCurrentTaskToDelayedList+0xb8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4013      	ands	r3, r2
 80031a6:	4a20      	ldr	r2, [pc, #128]	; (8003228 <prvAddCurrentTaskToDelayedList+0xb8>)
 80031a8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b0:	d10a      	bne.n	80031c8 <prvAddCurrentTaskToDelayedList+0x58>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031b8:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3304      	adds	r3, #4
 80031be:	4619      	mov	r1, r3
 80031c0:	481a      	ldr	r0, [pc, #104]	; (800322c <prvAddCurrentTaskToDelayedList+0xbc>)
 80031c2:	f7fe fc4f 	bl	8001a64 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80031c6:	e026      	b.n	8003216 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d209      	bcs.n	80031f4 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031e0:	4b13      	ldr	r3, [pc, #76]	; (8003230 <prvAddCurrentTaskToDelayedList+0xc0>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f7fe fc5d 	bl	8001aac <vListInsert>
}
 80031f2:	e010      	b.n	8003216 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <prvAddCurrentTaskToDelayedList+0xc4>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f7fe fc53 	bl	8001aac <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	d202      	bcs.n	8003216 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003210:	4a09      	ldr	r2, [pc, #36]	; (8003238 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	6013      	str	r3, [r2, #0]
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000304 	.word	0x20000304
 8003224:	20000228 	.word	0x20000228
 8003228:	20000308 	.word	0x20000308
 800322c:	200002ec 	.word	0x200002ec
 8003230:	200002bc 	.word	0x200002bc
 8003234:	200002b8 	.word	0x200002b8
 8003238:	20000320 	.word	0x20000320

0800323c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003246:	f000 fad5 	bl	80037f4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <xTimerCreateTimerTask+0x54>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <xTimerCreateTimerTask+0x58>)
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	2302      	movs	r3, #2
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	2300      	movs	r3, #0
 800325c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003260:	490d      	ldr	r1, [pc, #52]	; (8003298 <xTimerCreateTimerTask+0x5c>)
 8003262:	480e      	ldr	r0, [pc, #56]	; (800329c <xTimerCreateTimerTask+0x60>)
 8003264:	f7ff f966 	bl	8002534 <xTaskCreate>
 8003268:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	603b      	str	r3, [r7, #0]
    }
 8003282:	bf00      	nop
 8003284:	e7fe      	b.n	8003284 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003286:	687b      	ldr	r3, [r7, #4]
    }
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	2000035c 	.word	0x2000035c
 8003294:	20000360 	.word	0x20000360
 8003298:	08008b90 	.word	0x08008b90
 800329c:	080033d5 	.word	0x080033d5

080032a0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <xTimerGenericCommand+0x2e>
        __asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	623b      	str	r3, [r7, #32]
    }
 80032ca:	bf00      	nop
 80032cc:	e7fe      	b.n	80032cc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80032ce:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <xTimerGenericCommand+0x98>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d02a      	beq.n	800332c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	dc18      	bgt.n	800331a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80032e8:	f7ff feaa 	bl	8003040 <xTaskGetSchedulerState>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d109      	bne.n	8003306 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <xTimerGenericCommand+0x98>)
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	f107 0114 	add.w	r1, r7, #20
 80032fa:	2300      	movs	r3, #0
 80032fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fe:	f7fe fd23 	bl	8001d48 <xQueueGenericSend>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24
 8003304:	e012      	b.n	800332c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003306:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <xTimerGenericCommand+0x98>)
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	f107 0114 	add.w	r1, r7, #20
 800330e:	2300      	movs	r3, #0
 8003310:	2200      	movs	r2, #0
 8003312:	f7fe fd19 	bl	8001d48 <xQueueGenericSend>
 8003316:	6278      	str	r0, [r7, #36]	; 0x24
 8003318:	e008      	b.n	800332c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <xTimerGenericCommand+0x98>)
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	f107 0114 	add.w	r1, r7, #20
 8003322:	2300      	movs	r3, #0
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	f7fe fe0d 	bl	8001f44 <xQueueGenericSendFromISR>
 800332a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800332e:	4618      	mov	r0, r3
 8003330:	3728      	adds	r7, #40	; 0x28
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	2000035c 	.word	0x2000035c

0800333c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <prvProcessExpiredTimer+0x94>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3304      	adds	r3, #4
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fbe2 	bl	8001b1e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d022      	beq.n	80033ae <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	18d1      	adds	r1, r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	6978      	ldr	r0, [r7, #20]
 8003376:	f000 f8d1 	bl	800351c <prvInsertTimerInActiveList>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01f      	beq.n	80033c0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003380:	2300      	movs	r3, #0
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2300      	movs	r3, #0
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	2100      	movs	r1, #0
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f7ff ff88 	bl	80032a0 <xTimerGenericCommand>
 8003390:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d113      	bne.n	80033c0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	60fb      	str	r3, [r7, #12]
    }
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	6978      	ldr	r0, [r7, #20]
 80033c6:	4798      	blx	r3
    }
 80033c8:	bf00      	nop
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000354 	.word	0x20000354

080033d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80033dc:	f107 0308 	add.w	r3, r7, #8
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f857 	bl	8003494 <prvGetNextExpireTime>
 80033e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4619      	mov	r1, r3
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f803 	bl	80033f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80033f2:	f000 f8d5 	bl	80035a0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80033f6:	e7f1      	b.n	80033dc <prvTimerTask+0x8>

080033f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003402:	f7ff fa63 	bl	80028cc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f866 	bl	80034dc <prvSampleTimeNow>
 8003410:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d130      	bne.n	800347a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <prvProcessTimerOrBlockTask+0x3c>
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	429a      	cmp	r2, r3
 8003424:	d806      	bhi.n	8003434 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003426:	f7ff fa5f 	bl	80028e8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800342a:	68f9      	ldr	r1, [r7, #12]
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff85 	bl	800333c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003432:	e024      	b.n	800347e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <prvProcessTimerOrBlockTask+0x90>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <prvProcessTimerOrBlockTask+0x50>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <prvProcessTimerOrBlockTask+0x52>
 8003448:	2300      	movs	r3, #0
 800344a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <prvProcessTimerOrBlockTask+0x94>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4619      	mov	r1, r3
 800345a:	f7ff f837 	bl	80024cc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800345e:	f7ff fa43 	bl	80028e8 <xTaskResumeAll>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <prvProcessTimerOrBlockTask+0x98>)
 800346a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	f3bf 8f6f 	isb	sy
    }
 8003478:	e001      	b.n	800347e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800347a:	f7ff fa35 	bl	80028e8 <xTaskResumeAll>
    }
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000358 	.word	0x20000358
 800348c:	2000035c 	.word	0x2000035c
 8003490:	e000ed04 	.word	0xe000ed04

08003494 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800349c:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <prvGetNextExpireTime+0x44>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <prvGetNextExpireTime+0x16>
 80034a6:	2201      	movs	r2, #1
 80034a8:	e000      	b.n	80034ac <prvGetNextExpireTime+0x18>
 80034aa:	2200      	movs	r2, #0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <prvGetNextExpireTime+0x44>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e001      	b.n	80034c8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80034c8:	68fb      	ldr	r3, [r7, #12]
    }
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000354 	.word	0x20000354

080034dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80034e4:	f7ff fa9c 	bl	8002a20 <xTaskGetTickCount>
 80034e8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <prvSampleTimeNow+0x3c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d205      	bcs.n	8003500 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80034f4:	f000 f91a 	bl	800372c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e002      	b.n	8003506 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003506:	4a04      	ldr	r2, [pc, #16]	; (8003518 <prvSampleTimeNow+0x3c>)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800350c:	68fb      	ldr	r3, [r7, #12]
    }
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000364 	.word	0x20000364

0800351c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	d812      	bhi.n	8003568 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	1ad2      	subs	r2, r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	429a      	cmp	r2, r3
 800354e:	d302      	bcc.n	8003556 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003550:	2301      	movs	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e01b      	b.n	800358e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003556:	4b10      	ldr	r3, [pc, #64]	; (8003598 <prvInsertTimerInActiveList+0x7c>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3304      	adds	r3, #4
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f7fe faa3 	bl	8001aac <vListInsert>
 8003566:	e012      	b.n	800358e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d206      	bcs.n	800357e <prvInsertTimerInActiveList+0x62>
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d302      	bcc.n	800357e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e007      	b.n	800358e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800357e:	4b07      	ldr	r3, [pc, #28]	; (800359c <prvInsertTimerInActiveList+0x80>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3304      	adds	r3, #4
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f7fe fa8f 	bl	8001aac <vListInsert>
            }
        }

        return xProcessTimerNow;
 800358e:	697b      	ldr	r3, [r7, #20]
    }
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000358 	.word	0x20000358
 800359c:	20000354 	.word	0x20000354

080035a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08c      	sub	sp, #48	; 0x30
 80035a4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80035a6:	e0ae      	b.n	8003706 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f2c0 80aa 	blt.w	8003704 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	3304      	adds	r3, #4
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe faac 	bl	8001b1e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff87 	bl	80034dc <prvSampleTimeNow>
 80035ce:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b09      	cmp	r3, #9
 80035d4:	f200 8097 	bhi.w	8003706 <prvProcessReceivedCommands+0x166>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <prvProcessReceivedCommands+0x40>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003609 	.word	0x08003609
 80035e4:	08003609 	.word	0x08003609
 80035e8:	08003609 	.word	0x08003609
 80035ec:	0800367d 	.word	0x0800367d
 80035f0:	08003691 	.word	0x08003691
 80035f4:	080036db 	.word	0x080036db
 80035f8:	08003609 	.word	0x08003609
 80035fc:	08003609 	.word	0x08003609
 8003600:	0800367d 	.word	0x0800367d
 8003604:	08003691 	.word	0x08003691
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	b2da      	uxtb	r2, r3
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	18d1      	adds	r1, r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003628:	f7ff ff78 	bl	800351c <prvInsertTimerInActiveList>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d069      	beq.n	8003706 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003638:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05e      	beq.n	8003706 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	441a      	add	r2, r3
 8003650:	2300      	movs	r3, #0
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2300      	movs	r3, #0
 8003656:	2100      	movs	r1, #0
 8003658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800365a:	f7ff fe21 	bl	80032a0 <xTimerGenericCommand>
 800365e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d14f      	bne.n	8003706 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	61bb      	str	r3, [r7, #24]
    }
 8003678:	bf00      	nop
 800367a:	e7fe      	b.n	800367a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800368e:	e03a      	b.n	8003706 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	b2da      	uxtb	r2, r3
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	617b      	str	r3, [r7, #20]
    }
 80036c2:	bf00      	nop
 80036c4:	e7fe      	b.n	80036c4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	18d1      	adds	r1, r2, r3
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d4:	f7ff ff22 	bl	800351c <prvInsertTimerInActiveList>
                        break;
 80036d8:	e015      	b.n	8003706 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d103      	bne.n	80036f0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80036e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ea:	f000 fbe7 	bl	8003ebc <vPortFree>
 80036ee:	e00a      	b.n	8003706 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003702:	e000      	b.n	8003706 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003704:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <prvProcessReceivedCommands+0x188>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f107 0108 	add.w	r1, r7, #8
 800370e:	2200      	movs	r2, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fcc1 	bl	8002098 <xQueueReceive>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	f47f af45 	bne.w	80035a8 <prvProcessReceivedCommands+0x8>
        }
    }
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	3728      	adds	r7, #40	; 0x28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	2000035c 	.word	0x2000035c

0800372c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003732:	e048      	b.n	80037c6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <prvSwitchTimerLists+0xc0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800373e:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <prvSwitchTimerLists+0xc0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3304      	adds	r3, #4
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe f9e6 	bl	8001b1e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d02e      	beq.n	80037c6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	429a      	cmp	r2, r3
 8003778:	d90e      	bls.n	8003798 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003786:	4b19      	ldr	r3, [pc, #100]	; (80037ec <prvSwitchTimerLists+0xc0>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3304      	adds	r3, #4
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f7fe f98b 	bl	8001aac <vListInsert>
 8003796:	e016      	b.n	80037c6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003798:	2300      	movs	r3, #0
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	2100      	movs	r1, #0
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff fd7c 	bl	80032a0 <xTimerGenericCommand>
 80037a8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	603b      	str	r3, [r7, #0]
    }
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <prvSwitchTimerLists+0xc0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1b1      	bne.n	8003734 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <prvSwitchTimerLists+0xc0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80037d6:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <prvSwitchTimerLists+0xc4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a04      	ldr	r2, [pc, #16]	; (80037ec <prvSwitchTimerLists+0xc0>)
 80037dc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <prvSwitchTimerLists+0xc4>)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	6013      	str	r3, [r2, #0]
    }
 80037e4:	bf00      	nop
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000354 	.word	0x20000354
 80037f0:	20000358 	.word	0x20000358

080037f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80037f8:	f000 f95e 	bl	8003ab8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <prvCheckForValidListAndQueue+0x54>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d11d      	bne.n	8003840 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003804:	4811      	ldr	r0, [pc, #68]	; (800384c <prvCheckForValidListAndQueue+0x58>)
 8003806:	f7fe f900 	bl	8001a0a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800380a:	4811      	ldr	r0, [pc, #68]	; (8003850 <prvCheckForValidListAndQueue+0x5c>)
 800380c:	f7fe f8fd 	bl	8001a0a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <prvCheckForValidListAndQueue+0x60>)
 8003812:	4a0e      	ldr	r2, [pc, #56]	; (800384c <prvCheckForValidListAndQueue+0x58>)
 8003814:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <prvCheckForValidListAndQueue+0x64>)
 8003818:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <prvCheckForValidListAndQueue+0x5c>)
 800381a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800381c:	2200      	movs	r2, #0
 800381e:	210c      	movs	r1, #12
 8003820:	200a      	movs	r0, #10
 8003822:	f7fe fa0f 	bl	8001c44 <xQueueGenericCreate>
 8003826:	4603      	mov	r3, r0
 8003828:	4a07      	ldr	r2, [pc, #28]	; (8003848 <prvCheckForValidListAndQueue+0x54>)
 800382a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <prvCheckForValidListAndQueue+0x54>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <prvCheckForValidListAndQueue+0x54>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4908      	ldr	r1, [pc, #32]	; (800385c <prvCheckForValidListAndQueue+0x68>)
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe fe1c 	bl	8002478 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003840:	f000 f96a 	bl	8003b18 <vPortExitCritical>
    }
 8003844:	bf00      	nop
 8003846:	bd80      	pop	{r7, pc}
 8003848:	2000035c 	.word	0x2000035c
 800384c:	2000032c 	.word	0x2000032c
 8003850:	20000340 	.word	0x20000340
 8003854:	20000354 	.word	0x20000354
 8003858:	20000358 	.word	0x20000358
 800385c:	08008b98 	.word	0x08008b98

08003860 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3b04      	subs	r3, #4
 8003870:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003878:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3b04      	subs	r3, #4
 800387e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b04      	subs	r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003890:	4a0c      	ldr	r2, [pc, #48]	; (80038c4 <pxPortInitialiseStack+0x64>)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b14      	subs	r3, #20
 800389a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3b04      	subs	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f06f 0202 	mvn.w	r2, #2
 80038ae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3b20      	subs	r3, #32
 80038b4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80038b6:	68fb      	ldr	r3, [r7, #12]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	080038c9 	.word	0x080038c9

080038c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <prvTaskExitError+0x54>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038da:	d00a      	beq.n	80038f2 <prvTaskExitError+0x2a>
        __asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60fb      	str	r3, [r7, #12]
    }
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <prvTaskExitError+0x28>
        __asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	60bb      	str	r3, [r7, #8]
    }
 8003904:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003906:	bf00      	nop
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0fc      	beq.n	8003908 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	20000018 	.word	0x20000018

08003920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <pxCurrentTCBConst2>)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	6808      	ldr	r0, [r1, #0]
 8003926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392a:	f380 8809 	msr	PSP, r0
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f380 8811 	msr	BASEPRI, r0
 800393a:	4770      	bx	lr
 800393c:	f3af 8000 	nop.w

08003940 <pxCurrentTCBConst2>:
 8003940:	20000228 	.word	0x20000228
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop

08003948 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003948:	4808      	ldr	r0, [pc, #32]	; (800396c <prvPortStartFirstTask+0x24>)
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	6800      	ldr	r0, [r0, #0]
 800394e:	f380 8808 	msr	MSP, r0
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f380 8814 	msr	CONTROL, r0
 800395a:	b662      	cpsie	i
 800395c:	b661      	cpsie	f
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	df00      	svc	0
 8003968:	bf00      	nop
 800396a:	0000      	.short	0x0000
 800396c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop

08003974 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800397a:	4b46      	ldr	r3, [pc, #280]	; (8003a94 <xPortStartScheduler+0x120>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a46      	ldr	r2, [pc, #280]	; (8003a98 <xPortStartScheduler+0x124>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10a      	bne.n	800399a <xPortStartScheduler+0x26>
        __asm volatile
 8003984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	613b      	str	r3, [r7, #16]
    }
 8003996:	bf00      	nop
 8003998:	e7fe      	b.n	8003998 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800399a:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <xPortStartScheduler+0x120>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3f      	ldr	r2, [pc, #252]	; (8003a9c <xPortStartScheduler+0x128>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d10a      	bne.n	80039ba <xPortStartScheduler+0x46>
        __asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	60fb      	str	r3, [r7, #12]
    }
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039ba:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <xPortStartScheduler+0x12c>)
 80039bc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <xPortStartScheduler+0x130>)
 80039e0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <xPortStartScheduler+0x134>)
 80039e4:	2207      	movs	r2, #7
 80039e6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039e8:	e009      	b.n	80039fe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80039ea:	4b2f      	ldr	r3, [pc, #188]	; (8003aa8 <xPortStartScheduler+0x134>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	4a2d      	ldr	r2, [pc, #180]	; (8003aa8 <xPortStartScheduler+0x134>)
 80039f2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b80      	cmp	r3, #128	; 0x80
 8003a08:	d0ef      	beq.n	80039ea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a0a:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <xPortStartScheduler+0x134>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f1c3 0307 	rsb	r3, r3, #7
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d00a      	beq.n	8003a2c <xPortStartScheduler+0xb8>
        __asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60bb      	str	r3, [r7, #8]
    }
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a2c:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <xPortStartScheduler+0x134>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	4a1d      	ldr	r2, [pc, #116]	; (8003aa8 <xPortStartScheduler+0x134>)
 8003a34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <xPortStartScheduler+0x134>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a3e:	4a1a      	ldr	r2, [pc, #104]	; (8003aa8 <xPortStartScheduler+0x134>)
 8003a40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003a4a:	4b18      	ldr	r3, [pc, #96]	; (8003aac <xPortStartScheduler+0x138>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a17      	ldr	r2, [pc, #92]	; (8003aac <xPortStartScheduler+0x138>)
 8003a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <xPortStartScheduler+0x138>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a14      	ldr	r2, [pc, #80]	; (8003aac <xPortStartScheduler+0x138>)
 8003a5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003a62:	f000 f8db 	bl	8003c1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <xPortStartScheduler+0x13c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003a6c:	f000 f8fa 	bl	8003c64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <xPortStartScheduler+0x140>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0f      	ldr	r2, [pc, #60]	; (8003ab4 <xPortStartScheduler+0x140>)
 8003a76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003a7c:	f7ff ff64 	bl	8003948 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003a80:	f7ff f896 	bl	8002bb0 <vTaskSwitchContext>
    prvTaskExitError();
 8003a84:	f7ff ff20 	bl	80038c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00
 8003a98:	410fc271 	.word	0x410fc271
 8003a9c:	410fc270 	.word	0x410fc270
 8003aa0:	e000e400 	.word	0xe000e400
 8003aa4:	20000368 	.word	0x20000368
 8003aa8:	2000036c 	.word	0x2000036c
 8003aac:	e000ed20 	.word	0xe000ed20
 8003ab0:	20000018 	.word	0x20000018
 8003ab4:	e000ef34 	.word	0xe000ef34

08003ab8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
        __asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	607b      	str	r3, [r7, #4]
    }
 8003ad0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <vPortEnterCritical+0x58>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <vPortEnterCritical+0x58>)
 8003ada:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <vPortEnterCritical+0x58>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d10f      	bne.n	8003b04 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <vPortEnterCritical+0x5c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <vPortEnterCritical+0x4c>
        __asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	603b      	str	r3, [r7, #0]
    }
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <vPortEnterCritical+0x4a>
    }
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	20000018 	.word	0x20000018
 8003b14:	e000ed04 	.word	0xe000ed04

08003b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003b1e:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <vPortExitCritical+0x50>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <vPortExitCritical+0x24>
        __asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	607b      	str	r3, [r7, #4]
    }
 8003b38:	bf00      	nop
 8003b3a:	e7fe      	b.n	8003b3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <vPortExitCritical+0x50>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <vPortExitCritical+0x50>)
 8003b44:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <vPortExitCritical+0x50>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d105      	bne.n	8003b5a <vPortExitCritical+0x42>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f383 8811 	msr	BASEPRI, r3
    }
 8003b58:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000018 	.word	0x20000018
 8003b6c:	00000000 	.word	0x00000000

08003b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003b70:	f3ef 8009 	mrs	r0, PSP
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <pxCurrentTCBConst>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	f01e 0f10 	tst.w	lr, #16
 8003b80:	bf08      	it	eq
 8003b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	6010      	str	r0, [r2, #0]
 8003b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b94:	f380 8811 	msr	BASEPRI, r0
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f7ff f806 	bl	8002bb0 <vTaskSwitchContext>
 8003ba4:	f04f 0000 	mov.w	r0, #0
 8003ba8:	f380 8811 	msr	BASEPRI, r0
 8003bac:	bc09      	pop	{r0, r3}
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	6808      	ldr	r0, [r1, #0]
 8003bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb6:	f01e 0f10 	tst.w	lr, #16
 8003bba:	bf08      	it	eq
 8003bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bc0:	f380 8809 	msr	PSP, r0
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	f3af 8000 	nop.w

08003bd0 <pxCurrentTCBConst>:
 8003bd0:	20000228 	.word	0x20000228
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop

08003bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
        __asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
    }
 8003bf0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003bf2:	f7fe ff25 	bl	8002a40 <xTaskIncrementTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <SysTick_Handler+0x40>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f383 8811 	msr	BASEPRI, r3
    }
 8003c0e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <vPortSetupTimerInterrupt+0x34>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <vPortSetupTimerInterrupt+0x38>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <vPortSetupTimerInterrupt+0x3c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <vPortSetupTimerInterrupt+0x40>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <vPortSetupTimerInterrupt+0x44>)
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c3e:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <vPortSetupTimerInterrupt+0x34>)
 8003c40:	2207      	movs	r2, #7
 8003c42:	601a      	str	r2, [r3, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000e010 	.word	0xe000e010
 8003c54:	e000e018 	.word	0xe000e018
 8003c58:	20000030 	.word	0x20000030
 8003c5c:	10624dd3 	.word	0x10624dd3
 8003c60:	e000e014 	.word	0xe000e014

08003c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003c64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c74 <vPortEnableVFP+0x10>
 8003c68:	6801      	ldr	r1, [r0, #0]
 8003c6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c6e:	6001      	str	r1, [r0, #0]
 8003c70:	4770      	bx	lr
 8003c72:	0000      	.short	0x0000
 8003c74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop

08003c7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003c82:	f3ef 8305 	mrs	r3, IPSR
 8003c86:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	d914      	bls.n	8003cb8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <vPortValidateInterruptPriority+0x70>)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c98:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <vPortValidateInterruptPriority+0x74>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	7afa      	ldrb	r2, [r7, #11]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d20a      	bcs.n	8003cb8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	607b      	str	r3, [r7, #4]
    }
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <vPortValidateInterruptPriority+0x78>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <vPortValidateInterruptPriority+0x7c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d90a      	bls.n	8003cde <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	603b      	str	r3, [r7, #0]
    }
 8003cda:	bf00      	nop
 8003cdc:	e7fe      	b.n	8003cdc <vPortValidateInterruptPriority+0x60>
    }
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	e000e3f0 	.word	0xe000e3f0
 8003cf0:	20000368 	.word	0x20000368
 8003cf4:	e000ed0c 	.word	0xe000ed0c
 8003cf8:	2000036c 	.word	0x2000036c

08003cfc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003d08:	f7fe fde0 	bl	80028cc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003d0c:	4b65      	ldr	r3, [pc, #404]	; (8003ea4 <pvPortMalloc+0x1a8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003d14:	f000 f934 	bl	8003f80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d18:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <pvPortMalloc+0x1ac>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f040 80a7 	bne.w	8003e74 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d02d      	beq.n	8003d88 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d227      	bcs.n	8003d88 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003d38:	2208      	movs	r2, #8
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d021      	beq.n	8003d8e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f023 0307 	bic.w	r3, r3, #7
 8003d50:	3308      	adds	r3, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d214      	bcs.n	8003d82 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f023 0307 	bic.w	r3, r3, #7
 8003d5e:	3308      	adds	r3, #8
 8003d60:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d010      	beq.n	8003d8e <pvPortMalloc+0x92>
        __asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	617b      	str	r3, [r7, #20]
    }
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d86:	e002      	b.n	8003d8e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	607b      	str	r3, [r7, #4]
 8003d8c:	e000      	b.n	8003d90 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d8e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d06e      	beq.n	8003e74 <pvPortMalloc+0x178>
 8003d96:	4b45      	ldr	r3, [pc, #276]	; (8003eac <pvPortMalloc+0x1b0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d869      	bhi.n	8003e74 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003da0:	4b43      	ldr	r3, [pc, #268]	; (8003eb0 <pvPortMalloc+0x1b4>)
 8003da2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003da4:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <pvPortMalloc+0x1b4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003daa:	e004      	b.n	8003db6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d903      	bls.n	8003dc8 <pvPortMalloc+0xcc>
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f1      	bne.n	8003dac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <pvPortMalloc+0x1a8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d050      	beq.n	8003e74 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	4413      	add	r3, r2
 8003dda:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	1ad2      	subs	r2, r2, r3
 8003dec:	2308      	movs	r3, #8
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d91f      	bls.n	8003e34 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <pvPortMalloc+0x120>
        __asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	613b      	str	r3, [r7, #16]
    }
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	1ad2      	subs	r2, r2, r3
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e2e:	69b8      	ldr	r0, [r7, #24]
 8003e30:	f000 f908 	bl	8004044 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <pvPortMalloc+0x1b0>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <pvPortMalloc+0x1b0>)
 8003e40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <pvPortMalloc+0x1b0>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <pvPortMalloc+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d203      	bcs.n	8003e56 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e4e:	4b17      	ldr	r3, [pc, #92]	; (8003eac <pvPortMalloc+0x1b0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <pvPortMalloc+0x1b8>)
 8003e54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <pvPortMalloc+0x1ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003e6a:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <pvPortMalloc+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	4a11      	ldr	r2, [pc, #68]	; (8003eb8 <pvPortMalloc+0x1bc>)
 8003e72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003e74:	f7fe fd38 	bl	80028e8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <pvPortMalloc+0x19c>
        __asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	60fb      	str	r3, [r7, #12]
    }
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <pvPortMalloc+0x19a>
    return pvReturn;
 8003e98:	69fb      	ldr	r3, [r7, #28]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3728      	adds	r7, #40	; 0x28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20012f78 	.word	0x20012f78
 8003ea8:	20012f8c 	.word	0x20012f8c
 8003eac:	20012f7c 	.word	0x20012f7c
 8003eb0:	20012f70 	.word	0x20012f70
 8003eb4:	20012f80 	.word	0x20012f80
 8003eb8:	20012f84 	.word	0x20012f84

08003ebc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d04d      	beq.n	8003f6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003ece:	2308      	movs	r3, #8
 8003ed0:	425b      	negs	r3, r3
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <vPortFree+0xb8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10a      	bne.n	8003f00 <vPortFree+0x44>
        __asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	60fb      	str	r3, [r7, #12]
    }
 8003efc:	bf00      	nop
 8003efe:	e7fe      	b.n	8003efe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <vPortFree+0x62>
        __asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	60bb      	str	r3, [r7, #8]
    }
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <vPortFree+0xb8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01e      	beq.n	8003f6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d11a      	bne.n	8003f6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <vPortFree+0xb8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003f44:	f7fe fcc2 	bl	80028cc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <vPortFree+0xbc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4413      	add	r3, r2
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <vPortFree+0xbc>)
 8003f54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f56:	6938      	ldr	r0, [r7, #16]
 8003f58:	f000 f874 	bl	8004044 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <vPortFree+0xc0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	4a06      	ldr	r2, [pc, #24]	; (8003f7c <vPortFree+0xc0>)
 8003f64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003f66:	f7fe fcbf 	bl	80028e8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003f6a:	bf00      	nop
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20012f8c 	.word	0x20012f8c
 8003f78:	20012f7c 	.word	0x20012f7c
 8003f7c:	20012f88 	.word	0x20012f88

08003f80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003f8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <prvHeapInit+0xac>)
 8003f8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00c      	beq.n	8003fb4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3307      	adds	r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0307 	bic.w	r3, r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	4a1f      	ldr	r2, [pc, #124]	; (800402c <prvHeapInit+0xac>)
 8003fb0:	4413      	add	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fb8:	4a1d      	ldr	r2, [pc, #116]	; (8004030 <prvHeapInit+0xb0>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <prvHeapInit+0xb0>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003fcc:	2208      	movs	r2, #8
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0307 	bic.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a15      	ldr	r2, [pc, #84]	; (8004034 <prvHeapInit+0xb4>)
 8003fe0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <prvHeapInit+0xb4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <prvHeapInit+0xb4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <prvHeapInit+0xb4>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <prvHeapInit+0xb8>)
 800400e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a09      	ldr	r2, [pc, #36]	; (800403c <prvHeapInit+0xbc>)
 8004016:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <prvHeapInit+0xc0>)
 800401a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800401e:	601a      	str	r2, [r3, #0]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	20000370 	.word	0x20000370
 8004030:	20012f70 	.word	0x20012f70
 8004034:	20012f78 	.word	0x20012f78
 8004038:	20012f80 	.word	0x20012f80
 800403c:	20012f7c 	.word	0x20012f7c
 8004040:	20012f8c 	.word	0x20012f8c

08004044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800404c:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <prvInsertBlockIntoFreeList+0xac>)
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e002      	b.n	8004058 <prvInsertBlockIntoFreeList+0x14>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	429a      	cmp	r2, r3
 8004060:	d8f7      	bhi.n	8004052 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	4413      	add	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d108      	bne.n	8004086 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	441a      	add	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	441a      	add	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d118      	bne.n	80040cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <prvInsertBlockIntoFreeList+0xb0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d00d      	beq.n	80040c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	441a      	add	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e008      	b.n	80040d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <prvInsertBlockIntoFreeList+0xb0>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e003      	b.n	80040d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d002      	beq.n	80040e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20012f70 	.word	0x20012f70
 80040f4:	20012f78 	.word	0x20012f78

080040f8 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d161      	bne.n	80041ce <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a33      	ldr	r2, [pc, #204]	; (80041dc <GPIO_PeriClockControl+0xe4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d106      	bne.n	8004120 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8004112:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	4a32      	ldr	r2, [pc, #200]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 800411e:	e056      	b.n	80041ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a30      	ldr	r2, [pc, #192]	; (80041e4 <GPIO_PeriClockControl+0xec>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d106      	bne.n	8004136 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 800412e:	f043 0302 	orr.w	r3, r3, #2
 8004132:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004134:	e04b      	b.n	80041ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <GPIO_PeriClockControl+0xf0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d106      	bne.n	800414c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800413e:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	4a27      	ldr	r2, [pc, #156]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 8004144:	f043 0304 	orr.w	r3, r3, #4
 8004148:	6313      	str	r3, [r2, #48]	; 0x30
}
 800414a:	e040      	b.n	80041ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a27      	ldr	r2, [pc, #156]	; (80041ec <GPIO_PeriClockControl+0xf4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d106      	bne.n	8004162 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8004154:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	4a21      	ldr	r2, [pc, #132]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 800415a:	f043 0308 	orr.w	r3, r3, #8
 800415e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004160:	e035      	b.n	80041ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <GPIO_PeriClockControl+0xf8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d106      	bne.n	8004178 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800416a:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 8004170:	f043 0310 	orr.w	r3, r3, #16
 8004174:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004176:	e02a      	b.n	80041ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <GPIO_PeriClockControl+0xfc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d106      	bne.n	800418e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8004180:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 8004186:	f043 0320 	orr.w	r3, r3, #32
 800418a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800418c:	e01f      	b.n	80041ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a19      	ldr	r2, [pc, #100]	; (80041f8 <GPIO_PeriClockControl+0x100>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d106      	bne.n	80041a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8004196:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 800419c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80041a2:	e014      	b.n	80041ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a15      	ldr	r2, [pc, #84]	; (80041fc <GPIO_PeriClockControl+0x104>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d106      	bne.n	80041ba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 80041b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80041b8:	e009      	b.n	80041ce <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a10      	ldr	r2, [pc, #64]	; (8004200 <GPIO_PeriClockControl+0x108>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d105      	bne.n	80041ce <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	4a06      	ldr	r2, [pc, #24]	; (80041e0 <GPIO_PeriClockControl+0xe8>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40020000 	.word	0x40020000
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40021400 	.word	0x40021400
 80041f8:	40021800 	.word	0x40021800
 80041fc:	40021c00 	.word	0x40021c00
 8004200:	40022000 	.word	0x40022000

08004204 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2101      	movs	r1, #1
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff ff6e 	bl	80040f8 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	795b      	ldrb	r3, [r3, #5]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d820      	bhi.n	8004266 <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	795b      	ldrb	r3, [r3, #5]
 8004228:	461a      	mov	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	791b      	ldrb	r3, [r3, #4]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	2103      	movs	r1, #3
 8004244:	fa01 f303 	lsl.w	r3, r1, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	4619      	mov	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	400a      	ands	r2, r1
 8004252:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	430a      	orrs	r2, r1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e0cb      	b.n	80043fe <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	795b      	ldrb	r3, [r3, #5]
 800426a:	2b04      	cmp	r3, #4
 800426c:	d117      	bne.n	800429e <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800426e:	4b4b      	ldr	r3, [pc, #300]	; (800439c <GPIO_Init+0x198>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	7912      	ldrb	r2, [r2, #4]
 8004276:	4611      	mov	r1, r2
 8004278:	2201      	movs	r2, #1
 800427a:	408a      	lsls	r2, r1
 800427c:	4611      	mov	r1, r2
 800427e:	4a47      	ldr	r2, [pc, #284]	; (800439c <GPIO_Init+0x198>)
 8004280:	430b      	orrs	r3, r1
 8004282:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004284:	4b45      	ldr	r3, [pc, #276]	; (800439c <GPIO_Init+0x198>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	7912      	ldrb	r2, [r2, #4]
 800428c:	4611      	mov	r1, r2
 800428e:	2201      	movs	r2, #1
 8004290:	408a      	lsls	r2, r1
 8004292:	43d2      	mvns	r2, r2
 8004294:	4611      	mov	r1, r2
 8004296:	4a41      	ldr	r2, [pc, #260]	; (800439c <GPIO_Init+0x198>)
 8004298:	400b      	ands	r3, r1
 800429a:	6093      	str	r3, [r2, #8]
 800429c:	e035      	b.n	800430a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	795b      	ldrb	r3, [r3, #5]
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d117      	bne.n	80042d6 <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80042a6:	4b3d      	ldr	r3, [pc, #244]	; (800439c <GPIO_Init+0x198>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	7912      	ldrb	r2, [r2, #4]
 80042ae:	4611      	mov	r1, r2
 80042b0:	2201      	movs	r2, #1
 80042b2:	408a      	lsls	r2, r1
 80042b4:	4611      	mov	r1, r2
 80042b6:	4a39      	ldr	r2, [pc, #228]	; (800439c <GPIO_Init+0x198>)
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80042bc:	4b37      	ldr	r3, [pc, #220]	; (800439c <GPIO_Init+0x198>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	7912      	ldrb	r2, [r2, #4]
 80042c4:	4611      	mov	r1, r2
 80042c6:	2201      	movs	r2, #1
 80042c8:	408a      	lsls	r2, r1
 80042ca:	43d2      	mvns	r2, r2
 80042cc:	4611      	mov	r1, r2
 80042ce:	4a33      	ldr	r2, [pc, #204]	; (800439c <GPIO_Init+0x198>)
 80042d0:	400b      	ands	r3, r1
 80042d2:	60d3      	str	r3, [r2, #12]
 80042d4:	e019      	b.n	800430a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	795b      	ldrb	r3, [r3, #5]
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d115      	bne.n	800430a <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <GPIO_Init+0x198>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	7912      	ldrb	r2, [r2, #4]
 80042e6:	4611      	mov	r1, r2
 80042e8:	2201      	movs	r2, #1
 80042ea:	408a      	lsls	r2, r1
 80042ec:	4611      	mov	r1, r2
 80042ee:	4a2b      	ldr	r2, [pc, #172]	; (800439c <GPIO_Init+0x198>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80042f4:	4b29      	ldr	r3, [pc, #164]	; (800439c <GPIO_Init+0x198>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	7912      	ldrb	r2, [r2, #4]
 80042fc:	4611      	mov	r1, r2
 80042fe:	2201      	movs	r2, #1
 8004300:	408a      	lsls	r2, r1
 8004302:	4611      	mov	r1, r2
 8004304:	4a25      	ldr	r2, [pc, #148]	; (800439c <GPIO_Init+0x198>)
 8004306:	430b      	orrs	r3, r1
 8004308:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	791b      	ldrb	r3, [r3, #4]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	791b      	ldrb	r3, [r3, #4]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1f      	ldr	r2, [pc, #124]	; (80043a0 <GPIO_Init+0x19c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d04e      	beq.n	80043c4 <GPIO_Init+0x1c0>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1e      	ldr	r2, [pc, #120]	; (80043a4 <GPIO_Init+0x1a0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d032      	beq.n	8004396 <GPIO_Init+0x192>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <GPIO_Init+0x1a4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d02b      	beq.n	8004392 <GPIO_Init+0x18e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <GPIO_Init+0x1a8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d024      	beq.n	800438e <GPIO_Init+0x18a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <GPIO_Init+0x1ac>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01d      	beq.n	800438a <GPIO_Init+0x186>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <GPIO_Init+0x1b0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d016      	beq.n	8004386 <GPIO_Init+0x182>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a16      	ldr	r2, [pc, #88]	; (80043b8 <GPIO_Init+0x1b4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00f      	beq.n	8004382 <GPIO_Init+0x17e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a15      	ldr	r2, [pc, #84]	; (80043bc <GPIO_Init+0x1b8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d008      	beq.n	800437e <GPIO_Init+0x17a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <GPIO_Init+0x1bc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <GPIO_Init+0x176>
 8004376:	2308      	movs	r3, #8
 8004378:	e025      	b.n	80043c6 <GPIO_Init+0x1c2>
 800437a:	2300      	movs	r3, #0
 800437c:	e023      	b.n	80043c6 <GPIO_Init+0x1c2>
 800437e:	2307      	movs	r3, #7
 8004380:	e021      	b.n	80043c6 <GPIO_Init+0x1c2>
 8004382:	2306      	movs	r3, #6
 8004384:	e01f      	b.n	80043c6 <GPIO_Init+0x1c2>
 8004386:	2305      	movs	r3, #5
 8004388:	e01d      	b.n	80043c6 <GPIO_Init+0x1c2>
 800438a:	2304      	movs	r3, #4
 800438c:	e01b      	b.n	80043c6 <GPIO_Init+0x1c2>
 800438e:	2303      	movs	r3, #3
 8004390:	e019      	b.n	80043c6 <GPIO_Init+0x1c2>
 8004392:	2302      	movs	r3, #2
 8004394:	e017      	b.n	80043c6 <GPIO_Init+0x1c2>
 8004396:	2301      	movs	r3, #1
 8004398:	e015      	b.n	80043c6 <GPIO_Init+0x1c2>
 800439a:	bf00      	nop
 800439c:	40013c00 	.word	0x40013c00
 80043a0:	40020000 	.word	0x40020000
 80043a4:	40020400 	.word	0x40020400
 80043a8:	40020800 	.word	0x40020800
 80043ac:	40020c00 	.word	0x40020c00
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40021400 	.word	0x40021400
 80043b8:	40021800 	.word	0x40021800
 80043bc:	40021c00 	.word	0x40021c00
 80043c0:	40022000 	.word	0x40022000
 80043c4:	2300      	movs	r3, #0
 80043c6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80043c8:	4b59      	ldr	r3, [pc, #356]	; (8004530 <GPIO_Init+0x32c>)
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	4a58      	ldr	r2, [pc, #352]	; (8004530 <GPIO_Init+0x32c>)
 80043ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80043d4:	7c7a      	ldrb	r2, [r7, #17]
 80043d6:	7cbb      	ldrb	r3, [r7, #18]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	fa02 f103 	lsl.w	r1, r2, r3
 80043de:	4a55      	ldr	r2, [pc, #340]	; (8004534 <GPIO_Init+0x330>)
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	3302      	adds	r3, #2
 80043e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80043e8:	4b53      	ldr	r3, [pc, #332]	; (8004538 <GPIO_Init+0x334>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	7912      	ldrb	r2, [r2, #4]
 80043f0:	4611      	mov	r1, r2
 80043f2:	2201      	movs	r2, #1
 80043f4:	408a      	lsls	r2, r1
 80043f6:	4611      	mov	r1, r2
 80043f8:	4a4f      	ldr	r2, [pc, #316]	; (8004538 <GPIO_Init+0x334>)
 80043fa:	430b      	orrs	r3, r1
 80043fc:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	799b      	ldrb	r3, [r3, #6]
 8004402:	461a      	mov	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	791b      	ldrb	r3, [r3, #4]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	791b      	ldrb	r3, [r3, #4]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	2103      	movs	r1, #3
 800441e:	fa01 f303 	lsl.w	r3, r1, r3
 8004422:	43db      	mvns	r3, r3
 8004424:	4619      	mov	r1, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	400a      	ands	r2, r1
 800442c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6899      	ldr	r1, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	430a      	orrs	r2, r1
 800443c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	79db      	ldrb	r3, [r3, #7]
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	791b      	ldrb	r3, [r3, #4]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	791b      	ldrb	r3, [r3, #4]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	2103      	movs	r1, #3
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	4619      	mov	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	400a      	ands	r2, r1
 800446c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68d9      	ldr	r1, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	430a      	orrs	r2, r1
 800447c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7a1b      	ldrb	r3, [r3, #8]
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	791b      	ldrb	r3, [r3, #4]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	791b      	ldrb	r3, [r3, #4]
 8004498:	4619      	mov	r1, r3
 800449a:	2301      	movs	r3, #1
 800449c:	408b      	lsls	r3, r1
 800449e:	43db      	mvns	r3, r3
 80044a0:	4619      	mov	r1, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	400a      	ands	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6859      	ldr	r1, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	795b      	ldrb	r3, [r3, #5]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d131      	bne.n	8004526 <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	791b      	ldrb	r3, [r3, #4]
 80044c6:	08db      	lsrs	r3, r3, #3
 80044c8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	791b      	ldrb	r3, [r3, #4]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	7c3a      	ldrb	r2, [r7, #16]
 80044da:	3208      	adds	r2, #8
 80044dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	220f      	movs	r2, #15
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	4618      	mov	r0, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	7c3a      	ldrb	r2, [r7, #16]
 80044f4:	4001      	ands	r1, r0
 80044f6:	3208      	adds	r2, #8
 80044f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	7c3a      	ldrb	r2, [r7, #16]
 8004502:	3208      	adds	r2, #8
 8004504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	7a5b      	ldrb	r3, [r3, #9]
 800450c:	461a      	mov	r2, r3
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	4618      	mov	r0, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	7c3a      	ldrb	r2, [r7, #16]
 800451e:	4301      	orrs	r1, r0
 8004520:	3208      	adds	r2, #8
 8004522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8004526:	bf00      	nop
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	40013800 	.word	0x40013800
 8004538:	40013c00 	.word	0x40013c00

0800453c <GPIO_ReadFromInputPin>:
 *
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]

   return value;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
 8004574:	4613      	mov	r3, r2
 8004576:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8004578:	78bb      	ldrb	r3, [r7, #2]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d109      	bne.n	8004592 <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	2101      	movs	r1, #1
 8004586:	fa01 f202 	lsl.w	r2, r1, r2
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 8004590:	e009      	b.n	80045a6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	2101      	movs	r1, #1
 800459a:	fa01 f202 	lsl.w	r2, r1, r2
 800459e:	43d2      	mvns	r2, r2
 80045a0:	401a      	ands	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	615a      	str	r2, [r3, #20]
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <GPIO_IRQInterruptConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi) {
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	460a      	mov	r2, r1
 80045be:	71fb      	strb	r3, [r7, #7]
 80045c0:	4613      	mov	r3, r2
 80045c2:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE) {
 80045c4:	79bb      	ldrb	r3, [r7, #6]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d133      	bne.n	8004632 <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31)
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	2b1f      	cmp	r3, #31
 80045ce:	d80a      	bhi.n	80045e6 <GPIO_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80045d0:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <GPIO_IRQInterruptConfig+0xf4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	79fa      	ldrb	r2, [r7, #7]
 80045d6:	2101      	movs	r1, #1
 80045d8:	fa01 f202 	lsl.w	r2, r1, r2
 80045dc:	4611      	mov	r1, r2
 80045de:	4a32      	ldr	r2, [pc, #200]	; (80046a8 <GPIO_IRQInterruptConfig+0xf4>)
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6013      	str	r3, [r2, #0]

		else if(IRQNumber >= 64 && IRQNumber < 96 )
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
	}
}
 80045e4:	e059      	b.n	800469a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	2b1f      	cmp	r3, #31
 80045ea:	d90f      	bls.n	800460c <GPIO_IRQInterruptConfig+0x58>
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	2b3f      	cmp	r3, #63	; 0x3f
 80045f0:	d80c      	bhi.n	800460c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 80045f2:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <GPIO_IRQInterruptConfig+0xf8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	79fa      	ldrb	r2, [r7, #7]
 80045f8:	f002 021f 	and.w	r2, r2, #31
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004602:	4611      	mov	r1, r2
 8004604:	4a29      	ldr	r2, [pc, #164]	; (80046ac <GPIO_IRQInterruptConfig+0xf8>)
 8004606:	430b      	orrs	r3, r1
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e046      	b.n	800469a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	2b3f      	cmp	r3, #63	; 0x3f
 8004610:	d943      	bls.n	800469a <GPIO_IRQInterruptConfig+0xe6>
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	2b5f      	cmp	r3, #95	; 0x5f
 8004616:	d840      	bhi.n	800469a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8004618:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <GPIO_IRQInterruptConfig+0xfc>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	79fa      	ldrb	r2, [r7, #7]
 800461e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004622:	2101      	movs	r1, #1
 8004624:	fa01 f202 	lsl.w	r2, r1, r2
 8004628:	4611      	mov	r1, r2
 800462a:	4a21      	ldr	r2, [pc, #132]	; (80046b0 <GPIO_IRQInterruptConfig+0xfc>)
 800462c:	430b      	orrs	r3, r1
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	e033      	b.n	800469a <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	2b1f      	cmp	r3, #31
 8004636:	d80a      	bhi.n	800464e <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8004638:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <GPIO_IRQInterruptConfig+0x100>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	79fa      	ldrb	r2, [r7, #7]
 800463e:	2101      	movs	r1, #1
 8004640:	fa01 f202 	lsl.w	r2, r1, r2
 8004644:	4611      	mov	r1, r2
 8004646:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <GPIO_IRQInterruptConfig+0x100>)
 8004648:	430b      	orrs	r3, r1
 800464a:	6013      	str	r3, [r2, #0]
}
 800464c:	e025      	b.n	800469a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 )
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	2b1f      	cmp	r3, #31
 8004652:	d90f      	bls.n	8004674 <GPIO_IRQInterruptConfig+0xc0>
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	2b3f      	cmp	r3, #63	; 0x3f
 8004658:	d80c      	bhi.n	8004674 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800465a:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <GPIO_IRQInterruptConfig+0x104>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	79fa      	ldrb	r2, [r7, #7]
 8004660:	f002 021f 	and.w	r2, r2, #31
 8004664:	2101      	movs	r1, #1
 8004666:	fa01 f202 	lsl.w	r2, r1, r2
 800466a:	4611      	mov	r1, r2
 800466c:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <GPIO_IRQInterruptConfig+0x104>)
 800466e:	430b      	orrs	r3, r1
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e012      	b.n	800469a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	2b3f      	cmp	r3, #63	; 0x3f
 8004678:	d90f      	bls.n	800469a <GPIO_IRQInterruptConfig+0xe6>
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	2b5f      	cmp	r3, #95	; 0x5f
 800467e:	d80c      	bhi.n	800469a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8004680:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <GPIO_IRQInterruptConfig+0x108>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	79fa      	ldrb	r2, [r7, #7]
 8004686:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800468a:	2101      	movs	r1, #1
 800468c:	fa01 f202 	lsl.w	r2, r1, r2
 8004690:	4611      	mov	r1, r2
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <GPIO_IRQInterruptConfig+0x108>)
 8004694:	430b      	orrs	r3, r1
 8004696:	6013      	str	r3, [r2, #0]
}
 8004698:	e7ff      	b.n	800469a <GPIO_IRQInterruptConfig+0xe6>
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	e000e100 	.word	0xe000e100
 80046ac:	e000e104 	.word	0xe000e104
 80046b0:	e000e108 	.word	0xe000e108
 80046b4:	e000e180 	.word	0xe000e180
 80046b8:	e000e184 	.word	0xe000e184
 80046bc:	e000e188 	.word	0xe000e188

080046c0 <GPIO_IRQPriorityConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	6039      	str	r1, [r7, #0]
 80046ca:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	089b      	lsrs	r3, r3, #2
 80046d0:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 80046da:	7bbb      	ldrb	r3, [r7, #14]
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	3304      	adds	r3, #4
 80046e2:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |=  (IRQPriority << shift_amount);
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80046ec:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80046f0:	6819      	ldr	r1, [r3, #0]
 80046f2:	7b7b      	ldrb	r3, [r7, #13]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	409a      	lsls	r2, r3
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004700:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8004704:	430a      	orrs	r2, r1
 8004706:	601a      	str	r2, [r3, #0]

}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	601a      	str	r2, [r3, #0]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	611a      	str	r2, [r3, #16]
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle ) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL)) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01f      	beq.n	80047e2 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX) {
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	7f1b      	ldrb	r3, [r3, #28]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d112      	bne.n	80047d0 <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize  == 1) {
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d11f      	bne.n	80047f2 <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fa9f 	bl	8004cfc <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 80047ce:	e010      	b.n	80047f2 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	60fb      	str	r3, [r7, #12]
}
 80047e0:	e007      	b.n	80047f2 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	60fb      	str	r3, [r7, #12]
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <I2C_GenerateStopCondition>:


void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	601a      	str	r2, [r3, #0]
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <I2C_PeripheralControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi) {
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d106      	bne.n	800483a <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f043 0201 	orr.w	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	else
		pI2Cx->CR1 &= ~(1 << 0);
}
 8004838:	e005      	b.n	8004846 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 0201 	bic.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <I2C_PeriClockControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d11f      	bne.n	80048a6 <I2C_PeriClockControl+0x52>
		if(pI2Cx == I2C1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <I2C_PeriClockControl+0x60>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d106      	bne.n	800487c <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <I2C_PeriClockControl+0x64>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	4a11      	ldr	r2, [pc, #68]	; (80048b8 <I2C_PeriClockControl+0x64>)
 8004874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004878:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C3)
			I2C3_PCLK_EN();
	} else {
		//TODO
	}
}
 800487a:	e014      	b.n	80048a6 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0f      	ldr	r2, [pc, #60]	; (80048bc <I2C_PeriClockControl+0x68>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d106      	bne.n	8004892 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <I2C_PeriClockControl+0x64>)
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	4a0b      	ldr	r2, [pc, #44]	; (80048b8 <I2C_PeriClockControl+0x64>)
 800488a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800488e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004890:	e009      	b.n	80048a6 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <I2C_PeriClockControl+0x6c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d105      	bne.n	80048a6 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <I2C_PeriClockControl+0x64>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	4a06      	ldr	r2, [pc, #24]	; (80048b8 <I2C_PeriClockControl+0x64>)
 80048a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40005400 	.word	0x40005400
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40005800 	.word	0x40005800
 80048c0:	40005c00 	.word	0x40005c00

080048c4 <I2C_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2101      	movs	r1, #1
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff ffbc 	bl	8004854 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	7a5b      	ldrb	r3, [r3, #9]
 80048e0:	029b      	lsls	r3, r3, #10
 80048e2:	461a      	mov	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 80048f6:	f000 fa1d 	bl	8004d34 <RCC_GetPCLK1Value>
 80048fa:	4603      	mov	r3, r0
 80048fc:	4a47      	ldr	r2, [pc, #284]	; (8004a1c <I2C_Init+0x158>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0c9b      	lsrs	r3, r3, #18
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004914:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7a1b      	ldrb	r3, [r3, #8]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	461a      	mov	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800492e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4a36      	ldr	r2, [pc, #216]	; (8004a20 <I2C_Init+0x15c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d80f      	bhi.n	800496a <I2C_Init+0xa6>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800494a:	f000 f9f3 	bl	8004d34 <RCC_GetPCLK1Value>
 800494e:	4602      	mov	r2, r0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 800495c:	897b      	ldrh	r3, [r7, #10]
 800495e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e02d      	b.n	80049c6 <I2C_Init+0x102>
	} else {
		//mode is fast mode
		tempreg |= ( 1 << 15);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004970:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	7a9b      	ldrb	r3, [r3, #10]
 8004976:	039b      	lsls	r3, r3, #14
 8004978:	461a      	mov	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	7a9b      	ldrb	r3, [r3, #10]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004988:	f000 f9d4 	bl	8004d34 <RCC_GetPCLK1Value>
 800498c:	4601      	mov	r1, r0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	4413      	add	r3, r2
 8004998:	fbb1 f3f3 	udiv	r3, r1, r3
 800499c:	817b      	strh	r3, [r7, #10]
 800499e:	e00c      	b.n	80049ba <I2C_Init+0xf6>
		else
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80049a0:	f000 f9c8 	bl	8004d34 <RCC_GetPCLK1Value>
 80049a4:	4601      	mov	r1, r0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009a      	lsls	r2, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b8:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80049ba:	897b      	ldrh	r3, [r7, #10]
 80049bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <I2C_Init+0x15c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d809      	bhi.n	80049ec <I2C_Init+0x128>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 80049d8:	f000 f9ac 	bl	8004d34 <RCC_GetPCLK1Value>
 80049dc:	4603      	mov	r3, r0
 80049de:	4a0f      	ldr	r2, [pc, #60]	; (8004a1c <I2C_Init+0x158>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	0c9b      	lsrs	r3, r3, #18
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	e00d      	b.n	8004a08 <I2C_Init+0x144>
	else
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80049ec:	f000 f9a2 	bl	8004d34 <RCC_GetPCLK1Value>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	0a5b      	lsrs	r3, r3, #9
 80049fc:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <I2C_Init+0x160>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	09db      	lsrs	r3, r3, #7
 8004a04:	3301      	adds	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004a12:	621a      	str	r2, [r3, #32]

}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	431bde83 	.word	0x431bde83
 8004a20:	000186a0 	.word	0x000186a0
 8004a24:	00044b83 	.word	0x00044b83

08004a28 <I2C_GetFlagStatus>:
void I2C_DeInit(I2C_RegDef_t *pI2Cx) {

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName) {
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <I2C_GetFlagStatus+0x1c>
	return FLAG_RESET;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	70fb      	strb	r3, [r7, #3]
	uint32_t err_break;
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fe56 	bl	8004714 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004a6c:	e006      	b.n	8004a7c <I2C_MasterSendData+0x2c>
		if(err_break++ > 10000) break;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	617a      	str	r2, [r7, #20]
 8004a74:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d809      	bhi.n	8004a90 <I2C_MasterSendData+0x40>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2101      	movs	r1, #1
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff ffd0 	bl	8004a28 <I2C_GetFlagStatus>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0ef      	beq.n	8004a6e <I2C_MasterSendData+0x1e>
 8004a8e:	e000      	b.n	8004a92 <I2C_MasterSendData+0x42>
		if(err_break++ > 10000) break;
 8004a90:	bf00      	nop
	}

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fe4a 	bl	8004734 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	err_break = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004aa4:	e006      	b.n	8004ab4 <I2C_MasterSendData+0x64>
		if(err_break++ > 10000) break;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	617a      	str	r2, [r7, #20]
 8004aac:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d809      	bhi.n	8004ac8 <I2C_MasterSendData+0x78>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2102      	movs	r1, #2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ffb4 	bl	8004a28 <I2C_GetFlagStatus>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0ef      	beq.n	8004aa6 <I2C_MasterSendData+0x56>
 8004ac6:	e000      	b.n	8004aca <I2C_MasterSendData+0x7a>
		if(err_break++ > 10000) break;
 8004ac8:	bf00      	nop
	}

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff fe5e 	bl	800478c <I2C_ClearADDRFlag>

	//6. send the data until length becomes 0

	while(Len > 0) {
 8004ad0:	e01f      	b.n	8004b12 <I2C_MasterSendData+0xc2>
		err_break = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { //Wait till TXE is set
 8004ad6:	e006      	b.n	8004ae6 <I2C_MasterSendData+0x96>
			if(err_break++ > 10000) break;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	617a      	str	r2, [r7, #20]
 8004ade:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d809      	bhi.n	8004afa <I2C_MasterSendData+0xaa>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { //Wait till TXE is set
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2180      	movs	r1, #128	; 0x80
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ff9b 	bl	8004a28 <I2C_GetFlagStatus>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ef      	beq.n	8004ad8 <I2C_MasterSendData+0x88>
 8004af8:	e000      	b.n	8004afc <I2C_MasterSendData+0xac>
			if(err_break++ > 10000) break;
 8004afa:	bf00      	nop
		}
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	781a      	ldrb	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60bb      	str	r3, [r7, #8]
		Len--;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	607b      	str	r3, [r7, #4]
	while(Len > 0) {
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1dc      	bne.n	8004ad2 <I2C_MasterSendData+0x82>
	}

	//7. when Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8004b1c:	e006      	b.n	8004b2c <I2C_MasterSendData+0xdc>
		if(err_break++ > 10000) break;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	617a      	str	r2, [r7, #20]
 8004b24:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d809      	bhi.n	8004b40 <I2C_MasterSendData+0xf0>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ff78 	bl	8004a28 <I2C_GetFlagStatus>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0ef      	beq.n	8004b1e <I2C_MasterSendData+0xce>
 8004b3e:	e000      	b.n	8004b42 <I2C_MasterSendData+0xf2>
		if(err_break++ > 10000) break;
 8004b40:	bf00      	nop
	}

	err_break = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) {
 8004b46:	e006      	b.n	8004b56 <I2C_MasterSendData+0x106>
		if(err_break++ > 10000) break;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	617a      	str	r2, [r7, #20]
 8004b4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d809      	bhi.n	8004b6a <I2C_MasterSendData+0x11a>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) {
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2104      	movs	r1, #4
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ff63 	bl	8004a28 <I2C_GetFlagStatus>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0ef      	beq.n	8004b48 <I2C_MasterSendData+0xf8>
 8004b68:	e000      	b.n	8004b6c <I2C_MasterSendData+0x11c>
		if(err_break++ > 10000) break;
 8004b6a:	bf00      	nop
	}

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)
 8004b6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <I2C_MasterSendData+0x12e>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fe3e 	bl	80047fa <I2C_GenerateStopCondition>
}
 8004b7e:	bf00      	nop
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b086      	sub	sp, #24
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	4611      	mov	r1, r2
 8004b92:	461a      	mov	r2, r3
 8004b94:	460b      	mov	r3, r1
 8004b96:	71fb      	strb	r3, [r7, #7]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	71bb      	strb	r3, [r7, #6]
	uint32_t err_break;
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fdb7 	bl	8004714 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004baa:	e006      	b.n	8004bba <I2C_MasterReceiveData+0x34>
		if(err_break++ > 10000) break;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	617a      	str	r2, [r7, #20]
 8004bb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d809      	bhi.n	8004bce <I2C_MasterReceiveData+0x48>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff ff31 	bl	8004a28 <I2C_GetFlagStatus>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ef      	beq.n	8004bac <I2C_MasterReceiveData+0x26>
 8004bcc:	e000      	b.n	8004bd0 <I2C_MasterReceiveData+0x4a>
		if(err_break++ > 10000) break;
 8004bce:	bf00      	nop
	}

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	79ba      	ldrb	r2, [r7, #6]
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff fdc1 	bl	8004760 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	err_break = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004be2:	e006      	b.n	8004bf2 <I2C_MasterReceiveData+0x6c>
		if(err_break++ > 10000) break;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	617a      	str	r2, [r7, #20]
 8004bea:	f242 7210 	movw	r2, #10000	; 0x2710
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d809      	bhi.n	8004c06 <I2C_MasterReceiveData+0x80>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff15 	bl	8004a28 <I2C_GetFlagStatus>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ef      	beq.n	8004be4 <I2C_MasterReceiveData+0x5e>
 8004c04:	e000      	b.n	8004c08 <I2C_MasterReceiveData+0x82>
		if(err_break++ > 10000) break;
 8004c06:	bf00      	nop
	}


	//procedure to read only 1 byte from slave
	if(Len == 1) {
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d12c      	bne.n	8004c68 <I2C_MasterReceiveData+0xe2>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 f871 	bl	8004cfc <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff fdb6 	bl	800478c <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		err_break = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004c24:	e006      	b.n	8004c34 <I2C_MasterReceiveData+0xae>
			if(err_break++ > 10000) break;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	617a      	str	r2, [r7, #20]
 8004c2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d809      	bhi.n	8004c48 <I2C_MasterReceiveData+0xc2>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2140      	movs	r1, #64	; 0x40
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fef4 	bl	8004a28 <I2C_GetFlagStatus>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ef      	beq.n	8004c26 <I2C_MasterReceiveData+0xa0>
 8004c46:	e000      	b.n	8004c4a <I2C_MasterReceiveData+0xc4>
			if(err_break++ > 10000) break;
 8004c48:	bf00      	nop
		}

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8004c4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <I2C_MasterReceiveData+0xd6>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fdcf 	bl	80047fa <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1) {
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d938      	bls.n	8004ce0 <I2C_MasterReceiveData+0x15a>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff fd8c 	bl	800478c <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--) {
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	e02f      	b.n	8004cda <I2C_MasterReceiveData+0x154>
			//wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
				if(err_break++ > 10000) break;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	617a      	str	r2, [r7, #20]
 8004c80:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d809      	bhi.n	8004c9c <I2C_MasterReceiveData+0x116>
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2140      	movs	r1, #64	; 0x40
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff feca 	bl	8004a28 <I2C_GetFlagStatus>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0ef      	beq.n	8004c7a <I2C_MasterReceiveData+0xf4>
 8004c9a:	e000      	b.n	8004c9e <I2C_MasterReceiveData+0x118>
				if(err_break++ > 10000) break;
 8004c9c:	bf00      	nop
			}

			if(i == 2) { //if last 2 bytes are remaining
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d10e      	bne.n	8004cc2 <I2C_MasterReceiveData+0x13c>
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f826 	bl	8004cfc <I2C_ManageAcking>
				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8004cb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <I2C_MasterReceiveData+0x13c>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fd9c 	bl	80047fa <I2C_GenerateStopCondition>
			}
			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxBuffer++;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--) {
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1d3      	bne.n	8004c88 <I2C_MasterReceiveData+0x102>
		}
	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	7a5b      	ldrb	r3, [r3, #9]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d105      	bne.n	8004cf4 <I2C_MasterReceiveData+0x16e>
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f804 	bl	8004cfc <I2C_ManageAcking>
}
 8004cf4:	bf00      	nop
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d106      	bne.n	8004d1c <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
	else
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
}
 8004d1a:	e005      	b.n	8004d28 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	601a      	str	r2, [r3, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8004d3a:	4b25      	ldr	r3, [pc, #148]	; (8004dd0 <RCC_GetPCLK1Value+0x9c>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	089b      	lsrs	r3, r3, #2
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8004d48:	7a7b      	ldrb	r3, [r7, #9]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d102      	bne.n	8004d54 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8004d4e:	4b21      	ldr	r3, [pc, #132]	; (8004dd4 <RCC_GetPCLK1Value+0xa0>)
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e00b      	b.n	8004d6c <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 1)
 8004d54:	7a7b      	ldrb	r3, [r7, #9]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d102      	bne.n	8004d60 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	; (8004dd8 <RCC_GetPCLK1Value+0xa4>)
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e005      	b.n	8004d6c <RCC_GetPCLK1Value+0x38>
	else if (clksrc == 2)
 8004d60:	7a7b      	ldrb	r3, [r7, #9]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d102      	bne.n	8004d6c <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8004d66:	f000 f83d 	bl	8004de4 <RCC_GetPLLOutputClock>
 8004d6a:	60f8      	str	r0, [r7, #12]

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8004d6c:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <RCC_GetPCLK1Value+0x9c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8004d7a:	7a3b      	ldrb	r3, [r7, #8]
 8004d7c:	2b07      	cmp	r3, #7
 8004d7e:	d802      	bhi.n	8004d86 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8004d80:	2301      	movs	r3, #1
 8004d82:	72fb      	strb	r3, [r7, #11]
 8004d84:	e005      	b.n	8004d92 <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_PreScaler[temp-8];
 8004d86:	7a3b      	ldrb	r3, [r7, #8]
 8004d88:	3b08      	subs	r3, #8
 8004d8a:	4a14      	ldr	r2, [pc, #80]	; (8004ddc <RCC_GetPCLK1Value+0xa8>)
 8004d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d90:	72fb      	strb	r3, [r7, #11]

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <RCC_GetPCLK1Value+0x9c>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0a9b      	lsrs	r3, r3, #10
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8004da0:	7a3b      	ldrb	r3, [r7, #8]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d802      	bhi.n	8004dac <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8004da6:	2301      	movs	r3, #1
 8004da8:	72bb      	strb	r3, [r7, #10]
 8004daa:	e004      	b.n	8004db6 <RCC_GetPCLK1Value+0x82>
	else
		apb1p = APB1_PreScaler[temp-4];
 8004dac:	7a3b      	ldrb	r3, [r7, #8]
 8004dae:	3b04      	subs	r3, #4
 8004db0:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <RCC_GetPCLK1Value+0xac>)
 8004db2:	5cd3      	ldrb	r3, [r2, r3]
 8004db4:	72bb      	strb	r3, [r7, #10]

	pclk1 = (SystemClk / ahbp) /apb1p;
 8004db6:	7afb      	ldrb	r3, [r7, #11]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dbe:	7abb      	ldrb	r3, [r7, #10]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	607b      	str	r3, [r7, #4]

	return pclk1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	007a1200 	.word	0x007a1200
 8004ddc:	2000001c 	.word	0x2000001c
 8004de0:	2000002c 	.word	0x2000002c

08004de4 <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock() {
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
	return 0;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d11f      	bne.n	8004e46 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <SPI_PeriClockControl+0x60>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d106      	bne.n	8004e1c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8004e0e:	4b12      	ldr	r3, [pc, #72]	; (8004e58 <SPI_PeriClockControl+0x64>)
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	4a11      	ldr	r2, [pc, #68]	; (8004e58 <SPI_PeriClockControl+0x64>)
 8004e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e18:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8004e1a:	e014      	b.n	8004e46 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a0f      	ldr	r2, [pc, #60]	; (8004e5c <SPI_PeriClockControl+0x68>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d106      	bne.n	8004e32 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8004e24:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <SPI_PeriClockControl+0x64>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	4a0b      	ldr	r2, [pc, #44]	; (8004e58 <SPI_PeriClockControl+0x64>)
 8004e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004e30:	e009      	b.n	8004e46 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <SPI_PeriClockControl+0x6c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d105      	bne.n	8004e46 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <SPI_PeriClockControl+0x64>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4a06      	ldr	r2, [pc, #24]	; (8004e58 <SPI_PeriClockControl+0x64>)
 8004e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40013000 	.word	0x40013000
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40003800 	.word	0x40003800
 8004e60:	40003c00 	.word	0x40003c00

08004e64 <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2101      	movs	r1, #1
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff ffbe 	bl	8004df4 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	791b      	ldrb	r3, [r3, #4]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	461a      	mov	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	795b      	ldrb	r3, [r3, #5]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d104      	bne.n	8004e9c <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e014      	b.n	8004ec6 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	795b      	ldrb	r3, [r3, #5]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d104      	bne.n	8004eae <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	e00b      	b.n	8004ec6 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	795b      	ldrb	r3, [r3, #5]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d107      	bne.n	8004ec6 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ebc:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ec4:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	799b      	ldrb	r3, [r3, #6]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	79db      	ldrb	r3, [r3, #7]
 8004ed8:	02db      	lsls	r3, r3, #11
 8004eda:	461a      	mov	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7a1b      	ldrb	r3, [r3, #8]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	461a      	mov	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	7a5b      	ldrb	r3, [r3, #9]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	7a9b      	ldrb	r3, [r3, #10]
 8004f00:	025b      	lsls	r3, r3, #9
 8004f02:	461a      	mov	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]

}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	70fb      	strb	r3, [r7, #3]
	uint32_t error_break;
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG))) {
 8004f26:	e006      	b.n	8004f36 <SPI_Transfer+0x1c>
		if(error_break++ > 10000) break;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	60fa      	str	r2, [r7, #12]
 8004f2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d80c      	bhi.n	8004f50 <SPI_Transfer+0x36>
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG))) {
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f2      	beq.n	8004f28 <SPI_Transfer+0xe>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1ec      	bne.n	8004f28 <SPI_Transfer+0xe>
 8004f4e:	e000      	b.n	8004f52 <SPI_Transfer+0x38>
		if(error_break++ > 10000) break;
 8004f50:	bf00      	nop
	}
	pSPIx->DR = data;
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60da      	str	r2, [r3, #12]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG))) {
 8004f58:	e006      	b.n	8004f68 <SPI_Transfer+0x4e>
		if(error_break++ > 10000) break;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	60fa      	str	r2, [r7, #12]
 8004f60:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d80c      	bhi.n	8004f82 <SPI_Transfer+0x68>
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG))) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f2      	beq.n	8004f5a <SPI_Transfer+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1ec      	bne.n	8004f5a <SPI_Transfer+0x40>
 8004f80:	e000      	b.n	8004f84 <SPI_Transfer+0x6a>
		if(error_break++ > 10000) break;
 8004f82:	bf00      	nop
	}
	return pSPIx->DR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d106      	bne.n	8004fb4 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8004fb2:	e005      	b.n	8004fc0 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	601a      	str	r2, [r3, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d106      	bne.n	8004fec <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f043 0204 	orr.w	r2, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8004fea:	e005      	b.n	8004ff8 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f023 0204 	bic.w	r2, r3, #4
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	605a      	str	r2, [r3, #4]
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <lcd_puts_xy>:
LCD_Data_Screen1_t screen1_data;
LCD_Data_Screen2_t screen2_data;
LCD_Data_Screen3_t screen3_data;
LCD_Data_Screen4_t screen4_data;

void lcd_puts_xy(unsigned char x, unsigned char y, char* c, int font) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60ba      	str	r2, [r7, #8]
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	4603      	mov	r3, r0
 8005010:	73fb      	strb	r3, [r7, #15]
 8005012:	460b      	mov	r3, r1
 8005014:	73bb      	strb	r3, [r7, #14]
	LCD5110_GotoXY(x, y);
 8005016:	7bba      	ldrb	r2, [r7, #14]
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	4611      	mov	r1, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f7fc fc17 	bl	8001850 <LCD5110_GotoXY>
	if(font) LCD5110_Puts(c, LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <lcd_puts_xy+0x30>
 8005028:	2200      	movs	r2, #0
 800502a:	2101      	movs	r1, #1
 800502c:	68b8      	ldr	r0, [r7, #8]
 800502e:	f7fc fcd1 	bl	80019d4 <LCD5110_Puts>
	else LCD5110_Puts(c, LCD5110_Pixel_Set, LCD5110_FontSize_3x5);
}
 8005032:	e004      	b.n	800503e <lcd_puts_xy+0x3a>
	else LCD5110_Puts(c, LCD5110_Pixel_Set, LCD5110_FontSize_3x5);
 8005034:	2201      	movs	r2, #1
 8005036:	2101      	movs	r1, #1
 8005038:	68b8      	ldr	r0, [r7, #8]
 800503a:	f7fc fccb 	bl	80019d4 <LCD5110_Puts>
}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <range_scale>:

void range_scale(float value, char* value_buf, char* range) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
	if(value < 1000) {
 8005054:	edd7 7a03 	vldr	s15, [r7, #12]
 8005058:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005148 <range_scale+0x100>
 800505c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005064:	d505      	bpl.n	8005072 <range_scale+0x2a>
		sprintf(range, "%s", "m");
 8005066:	4a39      	ldr	r2, [pc, #228]	; (800514c <range_scale+0x104>)
 8005068:	4939      	ldr	r1, [pc, #228]	; (8005150 <range_scale+0x108>)
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f001 fb64 	bl	8006738 <siprintf>
 8005070:	e02c      	b.n	80050cc <range_scale+0x84>
	} else if (value < 1000*1000) {
 8005072:	edd7 7a03 	vldr	s15, [r7, #12]
 8005076:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005154 <range_scale+0x10c>
 800507a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005082:	d50d      	bpl.n	80050a0 <range_scale+0x58>
		sprintf(range, "%s", " ");
 8005084:	4a34      	ldr	r2, [pc, #208]	; (8005158 <range_scale+0x110>)
 8005086:	4932      	ldr	r1, [pc, #200]	; (8005150 <range_scale+0x108>)
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 fb55 	bl	8006738 <siprintf>
		value /= 1000;
 800508e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005092:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8005148 <range_scale+0x100>
 8005096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800509a:	edc7 7a03 	vstr	s15, [r7, #12]
 800509e:	e015      	b.n	80050cc <range_scale+0x84>
	} else if (value < 1000*1000*1000) {
 80050a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80050a4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800515c <range_scale+0x114>
 80050a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b0:	d50c      	bpl.n	80050cc <range_scale+0x84>
		sprintf(range, "%s", "k");
 80050b2:	4a2b      	ldr	r2, [pc, #172]	; (8005160 <range_scale+0x118>)
 80050b4:	4926      	ldr	r1, [pc, #152]	; (8005150 <range_scale+0x108>)
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f001 fb3e 	bl	8006738 <siprintf>
		value /= 1000*1000;
 80050bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80050c0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005154 <range_scale+0x10c>
 80050c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050c8:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	if(value < 10) {
 80050cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80050d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80050d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050dc:	d509      	bpl.n	80050f2 <range_scale+0xaa>
		sprintf(value_buf, "%1.3f", value);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7fb fa42 	bl	8000568 <__aeabi_f2d>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	491e      	ldr	r1, [pc, #120]	; (8005164 <range_scale+0x11c>)
 80050ea:	68b8      	ldr	r0, [r7, #8]
 80050ec:	f001 fb24 	bl	8006738 <siprintf>
	} else if (value < 100) {
		sprintf(value_buf, "%2.2f", value);
	} else if (value < 1000) {
		sprintf(value_buf, "%3.1f", value);
	}
}
 80050f0:	e025      	b.n	800513e <range_scale+0xf6>
	} else if (value < 100) {
 80050f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80050f6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005168 <range_scale+0x120>
 80050fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005102:	d509      	bpl.n	8005118 <range_scale+0xd0>
		sprintf(value_buf, "%2.2f", value);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7fb fa2f 	bl	8000568 <__aeabi_f2d>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4917      	ldr	r1, [pc, #92]	; (800516c <range_scale+0x124>)
 8005110:	68b8      	ldr	r0, [r7, #8]
 8005112:	f001 fb11 	bl	8006738 <siprintf>
}
 8005116:	e012      	b.n	800513e <range_scale+0xf6>
	} else if (value < 1000) {
 8005118:	edd7 7a03 	vldr	s15, [r7, #12]
 800511c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005148 <range_scale+0x100>
 8005120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	d400      	bmi.n	800512c <range_scale+0xe4>
}
 800512a:	e008      	b.n	800513e <range_scale+0xf6>
		sprintf(value_buf, "%3.1f", value);
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7fb fa1b 	bl	8000568 <__aeabi_f2d>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	490e      	ldr	r1, [pc, #56]	; (8005170 <range_scale+0x128>)
 8005138:	68b8      	ldr	r0, [r7, #8]
 800513a:	f001 fafd 	bl	8006738 <siprintf>
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	447a0000 	.word	0x447a0000
 800514c:	08008ba0 	.word	0x08008ba0
 8005150:	08008ba4 	.word	0x08008ba4
 8005154:	49742400 	.word	0x49742400
 8005158:	08008ba8 	.word	0x08008ba8
 800515c:	4e6e6b28 	.word	0x4e6e6b28
 8005160:	08008bac 	.word	0x08008bac
 8005164:	08008bb0 	.word	0x08008bb0
 8005168:	42c80000 	.word	0x42c80000
 800516c:	08008bb8 	.word	0x08008bb8
 8005170:	08008bc0 	.word	0x08008bc0

08005174 <lcd_screen_1_refresh>:

void lcd_screen_1_refresh() {
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 800517a:	f7fc fa99 	bl	80016b0 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "Vrms", 1);
 800517e:	2301      	movs	r3, #1
 8005180:	4a40      	ldr	r2, [pc, #256]	; (8005284 <lcd_screen_1_refresh+0x110>)
 8005182:	2100      	movs	r1, #0
 8005184:	2000      	movs	r0, #0
 8005186:	f7ff ff3d 	bl	8005004 <lcd_puts_xy>
	range_scale(screen1_data.Vrms, val_buf, range_buf);
 800518a:	4b3f      	ldr	r3, [pc, #252]	; (8005288 <lcd_screen_1_refresh+0x114>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	463a      	mov	r2, r7
 8005190:	1d39      	adds	r1, r7, #4
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff ff58 	bl	8005048 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1);
 8005198:	1d3a      	adds	r2, r7, #4
 800519a:	2301      	movs	r3, #1
 800519c:	2100      	movs	r1, #0
 800519e:	201c      	movs	r0, #28
 80051a0:	f7ff ff30 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1);
 80051a4:	463a      	mov	r2, r7
 80051a6:	2301      	movs	r3, #1
 80051a8:	2100      	movs	r1, #0
 80051aa:	203c      	movs	r0, #60	; 0x3c
 80051ac:	f7ff ff2a 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "V", 1);
 80051b0:	2301      	movs	r3, #1
 80051b2:	4a36      	ldr	r2, [pc, #216]	; (800528c <lcd_screen_1_refresh+0x118>)
 80051b4:	2100      	movs	r1, #0
 80051b6:	2042      	movs	r0, #66	; 0x42
 80051b8:	f7ff ff24 	bl	8005004 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Vp", 1);
 80051bc:	2301      	movs	r3, #1
 80051be:	4a34      	ldr	r2, [pc, #208]	; (8005290 <lcd_screen_1_refresh+0x11c>)
 80051c0:	210c      	movs	r1, #12
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7ff ff1e 	bl	8005004 <lcd_puts_xy>
	range_scale(screen1_data.Vpeak, val_buf, range_buf);
 80051c8:	4b2f      	ldr	r3, [pc, #188]	; (8005288 <lcd_screen_1_refresh+0x114>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	463a      	mov	r2, r7
 80051ce:	1d39      	adds	r1, r7, #4
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff ff39 	bl	8005048 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1);
 80051d6:	1d3a      	adds	r2, r7, #4
 80051d8:	2301      	movs	r3, #1
 80051da:	210c      	movs	r1, #12
 80051dc:	201c      	movs	r0, #28
 80051de:	f7ff ff11 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1);
 80051e2:	463a      	mov	r2, r7
 80051e4:	2301      	movs	r3, #1
 80051e6:	210c      	movs	r1, #12
 80051e8:	203c      	movs	r0, #60	; 0x3c
 80051ea:	f7ff ff0b 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1);
 80051ee:	2301      	movs	r3, #1
 80051f0:	4a26      	ldr	r2, [pc, #152]	; (800528c <lcd_screen_1_refresh+0x118>)
 80051f2:	210c      	movs	r1, #12
 80051f4:	2042      	movs	r0, #66	; 0x42
 80051f6:	f7ff ff05 	bl	8005004 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_2, "Irms", 1);
 80051fa:	2301      	movs	r3, #1
 80051fc:	4a25      	ldr	r2, [pc, #148]	; (8005294 <lcd_screen_1_refresh+0x120>)
 80051fe:	211d      	movs	r1, #29
 8005200:	2000      	movs	r0, #0
 8005202:	f7ff feff 	bl	8005004 <lcd_puts_xy>
	range_scale(screen1_data.Irms, val_buf, range_buf);
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <lcd_screen_1_refresh+0x114>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	463a      	mov	r2, r7
 800520c:	1d39      	adds	r1, r7, #4
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff ff1a 	bl	8005048 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_2, val_buf, 1);
 8005214:	1d3a      	adds	r2, r7, #4
 8005216:	2301      	movs	r3, #1
 8005218:	211d      	movs	r1, #29
 800521a:	201c      	movs	r0, #28
 800521c:	f7ff fef2 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_2, range_buf, 1);
 8005220:	463a      	mov	r2, r7
 8005222:	2301      	movs	r3, #1
 8005224:	211d      	movs	r1, #29
 8005226:	203c      	movs	r0, #60	; 0x3c
 8005228:	f7ff feec 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_2, "A", 1);
 800522c:	2301      	movs	r3, #1
 800522e:	4a1a      	ldr	r2, [pc, #104]	; (8005298 <lcd_screen_1_refresh+0x124>)
 8005230:	211d      	movs	r1, #29
 8005232:	2042      	movs	r0, #66	; 0x42
 8005234:	f7ff fee6 	bl	8005004 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "Ip", 1);
 8005238:	2301      	movs	r3, #1
 800523a:	4a18      	ldr	r2, [pc, #96]	; (800529c <lcd_screen_1_refresh+0x128>)
 800523c:	2129      	movs	r1, #41	; 0x29
 800523e:	2000      	movs	r0, #0
 8005240:	f7ff fee0 	bl	8005004 <lcd_puts_xy>
	range_scale(screen1_data.Ipeak, val_buf, range_buf);
 8005244:	4b10      	ldr	r3, [pc, #64]	; (8005288 <lcd_screen_1_refresh+0x114>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	463a      	mov	r2, r7
 800524a:	1d39      	adds	r1, r7, #4
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff fefb 	bl	8005048 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1);
 8005252:	1d3a      	adds	r2, r7, #4
 8005254:	2301      	movs	r3, #1
 8005256:	2129      	movs	r1, #41	; 0x29
 8005258:	201c      	movs	r0, #28
 800525a:	f7ff fed3 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1);
 800525e:	463a      	mov	r2, r7
 8005260:	2301      	movs	r3, #1
 8005262:	2129      	movs	r1, #41	; 0x29
 8005264:	203c      	movs	r0, #60	; 0x3c
 8005266:	f7ff fecd 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "A", 1);
 800526a:	2301      	movs	r3, #1
 800526c:	4a0a      	ldr	r2, [pc, #40]	; (8005298 <lcd_screen_1_refresh+0x124>)
 800526e:	2129      	movs	r1, #41	; 0x29
 8005270:	2042      	movs	r0, #66	; 0x42
 8005272:	f7ff fec7 	bl	8005004 <lcd_puts_xy>

	LCD5110_Refresh();
 8005276:	f7fc fa4d 	bl	8001714 <LCD5110_Refresh>
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	08008bc8 	.word	0x08008bc8
 8005288:	20013220 	.word	0x20013220
 800528c:	08008bd0 	.word	0x08008bd0
 8005290:	08008bd4 	.word	0x08008bd4
 8005294:	08008bd8 	.word	0x08008bd8
 8005298:	08008be0 	.word	0x08008be0
 800529c:	08008be4 	.word	0x08008be4

080052a0 <lcd_screen_2_refresh>:

void lcd_screen_2_refresh() {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 80052a6:	f7fc fa03 	bl	80016b0 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "P", 1);
 80052aa:	2301      	movs	r3, #1
 80052ac:	4a3c      	ldr	r2, [pc, #240]	; (80053a0 <lcd_screen_2_refresh+0x100>)
 80052ae:	2100      	movs	r1, #0
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7ff fea7 	bl	8005004 <lcd_puts_xy>
	range_scale(screen2_data.ActivePower, val_buf, range_buf);
 80052b6:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <lcd_screen_2_refresh+0x104>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	463a      	mov	r2, r7
 80052bc:	1d39      	adds	r1, r7, #4
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fec2 	bl	8005048 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1);
 80052c4:	1d3a      	adds	r2, r7, #4
 80052c6:	2301      	movs	r3, #1
 80052c8:	2100      	movs	r1, #0
 80052ca:	201c      	movs	r0, #28
 80052cc:	f7ff fe9a 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1);
 80052d0:	463a      	mov	r2, r7
 80052d2:	2301      	movs	r3, #1
 80052d4:	2100      	movs	r1, #0
 80052d6:	203c      	movs	r0, #60	; 0x3c
 80052d8:	f7ff fe94 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "W", 1);
 80052dc:	2301      	movs	r3, #1
 80052de:	4a32      	ldr	r2, [pc, #200]	; (80053a8 <lcd_screen_2_refresh+0x108>)
 80052e0:	2100      	movs	r1, #0
 80052e2:	2042      	movs	r0, #66	; 0x42
 80052e4:	f7ff fe8e 	bl	8005004 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Q", 1);
 80052e8:	2301      	movs	r3, #1
 80052ea:	4a30      	ldr	r2, [pc, #192]	; (80053ac <lcd_screen_2_refresh+0x10c>)
 80052ec:	210c      	movs	r1, #12
 80052ee:	2000      	movs	r0, #0
 80052f0:	f7ff fe88 	bl	8005004 <lcd_puts_xy>
	range_scale(screen2_data.ReactivePower, val_buf, range_buf);
 80052f4:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <lcd_screen_2_refresh+0x104>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	463a      	mov	r2, r7
 80052fa:	1d39      	adds	r1, r7, #4
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fea3 	bl	8005048 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1);
 8005302:	1d3a      	adds	r2, r7, #4
 8005304:	2301      	movs	r3, #1
 8005306:	210c      	movs	r1, #12
 8005308:	201c      	movs	r0, #28
 800530a:	f7ff fe7b 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1);
 800530e:	463a      	mov	r2, r7
 8005310:	2301      	movs	r3, #1
 8005312:	210c      	movs	r1, #12
 8005314:	203c      	movs	r0, #60	; 0x3c
 8005316:	f7ff fe75 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAR", 1);
 800531a:	2301      	movs	r3, #1
 800531c:	4a24      	ldr	r2, [pc, #144]	; (80053b0 <lcd_screen_2_refresh+0x110>)
 800531e:	210c      	movs	r1, #12
 8005320:	2042      	movs	r0, #66	; 0x42
 8005322:	f7ff fe6f 	bl	8005004 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_1, "S", 1);
 8005326:	2301      	movs	r3, #1
 8005328:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <lcd_screen_2_refresh+0x114>)
 800532a:	2118      	movs	r1, #24
 800532c:	2000      	movs	r0, #0
 800532e:	f7ff fe69 	bl	8005004 <lcd_puts_xy>
	range_scale(screen2_data.ApparantPower, val_buf, range_buf);
 8005332:	4b1c      	ldr	r3, [pc, #112]	; (80053a4 <lcd_screen_2_refresh+0x104>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	463a      	mov	r2, r7
 8005338:	1d39      	adds	r1, r7, #4
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff fe84 	bl	8005048 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1);
 8005340:	1d3a      	adds	r2, r7, #4
 8005342:	2301      	movs	r3, #1
 8005344:	2118      	movs	r1, #24
 8005346:	201c      	movs	r0, #28
 8005348:	f7ff fe5c 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1);
 800534c:	463a      	mov	r2, r7
 800534e:	2301      	movs	r3, #1
 8005350:	2118      	movs	r1, #24
 8005352:	203c      	movs	r0, #60	; 0x3c
 8005354:	f7ff fe56 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "VA", 1);
 8005358:	2301      	movs	r3, #1
 800535a:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <lcd_screen_2_refresh+0x118>)
 800535c:	2118      	movs	r1, #24
 800535e:	2042      	movs	r0, #66	; 0x42
 8005360:	f7ff fe50 	bl	8005004 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "PF", 1);
 8005364:	2301      	movs	r3, #1
 8005366:	4a15      	ldr	r2, [pc, #84]	; (80053bc <lcd_screen_2_refresh+0x11c>)
 8005368:	2129      	movs	r1, #41	; 0x29
 800536a:	2000      	movs	r0, #0
 800536c:	f7ff fe4a 	bl	8005004 <lcd_puts_xy>
	sprintf(val_buf, "%.2f", screen2_data.PowerFactor);
 8005370:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <lcd_screen_2_refresh+0x104>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4618      	mov	r0, r3
 8005376:	f7fb f8f7 	bl	8000568 <__aeabi_f2d>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	1d38      	adds	r0, r7, #4
 8005380:	490f      	ldr	r1, [pc, #60]	; (80053c0 <lcd_screen_2_refresh+0x120>)
 8005382:	f001 f9d9 	bl	8006738 <siprintf>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1);
 8005386:	1d3a      	adds	r2, r7, #4
 8005388:	2301      	movs	r3, #1
 800538a:	2129      	movs	r1, #41	; 0x29
 800538c:	201c      	movs	r0, #28
 800538e:	f7ff fe39 	bl	8005004 <lcd_puts_xy>

	LCD5110_Refresh();
 8005392:	f7fc f9bf 	bl	8001714 <LCD5110_Refresh>
}
 8005396:	bf00      	nop
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	08008be8 	.word	0x08008be8
 80053a4:	20013204 	.word	0x20013204
 80053a8:	08008bec 	.word	0x08008bec
 80053ac:	08008bf0 	.word	0x08008bf0
 80053b0:	08008bf4 	.word	0x08008bf4
 80053b4:	08008bf8 	.word	0x08008bf8
 80053b8:	08008bfc 	.word	0x08008bfc
 80053bc:	08008c00 	.word	0x08008c00
 80053c0:	08008c04 	.word	0x08008c04

080053c4 <lcd_screen_3_refresh>:

void lcd_screen_3_refresh() {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08c      	sub	sp, #48	; 0x30
 80053c8:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 80053ca:	f7fc f971 	bl	80016b0 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "P.t", 1);
 80053ce:	2301      	movs	r3, #1
 80053d0:	4a39      	ldr	r2, [pc, #228]	; (80054b8 <lcd_screen_3_refresh+0xf4>)
 80053d2:	2100      	movs	r1, #0
 80053d4:	2000      	movs	r0, #0
 80053d6:	f7ff fe15 	bl	8005004 <lcd_puts_xy>
	range_scale(screen3_data.ActiveEnergy, val_buf, range_buf);
 80053da:	4b38      	ldr	r3, [pc, #224]	; (80054bc <lcd_screen_3_refresh+0xf8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f107 0218 	add.w	r2, r7, #24
 80053e2:	f107 011c 	add.w	r1, r7, #28
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff fe2e 	bl	8005048 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1);
 80053ec:	f107 021c 	add.w	r2, r7, #28
 80053f0:	2301      	movs	r3, #1
 80053f2:	2100      	movs	r1, #0
 80053f4:	201c      	movs	r0, #28
 80053f6:	f7ff fe05 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1);
 80053fa:	f107 0218 	add.w	r2, r7, #24
 80053fe:	2301      	movs	r3, #1
 8005400:	2100      	movs	r1, #0
 8005402:	203c      	movs	r0, #60	; 0x3c
 8005404:	f7ff fdfe 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "Wh", 1);
 8005408:	2301      	movs	r3, #1
 800540a:	4a2d      	ldr	r2, [pc, #180]	; (80054c0 <lcd_screen_3_refresh+0xfc>)
 800540c:	2100      	movs	r1, #0
 800540e:	2042      	movs	r0, #66	; 0x42
 8005410:	f7ff fdf8 	bl	8005004 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "S.t", 1);
 8005414:	2301      	movs	r3, #1
 8005416:	4a2b      	ldr	r2, [pc, #172]	; (80054c4 <lcd_screen_3_refresh+0x100>)
 8005418:	210c      	movs	r1, #12
 800541a:	2000      	movs	r0, #0
 800541c:	f7ff fdf2 	bl	8005004 <lcd_puts_xy>
	range_scale(screen3_data.ApparantEnergy, val_buf, range_buf);
 8005420:	4b26      	ldr	r3, [pc, #152]	; (80054bc <lcd_screen_3_refresh+0xf8>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f107 0218 	add.w	r2, r7, #24
 8005428:	f107 011c 	add.w	r1, r7, #28
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fe0b 	bl	8005048 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1);
 8005432:	f107 021c 	add.w	r2, r7, #28
 8005436:	2301      	movs	r3, #1
 8005438:	210c      	movs	r1, #12
 800543a:	201c      	movs	r0, #28
 800543c:	f7ff fde2 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1);
 8005440:	f107 0218 	add.w	r2, r7, #24
 8005444:	2301      	movs	r3, #1
 8005446:	210c      	movs	r1, #12
 8005448:	203c      	movs	r0, #60	; 0x3c
 800544a:	f7ff fddb 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAh", 1);
 800544e:	2301      	movs	r3, #1
 8005450:	4a1d      	ldr	r2, [pc, #116]	; (80054c8 <lcd_screen_3_refresh+0x104>)
 8005452:	210c      	movs	r1, #12
 8005454:	2042      	movs	r0, #66	; 0x42
 8005456:	f7ff fdd5 	bl	8005004 <lcd_puts_xy>

	char days_buf[5];
	sprintf(days_buf, "%04lu", Screen3_Timer.days);
 800545a:	4b1c      	ldr	r3, [pc, #112]	; (80054cc <lcd_screen_3_refresh+0x108>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	f107 0310 	add.w	r3, r7, #16
 8005462:	491b      	ldr	r1, [pc, #108]	; (80054d0 <lcd_screen_3_refresh+0x10c>)
 8005464:	4618      	mov	r0, r3
 8005466:	f001 f967 	bl	8006738 <siprintf>
	lcd_puts_xy(0, ROW_LINE_4, days_buf, 1);
 800546a:	f107 0210 	add.w	r2, r7, #16
 800546e:	2301      	movs	r3, #1
 8005470:	2129      	movs	r1, #41	; 0x29
 8005472:	2000      	movs	r0, #0
 8005474:	f7ff fdc6 	bl	8005004 <lcd_puts_xy>
	lcd_puts_xy(26, ROW_LINE_4 + 2, "DAY(s)", 0);
 8005478:	2300      	movs	r3, #0
 800547a:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <lcd_screen_3_refresh+0x110>)
 800547c:	212b      	movs	r1, #43	; 0x2b
 800547e:	201a      	movs	r0, #26
 8005480:	f7ff fdc0 	bl	8005004 <lcd_puts_xy>

	char runtime_buf[9];
	sprintf(runtime_buf, "%02u:%02u:%02u", Screen3_Timer.hours, Screen3_Timer.minutes, Screen3_Timer.seconds);
 8005484:	4b11      	ldr	r3, [pc, #68]	; (80054cc <lcd_screen_3_refresh+0x108>)
 8005486:	791b      	ldrb	r3, [r3, #4]
 8005488:	461a      	mov	r2, r3
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <lcd_screen_3_refresh+0x108>)
 800548c:	795b      	ldrb	r3, [r3, #5]
 800548e:	4619      	mov	r1, r3
 8005490:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <lcd_screen_3_refresh+0x108>)
 8005492:	799b      	ldrb	r3, [r3, #6]
 8005494:	1d38      	adds	r0, r7, #4
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	460b      	mov	r3, r1
 800549a:	490f      	ldr	r1, [pc, #60]	; (80054d8 <lcd_screen_3_refresh+0x114>)
 800549c:	f001 f94c 	bl	8006738 <siprintf>
	lcd_puts_xy(56, ROW_LINE_4 + 2, runtime_buf, 0);
 80054a0:	1d3a      	adds	r2, r7, #4
 80054a2:	2300      	movs	r3, #0
 80054a4:	212b      	movs	r1, #43	; 0x2b
 80054a6:	2038      	movs	r0, #56	; 0x38
 80054a8:	f7ff fdac 	bl	8005004 <lcd_puts_xy>

	LCD5110_Refresh();
 80054ac:	f7fc f932 	bl	8001714 <LCD5110_Refresh>
}
 80054b0:	bf00      	nop
 80054b2:	3728      	adds	r7, #40	; 0x28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	08008c0c 	.word	0x08008c0c
 80054bc:	2001323c 	.word	0x2001323c
 80054c0:	08008c10 	.word	0x08008c10
 80054c4:	08008c14 	.word	0x08008c14
 80054c8:	08008c18 	.word	0x08008c18
 80054cc:	20013244 	.word	0x20013244
 80054d0:	08008c1c 	.word	0x08008c1c
 80054d4:	08008c24 	.word	0x08008c24
 80054d8:	08008c2c 	.word	0x08008c2c

080054dc <lcd_screen_4_refresh>:

void lcd_screen_4_refresh() {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08c      	sub	sp, #48	; 0x30
 80054e0:	af02      	add	r7, sp, #8
	LCD5110_Clear();
 80054e2:	f7fc f8e5 	bl	80016b0 <LCD5110_Clear>
	if(screen4_mode == NORMAL_DISPLAY) {
 80054e6:	4b28      	ldr	r3, [pc, #160]	; (8005588 <lcd_screen_4_refresh+0xac>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d12c      	bne.n	8005548 <lcd_screen_4_refresh+0x6c>
		char date_buf[11];
		sprintf(date_buf, "%02u/%02u/20%02u", Screen4_RTC.date.date, Screen4_RTC.date.month, Screen4_RTC.date.year);
 80054ee:	4b27      	ldr	r3, [pc, #156]	; (800558c <lcd_screen_4_refresh+0xb0>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	4b25      	ldr	r3, [pc, #148]	; (800558c <lcd_screen_4_refresh+0xb0>)
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	4619      	mov	r1, r3
 80054fa:	4b24      	ldr	r3, [pc, #144]	; (800558c <lcd_screen_4_refresh+0xb0>)
 80054fc:	789b      	ldrb	r3, [r3, #2]
 80054fe:	f107 001c 	add.w	r0, r7, #28
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	460b      	mov	r3, r1
 8005506:	4922      	ldr	r1, [pc, #136]	; (8005590 <lcd_screen_4_refresh+0xb4>)
 8005508:	f001 f916 	bl	8006738 <siprintf>
		lcd_puts_xy(0, ROW_LINE_4 + 2, date_buf, 0);
 800550c:	f107 021c 	add.w	r2, r7, #28
 8005510:	2300      	movs	r3, #0
 8005512:	212b      	movs	r1, #43	; 0x2b
 8005514:	2000      	movs	r0, #0
 8005516:	f7ff fd75 	bl	8005004 <lcd_puts_xy>
		char time_buf[9];
		sprintf(time_buf, "%02u:%02u:%02u", Screen4_RTC.time.hours, Screen4_RTC.time.minutes, Screen4_RTC.time.seconds);
 800551a:	4b1c      	ldr	r3, [pc, #112]	; (800558c <lcd_screen_4_refresh+0xb0>)
 800551c:	799b      	ldrb	r3, [r3, #6]
 800551e:	461a      	mov	r2, r3
 8005520:	4b1a      	ldr	r3, [pc, #104]	; (800558c <lcd_screen_4_refresh+0xb0>)
 8005522:	795b      	ldrb	r3, [r3, #5]
 8005524:	4619      	mov	r1, r3
 8005526:	4b19      	ldr	r3, [pc, #100]	; (800558c <lcd_screen_4_refresh+0xb0>)
 8005528:	791b      	ldrb	r3, [r3, #4]
 800552a:	f107 0010 	add.w	r0, r7, #16
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	460b      	mov	r3, r1
 8005532:	4918      	ldr	r1, [pc, #96]	; (8005594 <lcd_screen_4_refresh+0xb8>)
 8005534:	f001 f900 	bl	8006738 <siprintf>
		lcd_puts_xy(56, ROW_LINE_4 + 2, time_buf, 0);
 8005538:	f107 0210 	add.w	r2, r7, #16
 800553c:	2300      	movs	r3, #0
 800553e:	212b      	movs	r1, #43	; 0x2b
 8005540:	2038      	movs	r0, #56	; 0x38
 8005542:	f7ff fd5f 	bl	8005004 <lcd_puts_xy>
 8005546:	e019      	b.n	800557c <lcd_screen_4_refresh+0xa0>
	} else {
		lcd_puts_xy(0, ROW_LINE_1, "config", 1);
 8005548:	2301      	movs	r3, #1
 800554a:	4a13      	ldr	r2, [pc, #76]	; (8005598 <lcd_screen_4_refresh+0xbc>)
 800554c:	2100      	movs	r1, #0
 800554e:	2000      	movs	r0, #0
 8005550:	f7ff fd58 	bl	8005004 <lcd_puts_xy>
		char time_buf[9];
		sprintf(time_buf, "%02u:%02u:%02u", Screen4_RTC.time.hours, Screen4_RTC.time.minutes, Screen4_RTC.time.seconds);
 8005554:	4b0d      	ldr	r3, [pc, #52]	; (800558c <lcd_screen_4_refresh+0xb0>)
 8005556:	799b      	ldrb	r3, [r3, #6]
 8005558:	461a      	mov	r2, r3
 800555a:	4b0c      	ldr	r3, [pc, #48]	; (800558c <lcd_screen_4_refresh+0xb0>)
 800555c:	795b      	ldrb	r3, [r3, #5]
 800555e:	4619      	mov	r1, r3
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <lcd_screen_4_refresh+0xb0>)
 8005562:	791b      	ldrb	r3, [r3, #4]
 8005564:	1d38      	adds	r0, r7, #4
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	460b      	mov	r3, r1
 800556a:	490a      	ldr	r1, [pc, #40]	; (8005594 <lcd_screen_4_refresh+0xb8>)
 800556c:	f001 f8e4 	bl	8006738 <siprintf>
		lcd_puts_xy(0, ROW_LINE_4 + 2, time_buf, 0);
 8005570:	1d3a      	adds	r2, r7, #4
 8005572:	2300      	movs	r3, #0
 8005574:	212b      	movs	r1, #43	; 0x2b
 8005576:	2000      	movs	r0, #0
 8005578:	f7ff fd44 	bl	8005004 <lcd_puts_xy>
	}
	LCD5110_Refresh();
 800557c:	f7fc f8ca 	bl	8001714 <LCD5110_Refresh>
}
 8005580:	bf00      	nop
 8005582:	3728      	adds	r7, #40	; 0x28
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	2001324c 	.word	0x2001324c
 800558c:	20013214 	.word	0x20013214
 8005590:	08008c3c 	.word	0x08008c3c
 8005594:	08008c2c 	.word	0x08008c2c
 8005598:	08008c50 	.word	0x08008c50

0800559c <lcd_screen_1_reset>:

void lcd_screen_4_data_update(LCD_Data_Screen4_t data) {
	screen4_data = data;
}

void lcd_screen_1_reset() {
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
	memset(&screen1_data, 0, sizeof(screen1_data));
 80055a0:	2210      	movs	r2, #16
 80055a2:	2100      	movs	r1, #0
 80055a4:	4802      	ldr	r0, [pc, #8]	; (80055b0 <lcd_screen_1_reset+0x14>)
 80055a6:	f000 fc53 	bl	8005e50 <memset>
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20013220 	.word	0x20013220

080055b4 <lcd_screen_2_reset>:

void lcd_screen_2_reset() {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
	memset(&screen2_data, 0, sizeof(screen2_data));
 80055b8:	2210      	movs	r2, #16
 80055ba:	2100      	movs	r1, #0
 80055bc:	4802      	ldr	r0, [pc, #8]	; (80055c8 <lcd_screen_2_reset+0x14>)
 80055be:	f000 fc47 	bl	8005e50 <memset>
}
 80055c2:	bf00      	nop
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20013204 	.word	0x20013204

080055cc <lcd_screen_3_reset>:

void lcd_screen_3_reset() {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
	memset(&screen3_data, 0, sizeof(screen3_data));
 80055d0:	2208      	movs	r2, #8
 80055d2:	2100      	movs	r1, #0
 80055d4:	4804      	ldr	r0, [pc, #16]	; (80055e8 <lcd_screen_3_reset+0x1c>)
 80055d6:	f000 fc3b 	bl	8005e50 <memset>
	memset(&Screen3_Timer, 0, sizeof(Screen3_Timer));
 80055da:	2208      	movs	r2, #8
 80055dc:	2100      	movs	r1, #0
 80055de:	4803      	ldr	r0, [pc, #12]	; (80055ec <lcd_screen_3_reset+0x20>)
 80055e0:	f000 fc36 	bl	8005e50 <memset>
}
 80055e4:	bf00      	nop
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	2001323c 	.word	0x2001323c
 80055ec:	20013244 	.word	0x20013244

080055f0 <lcd_screen_4_reset>:

void lcd_screen_4_reset() {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
	memset(&screen4_data, 0, sizeof(screen4_data));
 80055f4:	220c      	movs	r2, #12
 80055f6:	2100      	movs	r1, #0
 80055f8:	4806      	ldr	r0, [pc, #24]	; (8005614 <lcd_screen_4_reset+0x24>)
 80055fa:	f000 fc29 	bl	8005e50 <memset>
	memset(&Screen4_RTC, 0, sizeof(Screen4_RTC));
 80055fe:	2209      	movs	r2, #9
 8005600:	2100      	movs	r1, #0
 8005602:	4805      	ldr	r0, [pc, #20]	; (8005618 <lcd_screen_4_reset+0x28>)
 8005604:	f000 fc24 	bl	8005e50 <memset>
	screen4_mode = NORMAL_DISPLAY;
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <lcd_screen_4_reset+0x2c>)
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]
}
 800560e:	bf00      	nop
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20013230 	.word	0x20013230
 8005618:	20013214 	.word	0x20013214
 800561c:	2001324c 	.word	0x2001324c

08005620 <lcd_screen_3_timer_count_up>:

void lcd_screen_3_timer_count_up() {
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
	Screen3_Timer.seconds++;
 8005624:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 8005626:	799b      	ldrb	r3, [r3, #6]
 8005628:	3301      	adds	r3, #1
 800562a:	b2da      	uxtb	r2, r3
 800562c:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 800562e:	719a      	strb	r2, [r3, #6]
	if(Screen3_Timer.seconds > 59) {
 8005630:	4b19      	ldr	r3, [pc, #100]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 8005632:	799b      	ldrb	r3, [r3, #6]
 8005634:	2b3b      	cmp	r3, #59	; 0x3b
 8005636:	d92a      	bls.n	800568e <lcd_screen_3_timer_count_up+0x6e>
		Screen3_Timer.seconds -= 60;
 8005638:	4b17      	ldr	r3, [pc, #92]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 800563a:	799b      	ldrb	r3, [r3, #6]
 800563c:	3b3c      	subs	r3, #60	; 0x3c
 800563e:	b2da      	uxtb	r2, r3
 8005640:	4b15      	ldr	r3, [pc, #84]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 8005642:	719a      	strb	r2, [r3, #6]
		Screen3_Timer.minutes++;
 8005644:	4b14      	ldr	r3, [pc, #80]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 8005646:	795b      	ldrb	r3, [r3, #5]
 8005648:	3301      	adds	r3, #1
 800564a:	b2da      	uxtb	r2, r3
 800564c:	4b12      	ldr	r3, [pc, #72]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 800564e:	715a      	strb	r2, [r3, #5]
		if(Screen3_Timer.minutes > 59) {
 8005650:	4b11      	ldr	r3, [pc, #68]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 8005652:	795b      	ldrb	r3, [r3, #5]
 8005654:	2b3b      	cmp	r3, #59	; 0x3b
 8005656:	d91a      	bls.n	800568e <lcd_screen_3_timer_count_up+0x6e>
			Screen3_Timer.minutes -= 60;
 8005658:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 800565a:	795b      	ldrb	r3, [r3, #5]
 800565c:	3b3c      	subs	r3, #60	; 0x3c
 800565e:	b2da      	uxtb	r2, r3
 8005660:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 8005662:	715a      	strb	r2, [r3, #5]
			Screen3_Timer.hours++;
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 8005666:	791b      	ldrb	r3, [r3, #4]
 8005668:	3301      	adds	r3, #1
 800566a:	b2da      	uxtb	r2, r3
 800566c:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 800566e:	711a      	strb	r2, [r3, #4]
			if(Screen3_Timer.hours > 23) {
 8005670:	4b09      	ldr	r3, [pc, #36]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 8005672:	791b      	ldrb	r3, [r3, #4]
 8005674:	2b17      	cmp	r3, #23
 8005676:	d90a      	bls.n	800568e <lcd_screen_3_timer_count_up+0x6e>
				Screen3_Timer.hours -= 24;
 8005678:	4b07      	ldr	r3, [pc, #28]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 800567a:	791b      	ldrb	r3, [r3, #4]
 800567c:	3b18      	subs	r3, #24
 800567e:	b2da      	uxtb	r2, r3
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 8005682:	711a      	strb	r2, [r3, #4]
				Screen3_Timer.days++;
 8005684:	4b04      	ldr	r3, [pc, #16]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	4a03      	ldr	r2, [pc, #12]	; (8005698 <lcd_screen_3_timer_count_up+0x78>)
 800568c:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	20013244 	.word	0x20013244

0800569c <lcd_screen_4_rtc_update>:

void lcd_screen_4_rtc_update(LCD_Screen4_RTC_t datetime) {
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	1d3b      	adds	r3, r7, #4
 80056a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Screen4_RTC = datetime;
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <lcd_screen_4_rtc_update+0x28>)
 80056aa:	461a      	mov	r2, r3
 80056ac:	1d3b      	adds	r3, r7, #4
 80056ae:	cb03      	ldmia	r3!, {r0, r1}
 80056b0:	6010      	str	r0, [r2, #0]
 80056b2:	6051      	str	r1, [r2, #4]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	7213      	strb	r3, [r2, #8]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	20013214 	.word	0x20013214

080056c8 <lcd_screen_4_switch_mode>:

LCD_Screen4_Mode lcd_screen_4_mode() {
	return screen4_mode;
}

void lcd_screen_4_switch_mode() {
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
	if(screen4_mode == NORMAL_DISPLAY) screen4_mode = CONFIG_DISPLAY;
 80056cc:	4b07      	ldr	r3, [pc, #28]	; (80056ec <lcd_screen_4_switch_mode+0x24>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d103      	bne.n	80056dc <lcd_screen_4_switch_mode+0x14>
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <lcd_screen_4_switch_mode+0x24>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	701a      	strb	r2, [r3, #0]
	else screen4_mode = NORMAL_DISPLAY;
}
 80056da:	e002      	b.n	80056e2 <lcd_screen_4_switch_mode+0x1a>
	else screen4_mode = NORMAL_DISPLAY;
 80056dc:	4b03      	ldr	r3, [pc, #12]	; (80056ec <lcd_screen_4_switch_mode+0x24>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
}
 80056e2:	bf00      	nop
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	2001324c 	.word	0x2001324c

080056f0 <main>:
void rtc_handler(void* parameters);
void usart_handler(void* parameters);

void LED_Init();

int main(void) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af02      	add	r7, sp, #8
	LED_Init();
 80056f6:	f000 f9f1 	bl	8005adc <LED_Init>
	TaskHandle_t lcd_handle;
	TaskHandle_t ade_handle;
	TaskHandle_t rtc_handle;
	TaskHandle_t usart_handle;

	xTaskCreate(keypad_handler, "Keypad", 256, NULL, 2, &keypad_handle);
 80056fa:	f107 0314 	add.w	r3, r7, #20
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	2302      	movs	r3, #2
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	2300      	movs	r3, #0
 8005706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800570a:	4923      	ldr	r1, [pc, #140]	; (8005798 <main+0xa8>)
 800570c:	4823      	ldr	r0, [pc, #140]	; (800579c <main+0xac>)
 800570e:	f7fc ff11 	bl	8002534 <xTaskCreate>
	xTaskCreate(lcd_handler, "LCD5110", 1024, NULL, 2, &lcd_handle);
 8005712:	f107 0310 	add.w	r3, r7, #16
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	2302      	movs	r3, #2
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2300      	movs	r3, #0
 800571e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005722:	491f      	ldr	r1, [pc, #124]	; (80057a0 <main+0xb0>)
 8005724:	481f      	ldr	r0, [pc, #124]	; (80057a4 <main+0xb4>)
 8005726:	f7fc ff05 	bl	8002534 <xTaskCreate>
	xTaskCreate(ade_handler, "ADE7753", 256, NULL, 2, &ade_handle);
 800572a:	f107 030c 	add.w	r3, r7, #12
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	2302      	movs	r3, #2
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800573a:	491b      	ldr	r1, [pc, #108]	; (80057a8 <main+0xb8>)
 800573c:	481b      	ldr	r0, [pc, #108]	; (80057ac <main+0xbc>)
 800573e:	f7fc fef9 	bl	8002534 <xTaskCreate>
	xTaskCreate(rtc_handler, "DS1307", 256, NULL, 2, &rtc_handle);
 8005742:	f107 0308 	add.w	r3, r7, #8
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	2302      	movs	r3, #2
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	2300      	movs	r3, #0
 800574e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005752:	4917      	ldr	r1, [pc, #92]	; (80057b0 <main+0xc0>)
 8005754:	4817      	ldr	r0, [pc, #92]	; (80057b4 <main+0xc4>)
 8005756:	f7fc feed 	bl	8002534 <xTaskCreate>
	xTaskCreate(usart_handler, "USART", 256, NULL, 2, &usart_handle);
 800575a:	1d3b      	adds	r3, r7, #4
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	2302      	movs	r3, #2
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	2300      	movs	r3, #0
 8005764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005768:	4913      	ldr	r1, [pc, #76]	; (80057b8 <main+0xc8>)
 800576a:	4814      	ldr	r0, [pc, #80]	; (80057bc <main+0xcc>)
 800576c:	f7fc fee2 	bl	8002534 <xTaskCreate>

	keypad_queue_handle = xQueueCreate(10, sizeof(KEYPAD_Button_t));
 8005770:	2200      	movs	r2, #0
 8005772:	2101      	movs	r1, #1
 8005774:	200a      	movs	r0, #10
 8005776:	f7fc fa65 	bl	8001c44 <xQueueGenericCreate>
 800577a:	4603      	mov	r3, r0
 800577c:	4a10      	ldr	r2, [pc, #64]	; (80057c0 <main+0xd0>)
 800577e:	6013      	str	r3, [r2, #0]
	keypad_hold_queue_handle = xQueueCreate(10, sizeof(KEYPAD_Button_t));
 8005780:	2200      	movs	r2, #0
 8005782:	2101      	movs	r1, #1
 8005784:	200a      	movs	r0, #10
 8005786:	f7fc fa5d 	bl	8001c44 <xQueueGenericCreate>
 800578a:	4603      	mov	r3, r0
 800578c:	4a0d      	ldr	r2, [pc, #52]	; (80057c4 <main+0xd4>)
 800578e:	6013      	str	r3, [r2, #0]
//	ade_queue_handle = xQueueCreate(10, sizeof(uint8_t));

	vTaskStartScheduler();
 8005790:	f7fd f84a 	bl	8002828 <vTaskStartScheduler>

	while(1);
 8005794:	e7fe      	b.n	8005794 <main+0xa4>
 8005796:	bf00      	nop
 8005798:	08008c58 	.word	0x08008c58
 800579c:	080057c9 	.word	0x080057c9
 80057a0:	08008c60 	.word	0x08008c60
 80057a4:	0800585d 	.word	0x0800585d
 80057a8:	08008c68 	.word	0x08008c68
 80057ac:	08005985 	.word	0x08005985
 80057b0:	08008c70 	.word	0x08008c70
 80057b4:	080059b9 	.word	0x080059b9
 80057b8:	08008c78 	.word	0x08008c78
 80057bc:	08005abd 	.word	0x08005abd
 80057c0:	2001325c 	.word	0x2001325c
 80057c4:	20013294 	.word	0x20013294

080057c8 <keypad_handler>:
	return 0;
}

void keypad_handler(void* parameters) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
	KEYPAD_Init(KEYPAD_Type_Large);
 80057d0:	2000      	movs	r0, #0
 80057d2:	f7fb fc69 	bl	80010a8 <KEYPAD_Init>
	KEYPAD_Button_t Keypad_Button, Keypad_prev = KEYPAD_NOPRESSED;
 80057d6:	23ff      	movs	r3, #255	; 0xff
 80057d8:	73fb      	strb	r3, [r7, #15]
	uint16_t keypad_hold_timeout = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	81bb      	strh	r3, [r7, #12]

	while(1) {
		KEYPAD_Update();
 80057de:	f7fb fdb9 	bl	8001354 <KEYPAD_Update>
		Keypad_Button = KEYPAD_Read();
 80057e2:	f7fb fcd3 	bl	800118c <KEYPAD_Read>
 80057e6:	4603      	mov	r3, r0
 80057e8:	72fb      	strb	r3, [r7, #11]

		if(Keypad_Button != KEYPAD_NOPRESSED) {
 80057ea:	7afb      	ldrb	r3, [r7, #11]
 80057ec:	2bff      	cmp	r3, #255	; 0xff
 80057ee:	d021      	beq.n	8005834 <keypad_handler+0x6c>
			if(Keypad_prev == KEYPAD_NOPRESSED)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2bff      	cmp	r3, #255	; 0xff
 80057f4:	d108      	bne.n	8005808 <keypad_handler+0x40>
				xQueueSend(keypad_queue_handle, (void*) &Keypad_Button, (TickType_t) 0);
 80057f6:	4b16      	ldr	r3, [pc, #88]	; (8005850 <keypad_handler+0x88>)
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	f107 010b 	add.w	r1, r7, #11
 80057fe:	2300      	movs	r3, #0
 8005800:	2200      	movs	r2, #0
 8005802:	f7fc faa1 	bl	8001d48 <xQueueGenericSend>
 8005806:	e015      	b.n	8005834 <keypad_handler+0x6c>
			else if(Keypad_Button == Keypad_prev && ++keypad_hold_timeout > 3000) {
 8005808:	7afb      	ldrb	r3, [r7, #11]
 800580a:	7bfa      	ldrb	r2, [r7, #15]
 800580c:	429a      	cmp	r2, r3
 800580e:	d111      	bne.n	8005834 <keypad_handler+0x6c>
 8005810:	89bb      	ldrh	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	81bb      	strh	r3, [r7, #12]
 8005816:	89bb      	ldrh	r3, [r7, #12]
 8005818:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800581c:	4293      	cmp	r3, r2
 800581e:	d909      	bls.n	8005834 <keypad_handler+0x6c>
				keypad_hold_timeout = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	81bb      	strh	r3, [r7, #12]
				xQueueSend(keypad_hold_queue_handle, (void*) &Keypad_Button, (TickType_t) 0);
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <keypad_handler+0x8c>)
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	f107 010b 	add.w	r1, r7, #11
 800582c:	2300      	movs	r3, #0
 800582e:	2200      	movs	r2, #0
 8005830:	f7fc fa8a 	bl	8001d48 <xQueueGenericSend>
			}
		}

		Keypad_prev = Keypad_Button;
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(1);
 8005838:	2001      	movs	r0, #1
 800583a:	f7fc ffc1 	bl	80027c0 <vTaskDelay>
		taskYIELD();
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <keypad_handler+0x90>)
 8005840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	f3bf 8f6f 	isb	sy
		KEYPAD_Update();
 800584e:	e7c6      	b.n	80057de <keypad_handler+0x16>
 8005850:	2001325c 	.word	0x2001325c
 8005854:	20013294 	.word	0x20013294
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <lcd_handler>:
	}
}

void lcd_handler(void* parameters) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	LCD5110_Init(0x37);
 8005864:	2037      	movs	r0, #55	; 0x37
 8005866:	f7fb fdff 	bl	8001468 <LCD5110_Init>

	memset(&screen1_ade_data, 0, sizeof(screen1_ade_data));
 800586a:	2210      	movs	r2, #16
 800586c:	2100      	movs	r1, #0
 800586e:	483e      	ldr	r0, [pc, #248]	; (8005968 <lcd_handler+0x10c>)
 8005870:	f000 faee 	bl	8005e50 <memset>
	memset(&screen2_ade_data, 0, sizeof(screen2_ade_data));
 8005874:	2210      	movs	r2, #16
 8005876:	2100      	movs	r1, #0
 8005878:	483c      	ldr	r0, [pc, #240]	; (800596c <lcd_handler+0x110>)
 800587a:	f000 fae9 	bl	8005e50 <memset>
	memset(&screen3_ade_data, 0, sizeof(screen3_ade_data));
 800587e:	2208      	movs	r2, #8
 8005880:	2100      	movs	r1, #0
 8005882:	483b      	ldr	r0, [pc, #236]	; (8005970 <lcd_handler+0x114>)
 8005884:	f000 fae4 	bl	8005e50 <memset>
	memset(&screen4_ade_data, 0, sizeof(screen4_ade_data));
 8005888:	220c      	movs	r2, #12
 800588a:	2100      	movs	r1, #0
 800588c:	4839      	ldr	r0, [pc, #228]	; (8005974 <lcd_handler+0x118>)
 800588e:	f000 fadf 	bl	8005e50 <memset>

	lcd_screen_1_reset();
 8005892:	f7ff fe83 	bl	800559c <lcd_screen_1_reset>
	lcd_screen_2_reset();
 8005896:	f7ff fe8d 	bl	80055b4 <lcd_screen_2_reset>
	lcd_screen_3_reset();
 800589a:	f7ff fe97 	bl	80055cc <lcd_screen_3_reset>
	lcd_screen_4_reset();
 800589e:	f7ff fea7 	bl	80055f0 <lcd_screen_4_reset>

	KEYPAD_Button_t keypad;
	LCD_Screen_t screen = LCD_Screen_3;
 80058a2:	2302      	movs	r3, #2
 80058a4:	73fb      	strb	r3, [r7, #15]

	while(1) {
		if(keypad_queue_handle != NULL) {
 80058a6:	4b34      	ldr	r3, [pc, #208]	; (8005978 <lcd_handler+0x11c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d020      	beq.n	80058f0 <lcd_handler+0x94>
			if(xQueueReceive(keypad_queue_handle, &keypad, (TickType_t) 10) == pdPASS) {
 80058ae:	4b32      	ldr	r3, [pc, #200]	; (8005978 <lcd_handler+0x11c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f107 010e 	add.w	r1, r7, #14
 80058b6:	220a      	movs	r2, #10
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fc fbed 	bl	8002098 <xQueueReceive>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d115      	bne.n	80058f0 <lcd_handler+0x94>
				switch (keypad) {
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	2b0f      	cmp	r3, #15
 80058c8:	d00c      	beq.n	80058e4 <lcd_handler+0x88>
 80058ca:	2b0f      	cmp	r3, #15
 80058cc:	dc0d      	bgt.n	80058ea <lcd_handler+0x8e>
 80058ce:	2b0d      	cmp	r3, #13
 80058d0:	d002      	beq.n	80058d8 <lcd_handler+0x7c>
 80058d2:	2b0e      	cmp	r3, #14
 80058d4:	d003      	beq.n	80058de <lcd_handler+0x82>
 80058d6:	e008      	b.n	80058ea <lcd_handler+0x8e>
					case KEYPAD_Button_B:
						screen = LCD_Screen_2;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
						break;
 80058dc:	e009      	b.n	80058f2 <lcd_handler+0x96>
					case KEYPAD_Button_C:
						screen = LCD_Screen_3;
 80058de:	2302      	movs	r3, #2
 80058e0:	73fb      	strb	r3, [r7, #15]
						break;
 80058e2:	e006      	b.n	80058f2 <lcd_handler+0x96>
					case KEYPAD_Button_D:
						screen = LCD_Screen_4;
 80058e4:	2303      	movs	r3, #3
 80058e6:	73fb      	strb	r3, [r7, #15]
						break;
 80058e8:	e003      	b.n	80058f2 <lcd_handler+0x96>
					case KEYPAD_Button_A:
					default:
						screen = LCD_Screen_1;
 80058ea:	2300      	movs	r3, #0
 80058ec:	73fb      	strb	r3, [r7, #15]
						break;
 80058ee:	e000      	b.n	80058f2 <lcd_handler+0x96>
				}
			}
 80058f0:	bf00      	nop
		}

		if(keypad_hold_queue_handle != NULL) {
 80058f2:	4b22      	ldr	r3, [pc, #136]	; (800597c <lcd_handler+0x120>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d010      	beq.n	800591c <lcd_handler+0xc0>
			if(xQueueReceive(keypad_hold_queue_handle, &keypad, (TickType_t) 10) == pdPASS) {
 80058fa:	4b20      	ldr	r3, [pc, #128]	; (800597c <lcd_handler+0x120>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f107 010e 	add.w	r1, r7, #14
 8005902:	220a      	movs	r2, #10
 8005904:	4618      	mov	r0, r3
 8005906:	f7fc fbc7 	bl	8002098 <xQueueReceive>
 800590a:	4603      	mov	r3, r0
 800590c:	2b01      	cmp	r3, #1
 800590e:	d105      	bne.n	800591c <lcd_handler+0xc0>
				switch (keypad) {
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	2b0f      	cmp	r3, #15
 8005914:	d104      	bne.n	8005920 <lcd_handler+0xc4>
					case KEYPAD_Button_D:
						lcd_screen_4_switch_mode();
 8005916:	f7ff fed7 	bl	80056c8 <lcd_screen_4_switch_mode>
						break;
 800591a:	e002      	b.n	8005922 <lcd_handler+0xc6>
					default:
						break;
				}
			}
 800591c:	bf00      	nop
 800591e:	e000      	b.n	8005922 <lcd_handler+0xc6>
						break;
 8005920:	bf00      	nop
		}

		switch (screen) {
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d00c      	beq.n	8005942 <lcd_handler+0xe6>
 8005928:	2b03      	cmp	r3, #3
 800592a:	dc0d      	bgt.n	8005948 <lcd_handler+0xec>
 800592c:	2b01      	cmp	r3, #1
 800592e:	d002      	beq.n	8005936 <lcd_handler+0xda>
 8005930:	2b02      	cmp	r3, #2
 8005932:	d003      	beq.n	800593c <lcd_handler+0xe0>
 8005934:	e008      	b.n	8005948 <lcd_handler+0xec>
			case LCD_Screen_2:
				lcd_screen_2_refresh();
 8005936:	f7ff fcb3 	bl	80052a0 <lcd_screen_2_refresh>
				break;
 800593a:	e008      	b.n	800594e <lcd_handler+0xf2>
			case LCD_Screen_3:
				lcd_screen_3_refresh();
 800593c:	f7ff fd42 	bl	80053c4 <lcd_screen_3_refresh>
				break;
 8005940:	e005      	b.n	800594e <lcd_handler+0xf2>
			case LCD_Screen_4:
				lcd_screen_4_refresh();
 8005942:	f7ff fdcb 	bl	80054dc <lcd_screen_4_refresh>
				break;
 8005946:	e002      	b.n	800594e <lcd_handler+0xf2>
			case LCD_Screen_1:
			default:
				lcd_screen_1_refresh();
 8005948:	f7ff fc14 	bl	8005174 <lcd_screen_1_refresh>
				break;
 800594c:	bf00      	nop
		}
		vTaskDelay(500);
 800594e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005952:	f7fc ff35 	bl	80027c0 <vTaskDelay>
		taskYIELD();
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <lcd_handler+0x124>)
 8005958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
		if(keypad_queue_handle != NULL) {
 8005966:	e79e      	b.n	80058a6 <lcd_handler+0x4a>
 8005968:	20013284 	.word	0x20013284
 800596c:	20013274 	.word	0x20013274
 8005970:	2001326c 	.word	0x2001326c
 8005974:	20013260 	.word	0x20013260
 8005978:	2001325c 	.word	0x2001325c
 800597c:	20013294 	.word	0x20013294
 8005980:	e000ed04 	.word	0xe000ed04

08005984 <ade_handler>:
	}
}

void ade_handler(void* parameters) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
//	char buffer[20];
	ADE_Init();
 800598c:	f7fb f91c 	bl	8000bc8 <ADE_Init>
	ADE_WriteData(IRQEN, 0x0010, 2);
 8005990:	2202      	movs	r2, #2
 8005992:	2110      	movs	r1, #16
 8005994:	200a      	movs	r0, #10
 8005996:	f7fb f979 	bl	8000c8c <ADE_WriteData>
	ADE_ReadData(RSTSTATUS, 2);
 800599a:	2102      	movs	r1, #2
 800599c:	200c      	movs	r0, #12
 800599e:	f7fb f941 	bl	8000c24 <ADE_ReadData>

	while(1) {
//		ADE_ReadData(RSTSTATUS, 2);
		taskYIELD();
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <ade_handler+0x30>)
 80059a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	e7f6      	b.n	80059a2 <ade_handler+0x1e>
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <rtc_handler>:
	}
}

void rtc_handler(void* parameters) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08c      	sub	sp, #48	; 0x30
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	ds1307_init();
 80059c0:	f7fb fa2e 	bl	8000e20 <ds1307_init>
	RTC_time_t rtc_time, rtc_time_prev;

	LCD_Screen4_RTC_t screen4_rtc;

	do {
		ds1307_get_current_time(&rtc_time_prev);
 80059c4:	f107 0314 	add.w	r3, r7, #20
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fb fa37 	bl	8000e3c <ds1307_get_current_time>
		vTaskDelay(10);
 80059ce:	200a      	movs	r0, #10
 80059d0:	f7fc fef6 	bl	80027c0 <vTaskDelay>
		taskYIELD();
 80059d4:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <rtc_handler+0x100>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	f3bf 8f6f 	isb	sy
	} while(!rtc_time_prev.time_validity);
 80059e4:	7e3b      	ldrb	r3, [r7, #24]
 80059e6:	f083 0301 	eor.w	r3, r3, #1
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e9      	bne.n	80059c4 <rtc_handler+0xc>

	while(1) {
		ds1307_get_current_time(&rtc_time);
 80059f0:	f107 031c 	add.w	r3, r7, #28
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fb fa21 	bl	8000e3c <ds1307_get_current_time>
		ds1307_get_current_date(&screen4_rtc.date);
 80059fa:	f107 0308 	add.w	r3, r7, #8
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fb fa90 	bl	8000f24 <ds1307_get_current_date>

		if(rtc_time.time_validity) {
 8005a04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d049      	beq.n	8005aa0 <rtc_handler+0xe8>
			uint32_t time_in_sec, time_in_sec_prev;
			time_in_sec = rtc_time.hours*3600 + rtc_time.minutes*60 + rtc_time.seconds;
 8005a0c:	7fbb      	ldrb	r3, [r7, #30]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a14:	fb03 f202 	mul.w	r2, r3, r2
 8005a18:	7f7b      	ldrb	r3, [r7, #29]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	1a5b      	subs	r3, r3, r1
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	7f3a      	ldrb	r2, [r7, #28]
 8005a28:	4413      	add	r3, r2
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
			time_in_sec_prev = rtc_time_prev.hours*3600 + rtc_time_prev.minutes*60 + rtc_time_prev.seconds;
 8005a2c:	7dbb      	ldrb	r3, [r7, #22]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a34:	fb03 f202 	mul.w	r2, r3, r2
 8005a38:	7d7b      	ldrb	r3, [r7, #21]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	1a5b      	subs	r3, r3, r1
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	7d3a      	ldrb	r2, [r7, #20]
 8005a48:	4413      	add	r3, r2
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
			int time_gap = time_in_sec - time_in_sec_prev;
 8005a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c

			if(time_gap < 0) time_gap += 24*3600;
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	da05      	bge.n	8005a66 <rtc_handler+0xae>
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005a60:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(time_gap == 1) lcd_screen_3_timer_count_up();
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <rtc_handler+0xb8>
 8005a6c:	f7ff fdd8 	bl	8005620 <lcd_screen_3_timer_count_up>

			rtc_time_prev = rtc_time;
 8005a70:	f107 0314 	add.w	r3, r7, #20
 8005a74:	f107 021c 	add.w	r2, r7, #28
 8005a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a7c:	6018      	str	r0, [r3, #0]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	7019      	strb	r1, [r3, #0]

			screen4_rtc.time = rtc_time;
 8005a82:	f107 030c 	add.w	r3, r7, #12
 8005a86:	f107 021c 	add.w	r2, r7, #28
 8005a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a8e:	6018      	str	r0, [r3, #0]
 8005a90:	3304      	adds	r3, #4
 8005a92:	7019      	strb	r1, [r3, #0]
			lcd_screen_4_rtc_update(screen4_rtc);
 8005a94:	f107 0308 	add.w	r3, r7, #8
 8005a98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a9c:	f7ff fdfe 	bl	800569c <lcd_screen_4_rtc_update>
		}

		vTaskDelay(200);
 8005aa0:	20c8      	movs	r0, #200	; 0xc8
 8005aa2:	f7fc fe8d 	bl	80027c0 <vTaskDelay>
		taskYIELD();
 8005aa6:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <rtc_handler+0x100>)
 8005aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
		ds1307_get_current_time(&rtc_time);
 8005ab6:	e79b      	b.n	80059f0 <rtc_handler+0x38>
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <usart_handler>:
	}
}

void usart_handler(void* parameters) {
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]



	while(1) {
		taskYIELD();
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <usart_handler+0x1c>)
 8005ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	e7f6      	b.n	8005ac4 <usart_handler+0x8>
 8005ad6:	bf00      	nop
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <LED_Init>:
	}
}

void LED_Init() {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = PORT_LED;
 8005ae2:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <LED_Init+0x64>)
 8005ae4:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8005aea:	2302      	movs	r3, #2
 8005aec:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8005aee:	2300      	movs	r3, #0
 8005af0:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8005af2:	2300      	movs	r3, #0
 8005af4:	72fb      	strb	r3, [r7, #11]

//	Red LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_R_LED;
 8005af6:	2301      	movs	r3, #1
 8005af8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8005afa:	1d3b      	adds	r3, r7, #4
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fe fb81 	bl	8004204 <GPIO_Init>

//	Green LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_G_LED;
 8005b02:	2303      	movs	r3, #3
 8005b04:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fb7b 	bl	8004204 <GPIO_Init>

//	Blue LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_B_LED;
 8005b0e:	2305      	movs	r3, #5
 8005b10:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8005b12:	1d3b      	adds	r3, r7, #4
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe fb75 	bl	8004204 <GPIO_Init>

	R_LED_OFF;
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	4808      	ldr	r0, [pc, #32]	; (8005b40 <LED_Init+0x64>)
 8005b20:	f7fe fd22 	bl	8004568 <GPIO_WriteToOutputPin>
	G_LED_OFF;
 8005b24:	2201      	movs	r2, #1
 8005b26:	2103      	movs	r1, #3
 8005b28:	4805      	ldr	r0, [pc, #20]	; (8005b40 <LED_Init+0x64>)
 8005b2a:	f7fe fd1d 	bl	8004568 <GPIO_WriteToOutputPin>
	B_LED_OFF;
 8005b2e:	2201      	movs	r2, #1
 8005b30:	2105      	movs	r1, #5
 8005b32:	4803      	ldr	r0, [pc, #12]	; (8005b40 <LED_Init+0x64>)
 8005b34:	f7fe fd18 	bl	8004568 <GPIO_WriteToOutputPin>

//	R_LED_ON;
//	G_LED_ON;
//	B_LED_ON;
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40021000 	.word	0x40021000

08005b44 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
    uint32_t pending = EXTI->PR;
 8005b4a:	4b18      	ldr	r3, [pc, #96]	; (8005bac <EXTI15_10_IRQHandler+0x68>)
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	607b      	str	r3, [r7, #4]

    if(pending & (1 << PIN_SAG)) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <EXTI15_10_IRQHandler+0x22>
        EXTI->PR |= 1 << PIN_SAG;		// clear pending flag, otherwise we'd get endless interrupts
 8005b5a:	4b14      	ldr	r3, [pc, #80]	; (8005bac <EXTI15_10_IRQHandler+0x68>)
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	4a13      	ldr	r2, [pc, #76]	; (8005bac <EXTI15_10_IRQHandler+0x68>)
 8005b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b64:	6153      	str	r3, [r2, #20]
        // handle pin SAG here
    }

    if(pending & (1 << PIN_ZX_IT)) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <EXTI15_10_IRQHandler+0x38>
        EXTI->PR |= 1 << PIN_ZX_IT;		// clear pending flag, otherwise we'd get endless interrupts
 8005b70:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <EXTI15_10_IRQHandler+0x68>)
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	4a0d      	ldr	r2, [pc, #52]	; (8005bac <EXTI15_10_IRQHandler+0x68>)
 8005b76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b7a:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
    }

    if(pending & (1 << PIN_IRQ_IT)) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <EXTI15_10_IRQHandler+0x5e>
        EXTI->PR |= 1 << PIN_IRQ_IT;	// clear pending flag, otherwise we'd get endless interrupts
 8005b86:	4b09      	ldr	r3, [pc, #36]	; (8005bac <EXTI15_10_IRQHandler+0x68>)
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	4a08      	ldr	r2, [pc, #32]	; (8005bac <EXTI15_10_IRQHandler+0x68>)
 8005b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b90:	6153      	str	r3, [r2, #20]
        // handle pin I here
        vTaskDelay(5);
 8005b92:	2005      	movs	r0, #5
 8005b94:	f7fc fe14 	bl	80027c0 <vTaskDelay>
        uint32_t rststatus = ADE_ReadData(RSTSTATUS, 2);
 8005b98:	2102      	movs	r1, #2
 8005b9a:	200c      	movs	r0, #12
 8005b9c:	f7fb f842 	bl	8000c24 <ADE_ReadData>
 8005ba0:	6038      	str	r0, [r7, #0]

        if(rststatus & (1 << IRQ_PKI)) {

		}
    }
}
 8005ba2:	bf00      	nop
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40013c00 	.word	0x40013c00

08005bb0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8005bba:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <ITM_SendChar+0x48>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a0e      	ldr	r2, [pc, #56]	; (8005bf8 <ITM_SendChar+0x48>)
 8005bc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <ITM_SendChar+0x4c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a0c      	ldr	r2, [pc, #48]	; (8005bfc <ITM_SendChar+0x4c>)
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8005bd2:	bf00      	nop
 8005bd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0f8      	beq.n	8005bd4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8005be2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	6013      	str	r3, [r2, #0]
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	e000edfc 	.word	0xe000edfc
 8005bfc:	e0000e00 	.word	0xe0000e00

08005c00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
	return 1;
 8005c04:	2301      	movs	r3, #1
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <_kill>:

int _kill(int pid, int sig)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005c1a:	f000 f8e1 	bl	8005de0 <__errno>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2216      	movs	r2, #22
 8005c22:	601a      	str	r2, [r3, #0]
	return -1;
 8005c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <_exit>:

void _exit (int status)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ffe7 	bl	8005c10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005c42:	e7fe      	b.n	8005c42 <_exit+0x12>

08005c44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	e00a      	b.n	8005c6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005c56:	f3af 8000 	nop.w
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	60ba      	str	r2, [r7, #8]
 8005c62:	b2ca      	uxtb	r2, r1
 8005c64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	dbf0      	blt.n	8005c56 <_read+0x12>
	}

return len;
 8005c74:	687b      	ldr	r3, [r7, #4]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b086      	sub	sp, #24
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e009      	b.n	8005ca4 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	60ba      	str	r2, [r7, #8]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff ff89 	bl	8005bb0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	dbf1      	blt.n	8005c90 <_write+0x12>
	}
	return len;
 8005cac:	687b      	ldr	r3, [r7, #4]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <_close>:

int _close(int file)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
	return -1;
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cde:	605a      	str	r2, [r3, #4]
	return 0;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <_isatty>:

int _isatty(int file)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
	return 1;
 8005cf6:	2301      	movs	r3, #1
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
	return 0;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d28:	4a14      	ldr	r2, [pc, #80]	; (8005d7c <_sbrk+0x5c>)
 8005d2a:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <_sbrk+0x60>)
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d34:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <_sbrk+0x64>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <_sbrk+0x64>)
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <_sbrk+0x68>)
 8005d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d42:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <_sbrk+0x64>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4413      	add	r3, r2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d207      	bcs.n	8005d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d50:	f000 f846 	bl	8005de0 <__errno>
 8005d54:	4603      	mov	r3, r0
 8005d56:	220c      	movs	r2, #12
 8005d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d5e:	e009      	b.n	8005d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d60:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <_sbrk+0x64>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d66:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <_sbrk+0x64>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <_sbrk+0x64>)
 8005d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d72:	68fb      	ldr	r3, [r7, #12]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20020000 	.word	0x20020000
 8005d80:	00000400 	.word	0x00000400
 8005d84:	20012f90 	.word	0x20012f90
 8005d88:	200132a8 	.word	0x200132a8

08005d8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005d8c:	480d      	ldr	r0, [pc, #52]	; (8005dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005d8e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005d90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d94:	480c      	ldr	r0, [pc, #48]	; (8005dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005d96:	490d      	ldr	r1, [pc, #52]	; (8005dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005d98:	4a0d      	ldr	r2, [pc, #52]	; (8005dd0 <LoopForever+0xe>)
  movs r3, #0
 8005d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d9c:	e002      	b.n	8005da4 <LoopCopyDataInit>

08005d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005da2:	3304      	adds	r3, #4

08005da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005da8:	d3f9      	bcc.n	8005d9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005daa:	4a0a      	ldr	r2, [pc, #40]	; (8005dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005dac:	4c0a      	ldr	r4, [pc, #40]	; (8005dd8 <LoopForever+0x16>)
  movs r3, #0
 8005dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005db0:	e001      	b.n	8005db6 <LoopFillZerobss>

08005db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005db4:	3204      	adds	r2, #4

08005db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005db8:	d3fb      	bcc.n	8005db2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005dba:	f000 f817 	bl	8005dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005dbe:	f7ff fc97 	bl	80056f0 <main>

08005dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8005dc2:	e7fe      	b.n	8005dc2 <LoopForever>
  ldr   r0, =_estack
 8005dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dcc:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8005dd0:	080093f4 	.word	0x080093f4
  ldr r2, =_sbss
 8005dd4:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8005dd8:	200132a8 	.word	0x200132a8

08005ddc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ddc:	e7fe      	b.n	8005ddc <ADC_IRQHandler>
	...

08005de0 <__errno>:
 8005de0:	4b01      	ldr	r3, [pc, #4]	; (8005de8 <__errno+0x8>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000034 	.word	0x20000034

08005dec <__libc_init_array>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4d0d      	ldr	r5, [pc, #52]	; (8005e24 <__libc_init_array+0x38>)
 8005df0:	4c0d      	ldr	r4, [pc, #52]	; (8005e28 <__libc_init_array+0x3c>)
 8005df2:	1b64      	subs	r4, r4, r5
 8005df4:	10a4      	asrs	r4, r4, #2
 8005df6:	2600      	movs	r6, #0
 8005df8:	42a6      	cmp	r6, r4
 8005dfa:	d109      	bne.n	8005e10 <__libc_init_array+0x24>
 8005dfc:	4d0b      	ldr	r5, [pc, #44]	; (8005e2c <__libc_init_array+0x40>)
 8005dfe:	4c0c      	ldr	r4, [pc, #48]	; (8005e30 <__libc_init_array+0x44>)
 8005e00:	f002 feb4 	bl	8008b6c <_init>
 8005e04:	1b64      	subs	r4, r4, r5
 8005e06:	10a4      	asrs	r4, r4, #2
 8005e08:	2600      	movs	r6, #0
 8005e0a:	42a6      	cmp	r6, r4
 8005e0c:	d105      	bne.n	8005e1a <__libc_init_array+0x2e>
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e14:	4798      	blx	r3
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7ee      	b.n	8005df8 <__libc_init_array+0xc>
 8005e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1e:	4798      	blx	r3
 8005e20:	3601      	adds	r6, #1
 8005e22:	e7f2      	b.n	8005e0a <__libc_init_array+0x1e>
 8005e24:	080093ec 	.word	0x080093ec
 8005e28:	080093ec 	.word	0x080093ec
 8005e2c:	080093ec 	.word	0x080093ec
 8005e30:	080093f0 	.word	0x080093f0

08005e34 <memcpy>:
 8005e34:	440a      	add	r2, r1
 8005e36:	4291      	cmp	r1, r2
 8005e38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e3c:	d100      	bne.n	8005e40 <memcpy+0xc>
 8005e3e:	4770      	bx	lr
 8005e40:	b510      	push	{r4, lr}
 8005e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e4a:	4291      	cmp	r1, r2
 8005e4c:	d1f9      	bne.n	8005e42 <memcpy+0xe>
 8005e4e:	bd10      	pop	{r4, pc}

08005e50 <memset>:
 8005e50:	4402      	add	r2, r0
 8005e52:	4603      	mov	r3, r0
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d100      	bne.n	8005e5a <memset+0xa>
 8005e58:	4770      	bx	lr
 8005e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e5e:	e7f9      	b.n	8005e54 <memset+0x4>

08005e60 <__cvt>:
 8005e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	b088      	sub	sp, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	461d      	mov	r5, r3
 8005e6a:	4614      	mov	r4, r2
 8005e6c:	bfbc      	itt	lt
 8005e6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005e72:	4614      	movlt	r4, r2
 8005e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e76:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005e78:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005e7c:	bfb6      	itet	lt
 8005e7e:	461d      	movlt	r5, r3
 8005e80:	2300      	movge	r3, #0
 8005e82:	232d      	movlt	r3, #45	; 0x2d
 8005e84:	7013      	strb	r3, [r2, #0]
 8005e86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e88:	f023 0820 	bic.w	r8, r3, #32
 8005e8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e90:	d005      	beq.n	8005e9e <__cvt+0x3e>
 8005e92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e96:	d100      	bne.n	8005e9a <__cvt+0x3a>
 8005e98:	3601      	adds	r6, #1
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e000      	b.n	8005ea0 <__cvt+0x40>
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	aa07      	add	r2, sp, #28
 8005ea2:	9204      	str	r2, [sp, #16]
 8005ea4:	aa06      	add	r2, sp, #24
 8005ea6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005eaa:	e9cd 3600 	strd	r3, r6, [sp]
 8005eae:	4622      	mov	r2, r4
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	f000 fced 	bl	8006890 <_dtoa_r>
 8005eb6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005eba:	4607      	mov	r7, r0
 8005ebc:	d102      	bne.n	8005ec4 <__cvt+0x64>
 8005ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ec0:	07db      	lsls	r3, r3, #31
 8005ec2:	d522      	bpl.n	8005f0a <__cvt+0xaa>
 8005ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ec8:	eb07 0906 	add.w	r9, r7, r6
 8005ecc:	d110      	bne.n	8005ef0 <__cvt+0x90>
 8005ece:	783b      	ldrb	r3, [r7, #0]
 8005ed0:	2b30      	cmp	r3, #48	; 0x30
 8005ed2:	d10a      	bne.n	8005eea <__cvt+0x8a>
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4629      	mov	r1, r5
 8005edc:	f7fa fe04 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ee0:	b918      	cbnz	r0, 8005eea <__cvt+0x8a>
 8005ee2:	f1c6 0601 	rsb	r6, r6, #1
 8005ee6:	f8ca 6000 	str.w	r6, [sl]
 8005eea:	f8da 3000 	ldr.w	r3, [sl]
 8005eee:	4499      	add	r9, r3
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	f7fa fdf6 	bl	8000ae8 <__aeabi_dcmpeq>
 8005efc:	b108      	cbz	r0, 8005f02 <__cvt+0xa2>
 8005efe:	f8cd 901c 	str.w	r9, [sp, #28]
 8005f02:	2230      	movs	r2, #48	; 0x30
 8005f04:	9b07      	ldr	r3, [sp, #28]
 8005f06:	454b      	cmp	r3, r9
 8005f08:	d307      	bcc.n	8005f1a <__cvt+0xba>
 8005f0a:	9b07      	ldr	r3, [sp, #28]
 8005f0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f0e:	1bdb      	subs	r3, r3, r7
 8005f10:	4638      	mov	r0, r7
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	b008      	add	sp, #32
 8005f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1a:	1c59      	adds	r1, r3, #1
 8005f1c:	9107      	str	r1, [sp, #28]
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e7f0      	b.n	8005f04 <__cvt+0xa4>

08005f22 <__exponent>:
 8005f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f24:	4603      	mov	r3, r0
 8005f26:	2900      	cmp	r1, #0
 8005f28:	bfb8      	it	lt
 8005f2a:	4249      	neglt	r1, r1
 8005f2c:	f803 2b02 	strb.w	r2, [r3], #2
 8005f30:	bfb4      	ite	lt
 8005f32:	222d      	movlt	r2, #45	; 0x2d
 8005f34:	222b      	movge	r2, #43	; 0x2b
 8005f36:	2909      	cmp	r1, #9
 8005f38:	7042      	strb	r2, [r0, #1]
 8005f3a:	dd2a      	ble.n	8005f92 <__exponent+0x70>
 8005f3c:	f10d 0407 	add.w	r4, sp, #7
 8005f40:	46a4      	mov	ip, r4
 8005f42:	270a      	movs	r7, #10
 8005f44:	46a6      	mov	lr, r4
 8005f46:	460a      	mov	r2, r1
 8005f48:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f4c:	fb07 1516 	mls	r5, r7, r6, r1
 8005f50:	3530      	adds	r5, #48	; 0x30
 8005f52:	2a63      	cmp	r2, #99	; 0x63
 8005f54:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005f58:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	dcf1      	bgt.n	8005f44 <__exponent+0x22>
 8005f60:	3130      	adds	r1, #48	; 0x30
 8005f62:	f1ae 0502 	sub.w	r5, lr, #2
 8005f66:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f6a:	1c44      	adds	r4, r0, #1
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	4561      	cmp	r1, ip
 8005f70:	d30a      	bcc.n	8005f88 <__exponent+0x66>
 8005f72:	f10d 0209 	add.w	r2, sp, #9
 8005f76:	eba2 020e 	sub.w	r2, r2, lr
 8005f7a:	4565      	cmp	r5, ip
 8005f7c:	bf88      	it	hi
 8005f7e:	2200      	movhi	r2, #0
 8005f80:	4413      	add	r3, r2
 8005f82:	1a18      	subs	r0, r3, r0
 8005f84:	b003      	add	sp, #12
 8005f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f8c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f90:	e7ed      	b.n	8005f6e <__exponent+0x4c>
 8005f92:	2330      	movs	r3, #48	; 0x30
 8005f94:	3130      	adds	r1, #48	; 0x30
 8005f96:	7083      	strb	r3, [r0, #2]
 8005f98:	70c1      	strb	r1, [r0, #3]
 8005f9a:	1d03      	adds	r3, r0, #4
 8005f9c:	e7f1      	b.n	8005f82 <__exponent+0x60>
	...

08005fa0 <_printf_float>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	ed2d 8b02 	vpush	{d8}
 8005fa8:	b091      	sub	sp, #68	; 0x44
 8005faa:	460c      	mov	r4, r1
 8005fac:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	461f      	mov	r7, r3
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	f001 fa57 	bl	8007468 <_localeconv_r>
 8005fba:	f8d0 a000 	ldr.w	sl, [r0]
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	f7fa f916 	bl	80001f0 <strlen>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	9309      	str	r3, [sp, #36]	; 0x24
 8005fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fd4:	3307      	adds	r3, #7
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	f103 0208 	add.w	r2, r3, #8
 8005fde:	f8c8 2000 	str.w	r2, [r8]
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ff2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ff4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005ff8:	ee08 0a10 	vmov	s16, r0
 8005ffc:	4ba0      	ldr	r3, [pc, #640]	; (8006280 <_printf_float+0x2e0>)
 8005ffe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006006:	f7fa fda1 	bl	8000b4c <__aeabi_dcmpun>
 800600a:	bb88      	cbnz	r0, 8006070 <_printf_float+0xd0>
 800600c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006010:	4b9b      	ldr	r3, [pc, #620]	; (8006280 <_printf_float+0x2e0>)
 8006012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006016:	f7fa fd7b 	bl	8000b10 <__aeabi_dcmple>
 800601a:	bb48      	cbnz	r0, 8006070 <_printf_float+0xd0>
 800601c:	2200      	movs	r2, #0
 800601e:	2300      	movs	r3, #0
 8006020:	4640      	mov	r0, r8
 8006022:	4649      	mov	r1, r9
 8006024:	f7fa fd6a 	bl	8000afc <__aeabi_dcmplt>
 8006028:	b110      	cbz	r0, 8006030 <_printf_float+0x90>
 800602a:	232d      	movs	r3, #45	; 0x2d
 800602c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006030:	4b94      	ldr	r3, [pc, #592]	; (8006284 <_printf_float+0x2e4>)
 8006032:	4895      	ldr	r0, [pc, #596]	; (8006288 <_printf_float+0x2e8>)
 8006034:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006038:	bf94      	ite	ls
 800603a:	4698      	movls	r8, r3
 800603c:	4680      	movhi	r8, r0
 800603e:	2303      	movs	r3, #3
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006044:	f023 0304 	bic.w	r3, r3, #4
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	f04f 0900 	mov.w	r9, #0
 800604e:	9700      	str	r7, [sp, #0]
 8006050:	4633      	mov	r3, r6
 8006052:	aa0f      	add	r2, sp, #60	; 0x3c
 8006054:	4621      	mov	r1, r4
 8006056:	4628      	mov	r0, r5
 8006058:	f000 f9da 	bl	8006410 <_printf_common>
 800605c:	3001      	adds	r0, #1
 800605e:	f040 8092 	bne.w	8006186 <_printf_float+0x1e6>
 8006062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006066:	b011      	add	sp, #68	; 0x44
 8006068:	ecbd 8b02 	vpop	{d8}
 800606c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	4640      	mov	r0, r8
 8006076:	4649      	mov	r1, r9
 8006078:	f7fa fd68 	bl	8000b4c <__aeabi_dcmpun>
 800607c:	b140      	cbz	r0, 8006090 <_printf_float+0xf0>
 800607e:	464b      	mov	r3, r9
 8006080:	2b00      	cmp	r3, #0
 8006082:	bfbc      	itt	lt
 8006084:	232d      	movlt	r3, #45	; 0x2d
 8006086:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800608a:	4880      	ldr	r0, [pc, #512]	; (800628c <_printf_float+0x2ec>)
 800608c:	4b80      	ldr	r3, [pc, #512]	; (8006290 <_printf_float+0x2f0>)
 800608e:	e7d1      	b.n	8006034 <_printf_float+0x94>
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 8006098:	d143      	bne.n	8006122 <_printf_float+0x182>
 800609a:	2306      	movs	r3, #6
 800609c:	6063      	str	r3, [r4, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a2:	9206      	str	r2, [sp, #24]
 80060a4:	aa0e      	add	r2, sp, #56	; 0x38
 80060a6:	e9cd b204 	strd	fp, r2, [sp, #16]
 80060aa:	aa0d      	add	r2, sp, #52	; 0x34
 80060ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060b0:	9203      	str	r2, [sp, #12]
 80060b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80060b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80060ba:	6023      	str	r3, [r4, #0]
 80060bc:	6863      	ldr	r3, [r4, #4]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	4628      	mov	r0, r5
 80060c6:	910a      	str	r1, [sp, #40]	; 0x28
 80060c8:	f7ff feca 	bl	8005e60 <__cvt>
 80060cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060ce:	2947      	cmp	r1, #71	; 0x47
 80060d0:	4680      	mov	r8, r0
 80060d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060d4:	d108      	bne.n	80060e8 <_printf_float+0x148>
 80060d6:	1cc8      	adds	r0, r1, #3
 80060d8:	db02      	blt.n	80060e0 <_printf_float+0x140>
 80060da:	6863      	ldr	r3, [r4, #4]
 80060dc:	4299      	cmp	r1, r3
 80060de:	dd40      	ble.n	8006162 <_printf_float+0x1c2>
 80060e0:	f1ab 0b02 	sub.w	fp, fp, #2
 80060e4:	fa5f fb8b 	uxtb.w	fp, fp
 80060e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060ec:	d81f      	bhi.n	800612e <_printf_float+0x18e>
 80060ee:	3901      	subs	r1, #1
 80060f0:	465a      	mov	r2, fp
 80060f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060f6:	910d      	str	r1, [sp, #52]	; 0x34
 80060f8:	f7ff ff13 	bl	8005f22 <__exponent>
 80060fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060fe:	1813      	adds	r3, r2, r0
 8006100:	2a01      	cmp	r2, #1
 8006102:	4681      	mov	r9, r0
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	dc02      	bgt.n	800610e <_printf_float+0x16e>
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	07d2      	lsls	r2, r2, #31
 800610c:	d501      	bpl.n	8006112 <_printf_float+0x172>
 800610e:	3301      	adds	r3, #1
 8006110:	6123      	str	r3, [r4, #16]
 8006112:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006116:	2b00      	cmp	r3, #0
 8006118:	d099      	beq.n	800604e <_printf_float+0xae>
 800611a:	232d      	movs	r3, #45	; 0x2d
 800611c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006120:	e795      	b.n	800604e <_printf_float+0xae>
 8006122:	2947      	cmp	r1, #71	; 0x47
 8006124:	d1bb      	bne.n	800609e <_printf_float+0xfe>
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1b9      	bne.n	800609e <_printf_float+0xfe>
 800612a:	2301      	movs	r3, #1
 800612c:	e7b6      	b.n	800609c <_printf_float+0xfc>
 800612e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006132:	d118      	bne.n	8006166 <_printf_float+0x1c6>
 8006134:	2900      	cmp	r1, #0
 8006136:	6863      	ldr	r3, [r4, #4]
 8006138:	dd0b      	ble.n	8006152 <_printf_float+0x1b2>
 800613a:	6121      	str	r1, [r4, #16]
 800613c:	b913      	cbnz	r3, 8006144 <_printf_float+0x1a4>
 800613e:	6822      	ldr	r2, [r4, #0]
 8006140:	07d0      	lsls	r0, r2, #31
 8006142:	d502      	bpl.n	800614a <_printf_float+0x1aa>
 8006144:	3301      	adds	r3, #1
 8006146:	440b      	add	r3, r1
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	65a1      	str	r1, [r4, #88]	; 0x58
 800614c:	f04f 0900 	mov.w	r9, #0
 8006150:	e7df      	b.n	8006112 <_printf_float+0x172>
 8006152:	b913      	cbnz	r3, 800615a <_printf_float+0x1ba>
 8006154:	6822      	ldr	r2, [r4, #0]
 8006156:	07d2      	lsls	r2, r2, #31
 8006158:	d501      	bpl.n	800615e <_printf_float+0x1be>
 800615a:	3302      	adds	r3, #2
 800615c:	e7f4      	b.n	8006148 <_printf_float+0x1a8>
 800615e:	2301      	movs	r3, #1
 8006160:	e7f2      	b.n	8006148 <_printf_float+0x1a8>
 8006162:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006168:	4299      	cmp	r1, r3
 800616a:	db05      	blt.n	8006178 <_printf_float+0x1d8>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	6121      	str	r1, [r4, #16]
 8006170:	07d8      	lsls	r0, r3, #31
 8006172:	d5ea      	bpl.n	800614a <_printf_float+0x1aa>
 8006174:	1c4b      	adds	r3, r1, #1
 8006176:	e7e7      	b.n	8006148 <_printf_float+0x1a8>
 8006178:	2900      	cmp	r1, #0
 800617a:	bfd4      	ite	le
 800617c:	f1c1 0202 	rsble	r2, r1, #2
 8006180:	2201      	movgt	r2, #1
 8006182:	4413      	add	r3, r2
 8006184:	e7e0      	b.n	8006148 <_printf_float+0x1a8>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	055a      	lsls	r2, r3, #21
 800618a:	d407      	bmi.n	800619c <_printf_float+0x1fc>
 800618c:	6923      	ldr	r3, [r4, #16]
 800618e:	4642      	mov	r2, r8
 8006190:	4631      	mov	r1, r6
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	d12c      	bne.n	80061f4 <_printf_float+0x254>
 800619a:	e762      	b.n	8006062 <_printf_float+0xc2>
 800619c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061a0:	f240 80e0 	bls.w	8006364 <_printf_float+0x3c4>
 80061a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061a8:	2200      	movs	r2, #0
 80061aa:	2300      	movs	r3, #0
 80061ac:	f7fa fc9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d034      	beq.n	800621e <_printf_float+0x27e>
 80061b4:	4a37      	ldr	r2, [pc, #220]	; (8006294 <_printf_float+0x2f4>)
 80061b6:	2301      	movs	r3, #1
 80061b8:	4631      	mov	r1, r6
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	f43f af4f 	beq.w	8006062 <_printf_float+0xc2>
 80061c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061c8:	429a      	cmp	r2, r3
 80061ca:	db02      	blt.n	80061d2 <_printf_float+0x232>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	07d8      	lsls	r0, r3, #31
 80061d0:	d510      	bpl.n	80061f4 <_printf_float+0x254>
 80061d2:	ee18 3a10 	vmov	r3, s16
 80061d6:	4652      	mov	r2, sl
 80061d8:	4631      	mov	r1, r6
 80061da:	4628      	mov	r0, r5
 80061dc:	47b8      	blx	r7
 80061de:	3001      	adds	r0, #1
 80061e0:	f43f af3f 	beq.w	8006062 <_printf_float+0xc2>
 80061e4:	f04f 0800 	mov.w	r8, #0
 80061e8:	f104 091a 	add.w	r9, r4, #26
 80061ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ee:	3b01      	subs	r3, #1
 80061f0:	4543      	cmp	r3, r8
 80061f2:	dc09      	bgt.n	8006208 <_printf_float+0x268>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	079b      	lsls	r3, r3, #30
 80061f8:	f100 8105 	bmi.w	8006406 <_printf_float+0x466>
 80061fc:	68e0      	ldr	r0, [r4, #12]
 80061fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006200:	4298      	cmp	r0, r3
 8006202:	bfb8      	it	lt
 8006204:	4618      	movlt	r0, r3
 8006206:	e72e      	b.n	8006066 <_printf_float+0xc6>
 8006208:	2301      	movs	r3, #1
 800620a:	464a      	mov	r2, r9
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	f43f af25 	beq.w	8006062 <_printf_float+0xc2>
 8006218:	f108 0801 	add.w	r8, r8, #1
 800621c:	e7e6      	b.n	80061ec <_printf_float+0x24c>
 800621e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006220:	2b00      	cmp	r3, #0
 8006222:	dc39      	bgt.n	8006298 <_printf_float+0x2f8>
 8006224:	4a1b      	ldr	r2, [pc, #108]	; (8006294 <_printf_float+0x2f4>)
 8006226:	2301      	movs	r3, #1
 8006228:	4631      	mov	r1, r6
 800622a:	4628      	mov	r0, r5
 800622c:	47b8      	blx	r7
 800622e:	3001      	adds	r0, #1
 8006230:	f43f af17 	beq.w	8006062 <_printf_float+0xc2>
 8006234:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006238:	4313      	orrs	r3, r2
 800623a:	d102      	bne.n	8006242 <_printf_float+0x2a2>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	07d9      	lsls	r1, r3, #31
 8006240:	d5d8      	bpl.n	80061f4 <_printf_float+0x254>
 8006242:	ee18 3a10 	vmov	r3, s16
 8006246:	4652      	mov	r2, sl
 8006248:	4631      	mov	r1, r6
 800624a:	4628      	mov	r0, r5
 800624c:	47b8      	blx	r7
 800624e:	3001      	adds	r0, #1
 8006250:	f43f af07 	beq.w	8006062 <_printf_float+0xc2>
 8006254:	f04f 0900 	mov.w	r9, #0
 8006258:	f104 0a1a 	add.w	sl, r4, #26
 800625c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800625e:	425b      	negs	r3, r3
 8006260:	454b      	cmp	r3, r9
 8006262:	dc01      	bgt.n	8006268 <_printf_float+0x2c8>
 8006264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006266:	e792      	b.n	800618e <_printf_float+0x1ee>
 8006268:	2301      	movs	r3, #1
 800626a:	4652      	mov	r2, sl
 800626c:	4631      	mov	r1, r6
 800626e:	4628      	mov	r0, r5
 8006270:	47b8      	blx	r7
 8006272:	3001      	adds	r0, #1
 8006274:	f43f aef5 	beq.w	8006062 <_printf_float+0xc2>
 8006278:	f109 0901 	add.w	r9, r9, #1
 800627c:	e7ee      	b.n	800625c <_printf_float+0x2bc>
 800627e:	bf00      	nop
 8006280:	7fefffff 	.word	0x7fefffff
 8006284:	0800900c 	.word	0x0800900c
 8006288:	08009010 	.word	0x08009010
 800628c:	08009018 	.word	0x08009018
 8006290:	08009014 	.word	0x08009014
 8006294:	0800901c 	.word	0x0800901c
 8006298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800629a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800629c:	429a      	cmp	r2, r3
 800629e:	bfa8      	it	ge
 80062a0:	461a      	movge	r2, r3
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	4691      	mov	r9, r2
 80062a6:	dc37      	bgt.n	8006318 <_printf_float+0x378>
 80062a8:	f04f 0b00 	mov.w	fp, #0
 80062ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062b0:	f104 021a 	add.w	r2, r4, #26
 80062b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062b6:	9309      	str	r3, [sp, #36]	; 0x24
 80062b8:	eba3 0309 	sub.w	r3, r3, r9
 80062bc:	455b      	cmp	r3, fp
 80062be:	dc33      	bgt.n	8006328 <_printf_float+0x388>
 80062c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062c4:	429a      	cmp	r2, r3
 80062c6:	db3b      	blt.n	8006340 <_printf_float+0x3a0>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	07da      	lsls	r2, r3, #31
 80062cc:	d438      	bmi.n	8006340 <_printf_float+0x3a0>
 80062ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	eba2 0901 	sub.w	r9, r2, r1
 80062da:	4599      	cmp	r9, r3
 80062dc:	bfa8      	it	ge
 80062de:	4699      	movge	r9, r3
 80062e0:	f1b9 0f00 	cmp.w	r9, #0
 80062e4:	dc35      	bgt.n	8006352 <_printf_float+0x3b2>
 80062e6:	f04f 0800 	mov.w	r8, #0
 80062ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ee:	f104 0a1a 	add.w	sl, r4, #26
 80062f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	eba3 0309 	sub.w	r3, r3, r9
 80062fc:	4543      	cmp	r3, r8
 80062fe:	f77f af79 	ble.w	80061f4 <_printf_float+0x254>
 8006302:	2301      	movs	r3, #1
 8006304:	4652      	mov	r2, sl
 8006306:	4631      	mov	r1, r6
 8006308:	4628      	mov	r0, r5
 800630a:	47b8      	blx	r7
 800630c:	3001      	adds	r0, #1
 800630e:	f43f aea8 	beq.w	8006062 <_printf_float+0xc2>
 8006312:	f108 0801 	add.w	r8, r8, #1
 8006316:	e7ec      	b.n	80062f2 <_printf_float+0x352>
 8006318:	4613      	mov	r3, r2
 800631a:	4631      	mov	r1, r6
 800631c:	4642      	mov	r2, r8
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	d1c0      	bne.n	80062a8 <_printf_float+0x308>
 8006326:	e69c      	b.n	8006062 <_printf_float+0xc2>
 8006328:	2301      	movs	r3, #1
 800632a:	4631      	mov	r1, r6
 800632c:	4628      	mov	r0, r5
 800632e:	9209      	str	r2, [sp, #36]	; 0x24
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f ae95 	beq.w	8006062 <_printf_float+0xc2>
 8006338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800633a:	f10b 0b01 	add.w	fp, fp, #1
 800633e:	e7b9      	b.n	80062b4 <_printf_float+0x314>
 8006340:	ee18 3a10 	vmov	r3, s16
 8006344:	4652      	mov	r2, sl
 8006346:	4631      	mov	r1, r6
 8006348:	4628      	mov	r0, r5
 800634a:	47b8      	blx	r7
 800634c:	3001      	adds	r0, #1
 800634e:	d1be      	bne.n	80062ce <_printf_float+0x32e>
 8006350:	e687      	b.n	8006062 <_printf_float+0xc2>
 8006352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006354:	464b      	mov	r3, r9
 8006356:	4442      	add	r2, r8
 8006358:	4631      	mov	r1, r6
 800635a:	4628      	mov	r0, r5
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	d1c1      	bne.n	80062e6 <_printf_float+0x346>
 8006362:	e67e      	b.n	8006062 <_printf_float+0xc2>
 8006364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006366:	2a01      	cmp	r2, #1
 8006368:	dc01      	bgt.n	800636e <_printf_float+0x3ce>
 800636a:	07db      	lsls	r3, r3, #31
 800636c:	d538      	bpl.n	80063e0 <_printf_float+0x440>
 800636e:	2301      	movs	r3, #1
 8006370:	4642      	mov	r2, r8
 8006372:	4631      	mov	r1, r6
 8006374:	4628      	mov	r0, r5
 8006376:	47b8      	blx	r7
 8006378:	3001      	adds	r0, #1
 800637a:	f43f ae72 	beq.w	8006062 <_printf_float+0xc2>
 800637e:	ee18 3a10 	vmov	r3, s16
 8006382:	4652      	mov	r2, sl
 8006384:	4631      	mov	r1, r6
 8006386:	4628      	mov	r0, r5
 8006388:	47b8      	blx	r7
 800638a:	3001      	adds	r0, #1
 800638c:	f43f ae69 	beq.w	8006062 <_printf_float+0xc2>
 8006390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006394:	2200      	movs	r2, #0
 8006396:	2300      	movs	r3, #0
 8006398:	f7fa fba6 	bl	8000ae8 <__aeabi_dcmpeq>
 800639c:	b9d8      	cbnz	r0, 80063d6 <_printf_float+0x436>
 800639e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063a0:	f108 0201 	add.w	r2, r8, #1
 80063a4:	3b01      	subs	r3, #1
 80063a6:	4631      	mov	r1, r6
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b8      	blx	r7
 80063ac:	3001      	adds	r0, #1
 80063ae:	d10e      	bne.n	80063ce <_printf_float+0x42e>
 80063b0:	e657      	b.n	8006062 <_printf_float+0xc2>
 80063b2:	2301      	movs	r3, #1
 80063b4:	4652      	mov	r2, sl
 80063b6:	4631      	mov	r1, r6
 80063b8:	4628      	mov	r0, r5
 80063ba:	47b8      	blx	r7
 80063bc:	3001      	adds	r0, #1
 80063be:	f43f ae50 	beq.w	8006062 <_printf_float+0xc2>
 80063c2:	f108 0801 	add.w	r8, r8, #1
 80063c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c8:	3b01      	subs	r3, #1
 80063ca:	4543      	cmp	r3, r8
 80063cc:	dcf1      	bgt.n	80063b2 <_printf_float+0x412>
 80063ce:	464b      	mov	r3, r9
 80063d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063d4:	e6dc      	b.n	8006190 <_printf_float+0x1f0>
 80063d6:	f04f 0800 	mov.w	r8, #0
 80063da:	f104 0a1a 	add.w	sl, r4, #26
 80063de:	e7f2      	b.n	80063c6 <_printf_float+0x426>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4642      	mov	r2, r8
 80063e4:	e7df      	b.n	80063a6 <_printf_float+0x406>
 80063e6:	2301      	movs	r3, #1
 80063e8:	464a      	mov	r2, r9
 80063ea:	4631      	mov	r1, r6
 80063ec:	4628      	mov	r0, r5
 80063ee:	47b8      	blx	r7
 80063f0:	3001      	adds	r0, #1
 80063f2:	f43f ae36 	beq.w	8006062 <_printf_float+0xc2>
 80063f6:	f108 0801 	add.w	r8, r8, #1
 80063fa:	68e3      	ldr	r3, [r4, #12]
 80063fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063fe:	1a5b      	subs	r3, r3, r1
 8006400:	4543      	cmp	r3, r8
 8006402:	dcf0      	bgt.n	80063e6 <_printf_float+0x446>
 8006404:	e6fa      	b.n	80061fc <_printf_float+0x25c>
 8006406:	f04f 0800 	mov.w	r8, #0
 800640a:	f104 0919 	add.w	r9, r4, #25
 800640e:	e7f4      	b.n	80063fa <_printf_float+0x45a>

08006410 <_printf_common>:
 8006410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006414:	4616      	mov	r6, r2
 8006416:	4699      	mov	r9, r3
 8006418:	688a      	ldr	r2, [r1, #8]
 800641a:	690b      	ldr	r3, [r1, #16]
 800641c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006420:	4293      	cmp	r3, r2
 8006422:	bfb8      	it	lt
 8006424:	4613      	movlt	r3, r2
 8006426:	6033      	str	r3, [r6, #0]
 8006428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800642c:	4607      	mov	r7, r0
 800642e:	460c      	mov	r4, r1
 8006430:	b10a      	cbz	r2, 8006436 <_printf_common+0x26>
 8006432:	3301      	adds	r3, #1
 8006434:	6033      	str	r3, [r6, #0]
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	0699      	lsls	r1, r3, #26
 800643a:	bf42      	ittt	mi
 800643c:	6833      	ldrmi	r3, [r6, #0]
 800643e:	3302      	addmi	r3, #2
 8006440:	6033      	strmi	r3, [r6, #0]
 8006442:	6825      	ldr	r5, [r4, #0]
 8006444:	f015 0506 	ands.w	r5, r5, #6
 8006448:	d106      	bne.n	8006458 <_printf_common+0x48>
 800644a:	f104 0a19 	add.w	sl, r4, #25
 800644e:	68e3      	ldr	r3, [r4, #12]
 8006450:	6832      	ldr	r2, [r6, #0]
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	42ab      	cmp	r3, r5
 8006456:	dc26      	bgt.n	80064a6 <_printf_common+0x96>
 8006458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800645c:	1e13      	subs	r3, r2, #0
 800645e:	6822      	ldr	r2, [r4, #0]
 8006460:	bf18      	it	ne
 8006462:	2301      	movne	r3, #1
 8006464:	0692      	lsls	r2, r2, #26
 8006466:	d42b      	bmi.n	80064c0 <_printf_common+0xb0>
 8006468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800646c:	4649      	mov	r1, r9
 800646e:	4638      	mov	r0, r7
 8006470:	47c0      	blx	r8
 8006472:	3001      	adds	r0, #1
 8006474:	d01e      	beq.n	80064b4 <_printf_common+0xa4>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	68e5      	ldr	r5, [r4, #12]
 800647a:	6832      	ldr	r2, [r6, #0]
 800647c:	f003 0306 	and.w	r3, r3, #6
 8006480:	2b04      	cmp	r3, #4
 8006482:	bf08      	it	eq
 8006484:	1aad      	subeq	r5, r5, r2
 8006486:	68a3      	ldr	r3, [r4, #8]
 8006488:	6922      	ldr	r2, [r4, #16]
 800648a:	bf0c      	ite	eq
 800648c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006490:	2500      	movne	r5, #0
 8006492:	4293      	cmp	r3, r2
 8006494:	bfc4      	itt	gt
 8006496:	1a9b      	subgt	r3, r3, r2
 8006498:	18ed      	addgt	r5, r5, r3
 800649a:	2600      	movs	r6, #0
 800649c:	341a      	adds	r4, #26
 800649e:	42b5      	cmp	r5, r6
 80064a0:	d11a      	bne.n	80064d8 <_printf_common+0xc8>
 80064a2:	2000      	movs	r0, #0
 80064a4:	e008      	b.n	80064b8 <_printf_common+0xa8>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4652      	mov	r2, sl
 80064aa:	4649      	mov	r1, r9
 80064ac:	4638      	mov	r0, r7
 80064ae:	47c0      	blx	r8
 80064b0:	3001      	adds	r0, #1
 80064b2:	d103      	bne.n	80064bc <_printf_common+0xac>
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064bc:	3501      	adds	r5, #1
 80064be:	e7c6      	b.n	800644e <_printf_common+0x3e>
 80064c0:	18e1      	adds	r1, r4, r3
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	2030      	movs	r0, #48	; 0x30
 80064c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064ca:	4422      	add	r2, r4
 80064cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064d4:	3302      	adds	r3, #2
 80064d6:	e7c7      	b.n	8006468 <_printf_common+0x58>
 80064d8:	2301      	movs	r3, #1
 80064da:	4622      	mov	r2, r4
 80064dc:	4649      	mov	r1, r9
 80064de:	4638      	mov	r0, r7
 80064e0:	47c0      	blx	r8
 80064e2:	3001      	adds	r0, #1
 80064e4:	d0e6      	beq.n	80064b4 <_printf_common+0xa4>
 80064e6:	3601      	adds	r6, #1
 80064e8:	e7d9      	b.n	800649e <_printf_common+0x8e>
	...

080064ec <_printf_i>:
 80064ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064f0:	460c      	mov	r4, r1
 80064f2:	4691      	mov	r9, r2
 80064f4:	7e27      	ldrb	r7, [r4, #24]
 80064f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064f8:	2f78      	cmp	r7, #120	; 0x78
 80064fa:	4680      	mov	r8, r0
 80064fc:	469a      	mov	sl, r3
 80064fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006502:	d807      	bhi.n	8006514 <_printf_i+0x28>
 8006504:	2f62      	cmp	r7, #98	; 0x62
 8006506:	d80a      	bhi.n	800651e <_printf_i+0x32>
 8006508:	2f00      	cmp	r7, #0
 800650a:	f000 80d8 	beq.w	80066be <_printf_i+0x1d2>
 800650e:	2f58      	cmp	r7, #88	; 0x58
 8006510:	f000 80a3 	beq.w	800665a <_printf_i+0x16e>
 8006514:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800651c:	e03a      	b.n	8006594 <_printf_i+0xa8>
 800651e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006522:	2b15      	cmp	r3, #21
 8006524:	d8f6      	bhi.n	8006514 <_printf_i+0x28>
 8006526:	a001      	add	r0, pc, #4	; (adr r0, 800652c <_printf_i+0x40>)
 8006528:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800652c:	08006585 	.word	0x08006585
 8006530:	08006599 	.word	0x08006599
 8006534:	08006515 	.word	0x08006515
 8006538:	08006515 	.word	0x08006515
 800653c:	08006515 	.word	0x08006515
 8006540:	08006515 	.word	0x08006515
 8006544:	08006599 	.word	0x08006599
 8006548:	08006515 	.word	0x08006515
 800654c:	08006515 	.word	0x08006515
 8006550:	08006515 	.word	0x08006515
 8006554:	08006515 	.word	0x08006515
 8006558:	080066a5 	.word	0x080066a5
 800655c:	080065c9 	.word	0x080065c9
 8006560:	08006687 	.word	0x08006687
 8006564:	08006515 	.word	0x08006515
 8006568:	08006515 	.word	0x08006515
 800656c:	080066c7 	.word	0x080066c7
 8006570:	08006515 	.word	0x08006515
 8006574:	080065c9 	.word	0x080065c9
 8006578:	08006515 	.word	0x08006515
 800657c:	08006515 	.word	0x08006515
 8006580:	0800668f 	.word	0x0800668f
 8006584:	680b      	ldr	r3, [r1, #0]
 8006586:	1d1a      	adds	r2, r3, #4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	600a      	str	r2, [r1, #0]
 800658c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006594:	2301      	movs	r3, #1
 8006596:	e0a3      	b.n	80066e0 <_printf_i+0x1f4>
 8006598:	6825      	ldr	r5, [r4, #0]
 800659a:	6808      	ldr	r0, [r1, #0]
 800659c:	062e      	lsls	r6, r5, #24
 800659e:	f100 0304 	add.w	r3, r0, #4
 80065a2:	d50a      	bpl.n	80065ba <_printf_i+0xce>
 80065a4:	6805      	ldr	r5, [r0, #0]
 80065a6:	600b      	str	r3, [r1, #0]
 80065a8:	2d00      	cmp	r5, #0
 80065aa:	da03      	bge.n	80065b4 <_printf_i+0xc8>
 80065ac:	232d      	movs	r3, #45	; 0x2d
 80065ae:	426d      	negs	r5, r5
 80065b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b4:	485e      	ldr	r0, [pc, #376]	; (8006730 <_printf_i+0x244>)
 80065b6:	230a      	movs	r3, #10
 80065b8:	e019      	b.n	80065ee <_printf_i+0x102>
 80065ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80065be:	6805      	ldr	r5, [r0, #0]
 80065c0:	600b      	str	r3, [r1, #0]
 80065c2:	bf18      	it	ne
 80065c4:	b22d      	sxthne	r5, r5
 80065c6:	e7ef      	b.n	80065a8 <_printf_i+0xbc>
 80065c8:	680b      	ldr	r3, [r1, #0]
 80065ca:	6825      	ldr	r5, [r4, #0]
 80065cc:	1d18      	adds	r0, r3, #4
 80065ce:	6008      	str	r0, [r1, #0]
 80065d0:	0628      	lsls	r0, r5, #24
 80065d2:	d501      	bpl.n	80065d8 <_printf_i+0xec>
 80065d4:	681d      	ldr	r5, [r3, #0]
 80065d6:	e002      	b.n	80065de <_printf_i+0xf2>
 80065d8:	0669      	lsls	r1, r5, #25
 80065da:	d5fb      	bpl.n	80065d4 <_printf_i+0xe8>
 80065dc:	881d      	ldrh	r5, [r3, #0]
 80065de:	4854      	ldr	r0, [pc, #336]	; (8006730 <_printf_i+0x244>)
 80065e0:	2f6f      	cmp	r7, #111	; 0x6f
 80065e2:	bf0c      	ite	eq
 80065e4:	2308      	moveq	r3, #8
 80065e6:	230a      	movne	r3, #10
 80065e8:	2100      	movs	r1, #0
 80065ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ee:	6866      	ldr	r6, [r4, #4]
 80065f0:	60a6      	str	r6, [r4, #8]
 80065f2:	2e00      	cmp	r6, #0
 80065f4:	bfa2      	ittt	ge
 80065f6:	6821      	ldrge	r1, [r4, #0]
 80065f8:	f021 0104 	bicge.w	r1, r1, #4
 80065fc:	6021      	strge	r1, [r4, #0]
 80065fe:	b90d      	cbnz	r5, 8006604 <_printf_i+0x118>
 8006600:	2e00      	cmp	r6, #0
 8006602:	d04d      	beq.n	80066a0 <_printf_i+0x1b4>
 8006604:	4616      	mov	r6, r2
 8006606:	fbb5 f1f3 	udiv	r1, r5, r3
 800660a:	fb03 5711 	mls	r7, r3, r1, r5
 800660e:	5dc7      	ldrb	r7, [r0, r7]
 8006610:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006614:	462f      	mov	r7, r5
 8006616:	42bb      	cmp	r3, r7
 8006618:	460d      	mov	r5, r1
 800661a:	d9f4      	bls.n	8006606 <_printf_i+0x11a>
 800661c:	2b08      	cmp	r3, #8
 800661e:	d10b      	bne.n	8006638 <_printf_i+0x14c>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	07df      	lsls	r7, r3, #31
 8006624:	d508      	bpl.n	8006638 <_printf_i+0x14c>
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	6861      	ldr	r1, [r4, #4]
 800662a:	4299      	cmp	r1, r3
 800662c:	bfde      	ittt	le
 800662e:	2330      	movle	r3, #48	; 0x30
 8006630:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006634:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006638:	1b92      	subs	r2, r2, r6
 800663a:	6122      	str	r2, [r4, #16]
 800663c:	f8cd a000 	str.w	sl, [sp]
 8006640:	464b      	mov	r3, r9
 8006642:	aa03      	add	r2, sp, #12
 8006644:	4621      	mov	r1, r4
 8006646:	4640      	mov	r0, r8
 8006648:	f7ff fee2 	bl	8006410 <_printf_common>
 800664c:	3001      	adds	r0, #1
 800664e:	d14c      	bne.n	80066ea <_printf_i+0x1fe>
 8006650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006654:	b004      	add	sp, #16
 8006656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665a:	4835      	ldr	r0, [pc, #212]	; (8006730 <_printf_i+0x244>)
 800665c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	680e      	ldr	r6, [r1, #0]
 8006664:	061f      	lsls	r7, r3, #24
 8006666:	f856 5b04 	ldr.w	r5, [r6], #4
 800666a:	600e      	str	r6, [r1, #0]
 800666c:	d514      	bpl.n	8006698 <_printf_i+0x1ac>
 800666e:	07d9      	lsls	r1, r3, #31
 8006670:	bf44      	itt	mi
 8006672:	f043 0320 	orrmi.w	r3, r3, #32
 8006676:	6023      	strmi	r3, [r4, #0]
 8006678:	b91d      	cbnz	r5, 8006682 <_printf_i+0x196>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	f023 0320 	bic.w	r3, r3, #32
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	2310      	movs	r3, #16
 8006684:	e7b0      	b.n	80065e8 <_printf_i+0xfc>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	f043 0320 	orr.w	r3, r3, #32
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	2378      	movs	r3, #120	; 0x78
 8006690:	4828      	ldr	r0, [pc, #160]	; (8006734 <_printf_i+0x248>)
 8006692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006696:	e7e3      	b.n	8006660 <_printf_i+0x174>
 8006698:	065e      	lsls	r6, r3, #25
 800669a:	bf48      	it	mi
 800669c:	b2ad      	uxthmi	r5, r5
 800669e:	e7e6      	b.n	800666e <_printf_i+0x182>
 80066a0:	4616      	mov	r6, r2
 80066a2:	e7bb      	b.n	800661c <_printf_i+0x130>
 80066a4:	680b      	ldr	r3, [r1, #0]
 80066a6:	6826      	ldr	r6, [r4, #0]
 80066a8:	6960      	ldr	r0, [r4, #20]
 80066aa:	1d1d      	adds	r5, r3, #4
 80066ac:	600d      	str	r5, [r1, #0]
 80066ae:	0635      	lsls	r5, r6, #24
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	d501      	bpl.n	80066b8 <_printf_i+0x1cc>
 80066b4:	6018      	str	r0, [r3, #0]
 80066b6:	e002      	b.n	80066be <_printf_i+0x1d2>
 80066b8:	0671      	lsls	r1, r6, #25
 80066ba:	d5fb      	bpl.n	80066b4 <_printf_i+0x1c8>
 80066bc:	8018      	strh	r0, [r3, #0]
 80066be:	2300      	movs	r3, #0
 80066c0:	6123      	str	r3, [r4, #16]
 80066c2:	4616      	mov	r6, r2
 80066c4:	e7ba      	b.n	800663c <_printf_i+0x150>
 80066c6:	680b      	ldr	r3, [r1, #0]
 80066c8:	1d1a      	adds	r2, r3, #4
 80066ca:	600a      	str	r2, [r1, #0]
 80066cc:	681e      	ldr	r6, [r3, #0]
 80066ce:	6862      	ldr	r2, [r4, #4]
 80066d0:	2100      	movs	r1, #0
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7f9 fd94 	bl	8000200 <memchr>
 80066d8:	b108      	cbz	r0, 80066de <_printf_i+0x1f2>
 80066da:	1b80      	subs	r0, r0, r6
 80066dc:	6060      	str	r0, [r4, #4]
 80066de:	6863      	ldr	r3, [r4, #4]
 80066e0:	6123      	str	r3, [r4, #16]
 80066e2:	2300      	movs	r3, #0
 80066e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e8:	e7a8      	b.n	800663c <_printf_i+0x150>
 80066ea:	6923      	ldr	r3, [r4, #16]
 80066ec:	4632      	mov	r2, r6
 80066ee:	4649      	mov	r1, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	47d0      	blx	sl
 80066f4:	3001      	adds	r0, #1
 80066f6:	d0ab      	beq.n	8006650 <_printf_i+0x164>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	079b      	lsls	r3, r3, #30
 80066fc:	d413      	bmi.n	8006726 <_printf_i+0x23a>
 80066fe:	68e0      	ldr	r0, [r4, #12]
 8006700:	9b03      	ldr	r3, [sp, #12]
 8006702:	4298      	cmp	r0, r3
 8006704:	bfb8      	it	lt
 8006706:	4618      	movlt	r0, r3
 8006708:	e7a4      	b.n	8006654 <_printf_i+0x168>
 800670a:	2301      	movs	r3, #1
 800670c:	4632      	mov	r2, r6
 800670e:	4649      	mov	r1, r9
 8006710:	4640      	mov	r0, r8
 8006712:	47d0      	blx	sl
 8006714:	3001      	adds	r0, #1
 8006716:	d09b      	beq.n	8006650 <_printf_i+0x164>
 8006718:	3501      	adds	r5, #1
 800671a:	68e3      	ldr	r3, [r4, #12]
 800671c:	9903      	ldr	r1, [sp, #12]
 800671e:	1a5b      	subs	r3, r3, r1
 8006720:	42ab      	cmp	r3, r5
 8006722:	dcf2      	bgt.n	800670a <_printf_i+0x21e>
 8006724:	e7eb      	b.n	80066fe <_printf_i+0x212>
 8006726:	2500      	movs	r5, #0
 8006728:	f104 0619 	add.w	r6, r4, #25
 800672c:	e7f5      	b.n	800671a <_printf_i+0x22e>
 800672e:	bf00      	nop
 8006730:	0800901e 	.word	0x0800901e
 8006734:	0800902f 	.word	0x0800902f

08006738 <siprintf>:
 8006738:	b40e      	push	{r1, r2, r3}
 800673a:	b500      	push	{lr}
 800673c:	b09c      	sub	sp, #112	; 0x70
 800673e:	ab1d      	add	r3, sp, #116	; 0x74
 8006740:	9002      	str	r0, [sp, #8]
 8006742:	9006      	str	r0, [sp, #24]
 8006744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006748:	4809      	ldr	r0, [pc, #36]	; (8006770 <siprintf+0x38>)
 800674a:	9107      	str	r1, [sp, #28]
 800674c:	9104      	str	r1, [sp, #16]
 800674e:	4909      	ldr	r1, [pc, #36]	; (8006774 <siprintf+0x3c>)
 8006750:	f853 2b04 	ldr.w	r2, [r3], #4
 8006754:	9105      	str	r1, [sp, #20]
 8006756:	6800      	ldr	r0, [r0, #0]
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	a902      	add	r1, sp, #8
 800675c:	f001 fb22 	bl	8007da4 <_svfiprintf_r>
 8006760:	9b02      	ldr	r3, [sp, #8]
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	b01c      	add	sp, #112	; 0x70
 8006768:	f85d eb04 	ldr.w	lr, [sp], #4
 800676c:	b003      	add	sp, #12
 800676e:	4770      	bx	lr
 8006770:	20000034 	.word	0x20000034
 8006774:	ffff0208 	.word	0xffff0208

08006778 <quorem>:
 8006778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	6903      	ldr	r3, [r0, #16]
 800677e:	690c      	ldr	r4, [r1, #16]
 8006780:	42a3      	cmp	r3, r4
 8006782:	4607      	mov	r7, r0
 8006784:	f2c0 8081 	blt.w	800688a <quorem+0x112>
 8006788:	3c01      	subs	r4, #1
 800678a:	f101 0814 	add.w	r8, r1, #20
 800678e:	f100 0514 	add.w	r5, r0, #20
 8006792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800679c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067a0:	3301      	adds	r3, #1
 80067a2:	429a      	cmp	r2, r3
 80067a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80067b0:	d331      	bcc.n	8006816 <quorem+0x9e>
 80067b2:	f04f 0e00 	mov.w	lr, #0
 80067b6:	4640      	mov	r0, r8
 80067b8:	46ac      	mov	ip, r5
 80067ba:	46f2      	mov	sl, lr
 80067bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80067c0:	b293      	uxth	r3, r2
 80067c2:	fb06 e303 	mla	r3, r6, r3, lr
 80067c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	ebaa 0303 	sub.w	r3, sl, r3
 80067d0:	0c12      	lsrs	r2, r2, #16
 80067d2:	f8dc a000 	ldr.w	sl, [ip]
 80067d6:	fb06 e202 	mla	r2, r6, r2, lr
 80067da:	fa13 f38a 	uxtah	r3, r3, sl
 80067de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067e2:	fa1f fa82 	uxth.w	sl, r2
 80067e6:	f8dc 2000 	ldr.w	r2, [ip]
 80067ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80067ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067f8:	4581      	cmp	r9, r0
 80067fa:	f84c 3b04 	str.w	r3, [ip], #4
 80067fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006802:	d2db      	bcs.n	80067bc <quorem+0x44>
 8006804:	f855 300b 	ldr.w	r3, [r5, fp]
 8006808:	b92b      	cbnz	r3, 8006816 <quorem+0x9e>
 800680a:	9b01      	ldr	r3, [sp, #4]
 800680c:	3b04      	subs	r3, #4
 800680e:	429d      	cmp	r5, r3
 8006810:	461a      	mov	r2, r3
 8006812:	d32e      	bcc.n	8006872 <quorem+0xfa>
 8006814:	613c      	str	r4, [r7, #16]
 8006816:	4638      	mov	r0, r7
 8006818:	f001 f8b0 	bl	800797c <__mcmp>
 800681c:	2800      	cmp	r0, #0
 800681e:	db24      	blt.n	800686a <quorem+0xf2>
 8006820:	3601      	adds	r6, #1
 8006822:	4628      	mov	r0, r5
 8006824:	f04f 0c00 	mov.w	ip, #0
 8006828:	f858 2b04 	ldr.w	r2, [r8], #4
 800682c:	f8d0 e000 	ldr.w	lr, [r0]
 8006830:	b293      	uxth	r3, r2
 8006832:	ebac 0303 	sub.w	r3, ip, r3
 8006836:	0c12      	lsrs	r2, r2, #16
 8006838:	fa13 f38e 	uxtah	r3, r3, lr
 800683c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006840:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006844:	b29b      	uxth	r3, r3
 8006846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800684a:	45c1      	cmp	r9, r8
 800684c:	f840 3b04 	str.w	r3, [r0], #4
 8006850:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006854:	d2e8      	bcs.n	8006828 <quorem+0xb0>
 8006856:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800685a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800685e:	b922      	cbnz	r2, 800686a <quorem+0xf2>
 8006860:	3b04      	subs	r3, #4
 8006862:	429d      	cmp	r5, r3
 8006864:	461a      	mov	r2, r3
 8006866:	d30a      	bcc.n	800687e <quorem+0x106>
 8006868:	613c      	str	r4, [r7, #16]
 800686a:	4630      	mov	r0, r6
 800686c:	b003      	add	sp, #12
 800686e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006872:	6812      	ldr	r2, [r2, #0]
 8006874:	3b04      	subs	r3, #4
 8006876:	2a00      	cmp	r2, #0
 8006878:	d1cc      	bne.n	8006814 <quorem+0x9c>
 800687a:	3c01      	subs	r4, #1
 800687c:	e7c7      	b.n	800680e <quorem+0x96>
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	3b04      	subs	r3, #4
 8006882:	2a00      	cmp	r2, #0
 8006884:	d1f0      	bne.n	8006868 <quorem+0xf0>
 8006886:	3c01      	subs	r4, #1
 8006888:	e7eb      	b.n	8006862 <quorem+0xea>
 800688a:	2000      	movs	r0, #0
 800688c:	e7ee      	b.n	800686c <quorem+0xf4>
	...

08006890 <_dtoa_r>:
 8006890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	ed2d 8b02 	vpush	{d8}
 8006898:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800689a:	b095      	sub	sp, #84	; 0x54
 800689c:	4616      	mov	r6, r2
 800689e:	461f      	mov	r7, r3
 80068a0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80068a4:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 80068a8:	4604      	mov	r4, r0
 80068aa:	b975      	cbnz	r5, 80068ca <_dtoa_r+0x3a>
 80068ac:	2010      	movs	r0, #16
 80068ae:	f000 fddf 	bl	8007470 <malloc>
 80068b2:	4602      	mov	r2, r0
 80068b4:	6260      	str	r0, [r4, #36]	; 0x24
 80068b6:	b920      	cbnz	r0, 80068c2 <_dtoa_r+0x32>
 80068b8:	4bb1      	ldr	r3, [pc, #708]	; (8006b80 <_dtoa_r+0x2f0>)
 80068ba:	21ea      	movs	r1, #234	; 0xea
 80068bc:	48b1      	ldr	r0, [pc, #708]	; (8006b84 <_dtoa_r+0x2f4>)
 80068be:	f001 fb81 	bl	8007fc4 <__assert_func>
 80068c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068c6:	6005      	str	r5, [r0, #0]
 80068c8:	60c5      	str	r5, [r0, #12]
 80068ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068cc:	6819      	ldr	r1, [r3, #0]
 80068ce:	b151      	cbz	r1, 80068e6 <_dtoa_r+0x56>
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	604a      	str	r2, [r1, #4]
 80068d4:	2301      	movs	r3, #1
 80068d6:	4093      	lsls	r3, r2
 80068d8:	608b      	str	r3, [r1, #8]
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 fe10 	bl	8007500 <_Bfree>
 80068e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	1e3b      	subs	r3, r7, #0
 80068e8:	bfb9      	ittee	lt
 80068ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068ee:	9305      	strlt	r3, [sp, #20]
 80068f0:	2300      	movge	r3, #0
 80068f2:	f8c8 3000 	strge.w	r3, [r8]
 80068f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80068fa:	4ba3      	ldr	r3, [pc, #652]	; (8006b88 <_dtoa_r+0x2f8>)
 80068fc:	bfbc      	itt	lt
 80068fe:	2201      	movlt	r2, #1
 8006900:	f8c8 2000 	strlt.w	r2, [r8]
 8006904:	ea33 0309 	bics.w	r3, r3, r9
 8006908:	d11b      	bne.n	8006942 <_dtoa_r+0xb2>
 800690a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800690c:	f242 730f 	movw	r3, #9999	; 0x270f
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006916:	4333      	orrs	r3, r6
 8006918:	f000 857d 	beq.w	8007416 <_dtoa_r+0xb86>
 800691c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800691e:	b963      	cbnz	r3, 800693a <_dtoa_r+0xaa>
 8006920:	4b9a      	ldr	r3, [pc, #616]	; (8006b8c <_dtoa_r+0x2fc>)
 8006922:	e024      	b.n	800696e <_dtoa_r+0xde>
 8006924:	4b9a      	ldr	r3, [pc, #616]	; (8006b90 <_dtoa_r+0x300>)
 8006926:	9303      	str	r3, [sp, #12]
 8006928:	3308      	adds	r3, #8
 800692a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	9803      	ldr	r0, [sp, #12]
 8006930:	b015      	add	sp, #84	; 0x54
 8006932:	ecbd 8b02 	vpop	{d8}
 8006936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693a:	4b94      	ldr	r3, [pc, #592]	; (8006b8c <_dtoa_r+0x2fc>)
 800693c:	9303      	str	r3, [sp, #12]
 800693e:	3303      	adds	r3, #3
 8006940:	e7f3      	b.n	800692a <_dtoa_r+0x9a>
 8006942:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006946:	2200      	movs	r2, #0
 8006948:	ec51 0b17 	vmov	r0, r1, d7
 800694c:	2300      	movs	r3, #0
 800694e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006952:	f7fa f8c9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006956:	4680      	mov	r8, r0
 8006958:	b158      	cbz	r0, 8006972 <_dtoa_r+0xe2>
 800695a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800695c:	2301      	movs	r3, #1
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 8554 	beq.w	8007410 <_dtoa_r+0xb80>
 8006968:	488a      	ldr	r0, [pc, #552]	; (8006b94 <_dtoa_r+0x304>)
 800696a:	6018      	str	r0, [r3, #0]
 800696c:	1e43      	subs	r3, r0, #1
 800696e:	9303      	str	r3, [sp, #12]
 8006970:	e7dd      	b.n	800692e <_dtoa_r+0x9e>
 8006972:	ab12      	add	r3, sp, #72	; 0x48
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	ab13      	add	r3, sp, #76	; 0x4c
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	4620      	mov	r0, r4
 800697c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006980:	f001 f8a0 	bl	8007ac4 <__d2b>
 8006984:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006988:	4683      	mov	fp, r0
 800698a:	2d00      	cmp	r5, #0
 800698c:	d07c      	beq.n	8006a88 <_dtoa_r+0x1f8>
 800698e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006990:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006998:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800699c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80069a0:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80069a4:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069a8:	4b7b      	ldr	r3, [pc, #492]	; (8006b98 <_dtoa_r+0x308>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	4630      	mov	r0, r6
 80069ae:	4639      	mov	r1, r7
 80069b0:	f7f9 fc7a 	bl	80002a8 <__aeabi_dsub>
 80069b4:	a36c      	add	r3, pc, #432	; (adr r3, 8006b68 <_dtoa_r+0x2d8>)
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	f7f9 fe2d 	bl	8000618 <__aeabi_dmul>
 80069be:	a36c      	add	r3, pc, #432	; (adr r3, 8006b70 <_dtoa_r+0x2e0>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7f9 fc72 	bl	80002ac <__adddf3>
 80069c8:	4606      	mov	r6, r0
 80069ca:	4628      	mov	r0, r5
 80069cc:	460f      	mov	r7, r1
 80069ce:	f7f9 fdb9 	bl	8000544 <__aeabi_i2d>
 80069d2:	a369      	add	r3, pc, #420	; (adr r3, 8006b78 <_dtoa_r+0x2e8>)
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f7f9 fe1e 	bl	8000618 <__aeabi_dmul>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4630      	mov	r0, r6
 80069e2:	4639      	mov	r1, r7
 80069e4:	f7f9 fc62 	bl	80002ac <__adddf3>
 80069e8:	4606      	mov	r6, r0
 80069ea:	460f      	mov	r7, r1
 80069ec:	f7fa f8c4 	bl	8000b78 <__aeabi_d2iz>
 80069f0:	2200      	movs	r2, #0
 80069f2:	4682      	mov	sl, r0
 80069f4:	2300      	movs	r3, #0
 80069f6:	4630      	mov	r0, r6
 80069f8:	4639      	mov	r1, r7
 80069fa:	f7fa f87f 	bl	8000afc <__aeabi_dcmplt>
 80069fe:	b148      	cbz	r0, 8006a14 <_dtoa_r+0x184>
 8006a00:	4650      	mov	r0, sl
 8006a02:	f7f9 fd9f 	bl	8000544 <__aeabi_i2d>
 8006a06:	4632      	mov	r2, r6
 8006a08:	463b      	mov	r3, r7
 8006a0a:	f7fa f86d 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a0e:	b908      	cbnz	r0, 8006a14 <_dtoa_r+0x184>
 8006a10:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a14:	f1ba 0f16 	cmp.w	sl, #22
 8006a18:	d854      	bhi.n	8006ac4 <_dtoa_r+0x234>
 8006a1a:	4b60      	ldr	r3, [pc, #384]	; (8006b9c <_dtoa_r+0x30c>)
 8006a1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a28:	f7fa f868 	bl	8000afc <__aeabi_dcmplt>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d04b      	beq.n	8006ac8 <_dtoa_r+0x238>
 8006a30:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a34:	2300      	movs	r3, #0
 8006a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a3a:	1b5d      	subs	r5, r3, r5
 8006a3c:	1e6b      	subs	r3, r5, #1
 8006a3e:	9307      	str	r3, [sp, #28]
 8006a40:	bf43      	ittte	mi
 8006a42:	2300      	movmi	r3, #0
 8006a44:	f1c5 0801 	rsbmi	r8, r5, #1
 8006a48:	9307      	strmi	r3, [sp, #28]
 8006a4a:	f04f 0800 	movpl.w	r8, #0
 8006a4e:	f1ba 0f00 	cmp.w	sl, #0
 8006a52:	db3b      	blt.n	8006acc <_dtoa_r+0x23c>
 8006a54:	9b07      	ldr	r3, [sp, #28]
 8006a56:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006a5a:	4453      	add	r3, sl
 8006a5c:	9307      	str	r3, [sp, #28]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9308      	str	r3, [sp, #32]
 8006a62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006a64:	2b09      	cmp	r3, #9
 8006a66:	d869      	bhi.n	8006b3c <_dtoa_r+0x2ac>
 8006a68:	2b05      	cmp	r3, #5
 8006a6a:	bfc4      	itt	gt
 8006a6c:	3b04      	subgt	r3, #4
 8006a6e:	9320      	strgt	r3, [sp, #128]	; 0x80
 8006a70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006a72:	f1a3 0302 	sub.w	r3, r3, #2
 8006a76:	bfcc      	ite	gt
 8006a78:	2500      	movgt	r5, #0
 8006a7a:	2501      	movle	r5, #1
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d869      	bhi.n	8006b54 <_dtoa_r+0x2c4>
 8006a80:	e8df f003 	tbb	[pc, r3]
 8006a84:	5a4c4e2c 	.word	0x5a4c4e2c
 8006a88:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006a8c:	441d      	add	r5, r3
 8006a8e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	bfc1      	itttt	gt
 8006a96:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a9a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006a9e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006aa2:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006aa6:	bfda      	itte	le
 8006aa8:	f1c3 0320 	rsble	r3, r3, #32
 8006aac:	fa06 f003 	lslle.w	r0, r6, r3
 8006ab0:	4318      	orrgt	r0, r3
 8006ab2:	f7f9 fd37 	bl	8000524 <__aeabi_ui2d>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	4606      	mov	r6, r0
 8006aba:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006abe:	3d01      	subs	r5, #1
 8006ac0:	9310      	str	r3, [sp, #64]	; 0x40
 8006ac2:	e771      	b.n	80069a8 <_dtoa_r+0x118>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e7b6      	b.n	8006a36 <_dtoa_r+0x1a6>
 8006ac8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006aca:	e7b5      	b.n	8006a38 <_dtoa_r+0x1a8>
 8006acc:	f1ca 0300 	rsb	r3, sl, #0
 8006ad0:	9308      	str	r3, [sp, #32]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	eba8 080a 	sub.w	r8, r8, sl
 8006ad8:	930e      	str	r3, [sp, #56]	; 0x38
 8006ada:	e7c2      	b.n	8006a62 <_dtoa_r+0x1d2>
 8006adc:	2300      	movs	r3, #0
 8006ade:	930c      	str	r3, [sp, #48]	; 0x30
 8006ae0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	dc39      	bgt.n	8006b5a <_dtoa_r+0x2ca>
 8006ae6:	f04f 0901 	mov.w	r9, #1
 8006aea:	f8cd 9018 	str.w	r9, [sp, #24]
 8006aee:	464b      	mov	r3, r9
 8006af0:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8006af4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006af6:	2200      	movs	r2, #0
 8006af8:	6042      	str	r2, [r0, #4]
 8006afa:	2204      	movs	r2, #4
 8006afc:	f102 0614 	add.w	r6, r2, #20
 8006b00:	429e      	cmp	r6, r3
 8006b02:	6841      	ldr	r1, [r0, #4]
 8006b04:	d94e      	bls.n	8006ba4 <_dtoa_r+0x314>
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 fcba 	bl	8007480 <_Balloc>
 8006b0c:	9003      	str	r0, [sp, #12]
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d14c      	bne.n	8006bac <_dtoa_r+0x31c>
 8006b12:	4b23      	ldr	r3, [pc, #140]	; (8006ba0 <_dtoa_r+0x310>)
 8006b14:	4602      	mov	r2, r0
 8006b16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b1a:	e6cf      	b.n	80068bc <_dtoa_r+0x2c>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e7de      	b.n	8006ade <_dtoa_r+0x24e>
 8006b20:	2300      	movs	r3, #0
 8006b22:	930c      	str	r3, [sp, #48]	; 0x30
 8006b24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b26:	eb0a 0903 	add.w	r9, sl, r3
 8006b2a:	f109 0301 	add.w	r3, r9, #1
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	9306      	str	r3, [sp, #24]
 8006b32:	bfb8      	it	lt
 8006b34:	2301      	movlt	r3, #1
 8006b36:	e7dd      	b.n	8006af4 <_dtoa_r+0x264>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e7f2      	b.n	8006b22 <_dtoa_r+0x292>
 8006b3c:	2501      	movs	r5, #1
 8006b3e:	2300      	movs	r3, #0
 8006b40:	9320      	str	r3, [sp, #128]	; 0x80
 8006b42:	950c      	str	r5, [sp, #48]	; 0x30
 8006b44:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8cd 9018 	str.w	r9, [sp, #24]
 8006b4e:	2312      	movs	r3, #18
 8006b50:	9221      	str	r2, [sp, #132]	; 0x84
 8006b52:	e7cf      	b.n	8006af4 <_dtoa_r+0x264>
 8006b54:	2301      	movs	r3, #1
 8006b56:	930c      	str	r3, [sp, #48]	; 0x30
 8006b58:	e7f4      	b.n	8006b44 <_dtoa_r+0x2b4>
 8006b5a:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8006b5e:	f8cd 9018 	str.w	r9, [sp, #24]
 8006b62:	464b      	mov	r3, r9
 8006b64:	e7c6      	b.n	8006af4 <_dtoa_r+0x264>
 8006b66:	bf00      	nop
 8006b68:	636f4361 	.word	0x636f4361
 8006b6c:	3fd287a7 	.word	0x3fd287a7
 8006b70:	8b60c8b3 	.word	0x8b60c8b3
 8006b74:	3fc68a28 	.word	0x3fc68a28
 8006b78:	509f79fb 	.word	0x509f79fb
 8006b7c:	3fd34413 	.word	0x3fd34413
 8006b80:	0800904d 	.word	0x0800904d
 8006b84:	08009064 	.word	0x08009064
 8006b88:	7ff00000 	.word	0x7ff00000
 8006b8c:	08009049 	.word	0x08009049
 8006b90:	08009040 	.word	0x08009040
 8006b94:	0800901d 	.word	0x0800901d
 8006b98:	3ff80000 	.word	0x3ff80000
 8006b9c:	08009160 	.word	0x08009160
 8006ba0:	080090c3 	.word	0x080090c3
 8006ba4:	3101      	adds	r1, #1
 8006ba6:	6041      	str	r1, [r0, #4]
 8006ba8:	0052      	lsls	r2, r2, #1
 8006baa:	e7a7      	b.n	8006afc <_dtoa_r+0x26c>
 8006bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bae:	9a03      	ldr	r2, [sp, #12]
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	9b06      	ldr	r3, [sp, #24]
 8006bb4:	2b0e      	cmp	r3, #14
 8006bb6:	f200 80ad 	bhi.w	8006d14 <_dtoa_r+0x484>
 8006bba:	2d00      	cmp	r5, #0
 8006bbc:	f000 80aa 	beq.w	8006d14 <_dtoa_r+0x484>
 8006bc0:	f1ba 0f00 	cmp.w	sl, #0
 8006bc4:	dd36      	ble.n	8006c34 <_dtoa_r+0x3a4>
 8006bc6:	4ac3      	ldr	r2, [pc, #780]	; (8006ed4 <_dtoa_r+0x644>)
 8006bc8:	f00a 030f 	and.w	r3, sl, #15
 8006bcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006bd0:	ed93 7b00 	vldr	d7, [r3]
 8006bd4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006bd8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006bdc:	eeb0 8a47 	vmov.f32	s16, s14
 8006be0:	eef0 8a67 	vmov.f32	s17, s15
 8006be4:	d016      	beq.n	8006c14 <_dtoa_r+0x384>
 8006be6:	4bbc      	ldr	r3, [pc, #752]	; (8006ed8 <_dtoa_r+0x648>)
 8006be8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bf0:	f7f9 fe3c 	bl	800086c <__aeabi_ddiv>
 8006bf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bf8:	f007 070f 	and.w	r7, r7, #15
 8006bfc:	2503      	movs	r5, #3
 8006bfe:	4eb6      	ldr	r6, [pc, #728]	; (8006ed8 <_dtoa_r+0x648>)
 8006c00:	b957      	cbnz	r7, 8006c18 <_dtoa_r+0x388>
 8006c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c06:	ec53 2b18 	vmov	r2, r3, d8
 8006c0a:	f7f9 fe2f 	bl	800086c <__aeabi_ddiv>
 8006c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c12:	e029      	b.n	8006c68 <_dtoa_r+0x3d8>
 8006c14:	2502      	movs	r5, #2
 8006c16:	e7f2      	b.n	8006bfe <_dtoa_r+0x36e>
 8006c18:	07f9      	lsls	r1, r7, #31
 8006c1a:	d508      	bpl.n	8006c2e <_dtoa_r+0x39e>
 8006c1c:	ec51 0b18 	vmov	r0, r1, d8
 8006c20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c24:	f7f9 fcf8 	bl	8000618 <__aeabi_dmul>
 8006c28:	ec41 0b18 	vmov	d8, r0, r1
 8006c2c:	3501      	adds	r5, #1
 8006c2e:	107f      	asrs	r7, r7, #1
 8006c30:	3608      	adds	r6, #8
 8006c32:	e7e5      	b.n	8006c00 <_dtoa_r+0x370>
 8006c34:	f000 80a6 	beq.w	8006d84 <_dtoa_r+0x4f4>
 8006c38:	f1ca 0600 	rsb	r6, sl, #0
 8006c3c:	4ba5      	ldr	r3, [pc, #660]	; (8006ed4 <_dtoa_r+0x644>)
 8006c3e:	4fa6      	ldr	r7, [pc, #664]	; (8006ed8 <_dtoa_r+0x648>)
 8006c40:	f006 020f 	and.w	r2, r6, #15
 8006c44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c50:	f7f9 fce2 	bl	8000618 <__aeabi_dmul>
 8006c54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c58:	1136      	asrs	r6, r6, #4
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2502      	movs	r5, #2
 8006c5e:	2e00      	cmp	r6, #0
 8006c60:	f040 8085 	bne.w	8006d6e <_dtoa_r+0x4de>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1d2      	bne.n	8006c0e <_dtoa_r+0x37e>
 8006c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 808c 	beq.w	8006d88 <_dtoa_r+0x4f8>
 8006c70:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8006c74:	4b99      	ldr	r3, [pc, #612]	; (8006edc <_dtoa_r+0x64c>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	f7f9 ff3e 	bl	8000afc <__aeabi_dcmplt>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f000 8081 	beq.w	8006d88 <_dtoa_r+0x4f8>
 8006c86:	9b06      	ldr	r3, [sp, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d07d      	beq.n	8006d88 <_dtoa_r+0x4f8>
 8006c8c:	f1b9 0f00 	cmp.w	r9, #0
 8006c90:	dd3c      	ble.n	8006d0c <_dtoa_r+0x47c>
 8006c92:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006c96:	9309      	str	r3, [sp, #36]	; 0x24
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4b91      	ldr	r3, [pc, #580]	; (8006ee0 <_dtoa_r+0x650>)
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	f7f9 fcba 	bl	8000618 <__aeabi_dmul>
 8006ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ca8:	3501      	adds	r5, #1
 8006caa:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8006cae:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f7f9 fc46 	bl	8000544 <__aeabi_i2d>
 8006cb8:	4632      	mov	r2, r6
 8006cba:	463b      	mov	r3, r7
 8006cbc:	f7f9 fcac 	bl	8000618 <__aeabi_dmul>
 8006cc0:	4b88      	ldr	r3, [pc, #544]	; (8006ee4 <_dtoa_r+0x654>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f7f9 faf2 	bl	80002ac <__adddf3>
 8006cc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cd0:	9305      	str	r3, [sp, #20]
 8006cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d15c      	bne.n	8006d92 <_dtoa_r+0x502>
 8006cd8:	4b83      	ldr	r3, [pc, #524]	; (8006ee8 <_dtoa_r+0x658>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4630      	mov	r0, r6
 8006cde:	4639      	mov	r1, r7
 8006ce0:	f7f9 fae2 	bl	80002a8 <__aeabi_dsub>
 8006ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ce8:	4606      	mov	r6, r0
 8006cea:	460f      	mov	r7, r1
 8006cec:	f7f9 ff24 	bl	8000b38 <__aeabi_dcmpgt>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f040 8296 	bne.w	8007222 <_dtoa_r+0x992>
 8006cf6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d00:	4639      	mov	r1, r7
 8006d02:	f7f9 fefb 	bl	8000afc <__aeabi_dcmplt>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	f040 8288 	bne.w	800721c <_dtoa_r+0x98c>
 8006d0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f2c0 8158 	blt.w	8006fcc <_dtoa_r+0x73c>
 8006d1c:	f1ba 0f0e 	cmp.w	sl, #14
 8006d20:	f300 8154 	bgt.w	8006fcc <_dtoa_r+0x73c>
 8006d24:	4b6b      	ldr	r3, [pc, #428]	; (8006ed4 <_dtoa_r+0x644>)
 8006d26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f280 80e3 	bge.w	8006efc <_dtoa_r+0x66c>
 8006d36:	9b06      	ldr	r3, [sp, #24]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f300 80df 	bgt.w	8006efc <_dtoa_r+0x66c>
 8006d3e:	f040 826d 	bne.w	800721c <_dtoa_r+0x98c>
 8006d42:	4b69      	ldr	r3, [pc, #420]	; (8006ee8 <_dtoa_r+0x658>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	4640      	mov	r0, r8
 8006d48:	4649      	mov	r1, r9
 8006d4a:	f7f9 fc65 	bl	8000618 <__aeabi_dmul>
 8006d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d52:	f7f9 fee7 	bl	8000b24 <__aeabi_dcmpge>
 8006d56:	9e06      	ldr	r6, [sp, #24]
 8006d58:	4637      	mov	r7, r6
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	f040 8243 	bne.w	80071e6 <_dtoa_r+0x956>
 8006d60:	9d03      	ldr	r5, [sp, #12]
 8006d62:	2331      	movs	r3, #49	; 0x31
 8006d64:	f805 3b01 	strb.w	r3, [r5], #1
 8006d68:	f10a 0a01 	add.w	sl, sl, #1
 8006d6c:	e23f      	b.n	80071ee <_dtoa_r+0x95e>
 8006d6e:	07f2      	lsls	r2, r6, #31
 8006d70:	d505      	bpl.n	8006d7e <_dtoa_r+0x4ee>
 8006d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d76:	f7f9 fc4f 	bl	8000618 <__aeabi_dmul>
 8006d7a:	3501      	adds	r5, #1
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	1076      	asrs	r6, r6, #1
 8006d80:	3708      	adds	r7, #8
 8006d82:	e76c      	b.n	8006c5e <_dtoa_r+0x3ce>
 8006d84:	2502      	movs	r5, #2
 8006d86:	e76f      	b.n	8006c68 <_dtoa_r+0x3d8>
 8006d88:	9b06      	ldr	r3, [sp, #24]
 8006d8a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8006d90:	e78d      	b.n	8006cae <_dtoa_r+0x41e>
 8006d92:	9903      	ldr	r1, [sp, #12]
 8006d94:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d98:	4b4e      	ldr	r3, [pc, #312]	; (8006ed4 <_dtoa_r+0x644>)
 8006d9a:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006d9e:	4401      	add	r1, r0
 8006da0:	9104      	str	r1, [sp, #16]
 8006da2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006da4:	eeb0 8a47 	vmov.f32	s16, s14
 8006da8:	eef0 8a67 	vmov.f32	s17, s15
 8006dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006db0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006db4:	2900      	cmp	r1, #0
 8006db6:	d045      	beq.n	8006e44 <_dtoa_r+0x5b4>
 8006db8:	494c      	ldr	r1, [pc, #304]	; (8006eec <_dtoa_r+0x65c>)
 8006dba:	2000      	movs	r0, #0
 8006dbc:	f7f9 fd56 	bl	800086c <__aeabi_ddiv>
 8006dc0:	ec53 2b18 	vmov	r2, r3, d8
 8006dc4:	f7f9 fa70 	bl	80002a8 <__aeabi_dsub>
 8006dc8:	9d03      	ldr	r5, [sp, #12]
 8006dca:	ec41 0b18 	vmov	d8, r0, r1
 8006dce:	4639      	mov	r1, r7
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7f9 fed1 	bl	8000b78 <__aeabi_d2iz>
 8006dd6:	900d      	str	r0, [sp, #52]	; 0x34
 8006dd8:	f7f9 fbb4 	bl	8000544 <__aeabi_i2d>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4630      	mov	r0, r6
 8006de2:	4639      	mov	r1, r7
 8006de4:	f7f9 fa60 	bl	80002a8 <__aeabi_dsub>
 8006de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dea:	3330      	adds	r3, #48	; 0x30
 8006dec:	f805 3b01 	strb.w	r3, [r5], #1
 8006df0:	ec53 2b18 	vmov	r2, r3, d8
 8006df4:	4606      	mov	r6, r0
 8006df6:	460f      	mov	r7, r1
 8006df8:	f7f9 fe80 	bl	8000afc <__aeabi_dcmplt>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d165      	bne.n	8006ecc <_dtoa_r+0x63c>
 8006e00:	4632      	mov	r2, r6
 8006e02:	463b      	mov	r3, r7
 8006e04:	4935      	ldr	r1, [pc, #212]	; (8006edc <_dtoa_r+0x64c>)
 8006e06:	2000      	movs	r0, #0
 8006e08:	f7f9 fa4e 	bl	80002a8 <__aeabi_dsub>
 8006e0c:	ec53 2b18 	vmov	r2, r3, d8
 8006e10:	f7f9 fe74 	bl	8000afc <__aeabi_dcmplt>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	f040 80b9 	bne.w	8006f8c <_dtoa_r+0x6fc>
 8006e1a:	9b04      	ldr	r3, [sp, #16]
 8006e1c:	429d      	cmp	r5, r3
 8006e1e:	f43f af75 	beq.w	8006d0c <_dtoa_r+0x47c>
 8006e22:	4b2f      	ldr	r3, [pc, #188]	; (8006ee0 <_dtoa_r+0x650>)
 8006e24:	ec51 0b18 	vmov	r0, r1, d8
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f7f9 fbf5 	bl	8000618 <__aeabi_dmul>
 8006e2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ee0 <_dtoa_r+0x650>)
 8006e30:	ec41 0b18 	vmov	d8, r0, r1
 8006e34:	2200      	movs	r2, #0
 8006e36:	4630      	mov	r0, r6
 8006e38:	4639      	mov	r1, r7
 8006e3a:	f7f9 fbed 	bl	8000618 <__aeabi_dmul>
 8006e3e:	4606      	mov	r6, r0
 8006e40:	460f      	mov	r7, r1
 8006e42:	e7c4      	b.n	8006dce <_dtoa_r+0x53e>
 8006e44:	ec51 0b17 	vmov	r0, r1, d7
 8006e48:	f7f9 fbe6 	bl	8000618 <__aeabi_dmul>
 8006e4c:	9b04      	ldr	r3, [sp, #16]
 8006e4e:	9d03      	ldr	r5, [sp, #12]
 8006e50:	930d      	str	r3, [sp, #52]	; 0x34
 8006e52:	ec41 0b18 	vmov	d8, r0, r1
 8006e56:	4639      	mov	r1, r7
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7f9 fe8d 	bl	8000b78 <__aeabi_d2iz>
 8006e5e:	9011      	str	r0, [sp, #68]	; 0x44
 8006e60:	f7f9 fb70 	bl	8000544 <__aeabi_i2d>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fa1c 	bl	80002a8 <__aeabi_dsub>
 8006e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e72:	3330      	adds	r3, #48	; 0x30
 8006e74:	f805 3b01 	strb.w	r3, [r5], #1
 8006e78:	9b04      	ldr	r3, [sp, #16]
 8006e7a:	429d      	cmp	r5, r3
 8006e7c:	4606      	mov	r6, r0
 8006e7e:	460f      	mov	r7, r1
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	d134      	bne.n	8006ef0 <_dtoa_r+0x660>
 8006e86:	4b19      	ldr	r3, [pc, #100]	; (8006eec <_dtoa_r+0x65c>)
 8006e88:	ec51 0b18 	vmov	r0, r1, d8
 8006e8c:	f7f9 fa0e 	bl	80002ac <__adddf3>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4630      	mov	r0, r6
 8006e96:	4639      	mov	r1, r7
 8006e98:	f7f9 fe4e 	bl	8000b38 <__aeabi_dcmpgt>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d175      	bne.n	8006f8c <_dtoa_r+0x6fc>
 8006ea0:	ec53 2b18 	vmov	r2, r3, d8
 8006ea4:	4911      	ldr	r1, [pc, #68]	; (8006eec <_dtoa_r+0x65c>)
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	f7f9 f9fe 	bl	80002a8 <__aeabi_dsub>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	f7f9 fe22 	bl	8000afc <__aeabi_dcmplt>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	f43f af27 	beq.w	8006d0c <_dtoa_r+0x47c>
 8006ebe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006ec0:	1e6b      	subs	r3, r5, #1
 8006ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8006ec4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ec8:	2b30      	cmp	r3, #48	; 0x30
 8006eca:	d0f8      	beq.n	8006ebe <_dtoa_r+0x62e>
 8006ecc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006ed0:	e04a      	b.n	8006f68 <_dtoa_r+0x6d8>
 8006ed2:	bf00      	nop
 8006ed4:	08009160 	.word	0x08009160
 8006ed8:	08009138 	.word	0x08009138
 8006edc:	3ff00000 	.word	0x3ff00000
 8006ee0:	40240000 	.word	0x40240000
 8006ee4:	401c0000 	.word	0x401c0000
 8006ee8:	40140000 	.word	0x40140000
 8006eec:	3fe00000 	.word	0x3fe00000
 8006ef0:	4baf      	ldr	r3, [pc, #700]	; (80071b0 <_dtoa_r+0x920>)
 8006ef2:	f7f9 fb91 	bl	8000618 <__aeabi_dmul>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	e7ac      	b.n	8006e56 <_dtoa_r+0x5c6>
 8006efc:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8006f00:	9d03      	ldr	r5, [sp, #12]
 8006f02:	4642      	mov	r2, r8
 8006f04:	464b      	mov	r3, r9
 8006f06:	4630      	mov	r0, r6
 8006f08:	4639      	mov	r1, r7
 8006f0a:	f7f9 fcaf 	bl	800086c <__aeabi_ddiv>
 8006f0e:	f7f9 fe33 	bl	8000b78 <__aeabi_d2iz>
 8006f12:	9004      	str	r0, [sp, #16]
 8006f14:	f7f9 fb16 	bl	8000544 <__aeabi_i2d>
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	f7f9 fb7c 	bl	8000618 <__aeabi_dmul>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	f7f9 f9be 	bl	80002a8 <__aeabi_dsub>
 8006f2c:	9e04      	ldr	r6, [sp, #16]
 8006f2e:	9f06      	ldr	r7, [sp, #24]
 8006f30:	3630      	adds	r6, #48	; 0x30
 8006f32:	f805 6b01 	strb.w	r6, [r5], #1
 8006f36:	9e03      	ldr	r6, [sp, #12]
 8006f38:	1bae      	subs	r6, r5, r6
 8006f3a:	42b7      	cmp	r7, r6
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	d137      	bne.n	8006fb2 <_dtoa_r+0x722>
 8006f42:	f7f9 f9b3 	bl	80002ac <__adddf3>
 8006f46:	4642      	mov	r2, r8
 8006f48:	464b      	mov	r3, r9
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460f      	mov	r7, r1
 8006f4e:	f7f9 fdf3 	bl	8000b38 <__aeabi_dcmpgt>
 8006f52:	b9c8      	cbnz	r0, 8006f88 <_dtoa_r+0x6f8>
 8006f54:	4642      	mov	r2, r8
 8006f56:	464b      	mov	r3, r9
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 fdc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f60:	b110      	cbz	r0, 8006f68 <_dtoa_r+0x6d8>
 8006f62:	9b04      	ldr	r3, [sp, #16]
 8006f64:	07d9      	lsls	r1, r3, #31
 8006f66:	d40f      	bmi.n	8006f88 <_dtoa_r+0x6f8>
 8006f68:	4620      	mov	r0, r4
 8006f6a:	4659      	mov	r1, fp
 8006f6c:	f000 fac8 	bl	8007500 <_Bfree>
 8006f70:	2300      	movs	r3, #0
 8006f72:	702b      	strb	r3, [r5, #0]
 8006f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f76:	f10a 0001 	add.w	r0, sl, #1
 8006f7a:	6018      	str	r0, [r3, #0]
 8006f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f43f acd5 	beq.w	800692e <_dtoa_r+0x9e>
 8006f84:	601d      	str	r5, [r3, #0]
 8006f86:	e4d2      	b.n	800692e <_dtoa_r+0x9e>
 8006f88:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	461d      	mov	r5, r3
 8006f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f94:	2a39      	cmp	r2, #57	; 0x39
 8006f96:	d108      	bne.n	8006faa <_dtoa_r+0x71a>
 8006f98:	9a03      	ldr	r2, [sp, #12]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d1f7      	bne.n	8006f8e <_dtoa_r+0x6fe>
 8006f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa0:	9903      	ldr	r1, [sp, #12]
 8006fa2:	3201      	adds	r2, #1
 8006fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8006fa6:	2230      	movs	r2, #48	; 0x30
 8006fa8:	700a      	strb	r2, [r1, #0]
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	3201      	adds	r2, #1
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	e78c      	b.n	8006ecc <_dtoa_r+0x63c>
 8006fb2:	4b7f      	ldr	r3, [pc, #508]	; (80071b0 <_dtoa_r+0x920>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f7f9 fb2f 	bl	8000618 <__aeabi_dmul>
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	f7f9 fd91 	bl	8000ae8 <__aeabi_dcmpeq>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d09b      	beq.n	8006f02 <_dtoa_r+0x672>
 8006fca:	e7cd      	b.n	8006f68 <_dtoa_r+0x6d8>
 8006fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fce:	2a00      	cmp	r2, #0
 8006fd0:	f000 80c4 	beq.w	800715c <_dtoa_r+0x8cc>
 8006fd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006fd6:	2a01      	cmp	r2, #1
 8006fd8:	f300 80a8 	bgt.w	800712c <_dtoa_r+0x89c>
 8006fdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	f000 80a0 	beq.w	8007124 <_dtoa_r+0x894>
 8006fe4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fe8:	9e08      	ldr	r6, [sp, #32]
 8006fea:	4645      	mov	r5, r8
 8006fec:	9a07      	ldr	r2, [sp, #28]
 8006fee:	2101      	movs	r1, #1
 8006ff0:	441a      	add	r2, r3
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	4498      	add	r8, r3
 8006ff6:	9207      	str	r2, [sp, #28]
 8006ff8:	f000 fb3e 	bl	8007678 <__i2b>
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	dd0b      	ble.n	800701a <_dtoa_r+0x78a>
 8007002:	9b07      	ldr	r3, [sp, #28]
 8007004:	2b00      	cmp	r3, #0
 8007006:	dd08      	ble.n	800701a <_dtoa_r+0x78a>
 8007008:	42ab      	cmp	r3, r5
 800700a:	9a07      	ldr	r2, [sp, #28]
 800700c:	bfa8      	it	ge
 800700e:	462b      	movge	r3, r5
 8007010:	eba8 0803 	sub.w	r8, r8, r3
 8007014:	1aed      	subs	r5, r5, r3
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	9307      	str	r3, [sp, #28]
 800701a:	9b08      	ldr	r3, [sp, #32]
 800701c:	b1fb      	cbz	r3, 800705e <_dtoa_r+0x7ce>
 800701e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 809f 	beq.w	8007164 <_dtoa_r+0x8d4>
 8007026:	2e00      	cmp	r6, #0
 8007028:	dd11      	ble.n	800704e <_dtoa_r+0x7be>
 800702a:	4639      	mov	r1, r7
 800702c:	4632      	mov	r2, r6
 800702e:	4620      	mov	r0, r4
 8007030:	f000 fbde 	bl	80077f0 <__pow5mult>
 8007034:	465a      	mov	r2, fp
 8007036:	4601      	mov	r1, r0
 8007038:	4607      	mov	r7, r0
 800703a:	4620      	mov	r0, r4
 800703c:	f000 fb32 	bl	80076a4 <__multiply>
 8007040:	4659      	mov	r1, fp
 8007042:	9009      	str	r0, [sp, #36]	; 0x24
 8007044:	4620      	mov	r0, r4
 8007046:	f000 fa5b 	bl	8007500 <_Bfree>
 800704a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800704c:	469b      	mov	fp, r3
 800704e:	9b08      	ldr	r3, [sp, #32]
 8007050:	1b9a      	subs	r2, r3, r6
 8007052:	d004      	beq.n	800705e <_dtoa_r+0x7ce>
 8007054:	4659      	mov	r1, fp
 8007056:	4620      	mov	r0, r4
 8007058:	f000 fbca 	bl	80077f0 <__pow5mult>
 800705c:	4683      	mov	fp, r0
 800705e:	2101      	movs	r1, #1
 8007060:	4620      	mov	r0, r4
 8007062:	f000 fb09 	bl	8007678 <__i2b>
 8007066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007068:	2b00      	cmp	r3, #0
 800706a:	4606      	mov	r6, r0
 800706c:	dd7c      	ble.n	8007168 <_dtoa_r+0x8d8>
 800706e:	461a      	mov	r2, r3
 8007070:	4601      	mov	r1, r0
 8007072:	4620      	mov	r0, r4
 8007074:	f000 fbbc 	bl	80077f0 <__pow5mult>
 8007078:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800707a:	2b01      	cmp	r3, #1
 800707c:	4606      	mov	r6, r0
 800707e:	dd76      	ble.n	800716e <_dtoa_r+0x8de>
 8007080:	2300      	movs	r3, #0
 8007082:	9308      	str	r3, [sp, #32]
 8007084:	6933      	ldr	r3, [r6, #16]
 8007086:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800708a:	6918      	ldr	r0, [r3, #16]
 800708c:	f000 faa4 	bl	80075d8 <__hi0bits>
 8007090:	f1c0 0020 	rsb	r0, r0, #32
 8007094:	9b07      	ldr	r3, [sp, #28]
 8007096:	4418      	add	r0, r3
 8007098:	f010 001f 	ands.w	r0, r0, #31
 800709c:	f000 8086 	beq.w	80071ac <_dtoa_r+0x91c>
 80070a0:	f1c0 0320 	rsb	r3, r0, #32
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	dd7f      	ble.n	80071a8 <_dtoa_r+0x918>
 80070a8:	f1c0 001c 	rsb	r0, r0, #28
 80070ac:	9b07      	ldr	r3, [sp, #28]
 80070ae:	4403      	add	r3, r0
 80070b0:	4480      	add	r8, r0
 80070b2:	4405      	add	r5, r0
 80070b4:	9307      	str	r3, [sp, #28]
 80070b6:	f1b8 0f00 	cmp.w	r8, #0
 80070ba:	dd05      	ble.n	80070c8 <_dtoa_r+0x838>
 80070bc:	4659      	mov	r1, fp
 80070be:	4642      	mov	r2, r8
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fbef 	bl	80078a4 <__lshift>
 80070c6:	4683      	mov	fp, r0
 80070c8:	9b07      	ldr	r3, [sp, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dd05      	ble.n	80070da <_dtoa_r+0x84a>
 80070ce:	4631      	mov	r1, r6
 80070d0:	461a      	mov	r2, r3
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fbe6 	bl	80078a4 <__lshift>
 80070d8:	4606      	mov	r6, r0
 80070da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d069      	beq.n	80071b4 <_dtoa_r+0x924>
 80070e0:	4631      	mov	r1, r6
 80070e2:	4658      	mov	r0, fp
 80070e4:	f000 fc4a 	bl	800797c <__mcmp>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	da63      	bge.n	80071b4 <_dtoa_r+0x924>
 80070ec:	2300      	movs	r3, #0
 80070ee:	4659      	mov	r1, fp
 80070f0:	220a      	movs	r2, #10
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 fa26 	bl	8007544 <__multadd>
 80070f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070fe:	4683      	mov	fp, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 818f 	beq.w	8007424 <_dtoa_r+0xb94>
 8007106:	4639      	mov	r1, r7
 8007108:	2300      	movs	r3, #0
 800710a:	220a      	movs	r2, #10
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fa19 	bl	8007544 <__multadd>
 8007112:	f1b9 0f00 	cmp.w	r9, #0
 8007116:	4607      	mov	r7, r0
 8007118:	f300 808e 	bgt.w	8007238 <_dtoa_r+0x9a8>
 800711c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800711e:	2b02      	cmp	r3, #2
 8007120:	dc50      	bgt.n	80071c4 <_dtoa_r+0x934>
 8007122:	e089      	b.n	8007238 <_dtoa_r+0x9a8>
 8007124:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800712a:	e75d      	b.n	8006fe8 <_dtoa_r+0x758>
 800712c:	9b06      	ldr	r3, [sp, #24]
 800712e:	1e5e      	subs	r6, r3, #1
 8007130:	9b08      	ldr	r3, [sp, #32]
 8007132:	42b3      	cmp	r3, r6
 8007134:	bfbf      	itttt	lt
 8007136:	9b08      	ldrlt	r3, [sp, #32]
 8007138:	9608      	strlt	r6, [sp, #32]
 800713a:	1af2      	sublt	r2, r6, r3
 800713c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800713e:	bfb6      	itet	lt
 8007140:	189b      	addlt	r3, r3, r2
 8007142:	1b9e      	subge	r6, r3, r6
 8007144:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007146:	9b06      	ldr	r3, [sp, #24]
 8007148:	bfb8      	it	lt
 800714a:	2600      	movlt	r6, #0
 800714c:	2b00      	cmp	r3, #0
 800714e:	bfb5      	itete	lt
 8007150:	eba8 0503 	sublt.w	r5, r8, r3
 8007154:	9b06      	ldrge	r3, [sp, #24]
 8007156:	2300      	movlt	r3, #0
 8007158:	4645      	movge	r5, r8
 800715a:	e747      	b.n	8006fec <_dtoa_r+0x75c>
 800715c:	9e08      	ldr	r6, [sp, #32]
 800715e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007160:	4645      	mov	r5, r8
 8007162:	e74c      	b.n	8006ffe <_dtoa_r+0x76e>
 8007164:	9a08      	ldr	r2, [sp, #32]
 8007166:	e775      	b.n	8007054 <_dtoa_r+0x7c4>
 8007168:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800716a:	2b01      	cmp	r3, #1
 800716c:	dc18      	bgt.n	80071a0 <_dtoa_r+0x910>
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	b9b3      	cbnz	r3, 80071a0 <_dtoa_r+0x910>
 8007172:	9b05      	ldr	r3, [sp, #20]
 8007174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007178:	b9a3      	cbnz	r3, 80071a4 <_dtoa_r+0x914>
 800717a:	9b05      	ldr	r3, [sp, #20]
 800717c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007180:	0d1b      	lsrs	r3, r3, #20
 8007182:	051b      	lsls	r3, r3, #20
 8007184:	b12b      	cbz	r3, 8007192 <_dtoa_r+0x902>
 8007186:	9b07      	ldr	r3, [sp, #28]
 8007188:	3301      	adds	r3, #1
 800718a:	9307      	str	r3, [sp, #28]
 800718c:	f108 0801 	add.w	r8, r8, #1
 8007190:	2301      	movs	r3, #1
 8007192:	9308      	str	r3, [sp, #32]
 8007194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007196:	2b00      	cmp	r3, #0
 8007198:	f47f af74 	bne.w	8007084 <_dtoa_r+0x7f4>
 800719c:	2001      	movs	r0, #1
 800719e:	e779      	b.n	8007094 <_dtoa_r+0x804>
 80071a0:	2300      	movs	r3, #0
 80071a2:	e7f6      	b.n	8007192 <_dtoa_r+0x902>
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	e7f4      	b.n	8007192 <_dtoa_r+0x902>
 80071a8:	d085      	beq.n	80070b6 <_dtoa_r+0x826>
 80071aa:	4618      	mov	r0, r3
 80071ac:	301c      	adds	r0, #28
 80071ae:	e77d      	b.n	80070ac <_dtoa_r+0x81c>
 80071b0:	40240000 	.word	0x40240000
 80071b4:	9b06      	ldr	r3, [sp, #24]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	dc38      	bgt.n	800722c <_dtoa_r+0x99c>
 80071ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80071bc:	2b02      	cmp	r3, #2
 80071be:	dd35      	ble.n	800722c <_dtoa_r+0x99c>
 80071c0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80071c4:	f1b9 0f00 	cmp.w	r9, #0
 80071c8:	d10d      	bne.n	80071e6 <_dtoa_r+0x956>
 80071ca:	4631      	mov	r1, r6
 80071cc:	464b      	mov	r3, r9
 80071ce:	2205      	movs	r2, #5
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 f9b7 	bl	8007544 <__multadd>
 80071d6:	4601      	mov	r1, r0
 80071d8:	4606      	mov	r6, r0
 80071da:	4658      	mov	r0, fp
 80071dc:	f000 fbce 	bl	800797c <__mcmp>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f73f adbd 	bgt.w	8006d60 <_dtoa_r+0x4d0>
 80071e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e8:	9d03      	ldr	r5, [sp, #12]
 80071ea:	ea6f 0a03 	mvn.w	sl, r3
 80071ee:	f04f 0800 	mov.w	r8, #0
 80071f2:	4631      	mov	r1, r6
 80071f4:	4620      	mov	r0, r4
 80071f6:	f000 f983 	bl	8007500 <_Bfree>
 80071fa:	2f00      	cmp	r7, #0
 80071fc:	f43f aeb4 	beq.w	8006f68 <_dtoa_r+0x6d8>
 8007200:	f1b8 0f00 	cmp.w	r8, #0
 8007204:	d005      	beq.n	8007212 <_dtoa_r+0x982>
 8007206:	45b8      	cmp	r8, r7
 8007208:	d003      	beq.n	8007212 <_dtoa_r+0x982>
 800720a:	4641      	mov	r1, r8
 800720c:	4620      	mov	r0, r4
 800720e:	f000 f977 	bl	8007500 <_Bfree>
 8007212:	4639      	mov	r1, r7
 8007214:	4620      	mov	r0, r4
 8007216:	f000 f973 	bl	8007500 <_Bfree>
 800721a:	e6a5      	b.n	8006f68 <_dtoa_r+0x6d8>
 800721c:	2600      	movs	r6, #0
 800721e:	4637      	mov	r7, r6
 8007220:	e7e1      	b.n	80071e6 <_dtoa_r+0x956>
 8007222:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007224:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007228:	4637      	mov	r7, r6
 800722a:	e599      	b.n	8006d60 <_dtoa_r+0x4d0>
 800722c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800722e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 80fd 	beq.w	8007432 <_dtoa_r+0xba2>
 8007238:	2d00      	cmp	r5, #0
 800723a:	dd05      	ble.n	8007248 <_dtoa_r+0x9b8>
 800723c:	4639      	mov	r1, r7
 800723e:	462a      	mov	r2, r5
 8007240:	4620      	mov	r0, r4
 8007242:	f000 fb2f 	bl	80078a4 <__lshift>
 8007246:	4607      	mov	r7, r0
 8007248:	9b08      	ldr	r3, [sp, #32]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d05c      	beq.n	8007308 <_dtoa_r+0xa78>
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	4620      	mov	r0, r4
 8007252:	f000 f915 	bl	8007480 <_Balloc>
 8007256:	4605      	mov	r5, r0
 8007258:	b928      	cbnz	r0, 8007266 <_dtoa_r+0x9d6>
 800725a:	4b80      	ldr	r3, [pc, #512]	; (800745c <_dtoa_r+0xbcc>)
 800725c:	4602      	mov	r2, r0
 800725e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007262:	f7ff bb2b 	b.w	80068bc <_dtoa_r+0x2c>
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	3202      	adds	r2, #2
 800726a:	0092      	lsls	r2, r2, #2
 800726c:	f107 010c 	add.w	r1, r7, #12
 8007270:	300c      	adds	r0, #12
 8007272:	f7fe fddf 	bl	8005e34 <memcpy>
 8007276:	2201      	movs	r2, #1
 8007278:	4629      	mov	r1, r5
 800727a:	4620      	mov	r0, r4
 800727c:	f000 fb12 	bl	80078a4 <__lshift>
 8007280:	9b03      	ldr	r3, [sp, #12]
 8007282:	3301      	adds	r3, #1
 8007284:	9306      	str	r3, [sp, #24]
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	444b      	add	r3, r9
 800728a:	9309      	str	r3, [sp, #36]	; 0x24
 800728c:	9b04      	ldr	r3, [sp, #16]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	46b8      	mov	r8, r7
 8007294:	9308      	str	r3, [sp, #32]
 8007296:	4607      	mov	r7, r0
 8007298:	9b06      	ldr	r3, [sp, #24]
 800729a:	4631      	mov	r1, r6
 800729c:	3b01      	subs	r3, #1
 800729e:	4658      	mov	r0, fp
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	f7ff fa69 	bl	8006778 <quorem>
 80072a6:	4603      	mov	r3, r0
 80072a8:	3330      	adds	r3, #48	; 0x30
 80072aa:	9007      	str	r0, [sp, #28]
 80072ac:	4641      	mov	r1, r8
 80072ae:	4658      	mov	r0, fp
 80072b0:	930c      	str	r3, [sp, #48]	; 0x30
 80072b2:	f000 fb63 	bl	800797c <__mcmp>
 80072b6:	463a      	mov	r2, r7
 80072b8:	4681      	mov	r9, r0
 80072ba:	4631      	mov	r1, r6
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 fb79 	bl	80079b4 <__mdiff>
 80072c2:	68c2      	ldr	r2, [r0, #12]
 80072c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072c6:	4605      	mov	r5, r0
 80072c8:	bb02      	cbnz	r2, 800730c <_dtoa_r+0xa7c>
 80072ca:	4601      	mov	r1, r0
 80072cc:	4658      	mov	r0, fp
 80072ce:	f000 fb55 	bl	800797c <__mcmp>
 80072d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072d4:	4602      	mov	r2, r0
 80072d6:	4629      	mov	r1, r5
 80072d8:	4620      	mov	r0, r4
 80072da:	920a      	str	r2, [sp, #40]	; 0x28
 80072dc:	930c      	str	r3, [sp, #48]	; 0x30
 80072de:	f000 f90f 	bl	8007500 <_Bfree>
 80072e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072e6:	9d06      	ldr	r5, [sp, #24]
 80072e8:	ea43 0102 	orr.w	r1, r3, r2
 80072ec:	9b08      	ldr	r3, [sp, #32]
 80072ee:	430b      	orrs	r3, r1
 80072f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072f2:	d10d      	bne.n	8007310 <_dtoa_r+0xa80>
 80072f4:	2b39      	cmp	r3, #57	; 0x39
 80072f6:	d029      	beq.n	800734c <_dtoa_r+0xabc>
 80072f8:	f1b9 0f00 	cmp.w	r9, #0
 80072fc:	dd01      	ble.n	8007302 <_dtoa_r+0xa72>
 80072fe:	9b07      	ldr	r3, [sp, #28]
 8007300:	3331      	adds	r3, #49	; 0x31
 8007302:	9a04      	ldr	r2, [sp, #16]
 8007304:	7013      	strb	r3, [r2, #0]
 8007306:	e774      	b.n	80071f2 <_dtoa_r+0x962>
 8007308:	4638      	mov	r0, r7
 800730a:	e7b9      	b.n	8007280 <_dtoa_r+0x9f0>
 800730c:	2201      	movs	r2, #1
 800730e:	e7e2      	b.n	80072d6 <_dtoa_r+0xa46>
 8007310:	f1b9 0f00 	cmp.w	r9, #0
 8007314:	db06      	blt.n	8007324 <_dtoa_r+0xa94>
 8007316:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007318:	ea41 0909 	orr.w	r9, r1, r9
 800731c:	9908      	ldr	r1, [sp, #32]
 800731e:	ea59 0101 	orrs.w	r1, r9, r1
 8007322:	d120      	bne.n	8007366 <_dtoa_r+0xad6>
 8007324:	2a00      	cmp	r2, #0
 8007326:	ddec      	ble.n	8007302 <_dtoa_r+0xa72>
 8007328:	4659      	mov	r1, fp
 800732a:	2201      	movs	r2, #1
 800732c:	4620      	mov	r0, r4
 800732e:	9306      	str	r3, [sp, #24]
 8007330:	f000 fab8 	bl	80078a4 <__lshift>
 8007334:	4631      	mov	r1, r6
 8007336:	4683      	mov	fp, r0
 8007338:	f000 fb20 	bl	800797c <__mcmp>
 800733c:	2800      	cmp	r0, #0
 800733e:	9b06      	ldr	r3, [sp, #24]
 8007340:	dc02      	bgt.n	8007348 <_dtoa_r+0xab8>
 8007342:	d1de      	bne.n	8007302 <_dtoa_r+0xa72>
 8007344:	07da      	lsls	r2, r3, #31
 8007346:	d5dc      	bpl.n	8007302 <_dtoa_r+0xa72>
 8007348:	2b39      	cmp	r3, #57	; 0x39
 800734a:	d1d8      	bne.n	80072fe <_dtoa_r+0xa6e>
 800734c:	9a04      	ldr	r2, [sp, #16]
 800734e:	2339      	movs	r3, #57	; 0x39
 8007350:	7013      	strb	r3, [r2, #0]
 8007352:	462b      	mov	r3, r5
 8007354:	461d      	mov	r5, r3
 8007356:	3b01      	subs	r3, #1
 8007358:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800735c:	2a39      	cmp	r2, #57	; 0x39
 800735e:	d050      	beq.n	8007402 <_dtoa_r+0xb72>
 8007360:	3201      	adds	r2, #1
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e745      	b.n	80071f2 <_dtoa_r+0x962>
 8007366:	2a00      	cmp	r2, #0
 8007368:	dd03      	ble.n	8007372 <_dtoa_r+0xae2>
 800736a:	2b39      	cmp	r3, #57	; 0x39
 800736c:	d0ee      	beq.n	800734c <_dtoa_r+0xabc>
 800736e:	3301      	adds	r3, #1
 8007370:	e7c7      	b.n	8007302 <_dtoa_r+0xa72>
 8007372:	9a06      	ldr	r2, [sp, #24]
 8007374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007376:	f802 3c01 	strb.w	r3, [r2, #-1]
 800737a:	428a      	cmp	r2, r1
 800737c:	d02a      	beq.n	80073d4 <_dtoa_r+0xb44>
 800737e:	4659      	mov	r1, fp
 8007380:	2300      	movs	r3, #0
 8007382:	220a      	movs	r2, #10
 8007384:	4620      	mov	r0, r4
 8007386:	f000 f8dd 	bl	8007544 <__multadd>
 800738a:	45b8      	cmp	r8, r7
 800738c:	4683      	mov	fp, r0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	f04f 020a 	mov.w	r2, #10
 8007396:	4641      	mov	r1, r8
 8007398:	4620      	mov	r0, r4
 800739a:	d107      	bne.n	80073ac <_dtoa_r+0xb1c>
 800739c:	f000 f8d2 	bl	8007544 <__multadd>
 80073a0:	4680      	mov	r8, r0
 80073a2:	4607      	mov	r7, r0
 80073a4:	9b06      	ldr	r3, [sp, #24]
 80073a6:	3301      	adds	r3, #1
 80073a8:	9306      	str	r3, [sp, #24]
 80073aa:	e775      	b.n	8007298 <_dtoa_r+0xa08>
 80073ac:	f000 f8ca 	bl	8007544 <__multadd>
 80073b0:	4639      	mov	r1, r7
 80073b2:	4680      	mov	r8, r0
 80073b4:	2300      	movs	r3, #0
 80073b6:	220a      	movs	r2, #10
 80073b8:	4620      	mov	r0, r4
 80073ba:	f000 f8c3 	bl	8007544 <__multadd>
 80073be:	4607      	mov	r7, r0
 80073c0:	e7f0      	b.n	80073a4 <_dtoa_r+0xb14>
 80073c2:	f1b9 0f00 	cmp.w	r9, #0
 80073c6:	9a03      	ldr	r2, [sp, #12]
 80073c8:	bfcc      	ite	gt
 80073ca:	464d      	movgt	r5, r9
 80073cc:	2501      	movle	r5, #1
 80073ce:	4415      	add	r5, r2
 80073d0:	f04f 0800 	mov.w	r8, #0
 80073d4:	4659      	mov	r1, fp
 80073d6:	2201      	movs	r2, #1
 80073d8:	4620      	mov	r0, r4
 80073da:	9306      	str	r3, [sp, #24]
 80073dc:	f000 fa62 	bl	80078a4 <__lshift>
 80073e0:	4631      	mov	r1, r6
 80073e2:	4683      	mov	fp, r0
 80073e4:	f000 faca 	bl	800797c <__mcmp>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	dcb2      	bgt.n	8007352 <_dtoa_r+0xac2>
 80073ec:	d102      	bne.n	80073f4 <_dtoa_r+0xb64>
 80073ee:	9b06      	ldr	r3, [sp, #24]
 80073f0:	07db      	lsls	r3, r3, #31
 80073f2:	d4ae      	bmi.n	8007352 <_dtoa_r+0xac2>
 80073f4:	462b      	mov	r3, r5
 80073f6:	461d      	mov	r5, r3
 80073f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073fc:	2a30      	cmp	r2, #48	; 0x30
 80073fe:	d0fa      	beq.n	80073f6 <_dtoa_r+0xb66>
 8007400:	e6f7      	b.n	80071f2 <_dtoa_r+0x962>
 8007402:	9a03      	ldr	r2, [sp, #12]
 8007404:	429a      	cmp	r2, r3
 8007406:	d1a5      	bne.n	8007354 <_dtoa_r+0xac4>
 8007408:	f10a 0a01 	add.w	sl, sl, #1
 800740c:	2331      	movs	r3, #49	; 0x31
 800740e:	e779      	b.n	8007304 <_dtoa_r+0xa74>
 8007410:	4b13      	ldr	r3, [pc, #76]	; (8007460 <_dtoa_r+0xbd0>)
 8007412:	f7ff baac 	b.w	800696e <_dtoa_r+0xde>
 8007416:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007418:	2b00      	cmp	r3, #0
 800741a:	f47f aa83 	bne.w	8006924 <_dtoa_r+0x94>
 800741e:	4b11      	ldr	r3, [pc, #68]	; (8007464 <_dtoa_r+0xbd4>)
 8007420:	f7ff baa5 	b.w	800696e <_dtoa_r+0xde>
 8007424:	f1b9 0f00 	cmp.w	r9, #0
 8007428:	dc03      	bgt.n	8007432 <_dtoa_r+0xba2>
 800742a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800742c:	2b02      	cmp	r3, #2
 800742e:	f73f aec9 	bgt.w	80071c4 <_dtoa_r+0x934>
 8007432:	9d03      	ldr	r5, [sp, #12]
 8007434:	4631      	mov	r1, r6
 8007436:	4658      	mov	r0, fp
 8007438:	f7ff f99e 	bl	8006778 <quorem>
 800743c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007440:	f805 3b01 	strb.w	r3, [r5], #1
 8007444:	9a03      	ldr	r2, [sp, #12]
 8007446:	1aaa      	subs	r2, r5, r2
 8007448:	4591      	cmp	r9, r2
 800744a:	ddba      	ble.n	80073c2 <_dtoa_r+0xb32>
 800744c:	4659      	mov	r1, fp
 800744e:	2300      	movs	r3, #0
 8007450:	220a      	movs	r2, #10
 8007452:	4620      	mov	r0, r4
 8007454:	f000 f876 	bl	8007544 <__multadd>
 8007458:	4683      	mov	fp, r0
 800745a:	e7eb      	b.n	8007434 <_dtoa_r+0xba4>
 800745c:	080090c3 	.word	0x080090c3
 8007460:	0800901c 	.word	0x0800901c
 8007464:	08009040 	.word	0x08009040

08007468 <_localeconv_r>:
 8007468:	4800      	ldr	r0, [pc, #0]	; (800746c <_localeconv_r+0x4>)
 800746a:	4770      	bx	lr
 800746c:	20000188 	.word	0x20000188

08007470 <malloc>:
 8007470:	4b02      	ldr	r3, [pc, #8]	; (800747c <malloc+0xc>)
 8007472:	4601      	mov	r1, r0
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	f000 bbdf 	b.w	8007c38 <_malloc_r>
 800747a:	bf00      	nop
 800747c:	20000034 	.word	0x20000034

08007480 <_Balloc>:
 8007480:	b570      	push	{r4, r5, r6, lr}
 8007482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007484:	4604      	mov	r4, r0
 8007486:	460d      	mov	r5, r1
 8007488:	b976      	cbnz	r6, 80074a8 <_Balloc+0x28>
 800748a:	2010      	movs	r0, #16
 800748c:	f7ff fff0 	bl	8007470 <malloc>
 8007490:	4602      	mov	r2, r0
 8007492:	6260      	str	r0, [r4, #36]	; 0x24
 8007494:	b920      	cbnz	r0, 80074a0 <_Balloc+0x20>
 8007496:	4b18      	ldr	r3, [pc, #96]	; (80074f8 <_Balloc+0x78>)
 8007498:	4818      	ldr	r0, [pc, #96]	; (80074fc <_Balloc+0x7c>)
 800749a:	2166      	movs	r1, #102	; 0x66
 800749c:	f000 fd92 	bl	8007fc4 <__assert_func>
 80074a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074a4:	6006      	str	r6, [r0, #0]
 80074a6:	60c6      	str	r6, [r0, #12]
 80074a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074aa:	68f3      	ldr	r3, [r6, #12]
 80074ac:	b183      	cbz	r3, 80074d0 <_Balloc+0x50>
 80074ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074b6:	b9b8      	cbnz	r0, 80074e8 <_Balloc+0x68>
 80074b8:	2101      	movs	r1, #1
 80074ba:	fa01 f605 	lsl.w	r6, r1, r5
 80074be:	1d72      	adds	r2, r6, #5
 80074c0:	0092      	lsls	r2, r2, #2
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 fb58 	bl	8007b78 <_calloc_r>
 80074c8:	b160      	cbz	r0, 80074e4 <_Balloc+0x64>
 80074ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074ce:	e00e      	b.n	80074ee <_Balloc+0x6e>
 80074d0:	2221      	movs	r2, #33	; 0x21
 80074d2:	2104      	movs	r1, #4
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 fb4f 	bl	8007b78 <_calloc_r>
 80074da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074dc:	60f0      	str	r0, [r6, #12]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e4      	bne.n	80074ae <_Balloc+0x2e>
 80074e4:	2000      	movs	r0, #0
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
 80074e8:	6802      	ldr	r2, [r0, #0]
 80074ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074ee:	2300      	movs	r3, #0
 80074f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074f4:	e7f7      	b.n	80074e6 <_Balloc+0x66>
 80074f6:	bf00      	nop
 80074f8:	0800904d 	.word	0x0800904d
 80074fc:	080090d4 	.word	0x080090d4

08007500 <_Bfree>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007504:	4605      	mov	r5, r0
 8007506:	460c      	mov	r4, r1
 8007508:	b976      	cbnz	r6, 8007528 <_Bfree+0x28>
 800750a:	2010      	movs	r0, #16
 800750c:	f7ff ffb0 	bl	8007470 <malloc>
 8007510:	4602      	mov	r2, r0
 8007512:	6268      	str	r0, [r5, #36]	; 0x24
 8007514:	b920      	cbnz	r0, 8007520 <_Bfree+0x20>
 8007516:	4b09      	ldr	r3, [pc, #36]	; (800753c <_Bfree+0x3c>)
 8007518:	4809      	ldr	r0, [pc, #36]	; (8007540 <_Bfree+0x40>)
 800751a:	218a      	movs	r1, #138	; 0x8a
 800751c:	f000 fd52 	bl	8007fc4 <__assert_func>
 8007520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007524:	6006      	str	r6, [r0, #0]
 8007526:	60c6      	str	r6, [r0, #12]
 8007528:	b13c      	cbz	r4, 800753a <_Bfree+0x3a>
 800752a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800752c:	6862      	ldr	r2, [r4, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007534:	6021      	str	r1, [r4, #0]
 8007536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800753a:	bd70      	pop	{r4, r5, r6, pc}
 800753c:	0800904d 	.word	0x0800904d
 8007540:	080090d4 	.word	0x080090d4

08007544 <__multadd>:
 8007544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007548:	690e      	ldr	r6, [r1, #16]
 800754a:	4607      	mov	r7, r0
 800754c:	4698      	mov	r8, r3
 800754e:	460c      	mov	r4, r1
 8007550:	f101 0014 	add.w	r0, r1, #20
 8007554:	2300      	movs	r3, #0
 8007556:	6805      	ldr	r5, [r0, #0]
 8007558:	b2a9      	uxth	r1, r5
 800755a:	fb02 8101 	mla	r1, r2, r1, r8
 800755e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007562:	0c2d      	lsrs	r5, r5, #16
 8007564:	fb02 c505 	mla	r5, r2, r5, ip
 8007568:	b289      	uxth	r1, r1
 800756a:	3301      	adds	r3, #1
 800756c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007570:	429e      	cmp	r6, r3
 8007572:	f840 1b04 	str.w	r1, [r0], #4
 8007576:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800757a:	dcec      	bgt.n	8007556 <__multadd+0x12>
 800757c:	f1b8 0f00 	cmp.w	r8, #0
 8007580:	d022      	beq.n	80075c8 <__multadd+0x84>
 8007582:	68a3      	ldr	r3, [r4, #8]
 8007584:	42b3      	cmp	r3, r6
 8007586:	dc19      	bgt.n	80075bc <__multadd+0x78>
 8007588:	6861      	ldr	r1, [r4, #4]
 800758a:	4638      	mov	r0, r7
 800758c:	3101      	adds	r1, #1
 800758e:	f7ff ff77 	bl	8007480 <_Balloc>
 8007592:	4605      	mov	r5, r0
 8007594:	b928      	cbnz	r0, 80075a2 <__multadd+0x5e>
 8007596:	4602      	mov	r2, r0
 8007598:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <__multadd+0x8c>)
 800759a:	480e      	ldr	r0, [pc, #56]	; (80075d4 <__multadd+0x90>)
 800759c:	21b5      	movs	r1, #181	; 0xb5
 800759e:	f000 fd11 	bl	8007fc4 <__assert_func>
 80075a2:	6922      	ldr	r2, [r4, #16]
 80075a4:	3202      	adds	r2, #2
 80075a6:	f104 010c 	add.w	r1, r4, #12
 80075aa:	0092      	lsls	r2, r2, #2
 80075ac:	300c      	adds	r0, #12
 80075ae:	f7fe fc41 	bl	8005e34 <memcpy>
 80075b2:	4621      	mov	r1, r4
 80075b4:	4638      	mov	r0, r7
 80075b6:	f7ff ffa3 	bl	8007500 <_Bfree>
 80075ba:	462c      	mov	r4, r5
 80075bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80075c0:	3601      	adds	r6, #1
 80075c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80075c6:	6126      	str	r6, [r4, #16]
 80075c8:	4620      	mov	r0, r4
 80075ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ce:	bf00      	nop
 80075d0:	080090c3 	.word	0x080090c3
 80075d4:	080090d4 	.word	0x080090d4

080075d8 <__hi0bits>:
 80075d8:	0c03      	lsrs	r3, r0, #16
 80075da:	041b      	lsls	r3, r3, #16
 80075dc:	b9d3      	cbnz	r3, 8007614 <__hi0bits+0x3c>
 80075de:	0400      	lsls	r0, r0, #16
 80075e0:	2310      	movs	r3, #16
 80075e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075e6:	bf04      	itt	eq
 80075e8:	0200      	lsleq	r0, r0, #8
 80075ea:	3308      	addeq	r3, #8
 80075ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075f0:	bf04      	itt	eq
 80075f2:	0100      	lsleq	r0, r0, #4
 80075f4:	3304      	addeq	r3, #4
 80075f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075fa:	bf04      	itt	eq
 80075fc:	0080      	lsleq	r0, r0, #2
 80075fe:	3302      	addeq	r3, #2
 8007600:	2800      	cmp	r0, #0
 8007602:	db05      	blt.n	8007610 <__hi0bits+0x38>
 8007604:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007608:	f103 0301 	add.w	r3, r3, #1
 800760c:	bf08      	it	eq
 800760e:	2320      	moveq	r3, #32
 8007610:	4618      	mov	r0, r3
 8007612:	4770      	bx	lr
 8007614:	2300      	movs	r3, #0
 8007616:	e7e4      	b.n	80075e2 <__hi0bits+0xa>

08007618 <__lo0bits>:
 8007618:	6803      	ldr	r3, [r0, #0]
 800761a:	f013 0207 	ands.w	r2, r3, #7
 800761e:	4601      	mov	r1, r0
 8007620:	d00b      	beq.n	800763a <__lo0bits+0x22>
 8007622:	07da      	lsls	r2, r3, #31
 8007624:	d424      	bmi.n	8007670 <__lo0bits+0x58>
 8007626:	0798      	lsls	r0, r3, #30
 8007628:	bf49      	itett	mi
 800762a:	085b      	lsrmi	r3, r3, #1
 800762c:	089b      	lsrpl	r3, r3, #2
 800762e:	2001      	movmi	r0, #1
 8007630:	600b      	strmi	r3, [r1, #0]
 8007632:	bf5c      	itt	pl
 8007634:	600b      	strpl	r3, [r1, #0]
 8007636:	2002      	movpl	r0, #2
 8007638:	4770      	bx	lr
 800763a:	b298      	uxth	r0, r3
 800763c:	b9b0      	cbnz	r0, 800766c <__lo0bits+0x54>
 800763e:	0c1b      	lsrs	r3, r3, #16
 8007640:	2010      	movs	r0, #16
 8007642:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007646:	bf04      	itt	eq
 8007648:	0a1b      	lsreq	r3, r3, #8
 800764a:	3008      	addeq	r0, #8
 800764c:	071a      	lsls	r2, r3, #28
 800764e:	bf04      	itt	eq
 8007650:	091b      	lsreq	r3, r3, #4
 8007652:	3004      	addeq	r0, #4
 8007654:	079a      	lsls	r2, r3, #30
 8007656:	bf04      	itt	eq
 8007658:	089b      	lsreq	r3, r3, #2
 800765a:	3002      	addeq	r0, #2
 800765c:	07da      	lsls	r2, r3, #31
 800765e:	d403      	bmi.n	8007668 <__lo0bits+0x50>
 8007660:	085b      	lsrs	r3, r3, #1
 8007662:	f100 0001 	add.w	r0, r0, #1
 8007666:	d005      	beq.n	8007674 <__lo0bits+0x5c>
 8007668:	600b      	str	r3, [r1, #0]
 800766a:	4770      	bx	lr
 800766c:	4610      	mov	r0, r2
 800766e:	e7e8      	b.n	8007642 <__lo0bits+0x2a>
 8007670:	2000      	movs	r0, #0
 8007672:	4770      	bx	lr
 8007674:	2020      	movs	r0, #32
 8007676:	4770      	bx	lr

08007678 <__i2b>:
 8007678:	b510      	push	{r4, lr}
 800767a:	460c      	mov	r4, r1
 800767c:	2101      	movs	r1, #1
 800767e:	f7ff feff 	bl	8007480 <_Balloc>
 8007682:	4602      	mov	r2, r0
 8007684:	b928      	cbnz	r0, 8007692 <__i2b+0x1a>
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <__i2b+0x24>)
 8007688:	4805      	ldr	r0, [pc, #20]	; (80076a0 <__i2b+0x28>)
 800768a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800768e:	f000 fc99 	bl	8007fc4 <__assert_func>
 8007692:	2301      	movs	r3, #1
 8007694:	6144      	str	r4, [r0, #20]
 8007696:	6103      	str	r3, [r0, #16]
 8007698:	bd10      	pop	{r4, pc}
 800769a:	bf00      	nop
 800769c:	080090c3 	.word	0x080090c3
 80076a0:	080090d4 	.word	0x080090d4

080076a4 <__multiply>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	4614      	mov	r4, r2
 80076aa:	690a      	ldr	r2, [r1, #16]
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	bfb8      	it	lt
 80076b2:	460b      	movlt	r3, r1
 80076b4:	460d      	mov	r5, r1
 80076b6:	bfbc      	itt	lt
 80076b8:	4625      	movlt	r5, r4
 80076ba:	461c      	movlt	r4, r3
 80076bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80076c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80076c4:	68ab      	ldr	r3, [r5, #8]
 80076c6:	6869      	ldr	r1, [r5, #4]
 80076c8:	eb0a 0709 	add.w	r7, sl, r9
 80076cc:	42bb      	cmp	r3, r7
 80076ce:	b085      	sub	sp, #20
 80076d0:	bfb8      	it	lt
 80076d2:	3101      	addlt	r1, #1
 80076d4:	f7ff fed4 	bl	8007480 <_Balloc>
 80076d8:	b930      	cbnz	r0, 80076e8 <__multiply+0x44>
 80076da:	4602      	mov	r2, r0
 80076dc:	4b42      	ldr	r3, [pc, #264]	; (80077e8 <__multiply+0x144>)
 80076de:	4843      	ldr	r0, [pc, #268]	; (80077ec <__multiply+0x148>)
 80076e0:	f240 115d 	movw	r1, #349	; 0x15d
 80076e4:	f000 fc6e 	bl	8007fc4 <__assert_func>
 80076e8:	f100 0614 	add.w	r6, r0, #20
 80076ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80076f0:	4633      	mov	r3, r6
 80076f2:	2200      	movs	r2, #0
 80076f4:	4543      	cmp	r3, r8
 80076f6:	d31e      	bcc.n	8007736 <__multiply+0x92>
 80076f8:	f105 0c14 	add.w	ip, r5, #20
 80076fc:	f104 0314 	add.w	r3, r4, #20
 8007700:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007704:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007708:	9202      	str	r2, [sp, #8]
 800770a:	ebac 0205 	sub.w	r2, ip, r5
 800770e:	3a15      	subs	r2, #21
 8007710:	f022 0203 	bic.w	r2, r2, #3
 8007714:	3204      	adds	r2, #4
 8007716:	f105 0115 	add.w	r1, r5, #21
 800771a:	458c      	cmp	ip, r1
 800771c:	bf38      	it	cc
 800771e:	2204      	movcc	r2, #4
 8007720:	9201      	str	r2, [sp, #4]
 8007722:	9a02      	ldr	r2, [sp, #8]
 8007724:	9303      	str	r3, [sp, #12]
 8007726:	429a      	cmp	r2, r3
 8007728:	d808      	bhi.n	800773c <__multiply+0x98>
 800772a:	2f00      	cmp	r7, #0
 800772c:	dc55      	bgt.n	80077da <__multiply+0x136>
 800772e:	6107      	str	r7, [r0, #16]
 8007730:	b005      	add	sp, #20
 8007732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007736:	f843 2b04 	str.w	r2, [r3], #4
 800773a:	e7db      	b.n	80076f4 <__multiply+0x50>
 800773c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007740:	f1ba 0f00 	cmp.w	sl, #0
 8007744:	d020      	beq.n	8007788 <__multiply+0xe4>
 8007746:	f105 0e14 	add.w	lr, r5, #20
 800774a:	46b1      	mov	r9, r6
 800774c:	2200      	movs	r2, #0
 800774e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007752:	f8d9 b000 	ldr.w	fp, [r9]
 8007756:	b2a1      	uxth	r1, r4
 8007758:	fa1f fb8b 	uxth.w	fp, fp
 800775c:	fb0a b101 	mla	r1, sl, r1, fp
 8007760:	4411      	add	r1, r2
 8007762:	f8d9 2000 	ldr.w	r2, [r9]
 8007766:	0c24      	lsrs	r4, r4, #16
 8007768:	0c12      	lsrs	r2, r2, #16
 800776a:	fb0a 2404 	mla	r4, sl, r4, r2
 800776e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007772:	b289      	uxth	r1, r1
 8007774:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007778:	45f4      	cmp	ip, lr
 800777a:	f849 1b04 	str.w	r1, [r9], #4
 800777e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007782:	d8e4      	bhi.n	800774e <__multiply+0xaa>
 8007784:	9901      	ldr	r1, [sp, #4]
 8007786:	5072      	str	r2, [r6, r1]
 8007788:	9a03      	ldr	r2, [sp, #12]
 800778a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800778e:	3304      	adds	r3, #4
 8007790:	f1b9 0f00 	cmp.w	r9, #0
 8007794:	d01f      	beq.n	80077d6 <__multiply+0x132>
 8007796:	6834      	ldr	r4, [r6, #0]
 8007798:	f105 0114 	add.w	r1, r5, #20
 800779c:	46b6      	mov	lr, r6
 800779e:	f04f 0a00 	mov.w	sl, #0
 80077a2:	880a      	ldrh	r2, [r1, #0]
 80077a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80077a8:	fb09 b202 	mla	r2, r9, r2, fp
 80077ac:	4492      	add	sl, r2
 80077ae:	b2a4      	uxth	r4, r4
 80077b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80077b4:	f84e 4b04 	str.w	r4, [lr], #4
 80077b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80077bc:	f8be 2000 	ldrh.w	r2, [lr]
 80077c0:	0c24      	lsrs	r4, r4, #16
 80077c2:	fb09 2404 	mla	r4, r9, r4, r2
 80077c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80077ca:	458c      	cmp	ip, r1
 80077cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80077d0:	d8e7      	bhi.n	80077a2 <__multiply+0xfe>
 80077d2:	9a01      	ldr	r2, [sp, #4]
 80077d4:	50b4      	str	r4, [r6, r2]
 80077d6:	3604      	adds	r6, #4
 80077d8:	e7a3      	b.n	8007722 <__multiply+0x7e>
 80077da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1a5      	bne.n	800772e <__multiply+0x8a>
 80077e2:	3f01      	subs	r7, #1
 80077e4:	e7a1      	b.n	800772a <__multiply+0x86>
 80077e6:	bf00      	nop
 80077e8:	080090c3 	.word	0x080090c3
 80077ec:	080090d4 	.word	0x080090d4

080077f0 <__pow5mult>:
 80077f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f4:	4615      	mov	r5, r2
 80077f6:	f012 0203 	ands.w	r2, r2, #3
 80077fa:	4606      	mov	r6, r0
 80077fc:	460f      	mov	r7, r1
 80077fe:	d007      	beq.n	8007810 <__pow5mult+0x20>
 8007800:	4c25      	ldr	r4, [pc, #148]	; (8007898 <__pow5mult+0xa8>)
 8007802:	3a01      	subs	r2, #1
 8007804:	2300      	movs	r3, #0
 8007806:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800780a:	f7ff fe9b 	bl	8007544 <__multadd>
 800780e:	4607      	mov	r7, r0
 8007810:	10ad      	asrs	r5, r5, #2
 8007812:	d03d      	beq.n	8007890 <__pow5mult+0xa0>
 8007814:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007816:	b97c      	cbnz	r4, 8007838 <__pow5mult+0x48>
 8007818:	2010      	movs	r0, #16
 800781a:	f7ff fe29 	bl	8007470 <malloc>
 800781e:	4602      	mov	r2, r0
 8007820:	6270      	str	r0, [r6, #36]	; 0x24
 8007822:	b928      	cbnz	r0, 8007830 <__pow5mult+0x40>
 8007824:	4b1d      	ldr	r3, [pc, #116]	; (800789c <__pow5mult+0xac>)
 8007826:	481e      	ldr	r0, [pc, #120]	; (80078a0 <__pow5mult+0xb0>)
 8007828:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800782c:	f000 fbca 	bl	8007fc4 <__assert_func>
 8007830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007834:	6004      	str	r4, [r0, #0]
 8007836:	60c4      	str	r4, [r0, #12]
 8007838:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800783c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007840:	b94c      	cbnz	r4, 8007856 <__pow5mult+0x66>
 8007842:	f240 2171 	movw	r1, #625	; 0x271
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff ff16 	bl	8007678 <__i2b>
 800784c:	2300      	movs	r3, #0
 800784e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007852:	4604      	mov	r4, r0
 8007854:	6003      	str	r3, [r0, #0]
 8007856:	f04f 0900 	mov.w	r9, #0
 800785a:	07eb      	lsls	r3, r5, #31
 800785c:	d50a      	bpl.n	8007874 <__pow5mult+0x84>
 800785e:	4639      	mov	r1, r7
 8007860:	4622      	mov	r2, r4
 8007862:	4630      	mov	r0, r6
 8007864:	f7ff ff1e 	bl	80076a4 <__multiply>
 8007868:	4639      	mov	r1, r7
 800786a:	4680      	mov	r8, r0
 800786c:	4630      	mov	r0, r6
 800786e:	f7ff fe47 	bl	8007500 <_Bfree>
 8007872:	4647      	mov	r7, r8
 8007874:	106d      	asrs	r5, r5, #1
 8007876:	d00b      	beq.n	8007890 <__pow5mult+0xa0>
 8007878:	6820      	ldr	r0, [r4, #0]
 800787a:	b938      	cbnz	r0, 800788c <__pow5mult+0x9c>
 800787c:	4622      	mov	r2, r4
 800787e:	4621      	mov	r1, r4
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff ff0f 	bl	80076a4 <__multiply>
 8007886:	6020      	str	r0, [r4, #0]
 8007888:	f8c0 9000 	str.w	r9, [r0]
 800788c:	4604      	mov	r4, r0
 800788e:	e7e4      	b.n	800785a <__pow5mult+0x6a>
 8007890:	4638      	mov	r0, r7
 8007892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007896:	bf00      	nop
 8007898:	08009228 	.word	0x08009228
 800789c:	0800904d 	.word	0x0800904d
 80078a0:	080090d4 	.word	0x080090d4

080078a4 <__lshift>:
 80078a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	460c      	mov	r4, r1
 80078aa:	6849      	ldr	r1, [r1, #4]
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078b2:	68a3      	ldr	r3, [r4, #8]
 80078b4:	4607      	mov	r7, r0
 80078b6:	4691      	mov	r9, r2
 80078b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078bc:	f108 0601 	add.w	r6, r8, #1
 80078c0:	42b3      	cmp	r3, r6
 80078c2:	db0b      	blt.n	80078dc <__lshift+0x38>
 80078c4:	4638      	mov	r0, r7
 80078c6:	f7ff fddb 	bl	8007480 <_Balloc>
 80078ca:	4605      	mov	r5, r0
 80078cc:	b948      	cbnz	r0, 80078e2 <__lshift+0x3e>
 80078ce:	4602      	mov	r2, r0
 80078d0:	4b28      	ldr	r3, [pc, #160]	; (8007974 <__lshift+0xd0>)
 80078d2:	4829      	ldr	r0, [pc, #164]	; (8007978 <__lshift+0xd4>)
 80078d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078d8:	f000 fb74 	bl	8007fc4 <__assert_func>
 80078dc:	3101      	adds	r1, #1
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	e7ee      	b.n	80078c0 <__lshift+0x1c>
 80078e2:	2300      	movs	r3, #0
 80078e4:	f100 0114 	add.w	r1, r0, #20
 80078e8:	f100 0210 	add.w	r2, r0, #16
 80078ec:	4618      	mov	r0, r3
 80078ee:	4553      	cmp	r3, sl
 80078f0:	db33      	blt.n	800795a <__lshift+0xb6>
 80078f2:	6920      	ldr	r0, [r4, #16]
 80078f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078f8:	f104 0314 	add.w	r3, r4, #20
 80078fc:	f019 091f 	ands.w	r9, r9, #31
 8007900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007904:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007908:	d02b      	beq.n	8007962 <__lshift+0xbe>
 800790a:	f1c9 0e20 	rsb	lr, r9, #32
 800790e:	468a      	mov	sl, r1
 8007910:	2200      	movs	r2, #0
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	fa00 f009 	lsl.w	r0, r0, r9
 8007918:	4302      	orrs	r2, r0
 800791a:	f84a 2b04 	str.w	r2, [sl], #4
 800791e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007922:	459c      	cmp	ip, r3
 8007924:	fa22 f20e 	lsr.w	r2, r2, lr
 8007928:	d8f3      	bhi.n	8007912 <__lshift+0x6e>
 800792a:	ebac 0304 	sub.w	r3, ip, r4
 800792e:	3b15      	subs	r3, #21
 8007930:	f023 0303 	bic.w	r3, r3, #3
 8007934:	3304      	adds	r3, #4
 8007936:	f104 0015 	add.w	r0, r4, #21
 800793a:	4584      	cmp	ip, r0
 800793c:	bf38      	it	cc
 800793e:	2304      	movcc	r3, #4
 8007940:	50ca      	str	r2, [r1, r3]
 8007942:	b10a      	cbz	r2, 8007948 <__lshift+0xa4>
 8007944:	f108 0602 	add.w	r6, r8, #2
 8007948:	3e01      	subs	r6, #1
 800794a:	4638      	mov	r0, r7
 800794c:	612e      	str	r6, [r5, #16]
 800794e:	4621      	mov	r1, r4
 8007950:	f7ff fdd6 	bl	8007500 <_Bfree>
 8007954:	4628      	mov	r0, r5
 8007956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795a:	f842 0f04 	str.w	r0, [r2, #4]!
 800795e:	3301      	adds	r3, #1
 8007960:	e7c5      	b.n	80078ee <__lshift+0x4a>
 8007962:	3904      	subs	r1, #4
 8007964:	f853 2b04 	ldr.w	r2, [r3], #4
 8007968:	f841 2f04 	str.w	r2, [r1, #4]!
 800796c:	459c      	cmp	ip, r3
 800796e:	d8f9      	bhi.n	8007964 <__lshift+0xc0>
 8007970:	e7ea      	b.n	8007948 <__lshift+0xa4>
 8007972:	bf00      	nop
 8007974:	080090c3 	.word	0x080090c3
 8007978:	080090d4 	.word	0x080090d4

0800797c <__mcmp>:
 800797c:	b530      	push	{r4, r5, lr}
 800797e:	6902      	ldr	r2, [r0, #16]
 8007980:	690c      	ldr	r4, [r1, #16]
 8007982:	1b12      	subs	r2, r2, r4
 8007984:	d10e      	bne.n	80079a4 <__mcmp+0x28>
 8007986:	f100 0314 	add.w	r3, r0, #20
 800798a:	3114      	adds	r1, #20
 800798c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007990:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007994:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007998:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800799c:	42a5      	cmp	r5, r4
 800799e:	d003      	beq.n	80079a8 <__mcmp+0x2c>
 80079a0:	d305      	bcc.n	80079ae <__mcmp+0x32>
 80079a2:	2201      	movs	r2, #1
 80079a4:	4610      	mov	r0, r2
 80079a6:	bd30      	pop	{r4, r5, pc}
 80079a8:	4283      	cmp	r3, r0
 80079aa:	d3f3      	bcc.n	8007994 <__mcmp+0x18>
 80079ac:	e7fa      	b.n	80079a4 <__mcmp+0x28>
 80079ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079b2:	e7f7      	b.n	80079a4 <__mcmp+0x28>

080079b4 <__mdiff>:
 80079b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	460c      	mov	r4, r1
 80079ba:	4606      	mov	r6, r0
 80079bc:	4611      	mov	r1, r2
 80079be:	4620      	mov	r0, r4
 80079c0:	4617      	mov	r7, r2
 80079c2:	f7ff ffdb 	bl	800797c <__mcmp>
 80079c6:	1e05      	subs	r5, r0, #0
 80079c8:	d110      	bne.n	80079ec <__mdiff+0x38>
 80079ca:	4629      	mov	r1, r5
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff fd57 	bl	8007480 <_Balloc>
 80079d2:	b930      	cbnz	r0, 80079e2 <__mdiff+0x2e>
 80079d4:	4b39      	ldr	r3, [pc, #228]	; (8007abc <__mdiff+0x108>)
 80079d6:	4602      	mov	r2, r0
 80079d8:	f240 2132 	movw	r1, #562	; 0x232
 80079dc:	4838      	ldr	r0, [pc, #224]	; (8007ac0 <__mdiff+0x10c>)
 80079de:	f000 faf1 	bl	8007fc4 <__assert_func>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	bfa4      	itt	ge
 80079ee:	463b      	movge	r3, r7
 80079f0:	4627      	movge	r7, r4
 80079f2:	4630      	mov	r0, r6
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	bfa6      	itte	ge
 80079f8:	461c      	movge	r4, r3
 80079fa:	2500      	movge	r5, #0
 80079fc:	2501      	movlt	r5, #1
 80079fe:	f7ff fd3f 	bl	8007480 <_Balloc>
 8007a02:	b920      	cbnz	r0, 8007a0e <__mdiff+0x5a>
 8007a04:	4b2d      	ldr	r3, [pc, #180]	; (8007abc <__mdiff+0x108>)
 8007a06:	4602      	mov	r2, r0
 8007a08:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a0c:	e7e6      	b.n	80079dc <__mdiff+0x28>
 8007a0e:	693e      	ldr	r6, [r7, #16]
 8007a10:	60c5      	str	r5, [r0, #12]
 8007a12:	6925      	ldr	r5, [r4, #16]
 8007a14:	f107 0114 	add.w	r1, r7, #20
 8007a18:	f104 0914 	add.w	r9, r4, #20
 8007a1c:	f100 0e14 	add.w	lr, r0, #20
 8007a20:	f107 0210 	add.w	r2, r7, #16
 8007a24:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007a28:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007a2c:	46f2      	mov	sl, lr
 8007a2e:	2700      	movs	r7, #0
 8007a30:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a38:	fa1f f883 	uxth.w	r8, r3
 8007a3c:	fa17 f78b 	uxtah	r7, r7, fp
 8007a40:	0c1b      	lsrs	r3, r3, #16
 8007a42:	eba7 0808 	sub.w	r8, r7, r8
 8007a46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a4e:	fa1f f888 	uxth.w	r8, r8
 8007a52:	141f      	asrs	r7, r3, #16
 8007a54:	454d      	cmp	r5, r9
 8007a56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a5a:	f84a 3b04 	str.w	r3, [sl], #4
 8007a5e:	d8e7      	bhi.n	8007a30 <__mdiff+0x7c>
 8007a60:	1b2b      	subs	r3, r5, r4
 8007a62:	3b15      	subs	r3, #21
 8007a64:	f023 0303 	bic.w	r3, r3, #3
 8007a68:	3304      	adds	r3, #4
 8007a6a:	3415      	adds	r4, #21
 8007a6c:	42a5      	cmp	r5, r4
 8007a6e:	bf38      	it	cc
 8007a70:	2304      	movcc	r3, #4
 8007a72:	4419      	add	r1, r3
 8007a74:	4473      	add	r3, lr
 8007a76:	469e      	mov	lr, r3
 8007a78:	460d      	mov	r5, r1
 8007a7a:	4565      	cmp	r5, ip
 8007a7c:	d30e      	bcc.n	8007a9c <__mdiff+0xe8>
 8007a7e:	f10c 0203 	add.w	r2, ip, #3
 8007a82:	1a52      	subs	r2, r2, r1
 8007a84:	f022 0203 	bic.w	r2, r2, #3
 8007a88:	3903      	subs	r1, #3
 8007a8a:	458c      	cmp	ip, r1
 8007a8c:	bf38      	it	cc
 8007a8e:	2200      	movcc	r2, #0
 8007a90:	441a      	add	r2, r3
 8007a92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007a96:	b17b      	cbz	r3, 8007ab8 <__mdiff+0x104>
 8007a98:	6106      	str	r6, [r0, #16]
 8007a9a:	e7a5      	b.n	80079e8 <__mdiff+0x34>
 8007a9c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007aa0:	fa17 f488 	uxtah	r4, r7, r8
 8007aa4:	1422      	asrs	r2, r4, #16
 8007aa6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007aaa:	b2a4      	uxth	r4, r4
 8007aac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007ab0:	f84e 4b04 	str.w	r4, [lr], #4
 8007ab4:	1417      	asrs	r7, r2, #16
 8007ab6:	e7e0      	b.n	8007a7a <__mdiff+0xc6>
 8007ab8:	3e01      	subs	r6, #1
 8007aba:	e7ea      	b.n	8007a92 <__mdiff+0xde>
 8007abc:	080090c3 	.word	0x080090c3
 8007ac0:	080090d4 	.word	0x080090d4

08007ac4 <__d2b>:
 8007ac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ac8:	2101      	movs	r1, #1
 8007aca:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 8007ace:	4690      	mov	r8, r2
 8007ad0:	4699      	mov	r9, r3
 8007ad2:	f7ff fcd5 	bl	8007480 <_Balloc>
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	b930      	cbnz	r0, 8007ae8 <__d2b+0x24>
 8007ada:	4602      	mov	r2, r0
 8007adc:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <__d2b+0xac>)
 8007ade:	4825      	ldr	r0, [pc, #148]	; (8007b74 <__d2b+0xb0>)
 8007ae0:	f240 310a 	movw	r1, #778	; 0x30a
 8007ae4:	f000 fa6e 	bl	8007fc4 <__assert_func>
 8007ae8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007aec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007af0:	bb2d      	cbnz	r5, 8007b3e <__d2b+0x7a>
 8007af2:	f1b8 0200 	subs.w	r2, r8, #0
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	d026      	beq.n	8007b48 <__d2b+0x84>
 8007afa:	4668      	mov	r0, sp
 8007afc:	9200      	str	r2, [sp, #0]
 8007afe:	f7ff fd8b 	bl	8007618 <__lo0bits>
 8007b02:	9900      	ldr	r1, [sp, #0]
 8007b04:	b1f0      	cbz	r0, 8007b44 <__d2b+0x80>
 8007b06:	9a01      	ldr	r2, [sp, #4]
 8007b08:	f1c0 0320 	rsb	r3, r0, #32
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	430b      	orrs	r3, r1
 8007b12:	40c2      	lsrs	r2, r0
 8007b14:	6163      	str	r3, [r4, #20]
 8007b16:	9201      	str	r2, [sp, #4]
 8007b18:	9b01      	ldr	r3, [sp, #4]
 8007b1a:	61a3      	str	r3, [r4, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bf14      	ite	ne
 8007b20:	2202      	movne	r2, #2
 8007b22:	2201      	moveq	r2, #1
 8007b24:	6122      	str	r2, [r4, #16]
 8007b26:	b1c5      	cbz	r5, 8007b5a <__d2b+0x96>
 8007b28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b2c:	4405      	add	r5, r0
 8007b2e:	603d      	str	r5, [r7, #0]
 8007b30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b34:	6030      	str	r0, [r6, #0]
 8007b36:	4620      	mov	r0, r4
 8007b38:	b003      	add	sp, #12
 8007b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b42:	e7d6      	b.n	8007af2 <__d2b+0x2e>
 8007b44:	6161      	str	r1, [r4, #20]
 8007b46:	e7e7      	b.n	8007b18 <__d2b+0x54>
 8007b48:	a801      	add	r0, sp, #4
 8007b4a:	f7ff fd65 	bl	8007618 <__lo0bits>
 8007b4e:	9b01      	ldr	r3, [sp, #4]
 8007b50:	6163      	str	r3, [r4, #20]
 8007b52:	2201      	movs	r2, #1
 8007b54:	6122      	str	r2, [r4, #16]
 8007b56:	3020      	adds	r0, #32
 8007b58:	e7e5      	b.n	8007b26 <__d2b+0x62>
 8007b5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b5e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b62:	6038      	str	r0, [r7, #0]
 8007b64:	6918      	ldr	r0, [r3, #16]
 8007b66:	f7ff fd37 	bl	80075d8 <__hi0bits>
 8007b6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b6e:	e7e1      	b.n	8007b34 <__d2b+0x70>
 8007b70:	080090c3 	.word	0x080090c3
 8007b74:	080090d4 	.word	0x080090d4

08007b78 <_calloc_r>:
 8007b78:	b513      	push	{r0, r1, r4, lr}
 8007b7a:	434a      	muls	r2, r1
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	9201      	str	r2, [sp, #4]
 8007b80:	f000 f85a 	bl	8007c38 <_malloc_r>
 8007b84:	4604      	mov	r4, r0
 8007b86:	b118      	cbz	r0, 8007b90 <_calloc_r+0x18>
 8007b88:	9a01      	ldr	r2, [sp, #4]
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	f7fe f960 	bl	8005e50 <memset>
 8007b90:	4620      	mov	r0, r4
 8007b92:	b002      	add	sp, #8
 8007b94:	bd10      	pop	{r4, pc}
	...

08007b98 <_free_r>:
 8007b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b9a:	2900      	cmp	r1, #0
 8007b9c:	d048      	beq.n	8007c30 <_free_r+0x98>
 8007b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba2:	9001      	str	r0, [sp, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f1a1 0404 	sub.w	r4, r1, #4
 8007baa:	bfb8      	it	lt
 8007bac:	18e4      	addlt	r4, r4, r3
 8007bae:	f000 fa65 	bl	800807c <__malloc_lock>
 8007bb2:	4a20      	ldr	r2, [pc, #128]	; (8007c34 <_free_r+0x9c>)
 8007bb4:	9801      	ldr	r0, [sp, #4]
 8007bb6:	6813      	ldr	r3, [r2, #0]
 8007bb8:	4615      	mov	r5, r2
 8007bba:	b933      	cbnz	r3, 8007bca <_free_r+0x32>
 8007bbc:	6063      	str	r3, [r4, #4]
 8007bbe:	6014      	str	r4, [r2, #0]
 8007bc0:	b003      	add	sp, #12
 8007bc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bc6:	f000 ba5f 	b.w	8008088 <__malloc_unlock>
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	d90b      	bls.n	8007be6 <_free_r+0x4e>
 8007bce:	6821      	ldr	r1, [r4, #0]
 8007bd0:	1862      	adds	r2, r4, r1
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	bf04      	itt	eq
 8007bd6:	681a      	ldreq	r2, [r3, #0]
 8007bd8:	685b      	ldreq	r3, [r3, #4]
 8007bda:	6063      	str	r3, [r4, #4]
 8007bdc:	bf04      	itt	eq
 8007bde:	1852      	addeq	r2, r2, r1
 8007be0:	6022      	streq	r2, [r4, #0]
 8007be2:	602c      	str	r4, [r5, #0]
 8007be4:	e7ec      	b.n	8007bc0 <_free_r+0x28>
 8007be6:	461a      	mov	r2, r3
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	b10b      	cbz	r3, 8007bf0 <_free_r+0x58>
 8007bec:	42a3      	cmp	r3, r4
 8007bee:	d9fa      	bls.n	8007be6 <_free_r+0x4e>
 8007bf0:	6811      	ldr	r1, [r2, #0]
 8007bf2:	1855      	adds	r5, r2, r1
 8007bf4:	42a5      	cmp	r5, r4
 8007bf6:	d10b      	bne.n	8007c10 <_free_r+0x78>
 8007bf8:	6824      	ldr	r4, [r4, #0]
 8007bfa:	4421      	add	r1, r4
 8007bfc:	1854      	adds	r4, r2, r1
 8007bfe:	42a3      	cmp	r3, r4
 8007c00:	6011      	str	r1, [r2, #0]
 8007c02:	d1dd      	bne.n	8007bc0 <_free_r+0x28>
 8007c04:	681c      	ldr	r4, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	6053      	str	r3, [r2, #4]
 8007c0a:	4421      	add	r1, r4
 8007c0c:	6011      	str	r1, [r2, #0]
 8007c0e:	e7d7      	b.n	8007bc0 <_free_r+0x28>
 8007c10:	d902      	bls.n	8007c18 <_free_r+0x80>
 8007c12:	230c      	movs	r3, #12
 8007c14:	6003      	str	r3, [r0, #0]
 8007c16:	e7d3      	b.n	8007bc0 <_free_r+0x28>
 8007c18:	6825      	ldr	r5, [r4, #0]
 8007c1a:	1961      	adds	r1, r4, r5
 8007c1c:	428b      	cmp	r3, r1
 8007c1e:	bf04      	itt	eq
 8007c20:	6819      	ldreq	r1, [r3, #0]
 8007c22:	685b      	ldreq	r3, [r3, #4]
 8007c24:	6063      	str	r3, [r4, #4]
 8007c26:	bf04      	itt	eq
 8007c28:	1949      	addeq	r1, r1, r5
 8007c2a:	6021      	streq	r1, [r4, #0]
 8007c2c:	6054      	str	r4, [r2, #4]
 8007c2e:	e7c7      	b.n	8007bc0 <_free_r+0x28>
 8007c30:	b003      	add	sp, #12
 8007c32:	bd30      	pop	{r4, r5, pc}
 8007c34:	20012f94 	.word	0x20012f94

08007c38 <_malloc_r>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	1ccd      	adds	r5, r1, #3
 8007c3c:	f025 0503 	bic.w	r5, r5, #3
 8007c40:	3508      	adds	r5, #8
 8007c42:	2d0c      	cmp	r5, #12
 8007c44:	bf38      	it	cc
 8007c46:	250c      	movcc	r5, #12
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	db01      	blt.n	8007c52 <_malloc_r+0x1a>
 8007c4e:	42a9      	cmp	r1, r5
 8007c50:	d903      	bls.n	8007c5a <_malloc_r+0x22>
 8007c52:	230c      	movs	r3, #12
 8007c54:	6033      	str	r3, [r6, #0]
 8007c56:	2000      	movs	r0, #0
 8007c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c5a:	f000 fa0f 	bl	800807c <__malloc_lock>
 8007c5e:	4921      	ldr	r1, [pc, #132]	; (8007ce4 <_malloc_r+0xac>)
 8007c60:	680a      	ldr	r2, [r1, #0]
 8007c62:	4614      	mov	r4, r2
 8007c64:	b99c      	cbnz	r4, 8007c8e <_malloc_r+0x56>
 8007c66:	4f20      	ldr	r7, [pc, #128]	; (8007ce8 <_malloc_r+0xb0>)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	b923      	cbnz	r3, 8007c76 <_malloc_r+0x3e>
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f000 f998 	bl	8007fa4 <_sbrk_r>
 8007c74:	6038      	str	r0, [r7, #0]
 8007c76:	4629      	mov	r1, r5
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f000 f993 	bl	8007fa4 <_sbrk_r>
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	d123      	bne.n	8007cca <_malloc_r+0x92>
 8007c82:	230c      	movs	r3, #12
 8007c84:	6033      	str	r3, [r6, #0]
 8007c86:	4630      	mov	r0, r6
 8007c88:	f000 f9fe 	bl	8008088 <__malloc_unlock>
 8007c8c:	e7e3      	b.n	8007c56 <_malloc_r+0x1e>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	1b5b      	subs	r3, r3, r5
 8007c92:	d417      	bmi.n	8007cc4 <_malloc_r+0x8c>
 8007c94:	2b0b      	cmp	r3, #11
 8007c96:	d903      	bls.n	8007ca0 <_malloc_r+0x68>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	441c      	add	r4, r3
 8007c9c:	6025      	str	r5, [r4, #0]
 8007c9e:	e004      	b.n	8007caa <_malloc_r+0x72>
 8007ca0:	6863      	ldr	r3, [r4, #4]
 8007ca2:	42a2      	cmp	r2, r4
 8007ca4:	bf0c      	ite	eq
 8007ca6:	600b      	streq	r3, [r1, #0]
 8007ca8:	6053      	strne	r3, [r2, #4]
 8007caa:	4630      	mov	r0, r6
 8007cac:	f000 f9ec 	bl	8008088 <__malloc_unlock>
 8007cb0:	f104 000b 	add.w	r0, r4, #11
 8007cb4:	1d23      	adds	r3, r4, #4
 8007cb6:	f020 0007 	bic.w	r0, r0, #7
 8007cba:	1ac2      	subs	r2, r0, r3
 8007cbc:	d0cc      	beq.n	8007c58 <_malloc_r+0x20>
 8007cbe:	1a1b      	subs	r3, r3, r0
 8007cc0:	50a3      	str	r3, [r4, r2]
 8007cc2:	e7c9      	b.n	8007c58 <_malloc_r+0x20>
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	6864      	ldr	r4, [r4, #4]
 8007cc8:	e7cc      	b.n	8007c64 <_malloc_r+0x2c>
 8007cca:	1cc4      	adds	r4, r0, #3
 8007ccc:	f024 0403 	bic.w	r4, r4, #3
 8007cd0:	42a0      	cmp	r0, r4
 8007cd2:	d0e3      	beq.n	8007c9c <_malloc_r+0x64>
 8007cd4:	1a21      	subs	r1, r4, r0
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f000 f964 	bl	8007fa4 <_sbrk_r>
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d1dd      	bne.n	8007c9c <_malloc_r+0x64>
 8007ce0:	e7cf      	b.n	8007c82 <_malloc_r+0x4a>
 8007ce2:	bf00      	nop
 8007ce4:	20012f94 	.word	0x20012f94
 8007ce8:	20012f98 	.word	0x20012f98

08007cec <__ssputs_r>:
 8007cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	688e      	ldr	r6, [r1, #8]
 8007cf2:	429e      	cmp	r6, r3
 8007cf4:	4682      	mov	sl, r0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	4690      	mov	r8, r2
 8007cfa:	461f      	mov	r7, r3
 8007cfc:	d838      	bhi.n	8007d70 <__ssputs_r+0x84>
 8007cfe:	898a      	ldrh	r2, [r1, #12]
 8007d00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d04:	d032      	beq.n	8007d6c <__ssputs_r+0x80>
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	6909      	ldr	r1, [r1, #16]
 8007d0a:	eba5 0901 	sub.w	r9, r5, r1
 8007d0e:	6965      	ldr	r5, [r4, #20]
 8007d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d18:	3301      	adds	r3, #1
 8007d1a:	444b      	add	r3, r9
 8007d1c:	106d      	asrs	r5, r5, #1
 8007d1e:	429d      	cmp	r5, r3
 8007d20:	bf38      	it	cc
 8007d22:	461d      	movcc	r5, r3
 8007d24:	0553      	lsls	r3, r2, #21
 8007d26:	d531      	bpl.n	8007d8c <__ssputs_r+0xa0>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7ff ff85 	bl	8007c38 <_malloc_r>
 8007d2e:	4606      	mov	r6, r0
 8007d30:	b950      	cbnz	r0, 8007d48 <__ssputs_r+0x5c>
 8007d32:	230c      	movs	r3, #12
 8007d34:	f8ca 3000 	str.w	r3, [sl]
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d3e:	81a3      	strh	r3, [r4, #12]
 8007d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d48:	6921      	ldr	r1, [r4, #16]
 8007d4a:	464a      	mov	r2, r9
 8007d4c:	f7fe f872 	bl	8005e34 <memcpy>
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	6126      	str	r6, [r4, #16]
 8007d5e:	6165      	str	r5, [r4, #20]
 8007d60:	444e      	add	r6, r9
 8007d62:	eba5 0509 	sub.w	r5, r5, r9
 8007d66:	6026      	str	r6, [r4, #0]
 8007d68:	60a5      	str	r5, [r4, #8]
 8007d6a:	463e      	mov	r6, r7
 8007d6c:	42be      	cmp	r6, r7
 8007d6e:	d900      	bls.n	8007d72 <__ssputs_r+0x86>
 8007d70:	463e      	mov	r6, r7
 8007d72:	4632      	mov	r2, r6
 8007d74:	6820      	ldr	r0, [r4, #0]
 8007d76:	4641      	mov	r1, r8
 8007d78:	f000 f966 	bl	8008048 <memmove>
 8007d7c:	68a3      	ldr	r3, [r4, #8]
 8007d7e:	6822      	ldr	r2, [r4, #0]
 8007d80:	1b9b      	subs	r3, r3, r6
 8007d82:	4432      	add	r2, r6
 8007d84:	60a3      	str	r3, [r4, #8]
 8007d86:	6022      	str	r2, [r4, #0]
 8007d88:	2000      	movs	r0, #0
 8007d8a:	e7db      	b.n	8007d44 <__ssputs_r+0x58>
 8007d8c:	462a      	mov	r2, r5
 8007d8e:	f000 f981 	bl	8008094 <_realloc_r>
 8007d92:	4606      	mov	r6, r0
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d1e1      	bne.n	8007d5c <__ssputs_r+0x70>
 8007d98:	6921      	ldr	r1, [r4, #16]
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	f7ff fefc 	bl	8007b98 <_free_r>
 8007da0:	e7c7      	b.n	8007d32 <__ssputs_r+0x46>
	...

08007da4 <_svfiprintf_r>:
 8007da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da8:	4698      	mov	r8, r3
 8007daa:	898b      	ldrh	r3, [r1, #12]
 8007dac:	061b      	lsls	r3, r3, #24
 8007dae:	b09d      	sub	sp, #116	; 0x74
 8007db0:	4607      	mov	r7, r0
 8007db2:	460d      	mov	r5, r1
 8007db4:	4614      	mov	r4, r2
 8007db6:	d50e      	bpl.n	8007dd6 <_svfiprintf_r+0x32>
 8007db8:	690b      	ldr	r3, [r1, #16]
 8007dba:	b963      	cbnz	r3, 8007dd6 <_svfiprintf_r+0x32>
 8007dbc:	2140      	movs	r1, #64	; 0x40
 8007dbe:	f7ff ff3b 	bl	8007c38 <_malloc_r>
 8007dc2:	6028      	str	r0, [r5, #0]
 8007dc4:	6128      	str	r0, [r5, #16]
 8007dc6:	b920      	cbnz	r0, 8007dd2 <_svfiprintf_r+0x2e>
 8007dc8:	230c      	movs	r3, #12
 8007dca:	603b      	str	r3, [r7, #0]
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dd0:	e0d1      	b.n	8007f76 <_svfiprintf_r+0x1d2>
 8007dd2:	2340      	movs	r3, #64	; 0x40
 8007dd4:	616b      	str	r3, [r5, #20]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dda:	2320      	movs	r3, #32
 8007ddc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007de4:	2330      	movs	r3, #48	; 0x30
 8007de6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f90 <_svfiprintf_r+0x1ec>
 8007dea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dee:	f04f 0901 	mov.w	r9, #1
 8007df2:	4623      	mov	r3, r4
 8007df4:	469a      	mov	sl, r3
 8007df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dfa:	b10a      	cbz	r2, 8007e00 <_svfiprintf_r+0x5c>
 8007dfc:	2a25      	cmp	r2, #37	; 0x25
 8007dfe:	d1f9      	bne.n	8007df4 <_svfiprintf_r+0x50>
 8007e00:	ebba 0b04 	subs.w	fp, sl, r4
 8007e04:	d00b      	beq.n	8007e1e <_svfiprintf_r+0x7a>
 8007e06:	465b      	mov	r3, fp
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff ff6d 	bl	8007cec <__ssputs_r>
 8007e12:	3001      	adds	r0, #1
 8007e14:	f000 80aa 	beq.w	8007f6c <_svfiprintf_r+0x1c8>
 8007e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e1a:	445a      	add	r2, fp
 8007e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 80a2 	beq.w	8007f6c <_svfiprintf_r+0x1c8>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e32:	f10a 0a01 	add.w	sl, sl, #1
 8007e36:	9304      	str	r3, [sp, #16]
 8007e38:	9307      	str	r3, [sp, #28]
 8007e3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e3e:	931a      	str	r3, [sp, #104]	; 0x68
 8007e40:	4654      	mov	r4, sl
 8007e42:	2205      	movs	r2, #5
 8007e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e48:	4851      	ldr	r0, [pc, #324]	; (8007f90 <_svfiprintf_r+0x1ec>)
 8007e4a:	f7f8 f9d9 	bl	8000200 <memchr>
 8007e4e:	9a04      	ldr	r2, [sp, #16]
 8007e50:	b9d8      	cbnz	r0, 8007e8a <_svfiprintf_r+0xe6>
 8007e52:	06d0      	lsls	r0, r2, #27
 8007e54:	bf44      	itt	mi
 8007e56:	2320      	movmi	r3, #32
 8007e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e5c:	0711      	lsls	r1, r2, #28
 8007e5e:	bf44      	itt	mi
 8007e60:	232b      	movmi	r3, #43	; 0x2b
 8007e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e66:	f89a 3000 	ldrb.w	r3, [sl]
 8007e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e6c:	d015      	beq.n	8007e9a <_svfiprintf_r+0xf6>
 8007e6e:	9a07      	ldr	r2, [sp, #28]
 8007e70:	4654      	mov	r4, sl
 8007e72:	2000      	movs	r0, #0
 8007e74:	f04f 0c0a 	mov.w	ip, #10
 8007e78:	4621      	mov	r1, r4
 8007e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e7e:	3b30      	subs	r3, #48	; 0x30
 8007e80:	2b09      	cmp	r3, #9
 8007e82:	d94e      	bls.n	8007f22 <_svfiprintf_r+0x17e>
 8007e84:	b1b0      	cbz	r0, 8007eb4 <_svfiprintf_r+0x110>
 8007e86:	9207      	str	r2, [sp, #28]
 8007e88:	e014      	b.n	8007eb4 <_svfiprintf_r+0x110>
 8007e8a:	eba0 0308 	sub.w	r3, r0, r8
 8007e8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e92:	4313      	orrs	r3, r2
 8007e94:	9304      	str	r3, [sp, #16]
 8007e96:	46a2      	mov	sl, r4
 8007e98:	e7d2      	b.n	8007e40 <_svfiprintf_r+0x9c>
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	1d19      	adds	r1, r3, #4
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	9103      	str	r1, [sp, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfbb      	ittet	lt
 8007ea6:	425b      	neglt	r3, r3
 8007ea8:	f042 0202 	orrlt.w	r2, r2, #2
 8007eac:	9307      	strge	r3, [sp, #28]
 8007eae:	9307      	strlt	r3, [sp, #28]
 8007eb0:	bfb8      	it	lt
 8007eb2:	9204      	strlt	r2, [sp, #16]
 8007eb4:	7823      	ldrb	r3, [r4, #0]
 8007eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8007eb8:	d10c      	bne.n	8007ed4 <_svfiprintf_r+0x130>
 8007eba:	7863      	ldrb	r3, [r4, #1]
 8007ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ebe:	d135      	bne.n	8007f2c <_svfiprintf_r+0x188>
 8007ec0:	9b03      	ldr	r3, [sp, #12]
 8007ec2:	1d1a      	adds	r2, r3, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	9203      	str	r2, [sp, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bfb8      	it	lt
 8007ecc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ed0:	3402      	adds	r4, #2
 8007ed2:	9305      	str	r3, [sp, #20]
 8007ed4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fa0 <_svfiprintf_r+0x1fc>
 8007ed8:	7821      	ldrb	r1, [r4, #0]
 8007eda:	2203      	movs	r2, #3
 8007edc:	4650      	mov	r0, sl
 8007ede:	f7f8 f98f 	bl	8000200 <memchr>
 8007ee2:	b140      	cbz	r0, 8007ef6 <_svfiprintf_r+0x152>
 8007ee4:	2340      	movs	r3, #64	; 0x40
 8007ee6:	eba0 000a 	sub.w	r0, r0, sl
 8007eea:	fa03 f000 	lsl.w	r0, r3, r0
 8007eee:	9b04      	ldr	r3, [sp, #16]
 8007ef0:	4303      	orrs	r3, r0
 8007ef2:	3401      	adds	r4, #1
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efa:	4826      	ldr	r0, [pc, #152]	; (8007f94 <_svfiprintf_r+0x1f0>)
 8007efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f00:	2206      	movs	r2, #6
 8007f02:	f7f8 f97d 	bl	8000200 <memchr>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d038      	beq.n	8007f7c <_svfiprintf_r+0x1d8>
 8007f0a:	4b23      	ldr	r3, [pc, #140]	; (8007f98 <_svfiprintf_r+0x1f4>)
 8007f0c:	bb1b      	cbnz	r3, 8007f56 <_svfiprintf_r+0x1b2>
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	3307      	adds	r3, #7
 8007f12:	f023 0307 	bic.w	r3, r3, #7
 8007f16:	3308      	adds	r3, #8
 8007f18:	9303      	str	r3, [sp, #12]
 8007f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1c:	4433      	add	r3, r6
 8007f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f20:	e767      	b.n	8007df2 <_svfiprintf_r+0x4e>
 8007f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f26:	460c      	mov	r4, r1
 8007f28:	2001      	movs	r0, #1
 8007f2a:	e7a5      	b.n	8007e78 <_svfiprintf_r+0xd4>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	3401      	adds	r4, #1
 8007f30:	9305      	str	r3, [sp, #20]
 8007f32:	4619      	mov	r1, r3
 8007f34:	f04f 0c0a 	mov.w	ip, #10
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3e:	3a30      	subs	r2, #48	; 0x30
 8007f40:	2a09      	cmp	r2, #9
 8007f42:	d903      	bls.n	8007f4c <_svfiprintf_r+0x1a8>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0c5      	beq.n	8007ed4 <_svfiprintf_r+0x130>
 8007f48:	9105      	str	r1, [sp, #20]
 8007f4a:	e7c3      	b.n	8007ed4 <_svfiprintf_r+0x130>
 8007f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f50:	4604      	mov	r4, r0
 8007f52:	2301      	movs	r3, #1
 8007f54:	e7f0      	b.n	8007f38 <_svfiprintf_r+0x194>
 8007f56:	ab03      	add	r3, sp, #12
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	462a      	mov	r2, r5
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <_svfiprintf_r+0x1f8>)
 8007f5e:	a904      	add	r1, sp, #16
 8007f60:	4638      	mov	r0, r7
 8007f62:	f7fe f81d 	bl	8005fa0 <_printf_float>
 8007f66:	1c42      	adds	r2, r0, #1
 8007f68:	4606      	mov	r6, r0
 8007f6a:	d1d6      	bne.n	8007f1a <_svfiprintf_r+0x176>
 8007f6c:	89ab      	ldrh	r3, [r5, #12]
 8007f6e:	065b      	lsls	r3, r3, #25
 8007f70:	f53f af2c 	bmi.w	8007dcc <_svfiprintf_r+0x28>
 8007f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f76:	b01d      	add	sp, #116	; 0x74
 8007f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7c:	ab03      	add	r3, sp, #12
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	462a      	mov	r2, r5
 8007f82:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <_svfiprintf_r+0x1f8>)
 8007f84:	a904      	add	r1, sp, #16
 8007f86:	4638      	mov	r0, r7
 8007f88:	f7fe fab0 	bl	80064ec <_printf_i>
 8007f8c:	e7eb      	b.n	8007f66 <_svfiprintf_r+0x1c2>
 8007f8e:	bf00      	nop
 8007f90:	08009234 	.word	0x08009234
 8007f94:	0800923e 	.word	0x0800923e
 8007f98:	08005fa1 	.word	0x08005fa1
 8007f9c:	08007ced 	.word	0x08007ced
 8007fa0:	0800923a 	.word	0x0800923a

08007fa4 <_sbrk_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d06      	ldr	r5, [pc, #24]	; (8007fc0 <_sbrk_r+0x1c>)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4604      	mov	r4, r0
 8007fac:	4608      	mov	r0, r1
 8007fae:	602b      	str	r3, [r5, #0]
 8007fb0:	f7fd feb6 	bl	8005d20 <_sbrk>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d102      	bne.n	8007fbe <_sbrk_r+0x1a>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	b103      	cbz	r3, 8007fbe <_sbrk_r+0x1a>
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	20013298 	.word	0x20013298

08007fc4 <__assert_func>:
 8007fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	461a      	mov	r2, r3
 8007fca:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <__assert_func+0x2c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4605      	mov	r5, r0
 8007fd0:	68d8      	ldr	r0, [r3, #12]
 8007fd2:	b14c      	cbz	r4, 8007fe8 <__assert_func+0x24>
 8007fd4:	4b07      	ldr	r3, [pc, #28]	; (8007ff4 <__assert_func+0x30>)
 8007fd6:	9100      	str	r1, [sp, #0]
 8007fd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fdc:	4906      	ldr	r1, [pc, #24]	; (8007ff8 <__assert_func+0x34>)
 8007fde:	462b      	mov	r3, r5
 8007fe0:	f000 f80e 	bl	8008000 <fiprintf>
 8007fe4:	f000 faa4 	bl	8008530 <abort>
 8007fe8:	4b04      	ldr	r3, [pc, #16]	; (8007ffc <__assert_func+0x38>)
 8007fea:	461c      	mov	r4, r3
 8007fec:	e7f3      	b.n	8007fd6 <__assert_func+0x12>
 8007fee:	bf00      	nop
 8007ff0:	20000034 	.word	0x20000034
 8007ff4:	08009245 	.word	0x08009245
 8007ff8:	08009252 	.word	0x08009252
 8007ffc:	08009280 	.word	0x08009280

08008000 <fiprintf>:
 8008000:	b40e      	push	{r1, r2, r3}
 8008002:	b503      	push	{r0, r1, lr}
 8008004:	4601      	mov	r1, r0
 8008006:	ab03      	add	r3, sp, #12
 8008008:	4805      	ldr	r0, [pc, #20]	; (8008020 <fiprintf+0x20>)
 800800a:	f853 2b04 	ldr.w	r2, [r3], #4
 800800e:	6800      	ldr	r0, [r0, #0]
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	f000 f88f 	bl	8008134 <_vfiprintf_r>
 8008016:	b002      	add	sp, #8
 8008018:	f85d eb04 	ldr.w	lr, [sp], #4
 800801c:	b003      	add	sp, #12
 800801e:	4770      	bx	lr
 8008020:	20000034 	.word	0x20000034

08008024 <__ascii_mbtowc>:
 8008024:	b082      	sub	sp, #8
 8008026:	b901      	cbnz	r1, 800802a <__ascii_mbtowc+0x6>
 8008028:	a901      	add	r1, sp, #4
 800802a:	b142      	cbz	r2, 800803e <__ascii_mbtowc+0x1a>
 800802c:	b14b      	cbz	r3, 8008042 <__ascii_mbtowc+0x1e>
 800802e:	7813      	ldrb	r3, [r2, #0]
 8008030:	600b      	str	r3, [r1, #0]
 8008032:	7812      	ldrb	r2, [r2, #0]
 8008034:	1e10      	subs	r0, r2, #0
 8008036:	bf18      	it	ne
 8008038:	2001      	movne	r0, #1
 800803a:	b002      	add	sp, #8
 800803c:	4770      	bx	lr
 800803e:	4610      	mov	r0, r2
 8008040:	e7fb      	b.n	800803a <__ascii_mbtowc+0x16>
 8008042:	f06f 0001 	mvn.w	r0, #1
 8008046:	e7f8      	b.n	800803a <__ascii_mbtowc+0x16>

08008048 <memmove>:
 8008048:	4288      	cmp	r0, r1
 800804a:	b510      	push	{r4, lr}
 800804c:	eb01 0402 	add.w	r4, r1, r2
 8008050:	d902      	bls.n	8008058 <memmove+0x10>
 8008052:	4284      	cmp	r4, r0
 8008054:	4623      	mov	r3, r4
 8008056:	d807      	bhi.n	8008068 <memmove+0x20>
 8008058:	1e43      	subs	r3, r0, #1
 800805a:	42a1      	cmp	r1, r4
 800805c:	d008      	beq.n	8008070 <memmove+0x28>
 800805e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008066:	e7f8      	b.n	800805a <memmove+0x12>
 8008068:	4402      	add	r2, r0
 800806a:	4601      	mov	r1, r0
 800806c:	428a      	cmp	r2, r1
 800806e:	d100      	bne.n	8008072 <memmove+0x2a>
 8008070:	bd10      	pop	{r4, pc}
 8008072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800807a:	e7f7      	b.n	800806c <memmove+0x24>

0800807c <__malloc_lock>:
 800807c:	4801      	ldr	r0, [pc, #4]	; (8008084 <__malloc_lock+0x8>)
 800807e:	f000 bc17 	b.w	80088b0 <__retarget_lock_acquire_recursive>
 8008082:	bf00      	nop
 8008084:	200132a0 	.word	0x200132a0

08008088 <__malloc_unlock>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__malloc_unlock+0x8>)
 800808a:	f000 bc12 	b.w	80088b2 <__retarget_lock_release_recursive>
 800808e:	bf00      	nop
 8008090:	200132a0 	.word	0x200132a0

08008094 <_realloc_r>:
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	4607      	mov	r7, r0
 8008098:	4614      	mov	r4, r2
 800809a:	460e      	mov	r6, r1
 800809c:	b921      	cbnz	r1, 80080a8 <_realloc_r+0x14>
 800809e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80080a2:	4611      	mov	r1, r2
 80080a4:	f7ff bdc8 	b.w	8007c38 <_malloc_r>
 80080a8:	b922      	cbnz	r2, 80080b4 <_realloc_r+0x20>
 80080aa:	f7ff fd75 	bl	8007b98 <_free_r>
 80080ae:	4625      	mov	r5, r4
 80080b0:	4628      	mov	r0, r5
 80080b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080b4:	f000 fc62 	bl	800897c <_malloc_usable_size_r>
 80080b8:	42a0      	cmp	r0, r4
 80080ba:	d20f      	bcs.n	80080dc <_realloc_r+0x48>
 80080bc:	4621      	mov	r1, r4
 80080be:	4638      	mov	r0, r7
 80080c0:	f7ff fdba 	bl	8007c38 <_malloc_r>
 80080c4:	4605      	mov	r5, r0
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d0f2      	beq.n	80080b0 <_realloc_r+0x1c>
 80080ca:	4631      	mov	r1, r6
 80080cc:	4622      	mov	r2, r4
 80080ce:	f7fd feb1 	bl	8005e34 <memcpy>
 80080d2:	4631      	mov	r1, r6
 80080d4:	4638      	mov	r0, r7
 80080d6:	f7ff fd5f 	bl	8007b98 <_free_r>
 80080da:	e7e9      	b.n	80080b0 <_realloc_r+0x1c>
 80080dc:	4635      	mov	r5, r6
 80080de:	e7e7      	b.n	80080b0 <_realloc_r+0x1c>

080080e0 <__sfputc_r>:
 80080e0:	6893      	ldr	r3, [r2, #8]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	b410      	push	{r4}
 80080e8:	6093      	str	r3, [r2, #8]
 80080ea:	da08      	bge.n	80080fe <__sfputc_r+0x1e>
 80080ec:	6994      	ldr	r4, [r2, #24]
 80080ee:	42a3      	cmp	r3, r4
 80080f0:	db01      	blt.n	80080f6 <__sfputc_r+0x16>
 80080f2:	290a      	cmp	r1, #10
 80080f4:	d103      	bne.n	80080fe <__sfputc_r+0x1e>
 80080f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080fa:	f000 b94b 	b.w	8008394 <__swbuf_r>
 80080fe:	6813      	ldr	r3, [r2, #0]
 8008100:	1c58      	adds	r0, r3, #1
 8008102:	6010      	str	r0, [r2, #0]
 8008104:	7019      	strb	r1, [r3, #0]
 8008106:	4608      	mov	r0, r1
 8008108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800810c:	4770      	bx	lr

0800810e <__sfputs_r>:
 800810e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008110:	4606      	mov	r6, r0
 8008112:	460f      	mov	r7, r1
 8008114:	4614      	mov	r4, r2
 8008116:	18d5      	adds	r5, r2, r3
 8008118:	42ac      	cmp	r4, r5
 800811a:	d101      	bne.n	8008120 <__sfputs_r+0x12>
 800811c:	2000      	movs	r0, #0
 800811e:	e007      	b.n	8008130 <__sfputs_r+0x22>
 8008120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008124:	463a      	mov	r2, r7
 8008126:	4630      	mov	r0, r6
 8008128:	f7ff ffda 	bl	80080e0 <__sfputc_r>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d1f3      	bne.n	8008118 <__sfputs_r+0xa>
 8008130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008134 <_vfiprintf_r>:
 8008134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008138:	460d      	mov	r5, r1
 800813a:	b09d      	sub	sp, #116	; 0x74
 800813c:	4614      	mov	r4, r2
 800813e:	4698      	mov	r8, r3
 8008140:	4606      	mov	r6, r0
 8008142:	b118      	cbz	r0, 800814c <_vfiprintf_r+0x18>
 8008144:	6983      	ldr	r3, [r0, #24]
 8008146:	b90b      	cbnz	r3, 800814c <_vfiprintf_r+0x18>
 8008148:	f000 fb14 	bl	8008774 <__sinit>
 800814c:	4b89      	ldr	r3, [pc, #548]	; (8008374 <_vfiprintf_r+0x240>)
 800814e:	429d      	cmp	r5, r3
 8008150:	d11b      	bne.n	800818a <_vfiprintf_r+0x56>
 8008152:	6875      	ldr	r5, [r6, #4]
 8008154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008156:	07d9      	lsls	r1, r3, #31
 8008158:	d405      	bmi.n	8008166 <_vfiprintf_r+0x32>
 800815a:	89ab      	ldrh	r3, [r5, #12]
 800815c:	059a      	lsls	r2, r3, #22
 800815e:	d402      	bmi.n	8008166 <_vfiprintf_r+0x32>
 8008160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008162:	f000 fba5 	bl	80088b0 <__retarget_lock_acquire_recursive>
 8008166:	89ab      	ldrh	r3, [r5, #12]
 8008168:	071b      	lsls	r3, r3, #28
 800816a:	d501      	bpl.n	8008170 <_vfiprintf_r+0x3c>
 800816c:	692b      	ldr	r3, [r5, #16]
 800816e:	b9eb      	cbnz	r3, 80081ac <_vfiprintf_r+0x78>
 8008170:	4629      	mov	r1, r5
 8008172:	4630      	mov	r0, r6
 8008174:	f000 f96e 	bl	8008454 <__swsetup_r>
 8008178:	b1c0      	cbz	r0, 80081ac <_vfiprintf_r+0x78>
 800817a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800817c:	07dc      	lsls	r4, r3, #31
 800817e:	d50e      	bpl.n	800819e <_vfiprintf_r+0x6a>
 8008180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008184:	b01d      	add	sp, #116	; 0x74
 8008186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818a:	4b7b      	ldr	r3, [pc, #492]	; (8008378 <_vfiprintf_r+0x244>)
 800818c:	429d      	cmp	r5, r3
 800818e:	d101      	bne.n	8008194 <_vfiprintf_r+0x60>
 8008190:	68b5      	ldr	r5, [r6, #8]
 8008192:	e7df      	b.n	8008154 <_vfiprintf_r+0x20>
 8008194:	4b79      	ldr	r3, [pc, #484]	; (800837c <_vfiprintf_r+0x248>)
 8008196:	429d      	cmp	r5, r3
 8008198:	bf08      	it	eq
 800819a:	68f5      	ldreq	r5, [r6, #12]
 800819c:	e7da      	b.n	8008154 <_vfiprintf_r+0x20>
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	0598      	lsls	r0, r3, #22
 80081a2:	d4ed      	bmi.n	8008180 <_vfiprintf_r+0x4c>
 80081a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081a6:	f000 fb84 	bl	80088b2 <__retarget_lock_release_recursive>
 80081aa:	e7e9      	b.n	8008180 <_vfiprintf_r+0x4c>
 80081ac:	2300      	movs	r3, #0
 80081ae:	9309      	str	r3, [sp, #36]	; 0x24
 80081b0:	2320      	movs	r3, #32
 80081b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ba:	2330      	movs	r3, #48	; 0x30
 80081bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008380 <_vfiprintf_r+0x24c>
 80081c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081c4:	f04f 0901 	mov.w	r9, #1
 80081c8:	4623      	mov	r3, r4
 80081ca:	469a      	mov	sl, r3
 80081cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d0:	b10a      	cbz	r2, 80081d6 <_vfiprintf_r+0xa2>
 80081d2:	2a25      	cmp	r2, #37	; 0x25
 80081d4:	d1f9      	bne.n	80081ca <_vfiprintf_r+0x96>
 80081d6:	ebba 0b04 	subs.w	fp, sl, r4
 80081da:	d00b      	beq.n	80081f4 <_vfiprintf_r+0xc0>
 80081dc:	465b      	mov	r3, fp
 80081de:	4622      	mov	r2, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff ff93 	bl	800810e <__sfputs_r>
 80081e8:	3001      	adds	r0, #1
 80081ea:	f000 80aa 	beq.w	8008342 <_vfiprintf_r+0x20e>
 80081ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081f0:	445a      	add	r2, fp
 80081f2:	9209      	str	r2, [sp, #36]	; 0x24
 80081f4:	f89a 3000 	ldrb.w	r3, [sl]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80a2 	beq.w	8008342 <_vfiprintf_r+0x20e>
 80081fe:	2300      	movs	r3, #0
 8008200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008208:	f10a 0a01 	add.w	sl, sl, #1
 800820c:	9304      	str	r3, [sp, #16]
 800820e:	9307      	str	r3, [sp, #28]
 8008210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008214:	931a      	str	r3, [sp, #104]	; 0x68
 8008216:	4654      	mov	r4, sl
 8008218:	2205      	movs	r2, #5
 800821a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800821e:	4858      	ldr	r0, [pc, #352]	; (8008380 <_vfiprintf_r+0x24c>)
 8008220:	f7f7 ffee 	bl	8000200 <memchr>
 8008224:	9a04      	ldr	r2, [sp, #16]
 8008226:	b9d8      	cbnz	r0, 8008260 <_vfiprintf_r+0x12c>
 8008228:	06d1      	lsls	r1, r2, #27
 800822a:	bf44      	itt	mi
 800822c:	2320      	movmi	r3, #32
 800822e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008232:	0713      	lsls	r3, r2, #28
 8008234:	bf44      	itt	mi
 8008236:	232b      	movmi	r3, #43	; 0x2b
 8008238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800823c:	f89a 3000 	ldrb.w	r3, [sl]
 8008240:	2b2a      	cmp	r3, #42	; 0x2a
 8008242:	d015      	beq.n	8008270 <_vfiprintf_r+0x13c>
 8008244:	9a07      	ldr	r2, [sp, #28]
 8008246:	4654      	mov	r4, sl
 8008248:	2000      	movs	r0, #0
 800824a:	f04f 0c0a 	mov.w	ip, #10
 800824e:	4621      	mov	r1, r4
 8008250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008254:	3b30      	subs	r3, #48	; 0x30
 8008256:	2b09      	cmp	r3, #9
 8008258:	d94e      	bls.n	80082f8 <_vfiprintf_r+0x1c4>
 800825a:	b1b0      	cbz	r0, 800828a <_vfiprintf_r+0x156>
 800825c:	9207      	str	r2, [sp, #28]
 800825e:	e014      	b.n	800828a <_vfiprintf_r+0x156>
 8008260:	eba0 0308 	sub.w	r3, r0, r8
 8008264:	fa09 f303 	lsl.w	r3, r9, r3
 8008268:	4313      	orrs	r3, r2
 800826a:	9304      	str	r3, [sp, #16]
 800826c:	46a2      	mov	sl, r4
 800826e:	e7d2      	b.n	8008216 <_vfiprintf_r+0xe2>
 8008270:	9b03      	ldr	r3, [sp, #12]
 8008272:	1d19      	adds	r1, r3, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	9103      	str	r1, [sp, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	bfbb      	ittet	lt
 800827c:	425b      	neglt	r3, r3
 800827e:	f042 0202 	orrlt.w	r2, r2, #2
 8008282:	9307      	strge	r3, [sp, #28]
 8008284:	9307      	strlt	r3, [sp, #28]
 8008286:	bfb8      	it	lt
 8008288:	9204      	strlt	r2, [sp, #16]
 800828a:	7823      	ldrb	r3, [r4, #0]
 800828c:	2b2e      	cmp	r3, #46	; 0x2e
 800828e:	d10c      	bne.n	80082aa <_vfiprintf_r+0x176>
 8008290:	7863      	ldrb	r3, [r4, #1]
 8008292:	2b2a      	cmp	r3, #42	; 0x2a
 8008294:	d135      	bne.n	8008302 <_vfiprintf_r+0x1ce>
 8008296:	9b03      	ldr	r3, [sp, #12]
 8008298:	1d1a      	adds	r2, r3, #4
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	9203      	str	r2, [sp, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bfb8      	it	lt
 80082a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80082a6:	3402      	adds	r4, #2
 80082a8:	9305      	str	r3, [sp, #20]
 80082aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008390 <_vfiprintf_r+0x25c>
 80082ae:	7821      	ldrb	r1, [r4, #0]
 80082b0:	2203      	movs	r2, #3
 80082b2:	4650      	mov	r0, sl
 80082b4:	f7f7 ffa4 	bl	8000200 <memchr>
 80082b8:	b140      	cbz	r0, 80082cc <_vfiprintf_r+0x198>
 80082ba:	2340      	movs	r3, #64	; 0x40
 80082bc:	eba0 000a 	sub.w	r0, r0, sl
 80082c0:	fa03 f000 	lsl.w	r0, r3, r0
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	4303      	orrs	r3, r0
 80082c8:	3401      	adds	r4, #1
 80082ca:	9304      	str	r3, [sp, #16]
 80082cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d0:	482c      	ldr	r0, [pc, #176]	; (8008384 <_vfiprintf_r+0x250>)
 80082d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082d6:	2206      	movs	r2, #6
 80082d8:	f7f7 ff92 	bl	8000200 <memchr>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d03f      	beq.n	8008360 <_vfiprintf_r+0x22c>
 80082e0:	4b29      	ldr	r3, [pc, #164]	; (8008388 <_vfiprintf_r+0x254>)
 80082e2:	bb1b      	cbnz	r3, 800832c <_vfiprintf_r+0x1f8>
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	3307      	adds	r3, #7
 80082e8:	f023 0307 	bic.w	r3, r3, #7
 80082ec:	3308      	adds	r3, #8
 80082ee:	9303      	str	r3, [sp, #12]
 80082f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f2:	443b      	add	r3, r7
 80082f4:	9309      	str	r3, [sp, #36]	; 0x24
 80082f6:	e767      	b.n	80081c8 <_vfiprintf_r+0x94>
 80082f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082fc:	460c      	mov	r4, r1
 80082fe:	2001      	movs	r0, #1
 8008300:	e7a5      	b.n	800824e <_vfiprintf_r+0x11a>
 8008302:	2300      	movs	r3, #0
 8008304:	3401      	adds	r4, #1
 8008306:	9305      	str	r3, [sp, #20]
 8008308:	4619      	mov	r1, r3
 800830a:	f04f 0c0a 	mov.w	ip, #10
 800830e:	4620      	mov	r0, r4
 8008310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008314:	3a30      	subs	r2, #48	; 0x30
 8008316:	2a09      	cmp	r2, #9
 8008318:	d903      	bls.n	8008322 <_vfiprintf_r+0x1ee>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0c5      	beq.n	80082aa <_vfiprintf_r+0x176>
 800831e:	9105      	str	r1, [sp, #20]
 8008320:	e7c3      	b.n	80082aa <_vfiprintf_r+0x176>
 8008322:	fb0c 2101 	mla	r1, ip, r1, r2
 8008326:	4604      	mov	r4, r0
 8008328:	2301      	movs	r3, #1
 800832a:	e7f0      	b.n	800830e <_vfiprintf_r+0x1da>
 800832c:	ab03      	add	r3, sp, #12
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	462a      	mov	r2, r5
 8008332:	4b16      	ldr	r3, [pc, #88]	; (800838c <_vfiprintf_r+0x258>)
 8008334:	a904      	add	r1, sp, #16
 8008336:	4630      	mov	r0, r6
 8008338:	f7fd fe32 	bl	8005fa0 <_printf_float>
 800833c:	4607      	mov	r7, r0
 800833e:	1c78      	adds	r0, r7, #1
 8008340:	d1d6      	bne.n	80082f0 <_vfiprintf_r+0x1bc>
 8008342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008344:	07d9      	lsls	r1, r3, #31
 8008346:	d405      	bmi.n	8008354 <_vfiprintf_r+0x220>
 8008348:	89ab      	ldrh	r3, [r5, #12]
 800834a:	059a      	lsls	r2, r3, #22
 800834c:	d402      	bmi.n	8008354 <_vfiprintf_r+0x220>
 800834e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008350:	f000 faaf 	bl	80088b2 <__retarget_lock_release_recursive>
 8008354:	89ab      	ldrh	r3, [r5, #12]
 8008356:	065b      	lsls	r3, r3, #25
 8008358:	f53f af12 	bmi.w	8008180 <_vfiprintf_r+0x4c>
 800835c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800835e:	e711      	b.n	8008184 <_vfiprintf_r+0x50>
 8008360:	ab03      	add	r3, sp, #12
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	462a      	mov	r2, r5
 8008366:	4b09      	ldr	r3, [pc, #36]	; (800838c <_vfiprintf_r+0x258>)
 8008368:	a904      	add	r1, sp, #16
 800836a:	4630      	mov	r0, r6
 800836c:	f7fe f8be 	bl	80064ec <_printf_i>
 8008370:	e7e4      	b.n	800833c <_vfiprintf_r+0x208>
 8008372:	bf00      	nop
 8008374:	080093ac 	.word	0x080093ac
 8008378:	080093cc 	.word	0x080093cc
 800837c:	0800938c 	.word	0x0800938c
 8008380:	08009234 	.word	0x08009234
 8008384:	0800923e 	.word	0x0800923e
 8008388:	08005fa1 	.word	0x08005fa1
 800838c:	0800810f 	.word	0x0800810f
 8008390:	0800923a 	.word	0x0800923a

08008394 <__swbuf_r>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	460e      	mov	r6, r1
 8008398:	4614      	mov	r4, r2
 800839a:	4605      	mov	r5, r0
 800839c:	b118      	cbz	r0, 80083a6 <__swbuf_r+0x12>
 800839e:	6983      	ldr	r3, [r0, #24]
 80083a0:	b90b      	cbnz	r3, 80083a6 <__swbuf_r+0x12>
 80083a2:	f000 f9e7 	bl	8008774 <__sinit>
 80083a6:	4b21      	ldr	r3, [pc, #132]	; (800842c <__swbuf_r+0x98>)
 80083a8:	429c      	cmp	r4, r3
 80083aa:	d12b      	bne.n	8008404 <__swbuf_r+0x70>
 80083ac:	686c      	ldr	r4, [r5, #4]
 80083ae:	69a3      	ldr	r3, [r4, #24]
 80083b0:	60a3      	str	r3, [r4, #8]
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	071a      	lsls	r2, r3, #28
 80083b6:	d52f      	bpl.n	8008418 <__swbuf_r+0x84>
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	b36b      	cbz	r3, 8008418 <__swbuf_r+0x84>
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	6820      	ldr	r0, [r4, #0]
 80083c0:	1ac0      	subs	r0, r0, r3
 80083c2:	6963      	ldr	r3, [r4, #20]
 80083c4:	b2f6      	uxtb	r6, r6
 80083c6:	4283      	cmp	r3, r0
 80083c8:	4637      	mov	r7, r6
 80083ca:	dc04      	bgt.n	80083d6 <__swbuf_r+0x42>
 80083cc:	4621      	mov	r1, r4
 80083ce:	4628      	mov	r0, r5
 80083d0:	f000 f93c 	bl	800864c <_fflush_r>
 80083d4:	bb30      	cbnz	r0, 8008424 <__swbuf_r+0x90>
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	3b01      	subs	r3, #1
 80083da:	60a3      	str	r3, [r4, #8]
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	6022      	str	r2, [r4, #0]
 80083e2:	701e      	strb	r6, [r3, #0]
 80083e4:	6963      	ldr	r3, [r4, #20]
 80083e6:	3001      	adds	r0, #1
 80083e8:	4283      	cmp	r3, r0
 80083ea:	d004      	beq.n	80083f6 <__swbuf_r+0x62>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	07db      	lsls	r3, r3, #31
 80083f0:	d506      	bpl.n	8008400 <__swbuf_r+0x6c>
 80083f2:	2e0a      	cmp	r6, #10
 80083f4:	d104      	bne.n	8008400 <__swbuf_r+0x6c>
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 f927 	bl	800864c <_fflush_r>
 80083fe:	b988      	cbnz	r0, 8008424 <__swbuf_r+0x90>
 8008400:	4638      	mov	r0, r7
 8008402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008404:	4b0a      	ldr	r3, [pc, #40]	; (8008430 <__swbuf_r+0x9c>)
 8008406:	429c      	cmp	r4, r3
 8008408:	d101      	bne.n	800840e <__swbuf_r+0x7a>
 800840a:	68ac      	ldr	r4, [r5, #8]
 800840c:	e7cf      	b.n	80083ae <__swbuf_r+0x1a>
 800840e:	4b09      	ldr	r3, [pc, #36]	; (8008434 <__swbuf_r+0xa0>)
 8008410:	429c      	cmp	r4, r3
 8008412:	bf08      	it	eq
 8008414:	68ec      	ldreq	r4, [r5, #12]
 8008416:	e7ca      	b.n	80083ae <__swbuf_r+0x1a>
 8008418:	4621      	mov	r1, r4
 800841a:	4628      	mov	r0, r5
 800841c:	f000 f81a 	bl	8008454 <__swsetup_r>
 8008420:	2800      	cmp	r0, #0
 8008422:	d0cb      	beq.n	80083bc <__swbuf_r+0x28>
 8008424:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008428:	e7ea      	b.n	8008400 <__swbuf_r+0x6c>
 800842a:	bf00      	nop
 800842c:	080093ac 	.word	0x080093ac
 8008430:	080093cc 	.word	0x080093cc
 8008434:	0800938c 	.word	0x0800938c

08008438 <__ascii_wctomb>:
 8008438:	b149      	cbz	r1, 800844e <__ascii_wctomb+0x16>
 800843a:	2aff      	cmp	r2, #255	; 0xff
 800843c:	bf85      	ittet	hi
 800843e:	238a      	movhi	r3, #138	; 0x8a
 8008440:	6003      	strhi	r3, [r0, #0]
 8008442:	700a      	strbls	r2, [r1, #0]
 8008444:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008448:	bf98      	it	ls
 800844a:	2001      	movls	r0, #1
 800844c:	4770      	bx	lr
 800844e:	4608      	mov	r0, r1
 8008450:	4770      	bx	lr
	...

08008454 <__swsetup_r>:
 8008454:	4b32      	ldr	r3, [pc, #200]	; (8008520 <__swsetup_r+0xcc>)
 8008456:	b570      	push	{r4, r5, r6, lr}
 8008458:	681d      	ldr	r5, [r3, #0]
 800845a:	4606      	mov	r6, r0
 800845c:	460c      	mov	r4, r1
 800845e:	b125      	cbz	r5, 800846a <__swsetup_r+0x16>
 8008460:	69ab      	ldr	r3, [r5, #24]
 8008462:	b913      	cbnz	r3, 800846a <__swsetup_r+0x16>
 8008464:	4628      	mov	r0, r5
 8008466:	f000 f985 	bl	8008774 <__sinit>
 800846a:	4b2e      	ldr	r3, [pc, #184]	; (8008524 <__swsetup_r+0xd0>)
 800846c:	429c      	cmp	r4, r3
 800846e:	d10f      	bne.n	8008490 <__swsetup_r+0x3c>
 8008470:	686c      	ldr	r4, [r5, #4]
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008478:	0719      	lsls	r1, r3, #28
 800847a:	d42c      	bmi.n	80084d6 <__swsetup_r+0x82>
 800847c:	06dd      	lsls	r5, r3, #27
 800847e:	d411      	bmi.n	80084a4 <__swsetup_r+0x50>
 8008480:	2309      	movs	r3, #9
 8008482:	6033      	str	r3, [r6, #0]
 8008484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008488:	81a3      	strh	r3, [r4, #12]
 800848a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800848e:	e03e      	b.n	800850e <__swsetup_r+0xba>
 8008490:	4b25      	ldr	r3, [pc, #148]	; (8008528 <__swsetup_r+0xd4>)
 8008492:	429c      	cmp	r4, r3
 8008494:	d101      	bne.n	800849a <__swsetup_r+0x46>
 8008496:	68ac      	ldr	r4, [r5, #8]
 8008498:	e7eb      	b.n	8008472 <__swsetup_r+0x1e>
 800849a:	4b24      	ldr	r3, [pc, #144]	; (800852c <__swsetup_r+0xd8>)
 800849c:	429c      	cmp	r4, r3
 800849e:	bf08      	it	eq
 80084a0:	68ec      	ldreq	r4, [r5, #12]
 80084a2:	e7e6      	b.n	8008472 <__swsetup_r+0x1e>
 80084a4:	0758      	lsls	r0, r3, #29
 80084a6:	d512      	bpl.n	80084ce <__swsetup_r+0x7a>
 80084a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084aa:	b141      	cbz	r1, 80084be <__swsetup_r+0x6a>
 80084ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084b0:	4299      	cmp	r1, r3
 80084b2:	d002      	beq.n	80084ba <__swsetup_r+0x66>
 80084b4:	4630      	mov	r0, r6
 80084b6:	f7ff fb6f 	bl	8007b98 <_free_r>
 80084ba:	2300      	movs	r3, #0
 80084bc:	6363      	str	r3, [r4, #52]	; 0x34
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	2300      	movs	r3, #0
 80084c8:	6063      	str	r3, [r4, #4]
 80084ca:	6923      	ldr	r3, [r4, #16]
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	f043 0308 	orr.w	r3, r3, #8
 80084d4:	81a3      	strh	r3, [r4, #12]
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	b94b      	cbnz	r3, 80084ee <__swsetup_r+0x9a>
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084e4:	d003      	beq.n	80084ee <__swsetup_r+0x9a>
 80084e6:	4621      	mov	r1, r4
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 fa07 	bl	80088fc <__smakebuf_r>
 80084ee:	89a0      	ldrh	r0, [r4, #12]
 80084f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084f4:	f010 0301 	ands.w	r3, r0, #1
 80084f8:	d00a      	beq.n	8008510 <__swsetup_r+0xbc>
 80084fa:	2300      	movs	r3, #0
 80084fc:	60a3      	str	r3, [r4, #8]
 80084fe:	6963      	ldr	r3, [r4, #20]
 8008500:	425b      	negs	r3, r3
 8008502:	61a3      	str	r3, [r4, #24]
 8008504:	6923      	ldr	r3, [r4, #16]
 8008506:	b943      	cbnz	r3, 800851a <__swsetup_r+0xc6>
 8008508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800850c:	d1ba      	bne.n	8008484 <__swsetup_r+0x30>
 800850e:	bd70      	pop	{r4, r5, r6, pc}
 8008510:	0781      	lsls	r1, r0, #30
 8008512:	bf58      	it	pl
 8008514:	6963      	ldrpl	r3, [r4, #20]
 8008516:	60a3      	str	r3, [r4, #8]
 8008518:	e7f4      	b.n	8008504 <__swsetup_r+0xb0>
 800851a:	2000      	movs	r0, #0
 800851c:	e7f7      	b.n	800850e <__swsetup_r+0xba>
 800851e:	bf00      	nop
 8008520:	20000034 	.word	0x20000034
 8008524:	080093ac 	.word	0x080093ac
 8008528:	080093cc 	.word	0x080093cc
 800852c:	0800938c 	.word	0x0800938c

08008530 <abort>:
 8008530:	b508      	push	{r3, lr}
 8008532:	2006      	movs	r0, #6
 8008534:	f000 fa52 	bl	80089dc <raise>
 8008538:	2001      	movs	r0, #1
 800853a:	f7fd fb79 	bl	8005c30 <_exit>
	...

08008540 <__sflush_r>:
 8008540:	898a      	ldrh	r2, [r1, #12]
 8008542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008546:	4605      	mov	r5, r0
 8008548:	0710      	lsls	r0, r2, #28
 800854a:	460c      	mov	r4, r1
 800854c:	d458      	bmi.n	8008600 <__sflush_r+0xc0>
 800854e:	684b      	ldr	r3, [r1, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc05      	bgt.n	8008560 <__sflush_r+0x20>
 8008554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008556:	2b00      	cmp	r3, #0
 8008558:	dc02      	bgt.n	8008560 <__sflush_r+0x20>
 800855a:	2000      	movs	r0, #0
 800855c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008562:	2e00      	cmp	r6, #0
 8008564:	d0f9      	beq.n	800855a <__sflush_r+0x1a>
 8008566:	2300      	movs	r3, #0
 8008568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800856c:	682f      	ldr	r7, [r5, #0]
 800856e:	602b      	str	r3, [r5, #0]
 8008570:	d032      	beq.n	80085d8 <__sflush_r+0x98>
 8008572:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	075a      	lsls	r2, r3, #29
 8008578:	d505      	bpl.n	8008586 <__sflush_r+0x46>
 800857a:	6863      	ldr	r3, [r4, #4]
 800857c:	1ac0      	subs	r0, r0, r3
 800857e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008580:	b10b      	cbz	r3, 8008586 <__sflush_r+0x46>
 8008582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008584:	1ac0      	subs	r0, r0, r3
 8008586:	2300      	movs	r3, #0
 8008588:	4602      	mov	r2, r0
 800858a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800858c:	6a21      	ldr	r1, [r4, #32]
 800858e:	4628      	mov	r0, r5
 8008590:	47b0      	blx	r6
 8008592:	1c43      	adds	r3, r0, #1
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	d106      	bne.n	80085a6 <__sflush_r+0x66>
 8008598:	6829      	ldr	r1, [r5, #0]
 800859a:	291d      	cmp	r1, #29
 800859c:	d82c      	bhi.n	80085f8 <__sflush_r+0xb8>
 800859e:	4a2a      	ldr	r2, [pc, #168]	; (8008648 <__sflush_r+0x108>)
 80085a0:	40ca      	lsrs	r2, r1
 80085a2:	07d6      	lsls	r6, r2, #31
 80085a4:	d528      	bpl.n	80085f8 <__sflush_r+0xb8>
 80085a6:	2200      	movs	r2, #0
 80085a8:	6062      	str	r2, [r4, #4]
 80085aa:	04d9      	lsls	r1, r3, #19
 80085ac:	6922      	ldr	r2, [r4, #16]
 80085ae:	6022      	str	r2, [r4, #0]
 80085b0:	d504      	bpl.n	80085bc <__sflush_r+0x7c>
 80085b2:	1c42      	adds	r2, r0, #1
 80085b4:	d101      	bne.n	80085ba <__sflush_r+0x7a>
 80085b6:	682b      	ldr	r3, [r5, #0]
 80085b8:	b903      	cbnz	r3, 80085bc <__sflush_r+0x7c>
 80085ba:	6560      	str	r0, [r4, #84]	; 0x54
 80085bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085be:	602f      	str	r7, [r5, #0]
 80085c0:	2900      	cmp	r1, #0
 80085c2:	d0ca      	beq.n	800855a <__sflush_r+0x1a>
 80085c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085c8:	4299      	cmp	r1, r3
 80085ca:	d002      	beq.n	80085d2 <__sflush_r+0x92>
 80085cc:	4628      	mov	r0, r5
 80085ce:	f7ff fae3 	bl	8007b98 <_free_r>
 80085d2:	2000      	movs	r0, #0
 80085d4:	6360      	str	r0, [r4, #52]	; 0x34
 80085d6:	e7c1      	b.n	800855c <__sflush_r+0x1c>
 80085d8:	6a21      	ldr	r1, [r4, #32]
 80085da:	2301      	movs	r3, #1
 80085dc:	4628      	mov	r0, r5
 80085de:	47b0      	blx	r6
 80085e0:	1c41      	adds	r1, r0, #1
 80085e2:	d1c7      	bne.n	8008574 <__sflush_r+0x34>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0c4      	beq.n	8008574 <__sflush_r+0x34>
 80085ea:	2b1d      	cmp	r3, #29
 80085ec:	d001      	beq.n	80085f2 <__sflush_r+0xb2>
 80085ee:	2b16      	cmp	r3, #22
 80085f0:	d101      	bne.n	80085f6 <__sflush_r+0xb6>
 80085f2:	602f      	str	r7, [r5, #0]
 80085f4:	e7b1      	b.n	800855a <__sflush_r+0x1a>
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	e7ad      	b.n	800855c <__sflush_r+0x1c>
 8008600:	690f      	ldr	r7, [r1, #16]
 8008602:	2f00      	cmp	r7, #0
 8008604:	d0a9      	beq.n	800855a <__sflush_r+0x1a>
 8008606:	0793      	lsls	r3, r2, #30
 8008608:	680e      	ldr	r6, [r1, #0]
 800860a:	bf08      	it	eq
 800860c:	694b      	ldreq	r3, [r1, #20]
 800860e:	600f      	str	r7, [r1, #0]
 8008610:	bf18      	it	ne
 8008612:	2300      	movne	r3, #0
 8008614:	eba6 0807 	sub.w	r8, r6, r7
 8008618:	608b      	str	r3, [r1, #8]
 800861a:	f1b8 0f00 	cmp.w	r8, #0
 800861e:	dd9c      	ble.n	800855a <__sflush_r+0x1a>
 8008620:	6a21      	ldr	r1, [r4, #32]
 8008622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008624:	4643      	mov	r3, r8
 8008626:	463a      	mov	r2, r7
 8008628:	4628      	mov	r0, r5
 800862a:	47b0      	blx	r6
 800862c:	2800      	cmp	r0, #0
 800862e:	dc06      	bgt.n	800863e <__sflush_r+0xfe>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008636:	81a3      	strh	r3, [r4, #12]
 8008638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800863c:	e78e      	b.n	800855c <__sflush_r+0x1c>
 800863e:	4407      	add	r7, r0
 8008640:	eba8 0800 	sub.w	r8, r8, r0
 8008644:	e7e9      	b.n	800861a <__sflush_r+0xda>
 8008646:	bf00      	nop
 8008648:	20400001 	.word	0x20400001

0800864c <_fflush_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	690b      	ldr	r3, [r1, #16]
 8008650:	4605      	mov	r5, r0
 8008652:	460c      	mov	r4, r1
 8008654:	b913      	cbnz	r3, 800865c <_fflush_r+0x10>
 8008656:	2500      	movs	r5, #0
 8008658:	4628      	mov	r0, r5
 800865a:	bd38      	pop	{r3, r4, r5, pc}
 800865c:	b118      	cbz	r0, 8008666 <_fflush_r+0x1a>
 800865e:	6983      	ldr	r3, [r0, #24]
 8008660:	b90b      	cbnz	r3, 8008666 <_fflush_r+0x1a>
 8008662:	f000 f887 	bl	8008774 <__sinit>
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <_fflush_r+0x6c>)
 8008668:	429c      	cmp	r4, r3
 800866a:	d11b      	bne.n	80086a4 <_fflush_r+0x58>
 800866c:	686c      	ldr	r4, [r5, #4]
 800866e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0ef      	beq.n	8008656 <_fflush_r+0xa>
 8008676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008678:	07d0      	lsls	r0, r2, #31
 800867a:	d404      	bmi.n	8008686 <_fflush_r+0x3a>
 800867c:	0599      	lsls	r1, r3, #22
 800867e:	d402      	bmi.n	8008686 <_fflush_r+0x3a>
 8008680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008682:	f000 f915 	bl	80088b0 <__retarget_lock_acquire_recursive>
 8008686:	4628      	mov	r0, r5
 8008688:	4621      	mov	r1, r4
 800868a:	f7ff ff59 	bl	8008540 <__sflush_r>
 800868e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008690:	07da      	lsls	r2, r3, #31
 8008692:	4605      	mov	r5, r0
 8008694:	d4e0      	bmi.n	8008658 <_fflush_r+0xc>
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	059b      	lsls	r3, r3, #22
 800869a:	d4dd      	bmi.n	8008658 <_fflush_r+0xc>
 800869c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800869e:	f000 f908 	bl	80088b2 <__retarget_lock_release_recursive>
 80086a2:	e7d9      	b.n	8008658 <_fflush_r+0xc>
 80086a4:	4b05      	ldr	r3, [pc, #20]	; (80086bc <_fflush_r+0x70>)
 80086a6:	429c      	cmp	r4, r3
 80086a8:	d101      	bne.n	80086ae <_fflush_r+0x62>
 80086aa:	68ac      	ldr	r4, [r5, #8]
 80086ac:	e7df      	b.n	800866e <_fflush_r+0x22>
 80086ae:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <_fflush_r+0x74>)
 80086b0:	429c      	cmp	r4, r3
 80086b2:	bf08      	it	eq
 80086b4:	68ec      	ldreq	r4, [r5, #12]
 80086b6:	e7da      	b.n	800866e <_fflush_r+0x22>
 80086b8:	080093ac 	.word	0x080093ac
 80086bc:	080093cc 	.word	0x080093cc
 80086c0:	0800938c 	.word	0x0800938c

080086c4 <std>:
 80086c4:	2300      	movs	r3, #0
 80086c6:	b510      	push	{r4, lr}
 80086c8:	4604      	mov	r4, r0
 80086ca:	e9c0 3300 	strd	r3, r3, [r0]
 80086ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086d2:	6083      	str	r3, [r0, #8]
 80086d4:	8181      	strh	r1, [r0, #12]
 80086d6:	6643      	str	r3, [r0, #100]	; 0x64
 80086d8:	81c2      	strh	r2, [r0, #14]
 80086da:	6183      	str	r3, [r0, #24]
 80086dc:	4619      	mov	r1, r3
 80086de:	2208      	movs	r2, #8
 80086e0:	305c      	adds	r0, #92	; 0x5c
 80086e2:	f7fd fbb5 	bl	8005e50 <memset>
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <std+0x38>)
 80086e8:	6263      	str	r3, [r4, #36]	; 0x24
 80086ea:	4b05      	ldr	r3, [pc, #20]	; (8008700 <std+0x3c>)
 80086ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <std+0x40>)
 80086f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086f2:	4b05      	ldr	r3, [pc, #20]	; (8008708 <std+0x44>)
 80086f4:	6224      	str	r4, [r4, #32]
 80086f6:	6323      	str	r3, [r4, #48]	; 0x30
 80086f8:	bd10      	pop	{r4, pc}
 80086fa:	bf00      	nop
 80086fc:	08008a15 	.word	0x08008a15
 8008700:	08008a37 	.word	0x08008a37
 8008704:	08008a6f 	.word	0x08008a6f
 8008708:	08008a93 	.word	0x08008a93

0800870c <_cleanup_r>:
 800870c:	4901      	ldr	r1, [pc, #4]	; (8008714 <_cleanup_r+0x8>)
 800870e:	f000 b8af 	b.w	8008870 <_fwalk_reent>
 8008712:	bf00      	nop
 8008714:	0800864d 	.word	0x0800864d

08008718 <__sfmoreglue>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	1e4a      	subs	r2, r1, #1
 800871c:	2568      	movs	r5, #104	; 0x68
 800871e:	4355      	muls	r5, r2
 8008720:	460e      	mov	r6, r1
 8008722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008726:	f7ff fa87 	bl	8007c38 <_malloc_r>
 800872a:	4604      	mov	r4, r0
 800872c:	b140      	cbz	r0, 8008740 <__sfmoreglue+0x28>
 800872e:	2100      	movs	r1, #0
 8008730:	e9c0 1600 	strd	r1, r6, [r0]
 8008734:	300c      	adds	r0, #12
 8008736:	60a0      	str	r0, [r4, #8]
 8008738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800873c:	f7fd fb88 	bl	8005e50 <memset>
 8008740:	4620      	mov	r0, r4
 8008742:	bd70      	pop	{r4, r5, r6, pc}

08008744 <__sfp_lock_acquire>:
 8008744:	4801      	ldr	r0, [pc, #4]	; (800874c <__sfp_lock_acquire+0x8>)
 8008746:	f000 b8b3 	b.w	80088b0 <__retarget_lock_acquire_recursive>
 800874a:	bf00      	nop
 800874c:	200132a4 	.word	0x200132a4

08008750 <__sfp_lock_release>:
 8008750:	4801      	ldr	r0, [pc, #4]	; (8008758 <__sfp_lock_release+0x8>)
 8008752:	f000 b8ae 	b.w	80088b2 <__retarget_lock_release_recursive>
 8008756:	bf00      	nop
 8008758:	200132a4 	.word	0x200132a4

0800875c <__sinit_lock_acquire>:
 800875c:	4801      	ldr	r0, [pc, #4]	; (8008764 <__sinit_lock_acquire+0x8>)
 800875e:	f000 b8a7 	b.w	80088b0 <__retarget_lock_acquire_recursive>
 8008762:	bf00      	nop
 8008764:	2001329f 	.word	0x2001329f

08008768 <__sinit_lock_release>:
 8008768:	4801      	ldr	r0, [pc, #4]	; (8008770 <__sinit_lock_release+0x8>)
 800876a:	f000 b8a2 	b.w	80088b2 <__retarget_lock_release_recursive>
 800876e:	bf00      	nop
 8008770:	2001329f 	.word	0x2001329f

08008774 <__sinit>:
 8008774:	b510      	push	{r4, lr}
 8008776:	4604      	mov	r4, r0
 8008778:	f7ff fff0 	bl	800875c <__sinit_lock_acquire>
 800877c:	69a3      	ldr	r3, [r4, #24]
 800877e:	b11b      	cbz	r3, 8008788 <__sinit+0x14>
 8008780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008784:	f7ff bff0 	b.w	8008768 <__sinit_lock_release>
 8008788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800878c:	6523      	str	r3, [r4, #80]	; 0x50
 800878e:	4b13      	ldr	r3, [pc, #76]	; (80087dc <__sinit+0x68>)
 8008790:	4a13      	ldr	r2, [pc, #76]	; (80087e0 <__sinit+0x6c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	62a2      	str	r2, [r4, #40]	; 0x28
 8008796:	42a3      	cmp	r3, r4
 8008798:	bf04      	itt	eq
 800879a:	2301      	moveq	r3, #1
 800879c:	61a3      	streq	r3, [r4, #24]
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 f820 	bl	80087e4 <__sfp>
 80087a4:	6060      	str	r0, [r4, #4]
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 f81c 	bl	80087e4 <__sfp>
 80087ac:	60a0      	str	r0, [r4, #8]
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 f818 	bl	80087e4 <__sfp>
 80087b4:	2200      	movs	r2, #0
 80087b6:	60e0      	str	r0, [r4, #12]
 80087b8:	2104      	movs	r1, #4
 80087ba:	6860      	ldr	r0, [r4, #4]
 80087bc:	f7ff ff82 	bl	80086c4 <std>
 80087c0:	68a0      	ldr	r0, [r4, #8]
 80087c2:	2201      	movs	r2, #1
 80087c4:	2109      	movs	r1, #9
 80087c6:	f7ff ff7d 	bl	80086c4 <std>
 80087ca:	68e0      	ldr	r0, [r4, #12]
 80087cc:	2202      	movs	r2, #2
 80087ce:	2112      	movs	r1, #18
 80087d0:	f7ff ff78 	bl	80086c4 <std>
 80087d4:	2301      	movs	r3, #1
 80087d6:	61a3      	str	r3, [r4, #24]
 80087d8:	e7d2      	b.n	8008780 <__sinit+0xc>
 80087da:	bf00      	nop
 80087dc:	08009008 	.word	0x08009008
 80087e0:	0800870d 	.word	0x0800870d

080087e4 <__sfp>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	4607      	mov	r7, r0
 80087e8:	f7ff ffac 	bl	8008744 <__sfp_lock_acquire>
 80087ec:	4b1e      	ldr	r3, [pc, #120]	; (8008868 <__sfp+0x84>)
 80087ee:	681e      	ldr	r6, [r3, #0]
 80087f0:	69b3      	ldr	r3, [r6, #24]
 80087f2:	b913      	cbnz	r3, 80087fa <__sfp+0x16>
 80087f4:	4630      	mov	r0, r6
 80087f6:	f7ff ffbd 	bl	8008774 <__sinit>
 80087fa:	3648      	adds	r6, #72	; 0x48
 80087fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008800:	3b01      	subs	r3, #1
 8008802:	d503      	bpl.n	800880c <__sfp+0x28>
 8008804:	6833      	ldr	r3, [r6, #0]
 8008806:	b30b      	cbz	r3, 800884c <__sfp+0x68>
 8008808:	6836      	ldr	r6, [r6, #0]
 800880a:	e7f7      	b.n	80087fc <__sfp+0x18>
 800880c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008810:	b9d5      	cbnz	r5, 8008848 <__sfp+0x64>
 8008812:	4b16      	ldr	r3, [pc, #88]	; (800886c <__sfp+0x88>)
 8008814:	60e3      	str	r3, [r4, #12]
 8008816:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800881a:	6665      	str	r5, [r4, #100]	; 0x64
 800881c:	f000 f847 	bl	80088ae <__retarget_lock_init_recursive>
 8008820:	f7ff ff96 	bl	8008750 <__sfp_lock_release>
 8008824:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008828:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800882c:	6025      	str	r5, [r4, #0]
 800882e:	61a5      	str	r5, [r4, #24]
 8008830:	2208      	movs	r2, #8
 8008832:	4629      	mov	r1, r5
 8008834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008838:	f7fd fb0a 	bl	8005e50 <memset>
 800883c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008844:	4620      	mov	r0, r4
 8008846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008848:	3468      	adds	r4, #104	; 0x68
 800884a:	e7d9      	b.n	8008800 <__sfp+0x1c>
 800884c:	2104      	movs	r1, #4
 800884e:	4638      	mov	r0, r7
 8008850:	f7ff ff62 	bl	8008718 <__sfmoreglue>
 8008854:	4604      	mov	r4, r0
 8008856:	6030      	str	r0, [r6, #0]
 8008858:	2800      	cmp	r0, #0
 800885a:	d1d5      	bne.n	8008808 <__sfp+0x24>
 800885c:	f7ff ff78 	bl	8008750 <__sfp_lock_release>
 8008860:	230c      	movs	r3, #12
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	e7ee      	b.n	8008844 <__sfp+0x60>
 8008866:	bf00      	nop
 8008868:	08009008 	.word	0x08009008
 800886c:	ffff0001 	.word	0xffff0001

08008870 <_fwalk_reent>:
 8008870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008874:	4606      	mov	r6, r0
 8008876:	4688      	mov	r8, r1
 8008878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800887c:	2700      	movs	r7, #0
 800887e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008882:	f1b9 0901 	subs.w	r9, r9, #1
 8008886:	d505      	bpl.n	8008894 <_fwalk_reent+0x24>
 8008888:	6824      	ldr	r4, [r4, #0]
 800888a:	2c00      	cmp	r4, #0
 800888c:	d1f7      	bne.n	800887e <_fwalk_reent+0xe>
 800888e:	4638      	mov	r0, r7
 8008890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008894:	89ab      	ldrh	r3, [r5, #12]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d907      	bls.n	80088aa <_fwalk_reent+0x3a>
 800889a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800889e:	3301      	adds	r3, #1
 80088a0:	d003      	beq.n	80088aa <_fwalk_reent+0x3a>
 80088a2:	4629      	mov	r1, r5
 80088a4:	4630      	mov	r0, r6
 80088a6:	47c0      	blx	r8
 80088a8:	4307      	orrs	r7, r0
 80088aa:	3568      	adds	r5, #104	; 0x68
 80088ac:	e7e9      	b.n	8008882 <_fwalk_reent+0x12>

080088ae <__retarget_lock_init_recursive>:
 80088ae:	4770      	bx	lr

080088b0 <__retarget_lock_acquire_recursive>:
 80088b0:	4770      	bx	lr

080088b2 <__retarget_lock_release_recursive>:
 80088b2:	4770      	bx	lr

080088b4 <__swhatbuf_r>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	460e      	mov	r6, r1
 80088b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088bc:	2900      	cmp	r1, #0
 80088be:	b096      	sub	sp, #88	; 0x58
 80088c0:	4614      	mov	r4, r2
 80088c2:	461d      	mov	r5, r3
 80088c4:	da07      	bge.n	80088d6 <__swhatbuf_r+0x22>
 80088c6:	2300      	movs	r3, #0
 80088c8:	602b      	str	r3, [r5, #0]
 80088ca:	89b3      	ldrh	r3, [r6, #12]
 80088cc:	061a      	lsls	r2, r3, #24
 80088ce:	d410      	bmi.n	80088f2 <__swhatbuf_r+0x3e>
 80088d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d4:	e00e      	b.n	80088f4 <__swhatbuf_r+0x40>
 80088d6:	466a      	mov	r2, sp
 80088d8:	f000 f902 	bl	8008ae0 <_fstat_r>
 80088dc:	2800      	cmp	r0, #0
 80088de:	dbf2      	blt.n	80088c6 <__swhatbuf_r+0x12>
 80088e0:	9a01      	ldr	r2, [sp, #4]
 80088e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088ea:	425a      	negs	r2, r3
 80088ec:	415a      	adcs	r2, r3
 80088ee:	602a      	str	r2, [r5, #0]
 80088f0:	e7ee      	b.n	80088d0 <__swhatbuf_r+0x1c>
 80088f2:	2340      	movs	r3, #64	; 0x40
 80088f4:	2000      	movs	r0, #0
 80088f6:	6023      	str	r3, [r4, #0]
 80088f8:	b016      	add	sp, #88	; 0x58
 80088fa:	bd70      	pop	{r4, r5, r6, pc}

080088fc <__smakebuf_r>:
 80088fc:	898b      	ldrh	r3, [r1, #12]
 80088fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008900:	079d      	lsls	r5, r3, #30
 8008902:	4606      	mov	r6, r0
 8008904:	460c      	mov	r4, r1
 8008906:	d507      	bpl.n	8008918 <__smakebuf_r+0x1c>
 8008908:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	6123      	str	r3, [r4, #16]
 8008910:	2301      	movs	r3, #1
 8008912:	6163      	str	r3, [r4, #20]
 8008914:	b002      	add	sp, #8
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	ab01      	add	r3, sp, #4
 800891a:	466a      	mov	r2, sp
 800891c:	f7ff ffca 	bl	80088b4 <__swhatbuf_r>
 8008920:	9900      	ldr	r1, [sp, #0]
 8008922:	4605      	mov	r5, r0
 8008924:	4630      	mov	r0, r6
 8008926:	f7ff f987 	bl	8007c38 <_malloc_r>
 800892a:	b948      	cbnz	r0, 8008940 <__smakebuf_r+0x44>
 800892c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008930:	059a      	lsls	r2, r3, #22
 8008932:	d4ef      	bmi.n	8008914 <__smakebuf_r+0x18>
 8008934:	f023 0303 	bic.w	r3, r3, #3
 8008938:	f043 0302 	orr.w	r3, r3, #2
 800893c:	81a3      	strh	r3, [r4, #12]
 800893e:	e7e3      	b.n	8008908 <__smakebuf_r+0xc>
 8008940:	4b0d      	ldr	r3, [pc, #52]	; (8008978 <__smakebuf_r+0x7c>)
 8008942:	62b3      	str	r3, [r6, #40]	; 0x28
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	6020      	str	r0, [r4, #0]
 8008948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	9b00      	ldr	r3, [sp, #0]
 8008950:	6163      	str	r3, [r4, #20]
 8008952:	9b01      	ldr	r3, [sp, #4]
 8008954:	6120      	str	r0, [r4, #16]
 8008956:	b15b      	cbz	r3, 8008970 <__smakebuf_r+0x74>
 8008958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800895c:	4630      	mov	r0, r6
 800895e:	f000 f8d1 	bl	8008b04 <_isatty_r>
 8008962:	b128      	cbz	r0, 8008970 <__smakebuf_r+0x74>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f023 0303 	bic.w	r3, r3, #3
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	81a3      	strh	r3, [r4, #12]
 8008970:	89a0      	ldrh	r0, [r4, #12]
 8008972:	4305      	orrs	r5, r0
 8008974:	81a5      	strh	r5, [r4, #12]
 8008976:	e7cd      	b.n	8008914 <__smakebuf_r+0x18>
 8008978:	0800870d 	.word	0x0800870d

0800897c <_malloc_usable_size_r>:
 800897c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008980:	1f18      	subs	r0, r3, #4
 8008982:	2b00      	cmp	r3, #0
 8008984:	bfbc      	itt	lt
 8008986:	580b      	ldrlt	r3, [r1, r0]
 8008988:	18c0      	addlt	r0, r0, r3
 800898a:	4770      	bx	lr

0800898c <_raise_r>:
 800898c:	291f      	cmp	r1, #31
 800898e:	b538      	push	{r3, r4, r5, lr}
 8008990:	4604      	mov	r4, r0
 8008992:	460d      	mov	r5, r1
 8008994:	d904      	bls.n	80089a0 <_raise_r+0x14>
 8008996:	2316      	movs	r3, #22
 8008998:	6003      	str	r3, [r0, #0]
 800899a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089a2:	b112      	cbz	r2, 80089aa <_raise_r+0x1e>
 80089a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089a8:	b94b      	cbnz	r3, 80089be <_raise_r+0x32>
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 f830 	bl	8008a10 <_getpid_r>
 80089b0:	462a      	mov	r2, r5
 80089b2:	4601      	mov	r1, r0
 80089b4:	4620      	mov	r0, r4
 80089b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ba:	f000 b817 	b.w	80089ec <_kill_r>
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d00a      	beq.n	80089d8 <_raise_r+0x4c>
 80089c2:	1c59      	adds	r1, r3, #1
 80089c4:	d103      	bne.n	80089ce <_raise_r+0x42>
 80089c6:	2316      	movs	r3, #22
 80089c8:	6003      	str	r3, [r0, #0]
 80089ca:	2001      	movs	r0, #1
 80089cc:	e7e7      	b.n	800899e <_raise_r+0x12>
 80089ce:	2400      	movs	r4, #0
 80089d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089d4:	4628      	mov	r0, r5
 80089d6:	4798      	blx	r3
 80089d8:	2000      	movs	r0, #0
 80089da:	e7e0      	b.n	800899e <_raise_r+0x12>

080089dc <raise>:
 80089dc:	4b02      	ldr	r3, [pc, #8]	; (80089e8 <raise+0xc>)
 80089de:	4601      	mov	r1, r0
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	f7ff bfd3 	b.w	800898c <_raise_r>
 80089e6:	bf00      	nop
 80089e8:	20000034 	.word	0x20000034

080089ec <_kill_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4d07      	ldr	r5, [pc, #28]	; (8008a0c <_kill_r+0x20>)
 80089f0:	2300      	movs	r3, #0
 80089f2:	4604      	mov	r4, r0
 80089f4:	4608      	mov	r0, r1
 80089f6:	4611      	mov	r1, r2
 80089f8:	602b      	str	r3, [r5, #0]
 80089fa:	f7fd f909 	bl	8005c10 <_kill>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	d102      	bne.n	8008a08 <_kill_r+0x1c>
 8008a02:	682b      	ldr	r3, [r5, #0]
 8008a04:	b103      	cbz	r3, 8008a08 <_kill_r+0x1c>
 8008a06:	6023      	str	r3, [r4, #0]
 8008a08:	bd38      	pop	{r3, r4, r5, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20013298 	.word	0x20013298

08008a10 <_getpid_r>:
 8008a10:	f7fd b8f6 	b.w	8005c00 <_getpid>

08008a14 <__sread>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	460c      	mov	r4, r1
 8008a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1c:	f000 f894 	bl	8008b48 <_read_r>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	bfab      	itete	ge
 8008a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a26:	89a3      	ldrhlt	r3, [r4, #12]
 8008a28:	181b      	addge	r3, r3, r0
 8008a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a2e:	bfac      	ite	ge
 8008a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a32:	81a3      	strhlt	r3, [r4, #12]
 8008a34:	bd10      	pop	{r4, pc}

08008a36 <__swrite>:
 8008a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3a:	461f      	mov	r7, r3
 8008a3c:	898b      	ldrh	r3, [r1, #12]
 8008a3e:	05db      	lsls	r3, r3, #23
 8008a40:	4605      	mov	r5, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	4616      	mov	r6, r2
 8008a46:	d505      	bpl.n	8008a54 <__swrite+0x1e>
 8008a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f000 f868 	bl	8008b24 <_lseek_r>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	4632      	mov	r2, r6
 8008a62:	463b      	mov	r3, r7
 8008a64:	4628      	mov	r0, r5
 8008a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6a:	f000 b817 	b.w	8008a9c <_write_r>

08008a6e <__sseek>:
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	460c      	mov	r4, r1
 8008a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a76:	f000 f855 	bl	8008b24 <_lseek_r>
 8008a7a:	1c43      	adds	r3, r0, #1
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	bf15      	itete	ne
 8008a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a8a:	81a3      	strheq	r3, [r4, #12]
 8008a8c:	bf18      	it	ne
 8008a8e:	81a3      	strhne	r3, [r4, #12]
 8008a90:	bd10      	pop	{r4, pc}

08008a92 <__sclose>:
 8008a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a96:	f000 b813 	b.w	8008ac0 <_close_r>
	...

08008a9c <_write_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d07      	ldr	r5, [pc, #28]	; (8008abc <_write_r+0x20>)
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	602a      	str	r2, [r5, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f7fd f8e7 	bl	8005c7e <_write>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_write_r+0x1e>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_write_r+0x1e>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	20013298 	.word	0x20013298

08008ac0 <_close_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	; (8008adc <_close_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7fd f8f3 	bl	8005cb6 <_close>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_close_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_close_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	20013298 	.word	0x20013298

08008ae0 <_fstat_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d07      	ldr	r5, [pc, #28]	; (8008b00 <_fstat_r+0x20>)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	4611      	mov	r1, r2
 8008aec:	602b      	str	r3, [r5, #0]
 8008aee:	f7fd f8ee 	bl	8005cce <_fstat>
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	d102      	bne.n	8008afc <_fstat_r+0x1c>
 8008af6:	682b      	ldr	r3, [r5, #0]
 8008af8:	b103      	cbz	r3, 8008afc <_fstat_r+0x1c>
 8008afa:	6023      	str	r3, [r4, #0]
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
 8008afe:	bf00      	nop
 8008b00:	20013298 	.word	0x20013298

08008b04 <_isatty_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4d06      	ldr	r5, [pc, #24]	; (8008b20 <_isatty_r+0x1c>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	f7fd f8ed 	bl	8005cee <_isatty>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_isatty_r+0x1a>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_isatty_r+0x1a>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	20013298 	.word	0x20013298

08008b24 <_lseek_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d07      	ldr	r5, [pc, #28]	; (8008b44 <_lseek_r+0x20>)
 8008b28:	4604      	mov	r4, r0
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	2200      	movs	r2, #0
 8008b30:	602a      	str	r2, [r5, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	f7fd f8e6 	bl	8005d04 <_lseek>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_lseek_r+0x1e>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_lseek_r+0x1e>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	20013298 	.word	0x20013298

08008b48 <_read_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4d07      	ldr	r5, [pc, #28]	; (8008b68 <_read_r+0x20>)
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	4608      	mov	r0, r1
 8008b50:	4611      	mov	r1, r2
 8008b52:	2200      	movs	r2, #0
 8008b54:	602a      	str	r2, [r5, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	f7fd f874 	bl	8005c44 <_read>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_read_r+0x1e>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_read_r+0x1e>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	20013298 	.word	0x20013298

08008b6c <_init>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr

08008b78 <_fini>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	bf00      	nop
 8008b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7e:	bc08      	pop	{r3}
 8008b80:	469e      	mov	lr, r3
 8008b82:	4770      	bx	lr
