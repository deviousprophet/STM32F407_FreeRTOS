
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08009270  08009270  00019270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa4  08009aa4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009aa4  08009aa4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009aa4  08009aa4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa4  08009aa4  00019aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001366c  200001dc  08009c88  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013848  08009c88  00023848  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b3e  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e11  00000000  00000000  00035d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00038b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00039930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000595f  00000000  00000000  0003a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8f1  00000000  00000000  0003ff07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001de01  00000000  00000000  0004e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006c5f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a10  00000000  00000000  0006c64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009258 	.word	0x08009258

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08009258 	.word	0x08009258

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2001378c 	.word	0x2001378c

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <ADE_SPI_Init>:
 */


#include "ade7753.h"

void ADE_SPI_Init() {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	; 0x30
 8000d0c:	af00      	add	r7, sp, #0
	 * PB13 -> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT function mode : 5
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000d0e:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <ADE_SPI_Init+0xd8>)
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000d18:	2305      	movs	r3, #5
 8000d1a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000d30:	230d      	movs	r3, #13
 8000d32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 f8fa 	bl	8003f34 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000d40:	230f      	movs	r3, #15
 8000d42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 f8f2 	bl	8003f34 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000d50:	230e      	movs	r3, #14
 8000d52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 f8ea 	bl	8003f34 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000d60:	230c      	movs	r3, #12
 8000d62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 f8e2 	bl	8003f34 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <ADE_SPI_Init+0xdc>)
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000d74:	230f      	movs	r3, #15
 8000d76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(&SPIPins);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 f8d2 	bl	8003f34 <GPIO_Init>

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = ADE_SPI_HOST;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <ADE_SPI_Init+0xe0>)
 8000d92:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000d94:	2301      	movs	r3, #1
 8000d96:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;	// clock 1MHz
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000da0:	2300      	movs	r3, #0
 8000da2:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;				// CPOL 0
 8000da4:	2300      	movs	r3, #0
 8000da6:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;				// CPHA 1
 8000da8:	2301      	movs	r3, #1
 8000daa:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 					// Hardware slave management enabled for NSS pin
 8000dac:	2300      	movs	r3, #0
 8000dae:	73bb      	strb	r3, [r7, #14]

	ADE_SPI_HOST->CR1 &= ~(1 << SPI_CR1_SPE);
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <ADE_SPI_Init+0xe0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <ADE_SPI_Init+0xe0>)
 8000db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dba:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fb62 	bl	8004488 <SPI_Init>
	ADE_SPI_HOST->CR1 |= (1 << SPI_CR1_SPE);
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <ADE_SPI_Init+0xe0>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <ADE_SPI_Init+0xe0>)
 8000dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dce:	6013      	str	r3, [r2, #0]

	SPI_SSOEConfig(ADE_SPI_HOST, ENABLE);
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <ADE_SPI_Init+0xe0>)
 8000dd4:	f003 fbfa 	bl	80045cc <SPI_SSOEConfig>
}
 8000dd8:	bf00      	nop
 8000dda:	3730      	adds	r7, #48	; 0x30
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40003800 	.word	0x40003800

08000dec <ZeroX_Init>:

void ZeroX_Init() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
//	Input pin trigger as falling edge
	GPIO_Handle_t GpioZX;
	GpioZX.pGPIOx = PORT_ZX_IT;
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <ZeroX_Init+0x2c>)
 8000df4:	607b      	str	r3, [r7, #4]
	GpioZX.GPIO_PinConfig.GPIO_PinNumber = PIN_ZX_IT;
 8000df6:	230d      	movs	r3, #13
 8000df8:	723b      	strb	r3, [r7, #8]
	GpioZX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	727b      	strb	r3, [r7, #9]
	GpioZX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	72bb      	strb	r3, [r7, #10]
	GpioZX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e02:	2300      	movs	r3, #0
 8000e04:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioZX);
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 f893 	bl	8003f34 <GPIO_Init>
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40020c00 	.word	0x40020c00

08000e1c <IRQ_Init>:

void IRQ_Init() {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
//	Input pin trigger as falling edge
	GPIO_Handle_t GpioIRQ;
	GpioIRQ.pGPIOx = PORT_IRQ_IT;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <IRQ_Init+0x2c>)
 8000e24:	607b      	str	r3, [r7, #4]
	GpioIRQ.GPIO_PinConfig.GPIO_PinNumber = PIN_IRQ_IT;
 8000e26:	2309      	movs	r3, #9
 8000e28:	723b      	strb	r3, [r7, #8]
	GpioIRQ.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	727b      	strb	r3, [r7, #9]
	GpioIRQ.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	72bb      	strb	r3, [r7, #10]
	GpioIRQ.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000e32:	2301      	movs	r3, #1
 8000e34:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioIRQ);
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 f87b 	bl	8003f34 <GPIO_Init>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40020c00 	.word	0x40020c00

08000e4c <ADE_Init>:
	GpioSAG.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GpioSAG.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	GPIO_Init(&GpioSAG);
}

void ADE_Init(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	ADE_SPI_Init();
 8000e50:	f7ff ff5a 	bl	8000d08 <ADE_SPI_Init>
	ZeroX_Init();
 8000e54:	f7ff ffca 	bl	8000dec <ZeroX_Init>
//	SAG_Init();
	IRQ_Init();
 8000e58:	f7ff ffe0 	bl	8000e1c <IRQ_Init>

//	IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI15);
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	2028      	movs	r0, #40	; 0x28
 8000e60:	f003 fab0 	bl	80043c4 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000e64:	2101      	movs	r1, #1
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f003 fa26 	bl	80042b8 <GPIO_IRQInterruptConfig>

	ADE_Reset();
 8000e6c:	f000 f802 	bl	8000e74 <ADE_Reset>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <ADE_Reset>:

void ADE_Reset(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	210f      	movs	r1, #15
 8000e7e:	480b      	ldr	r0, [pc, #44]	; (8000eac <ADE_Reset+0x38>)
 8000e80:	f003 f9f4 	bl	800426c <GPIO_WriteToOutputPin>
	for(int i = 0; i < 1000; i++);
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	e002      	b.n	8000e90 <ADE_Reset+0x1c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e96:	dbf8      	blt.n	8000e8a <ADE_Reset+0x16>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <ADE_Reset+0x38>)
 8000e9e:	f003 f9e5 	bl	800426c <GPIO_WriteToOutputPin>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40020c00 	.word	0x40020c00

08000eb0 <ADE_ReadData>:

uint32_t ADE_ReadData(uint8_t address, uint8_t bytes_to_read) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
	uint32_t data = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4813      	ldr	r0, [pc, #76]	; (8000f14 <ADE_ReadData+0x64>)
 8000ec8:	f003 fb64 	bl	8004594 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4810      	ldr	r0, [pc, #64]	; (8000f14 <ADE_ReadData+0x64>)
 8000ed2:	f003 fb34 	bl	800453e <SPI_Transfer>
	for(uint8_t i = 0; i < bytes_to_read; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72fb      	strb	r3, [r7, #11]
 8000eda:	e00d      	b.n	8000ef8 <ADE_ReadData+0x48>
		data <<= 8;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	60fb      	str	r3, [r7, #12]
		data |= SPI_Transfer(ADE_SPI_HOST, 0xff);
 8000ee2:	21ff      	movs	r1, #255	; 0xff
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <ADE_ReadData+0x64>)
 8000ee6:	f003 fb2a 	bl	800453e <SPI_Transfer>
 8000eea:	4602      	mov	r2, r0
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < bytes_to_read; i++) {
 8000ef2:	7afb      	ldrb	r3, [r7, #11]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	72fb      	strb	r3, [r7, #11]
 8000ef8:	7afa      	ldrb	r2, [r7, #11]
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3ed      	bcc.n	8000edc <ADE_ReadData+0x2c>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE); //SS pin pull to high
 8000f00:	2100      	movs	r1, #0
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <ADE_ReadData+0x64>)
 8000f04:	f003 fb46 	bl	8004594 <SPI_PeripheralControl>
	return data;
 8000f08:	68fb      	ldr	r3, [r7, #12]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40003800 	.word	0x40003800

08000f18 <ADE_WriteData>:

void ADE_WriteData(uint8_t address, uint32_t write_buffer, uint8_t bytes_to_write) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	4613      	mov	r3, r2
 8000f26:	71bb      	strb	r3, [r7, #6]
	uint8_t data = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73bb      	strb	r3, [r7, #14]
	address |= 0x80;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f32:	71fb      	strb	r3, [r7, #7]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000f34:	2101      	movs	r1, #1
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <ADE_WriteData+0x70>)
 8000f38:	f003 fb2c 	bl	8004594 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <ADE_WriteData+0x70>)
 8000f42:	f003 fafc 	bl	800453e <SPI_Transfer>
	for(uint8_t i = 0; i < bytes_to_write; i++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	e010      	b.n	8000f6e <ADE_WriteData+0x56>
		data = (uint8_t) (write_buffer >> 8 * (bytes_to_write - i - 1));
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	3b01      	subs	r3, #1
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5c:	73bb      	strb	r3, [r7, #14]
		SPI_Transfer(ADE_SPI_HOST, data);
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4809      	ldr	r0, [pc, #36]	; (8000f88 <ADE_WriteData+0x70>)
 8000f64:	f003 faeb 	bl	800453e <SPI_Transfer>
	for(uint8_t i = 0; i < bytes_to_write; i++) {
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3ea      	bcc.n	8000f4c <ADE_WriteData+0x34>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE);; //SS pin pull to high
 8000f76:	2100      	movs	r1, #0
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <ADE_WriteData+0x70>)
 8000f7a:	f003 fb0b 	bl	8004594 <SPI_PeripheralControl>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40003800 	.word	0x40003800

08000f8c <ADE_SetGain>:

void ADE_SetGain(CH1_Full_Scale_Select_t ch1_full_scale, PGA_GAIN_t ch1_gain, PGA_GAIN_t ch2_gain) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	460b      	mov	r3, r1
 8000f98:	71bb      	strb	r3, [r7, #6]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	717b      	strb	r3, [r7, #5]
	ADE_WriteData(GAIN, 0x00 | (ch2_gain << 5) | (ch1_full_scale << 3) | ch1_gain, 1);
 8000f9e:	797b      	ldrb	r3, [r7, #5]
 8000fa0:	015a      	lsls	r2, r3, #5
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	2201      	movs	r2, #1
 8000fae:	4619      	mov	r1, r3
 8000fb0:	200f      	movs	r0, #15
 8000fb2:	f7ff ffb1 	bl	8000f18 <ADE_WriteData>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 8000fca:	2101      	movs	r1, #1
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <LCD5110_send+0x40>)
 8000fce:	f003 fae1 	bl	8004594 <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <LCD5110_send+0x44>)
 8000fd8:	f003 f948 	bl	800426c <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4807      	ldr	r0, [pc, #28]	; (8001000 <LCD5110_send+0x40>)
 8000fe2:	f003 faac 	bl	800453e <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <LCD5110_send+0x44>)
 8000fec:	f003 f93e 	bl	800426c <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4803      	ldr	r0, [pc, #12]	; (8001000 <LCD5110_send+0x40>)
 8000ff4:	f003 face 	bl	8004594 <SPI_PeripheralControl>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40013000 	.word	0x40013000
 8001004:	40020400 	.word	0x40020400

08001008 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	460a      	mov	r2, r1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	4613      	mov	r3, r2
 8001016:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d002      	beq.n	8001024 <LCD5110_Pin+0x1c>
 800101e:	2b02      	cmp	r3, #2
 8001020:	d00f      	beq.n	8001042 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 8001022:	e01d      	b.n	8001060 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 800102a:	2201      	movs	r2, #1
 800102c:	2105      	movs	r1, #5
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <LCD5110_Pin+0x60>)
 8001030:	f003 f91c 	bl	800426c <GPIO_WriteToOutputPin>
			break;
 8001034:	e014      	b.n	8001060 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2105      	movs	r1, #5
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <LCD5110_Pin+0x60>)
 800103c:	f003 f916 	bl	800426c <GPIO_WriteToOutputPin>
			break;
 8001040:	e00e      	b.n	8001060 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 8001048:	2201      	movs	r2, #1
 800104a:	2107      	movs	r1, #7
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <LCD5110_Pin+0x64>)
 800104e:	f003 f90d 	bl	800426c <GPIO_WriteToOutputPin>
			break;
 8001052:	e004      	b.n	800105e <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8001054:	2200      	movs	r2, #0
 8001056:	2107      	movs	r1, #7
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <LCD5110_Pin+0x64>)
 800105a:	f003 f907 	bl	800426c <GPIO_WriteToOutputPin>
			break;
 800105e:	bf00      	nop
	}
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020800 	.word	0x40020800
 800106c:	40021000 	.word	0x40021000

08001070 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e002      	b.n	8001084 <LCD5110_Delay+0x14>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8f8      	bhi.n	800107e <LCD5110_Delay+0xe>
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b08e      	sub	sp, #56	; 0x38
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 80010a6:	4b4b      	ldr	r3, [pc, #300]	; (80011d4 <LCD5110_Init+0x138>)
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80010b0:	2305      	movs	r3, #5
 80010b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80010c8:	2305      	movs	r3, #5
 80010ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80010ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 ff2e 	bl	8003f34 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80010d8:	2307      	movs	r3, #7
 80010da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80010de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 ff26 	bl	8003f34 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <LCD5110_Init+0x13c>)
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 80010ec:	2301      	movs	r3, #1
 80010ee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010f2:	2301      	movs	r3, #1
 80010f4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 8001104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001108:	4618      	mov	r0, r3
 800110a:	f002 ff13 	bl	8003f34 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <LCD5110_Init+0x140>)
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 8001112:	2305      	movs	r3, #5
 8001114:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111c:	4618      	mov	r0, r3
 800111e:	f002 ff09 	bl	8003f34 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <LCD5110_Init+0x144>)
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 8001126:	2307      	movs	r3, #7
 8001128:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001130:	4618      	mov	r0, r3
 8001132:	f002 feff 	bl	8003f34 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <LCD5110_Init+0x148>)
 8001138:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800113a:	2301      	movs	r3, #1
 800113c:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 800113e:	2301      	movs	r3, #1
 8001140:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8001142:	2302      	movs	r3, #2
 8001144:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8001146:	2300      	movs	r3, #0
 8001148:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 800114a:	2300      	movs	r3, #0
 800114c:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 800114e:	2300      	movs	r3, #0
 8001150:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 8001152:	2300      	movs	r3, #0
 8001154:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4618      	mov	r0, r3
 800115c:	f003 f994 	bl	8004488 <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 8001160:	2101      	movs	r1, #1
 8001162:	4820      	ldr	r0, [pc, #128]	; (80011e4 <LCD5110_Init+0x148>)
 8001164:	f003 fa32 	bl	80045cc <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 8001168:	2100      	movs	r1, #0
 800116a:	2002      	movs	r0, #2
 800116c:	f7ff ff4c 	bl	8001008 <LCD5110_Pin>
	LCD5110_Delay(10000);
 8001170:	f242 7010 	movw	r0, #10000	; 0x2710
 8001174:	f7ff ff7c 	bl	8001070 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 8001178:	2101      	movs	r1, #1
 800117a:	2002      	movs	r0, #2
 800117c:	f7ff ff44 	bl	8001008 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 8001180:	2121      	movs	r1, #33	; 0x21
 8001182:	2000      	movs	r0, #0
 8001184:	f000 f830 	bl	80011e8 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 8001188:	2114      	movs	r1, #20
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f82c 	bl	80011e8 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	da01      	bge.n	800119c <LCD5110_Init+0x100>
		contrast = 0x7F;
 8001198:	237f      	movs	r3, #127	; 0x7f
 800119a:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 f81e 	bl	80011e8 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 80011ac:	2120      	movs	r1, #32
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 f81a 	bl	80011e8 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 80011b4:	210c      	movs	r1, #12
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f816 	bl	80011e8 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 80011bc:	f000 f8b8 	bl	8001330 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 80011c0:	210c      	movs	r1, #12
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f810 	bl	80011e8 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 80011c8:	f000 f88c 	bl	80012e4 <LCD5110_Clear>
}
 80011cc:	bf00      	nop
 80011ce:	3738      	adds	r7, #56	; 0x38
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40013000 	.word	0x40013000

080011e8 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <LCD5110_Write+0x24>
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d109      	bne.n	8001216 <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 8001202:	2101      	movs	r1, #1
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff feff 	bl	8001008 <LCD5110_Pin>
			break;
 800120a:	e005      	b.n	8001218 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 800120c:	2100      	movs	r1, #0
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fefa 	bl	8001008 <LCD5110_Pin>
			break;
 8001214:	e000      	b.n	8001218 <LCD5110_Write+0x30>
		default: break;
 8001216:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fed0 	bl	8000fc0 <LCD5110_send>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	460b      	mov	r3, r1
 8001234:	71bb      	strb	r3, [r7, #6]
 8001236:	4613      	mov	r3, r2
 8001238:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b53      	cmp	r3, #83	; 0x53
 800123e:	d849      	bhi.n	80012d4 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	2b2f      	cmp	r3, #47	; 0x2f
 8001244:	d848      	bhi.n	80012d8 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d01d      	beq.n	8001288 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	08db      	lsrs	r3, r3, #3
 8001252:	b2d8      	uxtb	r0, r3
 8001254:	4601      	mov	r1, r0
 8001256:	2354      	movs	r3, #84	; 0x54
 8001258:	fb03 f301 	mul.w	r3, r3, r1
 800125c:	4413      	add	r3, r2
 800125e:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <LCD5110_DrawPixel+0xb8>)
 8001260:	5cd3      	ldrb	r3, [r2, r3]
 8001262:	b25a      	sxtb	r2, r3
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	b25b      	sxtb	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b259      	sxtb	r1, r3
 8001276:	79fa      	ldrb	r2, [r7, #7]
 8001278:	2354      	movs	r3, #84	; 0x54
 800127a:	fb03 f300 	mul.w	r3, r3, r0
 800127e:	4413      	add	r3, r2
 8001280:	b2c9      	uxtb	r1, r1
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <LCD5110_DrawPixel+0xb8>)
 8001284:	54d1      	strb	r1, [r2, r3]
 8001286:	e01e      	b.n	80012c6 <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 8001288:	79fa      	ldrb	r2, [r7, #7]
 800128a:	79bb      	ldrb	r3, [r7, #6]
 800128c:	08db      	lsrs	r3, r3, #3
 800128e:	b2d8      	uxtb	r0, r3
 8001290:	4601      	mov	r1, r0
 8001292:	2354      	movs	r3, #84	; 0x54
 8001294:	fb03 f301 	mul.w	r3, r3, r1
 8001298:	4413      	add	r3, r2
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <LCD5110_DrawPixel+0xb8>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	b25a      	sxtb	r2, r3
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	2101      	movs	r1, #1
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	b259      	sxtb	r1, r3
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	2354      	movs	r3, #84	; 0x54
 80012ba:	fb03 f300 	mul.w	r3, r3, r0
 80012be:	4413      	add	r3, r2
 80012c0:	b2c9      	uxtb	r1, r1
 80012c2:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <LCD5110_DrawPixel+0xb8>)
 80012c4:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	79b9      	ldrb	r1, [r7, #6]
 80012cc:	79f8      	ldrb	r0, [r7, #7]
 80012ce:	f000 f89d 	bl	800140c <LCD5110_UpdateArea>
 80012d2:	e002      	b.n	80012da <LCD5110_DrawPixel+0xb2>
		return;
 80012d4:	bf00      	nop
 80012d6:	e000      	b.n	80012da <LCD5110_DrawPixel+0xb2>
		return;
 80012d8:	bf00      	nop
}
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20013554 	.word	0x20013554

080012e4 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 80012ea:	f000 f821 	bl	8001330 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	e007      	b.n	8001304 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <LCD5110_Clear+0x48>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3301      	adds	r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800130a:	d3f3      	bcc.n	80012f4 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 800130c:	2100      	movs	r1, #0
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f8b8 	bl	8001484 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 8001314:	232f      	movs	r3, #47	; 0x2f
 8001316:	2253      	movs	r2, #83	; 0x53
 8001318:	2100      	movs	r1, #0
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f876 	bl	800140c <LCD5110_UpdateArea>
	LCD5110_Refresh();
 8001320:	f000 f812 	bl	8001348 <LCD5110_Refresh>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20013554 	.word	0x20013554

08001330 <LCD5110_Home>:

void LCD5110_Home(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff ff56 	bl	80011e8 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 800133c:	2140      	movs	r1, #64	; 0x40
 800133e:	2000      	movs	r0, #0
 8001340:	f7ff ff52 	bl	80011e8 <LCD5110_Write>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 800134e:	2300      	movs	r3, #0
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	e03b      	b.n	80013cc <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <LCD5110_Refresh+0xb0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	3301      	adds	r3, #1
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	429a      	cmp	r2, r3
 8001362:	dc2f      	bgt.n	80013c4 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4a24      	ldr	r2, [pc, #144]	; (80013fc <LCD5110_Refresh+0xb4>)
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	4293      	cmp	r3, r2
 800136e:	dc31      	bgt.n	80013d4 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ff34 	bl	80011e8 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <LCD5110_Refresh+0xb8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4619      	mov	r1, r3
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff ff2b 	bl	80011e8 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <LCD5110_Refresh+0xb8>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	71bb      	strb	r3, [r7, #6]
 8001398:	e00e      	b.n	80013b8 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2254      	movs	r2, #84	; 0x54
 800139e:	fb02 f203 	mul.w	r2, r2, r3
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <LCD5110_Refresh+0xbc>)
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
 80013aa:	4619      	mov	r1, r3
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff ff1b 	bl	80011e8 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	3301      	adds	r3, #1
 80013b6:	71bb      	strb	r3, [r7, #6]
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <LCD5110_Refresh+0xc0>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	79ba      	ldrb	r2, [r7, #6]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d9eb      	bls.n	800139a <LCD5110_Refresh+0x52>
 80013c2:	e000      	b.n	80013c6 <LCD5110_Refresh+0x7e>
			continue;
 80013c4:	bf00      	nop
	for (i = 0; i < 6; i++) {
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	3301      	adds	r3, #1
 80013ca:	71fb      	strb	r3, [r7, #7]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d9c0      	bls.n	8001354 <LCD5110_Refresh+0xc>
 80013d2:	e000      	b.n	80013d6 <LCD5110_Refresh+0x8e>
			break;
 80013d4:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <LCD5110_Refresh+0xb8>)
 80013d8:	2253      	movs	r2, #83	; 0x53
 80013da:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <LCD5110_Refresh+0xc0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <LCD5110_Refresh+0xb0>)
 80013e4:	222f      	movs	r2, #47	; 0x2f
 80013e6:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <LCD5110_Refresh+0xb4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001fa 	.word	0x200001fa
 80013fc:	200001fb 	.word	0x200001fb
 8001400:	200001f8 	.word	0x200001f8
 8001404:	20013554 	.word	0x20013554
 8001408:	200001f9 	.word	0x200001f9

0800140c <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 800140c:	b490      	push	{r4, r7}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4604      	mov	r4, r0
 8001414:	4608      	mov	r0, r1
 8001416:	4611      	mov	r1, r2
 8001418:	461a      	mov	r2, r3
 800141a:	4623      	mov	r3, r4
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	4603      	mov	r3, r0
 8001420:	71bb      	strb	r3, [r7, #6]
 8001422:	460b      	mov	r3, r1
 8001424:	717b      	strb	r3, [r7, #5]
 8001426:	4613      	mov	r3, r2
 8001428:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <LCD5110_UpdateArea+0x68>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	429a      	cmp	r2, r3
 8001432:	d202      	bcs.n	800143a <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <LCD5110_UpdateArea+0x68>)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <LCD5110_UpdateArea+0x6c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	797a      	ldrb	r2, [r7, #5]
 8001440:	429a      	cmp	r2, r3
 8001442:	d902      	bls.n	800144a <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <LCD5110_UpdateArea+0x6c>)
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <LCD5110_UpdateArea+0x70>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	79ba      	ldrb	r2, [r7, #6]
 8001450:	429a      	cmp	r2, r3
 8001452:	d202      	bcs.n	800145a <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8001454:	4a09      	ldr	r2, [pc, #36]	; (800147c <LCD5110_UpdateArea+0x70>)
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <LCD5110_UpdateArea+0x74>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	793a      	ldrb	r2, [r7, #4]
 8001460:	429a      	cmp	r2, r3
 8001462:	d902      	bls.n	800146a <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <LCD5110_UpdateArea+0x74>)
 8001466:	793b      	ldrb	r3, [r7, #4]
 8001468:	7013      	strb	r3, [r2, #0]
	}
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bc90      	pop	{r4, r7}
 8001472:	4770      	bx	lr
 8001474:	200001f8 	.word	0x200001f8
 8001478:	200001f9 	.word	0x200001f9
 800147c:	200001fa 	.word	0x200001fa
 8001480:	200001fb 	.word	0x200001fb

08001484 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	460a      	mov	r2, r1
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	4613      	mov	r3, r2
 8001492:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8001494:	4a05      	ldr	r2, [pc, #20]	; (80014ac <LCD5110_GotoXY+0x28>)
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <LCD5110_GotoXY+0x2c>)
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	7013      	strb	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	20013550 	.word	0x20013550
 80014b0:	20013551 	.word	0x20013551

080014b4 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
 80014be:	460b      	mov	r3, r1
 80014c0:	71bb      	strb	r3, [r7, #6]
 80014c2:	4613      	mov	r3, r2
 80014c4:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 80014c6:	797b      	ldrb	r3, [r7, #5]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d104      	bne.n	80014d6 <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 80014cc:	2304      	movs	r3, #4
 80014ce:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 80014d0:	2306      	movs	r3, #6
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e003      	b.n	80014de <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 80014d6:	2306      	movs	r3, #6
 80014d8:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 80014da:	2308      	movs	r3, #8
 80014dc:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 80014de:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <LCD5110_Putc+0x144>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	4413      	add	r3, r2
 80014e8:	2b54      	cmp	r3, #84	; 0x54
 80014ea:	dd09      	ble.n	8001500 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 80014ec:	4b43      	ldr	r3, [pc, #268]	; (80015fc <LCD5110_Putc+0x148>)
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	4413      	add	r3, r2
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b41      	ldr	r3, [pc, #260]	; (80015fc <LCD5110_Putc+0x148>)
 80014f8:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <LCD5110_Putc+0x144>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8001500:	2300      	movs	r3, #0
 8001502:	737b      	strb	r3, [r7, #13]
 8001504:	e068      	b.n	80015d8 <LCD5110_Putc+0x124>
		if (c < 32) {
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b1f      	cmp	r3, #31
 800150a:	d91c      	bls.n	8001546 <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 800150c:	797b      	ldrb	r3, [r7, #5]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10c      	bne.n	800152c <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f1a3 0220 	sub.w	r2, r3, #32
 8001518:	7b79      	ldrb	r1, [r7, #13]
 800151a:	4839      	ldr	r0, [pc, #228]	; (8001600 <LCD5110_Putc+0x14c>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	4403      	add	r3, r0
 8001524:	440b      	add	r3, r1
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	733b      	strb	r3, [r7, #12]
 800152a:	e00c      	b.n	8001546 <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f1a3 0220 	sub.w	r2, r3, #32
 8001532:	7b79      	ldrb	r1, [r7, #13]
 8001534:	4833      	ldr	r0, [pc, #204]	; (8001604 <LCD5110_Putc+0x150>)
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4403      	add	r3, r0
 8001540:	440b      	add	r3, r1
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8001546:	7b3b      	ldrb	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <LCD5110_Putc+0xa4>
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <LCD5110_Putc+0xa4>
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b20      	cmp	r3, #32
 8001556:	d13b      	bne.n	80015d0 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8001558:	2300      	movs	r3, #0
 800155a:	72fb      	strb	r3, [r7, #11]
 800155c:	e02d      	b.n	80015ba <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d112      	bne.n	800158a <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <LCD5110_Putc+0x144>)
 8001566:	7818      	ldrb	r0, [r3, #0]
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <LCD5110_Putc+0x148>)
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	7afb      	ldrb	r3, [r7, #11]
 800156e:	4413      	add	r3, r2
 8001570:	b2d9      	uxtb	r1, r3
 8001572:	7b3a      	ldrb	r2, [r7, #12]
 8001574:	7afb      	ldrb	r3, [r7, #11]
 8001576:	fa42 f303 	asr.w	r3, r2, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	f7ff fe50 	bl	8001228 <LCD5110_DrawPixel>
 8001588:	e014      	b.n	80015b4 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <LCD5110_Putc+0x144>)
 800158c:	7818      	ldrb	r0, [r3, #0]
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <LCD5110_Putc+0x148>)
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	7afb      	ldrb	r3, [r7, #11]
 8001594:	4413      	add	r3, r2
 8001596:	b2d9      	uxtb	r1, r3
 8001598:	7b3a      	ldrb	r2, [r7, #12]
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	fa42 f303 	asr.w	r3, r2, r3
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	f7ff fe3a 	bl	8001228 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	3301      	adds	r3, #1
 80015b8:	72fb      	strb	r3, [r7, #11]
 80015ba:	7afa      	ldrb	r2, [r7, #11]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3cd      	bcc.n	800155e <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <LCD5110_Putc+0x144>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <LCD5110_Putc+0x144>)
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	e000      	b.n	80015d2 <LCD5110_Putc+0x11e>
			continue;
 80015d0:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 80015d2:	7b7b      	ldrb	r3, [r7, #13]
 80015d4:	3301      	adds	r3, #1
 80015d6:	737b      	strb	r3, [r7, #13]
 80015d8:	7b7a      	ldrb	r2, [r7, #13]
 80015da:	7bbb      	ldrb	r3, [r7, #14]
 80015dc:	3b01      	subs	r3, #1
 80015de:	429a      	cmp	r2, r3
 80015e0:	db91      	blt.n	8001506 <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <LCD5110_Putc+0x144>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <LCD5110_Putc+0x144>)
 80015ec:	701a      	strb	r2, [r3, #0]
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20013550 	.word	0x20013550
 80015fc:	20013551 	.word	0x20013551
 8001600:	08009574 	.word	0x08009574
 8001604:	0800932c 	.word	0x0800932c

08001608 <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
 8001614:	4613      	mov	r3, r2
 8001616:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8001618:	e008      	b.n	800162c <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	78ba      	ldrb	r2, [r7, #2]
 8001624:	78f9      	ldrb	r1, [r7, #3]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff44 	bl	80014b4 <LCD5110_Putc>
	while (*c) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f2      	bne.n	800161a <LCD5110_Puts+0x12>
	}
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f103 0208 	add.w	r2, r3, #8
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001656:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f103 0208 	add.w	r2, r3, #8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f103 0208 	add.w	r2, r3, #8
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016f6:	d103      	bne.n	8001700 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	e00c      	b.n	800171a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3308      	adds	r3, #8
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	e002      	b.n	800170e <vListInsert+0x2e>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	429a      	cmp	r2, r3
 8001718:	d2f6      	bcs.n	8001708 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	601a      	str	r2, [r3, #0]
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6892      	ldr	r2, [r2, #8]
 8001768:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6852      	ldr	r2, [r2, #4]
 8001772:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d103      	bne.n	8001786 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	1e5a      	subs	r2, r3, #1
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10a      	bne.n	80017d0 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80017ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017be:	f383 8811 	msr	BASEPRI, r3
 80017c2:	f3bf 8f6f 	isb	sy
 80017c6:	f3bf 8f4f 	dsb	sy
 80017ca:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80017cc:	bf00      	nop
 80017ce:	e7fe      	b.n	80017ce <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80017d0:	f002 f802 	bl	80037d8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	441a      	add	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	3b01      	subs	r3, #1
 8001802:	68f9      	ldr	r1, [r7, #12]
 8001804:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	441a      	add	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	22ff      	movs	r2, #255	; 0xff
 8001814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	22ff      	movs	r2, #255	; 0xff
 800181c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00f      	beq.n	800184e <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3310      	adds	r3, #16
 8001832:	4618      	mov	r0, r3
 8001834:	f001 f8e0 	bl	80029f8 <xTaskRemoveFromEventList>
 8001838:	e009      	b.n	800184e <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3310      	adds	r3, #16
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fefd 	bl	800163e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3324      	adds	r3, #36	; 0x24
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fef8 	bl	800163e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800184e:	f001 fff3 	bl	8003838 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	4613      	mov	r3, r2
 8001868:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10a      	bne.n	8001886 <xQueueGenericCreate+0x2a>
        __asm volatile
 8001870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001874:	f383 8811 	msr	BASEPRI, r3
 8001878:	f3bf 8f6f 	isb	sy
 800187c:	f3bf 8f4f 	dsb	sy
 8001880:	61bb      	str	r3, [r7, #24]
    }
 8001882:	bf00      	nop
 8001884:	e7fe      	b.n	8001884 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <xQueueGenericCreate+0x48>
 8001896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d101      	bne.n	80018a8 <xQueueGenericCreate+0x4c>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <xQueueGenericCreate+0x4e>
 80018a8:	2300      	movs	r3, #0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10a      	bne.n	80018c4 <xQueueGenericCreate+0x68>
        __asm volatile
 80018ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b2:	f383 8811 	msr	BASEPRI, r3
 80018b6:	f3bf 8f6f 	isb	sy
 80018ba:	f3bf 8f4f 	dsb	sy
 80018be:	617b      	str	r3, [r7, #20]
    }
 80018c0:	bf00      	nop
 80018c2:	e7fe      	b.n	80018c2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80018ca:	d90a      	bls.n	80018e2 <xQueueGenericCreate+0x86>
        __asm volatile
 80018cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d0:	f383 8811 	msr	BASEPRI, r3
 80018d4:	f3bf 8f6f 	isb	sy
 80018d8:	f3bf 8f4f 	dsb	sy
 80018dc:	613b      	str	r3, [r7, #16]
    }
 80018de:	bf00      	nop
 80018e0:	e7fe      	b.n	80018e0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	3350      	adds	r3, #80	; 0x50
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 f8a0 	bl	8003a2c <pvPortMalloc>
 80018ec:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00d      	beq.n	8001910 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3350      	adds	r3, #80	; 0x50
 80018fc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80018fe:	79fa      	ldrb	r2, [r7, #7]
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f805 	bl	800191a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001910:	6a3b      	ldr	r3, [r7, #32]
    }
 8001912:	4618      	mov	r0, r3
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e002      	b.n	800193c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001948:	2101      	movs	r1, #1
 800194a:	69b8      	ldr	r0, [r7, #24]
 800194c:	f7ff ff2b 	bl	80017a6 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	2073      	movs	r0, #115	; 0x73
 8001960:	f003 fbd4 	bl	800510c <SEGGER_SYSVIEW_RecordU32x3>
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b090      	sub	sp, #64	; 0x40
 8001970:	af02      	add	r7, sp, #8
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10a      	bne.n	800199e <xQueueGenericSend+0x32>
        __asm volatile
 8001988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198c:	f383 8811 	msr	BASEPRI, r3
 8001990:	f3bf 8f6f 	isb	sy
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800199a:	bf00      	nop
 800199c:	e7fe      	b.n	800199c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d103      	bne.n	80019ac <xQueueGenericSend+0x40>
 80019a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <xQueueGenericSend+0x44>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <xQueueGenericSend+0x46>
 80019b0:	2300      	movs	r3, #0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10a      	bne.n	80019cc <xQueueGenericSend+0x60>
        __asm volatile
 80019b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ba:	f383 8811 	msr	BASEPRI, r3
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f3bf 8f4f 	dsb	sy
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80019c8:	bf00      	nop
 80019ca:	e7fe      	b.n	80019ca <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d103      	bne.n	80019da <xQueueGenericSend+0x6e>
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <xQueueGenericSend+0x72>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <xQueueGenericSend+0x74>
 80019de:	2300      	movs	r3, #0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10a      	bne.n	80019fa <xQueueGenericSend+0x8e>
        __asm volatile
 80019e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e8:	f383 8811 	msr	BASEPRI, r3
 80019ec:	f3bf 8f6f 	isb	sy
 80019f0:	f3bf 8f4f 	dsb	sy
 80019f4:	623b      	str	r3, [r7, #32]
    }
 80019f6:	bf00      	nop
 80019f8:	e7fe      	b.n	80019f8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80019fa:	f001 f997 	bl	8002d2c <xTaskGetSchedulerState>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <xQueueGenericSend+0x9e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <xQueueGenericSend+0xa2>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <xQueueGenericSend+0xa4>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <xQueueGenericSend+0xbe>
        __asm volatile
 8001a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a18:	f383 8811 	msr	BASEPRI, r3
 8001a1c:	f3bf 8f6f 	isb	sy
 8001a20:	f3bf 8f4f 	dsb	sy
 8001a24:	61fb      	str	r3, [r7, #28]
    }
 8001a26:	bf00      	nop
 8001a28:	e7fe      	b.n	8001a28 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001a2a:	f001 fed5 	bl	80037d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d302      	bcc.n	8001a40 <xQueueGenericSend+0xd4>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d11f      	bne.n	8001a80 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 f8cc 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	460b      	mov	r3, r1
 8001a52:	4601      	mov	r1, r0
 8001a54:	205a      	movs	r0, #90	; 0x5a
 8001a56:	f003 fbcf 	bl	80051f8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a60:	f000 fa56 	bl	8001f10 <prvCopyDataToQueue>
 8001a64:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a70:	3324      	adds	r3, #36	; 0x24
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 ffc0 	bl	80029f8 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001a78:	f001 fede 	bl	8003838 <vPortExitCritical>
                return pdPASS;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e07d      	b.n	8001b7c <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d110      	bne.n	8001aa8 <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001a86:	f001 fed7 	bl	8003838 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 f8a7 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	205a      	movs	r0, #90	; 0x5a
 8001aa0:	f003 fbaa 	bl	80051f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e069      	b.n	8001b7c <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 f806 	bl	8002ac4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001abc:	f001 febc 	bl	8003838 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001ac0:	f000 fd90 	bl	80025e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001ac4:	f001 fe88 	bl	80037d8 <vPortEnterCritical>
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ad4:	d103      	bne.n	8001ade <xQueueGenericSend+0x172>
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aea:	d103      	bne.n	8001af4 <xQueueGenericSend+0x188>
 8001aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001af4:	f001 fea0 	bl	8003838 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001af8:	1d3a      	adds	r2, r7, #4
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fff5 	bl	8002af0 <xTaskCheckForTimeOut>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d124      	bne.n	8001b56 <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b0e:	f000 faf7 	bl	8002100 <prvIsQueueFull>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d018      	beq.n	8001b4a <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1a:	3310      	adds	r3, #16
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 ff17 	bl	8002954 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001b26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b28:	f000 fa82 	bl	8002030 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001b2c:	f000 fd68 	bl	8002600 <xTaskResumeAll>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f47f af79 	bne.w	8001a2a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <xQueueGenericSend+0x218>)
 8001b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	f3bf 8f4f 	dsb	sy
 8001b44:	f3bf 8f6f 	isb	sy
 8001b48:	e76f      	b.n	8001a2a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b4c:	f000 fa70 	bl	8002030 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001b50:	f000 fd56 	bl	8002600 <xTaskResumeAll>
 8001b54:	e769      	b.n	8001a2a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b58:	f000 fa6a 	bl	8002030 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001b5c:	f000 fd50 	bl	8002600 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8001b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 f83c 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	460b      	mov	r3, r1
 8001b72:	4601      	mov	r1, r0
 8001b74:	205a      	movs	r0, #90	; 0x5a
 8001b76:	f003 fb3f 	bl	80051f8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8001b7a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3738      	adds	r7, #56	; 0x38
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	e000ed04 	.word	0xe000ed04

08001b88 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b090      	sub	sp, #64	; 0x40
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10a      	bne.n	8001bb6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba4:	f383 8811 	msr	BASEPRI, r3
 8001ba8:	f3bf 8f6f 	isb	sy
 8001bac:	f3bf 8f4f 	dsb	sy
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001bb2:	bf00      	nop
 8001bb4:	e7fe      	b.n	8001bb4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <xQueueGenericSendFromISR+0x3c>
 8001bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <xQueueGenericSendFromISR+0x40>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <xQueueGenericSendFromISR+0x42>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10a      	bne.n	8001be4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8001bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd2:	f383 8811 	msr	BASEPRI, r3
 8001bd6:	f3bf 8f6f 	isb	sy
 8001bda:	f3bf 8f4f 	dsb	sy
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001be0:	bf00      	nop
 8001be2:	e7fe      	b.n	8001be2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d103      	bne.n	8001bf2 <xQueueGenericSendFromISR+0x6a>
 8001bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <xQueueGenericSendFromISR+0x6e>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <xQueueGenericSendFromISR+0x70>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10a      	bne.n	8001c12 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8001bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c00:	f383 8811 	msr	BASEPRI, r3
 8001c04:	f3bf 8f6f 	isb	sy
 8001c08:	f3bf 8f4f 	dsb	sy
 8001c0c:	623b      	str	r3, [r7, #32]
    }
 8001c0e:	bf00      	nop
 8001c10:	e7fe      	b.n	8001c10 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c12:	f001 fecb 	bl	80039ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001c16:	f3ef 8211 	mrs	r2, BASEPRI
 8001c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1e:	f383 8811 	msr	BASEPRI, r3
 8001c22:	f3bf 8f6f 	isb	sy
 8001c26:	f3bf 8f4f 	dsb	sy
 8001c2a:	61fa      	str	r2, [r7, #28]
 8001c2c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d302      	bcc.n	8001c44 <xQueueGenericSendFromISR+0xbc>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d148      	bne.n	8001cd6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 ffc2 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001c5c:	4601      	mov	r1, r0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	461a      	mov	r2, r3
 8001c62:	2060      	movs	r0, #96	; 0x60
 8001c64:	f003 f9f8 	bl	8005058 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001c6e:	f000 f94f 	bl	8001f10 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001c72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c7a:	d112      	bne.n	8001ca2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d025      	beq.n	8001cd0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c86:	3324      	adds	r3, #36	; 0x24
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 feb5 	bl	80029f8 <xTaskRemoveFromEventList>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01d      	beq.n	8001cd0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01a      	beq.n	8001cd0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e016      	b.n	8001cd0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001ca2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca8:	d10a      	bne.n	8001cc0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8001caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cae:	f383 8811 	msr	BASEPRI, r3
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	f3bf 8f4f 	dsb	sy
 8001cba:	617b      	str	r3, [r7, #20]
    }
 8001cbc:	bf00      	nop
 8001cbe:	e7fe      	b.n	8001cbe <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	b25a      	sxtb	r2, r3
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001cd4:	e00b      	b.n	8001cee <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 ff81 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001cde:	4601      	mov	r1, r0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2060      	movs	r0, #96	; 0x60
 8001ce6:	f003 f9b7 	bl	8005058 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001cf8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3740      	adds	r7, #64	; 0x40
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b08f      	sub	sp, #60	; 0x3c
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10a      	bne.n	8001d34 <xQueueReceive+0x30>
        __asm volatile
 8001d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d22:	f383 8811 	msr	BASEPRI, r3
 8001d26:	f3bf 8f6f 	isb	sy
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	623b      	str	r3, [r7, #32]
    }
 8001d30:	bf00      	nop
 8001d32:	e7fe      	b.n	8001d32 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d103      	bne.n	8001d42 <xQueueReceive+0x3e>
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <xQueueReceive+0x42>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <xQueueReceive+0x44>
 8001d46:	2300      	movs	r3, #0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10a      	bne.n	8001d62 <xQueueReceive+0x5e>
        __asm volatile
 8001d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d50:	f383 8811 	msr	BASEPRI, r3
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	61fb      	str	r3, [r7, #28]
    }
 8001d5e:	bf00      	nop
 8001d60:	e7fe      	b.n	8001d60 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d62:	f000 ffe3 	bl	8002d2c <xTaskGetSchedulerState>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <xQueueReceive+0x6e>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <xQueueReceive+0x72>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <xQueueReceive+0x74>
 8001d76:	2300      	movs	r3, #0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10a      	bne.n	8001d92 <xQueueReceive+0x8e>
        __asm volatile
 8001d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d80:	f383 8811 	msr	BASEPRI, r3
 8001d84:	f3bf 8f6f 	isb	sy
 8001d88:	f3bf 8f4f 	dsb	sy
 8001d8c:	61bb      	str	r3, [r7, #24]
    }
 8001d8e:	bf00      	nop
 8001d90:	e7fe      	b.n	8001d90 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001d92:	f001 fd21 	bl	80037d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d024      	beq.n	8001dec <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001da6:	f000 f91d 	bl	8001fe4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 ff17 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001db2:	4604      	mov	r4, r0
 8001db4:	2000      	movs	r0, #0
 8001db6:	f003 ff13 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	9100      	str	r1, [sp, #0]
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	205c      	movs	r0, #92	; 0x5c
 8001dc6:	f003 fa17 	bl	80051f8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	3310      	adds	r3, #16
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fe0a 	bl	80029f8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001de4:	f001 fd28 	bl	8003838 <vPortExitCritical>
                return pdPASS;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e08a      	b.n	8001f02 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d113      	bne.n	8001e1a <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001df2:	f001 fd21 	bl	8003838 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fef1 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001dfe:	4604      	mov	r4, r0
 8001e00:	2000      	movs	r0, #0
 8001e02:	f003 feed 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001e06:	4602      	mov	r2, r0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	9100      	str	r1, [sp, #0]
 8001e0e:	4621      	mov	r1, r4
 8001e10:	205c      	movs	r0, #92	; 0x5c
 8001e12:	f003 f9f1 	bl	80051f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e073      	b.n	8001f02 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d106      	bne.n	8001e2e <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fe4d 	bl	8002ac4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e2e:	f001 fd03 	bl	8003838 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001e32:	f000 fbd7 	bl	80025e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e36:	f001 fccf 	bl	80037d8 <vPortEnterCritical>
 8001e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e46:	d103      	bne.n	8001e50 <xQueueReceive+0x14c>
 8001e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e5c:	d103      	bne.n	8001e66 <xQueueReceive+0x162>
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e66:	f001 fce7 	bl	8003838 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e6a:	1d3a      	adds	r2, r7, #4
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fe3c 	bl	8002af0 <xTaskCheckForTimeOut>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d124      	bne.n	8001ec8 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e80:	f000 f928 	bl	80020d4 <prvIsQueueEmpty>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d018      	beq.n	8001ebc <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8c:	3324      	adds	r3, #36	; 0x24
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fd5e 	bl	8002954 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e9a:	f000 f8c9 	bl	8002030 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001e9e:	f000 fbaf 	bl	8002600 <xTaskResumeAll>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f47f af74 	bne.w	8001d92 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <xQueueReceive+0x208>)
 8001eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	f3bf 8f4f 	dsb	sy
 8001eb6:	f3bf 8f6f 	isb	sy
 8001eba:	e76a      	b.n	8001d92 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ebe:	f000 f8b7 	bl	8002030 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001ec2:	f000 fb9d 	bl	8002600 <xTaskResumeAll>
 8001ec6:	e764      	b.n	8001d92 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eca:	f000 f8b1 	bl	8002030 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001ece:	f000 fb97 	bl	8002600 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ed4:	f000 f8fe 	bl	80020d4 <prvIsQueueEmpty>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f43f af59 	beq.w	8001d92 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 fe7c 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001ee8:	4604      	mov	r4, r0
 8001eea:	2000      	movs	r0, #0
 8001eec:	f003 fe78 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	9100      	str	r1, [sp, #0]
 8001ef8:	4621      	mov	r1, r4
 8001efa:	205c      	movs	r0, #92	; 0x5c
 8001efc:	f003 f97c 	bl	80051f8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001f00:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3734      	adds	r7, #52	; 0x34
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000ed04 	.word	0xe000ed04

08001f10 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f24:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10d      	bne.n	8001f4a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d14d      	bne.n	8001fd2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 ff14 	bl	8002d68 <xTaskPriorityDisinherit>
 8001f40:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e043      	b.n	8001fd2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d119      	bne.n	8001f84 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6858      	ldr	r0, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	f004 faf0 	bl	8006540 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	441a      	add	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d32b      	bcc.n	8001fd2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	e026      	b.n	8001fd2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68d8      	ldr	r0, [r3, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	f004 fad6 	bl	8006540 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	441a      	add	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	425b      	negs	r3, r3
 8001fba:	441a      	add	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d105      	bne.n	8001fd2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001fda:	697b      	ldr	r3, [r7, #20]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d018      	beq.n	8002028 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	441a      	add	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	429a      	cmp	r2, r3
 800200e:	d303      	bcc.n	8002018 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68d9      	ldr	r1, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	461a      	mov	r2, r3
 8002022:	6838      	ldr	r0, [r7, #0]
 8002024:	f004 fa8c 	bl	8006540 <memcpy>
    }
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002038:	f001 fbce 	bl	80037d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002042:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002044:	e011      	b.n	800206a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3324      	adds	r3, #36	; 0x24
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fcd0 	bl	80029f8 <xTaskRemoveFromEventList>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800205e:	f000 fdad 	bl	8002bbc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3b01      	subs	r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	2b00      	cmp	r3, #0
 8002070:	dce9      	bgt.n	8002046 <prvUnlockQueue+0x16>
 8002072:	e000      	b.n	8002076 <prvUnlockQueue+0x46>
                        break;
 8002074:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	22ff      	movs	r2, #255	; 0xff
 800207a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800207e:	f001 fbdb 	bl	8003838 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002082:	f001 fba9 	bl	80037d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800208c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800208e:	e011      	b.n	80020b4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d012      	beq.n	80020be <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3310      	adds	r3, #16
 800209c:	4618      	mov	r0, r3
 800209e:	f000 fcab 	bl	80029f8 <xTaskRemoveFromEventList>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80020a8:	f000 fd88 	bl	8002bbc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80020ac:	7bbb      	ldrb	r3, [r7, #14]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80020b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	dce9      	bgt.n	8002090 <prvUnlockQueue+0x60>
 80020bc:	e000      	b.n	80020c0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80020be:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	22ff      	movs	r2, #255	; 0xff
 80020c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80020c8:	f001 fbb6 	bl	8003838 <vPortExitCritical>
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80020dc:	f001 fb7c 	bl	80037d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e001      	b.n	80020f2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80020f2:	f001 fba1 	bl	8003838 <vPortExitCritical>

    return xReturn;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002108:	f001 fb66 	bl	80037d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	429a      	cmp	r2, r3
 8002116:	d102      	bne.n	800211e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002118:	2301      	movs	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e001      	b.n	8002122 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002122:	f001 fb89 	bl	8003838 <vPortExitCritical>

    return xReturn;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	e01e      	b.n	800217e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002140:	4a13      	ldr	r2, [pc, #76]	; (8002190 <vQueueAddToRegistry+0x60>)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d115      	bne.n	8002178 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800214c:	4910      	ldr	r1, [pc, #64]	; (8002190 <vQueueAddToRegistry+0x60>)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <vQueueAddToRegistry+0x60>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4618      	mov	r0, r3
 8002166:	f003 fd3b 	bl	8005be0 <SEGGER_SYSVIEW_ShrinkId>
 800216a:	4601      	mov	r1, r0
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	2071      	movs	r0, #113	; 0x71
 8002172:	f002 ff71 	bl	8005058 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002176:	e006      	b.n	8002186 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3301      	adds	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b07      	cmp	r3, #7
 8002182:	d9dd      	bls.n	8002140 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2001374c 	.word	0x2001374c

08002194 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80021a4:	f001 fb18 	bl	80037d8 <vPortEnterCritical>
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b4:	d103      	bne.n	80021be <vQueueWaitForMessageRestricted+0x2a>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ca:	d103      	bne.n	80021d4 <vQueueWaitForMessageRestricted+0x40>
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021d4:	f001 fb30 	bl	8003838 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3324      	adds	r3, #36	; 0x24
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fbd7 	bl	800299c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f7ff ff1e 	bl	8002030 <prvUnlockQueue>
    }
 80021f4:	bf00      	nop
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af04      	add	r7, sp, #16
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4618      	mov	r0, r3
 8002212:	f001 fc0b 	bl	8003a2c <pvPortMalloc>
 8002216:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00e      	beq.n	800223c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800221e:	2058      	movs	r0, #88	; 0x58
 8002220:	f001 fc04 	bl	8003a2c <pvPortMalloc>
 8002224:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
 8002232:	e005      	b.n	8002240 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002234:	6978      	ldr	r0, [r7, #20]
 8002236:	f001 fcd9 	bl	8003bec <vPortFree>
 800223a:	e001      	b.n	8002240 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d013      	beq.n	800226e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	2300      	movs	r3, #0
 800224a:	9303      	str	r3, [sp, #12]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f80e 	bl	800227e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002262:	69f8      	ldr	r0, [r7, #28]
 8002264:	f000 f8a2 	bl	80023ac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002268:	2301      	movs	r3, #1
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	e002      	b.n	8002274 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002272:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002274:	69bb      	ldr	r3, [r7, #24]
    }
 8002276:	4618      	mov	r0, r3
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b088      	sub	sp, #32
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	461a      	mov	r2, r3
 8002296:	21a5      	movs	r1, #165	; 0xa5
 8002298:	f004 f960 	bl	800655c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022a6:	3b01      	subs	r3, #1
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f023 0307 	bic.w	r3, r3, #7
 80022b4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	617b      	str	r3, [r7, #20]
    }
 80022d2:	bf00      	nop
 80022d4:	e7fe      	b.n	80022d4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01f      	beq.n	800231c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	e012      	b.n	8002308 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	4413      	add	r3, r2
 80022e8:	7819      	ldrb	r1, [r3, #0]
 80022ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	4413      	add	r3, r2
 80022f0:	3334      	adds	r3, #52	; 0x34
 80022f2:	460a      	mov	r2, r1
 80022f4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3301      	adds	r3, #1
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b09      	cmp	r3, #9
 800230c:	d9e9      	bls.n	80022e2 <prvInitialiseNewTask+0x64>
 800230e:	e000      	b.n	8002312 <prvInitialiseNewTask+0x94>
            {
                break;
 8002310:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800231a:	e003      	b.n	8002324 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	2b04      	cmp	r3, #4
 8002328:	d901      	bls.n	800232e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800232a:	2304      	movs	r3, #4
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002338:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	2200      	movs	r2, #0
 800233e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	3304      	adds	r3, #4
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f99a 	bl	800167e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	3318      	adds	r3, #24
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f995 	bl	800167e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002358:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	f1c3 0205 	rsb	r2, r3, #5
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002368:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	3350      	adds	r3, #80	; 0x50
 800236e:	2204      	movs	r2, #4
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f004 f8f2 	bl	800655c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	3354      	adds	r3, #84	; 0x54
 800237c:	2201      	movs	r2, #1
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f004 f8eb 	bl	800655c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	68f9      	ldr	r1, [r7, #12]
 800238a:	69b8      	ldr	r0, [r7, #24]
 800238c:	f001 f8f6 	bl	800357c <pxPortInitialiseStack>
 8002390:	4602      	mov	r2, r0
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023a2:	bf00      	nop
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023b4:	f001 fa10 	bl	80037d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023b8:	4b35      	ldr	r3, [pc, #212]	; (8002490 <prvAddNewTaskToReadyList+0xe4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	4a34      	ldr	r2, [pc, #208]	; (8002490 <prvAddNewTaskToReadyList+0xe4>)
 80023c0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023c2:	4b34      	ldr	r3, [pc, #208]	; (8002494 <prvAddNewTaskToReadyList+0xe8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023ca:	4a32      	ldr	r2, [pc, #200]	; (8002494 <prvAddNewTaskToReadyList+0xe8>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023d0:	4b2f      	ldr	r3, [pc, #188]	; (8002490 <prvAddNewTaskToReadyList+0xe4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d110      	bne.n	80023fa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023d8:	f000 fc0e 	bl	8002bf8 <prvInitialiseTaskLists>
 80023dc:	e00d      	b.n	80023fa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023de:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <prvAddNewTaskToReadyList+0xec>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <prvAddNewTaskToReadyList+0xe8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d802      	bhi.n	80023fa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023f4:	4a27      	ldr	r2, [pc, #156]	; (8002494 <prvAddNewTaskToReadyList+0xe8>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023fa:	4b28      	ldr	r3, [pc, #160]	; (800249c <prvAddNewTaskToReadyList+0xf0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3301      	adds	r3, #1
 8002400:	4a26      	ldr	r2, [pc, #152]	; (800249c <prvAddNewTaskToReadyList+0xf0>)
 8002402:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <prvAddNewTaskToReadyList+0xf0>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <prvAddNewTaskToReadyList+0x94>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f003 fabd 	bl	8005994 <SEGGER_SYSVIEW_OnTaskCreate>
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	461d      	mov	r5, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	461c      	mov	r4, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	1ae3      	subs	r3, r4, r3
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	462b      	mov	r3, r5
 800243c:	f002 f8e2 	bl	8004604 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fb2a 	bl	8005a9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	2201      	movs	r2, #1
 800244e:	409a      	lsls	r2, r3
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <prvAddNewTaskToReadyList+0xf4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4313      	orrs	r3, r2
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <prvAddNewTaskToReadyList+0xf4>)
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <prvAddNewTaskToReadyList+0xf8>)
 8002468:	441a      	add	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3304      	adds	r3, #4
 800246e:	4619      	mov	r1, r3
 8002470:	4610      	mov	r0, r2
 8002472:	f7ff f911 	bl	8001698 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002476:	f001 f9df 	bl	8003838 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <prvAddNewTaskToReadyList+0xec>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <prvAddNewTaskToReadyList+0xe8>)
 8002484:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bdb0      	pop	{r4, r5, r7, pc}
 800248e:	bf00      	nop
 8002490:	200002d4 	.word	0x200002d4
 8002494:	200001fc 	.word	0x200001fc
 8002498:	200002e0 	.word	0x200002e0
 800249c:	200002f0 	.word	0x200002f0
 80024a0:	200002dc 	.word	0x200002dc
 80024a4:	20000200 	.word	0x20000200

080024a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01b      	beq.n	80024f2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <vTaskDelay+0x68>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <vTaskDelay+0x30>
        __asm volatile
 80024c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c6:	f383 8811 	msr	BASEPRI, r3
 80024ca:	f3bf 8f6f 	isb	sy
 80024ce:	f3bf 8f4f 	dsb	sy
 80024d2:	60bb      	str	r3, [r7, #8]
    }
 80024d4:	bf00      	nop
 80024d6:	e7fe      	b.n	80024d6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80024d8:	f000 f884 	bl	80025e4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	2023      	movs	r0, #35	; 0x23
 80024e0:	f002 fd7e 	bl	8004fe0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80024e4:	2100      	movs	r1, #0
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fcbe 	bl	8002e68 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80024ec:	f000 f888 	bl	8002600 <xTaskResumeAll>
 80024f0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d107      	bne.n	8002508 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <vTaskDelay+0x6c>)
 80024fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200002fc 	.word	0x200002fc
 8002514:	e000ed04 	.word	0xe000ed04

08002518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <vTaskStartScheduler+0xac>)
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2300      	movs	r3, #0
 8002528:	2282      	movs	r2, #130	; 0x82
 800252a:	4927      	ldr	r1, [pc, #156]	; (80025c8 <vTaskStartScheduler+0xb0>)
 800252c:	4827      	ldr	r0, [pc, #156]	; (80025cc <vTaskStartScheduler+0xb4>)
 800252e:	f7ff fe65 	bl	80021fc <xTaskCreate>
 8002532:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d102      	bne.n	8002540 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800253a:	f000 fd0d 	bl	8002f58 <xTimerCreateTimerTask>
 800253e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d129      	bne.n	800259a <vTaskStartScheduler+0x82>
        __asm volatile
 8002546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	60bb      	str	r3, [r7, #8]
    }
 8002558:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <vTaskStartScheduler+0xb8>)
 800255c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002560:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <vTaskStartScheduler+0xbc>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <vTaskStartScheduler+0xc0>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800256e:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <vTaskStartScheduler+0xc4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3334      	adds	r3, #52	; 0x34
 8002574:	2205      	movs	r2, #5
 8002576:	4914      	ldr	r1, [pc, #80]	; (80025c8 <vTaskStartScheduler+0xb0>)
 8002578:	4618      	mov	r0, r3
 800257a:	f003 ffd3 	bl	8006524 <memcmp>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <vTaskStartScheduler+0x78>
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <vTaskStartScheduler+0xc4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f003 fa45 	bl	8005a18 <SEGGER_SYSVIEW_OnTaskStartExec>
 800258e:	e001      	b.n	8002594 <vTaskStartScheduler+0x7c>
 8002590:	f003 f9e4 	bl	800595c <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002594:	f001 f87e 	bl	8003694 <xPortStartScheduler>
 8002598:	e00e      	b.n	80025b8 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a0:	d10a      	bne.n	80025b8 <vTaskStartScheduler+0xa0>
        __asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	607b      	str	r3, [r7, #4]
    }
 80025b4:	bf00      	nop
 80025b6:	e7fe      	b.n	80025b6 <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <vTaskStartScheduler+0xc8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200002f8 	.word	0x200002f8
 80025c8:	08009270 	.word	0x08009270
 80025cc:	08002bd5 	.word	0x08002bd5
 80025d0:	200002f4 	.word	0x200002f4
 80025d4:	200002e0 	.word	0x200002e0
 80025d8:	200002d8 	.word	0x200002d8
 80025dc:	200001fc 	.word	0x200001fc
 80025e0:	20000000 	.word	0x20000000

080025e4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <vTaskSuspendAll+0x18>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	4a03      	ldr	r2, [pc, #12]	; (80025fc <vTaskSuspendAll+0x18>)
 80025f0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	200002fc 	.word	0x200002fc

08002600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <xTaskResumeAll+0x104>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10a      	bne.n	800262c <xTaskResumeAll+0x2c>
        __asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	603b      	str	r3, [r7, #0]
    }
 8002628:	bf00      	nop
 800262a:	e7fe      	b.n	800262a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800262c:	f001 f8d4 	bl	80037d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002630:	4b34      	ldr	r3, [pc, #208]	; (8002704 <xTaskResumeAll+0x104>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3b01      	subs	r3, #1
 8002636:	4a33      	ldr	r2, [pc, #204]	; (8002704 <xTaskResumeAll+0x104>)
 8002638:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800263a:	4b32      	ldr	r3, [pc, #200]	; (8002704 <xTaskResumeAll+0x104>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d159      	bne.n	80026f6 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002642:	4b31      	ldr	r3, [pc, #196]	; (8002708 <xTaskResumeAll+0x108>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d055      	beq.n	80026f6 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800264a:	e032      	b.n	80026b2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <xTaskResumeAll+0x10c>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3318      	adds	r3, #24
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff f87a 	bl	8001752 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3304      	adds	r3, #4
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f875 	bl	8001752 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4618      	mov	r0, r3
 800266c:	f003 fa16 	bl	8005a9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	2201      	movs	r2, #1
 8002676:	409a      	lsls	r2, r3
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <xTaskResumeAll+0x110>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4313      	orrs	r3, r2
 800267e:	4a24      	ldr	r2, [pc, #144]	; (8002710 <xTaskResumeAll+0x110>)
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4a21      	ldr	r2, [pc, #132]	; (8002714 <xTaskResumeAll+0x114>)
 8002690:	441a      	add	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3304      	adds	r3, #4
 8002696:	4619      	mov	r1, r3
 8002698:	4610      	mov	r0, r2
 800269a:	f7fe fffd 	bl	8001698 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <xTaskResumeAll+0x118>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d302      	bcc.n	80026b2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <xTaskResumeAll+0x11c>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <xTaskResumeAll+0x10c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1c8      	bne.n	800264c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026c0:	f000 fb18 	bl	8002cf4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026c4:	4b16      	ldr	r3, [pc, #88]	; (8002720 <xTaskResumeAll+0x120>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d010      	beq.n	80026f2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80026d0:	f000 f838 	bl	8002744 <xTaskIncrementTick>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <xTaskResumeAll+0x11c>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f1      	bne.n	80026d0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <xTaskResumeAll+0x120>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <xTaskResumeAll+0x11c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80026f6:	f001 f89f 	bl	8003838 <vPortExitCritical>

    return xAlreadyYielded;
 80026fa:	687b      	ldr	r3, [r7, #4]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	200002fc 	.word	0x200002fc
 8002708:	200002d4 	.word	0x200002d4
 800270c:	20000294 	.word	0x20000294
 8002710:	200002dc 	.word	0x200002dc
 8002714:	20000200 	.word	0x20000200
 8002718:	200001fc 	.word	0x200001fc
 800271c:	200002e8 	.word	0x200002e8
 8002720:	200002e4 	.word	0x200002e4

08002724 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <xTaskGetTickCount+0x1c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002730:	687b      	ldr	r3, [r7, #4]
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	200002d8 	.word	0x200002d8

08002744 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800274e:	4b41      	ldr	r3, [pc, #260]	; (8002854 <xTaskIncrementTick+0x110>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d173      	bne.n	800283e <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002756:	4b40      	ldr	r3, [pc, #256]	; (8002858 <xTaskIncrementTick+0x114>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3301      	adds	r3, #1
 800275c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800275e:	4a3e      	ldr	r2, [pc, #248]	; (8002858 <xTaskIncrementTick+0x114>)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d120      	bne.n	80027ac <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800276a:	4b3c      	ldr	r3, [pc, #240]	; (800285c <xTaskIncrementTick+0x118>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <xTaskIncrementTick+0x46>
        __asm volatile
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	603b      	str	r3, [r7, #0]
    }
 8002786:	bf00      	nop
 8002788:	e7fe      	b.n	8002788 <xTaskIncrementTick+0x44>
 800278a:	4b34      	ldr	r3, [pc, #208]	; (800285c <xTaskIncrementTick+0x118>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	4b33      	ldr	r3, [pc, #204]	; (8002860 <xTaskIncrementTick+0x11c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a31      	ldr	r2, [pc, #196]	; (800285c <xTaskIncrementTick+0x118>)
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4a31      	ldr	r2, [pc, #196]	; (8002860 <xTaskIncrementTick+0x11c>)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <xTaskIncrementTick+0x120>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4a2f      	ldr	r2, [pc, #188]	; (8002864 <xTaskIncrementTick+0x120>)
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	f000 faa4 	bl	8002cf4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80027ac:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <xTaskIncrementTick+0x124>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d348      	bcc.n	8002848 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <xTaskIncrementTick+0x118>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d104      	bne.n	80027ca <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <xTaskIncrementTick+0x124>)
 80027c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027c6:	601a      	str	r2, [r3, #0]
                    break;
 80027c8:	e03e      	b.n	8002848 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <xTaskIncrementTick+0x118>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d203      	bcs.n	80027ea <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80027e2:	4a21      	ldr	r2, [pc, #132]	; (8002868 <xTaskIncrementTick+0x124>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80027e8:	e02e      	b.n	8002848 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3304      	adds	r3, #4
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe ffaf 	bl	8001752 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	3318      	adds	r3, #24
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe ffa6 	bl	8001752 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4618      	mov	r0, r3
 800280a:	f003 f947 	bl	8005a9c <SEGGER_SYSVIEW_OnTaskStartReady>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	2201      	movs	r2, #1
 8002814:	409a      	lsls	r2, r3
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <xTaskIncrementTick+0x128>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4313      	orrs	r3, r2
 800281c:	4a13      	ldr	r2, [pc, #76]	; (800286c <xTaskIncrementTick+0x128>)
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4a10      	ldr	r2, [pc, #64]	; (8002870 <xTaskIncrementTick+0x12c>)
 800282e:	441a      	add	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3304      	adds	r3, #4
 8002834:	4619      	mov	r1, r3
 8002836:	4610      	mov	r0, r2
 8002838:	f7fe ff2e 	bl	8001698 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800283c:	e7bb      	b.n	80027b6 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <xTaskIncrementTick+0x130>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <xTaskIncrementTick+0x130>)
 8002846:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002848:	697b      	ldr	r3, [r7, #20]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200002fc 	.word	0x200002fc
 8002858:	200002d8 	.word	0x200002d8
 800285c:	2000028c 	.word	0x2000028c
 8002860:	20000290 	.word	0x20000290
 8002864:	200002ec 	.word	0x200002ec
 8002868:	200002f4 	.word	0x200002f4
 800286c:	200002dc 	.word	0x200002dc
 8002870:	20000200 	.word	0x20000200
 8002874:	200002e4 	.word	0x200002e4

08002878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <vTaskSwitchContext+0xc4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002886:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <vTaskSwitchContext+0xc8>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800288c:	e052      	b.n	8002934 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <vTaskSwitchContext+0xc8>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <vTaskSwitchContext+0xcc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80028a2:	7afb      	ldrb	r3, [r7, #11]
 80028a4:	f1c3 031f 	rsb	r3, r3, #31
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	4927      	ldr	r1, [pc, #156]	; (8002948 <vTaskSwitchContext+0xd0>)
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	607b      	str	r3, [r7, #4]
    }
 80028d0:	bf00      	nop
 80028d2:	e7fe      	b.n	80028d2 <vTaskSwitchContext+0x5a>
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4a1a      	ldr	r2, [pc, #104]	; (8002948 <vTaskSwitchContext+0xd0>)
 80028e0:	4413      	add	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	3308      	adds	r3, #8
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d104      	bne.n	8002904 <vTaskSwitchContext+0x8c>
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <vTaskSwitchContext+0xd4>)
 800290c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <vTaskSwitchContext+0xd4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3334      	adds	r3, #52	; 0x34
 8002914:	2205      	movs	r2, #5
 8002916:	490e      	ldr	r1, [pc, #56]	; (8002950 <vTaskSwitchContext+0xd8>)
 8002918:	4618      	mov	r0, r3
 800291a:	f003 fe03 	bl	8006524 <memcmp>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <vTaskSwitchContext+0xb8>
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <vTaskSwitchContext+0xd4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f003 f875 	bl	8005a18 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800292e:	e001      	b.n	8002934 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8002930:	f003 f814 	bl	800595c <SEGGER_SYSVIEW_OnIdle>
}
 8002934:	bf00      	nop
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200002fc 	.word	0x200002fc
 8002940:	200002e8 	.word	0x200002e8
 8002944:	200002dc 	.word	0x200002dc
 8002948:	20000200 	.word	0x20000200
 800294c:	200001fc 	.word	0x200001fc
 8002950:	08009270 	.word	0x08009270

08002954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	60fb      	str	r3, [r7, #12]
    }
 8002976:	bf00      	nop
 8002978:	e7fe      	b.n	8002978 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <vTaskPlaceOnEventList+0x44>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3318      	adds	r3, #24
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe feac 	bl	80016e0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002988:	2101      	movs	r1, #1
 800298a:	6838      	ldr	r0, [r7, #0]
 800298c:	f000 fa6c 	bl	8002e68 <prvAddCurrentTaskToDelayedList>
}
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200001fc 	.word	0x200001fc

0800299c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	617b      	str	r3, [r7, #20]
    }
 80029c0:	bf00      	nop
 80029c2:	e7fe      	b.n	80029c2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <vTaskPlaceOnEventListRestricted+0x58>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3318      	adds	r3, #24
 80029ca:	4619      	mov	r1, r3
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7fe fe63 	bl	8001698 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029dc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80029de:	2024      	movs	r0, #36	; 0x24
 80029e0:	f002 fae0 	bl	8004fa4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	68b8      	ldr	r0, [r7, #8]
 80029e8:	f000 fa3e 	bl	8002e68 <prvAddCurrentTaskToDelayedList>
    }
 80029ec:	bf00      	nop
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	200001fc 	.word	0x200001fc

080029f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10a      	bne.n	8002a24 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	60fb      	str	r3, [r7, #12]
    }
 8002a20:	bf00      	nop
 8002a22:	e7fe      	b.n	8002a22 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	3318      	adds	r3, #24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fe92 	bl	8001752 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a2e:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <xTaskRemoveFromEventList+0xb4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d120      	bne.n	8002a78 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fe89 	bl	8001752 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 f82a 	bl	8005a9c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <xTaskRemoveFromEventList+0xb8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <xTaskRemoveFromEventList+0xb8>)
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <xTaskRemoveFromEventList+0xbc>)
 8002a68:	441a      	add	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f7fe fe11 	bl	8001698 <vListInsertEnd>
 8002a76:	e005      	b.n	8002a84 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480e      	ldr	r0, [pc, #56]	; (8002ab8 <xTaskRemoveFromEventList+0xc0>)
 8002a80:	f7fe fe0a 	bl	8001698 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <xTaskRemoveFromEventList+0xc4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d905      	bls.n	8002a9e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002a92:	2301      	movs	r3, #1
 8002a94:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <xTaskRemoveFromEventList+0xc8>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e001      	b.n	8002aa2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002aa2:	697b      	ldr	r3, [r7, #20]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200002fc 	.word	0x200002fc
 8002ab0:	200002dc 	.word	0x200002dc
 8002ab4:	20000200 	.word	0x20000200
 8002ab8:	20000294 	.word	0x20000294
 8002abc:	200001fc 	.word	0x200001fc
 8002ac0:	200002e8 	.word	0x200002e8

08002ac4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <vTaskInternalSetTimeOutState+0x24>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <vTaskInternalSetTimeOutState+0x28>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	605a      	str	r2, [r3, #4]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	200002ec 	.word	0x200002ec
 8002aec:	200002d8 	.word	0x200002d8

08002af0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10a      	bne.n	8002b16 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	613b      	str	r3, [r7, #16]
    }
 8002b12:	bf00      	nop
 8002b14:	e7fe      	b.n	8002b14 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	60fb      	str	r3, [r7, #12]
    }
 8002b2e:	bf00      	nop
 8002b30:	e7fe      	b.n	8002b30 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002b32:	f000 fe51 	bl	80037d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002b36:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <xTaskCheckForTimeOut+0xc4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b4e:	d102      	bne.n	8002b56 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	e026      	b.n	8002ba4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <xTaskCheckForTimeOut+0xc8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d00a      	beq.n	8002b78 <xTaskCheckForTimeOut+0x88>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d305      	bcc.n	8002b78 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e015      	b.n	8002ba4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d20b      	bcs.n	8002b9a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	1ad2      	subs	r2, r2, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff98 	bl	8002ac4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	e004      	b.n	8002ba4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002ba4:	f000 fe48 	bl	8003838 <vPortExitCritical>

    return xReturn;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200002d8 	.word	0x200002d8
 8002bb8:	200002ec 	.word	0x200002ec

08002bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <vTaskMissedYield+0x14>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	200002e8 	.word	0x200002e8

08002bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002bdc:	f000 f84c 	bl	8002c78 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <prvIdleTask+0x20>)
 8002be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002bf0:	e7f4      	b.n	8002bdc <prvIdleTask+0x8>
 8002bf2:	bf00      	nop
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	e00c      	b.n	8002c1e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <prvInitialiseTaskLists+0x60>)
 8002c10:	4413      	add	r3, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fd13 	bl	800163e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d9ef      	bls.n	8002c04 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c24:	480d      	ldr	r0, [pc, #52]	; (8002c5c <prvInitialiseTaskLists+0x64>)
 8002c26:	f7fe fd0a 	bl	800163e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c2a:	480d      	ldr	r0, [pc, #52]	; (8002c60 <prvInitialiseTaskLists+0x68>)
 8002c2c:	f7fe fd07 	bl	800163e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c30:	480c      	ldr	r0, [pc, #48]	; (8002c64 <prvInitialiseTaskLists+0x6c>)
 8002c32:	f7fe fd04 	bl	800163e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002c36:	480c      	ldr	r0, [pc, #48]	; (8002c68 <prvInitialiseTaskLists+0x70>)
 8002c38:	f7fe fd01 	bl	800163e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002c3c:	480b      	ldr	r0, [pc, #44]	; (8002c6c <prvInitialiseTaskLists+0x74>)
 8002c3e:	f7fe fcfe 	bl	800163e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <prvInitialiseTaskLists+0x78>)
 8002c44:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <prvInitialiseTaskLists+0x64>)
 8002c46:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <prvInitialiseTaskLists+0x7c>)
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <prvInitialiseTaskLists+0x68>)
 8002c4c:	601a      	str	r2, [r3, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000200 	.word	0x20000200
 8002c5c:	20000264 	.word	0x20000264
 8002c60:	20000278 	.word	0x20000278
 8002c64:	20000294 	.word	0x20000294
 8002c68:	200002a8 	.word	0x200002a8
 8002c6c:	200002c0 	.word	0x200002c0
 8002c70:	2000028c 	.word	0x2000028c
 8002c74:	20000290 	.word	0x20000290

08002c78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c7e:	e019      	b.n	8002cb4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002c80:	f000 fdaa 	bl	80037d8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <prvCheckTasksWaitingTermination+0x50>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe fd5e 	bl	8001752 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <prvCheckTasksWaitingTermination+0x54>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <prvCheckTasksWaitingTermination+0x54>)
 8002c9e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <prvCheckTasksWaitingTermination+0x58>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <prvCheckTasksWaitingTermination+0x58>)
 8002ca8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002caa:	f000 fdc5 	bl	8003838 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f810 	bl	8002cd4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <prvCheckTasksWaitingTermination+0x58>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e1      	bne.n	8002c80 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200002a8 	.word	0x200002a8
 8002ccc:	200002d4 	.word	0x200002d4
 8002cd0:	200002bc 	.word	0x200002bc

08002cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 ff83 	bl	8003bec <vPortFree>
                vPortFree( pxTCB );
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 ff80 	bl	8003bec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <prvResetNextTaskUnblockTime+0x30>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <prvResetNextTaskUnblockTime+0x34>)
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d08:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d0a:	e005      	b.n	8002d18 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <prvResetNextTaskUnblockTime+0x30>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <prvResetNextTaskUnblockTime+0x34>)
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	2000028c 	.word	0x2000028c
 8002d28:	200002f4 	.word	0x200002f4

08002d2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <xTaskGetSchedulerState+0x34>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	607b      	str	r3, [r7, #4]
 8002d3e:	e008      	b.n	8002d52 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <xTaskGetSchedulerState+0x38>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	e001      	b.n	8002d52 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002d52:	687b      	ldr	r3, [r7, #4]
    }
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	200002e0 	.word	0x200002e0
 8002d64:	200002fc 	.word	0x200002fc

08002d68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d068      	beq.n	8002e50 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <xTaskPriorityDisinherit+0xf4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d00a      	beq.n	8002d9e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	60fb      	str	r3, [r7, #12]
    }
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	60bb      	str	r3, [r7, #8]
    }
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc0:	1e5a      	subs	r2, r3, #1
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d03e      	beq.n	8002e50 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d13a      	bne.n	8002e50 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fcb7 	bl	8001752 <uxListRemove>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	2201      	movs	r2, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43da      	mvns	r2, r3
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <xTaskPriorityDisinherit+0xf8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <xTaskPriorityDisinherit+0xf8>)
 8002dfe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4619      	mov	r1, r3
 8002e04:	204a      	movs	r0, #74	; 0x4a
 8002e06:	f002 f8eb 	bl	8004fe0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f1c3 0205 	rsb	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	2201      	movs	r2, #1
 8002e24:	409a      	lsls	r2, r3
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <xTaskPriorityDisinherit+0xf8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <xTaskPriorityDisinherit+0xf8>)
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <xTaskPriorityDisinherit+0xfc>)
 8002e3e:	441a      	add	r2, r3
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	3304      	adds	r3, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f7fe fc26 	bl	8001698 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002e50:	697b      	ldr	r3, [r7, #20]
    }
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200001fc 	.word	0x200001fc
 8002e60:	200002dc 	.word	0x200002dc
 8002e64:	20000200 	.word	0x20000200

08002e68 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e72:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <prvAddCurrentTaskToDelayedList+0xd4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e78:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fc67 	bl	8001752 <uxListRemove>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e8a:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	2201      	movs	r2, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	4b2a      	ldr	r3, [pc, #168]	; (8002f44 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	4a29      	ldr	r2, [pc, #164]	; (8002f44 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002ea0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ea8:	d110      	bne.n	8002ecc <prvAddCurrentTaskToDelayedList+0x64>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002eb0:	4b23      	ldr	r3, [pc, #140]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	211b      	movs	r1, #27
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 fe32 	bl	8005b20 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4820      	ldr	r0, [pc, #128]	; (8002f48 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002ec6:	f7fe fbe7 	bl	8001698 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002eca:	e032      	b.n	8002f32 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ed4:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d20f      	bcs.n	8002f04 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2104      	movs	r1, #4
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 fe18 	bl	8005b20 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <prvAddCurrentTaskToDelayedList+0xe4>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f7fe fbef 	bl	80016e0 <vListInsert>
}
 8002f02:	e016      	b.n	8002f32 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002f04:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2104      	movs	r1, #4
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f002 fe08 	bl	8005b20 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f7fe fbdf 	bl	80016e0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d202      	bcs.n	8002f32 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002f2c:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <prvAddCurrentTaskToDelayedList+0xec>)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	6013      	str	r3, [r2, #0]
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200002d8 	.word	0x200002d8
 8002f40:	200001fc 	.word	0x200001fc
 8002f44:	200002dc 	.word	0x200002dc
 8002f48:	200002c0 	.word	0x200002c0
 8002f4c:	20000290 	.word	0x20000290
 8002f50:	2000028c 	.word	0x2000028c
 8002f54:	200002f4 	.word	0x200002f4

08002f58 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002f62:	f000 fad5 	bl	8003510 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <xTimerCreateTimerTask+0x54>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <xTimerCreateTimerTask+0x58>)
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	2302      	movs	r3, #2
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f7c:	490d      	ldr	r1, [pc, #52]	; (8002fb4 <xTimerCreateTimerTask+0x5c>)
 8002f7e:	480e      	ldr	r0, [pc, #56]	; (8002fb8 <xTimerCreateTimerTask+0x60>)
 8002f80:	f7ff f93c 	bl	80021fc <xTaskCreate>
 8002f84:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	603b      	str	r3, [r7, #0]
    }
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002fa2:	687b      	ldr	r3, [r7, #4]
    }
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000330 	.word	0x20000330
 8002fb0:	20000334 	.word	0x20000334
 8002fb4:	08009278 	.word	0x08009278
 8002fb8:	080030f1 	.word	0x080030f1

08002fbc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <xTimerGenericCommand+0x2e>
        __asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	623b      	str	r3, [r7, #32]
    }
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <xTimerGenericCommand+0x98>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02a      	beq.n	8003048 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b05      	cmp	r3, #5
 8003002:	dc18      	bgt.n	8003036 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003004:	f7ff fe92 	bl	8002d2c <xTaskGetSchedulerState>
 8003008:	4603      	mov	r3, r0
 800300a:	2b02      	cmp	r3, #2
 800300c:	d109      	bne.n	8003022 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <xTimerGenericCommand+0x98>)
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	f107 0114 	add.w	r1, r7, #20
 8003016:	2300      	movs	r3, #0
 8003018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301a:	f7fe fca7 	bl	800196c <xQueueGenericSend>
 800301e:	6278      	str	r0, [r7, #36]	; 0x24
 8003020:	e012      	b.n	8003048 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <xTimerGenericCommand+0x98>)
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	f107 0114 	add.w	r1, r7, #20
 800302a:	2300      	movs	r3, #0
 800302c:	2200      	movs	r2, #0
 800302e:	f7fe fc9d 	bl	800196c <xQueueGenericSend>
 8003032:	6278      	str	r0, [r7, #36]	; 0x24
 8003034:	e008      	b.n	8003048 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <xTimerGenericCommand+0x98>)
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	f107 0114 	add.w	r1, r7, #20
 800303e:	2300      	movs	r3, #0
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	f7fe fda1 	bl	8001b88 <xQueueGenericSendFromISR>
 8003046:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800304a:	4618      	mov	r0, r3
 800304c:	3728      	adds	r7, #40	; 0x28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000330 	.word	0x20000330

08003058 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <prvProcessExpiredTimer+0x94>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3304      	adds	r3, #4
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fb6e 	bl	8001752 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d022      	beq.n	80030ca <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	18d1      	adds	r1, r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	6978      	ldr	r0, [r7, #20]
 8003092:	f000 f8d1 	bl	8003238 <prvInsertTimerInActiveList>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01f      	beq.n	80030dc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800309c:	2300      	movs	r3, #0
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2300      	movs	r3, #0
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	2100      	movs	r1, #0
 80030a6:	6978      	ldr	r0, [r7, #20]
 80030a8:	f7ff ff88 	bl	8002fbc <xTimerGenericCommand>
 80030ac:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d113      	bne.n	80030dc <prvProcessExpiredTimer+0x84>
        __asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	60fb      	str	r3, [r7, #12]
    }
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	6978      	ldr	r0, [r7, #20]
 80030e2:	4798      	blx	r3
    }
 80030e4:	bf00      	nop
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000328 	.word	0x20000328

080030f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80030f8:	f107 0308 	add.w	r3, r7, #8
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f857 	bl	80031b0 <prvGetNextExpireTime>
 8003102:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4619      	mov	r1, r3
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f803 	bl	8003114 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800310e:	f000 f8d5 	bl	80032bc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003112:	e7f1      	b.n	80030f8 <prvTimerTask+0x8>

08003114 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800311e:	f7ff fa61 	bl	80025e4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f866 	bl	80031f8 <prvSampleTimeNow>
 800312c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d130      	bne.n	8003196 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <prvProcessTimerOrBlockTask+0x3c>
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	429a      	cmp	r2, r3
 8003140:	d806      	bhi.n	8003150 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003142:	f7ff fa5d 	bl	8002600 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003146:	68f9      	ldr	r1, [r7, #12]
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ff85 	bl	8003058 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800314e:	e024      	b.n	800319a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <prvProcessTimerOrBlockTask+0x90>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <prvProcessTimerOrBlockTask+0x50>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <prvProcessTimerOrBlockTask+0x52>
 8003164:	2300      	movs	r3, #0
 8003166:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <prvProcessTimerOrBlockTask+0x94>)
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	f7ff f80d 	bl	8002194 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800317a:	f7ff fa41 	bl	8002600 <xTaskResumeAll>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10a      	bne.n	800319a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <prvProcessTimerOrBlockTask+0x98>)
 8003186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	f3bf 8f6f 	isb	sy
    }
 8003194:	e001      	b.n	800319a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003196:	f7ff fa33 	bl	8002600 <xTaskResumeAll>
    }
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000032c 	.word	0x2000032c
 80031a8:	20000330 	.word	0x20000330
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <prvGetNextExpireTime+0x44>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <prvGetNextExpireTime+0x16>
 80031c2:	2201      	movs	r2, #1
 80031c4:	e000      	b.n	80031c8 <prvGetNextExpireTime+0x18>
 80031c6:	2200      	movs	r2, #0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <prvGetNextExpireTime+0x44>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e001      	b.n	80031e4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80031e4:	68fb      	ldr	r3, [r7, #12]
    }
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000328 	.word	0x20000328

080031f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003200:	f7ff fa90 	bl	8002724 <xTaskGetTickCount>
 8003204:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <prvSampleTimeNow+0x3c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	429a      	cmp	r2, r3
 800320e:	d205      	bcs.n	800321c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003210:	f000 f91a 	bl	8003448 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e002      	b.n	8003222 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003222:	4a04      	ldr	r2, [pc, #16]	; (8003234 <prvSampleTimeNow+0x3c>)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003228:	68fb      	ldr	r3, [r7, #12]
    }
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000338 	.word	0x20000338

08003238 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d812      	bhi.n	8003284 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	1ad2      	subs	r2, r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	429a      	cmp	r2, r3
 800326a:	d302      	bcc.n	8003272 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800326c:	2301      	movs	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	e01b      	b.n	80032aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <prvInsertTimerInActiveList+0x7c>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3304      	adds	r3, #4
 800327a:	4619      	mov	r1, r3
 800327c:	4610      	mov	r0, r2
 800327e:	f7fe fa2f 	bl	80016e0 <vListInsert>
 8003282:	e012      	b.n	80032aa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d206      	bcs.n	800329a <prvInsertTimerInActiveList+0x62>
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d302      	bcc.n	800329a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003294:	2301      	movs	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	e007      	b.n	80032aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <prvInsertTimerInActiveList+0x80>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3304      	adds	r3, #4
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f7fe fa1b 	bl	80016e0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80032aa:	697b      	ldr	r3, [r7, #20]
    }
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	2000032c 	.word	0x2000032c
 80032b8:	20000328 	.word	0x20000328

080032bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08c      	sub	sp, #48	; 0x30
 80032c0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032c2:	e0ae      	b.n	8003422 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f2c0 80aa 	blt.w	8003420 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	3304      	adds	r3, #4
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fa38 	bl	8001752 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff87 	bl	80031f8 <prvSampleTimeNow>
 80032ea:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b09      	cmp	r3, #9
 80032f0:	f200 8097 	bhi.w	8003422 <prvProcessReceivedCommands+0x166>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <prvProcessReceivedCommands+0x40>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003325 	.word	0x08003325
 8003300:	08003325 	.word	0x08003325
 8003304:	08003325 	.word	0x08003325
 8003308:	08003399 	.word	0x08003399
 800330c:	080033ad 	.word	0x080033ad
 8003310:	080033f7 	.word	0x080033f7
 8003314:	08003325 	.word	0x08003325
 8003318:	08003325 	.word	0x08003325
 800331c:	08003399 	.word	0x08003399
 8003320:	080033ad 	.word	0x080033ad
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	18d1      	adds	r1, r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a3a      	ldr	r2, [r7, #32]
 8003342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003344:	f7ff ff78 	bl	8003238 <prvInsertTimerInActiveList>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d069      	beq.n	8003422 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003354:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d05e      	beq.n	8003422 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	441a      	add	r2, r3
 800336c:	2300      	movs	r3, #0
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2300      	movs	r3, #0
 8003372:	2100      	movs	r1, #0
 8003374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003376:	f7ff fe21 	bl	8002fbc <xTimerGenericCommand>
 800337a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d14f      	bne.n	8003422 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	61bb      	str	r3, [r7, #24]
    }
 8003394:	bf00      	nop
 8003396:	e7fe      	b.n	8003396 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80033aa:	e03a      	b.n	8003422 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	617b      	str	r3, [r7, #20]
    }
 80033de:	bf00      	nop
 80033e0:	e7fe      	b.n	80033e0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	18d1      	adds	r1, r2, r3
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033f0:	f7ff ff22 	bl	8003238 <prvInsertTimerInActiveList>
                        break;
 80033f4:	e015      	b.n	8003422 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d103      	bne.n	800340c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003406:	f000 fbf1 	bl	8003bec <vPortFree>
 800340a:	e00a      	b.n	8003422 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800341e:	e000      	b.n	8003422 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003420:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <prvProcessReceivedCommands+0x188>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f107 0108 	add.w	r1, r7, #8
 800342a:	2200      	movs	r2, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f7fe fc69 	bl	8001d04 <xQueueReceive>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	f47f af45 	bne.w	80032c4 <prvProcessReceivedCommands+0x8>
        }
    }
 800343a:	bf00      	nop
 800343c:	bf00      	nop
 800343e:	3728      	adds	r7, #40	; 0x28
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000330 	.word	0x20000330

08003448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800344e:	e048      	b.n	80034e2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <prvSwitchTimerLists+0xc0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800345a:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <prvSwitchTimerLists+0xc0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3304      	adds	r3, #4
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe f972 	bl	8001752 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d02e      	beq.n	80034e2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	429a      	cmp	r2, r3
 8003494:	d90e      	bls.n	80034b4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <prvSwitchTimerLists+0xc0>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f7fe f917 	bl	80016e0 <vListInsert>
 80034b2:	e016      	b.n	80034e2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034b4:	2300      	movs	r3, #0
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	2300      	movs	r3, #0
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	2100      	movs	r1, #0
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fd7c 	bl	8002fbc <xTimerGenericCommand>
 80034c4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	603b      	str	r3, [r7, #0]
    }
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <prvSwitchTimerLists+0xc0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1b1      	bne.n	8003450 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <prvSwitchTimerLists+0xc0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <prvSwitchTimerLists+0xc4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a04      	ldr	r2, [pc, #16]	; (8003508 <prvSwitchTimerLists+0xc0>)
 80034f8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80034fa:	4a04      	ldr	r2, [pc, #16]	; (800350c <prvSwitchTimerLists+0xc4>)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	6013      	str	r3, [r2, #0]
    }
 8003500:	bf00      	nop
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000328 	.word	0x20000328
 800350c:	2000032c 	.word	0x2000032c

08003510 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003514:	f000 f960 	bl	80037d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <prvCheckForValidListAndQueue+0x54>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11d      	bne.n	800355c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003520:	4811      	ldr	r0, [pc, #68]	; (8003568 <prvCheckForValidListAndQueue+0x58>)
 8003522:	f7fe f88c 	bl	800163e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003526:	4811      	ldr	r0, [pc, #68]	; (800356c <prvCheckForValidListAndQueue+0x5c>)
 8003528:	f7fe f889 	bl	800163e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800352c:	4b10      	ldr	r3, [pc, #64]	; (8003570 <prvCheckForValidListAndQueue+0x60>)
 800352e:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <prvCheckForValidListAndQueue+0x58>)
 8003530:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <prvCheckForValidListAndQueue+0x64>)
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <prvCheckForValidListAndQueue+0x5c>)
 8003536:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003538:	2200      	movs	r2, #0
 800353a:	210c      	movs	r1, #12
 800353c:	200a      	movs	r0, #10
 800353e:	f7fe f98d 	bl	800185c <xQueueGenericCreate>
 8003542:	4603      	mov	r3, r0
 8003544:	4a07      	ldr	r2, [pc, #28]	; (8003564 <prvCheckForValidListAndQueue+0x54>)
 8003546:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <prvCheckForValidListAndQueue+0x54>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <prvCheckForValidListAndQueue+0x54>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4908      	ldr	r1, [pc, #32]	; (8003578 <prvCheckForValidListAndQueue+0x68>)
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fdea 	bl	8002130 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800355c:	f000 f96c 	bl	8003838 <vPortExitCritical>
    }
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000330 	.word	0x20000330
 8003568:	20000300 	.word	0x20000300
 800356c:	20000314 	.word	0x20000314
 8003570:	20000328 	.word	0x20000328
 8003574:	2000032c 	.word	0x2000032c
 8003578:	08009280 	.word	0x08009280

0800357c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3b04      	subs	r3, #4
 800358c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003594:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3b04      	subs	r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f023 0201 	bic.w	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3b04      	subs	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80035ac:	4a0c      	ldr	r2, [pc, #48]	; (80035e0 <pxPortInitialiseStack+0x64>)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3b14      	subs	r3, #20
 80035b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3b04      	subs	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f06f 0202 	mvn.w	r2, #2
 80035ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3b20      	subs	r3, #32
 80035d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	080035e5 	.word	0x080035e5

080035e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <prvTaskExitError+0x54>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f6:	d00a      	beq.n	800360e <prvTaskExitError+0x2a>
        __asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60fb      	str	r3, [r7, #12]
    }
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <prvTaskExitError+0x28>
        __asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	60bb      	str	r3, [r7, #8]
    }
 8003620:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003622:	bf00      	nop
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0fc      	beq.n	8003624 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	20000004 	.word	0x20000004
 800363c:	00000000 	.word	0x00000000

08003640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003640:	4b07      	ldr	r3, [pc, #28]	; (8003660 <pxCurrentTCBConst2>)
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	6808      	ldr	r0, [r1, #0]
 8003646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364a:	f380 8809 	msr	PSP, r0
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f380 8811 	msr	BASEPRI, r0
 800365a:	4770      	bx	lr
 800365c:	f3af 8000 	nop.w

08003660 <pxCurrentTCBConst2>:
 8003660:	200001fc 	.word	0x200001fc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop

08003668 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003668:	4808      	ldr	r0, [pc, #32]	; (800368c <prvPortStartFirstTask+0x24>)
 800366a:	6800      	ldr	r0, [r0, #0]
 800366c:	6800      	ldr	r0, [r0, #0]
 800366e:	f380 8808 	msr	MSP, r0
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f380 8814 	msr	CONTROL, r0
 800367a:	b662      	cpsie	i
 800367c:	b661      	cpsie	f
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	df00      	svc	0
 8003688:	bf00      	nop
 800368a:	0000      	.short	0x0000
 800368c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop

08003694 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800369a:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <xPortStartScheduler+0x120>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a46      	ldr	r2, [pc, #280]	; (80037b8 <xPortStartScheduler+0x124>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10a      	bne.n	80036ba <xPortStartScheduler+0x26>
        __asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	613b      	str	r3, [r7, #16]
    }
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036ba:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <xPortStartScheduler+0x120>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3f      	ldr	r2, [pc, #252]	; (80037bc <xPortStartScheduler+0x128>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d10a      	bne.n	80036da <xPortStartScheduler+0x46>
        __asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	60fb      	str	r3, [r7, #12]
    }
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036da:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <xPortStartScheduler+0x12c>)
 80036dc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	22ff      	movs	r2, #255	; 0xff
 80036ea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <xPortStartScheduler+0x130>)
 8003700:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <xPortStartScheduler+0x134>)
 8003704:	2207      	movs	r2, #7
 8003706:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003708:	e009      	b.n	800371e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800370a:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <xPortStartScheduler+0x134>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3b01      	subs	r3, #1
 8003710:	4a2d      	ldr	r2, [pc, #180]	; (80037c8 <xPortStartScheduler+0x134>)
 8003712:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d0ef      	beq.n	800370a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800372a:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <xPortStartScheduler+0x134>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f1c3 0307 	rsb	r3, r3, #7
 8003732:	2b04      	cmp	r3, #4
 8003734:	d00a      	beq.n	800374c <xPortStartScheduler+0xb8>
        __asm volatile
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	60bb      	str	r3, [r7, #8]
    }
 8003748:	bf00      	nop
 800374a:	e7fe      	b.n	800374a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800374c:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <xPortStartScheduler+0x134>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <xPortStartScheduler+0x134>)
 8003754:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003756:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <xPortStartScheduler+0x134>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800375e:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <xPortStartScheduler+0x134>)
 8003760:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800376a:	4b18      	ldr	r3, [pc, #96]	; (80037cc <xPortStartScheduler+0x138>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a17      	ldr	r2, [pc, #92]	; (80037cc <xPortStartScheduler+0x138>)
 8003770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003774:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <xPortStartScheduler+0x138>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a14      	ldr	r2, [pc, #80]	; (80037cc <xPortStartScheduler+0x138>)
 800377c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003780:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003782:	f000 f8e3 	bl	800394c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <xPortStartScheduler+0x13c>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800378c:	f000 f902 	bl	8003994 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003790:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <xPortStartScheduler+0x140>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0f      	ldr	r2, [pc, #60]	; (80037d4 <xPortStartScheduler+0x140>)
 8003796:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800379a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800379c:	f7ff ff64 	bl	8003668 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80037a0:	f7ff f86a 	bl	8002878 <vTaskSwitchContext>
    prvTaskExitError();
 80037a4:	f7ff ff1e 	bl	80035e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	e000ed00 	.word	0xe000ed00
 80037b8:	410fc271 	.word	0x410fc271
 80037bc:	410fc270 	.word	0x410fc270
 80037c0:	e000e400 	.word	0xe000e400
 80037c4:	2000033c 	.word	0x2000033c
 80037c8:	20000340 	.word	0x20000340
 80037cc:	e000ed20 	.word	0xe000ed20
 80037d0:	20000004 	.word	0x20000004
 80037d4:	e000ef34 	.word	0xe000ef34

080037d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
        __asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	607b      	str	r3, [r7, #4]
    }
 80037f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <vPortEnterCritical+0x58>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <vPortEnterCritical+0x58>)
 80037fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <vPortEnterCritical+0x58>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d10f      	bne.n	8003824 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <vPortEnterCritical+0x5c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <vPortEnterCritical+0x4c>
        __asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	603b      	str	r3, [r7, #0]
    }
 8003820:	bf00      	nop
 8003822:	e7fe      	b.n	8003822 <vPortEnterCritical+0x4a>
    }
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20000004 	.word	0x20000004
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800383e:	4b12      	ldr	r3, [pc, #72]	; (8003888 <vPortExitCritical+0x50>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <vPortExitCritical+0x24>
        __asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	607b      	str	r3, [r7, #4]
    }
 8003858:	bf00      	nop
 800385a:	e7fe      	b.n	800385a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <vPortExitCritical+0x50>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	4a09      	ldr	r2, [pc, #36]	; (8003888 <vPortExitCritical+0x50>)
 8003864:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <vPortExitCritical+0x50>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d105      	bne.n	800387a <vPortExitCritical+0x42>
 800386e:	2300      	movs	r3, #0
 8003870:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f383 8811 	msr	BASEPRI, r3
    }
 8003878:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000004 	.word	0x20000004
 800388c:	00000000 	.word	0x00000000

08003890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003890:	f3ef 8009 	mrs	r0, PSP
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <pxCurrentTCBConst>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	f01e 0f10 	tst.w	lr, #16
 80038a0:	bf08      	it	eq
 80038a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038aa:	6010      	str	r0, [r2, #0]
 80038ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038b4:	f380 8811 	msr	BASEPRI, r0
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f7fe ffda 	bl	8002878 <vTaskSwitchContext>
 80038c4:	f04f 0000 	mov.w	r0, #0
 80038c8:	f380 8811 	msr	BASEPRI, r0
 80038cc:	bc09      	pop	{r0, r3}
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d6:	f01e 0f10 	tst.w	lr, #16
 80038da:	bf08      	it	eq
 80038dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038e0:	f380 8809 	msr	PSP, r0
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	f3af 8000 	nop.w

080038f0 <pxCurrentTCBConst>:
 80038f0:	200001fc 	.word	0x200001fc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop

080038f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
        __asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	607b      	str	r3, [r7, #4]
    }
 8003910:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003912:	f001 ffa9 	bl	8005868 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003916:	f7fe ff15 	bl	8002744 <xTaskIncrementTick>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003920:	f002 f800 	bl	8005924 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <SysTick_Handler+0x50>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e001      	b.n	8003932 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800392e:	f001 ffdd 	bl	80058ec <SEGGER_SYSVIEW_RecordExitISR>
 8003932:	2300      	movs	r3, #0
 8003934:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f383 8811 	msr	BASEPRI, r3
    }
 800393c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <vPortSetupTimerInterrupt+0x34>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <vPortSetupTimerInterrupt+0x38>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <vPortSetupTimerInterrupt+0x3c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <vPortSetupTimerInterrupt+0x40>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	4a09      	ldr	r2, [pc, #36]	; (8003990 <vPortSetupTimerInterrupt+0x44>)
 800396a:	3b01      	subs	r3, #1
 800396c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <vPortSetupTimerInterrupt+0x34>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000e010 	.word	0xe000e010
 8003984:	e000e018 	.word	0xe000e018
 8003988:	20000008 	.word	0x20000008
 800398c:	10624dd3 	.word	0x10624dd3
 8003990:	e000e014 	.word	0xe000e014

08003994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80039a4 <vPortEnableVFP+0x10>
 8003998:	6801      	ldr	r1, [r0, #0]
 800399a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800399e:	6001      	str	r1, [r0, #0]
 80039a0:	4770      	bx	lr
 80039a2:	0000      	.short	0x0000
 80039a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop

080039ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80039b2:	f3ef 8305 	mrs	r3, IPSR
 80039b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b0f      	cmp	r3, #15
 80039bc:	d914      	bls.n	80039e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80039be:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <vPortValidateInterruptPriority+0x70>)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <vPortValidateInterruptPriority+0x74>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	7afa      	ldrb	r2, [r7, #11]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d20a      	bcs.n	80039e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	607b      	str	r3, [r7, #4]
    }
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <vPortValidateInterruptPriority+0x78>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <vPortValidateInterruptPriority+0x7c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d90a      	bls.n	8003a0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	603b      	str	r3, [r7, #0]
    }
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <vPortValidateInterruptPriority+0x60>
    }
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e3f0 	.word	0xe000e3f0
 8003a20:	2000033c 	.word	0x2000033c
 8003a24:	e000ed0c 	.word	0xe000ed0c
 8003a28:	20000340 	.word	0x20000340

08003a2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003a38:	f7fe fdd4 	bl	80025e4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a3c:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <pvPortMalloc+0x1a8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003a44:	f000 f934 	bl	8003cb0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a48:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <pvPortMalloc+0x1ac>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 80a7 	bne.w	8003ba4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02d      	beq.n	8003ab8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d227      	bcs.n	8003ab8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a68:	2208      	movs	r2, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d021      	beq.n	8003abe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f023 0307 	bic.w	r3, r3, #7
 8003a80:	3308      	adds	r3, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d214      	bcs.n	8003ab2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	3308      	adds	r3, #8
 8003a90:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <pvPortMalloc+0x92>
        __asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	617b      	str	r3, [r7, #20]
    }
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ab6:	e002      	b.n	8003abe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	e000      	b.n	8003ac0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003abe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d06e      	beq.n	8003ba4 <pvPortMalloc+0x178>
 8003ac6:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d869      	bhi.n	8003ba4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <pvPortMalloc+0x1b4>)
 8003ad2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003ad4:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <pvPortMalloc+0x1b4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ada:	e004      	b.n	8003ae6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d903      	bls.n	8003af8 <pvPortMalloc+0xcc>
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f1      	bne.n	8003adc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003af8:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <pvPortMalloc+0x1a8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d050      	beq.n	8003ba4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2208      	movs	r2, #8
 8003b08:	4413      	add	r3, r2
 8003b0a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1ad2      	subs	r2, r2, r3
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d91f      	bls.n	8003b64 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <pvPortMalloc+0x120>
        __asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	613b      	str	r3, [r7, #16]
    }
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	1ad2      	subs	r2, r2, r3
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b5e:	69b8      	ldr	r0, [r7, #24]
 8003b60:	f000 f908 	bl	8003d74 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b64:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b70:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b72:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <pvPortMalloc+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d203      	bcs.n	8003b86 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <pvPortMalloc+0x1b0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <pvPortMalloc+0x1b8>)
 8003b84:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <pvPortMalloc+0x1ac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <pvPortMalloc+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <pvPortMalloc+0x1bc>)
 8003ba2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003ba4:	f7fe fd2c 	bl	8002600 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <pvPortMalloc+0x19c>
        __asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	60fb      	str	r3, [r7, #12]
    }
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3728      	adds	r7, #40	; 0x28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20012f4c 	.word	0x20012f4c
 8003bd8:	20012f60 	.word	0x20012f60
 8003bdc:	20012f50 	.word	0x20012f50
 8003be0:	20012f44 	.word	0x20012f44
 8003be4:	20012f54 	.word	0x20012f54
 8003be8:	20012f58 	.word	0x20012f58

08003bec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d04d      	beq.n	8003c9a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	425b      	negs	r3, r3
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <vPortFree+0xb8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <vPortFree+0x44>
        __asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	60fb      	str	r3, [r7, #12]
    }
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <vPortFree+0x62>
        __asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	60bb      	str	r3, [r7, #8]
    }
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <vPortFree+0xb8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01e      	beq.n	8003c9a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11a      	bne.n	8003c9a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <vPortFree+0xb8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c74:	f7fe fcb6 	bl	80025e4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <vPortFree+0xbc>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4413      	add	r3, r2
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <vPortFree+0xbc>)
 8003c84:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c86:	6938      	ldr	r0, [r7, #16]
 8003c88:	f000 f874 	bl	8003d74 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c8c:	4b07      	ldr	r3, [pc, #28]	; (8003cac <vPortFree+0xc0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a06      	ldr	r2, [pc, #24]	; (8003cac <vPortFree+0xc0>)
 8003c94:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c96:	f7fe fcb3 	bl	8002600 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20012f60 	.word	0x20012f60
 8003ca8:	20012f50 	.word	0x20012f50
 8003cac:	20012f5c 	.word	0x20012f5c

08003cb0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cb6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003cba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003cbc:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <prvHeapInit+0xac>)
 8003cbe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00c      	beq.n	8003ce4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3307      	adds	r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0307 	bic.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <prvHeapInit+0xac>)
 8003ce0:	4413      	add	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <prvHeapInit+0xb0>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003cee:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <prvHeapInit+0xb0>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0307 	bic.w	r3, r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <prvHeapInit+0xb4>)
 8003d10:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <prvHeapInit+0xb4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <prvHeapInit+0xb4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <prvHeapInit+0xb4>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4a0a      	ldr	r2, [pc, #40]	; (8003d68 <prvHeapInit+0xb8>)
 8003d3e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <prvHeapInit+0xbc>)
 8003d46:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <prvHeapInit+0xc0>)
 8003d4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d4e:	601a      	str	r2, [r3, #0]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	20000344 	.word	0x20000344
 8003d60:	20012f44 	.word	0x20012f44
 8003d64:	20012f4c 	.word	0x20012f4c
 8003d68:	20012f54 	.word	0x20012f54
 8003d6c:	20012f50 	.word	0x20012f50
 8003d70:	20012f60 	.word	0x20012f60

08003d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <prvInsertBlockIntoFreeList+0xac>)
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e002      	b.n	8003d88 <prvInsertBlockIntoFreeList+0x14>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d8f7      	bhi.n	8003d82 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d108      	bne.n	8003db6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	441a      	add	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d118      	bne.n	8003dfc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <prvInsertBlockIntoFreeList+0xb0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d00d      	beq.n	8003df2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e008      	b.n	8003e04 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <prvInsertBlockIntoFreeList+0xb0>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	e003      	b.n	8003e04 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d002      	beq.n	8003e12 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20012f44 	.word	0x20012f44
 8003e24:	20012f4c 	.word	0x20012f4c

08003e28 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d161      	bne.n	8003efe <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a33      	ldr	r2, [pc, #204]	; (8003f0c <GPIO_PeriClockControl+0xe4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d106      	bne.n	8003e50 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8003e42:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a32      	ldr	r2, [pc, #200]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 8003e4e:	e056      	b.n	8003efe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <GPIO_PeriClockControl+0xec>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d106      	bne.n	8003e66 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8003e58:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	4a2c      	ldr	r2, [pc, #176]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003e5e:	f043 0302 	orr.w	r3, r3, #2
 8003e62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003e64:	e04b      	b.n	8003efe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2b      	ldr	r2, [pc, #172]	; (8003f18 <GPIO_PeriClockControl+0xf0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d106      	bne.n	8003e7c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8003e6e:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a27      	ldr	r2, [pc, #156]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003e7a:	e040      	b.n	8003efe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a27      	ldr	r2, [pc, #156]	; (8003f1c <GPIO_PeriClockControl+0xf4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d106      	bne.n	8003e92 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8003e84:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003e8a:	f043 0308 	orr.w	r3, r3, #8
 8003e8e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003e90:	e035      	b.n	8003efe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <GPIO_PeriClockControl+0xf8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d106      	bne.n	8003ea8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003ea0:	f043 0310 	orr.w	r3, r3, #16
 8003ea4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003ea6:	e02a      	b.n	8003efe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	; (8003f24 <GPIO_PeriClockControl+0xfc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d106      	bne.n	8003ebe <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003eb6:	f043 0320 	orr.w	r3, r3, #32
 8003eba:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003ebc:	e01f      	b.n	8003efe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a19      	ldr	r2, [pc, #100]	; (8003f28 <GPIO_PeriClockControl+0x100>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d106      	bne.n	8003ed4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a11      	ldr	r2, [pc, #68]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003ed2:	e014      	b.n	8003efe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <GPIO_PeriClockControl+0x104>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d106      	bne.n	8003eea <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	4a0b      	ldr	r2, [pc, #44]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003ee8:	e009      	b.n	8003efe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <GPIO_PeriClockControl+0x108>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d105      	bne.n	8003efe <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a06      	ldr	r2, [pc, #24]	; (8003f10 <GPIO_PeriClockControl+0xe8>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40020000 	.word	0x40020000
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40020400 	.word	0x40020400
 8003f18:	40020800 	.word	0x40020800
 8003f1c:	40020c00 	.word	0x40020c00
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40021400 	.word	0x40021400
 8003f28:	40021800 	.word	0x40021800
 8003f2c:	40021c00 	.word	0x40021c00
 8003f30:	40022000 	.word	0x40022000

08003f34 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ff6e 	bl	8003e28 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	795b      	ldrb	r3, [r3, #5]
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d820      	bhi.n	8003f96 <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	795b      	ldrb	r3, [r3, #5]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	791b      	ldrb	r3, [r3, #4]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	791b      	ldrb	r3, [r3, #4]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	2103      	movs	r1, #3
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	400a      	ands	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6819      	ldr	r1, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e0cb      	b.n	800412e <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	795b      	ldrb	r3, [r3, #5]
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d117      	bne.n	8003fce <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8003f9e:	4b4b      	ldr	r3, [pc, #300]	; (80040cc <GPIO_Init+0x198>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	7912      	ldrb	r2, [r2, #4]
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	2201      	movs	r2, #1
 8003faa:	408a      	lsls	r2, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	4a47      	ldr	r2, [pc, #284]	; (80040cc <GPIO_Init+0x198>)
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8003fb4:	4b45      	ldr	r3, [pc, #276]	; (80040cc <GPIO_Init+0x198>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	7912      	ldrb	r2, [r2, #4]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	408a      	lsls	r2, r1
 8003fc2:	43d2      	mvns	r2, r2
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4a41      	ldr	r2, [pc, #260]	; (80040cc <GPIO_Init+0x198>)
 8003fc8:	400b      	ands	r3, r1
 8003fca:	6093      	str	r3, [r2, #8]
 8003fcc:	e035      	b.n	800403a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	795b      	ldrb	r3, [r3, #5]
 8003fd2:	2b05      	cmp	r3, #5
 8003fd4:	d117      	bne.n	8004006 <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8003fd6:	4b3d      	ldr	r3, [pc, #244]	; (80040cc <GPIO_Init+0x198>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	7912      	ldrb	r2, [r2, #4]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	408a      	lsls	r2, r1
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	4a39      	ldr	r2, [pc, #228]	; (80040cc <GPIO_Init+0x198>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8003fec:	4b37      	ldr	r3, [pc, #220]	; (80040cc <GPIO_Init+0x198>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	7912      	ldrb	r2, [r2, #4]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	408a      	lsls	r2, r1
 8003ffa:	43d2      	mvns	r2, r2
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4a33      	ldr	r2, [pc, #204]	; (80040cc <GPIO_Init+0x198>)
 8004000:	400b      	ands	r3, r1
 8004002:	60d3      	str	r3, [r2, #12]
 8004004:	e019      	b.n	800403a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	795b      	ldrb	r3, [r3, #5]
 800400a:	2b06      	cmp	r3, #6
 800400c:	d115      	bne.n	800403a <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800400e:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <GPIO_Init+0x198>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	7912      	ldrb	r2, [r2, #4]
 8004016:	4611      	mov	r1, r2
 8004018:	2201      	movs	r2, #1
 800401a:	408a      	lsls	r2, r1
 800401c:	4611      	mov	r1, r2
 800401e:	4a2b      	ldr	r2, [pc, #172]	; (80040cc <GPIO_Init+0x198>)
 8004020:	430b      	orrs	r3, r1
 8004022:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004024:	4b29      	ldr	r3, [pc, #164]	; (80040cc <GPIO_Init+0x198>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	7912      	ldrb	r2, [r2, #4]
 800402c:	4611      	mov	r1, r2
 800402e:	2201      	movs	r2, #1
 8004030:	408a      	lsls	r2, r1
 8004032:	4611      	mov	r1, r2
 8004034:	4a25      	ldr	r2, [pc, #148]	; (80040cc <GPIO_Init+0x198>)
 8004036:	430b      	orrs	r3, r1
 8004038:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	791b      	ldrb	r3, [r3, #4]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	791b      	ldrb	r3, [r3, #4]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <GPIO_Init+0x19c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d04e      	beq.n	80040f4 <GPIO_Init+0x1c0>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <GPIO_Init+0x1a0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d032      	beq.n	80040c6 <GPIO_Init+0x192>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <GPIO_Init+0x1a4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d02b      	beq.n	80040c2 <GPIO_Init+0x18e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <GPIO_Init+0x1a8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d024      	beq.n	80040be <GPIO_Init+0x18a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <GPIO_Init+0x1ac>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01d      	beq.n	80040ba <GPIO_Init+0x186>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <GPIO_Init+0x1b0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d016      	beq.n	80040b6 <GPIO_Init+0x182>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <GPIO_Init+0x1b4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00f      	beq.n	80040b2 <GPIO_Init+0x17e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <GPIO_Init+0x1b8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d008      	beq.n	80040ae <GPIO_Init+0x17a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <GPIO_Init+0x1bc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d101      	bne.n	80040aa <GPIO_Init+0x176>
 80040a6:	2308      	movs	r3, #8
 80040a8:	e025      	b.n	80040f6 <GPIO_Init+0x1c2>
 80040aa:	2300      	movs	r3, #0
 80040ac:	e023      	b.n	80040f6 <GPIO_Init+0x1c2>
 80040ae:	2307      	movs	r3, #7
 80040b0:	e021      	b.n	80040f6 <GPIO_Init+0x1c2>
 80040b2:	2306      	movs	r3, #6
 80040b4:	e01f      	b.n	80040f6 <GPIO_Init+0x1c2>
 80040b6:	2305      	movs	r3, #5
 80040b8:	e01d      	b.n	80040f6 <GPIO_Init+0x1c2>
 80040ba:	2304      	movs	r3, #4
 80040bc:	e01b      	b.n	80040f6 <GPIO_Init+0x1c2>
 80040be:	2303      	movs	r3, #3
 80040c0:	e019      	b.n	80040f6 <GPIO_Init+0x1c2>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e017      	b.n	80040f6 <GPIO_Init+0x1c2>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e015      	b.n	80040f6 <GPIO_Init+0x1c2>
 80040ca:	bf00      	nop
 80040cc:	40013c00 	.word	0x40013c00
 80040d0:	40020000 	.word	0x40020000
 80040d4:	40020400 	.word	0x40020400
 80040d8:	40020800 	.word	0x40020800
 80040dc:	40020c00 	.word	0x40020c00
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40021400 	.word	0x40021400
 80040e8:	40021800 	.word	0x40021800
 80040ec:	40021c00 	.word	0x40021c00
 80040f0:	40022000 	.word	0x40022000
 80040f4:	2300      	movs	r3, #0
 80040f6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80040f8:	4b59      	ldr	r3, [pc, #356]	; (8004260 <GPIO_Init+0x32c>)
 80040fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fc:	4a58      	ldr	r2, [pc, #352]	; (8004260 <GPIO_Init+0x32c>)
 80040fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004102:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8004104:	7c7a      	ldrb	r2, [r7, #17]
 8004106:	7cbb      	ldrb	r3, [r7, #18]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	fa02 f103 	lsl.w	r1, r2, r3
 800410e:	4a55      	ldr	r2, [pc, #340]	; (8004264 <GPIO_Init+0x330>)
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	3302      	adds	r3, #2
 8004114:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8004118:	4b53      	ldr	r3, [pc, #332]	; (8004268 <GPIO_Init+0x334>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	7912      	ldrb	r2, [r2, #4]
 8004120:	4611      	mov	r1, r2
 8004122:	2201      	movs	r2, #1
 8004124:	408a      	lsls	r2, r1
 8004126:	4611      	mov	r1, r2
 8004128:	4a4f      	ldr	r2, [pc, #316]	; (8004268 <GPIO_Init+0x334>)
 800412a:	430b      	orrs	r3, r1
 800412c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	799b      	ldrb	r3, [r3, #6]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	791b      	ldrb	r3, [r3, #4]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	791b      	ldrb	r3, [r3, #4]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	2103      	movs	r1, #3
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	4619      	mov	r1, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	400a      	ands	r2, r1
 800415c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	79db      	ldrb	r3, [r3, #7]
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	791b      	ldrb	r3, [r3, #4]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	791b      	ldrb	r3, [r3, #4]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	2103      	movs	r1, #3
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	4619      	mov	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	400a      	ands	r2, r1
 800419c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68d9      	ldr	r1, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	7a1b      	ldrb	r3, [r3, #8]
 80041b2:	461a      	mov	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	791b      	ldrb	r3, [r3, #4]
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	791b      	ldrb	r3, [r3, #4]
 80041c8:	4619      	mov	r1, r3
 80041ca:	2301      	movs	r3, #1
 80041cc:	408b      	lsls	r3, r1
 80041ce:	43db      	mvns	r3, r3
 80041d0:	4619      	mov	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	400a      	ands	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	795b      	ldrb	r3, [r3, #5]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d131      	bne.n	8004256 <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	791b      	ldrb	r3, [r3, #4]
 80041f6:	08db      	lsrs	r3, r3, #3
 80041f8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	791b      	ldrb	r3, [r3, #4]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	7c3a      	ldrb	r2, [r7, #16]
 800420a:	3208      	adds	r2, #8
 800420c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	220f      	movs	r2, #15
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	4618      	mov	r0, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	7c3a      	ldrb	r2, [r7, #16]
 8004224:	4001      	ands	r1, r0
 8004226:	3208      	adds	r2, #8
 8004228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	7c3a      	ldrb	r2, [r7, #16]
 8004232:	3208      	adds	r2, #8
 8004234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7a5b      	ldrb	r3, [r3, #9]
 800423c:	461a      	mov	r2, r3
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	4618      	mov	r0, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	7c3a      	ldrb	r2, [r7, #16]
 800424e:	4301      	orrs	r1, r0
 8004250:	3208      	adds	r2, #8
 8004252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8004256:	bf00      	nop
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	40013800 	.word	0x40013800
 8004268:	40013c00 	.word	0x40013c00

0800426c <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
 8004278:	4613      	mov	r3, r2
 800427a:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 800427c:	78bb      	ldrb	r3, [r7, #2]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d109      	bne.n	8004296 <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f202 	lsl.w	r2, r1, r2
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 8004294:	e009      	b.n	80042aa <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	2101      	movs	r1, #1
 800429e:	fa01 f202 	lsl.w	r2, r1, r2
 80042a2:	43d2      	mvns	r2, r2
 80042a4:	401a      	ands	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	615a      	str	r2, [r3, #20]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <GPIO_IRQInterruptConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi) {
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	460a      	mov	r2, r1
 80042c2:	71fb      	strb	r3, [r7, #7]
 80042c4:	4613      	mov	r3, r2
 80042c6:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE) {
 80042c8:	79bb      	ldrb	r3, [r7, #6]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d133      	bne.n	8004336 <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31)
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	2b1f      	cmp	r3, #31
 80042d2:	d80a      	bhi.n	80042ea <GPIO_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80042d4:	4b35      	ldr	r3, [pc, #212]	; (80043ac <GPIO_IRQInterruptConfig+0xf4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	79fa      	ldrb	r2, [r7, #7]
 80042da:	2101      	movs	r1, #1
 80042dc:	fa01 f202 	lsl.w	r2, r1, r2
 80042e0:	4611      	mov	r1, r2
 80042e2:	4a32      	ldr	r2, [pc, #200]	; (80043ac <GPIO_IRQInterruptConfig+0xf4>)
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6013      	str	r3, [r2, #0]

		else if(IRQNumber >= 64 && IRQNumber < 96 )
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
	}
}
 80042e8:	e059      	b.n	800439e <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	2b1f      	cmp	r3, #31
 80042ee:	d90f      	bls.n	8004310 <GPIO_IRQInterruptConfig+0x58>
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	2b3f      	cmp	r3, #63	; 0x3f
 80042f4:	d80c      	bhi.n	8004310 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 80042f6:	4b2e      	ldr	r3, [pc, #184]	; (80043b0 <GPIO_IRQInterruptConfig+0xf8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	79fa      	ldrb	r2, [r7, #7]
 80042fc:	f002 021f 	and.w	r2, r2, #31
 8004300:	2101      	movs	r1, #1
 8004302:	fa01 f202 	lsl.w	r2, r1, r2
 8004306:	4611      	mov	r1, r2
 8004308:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <GPIO_IRQInterruptConfig+0xf8>)
 800430a:	430b      	orrs	r3, r1
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e046      	b.n	800439e <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	2b3f      	cmp	r3, #63	; 0x3f
 8004314:	d943      	bls.n	800439e <GPIO_IRQInterruptConfig+0xe6>
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	2b5f      	cmp	r3, #95	; 0x5f
 800431a:	d840      	bhi.n	800439e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 800431c:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <GPIO_IRQInterruptConfig+0xfc>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	79fa      	ldrb	r2, [r7, #7]
 8004322:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	4611      	mov	r1, r2
 800432e:	4a21      	ldr	r2, [pc, #132]	; (80043b4 <GPIO_IRQInterruptConfig+0xfc>)
 8004330:	430b      	orrs	r3, r1
 8004332:	6013      	str	r3, [r2, #0]
}
 8004334:	e033      	b.n	800439e <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	2b1f      	cmp	r3, #31
 800433a:	d80a      	bhi.n	8004352 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 800433c:	4b1e      	ldr	r3, [pc, #120]	; (80043b8 <GPIO_IRQInterruptConfig+0x100>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	79fa      	ldrb	r2, [r7, #7]
 8004342:	2101      	movs	r1, #1
 8004344:	fa01 f202 	lsl.w	r2, r1, r2
 8004348:	4611      	mov	r1, r2
 800434a:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <GPIO_IRQInterruptConfig+0x100>)
 800434c:	430b      	orrs	r3, r1
 800434e:	6013      	str	r3, [r2, #0]
}
 8004350:	e025      	b.n	800439e <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 )
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	2b1f      	cmp	r3, #31
 8004356:	d90f      	bls.n	8004378 <GPIO_IRQInterruptConfig+0xc0>
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	2b3f      	cmp	r3, #63	; 0x3f
 800435c:	d80c      	bhi.n	8004378 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <GPIO_IRQInterruptConfig+0x104>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	79fa      	ldrb	r2, [r7, #7]
 8004364:	f002 021f 	and.w	r2, r2, #31
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f202 	lsl.w	r2, r1, r2
 800436e:	4611      	mov	r1, r2
 8004370:	4a12      	ldr	r2, [pc, #72]	; (80043bc <GPIO_IRQInterruptConfig+0x104>)
 8004372:	430b      	orrs	r3, r1
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e012      	b.n	800439e <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	2b3f      	cmp	r3, #63	; 0x3f
 800437c:	d90f      	bls.n	800439e <GPIO_IRQInterruptConfig+0xe6>
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	2b5f      	cmp	r3, #95	; 0x5f
 8004382:	d80c      	bhi.n	800439e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <GPIO_IRQInterruptConfig+0x108>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	79fa      	ldrb	r2, [r7, #7]
 800438a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800438e:	2101      	movs	r1, #1
 8004390:	fa01 f202 	lsl.w	r2, r1, r2
 8004394:	4611      	mov	r1, r2
 8004396:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <GPIO_IRQInterruptConfig+0x108>)
 8004398:	430b      	orrs	r3, r1
 800439a:	6013      	str	r3, [r2, #0]
}
 800439c:	e7ff      	b.n	800439e <GPIO_IRQInterruptConfig+0xe6>
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	e000e100 	.word	0xe000e100
 80043b0:	e000e104 	.word	0xe000e104
 80043b4:	e000e108 	.word	0xe000e108
 80043b8:	e000e180 	.word	0xe000e180
 80043bc:	e000e184 	.word	0xe000e184
 80043c0:	e000e188 	.word	0xe000e188

080043c4 <GPIO_IRQPriorityConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	089b      	lsrs	r3, r3, #2
 80043d4:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 80043de:	7bbb      	ldrb	r3, [r7, #14]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	3304      	adds	r3, #4
 80043e6:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |=  (IRQPriority << shift_amount);
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80043f0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	7b7b      	ldrb	r3, [r7, #13]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	409a      	lsls	r2, r3
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004404:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d11f      	bne.n	800446a <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a12      	ldr	r2, [pc, #72]	; (8004478 <SPI_PeriClockControl+0x60>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d106      	bne.n	8004440 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <SPI_PeriClockControl+0x64>)
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	4a11      	ldr	r2, [pc, #68]	; (800447c <SPI_PeriClockControl+0x64>)
 8004438:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800443c:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 800443e:	e014      	b.n	800446a <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a0f      	ldr	r2, [pc, #60]	; (8004480 <SPI_PeriClockControl+0x68>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d106      	bne.n	8004456 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <SPI_PeriClockControl+0x64>)
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	4a0b      	ldr	r2, [pc, #44]	; (800447c <SPI_PeriClockControl+0x64>)
 800444e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004452:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004454:	e009      	b.n	800446a <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a0a      	ldr	r2, [pc, #40]	; (8004484 <SPI_PeriClockControl+0x6c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d105      	bne.n	800446a <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <SPI_PeriClockControl+0x64>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a06      	ldr	r2, [pc, #24]	; (800447c <SPI_PeriClockControl+0x64>)
 8004464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40013000 	.word	0x40013000
 800447c:	40023800 	.word	0x40023800
 8004480:	40003800 	.word	0x40003800
 8004484:	40003c00 	.word	0x40003c00

08004488 <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2101      	movs	r1, #1
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff ffbe 	bl	8004418 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	791b      	ldrb	r3, [r3, #4]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	461a      	mov	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	795b      	ldrb	r3, [r3, #5]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d104      	bne.n	80044c0 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e014      	b.n	80044ea <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	795b      	ldrb	r3, [r3, #5]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d104      	bne.n	80044d2 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e00b      	b.n	80044ea <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	795b      	ldrb	r3, [r3, #5]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d107      	bne.n	80044ea <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044e0:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044e8:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	799b      	ldrb	r3, [r3, #6]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	461a      	mov	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	79db      	ldrb	r3, [r3, #7]
 80044fc:	02db      	lsls	r3, r3, #11
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	7a1b      	ldrb	r3, [r3, #8]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	461a      	mov	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	7a5b      	ldrb	r3, [r3, #9]
 8004518:	461a      	mov	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	7a9b      	ldrb	r3, [r3, #10]
 8004524:	025b      	lsls	r3, r3, #9
 8004526:	461a      	mov	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	601a      	str	r2, [r3, #0]

}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	70fb      	strb	r3, [r7, #3]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 800454a:	bf00      	nop
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f9      	beq.n	800454c <SPI_Transfer+0xe>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f3      	bne.n	800454c <SPI_Transfer+0xe>
	pSPIx->DR = data;
 8004564:	78fa      	ldrb	r2, [r7, #3]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60da      	str	r2, [r3, #12]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 800456a:	bf00      	nop
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f9      	beq.n	800456c <SPI_Transfer+0x2e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f3      	bne.n	800456c <SPI_Transfer+0x2e>
	return pSPIx->DR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d106      	bne.n	80045b4 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 80045b2:	e005      	b.n	80045c0 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	601a      	str	r2, [r3, #0]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d106      	bne.n	80045ec <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f043 0204 	orr.w	r2, r3, #4
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 80045ea:	e005      	b.n	80045f8 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f023 0204 	bic.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	605a      	str	r2, [r3, #4]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004612:	2205      	movs	r2, #5
 8004614:	492b      	ldr	r1, [pc, #172]	; (80046c4 <SYSVIEW_AddTask+0xc0>)
 8004616:	68b8      	ldr	r0, [r7, #8]
 8004618:	f001 ff84 	bl	8006524 <memcmp>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d04b      	beq.n	80046ba <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004622:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <SYSVIEW_AddTask+0xc4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b07      	cmp	r3, #7
 8004628:	d903      	bls.n	8004632 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800462a:	4828      	ldr	r0, [pc, #160]	; (80046cc <SYSVIEW_AddTask+0xc8>)
 800462c:	f001 fbc4 	bl	8005db8 <SEGGER_SYSVIEW_Warn>
    return;
 8004630:	e044      	b.n	80046bc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004632:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <SYSVIEW_AddTask+0xc4>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4926      	ldr	r1, [pc, #152]	; (80046d0 <SYSVIEW_AddTask+0xcc>)
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <SYSVIEW_AddTask+0xc4>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4921      	ldr	r1, [pc, #132]	; (80046d0 <SYSVIEW_AddTask+0xcc>)
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	3304      	adds	r3, #4
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800465c:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <SYSVIEW_AddTask+0xc4>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	491b      	ldr	r1, [pc, #108]	; (80046d0 <SYSVIEW_AddTask+0xcc>)
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	3308      	adds	r3, #8
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <SYSVIEW_AddTask+0xc4>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4916      	ldr	r1, [pc, #88]	; (80046d0 <SYSVIEW_AddTask+0xcc>)
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	330c      	adds	r3, #12
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <SYSVIEW_AddTask+0xc4>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4910      	ldr	r1, [pc, #64]	; (80046d0 <SYSVIEW_AddTask+0xcc>)
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	3310      	adds	r3, #16
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <SYSVIEW_AddTask+0xc4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <SYSVIEW_AddTask+0xc4>)
 80046a6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f80e 	bl	80046d4 <SYSVIEW_SendTaskInfo>
 80046b8:	e000      	b.n	80046bc <SYSVIEW_AddTask+0xb8>
    return;
 80046ba:	bf00      	nop

}
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	08009288 	.word	0x08009288
 80046c8:	20013004 	.word	0x20013004
 80046cc:	08009290 	.word	0x08009290
 80046d0:	20012f64 	.word	0x20012f64

080046d4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	; 0x28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80046e2:	f107 0314 	add.w	r3, r7, #20
 80046e6:	2214      	movs	r2, #20
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 ff36 	bl	800655c <memset>
  TaskInfo.TaskID     = TaskID;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004704:	f107 0314 	add.w	r3, r7, #20
 8004708:	4618      	mov	r0, r3
 800470a:	f000 ff83 	bl	8005614 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800470e:	bf00      	nop
 8004710:	3728      	adds	r7, #40	; 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800471e:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <_DoInit+0x98>)
 8004720:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2203      	movs	r2, #3
 8004726:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2203      	movs	r2, #3
 800472c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a20      	ldr	r2, [pc, #128]	; (80047b4 <_DoInit+0x9c>)
 8004732:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <_DoInit+0xa0>)
 8004738:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004740:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <_DoInit+0x9c>)
 8004758:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a17      	ldr	r2, [pc, #92]	; (80047bc <_DoInit+0xa4>)
 800475e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2210      	movs	r2, #16
 8004764:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3307      	adds	r3, #7
 800477c:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <_DoInit+0xa8>)
 800477e:	6810      	ldr	r0, [r2, #0]
 8004780:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004782:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <_DoInit+0xac>)
 800478a:	6810      	ldr	r0, [r2, #0]
 800478c:	6018      	str	r0, [r3, #0]
 800478e:	8891      	ldrh	r1, [r2, #4]
 8004790:	7992      	ldrb	r2, [r2, #6]
 8004792:	8099      	strh	r1, [r3, #4]
 8004794:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004796:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80047a0:	f3bf 8f5f 	dmb	sy
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	2001378c 	.word	0x2001378c
 80047b4:	080092e0 	.word	0x080092e0
 80047b8:	20013008 	.word	0x20013008
 80047bc:	20013408 	.word	0x20013408
 80047c0:	080092ec 	.word	0x080092ec
 80047c4:	080092f0 	.word	0x080092f0

080047c8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80047d4:	2300      	movs	r3, #0
 80047d6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d905      	bls.n	80047f8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
 80047f6:	e007      	b.n	8004808 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	69b9      	ldr	r1, [r7, #24]
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	1acb      	subs	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3b01      	subs	r3, #1
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	4293      	cmp	r3, r2
 8004814:	bf28      	it	cs
 8004816:	4613      	movcs	r3, r2
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800481a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4293      	cmp	r3, r2
 8004820:	bf28      	it	cs
 8004822:	4613      	movcs	r3, r2
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	4413      	add	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	6978      	ldr	r0, [r7, #20]
 8004836:	f001 fe83 	bl	8006540 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800483a:	6a3a      	ldr	r2, [r7, #32]
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	4413      	add	r3, r2
 8004840:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	4413      	add	r3, r2
 8004848:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	4413      	add	r3, r2
 8004858:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	429a      	cmp	r2, r3
 8004862:	d101      	bne.n	8004868 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004868:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1b2      	bne.n	80047de <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004878:	6a3b      	ldr	r3, [r7, #32]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3728      	adds	r7, #40	; 0x28
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004882:	b580      	push	{r7, lr}
 8004884:	b088      	sub	sp, #32
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d911      	bls.n	80048ca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4413      	add	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	6938      	ldr	r0, [r7, #16]
 80048b6:	f001 fe43 	bl	8006540 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80048ba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	441a      	add	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80048c8:	e01f      	b.n	800490a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	6938      	ldr	r0, [r7, #16]
 80048de:	f001 fe2f 	bl	8006540 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	4413      	add	r3, r2
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4619      	mov	r1, r3
 80048fa:	6938      	ldr	r0, [r7, #16]
 80048fc:	f001 fe20 	bl	8006540 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004900:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	60da      	str	r2, [r3, #12]
}
 800490a:	bf00      	nop
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004912:	b480      	push	{r7}
 8004914:	b087      	sub	sp, #28
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	429a      	cmp	r2, r3
 800492c:	d808      	bhi.n	8004940 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad2      	subs	r2, r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4413      	add	r3, r2
 800493a:	3b01      	subs	r3, #1
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e004      	b.n	800494a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
  }
  return r;
 800494a:	697b      	ldr	r3, [r7, #20]
}
 800494c:	4618      	mov	r0, r3
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b08c      	sub	sp, #48	; 0x30
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004964:	4b3e      	ldr	r3, [pc, #248]	; (8004a60 <SEGGER_RTT_ReadNoLock+0x108>)
 8004966:	623b      	str	r3, [r7, #32]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <SEGGER_RTT_ReadNoLock+0x1e>
 8004972:	f7ff fed1 	bl	8004718 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4613      	mov	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4413      	add	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	3360      	adds	r3, #96	; 0x60
 8004982:	4a37      	ldr	r2, [pc, #220]	; (8004a60 <SEGGER_RTT_ReadNoLock+0x108>)
 8004984:	4413      	add	r3, r2
 8004986:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004998:	2300      	movs	r3, #0
 800499a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800499c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d92b      	bls.n	80049fc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4293      	cmp	r3, r2
 80049b4:	bf28      	it	cs
 80049b6:	4613      	movcs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c0:	4413      	add	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	6939      	ldr	r1, [r7, #16]
 80049c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049ca:	f001 fdb9 	bl	8006540 <memcpy>
    NumBytesRead += NumBytesRem;
 80049ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	4413      	add	r3, r2
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	4413      	add	r3, r2
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80049e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	4413      	add	r3, r2
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d101      	bne.n	80049fc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80049f8:	2300      	movs	r3, #0
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	bf28      	it	cs
 8004a0c:	4613      	movcs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d019      	beq.n	8004a4a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	4413      	add	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	6939      	ldr	r1, [r7, #16]
 8004a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a26:	f001 fd8b 	bl	8006540 <memcpy>
    NumBytesRead += NumBytesRem;
 8004a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	4413      	add	r3, r2
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4413      	add	r3, r2
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	4413      	add	r3, r2
 8004a48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a54:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3730      	adds	r7, #48	; 0x30
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	2001378c 	.word	0x2001378c

08004a64 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004a82:	4413      	add	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d029      	beq.n	8004ae2 <SEGGER_RTT_WriteNoLock+0x7e>
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d82e      	bhi.n	8004af0 <SEGGER_RTT_WriteNoLock+0x8c>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <SEGGER_RTT_WriteNoLock+0x38>
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d013      	beq.n	8004ac2 <SEGGER_RTT_WriteNoLock+0x5e>
 8004a9a:	e029      	b.n	8004af0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004a9c:	6978      	ldr	r0, [r7, #20]
 8004a9e:	f7ff ff38 	bl	8004912 <_GetAvailWriteSpace>
 8004aa2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d202      	bcs.n	8004ab2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004ab0:	e021      	b.n	8004af6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	69b9      	ldr	r1, [r7, #24]
 8004aba:	6978      	ldr	r0, [r7, #20]
 8004abc:	f7ff fee1 	bl	8004882 <_WriteNoCheck>
    break;
 8004ac0:	e019      	b.n	8004af6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff ff25 	bl	8004912 <_GetAvailWriteSpace>
 8004ac8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	bf28      	it	cs
 8004ad2:	4613      	movcs	r3, r2
 8004ad4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	69b9      	ldr	r1, [r7, #24]
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff fed1 	bl	8004882 <_WriteNoCheck>
    break;
 8004ae0:	e009      	b.n	8004af6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	6978      	ldr	r0, [r7, #20]
 8004ae8:	f7ff fe6e 	bl	80047c8 <_WriteBlocking>
 8004aec:	61f8      	str	r0, [r7, #28]
    break;
 8004aee:	e002      	b.n	8004af6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]
    break;
 8004af4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004af6:	69fb      	ldr	r3, [r7, #28]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3720      	adds	r7, #32
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	2001378c 	.word	0x2001378c

08004b04 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004b10:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <SEGGER_RTT_Write+0x48>)
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <SEGGER_RTT_Write+0x1e>
 8004b1e:	f7ff fdfb 	bl	8004718 <_DoInit>
  SEGGER_RTT_LOCK();
 8004b22:	f3ef 8311 	mrs	r3, BASEPRI
 8004b26:	f04f 0120 	mov.w	r1, #32
 8004b2a:	f381 8811 	msr	BASEPRI, r1
 8004b2e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ff95 	bl	8004a64 <SEGGER_RTT_WriteNoLock>
 8004b3a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004b42:	697b      	ldr	r3, [r7, #20]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	2001378c 	.word	0x2001378c

08004b50 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00f      	beq.n	8004b86 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004b66:	e002      	b.n	8004b6e <_EncodeStr+0x1e>
      Len++;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4413      	add	r3, r2
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f6      	bne.n	8004b68 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d901      	bls.n	8004b86 <_EncodeStr+0x36>
      Len = Limit;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2bfe      	cmp	r3, #254	; 0xfe
 8004b8a:	d806      	bhi.n	8004b9a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	60fa      	str	r2, [r7, #12]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e011      	b.n	8004bbe <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	60fa      	str	r2, [r7, #12]
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	60fa      	str	r2, [r7, #12]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	0a19      	lsrs	r1, r3, #8
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	60fa      	str	r2, [r7, #12]
 8004bba:	b2ca      	uxtb	r2, r1
 8004bbc:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004bc2:	e00a      	b.n	8004bda <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	1c53      	adds	r3, r2, #1
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1c59      	adds	r1, r3, #1
 8004bce:	60f9      	str	r1, [r7, #12]
 8004bd0:	7812      	ldrb	r2, [r2, #0]
 8004bd2:	701a      	strb	r2, [r3, #0]
    n++;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d3f0      	bcc.n	8004bc4 <_EncodeStr+0x74>
  }
  return pPayload;
 8004be2:	68fb      	ldr	r3, [r7, #12]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c0e:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <_HandleIncomingPacket+0xe0>)
 8004c10:	7e1b      	ldrb	r3, [r3, #24]
 8004c12:	4618      	mov	r0, r3
 8004c14:	1cfb      	adds	r3, r7, #3
 8004c16:	2201      	movs	r2, #1
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7ff fe9d 	bl	8004958 <SEGGER_RTT_ReadNoLock>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	dd54      	ble.n	8004cd2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d032      	beq.n	8004c94 <_HandleIncomingPacket+0x8c>
 8004c2e:	2b80      	cmp	r3, #128	; 0x80
 8004c30:	dc42      	bgt.n	8004cb8 <_HandleIncomingPacket+0xb0>
 8004c32:	2b07      	cmp	r3, #7
 8004c34:	dc16      	bgt.n	8004c64 <_HandleIncomingPacket+0x5c>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	dd3e      	ble.n	8004cb8 <_HandleIncomingPacket+0xb0>
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	2b06      	cmp	r3, #6
 8004c3e:	d83b      	bhi.n	8004cb8 <_HandleIncomingPacket+0xb0>
 8004c40:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <_HandleIncomingPacket+0x40>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c6b 	.word	0x08004c6b
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c77 	.word	0x08004c77
 8004c54:	08004c7d 	.word	0x08004c7d
 8004c58:	08004c83 	.word	0x08004c83
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	08004c8f 	.word	0x08004c8f
 8004c64:	2b7f      	cmp	r3, #127	; 0x7f
 8004c66:	d036      	beq.n	8004cd6 <_HandleIncomingPacket+0xce>
 8004c68:	e026      	b.n	8004cb8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004c6a:	f000 fb57 	bl	800531c <SEGGER_SYSVIEW_Start>
      break;
 8004c6e:	e037      	b.n	8004ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004c70:	f000 fc10 	bl	8005494 <SEGGER_SYSVIEW_Stop>
      break;
 8004c74:	e034      	b.n	8004ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004c76:	f000 fdc5 	bl	8005804 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004c7a:	e031      	b.n	8004ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004c7c:	f000 fdae 	bl	80057dc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004c80:	e02e      	b.n	8004ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004c82:	f000 fc2d 	bl	80054e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004c86:	e02b      	b.n	8004ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004c88:	f001 f858 	bl	8005d3c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004c8c:	e028      	b.n	8004ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004c8e:	f001 f837 	bl	8005d00 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004c92:	e025      	b.n	8004ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <_HandleIncomingPacket+0xe0>)
 8004c96:	7e1b      	ldrb	r3, [r3, #24]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	1cfb      	adds	r3, r7, #3
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f7ff fe5a 	bl	8004958 <SEGGER_RTT_ReadNoLock>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	dd15      	ble.n	8004cda <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 ffa5 	bl	8005c00 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004cb6:	e010      	b.n	8004cda <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	b25b      	sxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	da0e      	bge.n	8004cde <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <_HandleIncomingPacket+0xe0>)
 8004cc2:	7e1b      	ldrb	r3, [r3, #24]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	1cfb      	adds	r3, r7, #3
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f7ff fe44 	bl	8004958 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004cd0:	e005      	b.n	8004cde <_HandleIncomingPacket+0xd6>
    }
  }
 8004cd2:	bf00      	nop
 8004cd4:	e004      	b.n	8004ce0 <_HandleIncomingPacket+0xd8>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e002      	b.n	8004ce0 <_HandleIncomingPacket+0xd8>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e000      	b.n	8004ce0 <_HandleIncomingPacket+0xd8>
      break;
 8004cde:	bf00      	nop
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20013418 	.word	0x20013418

08004cec <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08c      	sub	sp, #48	; 0x30
 8004cf0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004cf6:	1d3b      	adds	r3, r7, #4
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d00:	4b32      	ldr	r3, [pc, #200]	; (8004dcc <_TrySendOverflowPacket+0xe0>)
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d06:	e00b      	b.n	8004d20 <_TrySendOverflowPacket+0x34>
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	09db      	lsrs	r3, r3, #7
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	2b7f      	cmp	r3, #127	; 0x7f
 8004d24:	d8f0      	bhi.n	8004d08 <_TrySendOverflowPacket+0x1c>
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d36:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <_TrySendOverflowPacket+0xe4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d3c:	4b23      	ldr	r3, [pc, #140]	; (8004dcc <_TrySendOverflowPacket+0xe0>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	623b      	str	r3, [r7, #32]
 8004d4e:	e00b      	b.n	8004d68 <_TrySendOverflowPacket+0x7c>
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	1c59      	adds	r1, r3, #1
 8004d58:	6279      	str	r1, [r7, #36]	; 0x24
 8004d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	09db      	lsrs	r3, r3, #7
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d6c:	d8f0      	bhi.n	8004d50 <_TrySendOverflowPacket+0x64>
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	627a      	str	r2, [r7, #36]	; 0x24
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <_TrySendOverflowPacket+0xe0>)
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	4618      	mov	r0, r3
 8004d84:	1d3b      	adds	r3, r7, #4
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	1d3b      	adds	r3, r7, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f7fb fa2e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004d94:	4603      	mov	r3, r0
 8004d96:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004d98:	f001 f8c6 	bl	8005f28 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004da2:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <_TrySendOverflowPacket+0xe0>)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004da8:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <_TrySendOverflowPacket+0xe0>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <_TrySendOverflowPacket+0xe0>)
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	e004      	b.n	8004dc0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <_TrySendOverflowPacket+0xe0>)
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	4a03      	ldr	r2, [pc, #12]	; (8004dcc <_TrySendOverflowPacket+0xe0>)
 8004dbe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004dc0:	693b      	ldr	r3, [r7, #16]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3730      	adds	r7, #48	; 0x30
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20013418 	.word	0x20013418
 8004dd0:	e0001004 	.word	0xe0001004

08004dd4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08a      	sub	sp, #40	; 0x28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004de0:	4b6d      	ldr	r3, [pc, #436]	; (8004f98 <_SendPacket+0x1c4>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d010      	beq.n	8004e0a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004de8:	4b6b      	ldr	r3, [pc, #428]	; (8004f98 <_SendPacket+0x1c4>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80a5 	beq.w	8004f3c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004df2:	4b69      	ldr	r3, [pc, #420]	; (8004f98 <_SendPacket+0x1c4>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d109      	bne.n	8004e0e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004dfa:	f7ff ff77 	bl	8004cec <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004dfe:	4b66      	ldr	r3, [pc, #408]	; (8004f98 <_SendPacket+0x1c4>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	f040 809c 	bne.w	8004f40 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004e08:	e001      	b.n	8004e0e <_SendPacket+0x3a>
    goto Send;
 8004e0a:	bf00      	nop
 8004e0c:	e000      	b.n	8004e10 <_SendPacket+0x3c>
Send:
 8004e0e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b1f      	cmp	r3, #31
 8004e14:	d809      	bhi.n	8004e2a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004e16:	4b60      	ldr	r3, [pc, #384]	; (8004f98 <_SendPacket+0x1c4>)
 8004e18:	69da      	ldr	r2, [r3, #28]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f040 808d 	bne.w	8004f44 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b17      	cmp	r3, #23
 8004e2e:	d807      	bhi.n	8004e40 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	e03d      	b.n	8004ebc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e4c:	d912      	bls.n	8004e74 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	09da      	lsrs	r2, r3, #7
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	3a01      	subs	r2, #1
 8004e66:	60fa      	str	r2, [r7, #12]
 8004e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e006      	b.n	8004e82 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b7f      	cmp	r3, #127	; 0x7f
 8004e86:	d912      	bls.n	8004eae <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	09da      	lsrs	r2, r3, #7
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	60fa      	str	r2, [r7, #12]
 8004ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	e006      	b.n	8004ebc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ebc:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <_SendPacket+0x1c8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ec2:	4b35      	ldr	r3, [pc, #212]	; (8004f98 <_SendPacket+0x1c4>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	623b      	str	r3, [r7, #32]
 8004ed4:	e00b      	b.n	8004eee <_SendPacket+0x11a>
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	1c59      	adds	r1, r3, #1
 8004ede:	6279      	str	r1, [r7, #36]	; 0x24
 8004ee0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	09db      	lsrs	r3, r3, #7
 8004eec:	623b      	str	r3, [r7, #32]
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef2:	d8f0      	bhi.n	8004ed6 <_SendPacket+0x102>
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	627a      	str	r2, [r7, #36]	; 0x24
 8004efa:	6a3a      	ldr	r2, [r7, #32]
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004f04:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <_SendPacket+0x1c4>)
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	68f9      	ldr	r1, [r7, #12]
 8004f14:	f7fb f96c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004f1c:	f001 f804 	bl	8005f28 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f26:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <_SendPacket+0x1c4>)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	60d3      	str	r3, [r2, #12]
 8004f2c:	e00b      	b.n	8004f46 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004f2e:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <_SendPacket+0x1c4>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	3301      	adds	r3, #1
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <_SendPacket+0x1c4>)
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	e004      	b.n	8004f46 <_SendPacket+0x172>
    goto SendDone;
 8004f3c:	bf00      	nop
 8004f3e:	e002      	b.n	8004f46 <_SendPacket+0x172>
      goto SendDone;
 8004f40:	bf00      	nop
 8004f42:	e000      	b.n	8004f46 <_SendPacket+0x172>
      goto SendDone;
 8004f44:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004f46:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <_SendPacket+0x1c4>)
 8004f48:	7e1b      	ldrb	r3, [r3, #24]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <_SendPacket+0x1cc>)
 8004f4e:	460b      	mov	r3, r1
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	440b      	add	r3, r1
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	336c      	adds	r3, #108	; 0x6c
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <_SendPacket+0x1c4>)
 8004f5e:	7e1b      	ldrb	r3, [r3, #24]
 8004f60:	4618      	mov	r0, r3
 8004f62:	490f      	ldr	r1, [pc, #60]	; (8004fa0 <_SendPacket+0x1cc>)
 8004f64:	4603      	mov	r3, r0
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	4403      	add	r3, r0
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	440b      	add	r3, r1
 8004f6e:	3370      	adds	r3, #112	; 0x70
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d00b      	beq.n	8004f8e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <_SendPacket+0x1c4>)
 8004f78:	789b      	ldrb	r3, [r3, #2]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d107      	bne.n	8004f8e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <_SendPacket+0x1c4>)
 8004f80:	2201      	movs	r2, #1
 8004f82:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f84:	f7ff fe40 	bl	8004c08 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <_SendPacket+0x1c4>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004f8e:	bf00      	nop
 8004f90:	3728      	adds	r7, #40	; 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20013418 	.word	0x20013418
 8004f9c:	e0001004 	.word	0xe0001004
 8004fa0:	2001378c 	.word	0x2001378c

08004fa4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fac:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb0:	f04f 0120 	mov.w	r1, #32
 8004fb4:	f381 8811 	msr	BASEPRI, r1
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4808      	ldr	r0, [pc, #32]	; (8004fdc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004fbc:	f7ff fe18 	bl	8004bf0 <_PreparePacket>
 8004fc0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68b8      	ldr	r0, [r7, #8]
 8004fc8:	f7ff ff04 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f383 8811 	msr	BASEPRI, r3
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20013448 	.word	0x20013448

08004fe0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fea:	f3ef 8311 	mrs	r3, BASEPRI
 8004fee:	f04f 0120 	mov.w	r1, #32
 8004ff2:	f381 8811 	msr	BASEPRI, r1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	4816      	ldr	r0, [pc, #88]	; (8005054 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004ffa:	f7ff fdf9 	bl	8004bf0 <_PreparePacket>
 8004ffe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	e00b      	b.n	8005026 <SEGGER_SYSVIEW_RecordU32+0x46>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	1c59      	adds	r1, r3, #1
 8005016:	61f9      	str	r1, [r7, #28]
 8005018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	09db      	lsrs	r3, r3, #7
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b7f      	cmp	r3, #127	; 0x7f
 800502a:	d8f0      	bhi.n	800500e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	61fa      	str	r2, [r7, #28]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	6938      	ldr	r0, [r7, #16]
 8005042:	f7ff fec7 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f383 8811 	msr	BASEPRI, r3
}
 800504c:	bf00      	nop
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20013448 	.word	0x20013448

08005058 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b08c      	sub	sp, #48	; 0x30
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005064:	f3ef 8311 	mrs	r3, BASEPRI
 8005068:	f04f 0120 	mov.w	r1, #32
 800506c:	f381 8811 	msr	BASEPRI, r1
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	4825      	ldr	r0, [pc, #148]	; (8005108 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005074:	f7ff fdbc 	bl	8004bf0 <_PreparePacket>
 8005078:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28
 8005086:	e00b      	b.n	80050a0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	b2da      	uxtb	r2, r3
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	1c59      	adds	r1, r3, #1
 8005090:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005092:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	09db      	lsrs	r3, r3, #7
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	2b7f      	cmp	r3, #127	; 0x7f
 80050a4:	d8f0      	bhi.n	8005088 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	e00b      	b.n	80050d8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	1c59      	adds	r1, r3, #1
 80050c8:	6279      	str	r1, [r7, #36]	; 0x24
 80050ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	09db      	lsrs	r3, r3, #7
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2b7f      	cmp	r3, #127	; 0x7f
 80050dc:	d8f0      	bhi.n	80050c0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	627a      	str	r2, [r7, #36]	; 0x24
 80050e4:	6a3a      	ldr	r2, [r7, #32]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	6979      	ldr	r1, [r7, #20]
 80050f2:	69b8      	ldr	r0, [r7, #24]
 80050f4:	f7ff fe6e 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f383 8811 	msr	BASEPRI, r3
}
 80050fe:	bf00      	nop
 8005100:	3730      	adds	r7, #48	; 0x30
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20013448 	.word	0x20013448

0800510c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b08e      	sub	sp, #56	; 0x38
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800511a:	f3ef 8311 	mrs	r3, BASEPRI
 800511e:	f04f 0120 	mov.w	r1, #32
 8005122:	f381 8811 	msr	BASEPRI, r1
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	4832      	ldr	r0, [pc, #200]	; (80051f4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800512a:	f7ff fd61 	bl	8004bf0 <_PreparePacket>
 800512e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	633b      	str	r3, [r7, #48]	; 0x30
 800513c:	e00b      	b.n	8005156 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	b2da      	uxtb	r2, r3
 8005142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005144:	1c59      	adds	r1, r3, #1
 8005146:	6379      	str	r1, [r7, #52]	; 0x34
 8005148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	09db      	lsrs	r3, r3, #7
 8005154:	633b      	str	r3, [r7, #48]	; 0x30
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	2b7f      	cmp	r3, #127	; 0x7f
 800515a:	d8f0      	bhi.n	800513e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800515c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	637a      	str	r2, [r7, #52]	; 0x34
 8005162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28
 8005174:	e00b      	b.n	800518e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	b2da      	uxtb	r2, r3
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	1c59      	adds	r1, r3, #1
 800517e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	09db      	lsrs	r3, r3, #7
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	2b7f      	cmp	r3, #127	; 0x7f
 8005192:	d8f0      	bhi.n	8005176 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800519a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	623b      	str	r3, [r7, #32]
 80051ac:	e00b      	b.n	80051c6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1c59      	adds	r1, r3, #1
 80051b6:	6279      	str	r1, [r7, #36]	; 0x24
 80051b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	09db      	lsrs	r3, r3, #7
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ca:	d8f0      	bhi.n	80051ae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	627a      	str	r2, [r7, #36]	; 0x24
 80051d2:	6a3a      	ldr	r2, [r7, #32]
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	6979      	ldr	r1, [r7, #20]
 80051e0:	69b8      	ldr	r0, [r7, #24]
 80051e2:	f7ff fdf7 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f383 8811 	msr	BASEPRI, r3
}
 80051ec:	bf00      	nop
 80051ee:	3738      	adds	r7, #56	; 0x38
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20013448 	.word	0x20013448

080051f8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b090      	sub	sp, #64	; 0x40
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005206:	f3ef 8311 	mrs	r3, BASEPRI
 800520a:	f04f 0120 	mov.w	r1, #32
 800520e:	f381 8811 	msr	BASEPRI, r1
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	4840      	ldr	r0, [pc, #256]	; (8005318 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005216:	f7ff fceb 	bl	8004bf0 <_PreparePacket>
 800521a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
 8005228:	e00b      	b.n	8005242 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	b2da      	uxtb	r2, r3
 800522e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005230:	1c59      	adds	r1, r3, #1
 8005232:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	09db      	lsrs	r3, r3, #7
 8005240:	63bb      	str	r3, [r7, #56]	; 0x38
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b7f      	cmp	r3, #127	; 0x7f
 8005246:	d8f0      	bhi.n	800522a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800524e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005256:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	633b      	str	r3, [r7, #48]	; 0x30
 8005260:	e00b      	b.n	800527a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	b2da      	uxtb	r2, r3
 8005266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005268:	1c59      	adds	r1, r3, #1
 800526a:	6379      	str	r1, [r7, #52]	; 0x34
 800526c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	09db      	lsrs	r3, r3, #7
 8005278:	633b      	str	r3, [r7, #48]	; 0x30
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2b7f      	cmp	r3, #127	; 0x7f
 800527e:	d8f0      	bhi.n	8005262 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	637a      	str	r2, [r7, #52]	; 0x34
 8005286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
 8005298:	e00b      	b.n	80052b2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	b2da      	uxtb	r2, r3
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	1c59      	adds	r1, r3, #1
 80052a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	09db      	lsrs	r3, r3, #7
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	2b7f      	cmp	r3, #127	; 0x7f
 80052b6:	d8f0      	bhi.n	800529a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
 80052cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	e00b      	b.n	80052ea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	1c59      	adds	r1, r3, #1
 80052da:	6279      	str	r1, [r7, #36]	; 0x24
 80052dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	09db      	lsrs	r3, r3, #7
 80052e8:	623b      	str	r3, [r7, #32]
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	2b7f      	cmp	r3, #127	; 0x7f
 80052ee:	d8f0      	bhi.n	80052d2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	627a      	str	r2, [r7, #36]	; 0x24
 80052f6:	6a3a      	ldr	r2, [r7, #32]
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	6979      	ldr	r1, [r7, #20]
 8005304:	69b8      	ldr	r0, [r7, #24]
 8005306:	f7ff fd65 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f383 8811 	msr	BASEPRI, r3
}
 8005310:	bf00      	nop
 8005312:	3740      	adds	r7, #64	; 0x40
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20013448 	.word	0x20013448

0800531c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b08c      	sub	sp, #48	; 0x30
 8005320:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005322:	4b59      	ldr	r3, [pc, #356]	; (8005488 <SEGGER_SYSVIEW_Start+0x16c>)
 8005324:	2201      	movs	r2, #1
 8005326:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005328:	f3ef 8311 	mrs	r3, BASEPRI
 800532c:	f04f 0120 	mov.w	r1, #32
 8005330:	f381 8811 	msr	BASEPRI, r1
 8005334:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005336:	4b54      	ldr	r3, [pc, #336]	; (8005488 <SEGGER_SYSVIEW_Start+0x16c>)
 8005338:	785b      	ldrb	r3, [r3, #1]
 800533a:	220a      	movs	r2, #10
 800533c:	4953      	ldr	r1, [pc, #332]	; (800548c <SEGGER_SYSVIEW_Start+0x170>)
 800533e:	4618      	mov	r0, r3
 8005340:	f7fa ff56 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800534a:	f000 fded 	bl	8005f28 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800534e:	200a      	movs	r0, #10
 8005350:	f7ff fe28 	bl	8004fa4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005354:	f3ef 8311 	mrs	r3, BASEPRI
 8005358:	f04f 0120 	mov.w	r1, #32
 800535c:	f381 8811 	msr	BASEPRI, r1
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	484b      	ldr	r0, [pc, #300]	; (8005490 <SEGGER_SYSVIEW_Start+0x174>)
 8005364:	f7ff fc44 	bl	8004bf0 <_PreparePacket>
 8005368:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005372:	4b45      	ldr	r3, [pc, #276]	; (8005488 <SEGGER_SYSVIEW_Start+0x16c>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
 8005378:	e00b      	b.n	8005392 <SEGGER_SYSVIEW_Start+0x76>
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	b2da      	uxtb	r2, r3
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	1c59      	adds	r1, r3, #1
 8005382:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	09db      	lsrs	r3, r3, #7
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	2b7f      	cmp	r3, #127	; 0x7f
 8005396:	d8f0      	bhi.n	800537a <SEGGER_SYSVIEW_Start+0x5e>
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800539e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
 80053ac:	4b36      	ldr	r3, [pc, #216]	; (8005488 <SEGGER_SYSVIEW_Start+0x16c>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	e00b      	b.n	80053cc <SEGGER_SYSVIEW_Start+0xb0>
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	1c59      	adds	r1, r3, #1
 80053bc:	6279      	str	r1, [r7, #36]	; 0x24
 80053be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	09db      	lsrs	r3, r3, #7
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	2b7f      	cmp	r3, #127	; 0x7f
 80053d0:	d8f0      	bhi.n	80053b4 <SEGGER_SYSVIEW_Start+0x98>
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	627a      	str	r2, [r7, #36]	; 0x24
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	4b28      	ldr	r3, [pc, #160]	; (8005488 <SEGGER_SYSVIEW_Start+0x16c>)
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	e00b      	b.n	8005406 <SEGGER_SYSVIEW_Start+0xea>
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	1c59      	adds	r1, r3, #1
 80053f6:	61f9      	str	r1, [r7, #28]
 80053f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	09db      	lsrs	r3, r3, #7
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b7f      	cmp	r3, #127	; 0x7f
 800540a:	d8f0      	bhi.n	80053ee <SEGGER_SYSVIEW_Start+0xd2>
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	61fa      	str	r2, [r7, #28]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	e00b      	b.n	800543e <SEGGER_SYSVIEW_Start+0x122>
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	1c59      	adds	r1, r3, #1
 800542e:	6179      	str	r1, [r7, #20]
 8005430:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	09db      	lsrs	r3, r3, #7
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b7f      	cmp	r3, #127	; 0x7f
 8005442:	d8f0      	bhi.n	8005426 <SEGGER_SYSVIEW_Start+0x10a>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	617a      	str	r2, [r7, #20]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005454:	2218      	movs	r2, #24
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff fcbb 	bl	8004dd4 <_SendPacket>
      RECORD_END();
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005464:	4b08      	ldr	r3, [pc, #32]	; (8005488 <SEGGER_SYSVIEW_Start+0x16c>)
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <SEGGER_SYSVIEW_Start+0x16c>)
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005472:	f000 f9c7 	bl	8005804 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005476:	f000 f9b1 	bl	80057dc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800547a:	f000 fc5f 	bl	8005d3c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800547e:	bf00      	nop
 8005480:	3730      	adds	r7, #48	; 0x30
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20013418 	.word	0x20013418
 800548c:	080096b4 	.word	0x080096b4
 8005490:	20013448 	.word	0x20013448

08005494 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800549a:	f3ef 8311 	mrs	r3, BASEPRI
 800549e:	f04f 0120 	mov.w	r1, #32
 80054a2:	f381 8811 	msr	BASEPRI, r1
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	480b      	ldr	r0, [pc, #44]	; (80054d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80054aa:	f7ff fba1 	bl	8004bf0 <_PreparePacket>
 80054ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <SEGGER_SYSVIEW_Stop+0x48>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80054b8:	220b      	movs	r2, #11
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6838      	ldr	r0, [r7, #0]
 80054be:	f7ff fc89 	bl	8004dd4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <SEGGER_SYSVIEW_Stop+0x48>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f383 8811 	msr	BASEPRI, r3
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20013448 	.word	0x20013448
 80054dc:	20013418 	.word	0x20013418

080054e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08c      	sub	sp, #48	; 0x30
 80054e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054e6:	f3ef 8311 	mrs	r3, BASEPRI
 80054ea:	f04f 0120 	mov.w	r1, #32
 80054ee:	f381 8811 	msr	BASEPRI, r1
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	4845      	ldr	r0, [pc, #276]	; (800560c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80054f6:	f7ff fb7b 	bl	8004bf0 <_PreparePacket>
 80054fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005504:	4b42      	ldr	r3, [pc, #264]	; (8005610 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	62bb      	str	r3, [r7, #40]	; 0x28
 800550a:	e00b      	b.n	8005524 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	b2da      	uxtb	r2, r3
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	1c59      	adds	r1, r3, #1
 8005514:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	09db      	lsrs	r3, r3, #7
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	2b7f      	cmp	r3, #127	; 0x7f
 8005528:	d8f0      	bhi.n	800550c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
 800553e:	4b34      	ldr	r3, [pc, #208]	; (8005610 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	e00b      	b.n	800555e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1c59      	adds	r1, r3, #1
 800554e:	6279      	str	r1, [r7, #36]	; 0x24
 8005550:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	09db      	lsrs	r3, r3, #7
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	2b7f      	cmp	r3, #127	; 0x7f
 8005562:	d8f0      	bhi.n	8005546 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	627a      	str	r2, [r7, #36]	; 0x24
 800556a:	6a3a      	ldr	r2, [r7, #32]
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	4b25      	ldr	r3, [pc, #148]	; (8005610 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e00b      	b.n	8005598 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	1c59      	adds	r1, r3, #1
 8005588:	61f9      	str	r1, [r7, #28]
 800558a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	09db      	lsrs	r3, r3, #7
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b7f      	cmp	r3, #127	; 0x7f
 800559c:	d8f0      	bhi.n	8005580 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	61fa      	str	r2, [r7, #28]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	2300      	movs	r3, #0
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	e00b      	b.n	80055d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	1c59      	adds	r1, r3, #1
 80055c0:	6179      	str	r1, [r7, #20]
 80055c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	09db      	lsrs	r3, r3, #7
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b7f      	cmp	r3, #127	; 0x7f
 80055d4:	d8f0      	bhi.n	80055b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	617a      	str	r2, [r7, #20]
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80055e6:	2218      	movs	r2, #24
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	68b8      	ldr	r0, [r7, #8]
 80055ec:	f7ff fbf2 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80055f6:	4b06      	ldr	r3, [pc, #24]	; (8005610 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80055fe:	4b04      	ldr	r3, [pc, #16]	; (8005610 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	4798      	blx	r3
  }
}
 8005604:	bf00      	nop
 8005606:	3730      	adds	r7, #48	; 0x30
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20013448 	.word	0x20013448
 8005610:	20013418 	.word	0x20013418

08005614 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b092      	sub	sp, #72	; 0x48
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800561c:	f3ef 8311 	mrs	r3, BASEPRI
 8005620:	f04f 0120 	mov.w	r1, #32
 8005624:	f381 8811 	msr	BASEPRI, r1
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	486a      	ldr	r0, [pc, #424]	; (80057d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800562c:	f7ff fae0 	bl	8004bf0 <_PreparePacket>
 8005630:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	647b      	str	r3, [r7, #68]	; 0x44
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b66      	ldr	r3, [pc, #408]	; (80057d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	643b      	str	r3, [r7, #64]	; 0x40
 8005646:	e00b      	b.n	8005660 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800564a:	b2da      	uxtb	r2, r3
 800564c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564e:	1c59      	adds	r1, r3, #1
 8005650:	6479      	str	r1, [r7, #68]	; 0x44
 8005652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565c:	09db      	lsrs	r3, r3, #7
 800565e:	643b      	str	r3, [r7, #64]	; 0x40
 8005660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005662:	2b7f      	cmp	r3, #127	; 0x7f
 8005664:	d8f0      	bhi.n	8005648 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	647a      	str	r2, [r7, #68]	; 0x44
 800566c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005674:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005680:	e00b      	b.n	800569a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	b2da      	uxtb	r2, r3
 8005686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005688:	1c59      	adds	r1, r3, #1
 800568a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800568c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	09db      	lsrs	r3, r3, #7
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	2b7f      	cmp	r3, #127	; 0x7f
 800569e:	d8f0      	bhi.n	8005682 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80056a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	4619      	mov	r1, r3
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff fa49 	bl	8004b50 <_EncodeStr>
 80056be:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80056c0:	2209      	movs	r2, #9
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	6938      	ldr	r0, [r7, #16]
 80056c6:	f7ff fb85 	bl	8004dd4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	637b      	str	r3, [r7, #52]	; 0x34
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4b40      	ldr	r3, [pc, #256]	; (80057d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
 80056de:	e00b      	b.n	80056f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e6:	1c59      	adds	r1, r3, #1
 80056e8:	6379      	str	r1, [r7, #52]	; 0x34
 80056ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	09db      	lsrs	r3, r3, #7
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	2b7f      	cmp	r3, #127	; 0x7f
 80056fc:	d8f0      	bhi.n	80056e0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80056fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	637a      	str	r2, [r7, #52]	; 0x34
 8005704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
 8005718:	e00b      	b.n	8005732 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	b2da      	uxtb	r2, r3
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	1c59      	adds	r1, r3, #1
 8005722:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005724:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	09db      	lsrs	r3, r3, #7
 8005730:	62bb      	str	r3, [r7, #40]	; 0x28
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	2b7f      	cmp	r3, #127	; 0x7f
 8005736:	d8f0      	bhi.n	800571a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800573e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	623b      	str	r3, [r7, #32]
 8005752:	e00b      	b.n	800576c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	1c59      	adds	r1, r3, #1
 800575c:	6279      	str	r1, [r7, #36]	; 0x24
 800575e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	09db      	lsrs	r3, r3, #7
 800576a:	623b      	str	r3, [r7, #32]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	2b7f      	cmp	r3, #127	; 0x7f
 8005770:	d8f0      	bhi.n	8005754 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	627a      	str	r2, [r7, #36]	; 0x24
 8005778:	6a3a      	ldr	r2, [r7, #32]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	61fb      	str	r3, [r7, #28]
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e00b      	b.n	80057a4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	b2da      	uxtb	r2, r3
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	1c59      	adds	r1, r3, #1
 8005794:	61f9      	str	r1, [r7, #28]
 8005796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	09db      	lsrs	r3, r3, #7
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b7f      	cmp	r3, #127	; 0x7f
 80057a8:	d8f0      	bhi.n	800578c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	61fa      	str	r2, [r7, #28]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80057ba:	2215      	movs	r2, #21
 80057bc:	68f9      	ldr	r1, [r7, #12]
 80057be:	6938      	ldr	r0, [r7, #16]
 80057c0:	f7ff fb08 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f383 8811 	msr	BASEPRI, r3
}
 80057ca:	bf00      	nop
 80057cc:	3748      	adds	r7, #72	; 0x48
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20013448 	.word	0x20013448
 80057d8:	20013418 	.word	0x20013418

080057dc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80057f2:	4b03      	ldr	r3, [pc, #12]	; (8005800 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	4798      	blx	r3
  }
}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20013418 	.word	0x20013418

08005804 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800580a:	4b15      	ldr	r3, [pc, #84]	; (8005860 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01a      	beq.n	8005848 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005812:	4b13      	ldr	r3, [pc, #76]	; (8005860 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d015      	beq.n	8005848 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4798      	blx	r3
 8005824:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005828:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800582a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	000a      	movs	r2, r1
 8005838:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800583a:	4613      	mov	r3, r2
 800583c:	461a      	mov	r2, r3
 800583e:	4621      	mov	r1, r4
 8005840:	200d      	movs	r0, #13
 8005842:	f7ff fc09 	bl	8005058 <SEGGER_SYSVIEW_RecordU32x2>
 8005846:	e006      	b.n	8005856 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4619      	mov	r1, r3
 800584e:	200c      	movs	r0, #12
 8005850:	f7ff fbc6 	bl	8004fe0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bd90      	pop	{r4, r7, pc}
 800585e:	bf00      	nop
 8005860:	20013418 	.word	0x20013418
 8005864:	e0001004 	.word	0xe0001004

08005868 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800586e:	f3ef 8311 	mrs	r3, BASEPRI
 8005872:	f04f 0120 	mov.w	r1, #32
 8005876:	f381 8811 	msr	BASEPRI, r1
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	4819      	ldr	r0, [pc, #100]	; (80058e4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800587e:	f7ff f9b7 	bl	8004bf0 <_PreparePacket>
 8005882:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005888:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005890:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	e00b      	b.n	80058b4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1c59      	adds	r1, r3, #1
 80058a4:	6179      	str	r1, [r7, #20]
 80058a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	09db      	lsrs	r3, r3, #7
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b7f      	cmp	r3, #127	; 0x7f
 80058b8:	d8f0      	bhi.n	800589c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	617a      	str	r2, [r7, #20]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80058ca:	2202      	movs	r2, #2
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	68b8      	ldr	r0, [r7, #8]
 80058d0:	f7ff fa80 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f383 8811 	msr	BASEPRI, r3
}
 80058da:	bf00      	nop
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20013448 	.word	0x20013448
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058f2:	f3ef 8311 	mrs	r3, BASEPRI
 80058f6:	f04f 0120 	mov.w	r1, #32
 80058fa:	f381 8811 	msr	BASEPRI, r1
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	4807      	ldr	r0, [pc, #28]	; (8005920 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005902:	f7ff f975 	bl	8004bf0 <_PreparePacket>
 8005906:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005908:	2203      	movs	r2, #3
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6838      	ldr	r0, [r7, #0]
 800590e:	f7ff fa61 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f383 8811 	msr	BASEPRI, r3
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20013448 	.word	0x20013448

08005924 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800592a:	f3ef 8311 	mrs	r3, BASEPRI
 800592e:	f04f 0120 	mov.w	r1, #32
 8005932:	f381 8811 	msr	BASEPRI, r1
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	4807      	ldr	r0, [pc, #28]	; (8005958 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800593a:	f7ff f959 	bl	8004bf0 <_PreparePacket>
 800593e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005940:	2212      	movs	r2, #18
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6838      	ldr	r0, [r7, #0]
 8005946:	f7ff fa45 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f383 8811 	msr	BASEPRI, r3
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20013448 	.word	0x20013448

0800595c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005962:	f3ef 8311 	mrs	r3, BASEPRI
 8005966:	f04f 0120 	mov.w	r1, #32
 800596a:	f381 8811 	msr	BASEPRI, r1
 800596e:	607b      	str	r3, [r7, #4]
 8005970:	4807      	ldr	r0, [pc, #28]	; (8005990 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005972:	f7ff f93d 	bl	8004bf0 <_PreparePacket>
 8005976:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005978:	2211      	movs	r2, #17
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6838      	ldr	r0, [r7, #0]
 800597e:	f7ff fa29 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f383 8811 	msr	BASEPRI, r3
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20013448 	.word	0x20013448

08005994 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800599c:	f3ef 8311 	mrs	r3, BASEPRI
 80059a0:	f04f 0120 	mov.w	r1, #32
 80059a4:	f381 8811 	msr	BASEPRI, r1
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	4819      	ldr	r0, [pc, #100]	; (8005a10 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80059ac:	f7ff f920 	bl	8004bf0 <_PreparePacket>
 80059b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059b6:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	e00b      	b.n	80059e2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	1c59      	adds	r1, r3, #1
 80059d2:	61f9      	str	r1, [r7, #28]
 80059d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	09db      	lsrs	r3, r3, #7
 80059e0:	61bb      	str	r3, [r7, #24]
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b7f      	cmp	r3, #127	; 0x7f
 80059e6:	d8f0      	bhi.n	80059ca <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	61fa      	str	r2, [r7, #28]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80059f8:	2208      	movs	r2, #8
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	6938      	ldr	r0, [r7, #16]
 80059fe:	f7ff f9e9 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f383 8811 	msr	BASEPRI, r3
}
 8005a08:	bf00      	nop
 8005a0a:	3720      	adds	r7, #32
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20013448 	.word	0x20013448
 8005a14:	20013418 	.word	0x20013418

08005a18 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a20:	f3ef 8311 	mrs	r3, BASEPRI
 8005a24:	f04f 0120 	mov.w	r1, #32
 8005a28:	f381 8811 	msr	BASEPRI, r1
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	4819      	ldr	r0, [pc, #100]	; (8005a94 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005a30:	f7ff f8de 	bl	8004bf0 <_PreparePacket>
 8005a34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a3a:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	e00b      	b.n	8005a66 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	1c59      	adds	r1, r3, #1
 8005a56:	61f9      	str	r1, [r7, #28]
 8005a58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	09db      	lsrs	r3, r3, #7
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b7f      	cmp	r3, #127	; 0x7f
 8005a6a:	d8f0      	bhi.n	8005a4e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	61fa      	str	r2, [r7, #28]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	6938      	ldr	r0, [r7, #16]
 8005a82:	f7ff f9a7 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f383 8811 	msr	BASEPRI, r3
}
 8005a8c:	bf00      	nop
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20013448 	.word	0x20013448
 8005a98:	20013418 	.word	0x20013418

08005a9c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa8:	f04f 0120 	mov.w	r1, #32
 8005aac:	f381 8811 	msr	BASEPRI, r1
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	4819      	ldr	r0, [pc, #100]	; (8005b18 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005ab4:	f7ff f89c 	bl	8004bf0 <_PreparePacket>
 8005ab8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005abe:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	e00b      	b.n	8005aea <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	1c59      	adds	r1, r3, #1
 8005ada:	61f9      	str	r1, [r7, #28]
 8005adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	09db      	lsrs	r3, r3, #7
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2b7f      	cmp	r3, #127	; 0x7f
 8005aee:	d8f0      	bhi.n	8005ad2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	61fa      	str	r2, [r7, #28]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005b00:	2206      	movs	r2, #6
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	6938      	ldr	r0, [r7, #16]
 8005b06:	f7ff f965 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f383 8811 	msr	BASEPRI, r3
}
 8005b10:	bf00      	nop
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20013448 	.word	0x20013448
 8005b1c:	20013418 	.word	0x20013418

08005b20 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b2e:	f04f 0120 	mov.w	r1, #32
 8005b32:	f381 8811 	msr	BASEPRI, r1
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	4827      	ldr	r0, [pc, #156]	; (8005bd8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005b3a:	f7ff f859 	bl	8004bf0 <_PreparePacket>
 8005b3e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b44:	4b25      	ldr	r3, [pc, #148]	; (8005bdc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	e00b      	b.n	8005b70 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	1c59      	adds	r1, r3, #1
 8005b60:	6279      	str	r1, [r7, #36]	; 0x24
 8005b62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	09db      	lsrs	r3, r3, #7
 8005b6e:	623b      	str	r3, [r7, #32]
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	2b7f      	cmp	r3, #127	; 0x7f
 8005b74:	d8f0      	bhi.n	8005b58 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	627a      	str	r2, [r7, #36]	; 0x24
 8005b7c:	6a3a      	ldr	r2, [r7, #32]
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	e00b      	b.n	8005ba8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	1c59      	adds	r1, r3, #1
 8005b98:	61f9      	str	r1, [r7, #28]
 8005b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	09db      	lsrs	r3, r3, #7
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2b7f      	cmp	r3, #127	; 0x7f
 8005bac:	d8f0      	bhi.n	8005b90 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	61fa      	str	r2, [r7, #28]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005bbe:	2207      	movs	r2, #7
 8005bc0:	68f9      	ldr	r1, [r7, #12]
 8005bc2:	6938      	ldr	r0, [r7, #16]
 8005bc4:	f7ff f906 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f383 8811 	msr	BASEPRI, r3
}
 8005bce:	bf00      	nop
 8005bd0:	3728      	adds	r7, #40	; 0x28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20013448 	.word	0x20013448
 8005bdc:	20013418 	.word	0x20013418

08005be0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005be8:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	1ad3      	subs	r3, r2, r3
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	20013418 	.word	0x20013418

08005c00 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08c      	sub	sp, #48	; 0x30
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005c0a:	4b3b      	ldr	r3, [pc, #236]	; (8005cf8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d06d      	beq.n	8005cee <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005c12:	4b39      	ldr	r3, [pc, #228]	; (8005cf8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005c18:	2300      	movs	r3, #0
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c1c:	e008      	b.n	8005c30 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3f2      	bcc.n	8005c1e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005c38:	e000      	b.n	8005c3c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005c3a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d055      	beq.n	8005cee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c42:	f3ef 8311 	mrs	r3, BASEPRI
 8005c46:	f04f 0120 	mov.w	r1, #32
 8005c4a:	f381 8811 	msr	BASEPRI, r1
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	482a      	ldr	r0, [pc, #168]	; (8005cfc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005c52:	f7fe ffcd 	bl	8004bf0 <_PreparePacket>
 8005c56:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	e00b      	b.n	8005c7e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	1c59      	adds	r1, r3, #1
 8005c6e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	09db      	lsrs	r3, r3, #7
 8005c7c:	623b      	str	r3, [r7, #32]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2b7f      	cmp	r3, #127	; 0x7f
 8005c82:	d8f0      	bhi.n	8005c66 <SEGGER_SYSVIEW_SendModule+0x66>
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	627a      	str	r2, [r7, #36]	; 0x24
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e00b      	b.n	8005cb8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	1c59      	adds	r1, r3, #1
 8005ca8:	61f9      	str	r1, [r7, #28]
 8005caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	09db      	lsrs	r3, r3, #7
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b7f      	cmp	r3, #127	; 0x7f
 8005cbc:	d8f0      	bhi.n	8005ca0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	61fa      	str	r2, [r7, #28]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f7fe ff3a 	bl	8004b50 <_EncodeStr>
 8005cdc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005cde:	2216      	movs	r2, #22
 8005ce0:	68f9      	ldr	r1, [r7, #12]
 8005ce2:	6938      	ldr	r0, [r7, #16]
 8005ce4:	f7ff f876 	bl	8004dd4 <_SendPacket>
      RECORD_END();
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005cee:	bf00      	nop
 8005cf0:	3730      	adds	r7, #48	; 0x30
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20013440 	.word	0x20013440
 8005cfc:	20013448 	.word	0x20013448

08005d00 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005d06:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00f      	beq.n	8005d2e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005d0e:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1f2      	bne.n	8005d14 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20013440 	.word	0x20013440

08005d3c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005d42:	f3ef 8311 	mrs	r3, BASEPRI
 8005d46:	f04f 0120 	mov.w	r1, #32
 8005d4a:	f381 8811 	msr	BASEPRI, r1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	4817      	ldr	r0, [pc, #92]	; (8005db0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005d52:	f7fe ff4d 	bl	8004bf0 <_PreparePacket>
 8005d56:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	e00b      	b.n	8005d80 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	6179      	str	r1, [r7, #20]
 8005d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	09db      	lsrs	r3, r3, #7
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2b7f      	cmp	r3, #127	; 0x7f
 8005d84:	d8f0      	bhi.n	8005d68 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	617a      	str	r2, [r7, #20]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005d96:	221b      	movs	r2, #27
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	68b8      	ldr	r0, [r7, #8]
 8005d9c:	f7ff f81a 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f383 8811 	msr	BASEPRI, r3
}
 8005da6:	bf00      	nop
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20013448 	.word	0x20013448
 8005db4:	20013444 	.word	0x20013444

08005db8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc4:	f04f 0120 	mov.w	r1, #32
 8005dc8:	f381 8811 	msr	BASEPRI, r1
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	4827      	ldr	r0, [pc, #156]	; (8005e6c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005dd0:	f7fe ff0e 	bl	8004bf0 <_PreparePacket>
 8005dd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dd6:	2280      	movs	r2, #128	; 0x80
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	6938      	ldr	r0, [r7, #16]
 8005ddc:	f7fe feb8 	bl	8004b50 <_EncodeStr>
 8005de0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
 8005de6:	2301      	movs	r3, #1
 8005de8:	623b      	str	r3, [r7, #32]
 8005dea:	e00b      	b.n	8005e04 <SEGGER_SYSVIEW_Warn+0x4c>
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	6279      	str	r1, [r7, #36]	; 0x24
 8005df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	09db      	lsrs	r3, r3, #7
 8005e02:	623b      	str	r3, [r7, #32]
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	2b7f      	cmp	r3, #127	; 0x7f
 8005e08:	d8f0      	bhi.n	8005dec <SEGGER_SYSVIEW_Warn+0x34>
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	e00b      	b.n	8005e3c <SEGGER_SYSVIEW_Warn+0x84>
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	1c59      	adds	r1, r3, #1
 8005e2c:	61f9      	str	r1, [r7, #28]
 8005e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	09db      	lsrs	r3, r3, #7
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e40:	d8f0      	bhi.n	8005e24 <SEGGER_SYSVIEW_Warn+0x6c>
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	61fa      	str	r2, [r7, #28]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e52:	221a      	movs	r2, #26
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	6938      	ldr	r0, [r7, #16]
 8005e58:	f7fe ffbc 	bl	8004dd4 <_SendPacket>
  RECORD_END();
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f383 8811 	msr	BASEPRI, r3
}
 8005e62:	bf00      	nop
 8005e64:	3728      	adds	r7, #40	; 0x28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20013448 	.word	0x20013448

08005e70 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	2000      	movs	r0, #0
 8005e84:	f7fe fe3e 	bl	8004b04 <SEGGER_RTT_Write>
  return len;
 8005e88:	683b      	ldr	r3, [r7, #0]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
//void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
	int UsartStatus;
	uint8_t v;
	int r;

	UsartStatus = USART_SR;                              // Examine status register
 8005e9a:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <USART2_IRQHandler+0x80>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]
	if(UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d011      	beq.n	8005ece <USART2_IRQHandler+0x3a>
		v = USART_DR;                                      // Read data
 8005eaa:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <USART2_IRQHandler+0x84>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	71fb      	strb	r3, [r7, #7]
		if((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f003 030b 	and.w	r3, r3, #11
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d108      	bne.n	8005ece <USART2_IRQHandler+0x3a>
			(void)v;                                         // Avoid warning in BTL
			if(_cbOnRx) {
 8005ebc:	4b17      	ldr	r3, [pc, #92]	; (8005f1c <USART2_IRQHandler+0x88>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <USART2_IRQHandler+0x3a>
				_cbOnRx(v);
 8005ec4:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <USART2_IRQHandler+0x88>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	79fa      	ldrb	r2, [r7, #7]
 8005eca:	4610      	mov	r0, r2
 8005ecc:	4798      	blx	r3
			}
		}
	}
	if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01a      	beq.n	8005f0e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 8005ed8:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <USART2_IRQHandler+0x8c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d015      	beq.n	8005f0c <USART2_IRQHandler+0x78>
		r = _cbOnTx(&v);
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <USART2_IRQHandler+0x8c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	1dfa      	adds	r2, r7, #7
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4798      	blx	r3
 8005eea:	60b8      	str	r0, [r7, #8]
		if (r == 0) {                          // No more characters to send ?
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <USART2_IRQHandler+0x6c>
			USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <USART2_IRQHandler+0x90>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a0b      	ldr	r2, [pc, #44]	; (8005f24 <USART2_IRQHandler+0x90>)
 8005ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	e006      	b.n	8005f0e <USART2_IRQHandler+0x7a>
		} else {
			USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005f00:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <USART2_IRQHandler+0x80>)
 8005f02:	681b      	ldr	r3, [r3, #0]
			USART_DR = v;  // Start transmission by writing to data register
 8005f04:	79fa      	ldrb	r2, [r7, #7]
 8005f06:	4b04      	ldr	r3, [pc, #16]	; (8005f18 <USART2_IRQHandler+0x84>)
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e000      	b.n	8005f0e <USART2_IRQHandler+0x7a>
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 8005f0c:	bf00      	nop
		}
	}
}
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40004400 	.word	0x40004400
 8005f18:	40004404 	.word	0x40004404
 8005f1c:	2001352c 	.word	0x2001352c
 8005f20:	20013530 	.word	0x20013530
 8005f24:	4000440c 	.word	0x4000440c

08005f28 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
	USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005f2c:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f36:	6013      	str	r3, [r2, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	4000440c 	.word	0x4000440c

08005f48 <ade_scale_irms>:

float ade_scale_vrms(uint32_t value) {
	return ((float) value) * VRMS_SCALE_CONST;
}

float ade_scale_irms(uint32_t value) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	return ((float) value) * IRMS_SCALE_CONST;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	ee17 0a90 	vmov	r0, s15
 8005f5e:	f7fa fb53 	bl	8000608 <__aeabi_f2d>
 8005f62:	a309      	add	r3, pc, #36	; (adr r3, 8005f88 <ade_scale_irms+0x40>)
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f7fa fba6 	bl	80006b8 <__aeabi_dmul>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	f7fa fe78 	bl	8000c68 <__aeabi_d2f>
 8005f78:	4603      	mov	r3, r0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	f3af 8000 	nop.w
 8005f88:	900ac6fb 	.word	0x900ac6fb
 8005f8c:	3f651dfe 	.word	0x3f651dfe

08005f90 <rescale_hex_to_user_pki>:
	float temp = value;
	temp /= MAX_VRMS_INPUT_SAMPLE / (VRMS_SCALE_CONST * 1561400);
	return temp;
}

float rescale_hex_to_user_pki(uint32_t value) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	value <<= 15;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	03db      	lsls	r3, r3, #15
 8005f9c:	607b      	str	r3, [r7, #4]
	float temp = value;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	ee07 3a90 	vmov	s15, r3
 8005fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa8:	edc7 7a03 	vstr	s15, [r7, #12]
	temp /= MAX_IRMS_INPUT_SAMPLE / (IRMS_SCALE_CONST * 1868467);
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7fa fb2b 	bl	8000608 <__aeabi_f2d>
 8005fb2:	a309      	add	r3, pc, #36	; (adr r3, 8005fd8 <rescale_hex_to_user_pki+0x48>)
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f7fa fca8 	bl	800090c <__aeabi_ddiv>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	f7fa fe50 	bl	8000c68 <__aeabi_d2f>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	60fb      	str	r3, [r7, #12]
	return temp;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	06c96de3 	.word	0x06c96de3
 8005fdc:	408124f0 	.word	0x408124f0

08005fe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	af00      	add	r7, sp, #0
	return 1;
 8005fe4:	2301      	movs	r3, #1
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <_kill>:

int _kill(int pid, int sig)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005ffa:	f000 fa69 	bl	80064d0 <__errno>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2216      	movs	r2, #22
 8006002:	601a      	str	r2, [r3, #0]
	return -1;
 8006004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <_exit>:

void _exit (int status)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff ffe7 	bl	8005ff0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006022:	e7fe      	b.n	8006022 <_exit+0x12>

08006024 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	e00a      	b.n	800604c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006036:	f3af 8000 	nop.w
 800603a:	4601      	mov	r1, r0
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	60ba      	str	r2, [r7, #8]
 8006042:	b2ca      	uxtb	r2, r1
 8006044:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	3301      	adds	r3, #1
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	dbf0      	blt.n	8006036 <_read+0x12>
	}

return len;
 8006054:	687b      	ldr	r3, [r7, #4]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <_close>:
	}
	return len;
}

int _close(int file)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
	return -1;
 8006066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006086:	605a      	str	r2, [r3, #4]
	return 0;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <_isatty>:

int _isatty(int file)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
	return 1;
 800609e:	2301      	movs	r3, #1
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
	return 0;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80060d0:	4a14      	ldr	r2, [pc, #80]	; (8006124 <_sbrk+0x5c>)
 80060d2:	4b15      	ldr	r3, [pc, #84]	; (8006128 <_sbrk+0x60>)
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80060dc:	4b13      	ldr	r3, [pc, #76]	; (800612c <_sbrk+0x64>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80060e4:	4b11      	ldr	r3, [pc, #68]	; (800612c <_sbrk+0x64>)
 80060e6:	4a12      	ldr	r2, [pc, #72]	; (8006130 <_sbrk+0x68>)
 80060e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80060ea:	4b10      	ldr	r3, [pc, #64]	; (800612c <_sbrk+0x64>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4413      	add	r3, r2
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d207      	bcs.n	8006108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80060f8:	f000 f9ea 	bl	80064d0 <__errno>
 80060fc:	4603      	mov	r3, r0
 80060fe:	220c      	movs	r2, #12
 8006100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006106:	e009      	b.n	800611c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006108:	4b08      	ldr	r3, [pc, #32]	; (800612c <_sbrk+0x64>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800610e:	4b07      	ldr	r3, [pc, #28]	; (800612c <_sbrk+0x64>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4413      	add	r3, r2
 8006116:	4a05      	ldr	r2, [pc, #20]	; (800612c <_sbrk+0x64>)
 8006118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20020000 	.word	0x20020000
 8006128:	00000400 	.word	0x00000400
 800612c:	20013534 	.word	0x20013534
 8006130:	20013848 	.word	0x20013848

08006134 <led_init>:
QueueHandle_t ade_queue_handle;

void lcd_handler(void* parameters);
void ade_handler(void* parameters);

void led_init() {
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
//	LED Init
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = PORT_LED;
 800613a:	4b17      	ldr	r3, [pc, #92]	; (8006198 <led_init+0x64>)
 800613c:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800613e:	2301      	movs	r3, #1
 8006140:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8006142:	2302      	movs	r3, #2
 8006144:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8006146:	2300      	movs	r3, #0
 8006148:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800614a:	2300      	movs	r3, #0
 800614c:	72fb      	strb	r3, [r7, #11]

//	Red LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_R_LED;
 800614e:	2301      	movs	r3, #1
 8006150:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	4618      	mov	r0, r3
 8006156:	f7fd feed 	bl	8003f34 <GPIO_Init>

//	Green LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_G_LED;
 800615a:	2303      	movs	r3, #3
 800615c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 800615e:	1d3b      	adds	r3, r7, #4
 8006160:	4618      	mov	r0, r3
 8006162:	f7fd fee7 	bl	8003f34 <GPIO_Init>

//	Blue LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_B_LED;
 8006166:	2305      	movs	r3, #5
 8006168:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 800616a:	1d3b      	adds	r3, r7, #4
 800616c:	4618      	mov	r0, r3
 800616e:	f7fd fee1 	bl	8003f34 <GPIO_Init>

	R_LED_OFF;
 8006172:	2201      	movs	r2, #1
 8006174:	2101      	movs	r1, #1
 8006176:	4808      	ldr	r0, [pc, #32]	; (8006198 <led_init+0x64>)
 8006178:	f7fe f878 	bl	800426c <GPIO_WriteToOutputPin>
	G_LED_OFF;
 800617c:	2201      	movs	r2, #1
 800617e:	2103      	movs	r1, #3
 8006180:	4805      	ldr	r0, [pc, #20]	; (8006198 <led_init+0x64>)
 8006182:	f7fe f873 	bl	800426c <GPIO_WriteToOutputPin>
	B_LED_OFF;
 8006186:	2201      	movs	r2, #1
 8006188:	2105      	movs	r1, #5
 800618a:	4803      	ldr	r0, [pc, #12]	; (8006198 <led_init+0x64>)
 800618c:	f7fe f86e 	bl	800426c <GPIO_WriteToOutputPin>
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40021000 	.word	0x40021000

0800619c <main>:

int main(void) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af02      	add	r7, sp, #8
	led_init();
 80061a2:	f7ff ffc7 	bl	8006134 <led_init>

	xTaskCreate(lcd_handler, "LCD5110", 2048, NULL, 1, NULL);
 80061a6:	2300      	movs	r3, #0
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	2301      	movs	r3, #1
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	2300      	movs	r3, #0
 80061b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b4:	490c      	ldr	r1, [pc, #48]	; (80061e8 <main+0x4c>)
 80061b6:	480d      	ldr	r0, [pc, #52]	; (80061ec <main+0x50>)
 80061b8:	f7fc f820 	bl	80021fc <xTaskCreate>
	xTaskCreate(ade_handler, "ADE7753", 512, NULL, 1, NULL);
 80061bc:	2300      	movs	r3, #0
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	2301      	movs	r3, #1
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	2300      	movs	r3, #0
 80061c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ca:	4909      	ldr	r1, [pc, #36]	; (80061f0 <main+0x54>)
 80061cc:	4809      	ldr	r0, [pc, #36]	; (80061f4 <main+0x58>)
 80061ce:	f7fc f815 	bl	80021fc <xTaskCreate>

	ade_queue_handle = xQueueCreate(20, sizeof(ADE_Event_t));
 80061d2:	2200      	movs	r2, #0
 80061d4:	2101      	movs	r1, #1
 80061d6:	2014      	movs	r0, #20
 80061d8:	f7fb fb40 	bl	800185c <xQueueGenericCreate>
 80061dc:	4603      	mov	r3, r0
 80061de:	4a06      	ldr	r2, [pc, #24]	; (80061f8 <main+0x5c>)
 80061e0:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 80061e2:	f7fc f999 	bl	8002518 <vTaskStartScheduler>

	while(1);
 80061e6:	e7fe      	b.n	80061e6 <main+0x4a>
 80061e8:	080092f8 	.word	0x080092f8
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	08009300 	.word	0x08009300
 80061f4:	080062dd 	.word	0x080062dd
 80061f8:	20013834 	.word	0x20013834

080061fc <lcd_handler>:
	return 0;
}

void lcd_handler(void* parameters) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	LCD5110_Init(0x37);
 8006204:	2037      	movs	r0, #55	; 0x37
 8006206:	f7fa ff49 	bl	800109c <LCD5110_Init>
	char buf[20];

	while(1) {
		LCD5110_Clear();
 800620a:	f7fb f86b 	bl	80012e4 <LCD5110_Clear>

		sprintf(buf, "IRMS %.2f", irms / 1000);
 800620e:	4b2b      	ldr	r3, [pc, #172]	; (80062bc <lcd_handler+0xc0>)
 8006210:	edd3 7a00 	vldr	s15, [r3]
 8006214:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80062c0 <lcd_handler+0xc4>
 8006218:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800621c:	ee16 0a90 	vmov	r0, s13
 8006220:	f7fa f9f2 	bl	8000608 <__aeabi_f2d>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	f107 000c 	add.w	r0, r7, #12
 800622c:	4925      	ldr	r1, [pc, #148]	; (80062c4 <lcd_handler+0xc8>)
 800622e:	f000 fe09 	bl	8006e44 <siprintf>
		LCD5110_Puts(buf, 1, 1);
 8006232:	f107 030c 	add.w	r3, r7, #12
 8006236:	2201      	movs	r2, #1
 8006238:	2101      	movs	r1, #1
 800623a:	4618      	mov	r0, r3
 800623c:	f7fb f9e4 	bl	8001608 <LCD5110_Puts>

		sprintf(buf, "PKI %.2f", pki / 1000);
 8006240:	4b21      	ldr	r3, [pc, #132]	; (80062c8 <lcd_handler+0xcc>)
 8006242:	edd3 7a00 	vldr	s15, [r3]
 8006246:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80062c0 <lcd_handler+0xc4>
 800624a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800624e:	ee16 0a90 	vmov	r0, s13
 8006252:	f7fa f9d9 	bl	8000608 <__aeabi_f2d>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	f107 000c 	add.w	r0, r7, #12
 800625e:	491b      	ldr	r1, [pc, #108]	; (80062cc <lcd_handler+0xd0>)
 8006260:	f000 fdf0 	bl	8006e44 <siprintf>
		LCD5110_GotoXY(0, 10);
 8006264:	210a      	movs	r1, #10
 8006266:	2000      	movs	r0, #0
 8006268:	f7fb f90c 	bl	8001484 <LCD5110_GotoXY>
		LCD5110_Puts(buf, 1, 1);
 800626c:	f107 030c 	add.w	r3, r7, #12
 8006270:	2201      	movs	r2, #1
 8006272:	2101      	movs	r1, #1
 8006274:	4618      	mov	r0, r3
 8006276:	f7fb f9c7 	bl	8001608 <LCD5110_Puts>

		sprintf(buf, "STATUS %lx", status);
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <lcd_handler+0xd4>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	f107 030c 	add.w	r3, r7, #12
 8006282:	4914      	ldr	r1, [pc, #80]	; (80062d4 <lcd_handler+0xd8>)
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fddd 	bl	8006e44 <siprintf>
		LCD5110_GotoXY(0, 20);
 800628a:	2114      	movs	r1, #20
 800628c:	2000      	movs	r0, #0
 800628e:	f7fb f8f9 	bl	8001484 <LCD5110_GotoXY>
		LCD5110_Puts(buf, 1, 1);
 8006292:	f107 030c 	add.w	r3, r7, #12
 8006296:	2201      	movs	r2, #1
 8006298:	2101      	movs	r1, #1
 800629a:	4618      	mov	r0, r3
 800629c:	f7fb f9b4 	bl	8001608 <LCD5110_Puts>

		LCD5110_Refresh();
 80062a0:	f7fb f852 	bl	8001348 <LCD5110_Refresh>
		vTaskDelay(200);
 80062a4:	20c8      	movs	r0, #200	; 0xc8
 80062a6:	f7fc f8ff 	bl	80024a8 <vTaskDelay>
		taskYIELD();
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <lcd_handler+0xdc>)
 80062ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	f3bf 8f6f 	isb	sy
		LCD5110_Clear();
 80062ba:	e7a6      	b.n	800620a <lcd_handler+0xe>
 80062bc:	20013538 	.word	0x20013538
 80062c0:	447a0000 	.word	0x447a0000
 80062c4:	08009308 	.word	0x08009308
 80062c8:	2001353c 	.word	0x2001353c
 80062cc:	08009314 	.word	0x08009314
 80062d0:	20013540 	.word	0x20013540
 80062d4:	08009320 	.word	0x08009320
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <ade_handler>:
	}
}

void ade_handler(void* parameters) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	ADE_Event_t ade_event;
//	uint32_t status;

	ADE_Init();
 80062e4:	f7fa fdb2 	bl	8000e4c <ADE_Init>
	ADE_SetGain(FULL_SCALE_0125, GAIN_8, GAIN_2);
 80062e8:	2201      	movs	r2, #1
 80062ea:	2103      	movs	r1, #3
 80062ec:	2002      	movs	r0, #2
 80062ee:	f7fa fe4d 	bl	8000f8c <ADE_SetGain>

	ADE_WriteData(IPKLVL, 0x10 >> 1, 1);
 80062f2:	2201      	movs	r2, #1
 80062f4:	2108      	movs	r1, #8
 80062f6:	2020      	movs	r0, #32
 80062f8:	f7fa fe0e 	bl	8000f18 <ADE_WriteData>

/* set ZXTO */
	ADE_WriteData(IRQEN,
 80062fc:	2202      	movs	r2, #2
 80062fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8006302:	200a      	movs	r0, #10
 8006304:	f7fa fe08 	bl	8000f18 <ADE_WriteData>
			0x0040
			| (1 << IRQ_ZXTO),
			2);

/* clear STATUS Register */
	ADE_ReadData(RSTSTATUS, 2);
 8006308:	2102      	movs	r1, #2
 800630a:	200c      	movs	r0, #12
 800630c:	f7fa fdd0 	bl	8000eb0 <ADE_ReadData>

	while(1) {
		if(ade_queue_handle != NULL) {
 8006310:	4b31      	ldr	r3, [pc, #196]	; (80063d8 <ade_handler+0xfc>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d052      	beq.n	80063be <ade_handler+0xe2>
			if(xQueueReceive(ade_queue_handle, &ade_event, portMAX_DELAY)) {
 8006318:	4b2f      	ldr	r3, [pc, #188]	; (80063d8 <ade_handler+0xfc>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f107 010f 	add.w	r1, r7, #15
 8006320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006324:	4618      	mov	r0, r3
 8006326:	f7fb fced 	bl	8001d04 <xQueueReceive>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d046      	beq.n	80063be <ade_handler+0xe2>
				switch (ade_event) {
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <ade_handler+0x72>
 8006336:	2b01      	cmp	r3, #1
 8006338:	d143      	bne.n	80063c2 <ade_handler+0xe6>
					case ADE_INT_IRQ:
						G_LED_OFF;
 800633a:	2201      	movs	r2, #1
 800633c:	2103      	movs	r1, #3
 800633e:	4827      	ldr	r0, [pc, #156]	; (80063dc <ade_handler+0x100>)
 8006340:	f7fd ff94 	bl	800426c <GPIO_WriteToOutputPin>
						ADE_ReadData(RSTSTATUS, 2);
 8006344:	2102      	movs	r1, #2
 8006346:	200c      	movs	r0, #12
 8006348:	f7fa fdb2 	bl	8000eb0 <ADE_ReadData>
						break;
 800634c:	e03a      	b.n	80063c4 <ade_handler+0xe8>

					case ADE_INT_ZX:
						pki = rescale_hex_to_user_pki(ADE_ReadData(IPKLVL, 1)) * 2;
 800634e:	2101      	movs	r1, #1
 8006350:	2020      	movs	r0, #32
 8006352:	f7fa fdad 	bl	8000eb0 <ADE_ReadData>
 8006356:	4603      	mov	r3, r0
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fe19 	bl	8005f90 <rescale_hex_to_user_pki>
 800635e:	ee07 0a90 	vmov	s15, r0
 8006362:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006366:	4b1e      	ldr	r3, [pc, #120]	; (80063e0 <ade_handler+0x104>)
 8006368:	edc3 7a00 	vstr	s15, [r3]
						irms = ade_scale_irms(ADE_ReadData(IRMS, 3));
 800636c:	2103      	movs	r1, #3
 800636e:	2016      	movs	r0, #22
 8006370:	f7fa fd9e 	bl	8000eb0 <ADE_ReadData>
 8006374:	4603      	mov	r3, r0
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fde6 	bl	8005f48 <ade_scale_irms>
 800637c:	4603      	mov	r3, r0
 800637e:	4a19      	ldr	r2, [pc, #100]	; (80063e4 <ade_handler+0x108>)
 8006380:	6013      	str	r3, [r2, #0]

						status = ADE_ReadData(RSTSTATUS, 2);
 8006382:	2102      	movs	r1, #2
 8006384:	200c      	movs	r0, #12
 8006386:	f7fa fd93 	bl	8000eb0 <ADE_ReadData>
 800638a:	4603      	mov	r3, r0
 800638c:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <ade_handler+0x10c>)
 800638e:	6013      	str	r3, [r2, #0]

						if(status & (1 << IRQ_PKI))
 8006390:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <ade_handler+0x10c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <ade_handler+0xcc>
							R_LED_ON;
 800639c:	2200      	movs	r2, #0
 800639e:	2101      	movs	r1, #1
 80063a0:	480e      	ldr	r0, [pc, #56]	; (80063dc <ade_handler+0x100>)
 80063a2:	f7fd ff63 	bl	800426c <GPIO_WriteToOutputPin>
 80063a6:	e004      	b.n	80063b2 <ade_handler+0xd6>
						else R_LED_OFF;
 80063a8:	2201      	movs	r2, #1
 80063aa:	2101      	movs	r1, #1
 80063ac:	480b      	ldr	r0, [pc, #44]	; (80063dc <ade_handler+0x100>)
 80063ae:	f7fd ff5d 	bl	800426c <GPIO_WriteToOutputPin>

						G_LED_ON;
 80063b2:	2200      	movs	r2, #0
 80063b4:	2103      	movs	r1, #3
 80063b6:	4809      	ldr	r0, [pc, #36]	; (80063dc <ade_handler+0x100>)
 80063b8:	f7fd ff58 	bl	800426c <GPIO_WriteToOutputPin>
						break;
 80063bc:	e002      	b.n	80063c4 <ade_handler+0xe8>
					default:
						break;
				}
			}
 80063be:	bf00      	nop
 80063c0:	e000      	b.n	80063c4 <ade_handler+0xe8>
						break;
 80063c2:	bf00      	nop
		}
		taskYIELD();
 80063c4:	4b09      	ldr	r3, [pc, #36]	; (80063ec <ade_handler+0x110>)
 80063c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	f3bf 8f6f 	isb	sy
		if(ade_queue_handle != NULL) {
 80063d4:	e79c      	b.n	8006310 <ade_handler+0x34>
 80063d6:	bf00      	nop
 80063d8:	20013834 	.word	0x20013834
 80063dc:	40021000 	.word	0x40021000
 80063e0:	2001353c 	.word	0x2001353c
 80063e4:	20013538 	.word	0x20013538
 80063e8:	20013540 	.word	0x20013540
 80063ec:	e000ed04 	.word	0xe000ed04

080063f0 <EXTI15_10_IRQHandler>:
	}
}

void EXTI15_10_IRQHandler(void) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
	ADE_Event_t ade_int;
	static uint8_t zx_count = 0;
    uint32_t pending = EXTI->PR;
 80063f6:	4b1e      	ldr	r3, [pc, #120]	; (8006470 <EXTI15_10_IRQHandler+0x80>)
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	607b      	str	r3, [r7, #4]

    if(pending & (1 << PIN_ZX_IT)) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01b      	beq.n	800643e <EXTI15_10_IRQHandler+0x4e>
        EXTI->PR |= 1 << PIN_ZX_IT;		// clear pending flag, otherwise we'd get endless interrupts
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <EXTI15_10_IRQHandler+0x80>)
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	4a19      	ldr	r2, [pc, #100]	; (8006470 <EXTI15_10_IRQHandler+0x80>)
 800640c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006410:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
        if(++zx_count >= 25) {
 8006412:	4b18      	ldr	r3, [pc, #96]	; (8006474 <EXTI15_10_IRQHandler+0x84>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	3301      	adds	r3, #1
 8006418:	b2da      	uxtb	r2, r3
 800641a:	4b16      	ldr	r3, [pc, #88]	; (8006474 <EXTI15_10_IRQHandler+0x84>)
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	4b15      	ldr	r3, [pc, #84]	; (8006474 <EXTI15_10_IRQHandler+0x84>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b18      	cmp	r3, #24
 8006424:	d90b      	bls.n	800643e <EXTI15_10_IRQHandler+0x4e>
			ade_int = ADE_INT_ZX;
 8006426:	2300      	movs	r3, #0
 8006428:	70fb      	strb	r3, [r7, #3]
			xQueueSendToFrontFromISR(ade_queue_handle, &ade_int, NULL);
 800642a:	4b13      	ldr	r3, [pc, #76]	; (8006478 <EXTI15_10_IRQHandler+0x88>)
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	1cf9      	adds	r1, r7, #3
 8006430:	2301      	movs	r3, #1
 8006432:	2200      	movs	r2, #0
 8006434:	f7fb fba8 	bl	8001b88 <xQueueGenericSendFromISR>
			zx_count = 0;
 8006438:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <EXTI15_10_IRQHandler+0x84>)
 800643a:	2200      	movs	r2, #0
 800643c:	701a      	strb	r2, [r3, #0]
        }
    }

    if(pending & (1 << PIN_IRQ_IT)) {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00e      	beq.n	8006466 <EXTI15_10_IRQHandler+0x76>
        EXTI->PR |= 1 << PIN_IRQ_IT;	// clear pending flag, otherwise we'd get endless interrupts
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <EXTI15_10_IRQHandler+0x80>)
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	4a08      	ldr	r2, [pc, #32]	; (8006470 <EXTI15_10_IRQHandler+0x80>)
 800644e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006452:	6153      	str	r3, [r2, #20]
        // handle pin IRQ here
        ade_int = ADE_INT_IRQ;
 8006454:	2301      	movs	r3, #1
 8006456:	70fb      	strb	r3, [r7, #3]
		xQueueSendFromISR(ade_queue_handle, &ade_int, NULL);
 8006458:	4b07      	ldr	r3, [pc, #28]	; (8006478 <EXTI15_10_IRQHandler+0x88>)
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	1cf9      	adds	r1, r7, #3
 800645e:	2300      	movs	r3, #0
 8006460:	2200      	movs	r2, #0
 8006462:	f7fb fb91 	bl	8001b88 <xQueueGenericSendFromISR>
    }
}
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40013c00 	.word	0x40013c00
 8006474:	20013544 	.word	0x20013544
 8006478:	20013834 	.word	0x20013834

0800647c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800647c:	480d      	ldr	r0, [pc, #52]	; (80064b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800647e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006480:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006484:	480c      	ldr	r0, [pc, #48]	; (80064b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006486:	490d      	ldr	r1, [pc, #52]	; (80064bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8006488:	4a0d      	ldr	r2, [pc, #52]	; (80064c0 <LoopForever+0xe>)
  movs r3, #0
 800648a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800648c:	e002      	b.n	8006494 <LoopCopyDataInit>

0800648e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800648e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006492:	3304      	adds	r3, #4

08006494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006498:	d3f9      	bcc.n	800648e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800649a:	4a0a      	ldr	r2, [pc, #40]	; (80064c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800649c:	4c0a      	ldr	r4, [pc, #40]	; (80064c8 <LoopForever+0x16>)
  movs r3, #0
 800649e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064a0:	e001      	b.n	80064a6 <LoopFillZerobss>

080064a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064a4:	3204      	adds	r2, #4

080064a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064a8:	d3fb      	bcc.n	80064a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80064aa:	f000 f817 	bl	80064dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80064ae:	f7ff fe75 	bl	800619c <main>

080064b2 <LoopForever>:

LoopForever:
    b LoopForever
 80064b2:	e7fe      	b.n	80064b2 <LoopForever>
  ldr   r0, =_estack
 80064b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80064b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80064c0:	08009aac 	.word	0x08009aac
  ldr r2, =_sbss
 80064c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80064c8:	20013848 	.word	0x20013848

080064cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80064cc:	e7fe      	b.n	80064cc <ADC_IRQHandler>
	...

080064d0 <__errno>:
 80064d0:	4b01      	ldr	r3, [pc, #4]	; (80064d8 <__errno+0x8>)
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	2000000c 	.word	0x2000000c

080064dc <__libc_init_array>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4d0d      	ldr	r5, [pc, #52]	; (8006514 <__libc_init_array+0x38>)
 80064e0:	4c0d      	ldr	r4, [pc, #52]	; (8006518 <__libc_init_array+0x3c>)
 80064e2:	1b64      	subs	r4, r4, r5
 80064e4:	10a4      	asrs	r4, r4, #2
 80064e6:	2600      	movs	r6, #0
 80064e8:	42a6      	cmp	r6, r4
 80064ea:	d109      	bne.n	8006500 <__libc_init_array+0x24>
 80064ec:	4d0b      	ldr	r5, [pc, #44]	; (800651c <__libc_init_array+0x40>)
 80064ee:	4c0c      	ldr	r4, [pc, #48]	; (8006520 <__libc_init_array+0x44>)
 80064f0:	f002 feb2 	bl	8009258 <_init>
 80064f4:	1b64      	subs	r4, r4, r5
 80064f6:	10a4      	asrs	r4, r4, #2
 80064f8:	2600      	movs	r6, #0
 80064fa:	42a6      	cmp	r6, r4
 80064fc:	d105      	bne.n	800650a <__libc_init_array+0x2e>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	f855 3b04 	ldr.w	r3, [r5], #4
 8006504:	4798      	blx	r3
 8006506:	3601      	adds	r6, #1
 8006508:	e7ee      	b.n	80064e8 <__libc_init_array+0xc>
 800650a:	f855 3b04 	ldr.w	r3, [r5], #4
 800650e:	4798      	blx	r3
 8006510:	3601      	adds	r6, #1
 8006512:	e7f2      	b.n	80064fa <__libc_init_array+0x1e>
 8006514:	08009aa4 	.word	0x08009aa4
 8006518:	08009aa4 	.word	0x08009aa4
 800651c:	08009aa4 	.word	0x08009aa4
 8006520:	08009aa8 	.word	0x08009aa8

08006524 <memcmp>:
 8006524:	b530      	push	{r4, r5, lr}
 8006526:	3901      	subs	r1, #1
 8006528:	2400      	movs	r4, #0
 800652a:	42a2      	cmp	r2, r4
 800652c:	d101      	bne.n	8006532 <memcmp+0xe>
 800652e:	2000      	movs	r0, #0
 8006530:	e005      	b.n	800653e <memcmp+0x1a>
 8006532:	5d03      	ldrb	r3, [r0, r4]
 8006534:	3401      	adds	r4, #1
 8006536:	5d0d      	ldrb	r5, [r1, r4]
 8006538:	42ab      	cmp	r3, r5
 800653a:	d0f6      	beq.n	800652a <memcmp+0x6>
 800653c:	1b58      	subs	r0, r3, r5
 800653e:	bd30      	pop	{r4, r5, pc}

08006540 <memcpy>:
 8006540:	440a      	add	r2, r1
 8006542:	4291      	cmp	r1, r2
 8006544:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006548:	d100      	bne.n	800654c <memcpy+0xc>
 800654a:	4770      	bx	lr
 800654c:	b510      	push	{r4, lr}
 800654e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006556:	4291      	cmp	r1, r2
 8006558:	d1f9      	bne.n	800654e <memcpy+0xe>
 800655a:	bd10      	pop	{r4, pc}

0800655c <memset>:
 800655c:	4402      	add	r2, r0
 800655e:	4603      	mov	r3, r0
 8006560:	4293      	cmp	r3, r2
 8006562:	d100      	bne.n	8006566 <memset+0xa>
 8006564:	4770      	bx	lr
 8006566:	f803 1b01 	strb.w	r1, [r3], #1
 800656a:	e7f9      	b.n	8006560 <memset+0x4>

0800656c <__cvt>:
 800656c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006570:	b088      	sub	sp, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	461d      	mov	r5, r3
 8006576:	4614      	mov	r4, r2
 8006578:	bfbc      	itt	lt
 800657a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800657e:	4614      	movlt	r4, r2
 8006580:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006582:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006584:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006588:	bfb6      	itet	lt
 800658a:	461d      	movlt	r5, r3
 800658c:	2300      	movge	r3, #0
 800658e:	232d      	movlt	r3, #45	; 0x2d
 8006590:	7013      	strb	r3, [r2, #0]
 8006592:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006594:	f023 0820 	bic.w	r8, r3, #32
 8006598:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800659c:	d005      	beq.n	80065aa <__cvt+0x3e>
 800659e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065a2:	d100      	bne.n	80065a6 <__cvt+0x3a>
 80065a4:	3601      	adds	r6, #1
 80065a6:	2302      	movs	r3, #2
 80065a8:	e000      	b.n	80065ac <__cvt+0x40>
 80065aa:	2303      	movs	r3, #3
 80065ac:	aa07      	add	r2, sp, #28
 80065ae:	9204      	str	r2, [sp, #16]
 80065b0:	aa06      	add	r2, sp, #24
 80065b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80065b6:	e9cd 3600 	strd	r3, r6, [sp]
 80065ba:	4622      	mov	r2, r4
 80065bc:	462b      	mov	r3, r5
 80065be:	f000 fcef 	bl	8006fa0 <_dtoa_r>
 80065c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065c6:	4607      	mov	r7, r0
 80065c8:	d102      	bne.n	80065d0 <__cvt+0x64>
 80065ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065cc:	07db      	lsls	r3, r3, #31
 80065ce:	d522      	bpl.n	8006616 <__cvt+0xaa>
 80065d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065d4:	eb07 0906 	add.w	r9, r7, r6
 80065d8:	d110      	bne.n	80065fc <__cvt+0x90>
 80065da:	783b      	ldrb	r3, [r7, #0]
 80065dc:	2b30      	cmp	r3, #48	; 0x30
 80065de:	d10a      	bne.n	80065f6 <__cvt+0x8a>
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	4620      	mov	r0, r4
 80065e6:	4629      	mov	r1, r5
 80065e8:	f7fa face 	bl	8000b88 <__aeabi_dcmpeq>
 80065ec:	b918      	cbnz	r0, 80065f6 <__cvt+0x8a>
 80065ee:	f1c6 0601 	rsb	r6, r6, #1
 80065f2:	f8ca 6000 	str.w	r6, [sl]
 80065f6:	f8da 3000 	ldr.w	r3, [sl]
 80065fa:	4499      	add	r9, r3
 80065fc:	2200      	movs	r2, #0
 80065fe:	2300      	movs	r3, #0
 8006600:	4620      	mov	r0, r4
 8006602:	4629      	mov	r1, r5
 8006604:	f7fa fac0 	bl	8000b88 <__aeabi_dcmpeq>
 8006608:	b108      	cbz	r0, 800660e <__cvt+0xa2>
 800660a:	f8cd 901c 	str.w	r9, [sp, #28]
 800660e:	2230      	movs	r2, #48	; 0x30
 8006610:	9b07      	ldr	r3, [sp, #28]
 8006612:	454b      	cmp	r3, r9
 8006614:	d307      	bcc.n	8006626 <__cvt+0xba>
 8006616:	9b07      	ldr	r3, [sp, #28]
 8006618:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800661a:	1bdb      	subs	r3, r3, r7
 800661c:	4638      	mov	r0, r7
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	b008      	add	sp, #32
 8006622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006626:	1c59      	adds	r1, r3, #1
 8006628:	9107      	str	r1, [sp, #28]
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	e7f0      	b.n	8006610 <__cvt+0xa4>

0800662e <__exponent>:
 800662e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006630:	4603      	mov	r3, r0
 8006632:	2900      	cmp	r1, #0
 8006634:	bfb8      	it	lt
 8006636:	4249      	neglt	r1, r1
 8006638:	f803 2b02 	strb.w	r2, [r3], #2
 800663c:	bfb4      	ite	lt
 800663e:	222d      	movlt	r2, #45	; 0x2d
 8006640:	222b      	movge	r2, #43	; 0x2b
 8006642:	2909      	cmp	r1, #9
 8006644:	7042      	strb	r2, [r0, #1]
 8006646:	dd2a      	ble.n	800669e <__exponent+0x70>
 8006648:	f10d 0407 	add.w	r4, sp, #7
 800664c:	46a4      	mov	ip, r4
 800664e:	270a      	movs	r7, #10
 8006650:	46a6      	mov	lr, r4
 8006652:	460a      	mov	r2, r1
 8006654:	fb91 f6f7 	sdiv	r6, r1, r7
 8006658:	fb07 1516 	mls	r5, r7, r6, r1
 800665c:	3530      	adds	r5, #48	; 0x30
 800665e:	2a63      	cmp	r2, #99	; 0x63
 8006660:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006664:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006668:	4631      	mov	r1, r6
 800666a:	dcf1      	bgt.n	8006650 <__exponent+0x22>
 800666c:	3130      	adds	r1, #48	; 0x30
 800666e:	f1ae 0502 	sub.w	r5, lr, #2
 8006672:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006676:	1c44      	adds	r4, r0, #1
 8006678:	4629      	mov	r1, r5
 800667a:	4561      	cmp	r1, ip
 800667c:	d30a      	bcc.n	8006694 <__exponent+0x66>
 800667e:	f10d 0209 	add.w	r2, sp, #9
 8006682:	eba2 020e 	sub.w	r2, r2, lr
 8006686:	4565      	cmp	r5, ip
 8006688:	bf88      	it	hi
 800668a:	2200      	movhi	r2, #0
 800668c:	4413      	add	r3, r2
 800668e:	1a18      	subs	r0, r3, r0
 8006690:	b003      	add	sp, #12
 8006692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006694:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006698:	f804 2f01 	strb.w	r2, [r4, #1]!
 800669c:	e7ed      	b.n	800667a <__exponent+0x4c>
 800669e:	2330      	movs	r3, #48	; 0x30
 80066a0:	3130      	adds	r1, #48	; 0x30
 80066a2:	7083      	strb	r3, [r0, #2]
 80066a4:	70c1      	strb	r1, [r0, #3]
 80066a6:	1d03      	adds	r3, r0, #4
 80066a8:	e7f1      	b.n	800668e <__exponent+0x60>
	...

080066ac <_printf_float>:
 80066ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b0:	ed2d 8b02 	vpush	{d8}
 80066b4:	b091      	sub	sp, #68	; 0x44
 80066b6:	460c      	mov	r4, r1
 80066b8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80066bc:	4616      	mov	r6, r2
 80066be:	461f      	mov	r7, r3
 80066c0:	4605      	mov	r5, r0
 80066c2:	f001 fa59 	bl	8007b78 <_localeconv_r>
 80066c6:	f8d0 a000 	ldr.w	sl, [r0]
 80066ca:	4650      	mov	r0, sl
 80066cc:	f7f9 fdda 	bl	8000284 <strlen>
 80066d0:	2300      	movs	r3, #0
 80066d2:	930e      	str	r3, [sp, #56]	; 0x38
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	9309      	str	r3, [sp, #36]	; 0x24
 80066d8:	f8d8 3000 	ldr.w	r3, [r8]
 80066dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066e0:	3307      	adds	r3, #7
 80066e2:	f023 0307 	bic.w	r3, r3, #7
 80066e6:	f103 0208 	add.w	r2, r3, #8
 80066ea:	f8c8 2000 	str.w	r2, [r8]
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006700:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006704:	ee08 0a10 	vmov	s16, r0
 8006708:	4ba0      	ldr	r3, [pc, #640]	; (800698c <_printf_float+0x2e0>)
 800670a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800670e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006712:	f7fa fa6b 	bl	8000bec <__aeabi_dcmpun>
 8006716:	bb88      	cbnz	r0, 800677c <_printf_float+0xd0>
 8006718:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800671c:	4b9b      	ldr	r3, [pc, #620]	; (800698c <_printf_float+0x2e0>)
 800671e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006722:	f7fa fa45 	bl	8000bb0 <__aeabi_dcmple>
 8006726:	bb48      	cbnz	r0, 800677c <_printf_float+0xd0>
 8006728:	2200      	movs	r2, #0
 800672a:	2300      	movs	r3, #0
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7fa fa34 	bl	8000b9c <__aeabi_dcmplt>
 8006734:	b110      	cbz	r0, 800673c <_printf_float+0x90>
 8006736:	232d      	movs	r3, #45	; 0x2d
 8006738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800673c:	4b94      	ldr	r3, [pc, #592]	; (8006990 <_printf_float+0x2e4>)
 800673e:	4895      	ldr	r0, [pc, #596]	; (8006994 <_printf_float+0x2e8>)
 8006740:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006744:	bf94      	ite	ls
 8006746:	4698      	movls	r8, r3
 8006748:	4680      	movhi	r8, r0
 800674a:	2303      	movs	r3, #3
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006750:	f023 0304 	bic.w	r3, r3, #4
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	f04f 0900 	mov.w	r9, #0
 800675a:	9700      	str	r7, [sp, #0]
 800675c:	4633      	mov	r3, r6
 800675e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006760:	4621      	mov	r1, r4
 8006762:	4628      	mov	r0, r5
 8006764:	f000 f9da 	bl	8006b1c <_printf_common>
 8006768:	3001      	adds	r0, #1
 800676a:	f040 8092 	bne.w	8006892 <_printf_float+0x1e6>
 800676e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006772:	b011      	add	sp, #68	; 0x44
 8006774:	ecbd 8b02 	vpop	{d8}
 8006778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677c:	4642      	mov	r2, r8
 800677e:	464b      	mov	r3, r9
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7fa fa32 	bl	8000bec <__aeabi_dcmpun>
 8006788:	b140      	cbz	r0, 800679c <_printf_float+0xf0>
 800678a:	464b      	mov	r3, r9
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfbc      	itt	lt
 8006790:	232d      	movlt	r3, #45	; 0x2d
 8006792:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006796:	4880      	ldr	r0, [pc, #512]	; (8006998 <_printf_float+0x2ec>)
 8006798:	4b80      	ldr	r3, [pc, #512]	; (800699c <_printf_float+0x2f0>)
 800679a:	e7d1      	b.n	8006740 <_printf_float+0x94>
 800679c:	6863      	ldr	r3, [r4, #4]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 80067a4:	d143      	bne.n	800682e <_printf_float+0x182>
 80067a6:	2306      	movs	r3, #6
 80067a8:	6063      	str	r3, [r4, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ae:	9206      	str	r2, [sp, #24]
 80067b0:	aa0e      	add	r2, sp, #56	; 0x38
 80067b2:	e9cd b204 	strd	fp, r2, [sp, #16]
 80067b6:	aa0d      	add	r2, sp, #52	; 0x34
 80067b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067bc:	9203      	str	r2, [sp, #12]
 80067be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80067c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	6863      	ldr	r3, [r4, #4]
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	4642      	mov	r2, r8
 80067ce:	464b      	mov	r3, r9
 80067d0:	4628      	mov	r0, r5
 80067d2:	910a      	str	r1, [sp, #40]	; 0x28
 80067d4:	f7ff feca 	bl	800656c <__cvt>
 80067d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067da:	2947      	cmp	r1, #71	; 0x47
 80067dc:	4680      	mov	r8, r0
 80067de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067e0:	d108      	bne.n	80067f4 <_printf_float+0x148>
 80067e2:	1cc8      	adds	r0, r1, #3
 80067e4:	db02      	blt.n	80067ec <_printf_float+0x140>
 80067e6:	6863      	ldr	r3, [r4, #4]
 80067e8:	4299      	cmp	r1, r3
 80067ea:	dd40      	ble.n	800686e <_printf_float+0x1c2>
 80067ec:	f1ab 0b02 	sub.w	fp, fp, #2
 80067f0:	fa5f fb8b 	uxtb.w	fp, fp
 80067f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067f8:	d81f      	bhi.n	800683a <_printf_float+0x18e>
 80067fa:	3901      	subs	r1, #1
 80067fc:	465a      	mov	r2, fp
 80067fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006802:	910d      	str	r1, [sp, #52]	; 0x34
 8006804:	f7ff ff13 	bl	800662e <__exponent>
 8006808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800680a:	1813      	adds	r3, r2, r0
 800680c:	2a01      	cmp	r2, #1
 800680e:	4681      	mov	r9, r0
 8006810:	6123      	str	r3, [r4, #16]
 8006812:	dc02      	bgt.n	800681a <_printf_float+0x16e>
 8006814:	6822      	ldr	r2, [r4, #0]
 8006816:	07d2      	lsls	r2, r2, #31
 8006818:	d501      	bpl.n	800681e <_printf_float+0x172>
 800681a:	3301      	adds	r3, #1
 800681c:	6123      	str	r3, [r4, #16]
 800681e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006822:	2b00      	cmp	r3, #0
 8006824:	d099      	beq.n	800675a <_printf_float+0xae>
 8006826:	232d      	movs	r3, #45	; 0x2d
 8006828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800682c:	e795      	b.n	800675a <_printf_float+0xae>
 800682e:	2947      	cmp	r1, #71	; 0x47
 8006830:	d1bb      	bne.n	80067aa <_printf_float+0xfe>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1b9      	bne.n	80067aa <_printf_float+0xfe>
 8006836:	2301      	movs	r3, #1
 8006838:	e7b6      	b.n	80067a8 <_printf_float+0xfc>
 800683a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800683e:	d118      	bne.n	8006872 <_printf_float+0x1c6>
 8006840:	2900      	cmp	r1, #0
 8006842:	6863      	ldr	r3, [r4, #4]
 8006844:	dd0b      	ble.n	800685e <_printf_float+0x1b2>
 8006846:	6121      	str	r1, [r4, #16]
 8006848:	b913      	cbnz	r3, 8006850 <_printf_float+0x1a4>
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	07d0      	lsls	r0, r2, #31
 800684e:	d502      	bpl.n	8006856 <_printf_float+0x1aa>
 8006850:	3301      	adds	r3, #1
 8006852:	440b      	add	r3, r1
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	65a1      	str	r1, [r4, #88]	; 0x58
 8006858:	f04f 0900 	mov.w	r9, #0
 800685c:	e7df      	b.n	800681e <_printf_float+0x172>
 800685e:	b913      	cbnz	r3, 8006866 <_printf_float+0x1ba>
 8006860:	6822      	ldr	r2, [r4, #0]
 8006862:	07d2      	lsls	r2, r2, #31
 8006864:	d501      	bpl.n	800686a <_printf_float+0x1be>
 8006866:	3302      	adds	r3, #2
 8006868:	e7f4      	b.n	8006854 <_printf_float+0x1a8>
 800686a:	2301      	movs	r3, #1
 800686c:	e7f2      	b.n	8006854 <_printf_float+0x1a8>
 800686e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006874:	4299      	cmp	r1, r3
 8006876:	db05      	blt.n	8006884 <_printf_float+0x1d8>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	6121      	str	r1, [r4, #16]
 800687c:	07d8      	lsls	r0, r3, #31
 800687e:	d5ea      	bpl.n	8006856 <_printf_float+0x1aa>
 8006880:	1c4b      	adds	r3, r1, #1
 8006882:	e7e7      	b.n	8006854 <_printf_float+0x1a8>
 8006884:	2900      	cmp	r1, #0
 8006886:	bfd4      	ite	le
 8006888:	f1c1 0202 	rsble	r2, r1, #2
 800688c:	2201      	movgt	r2, #1
 800688e:	4413      	add	r3, r2
 8006890:	e7e0      	b.n	8006854 <_printf_float+0x1a8>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	055a      	lsls	r2, r3, #21
 8006896:	d407      	bmi.n	80068a8 <_printf_float+0x1fc>
 8006898:	6923      	ldr	r3, [r4, #16]
 800689a:	4642      	mov	r2, r8
 800689c:	4631      	mov	r1, r6
 800689e:	4628      	mov	r0, r5
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	d12c      	bne.n	8006900 <_printf_float+0x254>
 80068a6:	e762      	b.n	800676e <_printf_float+0xc2>
 80068a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068ac:	f240 80e0 	bls.w	8006a70 <_printf_float+0x3c4>
 80068b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068b4:	2200      	movs	r2, #0
 80068b6:	2300      	movs	r3, #0
 80068b8:	f7fa f966 	bl	8000b88 <__aeabi_dcmpeq>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d034      	beq.n	800692a <_printf_float+0x27e>
 80068c0:	4a37      	ldr	r2, [pc, #220]	; (80069a0 <_printf_float+0x2f4>)
 80068c2:	2301      	movs	r3, #1
 80068c4:	4631      	mov	r1, r6
 80068c6:	4628      	mov	r0, r5
 80068c8:	47b8      	blx	r7
 80068ca:	3001      	adds	r0, #1
 80068cc:	f43f af4f 	beq.w	800676e <_printf_float+0xc2>
 80068d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068d4:	429a      	cmp	r2, r3
 80068d6:	db02      	blt.n	80068de <_printf_float+0x232>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	07d8      	lsls	r0, r3, #31
 80068dc:	d510      	bpl.n	8006900 <_printf_float+0x254>
 80068de:	ee18 3a10 	vmov	r3, s16
 80068e2:	4652      	mov	r2, sl
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af3f 	beq.w	800676e <_printf_float+0xc2>
 80068f0:	f04f 0800 	mov.w	r8, #0
 80068f4:	f104 091a 	add.w	r9, r4, #26
 80068f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068fa:	3b01      	subs	r3, #1
 80068fc:	4543      	cmp	r3, r8
 80068fe:	dc09      	bgt.n	8006914 <_printf_float+0x268>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	079b      	lsls	r3, r3, #30
 8006904:	f100 8105 	bmi.w	8006b12 <_printf_float+0x466>
 8006908:	68e0      	ldr	r0, [r4, #12]
 800690a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800690c:	4298      	cmp	r0, r3
 800690e:	bfb8      	it	lt
 8006910:	4618      	movlt	r0, r3
 8006912:	e72e      	b.n	8006772 <_printf_float+0xc6>
 8006914:	2301      	movs	r3, #1
 8006916:	464a      	mov	r2, r9
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	f43f af25 	beq.w	800676e <_printf_float+0xc2>
 8006924:	f108 0801 	add.w	r8, r8, #1
 8006928:	e7e6      	b.n	80068f8 <_printf_float+0x24c>
 800692a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800692c:	2b00      	cmp	r3, #0
 800692e:	dc39      	bgt.n	80069a4 <_printf_float+0x2f8>
 8006930:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <_printf_float+0x2f4>)
 8006932:	2301      	movs	r3, #1
 8006934:	4631      	mov	r1, r6
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f af17 	beq.w	800676e <_printf_float+0xc2>
 8006940:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006944:	4313      	orrs	r3, r2
 8006946:	d102      	bne.n	800694e <_printf_float+0x2a2>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	07d9      	lsls	r1, r3, #31
 800694c:	d5d8      	bpl.n	8006900 <_printf_float+0x254>
 800694e:	ee18 3a10 	vmov	r3, s16
 8006952:	4652      	mov	r2, sl
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f af07 	beq.w	800676e <_printf_float+0xc2>
 8006960:	f04f 0900 	mov.w	r9, #0
 8006964:	f104 0a1a 	add.w	sl, r4, #26
 8006968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800696a:	425b      	negs	r3, r3
 800696c:	454b      	cmp	r3, r9
 800696e:	dc01      	bgt.n	8006974 <_printf_float+0x2c8>
 8006970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006972:	e792      	b.n	800689a <_printf_float+0x1ee>
 8006974:	2301      	movs	r3, #1
 8006976:	4652      	mov	r2, sl
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f aef5 	beq.w	800676e <_printf_float+0xc2>
 8006984:	f109 0901 	add.w	r9, r9, #1
 8006988:	e7ee      	b.n	8006968 <_printf_float+0x2bc>
 800698a:	bf00      	nop
 800698c:	7fefffff 	.word	0x7fefffff
 8006990:	080096c4 	.word	0x080096c4
 8006994:	080096c8 	.word	0x080096c8
 8006998:	080096d0 	.word	0x080096d0
 800699c:	080096cc 	.word	0x080096cc
 80069a0:	080096d4 	.word	0x080096d4
 80069a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069a8:	429a      	cmp	r2, r3
 80069aa:	bfa8      	it	ge
 80069ac:	461a      	movge	r2, r3
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	4691      	mov	r9, r2
 80069b2:	dc37      	bgt.n	8006a24 <_printf_float+0x378>
 80069b4:	f04f 0b00 	mov.w	fp, #0
 80069b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069bc:	f104 021a 	add.w	r2, r4, #26
 80069c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069c2:	9309      	str	r3, [sp, #36]	; 0x24
 80069c4:	eba3 0309 	sub.w	r3, r3, r9
 80069c8:	455b      	cmp	r3, fp
 80069ca:	dc33      	bgt.n	8006a34 <_printf_float+0x388>
 80069cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069d0:	429a      	cmp	r2, r3
 80069d2:	db3b      	blt.n	8006a4c <_printf_float+0x3a0>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	07da      	lsls	r2, r3, #31
 80069d8:	d438      	bmi.n	8006a4c <_printf_float+0x3a0>
 80069da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	eba2 0901 	sub.w	r9, r2, r1
 80069e6:	4599      	cmp	r9, r3
 80069e8:	bfa8      	it	ge
 80069ea:	4699      	movge	r9, r3
 80069ec:	f1b9 0f00 	cmp.w	r9, #0
 80069f0:	dc35      	bgt.n	8006a5e <_printf_float+0x3b2>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069fa:	f104 0a1a 	add.w	sl, r4, #26
 80069fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	eba3 0309 	sub.w	r3, r3, r9
 8006a08:	4543      	cmp	r3, r8
 8006a0a:	f77f af79 	ble.w	8006900 <_printf_float+0x254>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4652      	mov	r2, sl
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f43f aea8 	beq.w	800676e <_printf_float+0xc2>
 8006a1e:	f108 0801 	add.w	r8, r8, #1
 8006a22:	e7ec      	b.n	80069fe <_printf_float+0x352>
 8006a24:	4613      	mov	r3, r2
 8006a26:	4631      	mov	r1, r6
 8006a28:	4642      	mov	r2, r8
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d1c0      	bne.n	80069b4 <_printf_float+0x308>
 8006a32:	e69c      	b.n	800676e <_printf_float+0xc2>
 8006a34:	2301      	movs	r3, #1
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a3c:	47b8      	blx	r7
 8006a3e:	3001      	adds	r0, #1
 8006a40:	f43f ae95 	beq.w	800676e <_printf_float+0xc2>
 8006a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a46:	f10b 0b01 	add.w	fp, fp, #1
 8006a4a:	e7b9      	b.n	80069c0 <_printf_float+0x314>
 8006a4c:	ee18 3a10 	vmov	r3, s16
 8006a50:	4652      	mov	r2, sl
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d1be      	bne.n	80069da <_printf_float+0x32e>
 8006a5c:	e687      	b.n	800676e <_printf_float+0xc2>
 8006a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a60:	464b      	mov	r3, r9
 8006a62:	4442      	add	r2, r8
 8006a64:	4631      	mov	r1, r6
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b8      	blx	r7
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d1c1      	bne.n	80069f2 <_printf_float+0x346>
 8006a6e:	e67e      	b.n	800676e <_printf_float+0xc2>
 8006a70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a72:	2a01      	cmp	r2, #1
 8006a74:	dc01      	bgt.n	8006a7a <_printf_float+0x3ce>
 8006a76:	07db      	lsls	r3, r3, #31
 8006a78:	d538      	bpl.n	8006aec <_printf_float+0x440>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b8      	blx	r7
 8006a84:	3001      	adds	r0, #1
 8006a86:	f43f ae72 	beq.w	800676e <_printf_float+0xc2>
 8006a8a:	ee18 3a10 	vmov	r3, s16
 8006a8e:	4652      	mov	r2, sl
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f ae69 	beq.w	800676e <_printf_float+0xc2>
 8006a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f7fa f870 	bl	8000b88 <__aeabi_dcmpeq>
 8006aa8:	b9d8      	cbnz	r0, 8006ae2 <_printf_float+0x436>
 8006aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aac:	f108 0201 	add.w	r2, r8, #1
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d10e      	bne.n	8006ada <_printf_float+0x42e>
 8006abc:	e657      	b.n	800676e <_printf_float+0xc2>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f ae50 	beq.w	800676e <_printf_float+0xc2>
 8006ace:	f108 0801 	add.w	r8, r8, #1
 8006ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	4543      	cmp	r3, r8
 8006ad8:	dcf1      	bgt.n	8006abe <_printf_float+0x412>
 8006ada:	464b      	mov	r3, r9
 8006adc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ae0:	e6dc      	b.n	800689c <_printf_float+0x1f0>
 8006ae2:	f04f 0800 	mov.w	r8, #0
 8006ae6:	f104 0a1a 	add.w	sl, r4, #26
 8006aea:	e7f2      	b.n	8006ad2 <_printf_float+0x426>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4642      	mov	r2, r8
 8006af0:	e7df      	b.n	8006ab2 <_printf_float+0x406>
 8006af2:	2301      	movs	r3, #1
 8006af4:	464a      	mov	r2, r9
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f ae36 	beq.w	800676e <_printf_float+0xc2>
 8006b02:	f108 0801 	add.w	r8, r8, #1
 8006b06:	68e3      	ldr	r3, [r4, #12]
 8006b08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b0a:	1a5b      	subs	r3, r3, r1
 8006b0c:	4543      	cmp	r3, r8
 8006b0e:	dcf0      	bgt.n	8006af2 <_printf_float+0x446>
 8006b10:	e6fa      	b.n	8006908 <_printf_float+0x25c>
 8006b12:	f04f 0800 	mov.w	r8, #0
 8006b16:	f104 0919 	add.w	r9, r4, #25
 8006b1a:	e7f4      	b.n	8006b06 <_printf_float+0x45a>

08006b1c <_printf_common>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	4616      	mov	r6, r2
 8006b22:	4699      	mov	r9, r3
 8006b24:	688a      	ldr	r2, [r1, #8]
 8006b26:	690b      	ldr	r3, [r1, #16]
 8006b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	bfb8      	it	lt
 8006b30:	4613      	movlt	r3, r2
 8006b32:	6033      	str	r3, [r6, #0]
 8006b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b38:	4607      	mov	r7, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	b10a      	cbz	r2, 8006b42 <_printf_common+0x26>
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	0699      	lsls	r1, r3, #26
 8006b46:	bf42      	ittt	mi
 8006b48:	6833      	ldrmi	r3, [r6, #0]
 8006b4a:	3302      	addmi	r3, #2
 8006b4c:	6033      	strmi	r3, [r6, #0]
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	f015 0506 	ands.w	r5, r5, #6
 8006b54:	d106      	bne.n	8006b64 <_printf_common+0x48>
 8006b56:	f104 0a19 	add.w	sl, r4, #25
 8006b5a:	68e3      	ldr	r3, [r4, #12]
 8006b5c:	6832      	ldr	r2, [r6, #0]
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dc26      	bgt.n	8006bb2 <_printf_common+0x96>
 8006b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b68:	1e13      	subs	r3, r2, #0
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	bf18      	it	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	0692      	lsls	r2, r2, #26
 8006b72:	d42b      	bmi.n	8006bcc <_printf_common+0xb0>
 8006b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b78:	4649      	mov	r1, r9
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	47c0      	blx	r8
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d01e      	beq.n	8006bc0 <_printf_common+0xa4>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	68e5      	ldr	r5, [r4, #12]
 8006b86:	6832      	ldr	r2, [r6, #0]
 8006b88:	f003 0306 	and.w	r3, r3, #6
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	bf08      	it	eq
 8006b90:	1aad      	subeq	r5, r5, r2
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	bf0c      	ite	eq
 8006b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b9c:	2500      	movne	r5, #0
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	bfc4      	itt	gt
 8006ba2:	1a9b      	subgt	r3, r3, r2
 8006ba4:	18ed      	addgt	r5, r5, r3
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	341a      	adds	r4, #26
 8006baa:	42b5      	cmp	r5, r6
 8006bac:	d11a      	bne.n	8006be4 <_printf_common+0xc8>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	e008      	b.n	8006bc4 <_printf_common+0xa8>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	4638      	mov	r0, r7
 8006bba:	47c0      	blx	r8
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d103      	bne.n	8006bc8 <_printf_common+0xac>
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc8:	3501      	adds	r5, #1
 8006bca:	e7c6      	b.n	8006b5a <_printf_common+0x3e>
 8006bcc:	18e1      	adds	r1, r4, r3
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	2030      	movs	r0, #48	; 0x30
 8006bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd6:	4422      	add	r2, r4
 8006bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006be0:	3302      	adds	r3, #2
 8006be2:	e7c7      	b.n	8006b74 <_printf_common+0x58>
 8006be4:	2301      	movs	r3, #1
 8006be6:	4622      	mov	r2, r4
 8006be8:	4649      	mov	r1, r9
 8006bea:	4638      	mov	r0, r7
 8006bec:	47c0      	blx	r8
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d0e6      	beq.n	8006bc0 <_printf_common+0xa4>
 8006bf2:	3601      	adds	r6, #1
 8006bf4:	e7d9      	b.n	8006baa <_printf_common+0x8e>
	...

08006bf8 <_printf_i>:
 8006bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	4691      	mov	r9, r2
 8006c00:	7e27      	ldrb	r7, [r4, #24]
 8006c02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c04:	2f78      	cmp	r7, #120	; 0x78
 8006c06:	4680      	mov	r8, r0
 8006c08:	469a      	mov	sl, r3
 8006c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c0e:	d807      	bhi.n	8006c20 <_printf_i+0x28>
 8006c10:	2f62      	cmp	r7, #98	; 0x62
 8006c12:	d80a      	bhi.n	8006c2a <_printf_i+0x32>
 8006c14:	2f00      	cmp	r7, #0
 8006c16:	f000 80d8 	beq.w	8006dca <_printf_i+0x1d2>
 8006c1a:	2f58      	cmp	r7, #88	; 0x58
 8006c1c:	f000 80a3 	beq.w	8006d66 <_printf_i+0x16e>
 8006c20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c28:	e03a      	b.n	8006ca0 <_printf_i+0xa8>
 8006c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c2e:	2b15      	cmp	r3, #21
 8006c30:	d8f6      	bhi.n	8006c20 <_printf_i+0x28>
 8006c32:	a001      	add	r0, pc, #4	; (adr r0, 8006c38 <_printf_i+0x40>)
 8006c34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c38:	08006c91 	.word	0x08006c91
 8006c3c:	08006ca5 	.word	0x08006ca5
 8006c40:	08006c21 	.word	0x08006c21
 8006c44:	08006c21 	.word	0x08006c21
 8006c48:	08006c21 	.word	0x08006c21
 8006c4c:	08006c21 	.word	0x08006c21
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006c21 	.word	0x08006c21
 8006c58:	08006c21 	.word	0x08006c21
 8006c5c:	08006c21 	.word	0x08006c21
 8006c60:	08006c21 	.word	0x08006c21
 8006c64:	08006db1 	.word	0x08006db1
 8006c68:	08006cd5 	.word	0x08006cd5
 8006c6c:	08006d93 	.word	0x08006d93
 8006c70:	08006c21 	.word	0x08006c21
 8006c74:	08006c21 	.word	0x08006c21
 8006c78:	08006dd3 	.word	0x08006dd3
 8006c7c:	08006c21 	.word	0x08006c21
 8006c80:	08006cd5 	.word	0x08006cd5
 8006c84:	08006c21 	.word	0x08006c21
 8006c88:	08006c21 	.word	0x08006c21
 8006c8c:	08006d9b 	.word	0x08006d9b
 8006c90:	680b      	ldr	r3, [r1, #0]
 8006c92:	1d1a      	adds	r2, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	600a      	str	r2, [r1, #0]
 8006c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0a3      	b.n	8006dec <_printf_i+0x1f4>
 8006ca4:	6825      	ldr	r5, [r4, #0]
 8006ca6:	6808      	ldr	r0, [r1, #0]
 8006ca8:	062e      	lsls	r6, r5, #24
 8006caa:	f100 0304 	add.w	r3, r0, #4
 8006cae:	d50a      	bpl.n	8006cc6 <_printf_i+0xce>
 8006cb0:	6805      	ldr	r5, [r0, #0]
 8006cb2:	600b      	str	r3, [r1, #0]
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	da03      	bge.n	8006cc0 <_printf_i+0xc8>
 8006cb8:	232d      	movs	r3, #45	; 0x2d
 8006cba:	426d      	negs	r5, r5
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc0:	485e      	ldr	r0, [pc, #376]	; (8006e3c <_printf_i+0x244>)
 8006cc2:	230a      	movs	r3, #10
 8006cc4:	e019      	b.n	8006cfa <_printf_i+0x102>
 8006cc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cca:	6805      	ldr	r5, [r0, #0]
 8006ccc:	600b      	str	r3, [r1, #0]
 8006cce:	bf18      	it	ne
 8006cd0:	b22d      	sxthne	r5, r5
 8006cd2:	e7ef      	b.n	8006cb4 <_printf_i+0xbc>
 8006cd4:	680b      	ldr	r3, [r1, #0]
 8006cd6:	6825      	ldr	r5, [r4, #0]
 8006cd8:	1d18      	adds	r0, r3, #4
 8006cda:	6008      	str	r0, [r1, #0]
 8006cdc:	0628      	lsls	r0, r5, #24
 8006cde:	d501      	bpl.n	8006ce4 <_printf_i+0xec>
 8006ce0:	681d      	ldr	r5, [r3, #0]
 8006ce2:	e002      	b.n	8006cea <_printf_i+0xf2>
 8006ce4:	0669      	lsls	r1, r5, #25
 8006ce6:	d5fb      	bpl.n	8006ce0 <_printf_i+0xe8>
 8006ce8:	881d      	ldrh	r5, [r3, #0]
 8006cea:	4854      	ldr	r0, [pc, #336]	; (8006e3c <_printf_i+0x244>)
 8006cec:	2f6f      	cmp	r7, #111	; 0x6f
 8006cee:	bf0c      	ite	eq
 8006cf0:	2308      	moveq	r3, #8
 8006cf2:	230a      	movne	r3, #10
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cfa:	6866      	ldr	r6, [r4, #4]
 8006cfc:	60a6      	str	r6, [r4, #8]
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	bfa2      	ittt	ge
 8006d02:	6821      	ldrge	r1, [r4, #0]
 8006d04:	f021 0104 	bicge.w	r1, r1, #4
 8006d08:	6021      	strge	r1, [r4, #0]
 8006d0a:	b90d      	cbnz	r5, 8006d10 <_printf_i+0x118>
 8006d0c:	2e00      	cmp	r6, #0
 8006d0e:	d04d      	beq.n	8006dac <_printf_i+0x1b4>
 8006d10:	4616      	mov	r6, r2
 8006d12:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d16:	fb03 5711 	mls	r7, r3, r1, r5
 8006d1a:	5dc7      	ldrb	r7, [r0, r7]
 8006d1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d20:	462f      	mov	r7, r5
 8006d22:	42bb      	cmp	r3, r7
 8006d24:	460d      	mov	r5, r1
 8006d26:	d9f4      	bls.n	8006d12 <_printf_i+0x11a>
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d10b      	bne.n	8006d44 <_printf_i+0x14c>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	07df      	lsls	r7, r3, #31
 8006d30:	d508      	bpl.n	8006d44 <_printf_i+0x14c>
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	6861      	ldr	r1, [r4, #4]
 8006d36:	4299      	cmp	r1, r3
 8006d38:	bfde      	ittt	le
 8006d3a:	2330      	movle	r3, #48	; 0x30
 8006d3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d40:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006d44:	1b92      	subs	r2, r2, r6
 8006d46:	6122      	str	r2, [r4, #16]
 8006d48:	f8cd a000 	str.w	sl, [sp]
 8006d4c:	464b      	mov	r3, r9
 8006d4e:	aa03      	add	r2, sp, #12
 8006d50:	4621      	mov	r1, r4
 8006d52:	4640      	mov	r0, r8
 8006d54:	f7ff fee2 	bl	8006b1c <_printf_common>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d14c      	bne.n	8006df6 <_printf_i+0x1fe>
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d60:	b004      	add	sp, #16
 8006d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d66:	4835      	ldr	r0, [pc, #212]	; (8006e3c <_printf_i+0x244>)
 8006d68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	680e      	ldr	r6, [r1, #0]
 8006d70:	061f      	lsls	r7, r3, #24
 8006d72:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d76:	600e      	str	r6, [r1, #0]
 8006d78:	d514      	bpl.n	8006da4 <_printf_i+0x1ac>
 8006d7a:	07d9      	lsls	r1, r3, #31
 8006d7c:	bf44      	itt	mi
 8006d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d82:	6023      	strmi	r3, [r4, #0]
 8006d84:	b91d      	cbnz	r5, 8006d8e <_printf_i+0x196>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	f023 0320 	bic.w	r3, r3, #32
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	2310      	movs	r3, #16
 8006d90:	e7b0      	b.n	8006cf4 <_printf_i+0xfc>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	f043 0320 	orr.w	r3, r3, #32
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	2378      	movs	r3, #120	; 0x78
 8006d9c:	4828      	ldr	r0, [pc, #160]	; (8006e40 <_printf_i+0x248>)
 8006d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006da2:	e7e3      	b.n	8006d6c <_printf_i+0x174>
 8006da4:	065e      	lsls	r6, r3, #25
 8006da6:	bf48      	it	mi
 8006da8:	b2ad      	uxthmi	r5, r5
 8006daa:	e7e6      	b.n	8006d7a <_printf_i+0x182>
 8006dac:	4616      	mov	r6, r2
 8006dae:	e7bb      	b.n	8006d28 <_printf_i+0x130>
 8006db0:	680b      	ldr	r3, [r1, #0]
 8006db2:	6826      	ldr	r6, [r4, #0]
 8006db4:	6960      	ldr	r0, [r4, #20]
 8006db6:	1d1d      	adds	r5, r3, #4
 8006db8:	600d      	str	r5, [r1, #0]
 8006dba:	0635      	lsls	r5, r6, #24
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_i+0x1cc>
 8006dc0:	6018      	str	r0, [r3, #0]
 8006dc2:	e002      	b.n	8006dca <_printf_i+0x1d2>
 8006dc4:	0671      	lsls	r1, r6, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_printf_i+0x1c8>
 8006dc8:	8018      	strh	r0, [r3, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6123      	str	r3, [r4, #16]
 8006dce:	4616      	mov	r6, r2
 8006dd0:	e7ba      	b.n	8006d48 <_printf_i+0x150>
 8006dd2:	680b      	ldr	r3, [r1, #0]
 8006dd4:	1d1a      	adds	r2, r3, #4
 8006dd6:	600a      	str	r2, [r1, #0]
 8006dd8:	681e      	ldr	r6, [r3, #0]
 8006dda:	6862      	ldr	r2, [r4, #4]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4630      	mov	r0, r6
 8006de0:	f7f9 fa5e 	bl	80002a0 <memchr>
 8006de4:	b108      	cbz	r0, 8006dea <_printf_i+0x1f2>
 8006de6:	1b80      	subs	r0, r0, r6
 8006de8:	6060      	str	r0, [r4, #4]
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	2300      	movs	r3, #0
 8006df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df4:	e7a8      	b.n	8006d48 <_printf_i+0x150>
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	4632      	mov	r2, r6
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	47d0      	blx	sl
 8006e00:	3001      	adds	r0, #1
 8006e02:	d0ab      	beq.n	8006d5c <_printf_i+0x164>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	079b      	lsls	r3, r3, #30
 8006e08:	d413      	bmi.n	8006e32 <_printf_i+0x23a>
 8006e0a:	68e0      	ldr	r0, [r4, #12]
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	4298      	cmp	r0, r3
 8006e10:	bfb8      	it	lt
 8006e12:	4618      	movlt	r0, r3
 8006e14:	e7a4      	b.n	8006d60 <_printf_i+0x168>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	47d0      	blx	sl
 8006e20:	3001      	adds	r0, #1
 8006e22:	d09b      	beq.n	8006d5c <_printf_i+0x164>
 8006e24:	3501      	adds	r5, #1
 8006e26:	68e3      	ldr	r3, [r4, #12]
 8006e28:	9903      	ldr	r1, [sp, #12]
 8006e2a:	1a5b      	subs	r3, r3, r1
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	dcf2      	bgt.n	8006e16 <_printf_i+0x21e>
 8006e30:	e7eb      	b.n	8006e0a <_printf_i+0x212>
 8006e32:	2500      	movs	r5, #0
 8006e34:	f104 0619 	add.w	r6, r4, #25
 8006e38:	e7f5      	b.n	8006e26 <_printf_i+0x22e>
 8006e3a:	bf00      	nop
 8006e3c:	080096d6 	.word	0x080096d6
 8006e40:	080096e7 	.word	0x080096e7

08006e44 <siprintf>:
 8006e44:	b40e      	push	{r1, r2, r3}
 8006e46:	b500      	push	{lr}
 8006e48:	b09c      	sub	sp, #112	; 0x70
 8006e4a:	ab1d      	add	r3, sp, #116	; 0x74
 8006e4c:	9002      	str	r0, [sp, #8]
 8006e4e:	9006      	str	r0, [sp, #24]
 8006e50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e54:	4809      	ldr	r0, [pc, #36]	; (8006e7c <siprintf+0x38>)
 8006e56:	9107      	str	r1, [sp, #28]
 8006e58:	9104      	str	r1, [sp, #16]
 8006e5a:	4909      	ldr	r1, [pc, #36]	; (8006e80 <siprintf+0x3c>)
 8006e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e60:	9105      	str	r1, [sp, #20]
 8006e62:	6800      	ldr	r0, [r0, #0]
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	a902      	add	r1, sp, #8
 8006e68:	f001 fb24 	bl	80084b4 <_svfiprintf_r>
 8006e6c:	9b02      	ldr	r3, [sp, #8]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	b01c      	add	sp, #112	; 0x70
 8006e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e78:	b003      	add	sp, #12
 8006e7a:	4770      	bx	lr
 8006e7c:	2000000c 	.word	0x2000000c
 8006e80:	ffff0208 	.word	0xffff0208

08006e84 <quorem>:
 8006e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	6903      	ldr	r3, [r0, #16]
 8006e8a:	690c      	ldr	r4, [r1, #16]
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	4607      	mov	r7, r0
 8006e90:	f2c0 8081 	blt.w	8006f96 <quorem+0x112>
 8006e94:	3c01      	subs	r4, #1
 8006e96:	f101 0814 	add.w	r8, r1, #20
 8006e9a:	f100 0514 	add.w	r5, r0, #20
 8006e9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ea2:	9301      	str	r3, [sp, #4]
 8006ea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eac:	3301      	adds	r3, #1
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006eb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006eb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ebc:	d331      	bcc.n	8006f22 <quorem+0x9e>
 8006ebe:	f04f 0e00 	mov.w	lr, #0
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	46ac      	mov	ip, r5
 8006ec6:	46f2      	mov	sl, lr
 8006ec8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ecc:	b293      	uxth	r3, r2
 8006ece:	fb06 e303 	mla	r3, r6, r3, lr
 8006ed2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ebaa 0303 	sub.w	r3, sl, r3
 8006edc:	0c12      	lsrs	r2, r2, #16
 8006ede:	f8dc a000 	ldr.w	sl, [ip]
 8006ee2:	fb06 e202 	mla	r2, r6, r2, lr
 8006ee6:	fa13 f38a 	uxtah	r3, r3, sl
 8006eea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006eee:	fa1f fa82 	uxth.w	sl, r2
 8006ef2:	f8dc 2000 	ldr.w	r2, [ip]
 8006ef6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006efa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f04:	4581      	cmp	r9, r0
 8006f06:	f84c 3b04 	str.w	r3, [ip], #4
 8006f0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f0e:	d2db      	bcs.n	8006ec8 <quorem+0x44>
 8006f10:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f14:	b92b      	cbnz	r3, 8006f22 <quorem+0x9e>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	3b04      	subs	r3, #4
 8006f1a:	429d      	cmp	r5, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	d32e      	bcc.n	8006f7e <quorem+0xfa>
 8006f20:	613c      	str	r4, [r7, #16]
 8006f22:	4638      	mov	r0, r7
 8006f24:	f001 f8b2 	bl	800808c <__mcmp>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	db24      	blt.n	8006f76 <quorem+0xf2>
 8006f2c:	3601      	adds	r6, #1
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f04f 0c00 	mov.w	ip, #0
 8006f34:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f38:	f8d0 e000 	ldr.w	lr, [r0]
 8006f3c:	b293      	uxth	r3, r2
 8006f3e:	ebac 0303 	sub.w	r3, ip, r3
 8006f42:	0c12      	lsrs	r2, r2, #16
 8006f44:	fa13 f38e 	uxtah	r3, r3, lr
 8006f48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f56:	45c1      	cmp	r9, r8
 8006f58:	f840 3b04 	str.w	r3, [r0], #4
 8006f5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f60:	d2e8      	bcs.n	8006f34 <quorem+0xb0>
 8006f62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f6a:	b922      	cbnz	r2, 8006f76 <quorem+0xf2>
 8006f6c:	3b04      	subs	r3, #4
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	d30a      	bcc.n	8006f8a <quorem+0x106>
 8006f74:	613c      	str	r4, [r7, #16]
 8006f76:	4630      	mov	r0, r6
 8006f78:	b003      	add	sp, #12
 8006f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	3b04      	subs	r3, #4
 8006f82:	2a00      	cmp	r2, #0
 8006f84:	d1cc      	bne.n	8006f20 <quorem+0x9c>
 8006f86:	3c01      	subs	r4, #1
 8006f88:	e7c7      	b.n	8006f1a <quorem+0x96>
 8006f8a:	6812      	ldr	r2, [r2, #0]
 8006f8c:	3b04      	subs	r3, #4
 8006f8e:	2a00      	cmp	r2, #0
 8006f90:	d1f0      	bne.n	8006f74 <quorem+0xf0>
 8006f92:	3c01      	subs	r4, #1
 8006f94:	e7eb      	b.n	8006f6e <quorem+0xea>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e7ee      	b.n	8006f78 <quorem+0xf4>
 8006f9a:	0000      	movs	r0, r0
 8006f9c:	0000      	movs	r0, r0
	...

08006fa0 <_dtoa_r>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	ed2d 8b02 	vpush	{d8}
 8006fa8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006faa:	b095      	sub	sp, #84	; 0x54
 8006fac:	4616      	mov	r6, r2
 8006fae:	461f      	mov	r7, r3
 8006fb0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006fb4:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8006fb8:	4604      	mov	r4, r0
 8006fba:	b975      	cbnz	r5, 8006fda <_dtoa_r+0x3a>
 8006fbc:	2010      	movs	r0, #16
 8006fbe:	f000 fddf 	bl	8007b80 <malloc>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	6260      	str	r0, [r4, #36]	; 0x24
 8006fc6:	b920      	cbnz	r0, 8006fd2 <_dtoa_r+0x32>
 8006fc8:	4bb1      	ldr	r3, [pc, #708]	; (8007290 <_dtoa_r+0x2f0>)
 8006fca:	21ea      	movs	r1, #234	; 0xea
 8006fcc:	48b1      	ldr	r0, [pc, #708]	; (8007294 <_dtoa_r+0x2f4>)
 8006fce:	f001 fb81 	bl	80086d4 <__assert_func>
 8006fd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fd6:	6005      	str	r5, [r0, #0]
 8006fd8:	60c5      	str	r5, [r0, #12]
 8006fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fdc:	6819      	ldr	r1, [r3, #0]
 8006fde:	b151      	cbz	r1, 8006ff6 <_dtoa_r+0x56>
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	604a      	str	r2, [r1, #4]
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4093      	lsls	r3, r2
 8006fe8:	608b      	str	r3, [r1, #8]
 8006fea:	4620      	mov	r0, r4
 8006fec:	f000 fe10 	bl	8007c10 <_Bfree>
 8006ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	1e3b      	subs	r3, r7, #0
 8006ff8:	bfb9      	ittee	lt
 8006ffa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ffe:	9305      	strlt	r3, [sp, #20]
 8007000:	2300      	movge	r3, #0
 8007002:	f8c8 3000 	strge.w	r3, [r8]
 8007006:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800700a:	4ba3      	ldr	r3, [pc, #652]	; (8007298 <_dtoa_r+0x2f8>)
 800700c:	bfbc      	itt	lt
 800700e:	2201      	movlt	r2, #1
 8007010:	f8c8 2000 	strlt.w	r2, [r8]
 8007014:	ea33 0309 	bics.w	r3, r3, r9
 8007018:	d11b      	bne.n	8007052 <_dtoa_r+0xb2>
 800701a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800701c:	f242 730f 	movw	r3, #9999	; 0x270f
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007026:	4333      	orrs	r3, r6
 8007028:	f000 857d 	beq.w	8007b26 <_dtoa_r+0xb86>
 800702c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800702e:	b963      	cbnz	r3, 800704a <_dtoa_r+0xaa>
 8007030:	4b9a      	ldr	r3, [pc, #616]	; (800729c <_dtoa_r+0x2fc>)
 8007032:	e024      	b.n	800707e <_dtoa_r+0xde>
 8007034:	4b9a      	ldr	r3, [pc, #616]	; (80072a0 <_dtoa_r+0x300>)
 8007036:	9303      	str	r3, [sp, #12]
 8007038:	3308      	adds	r3, #8
 800703a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	9803      	ldr	r0, [sp, #12]
 8007040:	b015      	add	sp, #84	; 0x54
 8007042:	ecbd 8b02 	vpop	{d8}
 8007046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704a:	4b94      	ldr	r3, [pc, #592]	; (800729c <_dtoa_r+0x2fc>)
 800704c:	9303      	str	r3, [sp, #12]
 800704e:	3303      	adds	r3, #3
 8007050:	e7f3      	b.n	800703a <_dtoa_r+0x9a>
 8007052:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007056:	2200      	movs	r2, #0
 8007058:	ec51 0b17 	vmov	r0, r1, d7
 800705c:	2300      	movs	r3, #0
 800705e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007062:	f7f9 fd91 	bl	8000b88 <__aeabi_dcmpeq>
 8007066:	4680      	mov	r8, r0
 8007068:	b158      	cbz	r0, 8007082 <_dtoa_r+0xe2>
 800706a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800706c:	2301      	movs	r3, #1
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 8554 	beq.w	8007b20 <_dtoa_r+0xb80>
 8007078:	488a      	ldr	r0, [pc, #552]	; (80072a4 <_dtoa_r+0x304>)
 800707a:	6018      	str	r0, [r3, #0]
 800707c:	1e43      	subs	r3, r0, #1
 800707e:	9303      	str	r3, [sp, #12]
 8007080:	e7dd      	b.n	800703e <_dtoa_r+0x9e>
 8007082:	ab12      	add	r3, sp, #72	; 0x48
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	ab13      	add	r3, sp, #76	; 0x4c
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	4620      	mov	r0, r4
 800708c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007090:	f001 f8a0 	bl	80081d4 <__d2b>
 8007094:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007098:	4683      	mov	fp, r0
 800709a:	2d00      	cmp	r5, #0
 800709c:	d07c      	beq.n	8007198 <_dtoa_r+0x1f8>
 800709e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80070a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80070ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070b0:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070b4:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070b8:	4b7b      	ldr	r3, [pc, #492]	; (80072a8 <_dtoa_r+0x308>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 f942 	bl	8000348 <__aeabi_dsub>
 80070c4:	a36c      	add	r3, pc, #432	; (adr r3, 8007278 <_dtoa_r+0x2d8>)
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	f7f9 faf5 	bl	80006b8 <__aeabi_dmul>
 80070ce:	a36c      	add	r3, pc, #432	; (adr r3, 8007280 <_dtoa_r+0x2e0>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f7f9 f93a 	bl	800034c <__adddf3>
 80070d8:	4606      	mov	r6, r0
 80070da:	4628      	mov	r0, r5
 80070dc:	460f      	mov	r7, r1
 80070de:	f7f9 fa81 	bl	80005e4 <__aeabi_i2d>
 80070e2:	a369      	add	r3, pc, #420	; (adr r3, 8007288 <_dtoa_r+0x2e8>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f7f9 fae6 	bl	80006b8 <__aeabi_dmul>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4630      	mov	r0, r6
 80070f2:	4639      	mov	r1, r7
 80070f4:	f7f9 f92a 	bl	800034c <__adddf3>
 80070f8:	4606      	mov	r6, r0
 80070fa:	460f      	mov	r7, r1
 80070fc:	f7f9 fd8c 	bl	8000c18 <__aeabi_d2iz>
 8007100:	2200      	movs	r2, #0
 8007102:	4682      	mov	sl, r0
 8007104:	2300      	movs	r3, #0
 8007106:	4630      	mov	r0, r6
 8007108:	4639      	mov	r1, r7
 800710a:	f7f9 fd47 	bl	8000b9c <__aeabi_dcmplt>
 800710e:	b148      	cbz	r0, 8007124 <_dtoa_r+0x184>
 8007110:	4650      	mov	r0, sl
 8007112:	f7f9 fa67 	bl	80005e4 <__aeabi_i2d>
 8007116:	4632      	mov	r2, r6
 8007118:	463b      	mov	r3, r7
 800711a:	f7f9 fd35 	bl	8000b88 <__aeabi_dcmpeq>
 800711e:	b908      	cbnz	r0, 8007124 <_dtoa_r+0x184>
 8007120:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007124:	f1ba 0f16 	cmp.w	sl, #22
 8007128:	d854      	bhi.n	80071d4 <_dtoa_r+0x234>
 800712a:	4b60      	ldr	r3, [pc, #384]	; (80072ac <_dtoa_r+0x30c>)
 800712c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007138:	f7f9 fd30 	bl	8000b9c <__aeabi_dcmplt>
 800713c:	2800      	cmp	r0, #0
 800713e:	d04b      	beq.n	80071d8 <_dtoa_r+0x238>
 8007140:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007144:	2300      	movs	r3, #0
 8007146:	930f      	str	r3, [sp, #60]	; 0x3c
 8007148:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800714a:	1b5d      	subs	r5, r3, r5
 800714c:	1e6b      	subs	r3, r5, #1
 800714e:	9307      	str	r3, [sp, #28]
 8007150:	bf43      	ittte	mi
 8007152:	2300      	movmi	r3, #0
 8007154:	f1c5 0801 	rsbmi	r8, r5, #1
 8007158:	9307      	strmi	r3, [sp, #28]
 800715a:	f04f 0800 	movpl.w	r8, #0
 800715e:	f1ba 0f00 	cmp.w	sl, #0
 8007162:	db3b      	blt.n	80071dc <_dtoa_r+0x23c>
 8007164:	9b07      	ldr	r3, [sp, #28]
 8007166:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800716a:	4453      	add	r3, sl
 800716c:	9307      	str	r3, [sp, #28]
 800716e:	2300      	movs	r3, #0
 8007170:	9308      	str	r3, [sp, #32]
 8007172:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007174:	2b09      	cmp	r3, #9
 8007176:	d869      	bhi.n	800724c <_dtoa_r+0x2ac>
 8007178:	2b05      	cmp	r3, #5
 800717a:	bfc4      	itt	gt
 800717c:	3b04      	subgt	r3, #4
 800717e:	9320      	strgt	r3, [sp, #128]	; 0x80
 8007180:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007182:	f1a3 0302 	sub.w	r3, r3, #2
 8007186:	bfcc      	ite	gt
 8007188:	2500      	movgt	r5, #0
 800718a:	2501      	movle	r5, #1
 800718c:	2b03      	cmp	r3, #3
 800718e:	d869      	bhi.n	8007264 <_dtoa_r+0x2c4>
 8007190:	e8df f003 	tbb	[pc, r3]
 8007194:	5a4c4e2c 	.word	0x5a4c4e2c
 8007198:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800719c:	441d      	add	r5, r3
 800719e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	bfc1      	itttt	gt
 80071a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071aa:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071ae:	fa09 f303 	lslgt.w	r3, r9, r3
 80071b2:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071b6:	bfda      	itte	le
 80071b8:	f1c3 0320 	rsble	r3, r3, #32
 80071bc:	fa06 f003 	lslle.w	r0, r6, r3
 80071c0:	4318      	orrgt	r0, r3
 80071c2:	f7f9 f9ff 	bl	80005c4 <__aeabi_ui2d>
 80071c6:	2301      	movs	r3, #1
 80071c8:	4606      	mov	r6, r0
 80071ca:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071ce:	3d01      	subs	r5, #1
 80071d0:	9310      	str	r3, [sp, #64]	; 0x40
 80071d2:	e771      	b.n	80070b8 <_dtoa_r+0x118>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7b6      	b.n	8007146 <_dtoa_r+0x1a6>
 80071d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80071da:	e7b5      	b.n	8007148 <_dtoa_r+0x1a8>
 80071dc:	f1ca 0300 	rsb	r3, sl, #0
 80071e0:	9308      	str	r3, [sp, #32]
 80071e2:	2300      	movs	r3, #0
 80071e4:	eba8 080a 	sub.w	r8, r8, sl
 80071e8:	930e      	str	r3, [sp, #56]	; 0x38
 80071ea:	e7c2      	b.n	8007172 <_dtoa_r+0x1d2>
 80071ec:	2300      	movs	r3, #0
 80071ee:	930c      	str	r3, [sp, #48]	; 0x30
 80071f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	dc39      	bgt.n	800726a <_dtoa_r+0x2ca>
 80071f6:	f04f 0901 	mov.w	r9, #1
 80071fa:	f8cd 9018 	str.w	r9, [sp, #24]
 80071fe:	464b      	mov	r3, r9
 8007200:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8007204:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007206:	2200      	movs	r2, #0
 8007208:	6042      	str	r2, [r0, #4]
 800720a:	2204      	movs	r2, #4
 800720c:	f102 0614 	add.w	r6, r2, #20
 8007210:	429e      	cmp	r6, r3
 8007212:	6841      	ldr	r1, [r0, #4]
 8007214:	d94e      	bls.n	80072b4 <_dtoa_r+0x314>
 8007216:	4620      	mov	r0, r4
 8007218:	f000 fcba 	bl	8007b90 <_Balloc>
 800721c:	9003      	str	r0, [sp, #12]
 800721e:	2800      	cmp	r0, #0
 8007220:	d14c      	bne.n	80072bc <_dtoa_r+0x31c>
 8007222:	4b23      	ldr	r3, [pc, #140]	; (80072b0 <_dtoa_r+0x310>)
 8007224:	4602      	mov	r2, r0
 8007226:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800722a:	e6cf      	b.n	8006fcc <_dtoa_r+0x2c>
 800722c:	2301      	movs	r3, #1
 800722e:	e7de      	b.n	80071ee <_dtoa_r+0x24e>
 8007230:	2300      	movs	r3, #0
 8007232:	930c      	str	r3, [sp, #48]	; 0x30
 8007234:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007236:	eb0a 0903 	add.w	r9, sl, r3
 800723a:	f109 0301 	add.w	r3, r9, #1
 800723e:	2b01      	cmp	r3, #1
 8007240:	9306      	str	r3, [sp, #24]
 8007242:	bfb8      	it	lt
 8007244:	2301      	movlt	r3, #1
 8007246:	e7dd      	b.n	8007204 <_dtoa_r+0x264>
 8007248:	2301      	movs	r3, #1
 800724a:	e7f2      	b.n	8007232 <_dtoa_r+0x292>
 800724c:	2501      	movs	r5, #1
 800724e:	2300      	movs	r3, #0
 8007250:	9320      	str	r3, [sp, #128]	; 0x80
 8007252:	950c      	str	r5, [sp, #48]	; 0x30
 8007254:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007258:	2200      	movs	r2, #0
 800725a:	f8cd 9018 	str.w	r9, [sp, #24]
 800725e:	2312      	movs	r3, #18
 8007260:	9221      	str	r2, [sp, #132]	; 0x84
 8007262:	e7cf      	b.n	8007204 <_dtoa_r+0x264>
 8007264:	2301      	movs	r3, #1
 8007266:	930c      	str	r3, [sp, #48]	; 0x30
 8007268:	e7f4      	b.n	8007254 <_dtoa_r+0x2b4>
 800726a:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 800726e:	f8cd 9018 	str.w	r9, [sp, #24]
 8007272:	464b      	mov	r3, r9
 8007274:	e7c6      	b.n	8007204 <_dtoa_r+0x264>
 8007276:	bf00      	nop
 8007278:	636f4361 	.word	0x636f4361
 800727c:	3fd287a7 	.word	0x3fd287a7
 8007280:	8b60c8b3 	.word	0x8b60c8b3
 8007284:	3fc68a28 	.word	0x3fc68a28
 8007288:	509f79fb 	.word	0x509f79fb
 800728c:	3fd34413 	.word	0x3fd34413
 8007290:	08009705 	.word	0x08009705
 8007294:	0800971c 	.word	0x0800971c
 8007298:	7ff00000 	.word	0x7ff00000
 800729c:	08009701 	.word	0x08009701
 80072a0:	080096f8 	.word	0x080096f8
 80072a4:	080096d5 	.word	0x080096d5
 80072a8:	3ff80000 	.word	0x3ff80000
 80072ac:	08009818 	.word	0x08009818
 80072b0:	0800977b 	.word	0x0800977b
 80072b4:	3101      	adds	r1, #1
 80072b6:	6041      	str	r1, [r0, #4]
 80072b8:	0052      	lsls	r2, r2, #1
 80072ba:	e7a7      	b.n	800720c <_dtoa_r+0x26c>
 80072bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072be:	9a03      	ldr	r2, [sp, #12]
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	9b06      	ldr	r3, [sp, #24]
 80072c4:	2b0e      	cmp	r3, #14
 80072c6:	f200 80ad 	bhi.w	8007424 <_dtoa_r+0x484>
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	f000 80aa 	beq.w	8007424 <_dtoa_r+0x484>
 80072d0:	f1ba 0f00 	cmp.w	sl, #0
 80072d4:	dd36      	ble.n	8007344 <_dtoa_r+0x3a4>
 80072d6:	4ac3      	ldr	r2, [pc, #780]	; (80075e4 <_dtoa_r+0x644>)
 80072d8:	f00a 030f 	and.w	r3, sl, #15
 80072dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072e0:	ed93 7b00 	vldr	d7, [r3]
 80072e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80072e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80072ec:	eeb0 8a47 	vmov.f32	s16, s14
 80072f0:	eef0 8a67 	vmov.f32	s17, s15
 80072f4:	d016      	beq.n	8007324 <_dtoa_r+0x384>
 80072f6:	4bbc      	ldr	r3, [pc, #752]	; (80075e8 <_dtoa_r+0x648>)
 80072f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007300:	f7f9 fb04 	bl	800090c <__aeabi_ddiv>
 8007304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007308:	f007 070f 	and.w	r7, r7, #15
 800730c:	2503      	movs	r5, #3
 800730e:	4eb6      	ldr	r6, [pc, #728]	; (80075e8 <_dtoa_r+0x648>)
 8007310:	b957      	cbnz	r7, 8007328 <_dtoa_r+0x388>
 8007312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007316:	ec53 2b18 	vmov	r2, r3, d8
 800731a:	f7f9 faf7 	bl	800090c <__aeabi_ddiv>
 800731e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007322:	e029      	b.n	8007378 <_dtoa_r+0x3d8>
 8007324:	2502      	movs	r5, #2
 8007326:	e7f2      	b.n	800730e <_dtoa_r+0x36e>
 8007328:	07f9      	lsls	r1, r7, #31
 800732a:	d508      	bpl.n	800733e <_dtoa_r+0x39e>
 800732c:	ec51 0b18 	vmov	r0, r1, d8
 8007330:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007334:	f7f9 f9c0 	bl	80006b8 <__aeabi_dmul>
 8007338:	ec41 0b18 	vmov	d8, r0, r1
 800733c:	3501      	adds	r5, #1
 800733e:	107f      	asrs	r7, r7, #1
 8007340:	3608      	adds	r6, #8
 8007342:	e7e5      	b.n	8007310 <_dtoa_r+0x370>
 8007344:	f000 80a6 	beq.w	8007494 <_dtoa_r+0x4f4>
 8007348:	f1ca 0600 	rsb	r6, sl, #0
 800734c:	4ba5      	ldr	r3, [pc, #660]	; (80075e4 <_dtoa_r+0x644>)
 800734e:	4fa6      	ldr	r7, [pc, #664]	; (80075e8 <_dtoa_r+0x648>)
 8007350:	f006 020f 	and.w	r2, r6, #15
 8007354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007360:	f7f9 f9aa 	bl	80006b8 <__aeabi_dmul>
 8007364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007368:	1136      	asrs	r6, r6, #4
 800736a:	2300      	movs	r3, #0
 800736c:	2502      	movs	r5, #2
 800736e:	2e00      	cmp	r6, #0
 8007370:	f040 8085 	bne.w	800747e <_dtoa_r+0x4de>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1d2      	bne.n	800731e <_dtoa_r+0x37e>
 8007378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 808c 	beq.w	8007498 <_dtoa_r+0x4f8>
 8007380:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8007384:	4b99      	ldr	r3, [pc, #612]	; (80075ec <_dtoa_r+0x64c>)
 8007386:	2200      	movs	r2, #0
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	f7f9 fc06 	bl	8000b9c <__aeabi_dcmplt>
 8007390:	2800      	cmp	r0, #0
 8007392:	f000 8081 	beq.w	8007498 <_dtoa_r+0x4f8>
 8007396:	9b06      	ldr	r3, [sp, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d07d      	beq.n	8007498 <_dtoa_r+0x4f8>
 800739c:	f1b9 0f00 	cmp.w	r9, #0
 80073a0:	dd3c      	ble.n	800741c <_dtoa_r+0x47c>
 80073a2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80073a6:	9309      	str	r3, [sp, #36]	; 0x24
 80073a8:	2200      	movs	r2, #0
 80073aa:	4b91      	ldr	r3, [pc, #580]	; (80075f0 <_dtoa_r+0x650>)
 80073ac:	4630      	mov	r0, r6
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f9 f982 	bl	80006b8 <__aeabi_dmul>
 80073b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073b8:	3501      	adds	r5, #1
 80073ba:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80073be:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80073c2:	4628      	mov	r0, r5
 80073c4:	f7f9 f90e 	bl	80005e4 <__aeabi_i2d>
 80073c8:	4632      	mov	r2, r6
 80073ca:	463b      	mov	r3, r7
 80073cc:	f7f9 f974 	bl	80006b8 <__aeabi_dmul>
 80073d0:	4b88      	ldr	r3, [pc, #544]	; (80075f4 <_dtoa_r+0x654>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	f7f8 ffba 	bl	800034c <__adddf3>
 80073d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80073dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073e0:	9305      	str	r3, [sp, #20]
 80073e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d15c      	bne.n	80074a2 <_dtoa_r+0x502>
 80073e8:	4b83      	ldr	r3, [pc, #524]	; (80075f8 <_dtoa_r+0x658>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	4630      	mov	r0, r6
 80073ee:	4639      	mov	r1, r7
 80073f0:	f7f8 ffaa 	bl	8000348 <__aeabi_dsub>
 80073f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073f8:	4606      	mov	r6, r0
 80073fa:	460f      	mov	r7, r1
 80073fc:	f7f9 fbec 	bl	8000bd8 <__aeabi_dcmpgt>
 8007400:	2800      	cmp	r0, #0
 8007402:	f040 8296 	bne.w	8007932 <_dtoa_r+0x992>
 8007406:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800740a:	4630      	mov	r0, r6
 800740c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007410:	4639      	mov	r1, r7
 8007412:	f7f9 fbc3 	bl	8000b9c <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	f040 8288 	bne.w	800792c <_dtoa_r+0x98c>
 800741c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007420:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007426:	2b00      	cmp	r3, #0
 8007428:	f2c0 8158 	blt.w	80076dc <_dtoa_r+0x73c>
 800742c:	f1ba 0f0e 	cmp.w	sl, #14
 8007430:	f300 8154 	bgt.w	80076dc <_dtoa_r+0x73c>
 8007434:	4b6b      	ldr	r3, [pc, #428]	; (80075e4 <_dtoa_r+0x644>)
 8007436:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800743a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800743e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007440:	2b00      	cmp	r3, #0
 8007442:	f280 80e3 	bge.w	800760c <_dtoa_r+0x66c>
 8007446:	9b06      	ldr	r3, [sp, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f300 80df 	bgt.w	800760c <_dtoa_r+0x66c>
 800744e:	f040 826d 	bne.w	800792c <_dtoa_r+0x98c>
 8007452:	4b69      	ldr	r3, [pc, #420]	; (80075f8 <_dtoa_r+0x658>)
 8007454:	2200      	movs	r2, #0
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f9 f92d 	bl	80006b8 <__aeabi_dmul>
 800745e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007462:	f7f9 fbaf 	bl	8000bc4 <__aeabi_dcmpge>
 8007466:	9e06      	ldr	r6, [sp, #24]
 8007468:	4637      	mov	r7, r6
 800746a:	2800      	cmp	r0, #0
 800746c:	f040 8243 	bne.w	80078f6 <_dtoa_r+0x956>
 8007470:	9d03      	ldr	r5, [sp, #12]
 8007472:	2331      	movs	r3, #49	; 0x31
 8007474:	f805 3b01 	strb.w	r3, [r5], #1
 8007478:	f10a 0a01 	add.w	sl, sl, #1
 800747c:	e23f      	b.n	80078fe <_dtoa_r+0x95e>
 800747e:	07f2      	lsls	r2, r6, #31
 8007480:	d505      	bpl.n	800748e <_dtoa_r+0x4ee>
 8007482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007486:	f7f9 f917 	bl	80006b8 <__aeabi_dmul>
 800748a:	3501      	adds	r5, #1
 800748c:	2301      	movs	r3, #1
 800748e:	1076      	asrs	r6, r6, #1
 8007490:	3708      	adds	r7, #8
 8007492:	e76c      	b.n	800736e <_dtoa_r+0x3ce>
 8007494:	2502      	movs	r5, #2
 8007496:	e76f      	b.n	8007378 <_dtoa_r+0x3d8>
 8007498:	9b06      	ldr	r3, [sp, #24]
 800749a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800749e:	930d      	str	r3, [sp, #52]	; 0x34
 80074a0:	e78d      	b.n	80073be <_dtoa_r+0x41e>
 80074a2:	9903      	ldr	r1, [sp, #12]
 80074a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80074a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074a8:	4b4e      	ldr	r3, [pc, #312]	; (80075e4 <_dtoa_r+0x644>)
 80074aa:	ed9d 7b04 	vldr	d7, [sp, #16]
 80074ae:	4401      	add	r1, r0
 80074b0:	9104      	str	r1, [sp, #16]
 80074b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074b4:	eeb0 8a47 	vmov.f32	s16, s14
 80074b8:	eef0 8a67 	vmov.f32	s17, s15
 80074bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d045      	beq.n	8007554 <_dtoa_r+0x5b4>
 80074c8:	494c      	ldr	r1, [pc, #304]	; (80075fc <_dtoa_r+0x65c>)
 80074ca:	2000      	movs	r0, #0
 80074cc:	f7f9 fa1e 	bl	800090c <__aeabi_ddiv>
 80074d0:	ec53 2b18 	vmov	r2, r3, d8
 80074d4:	f7f8 ff38 	bl	8000348 <__aeabi_dsub>
 80074d8:	9d03      	ldr	r5, [sp, #12]
 80074da:	ec41 0b18 	vmov	d8, r0, r1
 80074de:	4639      	mov	r1, r7
 80074e0:	4630      	mov	r0, r6
 80074e2:	f7f9 fb99 	bl	8000c18 <__aeabi_d2iz>
 80074e6:	900d      	str	r0, [sp, #52]	; 0x34
 80074e8:	f7f9 f87c 	bl	80005e4 <__aeabi_i2d>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4630      	mov	r0, r6
 80074f2:	4639      	mov	r1, r7
 80074f4:	f7f8 ff28 	bl	8000348 <__aeabi_dsub>
 80074f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074fa:	3330      	adds	r3, #48	; 0x30
 80074fc:	f805 3b01 	strb.w	r3, [r5], #1
 8007500:	ec53 2b18 	vmov	r2, r3, d8
 8007504:	4606      	mov	r6, r0
 8007506:	460f      	mov	r7, r1
 8007508:	f7f9 fb48 	bl	8000b9c <__aeabi_dcmplt>
 800750c:	2800      	cmp	r0, #0
 800750e:	d165      	bne.n	80075dc <_dtoa_r+0x63c>
 8007510:	4632      	mov	r2, r6
 8007512:	463b      	mov	r3, r7
 8007514:	4935      	ldr	r1, [pc, #212]	; (80075ec <_dtoa_r+0x64c>)
 8007516:	2000      	movs	r0, #0
 8007518:	f7f8 ff16 	bl	8000348 <__aeabi_dsub>
 800751c:	ec53 2b18 	vmov	r2, r3, d8
 8007520:	f7f9 fb3c 	bl	8000b9c <__aeabi_dcmplt>
 8007524:	2800      	cmp	r0, #0
 8007526:	f040 80b9 	bne.w	800769c <_dtoa_r+0x6fc>
 800752a:	9b04      	ldr	r3, [sp, #16]
 800752c:	429d      	cmp	r5, r3
 800752e:	f43f af75 	beq.w	800741c <_dtoa_r+0x47c>
 8007532:	4b2f      	ldr	r3, [pc, #188]	; (80075f0 <_dtoa_r+0x650>)
 8007534:	ec51 0b18 	vmov	r0, r1, d8
 8007538:	2200      	movs	r2, #0
 800753a:	f7f9 f8bd 	bl	80006b8 <__aeabi_dmul>
 800753e:	4b2c      	ldr	r3, [pc, #176]	; (80075f0 <_dtoa_r+0x650>)
 8007540:	ec41 0b18 	vmov	d8, r0, r1
 8007544:	2200      	movs	r2, #0
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	f7f9 f8b5 	bl	80006b8 <__aeabi_dmul>
 800754e:	4606      	mov	r6, r0
 8007550:	460f      	mov	r7, r1
 8007552:	e7c4      	b.n	80074de <_dtoa_r+0x53e>
 8007554:	ec51 0b17 	vmov	r0, r1, d7
 8007558:	f7f9 f8ae 	bl	80006b8 <__aeabi_dmul>
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	9d03      	ldr	r5, [sp, #12]
 8007560:	930d      	str	r3, [sp, #52]	; 0x34
 8007562:	ec41 0b18 	vmov	d8, r0, r1
 8007566:	4639      	mov	r1, r7
 8007568:	4630      	mov	r0, r6
 800756a:	f7f9 fb55 	bl	8000c18 <__aeabi_d2iz>
 800756e:	9011      	str	r0, [sp, #68]	; 0x44
 8007570:	f7f9 f838 	bl	80005e4 <__aeabi_i2d>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4630      	mov	r0, r6
 800757a:	4639      	mov	r1, r7
 800757c:	f7f8 fee4 	bl	8000348 <__aeabi_dsub>
 8007580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007582:	3330      	adds	r3, #48	; 0x30
 8007584:	f805 3b01 	strb.w	r3, [r5], #1
 8007588:	9b04      	ldr	r3, [sp, #16]
 800758a:	429d      	cmp	r5, r3
 800758c:	4606      	mov	r6, r0
 800758e:	460f      	mov	r7, r1
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	d134      	bne.n	8007600 <_dtoa_r+0x660>
 8007596:	4b19      	ldr	r3, [pc, #100]	; (80075fc <_dtoa_r+0x65c>)
 8007598:	ec51 0b18 	vmov	r0, r1, d8
 800759c:	f7f8 fed6 	bl	800034c <__adddf3>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4630      	mov	r0, r6
 80075a6:	4639      	mov	r1, r7
 80075a8:	f7f9 fb16 	bl	8000bd8 <__aeabi_dcmpgt>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d175      	bne.n	800769c <_dtoa_r+0x6fc>
 80075b0:	ec53 2b18 	vmov	r2, r3, d8
 80075b4:	4911      	ldr	r1, [pc, #68]	; (80075fc <_dtoa_r+0x65c>)
 80075b6:	2000      	movs	r0, #0
 80075b8:	f7f8 fec6 	bl	8000348 <__aeabi_dsub>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4630      	mov	r0, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	f7f9 faea 	bl	8000b9c <__aeabi_dcmplt>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	f43f af27 	beq.w	800741c <_dtoa_r+0x47c>
 80075ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80075d0:	1e6b      	subs	r3, r5, #1
 80075d2:	930d      	str	r3, [sp, #52]	; 0x34
 80075d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075d8:	2b30      	cmp	r3, #48	; 0x30
 80075da:	d0f8      	beq.n	80075ce <_dtoa_r+0x62e>
 80075dc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80075e0:	e04a      	b.n	8007678 <_dtoa_r+0x6d8>
 80075e2:	bf00      	nop
 80075e4:	08009818 	.word	0x08009818
 80075e8:	080097f0 	.word	0x080097f0
 80075ec:	3ff00000 	.word	0x3ff00000
 80075f0:	40240000 	.word	0x40240000
 80075f4:	401c0000 	.word	0x401c0000
 80075f8:	40140000 	.word	0x40140000
 80075fc:	3fe00000 	.word	0x3fe00000
 8007600:	4baf      	ldr	r3, [pc, #700]	; (80078c0 <_dtoa_r+0x920>)
 8007602:	f7f9 f859 	bl	80006b8 <__aeabi_dmul>
 8007606:	4606      	mov	r6, r0
 8007608:	460f      	mov	r7, r1
 800760a:	e7ac      	b.n	8007566 <_dtoa_r+0x5c6>
 800760c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8007610:	9d03      	ldr	r5, [sp, #12]
 8007612:	4642      	mov	r2, r8
 8007614:	464b      	mov	r3, r9
 8007616:	4630      	mov	r0, r6
 8007618:	4639      	mov	r1, r7
 800761a:	f7f9 f977 	bl	800090c <__aeabi_ddiv>
 800761e:	f7f9 fafb 	bl	8000c18 <__aeabi_d2iz>
 8007622:	9004      	str	r0, [sp, #16]
 8007624:	f7f8 ffde 	bl	80005e4 <__aeabi_i2d>
 8007628:	4642      	mov	r2, r8
 800762a:	464b      	mov	r3, r9
 800762c:	f7f9 f844 	bl	80006b8 <__aeabi_dmul>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4630      	mov	r0, r6
 8007636:	4639      	mov	r1, r7
 8007638:	f7f8 fe86 	bl	8000348 <__aeabi_dsub>
 800763c:	9e04      	ldr	r6, [sp, #16]
 800763e:	9f06      	ldr	r7, [sp, #24]
 8007640:	3630      	adds	r6, #48	; 0x30
 8007642:	f805 6b01 	strb.w	r6, [r5], #1
 8007646:	9e03      	ldr	r6, [sp, #12]
 8007648:	1bae      	subs	r6, r5, r6
 800764a:	42b7      	cmp	r7, r6
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	d137      	bne.n	80076c2 <_dtoa_r+0x722>
 8007652:	f7f8 fe7b 	bl	800034c <__adddf3>
 8007656:	4642      	mov	r2, r8
 8007658:	464b      	mov	r3, r9
 800765a:	4606      	mov	r6, r0
 800765c:	460f      	mov	r7, r1
 800765e:	f7f9 fabb 	bl	8000bd8 <__aeabi_dcmpgt>
 8007662:	b9c8      	cbnz	r0, 8007698 <_dtoa_r+0x6f8>
 8007664:	4642      	mov	r2, r8
 8007666:	464b      	mov	r3, r9
 8007668:	4630      	mov	r0, r6
 800766a:	4639      	mov	r1, r7
 800766c:	f7f9 fa8c 	bl	8000b88 <__aeabi_dcmpeq>
 8007670:	b110      	cbz	r0, 8007678 <_dtoa_r+0x6d8>
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	07d9      	lsls	r1, r3, #31
 8007676:	d40f      	bmi.n	8007698 <_dtoa_r+0x6f8>
 8007678:	4620      	mov	r0, r4
 800767a:	4659      	mov	r1, fp
 800767c:	f000 fac8 	bl	8007c10 <_Bfree>
 8007680:	2300      	movs	r3, #0
 8007682:	702b      	strb	r3, [r5, #0]
 8007684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007686:	f10a 0001 	add.w	r0, sl, #1
 800768a:	6018      	str	r0, [r3, #0]
 800768c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800768e:	2b00      	cmp	r3, #0
 8007690:	f43f acd5 	beq.w	800703e <_dtoa_r+0x9e>
 8007694:	601d      	str	r5, [r3, #0]
 8007696:	e4d2      	b.n	800703e <_dtoa_r+0x9e>
 8007698:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800769c:	462b      	mov	r3, r5
 800769e:	461d      	mov	r5, r3
 80076a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076a4:	2a39      	cmp	r2, #57	; 0x39
 80076a6:	d108      	bne.n	80076ba <_dtoa_r+0x71a>
 80076a8:	9a03      	ldr	r2, [sp, #12]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d1f7      	bne.n	800769e <_dtoa_r+0x6fe>
 80076ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b0:	9903      	ldr	r1, [sp, #12]
 80076b2:	3201      	adds	r2, #1
 80076b4:	9209      	str	r2, [sp, #36]	; 0x24
 80076b6:	2230      	movs	r2, #48	; 0x30
 80076b8:	700a      	strb	r2, [r1, #0]
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	3201      	adds	r2, #1
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	e78c      	b.n	80075dc <_dtoa_r+0x63c>
 80076c2:	4b7f      	ldr	r3, [pc, #508]	; (80078c0 <_dtoa_r+0x920>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	f7f8 fff7 	bl	80006b8 <__aeabi_dmul>
 80076ca:	2200      	movs	r2, #0
 80076cc:	2300      	movs	r3, #0
 80076ce:	4606      	mov	r6, r0
 80076d0:	460f      	mov	r7, r1
 80076d2:	f7f9 fa59 	bl	8000b88 <__aeabi_dcmpeq>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d09b      	beq.n	8007612 <_dtoa_r+0x672>
 80076da:	e7cd      	b.n	8007678 <_dtoa_r+0x6d8>
 80076dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076de:	2a00      	cmp	r2, #0
 80076e0:	f000 80c4 	beq.w	800786c <_dtoa_r+0x8cc>
 80076e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076e6:	2a01      	cmp	r2, #1
 80076e8:	f300 80a8 	bgt.w	800783c <_dtoa_r+0x89c>
 80076ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	f000 80a0 	beq.w	8007834 <_dtoa_r+0x894>
 80076f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076f8:	9e08      	ldr	r6, [sp, #32]
 80076fa:	4645      	mov	r5, r8
 80076fc:	9a07      	ldr	r2, [sp, #28]
 80076fe:	2101      	movs	r1, #1
 8007700:	441a      	add	r2, r3
 8007702:	4620      	mov	r0, r4
 8007704:	4498      	add	r8, r3
 8007706:	9207      	str	r2, [sp, #28]
 8007708:	f000 fb3e 	bl	8007d88 <__i2b>
 800770c:	4607      	mov	r7, r0
 800770e:	2d00      	cmp	r5, #0
 8007710:	dd0b      	ble.n	800772a <_dtoa_r+0x78a>
 8007712:	9b07      	ldr	r3, [sp, #28]
 8007714:	2b00      	cmp	r3, #0
 8007716:	dd08      	ble.n	800772a <_dtoa_r+0x78a>
 8007718:	42ab      	cmp	r3, r5
 800771a:	9a07      	ldr	r2, [sp, #28]
 800771c:	bfa8      	it	ge
 800771e:	462b      	movge	r3, r5
 8007720:	eba8 0803 	sub.w	r8, r8, r3
 8007724:	1aed      	subs	r5, r5, r3
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	9307      	str	r3, [sp, #28]
 800772a:	9b08      	ldr	r3, [sp, #32]
 800772c:	b1fb      	cbz	r3, 800776e <_dtoa_r+0x7ce>
 800772e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 809f 	beq.w	8007874 <_dtoa_r+0x8d4>
 8007736:	2e00      	cmp	r6, #0
 8007738:	dd11      	ble.n	800775e <_dtoa_r+0x7be>
 800773a:	4639      	mov	r1, r7
 800773c:	4632      	mov	r2, r6
 800773e:	4620      	mov	r0, r4
 8007740:	f000 fbde 	bl	8007f00 <__pow5mult>
 8007744:	465a      	mov	r2, fp
 8007746:	4601      	mov	r1, r0
 8007748:	4607      	mov	r7, r0
 800774a:	4620      	mov	r0, r4
 800774c:	f000 fb32 	bl	8007db4 <__multiply>
 8007750:	4659      	mov	r1, fp
 8007752:	9009      	str	r0, [sp, #36]	; 0x24
 8007754:	4620      	mov	r0, r4
 8007756:	f000 fa5b 	bl	8007c10 <_Bfree>
 800775a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775c:	469b      	mov	fp, r3
 800775e:	9b08      	ldr	r3, [sp, #32]
 8007760:	1b9a      	subs	r2, r3, r6
 8007762:	d004      	beq.n	800776e <_dtoa_r+0x7ce>
 8007764:	4659      	mov	r1, fp
 8007766:	4620      	mov	r0, r4
 8007768:	f000 fbca 	bl	8007f00 <__pow5mult>
 800776c:	4683      	mov	fp, r0
 800776e:	2101      	movs	r1, #1
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fb09 	bl	8007d88 <__i2b>
 8007776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007778:	2b00      	cmp	r3, #0
 800777a:	4606      	mov	r6, r0
 800777c:	dd7c      	ble.n	8007878 <_dtoa_r+0x8d8>
 800777e:	461a      	mov	r2, r3
 8007780:	4601      	mov	r1, r0
 8007782:	4620      	mov	r0, r4
 8007784:	f000 fbbc 	bl	8007f00 <__pow5mult>
 8007788:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800778a:	2b01      	cmp	r3, #1
 800778c:	4606      	mov	r6, r0
 800778e:	dd76      	ble.n	800787e <_dtoa_r+0x8de>
 8007790:	2300      	movs	r3, #0
 8007792:	9308      	str	r3, [sp, #32]
 8007794:	6933      	ldr	r3, [r6, #16]
 8007796:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800779a:	6918      	ldr	r0, [r3, #16]
 800779c:	f000 faa4 	bl	8007ce8 <__hi0bits>
 80077a0:	f1c0 0020 	rsb	r0, r0, #32
 80077a4:	9b07      	ldr	r3, [sp, #28]
 80077a6:	4418      	add	r0, r3
 80077a8:	f010 001f 	ands.w	r0, r0, #31
 80077ac:	f000 8086 	beq.w	80078bc <_dtoa_r+0x91c>
 80077b0:	f1c0 0320 	rsb	r3, r0, #32
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	dd7f      	ble.n	80078b8 <_dtoa_r+0x918>
 80077b8:	f1c0 001c 	rsb	r0, r0, #28
 80077bc:	9b07      	ldr	r3, [sp, #28]
 80077be:	4403      	add	r3, r0
 80077c0:	4480      	add	r8, r0
 80077c2:	4405      	add	r5, r0
 80077c4:	9307      	str	r3, [sp, #28]
 80077c6:	f1b8 0f00 	cmp.w	r8, #0
 80077ca:	dd05      	ble.n	80077d8 <_dtoa_r+0x838>
 80077cc:	4659      	mov	r1, fp
 80077ce:	4642      	mov	r2, r8
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 fbef 	bl	8007fb4 <__lshift>
 80077d6:	4683      	mov	fp, r0
 80077d8:	9b07      	ldr	r3, [sp, #28]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	dd05      	ble.n	80077ea <_dtoa_r+0x84a>
 80077de:	4631      	mov	r1, r6
 80077e0:	461a      	mov	r2, r3
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 fbe6 	bl	8007fb4 <__lshift>
 80077e8:	4606      	mov	r6, r0
 80077ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d069      	beq.n	80078c4 <_dtoa_r+0x924>
 80077f0:	4631      	mov	r1, r6
 80077f2:	4658      	mov	r0, fp
 80077f4:	f000 fc4a 	bl	800808c <__mcmp>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	da63      	bge.n	80078c4 <_dtoa_r+0x924>
 80077fc:	2300      	movs	r3, #0
 80077fe:	4659      	mov	r1, fp
 8007800:	220a      	movs	r2, #10
 8007802:	4620      	mov	r0, r4
 8007804:	f000 fa26 	bl	8007c54 <__multadd>
 8007808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800780a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800780e:	4683      	mov	fp, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 818f 	beq.w	8007b34 <_dtoa_r+0xb94>
 8007816:	4639      	mov	r1, r7
 8007818:	2300      	movs	r3, #0
 800781a:	220a      	movs	r2, #10
 800781c:	4620      	mov	r0, r4
 800781e:	f000 fa19 	bl	8007c54 <__multadd>
 8007822:	f1b9 0f00 	cmp.w	r9, #0
 8007826:	4607      	mov	r7, r0
 8007828:	f300 808e 	bgt.w	8007948 <_dtoa_r+0x9a8>
 800782c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800782e:	2b02      	cmp	r3, #2
 8007830:	dc50      	bgt.n	80078d4 <_dtoa_r+0x934>
 8007832:	e089      	b.n	8007948 <_dtoa_r+0x9a8>
 8007834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800783a:	e75d      	b.n	80076f8 <_dtoa_r+0x758>
 800783c:	9b06      	ldr	r3, [sp, #24]
 800783e:	1e5e      	subs	r6, r3, #1
 8007840:	9b08      	ldr	r3, [sp, #32]
 8007842:	42b3      	cmp	r3, r6
 8007844:	bfbf      	itttt	lt
 8007846:	9b08      	ldrlt	r3, [sp, #32]
 8007848:	9608      	strlt	r6, [sp, #32]
 800784a:	1af2      	sublt	r2, r6, r3
 800784c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800784e:	bfb6      	itet	lt
 8007850:	189b      	addlt	r3, r3, r2
 8007852:	1b9e      	subge	r6, r3, r6
 8007854:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007856:	9b06      	ldr	r3, [sp, #24]
 8007858:	bfb8      	it	lt
 800785a:	2600      	movlt	r6, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	bfb5      	itete	lt
 8007860:	eba8 0503 	sublt.w	r5, r8, r3
 8007864:	9b06      	ldrge	r3, [sp, #24]
 8007866:	2300      	movlt	r3, #0
 8007868:	4645      	movge	r5, r8
 800786a:	e747      	b.n	80076fc <_dtoa_r+0x75c>
 800786c:	9e08      	ldr	r6, [sp, #32]
 800786e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007870:	4645      	mov	r5, r8
 8007872:	e74c      	b.n	800770e <_dtoa_r+0x76e>
 8007874:	9a08      	ldr	r2, [sp, #32]
 8007876:	e775      	b.n	8007764 <_dtoa_r+0x7c4>
 8007878:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800787a:	2b01      	cmp	r3, #1
 800787c:	dc18      	bgt.n	80078b0 <_dtoa_r+0x910>
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	b9b3      	cbnz	r3, 80078b0 <_dtoa_r+0x910>
 8007882:	9b05      	ldr	r3, [sp, #20]
 8007884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007888:	b9a3      	cbnz	r3, 80078b4 <_dtoa_r+0x914>
 800788a:	9b05      	ldr	r3, [sp, #20]
 800788c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007890:	0d1b      	lsrs	r3, r3, #20
 8007892:	051b      	lsls	r3, r3, #20
 8007894:	b12b      	cbz	r3, 80078a2 <_dtoa_r+0x902>
 8007896:	9b07      	ldr	r3, [sp, #28]
 8007898:	3301      	adds	r3, #1
 800789a:	9307      	str	r3, [sp, #28]
 800789c:	f108 0801 	add.w	r8, r8, #1
 80078a0:	2301      	movs	r3, #1
 80078a2:	9308      	str	r3, [sp, #32]
 80078a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f47f af74 	bne.w	8007794 <_dtoa_r+0x7f4>
 80078ac:	2001      	movs	r0, #1
 80078ae:	e779      	b.n	80077a4 <_dtoa_r+0x804>
 80078b0:	2300      	movs	r3, #0
 80078b2:	e7f6      	b.n	80078a2 <_dtoa_r+0x902>
 80078b4:	9b04      	ldr	r3, [sp, #16]
 80078b6:	e7f4      	b.n	80078a2 <_dtoa_r+0x902>
 80078b8:	d085      	beq.n	80077c6 <_dtoa_r+0x826>
 80078ba:	4618      	mov	r0, r3
 80078bc:	301c      	adds	r0, #28
 80078be:	e77d      	b.n	80077bc <_dtoa_r+0x81c>
 80078c0:	40240000 	.word	0x40240000
 80078c4:	9b06      	ldr	r3, [sp, #24]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	dc38      	bgt.n	800793c <_dtoa_r+0x99c>
 80078ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	dd35      	ble.n	800793c <_dtoa_r+0x99c>
 80078d0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80078d4:	f1b9 0f00 	cmp.w	r9, #0
 80078d8:	d10d      	bne.n	80078f6 <_dtoa_r+0x956>
 80078da:	4631      	mov	r1, r6
 80078dc:	464b      	mov	r3, r9
 80078de:	2205      	movs	r2, #5
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 f9b7 	bl	8007c54 <__multadd>
 80078e6:	4601      	mov	r1, r0
 80078e8:	4606      	mov	r6, r0
 80078ea:	4658      	mov	r0, fp
 80078ec:	f000 fbce 	bl	800808c <__mcmp>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	f73f adbd 	bgt.w	8007470 <_dtoa_r+0x4d0>
 80078f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078f8:	9d03      	ldr	r5, [sp, #12]
 80078fa:	ea6f 0a03 	mvn.w	sl, r3
 80078fe:	f04f 0800 	mov.w	r8, #0
 8007902:	4631      	mov	r1, r6
 8007904:	4620      	mov	r0, r4
 8007906:	f000 f983 	bl	8007c10 <_Bfree>
 800790a:	2f00      	cmp	r7, #0
 800790c:	f43f aeb4 	beq.w	8007678 <_dtoa_r+0x6d8>
 8007910:	f1b8 0f00 	cmp.w	r8, #0
 8007914:	d005      	beq.n	8007922 <_dtoa_r+0x982>
 8007916:	45b8      	cmp	r8, r7
 8007918:	d003      	beq.n	8007922 <_dtoa_r+0x982>
 800791a:	4641      	mov	r1, r8
 800791c:	4620      	mov	r0, r4
 800791e:	f000 f977 	bl	8007c10 <_Bfree>
 8007922:	4639      	mov	r1, r7
 8007924:	4620      	mov	r0, r4
 8007926:	f000 f973 	bl	8007c10 <_Bfree>
 800792a:	e6a5      	b.n	8007678 <_dtoa_r+0x6d8>
 800792c:	2600      	movs	r6, #0
 800792e:	4637      	mov	r7, r6
 8007930:	e7e1      	b.n	80078f6 <_dtoa_r+0x956>
 8007932:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007934:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007938:	4637      	mov	r7, r6
 800793a:	e599      	b.n	8007470 <_dtoa_r+0x4d0>
 800793c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800793e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 80fd 	beq.w	8007b42 <_dtoa_r+0xba2>
 8007948:	2d00      	cmp	r5, #0
 800794a:	dd05      	ble.n	8007958 <_dtoa_r+0x9b8>
 800794c:	4639      	mov	r1, r7
 800794e:	462a      	mov	r2, r5
 8007950:	4620      	mov	r0, r4
 8007952:	f000 fb2f 	bl	8007fb4 <__lshift>
 8007956:	4607      	mov	r7, r0
 8007958:	9b08      	ldr	r3, [sp, #32]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d05c      	beq.n	8007a18 <_dtoa_r+0xa78>
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	4620      	mov	r0, r4
 8007962:	f000 f915 	bl	8007b90 <_Balloc>
 8007966:	4605      	mov	r5, r0
 8007968:	b928      	cbnz	r0, 8007976 <_dtoa_r+0x9d6>
 800796a:	4b80      	ldr	r3, [pc, #512]	; (8007b6c <_dtoa_r+0xbcc>)
 800796c:	4602      	mov	r2, r0
 800796e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007972:	f7ff bb2b 	b.w	8006fcc <_dtoa_r+0x2c>
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	3202      	adds	r2, #2
 800797a:	0092      	lsls	r2, r2, #2
 800797c:	f107 010c 	add.w	r1, r7, #12
 8007980:	300c      	adds	r0, #12
 8007982:	f7fe fddd 	bl	8006540 <memcpy>
 8007986:	2201      	movs	r2, #1
 8007988:	4629      	mov	r1, r5
 800798a:	4620      	mov	r0, r4
 800798c:	f000 fb12 	bl	8007fb4 <__lshift>
 8007990:	9b03      	ldr	r3, [sp, #12]
 8007992:	3301      	adds	r3, #1
 8007994:	9306      	str	r3, [sp, #24]
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	444b      	add	r3, r9
 800799a:	9309      	str	r3, [sp, #36]	; 0x24
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	46b8      	mov	r8, r7
 80079a4:	9308      	str	r3, [sp, #32]
 80079a6:	4607      	mov	r7, r0
 80079a8:	9b06      	ldr	r3, [sp, #24]
 80079aa:	4631      	mov	r1, r6
 80079ac:	3b01      	subs	r3, #1
 80079ae:	4658      	mov	r0, fp
 80079b0:	9304      	str	r3, [sp, #16]
 80079b2:	f7ff fa67 	bl	8006e84 <quorem>
 80079b6:	4603      	mov	r3, r0
 80079b8:	3330      	adds	r3, #48	; 0x30
 80079ba:	9007      	str	r0, [sp, #28]
 80079bc:	4641      	mov	r1, r8
 80079be:	4658      	mov	r0, fp
 80079c0:	930c      	str	r3, [sp, #48]	; 0x30
 80079c2:	f000 fb63 	bl	800808c <__mcmp>
 80079c6:	463a      	mov	r2, r7
 80079c8:	4681      	mov	r9, r0
 80079ca:	4631      	mov	r1, r6
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 fb79 	bl	80080c4 <__mdiff>
 80079d2:	68c2      	ldr	r2, [r0, #12]
 80079d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079d6:	4605      	mov	r5, r0
 80079d8:	bb02      	cbnz	r2, 8007a1c <_dtoa_r+0xa7c>
 80079da:	4601      	mov	r1, r0
 80079dc:	4658      	mov	r0, fp
 80079de:	f000 fb55 	bl	800808c <__mcmp>
 80079e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079e4:	4602      	mov	r2, r0
 80079e6:	4629      	mov	r1, r5
 80079e8:	4620      	mov	r0, r4
 80079ea:	920a      	str	r2, [sp, #40]	; 0x28
 80079ec:	930c      	str	r3, [sp, #48]	; 0x30
 80079ee:	f000 f90f 	bl	8007c10 <_Bfree>
 80079f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f6:	9d06      	ldr	r5, [sp, #24]
 80079f8:	ea43 0102 	orr.w	r1, r3, r2
 80079fc:	9b08      	ldr	r3, [sp, #32]
 80079fe:	430b      	orrs	r3, r1
 8007a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a02:	d10d      	bne.n	8007a20 <_dtoa_r+0xa80>
 8007a04:	2b39      	cmp	r3, #57	; 0x39
 8007a06:	d029      	beq.n	8007a5c <_dtoa_r+0xabc>
 8007a08:	f1b9 0f00 	cmp.w	r9, #0
 8007a0c:	dd01      	ble.n	8007a12 <_dtoa_r+0xa72>
 8007a0e:	9b07      	ldr	r3, [sp, #28]
 8007a10:	3331      	adds	r3, #49	; 0x31
 8007a12:	9a04      	ldr	r2, [sp, #16]
 8007a14:	7013      	strb	r3, [r2, #0]
 8007a16:	e774      	b.n	8007902 <_dtoa_r+0x962>
 8007a18:	4638      	mov	r0, r7
 8007a1a:	e7b9      	b.n	8007990 <_dtoa_r+0x9f0>
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	e7e2      	b.n	80079e6 <_dtoa_r+0xa46>
 8007a20:	f1b9 0f00 	cmp.w	r9, #0
 8007a24:	db06      	blt.n	8007a34 <_dtoa_r+0xa94>
 8007a26:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007a28:	ea41 0909 	orr.w	r9, r1, r9
 8007a2c:	9908      	ldr	r1, [sp, #32]
 8007a2e:	ea59 0101 	orrs.w	r1, r9, r1
 8007a32:	d120      	bne.n	8007a76 <_dtoa_r+0xad6>
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	ddec      	ble.n	8007a12 <_dtoa_r+0xa72>
 8007a38:	4659      	mov	r1, fp
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	9306      	str	r3, [sp, #24]
 8007a40:	f000 fab8 	bl	8007fb4 <__lshift>
 8007a44:	4631      	mov	r1, r6
 8007a46:	4683      	mov	fp, r0
 8007a48:	f000 fb20 	bl	800808c <__mcmp>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	9b06      	ldr	r3, [sp, #24]
 8007a50:	dc02      	bgt.n	8007a58 <_dtoa_r+0xab8>
 8007a52:	d1de      	bne.n	8007a12 <_dtoa_r+0xa72>
 8007a54:	07da      	lsls	r2, r3, #31
 8007a56:	d5dc      	bpl.n	8007a12 <_dtoa_r+0xa72>
 8007a58:	2b39      	cmp	r3, #57	; 0x39
 8007a5a:	d1d8      	bne.n	8007a0e <_dtoa_r+0xa6e>
 8007a5c:	9a04      	ldr	r2, [sp, #16]
 8007a5e:	2339      	movs	r3, #57	; 0x39
 8007a60:	7013      	strb	r3, [r2, #0]
 8007a62:	462b      	mov	r3, r5
 8007a64:	461d      	mov	r5, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a6c:	2a39      	cmp	r2, #57	; 0x39
 8007a6e:	d050      	beq.n	8007b12 <_dtoa_r+0xb72>
 8007a70:	3201      	adds	r2, #1
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	e745      	b.n	8007902 <_dtoa_r+0x962>
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	dd03      	ble.n	8007a82 <_dtoa_r+0xae2>
 8007a7a:	2b39      	cmp	r3, #57	; 0x39
 8007a7c:	d0ee      	beq.n	8007a5c <_dtoa_r+0xabc>
 8007a7e:	3301      	adds	r3, #1
 8007a80:	e7c7      	b.n	8007a12 <_dtoa_r+0xa72>
 8007a82:	9a06      	ldr	r2, [sp, #24]
 8007a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a8a:	428a      	cmp	r2, r1
 8007a8c:	d02a      	beq.n	8007ae4 <_dtoa_r+0xb44>
 8007a8e:	4659      	mov	r1, fp
 8007a90:	2300      	movs	r3, #0
 8007a92:	220a      	movs	r2, #10
 8007a94:	4620      	mov	r0, r4
 8007a96:	f000 f8dd 	bl	8007c54 <__multadd>
 8007a9a:	45b8      	cmp	r8, r7
 8007a9c:	4683      	mov	fp, r0
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	f04f 020a 	mov.w	r2, #10
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	d107      	bne.n	8007abc <_dtoa_r+0xb1c>
 8007aac:	f000 f8d2 	bl	8007c54 <__multadd>
 8007ab0:	4680      	mov	r8, r0
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	9306      	str	r3, [sp, #24]
 8007aba:	e775      	b.n	80079a8 <_dtoa_r+0xa08>
 8007abc:	f000 f8ca 	bl	8007c54 <__multadd>
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	4680      	mov	r8, r0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	220a      	movs	r2, #10
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 f8c3 	bl	8007c54 <__multadd>
 8007ace:	4607      	mov	r7, r0
 8007ad0:	e7f0      	b.n	8007ab4 <_dtoa_r+0xb14>
 8007ad2:	f1b9 0f00 	cmp.w	r9, #0
 8007ad6:	9a03      	ldr	r2, [sp, #12]
 8007ad8:	bfcc      	ite	gt
 8007ada:	464d      	movgt	r5, r9
 8007adc:	2501      	movle	r5, #1
 8007ade:	4415      	add	r5, r2
 8007ae0:	f04f 0800 	mov.w	r8, #0
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4620      	mov	r0, r4
 8007aea:	9306      	str	r3, [sp, #24]
 8007aec:	f000 fa62 	bl	8007fb4 <__lshift>
 8007af0:	4631      	mov	r1, r6
 8007af2:	4683      	mov	fp, r0
 8007af4:	f000 faca 	bl	800808c <__mcmp>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	dcb2      	bgt.n	8007a62 <_dtoa_r+0xac2>
 8007afc:	d102      	bne.n	8007b04 <_dtoa_r+0xb64>
 8007afe:	9b06      	ldr	r3, [sp, #24]
 8007b00:	07db      	lsls	r3, r3, #31
 8007b02:	d4ae      	bmi.n	8007a62 <_dtoa_r+0xac2>
 8007b04:	462b      	mov	r3, r5
 8007b06:	461d      	mov	r5, r3
 8007b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b0c:	2a30      	cmp	r2, #48	; 0x30
 8007b0e:	d0fa      	beq.n	8007b06 <_dtoa_r+0xb66>
 8007b10:	e6f7      	b.n	8007902 <_dtoa_r+0x962>
 8007b12:	9a03      	ldr	r2, [sp, #12]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d1a5      	bne.n	8007a64 <_dtoa_r+0xac4>
 8007b18:	f10a 0a01 	add.w	sl, sl, #1
 8007b1c:	2331      	movs	r3, #49	; 0x31
 8007b1e:	e779      	b.n	8007a14 <_dtoa_r+0xa74>
 8007b20:	4b13      	ldr	r3, [pc, #76]	; (8007b70 <_dtoa_r+0xbd0>)
 8007b22:	f7ff baac 	b.w	800707e <_dtoa_r+0xde>
 8007b26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f47f aa83 	bne.w	8007034 <_dtoa_r+0x94>
 8007b2e:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <_dtoa_r+0xbd4>)
 8007b30:	f7ff baa5 	b.w	800707e <_dtoa_r+0xde>
 8007b34:	f1b9 0f00 	cmp.w	r9, #0
 8007b38:	dc03      	bgt.n	8007b42 <_dtoa_r+0xba2>
 8007b3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	f73f aec9 	bgt.w	80078d4 <_dtoa_r+0x934>
 8007b42:	9d03      	ldr	r5, [sp, #12]
 8007b44:	4631      	mov	r1, r6
 8007b46:	4658      	mov	r0, fp
 8007b48:	f7ff f99c 	bl	8006e84 <quorem>
 8007b4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b50:	f805 3b01 	strb.w	r3, [r5], #1
 8007b54:	9a03      	ldr	r2, [sp, #12]
 8007b56:	1aaa      	subs	r2, r5, r2
 8007b58:	4591      	cmp	r9, r2
 8007b5a:	ddba      	ble.n	8007ad2 <_dtoa_r+0xb32>
 8007b5c:	4659      	mov	r1, fp
 8007b5e:	2300      	movs	r3, #0
 8007b60:	220a      	movs	r2, #10
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 f876 	bl	8007c54 <__multadd>
 8007b68:	4683      	mov	fp, r0
 8007b6a:	e7eb      	b.n	8007b44 <_dtoa_r+0xba4>
 8007b6c:	0800977b 	.word	0x0800977b
 8007b70:	080096d4 	.word	0x080096d4
 8007b74:	080096f8 	.word	0x080096f8

08007b78 <_localeconv_r>:
 8007b78:	4800      	ldr	r0, [pc, #0]	; (8007b7c <_localeconv_r+0x4>)
 8007b7a:	4770      	bx	lr
 8007b7c:	20000160 	.word	0x20000160

08007b80 <malloc>:
 8007b80:	4b02      	ldr	r3, [pc, #8]	; (8007b8c <malloc+0xc>)
 8007b82:	4601      	mov	r1, r0
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	f000 bbdf 	b.w	8008348 <_malloc_r>
 8007b8a:	bf00      	nop
 8007b8c:	2000000c 	.word	0x2000000c

08007b90 <_Balloc>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b94:	4604      	mov	r4, r0
 8007b96:	460d      	mov	r5, r1
 8007b98:	b976      	cbnz	r6, 8007bb8 <_Balloc+0x28>
 8007b9a:	2010      	movs	r0, #16
 8007b9c:	f7ff fff0 	bl	8007b80 <malloc>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ba4:	b920      	cbnz	r0, 8007bb0 <_Balloc+0x20>
 8007ba6:	4b18      	ldr	r3, [pc, #96]	; (8007c08 <_Balloc+0x78>)
 8007ba8:	4818      	ldr	r0, [pc, #96]	; (8007c0c <_Balloc+0x7c>)
 8007baa:	2166      	movs	r1, #102	; 0x66
 8007bac:	f000 fd92 	bl	80086d4 <__assert_func>
 8007bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bb4:	6006      	str	r6, [r0, #0]
 8007bb6:	60c6      	str	r6, [r0, #12]
 8007bb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007bba:	68f3      	ldr	r3, [r6, #12]
 8007bbc:	b183      	cbz	r3, 8007be0 <_Balloc+0x50>
 8007bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bc6:	b9b8      	cbnz	r0, 8007bf8 <_Balloc+0x68>
 8007bc8:	2101      	movs	r1, #1
 8007bca:	fa01 f605 	lsl.w	r6, r1, r5
 8007bce:	1d72      	adds	r2, r6, #5
 8007bd0:	0092      	lsls	r2, r2, #2
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fb58 	bl	8008288 <_calloc_r>
 8007bd8:	b160      	cbz	r0, 8007bf4 <_Balloc+0x64>
 8007bda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bde:	e00e      	b.n	8007bfe <_Balloc+0x6e>
 8007be0:	2221      	movs	r2, #33	; 0x21
 8007be2:	2104      	movs	r1, #4
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 fb4f 	bl	8008288 <_calloc_r>
 8007bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bec:	60f0      	str	r0, [r6, #12]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e4      	bne.n	8007bbe <_Balloc+0x2e>
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}
 8007bf8:	6802      	ldr	r2, [r0, #0]
 8007bfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c04:	e7f7      	b.n	8007bf6 <_Balloc+0x66>
 8007c06:	bf00      	nop
 8007c08:	08009705 	.word	0x08009705
 8007c0c:	0800978c 	.word	0x0800978c

08007c10 <_Bfree>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c14:	4605      	mov	r5, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	b976      	cbnz	r6, 8007c38 <_Bfree+0x28>
 8007c1a:	2010      	movs	r0, #16
 8007c1c:	f7ff ffb0 	bl	8007b80 <malloc>
 8007c20:	4602      	mov	r2, r0
 8007c22:	6268      	str	r0, [r5, #36]	; 0x24
 8007c24:	b920      	cbnz	r0, 8007c30 <_Bfree+0x20>
 8007c26:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <_Bfree+0x3c>)
 8007c28:	4809      	ldr	r0, [pc, #36]	; (8007c50 <_Bfree+0x40>)
 8007c2a:	218a      	movs	r1, #138	; 0x8a
 8007c2c:	f000 fd52 	bl	80086d4 <__assert_func>
 8007c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c34:	6006      	str	r6, [r0, #0]
 8007c36:	60c6      	str	r6, [r0, #12]
 8007c38:	b13c      	cbz	r4, 8007c4a <_Bfree+0x3a>
 8007c3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c3c:	6862      	ldr	r2, [r4, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c44:	6021      	str	r1, [r4, #0]
 8007c46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c4a:	bd70      	pop	{r4, r5, r6, pc}
 8007c4c:	08009705 	.word	0x08009705
 8007c50:	0800978c 	.word	0x0800978c

08007c54 <__multadd>:
 8007c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c58:	690e      	ldr	r6, [r1, #16]
 8007c5a:	4607      	mov	r7, r0
 8007c5c:	4698      	mov	r8, r3
 8007c5e:	460c      	mov	r4, r1
 8007c60:	f101 0014 	add.w	r0, r1, #20
 8007c64:	2300      	movs	r3, #0
 8007c66:	6805      	ldr	r5, [r0, #0]
 8007c68:	b2a9      	uxth	r1, r5
 8007c6a:	fb02 8101 	mla	r1, r2, r1, r8
 8007c6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007c72:	0c2d      	lsrs	r5, r5, #16
 8007c74:	fb02 c505 	mla	r5, r2, r5, ip
 8007c78:	b289      	uxth	r1, r1
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007c80:	429e      	cmp	r6, r3
 8007c82:	f840 1b04 	str.w	r1, [r0], #4
 8007c86:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007c8a:	dcec      	bgt.n	8007c66 <__multadd+0x12>
 8007c8c:	f1b8 0f00 	cmp.w	r8, #0
 8007c90:	d022      	beq.n	8007cd8 <__multadd+0x84>
 8007c92:	68a3      	ldr	r3, [r4, #8]
 8007c94:	42b3      	cmp	r3, r6
 8007c96:	dc19      	bgt.n	8007ccc <__multadd+0x78>
 8007c98:	6861      	ldr	r1, [r4, #4]
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	3101      	adds	r1, #1
 8007c9e:	f7ff ff77 	bl	8007b90 <_Balloc>
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	b928      	cbnz	r0, 8007cb2 <__multadd+0x5e>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <__multadd+0x8c>)
 8007caa:	480e      	ldr	r0, [pc, #56]	; (8007ce4 <__multadd+0x90>)
 8007cac:	21b5      	movs	r1, #181	; 0xb5
 8007cae:	f000 fd11 	bl	80086d4 <__assert_func>
 8007cb2:	6922      	ldr	r2, [r4, #16]
 8007cb4:	3202      	adds	r2, #2
 8007cb6:	f104 010c 	add.w	r1, r4, #12
 8007cba:	0092      	lsls	r2, r2, #2
 8007cbc:	300c      	adds	r0, #12
 8007cbe:	f7fe fc3f 	bl	8006540 <memcpy>
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7ff ffa3 	bl	8007c10 <_Bfree>
 8007cca:	462c      	mov	r4, r5
 8007ccc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	f8c3 8014 	str.w	r8, [r3, #20]
 8007cd6:	6126      	str	r6, [r4, #16]
 8007cd8:	4620      	mov	r0, r4
 8007cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cde:	bf00      	nop
 8007ce0:	0800977b 	.word	0x0800977b
 8007ce4:	0800978c 	.word	0x0800978c

08007ce8 <__hi0bits>:
 8007ce8:	0c03      	lsrs	r3, r0, #16
 8007cea:	041b      	lsls	r3, r3, #16
 8007cec:	b9d3      	cbnz	r3, 8007d24 <__hi0bits+0x3c>
 8007cee:	0400      	lsls	r0, r0, #16
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007cf6:	bf04      	itt	eq
 8007cf8:	0200      	lsleq	r0, r0, #8
 8007cfa:	3308      	addeq	r3, #8
 8007cfc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d00:	bf04      	itt	eq
 8007d02:	0100      	lsleq	r0, r0, #4
 8007d04:	3304      	addeq	r3, #4
 8007d06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d0a:	bf04      	itt	eq
 8007d0c:	0080      	lsleq	r0, r0, #2
 8007d0e:	3302      	addeq	r3, #2
 8007d10:	2800      	cmp	r0, #0
 8007d12:	db05      	blt.n	8007d20 <__hi0bits+0x38>
 8007d14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d18:	f103 0301 	add.w	r3, r3, #1
 8007d1c:	bf08      	it	eq
 8007d1e:	2320      	moveq	r3, #32
 8007d20:	4618      	mov	r0, r3
 8007d22:	4770      	bx	lr
 8007d24:	2300      	movs	r3, #0
 8007d26:	e7e4      	b.n	8007cf2 <__hi0bits+0xa>

08007d28 <__lo0bits>:
 8007d28:	6803      	ldr	r3, [r0, #0]
 8007d2a:	f013 0207 	ands.w	r2, r3, #7
 8007d2e:	4601      	mov	r1, r0
 8007d30:	d00b      	beq.n	8007d4a <__lo0bits+0x22>
 8007d32:	07da      	lsls	r2, r3, #31
 8007d34:	d424      	bmi.n	8007d80 <__lo0bits+0x58>
 8007d36:	0798      	lsls	r0, r3, #30
 8007d38:	bf49      	itett	mi
 8007d3a:	085b      	lsrmi	r3, r3, #1
 8007d3c:	089b      	lsrpl	r3, r3, #2
 8007d3e:	2001      	movmi	r0, #1
 8007d40:	600b      	strmi	r3, [r1, #0]
 8007d42:	bf5c      	itt	pl
 8007d44:	600b      	strpl	r3, [r1, #0]
 8007d46:	2002      	movpl	r0, #2
 8007d48:	4770      	bx	lr
 8007d4a:	b298      	uxth	r0, r3
 8007d4c:	b9b0      	cbnz	r0, 8007d7c <__lo0bits+0x54>
 8007d4e:	0c1b      	lsrs	r3, r3, #16
 8007d50:	2010      	movs	r0, #16
 8007d52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d56:	bf04      	itt	eq
 8007d58:	0a1b      	lsreq	r3, r3, #8
 8007d5a:	3008      	addeq	r0, #8
 8007d5c:	071a      	lsls	r2, r3, #28
 8007d5e:	bf04      	itt	eq
 8007d60:	091b      	lsreq	r3, r3, #4
 8007d62:	3004      	addeq	r0, #4
 8007d64:	079a      	lsls	r2, r3, #30
 8007d66:	bf04      	itt	eq
 8007d68:	089b      	lsreq	r3, r3, #2
 8007d6a:	3002      	addeq	r0, #2
 8007d6c:	07da      	lsls	r2, r3, #31
 8007d6e:	d403      	bmi.n	8007d78 <__lo0bits+0x50>
 8007d70:	085b      	lsrs	r3, r3, #1
 8007d72:	f100 0001 	add.w	r0, r0, #1
 8007d76:	d005      	beq.n	8007d84 <__lo0bits+0x5c>
 8007d78:	600b      	str	r3, [r1, #0]
 8007d7a:	4770      	bx	lr
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	e7e8      	b.n	8007d52 <__lo0bits+0x2a>
 8007d80:	2000      	movs	r0, #0
 8007d82:	4770      	bx	lr
 8007d84:	2020      	movs	r0, #32
 8007d86:	4770      	bx	lr

08007d88 <__i2b>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	f7ff feff 	bl	8007b90 <_Balloc>
 8007d92:	4602      	mov	r2, r0
 8007d94:	b928      	cbnz	r0, 8007da2 <__i2b+0x1a>
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <__i2b+0x24>)
 8007d98:	4805      	ldr	r0, [pc, #20]	; (8007db0 <__i2b+0x28>)
 8007d9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d9e:	f000 fc99 	bl	80086d4 <__assert_func>
 8007da2:	2301      	movs	r3, #1
 8007da4:	6144      	str	r4, [r0, #20]
 8007da6:	6103      	str	r3, [r0, #16]
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	bf00      	nop
 8007dac:	0800977b 	.word	0x0800977b
 8007db0:	0800978c 	.word	0x0800978c

08007db4 <__multiply>:
 8007db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db8:	4614      	mov	r4, r2
 8007dba:	690a      	ldr	r2, [r1, #16]
 8007dbc:	6923      	ldr	r3, [r4, #16]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	bfb8      	it	lt
 8007dc2:	460b      	movlt	r3, r1
 8007dc4:	460d      	mov	r5, r1
 8007dc6:	bfbc      	itt	lt
 8007dc8:	4625      	movlt	r5, r4
 8007dca:	461c      	movlt	r4, r3
 8007dcc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007dd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007dd4:	68ab      	ldr	r3, [r5, #8]
 8007dd6:	6869      	ldr	r1, [r5, #4]
 8007dd8:	eb0a 0709 	add.w	r7, sl, r9
 8007ddc:	42bb      	cmp	r3, r7
 8007dde:	b085      	sub	sp, #20
 8007de0:	bfb8      	it	lt
 8007de2:	3101      	addlt	r1, #1
 8007de4:	f7ff fed4 	bl	8007b90 <_Balloc>
 8007de8:	b930      	cbnz	r0, 8007df8 <__multiply+0x44>
 8007dea:	4602      	mov	r2, r0
 8007dec:	4b42      	ldr	r3, [pc, #264]	; (8007ef8 <__multiply+0x144>)
 8007dee:	4843      	ldr	r0, [pc, #268]	; (8007efc <__multiply+0x148>)
 8007df0:	f240 115d 	movw	r1, #349	; 0x15d
 8007df4:	f000 fc6e 	bl	80086d4 <__assert_func>
 8007df8:	f100 0614 	add.w	r6, r0, #20
 8007dfc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007e00:	4633      	mov	r3, r6
 8007e02:	2200      	movs	r2, #0
 8007e04:	4543      	cmp	r3, r8
 8007e06:	d31e      	bcc.n	8007e46 <__multiply+0x92>
 8007e08:	f105 0c14 	add.w	ip, r5, #20
 8007e0c:	f104 0314 	add.w	r3, r4, #20
 8007e10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007e14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007e18:	9202      	str	r2, [sp, #8]
 8007e1a:	ebac 0205 	sub.w	r2, ip, r5
 8007e1e:	3a15      	subs	r2, #21
 8007e20:	f022 0203 	bic.w	r2, r2, #3
 8007e24:	3204      	adds	r2, #4
 8007e26:	f105 0115 	add.w	r1, r5, #21
 8007e2a:	458c      	cmp	ip, r1
 8007e2c:	bf38      	it	cc
 8007e2e:	2204      	movcc	r2, #4
 8007e30:	9201      	str	r2, [sp, #4]
 8007e32:	9a02      	ldr	r2, [sp, #8]
 8007e34:	9303      	str	r3, [sp, #12]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d808      	bhi.n	8007e4c <__multiply+0x98>
 8007e3a:	2f00      	cmp	r7, #0
 8007e3c:	dc55      	bgt.n	8007eea <__multiply+0x136>
 8007e3e:	6107      	str	r7, [r0, #16]
 8007e40:	b005      	add	sp, #20
 8007e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e46:	f843 2b04 	str.w	r2, [r3], #4
 8007e4a:	e7db      	b.n	8007e04 <__multiply+0x50>
 8007e4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e50:	f1ba 0f00 	cmp.w	sl, #0
 8007e54:	d020      	beq.n	8007e98 <__multiply+0xe4>
 8007e56:	f105 0e14 	add.w	lr, r5, #20
 8007e5a:	46b1      	mov	r9, r6
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007e62:	f8d9 b000 	ldr.w	fp, [r9]
 8007e66:	b2a1      	uxth	r1, r4
 8007e68:	fa1f fb8b 	uxth.w	fp, fp
 8007e6c:	fb0a b101 	mla	r1, sl, r1, fp
 8007e70:	4411      	add	r1, r2
 8007e72:	f8d9 2000 	ldr.w	r2, [r9]
 8007e76:	0c24      	lsrs	r4, r4, #16
 8007e78:	0c12      	lsrs	r2, r2, #16
 8007e7a:	fb0a 2404 	mla	r4, sl, r4, r2
 8007e7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007e82:	b289      	uxth	r1, r1
 8007e84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e88:	45f4      	cmp	ip, lr
 8007e8a:	f849 1b04 	str.w	r1, [r9], #4
 8007e8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007e92:	d8e4      	bhi.n	8007e5e <__multiply+0xaa>
 8007e94:	9901      	ldr	r1, [sp, #4]
 8007e96:	5072      	str	r2, [r6, r1]
 8007e98:	9a03      	ldr	r2, [sp, #12]
 8007e9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	f1b9 0f00 	cmp.w	r9, #0
 8007ea4:	d01f      	beq.n	8007ee6 <__multiply+0x132>
 8007ea6:	6834      	ldr	r4, [r6, #0]
 8007ea8:	f105 0114 	add.w	r1, r5, #20
 8007eac:	46b6      	mov	lr, r6
 8007eae:	f04f 0a00 	mov.w	sl, #0
 8007eb2:	880a      	ldrh	r2, [r1, #0]
 8007eb4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007eb8:	fb09 b202 	mla	r2, r9, r2, fp
 8007ebc:	4492      	add	sl, r2
 8007ebe:	b2a4      	uxth	r4, r4
 8007ec0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007ec4:	f84e 4b04 	str.w	r4, [lr], #4
 8007ec8:	f851 4b04 	ldr.w	r4, [r1], #4
 8007ecc:	f8be 2000 	ldrh.w	r2, [lr]
 8007ed0:	0c24      	lsrs	r4, r4, #16
 8007ed2:	fb09 2404 	mla	r4, r9, r4, r2
 8007ed6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007eda:	458c      	cmp	ip, r1
 8007edc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007ee0:	d8e7      	bhi.n	8007eb2 <__multiply+0xfe>
 8007ee2:	9a01      	ldr	r2, [sp, #4]
 8007ee4:	50b4      	str	r4, [r6, r2]
 8007ee6:	3604      	adds	r6, #4
 8007ee8:	e7a3      	b.n	8007e32 <__multiply+0x7e>
 8007eea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1a5      	bne.n	8007e3e <__multiply+0x8a>
 8007ef2:	3f01      	subs	r7, #1
 8007ef4:	e7a1      	b.n	8007e3a <__multiply+0x86>
 8007ef6:	bf00      	nop
 8007ef8:	0800977b 	.word	0x0800977b
 8007efc:	0800978c 	.word	0x0800978c

08007f00 <__pow5mult>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4615      	mov	r5, r2
 8007f06:	f012 0203 	ands.w	r2, r2, #3
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	d007      	beq.n	8007f20 <__pow5mult+0x20>
 8007f10:	4c25      	ldr	r4, [pc, #148]	; (8007fa8 <__pow5mult+0xa8>)
 8007f12:	3a01      	subs	r2, #1
 8007f14:	2300      	movs	r3, #0
 8007f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f1a:	f7ff fe9b 	bl	8007c54 <__multadd>
 8007f1e:	4607      	mov	r7, r0
 8007f20:	10ad      	asrs	r5, r5, #2
 8007f22:	d03d      	beq.n	8007fa0 <__pow5mult+0xa0>
 8007f24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f26:	b97c      	cbnz	r4, 8007f48 <__pow5mult+0x48>
 8007f28:	2010      	movs	r0, #16
 8007f2a:	f7ff fe29 	bl	8007b80 <malloc>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	6270      	str	r0, [r6, #36]	; 0x24
 8007f32:	b928      	cbnz	r0, 8007f40 <__pow5mult+0x40>
 8007f34:	4b1d      	ldr	r3, [pc, #116]	; (8007fac <__pow5mult+0xac>)
 8007f36:	481e      	ldr	r0, [pc, #120]	; (8007fb0 <__pow5mult+0xb0>)
 8007f38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f3c:	f000 fbca 	bl	80086d4 <__assert_func>
 8007f40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f44:	6004      	str	r4, [r0, #0]
 8007f46:	60c4      	str	r4, [r0, #12]
 8007f48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f50:	b94c      	cbnz	r4, 8007f66 <__pow5mult+0x66>
 8007f52:	f240 2171 	movw	r1, #625	; 0x271
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff ff16 	bl	8007d88 <__i2b>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f62:	4604      	mov	r4, r0
 8007f64:	6003      	str	r3, [r0, #0]
 8007f66:	f04f 0900 	mov.w	r9, #0
 8007f6a:	07eb      	lsls	r3, r5, #31
 8007f6c:	d50a      	bpl.n	8007f84 <__pow5mult+0x84>
 8007f6e:	4639      	mov	r1, r7
 8007f70:	4622      	mov	r2, r4
 8007f72:	4630      	mov	r0, r6
 8007f74:	f7ff ff1e 	bl	8007db4 <__multiply>
 8007f78:	4639      	mov	r1, r7
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f7ff fe47 	bl	8007c10 <_Bfree>
 8007f82:	4647      	mov	r7, r8
 8007f84:	106d      	asrs	r5, r5, #1
 8007f86:	d00b      	beq.n	8007fa0 <__pow5mult+0xa0>
 8007f88:	6820      	ldr	r0, [r4, #0]
 8007f8a:	b938      	cbnz	r0, 8007f9c <__pow5mult+0x9c>
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4630      	mov	r0, r6
 8007f92:	f7ff ff0f 	bl	8007db4 <__multiply>
 8007f96:	6020      	str	r0, [r4, #0]
 8007f98:	f8c0 9000 	str.w	r9, [r0]
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	e7e4      	b.n	8007f6a <__pow5mult+0x6a>
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa6:	bf00      	nop
 8007fa8:	080098e0 	.word	0x080098e0
 8007fac:	08009705 	.word	0x08009705
 8007fb0:	0800978c 	.word	0x0800978c

08007fb4 <__lshift>:
 8007fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	460c      	mov	r4, r1
 8007fba:	6849      	ldr	r1, [r1, #4]
 8007fbc:	6923      	ldr	r3, [r4, #16]
 8007fbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fc2:	68a3      	ldr	r3, [r4, #8]
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	4691      	mov	r9, r2
 8007fc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fcc:	f108 0601 	add.w	r6, r8, #1
 8007fd0:	42b3      	cmp	r3, r6
 8007fd2:	db0b      	blt.n	8007fec <__lshift+0x38>
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	f7ff fddb 	bl	8007b90 <_Balloc>
 8007fda:	4605      	mov	r5, r0
 8007fdc:	b948      	cbnz	r0, 8007ff2 <__lshift+0x3e>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	4b28      	ldr	r3, [pc, #160]	; (8008084 <__lshift+0xd0>)
 8007fe2:	4829      	ldr	r0, [pc, #164]	; (8008088 <__lshift+0xd4>)
 8007fe4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007fe8:	f000 fb74 	bl	80086d4 <__assert_func>
 8007fec:	3101      	adds	r1, #1
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	e7ee      	b.n	8007fd0 <__lshift+0x1c>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f100 0114 	add.w	r1, r0, #20
 8007ff8:	f100 0210 	add.w	r2, r0, #16
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	4553      	cmp	r3, sl
 8008000:	db33      	blt.n	800806a <__lshift+0xb6>
 8008002:	6920      	ldr	r0, [r4, #16]
 8008004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008008:	f104 0314 	add.w	r3, r4, #20
 800800c:	f019 091f 	ands.w	r9, r9, #31
 8008010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008018:	d02b      	beq.n	8008072 <__lshift+0xbe>
 800801a:	f1c9 0e20 	rsb	lr, r9, #32
 800801e:	468a      	mov	sl, r1
 8008020:	2200      	movs	r2, #0
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	fa00 f009 	lsl.w	r0, r0, r9
 8008028:	4302      	orrs	r2, r0
 800802a:	f84a 2b04 	str.w	r2, [sl], #4
 800802e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008032:	459c      	cmp	ip, r3
 8008034:	fa22 f20e 	lsr.w	r2, r2, lr
 8008038:	d8f3      	bhi.n	8008022 <__lshift+0x6e>
 800803a:	ebac 0304 	sub.w	r3, ip, r4
 800803e:	3b15      	subs	r3, #21
 8008040:	f023 0303 	bic.w	r3, r3, #3
 8008044:	3304      	adds	r3, #4
 8008046:	f104 0015 	add.w	r0, r4, #21
 800804a:	4584      	cmp	ip, r0
 800804c:	bf38      	it	cc
 800804e:	2304      	movcc	r3, #4
 8008050:	50ca      	str	r2, [r1, r3]
 8008052:	b10a      	cbz	r2, 8008058 <__lshift+0xa4>
 8008054:	f108 0602 	add.w	r6, r8, #2
 8008058:	3e01      	subs	r6, #1
 800805a:	4638      	mov	r0, r7
 800805c:	612e      	str	r6, [r5, #16]
 800805e:	4621      	mov	r1, r4
 8008060:	f7ff fdd6 	bl	8007c10 <_Bfree>
 8008064:	4628      	mov	r0, r5
 8008066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806a:	f842 0f04 	str.w	r0, [r2, #4]!
 800806e:	3301      	adds	r3, #1
 8008070:	e7c5      	b.n	8007ffe <__lshift+0x4a>
 8008072:	3904      	subs	r1, #4
 8008074:	f853 2b04 	ldr.w	r2, [r3], #4
 8008078:	f841 2f04 	str.w	r2, [r1, #4]!
 800807c:	459c      	cmp	ip, r3
 800807e:	d8f9      	bhi.n	8008074 <__lshift+0xc0>
 8008080:	e7ea      	b.n	8008058 <__lshift+0xa4>
 8008082:	bf00      	nop
 8008084:	0800977b 	.word	0x0800977b
 8008088:	0800978c 	.word	0x0800978c

0800808c <__mcmp>:
 800808c:	b530      	push	{r4, r5, lr}
 800808e:	6902      	ldr	r2, [r0, #16]
 8008090:	690c      	ldr	r4, [r1, #16]
 8008092:	1b12      	subs	r2, r2, r4
 8008094:	d10e      	bne.n	80080b4 <__mcmp+0x28>
 8008096:	f100 0314 	add.w	r3, r0, #20
 800809a:	3114      	adds	r1, #20
 800809c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80080a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80080a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80080a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80080ac:	42a5      	cmp	r5, r4
 80080ae:	d003      	beq.n	80080b8 <__mcmp+0x2c>
 80080b0:	d305      	bcc.n	80080be <__mcmp+0x32>
 80080b2:	2201      	movs	r2, #1
 80080b4:	4610      	mov	r0, r2
 80080b6:	bd30      	pop	{r4, r5, pc}
 80080b8:	4283      	cmp	r3, r0
 80080ba:	d3f3      	bcc.n	80080a4 <__mcmp+0x18>
 80080bc:	e7fa      	b.n	80080b4 <__mcmp+0x28>
 80080be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080c2:	e7f7      	b.n	80080b4 <__mcmp+0x28>

080080c4 <__mdiff>:
 80080c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	460c      	mov	r4, r1
 80080ca:	4606      	mov	r6, r0
 80080cc:	4611      	mov	r1, r2
 80080ce:	4620      	mov	r0, r4
 80080d0:	4617      	mov	r7, r2
 80080d2:	f7ff ffdb 	bl	800808c <__mcmp>
 80080d6:	1e05      	subs	r5, r0, #0
 80080d8:	d110      	bne.n	80080fc <__mdiff+0x38>
 80080da:	4629      	mov	r1, r5
 80080dc:	4630      	mov	r0, r6
 80080de:	f7ff fd57 	bl	8007b90 <_Balloc>
 80080e2:	b930      	cbnz	r0, 80080f2 <__mdiff+0x2e>
 80080e4:	4b39      	ldr	r3, [pc, #228]	; (80081cc <__mdiff+0x108>)
 80080e6:	4602      	mov	r2, r0
 80080e8:	f240 2132 	movw	r1, #562	; 0x232
 80080ec:	4838      	ldr	r0, [pc, #224]	; (80081d0 <__mdiff+0x10c>)
 80080ee:	f000 faf1 	bl	80086d4 <__assert_func>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fc:	bfa4      	itt	ge
 80080fe:	463b      	movge	r3, r7
 8008100:	4627      	movge	r7, r4
 8008102:	4630      	mov	r0, r6
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	bfa6      	itte	ge
 8008108:	461c      	movge	r4, r3
 800810a:	2500      	movge	r5, #0
 800810c:	2501      	movlt	r5, #1
 800810e:	f7ff fd3f 	bl	8007b90 <_Balloc>
 8008112:	b920      	cbnz	r0, 800811e <__mdiff+0x5a>
 8008114:	4b2d      	ldr	r3, [pc, #180]	; (80081cc <__mdiff+0x108>)
 8008116:	4602      	mov	r2, r0
 8008118:	f44f 7110 	mov.w	r1, #576	; 0x240
 800811c:	e7e6      	b.n	80080ec <__mdiff+0x28>
 800811e:	693e      	ldr	r6, [r7, #16]
 8008120:	60c5      	str	r5, [r0, #12]
 8008122:	6925      	ldr	r5, [r4, #16]
 8008124:	f107 0114 	add.w	r1, r7, #20
 8008128:	f104 0914 	add.w	r9, r4, #20
 800812c:	f100 0e14 	add.w	lr, r0, #20
 8008130:	f107 0210 	add.w	r2, r7, #16
 8008134:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008138:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800813c:	46f2      	mov	sl, lr
 800813e:	2700      	movs	r7, #0
 8008140:	f859 3b04 	ldr.w	r3, [r9], #4
 8008144:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008148:	fa1f f883 	uxth.w	r8, r3
 800814c:	fa17 f78b 	uxtah	r7, r7, fp
 8008150:	0c1b      	lsrs	r3, r3, #16
 8008152:	eba7 0808 	sub.w	r8, r7, r8
 8008156:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800815a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800815e:	fa1f f888 	uxth.w	r8, r8
 8008162:	141f      	asrs	r7, r3, #16
 8008164:	454d      	cmp	r5, r9
 8008166:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800816a:	f84a 3b04 	str.w	r3, [sl], #4
 800816e:	d8e7      	bhi.n	8008140 <__mdiff+0x7c>
 8008170:	1b2b      	subs	r3, r5, r4
 8008172:	3b15      	subs	r3, #21
 8008174:	f023 0303 	bic.w	r3, r3, #3
 8008178:	3304      	adds	r3, #4
 800817a:	3415      	adds	r4, #21
 800817c:	42a5      	cmp	r5, r4
 800817e:	bf38      	it	cc
 8008180:	2304      	movcc	r3, #4
 8008182:	4419      	add	r1, r3
 8008184:	4473      	add	r3, lr
 8008186:	469e      	mov	lr, r3
 8008188:	460d      	mov	r5, r1
 800818a:	4565      	cmp	r5, ip
 800818c:	d30e      	bcc.n	80081ac <__mdiff+0xe8>
 800818e:	f10c 0203 	add.w	r2, ip, #3
 8008192:	1a52      	subs	r2, r2, r1
 8008194:	f022 0203 	bic.w	r2, r2, #3
 8008198:	3903      	subs	r1, #3
 800819a:	458c      	cmp	ip, r1
 800819c:	bf38      	it	cc
 800819e:	2200      	movcc	r2, #0
 80081a0:	441a      	add	r2, r3
 80081a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80081a6:	b17b      	cbz	r3, 80081c8 <__mdiff+0x104>
 80081a8:	6106      	str	r6, [r0, #16]
 80081aa:	e7a5      	b.n	80080f8 <__mdiff+0x34>
 80081ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80081b0:	fa17 f488 	uxtah	r4, r7, r8
 80081b4:	1422      	asrs	r2, r4, #16
 80081b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80081ba:	b2a4      	uxth	r4, r4
 80081bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081c0:	f84e 4b04 	str.w	r4, [lr], #4
 80081c4:	1417      	asrs	r7, r2, #16
 80081c6:	e7e0      	b.n	800818a <__mdiff+0xc6>
 80081c8:	3e01      	subs	r6, #1
 80081ca:	e7ea      	b.n	80081a2 <__mdiff+0xde>
 80081cc:	0800977b 	.word	0x0800977b
 80081d0:	0800978c 	.word	0x0800978c

080081d4 <__d2b>:
 80081d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081d8:	2101      	movs	r1, #1
 80081da:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 80081de:	4690      	mov	r8, r2
 80081e0:	4699      	mov	r9, r3
 80081e2:	f7ff fcd5 	bl	8007b90 <_Balloc>
 80081e6:	4604      	mov	r4, r0
 80081e8:	b930      	cbnz	r0, 80081f8 <__d2b+0x24>
 80081ea:	4602      	mov	r2, r0
 80081ec:	4b24      	ldr	r3, [pc, #144]	; (8008280 <__d2b+0xac>)
 80081ee:	4825      	ldr	r0, [pc, #148]	; (8008284 <__d2b+0xb0>)
 80081f0:	f240 310a 	movw	r1, #778	; 0x30a
 80081f4:	f000 fa6e 	bl	80086d4 <__assert_func>
 80081f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008200:	bb2d      	cbnz	r5, 800824e <__d2b+0x7a>
 8008202:	f1b8 0200 	subs.w	r2, r8, #0
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	d026      	beq.n	8008258 <__d2b+0x84>
 800820a:	4668      	mov	r0, sp
 800820c:	9200      	str	r2, [sp, #0]
 800820e:	f7ff fd8b 	bl	8007d28 <__lo0bits>
 8008212:	9900      	ldr	r1, [sp, #0]
 8008214:	b1f0      	cbz	r0, 8008254 <__d2b+0x80>
 8008216:	9a01      	ldr	r2, [sp, #4]
 8008218:	f1c0 0320 	rsb	r3, r0, #32
 800821c:	fa02 f303 	lsl.w	r3, r2, r3
 8008220:	430b      	orrs	r3, r1
 8008222:	40c2      	lsrs	r2, r0
 8008224:	6163      	str	r3, [r4, #20]
 8008226:	9201      	str	r2, [sp, #4]
 8008228:	9b01      	ldr	r3, [sp, #4]
 800822a:	61a3      	str	r3, [r4, #24]
 800822c:	2b00      	cmp	r3, #0
 800822e:	bf14      	ite	ne
 8008230:	2202      	movne	r2, #2
 8008232:	2201      	moveq	r2, #1
 8008234:	6122      	str	r2, [r4, #16]
 8008236:	b1c5      	cbz	r5, 800826a <__d2b+0x96>
 8008238:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800823c:	4405      	add	r5, r0
 800823e:	603d      	str	r5, [r7, #0]
 8008240:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008244:	6030      	str	r0, [r6, #0]
 8008246:	4620      	mov	r0, r4
 8008248:	b003      	add	sp, #12
 800824a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800824e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008252:	e7d6      	b.n	8008202 <__d2b+0x2e>
 8008254:	6161      	str	r1, [r4, #20]
 8008256:	e7e7      	b.n	8008228 <__d2b+0x54>
 8008258:	a801      	add	r0, sp, #4
 800825a:	f7ff fd65 	bl	8007d28 <__lo0bits>
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	6163      	str	r3, [r4, #20]
 8008262:	2201      	movs	r2, #1
 8008264:	6122      	str	r2, [r4, #16]
 8008266:	3020      	adds	r0, #32
 8008268:	e7e5      	b.n	8008236 <__d2b+0x62>
 800826a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800826e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008272:	6038      	str	r0, [r7, #0]
 8008274:	6918      	ldr	r0, [r3, #16]
 8008276:	f7ff fd37 	bl	8007ce8 <__hi0bits>
 800827a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800827e:	e7e1      	b.n	8008244 <__d2b+0x70>
 8008280:	0800977b 	.word	0x0800977b
 8008284:	0800978c 	.word	0x0800978c

08008288 <_calloc_r>:
 8008288:	b513      	push	{r0, r1, r4, lr}
 800828a:	434a      	muls	r2, r1
 800828c:	4611      	mov	r1, r2
 800828e:	9201      	str	r2, [sp, #4]
 8008290:	f000 f85a 	bl	8008348 <_malloc_r>
 8008294:	4604      	mov	r4, r0
 8008296:	b118      	cbz	r0, 80082a0 <_calloc_r+0x18>
 8008298:	9a01      	ldr	r2, [sp, #4]
 800829a:	2100      	movs	r1, #0
 800829c:	f7fe f95e 	bl	800655c <memset>
 80082a0:	4620      	mov	r0, r4
 80082a2:	b002      	add	sp, #8
 80082a4:	bd10      	pop	{r4, pc}
	...

080082a8 <_free_r>:
 80082a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082aa:	2900      	cmp	r1, #0
 80082ac:	d048      	beq.n	8008340 <_free_r+0x98>
 80082ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082b2:	9001      	str	r0, [sp, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f1a1 0404 	sub.w	r4, r1, #4
 80082ba:	bfb8      	it	lt
 80082bc:	18e4      	addlt	r4, r4, r3
 80082be:	f000 fa65 	bl	800878c <__malloc_lock>
 80082c2:	4a20      	ldr	r2, [pc, #128]	; (8008344 <_free_r+0x9c>)
 80082c4:	9801      	ldr	r0, [sp, #4]
 80082c6:	6813      	ldr	r3, [r2, #0]
 80082c8:	4615      	mov	r5, r2
 80082ca:	b933      	cbnz	r3, 80082da <_free_r+0x32>
 80082cc:	6063      	str	r3, [r4, #4]
 80082ce:	6014      	str	r4, [r2, #0]
 80082d0:	b003      	add	sp, #12
 80082d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082d6:	f000 ba5f 	b.w	8008798 <__malloc_unlock>
 80082da:	42a3      	cmp	r3, r4
 80082dc:	d90b      	bls.n	80082f6 <_free_r+0x4e>
 80082de:	6821      	ldr	r1, [r4, #0]
 80082e0:	1862      	adds	r2, r4, r1
 80082e2:	4293      	cmp	r3, r2
 80082e4:	bf04      	itt	eq
 80082e6:	681a      	ldreq	r2, [r3, #0]
 80082e8:	685b      	ldreq	r3, [r3, #4]
 80082ea:	6063      	str	r3, [r4, #4]
 80082ec:	bf04      	itt	eq
 80082ee:	1852      	addeq	r2, r2, r1
 80082f0:	6022      	streq	r2, [r4, #0]
 80082f2:	602c      	str	r4, [r5, #0]
 80082f4:	e7ec      	b.n	80082d0 <_free_r+0x28>
 80082f6:	461a      	mov	r2, r3
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b10b      	cbz	r3, 8008300 <_free_r+0x58>
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d9fa      	bls.n	80082f6 <_free_r+0x4e>
 8008300:	6811      	ldr	r1, [r2, #0]
 8008302:	1855      	adds	r5, r2, r1
 8008304:	42a5      	cmp	r5, r4
 8008306:	d10b      	bne.n	8008320 <_free_r+0x78>
 8008308:	6824      	ldr	r4, [r4, #0]
 800830a:	4421      	add	r1, r4
 800830c:	1854      	adds	r4, r2, r1
 800830e:	42a3      	cmp	r3, r4
 8008310:	6011      	str	r1, [r2, #0]
 8008312:	d1dd      	bne.n	80082d0 <_free_r+0x28>
 8008314:	681c      	ldr	r4, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	6053      	str	r3, [r2, #4]
 800831a:	4421      	add	r1, r4
 800831c:	6011      	str	r1, [r2, #0]
 800831e:	e7d7      	b.n	80082d0 <_free_r+0x28>
 8008320:	d902      	bls.n	8008328 <_free_r+0x80>
 8008322:	230c      	movs	r3, #12
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	e7d3      	b.n	80082d0 <_free_r+0x28>
 8008328:	6825      	ldr	r5, [r4, #0]
 800832a:	1961      	adds	r1, r4, r5
 800832c:	428b      	cmp	r3, r1
 800832e:	bf04      	itt	eq
 8008330:	6819      	ldreq	r1, [r3, #0]
 8008332:	685b      	ldreq	r3, [r3, #4]
 8008334:	6063      	str	r3, [r4, #4]
 8008336:	bf04      	itt	eq
 8008338:	1949      	addeq	r1, r1, r5
 800833a:	6021      	streq	r1, [r4, #0]
 800833c:	6054      	str	r4, [r2, #4]
 800833e:	e7c7      	b.n	80082d0 <_free_r+0x28>
 8008340:	b003      	add	sp, #12
 8008342:	bd30      	pop	{r4, r5, pc}
 8008344:	20013548 	.word	0x20013548

08008348 <_malloc_r>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	1ccd      	adds	r5, r1, #3
 800834c:	f025 0503 	bic.w	r5, r5, #3
 8008350:	3508      	adds	r5, #8
 8008352:	2d0c      	cmp	r5, #12
 8008354:	bf38      	it	cc
 8008356:	250c      	movcc	r5, #12
 8008358:	2d00      	cmp	r5, #0
 800835a:	4606      	mov	r6, r0
 800835c:	db01      	blt.n	8008362 <_malloc_r+0x1a>
 800835e:	42a9      	cmp	r1, r5
 8008360:	d903      	bls.n	800836a <_malloc_r+0x22>
 8008362:	230c      	movs	r3, #12
 8008364:	6033      	str	r3, [r6, #0]
 8008366:	2000      	movs	r0, #0
 8008368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800836a:	f000 fa0f 	bl	800878c <__malloc_lock>
 800836e:	4921      	ldr	r1, [pc, #132]	; (80083f4 <_malloc_r+0xac>)
 8008370:	680a      	ldr	r2, [r1, #0]
 8008372:	4614      	mov	r4, r2
 8008374:	b99c      	cbnz	r4, 800839e <_malloc_r+0x56>
 8008376:	4f20      	ldr	r7, [pc, #128]	; (80083f8 <_malloc_r+0xb0>)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	b923      	cbnz	r3, 8008386 <_malloc_r+0x3e>
 800837c:	4621      	mov	r1, r4
 800837e:	4630      	mov	r0, r6
 8008380:	f000 f998 	bl	80086b4 <_sbrk_r>
 8008384:	6038      	str	r0, [r7, #0]
 8008386:	4629      	mov	r1, r5
 8008388:	4630      	mov	r0, r6
 800838a:	f000 f993 	bl	80086b4 <_sbrk_r>
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d123      	bne.n	80083da <_malloc_r+0x92>
 8008392:	230c      	movs	r3, #12
 8008394:	6033      	str	r3, [r6, #0]
 8008396:	4630      	mov	r0, r6
 8008398:	f000 f9fe 	bl	8008798 <__malloc_unlock>
 800839c:	e7e3      	b.n	8008366 <_malloc_r+0x1e>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	1b5b      	subs	r3, r3, r5
 80083a2:	d417      	bmi.n	80083d4 <_malloc_r+0x8c>
 80083a4:	2b0b      	cmp	r3, #11
 80083a6:	d903      	bls.n	80083b0 <_malloc_r+0x68>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	441c      	add	r4, r3
 80083ac:	6025      	str	r5, [r4, #0]
 80083ae:	e004      	b.n	80083ba <_malloc_r+0x72>
 80083b0:	6863      	ldr	r3, [r4, #4]
 80083b2:	42a2      	cmp	r2, r4
 80083b4:	bf0c      	ite	eq
 80083b6:	600b      	streq	r3, [r1, #0]
 80083b8:	6053      	strne	r3, [r2, #4]
 80083ba:	4630      	mov	r0, r6
 80083bc:	f000 f9ec 	bl	8008798 <__malloc_unlock>
 80083c0:	f104 000b 	add.w	r0, r4, #11
 80083c4:	1d23      	adds	r3, r4, #4
 80083c6:	f020 0007 	bic.w	r0, r0, #7
 80083ca:	1ac2      	subs	r2, r0, r3
 80083cc:	d0cc      	beq.n	8008368 <_malloc_r+0x20>
 80083ce:	1a1b      	subs	r3, r3, r0
 80083d0:	50a3      	str	r3, [r4, r2]
 80083d2:	e7c9      	b.n	8008368 <_malloc_r+0x20>
 80083d4:	4622      	mov	r2, r4
 80083d6:	6864      	ldr	r4, [r4, #4]
 80083d8:	e7cc      	b.n	8008374 <_malloc_r+0x2c>
 80083da:	1cc4      	adds	r4, r0, #3
 80083dc:	f024 0403 	bic.w	r4, r4, #3
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	d0e3      	beq.n	80083ac <_malloc_r+0x64>
 80083e4:	1a21      	subs	r1, r4, r0
 80083e6:	4630      	mov	r0, r6
 80083e8:	f000 f964 	bl	80086b4 <_sbrk_r>
 80083ec:	3001      	adds	r0, #1
 80083ee:	d1dd      	bne.n	80083ac <_malloc_r+0x64>
 80083f0:	e7cf      	b.n	8008392 <_malloc_r+0x4a>
 80083f2:	bf00      	nop
 80083f4:	20013548 	.word	0x20013548
 80083f8:	2001354c 	.word	0x2001354c

080083fc <__ssputs_r>:
 80083fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	688e      	ldr	r6, [r1, #8]
 8008402:	429e      	cmp	r6, r3
 8008404:	4682      	mov	sl, r0
 8008406:	460c      	mov	r4, r1
 8008408:	4690      	mov	r8, r2
 800840a:	461f      	mov	r7, r3
 800840c:	d838      	bhi.n	8008480 <__ssputs_r+0x84>
 800840e:	898a      	ldrh	r2, [r1, #12]
 8008410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008414:	d032      	beq.n	800847c <__ssputs_r+0x80>
 8008416:	6825      	ldr	r5, [r4, #0]
 8008418:	6909      	ldr	r1, [r1, #16]
 800841a:	eba5 0901 	sub.w	r9, r5, r1
 800841e:	6965      	ldr	r5, [r4, #20]
 8008420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008428:	3301      	adds	r3, #1
 800842a:	444b      	add	r3, r9
 800842c:	106d      	asrs	r5, r5, #1
 800842e:	429d      	cmp	r5, r3
 8008430:	bf38      	it	cc
 8008432:	461d      	movcc	r5, r3
 8008434:	0553      	lsls	r3, r2, #21
 8008436:	d531      	bpl.n	800849c <__ssputs_r+0xa0>
 8008438:	4629      	mov	r1, r5
 800843a:	f7ff ff85 	bl	8008348 <_malloc_r>
 800843e:	4606      	mov	r6, r0
 8008440:	b950      	cbnz	r0, 8008458 <__ssputs_r+0x5c>
 8008442:	230c      	movs	r3, #12
 8008444:	f8ca 3000 	str.w	r3, [sl]
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008458:	6921      	ldr	r1, [r4, #16]
 800845a:	464a      	mov	r2, r9
 800845c:	f7fe f870 	bl	8006540 <memcpy>
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846a:	81a3      	strh	r3, [r4, #12]
 800846c:	6126      	str	r6, [r4, #16]
 800846e:	6165      	str	r5, [r4, #20]
 8008470:	444e      	add	r6, r9
 8008472:	eba5 0509 	sub.w	r5, r5, r9
 8008476:	6026      	str	r6, [r4, #0]
 8008478:	60a5      	str	r5, [r4, #8]
 800847a:	463e      	mov	r6, r7
 800847c:	42be      	cmp	r6, r7
 800847e:	d900      	bls.n	8008482 <__ssputs_r+0x86>
 8008480:	463e      	mov	r6, r7
 8008482:	4632      	mov	r2, r6
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	4641      	mov	r1, r8
 8008488:	f000 f966 	bl	8008758 <memmove>
 800848c:	68a3      	ldr	r3, [r4, #8]
 800848e:	6822      	ldr	r2, [r4, #0]
 8008490:	1b9b      	subs	r3, r3, r6
 8008492:	4432      	add	r2, r6
 8008494:	60a3      	str	r3, [r4, #8]
 8008496:	6022      	str	r2, [r4, #0]
 8008498:	2000      	movs	r0, #0
 800849a:	e7db      	b.n	8008454 <__ssputs_r+0x58>
 800849c:	462a      	mov	r2, r5
 800849e:	f000 f981 	bl	80087a4 <_realloc_r>
 80084a2:	4606      	mov	r6, r0
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d1e1      	bne.n	800846c <__ssputs_r+0x70>
 80084a8:	6921      	ldr	r1, [r4, #16]
 80084aa:	4650      	mov	r0, sl
 80084ac:	f7ff fefc 	bl	80082a8 <_free_r>
 80084b0:	e7c7      	b.n	8008442 <__ssputs_r+0x46>
	...

080084b4 <_svfiprintf_r>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	4698      	mov	r8, r3
 80084ba:	898b      	ldrh	r3, [r1, #12]
 80084bc:	061b      	lsls	r3, r3, #24
 80084be:	b09d      	sub	sp, #116	; 0x74
 80084c0:	4607      	mov	r7, r0
 80084c2:	460d      	mov	r5, r1
 80084c4:	4614      	mov	r4, r2
 80084c6:	d50e      	bpl.n	80084e6 <_svfiprintf_r+0x32>
 80084c8:	690b      	ldr	r3, [r1, #16]
 80084ca:	b963      	cbnz	r3, 80084e6 <_svfiprintf_r+0x32>
 80084cc:	2140      	movs	r1, #64	; 0x40
 80084ce:	f7ff ff3b 	bl	8008348 <_malloc_r>
 80084d2:	6028      	str	r0, [r5, #0]
 80084d4:	6128      	str	r0, [r5, #16]
 80084d6:	b920      	cbnz	r0, 80084e2 <_svfiprintf_r+0x2e>
 80084d8:	230c      	movs	r3, #12
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084e0:	e0d1      	b.n	8008686 <_svfiprintf_r+0x1d2>
 80084e2:	2340      	movs	r3, #64	; 0x40
 80084e4:	616b      	str	r3, [r5, #20]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ea:	2320      	movs	r3, #32
 80084ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f4:	2330      	movs	r3, #48	; 0x30
 80084f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086a0 <_svfiprintf_r+0x1ec>
 80084fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084fe:	f04f 0901 	mov.w	r9, #1
 8008502:	4623      	mov	r3, r4
 8008504:	469a      	mov	sl, r3
 8008506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800850a:	b10a      	cbz	r2, 8008510 <_svfiprintf_r+0x5c>
 800850c:	2a25      	cmp	r2, #37	; 0x25
 800850e:	d1f9      	bne.n	8008504 <_svfiprintf_r+0x50>
 8008510:	ebba 0b04 	subs.w	fp, sl, r4
 8008514:	d00b      	beq.n	800852e <_svfiprintf_r+0x7a>
 8008516:	465b      	mov	r3, fp
 8008518:	4622      	mov	r2, r4
 800851a:	4629      	mov	r1, r5
 800851c:	4638      	mov	r0, r7
 800851e:	f7ff ff6d 	bl	80083fc <__ssputs_r>
 8008522:	3001      	adds	r0, #1
 8008524:	f000 80aa 	beq.w	800867c <_svfiprintf_r+0x1c8>
 8008528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800852a:	445a      	add	r2, fp
 800852c:	9209      	str	r2, [sp, #36]	; 0x24
 800852e:	f89a 3000 	ldrb.w	r3, [sl]
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80a2 	beq.w	800867c <_svfiprintf_r+0x1c8>
 8008538:	2300      	movs	r3, #0
 800853a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800853e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008542:	f10a 0a01 	add.w	sl, sl, #1
 8008546:	9304      	str	r3, [sp, #16]
 8008548:	9307      	str	r3, [sp, #28]
 800854a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800854e:	931a      	str	r3, [sp, #104]	; 0x68
 8008550:	4654      	mov	r4, sl
 8008552:	2205      	movs	r2, #5
 8008554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008558:	4851      	ldr	r0, [pc, #324]	; (80086a0 <_svfiprintf_r+0x1ec>)
 800855a:	f7f7 fea1 	bl	80002a0 <memchr>
 800855e:	9a04      	ldr	r2, [sp, #16]
 8008560:	b9d8      	cbnz	r0, 800859a <_svfiprintf_r+0xe6>
 8008562:	06d0      	lsls	r0, r2, #27
 8008564:	bf44      	itt	mi
 8008566:	2320      	movmi	r3, #32
 8008568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800856c:	0711      	lsls	r1, r2, #28
 800856e:	bf44      	itt	mi
 8008570:	232b      	movmi	r3, #43	; 0x2b
 8008572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008576:	f89a 3000 	ldrb.w	r3, [sl]
 800857a:	2b2a      	cmp	r3, #42	; 0x2a
 800857c:	d015      	beq.n	80085aa <_svfiprintf_r+0xf6>
 800857e:	9a07      	ldr	r2, [sp, #28]
 8008580:	4654      	mov	r4, sl
 8008582:	2000      	movs	r0, #0
 8008584:	f04f 0c0a 	mov.w	ip, #10
 8008588:	4621      	mov	r1, r4
 800858a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858e:	3b30      	subs	r3, #48	; 0x30
 8008590:	2b09      	cmp	r3, #9
 8008592:	d94e      	bls.n	8008632 <_svfiprintf_r+0x17e>
 8008594:	b1b0      	cbz	r0, 80085c4 <_svfiprintf_r+0x110>
 8008596:	9207      	str	r2, [sp, #28]
 8008598:	e014      	b.n	80085c4 <_svfiprintf_r+0x110>
 800859a:	eba0 0308 	sub.w	r3, r0, r8
 800859e:	fa09 f303 	lsl.w	r3, r9, r3
 80085a2:	4313      	orrs	r3, r2
 80085a4:	9304      	str	r3, [sp, #16]
 80085a6:	46a2      	mov	sl, r4
 80085a8:	e7d2      	b.n	8008550 <_svfiprintf_r+0x9c>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	1d19      	adds	r1, r3, #4
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	9103      	str	r1, [sp, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bfbb      	ittet	lt
 80085b6:	425b      	neglt	r3, r3
 80085b8:	f042 0202 	orrlt.w	r2, r2, #2
 80085bc:	9307      	strge	r3, [sp, #28]
 80085be:	9307      	strlt	r3, [sp, #28]
 80085c0:	bfb8      	it	lt
 80085c2:	9204      	strlt	r2, [sp, #16]
 80085c4:	7823      	ldrb	r3, [r4, #0]
 80085c6:	2b2e      	cmp	r3, #46	; 0x2e
 80085c8:	d10c      	bne.n	80085e4 <_svfiprintf_r+0x130>
 80085ca:	7863      	ldrb	r3, [r4, #1]
 80085cc:	2b2a      	cmp	r3, #42	; 0x2a
 80085ce:	d135      	bne.n	800863c <_svfiprintf_r+0x188>
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	1d1a      	adds	r2, r3, #4
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	9203      	str	r2, [sp, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bfb8      	it	lt
 80085dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80085e0:	3402      	adds	r4, #2
 80085e2:	9305      	str	r3, [sp, #20]
 80085e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086b0 <_svfiprintf_r+0x1fc>
 80085e8:	7821      	ldrb	r1, [r4, #0]
 80085ea:	2203      	movs	r2, #3
 80085ec:	4650      	mov	r0, sl
 80085ee:	f7f7 fe57 	bl	80002a0 <memchr>
 80085f2:	b140      	cbz	r0, 8008606 <_svfiprintf_r+0x152>
 80085f4:	2340      	movs	r3, #64	; 0x40
 80085f6:	eba0 000a 	sub.w	r0, r0, sl
 80085fa:	fa03 f000 	lsl.w	r0, r3, r0
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	4303      	orrs	r3, r0
 8008602:	3401      	adds	r4, #1
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800860a:	4826      	ldr	r0, [pc, #152]	; (80086a4 <_svfiprintf_r+0x1f0>)
 800860c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008610:	2206      	movs	r2, #6
 8008612:	f7f7 fe45 	bl	80002a0 <memchr>
 8008616:	2800      	cmp	r0, #0
 8008618:	d038      	beq.n	800868c <_svfiprintf_r+0x1d8>
 800861a:	4b23      	ldr	r3, [pc, #140]	; (80086a8 <_svfiprintf_r+0x1f4>)
 800861c:	bb1b      	cbnz	r3, 8008666 <_svfiprintf_r+0x1b2>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	3307      	adds	r3, #7
 8008622:	f023 0307 	bic.w	r3, r3, #7
 8008626:	3308      	adds	r3, #8
 8008628:	9303      	str	r3, [sp, #12]
 800862a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862c:	4433      	add	r3, r6
 800862e:	9309      	str	r3, [sp, #36]	; 0x24
 8008630:	e767      	b.n	8008502 <_svfiprintf_r+0x4e>
 8008632:	fb0c 3202 	mla	r2, ip, r2, r3
 8008636:	460c      	mov	r4, r1
 8008638:	2001      	movs	r0, #1
 800863a:	e7a5      	b.n	8008588 <_svfiprintf_r+0xd4>
 800863c:	2300      	movs	r3, #0
 800863e:	3401      	adds	r4, #1
 8008640:	9305      	str	r3, [sp, #20]
 8008642:	4619      	mov	r1, r3
 8008644:	f04f 0c0a 	mov.w	ip, #10
 8008648:	4620      	mov	r0, r4
 800864a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800864e:	3a30      	subs	r2, #48	; 0x30
 8008650:	2a09      	cmp	r2, #9
 8008652:	d903      	bls.n	800865c <_svfiprintf_r+0x1a8>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0c5      	beq.n	80085e4 <_svfiprintf_r+0x130>
 8008658:	9105      	str	r1, [sp, #20]
 800865a:	e7c3      	b.n	80085e4 <_svfiprintf_r+0x130>
 800865c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008660:	4604      	mov	r4, r0
 8008662:	2301      	movs	r3, #1
 8008664:	e7f0      	b.n	8008648 <_svfiprintf_r+0x194>
 8008666:	ab03      	add	r3, sp, #12
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	462a      	mov	r2, r5
 800866c:	4b0f      	ldr	r3, [pc, #60]	; (80086ac <_svfiprintf_r+0x1f8>)
 800866e:	a904      	add	r1, sp, #16
 8008670:	4638      	mov	r0, r7
 8008672:	f7fe f81b 	bl	80066ac <_printf_float>
 8008676:	1c42      	adds	r2, r0, #1
 8008678:	4606      	mov	r6, r0
 800867a:	d1d6      	bne.n	800862a <_svfiprintf_r+0x176>
 800867c:	89ab      	ldrh	r3, [r5, #12]
 800867e:	065b      	lsls	r3, r3, #25
 8008680:	f53f af2c 	bmi.w	80084dc <_svfiprintf_r+0x28>
 8008684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008686:	b01d      	add	sp, #116	; 0x74
 8008688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868c:	ab03      	add	r3, sp, #12
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	462a      	mov	r2, r5
 8008692:	4b06      	ldr	r3, [pc, #24]	; (80086ac <_svfiprintf_r+0x1f8>)
 8008694:	a904      	add	r1, sp, #16
 8008696:	4638      	mov	r0, r7
 8008698:	f7fe faae 	bl	8006bf8 <_printf_i>
 800869c:	e7eb      	b.n	8008676 <_svfiprintf_r+0x1c2>
 800869e:	bf00      	nop
 80086a0:	080098ec 	.word	0x080098ec
 80086a4:	080098f6 	.word	0x080098f6
 80086a8:	080066ad 	.word	0x080066ad
 80086ac:	080083fd 	.word	0x080083fd
 80086b0:	080098f2 	.word	0x080098f2

080086b4 <_sbrk_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d06      	ldr	r5, [pc, #24]	; (80086d0 <_sbrk_r+0x1c>)
 80086b8:	2300      	movs	r3, #0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	f7fd fd02 	bl	80060c8 <_sbrk>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_sbrk_r+0x1a>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_sbrk_r+0x1a>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	20013838 	.word	0x20013838

080086d4 <__assert_func>:
 80086d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086d6:	4614      	mov	r4, r2
 80086d8:	461a      	mov	r2, r3
 80086da:	4b09      	ldr	r3, [pc, #36]	; (8008700 <__assert_func+0x2c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4605      	mov	r5, r0
 80086e0:	68d8      	ldr	r0, [r3, #12]
 80086e2:	b14c      	cbz	r4, 80086f8 <__assert_func+0x24>
 80086e4:	4b07      	ldr	r3, [pc, #28]	; (8008704 <__assert_func+0x30>)
 80086e6:	9100      	str	r1, [sp, #0]
 80086e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086ec:	4906      	ldr	r1, [pc, #24]	; (8008708 <__assert_func+0x34>)
 80086ee:	462b      	mov	r3, r5
 80086f0:	f000 f80e 	bl	8008710 <fiprintf>
 80086f4:	f000 faa4 	bl	8008c40 <abort>
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <__assert_func+0x38>)
 80086fa:	461c      	mov	r4, r3
 80086fc:	e7f3      	b.n	80086e6 <__assert_func+0x12>
 80086fe:	bf00      	nop
 8008700:	2000000c 	.word	0x2000000c
 8008704:	080098fd 	.word	0x080098fd
 8008708:	0800990a 	.word	0x0800990a
 800870c:	08009938 	.word	0x08009938

08008710 <fiprintf>:
 8008710:	b40e      	push	{r1, r2, r3}
 8008712:	b503      	push	{r0, r1, lr}
 8008714:	4601      	mov	r1, r0
 8008716:	ab03      	add	r3, sp, #12
 8008718:	4805      	ldr	r0, [pc, #20]	; (8008730 <fiprintf+0x20>)
 800871a:	f853 2b04 	ldr.w	r2, [r3], #4
 800871e:	6800      	ldr	r0, [r0, #0]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f000 f88f 	bl	8008844 <_vfiprintf_r>
 8008726:	b002      	add	sp, #8
 8008728:	f85d eb04 	ldr.w	lr, [sp], #4
 800872c:	b003      	add	sp, #12
 800872e:	4770      	bx	lr
 8008730:	2000000c 	.word	0x2000000c

08008734 <__ascii_mbtowc>:
 8008734:	b082      	sub	sp, #8
 8008736:	b901      	cbnz	r1, 800873a <__ascii_mbtowc+0x6>
 8008738:	a901      	add	r1, sp, #4
 800873a:	b142      	cbz	r2, 800874e <__ascii_mbtowc+0x1a>
 800873c:	b14b      	cbz	r3, 8008752 <__ascii_mbtowc+0x1e>
 800873e:	7813      	ldrb	r3, [r2, #0]
 8008740:	600b      	str	r3, [r1, #0]
 8008742:	7812      	ldrb	r2, [r2, #0]
 8008744:	1e10      	subs	r0, r2, #0
 8008746:	bf18      	it	ne
 8008748:	2001      	movne	r0, #1
 800874a:	b002      	add	sp, #8
 800874c:	4770      	bx	lr
 800874e:	4610      	mov	r0, r2
 8008750:	e7fb      	b.n	800874a <__ascii_mbtowc+0x16>
 8008752:	f06f 0001 	mvn.w	r0, #1
 8008756:	e7f8      	b.n	800874a <__ascii_mbtowc+0x16>

08008758 <memmove>:
 8008758:	4288      	cmp	r0, r1
 800875a:	b510      	push	{r4, lr}
 800875c:	eb01 0402 	add.w	r4, r1, r2
 8008760:	d902      	bls.n	8008768 <memmove+0x10>
 8008762:	4284      	cmp	r4, r0
 8008764:	4623      	mov	r3, r4
 8008766:	d807      	bhi.n	8008778 <memmove+0x20>
 8008768:	1e43      	subs	r3, r0, #1
 800876a:	42a1      	cmp	r1, r4
 800876c:	d008      	beq.n	8008780 <memmove+0x28>
 800876e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008776:	e7f8      	b.n	800876a <memmove+0x12>
 8008778:	4402      	add	r2, r0
 800877a:	4601      	mov	r1, r0
 800877c:	428a      	cmp	r2, r1
 800877e:	d100      	bne.n	8008782 <memmove+0x2a>
 8008780:	bd10      	pop	{r4, pc}
 8008782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800878a:	e7f7      	b.n	800877c <memmove+0x24>

0800878c <__malloc_lock>:
 800878c:	4801      	ldr	r0, [pc, #4]	; (8008794 <__malloc_lock+0x8>)
 800878e:	f000 bc17 	b.w	8008fc0 <__retarget_lock_acquire_recursive>
 8008792:	bf00      	nop
 8008794:	20013840 	.word	0x20013840

08008798 <__malloc_unlock>:
 8008798:	4801      	ldr	r0, [pc, #4]	; (80087a0 <__malloc_unlock+0x8>)
 800879a:	f000 bc12 	b.w	8008fc2 <__retarget_lock_release_recursive>
 800879e:	bf00      	nop
 80087a0:	20013840 	.word	0x20013840

080087a4 <_realloc_r>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	4607      	mov	r7, r0
 80087a8:	4614      	mov	r4, r2
 80087aa:	460e      	mov	r6, r1
 80087ac:	b921      	cbnz	r1, 80087b8 <_realloc_r+0x14>
 80087ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087b2:	4611      	mov	r1, r2
 80087b4:	f7ff bdc8 	b.w	8008348 <_malloc_r>
 80087b8:	b922      	cbnz	r2, 80087c4 <_realloc_r+0x20>
 80087ba:	f7ff fd75 	bl	80082a8 <_free_r>
 80087be:	4625      	mov	r5, r4
 80087c0:	4628      	mov	r0, r5
 80087c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c4:	f000 fc62 	bl	800908c <_malloc_usable_size_r>
 80087c8:	42a0      	cmp	r0, r4
 80087ca:	d20f      	bcs.n	80087ec <_realloc_r+0x48>
 80087cc:	4621      	mov	r1, r4
 80087ce:	4638      	mov	r0, r7
 80087d0:	f7ff fdba 	bl	8008348 <_malloc_r>
 80087d4:	4605      	mov	r5, r0
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d0f2      	beq.n	80087c0 <_realloc_r+0x1c>
 80087da:	4631      	mov	r1, r6
 80087dc:	4622      	mov	r2, r4
 80087de:	f7fd feaf 	bl	8006540 <memcpy>
 80087e2:	4631      	mov	r1, r6
 80087e4:	4638      	mov	r0, r7
 80087e6:	f7ff fd5f 	bl	80082a8 <_free_r>
 80087ea:	e7e9      	b.n	80087c0 <_realloc_r+0x1c>
 80087ec:	4635      	mov	r5, r6
 80087ee:	e7e7      	b.n	80087c0 <_realloc_r+0x1c>

080087f0 <__sfputc_r>:
 80087f0:	6893      	ldr	r3, [r2, #8]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	b410      	push	{r4}
 80087f8:	6093      	str	r3, [r2, #8]
 80087fa:	da08      	bge.n	800880e <__sfputc_r+0x1e>
 80087fc:	6994      	ldr	r4, [r2, #24]
 80087fe:	42a3      	cmp	r3, r4
 8008800:	db01      	blt.n	8008806 <__sfputc_r+0x16>
 8008802:	290a      	cmp	r1, #10
 8008804:	d103      	bne.n	800880e <__sfputc_r+0x1e>
 8008806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800880a:	f000 b94b 	b.w	8008aa4 <__swbuf_r>
 800880e:	6813      	ldr	r3, [r2, #0]
 8008810:	1c58      	adds	r0, r3, #1
 8008812:	6010      	str	r0, [r2, #0]
 8008814:	7019      	strb	r1, [r3, #0]
 8008816:	4608      	mov	r0, r1
 8008818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800881c:	4770      	bx	lr

0800881e <__sfputs_r>:
 800881e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008820:	4606      	mov	r6, r0
 8008822:	460f      	mov	r7, r1
 8008824:	4614      	mov	r4, r2
 8008826:	18d5      	adds	r5, r2, r3
 8008828:	42ac      	cmp	r4, r5
 800882a:	d101      	bne.n	8008830 <__sfputs_r+0x12>
 800882c:	2000      	movs	r0, #0
 800882e:	e007      	b.n	8008840 <__sfputs_r+0x22>
 8008830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008834:	463a      	mov	r2, r7
 8008836:	4630      	mov	r0, r6
 8008838:	f7ff ffda 	bl	80087f0 <__sfputc_r>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d1f3      	bne.n	8008828 <__sfputs_r+0xa>
 8008840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008844 <_vfiprintf_r>:
 8008844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	460d      	mov	r5, r1
 800884a:	b09d      	sub	sp, #116	; 0x74
 800884c:	4614      	mov	r4, r2
 800884e:	4698      	mov	r8, r3
 8008850:	4606      	mov	r6, r0
 8008852:	b118      	cbz	r0, 800885c <_vfiprintf_r+0x18>
 8008854:	6983      	ldr	r3, [r0, #24]
 8008856:	b90b      	cbnz	r3, 800885c <_vfiprintf_r+0x18>
 8008858:	f000 fb14 	bl	8008e84 <__sinit>
 800885c:	4b89      	ldr	r3, [pc, #548]	; (8008a84 <_vfiprintf_r+0x240>)
 800885e:	429d      	cmp	r5, r3
 8008860:	d11b      	bne.n	800889a <_vfiprintf_r+0x56>
 8008862:	6875      	ldr	r5, [r6, #4]
 8008864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008866:	07d9      	lsls	r1, r3, #31
 8008868:	d405      	bmi.n	8008876 <_vfiprintf_r+0x32>
 800886a:	89ab      	ldrh	r3, [r5, #12]
 800886c:	059a      	lsls	r2, r3, #22
 800886e:	d402      	bmi.n	8008876 <_vfiprintf_r+0x32>
 8008870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008872:	f000 fba5 	bl	8008fc0 <__retarget_lock_acquire_recursive>
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	071b      	lsls	r3, r3, #28
 800887a:	d501      	bpl.n	8008880 <_vfiprintf_r+0x3c>
 800887c:	692b      	ldr	r3, [r5, #16]
 800887e:	b9eb      	cbnz	r3, 80088bc <_vfiprintf_r+0x78>
 8008880:	4629      	mov	r1, r5
 8008882:	4630      	mov	r0, r6
 8008884:	f000 f96e 	bl	8008b64 <__swsetup_r>
 8008888:	b1c0      	cbz	r0, 80088bc <_vfiprintf_r+0x78>
 800888a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800888c:	07dc      	lsls	r4, r3, #31
 800888e:	d50e      	bpl.n	80088ae <_vfiprintf_r+0x6a>
 8008890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008894:	b01d      	add	sp, #116	; 0x74
 8008896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889a:	4b7b      	ldr	r3, [pc, #492]	; (8008a88 <_vfiprintf_r+0x244>)
 800889c:	429d      	cmp	r5, r3
 800889e:	d101      	bne.n	80088a4 <_vfiprintf_r+0x60>
 80088a0:	68b5      	ldr	r5, [r6, #8]
 80088a2:	e7df      	b.n	8008864 <_vfiprintf_r+0x20>
 80088a4:	4b79      	ldr	r3, [pc, #484]	; (8008a8c <_vfiprintf_r+0x248>)
 80088a6:	429d      	cmp	r5, r3
 80088a8:	bf08      	it	eq
 80088aa:	68f5      	ldreq	r5, [r6, #12]
 80088ac:	e7da      	b.n	8008864 <_vfiprintf_r+0x20>
 80088ae:	89ab      	ldrh	r3, [r5, #12]
 80088b0:	0598      	lsls	r0, r3, #22
 80088b2:	d4ed      	bmi.n	8008890 <_vfiprintf_r+0x4c>
 80088b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088b6:	f000 fb84 	bl	8008fc2 <__retarget_lock_release_recursive>
 80088ba:	e7e9      	b.n	8008890 <_vfiprintf_r+0x4c>
 80088bc:	2300      	movs	r3, #0
 80088be:	9309      	str	r3, [sp, #36]	; 0x24
 80088c0:	2320      	movs	r3, #32
 80088c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ca:	2330      	movs	r3, #48	; 0x30
 80088cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a90 <_vfiprintf_r+0x24c>
 80088d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088d4:	f04f 0901 	mov.w	r9, #1
 80088d8:	4623      	mov	r3, r4
 80088da:	469a      	mov	sl, r3
 80088dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088e0:	b10a      	cbz	r2, 80088e6 <_vfiprintf_r+0xa2>
 80088e2:	2a25      	cmp	r2, #37	; 0x25
 80088e4:	d1f9      	bne.n	80088da <_vfiprintf_r+0x96>
 80088e6:	ebba 0b04 	subs.w	fp, sl, r4
 80088ea:	d00b      	beq.n	8008904 <_vfiprintf_r+0xc0>
 80088ec:	465b      	mov	r3, fp
 80088ee:	4622      	mov	r2, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7ff ff93 	bl	800881e <__sfputs_r>
 80088f8:	3001      	adds	r0, #1
 80088fa:	f000 80aa 	beq.w	8008a52 <_vfiprintf_r+0x20e>
 80088fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008900:	445a      	add	r2, fp
 8008902:	9209      	str	r2, [sp, #36]	; 0x24
 8008904:	f89a 3000 	ldrb.w	r3, [sl]
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 80a2 	beq.w	8008a52 <_vfiprintf_r+0x20e>
 800890e:	2300      	movs	r3, #0
 8008910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008918:	f10a 0a01 	add.w	sl, sl, #1
 800891c:	9304      	str	r3, [sp, #16]
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008924:	931a      	str	r3, [sp, #104]	; 0x68
 8008926:	4654      	mov	r4, sl
 8008928:	2205      	movs	r2, #5
 800892a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892e:	4858      	ldr	r0, [pc, #352]	; (8008a90 <_vfiprintf_r+0x24c>)
 8008930:	f7f7 fcb6 	bl	80002a0 <memchr>
 8008934:	9a04      	ldr	r2, [sp, #16]
 8008936:	b9d8      	cbnz	r0, 8008970 <_vfiprintf_r+0x12c>
 8008938:	06d1      	lsls	r1, r2, #27
 800893a:	bf44      	itt	mi
 800893c:	2320      	movmi	r3, #32
 800893e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008942:	0713      	lsls	r3, r2, #28
 8008944:	bf44      	itt	mi
 8008946:	232b      	movmi	r3, #43	; 0x2b
 8008948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800894c:	f89a 3000 	ldrb.w	r3, [sl]
 8008950:	2b2a      	cmp	r3, #42	; 0x2a
 8008952:	d015      	beq.n	8008980 <_vfiprintf_r+0x13c>
 8008954:	9a07      	ldr	r2, [sp, #28]
 8008956:	4654      	mov	r4, sl
 8008958:	2000      	movs	r0, #0
 800895a:	f04f 0c0a 	mov.w	ip, #10
 800895e:	4621      	mov	r1, r4
 8008960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008964:	3b30      	subs	r3, #48	; 0x30
 8008966:	2b09      	cmp	r3, #9
 8008968:	d94e      	bls.n	8008a08 <_vfiprintf_r+0x1c4>
 800896a:	b1b0      	cbz	r0, 800899a <_vfiprintf_r+0x156>
 800896c:	9207      	str	r2, [sp, #28]
 800896e:	e014      	b.n	800899a <_vfiprintf_r+0x156>
 8008970:	eba0 0308 	sub.w	r3, r0, r8
 8008974:	fa09 f303 	lsl.w	r3, r9, r3
 8008978:	4313      	orrs	r3, r2
 800897a:	9304      	str	r3, [sp, #16]
 800897c:	46a2      	mov	sl, r4
 800897e:	e7d2      	b.n	8008926 <_vfiprintf_r+0xe2>
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	1d19      	adds	r1, r3, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	9103      	str	r1, [sp, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfbb      	ittet	lt
 800898c:	425b      	neglt	r3, r3
 800898e:	f042 0202 	orrlt.w	r2, r2, #2
 8008992:	9307      	strge	r3, [sp, #28]
 8008994:	9307      	strlt	r3, [sp, #28]
 8008996:	bfb8      	it	lt
 8008998:	9204      	strlt	r2, [sp, #16]
 800899a:	7823      	ldrb	r3, [r4, #0]
 800899c:	2b2e      	cmp	r3, #46	; 0x2e
 800899e:	d10c      	bne.n	80089ba <_vfiprintf_r+0x176>
 80089a0:	7863      	ldrb	r3, [r4, #1]
 80089a2:	2b2a      	cmp	r3, #42	; 0x2a
 80089a4:	d135      	bne.n	8008a12 <_vfiprintf_r+0x1ce>
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	1d1a      	adds	r2, r3, #4
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	9203      	str	r2, [sp, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bfb8      	it	lt
 80089b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089b6:	3402      	adds	r4, #2
 80089b8:	9305      	str	r3, [sp, #20]
 80089ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008aa0 <_vfiprintf_r+0x25c>
 80089be:	7821      	ldrb	r1, [r4, #0]
 80089c0:	2203      	movs	r2, #3
 80089c2:	4650      	mov	r0, sl
 80089c4:	f7f7 fc6c 	bl	80002a0 <memchr>
 80089c8:	b140      	cbz	r0, 80089dc <_vfiprintf_r+0x198>
 80089ca:	2340      	movs	r3, #64	; 0x40
 80089cc:	eba0 000a 	sub.w	r0, r0, sl
 80089d0:	fa03 f000 	lsl.w	r0, r3, r0
 80089d4:	9b04      	ldr	r3, [sp, #16]
 80089d6:	4303      	orrs	r3, r0
 80089d8:	3401      	adds	r4, #1
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e0:	482c      	ldr	r0, [pc, #176]	; (8008a94 <_vfiprintf_r+0x250>)
 80089e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089e6:	2206      	movs	r2, #6
 80089e8:	f7f7 fc5a 	bl	80002a0 <memchr>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d03f      	beq.n	8008a70 <_vfiprintf_r+0x22c>
 80089f0:	4b29      	ldr	r3, [pc, #164]	; (8008a98 <_vfiprintf_r+0x254>)
 80089f2:	bb1b      	cbnz	r3, 8008a3c <_vfiprintf_r+0x1f8>
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	3307      	adds	r3, #7
 80089f8:	f023 0307 	bic.w	r3, r3, #7
 80089fc:	3308      	adds	r3, #8
 80089fe:	9303      	str	r3, [sp, #12]
 8008a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a02:	443b      	add	r3, r7
 8008a04:	9309      	str	r3, [sp, #36]	; 0x24
 8008a06:	e767      	b.n	80088d8 <_vfiprintf_r+0x94>
 8008a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	2001      	movs	r0, #1
 8008a10:	e7a5      	b.n	800895e <_vfiprintf_r+0x11a>
 8008a12:	2300      	movs	r3, #0
 8008a14:	3401      	adds	r4, #1
 8008a16:	9305      	str	r3, [sp, #20]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f04f 0c0a 	mov.w	ip, #10
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a24:	3a30      	subs	r2, #48	; 0x30
 8008a26:	2a09      	cmp	r2, #9
 8008a28:	d903      	bls.n	8008a32 <_vfiprintf_r+0x1ee>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0c5      	beq.n	80089ba <_vfiprintf_r+0x176>
 8008a2e:	9105      	str	r1, [sp, #20]
 8008a30:	e7c3      	b.n	80089ba <_vfiprintf_r+0x176>
 8008a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a36:	4604      	mov	r4, r0
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e7f0      	b.n	8008a1e <_vfiprintf_r+0x1da>
 8008a3c:	ab03      	add	r3, sp, #12
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	462a      	mov	r2, r5
 8008a42:	4b16      	ldr	r3, [pc, #88]	; (8008a9c <_vfiprintf_r+0x258>)
 8008a44:	a904      	add	r1, sp, #16
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7fd fe30 	bl	80066ac <_printf_float>
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	1c78      	adds	r0, r7, #1
 8008a50:	d1d6      	bne.n	8008a00 <_vfiprintf_r+0x1bc>
 8008a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a54:	07d9      	lsls	r1, r3, #31
 8008a56:	d405      	bmi.n	8008a64 <_vfiprintf_r+0x220>
 8008a58:	89ab      	ldrh	r3, [r5, #12]
 8008a5a:	059a      	lsls	r2, r3, #22
 8008a5c:	d402      	bmi.n	8008a64 <_vfiprintf_r+0x220>
 8008a5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a60:	f000 faaf 	bl	8008fc2 <__retarget_lock_release_recursive>
 8008a64:	89ab      	ldrh	r3, [r5, #12]
 8008a66:	065b      	lsls	r3, r3, #25
 8008a68:	f53f af12 	bmi.w	8008890 <_vfiprintf_r+0x4c>
 8008a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a6e:	e711      	b.n	8008894 <_vfiprintf_r+0x50>
 8008a70:	ab03      	add	r3, sp, #12
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	462a      	mov	r2, r5
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <_vfiprintf_r+0x258>)
 8008a78:	a904      	add	r1, sp, #16
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7fe f8bc 	bl	8006bf8 <_printf_i>
 8008a80:	e7e4      	b.n	8008a4c <_vfiprintf_r+0x208>
 8008a82:	bf00      	nop
 8008a84:	08009a64 	.word	0x08009a64
 8008a88:	08009a84 	.word	0x08009a84
 8008a8c:	08009a44 	.word	0x08009a44
 8008a90:	080098ec 	.word	0x080098ec
 8008a94:	080098f6 	.word	0x080098f6
 8008a98:	080066ad 	.word	0x080066ad
 8008a9c:	0800881f 	.word	0x0800881f
 8008aa0:	080098f2 	.word	0x080098f2

08008aa4 <__swbuf_r>:
 8008aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa6:	460e      	mov	r6, r1
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	4605      	mov	r5, r0
 8008aac:	b118      	cbz	r0, 8008ab6 <__swbuf_r+0x12>
 8008aae:	6983      	ldr	r3, [r0, #24]
 8008ab0:	b90b      	cbnz	r3, 8008ab6 <__swbuf_r+0x12>
 8008ab2:	f000 f9e7 	bl	8008e84 <__sinit>
 8008ab6:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <__swbuf_r+0x98>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	d12b      	bne.n	8008b14 <__swbuf_r+0x70>
 8008abc:	686c      	ldr	r4, [r5, #4]
 8008abe:	69a3      	ldr	r3, [r4, #24]
 8008ac0:	60a3      	str	r3, [r4, #8]
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	071a      	lsls	r2, r3, #28
 8008ac6:	d52f      	bpl.n	8008b28 <__swbuf_r+0x84>
 8008ac8:	6923      	ldr	r3, [r4, #16]
 8008aca:	b36b      	cbz	r3, 8008b28 <__swbuf_r+0x84>
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	6820      	ldr	r0, [r4, #0]
 8008ad0:	1ac0      	subs	r0, r0, r3
 8008ad2:	6963      	ldr	r3, [r4, #20]
 8008ad4:	b2f6      	uxtb	r6, r6
 8008ad6:	4283      	cmp	r3, r0
 8008ad8:	4637      	mov	r7, r6
 8008ada:	dc04      	bgt.n	8008ae6 <__swbuf_r+0x42>
 8008adc:	4621      	mov	r1, r4
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f000 f93c 	bl	8008d5c <_fflush_r>
 8008ae4:	bb30      	cbnz	r0, 8008b34 <__swbuf_r+0x90>
 8008ae6:	68a3      	ldr	r3, [r4, #8]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	60a3      	str	r3, [r4, #8]
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	6022      	str	r2, [r4, #0]
 8008af2:	701e      	strb	r6, [r3, #0]
 8008af4:	6963      	ldr	r3, [r4, #20]
 8008af6:	3001      	adds	r0, #1
 8008af8:	4283      	cmp	r3, r0
 8008afa:	d004      	beq.n	8008b06 <__swbuf_r+0x62>
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	07db      	lsls	r3, r3, #31
 8008b00:	d506      	bpl.n	8008b10 <__swbuf_r+0x6c>
 8008b02:	2e0a      	cmp	r6, #10
 8008b04:	d104      	bne.n	8008b10 <__swbuf_r+0x6c>
 8008b06:	4621      	mov	r1, r4
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f000 f927 	bl	8008d5c <_fflush_r>
 8008b0e:	b988      	cbnz	r0, 8008b34 <__swbuf_r+0x90>
 8008b10:	4638      	mov	r0, r7
 8008b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b14:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <__swbuf_r+0x9c>)
 8008b16:	429c      	cmp	r4, r3
 8008b18:	d101      	bne.n	8008b1e <__swbuf_r+0x7a>
 8008b1a:	68ac      	ldr	r4, [r5, #8]
 8008b1c:	e7cf      	b.n	8008abe <__swbuf_r+0x1a>
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <__swbuf_r+0xa0>)
 8008b20:	429c      	cmp	r4, r3
 8008b22:	bf08      	it	eq
 8008b24:	68ec      	ldreq	r4, [r5, #12]
 8008b26:	e7ca      	b.n	8008abe <__swbuf_r+0x1a>
 8008b28:	4621      	mov	r1, r4
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 f81a 	bl	8008b64 <__swsetup_r>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d0cb      	beq.n	8008acc <__swbuf_r+0x28>
 8008b34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008b38:	e7ea      	b.n	8008b10 <__swbuf_r+0x6c>
 8008b3a:	bf00      	nop
 8008b3c:	08009a64 	.word	0x08009a64
 8008b40:	08009a84 	.word	0x08009a84
 8008b44:	08009a44 	.word	0x08009a44

08008b48 <__ascii_wctomb>:
 8008b48:	b149      	cbz	r1, 8008b5e <__ascii_wctomb+0x16>
 8008b4a:	2aff      	cmp	r2, #255	; 0xff
 8008b4c:	bf85      	ittet	hi
 8008b4e:	238a      	movhi	r3, #138	; 0x8a
 8008b50:	6003      	strhi	r3, [r0, #0]
 8008b52:	700a      	strbls	r2, [r1, #0]
 8008b54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008b58:	bf98      	it	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	4770      	bx	lr
 8008b5e:	4608      	mov	r0, r1
 8008b60:	4770      	bx	lr
	...

08008b64 <__swsetup_r>:
 8008b64:	4b32      	ldr	r3, [pc, #200]	; (8008c30 <__swsetup_r+0xcc>)
 8008b66:	b570      	push	{r4, r5, r6, lr}
 8008b68:	681d      	ldr	r5, [r3, #0]
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	b125      	cbz	r5, 8008b7a <__swsetup_r+0x16>
 8008b70:	69ab      	ldr	r3, [r5, #24]
 8008b72:	b913      	cbnz	r3, 8008b7a <__swsetup_r+0x16>
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 f985 	bl	8008e84 <__sinit>
 8008b7a:	4b2e      	ldr	r3, [pc, #184]	; (8008c34 <__swsetup_r+0xd0>)
 8008b7c:	429c      	cmp	r4, r3
 8008b7e:	d10f      	bne.n	8008ba0 <__swsetup_r+0x3c>
 8008b80:	686c      	ldr	r4, [r5, #4]
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b88:	0719      	lsls	r1, r3, #28
 8008b8a:	d42c      	bmi.n	8008be6 <__swsetup_r+0x82>
 8008b8c:	06dd      	lsls	r5, r3, #27
 8008b8e:	d411      	bmi.n	8008bb4 <__swsetup_r+0x50>
 8008b90:	2309      	movs	r3, #9
 8008b92:	6033      	str	r3, [r6, #0]
 8008b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b9e:	e03e      	b.n	8008c1e <__swsetup_r+0xba>
 8008ba0:	4b25      	ldr	r3, [pc, #148]	; (8008c38 <__swsetup_r+0xd4>)
 8008ba2:	429c      	cmp	r4, r3
 8008ba4:	d101      	bne.n	8008baa <__swsetup_r+0x46>
 8008ba6:	68ac      	ldr	r4, [r5, #8]
 8008ba8:	e7eb      	b.n	8008b82 <__swsetup_r+0x1e>
 8008baa:	4b24      	ldr	r3, [pc, #144]	; (8008c3c <__swsetup_r+0xd8>)
 8008bac:	429c      	cmp	r4, r3
 8008bae:	bf08      	it	eq
 8008bb0:	68ec      	ldreq	r4, [r5, #12]
 8008bb2:	e7e6      	b.n	8008b82 <__swsetup_r+0x1e>
 8008bb4:	0758      	lsls	r0, r3, #29
 8008bb6:	d512      	bpl.n	8008bde <__swsetup_r+0x7a>
 8008bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bba:	b141      	cbz	r1, 8008bce <__swsetup_r+0x6a>
 8008bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bc0:	4299      	cmp	r1, r3
 8008bc2:	d002      	beq.n	8008bca <__swsetup_r+0x66>
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7ff fb6f 	bl	80082a8 <_free_r>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bd4:	81a3      	strh	r3, [r4, #12]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	6063      	str	r3, [r4, #4]
 8008bda:	6923      	ldr	r3, [r4, #16]
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	f043 0308 	orr.w	r3, r3, #8
 8008be4:	81a3      	strh	r3, [r4, #12]
 8008be6:	6923      	ldr	r3, [r4, #16]
 8008be8:	b94b      	cbnz	r3, 8008bfe <__swsetup_r+0x9a>
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf4:	d003      	beq.n	8008bfe <__swsetup_r+0x9a>
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f000 fa07 	bl	800900c <__smakebuf_r>
 8008bfe:	89a0      	ldrh	r0, [r4, #12]
 8008c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c04:	f010 0301 	ands.w	r3, r0, #1
 8008c08:	d00a      	beq.n	8008c20 <__swsetup_r+0xbc>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60a3      	str	r3, [r4, #8]
 8008c0e:	6963      	ldr	r3, [r4, #20]
 8008c10:	425b      	negs	r3, r3
 8008c12:	61a3      	str	r3, [r4, #24]
 8008c14:	6923      	ldr	r3, [r4, #16]
 8008c16:	b943      	cbnz	r3, 8008c2a <__swsetup_r+0xc6>
 8008c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c1c:	d1ba      	bne.n	8008b94 <__swsetup_r+0x30>
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	0781      	lsls	r1, r0, #30
 8008c22:	bf58      	it	pl
 8008c24:	6963      	ldrpl	r3, [r4, #20]
 8008c26:	60a3      	str	r3, [r4, #8]
 8008c28:	e7f4      	b.n	8008c14 <__swsetup_r+0xb0>
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	e7f7      	b.n	8008c1e <__swsetup_r+0xba>
 8008c2e:	bf00      	nop
 8008c30:	2000000c 	.word	0x2000000c
 8008c34:	08009a64 	.word	0x08009a64
 8008c38:	08009a84 	.word	0x08009a84
 8008c3c:	08009a44 	.word	0x08009a44

08008c40 <abort>:
 8008c40:	b508      	push	{r3, lr}
 8008c42:	2006      	movs	r0, #6
 8008c44:	f000 fa52 	bl	80090ec <raise>
 8008c48:	2001      	movs	r0, #1
 8008c4a:	f7fd f9e1 	bl	8006010 <_exit>
	...

08008c50 <__sflush_r>:
 8008c50:	898a      	ldrh	r2, [r1, #12]
 8008c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c56:	4605      	mov	r5, r0
 8008c58:	0710      	lsls	r0, r2, #28
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	d458      	bmi.n	8008d10 <__sflush_r+0xc0>
 8008c5e:	684b      	ldr	r3, [r1, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc05      	bgt.n	8008c70 <__sflush_r+0x20>
 8008c64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	dc02      	bgt.n	8008c70 <__sflush_r+0x20>
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c72:	2e00      	cmp	r6, #0
 8008c74:	d0f9      	beq.n	8008c6a <__sflush_r+0x1a>
 8008c76:	2300      	movs	r3, #0
 8008c78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c7c:	682f      	ldr	r7, [r5, #0]
 8008c7e:	602b      	str	r3, [r5, #0]
 8008c80:	d032      	beq.n	8008ce8 <__sflush_r+0x98>
 8008c82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	075a      	lsls	r2, r3, #29
 8008c88:	d505      	bpl.n	8008c96 <__sflush_r+0x46>
 8008c8a:	6863      	ldr	r3, [r4, #4]
 8008c8c:	1ac0      	subs	r0, r0, r3
 8008c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c90:	b10b      	cbz	r3, 8008c96 <__sflush_r+0x46>
 8008c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c94:	1ac0      	subs	r0, r0, r3
 8008c96:	2300      	movs	r3, #0
 8008c98:	4602      	mov	r2, r0
 8008c9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c9c:	6a21      	ldr	r1, [r4, #32]
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b0      	blx	r6
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	d106      	bne.n	8008cb6 <__sflush_r+0x66>
 8008ca8:	6829      	ldr	r1, [r5, #0]
 8008caa:	291d      	cmp	r1, #29
 8008cac:	d82c      	bhi.n	8008d08 <__sflush_r+0xb8>
 8008cae:	4a2a      	ldr	r2, [pc, #168]	; (8008d58 <__sflush_r+0x108>)
 8008cb0:	40ca      	lsrs	r2, r1
 8008cb2:	07d6      	lsls	r6, r2, #31
 8008cb4:	d528      	bpl.n	8008d08 <__sflush_r+0xb8>
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	6062      	str	r2, [r4, #4]
 8008cba:	04d9      	lsls	r1, r3, #19
 8008cbc:	6922      	ldr	r2, [r4, #16]
 8008cbe:	6022      	str	r2, [r4, #0]
 8008cc0:	d504      	bpl.n	8008ccc <__sflush_r+0x7c>
 8008cc2:	1c42      	adds	r2, r0, #1
 8008cc4:	d101      	bne.n	8008cca <__sflush_r+0x7a>
 8008cc6:	682b      	ldr	r3, [r5, #0]
 8008cc8:	b903      	cbnz	r3, 8008ccc <__sflush_r+0x7c>
 8008cca:	6560      	str	r0, [r4, #84]	; 0x54
 8008ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cce:	602f      	str	r7, [r5, #0]
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	d0ca      	beq.n	8008c6a <__sflush_r+0x1a>
 8008cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cd8:	4299      	cmp	r1, r3
 8008cda:	d002      	beq.n	8008ce2 <__sflush_r+0x92>
 8008cdc:	4628      	mov	r0, r5
 8008cde:	f7ff fae3 	bl	80082a8 <_free_r>
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	6360      	str	r0, [r4, #52]	; 0x34
 8008ce6:	e7c1      	b.n	8008c6c <__sflush_r+0x1c>
 8008ce8:	6a21      	ldr	r1, [r4, #32]
 8008cea:	2301      	movs	r3, #1
 8008cec:	4628      	mov	r0, r5
 8008cee:	47b0      	blx	r6
 8008cf0:	1c41      	adds	r1, r0, #1
 8008cf2:	d1c7      	bne.n	8008c84 <__sflush_r+0x34>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0c4      	beq.n	8008c84 <__sflush_r+0x34>
 8008cfa:	2b1d      	cmp	r3, #29
 8008cfc:	d001      	beq.n	8008d02 <__sflush_r+0xb2>
 8008cfe:	2b16      	cmp	r3, #22
 8008d00:	d101      	bne.n	8008d06 <__sflush_r+0xb6>
 8008d02:	602f      	str	r7, [r5, #0]
 8008d04:	e7b1      	b.n	8008c6a <__sflush_r+0x1a>
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	e7ad      	b.n	8008c6c <__sflush_r+0x1c>
 8008d10:	690f      	ldr	r7, [r1, #16]
 8008d12:	2f00      	cmp	r7, #0
 8008d14:	d0a9      	beq.n	8008c6a <__sflush_r+0x1a>
 8008d16:	0793      	lsls	r3, r2, #30
 8008d18:	680e      	ldr	r6, [r1, #0]
 8008d1a:	bf08      	it	eq
 8008d1c:	694b      	ldreq	r3, [r1, #20]
 8008d1e:	600f      	str	r7, [r1, #0]
 8008d20:	bf18      	it	ne
 8008d22:	2300      	movne	r3, #0
 8008d24:	eba6 0807 	sub.w	r8, r6, r7
 8008d28:	608b      	str	r3, [r1, #8]
 8008d2a:	f1b8 0f00 	cmp.w	r8, #0
 8008d2e:	dd9c      	ble.n	8008c6a <__sflush_r+0x1a>
 8008d30:	6a21      	ldr	r1, [r4, #32]
 8008d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d34:	4643      	mov	r3, r8
 8008d36:	463a      	mov	r2, r7
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b0      	blx	r6
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	dc06      	bgt.n	8008d4e <__sflush_r+0xfe>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d4c:	e78e      	b.n	8008c6c <__sflush_r+0x1c>
 8008d4e:	4407      	add	r7, r0
 8008d50:	eba8 0800 	sub.w	r8, r8, r0
 8008d54:	e7e9      	b.n	8008d2a <__sflush_r+0xda>
 8008d56:	bf00      	nop
 8008d58:	20400001 	.word	0x20400001

08008d5c <_fflush_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	690b      	ldr	r3, [r1, #16]
 8008d60:	4605      	mov	r5, r0
 8008d62:	460c      	mov	r4, r1
 8008d64:	b913      	cbnz	r3, 8008d6c <_fflush_r+0x10>
 8008d66:	2500      	movs	r5, #0
 8008d68:	4628      	mov	r0, r5
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	b118      	cbz	r0, 8008d76 <_fflush_r+0x1a>
 8008d6e:	6983      	ldr	r3, [r0, #24]
 8008d70:	b90b      	cbnz	r3, 8008d76 <_fflush_r+0x1a>
 8008d72:	f000 f887 	bl	8008e84 <__sinit>
 8008d76:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <_fflush_r+0x6c>)
 8008d78:	429c      	cmp	r4, r3
 8008d7a:	d11b      	bne.n	8008db4 <_fflush_r+0x58>
 8008d7c:	686c      	ldr	r4, [r5, #4]
 8008d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0ef      	beq.n	8008d66 <_fflush_r+0xa>
 8008d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d88:	07d0      	lsls	r0, r2, #31
 8008d8a:	d404      	bmi.n	8008d96 <_fflush_r+0x3a>
 8008d8c:	0599      	lsls	r1, r3, #22
 8008d8e:	d402      	bmi.n	8008d96 <_fflush_r+0x3a>
 8008d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d92:	f000 f915 	bl	8008fc0 <__retarget_lock_acquire_recursive>
 8008d96:	4628      	mov	r0, r5
 8008d98:	4621      	mov	r1, r4
 8008d9a:	f7ff ff59 	bl	8008c50 <__sflush_r>
 8008d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008da0:	07da      	lsls	r2, r3, #31
 8008da2:	4605      	mov	r5, r0
 8008da4:	d4e0      	bmi.n	8008d68 <_fflush_r+0xc>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	059b      	lsls	r3, r3, #22
 8008daa:	d4dd      	bmi.n	8008d68 <_fflush_r+0xc>
 8008dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dae:	f000 f908 	bl	8008fc2 <__retarget_lock_release_recursive>
 8008db2:	e7d9      	b.n	8008d68 <_fflush_r+0xc>
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <_fflush_r+0x70>)
 8008db6:	429c      	cmp	r4, r3
 8008db8:	d101      	bne.n	8008dbe <_fflush_r+0x62>
 8008dba:	68ac      	ldr	r4, [r5, #8]
 8008dbc:	e7df      	b.n	8008d7e <_fflush_r+0x22>
 8008dbe:	4b04      	ldr	r3, [pc, #16]	; (8008dd0 <_fflush_r+0x74>)
 8008dc0:	429c      	cmp	r4, r3
 8008dc2:	bf08      	it	eq
 8008dc4:	68ec      	ldreq	r4, [r5, #12]
 8008dc6:	e7da      	b.n	8008d7e <_fflush_r+0x22>
 8008dc8:	08009a64 	.word	0x08009a64
 8008dcc:	08009a84 	.word	0x08009a84
 8008dd0:	08009a44 	.word	0x08009a44

08008dd4 <std>:
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	4604      	mov	r4, r0
 8008dda:	e9c0 3300 	strd	r3, r3, [r0]
 8008dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008de2:	6083      	str	r3, [r0, #8]
 8008de4:	8181      	strh	r1, [r0, #12]
 8008de6:	6643      	str	r3, [r0, #100]	; 0x64
 8008de8:	81c2      	strh	r2, [r0, #14]
 8008dea:	6183      	str	r3, [r0, #24]
 8008dec:	4619      	mov	r1, r3
 8008dee:	2208      	movs	r2, #8
 8008df0:	305c      	adds	r0, #92	; 0x5c
 8008df2:	f7fd fbb3 	bl	800655c <memset>
 8008df6:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <std+0x38>)
 8008df8:	6263      	str	r3, [r4, #36]	; 0x24
 8008dfa:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <std+0x3c>)
 8008dfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dfe:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <std+0x40>)
 8008e00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e02:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <std+0x44>)
 8008e04:	6224      	str	r4, [r4, #32]
 8008e06:	6323      	str	r3, [r4, #48]	; 0x30
 8008e08:	bd10      	pop	{r4, pc}
 8008e0a:	bf00      	nop
 8008e0c:	08009125 	.word	0x08009125
 8008e10:	08009147 	.word	0x08009147
 8008e14:	0800917f 	.word	0x0800917f
 8008e18:	080091a3 	.word	0x080091a3

08008e1c <_cleanup_r>:
 8008e1c:	4901      	ldr	r1, [pc, #4]	; (8008e24 <_cleanup_r+0x8>)
 8008e1e:	f000 b8af 	b.w	8008f80 <_fwalk_reent>
 8008e22:	bf00      	nop
 8008e24:	08008d5d 	.word	0x08008d5d

08008e28 <__sfmoreglue>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	1e4a      	subs	r2, r1, #1
 8008e2c:	2568      	movs	r5, #104	; 0x68
 8008e2e:	4355      	muls	r5, r2
 8008e30:	460e      	mov	r6, r1
 8008e32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e36:	f7ff fa87 	bl	8008348 <_malloc_r>
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	b140      	cbz	r0, 8008e50 <__sfmoreglue+0x28>
 8008e3e:	2100      	movs	r1, #0
 8008e40:	e9c0 1600 	strd	r1, r6, [r0]
 8008e44:	300c      	adds	r0, #12
 8008e46:	60a0      	str	r0, [r4, #8]
 8008e48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e4c:	f7fd fb86 	bl	800655c <memset>
 8008e50:	4620      	mov	r0, r4
 8008e52:	bd70      	pop	{r4, r5, r6, pc}

08008e54 <__sfp_lock_acquire>:
 8008e54:	4801      	ldr	r0, [pc, #4]	; (8008e5c <__sfp_lock_acquire+0x8>)
 8008e56:	f000 b8b3 	b.w	8008fc0 <__retarget_lock_acquire_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	20013844 	.word	0x20013844

08008e60 <__sfp_lock_release>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__sfp_lock_release+0x8>)
 8008e62:	f000 b8ae 	b.w	8008fc2 <__retarget_lock_release_recursive>
 8008e66:	bf00      	nop
 8008e68:	20013844 	.word	0x20013844

08008e6c <__sinit_lock_acquire>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	; (8008e74 <__sinit_lock_acquire+0x8>)
 8008e6e:	f000 b8a7 	b.w	8008fc0 <__retarget_lock_acquire_recursive>
 8008e72:	bf00      	nop
 8008e74:	2001383f 	.word	0x2001383f

08008e78 <__sinit_lock_release>:
 8008e78:	4801      	ldr	r0, [pc, #4]	; (8008e80 <__sinit_lock_release+0x8>)
 8008e7a:	f000 b8a2 	b.w	8008fc2 <__retarget_lock_release_recursive>
 8008e7e:	bf00      	nop
 8008e80:	2001383f 	.word	0x2001383f

08008e84 <__sinit>:
 8008e84:	b510      	push	{r4, lr}
 8008e86:	4604      	mov	r4, r0
 8008e88:	f7ff fff0 	bl	8008e6c <__sinit_lock_acquire>
 8008e8c:	69a3      	ldr	r3, [r4, #24]
 8008e8e:	b11b      	cbz	r3, 8008e98 <__sinit+0x14>
 8008e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e94:	f7ff bff0 	b.w	8008e78 <__sinit_lock_release>
 8008e98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e9c:	6523      	str	r3, [r4, #80]	; 0x50
 8008e9e:	4b13      	ldr	r3, [pc, #76]	; (8008eec <__sinit+0x68>)
 8008ea0:	4a13      	ldr	r2, [pc, #76]	; (8008ef0 <__sinit+0x6c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	bf04      	itt	eq
 8008eaa:	2301      	moveq	r3, #1
 8008eac:	61a3      	streq	r3, [r4, #24]
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f000 f820 	bl	8008ef4 <__sfp>
 8008eb4:	6060      	str	r0, [r4, #4]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 f81c 	bl	8008ef4 <__sfp>
 8008ebc:	60a0      	str	r0, [r4, #8]
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f000 f818 	bl	8008ef4 <__sfp>
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	60e0      	str	r0, [r4, #12]
 8008ec8:	2104      	movs	r1, #4
 8008eca:	6860      	ldr	r0, [r4, #4]
 8008ecc:	f7ff ff82 	bl	8008dd4 <std>
 8008ed0:	68a0      	ldr	r0, [r4, #8]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	2109      	movs	r1, #9
 8008ed6:	f7ff ff7d 	bl	8008dd4 <std>
 8008eda:	68e0      	ldr	r0, [r4, #12]
 8008edc:	2202      	movs	r2, #2
 8008ede:	2112      	movs	r1, #18
 8008ee0:	f7ff ff78 	bl	8008dd4 <std>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	61a3      	str	r3, [r4, #24]
 8008ee8:	e7d2      	b.n	8008e90 <__sinit+0xc>
 8008eea:	bf00      	nop
 8008eec:	080096c0 	.word	0x080096c0
 8008ef0:	08008e1d 	.word	0x08008e1d

08008ef4 <__sfp>:
 8008ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	f7ff ffac 	bl	8008e54 <__sfp_lock_acquire>
 8008efc:	4b1e      	ldr	r3, [pc, #120]	; (8008f78 <__sfp+0x84>)
 8008efe:	681e      	ldr	r6, [r3, #0]
 8008f00:	69b3      	ldr	r3, [r6, #24]
 8008f02:	b913      	cbnz	r3, 8008f0a <__sfp+0x16>
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7ff ffbd 	bl	8008e84 <__sinit>
 8008f0a:	3648      	adds	r6, #72	; 0x48
 8008f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	d503      	bpl.n	8008f1c <__sfp+0x28>
 8008f14:	6833      	ldr	r3, [r6, #0]
 8008f16:	b30b      	cbz	r3, 8008f5c <__sfp+0x68>
 8008f18:	6836      	ldr	r6, [r6, #0]
 8008f1a:	e7f7      	b.n	8008f0c <__sfp+0x18>
 8008f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f20:	b9d5      	cbnz	r5, 8008f58 <__sfp+0x64>
 8008f22:	4b16      	ldr	r3, [pc, #88]	; (8008f7c <__sfp+0x88>)
 8008f24:	60e3      	str	r3, [r4, #12]
 8008f26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f2a:	6665      	str	r5, [r4, #100]	; 0x64
 8008f2c:	f000 f847 	bl	8008fbe <__retarget_lock_init_recursive>
 8008f30:	f7ff ff96 	bl	8008e60 <__sfp_lock_release>
 8008f34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f3c:	6025      	str	r5, [r4, #0]
 8008f3e:	61a5      	str	r5, [r4, #24]
 8008f40:	2208      	movs	r2, #8
 8008f42:	4629      	mov	r1, r5
 8008f44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f48:	f7fd fb08 	bl	800655c <memset>
 8008f4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f54:	4620      	mov	r0, r4
 8008f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f58:	3468      	adds	r4, #104	; 0x68
 8008f5a:	e7d9      	b.n	8008f10 <__sfp+0x1c>
 8008f5c:	2104      	movs	r1, #4
 8008f5e:	4638      	mov	r0, r7
 8008f60:	f7ff ff62 	bl	8008e28 <__sfmoreglue>
 8008f64:	4604      	mov	r4, r0
 8008f66:	6030      	str	r0, [r6, #0]
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d1d5      	bne.n	8008f18 <__sfp+0x24>
 8008f6c:	f7ff ff78 	bl	8008e60 <__sfp_lock_release>
 8008f70:	230c      	movs	r3, #12
 8008f72:	603b      	str	r3, [r7, #0]
 8008f74:	e7ee      	b.n	8008f54 <__sfp+0x60>
 8008f76:	bf00      	nop
 8008f78:	080096c0 	.word	0x080096c0
 8008f7c:	ffff0001 	.word	0xffff0001

08008f80 <_fwalk_reent>:
 8008f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f84:	4606      	mov	r6, r0
 8008f86:	4688      	mov	r8, r1
 8008f88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f8c:	2700      	movs	r7, #0
 8008f8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f92:	f1b9 0901 	subs.w	r9, r9, #1
 8008f96:	d505      	bpl.n	8008fa4 <_fwalk_reent+0x24>
 8008f98:	6824      	ldr	r4, [r4, #0]
 8008f9a:	2c00      	cmp	r4, #0
 8008f9c:	d1f7      	bne.n	8008f8e <_fwalk_reent+0xe>
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa4:	89ab      	ldrh	r3, [r5, #12]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d907      	bls.n	8008fba <_fwalk_reent+0x3a>
 8008faa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	d003      	beq.n	8008fba <_fwalk_reent+0x3a>
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	47c0      	blx	r8
 8008fb8:	4307      	orrs	r7, r0
 8008fba:	3568      	adds	r5, #104	; 0x68
 8008fbc:	e7e9      	b.n	8008f92 <_fwalk_reent+0x12>

08008fbe <__retarget_lock_init_recursive>:
 8008fbe:	4770      	bx	lr

08008fc0 <__retarget_lock_acquire_recursive>:
 8008fc0:	4770      	bx	lr

08008fc2 <__retarget_lock_release_recursive>:
 8008fc2:	4770      	bx	lr

08008fc4 <__swhatbuf_r>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	460e      	mov	r6, r1
 8008fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	b096      	sub	sp, #88	; 0x58
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	461d      	mov	r5, r3
 8008fd4:	da07      	bge.n	8008fe6 <__swhatbuf_r+0x22>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	89b3      	ldrh	r3, [r6, #12]
 8008fdc:	061a      	lsls	r2, r3, #24
 8008fde:	d410      	bmi.n	8009002 <__swhatbuf_r+0x3e>
 8008fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe4:	e00e      	b.n	8009004 <__swhatbuf_r+0x40>
 8008fe6:	466a      	mov	r2, sp
 8008fe8:	f000 f8f0 	bl	80091cc <_fstat_r>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	dbf2      	blt.n	8008fd6 <__swhatbuf_r+0x12>
 8008ff0:	9a01      	ldr	r2, [sp, #4]
 8008ff2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ff6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ffa:	425a      	negs	r2, r3
 8008ffc:	415a      	adcs	r2, r3
 8008ffe:	602a      	str	r2, [r5, #0]
 8009000:	e7ee      	b.n	8008fe0 <__swhatbuf_r+0x1c>
 8009002:	2340      	movs	r3, #64	; 0x40
 8009004:	2000      	movs	r0, #0
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	b016      	add	sp, #88	; 0x58
 800900a:	bd70      	pop	{r4, r5, r6, pc}

0800900c <__smakebuf_r>:
 800900c:	898b      	ldrh	r3, [r1, #12]
 800900e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009010:	079d      	lsls	r5, r3, #30
 8009012:	4606      	mov	r6, r0
 8009014:	460c      	mov	r4, r1
 8009016:	d507      	bpl.n	8009028 <__smakebuf_r+0x1c>
 8009018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	6123      	str	r3, [r4, #16]
 8009020:	2301      	movs	r3, #1
 8009022:	6163      	str	r3, [r4, #20]
 8009024:	b002      	add	sp, #8
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	ab01      	add	r3, sp, #4
 800902a:	466a      	mov	r2, sp
 800902c:	f7ff ffca 	bl	8008fc4 <__swhatbuf_r>
 8009030:	9900      	ldr	r1, [sp, #0]
 8009032:	4605      	mov	r5, r0
 8009034:	4630      	mov	r0, r6
 8009036:	f7ff f987 	bl	8008348 <_malloc_r>
 800903a:	b948      	cbnz	r0, 8009050 <__smakebuf_r+0x44>
 800903c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009040:	059a      	lsls	r2, r3, #22
 8009042:	d4ef      	bmi.n	8009024 <__smakebuf_r+0x18>
 8009044:	f023 0303 	bic.w	r3, r3, #3
 8009048:	f043 0302 	orr.w	r3, r3, #2
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	e7e3      	b.n	8009018 <__smakebuf_r+0xc>
 8009050:	4b0d      	ldr	r3, [pc, #52]	; (8009088 <__smakebuf_r+0x7c>)
 8009052:	62b3      	str	r3, [r6, #40]	; 0x28
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	6020      	str	r0, [r4, #0]
 8009058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	9b00      	ldr	r3, [sp, #0]
 8009060:	6163      	str	r3, [r4, #20]
 8009062:	9b01      	ldr	r3, [sp, #4]
 8009064:	6120      	str	r0, [r4, #16]
 8009066:	b15b      	cbz	r3, 8009080 <__smakebuf_r+0x74>
 8009068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800906c:	4630      	mov	r0, r6
 800906e:	f000 f8bf 	bl	80091f0 <_isatty_r>
 8009072:	b128      	cbz	r0, 8009080 <__smakebuf_r+0x74>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	f023 0303 	bic.w	r3, r3, #3
 800907a:	f043 0301 	orr.w	r3, r3, #1
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	89a0      	ldrh	r0, [r4, #12]
 8009082:	4305      	orrs	r5, r0
 8009084:	81a5      	strh	r5, [r4, #12]
 8009086:	e7cd      	b.n	8009024 <__smakebuf_r+0x18>
 8009088:	08008e1d 	.word	0x08008e1d

0800908c <_malloc_usable_size_r>:
 800908c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009090:	1f18      	subs	r0, r3, #4
 8009092:	2b00      	cmp	r3, #0
 8009094:	bfbc      	itt	lt
 8009096:	580b      	ldrlt	r3, [r1, r0]
 8009098:	18c0      	addlt	r0, r0, r3
 800909a:	4770      	bx	lr

0800909c <_raise_r>:
 800909c:	291f      	cmp	r1, #31
 800909e:	b538      	push	{r3, r4, r5, lr}
 80090a0:	4604      	mov	r4, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	d904      	bls.n	80090b0 <_raise_r+0x14>
 80090a6:	2316      	movs	r3, #22
 80090a8:	6003      	str	r3, [r0, #0]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80090b2:	b112      	cbz	r2, 80090ba <_raise_r+0x1e>
 80090b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090b8:	b94b      	cbnz	r3, 80090ce <_raise_r+0x32>
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 f830 	bl	8009120 <_getpid_r>
 80090c0:	462a      	mov	r2, r5
 80090c2:	4601      	mov	r1, r0
 80090c4:	4620      	mov	r0, r4
 80090c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ca:	f000 b817 	b.w	80090fc <_kill_r>
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d00a      	beq.n	80090e8 <_raise_r+0x4c>
 80090d2:	1c59      	adds	r1, r3, #1
 80090d4:	d103      	bne.n	80090de <_raise_r+0x42>
 80090d6:	2316      	movs	r3, #22
 80090d8:	6003      	str	r3, [r0, #0]
 80090da:	2001      	movs	r0, #1
 80090dc:	e7e7      	b.n	80090ae <_raise_r+0x12>
 80090de:	2400      	movs	r4, #0
 80090e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090e4:	4628      	mov	r0, r5
 80090e6:	4798      	blx	r3
 80090e8:	2000      	movs	r0, #0
 80090ea:	e7e0      	b.n	80090ae <_raise_r+0x12>

080090ec <raise>:
 80090ec:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <raise+0xc>)
 80090ee:	4601      	mov	r1, r0
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	f7ff bfd3 	b.w	800909c <_raise_r>
 80090f6:	bf00      	nop
 80090f8:	2000000c 	.word	0x2000000c

080090fc <_kill_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d07      	ldr	r5, [pc, #28]	; (800911c <_kill_r+0x20>)
 8009100:	2300      	movs	r3, #0
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	4611      	mov	r1, r2
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	f7fc ff71 	bl	8005ff0 <_kill>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	d102      	bne.n	8009118 <_kill_r+0x1c>
 8009112:	682b      	ldr	r3, [r5, #0]
 8009114:	b103      	cbz	r3, 8009118 <_kill_r+0x1c>
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	bf00      	nop
 800911c:	20013838 	.word	0x20013838

08009120 <_getpid_r>:
 8009120:	f7fc bf5e 	b.w	8005fe0 <_getpid>

08009124 <__sread>:
 8009124:	b510      	push	{r4, lr}
 8009126:	460c      	mov	r4, r1
 8009128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912c:	f000 f882 	bl	8009234 <_read_r>
 8009130:	2800      	cmp	r0, #0
 8009132:	bfab      	itete	ge
 8009134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009136:	89a3      	ldrhlt	r3, [r4, #12]
 8009138:	181b      	addge	r3, r3, r0
 800913a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800913e:	bfac      	ite	ge
 8009140:	6563      	strge	r3, [r4, #84]	; 0x54
 8009142:	81a3      	strhlt	r3, [r4, #12]
 8009144:	bd10      	pop	{r4, pc}

08009146 <__swrite>:
 8009146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914a:	461f      	mov	r7, r3
 800914c:	898b      	ldrh	r3, [r1, #12]
 800914e:	05db      	lsls	r3, r3, #23
 8009150:	4605      	mov	r5, r0
 8009152:	460c      	mov	r4, r1
 8009154:	4616      	mov	r6, r2
 8009156:	d505      	bpl.n	8009164 <__swrite+0x1e>
 8009158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800915c:	2302      	movs	r3, #2
 800915e:	2200      	movs	r2, #0
 8009160:	f000 f856 	bl	8009210 <_lseek_r>
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800916a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800916e:	81a3      	strh	r3, [r4, #12]
 8009170:	4632      	mov	r2, r6
 8009172:	463b      	mov	r3, r7
 8009174:	4628      	mov	r0, r5
 8009176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800917a:	f7fc be79 	b.w	8005e70 <_write_r>

0800917e <__sseek>:
 800917e:	b510      	push	{r4, lr}
 8009180:	460c      	mov	r4, r1
 8009182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009186:	f000 f843 	bl	8009210 <_lseek_r>
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	bf15      	itete	ne
 8009190:	6560      	strne	r0, [r4, #84]	; 0x54
 8009192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800919a:	81a3      	strheq	r3, [r4, #12]
 800919c:	bf18      	it	ne
 800919e:	81a3      	strhne	r3, [r4, #12]
 80091a0:	bd10      	pop	{r4, pc}

080091a2 <__sclose>:
 80091a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a6:	f000 b801 	b.w	80091ac <_close_r>
	...

080091ac <_close_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d06      	ldr	r5, [pc, #24]	; (80091c8 <_close_r+0x1c>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	602b      	str	r3, [r5, #0]
 80091b8:	f7fc ff51 	bl	800605e <_close>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_close_r+0x1a>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_close_r+0x1a>
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	20013838 	.word	0x20013838

080091cc <_fstat_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d07      	ldr	r5, [pc, #28]	; (80091ec <_fstat_r+0x20>)
 80091d0:	2300      	movs	r3, #0
 80091d2:	4604      	mov	r4, r0
 80091d4:	4608      	mov	r0, r1
 80091d6:	4611      	mov	r1, r2
 80091d8:	602b      	str	r3, [r5, #0]
 80091da:	f7fc ff4c 	bl	8006076 <_fstat>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	d102      	bne.n	80091e8 <_fstat_r+0x1c>
 80091e2:	682b      	ldr	r3, [r5, #0]
 80091e4:	b103      	cbz	r3, 80091e8 <_fstat_r+0x1c>
 80091e6:	6023      	str	r3, [r4, #0]
 80091e8:	bd38      	pop	{r3, r4, r5, pc}
 80091ea:	bf00      	nop
 80091ec:	20013838 	.word	0x20013838

080091f0 <_isatty_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d06      	ldr	r5, [pc, #24]	; (800920c <_isatty_r+0x1c>)
 80091f4:	2300      	movs	r3, #0
 80091f6:	4604      	mov	r4, r0
 80091f8:	4608      	mov	r0, r1
 80091fa:	602b      	str	r3, [r5, #0]
 80091fc:	f7fc ff4b 	bl	8006096 <_isatty>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_isatty_r+0x1a>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_isatty_r+0x1a>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	20013838 	.word	0x20013838

08009210 <_lseek_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d07      	ldr	r5, [pc, #28]	; (8009230 <_lseek_r+0x20>)
 8009214:	4604      	mov	r4, r0
 8009216:	4608      	mov	r0, r1
 8009218:	4611      	mov	r1, r2
 800921a:	2200      	movs	r2, #0
 800921c:	602a      	str	r2, [r5, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	f7fc ff44 	bl	80060ac <_lseek>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d102      	bne.n	800922e <_lseek_r+0x1e>
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	b103      	cbz	r3, 800922e <_lseek_r+0x1e>
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	20013838 	.word	0x20013838

08009234 <_read_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d07      	ldr	r5, [pc, #28]	; (8009254 <_read_r+0x20>)
 8009238:	4604      	mov	r4, r0
 800923a:	4608      	mov	r0, r1
 800923c:	4611      	mov	r1, r2
 800923e:	2200      	movs	r2, #0
 8009240:	602a      	str	r2, [r5, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	f7fc feee 	bl	8006024 <_read>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_read_r+0x1e>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_read_r+0x1e>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	20013838 	.word	0x20013838

08009258 <_init>:
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	bf00      	nop
 800925c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800925e:	bc08      	pop	{r3}
 8009260:	469e      	mov	lr, r3
 8009262:	4770      	bx	lr

08009264 <_fini>:
 8009264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009266:	bf00      	nop
 8009268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926a:	bc08      	pop	{r3}
 800926c:	469e      	mov	lr, r3
 800926e:	4770      	bx	lr
