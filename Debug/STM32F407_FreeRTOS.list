
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085ec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  080087a0  080087a0  000187a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fe4  08008fe4  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  08008fe4  08008fe4  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fe4  08008fe4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe4  08008fe4  00018fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe8  08008fe8  00018fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08008fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013054  20000204  080091f0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013258  080091f0  00023258  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4e0  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000278b  00000000  00000000  0002f712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00031ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  00032948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051df  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b382  00000000  00000000  000384a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00017216  00000000  00000000  00043829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0005aa3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b94  00000000  00000000  0005aa94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008784 	.word	0x08008784

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	08008784 	.word	0x08008784

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <ADE_Init>:
void ADE_SPI_Init();
void ZeroX_Init();
void SAG_Init();
void IRQ_Init();

void ADE_Init(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	ADE_SPI_Init();
 8000bce:	f000 f895 	bl	8000cfc <ADE_SPI_Init>

//	ZeroX_Init();
//	SAG_Init();
	IRQ_Init();
 8000bd2:	f000 f905 	bl	8000de0 <IRQ_Init>

	//Reset
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2109      	movs	r1, #9
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <ADE_Init+0x58>)
 8000bdc:	f003 fc6c 	bl	80044b8 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	e002      	b.n	8000bec <ADE_Init+0x24>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3301      	adds	r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	ddf7      	ble.n	8000be6 <ADE_Init+0x1e>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2109      	movs	r1, #9
 8000bfa:	4809      	ldr	r0, [pc, #36]	; (8000c20 <ADE_Init+0x58>)
 8000bfc:	f003 fc5c 	bl	80044b8 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000c00:	2300      	movs	r3, #0
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	e002      	b.n	8000c0c <ADE_Init+0x44>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000c12:	4293      	cmp	r3, r2
 8000c14:	ddf7      	ble.n	8000c06 <ADE_Init+0x3e>

//	CYCEND, PKV, PKI
//	ADE_WriteData(IRQEN, 0x0344, 2);
//	ADE_WriteData(VPKLVL, 0x29, 1);
//	ADE_WriteData(IPKLVL, 0x2D, 1);
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40020c00 	.word	0x40020c00

08000c24 <ADE_ReadData>:

uint32_t ADE_ReadData(uint8_t address, uint32_t bytes_to_read) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
	uint32_t data = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
	uint8_t dummy_write = 0xff;
 8000c34:	23ff      	movs	r3, #255	; 0xff
 8000c36:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4813      	ldr	r0, [pc, #76]	; (8000c88 <ADE_ReadData+0x64>)
 8000c3c:	f004 f8e0 	bl	8004e00 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4810      	ldr	r0, [pc, #64]	; (8000c88 <ADE_ReadData+0x64>)
 8000c46:	f004 f8b0 	bl	8004daa <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	e00e      	b.n	8000c6e <ADE_ReadData+0x4a>
		data <<= 8;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	617b      	str	r3, [r7, #20]
		data |= SPI_Transfer(ADE_SPI_HOST, dummy_write);
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480b      	ldr	r0, [pc, #44]	; (8000c88 <ADE_ReadData+0x64>)
 8000c5c:	f004 f8a5 	bl	8004daa <SPI_Transfer>
 8000c60:	4602      	mov	r2, r0
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d3ec      	bcc.n	8000c50 <ADE_ReadData+0x2c>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE); //SS pin pull to high
 8000c76:	2100      	movs	r1, #0
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <ADE_ReadData+0x64>)
 8000c7a:	f004 f8c1 	bl	8004e00 <SPI_PeripheralControl>
	return data;
 8000c7e:	697b      	ldr	r3, [r7, #20]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40003800 	.word	0x40003800

08000c8c <ADE_WriteData>:

void ADE_WriteData(uint8_t address, uint32_t write_buffer, uint32_t bytes_to_write) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	74fb      	strb	r3, [r7, #19]
	address |= 0x80;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca4:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <ADE_WriteData+0x6c>)
 8000caa:	f004 f8a9 	bl	8004e00 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <ADE_WriteData+0x6c>)
 8000cb4:	f004 f879 	bl	8004daa <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e010      	b.n	8000ce0 <ADE_WriteData+0x54>
		data = (uint8_t)(write_buffer >> 8*(bytes_to_write - i - 1));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	fa22 f303 	lsr.w	r3, r2, r3
 8000cce:	74fb      	strb	r3, [r7, #19]
		SPI_Transfer(ADE_SPI_HOST, data);
 8000cd0:	7cfb      	ldrb	r3, [r7, #19]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <ADE_WriteData+0x6c>)
 8000cd6:	f004 f868 	bl	8004daa <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++) {
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d3ea      	bcc.n	8000cbe <ADE_WriteData+0x32>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE);; //SS pin pull to high
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <ADE_WriteData+0x6c>)
 8000cec:	f004 f888 	bl	8004e00 <SPI_PeripheralControl>
}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40003800 	.word	0x40003800

08000cfc <ADE_SPI_Init>:
			mode &= ~(1 << bit_flag);
		ADE_WriteData(MODE, mode, 2);
	}
}

void ADE_SPI_Init() {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	; 0x30
 8000d00:	af00      	add	r7, sp, #0
	 * PB13 -> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT function mode : 5
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000d02:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <ADE_SPI_Init+0xd8>)
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000d24:	230d      	movs	r3, #13
 8000d26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 fa10 	bl	8004154 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000d34:	230f      	movs	r3, #15
 8000d36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fa08 	bl	8004154 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000d44:	230e      	movs	r3, #14
 8000d46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 fa00 	bl	8004154 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000d54:	230c      	movs	r3, #12
 8000d56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 f9f8 	bl	8004154 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <ADE_SPI_Init+0xdc>)
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000d68:	2309      	movs	r3, #9
 8000d6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(&SPIPins);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 f9e8 	bl	8004154 <GPIO_Init>

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = ADE_SPI_HOST;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000d86:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;	// clock 1MHz
 8000d90:	2303      	movs	r3, #3
 8000d92:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000d94:	2300      	movs	r3, #0
 8000d96:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;				// CPOL 0
 8000d98:	2300      	movs	r3, #0
 8000d9a:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;				// CPHA 1
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 					// Hardware slave management enabled for NSS pin
 8000da0:	2300      	movs	r3, #0
 8000da2:	73bb      	strb	r3, [r7, #14]

	ADE_SPI_HOST->CR1 &= ~(1 << SPI_CR1_SPE);
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dae:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 ff9e 	bl	8004cf4 <SPI_Init>
	ADE_SPI_HOST->CR1 |= (1 << SPI_CR1_SPE);
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc2:	6013      	str	r3, [r2, #0]

	SPI_SSOEConfig(ADE_SPI_HOST, ENABLE);
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <ADE_SPI_Init+0xe0>)
 8000dc8:	f004 f836 	bl	8004e38 <SPI_SSOEConfig>
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	40020c00 	.word	0x40020c00
 8000ddc:	40003800 	.word	0x40003800

08000de0 <IRQ_Init>:
//	IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI10);
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
}

void IRQ_Init() {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
//	Input pin trigger as falling edge
	GPIO_Handle_t GpioIRQ;
	GpioIRQ.pGPIOx = PORT_IRQ_IT;
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <IRQ_Init+0x3c>)
 8000de8:	607b      	str	r3, [r7, #4]
	GpioIRQ.GPIO_PinConfig.GPIO_PinNumber = PIN_IRQ_IT;
 8000dea:	230f      	movs	r3, #15
 8000dec:	723b      	strb	r3, [r7, #8]
	GpioIRQ.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000dee:	2304      	movs	r3, #4
 8000df0:	727b      	strb	r3, [r7, #9]
	GpioIRQ.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000df2:	2302      	movs	r3, #2
 8000df4:	72bb      	strb	r3, [r7, #10]
	GpioIRQ.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000df6:	2301      	movs	r3, #1
 8000df8:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioIRQ);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 f9a9 	bl	8004154 <GPIO_Init>

//	IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI15);
 8000e02:	210f      	movs	r1, #15
 8000e04:	2028      	movs	r0, #40	; 0x28
 8000e06:	f003 fc03 	bl	8004610 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2028      	movs	r0, #40	; 0x28
 8000e0e:	f003 fb79 	bl	8004504 <GPIO_IRQInterruptConfig>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <ds1307_init>:
static uint8_t bcd_to_binary(uint8_t value);
static uint8_t binary_to_bcd(uint8_t value);

I2C_Handle_t g_ds1307I2cHandle;

void ds1307_init(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	ds1307_i2c_pin_config();
 8000e24:	f000 f854 	bl	8000ed0 <ds1307_i2c_pin_config>
	ds1307_i2c_config();
 8000e28:	f000 f890 	bl	8000f4c <ds1307_i2c_config>
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4802      	ldr	r0, [pc, #8]	; (8000e38 <ds1307_init+0x18>)
 8000e30:	f003 fc9b 	bl	800476a <I2C_PeripheralControl>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40005c00 	.word	0x40005c00

08000e3c <ds1307_get_current_time>:
	ds1307_write(binary_to_bcd(rtc_date->day),DS1307_ADDR_DAY);

}

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 f897 	bl	8000f78 <ds1307_read>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e54:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f8ab 	bl	8000fb4 <bcd_to_binary>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 f886 	bl	8000f78 <ds1307_read>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f8a0 	bl	8000fb4 <bcd_to_binary>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f000 f87b 	bl	8000f78 <ds1307_read>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)){
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00f      	beq.n	8000eb0 <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e002      	b.n	8000eb6 <ds1307_get_current_time+0x7a>
	}else{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f87b 	bl	8000fb4 <bcd_to_binary>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	709a      	strb	r2, [r3, #2]
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <ds1307_i2c_pin_config>:
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));

}

static void ds1307_i2c_pin_config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	220c      	movs	r2, #12
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f004 fdc2 	bl	8005a68 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 fdbc 	bl	8005a68 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT_SDA;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <ds1307_i2c_pin_config+0x74>)
 8000ef2:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000efc:	2309      	movs	r3, #9
 8000efe:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000f00:	2301      	movs	r3, #1
 8000f02:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000f04:	2301      	movs	r3, #1
 8000f06:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 f91f 	bl	8004154 <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT_SCL;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <ds1307_i2c_pin_config+0x78>)
 8000f18:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000f22:	2308      	movs	r3, #8
 8000f24:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000f26:	2301      	movs	r3, #1
 8000f28:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8000f32:	463b      	mov	r3, r7
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 f90d 	bl	8004154 <GPIO_Init>

}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020000 	.word	0x40020000

08000f4c <ds1307_i2c_config>:


static void ds1307_i2c_config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <ds1307_i2c_config+0x20>)
 8000f52:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <ds1307_i2c_config+0x24>)
 8000f54:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <ds1307_i2c_config+0x20>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <ds1307_i2c_config+0x20>)
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <ds1307_i2c_config+0x28>)
 8000f60:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 8000f62:	4802      	ldr	r0, [pc, #8]	; (8000f6c <ds1307_i2c_config+0x20>)
 8000f64:	f003 fc56 	bl	8004814 <I2C_Init>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20012fa4 	.word	0x20012fa4
 8000f70:	40005c00 	.word	0x40005c00
 8000f74:	000186a0 	.word	0x000186a0

08000f78 <ds1307_read>:
}



static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000f82:	1df9      	adds	r1, r7, #7
 8000f84:	2300      	movs	r3, #0
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2368      	movs	r3, #104	; 0x68
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <ds1307_read+0x38>)
 8000f8e:	f003 fd07 	bl	80049a0 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000f92:	f107 010f 	add.w	r1, r7, #15
 8000f96:	2300      	movs	r3, #0
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2368      	movs	r3, #104	; 0x68
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <ds1307_read+0x38>)
 8000fa0:	f003 fd61 	bl	8004a66 <I2C_MasterReceiveData>

    return data;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20012fa4 	.word	0x20012fa4

08000fb4 <bcd_to_binary>:

	return bcd;
}

static uint8_t bcd_to_binary(uint8_t value)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 030f 	and.w	r3, r3, #15
 8000fd4:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	4413      	add	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <KEYPAD_Init>:

/* Private variables */
KEYPAD_Type_t KEYPAD_INT_KeypadType;
static KEYPAD_Button_t KeypadStatus = KEYPAD_NOPRESSED;

void KEYPAD_Init(KEYPAD_Type_t type) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	KEYPAD_INT_KeypadType = type;
 8000ff6:	4a32      	ldr	r2, [pc, #200]	; (80010c0 <KEYPAD_Init+0xd4>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	7013      	strb	r3, [r2, #0]
	GPIO_Handle_t GpioR_Out, GpioC_In;

	/* Rows are output */
	/* Row 1 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_1_PORT;
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <KEYPAD_Init+0xd8>)
 8000ffe:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_1_PIN;
 8001000:	230b      	movs	r3, #11
 8001002:	763b      	strb	r3, [r7, #24]
	GpioR_Out.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001004:	2301      	movs	r3, #1
 8001006:	767b      	strb	r3, [r7, #25]
	GpioR_Out.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8001008:	2301      	movs	r3, #1
 800100a:	76bb      	strb	r3, [r7, #26]
	GpioR_Out.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800100c:	2300      	movs	r3, #0
 800100e:	773b      	strb	r3, [r7, #28]
	GpioR_Out.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001010:	2300      	movs	r3, #0
 8001012:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GpioR_Out);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4618      	mov	r0, r3
 800101a:	f003 f89b 	bl	8004154 <GPIO_Init>

	/* Row 2 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_2_PORT;
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <KEYPAD_Init+0xdc>)
 8001020:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_2_PIN;
 8001022:	2300      	movs	r3, #0
 8001024:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4618      	mov	r0, r3
 800102c:	f003 f892 	bl	8004154 <GPIO_Init>

	/* Row 3 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_3_PORT;
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <KEYPAD_Init+0xdc>)
 8001032:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_3_PIN;
 8001034:	2302      	movs	r3, #2
 8001036:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4618      	mov	r0, r3
 800103e:	f003 f889 	bl	8004154 <GPIO_Init>

	/* Row 4 */
	if (type == KEYPAD_Type_Large) {
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d108      	bne.n	800105a <KEYPAD_Init+0x6e>
		GpioR_Out.pGPIOx = KEYPAD_ROW_4_PORT;
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <KEYPAD_Init+0xdc>)
 800104a:	617b      	str	r3, [r7, #20]
		GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_4_PIN;
 800104c:	2304      	movs	r3, #4
 800104e:	763b      	strb	r3, [r7, #24]
		GPIO_Init(&GpioR_Out);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4618      	mov	r0, r3
 8001056:	f003 f87d 	bl	8004154 <GPIO_Init>
	}


	/* Columns are inputs */
	/* Column 1 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_1_PORT;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <KEYPAD_Init+0xdc>)
 800105c:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_1_PIN;
 800105e:	2306      	movs	r3, #6
 8001060:	733b      	strb	r3, [r7, #12]
	GpioC_In.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8001062:	2300      	movs	r3, #0
 8001064:	737b      	strb	r3, [r7, #13]
	GpioC_In.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8001066:	2301      	movs	r3, #1
 8001068:	73bb      	strb	r3, [r7, #14]
	GpioC_In.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800106a:	2300      	movs	r3, #0
 800106c:	743b      	strb	r3, [r7, #16]
	GpioC_In.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&GpioC_In);
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f003 f86c 	bl	8004154 <GPIO_Init>

	/* Column 2 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_2_PORT;
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <KEYPAD_Init+0xe0>)
 800107e:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 8001080:	2303      	movs	r3, #3
 8001082:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4618      	mov	r0, r3
 800108a:	f003 f863 	bl	8004154 <GPIO_Init>

	/* Column 3 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_3_PORT;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <KEYPAD_Init+0xe0>)
 8001090:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_3_PIN;
 8001092:	2305      	movs	r3, #5
 8001094:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	4618      	mov	r0, r3
 800109c:	f003 f85a 	bl	8004154 <GPIO_Init>

	/* Column 4 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_4_PORT;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <KEYPAD_Init+0xe0>)
 80010a2:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_4_PIN;
 80010a4:	2307      	movs	r3, #7
 80010a6:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 f851 	bl	8004154 <GPIO_Init>

	/* All rows high */
	KEYPAD_INT_SetRow(0);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f818 	bl	80010e8 <KEYPAD_INT_SetRow>
}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20012fcc 	.word	0x20012fcc
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40020400 	.word	0x40020400

080010d0 <KEYPAD_Read>:

KEYPAD_Button_t KEYPAD_Read(void) {
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	return KeypadStatus;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <KEYPAD_Read+0x14>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000010 	.word	0x20000010

080010e8 <KEYPAD_INT_SetRow>:

/* Private */
void KEYPAD_INT_SetRow(uint8_t row) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_ROW_1_HIGH;
 80010f2:	2201      	movs	r2, #1
 80010f4:	210b      	movs	r1, #11
 80010f6:	481d      	ldr	r0, [pc, #116]	; (800116c <KEYPAD_INT_SetRow+0x84>)
 80010f8:	f003 f9de 	bl	80044b8 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_2_HIGH;
 80010fc:	2201      	movs	r2, #1
 80010fe:	2100      	movs	r1, #0
 8001100:	481b      	ldr	r0, [pc, #108]	; (8001170 <KEYPAD_INT_SetRow+0x88>)
 8001102:	f003 f9d9 	bl	80044b8 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_3_HIGH;
 8001106:	2201      	movs	r2, #1
 8001108:	2102      	movs	r1, #2
 800110a:	4819      	ldr	r0, [pc, #100]	; (8001170 <KEYPAD_INT_SetRow+0x88>)
 800110c:	f003 f9d4 	bl	80044b8 <GPIO_WriteToOutputPin>
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large)
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <KEYPAD_INT_SetRow+0x8c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d104      	bne.n	8001122 <KEYPAD_INT_SetRow+0x3a>
		KEYPAD_ROW_4_HIGH;
 8001118:	2201      	movs	r2, #1
 800111a:	2104      	movs	r1, #4
 800111c:	4814      	ldr	r0, [pc, #80]	; (8001170 <KEYPAD_INT_SetRow+0x88>)
 800111e:	f003 f9cb 	bl	80044b8 <GPIO_WriteToOutputPin>

	/* Set row low */
	if (row == 1)
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d104      	bne.n	8001132 <KEYPAD_INT_SetRow+0x4a>
		KEYPAD_ROW_1_LOW;
 8001128:	2200      	movs	r2, #0
 800112a:	210b      	movs	r1, #11
 800112c:	480f      	ldr	r0, [pc, #60]	; (800116c <KEYPAD_INT_SetRow+0x84>)
 800112e:	f003 f9c3 	bl	80044b8 <GPIO_WriteToOutputPin>
	if (row == 2)
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d104      	bne.n	8001142 <KEYPAD_INT_SetRow+0x5a>
		KEYPAD_ROW_2_LOW;
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <KEYPAD_INT_SetRow+0x88>)
 800113e:	f003 f9bb 	bl	80044b8 <GPIO_WriteToOutputPin>
	if (row == 3)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b03      	cmp	r3, #3
 8001146:	d104      	bne.n	8001152 <KEYPAD_INT_SetRow+0x6a>
		KEYPAD_ROW_3_LOW;
 8001148:	2200      	movs	r2, #0
 800114a:	2102      	movs	r1, #2
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <KEYPAD_INT_SetRow+0x88>)
 800114e:	f003 f9b3 	bl	80044b8 <GPIO_WriteToOutputPin>
	if (row == 4)
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b04      	cmp	r3, #4
 8001156:	d104      	bne.n	8001162 <KEYPAD_INT_SetRow+0x7a>
		KEYPAD_ROW_4_LOW;
 8001158:	2200      	movs	r2, #0
 800115a:	2104      	movs	r1, #4
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <KEYPAD_INT_SetRow+0x88>)
 800115e:	f003 f9ab 	bl	80044b8 <GPIO_WriteToOutputPin>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	20012fcc 	.word	0x20012fcc

08001178 <KEYPAD_INT_CheckColumn>:

uint8_t KEYPAD_INT_CheckColumn(uint8_t row) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	/* Read columns */

	/* Scan column 1 */
	if (KEYPAD_COLUMN_1_CHECK) {
 8001182:	2106      	movs	r1, #6
 8001184:	481f      	ldr	r0, [pc, #124]	; (8001204 <KEYPAD_INT_CheckColumn+0x8c>)
 8001186:	f003 f981 	bl	800448c <GPIO_ReadFromInputPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d105      	bne.n	800119c <KEYPAD_INT_CheckColumn+0x24>
		return KEYPAD_INT_Buttons[row - 1][0];
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	3b01      	subs	r3, #1
 8001194:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <KEYPAD_INT_CheckColumn+0x90>)
 8001196:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800119a:	e02e      	b.n	80011fa <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 2 */
	if (KEYPAD_COLUMN_2_CHECK) {
 800119c:	2103      	movs	r1, #3
 800119e:	481b      	ldr	r0, [pc, #108]	; (800120c <KEYPAD_INT_CheckColumn+0x94>)
 80011a0:	f003 f974 	bl	800448c <GPIO_ReadFromInputPin>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d106      	bne.n	80011b8 <KEYPAD_INT_CheckColumn+0x40>
		return KEYPAD_INT_Buttons[row - 1][1];
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <KEYPAD_INT_CheckColumn+0x90>)
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	785b      	ldrb	r3, [r3, #1]
 80011b6:	e020      	b.n	80011fa <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 3 */
	if (KEYPAD_COLUMN_3_CHECK) {
 80011b8:	2105      	movs	r1, #5
 80011ba:	4814      	ldr	r0, [pc, #80]	; (800120c <KEYPAD_INT_CheckColumn+0x94>)
 80011bc:	f003 f966 	bl	800448c <GPIO_ReadFromInputPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d106      	bne.n	80011d4 <KEYPAD_INT_CheckColumn+0x5c>
		return KEYPAD_INT_Buttons[row - 1][2];
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <KEYPAD_INT_CheckColumn+0x90>)
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	789b      	ldrb	r3, [r3, #2]
 80011d2:	e012      	b.n	80011fa <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 4 */
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large && KEYPAD_COLUMN_4_CHECK) {
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <KEYPAD_INT_CheckColumn+0x98>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10d      	bne.n	80011f8 <KEYPAD_INT_CheckColumn+0x80>
 80011dc:	2107      	movs	r1, #7
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <KEYPAD_INT_CheckColumn+0x94>)
 80011e0:	f003 f954 	bl	800448c <GPIO_ReadFromInputPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <KEYPAD_INT_CheckColumn+0x80>
		return KEYPAD_INT_Buttons[row - 1][3];
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	4a06      	ldr	r2, [pc, #24]	; (8001208 <KEYPAD_INT_CheckColumn+0x90>)
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	78db      	ldrb	r3, [r3, #3]
 80011f6:	e000      	b.n	80011fa <KEYPAD_INT_CheckColumn+0x82>
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 80011f8:	23ff      	movs	r3, #255	; 0xff
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020c00 	.word	0x40020c00
 8001208:	20000000 	.word	0x20000000
 800120c:	40020400 	.word	0x40020400
 8001210:	20012fcc 	.word	0x20012fcc

08001214 <KEYPAD_INT_Read>:

uint8_t KEYPAD_INT_Read(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	KEYPAD_INT_SetRow(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff ff64 	bl	80010e8 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff ffa9 	bl	8001178 <KEYPAD_INT_CheckColumn>
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2bff      	cmp	r3, #255	; 0xff
 800122e:	d001      	beq.n	8001234 <KEYPAD_INT_Read+0x20>
		return check;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	e02b      	b.n	800128c <KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	KEYPAD_INT_SetRow(2);
 8001234:	2002      	movs	r0, #2
 8001236:	f7ff ff57 	bl	80010e8 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(2);
 800123a:	2002      	movs	r0, #2
 800123c:	f7ff ff9c 	bl	8001178 <KEYPAD_INT_CheckColumn>
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2bff      	cmp	r3, #255	; 0xff
 8001248:	d001      	beq.n	800124e <KEYPAD_INT_Read+0x3a>
		return check;
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	e01e      	b.n	800128c <KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	KEYPAD_INT_SetRow(3);
 800124e:	2003      	movs	r0, #3
 8001250:	f7ff ff4a 	bl	80010e8 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(3);
 8001254:	2003      	movs	r0, #3
 8001256:	f7ff ff8f 	bl	8001178 <KEYPAD_INT_CheckColumn>
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2bff      	cmp	r3, #255	; 0xff
 8001262:	d001      	beq.n	8001268 <KEYPAD_INT_Read+0x54>
		return check;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	e011      	b.n	800128c <KEYPAD_INT_Read+0x78>
	}

	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large) {
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <KEYPAD_INT_Read+0x80>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10c      	bne.n	800128a <KEYPAD_INT_Read+0x76>
		/* Set row 4 to LOW */
		KEYPAD_INT_SetRow(4);
 8001270:	2004      	movs	r0, #4
 8001272:	f7ff ff39 	bl	80010e8 <KEYPAD_INT_SetRow>
		/* Check columns */
		check = KEYPAD_INT_CheckColumn(4);
 8001276:	2004      	movs	r0, #4
 8001278:	f7ff ff7e 	bl	8001178 <KEYPAD_INT_CheckColumn>
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NOPRESSED) {
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2bff      	cmp	r3, #255	; 0xff
 8001284:	d001      	beq.n	800128a <KEYPAD_INT_Read+0x76>
			return check;
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	e000      	b.n	800128c <KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 800128a:	23ff      	movs	r3, #255	; 0xff
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20012fcc 	.word	0x20012fcc

08001298 <KEYPAD_Update>:

void KEYPAD_Update(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;
	if (++millis >= KEYPAD_READ_INTERVAL) {
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <KEYPAD_Update+0x30>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <KEYPAD_Update+0x30>)
 80012a6:	801a      	strh	r2, [r3, #0]
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <KEYPAD_Update+0x30>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	2b31      	cmp	r3, #49	; 0x31
 80012ae:	d908      	bls.n	80012c2 <KEYPAD_Update+0x2a>
		millis = 0;
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <KEYPAD_Update+0x30>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	801a      	strh	r2, [r3, #0]
		KeypadStatus = (KEYPAD_Button_t) KEYPAD_INT_Read();
 80012b6:	f7ff ffad 	bl	8001214 <KEYPAD_INT_Read>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b03      	ldr	r3, [pc, #12]	; (80012cc <KEYPAD_Update+0x34>)
 80012c0:	701a      	strb	r2, [r3, #0]
	}
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000220 	.word	0x20000220
 80012cc:	20000010 	.word	0x20000010

080012d0 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 80012da:	2101      	movs	r1, #1
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <LCD5110_send+0x40>)
 80012de:	f003 fd8f 	bl	8004e00 <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2101      	movs	r1, #1
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <LCD5110_send+0x44>)
 80012e8:	f003 f8e6 	bl	80044b8 <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4807      	ldr	r0, [pc, #28]	; (8001310 <LCD5110_send+0x40>)
 80012f2:	f003 fd5a 	bl	8004daa <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 80012f6:	2201      	movs	r2, #1
 80012f8:	2101      	movs	r1, #1
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <LCD5110_send+0x44>)
 80012fc:	f003 f8dc 	bl	80044b8 <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 8001300:	2100      	movs	r1, #0
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <LCD5110_send+0x40>)
 8001304:	f003 fd7c 	bl	8004e00 <SPI_PeripheralControl>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40013000 	.word	0x40013000
 8001314:	40020400 	.word	0x40020400

08001318 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	4613      	mov	r3, r2
 8001326:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d002      	beq.n	8001334 <LCD5110_Pin+0x1c>
 800132e:	2b02      	cmp	r3, #2
 8001330:	d00f      	beq.n	8001352 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 8001332:	e01d      	b.n	8001370 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 800133a:	2201      	movs	r2, #1
 800133c:	2105      	movs	r1, #5
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <LCD5110_Pin+0x60>)
 8001340:	f003 f8ba 	bl	80044b8 <GPIO_WriteToOutputPin>
			break;
 8001344:	e014      	b.n	8001370 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2105      	movs	r1, #5
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <LCD5110_Pin+0x60>)
 800134c:	f003 f8b4 	bl	80044b8 <GPIO_WriteToOutputPin>
			break;
 8001350:	e00e      	b.n	8001370 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 8001358:	2201      	movs	r2, #1
 800135a:	2107      	movs	r1, #7
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <LCD5110_Pin+0x64>)
 800135e:	f003 f8ab 	bl	80044b8 <GPIO_WriteToOutputPin>
			break;
 8001362:	e004      	b.n	800136e <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8001364:	2200      	movs	r2, #0
 8001366:	2107      	movs	r1, #7
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <LCD5110_Pin+0x64>)
 800136a:	f003 f8a5 	bl	80044b8 <GPIO_WriteToOutputPin>
			break;
 800136e:	bf00      	nop
	}
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020800 	.word	0x40020800
 800137c:	40021000 	.word	0x40021000

08001380 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	e002      	b.n	8001394 <LCD5110_Delay+0x14>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3301      	adds	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d8f8      	bhi.n	800138e <LCD5110_Delay+0xe>
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 80013b6:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <LCD5110_Init+0x138>)
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80013c0:	2305      	movs	r3, #5
 80013c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80013d2:	2302      	movs	r3, #2
 80013d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80013d8:	2305      	movs	r3, #5
 80013da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80013de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 feb6 	bl	8004154 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80013e8:	2307      	movs	r3, #7
 80013ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80013ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 feae 	bl	8004154 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 80013f8:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <LCD5110_Init+0x13c>)
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 80013fc:	2301      	movs	r3, #1
 80013fe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 8001414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fe9b 	bl	8004154 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <LCD5110_Init+0x140>)
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 8001422:	2305      	movs	r3, #5
 8001424:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fe91 	bl	8004154 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <LCD5110_Init+0x144>)
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 8001436:	2307      	movs	r3, #7
 8001438:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800143c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001440:	4618      	mov	r0, r3
 8001442:	f002 fe87 	bl	8004154 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <LCD5110_Init+0x148>)
 8001448:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800144a:	2301      	movs	r3, #1
 800144c:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 800144e:	2301      	movs	r3, #1
 8001450:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8001452:	2302      	movs	r3, #2
 8001454:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8001456:	2300      	movs	r3, #0
 8001458:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 800145a:	2300      	movs	r3, #0
 800145c:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 800145e:	2300      	movs	r3, #0
 8001460:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 8001462:	2300      	movs	r3, #0
 8001464:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fc42 	bl	8004cf4 <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 8001470:	2101      	movs	r1, #1
 8001472:	4820      	ldr	r0, [pc, #128]	; (80014f4 <LCD5110_Init+0x148>)
 8001474:	f003 fce0 	bl	8004e38 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 8001478:	2100      	movs	r1, #0
 800147a:	2002      	movs	r0, #2
 800147c:	f7ff ff4c 	bl	8001318 <LCD5110_Pin>
	LCD5110_Delay(10000);
 8001480:	f242 7010 	movw	r0, #10000	; 0x2710
 8001484:	f7ff ff7c 	bl	8001380 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 8001488:	2101      	movs	r1, #1
 800148a:	2002      	movs	r0, #2
 800148c:	f7ff ff44 	bl	8001318 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 8001490:	2121      	movs	r1, #33	; 0x21
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f830 	bl	80014f8 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 8001498:	2114      	movs	r1, #20
 800149a:	2000      	movs	r0, #0
 800149c:	f000 f82c 	bl	80014f8 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da01      	bge.n	80014ac <LCD5110_Init+0x100>
		contrast = 0x7F;
 80014a8:	237f      	movs	r3, #127	; 0x7f
 80014aa:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4619      	mov	r1, r3
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f81e 	bl	80014f8 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 80014bc:	2120      	movs	r1, #32
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f81a 	bl	80014f8 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 80014c4:	210c      	movs	r1, #12
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 f816 	bl	80014f8 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 80014cc:	f000 f8b8 	bl	8001640 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 80014d0:	210c      	movs	r1, #12
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 f810 	bl	80014f8 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 80014d8:	f000 f88c 	bl	80015f4 <LCD5110_Clear>
}
 80014dc:	bf00      	nop
 80014de:	3738      	adds	r7, #56	; 0x38
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40013000 	.word	0x40013000

080014f8 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <LCD5110_Write+0x24>
 800150e:	2b01      	cmp	r3, #1
 8001510:	d109      	bne.n	8001526 <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 8001512:	2101      	movs	r1, #1
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff feff 	bl	8001318 <LCD5110_Pin>
			break;
 800151a:	e005      	b.n	8001528 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 800151c:	2100      	movs	r1, #0
 800151e:	2001      	movs	r0, #1
 8001520:	f7ff fefa 	bl	8001318 <LCD5110_Pin>
			break;
 8001524:	e000      	b.n	8001528 <LCD5110_Write+0x30>
		default: break;
 8001526:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 8001528:	79bb      	ldrb	r3, [r7, #6]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fed0 	bl	80012d0 <LCD5110_send>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	460b      	mov	r3, r1
 8001544:	71bb      	strb	r3, [r7, #6]
 8001546:	4613      	mov	r3, r2
 8001548:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b53      	cmp	r3, #83	; 0x53
 800154e:	d849      	bhi.n	80015e4 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	2b2f      	cmp	r3, #47	; 0x2f
 8001554:	d848      	bhi.n	80015e8 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 8001556:	797b      	ldrb	r3, [r7, #5]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01d      	beq.n	8001598 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	b2d8      	uxtb	r0, r3
 8001564:	4601      	mov	r1, r0
 8001566:	2354      	movs	r3, #84	; 0x54
 8001568:	fb03 f301 	mul.w	r3, r3, r1
 800156c:	4413      	add	r3, r2
 800156e:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <LCD5110_DrawPixel+0xb8>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	b25a      	sxtb	r2, r3
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	b25b      	sxtb	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b259      	sxtb	r1, r3
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	2354      	movs	r3, #84	; 0x54
 800158a:	fb03 f300 	mul.w	r3, r3, r0
 800158e:	4413      	add	r3, r2
 8001590:	b2c9      	uxtb	r1, r1
 8001592:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <LCD5110_DrawPixel+0xb8>)
 8001594:	54d1      	strb	r1, [r2, r3]
 8001596:	e01e      	b.n	80015d6 <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	79bb      	ldrb	r3, [r7, #6]
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	b2d8      	uxtb	r0, r3
 80015a0:	4601      	mov	r1, r0
 80015a2:	2354      	movs	r3, #84	; 0x54
 80015a4:	fb03 f301 	mul.w	r3, r3, r1
 80015a8:	4413      	add	r3, r2
 80015aa:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <LCD5110_DrawPixel+0xb8>)
 80015ac:	5cd3      	ldrb	r3, [r2, r3]
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	79bb      	ldrb	r3, [r7, #6]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	4013      	ands	r3, r2
 80015c4:	b259      	sxtb	r1, r3
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	2354      	movs	r3, #84	; 0x54
 80015ca:	fb03 f300 	mul.w	r3, r3, r0
 80015ce:	4413      	add	r3, r2
 80015d0:	b2c9      	uxtb	r1, r1
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <LCD5110_DrawPixel+0xb8>)
 80015d4:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	79fa      	ldrb	r2, [r7, #7]
 80015da:	79b9      	ldrb	r1, [r7, #6]
 80015dc:	79f8      	ldrb	r0, [r7, #7]
 80015de:	f000 f89d 	bl	800171c <LCD5110_UpdateArea>
 80015e2:	e002      	b.n	80015ea <LCD5110_DrawPixel+0xb2>
		return;
 80015e4:	bf00      	nop
 80015e6:	e000      	b.n	80015ea <LCD5110_DrawPixel+0xb2>
		return;
 80015e8:	bf00      	nop
}
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20012fd4 	.word	0x20012fd4

080015f4 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 80015fa:	f000 f821 	bl	8001640 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	e007      	b.n	8001614 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LCD5110_Clear+0x48>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3301      	adds	r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800161a:	d3f3      	bcc.n	8001604 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 800161c:	2100      	movs	r1, #0
 800161e:	2000      	movs	r0, #0
 8001620:	f000 f8b8 	bl	8001794 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 8001624:	232f      	movs	r3, #47	; 0x2f
 8001626:	2253      	movs	r2, #83	; 0x53
 8001628:	2100      	movs	r1, #0
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f876 	bl	800171c <LCD5110_UpdateArea>
	LCD5110_Refresh();
 8001630:	f000 f812 	bl	8001658 <LCD5110_Refresh>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20012fd4 	.word	0x20012fd4

08001640 <LCD5110_Home>:

void LCD5110_Home(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff ff56 	bl	80014f8 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff ff52 	bl	80014f8 <LCD5110_Write>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 800165e:	2300      	movs	r3, #0
 8001660:	71fb      	strb	r3, [r7, #7]
 8001662:	e03b      	b.n	80016dc <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <LCD5110_Refresh+0xb0>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	3301      	adds	r3, #1
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	429a      	cmp	r2, r3
 8001672:	dc2f      	bgt.n	80016d4 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4a24      	ldr	r2, [pc, #144]	; (800170c <LCD5110_Refresh+0xb4>)
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	4293      	cmp	r3, r2
 800167e:	dc31      	bgt.n	80016e4 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4619      	mov	r1, r3
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff ff34 	bl	80014f8 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <LCD5110_Refresh+0xb8>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4619      	mov	r1, r3
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff ff2b 	bl	80014f8 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <LCD5110_Refresh+0xb8>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	71bb      	strb	r3, [r7, #6]
 80016a8:	e00e      	b.n	80016c8 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2254      	movs	r2, #84	; 0x54
 80016ae:	fb02 f203 	mul.w	r2, r2, r3
 80016b2:	79bb      	ldrb	r3, [r7, #6]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <LCD5110_Refresh+0xbc>)
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	4619      	mov	r1, r3
 80016bc:	2001      	movs	r0, #1
 80016be:	f7ff ff1b 	bl	80014f8 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	3301      	adds	r3, #1
 80016c6:	71bb      	strb	r3, [r7, #6]
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <LCD5110_Refresh+0xc0>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	79ba      	ldrb	r2, [r7, #6]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d9eb      	bls.n	80016aa <LCD5110_Refresh+0x52>
 80016d2:	e000      	b.n	80016d6 <LCD5110_Refresh+0x7e>
			continue;
 80016d4:	bf00      	nop
	for (i = 0; i < 6; i++) {
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	3301      	adds	r3, #1
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d9c0      	bls.n	8001664 <LCD5110_Refresh+0xc>
 80016e2:	e000      	b.n	80016e6 <LCD5110_Refresh+0x8e>
			break;
 80016e4:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <LCD5110_Refresh+0xb8>)
 80016e8:	2253      	movs	r2, #83	; 0x53
 80016ea:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <LCD5110_Refresh+0xc0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <LCD5110_Refresh+0xb0>)
 80016f4:	222f      	movs	r2, #47	; 0x2f
 80016f6:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <LCD5110_Refresh+0xb4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000224 	.word	0x20000224
 800170c:	20000225 	.word	0x20000225
 8001710:	20000222 	.word	0x20000222
 8001714:	20012fd4 	.word	0x20012fd4
 8001718:	20000223 	.word	0x20000223

0800171c <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 800171c:	b490      	push	{r4, r7}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4623      	mov	r3, r4
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	4603      	mov	r3, r0
 8001730:	71bb      	strb	r3, [r7, #6]
 8001732:	460b      	mov	r3, r1
 8001734:	717b      	strb	r3, [r7, #5]
 8001736:	4613      	mov	r3, r2
 8001738:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <LCD5110_UpdateArea+0x68>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	429a      	cmp	r2, r3
 8001742:	d202      	bcs.n	800174a <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8001744:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <LCD5110_UpdateArea+0x68>)
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <LCD5110_UpdateArea+0x6c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	797a      	ldrb	r2, [r7, #5]
 8001750:	429a      	cmp	r2, r3
 8001752:	d902      	bls.n	800175a <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <LCD5110_UpdateArea+0x6c>)
 8001756:	797b      	ldrb	r3, [r7, #5]
 8001758:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <LCD5110_UpdateArea+0x70>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	79ba      	ldrb	r2, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d202      	bcs.n	800176a <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8001764:	4a09      	ldr	r2, [pc, #36]	; (800178c <LCD5110_UpdateArea+0x70>)
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <LCD5110_UpdateArea+0x74>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	793a      	ldrb	r2, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	d902      	bls.n	800177a <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <LCD5110_UpdateArea+0x74>)
 8001776:	793b      	ldrb	r3, [r7, #4]
 8001778:	7013      	strb	r3, [r2, #0]
	}
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bc90      	pop	{r4, r7}
 8001782:	4770      	bx	lr
 8001784:	20000222 	.word	0x20000222
 8001788:	20000223 	.word	0x20000223
 800178c:	20000224 	.word	0x20000224
 8001790:	20000225 	.word	0x20000225

08001794 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	460a      	mov	r2, r1
 800179e:	71fb      	strb	r3, [r7, #7]
 80017a0:	4613      	mov	r3, r2
 80017a2:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 80017a4:	4a05      	ldr	r2, [pc, #20]	; (80017bc <LCD5110_GotoXY+0x28>)
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <LCD5110_GotoXY+0x2c>)
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	7013      	strb	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	20012fd0 	.word	0x20012fd0
 80017c0:	20012fd1 	.word	0x20012fd1

080017c4 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	460b      	mov	r3, r1
 80017d0:	71bb      	strb	r3, [r7, #6]
 80017d2:	4613      	mov	r3, r2
 80017d4:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 80017d6:	797b      	ldrb	r3, [r7, #5]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d104      	bne.n	80017e6 <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 80017dc:	2304      	movs	r3, #4
 80017de:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 80017e0:	2306      	movs	r3, #6
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e003      	b.n	80017ee <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 80017e6:	2306      	movs	r3, #6
 80017e8:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 80017ea:	2308      	movs	r3, #8
 80017ec:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 80017ee:	4b46      	ldr	r3, [pc, #280]	; (8001908 <LCD5110_Putc+0x144>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	4413      	add	r3, r2
 80017f8:	2b54      	cmp	r3, #84	; 0x54
 80017fa:	dd09      	ble.n	8001810 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <LCD5110_Putc+0x148>)
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	4413      	add	r3, r2
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b41      	ldr	r3, [pc, #260]	; (800190c <LCD5110_Putc+0x148>)
 8001808:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <LCD5110_Putc+0x144>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8001810:	2300      	movs	r3, #0
 8001812:	737b      	strb	r3, [r7, #13]
 8001814:	e068      	b.n	80018e8 <LCD5110_Putc+0x124>
		if (c < 32) {
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	2b1f      	cmp	r3, #31
 800181a:	d91c      	bls.n	8001856 <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 800181c:	797b      	ldrb	r3, [r7, #5]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d10c      	bne.n	800183c <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f1a3 0220 	sub.w	r2, r3, #32
 8001828:	7b79      	ldrb	r1, [r7, #13]
 800182a:	4839      	ldr	r0, [pc, #228]	; (8001910 <LCD5110_Putc+0x14c>)
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	4403      	add	r3, r0
 8001834:	440b      	add	r3, r1
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	733b      	strb	r3, [r7, #12]
 800183a:	e00c      	b.n	8001856 <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f1a3 0220 	sub.w	r2, r3, #32
 8001842:	7b79      	ldrb	r1, [r7, #13]
 8001844:	4833      	ldr	r0, [pc, #204]	; (8001914 <LCD5110_Putc+0x150>)
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4403      	add	r3, r0
 8001850:	440b      	add	r3, r1
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8001856:	7b3b      	ldrb	r3, [r7, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <LCD5110_Putc+0xa4>
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <LCD5110_Putc+0xa4>
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b20      	cmp	r3, #32
 8001866:	d13b      	bne.n	80018e0 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8001868:	2300      	movs	r3, #0
 800186a:	72fb      	strb	r3, [r7, #11]
 800186c:	e02d      	b.n	80018ca <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d112      	bne.n	800189a <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <LCD5110_Putc+0x144>)
 8001876:	7818      	ldrb	r0, [r3, #0]
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <LCD5110_Putc+0x148>)
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	7afb      	ldrb	r3, [r7, #11]
 800187e:	4413      	add	r3, r2
 8001880:	b2d9      	uxtb	r1, r3
 8001882:	7b3a      	ldrb	r2, [r7, #12]
 8001884:	7afb      	ldrb	r3, [r7, #11]
 8001886:	fa42 f303 	asr.w	r3, r2, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	f7ff fe50 	bl	8001538 <LCD5110_DrawPixel>
 8001898:	e014      	b.n	80018c4 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <LCD5110_Putc+0x144>)
 800189c:	7818      	ldrb	r0, [r3, #0]
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <LCD5110_Putc+0x148>)
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	7afb      	ldrb	r3, [r7, #11]
 80018a4:	4413      	add	r3, r2
 80018a6:	b2d9      	uxtb	r1, r3
 80018a8:	7b3a      	ldrb	r2, [r7, #12]
 80018aa:	7afb      	ldrb	r3, [r7, #11]
 80018ac:	fa42 f303 	asr.w	r3, r2, r3
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	f7ff fe3a 	bl	8001538 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 80018c4:	7afb      	ldrb	r3, [r7, #11]
 80018c6:	3301      	adds	r3, #1
 80018c8:	72fb      	strb	r3, [r7, #11]
 80018ca:	7afa      	ldrb	r2, [r7, #11]
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d3cd      	bcc.n	800186e <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <LCD5110_Putc+0x144>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <LCD5110_Putc+0x144>)
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	e000      	b.n	80018e2 <LCD5110_Putc+0x11e>
			continue;
 80018e0:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 80018e2:	7b7b      	ldrb	r3, [r7, #13]
 80018e4:	3301      	adds	r3, #1
 80018e6:	737b      	strb	r3, [r7, #13]
 80018e8:	7b7a      	ldrb	r2, [r7, #13]
 80018ea:	7bbb      	ldrb	r3, [r7, #14]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	429a      	cmp	r2, r3
 80018f0:	db91      	blt.n	8001816 <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <LCD5110_Putc+0x144>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b03      	ldr	r3, [pc, #12]	; (8001908 <LCD5110_Putc+0x144>)
 80018fc:	701a      	strb	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20012fd0 	.word	0x20012fd0
 800190c:	20012fd1 	.word	0x20012fd1
 8001910:	08008ac4 	.word	0x08008ac4
 8001914:	0800887c 	.word	0x0800887c

08001918 <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
 8001924:	4613      	mov	r3, r2
 8001926:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8001928:	e008      	b.n	800193c <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	78ba      	ldrb	r2, [r7, #2]
 8001934:	78f9      	ldrb	r1, [r7, #3]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff44 	bl	80017c4 <LCD5110_Putc>
	while (*c) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f2      	bne.n	800192a <LCD5110_Puts+0x12>
	}
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f103 0208 	add.w	r2, r3, #8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001966:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f103 0208 	add.w	r2, r3, #8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f103 0208 	add.w	r2, r3, #8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a06:	d103      	bne.n	8001a10 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e00c      	b.n	8001a2a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3308      	adds	r3, #8
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e002      	b.n	8001a1e <vListInsert+0x2e>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d2f6      	bcs.n	8001a18 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6892      	ldr	r2, [r2, #8]
 8001a78:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6852      	ldr	r2, [r2, #4]
 8001a82:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d103      	bne.n	8001a96 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad0:	f383 8811 	msr	BASEPRI, r3
 8001ad4:	f3bf 8f6f 	isb	sy
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001ade:	bf00      	nop
 8001ae0:	e7fe      	b.n	8001ae0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001ae2:	f001 ff91 	bl	8003a08 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aee:	68f9      	ldr	r1, [r7, #12]
 8001af0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	441a      	add	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	3b01      	subs	r3, #1
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	441a      	add	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	22ff      	movs	r2, #255	; 0xff
 8001b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	22ff      	movs	r2, #255	; 0xff
 8001b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d114      	bne.n	8001b62 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01a      	beq.n	8001b76 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3310      	adds	r3, #16
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 f881 	bl	8002c4c <xTaskRemoveFromEventList>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d012      	beq.n	8001b76 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <xQueueGenericReset+0xcc>)
 8001b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	f3bf 8f4f 	dsb	sy
 8001b5c:	f3bf 8f6f 	isb	sy
 8001b60:	e009      	b.n	8001b76 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3310      	adds	r3, #16
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fef1 	bl	800194e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3324      	adds	r3, #36	; 0x24
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff feec 	bl	800194e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001b76:	f001 ff77 	bl	8003a68 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001b7a:	2301      	movs	r3, #1
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	e000ed04 	.word	0xe000ed04

08001b88 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	4613      	mov	r3, r2
 8001b94:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10a      	bne.n	8001bb2 <xQueueGenericCreate+0x2a>
        __asm volatile
 8001b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba0:	f383 8811 	msr	BASEPRI, r3
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	61bb      	str	r3, [r7, #24]
    }
 8001bae:	bf00      	nop
 8001bb0:	e7fe      	b.n	8001bb0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <xQueueGenericCreate+0x48>
 8001bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d101      	bne.n	8001bd4 <xQueueGenericCreate+0x4c>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <xQueueGenericCreate+0x4e>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10a      	bne.n	8001bf0 <xQueueGenericCreate+0x68>
        __asm volatile
 8001bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bde:	f383 8811 	msr	BASEPRI, r3
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	617b      	str	r3, [r7, #20]
    }
 8001bec:	bf00      	nop
 8001bee:	e7fe      	b.n	8001bee <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001bf6:	d90a      	bls.n	8001c0e <xQueueGenericCreate+0x86>
        __asm volatile
 8001bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfc:	f383 8811 	msr	BASEPRI, r3
 8001c00:	f3bf 8f6f 	isb	sy
 8001c04:	f3bf 8f4f 	dsb	sy
 8001c08:	613b      	str	r3, [r7, #16]
    }
 8001c0a:	bf00      	nop
 8001c0c:	e7fe      	b.n	8001c0c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	3350      	adds	r3, #80	; 0x50
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 f81a 	bl	8003c4c <pvPortMalloc>
 8001c18:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00d      	beq.n	8001c3c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	3350      	adds	r3, #80	; 0x50
 8001c28:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c2a:	79fa      	ldrb	r2, [r7, #7]
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f805 	bl	8001c46 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
    }
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3728      	adds	r7, #40	; 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e002      	b.n	8001c68 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c74:	2101      	movs	r1, #1
 8001c76:	69b8      	ldr	r0, [r7, #24]
 8001c78:	f7ff ff1e 	bl	8001ab8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08e      	sub	sp, #56	; 0x38
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10a      	bne.n	8001cbe <xQueueGenericSend+0x32>
        __asm volatile
 8001ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cac:	f383 8811 	msr	BASEPRI, r3
 8001cb0:	f3bf 8f6f 	isb	sy
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001cba:	bf00      	nop
 8001cbc:	e7fe      	b.n	8001cbc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d103      	bne.n	8001ccc <xQueueGenericSend+0x40>
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <xQueueGenericSend+0x44>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <xQueueGenericSend+0x46>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10a      	bne.n	8001cec <xQueueGenericSend+0x60>
        __asm volatile
 8001cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001ce8:	bf00      	nop
 8001cea:	e7fe      	b.n	8001cea <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d103      	bne.n	8001cfa <xQueueGenericSend+0x6e>
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <xQueueGenericSend+0x72>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <xQueueGenericSend+0x74>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10a      	bne.n	8001d1a <xQueueGenericSend+0x8e>
        __asm volatile
 8001d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d08:	f383 8811 	msr	BASEPRI, r3
 8001d0c:	f3bf 8f6f 	isb	sy
 8001d10:	f3bf 8f4f 	dsb	sy
 8001d14:	623b      	str	r3, [r7, #32]
    }
 8001d16:	bf00      	nop
 8001d18:	e7fe      	b.n	8001d18 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d1a:	f001 f933 	bl	8002f84 <xTaskGetSchedulerState>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <xQueueGenericSend+0x9e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <xQueueGenericSend+0xa2>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <xQueueGenericSend+0xa4>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <xQueueGenericSend+0xbe>
        __asm volatile
 8001d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	61fb      	str	r3, [r7, #28]
    }
 8001d46:	bf00      	nop
 8001d48:	e7fe      	b.n	8001d48 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001d4a:	f001 fe5d 	bl	8003a08 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d302      	bcc.n	8001d60 <xQueueGenericSend+0xd4>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d129      	bne.n	8001db4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d66:	f000 fa19 	bl	800219c <prvCopyDataToQueue>
 8001d6a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d010      	beq.n	8001d96 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d76:	3324      	adds	r3, #36	; 0x24
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 ff67 	bl	8002c4c <xTaskRemoveFromEventList>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <xQueueGenericSend+0x1f8>)
 8001d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	e00a      	b.n	8001dac <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <xQueueGenericSend+0x1f8>)
 8001d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	f3bf 8f4f 	dsb	sy
 8001da8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001dac:	f001 fe5c 	bl	8003a68 <vPortExitCritical>
                return pdPASS;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e063      	b.n	8001e7c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001dba:	f001 fe55 	bl	8003a68 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e05c      	b.n	8001e7c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 ff9f 	bl	8002d10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001dd6:	f001 fe47 	bl	8003a68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001dda:	f000 fd19 	bl	8002810 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001dde:	f001 fe13 	bl	8003a08 <vPortEnterCritical>
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dee:	d103      	bne.n	8001df8 <xQueueGenericSend+0x16c>
 8001df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dfe:	b25b      	sxtb	r3, r3
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e04:	d103      	bne.n	8001e0e <xQueueGenericSend+0x182>
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e0e:	f001 fe2b 	bl	8003a68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e12:	1d3a      	adds	r2, r7, #4
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 ff8e 	bl	8002d3c <xTaskCheckForTimeOut>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d124      	bne.n	8001e70 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e28:	f000 fab0 	bl	800238c <prvIsQueueFull>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d018      	beq.n	8001e64 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	3310      	adds	r3, #16
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 feb6 	bl	8002bac <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e42:	f000 fa3b 	bl	80022bc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001e46:	f000 fcf1 	bl	800282c <xTaskResumeAll>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f47f af7c 	bne.w	8001d4a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <xQueueGenericSend+0x1f8>)
 8001e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	f3bf 8f4f 	dsb	sy
 8001e5e:	f3bf 8f6f 	isb	sy
 8001e62:	e772      	b.n	8001d4a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e66:	f000 fa29 	bl	80022bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001e6a:	f000 fcdf 	bl	800282c <xTaskResumeAll>
 8001e6e:	e76c      	b.n	8001d4a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e72:	f000 fa23 	bl	80022bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001e76:	f000 fcd9 	bl	800282c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001e7a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3738      	adds	r7, #56	; 0x38
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	e000ed04 	.word	0xe000ed04

08001e88 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b090      	sub	sp, #64	; 0x40
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10a      	bne.n	8001eb6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea4:	f383 8811 	msr	BASEPRI, r3
 8001ea8:	f3bf 8f6f 	isb	sy
 8001eac:	f3bf 8f4f 	dsb	sy
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001eb2:	bf00      	nop
 8001eb4:	e7fe      	b.n	8001eb4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d103      	bne.n	8001ec4 <xQueueGenericSendFromISR+0x3c>
 8001ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <xQueueGenericSendFromISR+0x40>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <xQueueGenericSendFromISR+0x42>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10a      	bne.n	8001ee4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8001ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001ee0:	bf00      	nop
 8001ee2:	e7fe      	b.n	8001ee2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d103      	bne.n	8001ef2 <xQueueGenericSendFromISR+0x6a>
 8001eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <xQueueGenericSendFromISR+0x6e>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <xQueueGenericSendFromISR+0x70>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8001efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f00:	f383 8811 	msr	BASEPRI, r3
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	f3bf 8f4f 	dsb	sy
 8001f0c:	623b      	str	r3, [r7, #32]
    }
 8001f0e:	bf00      	nop
 8001f10:	e7fe      	b.n	8001f10 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f12:	f001 fe5b 	bl	8003bcc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001f16:	f3ef 8211 	mrs	r2, BASEPRI
 8001f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1e:	f383 8811 	msr	BASEPRI, r3
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	f3bf 8f4f 	dsb	sy
 8001f2a:	61fa      	str	r2, [r7, #28]
 8001f2c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <xQueueGenericSendFromISR+0xbc>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d13e      	bne.n	8001fc2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f5a:	f000 f91f 	bl	800219c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001f5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f66:	d112      	bne.n	8001f8e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d025      	beq.n	8001fbc <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	3324      	adds	r3, #36	; 0x24
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 fe69 	bl	8002c4c <xTaskRemoveFromEventList>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01d      	beq.n	8001fbc <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01a      	beq.n	8001fbc <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e016      	b.n	8001fbc <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001f8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001f92:	2b7f      	cmp	r3, #127	; 0x7f
 8001f94:	d10a      	bne.n	8001fac <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8001f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9a:	f383 8811 	msr	BASEPRI, r3
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	617b      	str	r3, [r7, #20]
    }
 8001fa8:	bf00      	nop
 8001faa:	e7fe      	b.n	8001faa <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001fac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	b25a      	sxtb	r2, r3
 8001fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001fc0:	e001      	b.n	8001fc6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001fd0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3740      	adds	r7, #64	; 0x40
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10a      	bne.n	800200c <xQueueReceive+0x30>
        __asm volatile
 8001ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffa:	f383 8811 	msr	BASEPRI, r3
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	623b      	str	r3, [r7, #32]
    }
 8002008:	bf00      	nop
 800200a:	e7fe      	b.n	800200a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <xQueueReceive+0x3e>
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <xQueueReceive+0x42>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <xQueueReceive+0x44>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <xQueueReceive+0x5e>
        __asm volatile
 8002024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	61fb      	str	r3, [r7, #28]
    }
 8002036:	bf00      	nop
 8002038:	e7fe      	b.n	8002038 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800203a:	f000 ffa3 	bl	8002f84 <xTaskGetSchedulerState>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <xQueueReceive+0x6e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <xQueueReceive+0x72>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <xQueueReceive+0x74>
 800204e:	2300      	movs	r3, #0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10a      	bne.n	800206a <xQueueReceive+0x8e>
        __asm volatile
 8002054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002058:	f383 8811 	msr	BASEPRI, r3
 800205c:	f3bf 8f6f 	isb	sy
 8002060:	f3bf 8f4f 	dsb	sy
 8002064:	61bb      	str	r3, [r7, #24]
    }
 8002066:	bf00      	nop
 8002068:	e7fe      	b.n	8002068 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800206a:	f001 fccd 	bl	8003a08 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01f      	beq.n	80020ba <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800207e:	f000 f8f7 	bl	8002270 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	1e5a      	subs	r2, r3, #1
 8002086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002088:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00f      	beq.n	80020b2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	3310      	adds	r3, #16
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fdd8 	bl	8002c4c <xTaskRemoveFromEventList>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <xQueueReceive+0x1bc>)
 80020a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80020b2:	f001 fcd9 	bl	8003a68 <vPortExitCritical>
                return pdPASS;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e069      	b.n	800218e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80020c0:	f001 fcd2 	bl	8003a68 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e062      	b.n	800218e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80020ce:	f107 0310 	add.w	r3, r7, #16
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fe1c 	bl	8002d10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80020dc:	f001 fcc4 	bl	8003a68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80020e0:	f000 fb96 	bl	8002810 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80020e4:	f001 fc90 	bl	8003a08 <vPortEnterCritical>
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f4:	d103      	bne.n	80020fe <xQueueReceive+0x122>
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002104:	b25b      	sxtb	r3, r3
 8002106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800210a:	d103      	bne.n	8002114 <xQueueReceive+0x138>
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002114:	f001 fca8 	bl	8003a68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002118:	1d3a      	adds	r2, r7, #4
 800211a:	f107 0310 	add.w	r3, r7, #16
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fe0b 	bl	8002d3c <xTaskCheckForTimeOut>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d123      	bne.n	8002174 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800212c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800212e:	f000 f917 	bl	8002360 <prvIsQueueEmpty>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d017      	beq.n	8002168 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213a:	3324      	adds	r3, #36	; 0x24
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fd33 	bl	8002bac <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002148:	f000 f8b8 	bl	80022bc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800214c:	f000 fb6e 	bl	800282c <xTaskResumeAll>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d189      	bne.n	800206a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <xQueueReceive+0x1bc>)
 8002158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	e780      	b.n	800206a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800216a:	f000 f8a7 	bl	80022bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800216e:	f000 fb5d 	bl	800282c <xTaskResumeAll>
 8002172:	e77a      	b.n	800206a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002176:	f000 f8a1 	bl	80022bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800217a:	f000 fb57 	bl	800282c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800217e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002180:	f000 f8ee 	bl	8002360 <prvIsQueueEmpty>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	f43f af6f 	beq.w	800206a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800218c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800218e:	4618      	mov	r0, r3
 8002190:	3730      	adds	r7, #48	; 0x30
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000ed04 	.word	0xe000ed04

0800219c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d14d      	bne.n	800225e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fefa 	bl	8002fc0 <xTaskPriorityDisinherit>
 80021cc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	e043      	b.n	800225e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d119      	bne.n	8002210 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6858      	ldr	r0, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	461a      	mov	r2, r3
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	f003 fc30 	bl	8005a4c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	441a      	add	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	429a      	cmp	r2, r3
 8002204:	d32b      	bcc.n	800225e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	e026      	b.n	800225e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	68d8      	ldr	r0, [r3, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	461a      	mov	r2, r3
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	f003 fc16 	bl	8005a4c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	425b      	negs	r3, r3
 800222a:	441a      	add	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	425b      	negs	r3, r3
 8002246:	441a      	add	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d105      	bne.n	800225e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	3b01      	subs	r3, #1
 800225c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002266:	697b      	ldr	r3, [r7, #20]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d018      	beq.n	80022b4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	441a      	add	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	429a      	cmp	r2, r3
 800229a:	d303      	bcc.n	80022a4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68d9      	ldr	r1, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	461a      	mov	r2, r3
 80022ae:	6838      	ldr	r0, [r7, #0]
 80022b0:	f003 fbcc 	bl	8005a4c <memcpy>
    }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80022c4:	f001 fba0 	bl	8003a08 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ce:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80022d0:	e011      	b.n	80022f6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d012      	beq.n	8002300 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3324      	adds	r3, #36	; 0x24
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fcb4 	bl	8002c4c <xTaskRemoveFromEventList>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80022ea:	f000 fd8d 	bl	8002e08 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	dce9      	bgt.n	80022d2 <prvUnlockQueue+0x16>
 80022fe:	e000      	b.n	8002302 <prvUnlockQueue+0x46>
                        break;
 8002300:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	22ff      	movs	r2, #255	; 0xff
 8002306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800230a:	f001 fbad 	bl	8003a68 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800230e:	f001 fb7b 	bl	8003a08 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002318:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800231a:	e011      	b.n	8002340 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d012      	beq.n	800234a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3310      	adds	r3, #16
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fc8f 	bl	8002c4c <xTaskRemoveFromEventList>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002334:	f000 fd68 	bl	8002e08 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002338:	7bbb      	ldrb	r3, [r7, #14]
 800233a:	3b01      	subs	r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002344:	2b00      	cmp	r3, #0
 8002346:	dce9      	bgt.n	800231c <prvUnlockQueue+0x60>
 8002348:	e000      	b.n	800234c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800234a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	22ff      	movs	r2, #255	; 0xff
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002354:	f001 fb88 	bl	8003a68 <vPortExitCritical>
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002368:	f001 fb4e 	bl	8003a08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002374:	2301      	movs	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e001      	b.n	800237e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800237e:	f001 fb73 	bl	8003a68 <vPortExitCritical>

    return xReturn;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002394:	f001 fb38 	bl	8003a08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d102      	bne.n	80023aa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80023a4:	2301      	movs	r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e001      	b.n	80023ae <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80023ae:	f001 fb5b 	bl	8003a68 <vPortExitCritical>

    return xReturn;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e014      	b.n	80023f6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80023cc:	4a0f      	ldr	r2, [pc, #60]	; (800240c <vQueueAddToRegistry+0x50>)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <vQueueAddToRegistry+0x50>)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <vQueueAddToRegistry+0x50>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80023ee:	e006      	b.n	80023fe <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3301      	adds	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	d9e7      	bls.n	80023cc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200131cc 	.word	0x200131cc

08002410 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002420:	f001 faf2 	bl	8003a08 <vPortEnterCritical>
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800242a:	b25b      	sxtb	r3, r3
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002430:	d103      	bne.n	800243a <vQueueWaitForMessageRestricted+0x2a>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002440:	b25b      	sxtb	r3, r3
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002446:	d103      	bne.n	8002450 <vQueueWaitForMessageRestricted+0x40>
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002450:	f001 fb0a 	bl	8003a68 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	2b00      	cmp	r3, #0
 800245a:	d106      	bne.n	800246a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3324      	adds	r3, #36	; 0x24
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fbc5 	bl	8002bf4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800246a:	6978      	ldr	r0, [r7, #20]
 800246c:	f7ff ff26 	bl	80022bc <prvUnlockQueue>
    }
 8002470:	bf00      	nop
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af04      	add	r7, sp, #16
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4618      	mov	r0, r3
 800248e:	f001 fbdd 	bl	8003c4c <pvPortMalloc>
 8002492:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00e      	beq.n	80024b8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800249a:	2058      	movs	r0, #88	; 0x58
 800249c:	f001 fbd6 	bl	8003c4c <pvPortMalloc>
 80024a0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
 80024ae:	e005      	b.n	80024bc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80024b0:	6978      	ldr	r0, [r7, #20]
 80024b2:	f001 fcab 	bl	8003e0c <vPortFree>
 80024b6:	e001      	b.n	80024bc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d013      	beq.n	80024ea <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024c2:	88fa      	ldrh	r2, [r7, #6]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9303      	str	r3, [sp, #12]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f80e 	bl	80024fa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80024de:	69f8      	ldr	r0, [r7, #28]
 80024e0:	f000 f8a2 	bl	8002628 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80024e4:	2301      	movs	r3, #1
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	e002      	b.n	80024f0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80024f0:	69bb      	ldr	r3, [r7, #24]
    }
 80024f2:	4618      	mov	r0, r3
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b088      	sub	sp, #32
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	461a      	mov	r2, r3
 8002512:	21a5      	movs	r1, #165	; 0xa5
 8002514:	f003 faa8 	bl	8005a68 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002522:	3b01      	subs	r3, #1
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f023 0307 	bic.w	r3, r3, #7
 8002530:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <prvInitialiseNewTask+0x58>
        __asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	617b      	str	r3, [r7, #20]
    }
 800254e:	bf00      	nop
 8002550:	e7fe      	b.n	8002550 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01f      	beq.n	8002598 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	e012      	b.n	8002584 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	4413      	add	r3, r2
 8002564:	7819      	ldrb	r1, [r3, #0]
 8002566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	4413      	add	r3, r2
 800256c:	3334      	adds	r3, #52	; 0x34
 800256e:	460a      	mov	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4413      	add	r3, r2
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b09      	cmp	r3, #9
 8002588:	d9e9      	bls.n	800255e <prvInitialiseNewTask+0x64>
 800258a:	e000      	b.n	800258e <prvInitialiseNewTask+0x94>
            {
                break;
 800258c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002596:	e003      	b.n	80025a0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d901      	bls.n	80025aa <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025a6:	2304      	movs	r3, #4
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	2200      	movs	r2, #0
 80025ba:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	3304      	adds	r3, #4
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f9e4 	bl	800198e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	3318      	adds	r3, #24
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff f9df 	bl	800198e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	f1c3 0205 	rsb	r2, r3, #5
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	3350      	adds	r3, #80	; 0x50
 80025ea:	2204      	movs	r2, #4
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 fa3a 	bl	8005a68 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	3354      	adds	r3, #84	; 0x54
 80025f8:	2201      	movs	r2, #1
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 fa33 	bl	8005a68 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	68f9      	ldr	r1, [r7, #12]
 8002606:	69b8      	ldr	r0, [r7, #24]
 8002608:	f001 f8cc 	bl	80037a4 <pxPortInitialiseStack>
 800260c:	4602      	mov	r2, r0
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800261e:	bf00      	nop
 8002620:	3720      	adds	r7, #32
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002630:	f001 f9ea 	bl	8003a08 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <prvAddNewTaskToReadyList+0xc0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	4a2b      	ldr	r2, [pc, #172]	; (80026e8 <prvAddNewTaskToReadyList+0xc0>)
 800263c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800263e:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <prvAddNewTaskToReadyList+0xc4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002646:	4a29      	ldr	r2, [pc, #164]	; (80026ec <prvAddNewTaskToReadyList+0xc4>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <prvAddNewTaskToReadyList+0xc0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d110      	bne.n	8002676 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002654:	f000 fbfc 	bl	8002e50 <prvInitialiseTaskLists>
 8002658:	e00d      	b.n	8002676 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <prvAddNewTaskToReadyList+0xc8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <prvAddNewTaskToReadyList+0xc4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	429a      	cmp	r2, r3
 800266e:	d802      	bhi.n	8002676 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002670:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <prvAddNewTaskToReadyList+0xc4>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <prvAddNewTaskToReadyList+0xcc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <prvAddNewTaskToReadyList+0xcc>)
 800267e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <prvAddNewTaskToReadyList+0xcc>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	2201      	movs	r2, #1
 800268e:	409a      	lsls	r2, r3
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <prvAddNewTaskToReadyList+0xd0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4313      	orrs	r3, r2
 8002696:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <prvAddNewTaskToReadyList+0xd0>)
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <prvAddNewTaskToReadyList+0xd4>)
 80026a8:	441a      	add	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f7ff f979 	bl	80019a8 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026b6:	f001 f9d7 	bl	8003a68 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <prvAddNewTaskToReadyList+0xc8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00e      	beq.n	80026e0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <prvAddNewTaskToReadyList+0xc4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d207      	bcs.n	80026e0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <prvAddNewTaskToReadyList+0xd8>)
 80026d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000300 	.word	0x20000300
 80026ec:	20000228 	.word	0x20000228
 80026f0:	2000030c 	.word	0x2000030c
 80026f4:	2000031c 	.word	0x2000031c
 80026f8:	20000308 	.word	0x20000308
 80026fc:	2000022c 	.word	0x2000022c
 8002700:	e000ed04 	.word	0xe000ed04

08002704 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d017      	beq.n	8002746 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <vTaskDelay+0x60>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <vTaskDelay+0x30>
        __asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	60bb      	str	r3, [r7, #8]
    }
 8002730:	bf00      	nop
 8002732:	e7fe      	b.n	8002732 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002734:	f000 f86c 	bl	8002810 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002738:	2100      	movs	r1, #0
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fcba 	bl	80030b4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002740:	f000 f874 	bl	800282c <xTaskResumeAll>
 8002744:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <vTaskDelay+0x64>)
 800274e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800275c:	bf00      	nop
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000328 	.word	0x20000328
 8002768:	e000ed04 	.word	0xe000ed04

0800276c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <vTaskStartScheduler+0x88>)
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2300      	movs	r3, #0
 800277c:	2282      	movs	r2, #130	; 0x82
 800277e:	491e      	ldr	r1, [pc, #120]	; (80027f8 <vTaskStartScheduler+0x8c>)
 8002780:	481e      	ldr	r0, [pc, #120]	; (80027fc <vTaskStartScheduler+0x90>)
 8002782:	f7ff fe79 	bl	8002478 <xTaskCreate>
 8002786:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800278e:	f000 fcf7 	bl	8003180 <xTimerCreateTimerTask>
 8002792:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d116      	bne.n	80027c8 <vTaskStartScheduler+0x5c>
        __asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	60bb      	str	r3, [r7, #8]
    }
 80027ac:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <vTaskStartScheduler+0x94>)
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <vTaskStartScheduler+0x98>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <vTaskStartScheduler+0x9c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80027c2:	f001 f87f 	bl	80038c4 <xPortStartScheduler>
 80027c6:	e00e      	b.n	80027e6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ce:	d10a      	bne.n	80027e6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	607b      	str	r3, [r7, #4]
    }
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <vTaskStartScheduler+0xa0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000324 	.word	0x20000324
 80027f8:	080087a0 	.word	0x080087a0
 80027fc:	08002e21 	.word	0x08002e21
 8002800:	20000320 	.word	0x20000320
 8002804:	2000030c 	.word	0x2000030c
 8002808:	20000304 	.word	0x20000304
 800280c:	20000014 	.word	0x20000014

08002810 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <vTaskSuspendAll+0x18>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3301      	adds	r3, #1
 800281a:	4a03      	ldr	r2, [pc, #12]	; (8002828 <vTaskSuspendAll+0x18>)
 800281c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	20000328 	.word	0x20000328

0800282c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <xTaskResumeAll+0x114>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <xTaskResumeAll+0x2c>
        __asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	603b      	str	r3, [r7, #0]
    }
 8002854:	bf00      	nop
 8002856:	e7fe      	b.n	8002856 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002858:	f001 f8d6 	bl	8003a08 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800285c:	4b38      	ldr	r3, [pc, #224]	; (8002940 <xTaskResumeAll+0x114>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3b01      	subs	r3, #1
 8002862:	4a37      	ldr	r2, [pc, #220]	; (8002940 <xTaskResumeAll+0x114>)
 8002864:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002866:	4b36      	ldr	r3, [pc, #216]	; (8002940 <xTaskResumeAll+0x114>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d161      	bne.n	8002932 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <xTaskResumeAll+0x118>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d05d      	beq.n	8002932 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002876:	e02e      	b.n	80028d6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002878:	4b33      	ldr	r3, [pc, #204]	; (8002948 <xTaskResumeAll+0x11c>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3318      	adds	r3, #24
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f8ec 	bl	8001a62 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3304      	adds	r3, #4
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f8e7 	bl	8001a62 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	2201      	movs	r2, #1
 800289a:	409a      	lsls	r2, r3
 800289c:	4b2b      	ldr	r3, [pc, #172]	; (800294c <xTaskResumeAll+0x120>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	4a2a      	ldr	r2, [pc, #168]	; (800294c <xTaskResumeAll+0x120>)
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4a27      	ldr	r2, [pc, #156]	; (8002950 <xTaskResumeAll+0x124>)
 80028b4:	441a      	add	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3304      	adds	r3, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7ff f873 	bl	80019a8 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <xTaskResumeAll+0x128>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d302      	bcc.n	80028d6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <xTaskResumeAll+0x12c>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028d6:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <xTaskResumeAll+0x11c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1cc      	bne.n	8002878 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80028e4:	f000 fb32 	bl	8002f4c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80028e8:	4b1c      	ldr	r3, [pc, #112]	; (800295c <xTaskResumeAll+0x130>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d010      	beq.n	8002916 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80028f4:	f000 f846 	bl	8002984 <xTaskIncrementTick>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <xTaskResumeAll+0x12c>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f1      	bne.n	80028f4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <xTaskResumeAll+0x130>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <xTaskResumeAll+0x12c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800291e:	2301      	movs	r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <xTaskResumeAll+0x134>)
 8002924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002932:	f001 f899 	bl	8003a68 <vPortExitCritical>

    return xAlreadyYielded;
 8002936:	68bb      	ldr	r3, [r7, #8]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000328 	.word	0x20000328
 8002944:	20000300 	.word	0x20000300
 8002948:	200002c0 	.word	0x200002c0
 800294c:	20000308 	.word	0x20000308
 8002950:	2000022c 	.word	0x2000022c
 8002954:	20000228 	.word	0x20000228
 8002958:	20000314 	.word	0x20000314
 800295c:	20000310 	.word	0x20000310
 8002960:	e000ed04 	.word	0xe000ed04

08002964 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <xTaskGetTickCount+0x1c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002970:	687b      	ldr	r3, [r7, #4]
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000304 	.word	0x20000304

08002984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800298e:	4b4e      	ldr	r3, [pc, #312]	; (8002ac8 <xTaskIncrementTick+0x144>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 808e 	bne.w	8002ab4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002998:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <xTaskIncrementTick+0x148>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	3301      	adds	r3, #1
 800299e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80029a0:	4a4a      	ldr	r2, [pc, #296]	; (8002acc <xTaskIncrementTick+0x148>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d120      	bne.n	80029ee <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80029ac:	4b48      	ldr	r3, [pc, #288]	; (8002ad0 <xTaskIncrementTick+0x14c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <xTaskIncrementTick+0x48>
        __asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	603b      	str	r3, [r7, #0]
    }
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <xTaskIncrementTick+0x46>
 80029cc:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <xTaskIncrementTick+0x14c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b40      	ldr	r3, [pc, #256]	; (8002ad4 <xTaskIncrementTick+0x150>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a3e      	ldr	r2, [pc, #248]	; (8002ad0 <xTaskIncrementTick+0x14c>)
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4a3e      	ldr	r2, [pc, #248]	; (8002ad4 <xTaskIncrementTick+0x150>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <xTaskIncrementTick+0x154>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	4a3c      	ldr	r2, [pc, #240]	; (8002ad8 <xTaskIncrementTick+0x154>)
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	f000 faaf 	bl	8002f4c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029ee:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <xTaskIncrementTick+0x158>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d348      	bcc.n	8002a8a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029f8:	4b35      	ldr	r3, [pc, #212]	; (8002ad0 <xTaskIncrementTick+0x14c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d104      	bne.n	8002a0c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a02:	4b36      	ldr	r3, [pc, #216]	; (8002adc <xTaskIncrementTick+0x158>)
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a08:	601a      	str	r2, [r3, #0]
                    break;
 8002a0a:	e03e      	b.n	8002a8a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <xTaskIncrementTick+0x14c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d203      	bcs.n	8002a2c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a24:	4a2d      	ldr	r2, [pc, #180]	; (8002adc <xTaskIncrementTick+0x158>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a2a:	e02e      	b.n	8002a8a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff f816 	bl	8001a62 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3318      	adds	r3, #24
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f80d 	bl	8001a62 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <xTaskIncrementTick+0x15c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <xTaskIncrementTick+0x15c>)
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <xTaskIncrementTick+0x160>)
 8002a68:	441a      	add	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f7fe ff99 	bl	80019a8 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <xTaskIncrementTick+0x164>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3b9      	bcc.n	80029f8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a88:	e7b6      	b.n	80029f8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a8a:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <xTaskIncrementTick+0x164>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a90:	4914      	ldr	r1, [pc, #80]	; (8002ae4 <xTaskIncrementTick+0x160>)
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d901      	bls.n	8002aa6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <xTaskIncrementTick+0x168>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e004      	b.n	8002abe <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <xTaskIncrementTick+0x16c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <xTaskIncrementTick+0x16c>)
 8002abc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002abe:	697b      	ldr	r3, [r7, #20]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000328 	.word	0x20000328
 8002acc:	20000304 	.word	0x20000304
 8002ad0:	200002b8 	.word	0x200002b8
 8002ad4:	200002bc 	.word	0x200002bc
 8002ad8:	20000318 	.word	0x20000318
 8002adc:	20000320 	.word	0x20000320
 8002ae0:	20000308 	.word	0x20000308
 8002ae4:	2000022c 	.word	0x2000022c
 8002ae8:	20000228 	.word	0x20000228
 8002aec:	20000314 	.word	0x20000314
 8002af0:	20000310 	.word	0x20000310

08002af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002afa:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <vTaskSwitchContext+0xa4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <vTaskSwitchContext+0xa8>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002b08:	e03f      	b.n	8002b8a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <vTaskSwitchContext+0xa8>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b10:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <vTaskSwitchContext+0xac>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	f1c3 031f 	rsb	r3, r3, #31
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	491f      	ldr	r1, [pc, #124]	; (8002ba4 <vTaskSwitchContext+0xb0>)
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10a      	bne.n	8002b50 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	607b      	str	r3, [r7, #4]
    }
 8002b4c:	bf00      	nop
 8002b4e:	e7fe      	b.n	8002b4e <vTaskSwitchContext+0x5a>
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <vTaskSwitchContext+0xb0>)
 8002b5c:	4413      	add	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	3308      	adds	r3, #8
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d104      	bne.n	8002b80 <vTaskSwitchContext+0x8c>
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <vTaskSwitchContext+0xb4>)
 8002b88:	6013      	str	r3, [r2, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000328 	.word	0x20000328
 8002b9c:	20000314 	.word	0x20000314
 8002ba0:	20000308 	.word	0x20000308
 8002ba4:	2000022c 	.word	0x2000022c
 8002ba8:	20000228 	.word	0x20000228

08002bac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	60fb      	str	r3, [r7, #12]
    }
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <vTaskPlaceOnEventList+0x44>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3318      	adds	r3, #24
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe ff08 	bl	80019f0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002be0:	2101      	movs	r1, #1
 8002be2:	6838      	ldr	r0, [r7, #0]
 8002be4:	f000 fa66 	bl	80030b4 <prvAddCurrentTaskToDelayedList>
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000228 	.word	0x20000228

08002bf4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	617b      	str	r3, [r7, #20]
    }
 8002c18:	bf00      	nop
 8002c1a:	e7fe      	b.n	8002c1a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <vTaskPlaceOnEventListRestricted+0x54>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3318      	adds	r3, #24
 8002c22:	4619      	mov	r1, r3
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7fe febf 	bl	80019a8 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c34:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	68b8      	ldr	r0, [r7, #8]
 8002c3a:	f000 fa3b 	bl	80030b4 <prvAddCurrentTaskToDelayedList>
    }
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000228 	.word	0x20000228

08002c4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	60fb      	str	r3, [r7, #12]
    }
 8002c74:	bf00      	nop
 8002c76:	e7fe      	b.n	8002c76 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	3318      	adds	r3, #24
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fef0 	bl	8001a62 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <xTaskRemoveFromEventList+0xac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11c      	bne.n	8002cc4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fee7 	bl	8001a62 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	2201      	movs	r2, #1
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <xTaskRemoveFromEventList+0xb0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <xTaskRemoveFromEventList+0xb0>)
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <xTaskRemoveFromEventList+0xb4>)
 8002cb4:	441a      	add	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	f7fe fe73 	bl	80019a8 <vListInsertEnd>
 8002cc2:	e005      	b.n	8002cd0 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	3318      	adds	r3, #24
 8002cc8:	4619      	mov	r1, r3
 8002cca:	480e      	ldr	r0, [pc, #56]	; (8002d04 <xTaskRemoveFromEventList+0xb8>)
 8002ccc:	f7fe fe6c 	bl	80019a8 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <xTaskRemoveFromEventList+0xbc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d905      	bls.n	8002cea <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <xTaskRemoveFromEventList+0xc0>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e001      	b.n	8002cee <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002cee:	697b      	ldr	r3, [r7, #20]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000328 	.word	0x20000328
 8002cfc:	20000308 	.word	0x20000308
 8002d00:	2000022c 	.word	0x2000022c
 8002d04:	200002c0 	.word	0x200002c0
 8002d08:	20000228 	.word	0x20000228
 8002d0c:	20000314 	.word	0x20000314

08002d10 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <vTaskInternalSetTimeOutState+0x24>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <vTaskInternalSetTimeOutState+0x28>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	605a      	str	r2, [r3, #4]
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	20000318 	.word	0x20000318
 8002d38:	20000304 	.word	0x20000304

08002d3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	613b      	str	r3, [r7, #16]
    }
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	60fb      	str	r3, [r7, #12]
    }
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002d7e:	f000 fe43 	bl	8003a08 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002d82:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <xTaskCheckForTimeOut+0xc4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d9a:	d102      	bne.n	8002da2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	e026      	b.n	8002df0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <xTaskCheckForTimeOut+0xc8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d00a      	beq.n	8002dc4 <xTaskCheckForTimeOut+0x88>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d305      	bcc.n	8002dc4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002db8:	2301      	movs	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e015      	b.n	8002df0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d20b      	bcs.n	8002de6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	1ad2      	subs	r2, r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ff98 	bl	8002d10 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	e004      	b.n	8002df0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002dec:	2301      	movs	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002df0:	f000 fe3a 	bl	8003a68 <vPortExitCritical>

    return xReturn;
 8002df4:	69fb      	ldr	r3, [r7, #28]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000304 	.word	0x20000304
 8002e04:	20000318 	.word	0x20000318

08002e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <vTaskMissedYield+0x14>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	20000314 	.word	0x20000314

08002e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e28:	f000 f852 	bl	8002ed0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <prvIdleTask+0x28>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d9f9      	bls.n	8002e28 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <prvIdleTask+0x2c>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e44:	e7f0      	b.n	8002e28 <prvIdleTask+0x8>
 8002e46:	bf00      	nop
 8002e48:	2000022c 	.word	0x2000022c
 8002e4c:	e000ed04 	.word	0xe000ed04

08002e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	e00c      	b.n	8002e76 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <prvInitialiseTaskLists+0x60>)
 8002e68:	4413      	add	r3, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fd6f 	bl	800194e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3301      	adds	r3, #1
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d9ef      	bls.n	8002e5c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e7c:	480d      	ldr	r0, [pc, #52]	; (8002eb4 <prvInitialiseTaskLists+0x64>)
 8002e7e:	f7fe fd66 	bl	800194e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e82:	480d      	ldr	r0, [pc, #52]	; (8002eb8 <prvInitialiseTaskLists+0x68>)
 8002e84:	f7fe fd63 	bl	800194e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e88:	480c      	ldr	r0, [pc, #48]	; (8002ebc <prvInitialiseTaskLists+0x6c>)
 8002e8a:	f7fe fd60 	bl	800194e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002e8e:	480c      	ldr	r0, [pc, #48]	; (8002ec0 <prvInitialiseTaskLists+0x70>)
 8002e90:	f7fe fd5d 	bl	800194e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002e94:	480b      	ldr	r0, [pc, #44]	; (8002ec4 <prvInitialiseTaskLists+0x74>)
 8002e96:	f7fe fd5a 	bl	800194e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <prvInitialiseTaskLists+0x78>)
 8002e9c:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <prvInitialiseTaskLists+0x64>)
 8002e9e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <prvInitialiseTaskLists+0x7c>)
 8002ea2:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <prvInitialiseTaskLists+0x68>)
 8002ea4:	601a      	str	r2, [r3, #0]
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000022c 	.word	0x2000022c
 8002eb4:	20000290 	.word	0x20000290
 8002eb8:	200002a4 	.word	0x200002a4
 8002ebc:	200002c0 	.word	0x200002c0
 8002ec0:	200002d4 	.word	0x200002d4
 8002ec4:	200002ec 	.word	0x200002ec
 8002ec8:	200002b8 	.word	0x200002b8
 8002ecc:	200002bc 	.word	0x200002bc

08002ed0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ed6:	e019      	b.n	8002f0c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002ed8:	f000 fd96 	bl	8003a08 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <prvCheckTasksWaitingTermination+0x50>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe fdba 	bl	8001a62 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <prvCheckTasksWaitingTermination+0x54>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <prvCheckTasksWaitingTermination+0x54>)
 8002ef6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <prvCheckTasksWaitingTermination+0x58>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3b01      	subs	r3, #1
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <prvCheckTasksWaitingTermination+0x58>)
 8002f00:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002f02:	f000 fdb1 	bl	8003a68 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f810 	bl	8002f2c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <prvCheckTasksWaitingTermination+0x58>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e1      	bne.n	8002ed8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200002d4 	.word	0x200002d4
 8002f24:	20000300 	.word	0x20000300
 8002f28:	200002e8 	.word	0x200002e8

08002f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 ff67 	bl	8003e0c <vPortFree>
                vPortFree( pxTCB );
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 ff64 	bl	8003e0c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <prvResetNextTaskUnblockTime+0x30>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <prvResetNextTaskUnblockTime+0x34>)
 8002f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f60:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f62:	e005      	b.n	8002f70 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <prvResetNextTaskUnblockTime+0x30>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <prvResetNextTaskUnblockTime+0x34>)
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	200002b8 	.word	0x200002b8
 8002f80:	20000320 	.word	0x20000320

08002f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <xTaskGetSchedulerState+0x34>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002f92:	2301      	movs	r3, #1
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	e008      	b.n	8002faa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <xTaskGetSchedulerState+0x38>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	e001      	b.n	8002faa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002faa:	687b      	ldr	r3, [r7, #4]
    }
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	2000030c 	.word	0x2000030c
 8002fbc:	20000328 	.word	0x20000328

08002fc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d063      	beq.n	800309e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002fd6:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <xTaskPriorityDisinherit+0xe8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d00a      	beq.n	8002ff6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	60fb      	str	r3, [r7, #12]
    }
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10a      	bne.n	8003014 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	60bb      	str	r3, [r7, #8]
    }
 8003010:	bf00      	nop
 8003012:	e7fe      	b.n	8003012 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003018:	1e5a      	subs	r2, r3, #1
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003026:	429a      	cmp	r2, r3
 8003028:	d039      	beq.n	800309e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d135      	bne.n	800309e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	3304      	adds	r3, #4
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fd13 	bl	8001a62 <uxListRemove>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	2201      	movs	r2, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43da      	mvns	r2, r3
 800304e:	4b17      	ldr	r3, [pc, #92]	; (80030ac <xTaskPriorityDisinherit+0xec>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4013      	ands	r3, r2
 8003054:	4a15      	ldr	r2, [pc, #84]	; (80030ac <xTaskPriorityDisinherit+0xec>)
 8003056:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	f1c3 0205 	rsb	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	2201      	movs	r2, #1
 8003072:	409a      	lsls	r2, r3
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <xTaskPriorityDisinherit+0xec>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <xTaskPriorityDisinherit+0xec>)
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <xTaskPriorityDisinherit+0xf0>)
 800308c:	441a      	add	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	3304      	adds	r3, #4
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f7fe fc87 	bl	80019a8 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800309a:	2301      	movs	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800309e:	697b      	ldr	r3, [r7, #20]
    }
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000228 	.word	0x20000228
 80030ac:	20000308 	.word	0x20000308
 80030b0:	2000022c 	.word	0x2000022c

080030b4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80030be:	4b29      	ldr	r3, [pc, #164]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3304      	adds	r3, #4
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fcc9 	bl	8001a62 <uxListRemove>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	2201      	movs	r2, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	4b21      	ldr	r3, [pc, #132]	; (800316c <prvAddCurrentTaskToDelayedList+0xb8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4013      	ands	r3, r2
 80030ea:	4a20      	ldr	r2, [pc, #128]	; (800316c <prvAddCurrentTaskToDelayedList+0xb8>)
 80030ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f4:	d10a      	bne.n	800310c <prvAddCurrentTaskToDelayedList+0x58>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3304      	adds	r3, #4
 8003102:	4619      	mov	r1, r3
 8003104:	481a      	ldr	r0, [pc, #104]	; (8003170 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003106:	f7fe fc4f 	bl	80019a8 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800310a:	e026      	b.n	800315a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	429a      	cmp	r2, r3
 8003122:	d209      	bcs.n	8003138 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3304      	adds	r3, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f7fe fc5d 	bl	80019f0 <vListInsert>
}
 8003136:	e010      	b.n	800315a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <prvAddCurrentTaskToDelayedList+0xc4>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <prvAddCurrentTaskToDelayedList+0xb4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3304      	adds	r3, #4
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f7fe fc53 	bl	80019f0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <prvAddCurrentTaskToDelayedList+0xc8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	429a      	cmp	r2, r3
 8003152:	d202      	bcs.n	800315a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003154:	4a09      	ldr	r2, [pc, #36]	; (800317c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	6013      	str	r3, [r2, #0]
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000304 	.word	0x20000304
 8003168:	20000228 	.word	0x20000228
 800316c:	20000308 	.word	0x20000308
 8003170:	200002ec 	.word	0x200002ec
 8003174:	200002bc 	.word	0x200002bc
 8003178:	200002b8 	.word	0x200002b8
 800317c:	20000320 	.word	0x20000320

08003180 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800318a:	f000 fad5 	bl	8003738 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <xTimerCreateTimerTask+0x54>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <xTimerCreateTimerTask+0x58>)
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	2302      	movs	r3, #2
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031a4:	490d      	ldr	r1, [pc, #52]	; (80031dc <xTimerCreateTimerTask+0x5c>)
 80031a6:	480e      	ldr	r0, [pc, #56]	; (80031e0 <xTimerCreateTimerTask+0x60>)
 80031a8:	f7ff f966 	bl	8002478 <xTaskCreate>
 80031ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	603b      	str	r3, [r7, #0]
    }
 80031c6:	bf00      	nop
 80031c8:	e7fe      	b.n	80031c8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80031ca:	687b      	ldr	r3, [r7, #4]
    }
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	2000035c 	.word	0x2000035c
 80031d8:	20000360 	.word	0x20000360
 80031dc:	080087a8 	.word	0x080087a8
 80031e0:	08003319 	.word	0x08003319

080031e4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <xTimerGenericCommand+0x2e>
        __asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	623b      	str	r3, [r7, #32]
    }
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <xTimerGenericCommand+0x98>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d02a      	beq.n	8003270 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b05      	cmp	r3, #5
 800322a:	dc18      	bgt.n	800325e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800322c:	f7ff feaa 	bl	8002f84 <xTaskGetSchedulerState>
 8003230:	4603      	mov	r3, r0
 8003232:	2b02      	cmp	r3, #2
 8003234:	d109      	bne.n	800324a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <xTimerGenericCommand+0x98>)
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	f107 0114 	add.w	r1, r7, #20
 800323e:	2300      	movs	r3, #0
 8003240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003242:	f7fe fd23 	bl	8001c8c <xQueueGenericSend>
 8003246:	6278      	str	r0, [r7, #36]	; 0x24
 8003248:	e012      	b.n	8003270 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <xTimerGenericCommand+0x98>)
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	f107 0114 	add.w	r1, r7, #20
 8003252:	2300      	movs	r3, #0
 8003254:	2200      	movs	r2, #0
 8003256:	f7fe fd19 	bl	8001c8c <xQueueGenericSend>
 800325a:	6278      	str	r0, [r7, #36]	; 0x24
 800325c:	e008      	b.n	8003270 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <xTimerGenericCommand+0x98>)
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	f107 0114 	add.w	r1, r7, #20
 8003266:	2300      	movs	r3, #0
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	f7fe fe0d 	bl	8001e88 <xQueueGenericSendFromISR>
 800326e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003272:	4618      	mov	r0, r3
 8003274:	3728      	adds	r7, #40	; 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	2000035c 	.word	0x2000035c

08003280 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <prvProcessExpiredTimer+0x94>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	3304      	adds	r3, #4
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe fbe2 	bl	8001a62 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d022      	beq.n	80032f2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	18d1      	adds	r1, r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	6978      	ldr	r0, [r7, #20]
 80032ba:	f000 f8d1 	bl	8003460 <prvInsertTimerInActiveList>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01f      	beq.n	8003304 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80032c4:	2300      	movs	r3, #0
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2300      	movs	r3, #0
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	2100      	movs	r1, #0
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff88 	bl	80031e4 <xTimerGenericCommand>
 80032d4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d113      	bne.n	8003304 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	60fb      	str	r3, [r7, #12]
    }
 80032ee:	bf00      	nop
 80032f0:	e7fe      	b.n	80032f0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	6978      	ldr	r0, [r7, #20]
 800330a:	4798      	blx	r3
    }
 800330c:	bf00      	nop
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000354 	.word	0x20000354

08003318 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003320:	f107 0308 	add.w	r3, r7, #8
 8003324:	4618      	mov	r0, r3
 8003326:	f000 f857 	bl	80033d8 <prvGetNextExpireTime>
 800332a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4619      	mov	r1, r3
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f803 	bl	800333c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003336:	f000 f8d5 	bl	80034e4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800333a:	e7f1      	b.n	8003320 <prvTimerTask+0x8>

0800333c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003346:	f7ff fa63 	bl	8002810 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800334a:	f107 0308 	add.w	r3, r7, #8
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f866 	bl	8003420 <prvSampleTimeNow>
 8003354:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d130      	bne.n	80033be <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <prvProcessTimerOrBlockTask+0x3c>
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	429a      	cmp	r2, r3
 8003368:	d806      	bhi.n	8003378 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800336a:	f7ff fa5f 	bl	800282c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800336e:	68f9      	ldr	r1, [r7, #12]
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff85 	bl	8003280 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003376:	e024      	b.n	80033c2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <prvProcessTimerOrBlockTask+0x90>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <prvProcessTimerOrBlockTask+0x50>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <prvProcessTimerOrBlockTask+0x52>
 800338c:	2300      	movs	r3, #0
 800338e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <prvProcessTimerOrBlockTask+0x94>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	f7ff f837 	bl	8002410 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80033a2:	f7ff fa43 	bl	800282c <xTaskResumeAll>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <prvProcessTimerOrBlockTask+0x98>)
 80033ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	f3bf 8f6f 	isb	sy
    }
 80033bc:	e001      	b.n	80033c2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80033be:	f7ff fa35 	bl	800282c <xTaskResumeAll>
    }
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000358 	.word	0x20000358
 80033d0:	2000035c 	.word	0x2000035c
 80033d4:	e000ed04 	.word	0xe000ed04

080033d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <prvGetNextExpireTime+0x44>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <prvGetNextExpireTime+0x16>
 80033ea:	2201      	movs	r2, #1
 80033ec:	e000      	b.n	80033f0 <prvGetNextExpireTime+0x18>
 80033ee:	2200      	movs	r2, #0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <prvGetNextExpireTime+0x44>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e001      	b.n	800340c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800340c:	68fb      	ldr	r3, [r7, #12]
    }
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000354 	.word	0x20000354

08003420 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003428:	f7ff fa9c 	bl	8002964 <xTaskGetTickCount>
 800342c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <prvSampleTimeNow+0x3c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	429a      	cmp	r2, r3
 8003436:	d205      	bcs.n	8003444 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003438:	f000 f91a 	bl	8003670 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e002      	b.n	800344a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800344a:	4a04      	ldr	r2, [pc, #16]	; (800345c <prvSampleTimeNow+0x3c>)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003450:	68fb      	ldr	r3, [r7, #12]
    }
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000364 	.word	0x20000364

08003460 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d812      	bhi.n	80034ac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	1ad2      	subs	r2, r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	429a      	cmp	r2, r3
 8003492:	d302      	bcc.n	800349a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003494:	2301      	movs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e01b      	b.n	80034d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <prvInsertTimerInActiveList+0x7c>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7fe faa3 	bl	80019f0 <vListInsert>
 80034aa:	e012      	b.n	80034d2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d206      	bcs.n	80034c2 <prvInsertTimerInActiveList+0x62>
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80034bc:	2301      	movs	r3, #1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	e007      	b.n	80034d2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <prvInsertTimerInActiveList+0x80>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3304      	adds	r3, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f7fe fa8f 	bl	80019f0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80034d2:	697b      	ldr	r3, [r7, #20]
    }
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000358 	.word	0x20000358
 80034e0:	20000354 	.word	0x20000354

080034e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	; 0x30
 80034e8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034ea:	e0ae      	b.n	800364a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f2c0 80aa 	blt.w	8003648 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f7fe faac 	bl	8001a62 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff87 	bl	8003420 <prvSampleTimeNow>
 8003512:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b09      	cmp	r3, #9
 8003518:	f200 8097 	bhi.w	800364a <prvProcessReceivedCommands+0x166>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <prvProcessReceivedCommands+0x40>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	0800354d 	.word	0x0800354d
 8003528:	0800354d 	.word	0x0800354d
 800352c:	0800354d 	.word	0x0800354d
 8003530:	080035c1 	.word	0x080035c1
 8003534:	080035d5 	.word	0x080035d5
 8003538:	0800361f 	.word	0x0800361f
 800353c:	0800354d 	.word	0x0800354d
 8003540:	0800354d 	.word	0x0800354d
 8003544:	080035c1 	.word	0x080035c1
 8003548:	080035d5 	.word	0x080035d5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	b2da      	uxtb	r2, r3
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	18d1      	adds	r1, r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800356c:	f7ff ff78 	bl	8003460 <prvInsertTimerInActiveList>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d069      	beq.n	800364a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800357c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d05e      	beq.n	800364a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	441a      	add	r2, r3
 8003594:	2300      	movs	r3, #0
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2300      	movs	r3, #0
 800359a:	2100      	movs	r1, #0
 800359c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800359e:	f7ff fe21 	bl	80031e4 <xTimerGenericCommand>
 80035a2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d14f      	bne.n	800364a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	61bb      	str	r3, [r7, #24]
    }
 80035bc:	bf00      	nop
 80035be:	e7fe      	b.n	80035be <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80035d2:	e03a      	b.n	800364a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <prvProcessReceivedCommands+0x126>
        __asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	617b      	str	r3, [r7, #20]
    }
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	18d1      	adds	r1, r2, r3
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003618:	f7ff ff22 	bl	8003460 <prvInsertTimerInActiveList>
                        break;
 800361c:	e015      	b.n	800364a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d103      	bne.n	8003634 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800362c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800362e:	f000 fbed 	bl	8003e0c <vPortFree>
 8003632:	e00a      	b.n	800364a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	b2da      	uxtb	r2, r3
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003646:	e000      	b.n	800364a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003648:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <prvProcessReceivedCommands+0x188>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f107 0108 	add.w	r1, r7, #8
 8003652:	2200      	movs	r2, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe fcc1 	bl	8001fdc <xQueueReceive>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	f47f af45 	bne.w	80034ec <prvProcessReceivedCommands+0x8>
        }
    }
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	3728      	adds	r7, #40	; 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	2000035c 	.word	0x2000035c

08003670 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003676:	e048      	b.n	800370a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <prvSwitchTimerLists+0xc0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003682:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <prvSwitchTimerLists+0xc0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3304      	adds	r3, #4
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe f9e6 	bl	8001a62 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d02e      	beq.n	800370a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d90e      	bls.n	80036dc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80036ca:	4b19      	ldr	r3, [pc, #100]	; (8003730 <prvSwitchTimerLists+0xc0>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f7fe f98b 	bl	80019f0 <vListInsert>
 80036da:	e016      	b.n	800370a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036dc:	2300      	movs	r3, #0
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2300      	movs	r3, #0
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	2100      	movs	r1, #0
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff fd7c 	bl	80031e4 <xTimerGenericCommand>
 80036ec:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <prvSwitchTimerLists+0x9a>
        __asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	603b      	str	r3, [r7, #0]
    }
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <prvSwitchTimerLists+0xc0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1b1      	bne.n	8003678 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <prvSwitchTimerLists+0xc0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <prvSwitchTimerLists+0xc4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a04      	ldr	r2, [pc, #16]	; (8003730 <prvSwitchTimerLists+0xc0>)
 8003720:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003722:	4a04      	ldr	r2, [pc, #16]	; (8003734 <prvSwitchTimerLists+0xc4>)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	6013      	str	r3, [r2, #0]
    }
 8003728:	bf00      	nop
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000354 	.word	0x20000354
 8003734:	20000358 	.word	0x20000358

08003738 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800373c:	f000 f964 	bl	8003a08 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003740:	4b12      	ldr	r3, [pc, #72]	; (800378c <prvCheckForValidListAndQueue+0x54>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d11d      	bne.n	8003784 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003748:	4811      	ldr	r0, [pc, #68]	; (8003790 <prvCheckForValidListAndQueue+0x58>)
 800374a:	f7fe f900 	bl	800194e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800374e:	4811      	ldr	r0, [pc, #68]	; (8003794 <prvCheckForValidListAndQueue+0x5c>)
 8003750:	f7fe f8fd 	bl	800194e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <prvCheckForValidListAndQueue+0x60>)
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <prvCheckForValidListAndQueue+0x58>)
 8003758:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <prvCheckForValidListAndQueue+0x64>)
 800375c:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <prvCheckForValidListAndQueue+0x5c>)
 800375e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003760:	2200      	movs	r2, #0
 8003762:	210c      	movs	r1, #12
 8003764:	200a      	movs	r0, #10
 8003766:	f7fe fa0f 	bl	8001b88 <xQueueGenericCreate>
 800376a:	4603      	mov	r3, r0
 800376c:	4a07      	ldr	r2, [pc, #28]	; (800378c <prvCheckForValidListAndQueue+0x54>)
 800376e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <prvCheckForValidListAndQueue+0x54>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <prvCheckForValidListAndQueue+0x54>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4908      	ldr	r1, [pc, #32]	; (80037a0 <prvCheckForValidListAndQueue+0x68>)
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fe1c 	bl	80023bc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003784:	f000 f970 	bl	8003a68 <vPortExitCritical>
    }
 8003788:	bf00      	nop
 800378a:	bd80      	pop	{r7, pc}
 800378c:	2000035c 	.word	0x2000035c
 8003790:	2000032c 	.word	0x2000032c
 8003794:	20000340 	.word	0x20000340
 8003798:	20000354 	.word	0x20000354
 800379c:	20000358 	.word	0x20000358
 80037a0:	080087b0 	.word	0x080087b0

080037a4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3b04      	subs	r3, #4
 80037b4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3b04      	subs	r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f023 0201 	bic.w	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3b04      	subs	r3, #4
 80037d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80037d4:	4a0c      	ldr	r2, [pc, #48]	; (8003808 <pxPortInitialiseStack+0x64>)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3b14      	subs	r3, #20
 80037de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	3b04      	subs	r3, #4
 80037ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f06f 0202 	mvn.w	r2, #2
 80037f2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3b20      	subs	r3, #32
 80037f8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80037fa:	68fb      	ldr	r3, [r7, #12]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	0800380d 	.word	0x0800380d

0800380c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <prvTaskExitError+0x54>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800381e:	d00a      	beq.n	8003836 <prvTaskExitError+0x2a>
        __asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	60fb      	str	r3, [r7, #12]
    }
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <prvTaskExitError+0x28>
        __asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	60bb      	str	r3, [r7, #8]
    }
 8003848:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800384a:	bf00      	nop
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0fc      	beq.n	800384c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003852:	bf00      	nop
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	20000018 	.word	0x20000018
	...

08003870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <pxCurrentTCBConst2>)
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	6808      	ldr	r0, [r1, #0]
 8003876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387a:	f380 8809 	msr	PSP, r0
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f380 8811 	msr	BASEPRI, r0
 800388a:	4770      	bx	lr
 800388c:	f3af 8000 	nop.w

08003890 <pxCurrentTCBConst2>:
 8003890:	20000228 	.word	0x20000228
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop

08003898 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003898:	4808      	ldr	r0, [pc, #32]	; (80038bc <prvPortStartFirstTask+0x24>)
 800389a:	6800      	ldr	r0, [r0, #0]
 800389c:	6800      	ldr	r0, [r0, #0]
 800389e:	f380 8808 	msr	MSP, r0
 80038a2:	f04f 0000 	mov.w	r0, #0
 80038a6:	f380 8814 	msr	CONTROL, r0
 80038aa:	b662      	cpsie	i
 80038ac:	b661      	cpsie	f
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	df00      	svc	0
 80038b8:	bf00      	nop
 80038ba:	0000      	.short	0x0000
 80038bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop

080038c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80038ca:	4b46      	ldr	r3, [pc, #280]	; (80039e4 <xPortStartScheduler+0x120>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a46      	ldr	r2, [pc, #280]	; (80039e8 <xPortStartScheduler+0x124>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d10a      	bne.n	80038ea <xPortStartScheduler+0x26>
        __asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	613b      	str	r3, [r7, #16]
    }
 80038e6:	bf00      	nop
 80038e8:	e7fe      	b.n	80038e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80038ea:	4b3e      	ldr	r3, [pc, #248]	; (80039e4 <xPortStartScheduler+0x120>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a3f      	ldr	r2, [pc, #252]	; (80039ec <xPortStartScheduler+0x128>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d10a      	bne.n	800390a <xPortStartScheduler+0x46>
        __asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	60fb      	str	r3, [r7, #12]
    }
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800390a:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <xPortStartScheduler+0x12c>)
 800390c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800392c:	b2da      	uxtb	r2, r3
 800392e:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <xPortStartScheduler+0x130>)
 8003930:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <xPortStartScheduler+0x134>)
 8003934:	2207      	movs	r2, #7
 8003936:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003938:	e009      	b.n	800394e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800393a:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <xPortStartScheduler+0x134>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3b01      	subs	r3, #1
 8003940:	4a2d      	ldr	r2, [pc, #180]	; (80039f8 <xPortStartScheduler+0x134>)
 8003942:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	b2db      	uxtb	r3, r3
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b80      	cmp	r3, #128	; 0x80
 8003958:	d0ef      	beq.n	800393a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800395a:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <xPortStartScheduler+0x134>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f1c3 0307 	rsb	r3, r3, #7
 8003962:	2b04      	cmp	r3, #4
 8003964:	d00a      	beq.n	800397c <xPortStartScheduler+0xb8>
        __asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	60bb      	str	r3, [r7, #8]
    }
 8003978:	bf00      	nop
 800397a:	e7fe      	b.n	800397a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800397c:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <xPortStartScheduler+0x134>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <xPortStartScheduler+0x134>)
 8003984:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003986:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <xPortStartScheduler+0x134>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800398e:	4a1a      	ldr	r2, [pc, #104]	; (80039f8 <xPortStartScheduler+0x134>)
 8003990:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800399a:	4b18      	ldr	r3, [pc, #96]	; (80039fc <xPortStartScheduler+0x138>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a17      	ldr	r2, [pc, #92]	; (80039fc <xPortStartScheduler+0x138>)
 80039a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <xPortStartScheduler+0x138>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a14      	ldr	r2, [pc, #80]	; (80039fc <xPortStartScheduler+0x138>)
 80039ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80039b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80039b2:	f000 f8db 	bl	8003b6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80039b6:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <xPortStartScheduler+0x13c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80039bc:	f000 f8fa 	bl	8003bb4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <xPortStartScheduler+0x140>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <xPortStartScheduler+0x140>)
 80039c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80039ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80039cc:	f7ff ff64 	bl	8003898 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80039d0:	f7ff f890 	bl	8002af4 <vTaskSwitchContext>
    prvTaskExitError();
 80039d4:	f7ff ff1a 	bl	800380c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	e000ed00 	.word	0xe000ed00
 80039e8:	410fc271 	.word	0x410fc271
 80039ec:	410fc270 	.word	0x410fc270
 80039f0:	e000e400 	.word	0xe000e400
 80039f4:	20000368 	.word	0x20000368
 80039f8:	2000036c 	.word	0x2000036c
 80039fc:	e000ed20 	.word	0xe000ed20
 8003a00:	20000018 	.word	0x20000018
 8003a04:	e000ef34 	.word	0xe000ef34

08003a08 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
        __asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	607b      	str	r3, [r7, #4]
    }
 8003a20:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003a22:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <vPortEnterCritical+0x58>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3301      	adds	r3, #1
 8003a28:	4a0d      	ldr	r2, [pc, #52]	; (8003a60 <vPortEnterCritical+0x58>)
 8003a2a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <vPortEnterCritical+0x58>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10f      	bne.n	8003a54 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <vPortEnterCritical+0x5c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <vPortEnterCritical+0x4c>
        __asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	603b      	str	r3, [r7, #0]
    }
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <vPortEnterCritical+0x4a>
    }
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	20000018 	.word	0x20000018
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <vPortExitCritical+0x50>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <vPortExitCritical+0x24>
        __asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	607b      	str	r3, [r7, #4]
    }
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <vPortExitCritical+0x50>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <vPortExitCritical+0x50>)
 8003a94:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <vPortExitCritical+0x50>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <vPortExitCritical+0x42>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f383 8811 	msr	BASEPRI, r3
    }
 8003aa8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000018 	.word	0x20000018
 8003abc:	00000000 	.word	0x00000000

08003ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ac0:	f3ef 8009 	mrs	r0, PSP
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <pxCurrentTCBConst>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	f01e 0f10 	tst.w	lr, #16
 8003ad0:	bf08      	it	eq
 8003ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ada:	6010      	str	r0, [r2, #0]
 8003adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ae4:	f380 8811 	msr	BASEPRI, r0
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f7ff f800 	bl	8002af4 <vTaskSwitchContext>
 8003af4:	f04f 0000 	mov.w	r0, #0
 8003af8:	f380 8811 	msr	BASEPRI, r0
 8003afc:	bc09      	pop	{r0, r3}
 8003afe:	6819      	ldr	r1, [r3, #0]
 8003b00:	6808      	ldr	r0, [r1, #0]
 8003b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b06:	f01e 0f10 	tst.w	lr, #16
 8003b0a:	bf08      	it	eq
 8003b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b10:	f380 8809 	msr	PSP, r0
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	f3af 8000 	nop.w

08003b20 <pxCurrentTCBConst>:
 8003b20:	20000228 	.word	0x20000228
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop

08003b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
        __asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	607b      	str	r3, [r7, #4]
    }
 8003b40:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003b42:	f7fe ff1f 	bl	8002984 <xTaskIncrementTick>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <SysTick_Handler+0x40>)
 8003b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f383 8811 	msr	BASEPRI, r3
    }
 8003b5e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <vPortSetupTimerInterrupt+0x34>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <vPortSetupTimerInterrupt+0x38>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <vPortSetupTimerInterrupt+0x3c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <vPortSetupTimerInterrupt+0x40>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <vPortSetupTimerInterrupt+0x44>)
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b8e:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <vPortSetupTimerInterrupt+0x34>)
 8003b90:	2207      	movs	r2, #7
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000e010 	.word	0xe000e010
 8003ba4:	e000e018 	.word	0xe000e018
 8003ba8:	20000030 	.word	0x20000030
 8003bac:	10624dd3 	.word	0x10624dd3
 8003bb0:	e000e014 	.word	0xe000e014

08003bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003bc4 <vPortEnableVFP+0x10>
 8003bb8:	6801      	ldr	r1, [r0, #0]
 8003bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003bbe:	6001      	str	r1, [r0, #0]
 8003bc0:	4770      	bx	lr
 8003bc2:	0000      	.short	0x0000
 8003bc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop

08003bcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003bd2:	f3ef 8305 	mrs	r3, IPSR
 8003bd6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	d914      	bls.n	8003c08 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003bde:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <vPortValidateInterruptPriority+0x70>)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003be8:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <vPortValidateInterruptPriority+0x74>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	7afa      	ldrb	r2, [r7, #11]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d20a      	bcs.n	8003c08 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf6:	f383 8811 	msr	BASEPRI, r3
 8003bfa:	f3bf 8f6f 	isb	sy
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	607b      	str	r3, [r7, #4]
    }
 8003c04:	bf00      	nop
 8003c06:	e7fe      	b.n	8003c06 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <vPortValidateInterruptPriority+0x78>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c10:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <vPortValidateInterruptPriority+0x7c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d90a      	bls.n	8003c2e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	603b      	str	r3, [r7, #0]
    }
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <vPortValidateInterruptPriority+0x60>
    }
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000e3f0 	.word	0xe000e3f0
 8003c40:	20000368 	.word	0x20000368
 8003c44:	e000ed0c 	.word	0xe000ed0c
 8003c48:	2000036c 	.word	0x2000036c

08003c4c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003c58:	f7fe fdda 	bl	8002810 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003c5c:	4b65      	ldr	r3, [pc, #404]	; (8003df4 <pvPortMalloc+0x1a8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003c64:	f000 f934 	bl	8003ed0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c68:	4b63      	ldr	r3, [pc, #396]	; (8003df8 <pvPortMalloc+0x1ac>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 80a7 	bne.w	8003dc4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d02d      	beq.n	8003cd8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d227      	bcs.n	8003cd8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003c88:	2208      	movs	r2, #8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d021      	beq.n	8003cde <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f023 0307 	bic.w	r3, r3, #7
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d214      	bcs.n	8003cd2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f023 0307 	bic.w	r3, r3, #7
 8003cae:	3308      	adds	r3, #8
 8003cb0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <pvPortMalloc+0x92>
        __asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	617b      	str	r3, [r7, #20]
    }
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cd6:	e002      	b.n	8003cde <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	e000      	b.n	8003ce0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cde:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d06e      	beq.n	8003dc4 <pvPortMalloc+0x178>
 8003ce6:	4b45      	ldr	r3, [pc, #276]	; (8003dfc <pvPortMalloc+0x1b0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d869      	bhi.n	8003dc4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003cf0:	4b43      	ldr	r3, [pc, #268]	; (8003e00 <pvPortMalloc+0x1b4>)
 8003cf2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003cf4:	4b42      	ldr	r3, [pc, #264]	; (8003e00 <pvPortMalloc+0x1b4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cfa:	e004      	b.n	8003d06 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d903      	bls.n	8003d18 <pvPortMalloc+0xcc>
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f1      	bne.n	8003cfc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003d18:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <pvPortMalloc+0x1a8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d050      	beq.n	8003dc4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2208      	movs	r2, #8
 8003d28:	4413      	add	r3, r2
 8003d2a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	1ad2      	subs	r2, r2, r3
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d91f      	bls.n	8003d84 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <pvPortMalloc+0x120>
        __asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	613b      	str	r3, [r7, #16]
    }
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	1ad2      	subs	r2, r2, r3
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d7e:	69b8      	ldr	r0, [r7, #24]
 8003d80:	f000 f908 	bl	8003f94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <pvPortMalloc+0x1b0>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <pvPortMalloc+0x1b0>)
 8003d90:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <pvPortMalloc+0x1b0>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <pvPortMalloc+0x1b8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d203      	bcs.n	8003da6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d9e:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <pvPortMalloc+0x1b0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a18      	ldr	r2, [pc, #96]	; (8003e04 <pvPortMalloc+0x1b8>)
 8003da4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <pvPortMalloc+0x1ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003dba:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <pvPortMalloc+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	4a11      	ldr	r2, [pc, #68]	; (8003e08 <pvPortMalloc+0x1bc>)
 8003dc2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003dc4:	f7fe fd32 	bl	800282c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <pvPortMalloc+0x19c>
        __asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	60fb      	str	r3, [r7, #12]
    }
 8003de4:	bf00      	nop
 8003de6:	e7fe      	b.n	8003de6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003de8:	69fb      	ldr	r3, [r7, #28]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3728      	adds	r7, #40	; 0x28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20012f78 	.word	0x20012f78
 8003df8:	20012f8c 	.word	0x20012f8c
 8003dfc:	20012f7c 	.word	0x20012f7c
 8003e00:	20012f70 	.word	0x20012f70
 8003e04:	20012f80 	.word	0x20012f80
 8003e08:	20012f84 	.word	0x20012f84

08003e0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d04d      	beq.n	8003eba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003e1e:	2308      	movs	r3, #8
 8003e20:	425b      	negs	r3, r3
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4413      	add	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <vPortFree+0xb8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <vPortFree+0x44>
        __asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	60fb      	str	r3, [r7, #12]
    }
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <vPortFree+0x62>
        __asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	60bb      	str	r3, [r7, #8]
    }
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <vPortFree+0xb8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01e      	beq.n	8003eba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d11a      	bne.n	8003eba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <vPortFree+0xb8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	401a      	ands	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003e94:	f7fe fcbc 	bl	8002810 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <vPortFree+0xbc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <vPortFree+0xbc>)
 8003ea4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ea6:	6938      	ldr	r0, [r7, #16]
 8003ea8:	f000 f874 	bl	8003f94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <vPortFree+0xc0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a06      	ldr	r2, [pc, #24]	; (8003ecc <vPortFree+0xc0>)
 8003eb4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003eb6:	f7fe fcb9 	bl	800282c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20012f8c 	.word	0x20012f8c
 8003ec8:	20012f7c 	.word	0x20012f7c
 8003ecc:	20012f88 	.word	0x20012f88

08003ed0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ed6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003eda:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003edc:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <prvHeapInit+0xac>)
 8003ede:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00c      	beq.n	8003f04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3307      	adds	r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0307 	bic.w	r3, r3, #7
 8003ef6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <prvHeapInit+0xac>)
 8003f00:	4413      	add	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <prvHeapInit+0xb0>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <prvHeapInit+0xb0>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	4413      	add	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0307 	bic.w	r3, r3, #7
 8003f2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <prvHeapInit+0xb4>)
 8003f30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <prvHeapInit+0xb4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003f3a:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <prvHeapInit+0xb4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	1ad2      	subs	r2, r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <prvHeapInit+0xb4>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <prvHeapInit+0xb8>)
 8003f5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4a09      	ldr	r2, [pc, #36]	; (8003f8c <prvHeapInit+0xbc>)
 8003f66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <prvHeapInit+0xc0>)
 8003f6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f6e:	601a      	str	r2, [r3, #0]
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	20000370 	.word	0x20000370
 8003f80:	20012f70 	.word	0x20012f70
 8003f84:	20012f78 	.word	0x20012f78
 8003f88:	20012f80 	.word	0x20012f80
 8003f8c:	20012f7c 	.word	0x20012f7c
 8003f90:	20012f8c 	.word	0x20012f8c

08003f94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f9c:	4b28      	ldr	r3, [pc, #160]	; (8004040 <prvInsertBlockIntoFreeList+0xac>)
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e002      	b.n	8003fa8 <prvInsertBlockIntoFreeList+0x14>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d8f7      	bhi.n	8003fa2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d108      	bne.n	8003fd6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	441a      	add	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	441a      	add	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d118      	bne.n	800401c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <prvInsertBlockIntoFreeList+0xb0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d00d      	beq.n	8004012 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	441a      	add	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e008      	b.n	8004024 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004012:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <prvInsertBlockIntoFreeList+0xb0>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e003      	b.n	8004024 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	429a      	cmp	r2, r3
 800402a:	d002      	beq.n	8004032 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20012f70 	.word	0x20012f70
 8004044:	20012f78 	.word	0x20012f78

08004048 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d161      	bne.n	800411e <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a33      	ldr	r2, [pc, #204]	; (800412c <GPIO_PeriClockControl+0xe4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d106      	bne.n	8004070 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8004062:	4b33      	ldr	r3, [pc, #204]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	4a32      	ldr	r2, [pc, #200]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 800406e:	e056      	b.n	800411e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a30      	ldr	r2, [pc, #192]	; (8004134 <GPIO_PeriClockControl+0xec>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d106      	bne.n	8004086 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8004078:	4b2d      	ldr	r3, [pc, #180]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 800407e:	f043 0302 	orr.w	r3, r3, #2
 8004082:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004084:	e04b      	b.n	800411e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2b      	ldr	r2, [pc, #172]	; (8004138 <GPIO_PeriClockControl+0xf0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d106      	bne.n	800409c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800408e:	4b28      	ldr	r3, [pc, #160]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	4a27      	ldr	r2, [pc, #156]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	6313      	str	r3, [r2, #48]	; 0x30
}
 800409a:	e040      	b.n	800411e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a27      	ldr	r2, [pc, #156]	; (800413c <GPIO_PeriClockControl+0xf4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d106      	bne.n	80040b2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80040a4:	4b22      	ldr	r3, [pc, #136]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	4a21      	ldr	r2, [pc, #132]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 80040aa:	f043 0308 	orr.w	r3, r3, #8
 80040ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80040b0:	e035      	b.n	800411e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a22      	ldr	r2, [pc, #136]	; (8004140 <GPIO_PeriClockControl+0xf8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d106      	bne.n	80040c8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 80040c0:	f043 0310 	orr.w	r3, r3, #16
 80040c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80040c6:	e02a      	b.n	800411e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <GPIO_PeriClockControl+0xfc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d106      	bne.n	80040de <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80040d0:	4b17      	ldr	r3, [pc, #92]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	4a16      	ldr	r2, [pc, #88]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 80040d6:	f043 0320 	orr.w	r3, r3, #32
 80040da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80040dc:	e01f      	b.n	800411e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a19      	ldr	r2, [pc, #100]	; (8004148 <GPIO_PeriClockControl+0x100>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d106      	bne.n	80040f4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	4a11      	ldr	r2, [pc, #68]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 80040ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80040f2:	e014      	b.n	800411e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a15      	ldr	r2, [pc, #84]	; (800414c <GPIO_PeriClockControl+0x104>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d106      	bne.n	800410a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	4a0b      	ldr	r2, [pc, #44]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 8004102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004106:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004108:	e009      	b.n	800411e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a10      	ldr	r2, [pc, #64]	; (8004150 <GPIO_PeriClockControl+0x108>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d105      	bne.n	800411e <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	4a06      	ldr	r2, [pc, #24]	; (8004130 <GPIO_PeriClockControl+0xe8>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40020000 	.word	0x40020000
 8004130:	40023800 	.word	0x40023800
 8004134:	40020400 	.word	0x40020400
 8004138:	40020800 	.word	0x40020800
 800413c:	40020c00 	.word	0x40020c00
 8004140:	40021000 	.word	0x40021000
 8004144:	40021400 	.word	0x40021400
 8004148:	40021800 	.word	0x40021800
 800414c:	40021c00 	.word	0x40021c00
 8004150:	40022000 	.word	0x40022000

08004154 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff ff6e 	bl	8004048 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	795b      	ldrb	r3, [r3, #5]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d820      	bhi.n	80041b6 <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	795b      	ldrb	r3, [r3, #5]
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	791b      	ldrb	r3, [r3, #4]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	791b      	ldrb	r3, [r3, #4]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2103      	movs	r1, #3
 8004194:	fa01 f303 	lsl.w	r3, r1, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	4619      	mov	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	400a      	ands	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e0cb      	b.n	800434e <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	795b      	ldrb	r3, [r3, #5]
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d117      	bne.n	80041ee <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80041be:	4b4b      	ldr	r3, [pc, #300]	; (80042ec <GPIO_Init+0x198>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	7912      	ldrb	r2, [r2, #4]
 80041c6:	4611      	mov	r1, r2
 80041c8:	2201      	movs	r2, #1
 80041ca:	408a      	lsls	r2, r1
 80041cc:	4611      	mov	r1, r2
 80041ce:	4a47      	ldr	r2, [pc, #284]	; (80042ec <GPIO_Init+0x198>)
 80041d0:	430b      	orrs	r3, r1
 80041d2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80041d4:	4b45      	ldr	r3, [pc, #276]	; (80042ec <GPIO_Init+0x198>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	7912      	ldrb	r2, [r2, #4]
 80041dc:	4611      	mov	r1, r2
 80041de:	2201      	movs	r2, #1
 80041e0:	408a      	lsls	r2, r1
 80041e2:	43d2      	mvns	r2, r2
 80041e4:	4611      	mov	r1, r2
 80041e6:	4a41      	ldr	r2, [pc, #260]	; (80042ec <GPIO_Init+0x198>)
 80041e8:	400b      	ands	r3, r1
 80041ea:	6093      	str	r3, [r2, #8]
 80041ec:	e035      	b.n	800425a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	795b      	ldrb	r3, [r3, #5]
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d117      	bne.n	8004226 <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80041f6:	4b3d      	ldr	r3, [pc, #244]	; (80042ec <GPIO_Init+0x198>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	7912      	ldrb	r2, [r2, #4]
 80041fe:	4611      	mov	r1, r2
 8004200:	2201      	movs	r2, #1
 8004202:	408a      	lsls	r2, r1
 8004204:	4611      	mov	r1, r2
 8004206:	4a39      	ldr	r2, [pc, #228]	; (80042ec <GPIO_Init+0x198>)
 8004208:	430b      	orrs	r3, r1
 800420a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800420c:	4b37      	ldr	r3, [pc, #220]	; (80042ec <GPIO_Init+0x198>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	7912      	ldrb	r2, [r2, #4]
 8004214:	4611      	mov	r1, r2
 8004216:	2201      	movs	r2, #1
 8004218:	408a      	lsls	r2, r1
 800421a:	43d2      	mvns	r2, r2
 800421c:	4611      	mov	r1, r2
 800421e:	4a33      	ldr	r2, [pc, #204]	; (80042ec <GPIO_Init+0x198>)
 8004220:	400b      	ands	r3, r1
 8004222:	60d3      	str	r3, [r2, #12]
 8004224:	e019      	b.n	800425a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	795b      	ldrb	r3, [r3, #5]
 800422a:	2b06      	cmp	r3, #6
 800422c:	d115      	bne.n	800425a <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800422e:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <GPIO_Init+0x198>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	7912      	ldrb	r2, [r2, #4]
 8004236:	4611      	mov	r1, r2
 8004238:	2201      	movs	r2, #1
 800423a:	408a      	lsls	r2, r1
 800423c:	4611      	mov	r1, r2
 800423e:	4a2b      	ldr	r2, [pc, #172]	; (80042ec <GPIO_Init+0x198>)
 8004240:	430b      	orrs	r3, r1
 8004242:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004244:	4b29      	ldr	r3, [pc, #164]	; (80042ec <GPIO_Init+0x198>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	7912      	ldrb	r2, [r2, #4]
 800424c:	4611      	mov	r1, r2
 800424e:	2201      	movs	r2, #1
 8004250:	408a      	lsls	r2, r1
 8004252:	4611      	mov	r1, r2
 8004254:	4a25      	ldr	r2, [pc, #148]	; (80042ec <GPIO_Init+0x198>)
 8004256:	430b      	orrs	r3, r1
 8004258:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	791b      	ldrb	r3, [r3, #4]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	791b      	ldrb	r3, [r3, #4]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1f      	ldr	r2, [pc, #124]	; (80042f0 <GPIO_Init+0x19c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d04e      	beq.n	8004314 <GPIO_Init+0x1c0>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <GPIO_Init+0x1a0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d032      	beq.n	80042e6 <GPIO_Init+0x192>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <GPIO_Init+0x1a4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02b      	beq.n	80042e2 <GPIO_Init+0x18e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <GPIO_Init+0x1a8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d024      	beq.n	80042de <GPIO_Init+0x18a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <GPIO_Init+0x1ac>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01d      	beq.n	80042da <GPIO_Init+0x186>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <GPIO_Init+0x1b0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d016      	beq.n	80042d6 <GPIO_Init+0x182>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a16      	ldr	r2, [pc, #88]	; (8004308 <GPIO_Init+0x1b4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00f      	beq.n	80042d2 <GPIO_Init+0x17e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a15      	ldr	r2, [pc, #84]	; (800430c <GPIO_Init+0x1b8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d008      	beq.n	80042ce <GPIO_Init+0x17a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a13      	ldr	r2, [pc, #76]	; (8004310 <GPIO_Init+0x1bc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <GPIO_Init+0x176>
 80042c6:	2308      	movs	r3, #8
 80042c8:	e025      	b.n	8004316 <GPIO_Init+0x1c2>
 80042ca:	2300      	movs	r3, #0
 80042cc:	e023      	b.n	8004316 <GPIO_Init+0x1c2>
 80042ce:	2307      	movs	r3, #7
 80042d0:	e021      	b.n	8004316 <GPIO_Init+0x1c2>
 80042d2:	2306      	movs	r3, #6
 80042d4:	e01f      	b.n	8004316 <GPIO_Init+0x1c2>
 80042d6:	2305      	movs	r3, #5
 80042d8:	e01d      	b.n	8004316 <GPIO_Init+0x1c2>
 80042da:	2304      	movs	r3, #4
 80042dc:	e01b      	b.n	8004316 <GPIO_Init+0x1c2>
 80042de:	2303      	movs	r3, #3
 80042e0:	e019      	b.n	8004316 <GPIO_Init+0x1c2>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e017      	b.n	8004316 <GPIO_Init+0x1c2>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e015      	b.n	8004316 <GPIO_Init+0x1c2>
 80042ea:	bf00      	nop
 80042ec:	40013c00 	.word	0x40013c00
 80042f0:	40020000 	.word	0x40020000
 80042f4:	40020400 	.word	0x40020400
 80042f8:	40020800 	.word	0x40020800
 80042fc:	40020c00 	.word	0x40020c00
 8004300:	40021000 	.word	0x40021000
 8004304:	40021400 	.word	0x40021400
 8004308:	40021800 	.word	0x40021800
 800430c:	40021c00 	.word	0x40021c00
 8004310:	40022000 	.word	0x40022000
 8004314:	2300      	movs	r3, #0
 8004316:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8004318:	4b59      	ldr	r3, [pc, #356]	; (8004480 <GPIO_Init+0x32c>)
 800431a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431c:	4a58      	ldr	r2, [pc, #352]	; (8004480 <GPIO_Init+0x32c>)
 800431e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004322:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8004324:	7c7a      	ldrb	r2, [r7, #17]
 8004326:	7cbb      	ldrb	r3, [r7, #18]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	fa02 f103 	lsl.w	r1, r2, r3
 800432e:	4a55      	ldr	r2, [pc, #340]	; (8004484 <GPIO_Init+0x330>)
 8004330:	7cfb      	ldrb	r3, [r7, #19]
 8004332:	3302      	adds	r3, #2
 8004334:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8004338:	4b53      	ldr	r3, [pc, #332]	; (8004488 <GPIO_Init+0x334>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	7912      	ldrb	r2, [r2, #4]
 8004340:	4611      	mov	r1, r2
 8004342:	2201      	movs	r2, #1
 8004344:	408a      	lsls	r2, r1
 8004346:	4611      	mov	r1, r2
 8004348:	4a4f      	ldr	r2, [pc, #316]	; (8004488 <GPIO_Init+0x334>)
 800434a:	430b      	orrs	r3, r1
 800434c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	799b      	ldrb	r3, [r3, #6]
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	791b      	ldrb	r3, [r3, #4]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	791b      	ldrb	r3, [r3, #4]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	2103      	movs	r1, #3
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	4619      	mov	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	400a      	ands	r2, r1
 800437c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6899      	ldr	r1, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	79db      	ldrb	r3, [r3, #7]
 8004392:	461a      	mov	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	791b      	ldrb	r3, [r3, #4]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	791b      	ldrb	r3, [r3, #4]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	2103      	movs	r1, #3
 80043ae:	fa01 f303 	lsl.w	r3, r1, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	400a      	ands	r2, r1
 80043bc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68d9      	ldr	r1, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	7a1b      	ldrb	r3, [r3, #8]
 80043d2:	461a      	mov	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	791b      	ldrb	r3, [r3, #4]
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	791b      	ldrb	r3, [r3, #4]
 80043e8:	4619      	mov	r1, r3
 80043ea:	2301      	movs	r3, #1
 80043ec:	408b      	lsls	r3, r1
 80043ee:	43db      	mvns	r3, r3
 80043f0:	4619      	mov	r1, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	400a      	ands	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	795b      	ldrb	r3, [r3, #5]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d131      	bne.n	8004476 <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	791b      	ldrb	r3, [r3, #4]
 8004416:	08db      	lsrs	r3, r3, #3
 8004418:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	791b      	ldrb	r3, [r3, #4]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	7c3a      	ldrb	r2, [r7, #16]
 800442a:	3208      	adds	r2, #8
 800442c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	220f      	movs	r2, #15
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	4618      	mov	r0, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	7c3a      	ldrb	r2, [r7, #16]
 8004444:	4001      	ands	r1, r0
 8004446:	3208      	adds	r2, #8
 8004448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	7c3a      	ldrb	r2, [r7, #16]
 8004452:	3208      	adds	r2, #8
 8004454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7a5b      	ldrb	r3, [r3, #9]
 800445c:	461a      	mov	r2, r3
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	4618      	mov	r0, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	7c3a      	ldrb	r2, [r7, #16]
 800446e:	4301      	orrs	r1, r0
 8004470:	3208      	adds	r2, #8
 8004472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8004476:	bf00      	nop
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800
 8004484:	40013800 	.word	0x40013800
 8004488:	40013c00 	.word	0x40013c00

0800448c <GPIO_ReadFromInputPin>:
 *
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	fa22 f303 	lsr.w	r3, r2, r3
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]

   return value;
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
 80044c4:	4613      	mov	r3, r2
 80044c6:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80044c8:	78bb      	ldrb	r3, [r7, #2]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d109      	bne.n	80044e2 <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f202 	lsl.w	r2, r1, r2
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 80044e0:	e009      	b.n	80044f6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	2101      	movs	r1, #1
 80044ea:	fa01 f202 	lsl.w	r2, r1, r2
 80044ee:	43d2      	mvns	r2, r2
 80044f0:	401a      	ands	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	615a      	str	r2, [r3, #20]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <GPIO_IRQInterruptConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi) {
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	460a      	mov	r2, r1
 800450e:	71fb      	strb	r3, [r7, #7]
 8004510:	4613      	mov	r3, r2
 8004512:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE) {
 8004514:	79bb      	ldrb	r3, [r7, #6]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d133      	bne.n	8004582 <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31)
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	2b1f      	cmp	r3, #31
 800451e:	d80a      	bhi.n	8004536 <GPIO_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8004520:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <GPIO_IRQInterruptConfig+0xf4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	79fa      	ldrb	r2, [r7, #7]
 8004526:	2101      	movs	r1, #1
 8004528:	fa01 f202 	lsl.w	r2, r1, r2
 800452c:	4611      	mov	r1, r2
 800452e:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <GPIO_IRQInterruptConfig+0xf4>)
 8004530:	430b      	orrs	r3, r1
 8004532:	6013      	str	r3, [r2, #0]

		else if(IRQNumber >= 64 && IRQNumber < 96 )
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
	}
}
 8004534:	e059      	b.n	80045ea <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	2b1f      	cmp	r3, #31
 800453a:	d90f      	bls.n	800455c <GPIO_IRQInterruptConfig+0x58>
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	2b3f      	cmp	r3, #63	; 0x3f
 8004540:	d80c      	bhi.n	800455c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8004542:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <GPIO_IRQInterruptConfig+0xf8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	79fa      	ldrb	r2, [r7, #7]
 8004548:	f002 021f 	and.w	r2, r2, #31
 800454c:	2101      	movs	r1, #1
 800454e:	fa01 f202 	lsl.w	r2, r1, r2
 8004552:	4611      	mov	r1, r2
 8004554:	4a29      	ldr	r2, [pc, #164]	; (80045fc <GPIO_IRQInterruptConfig+0xf8>)
 8004556:	430b      	orrs	r3, r1
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e046      	b.n	80045ea <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	2b3f      	cmp	r3, #63	; 0x3f
 8004560:	d943      	bls.n	80045ea <GPIO_IRQInterruptConfig+0xe6>
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	2b5f      	cmp	r3, #95	; 0x5f
 8004566:	d840      	bhi.n	80045ea <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8004568:	4b25      	ldr	r3, [pc, #148]	; (8004600 <GPIO_IRQInterruptConfig+0xfc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	79fa      	ldrb	r2, [r7, #7]
 800456e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	4611      	mov	r1, r2
 800457a:	4a21      	ldr	r2, [pc, #132]	; (8004600 <GPIO_IRQInterruptConfig+0xfc>)
 800457c:	430b      	orrs	r3, r1
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	e033      	b.n	80045ea <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	2b1f      	cmp	r3, #31
 8004586:	d80a      	bhi.n	800459e <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <GPIO_IRQInterruptConfig+0x100>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	79fa      	ldrb	r2, [r7, #7]
 800458e:	2101      	movs	r1, #1
 8004590:	fa01 f202 	lsl.w	r2, r1, r2
 8004594:	4611      	mov	r1, r2
 8004596:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <GPIO_IRQInterruptConfig+0x100>)
 8004598:	430b      	orrs	r3, r1
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	e025      	b.n	80045ea <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 )
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	2b1f      	cmp	r3, #31
 80045a2:	d90f      	bls.n	80045c4 <GPIO_IRQInterruptConfig+0xc0>
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	2b3f      	cmp	r3, #63	; 0x3f
 80045a8:	d80c      	bhi.n	80045c4 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 80045aa:	4b17      	ldr	r3, [pc, #92]	; (8004608 <GPIO_IRQInterruptConfig+0x104>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	79fa      	ldrb	r2, [r7, #7]
 80045b0:	f002 021f 	and.w	r2, r2, #31
 80045b4:	2101      	movs	r1, #1
 80045b6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ba:	4611      	mov	r1, r2
 80045bc:	4a12      	ldr	r2, [pc, #72]	; (8004608 <GPIO_IRQInterruptConfig+0x104>)
 80045be:	430b      	orrs	r3, r1
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e012      	b.n	80045ea <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	2b3f      	cmp	r3, #63	; 0x3f
 80045c8:	d90f      	bls.n	80045ea <GPIO_IRQInterruptConfig+0xe6>
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	2b5f      	cmp	r3, #95	; 0x5f
 80045ce:	d80c      	bhi.n	80045ea <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <GPIO_IRQInterruptConfig+0x108>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	79fa      	ldrb	r2, [r7, #7]
 80045d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80045da:	2101      	movs	r1, #1
 80045dc:	fa01 f202 	lsl.w	r2, r1, r2
 80045e0:	4611      	mov	r1, r2
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <GPIO_IRQInterruptConfig+0x108>)
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	e7ff      	b.n	80045ea <GPIO_IRQInterruptConfig+0xe6>
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	e000e100 	.word	0xe000e100
 80045fc:	e000e104 	.word	0xe000e104
 8004600:	e000e108 	.word	0xe000e108
 8004604:	e000e180 	.word	0xe000e180
 8004608:	e000e184 	.word	0xe000e184
 800460c:	e000e188 	.word	0xe000e188

08004610 <GPIO_IRQPriorityConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	6039      	str	r1, [r7, #0]
 800461a:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 800462a:	7bbb      	ldrb	r3, [r7, #14]
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	3304      	adds	r3, #4
 8004632:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |=  (IRQPriority << shift_amount);
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800463c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8004640:	6819      	ldr	r1, [r3, #0]
 8004642:	7b7b      	ldrb	r3, [r7, #13]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	409a      	lsls	r2, r3
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004650:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	601a      	str	r2, [r3, #0]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	611a      	str	r2, [r3, #16]
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	611a      	str	r2, [r3, #16]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle ) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL)) {
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01f      	beq.n	8004732 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX) {
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	7f1b      	ldrb	r3, [r3, #28]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d112      	bne.n	8004720 <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize  == 1) {
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d11f      	bne.n	8004742 <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fa3e 	bl	8004b8a <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 800471e:	e010      	b.n	8004742 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	60fb      	str	r3, [r7, #12]
}
 8004730:	e007      	b.n	8004742 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	60fb      	str	r3, [r7, #12]
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <I2C_GenerateStopCondition>:


void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <I2C_PeripheralControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi) {
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d106      	bne.n	800478a <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f043 0201 	orr.w	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	else
		pI2Cx->CR1 &= ~(1 << 0);
}
 8004788:	e005      	b.n	8004796 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	601a      	str	r2, [r3, #0]
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <I2C_PeriClockControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d11f      	bne.n	80047f6 <I2C_PeriClockControl+0x52>
		if(pI2Cx == I2C1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a12      	ldr	r2, [pc, #72]	; (8004804 <I2C_PeriClockControl+0x60>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d106      	bne.n	80047cc <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <I2C_PeriClockControl+0x64>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a11      	ldr	r2, [pc, #68]	; (8004808 <I2C_PeriClockControl+0x64>)
 80047c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C3)
			I2C3_PCLK_EN();
	} else {
		//TODO
	}
}
 80047ca:	e014      	b.n	80047f6 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a0f      	ldr	r2, [pc, #60]	; (800480c <I2C_PeriClockControl+0x68>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d106      	bne.n	80047e2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <I2C_PeriClockControl+0x64>)
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	4a0b      	ldr	r2, [pc, #44]	; (8004808 <I2C_PeriClockControl+0x64>)
 80047da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047de:	6413      	str	r3, [r2, #64]	; 0x40
}
 80047e0:	e009      	b.n	80047f6 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a0a      	ldr	r2, [pc, #40]	; (8004810 <I2C_PeriClockControl+0x6c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d105      	bne.n	80047f6 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <I2C_PeriClockControl+0x64>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	4a06      	ldr	r2, [pc, #24]	; (8004808 <I2C_PeriClockControl+0x64>)
 80047f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047f4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40005400 	.word	0x40005400
 8004808:	40023800 	.word	0x40023800
 800480c:	40005800 	.word	0x40005800
 8004810:	40005c00 	.word	0x40005c00

08004814 <I2C_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2101      	movs	r1, #1
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff ffbc 	bl	80047a4 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7a5b      	ldrb	r3, [r3, #9]
 8004830:	029b      	lsls	r3, r3, #10
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 8004846:	f000 f9bd 	bl	8004bc4 <RCC_GetPCLK1Value>
 800484a:	4603      	mov	r3, r0
 800484c:	4a47      	ldr	r2, [pc, #284]	; (800496c <I2C_Init+0x158>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	0c9b      	lsrs	r3, r3, #18
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004864:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	7a1b      	ldrb	r3, [r3, #8]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	461a      	mov	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800487e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a36      	ldr	r2, [pc, #216]	; (8004970 <I2C_Init+0x15c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d80f      	bhi.n	80048ba <I2C_Init+0xa6>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800489a:	f000 f993 	bl	8004bc4 <RCC_GetPCLK1Value>
 800489e:	4602      	mov	r2, r0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048aa:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80048ac:	897b      	ldrh	r3, [r7, #10]
 80048ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e02d      	b.n	8004916 <I2C_Init+0x102>
	} else {
		//mode is fast mode
		tempreg |= ( 1 << 15);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	7a9b      	ldrb	r3, [r3, #10]
 80048c6:	039b      	lsls	r3, r3, #14
 80048c8:	461a      	mov	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7a9b      	ldrb	r3, [r3, #10]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80048d8:	f000 f974 	bl	8004bc4 <RCC_GetPCLK1Value>
 80048dc:	4601      	mov	r1, r0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4413      	add	r3, r2
 80048e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ec:	817b      	strh	r3, [r7, #10]
 80048ee:	e00c      	b.n	800490a <I2C_Init+0xf6>
		else
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80048f0:	f000 f968 	bl	8004bc4 <RCC_GetPCLK1Value>
 80048f4:	4601      	mov	r1, r0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009a      	lsls	r2, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	fbb1 f3f3 	udiv	r3, r1, r3
 8004908:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 800490a:	897b      	ldrh	r3, [r7, #10]
 800490c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4a13      	ldr	r2, [pc, #76]	; (8004970 <I2C_Init+0x15c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d809      	bhi.n	800493c <I2C_Init+0x128>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8004928:	f000 f94c 	bl	8004bc4 <RCC_GetPCLK1Value>
 800492c:	4603      	mov	r3, r0
 800492e:	4a0f      	ldr	r2, [pc, #60]	; (800496c <I2C_Init+0x158>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	0c9b      	lsrs	r3, r3, #18
 8004936:	3301      	adds	r3, #1
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e00d      	b.n	8004958 <I2C_Init+0x144>
	else
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 800493c:	f000 f942 	bl	8004bc4 <RCC_GetPCLK1Value>
 8004940:	4603      	mov	r3, r0
 8004942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004946:	fb02 f303 	mul.w	r3, r2, r3
 800494a:	0a5b      	lsrs	r3, r3, #9
 800494c:	4a09      	ldr	r2, [pc, #36]	; (8004974 <I2C_Init+0x160>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	09db      	lsrs	r3, r3, #7
 8004954:	3301      	adds	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004962:	621a      	str	r2, [r3, #32]

}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	431bde83 	.word	0x431bde83
 8004970:	000186a0 	.word	0x000186a0
 8004974:	00044b83 	.word	0x00044b83

08004978 <I2C_GetFlagStatus>:
void I2C_DeInit(I2C_RegDef_t *pI2Cx) {

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName) {
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <I2C_GetFlagStatus+0x1c>
	return FLAG_RESET;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fe56 	bl	8004664 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 80049b8:	bf00      	nop
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2101      	movs	r1, #1
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ffd9 	bl	8004978 <I2C_GetFlagStatus>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f6      	beq.n	80049ba <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fe55 	bl	8004684 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 80049da:	bf00      	nop
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2102      	movs	r1, #2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff ffc8 	bl	8004978 <I2C_GetFlagStatus>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f6      	beq.n	80049dc <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f7ff fe74 	bl	80046dc <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0) {
 80049f4:	e014      	b.n	8004a20 <I2C_MasterSendData+0x80>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); //Wait till TXE is set
 80049f6:	bf00      	nop
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ffba 	bl	8004978 <I2C_GetFlagStatus>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f6      	beq.n	80049f8 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	3301      	adds	r3, #1
 8004a18:	60bb      	str	r3, [r7, #8]
		Len--;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
	while(Len > 0) {
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e7      	bne.n	80049f6 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 8004a26:	bf00      	nop
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2180      	movs	r1, #128	; 0x80
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff ffa2 	bl	8004978 <I2C_GetFlagStatus>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f6      	beq.n	8004a28 <I2C_MasterSendData+0x88>

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 8004a3a:	bf00      	nop
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2104      	movs	r1, #4
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff ff98 	bl	8004978 <I2C_GetFlagStatus>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f6      	beq.n	8004a3c <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8004a4e:	7e3b      	ldrb	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d104      	bne.n	8004a5e <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fe76 	bl	800474a <I2C_GenerateStopCondition>
}
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b086      	sub	sp, #24
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	4611      	mov	r1, r2
 8004a72:	461a      	mov	r2, r3
 8004a74:	460b      	mov	r3, r1
 8004a76:	71fb      	strb	r3, [r7, #7]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	71bb      	strb	r3, [r7, #6]

	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff fdef 	bl	8004664 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 8004a86:	bf00      	nop
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff ff72 	bl	8004978 <I2C_GetFlagStatus>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f6      	beq.n	8004a88 <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	79ba      	ldrb	r2, [r7, #6]
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fe04 	bl	80046b0 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 8004aa8:	bf00      	nop
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2102      	movs	r1, #2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff61 	bl	8004978 <I2C_GetFlagStatus>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f6      	beq.n	8004aaa <I2C_MasterReceiveData+0x44>


	//procedure to read only 1 byte from slave
	if(Len == 1) {
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d121      	bne.n	8004b06 <I2C_MasterReceiveData+0xa0>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f85e 	bl	8004b8a <I2C_ManageAcking>


		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff fe04 	bl	80046dc <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8004ad4:	bf00      	nop
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2140      	movs	r1, #64	; 0x40
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff ff4b 	bl	8004978 <I2C_GetFlagStatus>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f6      	beq.n	8004ad6 <I2C_MasterReceiveData+0x70>

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8004ae8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fe28 	bl	800474a <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1) {
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d930      	bls.n	8004b6e <I2C_MasterReceiveData+0x108>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff fde5 	bl	80046dc <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--)
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e027      	b.n	8004b68 <I2C_MasterReceiveData+0x102>
		{
			//wait until RXNE becomes 1
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_RXNE) );
 8004b18:	bf00      	nop
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2140      	movs	r1, #64	; 0x40
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff29 	bl	8004978 <I2C_GetFlagStatus>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f6      	beq.n	8004b1a <I2C_MasterReceiveData+0xb4>

			if(i == 2) //if last 2 bytes are remaining
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d10e      	bne.n	8004b50 <I2C_MasterReceiveData+0xea>
			{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 f826 	bl	8004b8a <I2C_ManageAcking>

				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8004b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d104      	bne.n	8004b50 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fdfd 	bl	800474a <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1d4      	bne.n	8004b18 <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	7a5b      	ldrb	r3, [r3, #9]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d105      	bne.n	8004b82 <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 f804 	bl	8004b8a <I2C_ManageAcking>
}
 8004b82:	bf00      	nop
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	460b      	mov	r3, r1
 8004b94:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d106      	bne.n	8004baa <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	601a      	str	r2, [r3, #0]
	else
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
}
 8004ba8:	e005      	b.n	8004bb6 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8004bca:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <RCC_GetPCLK1Value+0x9c>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8004bd8:	7a7b      	ldrb	r3, [r7, #9]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8004bde:	4b21      	ldr	r3, [pc, #132]	; (8004c64 <RCC_GetPCLK1Value+0xa0>)
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	e00b      	b.n	8004bfc <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 1)
 8004be4:	7a7b      	ldrb	r3, [r7, #9]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d102      	bne.n	8004bf0 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8004bea:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <RCC_GetPCLK1Value+0xa4>)
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e005      	b.n	8004bfc <RCC_GetPCLK1Value+0x38>
	else if (clksrc == 2)
 8004bf0:	7a7b      	ldrb	r3, [r7, #9]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d102      	bne.n	8004bfc <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8004bf6:	f000 f83d 	bl	8004c74 <RCC_GetPLLOutputClock>
 8004bfa:	60f8      	str	r0, [r7, #12]

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8004bfc:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <RCC_GetPCLK1Value+0x9c>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8004c0a:	7a3b      	ldrb	r3, [r7, #8]
 8004c0c:	2b07      	cmp	r3, #7
 8004c0e:	d802      	bhi.n	8004c16 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8004c10:	2301      	movs	r3, #1
 8004c12:	72fb      	strb	r3, [r7, #11]
 8004c14:	e005      	b.n	8004c22 <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_PreScaler[temp-8];
 8004c16:	7a3b      	ldrb	r3, [r7, #8]
 8004c18:	3b08      	subs	r3, #8
 8004c1a:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <RCC_GetPCLK1Value+0xa8>)
 8004c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c20:	72fb      	strb	r3, [r7, #11]

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8004c22:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <RCC_GetPCLK1Value+0x9c>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0a9b      	lsrs	r3, r3, #10
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8004c30:	7a3b      	ldrb	r3, [r7, #8]
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d802      	bhi.n	8004c3c <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8004c36:	2301      	movs	r3, #1
 8004c38:	72bb      	strb	r3, [r7, #10]
 8004c3a:	e004      	b.n	8004c46 <RCC_GetPCLK1Value+0x82>
	else
		apb1p = APB1_PreScaler[temp-4];
 8004c3c:	7a3b      	ldrb	r3, [r7, #8]
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	4a0b      	ldr	r2, [pc, #44]	; (8004c70 <RCC_GetPCLK1Value+0xac>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	72bb      	strb	r3, [r7, #10]

	pclk1 = (SystemClk / ahbp) /apb1p;
 8004c46:	7afb      	ldrb	r3, [r7, #11]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c4e:	7abb      	ldrb	r3, [r7, #10]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	607b      	str	r3, [r7, #4]

	return pclk1;
 8004c56:	687b      	ldr	r3, [r7, #4]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	00f42400 	.word	0x00f42400
 8004c68:	007a1200 	.word	0x007a1200
 8004c6c:	2000001c 	.word	0x2000001c
 8004c70:	2000002c 	.word	0x2000002c

08004c74 <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock() {
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
	return 0;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d11f      	bne.n	8004cd6 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a12      	ldr	r2, [pc, #72]	; (8004ce4 <SPI_PeriClockControl+0x60>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d106      	bne.n	8004cac <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8004c9e:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <SPI_PeriClockControl+0x64>)
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	4a11      	ldr	r2, [pc, #68]	; (8004ce8 <SPI_PeriClockControl+0x64>)
 8004ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ca8:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8004caa:	e014      	b.n	8004cd6 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a0f      	ldr	r2, [pc, #60]	; (8004cec <SPI_PeriClockControl+0x68>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d106      	bne.n	8004cc2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <SPI_PeriClockControl+0x64>)
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	4a0b      	ldr	r2, [pc, #44]	; (8004ce8 <SPI_PeriClockControl+0x64>)
 8004cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cbe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004cc0:	e009      	b.n	8004cd6 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <SPI_PeriClockControl+0x6c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d105      	bne.n	8004cd6 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <SPI_PeriClockControl+0x64>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4a06      	ldr	r2, [pc, #24]	; (8004ce8 <SPI_PeriClockControl+0x64>)
 8004cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40013000 	.word	0x40013000
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	40003800 	.word	0x40003800
 8004cf0:	40003c00 	.word	0x40003c00

08004cf4 <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2101      	movs	r1, #1
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff ffbe 	bl	8004c84 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	791b      	ldrb	r3, [r3, #4]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	461a      	mov	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	795b      	ldrb	r3, [r3, #5]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d104      	bne.n	8004d2c <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e014      	b.n	8004d56 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	795b      	ldrb	r3, [r3, #5]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d104      	bne.n	8004d3e <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e00b      	b.n	8004d56 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	795b      	ldrb	r3, [r3, #5]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d107      	bne.n	8004d56 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d4c:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d54:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	799b      	ldrb	r3, [r3, #6]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	79db      	ldrb	r3, [r3, #7]
 8004d68:	02db      	lsls	r3, r3, #11
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	7a1b      	ldrb	r3, [r3, #8]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	7a5b      	ldrb	r3, [r3, #9]
 8004d84:	461a      	mov	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	7a9b      	ldrb	r3, [r3, #10]
 8004d90:	025b      	lsls	r3, r3, #9
 8004d92:	461a      	mov	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	601a      	str	r2, [r3, #0]

}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	70fb      	strb	r3, [r7, #3]
	SPI_WAIT(pSPIx);
 8004db6:	bf00      	nop
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f9      	beq.n	8004db8 <SPI_Transfer+0xe>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f3      	bne.n	8004db8 <SPI_Transfer+0xe>
//	while((((pSPIx)->SR & ((uint8_t)0x02 | (uint8_t)0x01)) == 0 || ((pSPIx)->SR & (uint8_t)0x80)));
	pSPIx->DR = data;
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60da      	str	r2, [r3, #12]
	SPI_WAIT(pSPIx);
 8004dd6:	bf00      	nop
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f9      	beq.n	8004dd8 <SPI_Transfer+0x2e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f3      	bne.n	8004dd8 <SPI_Transfer+0x2e>
//	while((((pSPIx)->SR & ((uint8_t)0x02 | (uint8_t)0x01)) == 0 || ((pSPIx)->SR & (uint8_t)0x80)));
	return pSPIx->DR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d106      	bne.n	8004e20 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8004e1e:	e005      	b.n	8004e2c <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	601a      	str	r2, [r3, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d106      	bne.n	8004e58 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f043 0204 	orr.w	r2, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8004e56:	e005      	b.n	8004e64 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f023 0204 	bic.w	r2, r3, #4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	605a      	str	r2, [r3, #4]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <lcd_puts_xy>:
	uint8_t hours;
	uint8_t minutes;
	uint8_t seconds;
} Screen3_Timer;

void lcd_puts_xy(unsigned char x, unsigned char y, char* c, int font) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60ba      	str	r2, [r7, #8]
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	73bb      	strb	r3, [r7, #14]
	LCD5110_GotoXY(x, y);
 8004e82:	7bba      	ldrb	r2, [r7, #14]
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	4611      	mov	r1, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fc fc83 	bl	8001794 <LCD5110_GotoXY>

	if (font)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <lcd_puts_xy+0x30>
		LCD5110_Puts(c, LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 8004e94:	2200      	movs	r2, #0
 8004e96:	2101      	movs	r1, #1
 8004e98:	68b8      	ldr	r0, [r7, #8]
 8004e9a:	f7fc fd3d 	bl	8001918 <LCD5110_Puts>
	else
		LCD5110_Puts(c, LCD5110_Pixel_Set, LCD5110_FontSize_3x5);
}
 8004e9e:	e004      	b.n	8004eaa <lcd_puts_xy+0x3a>
		LCD5110_Puts(c, LCD5110_Pixel_Set, LCD5110_FontSize_3x5);
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	68b8      	ldr	r0, [r7, #8]
 8004ea6:	f7fc fd37 	bl	8001918 <LCD5110_Puts>
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <range_scale>:

void range_scale(float value, char* value_buf, char* range) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
	if(value < 1000) {
 8004ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ec4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004fb4 <range_scale+0x100>
 8004ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed0:	d505      	bpl.n	8004ede <range_scale+0x2a>
		sprintf(range, "%s", "m");
 8004ed2:	4a39      	ldr	r2, [pc, #228]	; (8004fb8 <range_scale+0x104>)
 8004ed4:	4939      	ldr	r1, [pc, #228]	; (8004fbc <range_scale+0x108>)
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 fa3a 	bl	8006350 <siprintf>
 8004edc:	e02c      	b.n	8004f38 <range_scale+0x84>
	} else if (value < 1000*1000) {
 8004ede:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ee2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004fc0 <range_scale+0x10c>
 8004ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eee:	d50d      	bpl.n	8004f0c <range_scale+0x58>
		sprintf(range, "%s", " ");
 8004ef0:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <range_scale+0x110>)
 8004ef2:	4932      	ldr	r1, [pc, #200]	; (8004fbc <range_scale+0x108>)
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f001 fa2b 	bl	8006350 <siprintf>
		value /= 1000;
 8004efa:	ed97 7a03 	vldr	s14, [r7, #12]
 8004efe:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004fb4 <range_scale+0x100>
 8004f02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f06:	edc7 7a03 	vstr	s15, [r7, #12]
 8004f0a:	e015      	b.n	8004f38 <range_scale+0x84>
	} else if (value < 1000*1000*1000) {
 8004f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f10:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004fc8 <range_scale+0x114>
 8004f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1c:	d50c      	bpl.n	8004f38 <range_scale+0x84>
		sprintf(range, "%s", "k");
 8004f1e:	4a2b      	ldr	r2, [pc, #172]	; (8004fcc <range_scale+0x118>)
 8004f20:	4926      	ldr	r1, [pc, #152]	; (8004fbc <range_scale+0x108>)
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 fa14 	bl	8006350 <siprintf>
		value /= 1000*1000;
 8004f28:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f2c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004fc0 <range_scale+0x10c>
 8004f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f34:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	if(value < 10) {
 8004f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f48:	d509      	bpl.n	8004f5e <range_scale+0xaa>
		sprintf(value_buf, "%1.3f", value);
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7fb fb0c 	bl	8000568 <__aeabi_f2d>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	491e      	ldr	r1, [pc, #120]	; (8004fd0 <range_scale+0x11c>)
 8004f56:	68b8      	ldr	r0, [r7, #8]
 8004f58:	f001 f9fa 	bl	8006350 <siprintf>
	} else if (value < 100) {
		sprintf(value_buf, "%2.2f", value);
	} else if (value < 1000) {
		sprintf(value_buf, "%3.1f", value);
	}
}
 8004f5c:	e025      	b.n	8004faa <range_scale+0xf6>
	} else if (value < 100) {
 8004f5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f62:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004fd4 <range_scale+0x120>
 8004f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	d509      	bpl.n	8004f84 <range_scale+0xd0>
		sprintf(value_buf, "%2.2f", value);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7fb faf9 	bl	8000568 <__aeabi_f2d>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4917      	ldr	r1, [pc, #92]	; (8004fd8 <range_scale+0x124>)
 8004f7c:	68b8      	ldr	r0, [r7, #8]
 8004f7e:	f001 f9e7 	bl	8006350 <siprintf>
}
 8004f82:	e012      	b.n	8004faa <range_scale+0xf6>
	} else if (value < 1000) {
 8004f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f88:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004fb4 <range_scale+0x100>
 8004f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	d400      	bmi.n	8004f98 <range_scale+0xe4>
}
 8004f96:	e008      	b.n	8004faa <range_scale+0xf6>
		sprintf(value_buf, "%3.1f", value);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7fb fae5 	bl	8000568 <__aeabi_f2d>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	490e      	ldr	r1, [pc, #56]	; (8004fdc <range_scale+0x128>)
 8004fa4:	68b8      	ldr	r0, [r7, #8]
 8004fa6:	f001 f9d3 	bl	8006350 <siprintf>
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	447a0000 	.word	0x447a0000
 8004fb8:	080087b8 	.word	0x080087b8
 8004fbc:	080087bc 	.word	0x080087bc
 8004fc0:	49742400 	.word	0x49742400
 8004fc4:	080087c0 	.word	0x080087c0
 8004fc8:	4e6e6b28 	.word	0x4e6e6b28
 8004fcc:	080087c4 	.word	0x080087c4
 8004fd0:	080087c8 	.word	0x080087c8
 8004fd4:	42c80000 	.word	0x42c80000
 8004fd8:	080087d0 	.word	0x080087d0
 8004fdc:	080087d8 	.word	0x080087d8

08004fe0 <lcd_screen_1_update>:

void lcd_screen_1_update(LCD_Data_Screen1_t data) {
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b089      	sub	sp, #36	; 0x24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	463c      	mov	r4, r7
 8004fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8004fec:	f7fc fb02 	bl	80015f4 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "Vrms", 1);
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4a46      	ldr	r2, [pc, #280]	; (800510c <lcd_screen_1_update+0x12c>)
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f7ff ff3a 	bl	8004e70 <lcd_puts_xy>
	range_scale(data.Vrms, val_buf, range_buf);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	f107 0210 	add.w	r2, r7, #16
 8005002:	f107 0114 	add.w	r1, r7, #20
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff ff54 	bl	8004eb4 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1);
 800500c:	f107 0214 	add.w	r2, r7, #20
 8005010:	2301      	movs	r3, #1
 8005012:	2100      	movs	r1, #0
 8005014:	201c      	movs	r0, #28
 8005016:	f7ff ff2b 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1);
 800501a:	f107 0210 	add.w	r2, r7, #16
 800501e:	2301      	movs	r3, #1
 8005020:	2100      	movs	r1, #0
 8005022:	203c      	movs	r0, #60	; 0x3c
 8005024:	f7ff ff24 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "V", 1);
 8005028:	2301      	movs	r3, #1
 800502a:	4a39      	ldr	r2, [pc, #228]	; (8005110 <lcd_screen_1_update+0x130>)
 800502c:	2100      	movs	r1, #0
 800502e:	2042      	movs	r0, #66	; 0x42
 8005030:	f7ff ff1e 	bl	8004e70 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Vp", 1);
 8005034:	2301      	movs	r3, #1
 8005036:	4a37      	ldr	r2, [pc, #220]	; (8005114 <lcd_screen_1_update+0x134>)
 8005038:	210c      	movs	r1, #12
 800503a:	2000      	movs	r0, #0
 800503c:	f7ff ff18 	bl	8004e70 <lcd_puts_xy>
	range_scale(data.Vpeak, val_buf, range_buf);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f107 0210 	add.w	r2, r7, #16
 8005046:	f107 0114 	add.w	r1, r7, #20
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff ff32 	bl	8004eb4 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1);
 8005050:	f107 0214 	add.w	r2, r7, #20
 8005054:	2301      	movs	r3, #1
 8005056:	210c      	movs	r1, #12
 8005058:	201c      	movs	r0, #28
 800505a:	f7ff ff09 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1);
 800505e:	f107 0210 	add.w	r2, r7, #16
 8005062:	2301      	movs	r3, #1
 8005064:	210c      	movs	r1, #12
 8005066:	203c      	movs	r0, #60	; 0x3c
 8005068:	f7ff ff02 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1);
 800506c:	2301      	movs	r3, #1
 800506e:	4a28      	ldr	r2, [pc, #160]	; (8005110 <lcd_screen_1_update+0x130>)
 8005070:	210c      	movs	r1, #12
 8005072:	2042      	movs	r0, #66	; 0x42
 8005074:	f7ff fefc 	bl	8004e70 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_2, "Irms", 1);
 8005078:	2301      	movs	r3, #1
 800507a:	4a27      	ldr	r2, [pc, #156]	; (8005118 <lcd_screen_1_update+0x138>)
 800507c:	211d      	movs	r1, #29
 800507e:	2000      	movs	r0, #0
 8005080:	f7ff fef6 	bl	8004e70 <lcd_puts_xy>
	range_scale(data.Irms, val_buf, range_buf);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f107 0210 	add.w	r2, r7, #16
 800508a:	f107 0114 	add.w	r1, r7, #20
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ff10 	bl	8004eb4 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_2, val_buf, 1);
 8005094:	f107 0214 	add.w	r2, r7, #20
 8005098:	2301      	movs	r3, #1
 800509a:	211d      	movs	r1, #29
 800509c:	201c      	movs	r0, #28
 800509e:	f7ff fee7 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_2, range_buf, 1);
 80050a2:	f107 0210 	add.w	r2, r7, #16
 80050a6:	2301      	movs	r3, #1
 80050a8:	211d      	movs	r1, #29
 80050aa:	203c      	movs	r0, #60	; 0x3c
 80050ac:	f7ff fee0 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_2, "A", 1);
 80050b0:	2301      	movs	r3, #1
 80050b2:	4a1a      	ldr	r2, [pc, #104]	; (800511c <lcd_screen_1_update+0x13c>)
 80050b4:	211d      	movs	r1, #29
 80050b6:	2042      	movs	r0, #66	; 0x42
 80050b8:	f7ff feda 	bl	8004e70 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "Ip", 1);
 80050bc:	2301      	movs	r3, #1
 80050be:	4a18      	ldr	r2, [pc, #96]	; (8005120 <lcd_screen_1_update+0x140>)
 80050c0:	2129      	movs	r1, #41	; 0x29
 80050c2:	2000      	movs	r0, #0
 80050c4:	f7ff fed4 	bl	8004e70 <lcd_puts_xy>
	range_scale(data.Ipeak, val_buf, range_buf);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f107 0210 	add.w	r2, r7, #16
 80050ce:	f107 0114 	add.w	r1, r7, #20
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff feee 	bl	8004eb4 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1);
 80050d8:	f107 0214 	add.w	r2, r7, #20
 80050dc:	2301      	movs	r3, #1
 80050de:	2129      	movs	r1, #41	; 0x29
 80050e0:	201c      	movs	r0, #28
 80050e2:	f7ff fec5 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1);
 80050e6:	f107 0210 	add.w	r2, r7, #16
 80050ea:	2301      	movs	r3, #1
 80050ec:	2129      	movs	r1, #41	; 0x29
 80050ee:	203c      	movs	r0, #60	; 0x3c
 80050f0:	f7ff febe 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "A", 1);
 80050f4:	2301      	movs	r3, #1
 80050f6:	4a09      	ldr	r2, [pc, #36]	; (800511c <lcd_screen_1_update+0x13c>)
 80050f8:	2129      	movs	r1, #41	; 0x29
 80050fa:	2042      	movs	r0, #66	; 0x42
 80050fc:	f7ff feb8 	bl	8004e70 <lcd_puts_xy>

	LCD5110_Refresh();
 8005100:	f7fc faaa 	bl	8001658 <LCD5110_Refresh>
}
 8005104:	bf00      	nop
 8005106:	3724      	adds	r7, #36	; 0x24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd90      	pop	{r4, r7, pc}
 800510c:	080087e0 	.word	0x080087e0
 8005110:	080087e8 	.word	0x080087e8
 8005114:	080087ec 	.word	0x080087ec
 8005118:	080087f0 	.word	0x080087f0
 800511c:	080087f8 	.word	0x080087f8
 8005120:	080087fc 	.word	0x080087fc

08005124 <lcd_screen_2_update>:

void lcd_screen_2_update(LCD_Data_Screen2_t data) {
 8005124:	b590      	push	{r4, r7, lr}
 8005126:	b089      	sub	sp, #36	; 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	463c      	mov	r4, r7
 800512c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8005130:	f7fc fa60 	bl	80015f4 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "P", 1);
 8005134:	2301      	movs	r3, #1
 8005136:	4a41      	ldr	r2, [pc, #260]	; (800523c <lcd_screen_2_update+0x118>)
 8005138:	2100      	movs	r1, #0
 800513a:	2000      	movs	r0, #0
 800513c:	f7ff fe98 	bl	8004e70 <lcd_puts_xy>
	range_scale(data.ActivePower, val_buf, range_buf);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	f107 0210 	add.w	r2, r7, #16
 8005146:	f107 0114 	add.w	r1, r7, #20
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff feb2 	bl	8004eb4 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1);
 8005150:	f107 0214 	add.w	r2, r7, #20
 8005154:	2301      	movs	r3, #1
 8005156:	2100      	movs	r1, #0
 8005158:	201c      	movs	r0, #28
 800515a:	f7ff fe89 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1);
 800515e:	f107 0210 	add.w	r2, r7, #16
 8005162:	2301      	movs	r3, #1
 8005164:	2100      	movs	r1, #0
 8005166:	203c      	movs	r0, #60	; 0x3c
 8005168:	f7ff fe82 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "W", 1);
 800516c:	2301      	movs	r3, #1
 800516e:	4a34      	ldr	r2, [pc, #208]	; (8005240 <lcd_screen_2_update+0x11c>)
 8005170:	2100      	movs	r1, #0
 8005172:	2042      	movs	r0, #66	; 0x42
 8005174:	f7ff fe7c 	bl	8004e70 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Q", 1);
 8005178:	2301      	movs	r3, #1
 800517a:	4a32      	ldr	r2, [pc, #200]	; (8005244 <lcd_screen_2_update+0x120>)
 800517c:	210c      	movs	r1, #12
 800517e:	2000      	movs	r0, #0
 8005180:	f7ff fe76 	bl	8004e70 <lcd_puts_xy>
	range_scale(data.ReactivePower, val_buf, range_buf);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f107 0210 	add.w	r2, r7, #16
 800518a:	f107 0114 	add.w	r1, r7, #20
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fe90 	bl	8004eb4 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1);
 8005194:	f107 0214 	add.w	r2, r7, #20
 8005198:	2301      	movs	r3, #1
 800519a:	210c      	movs	r1, #12
 800519c:	201c      	movs	r0, #28
 800519e:	f7ff fe67 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1);
 80051a2:	f107 0210 	add.w	r2, r7, #16
 80051a6:	2301      	movs	r3, #1
 80051a8:	210c      	movs	r1, #12
 80051aa:	203c      	movs	r0, #60	; 0x3c
 80051ac:	f7ff fe60 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAR", 1);
 80051b0:	2301      	movs	r3, #1
 80051b2:	4a25      	ldr	r2, [pc, #148]	; (8005248 <lcd_screen_2_update+0x124>)
 80051b4:	210c      	movs	r1, #12
 80051b6:	2042      	movs	r0, #66	; 0x42
 80051b8:	f7ff fe5a 	bl	8004e70 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_1, "S", 1);
 80051bc:	2301      	movs	r3, #1
 80051be:	4a23      	ldr	r2, [pc, #140]	; (800524c <lcd_screen_2_update+0x128>)
 80051c0:	2118      	movs	r1, #24
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7ff fe54 	bl	8004e70 <lcd_puts_xy>
	range_scale(data.ApparantPower, val_buf, range_buf);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f107 0210 	add.w	r2, r7, #16
 80051ce:	f107 0114 	add.w	r1, r7, #20
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fe6e 	bl	8004eb4 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1);
 80051d8:	f107 0214 	add.w	r2, r7, #20
 80051dc:	2301      	movs	r3, #1
 80051de:	2118      	movs	r1, #24
 80051e0:	201c      	movs	r0, #28
 80051e2:	f7ff fe45 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1);
 80051e6:	f107 0210 	add.w	r2, r7, #16
 80051ea:	2301      	movs	r3, #1
 80051ec:	2118      	movs	r1, #24
 80051ee:	203c      	movs	r0, #60	; 0x3c
 80051f0:	f7ff fe3e 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "VA", 1);
 80051f4:	2301      	movs	r3, #1
 80051f6:	4a16      	ldr	r2, [pc, #88]	; (8005250 <lcd_screen_2_update+0x12c>)
 80051f8:	2118      	movs	r1, #24
 80051fa:	2042      	movs	r0, #66	; 0x42
 80051fc:	f7ff fe38 	bl	8004e70 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "PF", 1);
 8005200:	2301      	movs	r3, #1
 8005202:	4a14      	ldr	r2, [pc, #80]	; (8005254 <lcd_screen_2_update+0x130>)
 8005204:	2129      	movs	r1, #41	; 0x29
 8005206:	2000      	movs	r0, #0
 8005208:	f7ff fe32 	bl	8004e70 <lcd_puts_xy>
	sprintf(val_buf, "%.2f", data.PowerFactor);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4618      	mov	r0, r3
 8005210:	f7fb f9aa 	bl	8000568 <__aeabi_f2d>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	f107 0014 	add.w	r0, r7, #20
 800521c:	490e      	ldr	r1, [pc, #56]	; (8005258 <lcd_screen_2_update+0x134>)
 800521e:	f001 f897 	bl	8006350 <siprintf>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1);
 8005222:	f107 0214 	add.w	r2, r7, #20
 8005226:	2301      	movs	r3, #1
 8005228:	2129      	movs	r1, #41	; 0x29
 800522a:	201c      	movs	r0, #28
 800522c:	f7ff fe20 	bl	8004e70 <lcd_puts_xy>

	LCD5110_Refresh();
 8005230:	f7fc fa12 	bl	8001658 <LCD5110_Refresh>
}
 8005234:	bf00      	nop
 8005236:	3724      	adds	r7, #36	; 0x24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd90      	pop	{r4, r7, pc}
 800523c:	08008800 	.word	0x08008800
 8005240:	08008804 	.word	0x08008804
 8005244:	08008808 	.word	0x08008808
 8005248:	0800880c 	.word	0x0800880c
 800524c:	08008810 	.word	0x08008810
 8005250:	08008814 	.word	0x08008814
 8005254:	08008818 	.word	0x08008818
 8005258:	0800881c 	.word	0x0800881c

0800525c <lcd_screen_3_update>:

void lcd_screen_3_update(LCD_Data_Screen3_t data) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b08e      	sub	sp, #56	; 0x38
 8005260:	af02      	add	r7, sp, #8
 8005262:	463b      	mov	r3, r7
 8005264:	e883 0003 	stmia.w	r3, {r0, r1}
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8005268:	f7fc f9c4 	bl	80015f4 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "P.t", 1);
 800526c:	2301      	movs	r3, #1
 800526e:	4a37      	ldr	r2, [pc, #220]	; (800534c <lcd_screen_3_update+0xf0>)
 8005270:	2100      	movs	r1, #0
 8005272:	2000      	movs	r0, #0
 8005274:	f7ff fdfc 	bl	8004e70 <lcd_puts_xy>
	range_scale(data.ActiveEnergy, val_buf, range_buf);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f107 0220 	add.w	r2, r7, #32
 800527e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fe16 	bl	8004eb4 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1);
 8005288:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800528c:	2301      	movs	r3, #1
 800528e:	2100      	movs	r1, #0
 8005290:	201c      	movs	r0, #28
 8005292:	f7ff fded 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1);
 8005296:	f107 0220 	add.w	r2, r7, #32
 800529a:	2301      	movs	r3, #1
 800529c:	2100      	movs	r1, #0
 800529e:	203c      	movs	r0, #60	; 0x3c
 80052a0:	f7ff fde6 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "Wh", 1);
 80052a4:	2301      	movs	r3, #1
 80052a6:	4a2a      	ldr	r2, [pc, #168]	; (8005350 <lcd_screen_3_update+0xf4>)
 80052a8:	2100      	movs	r1, #0
 80052aa:	2042      	movs	r0, #66	; 0x42
 80052ac:	f7ff fde0 	bl	8004e70 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "S.t", 1);
 80052b0:	2301      	movs	r3, #1
 80052b2:	4a28      	ldr	r2, [pc, #160]	; (8005354 <lcd_screen_3_update+0xf8>)
 80052b4:	210c      	movs	r1, #12
 80052b6:	2000      	movs	r0, #0
 80052b8:	f7ff fdda 	bl	8004e70 <lcd_puts_xy>
	range_scale(data.ApparantEnergy, val_buf, range_buf);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f107 0220 	add.w	r2, r7, #32
 80052c2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fdf4 	bl	8004eb4 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1);
 80052cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80052d0:	2301      	movs	r3, #1
 80052d2:	210c      	movs	r1, #12
 80052d4:	201c      	movs	r0, #28
 80052d6:	f7ff fdcb 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1);
 80052da:	f107 0220 	add.w	r2, r7, #32
 80052de:	2301      	movs	r3, #1
 80052e0:	210c      	movs	r1, #12
 80052e2:	203c      	movs	r0, #60	; 0x3c
 80052e4:	f7ff fdc4 	bl	8004e70 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAh", 1);
 80052e8:	2301      	movs	r3, #1
 80052ea:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <lcd_screen_3_update+0xfc>)
 80052ec:	210c      	movs	r1, #12
 80052ee:	2042      	movs	r0, #66	; 0x42
 80052f0:	f7ff fdbe 	bl	8004e70 <lcd_puts_xy>

	char days_buf[12];
	sprintf(days_buf, "%04lu day(s)", Screen3_Timer.days);
 80052f4:	4b19      	ldr	r3, [pc, #100]	; (800535c <lcd_screen_3_update+0x100>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	f107 0314 	add.w	r3, r7, #20
 80052fc:	4918      	ldr	r1, [pc, #96]	; (8005360 <lcd_screen_3_update+0x104>)
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 f826 	bl	8006350 <siprintf>
	lcd_puts_xy(0, ROW_LINE_3_2, days_buf, 1);
 8005304:	f107 0214 	add.w	r2, r7, #20
 8005308:	2301      	movs	r3, #1
 800530a:	211d      	movs	r1, #29
 800530c:	2000      	movs	r0, #0
 800530e:	f7ff fdaf 	bl	8004e70 <lcd_puts_xy>

	char runtime_buf[9];
	sprintf(runtime_buf, "%02u:%02u:%02u", Screen3_Timer.hours, Screen3_Timer.minutes, Screen3_Timer.seconds);
 8005312:	4b12      	ldr	r3, [pc, #72]	; (800535c <lcd_screen_3_update+0x100>)
 8005314:	791b      	ldrb	r3, [r3, #4]
 8005316:	461a      	mov	r2, r3
 8005318:	4b10      	ldr	r3, [pc, #64]	; (800535c <lcd_screen_3_update+0x100>)
 800531a:	795b      	ldrb	r3, [r3, #5]
 800531c:	4619      	mov	r1, r3
 800531e:	4b0f      	ldr	r3, [pc, #60]	; (800535c <lcd_screen_3_update+0x100>)
 8005320:	799b      	ldrb	r3, [r3, #6]
 8005322:	f107 0008 	add.w	r0, r7, #8
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	460b      	mov	r3, r1
 800532a:	490e      	ldr	r1, [pc, #56]	; (8005364 <lcd_screen_3_update+0x108>)
 800532c:	f001 f810 	bl	8006350 <siprintf>
	lcd_puts_xy(0, ROW_LINE_4, runtime_buf, 1);
 8005330:	f107 0208 	add.w	r2, r7, #8
 8005334:	2301      	movs	r3, #1
 8005336:	2129      	movs	r1, #41	; 0x29
 8005338:	2000      	movs	r0, #0
 800533a:	f7ff fd99 	bl	8004e70 <lcd_puts_xy>

	LCD5110_Refresh();
 800533e:	f7fc f98b 	bl	8001658 <LCD5110_Refresh>
}
 8005342:	bf00      	nop
 8005344:	3730      	adds	r7, #48	; 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	08008824 	.word	0x08008824
 8005350:	08008828 	.word	0x08008828
 8005354:	0800882c 	.word	0x0800882c
 8005358:	08008830 	.word	0x08008830
 800535c:	20012f90 	.word	0x20012f90
 8005360:	08008834 	.word	0x08008834
 8005364:	08008844 	.word	0x08008844

08005368 <lcd_screen_4_update>:

void lcd_screen_4_update(LCD_Data_Screen4_t data) {
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	463c      	mov	r4, r7
 8005370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LCD5110_Clear();
 8005374:	f7fc f93e 	bl	80015f4 <LCD5110_Clear>

	LCD5110_Refresh();
 8005378:	f7fc f96e 	bl	8001658 <LCD5110_Refresh>
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	bd90      	pop	{r4, r7, pc}

08005384 <lcd_screen_3_reset>:

void lcd_screen_3_reset() {
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
	memset(&Screen3_Timer, 0, sizeof(Screen3_Timer));
 8005388:	2208      	movs	r2, #8
 800538a:	2100      	movs	r1, #0
 800538c:	4802      	ldr	r0, [pc, #8]	; (8005398 <lcd_screen_3_reset+0x14>)
 800538e:	f000 fb6b 	bl	8005a68 <memset>
}
 8005392:	bf00      	nop
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20012f90 	.word	0x20012f90

0800539c <lcd_screen_3_timer_update>:

void lcd_screen_4_reset() {

}

void lcd_screen_3_timer_update(uint8_t second_update) {
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	71fb      	strb	r3, [r7, #7]
	if(second_update) {
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d02f      	beq.n	800540c <lcd_screen_3_timer_update+0x70>
		Screen3_Timer.seconds += second_update;
 80053ac:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053ae:	799a      	ldrb	r2, [r3, #6]
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	4413      	add	r3, r2
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	4b18      	ldr	r3, [pc, #96]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053b8:	719a      	strb	r2, [r3, #6]
		if(Screen3_Timer.seconds > 59) {
 80053ba:	4b17      	ldr	r3, [pc, #92]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053bc:	799b      	ldrb	r3, [r3, #6]
 80053be:	2b3b      	cmp	r3, #59	; 0x3b
 80053c0:	d924      	bls.n	800540c <lcd_screen_3_timer_update+0x70>
			Screen3_Timer.seconds -= 60;
 80053c2:	4b15      	ldr	r3, [pc, #84]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053c4:	799b      	ldrb	r3, [r3, #6]
 80053c6:	3b3c      	subs	r3, #60	; 0x3c
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	4b13      	ldr	r3, [pc, #76]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053cc:	719a      	strb	r2, [r3, #6]
			Screen3_Timer.minutes++;
 80053ce:	4b12      	ldr	r3, [pc, #72]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053d0:	795b      	ldrb	r3, [r3, #5]
 80053d2:	3301      	adds	r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	4b10      	ldr	r3, [pc, #64]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053d8:	715a      	strb	r2, [r3, #5]
			if(Screen3_Timer.minutes > 59) {
 80053da:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053dc:	795b      	ldrb	r3, [r3, #5]
 80053de:	2b3b      	cmp	r3, #59	; 0x3b
 80053e0:	d914      	bls.n	800540c <lcd_screen_3_timer_update+0x70>
				Screen3_Timer.minutes -= 60;
 80053e2:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053e4:	795b      	ldrb	r3, [r3, #5]
 80053e6:	3b3c      	subs	r3, #60	; 0x3c
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053ec:	715a      	strb	r2, [r3, #5]
				Screen3_Timer.hours++;
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053f0:	791b      	ldrb	r3, [r3, #4]
 80053f2:	3301      	adds	r3, #1
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	4b08      	ldr	r3, [pc, #32]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053f8:	711a      	strb	r2, [r3, #4]
				if(Screen3_Timer.hours > 23) Screen3_Timer.days++;
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 80053fc:	791b      	ldrb	r3, [r3, #4]
 80053fe:	2b17      	cmp	r3, #23
 8005400:	d904      	bls.n	800540c <lcd_screen_3_timer_update+0x70>
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3301      	adds	r3, #1
 8005408:	4a03      	ldr	r2, [pc, #12]	; (8005418 <lcd_screen_3_timer_update+0x7c>)
 800540a:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	20012f90 	.word	0x20012f90

0800541c <main>:
void rtc_handler(void* parameters);
void usart_handler(void* parameters);

void LED_Init();

int main(void) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af02      	add	r7, sp, #8
	LED_Init();
 8005422:	f000 f96d 	bl	8005700 <LED_Init>
	TaskHandle_t lcd_handle;
	TaskHandle_t ade_handle;
	TaskHandle_t rtc_handle;
	TaskHandle_t usart_handle;

	xTaskCreate(keypad_handler, "Keypad", 256, NULL, 2, &keypad_handle);
 8005426:	f107 0314 	add.w	r3, r7, #20
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	2302      	movs	r3, #2
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	2300      	movs	r3, #0
 8005432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005436:	491f      	ldr	r1, [pc, #124]	; (80054b4 <main+0x98>)
 8005438:	481f      	ldr	r0, [pc, #124]	; (80054b8 <main+0x9c>)
 800543a:	f7fd f81d 	bl	8002478 <xTaskCreate>
	xTaskCreate(lcd_handler, "LCD5110", 1024, NULL, 2, &lcd_handle);
 800543e:	f107 0310 	add.w	r3, r7, #16
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	2302      	movs	r3, #2
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2300      	movs	r3, #0
 800544a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800544e:	491b      	ldr	r1, [pc, #108]	; (80054bc <main+0xa0>)
 8005450:	481b      	ldr	r0, [pc, #108]	; (80054c0 <main+0xa4>)
 8005452:	f7fd f811 	bl	8002478 <xTaskCreate>
	xTaskCreate(ade_handler, "ADE7753", 1024, NULL, 2, &ade_handle);
 8005456:	f107 030c 	add.w	r3, r7, #12
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	2302      	movs	r3, #2
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2300      	movs	r3, #0
 8005462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005466:	4917      	ldr	r1, [pc, #92]	; (80054c4 <main+0xa8>)
 8005468:	4817      	ldr	r0, [pc, #92]	; (80054c8 <main+0xac>)
 800546a:	f7fd f805 	bl	8002478 <xTaskCreate>
	xTaskCreate(rtc_handler, "DS1307", 256, NULL, 2, &rtc_handle);
 800546e:	f107 0308 	add.w	r3, r7, #8
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	2302      	movs	r3, #2
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	2300      	movs	r3, #0
 800547a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800547e:	4913      	ldr	r1, [pc, #76]	; (80054cc <main+0xb0>)
 8005480:	4813      	ldr	r0, [pc, #76]	; (80054d0 <main+0xb4>)
 8005482:	f7fc fff9 	bl	8002478 <xTaskCreate>
	xTaskCreate(usart_handler, "USART", 256, NULL, 2, &usart_handle);
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	2302      	movs	r3, #2
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	2300      	movs	r3, #0
 8005490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005494:	490f      	ldr	r1, [pc, #60]	; (80054d4 <main+0xb8>)
 8005496:	4810      	ldr	r0, [pc, #64]	; (80054d8 <main+0xbc>)
 8005498:	f7fc ffee 	bl	8002478 <xTaskCreate>

	keypad_queue_handle = xQueueCreate(10, sizeof(KEYPAD_Button_t));
 800549c:	2200      	movs	r2, #0
 800549e:	2101      	movs	r1, #1
 80054a0:	200a      	movs	r0, #10
 80054a2:	f7fc fb71 	bl	8001b88 <xQueueGenericCreate>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4a0c      	ldr	r2, [pc, #48]	; (80054dc <main+0xc0>)
 80054aa:	6013      	str	r3, [r2, #0]
//	ade_queue_handle = xQueueCreate(10, sizeof(uint8_t));

	vTaskStartScheduler();
 80054ac:	f7fd f95e 	bl	800276c <vTaskStartScheduler>

	while(1);
 80054b0:	e7fe      	b.n	80054b0 <main+0x94>
 80054b2:	bf00      	nop
 80054b4:	08008854 	.word	0x08008854
 80054b8:	080054e1 	.word	0x080054e1
 80054bc:	0800885c 	.word	0x0800885c
 80054c0:	08005539 	.word	0x08005539
 80054c4:	08008864 	.word	0x08008864
 80054c8:	08005631 	.word	0x08005631
 80054cc:	0800886c 	.word	0x0800886c
 80054d0:	08005665 	.word	0x08005665
 80054d4:	08008874 	.word	0x08008874
 80054d8:	080056e1 	.word	0x080056e1
 80054dc:	2001320c 	.word	0x2001320c

080054e0 <keypad_handler>:
	return 0;
}

void keypad_handler(void* parameters) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	KEYPAD_Init(KEYPAD_Type_Large);
 80054e8:	2000      	movs	r0, #0
 80054ea:	f7fb fd7f 	bl	8000fec <KEYPAD_Init>
	KEYPAD_Button_t Keypad_Button, Keypad_prev = KEYPAD_NOPRESSED;
 80054ee:	23ff      	movs	r3, #255	; 0xff
 80054f0:	73fb      	strb	r3, [r7, #15]

	while(1) {
		KEYPAD_Update();
 80054f2:	f7fb fed1 	bl	8001298 <KEYPAD_Update>
		Keypad_Button = KEYPAD_Read();
 80054f6:	f7fb fdeb 	bl	80010d0 <KEYPAD_Read>
 80054fa:	4603      	mov	r3, r0
 80054fc:	73bb      	strb	r3, [r7, #14]
		if(Keypad_Button != KEYPAD_NOPRESSED && Keypad_prev == KEYPAD_NOPRESSED) {
 80054fe:	7bbb      	ldrb	r3, [r7, #14]
 8005500:	2bff      	cmp	r3, #255	; 0xff
 8005502:	d00a      	beq.n	800551a <keypad_handler+0x3a>
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2bff      	cmp	r3, #255	; 0xff
 8005508:	d107      	bne.n	800551a <keypad_handler+0x3a>
			xQueueSend(keypad_queue_handle, (void*) &Keypad_Button, (TickType_t) 0);
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <keypad_handler+0x50>)
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	f107 010e 	add.w	r1, r7, #14
 8005512:	2300      	movs	r3, #0
 8005514:	2200      	movs	r2, #0
 8005516:	f7fc fbb9 	bl	8001c8c <xQueueGenericSend>
		}
		Keypad_prev = Keypad_Button;
 800551a:	7bbb      	ldrb	r3, [r7, #14]
 800551c:	73fb      	strb	r3, [r7, #15]
		taskYIELD();
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <keypad_handler+0x54>)
 8005520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	f3bf 8f6f 	isb	sy
		KEYPAD_Update();
 800552e:	e7e0      	b.n	80054f2 <keypad_handler+0x12>
 8005530:	2001320c 	.word	0x2001320c
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <lcd_handler>:
	}
}

void lcd_handler(void* parameters) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	LCD5110_Init(0x37);
 8005540:	2037      	movs	r0, #55	; 0x37
 8005542:	f7fb ff33 	bl	80013ac <LCD5110_Init>

	memset(&screen1, 0, sizeof(screen1));
 8005546:	2210      	movs	r2, #16
 8005548:	2100      	movs	r1, #0
 800554a:	4833      	ldr	r0, [pc, #204]	; (8005618 <lcd_handler+0xe0>)
 800554c:	f000 fa8c 	bl	8005a68 <memset>
	memset(&screen2, 0, sizeof(screen2));
 8005550:	2210      	movs	r2, #16
 8005552:	2100      	movs	r1, #0
 8005554:	4831      	ldr	r0, [pc, #196]	; (800561c <lcd_handler+0xe4>)
 8005556:	f000 fa87 	bl	8005a68 <memset>
	memset(&screen3, 0, sizeof(screen3));
 800555a:	2208      	movs	r2, #8
 800555c:	2100      	movs	r1, #0
 800555e:	4830      	ldr	r0, [pc, #192]	; (8005620 <lcd_handler+0xe8>)
 8005560:	f000 fa82 	bl	8005a68 <memset>
	memset(&screen4, 0, sizeof(screen4));
 8005564:	2210      	movs	r2, #16
 8005566:	2100      	movs	r1, #0
 8005568:	482e      	ldr	r0, [pc, #184]	; (8005624 <lcd_handler+0xec>)
 800556a:	f000 fa7d 	bl	8005a68 <memset>

	lcd_screen_3_reset();
 800556e:	f7ff ff09 	bl	8005384 <lcd_screen_3_reset>

	KEYPAD_Button_t keypad;
//	LCD_ScreenMode_t lcd_mode = LCD_Config_Mode;
	LCD_Screen_t screen = LCD_Screen_1;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]

	while(1) {
		if(keypad_queue_handle != NULL && xQueueReceive(keypad_queue_handle, &keypad, (TickType_t) 10) == pdPASS) {
 8005576:	4b2c      	ldr	r3, [pc, #176]	; (8005628 <lcd_handler+0xf0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d020      	beq.n	80055c0 <lcd_handler+0x88>
 800557e:	4b2a      	ldr	r3, [pc, #168]	; (8005628 <lcd_handler+0xf0>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f107 010e 	add.w	r1, r7, #14
 8005586:	220a      	movs	r2, #10
 8005588:	4618      	mov	r0, r3
 800558a:	f7fc fd27 	bl	8001fdc <xQueueReceive>
 800558e:	4603      	mov	r3, r0
 8005590:	2b01      	cmp	r3, #1
 8005592:	d115      	bne.n	80055c0 <lcd_handler+0x88>
			switch (keypad) {
 8005594:	7bbb      	ldrb	r3, [r7, #14]
 8005596:	2b0f      	cmp	r3, #15
 8005598:	d00c      	beq.n	80055b4 <lcd_handler+0x7c>
 800559a:	2b0f      	cmp	r3, #15
 800559c:	dc0d      	bgt.n	80055ba <lcd_handler+0x82>
 800559e:	2b0d      	cmp	r3, #13
 80055a0:	d002      	beq.n	80055a8 <lcd_handler+0x70>
 80055a2:	2b0e      	cmp	r3, #14
 80055a4:	d003      	beq.n	80055ae <lcd_handler+0x76>
 80055a6:	e008      	b.n	80055ba <lcd_handler+0x82>
				case KEYPAD_Button_B:
					screen = LCD_Screen_2;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]
					break;
 80055ac:	e009      	b.n	80055c2 <lcd_handler+0x8a>
				case KEYPAD_Button_C:
					screen = LCD_Screen_3;
 80055ae:	2302      	movs	r3, #2
 80055b0:	73fb      	strb	r3, [r7, #15]
					break;
 80055b2:	e006      	b.n	80055c2 <lcd_handler+0x8a>
				case KEYPAD_Button_D:
					screen = LCD_Screen_4;
 80055b4:	2303      	movs	r3, #3
 80055b6:	73fb      	strb	r3, [r7, #15]
					break;
 80055b8:	e003      	b.n	80055c2 <lcd_handler+0x8a>
				case KEYPAD_Button_A:
				default:
					screen = LCD_Screen_1;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
					break;
 80055be:	e000      	b.n	80055c2 <lcd_handler+0x8a>
			}
		}
 80055c0:	bf00      	nop

		switch (screen) {
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d011      	beq.n	80055ec <lcd_handler+0xb4>
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	dc14      	bgt.n	80055f6 <lcd_handler+0xbe>
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d002      	beq.n	80055d6 <lcd_handler+0x9e>
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d005      	beq.n	80055e0 <lcd_handler+0xa8>
 80055d4:	e00f      	b.n	80055f6 <lcd_handler+0xbe>
			case LCD_Screen_2:
				lcd_screen_2_update(screen2);
 80055d6:	4b11      	ldr	r3, [pc, #68]	; (800561c <lcd_handler+0xe4>)
 80055d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055da:	f7ff fda3 	bl	8005124 <lcd_screen_2_update>
				break;
 80055de:	e00f      	b.n	8005600 <lcd_handler+0xc8>
			case LCD_Screen_3:
				lcd_screen_3_update(screen3);
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <lcd_handler+0xe8>)
 80055e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80055e6:	f7ff fe39 	bl	800525c <lcd_screen_3_update>
				break;
 80055ea:	e009      	b.n	8005600 <lcd_handler+0xc8>
			case LCD_Screen_4:
				lcd_screen_4_update(screen4);
 80055ec:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <lcd_handler+0xec>)
 80055ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055f0:	f7ff feba 	bl	8005368 <lcd_screen_4_update>
				break;
 80055f4:	e004      	b.n	8005600 <lcd_handler+0xc8>
			case LCD_Screen_1:
			default:
				lcd_screen_1_update(screen1);
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <lcd_handler+0xe0>)
 80055f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055fa:	f7ff fcf1 	bl	8004fe0 <lcd_screen_1_update>
				break;
 80055fe:	bf00      	nop
		}
		vTaskDelay(200);
 8005600:	20c8      	movs	r0, #200	; 0xc8
 8005602:	f7fd f87f 	bl	8002704 <vTaskDelay>
		taskYIELD();
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <lcd_handler+0xf4>)
 8005608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
		if(keypad_queue_handle != NULL && xQueueReceive(keypad_queue_handle, &keypad, (TickType_t) 10) == pdPASS) {
 8005616:	e7ae      	b.n	8005576 <lcd_handler+0x3e>
 8005618:	20013210 	.word	0x20013210
 800561c:	20013230 	.word	0x20013230
 8005620:	20013240 	.word	0x20013240
 8005624:	20013220 	.word	0x20013220
 8005628:	2001320c 	.word	0x2001320c
 800562c:	e000ed04 	.word	0xe000ed04

08005630 <ade_handler>:
	}
}

void ade_handler(void* parameters) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
//	char buffer[20];
	ADE_Init();
 8005638:	f7fb fac6 	bl	8000bc8 <ADE_Init>
	ADE_WriteData(IRQEN, 0x0010, 2);
 800563c:	2202      	movs	r2, #2
 800563e:	2110      	movs	r1, #16
 8005640:	200a      	movs	r0, #10
 8005642:	f7fb fb23 	bl	8000c8c <ADE_WriteData>
	ADE_ReadData(RSTSTATUS, 2);
 8005646:	2102      	movs	r1, #2
 8005648:	200c      	movs	r0, #12
 800564a:	f7fb faeb 	bl	8000c24 <ADE_ReadData>

	while(1) {
//		ADE_ReadData(RSTSTATUS, 2);
		taskYIELD();
 800564e:	4b04      	ldr	r3, [pc, #16]	; (8005660 <ade_handler+0x30>)
 8005650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	e7f6      	b.n	800564e <ade_handler+0x1e>
 8005660:	e000ed04 	.word	0xe000ed04

08005664 <rtc_handler>:
	}
}

void rtc_handler(void* parameters) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
	ds1307_init();
 800566c:	f7fb fbd8 	bl	8000e20 <ds1307_init>

	RTC_time_t rtc_time, rtc_time_prev;
	ds1307_get_current_time(&rtc_time_prev);
 8005670:	f107 0308 	add.w	r3, r7, #8
 8005674:	4618      	mov	r0, r3
 8005676:	f7fb fbe1 	bl	8000e3c <ds1307_get_current_time>

	while(1) {
		ds1307_get_current_time(&rtc_time);
 800567a:	f107 030c 	add.w	r3, r7, #12
 800567e:	4618      	mov	r0, r3
 8005680:	f7fb fbdc 	bl	8000e3c <ds1307_get_current_time>
		screen4.RtcTime = rtc_time;
 8005684:	4a14      	ldr	r2, [pc, #80]	; (80056d8 <rtc_handler+0x74>)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	60d3      	str	r3, [r2, #12]

		if(rtc_time.seconds > rtc_time_prev.seconds)
 800568a:	7b3a      	ldrb	r2, [r7, #12]
 800568c:	7a3b      	ldrb	r3, [r7, #8]
 800568e:	429a      	cmp	r2, r3
 8005690:	d907      	bls.n	80056a2 <rtc_handler+0x3e>
			lcd_screen_3_timer_update(rtc_time.seconds - rtc_time_prev.seconds);
 8005692:	7b3a      	ldrb	r2, [r7, #12]
 8005694:	7a3b      	ldrb	r3, [r7, #8]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	b2db      	uxtb	r3, r3
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fe7e 	bl	800539c <lcd_screen_3_timer_update>
 80056a0:	e00c      	b.n	80056bc <rtc_handler+0x58>
		else if(rtc_time.seconds < rtc_time_prev.seconds)
 80056a2:	7b3a      	ldrb	r2, [r7, #12]
 80056a4:	7a3b      	ldrb	r3, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d208      	bcs.n	80056bc <rtc_handler+0x58>
			lcd_screen_3_timer_update(60 + rtc_time.seconds - rtc_time_prev.seconds);
 80056aa:	7b3a      	ldrb	r2, [r7, #12]
 80056ac:	7a3b      	ldrb	r3, [r7, #8]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	333c      	adds	r3, #60	; 0x3c
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fe70 	bl	800539c <lcd_screen_3_timer_update>

		rtc_time_prev = rtc_time;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	60bb      	str	r3, [r7, #8]
		vTaskDelay(200);
 80056c0:	20c8      	movs	r0, #200	; 0xc8
 80056c2:	f7fd f81f 	bl	8002704 <vTaskDelay>
		taskYIELD();
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <rtc_handler+0x78>)
 80056c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
		ds1307_get_current_time(&rtc_time);
 80056d6:	e7d0      	b.n	800567a <rtc_handler+0x16>
 80056d8:	20013220 	.word	0x20013220
 80056dc:	e000ed04 	.word	0xe000ed04

080056e0 <usart_handler>:
	}
}

void usart_handler(void* parameters) {
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]



	while(1) {
		taskYIELD();
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <usart_handler+0x1c>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	e7f6      	b.n	80056e8 <usart_handler+0x8>
 80056fa:	bf00      	nop
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <LED_Init>:
	}
}

void LED_Init() {
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = PORT_LED;
 8005706:	4b17      	ldr	r3, [pc, #92]	; (8005764 <LED_Init+0x64>)
 8005708:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800570a:	2301      	movs	r3, #1
 800570c:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800570e:	2302      	movs	r3, #2
 8005710:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8005712:	2300      	movs	r3, #0
 8005714:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8005716:	2300      	movs	r3, #0
 8005718:	72fb      	strb	r3, [r7, #11]

//	Red LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_R_LED;
 800571a:	2301      	movs	r3, #1
 800571c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 800571e:	1d3b      	adds	r3, r7, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fd17 	bl	8004154 <GPIO_Init>

//	Green LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_G_LED;
 8005726:	2303      	movs	r3, #3
 8005728:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe fd11 	bl	8004154 <GPIO_Init>

//	Blue LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_B_LED;
 8005732:	2305      	movs	r3, #5
 8005734:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8005736:	1d3b      	adds	r3, r7, #4
 8005738:	4618      	mov	r0, r3
 800573a:	f7fe fd0b 	bl	8004154 <GPIO_Init>

//	R_LED_OFF;
//	G_LED_OFF;
//	B_LED_OFF;

	R_LED_ON;
 800573e:	2200      	movs	r2, #0
 8005740:	2101      	movs	r1, #1
 8005742:	4808      	ldr	r0, [pc, #32]	; (8005764 <LED_Init+0x64>)
 8005744:	f7fe feb8 	bl	80044b8 <GPIO_WriteToOutputPin>
	G_LED_ON;
 8005748:	2200      	movs	r2, #0
 800574a:	2103      	movs	r1, #3
 800574c:	4805      	ldr	r0, [pc, #20]	; (8005764 <LED_Init+0x64>)
 800574e:	f7fe feb3 	bl	80044b8 <GPIO_WriteToOutputPin>
	B_LED_ON;
 8005752:	2200      	movs	r2, #0
 8005754:	2105      	movs	r1, #5
 8005756:	4803      	ldr	r0, [pc, #12]	; (8005764 <LED_Init+0x64>)
 8005758:	f7fe feae 	bl	80044b8 <GPIO_WriteToOutputPin>
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40021000 	.word	0x40021000

08005768 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
    uint32_t pending = EXTI->PR;
 800576e:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <EXTI15_10_IRQHandler+0x5c>)
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	607b      	str	r3, [r7, #4]

    if(pending & (1 << PIN_SAG)) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <EXTI15_10_IRQHandler+0x22>
        EXTI->PR |= 1 << PIN_SAG;		// clear pending flag, otherwise we'd get endless interrupts
 800577e:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <EXTI15_10_IRQHandler+0x5c>)
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	4a10      	ldr	r2, [pc, #64]	; (80057c4 <EXTI15_10_IRQHandler+0x5c>)
 8005784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005788:	6153      	str	r3, [r2, #20]
        // handle pin SAG here
    }

    if(pending & (1 << PIN_ZX_IT)) {
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <EXTI15_10_IRQHandler+0x38>
        EXTI->PR |= 1 << PIN_ZX_IT;		// clear pending flag, otherwise we'd get endless interrupts
 8005794:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <EXTI15_10_IRQHandler+0x5c>)
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <EXTI15_10_IRQHandler+0x5c>)
 800579a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800579e:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
    }

    if(pending & (1 << PIN_IRQ_IT)) {
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <EXTI15_10_IRQHandler+0x4e>
        EXTI->PR |= 1 << PIN_IRQ_IT;	// clear pending flag, otherwise we'd get endless interrupts
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <EXTI15_10_IRQHandler+0x5c>)
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	4a05      	ldr	r2, [pc, #20]	; (80057c4 <EXTI15_10_IRQHandler+0x5c>)
 80057b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b4:	6153      	str	r3, [r2, #20]
        // handle pin I here
    }
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40013c00 	.word	0x40013c00

080057c8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80057d2:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <ITM_SendChar+0x48>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a0e      	ldr	r2, [pc, #56]	; (8005810 <ITM_SendChar+0x48>)
 80057d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057dc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80057de:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <ITM_SendChar+0x4c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a0c      	ldr	r2, [pc, #48]	; (8005814 <ITM_SendChar+0x4c>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80057ea:	bf00      	nop
 80057ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f8      	beq.n	80057ec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80057fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	6013      	str	r3, [r2, #0]
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	e000edfc 	.word	0xe000edfc
 8005814:	e0000e00 	.word	0xe0000e00

08005818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
	return 1;
 800581c:	2301      	movs	r3, #1
}
 800581e:	4618      	mov	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <_kill>:

int _kill(int pid, int sig)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005832:	f000 f8e1 	bl	80059f8 <__errno>
 8005836:	4603      	mov	r3, r0
 8005838:	2216      	movs	r2, #22
 800583a:	601a      	str	r2, [r3, #0]
	return -1;
 800583c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <_exit>:

void _exit (int status)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005850:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff ffe7 	bl	8005828 <_kill>
	while (1) {}		/* Make sure we hang here */
 800585a:	e7fe      	b.n	800585a <_exit+0x12>

0800585c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e00a      	b.n	8005884 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800586e:	f3af 8000 	nop.w
 8005872:	4601      	mov	r1, r0
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	60ba      	str	r2, [r7, #8]
 800587a:	b2ca      	uxtb	r2, r1
 800587c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	3301      	adds	r3, #1
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	dbf0      	blt.n	800586e <_read+0x12>
	}

return len;
 800588c:	687b      	ldr	r3, [r7, #4]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b086      	sub	sp, #24
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e009      	b.n	80058bc <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	60ba      	str	r2, [r7, #8]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff ff89 	bl	80057c8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	3301      	adds	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	dbf1      	blt.n	80058a8 <_write+0x12>
	}
	return len;
 80058c4:	687b      	ldr	r3, [r7, #4]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <_close>:

int _close(int file)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
	return -1;
 80058d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058f6:	605a      	str	r2, [r3, #4]
	return 0;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <_isatty>:

int _isatty(int file)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
	return 1;
 800590e:	2301      	movs	r3, #1
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
	return 0;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005940:	4a14      	ldr	r2, [pc, #80]	; (8005994 <_sbrk+0x5c>)
 8005942:	4b15      	ldr	r3, [pc, #84]	; (8005998 <_sbrk+0x60>)
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800594c:	4b13      	ldr	r3, [pc, #76]	; (800599c <_sbrk+0x64>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005954:	4b11      	ldr	r3, [pc, #68]	; (800599c <_sbrk+0x64>)
 8005956:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <_sbrk+0x68>)
 8005958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800595a:	4b10      	ldr	r3, [pc, #64]	; (800599c <_sbrk+0x64>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	429a      	cmp	r2, r3
 8005966:	d207      	bcs.n	8005978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005968:	f000 f846 	bl	80059f8 <__errno>
 800596c:	4603      	mov	r3, r0
 800596e:	220c      	movs	r2, #12
 8005970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005976:	e009      	b.n	800598c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005978:	4b08      	ldr	r3, [pc, #32]	; (800599c <_sbrk+0x64>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800597e:	4b07      	ldr	r3, [pc, #28]	; (800599c <_sbrk+0x64>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4413      	add	r3, r2
 8005986:	4a05      	ldr	r2, [pc, #20]	; (800599c <_sbrk+0x64>)
 8005988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800598a:	68fb      	ldr	r3, [r7, #12]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20020000 	.word	0x20020000
 8005998:	00000400 	.word	0x00000400
 800599c:	20012f98 	.word	0x20012f98
 80059a0:	20013258 	.word	0x20013258

080059a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80059a4:	480d      	ldr	r0, [pc, #52]	; (80059dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80059a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80059a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059ac:	480c      	ldr	r0, [pc, #48]	; (80059e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80059ae:	490d      	ldr	r1, [pc, #52]	; (80059e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80059b0:	4a0d      	ldr	r2, [pc, #52]	; (80059e8 <LoopForever+0xe>)
  movs r3, #0
 80059b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059b4:	e002      	b.n	80059bc <LoopCopyDataInit>

080059b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059ba:	3304      	adds	r3, #4

080059bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059c0:	d3f9      	bcc.n	80059b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059c2:	4a0a      	ldr	r2, [pc, #40]	; (80059ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80059c4:	4c0a      	ldr	r4, [pc, #40]	; (80059f0 <LoopForever+0x16>)
  movs r3, #0
 80059c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059c8:	e001      	b.n	80059ce <LoopFillZerobss>

080059ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059cc:	3204      	adds	r2, #4

080059ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059d0:	d3fb      	bcc.n	80059ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80059d2:	f000 f817 	bl	8005a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80059d6:	f7ff fd21 	bl	800541c <main>

080059da <LoopForever>:

LoopForever:
    b LoopForever
 80059da:	e7fe      	b.n	80059da <LoopForever>
  ldr   r0, =_estack
 80059dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80059e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059e4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80059e8:	08008fec 	.word	0x08008fec
  ldr r2, =_sbss
 80059ec:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80059f0:	20013258 	.word	0x20013258

080059f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80059f4:	e7fe      	b.n	80059f4 <ADC_IRQHandler>
	...

080059f8 <__errno>:
 80059f8:	4b01      	ldr	r3, [pc, #4]	; (8005a00 <__errno+0x8>)
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20000034 	.word	0x20000034

08005a04 <__libc_init_array>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4d0d      	ldr	r5, [pc, #52]	; (8005a3c <__libc_init_array+0x38>)
 8005a08:	4c0d      	ldr	r4, [pc, #52]	; (8005a40 <__libc_init_array+0x3c>)
 8005a0a:	1b64      	subs	r4, r4, r5
 8005a0c:	10a4      	asrs	r4, r4, #2
 8005a0e:	2600      	movs	r6, #0
 8005a10:	42a6      	cmp	r6, r4
 8005a12:	d109      	bne.n	8005a28 <__libc_init_array+0x24>
 8005a14:	4d0b      	ldr	r5, [pc, #44]	; (8005a44 <__libc_init_array+0x40>)
 8005a16:	4c0c      	ldr	r4, [pc, #48]	; (8005a48 <__libc_init_array+0x44>)
 8005a18:	f002 feb4 	bl	8008784 <_init>
 8005a1c:	1b64      	subs	r4, r4, r5
 8005a1e:	10a4      	asrs	r4, r4, #2
 8005a20:	2600      	movs	r6, #0
 8005a22:	42a6      	cmp	r6, r4
 8005a24:	d105      	bne.n	8005a32 <__libc_init_array+0x2e>
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2c:	4798      	blx	r3
 8005a2e:	3601      	adds	r6, #1
 8005a30:	e7ee      	b.n	8005a10 <__libc_init_array+0xc>
 8005a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a36:	4798      	blx	r3
 8005a38:	3601      	adds	r6, #1
 8005a3a:	e7f2      	b.n	8005a22 <__libc_init_array+0x1e>
 8005a3c:	08008fe4 	.word	0x08008fe4
 8005a40:	08008fe4 	.word	0x08008fe4
 8005a44:	08008fe4 	.word	0x08008fe4
 8005a48:	08008fe8 	.word	0x08008fe8

08005a4c <memcpy>:
 8005a4c:	440a      	add	r2, r1
 8005a4e:	4291      	cmp	r1, r2
 8005a50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a54:	d100      	bne.n	8005a58 <memcpy+0xc>
 8005a56:	4770      	bx	lr
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a62:	4291      	cmp	r1, r2
 8005a64:	d1f9      	bne.n	8005a5a <memcpy+0xe>
 8005a66:	bd10      	pop	{r4, pc}

08005a68 <memset>:
 8005a68:	4402      	add	r2, r0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d100      	bne.n	8005a72 <memset+0xa>
 8005a70:	4770      	bx	lr
 8005a72:	f803 1b01 	strb.w	r1, [r3], #1
 8005a76:	e7f9      	b.n	8005a6c <memset+0x4>

08005a78 <__cvt>:
 8005a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	b088      	sub	sp, #32
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	461d      	mov	r5, r3
 8005a82:	4614      	mov	r4, r2
 8005a84:	bfbc      	itt	lt
 8005a86:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a8a:	4614      	movlt	r4, r2
 8005a8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a8e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005a90:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005a94:	bfb6      	itet	lt
 8005a96:	461d      	movlt	r5, r3
 8005a98:	2300      	movge	r3, #0
 8005a9a:	232d      	movlt	r3, #45	; 0x2d
 8005a9c:	7013      	strb	r3, [r2, #0]
 8005a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005aa0:	f023 0820 	bic.w	r8, r3, #32
 8005aa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005aa8:	d005      	beq.n	8005ab6 <__cvt+0x3e>
 8005aaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005aae:	d100      	bne.n	8005ab2 <__cvt+0x3a>
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e000      	b.n	8005ab8 <__cvt+0x40>
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	aa07      	add	r2, sp, #28
 8005aba:	9204      	str	r2, [sp, #16]
 8005abc:	aa06      	add	r2, sp, #24
 8005abe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005ac2:	e9cd 3600 	strd	r3, r6, [sp]
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	462b      	mov	r3, r5
 8005aca:	f000 fced 	bl	80064a8 <_dtoa_r>
 8005ace:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ad2:	4607      	mov	r7, r0
 8005ad4:	d102      	bne.n	8005adc <__cvt+0x64>
 8005ad6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ad8:	07db      	lsls	r3, r3, #31
 8005ada:	d522      	bpl.n	8005b22 <__cvt+0xaa>
 8005adc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ae0:	eb07 0906 	add.w	r9, r7, r6
 8005ae4:	d110      	bne.n	8005b08 <__cvt+0x90>
 8005ae6:	783b      	ldrb	r3, [r7, #0]
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d10a      	bne.n	8005b02 <__cvt+0x8a>
 8005aec:	2200      	movs	r2, #0
 8005aee:	2300      	movs	r3, #0
 8005af0:	4620      	mov	r0, r4
 8005af2:	4629      	mov	r1, r5
 8005af4:	f7fa fff8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005af8:	b918      	cbnz	r0, 8005b02 <__cvt+0x8a>
 8005afa:	f1c6 0601 	rsb	r6, r6, #1
 8005afe:	f8ca 6000 	str.w	r6, [sl]
 8005b02:	f8da 3000 	ldr.w	r3, [sl]
 8005b06:	4499      	add	r9, r3
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	4629      	mov	r1, r5
 8005b10:	f7fa ffea 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b14:	b108      	cbz	r0, 8005b1a <__cvt+0xa2>
 8005b16:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b1a:	2230      	movs	r2, #48	; 0x30
 8005b1c:	9b07      	ldr	r3, [sp, #28]
 8005b1e:	454b      	cmp	r3, r9
 8005b20:	d307      	bcc.n	8005b32 <__cvt+0xba>
 8005b22:	9b07      	ldr	r3, [sp, #28]
 8005b24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b26:	1bdb      	subs	r3, r3, r7
 8005b28:	4638      	mov	r0, r7
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	b008      	add	sp, #32
 8005b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b32:	1c59      	adds	r1, r3, #1
 8005b34:	9107      	str	r1, [sp, #28]
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	e7f0      	b.n	8005b1c <__cvt+0xa4>

08005b3a <__exponent>:
 8005b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2900      	cmp	r1, #0
 8005b40:	bfb8      	it	lt
 8005b42:	4249      	neglt	r1, r1
 8005b44:	f803 2b02 	strb.w	r2, [r3], #2
 8005b48:	bfb4      	ite	lt
 8005b4a:	222d      	movlt	r2, #45	; 0x2d
 8005b4c:	222b      	movge	r2, #43	; 0x2b
 8005b4e:	2909      	cmp	r1, #9
 8005b50:	7042      	strb	r2, [r0, #1]
 8005b52:	dd2a      	ble.n	8005baa <__exponent+0x70>
 8005b54:	f10d 0407 	add.w	r4, sp, #7
 8005b58:	46a4      	mov	ip, r4
 8005b5a:	270a      	movs	r7, #10
 8005b5c:	46a6      	mov	lr, r4
 8005b5e:	460a      	mov	r2, r1
 8005b60:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b64:	fb07 1516 	mls	r5, r7, r6, r1
 8005b68:	3530      	adds	r5, #48	; 0x30
 8005b6a:	2a63      	cmp	r2, #99	; 0x63
 8005b6c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005b70:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b74:	4631      	mov	r1, r6
 8005b76:	dcf1      	bgt.n	8005b5c <__exponent+0x22>
 8005b78:	3130      	adds	r1, #48	; 0x30
 8005b7a:	f1ae 0502 	sub.w	r5, lr, #2
 8005b7e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b82:	1c44      	adds	r4, r0, #1
 8005b84:	4629      	mov	r1, r5
 8005b86:	4561      	cmp	r1, ip
 8005b88:	d30a      	bcc.n	8005ba0 <__exponent+0x66>
 8005b8a:	f10d 0209 	add.w	r2, sp, #9
 8005b8e:	eba2 020e 	sub.w	r2, r2, lr
 8005b92:	4565      	cmp	r5, ip
 8005b94:	bf88      	it	hi
 8005b96:	2200      	movhi	r2, #0
 8005b98:	4413      	add	r3, r2
 8005b9a:	1a18      	subs	r0, r3, r0
 8005b9c:	b003      	add	sp, #12
 8005b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ba4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ba8:	e7ed      	b.n	8005b86 <__exponent+0x4c>
 8005baa:	2330      	movs	r3, #48	; 0x30
 8005bac:	3130      	adds	r1, #48	; 0x30
 8005bae:	7083      	strb	r3, [r0, #2]
 8005bb0:	70c1      	strb	r1, [r0, #3]
 8005bb2:	1d03      	adds	r3, r0, #4
 8005bb4:	e7f1      	b.n	8005b9a <__exponent+0x60>
	...

08005bb8 <_printf_float>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	ed2d 8b02 	vpush	{d8}
 8005bc0:	b091      	sub	sp, #68	; 0x44
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005bc8:	4616      	mov	r6, r2
 8005bca:	461f      	mov	r7, r3
 8005bcc:	4605      	mov	r5, r0
 8005bce:	f001 fa57 	bl	8007080 <_localeconv_r>
 8005bd2:	f8d0 a000 	ldr.w	sl, [r0]
 8005bd6:	4650      	mov	r0, sl
 8005bd8:	f7fa fb0a 	bl	80001f0 <strlen>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	930e      	str	r3, [sp, #56]	; 0x38
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	9309      	str	r3, [sp, #36]	; 0x24
 8005be4:	f8d8 3000 	ldr.w	r3, [r8]
 8005be8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005bec:	3307      	adds	r3, #7
 8005bee:	f023 0307 	bic.w	r3, r3, #7
 8005bf2:	f103 0208 	add.w	r2, r3, #8
 8005bf6:	f8c8 2000 	str.w	r2, [r8]
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c0c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005c10:	ee08 0a10 	vmov	s16, r0
 8005c14:	4ba0      	ldr	r3, [pc, #640]	; (8005e98 <_printf_float+0x2e0>)
 8005c16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c1e:	f7fa ff95 	bl	8000b4c <__aeabi_dcmpun>
 8005c22:	bb88      	cbnz	r0, 8005c88 <_printf_float+0xd0>
 8005c24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c28:	4b9b      	ldr	r3, [pc, #620]	; (8005e98 <_printf_float+0x2e0>)
 8005c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c2e:	f7fa ff6f 	bl	8000b10 <__aeabi_dcmple>
 8005c32:	bb48      	cbnz	r0, 8005c88 <_printf_float+0xd0>
 8005c34:	2200      	movs	r2, #0
 8005c36:	2300      	movs	r3, #0
 8005c38:	4640      	mov	r0, r8
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	f7fa ff5e 	bl	8000afc <__aeabi_dcmplt>
 8005c40:	b110      	cbz	r0, 8005c48 <_printf_float+0x90>
 8005c42:	232d      	movs	r3, #45	; 0x2d
 8005c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c48:	4b94      	ldr	r3, [pc, #592]	; (8005e9c <_printf_float+0x2e4>)
 8005c4a:	4895      	ldr	r0, [pc, #596]	; (8005ea0 <_printf_float+0x2e8>)
 8005c4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c50:	bf94      	ite	ls
 8005c52:	4698      	movls	r8, r3
 8005c54:	4680      	movhi	r8, r0
 8005c56:	2303      	movs	r3, #3
 8005c58:	6123      	str	r3, [r4, #16]
 8005c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5c:	f023 0304 	bic.w	r3, r3, #4
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	f04f 0900 	mov.w	r9, #0
 8005c66:	9700      	str	r7, [sp, #0]
 8005c68:	4633      	mov	r3, r6
 8005c6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 f9da 	bl	8006028 <_printf_common>
 8005c74:	3001      	adds	r0, #1
 8005c76:	f040 8092 	bne.w	8005d9e <_printf_float+0x1e6>
 8005c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c7e:	b011      	add	sp, #68	; 0x44
 8005c80:	ecbd 8b02 	vpop	{d8}
 8005c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c88:	4642      	mov	r2, r8
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	4640      	mov	r0, r8
 8005c8e:	4649      	mov	r1, r9
 8005c90:	f7fa ff5c 	bl	8000b4c <__aeabi_dcmpun>
 8005c94:	b140      	cbz	r0, 8005ca8 <_printf_float+0xf0>
 8005c96:	464b      	mov	r3, r9
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bfbc      	itt	lt
 8005c9c:	232d      	movlt	r3, #45	; 0x2d
 8005c9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ca2:	4880      	ldr	r0, [pc, #512]	; (8005ea4 <_printf_float+0x2ec>)
 8005ca4:	4b80      	ldr	r3, [pc, #512]	; (8005ea8 <_printf_float+0x2f0>)
 8005ca6:	e7d1      	b.n	8005c4c <_printf_float+0x94>
 8005ca8:	6863      	ldr	r3, [r4, #4]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 8005cb0:	d143      	bne.n	8005d3a <_printf_float+0x182>
 8005cb2:	2306      	movs	r3, #6
 8005cb4:	6063      	str	r3, [r4, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cba:	9206      	str	r2, [sp, #24]
 8005cbc:	aa0e      	add	r2, sp, #56	; 0x38
 8005cbe:	e9cd b204 	strd	fp, r2, [sp, #16]
 8005cc2:	aa0d      	add	r2, sp, #52	; 0x34
 8005cc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cc8:	9203      	str	r2, [sp, #12]
 8005cca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005cce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	6863      	ldr	r3, [r4, #4]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	4628      	mov	r0, r5
 8005cde:	910a      	str	r1, [sp, #40]	; 0x28
 8005ce0:	f7ff feca 	bl	8005a78 <__cvt>
 8005ce4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ce6:	2947      	cmp	r1, #71	; 0x47
 8005ce8:	4680      	mov	r8, r0
 8005cea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005cec:	d108      	bne.n	8005d00 <_printf_float+0x148>
 8005cee:	1cc8      	adds	r0, r1, #3
 8005cf0:	db02      	blt.n	8005cf8 <_printf_float+0x140>
 8005cf2:	6863      	ldr	r3, [r4, #4]
 8005cf4:	4299      	cmp	r1, r3
 8005cf6:	dd40      	ble.n	8005d7a <_printf_float+0x1c2>
 8005cf8:	f1ab 0b02 	sub.w	fp, fp, #2
 8005cfc:	fa5f fb8b 	uxtb.w	fp, fp
 8005d00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d04:	d81f      	bhi.n	8005d46 <_printf_float+0x18e>
 8005d06:	3901      	subs	r1, #1
 8005d08:	465a      	mov	r2, fp
 8005d0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d0e:	910d      	str	r1, [sp, #52]	; 0x34
 8005d10:	f7ff ff13 	bl	8005b3a <__exponent>
 8005d14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d16:	1813      	adds	r3, r2, r0
 8005d18:	2a01      	cmp	r2, #1
 8005d1a:	4681      	mov	r9, r0
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	dc02      	bgt.n	8005d26 <_printf_float+0x16e>
 8005d20:	6822      	ldr	r2, [r4, #0]
 8005d22:	07d2      	lsls	r2, r2, #31
 8005d24:	d501      	bpl.n	8005d2a <_printf_float+0x172>
 8005d26:	3301      	adds	r3, #1
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d099      	beq.n	8005c66 <_printf_float+0xae>
 8005d32:	232d      	movs	r3, #45	; 0x2d
 8005d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d38:	e795      	b.n	8005c66 <_printf_float+0xae>
 8005d3a:	2947      	cmp	r1, #71	; 0x47
 8005d3c:	d1bb      	bne.n	8005cb6 <_printf_float+0xfe>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1b9      	bne.n	8005cb6 <_printf_float+0xfe>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e7b6      	b.n	8005cb4 <_printf_float+0xfc>
 8005d46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d4a:	d118      	bne.n	8005d7e <_printf_float+0x1c6>
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	6863      	ldr	r3, [r4, #4]
 8005d50:	dd0b      	ble.n	8005d6a <_printf_float+0x1b2>
 8005d52:	6121      	str	r1, [r4, #16]
 8005d54:	b913      	cbnz	r3, 8005d5c <_printf_float+0x1a4>
 8005d56:	6822      	ldr	r2, [r4, #0]
 8005d58:	07d0      	lsls	r0, r2, #31
 8005d5a:	d502      	bpl.n	8005d62 <_printf_float+0x1aa>
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	440b      	add	r3, r1
 8005d60:	6123      	str	r3, [r4, #16]
 8005d62:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d64:	f04f 0900 	mov.w	r9, #0
 8005d68:	e7df      	b.n	8005d2a <_printf_float+0x172>
 8005d6a:	b913      	cbnz	r3, 8005d72 <_printf_float+0x1ba>
 8005d6c:	6822      	ldr	r2, [r4, #0]
 8005d6e:	07d2      	lsls	r2, r2, #31
 8005d70:	d501      	bpl.n	8005d76 <_printf_float+0x1be>
 8005d72:	3302      	adds	r3, #2
 8005d74:	e7f4      	b.n	8005d60 <_printf_float+0x1a8>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e7f2      	b.n	8005d60 <_printf_float+0x1a8>
 8005d7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d80:	4299      	cmp	r1, r3
 8005d82:	db05      	blt.n	8005d90 <_printf_float+0x1d8>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	6121      	str	r1, [r4, #16]
 8005d88:	07d8      	lsls	r0, r3, #31
 8005d8a:	d5ea      	bpl.n	8005d62 <_printf_float+0x1aa>
 8005d8c:	1c4b      	adds	r3, r1, #1
 8005d8e:	e7e7      	b.n	8005d60 <_printf_float+0x1a8>
 8005d90:	2900      	cmp	r1, #0
 8005d92:	bfd4      	ite	le
 8005d94:	f1c1 0202 	rsble	r2, r1, #2
 8005d98:	2201      	movgt	r2, #1
 8005d9a:	4413      	add	r3, r2
 8005d9c:	e7e0      	b.n	8005d60 <_printf_float+0x1a8>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	055a      	lsls	r2, r3, #21
 8005da2:	d407      	bmi.n	8005db4 <_printf_float+0x1fc>
 8005da4:	6923      	ldr	r3, [r4, #16]
 8005da6:	4642      	mov	r2, r8
 8005da8:	4631      	mov	r1, r6
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	d12c      	bne.n	8005e0c <_printf_float+0x254>
 8005db2:	e762      	b.n	8005c7a <_printf_float+0xc2>
 8005db4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005db8:	f240 80e0 	bls.w	8005f7c <_printf_float+0x3c4>
 8005dbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f7fa fe90 	bl	8000ae8 <__aeabi_dcmpeq>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d034      	beq.n	8005e36 <_printf_float+0x27e>
 8005dcc:	4a37      	ldr	r2, [pc, #220]	; (8005eac <_printf_float+0x2f4>)
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	47b8      	blx	r7
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	f43f af4f 	beq.w	8005c7a <_printf_float+0xc2>
 8005ddc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005de0:	429a      	cmp	r2, r3
 8005de2:	db02      	blt.n	8005dea <_printf_float+0x232>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	07d8      	lsls	r0, r3, #31
 8005de8:	d510      	bpl.n	8005e0c <_printf_float+0x254>
 8005dea:	ee18 3a10 	vmov	r3, s16
 8005dee:	4652      	mov	r2, sl
 8005df0:	4631      	mov	r1, r6
 8005df2:	4628      	mov	r0, r5
 8005df4:	47b8      	blx	r7
 8005df6:	3001      	adds	r0, #1
 8005df8:	f43f af3f 	beq.w	8005c7a <_printf_float+0xc2>
 8005dfc:	f04f 0800 	mov.w	r8, #0
 8005e00:	f104 091a 	add.w	r9, r4, #26
 8005e04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e06:	3b01      	subs	r3, #1
 8005e08:	4543      	cmp	r3, r8
 8005e0a:	dc09      	bgt.n	8005e20 <_printf_float+0x268>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	079b      	lsls	r3, r3, #30
 8005e10:	f100 8105 	bmi.w	800601e <_printf_float+0x466>
 8005e14:	68e0      	ldr	r0, [r4, #12]
 8005e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e18:	4298      	cmp	r0, r3
 8005e1a:	bfb8      	it	lt
 8005e1c:	4618      	movlt	r0, r3
 8005e1e:	e72e      	b.n	8005c7e <_printf_float+0xc6>
 8005e20:	2301      	movs	r3, #1
 8005e22:	464a      	mov	r2, r9
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f43f af25 	beq.w	8005c7a <_printf_float+0xc2>
 8005e30:	f108 0801 	add.w	r8, r8, #1
 8005e34:	e7e6      	b.n	8005e04 <_printf_float+0x24c>
 8005e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	dc39      	bgt.n	8005eb0 <_printf_float+0x2f8>
 8005e3c:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <_printf_float+0x2f4>)
 8005e3e:	2301      	movs	r3, #1
 8005e40:	4631      	mov	r1, r6
 8005e42:	4628      	mov	r0, r5
 8005e44:	47b8      	blx	r7
 8005e46:	3001      	adds	r0, #1
 8005e48:	f43f af17 	beq.w	8005c7a <_printf_float+0xc2>
 8005e4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e50:	4313      	orrs	r3, r2
 8005e52:	d102      	bne.n	8005e5a <_printf_float+0x2a2>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	07d9      	lsls	r1, r3, #31
 8005e58:	d5d8      	bpl.n	8005e0c <_printf_float+0x254>
 8005e5a:	ee18 3a10 	vmov	r3, s16
 8005e5e:	4652      	mov	r2, sl
 8005e60:	4631      	mov	r1, r6
 8005e62:	4628      	mov	r0, r5
 8005e64:	47b8      	blx	r7
 8005e66:	3001      	adds	r0, #1
 8005e68:	f43f af07 	beq.w	8005c7a <_printf_float+0xc2>
 8005e6c:	f04f 0900 	mov.w	r9, #0
 8005e70:	f104 0a1a 	add.w	sl, r4, #26
 8005e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e76:	425b      	negs	r3, r3
 8005e78:	454b      	cmp	r3, r9
 8005e7a:	dc01      	bgt.n	8005e80 <_printf_float+0x2c8>
 8005e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e7e:	e792      	b.n	8005da6 <_printf_float+0x1ee>
 8005e80:	2301      	movs	r3, #1
 8005e82:	4652      	mov	r2, sl
 8005e84:	4631      	mov	r1, r6
 8005e86:	4628      	mov	r0, r5
 8005e88:	47b8      	blx	r7
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	f43f aef5 	beq.w	8005c7a <_printf_float+0xc2>
 8005e90:	f109 0901 	add.w	r9, r9, #1
 8005e94:	e7ee      	b.n	8005e74 <_printf_float+0x2bc>
 8005e96:	bf00      	nop
 8005e98:	7fefffff 	.word	0x7fefffff
 8005e9c:	08008c08 	.word	0x08008c08
 8005ea0:	08008c0c 	.word	0x08008c0c
 8005ea4:	08008c14 	.word	0x08008c14
 8005ea8:	08008c10 	.word	0x08008c10
 8005eac:	08008c18 	.word	0x08008c18
 8005eb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	bfa8      	it	ge
 8005eb8:	461a      	movge	r2, r3
 8005eba:	2a00      	cmp	r2, #0
 8005ebc:	4691      	mov	r9, r2
 8005ebe:	dc37      	bgt.n	8005f30 <_printf_float+0x378>
 8005ec0:	f04f 0b00 	mov.w	fp, #0
 8005ec4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ec8:	f104 021a 	add.w	r2, r4, #26
 8005ecc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ece:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed0:	eba3 0309 	sub.w	r3, r3, r9
 8005ed4:	455b      	cmp	r3, fp
 8005ed6:	dc33      	bgt.n	8005f40 <_printf_float+0x388>
 8005ed8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005edc:	429a      	cmp	r2, r3
 8005ede:	db3b      	blt.n	8005f58 <_printf_float+0x3a0>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	07da      	lsls	r2, r3, #31
 8005ee4:	d438      	bmi.n	8005f58 <_printf_float+0x3a0>
 8005ee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	eba2 0901 	sub.w	r9, r2, r1
 8005ef2:	4599      	cmp	r9, r3
 8005ef4:	bfa8      	it	ge
 8005ef6:	4699      	movge	r9, r3
 8005ef8:	f1b9 0f00 	cmp.w	r9, #0
 8005efc:	dc35      	bgt.n	8005f6a <_printf_float+0x3b2>
 8005efe:	f04f 0800 	mov.w	r8, #0
 8005f02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f06:	f104 0a1a 	add.w	sl, r4, #26
 8005f0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	eba3 0309 	sub.w	r3, r3, r9
 8005f14:	4543      	cmp	r3, r8
 8005f16:	f77f af79 	ble.w	8005e0c <_printf_float+0x254>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4652      	mov	r2, sl
 8005f1e:	4631      	mov	r1, r6
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b8      	blx	r7
 8005f24:	3001      	adds	r0, #1
 8005f26:	f43f aea8 	beq.w	8005c7a <_printf_float+0xc2>
 8005f2a:	f108 0801 	add.w	r8, r8, #1
 8005f2e:	e7ec      	b.n	8005f0a <_printf_float+0x352>
 8005f30:	4613      	mov	r3, r2
 8005f32:	4631      	mov	r1, r6
 8005f34:	4642      	mov	r2, r8
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d1c0      	bne.n	8005ec0 <_printf_float+0x308>
 8005f3e:	e69c      	b.n	8005c7a <_printf_float+0xc2>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4631      	mov	r1, r6
 8005f44:	4628      	mov	r0, r5
 8005f46:	9209      	str	r2, [sp, #36]	; 0x24
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	f43f ae95 	beq.w	8005c7a <_printf_float+0xc2>
 8005f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f52:	f10b 0b01 	add.w	fp, fp, #1
 8005f56:	e7b9      	b.n	8005ecc <_printf_float+0x314>
 8005f58:	ee18 3a10 	vmov	r3, s16
 8005f5c:	4652      	mov	r2, sl
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	d1be      	bne.n	8005ee6 <_printf_float+0x32e>
 8005f68:	e687      	b.n	8005c7a <_printf_float+0xc2>
 8005f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	4442      	add	r2, r8
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	d1c1      	bne.n	8005efe <_printf_float+0x346>
 8005f7a:	e67e      	b.n	8005c7a <_printf_float+0xc2>
 8005f7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f7e:	2a01      	cmp	r2, #1
 8005f80:	dc01      	bgt.n	8005f86 <_printf_float+0x3ce>
 8005f82:	07db      	lsls	r3, r3, #31
 8005f84:	d538      	bpl.n	8005ff8 <_printf_float+0x440>
 8005f86:	2301      	movs	r3, #1
 8005f88:	4642      	mov	r2, r8
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b8      	blx	r7
 8005f90:	3001      	adds	r0, #1
 8005f92:	f43f ae72 	beq.w	8005c7a <_printf_float+0xc2>
 8005f96:	ee18 3a10 	vmov	r3, s16
 8005f9a:	4652      	mov	r2, sl
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	f43f ae69 	beq.w	8005c7a <_printf_float+0xc2>
 8005fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fac:	2200      	movs	r2, #0
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f7fa fd9a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fb4:	b9d8      	cbnz	r0, 8005fee <_printf_float+0x436>
 8005fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fb8:	f108 0201 	add.w	r2, r8, #1
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d10e      	bne.n	8005fe6 <_printf_float+0x42e>
 8005fc8:	e657      	b.n	8005c7a <_printf_float+0xc2>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4652      	mov	r2, sl
 8005fce:	4631      	mov	r1, r6
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	47b8      	blx	r7
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	f43f ae50 	beq.w	8005c7a <_printf_float+0xc2>
 8005fda:	f108 0801 	add.w	r8, r8, #1
 8005fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	4543      	cmp	r3, r8
 8005fe4:	dcf1      	bgt.n	8005fca <_printf_float+0x412>
 8005fe6:	464b      	mov	r3, r9
 8005fe8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fec:	e6dc      	b.n	8005da8 <_printf_float+0x1f0>
 8005fee:	f04f 0800 	mov.w	r8, #0
 8005ff2:	f104 0a1a 	add.w	sl, r4, #26
 8005ff6:	e7f2      	b.n	8005fde <_printf_float+0x426>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	4642      	mov	r2, r8
 8005ffc:	e7df      	b.n	8005fbe <_printf_float+0x406>
 8005ffe:	2301      	movs	r3, #1
 8006000:	464a      	mov	r2, r9
 8006002:	4631      	mov	r1, r6
 8006004:	4628      	mov	r0, r5
 8006006:	47b8      	blx	r7
 8006008:	3001      	adds	r0, #1
 800600a:	f43f ae36 	beq.w	8005c7a <_printf_float+0xc2>
 800600e:	f108 0801 	add.w	r8, r8, #1
 8006012:	68e3      	ldr	r3, [r4, #12]
 8006014:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006016:	1a5b      	subs	r3, r3, r1
 8006018:	4543      	cmp	r3, r8
 800601a:	dcf0      	bgt.n	8005ffe <_printf_float+0x446>
 800601c:	e6fa      	b.n	8005e14 <_printf_float+0x25c>
 800601e:	f04f 0800 	mov.w	r8, #0
 8006022:	f104 0919 	add.w	r9, r4, #25
 8006026:	e7f4      	b.n	8006012 <_printf_float+0x45a>

08006028 <_printf_common>:
 8006028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	4616      	mov	r6, r2
 800602e:	4699      	mov	r9, r3
 8006030:	688a      	ldr	r2, [r1, #8]
 8006032:	690b      	ldr	r3, [r1, #16]
 8006034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006038:	4293      	cmp	r3, r2
 800603a:	bfb8      	it	lt
 800603c:	4613      	movlt	r3, r2
 800603e:	6033      	str	r3, [r6, #0]
 8006040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006044:	4607      	mov	r7, r0
 8006046:	460c      	mov	r4, r1
 8006048:	b10a      	cbz	r2, 800604e <_printf_common+0x26>
 800604a:	3301      	adds	r3, #1
 800604c:	6033      	str	r3, [r6, #0]
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	0699      	lsls	r1, r3, #26
 8006052:	bf42      	ittt	mi
 8006054:	6833      	ldrmi	r3, [r6, #0]
 8006056:	3302      	addmi	r3, #2
 8006058:	6033      	strmi	r3, [r6, #0]
 800605a:	6825      	ldr	r5, [r4, #0]
 800605c:	f015 0506 	ands.w	r5, r5, #6
 8006060:	d106      	bne.n	8006070 <_printf_common+0x48>
 8006062:	f104 0a19 	add.w	sl, r4, #25
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	6832      	ldr	r2, [r6, #0]
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	42ab      	cmp	r3, r5
 800606e:	dc26      	bgt.n	80060be <_printf_common+0x96>
 8006070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006074:	1e13      	subs	r3, r2, #0
 8006076:	6822      	ldr	r2, [r4, #0]
 8006078:	bf18      	it	ne
 800607a:	2301      	movne	r3, #1
 800607c:	0692      	lsls	r2, r2, #26
 800607e:	d42b      	bmi.n	80060d8 <_printf_common+0xb0>
 8006080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006084:	4649      	mov	r1, r9
 8006086:	4638      	mov	r0, r7
 8006088:	47c0      	blx	r8
 800608a:	3001      	adds	r0, #1
 800608c:	d01e      	beq.n	80060cc <_printf_common+0xa4>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	68e5      	ldr	r5, [r4, #12]
 8006092:	6832      	ldr	r2, [r6, #0]
 8006094:	f003 0306 	and.w	r3, r3, #6
 8006098:	2b04      	cmp	r3, #4
 800609a:	bf08      	it	eq
 800609c:	1aad      	subeq	r5, r5, r2
 800609e:	68a3      	ldr	r3, [r4, #8]
 80060a0:	6922      	ldr	r2, [r4, #16]
 80060a2:	bf0c      	ite	eq
 80060a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a8:	2500      	movne	r5, #0
 80060aa:	4293      	cmp	r3, r2
 80060ac:	bfc4      	itt	gt
 80060ae:	1a9b      	subgt	r3, r3, r2
 80060b0:	18ed      	addgt	r5, r5, r3
 80060b2:	2600      	movs	r6, #0
 80060b4:	341a      	adds	r4, #26
 80060b6:	42b5      	cmp	r5, r6
 80060b8:	d11a      	bne.n	80060f0 <_printf_common+0xc8>
 80060ba:	2000      	movs	r0, #0
 80060bc:	e008      	b.n	80060d0 <_printf_common+0xa8>
 80060be:	2301      	movs	r3, #1
 80060c0:	4652      	mov	r2, sl
 80060c2:	4649      	mov	r1, r9
 80060c4:	4638      	mov	r0, r7
 80060c6:	47c0      	blx	r8
 80060c8:	3001      	adds	r0, #1
 80060ca:	d103      	bne.n	80060d4 <_printf_common+0xac>
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d4:	3501      	adds	r5, #1
 80060d6:	e7c6      	b.n	8006066 <_printf_common+0x3e>
 80060d8:	18e1      	adds	r1, r4, r3
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	2030      	movs	r0, #48	; 0x30
 80060de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060e2:	4422      	add	r2, r4
 80060e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060ec:	3302      	adds	r3, #2
 80060ee:	e7c7      	b.n	8006080 <_printf_common+0x58>
 80060f0:	2301      	movs	r3, #1
 80060f2:	4622      	mov	r2, r4
 80060f4:	4649      	mov	r1, r9
 80060f6:	4638      	mov	r0, r7
 80060f8:	47c0      	blx	r8
 80060fa:	3001      	adds	r0, #1
 80060fc:	d0e6      	beq.n	80060cc <_printf_common+0xa4>
 80060fe:	3601      	adds	r6, #1
 8006100:	e7d9      	b.n	80060b6 <_printf_common+0x8e>
	...

08006104 <_printf_i>:
 8006104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	460c      	mov	r4, r1
 800610a:	4691      	mov	r9, r2
 800610c:	7e27      	ldrb	r7, [r4, #24]
 800610e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006110:	2f78      	cmp	r7, #120	; 0x78
 8006112:	4680      	mov	r8, r0
 8006114:	469a      	mov	sl, r3
 8006116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800611a:	d807      	bhi.n	800612c <_printf_i+0x28>
 800611c:	2f62      	cmp	r7, #98	; 0x62
 800611e:	d80a      	bhi.n	8006136 <_printf_i+0x32>
 8006120:	2f00      	cmp	r7, #0
 8006122:	f000 80d8 	beq.w	80062d6 <_printf_i+0x1d2>
 8006126:	2f58      	cmp	r7, #88	; 0x58
 8006128:	f000 80a3 	beq.w	8006272 <_printf_i+0x16e>
 800612c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006134:	e03a      	b.n	80061ac <_printf_i+0xa8>
 8006136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800613a:	2b15      	cmp	r3, #21
 800613c:	d8f6      	bhi.n	800612c <_printf_i+0x28>
 800613e:	a001      	add	r0, pc, #4	; (adr r0, 8006144 <_printf_i+0x40>)
 8006140:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006144:	0800619d 	.word	0x0800619d
 8006148:	080061b1 	.word	0x080061b1
 800614c:	0800612d 	.word	0x0800612d
 8006150:	0800612d 	.word	0x0800612d
 8006154:	0800612d 	.word	0x0800612d
 8006158:	0800612d 	.word	0x0800612d
 800615c:	080061b1 	.word	0x080061b1
 8006160:	0800612d 	.word	0x0800612d
 8006164:	0800612d 	.word	0x0800612d
 8006168:	0800612d 	.word	0x0800612d
 800616c:	0800612d 	.word	0x0800612d
 8006170:	080062bd 	.word	0x080062bd
 8006174:	080061e1 	.word	0x080061e1
 8006178:	0800629f 	.word	0x0800629f
 800617c:	0800612d 	.word	0x0800612d
 8006180:	0800612d 	.word	0x0800612d
 8006184:	080062df 	.word	0x080062df
 8006188:	0800612d 	.word	0x0800612d
 800618c:	080061e1 	.word	0x080061e1
 8006190:	0800612d 	.word	0x0800612d
 8006194:	0800612d 	.word	0x0800612d
 8006198:	080062a7 	.word	0x080062a7
 800619c:	680b      	ldr	r3, [r1, #0]
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	600a      	str	r2, [r1, #0]
 80061a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0a3      	b.n	80062f8 <_printf_i+0x1f4>
 80061b0:	6825      	ldr	r5, [r4, #0]
 80061b2:	6808      	ldr	r0, [r1, #0]
 80061b4:	062e      	lsls	r6, r5, #24
 80061b6:	f100 0304 	add.w	r3, r0, #4
 80061ba:	d50a      	bpl.n	80061d2 <_printf_i+0xce>
 80061bc:	6805      	ldr	r5, [r0, #0]
 80061be:	600b      	str	r3, [r1, #0]
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	da03      	bge.n	80061cc <_printf_i+0xc8>
 80061c4:	232d      	movs	r3, #45	; 0x2d
 80061c6:	426d      	negs	r5, r5
 80061c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061cc:	485e      	ldr	r0, [pc, #376]	; (8006348 <_printf_i+0x244>)
 80061ce:	230a      	movs	r3, #10
 80061d0:	e019      	b.n	8006206 <_printf_i+0x102>
 80061d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80061d6:	6805      	ldr	r5, [r0, #0]
 80061d8:	600b      	str	r3, [r1, #0]
 80061da:	bf18      	it	ne
 80061dc:	b22d      	sxthne	r5, r5
 80061de:	e7ef      	b.n	80061c0 <_printf_i+0xbc>
 80061e0:	680b      	ldr	r3, [r1, #0]
 80061e2:	6825      	ldr	r5, [r4, #0]
 80061e4:	1d18      	adds	r0, r3, #4
 80061e6:	6008      	str	r0, [r1, #0]
 80061e8:	0628      	lsls	r0, r5, #24
 80061ea:	d501      	bpl.n	80061f0 <_printf_i+0xec>
 80061ec:	681d      	ldr	r5, [r3, #0]
 80061ee:	e002      	b.n	80061f6 <_printf_i+0xf2>
 80061f0:	0669      	lsls	r1, r5, #25
 80061f2:	d5fb      	bpl.n	80061ec <_printf_i+0xe8>
 80061f4:	881d      	ldrh	r5, [r3, #0]
 80061f6:	4854      	ldr	r0, [pc, #336]	; (8006348 <_printf_i+0x244>)
 80061f8:	2f6f      	cmp	r7, #111	; 0x6f
 80061fa:	bf0c      	ite	eq
 80061fc:	2308      	moveq	r3, #8
 80061fe:	230a      	movne	r3, #10
 8006200:	2100      	movs	r1, #0
 8006202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006206:	6866      	ldr	r6, [r4, #4]
 8006208:	60a6      	str	r6, [r4, #8]
 800620a:	2e00      	cmp	r6, #0
 800620c:	bfa2      	ittt	ge
 800620e:	6821      	ldrge	r1, [r4, #0]
 8006210:	f021 0104 	bicge.w	r1, r1, #4
 8006214:	6021      	strge	r1, [r4, #0]
 8006216:	b90d      	cbnz	r5, 800621c <_printf_i+0x118>
 8006218:	2e00      	cmp	r6, #0
 800621a:	d04d      	beq.n	80062b8 <_printf_i+0x1b4>
 800621c:	4616      	mov	r6, r2
 800621e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006222:	fb03 5711 	mls	r7, r3, r1, r5
 8006226:	5dc7      	ldrb	r7, [r0, r7]
 8006228:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800622c:	462f      	mov	r7, r5
 800622e:	42bb      	cmp	r3, r7
 8006230:	460d      	mov	r5, r1
 8006232:	d9f4      	bls.n	800621e <_printf_i+0x11a>
 8006234:	2b08      	cmp	r3, #8
 8006236:	d10b      	bne.n	8006250 <_printf_i+0x14c>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	07df      	lsls	r7, r3, #31
 800623c:	d508      	bpl.n	8006250 <_printf_i+0x14c>
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	6861      	ldr	r1, [r4, #4]
 8006242:	4299      	cmp	r1, r3
 8006244:	bfde      	ittt	le
 8006246:	2330      	movle	r3, #48	; 0x30
 8006248:	f806 3c01 	strble.w	r3, [r6, #-1]
 800624c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006250:	1b92      	subs	r2, r2, r6
 8006252:	6122      	str	r2, [r4, #16]
 8006254:	f8cd a000 	str.w	sl, [sp]
 8006258:	464b      	mov	r3, r9
 800625a:	aa03      	add	r2, sp, #12
 800625c:	4621      	mov	r1, r4
 800625e:	4640      	mov	r0, r8
 8006260:	f7ff fee2 	bl	8006028 <_printf_common>
 8006264:	3001      	adds	r0, #1
 8006266:	d14c      	bne.n	8006302 <_printf_i+0x1fe>
 8006268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800626c:	b004      	add	sp, #16
 800626e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006272:	4835      	ldr	r0, [pc, #212]	; (8006348 <_printf_i+0x244>)
 8006274:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	680e      	ldr	r6, [r1, #0]
 800627c:	061f      	lsls	r7, r3, #24
 800627e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006282:	600e      	str	r6, [r1, #0]
 8006284:	d514      	bpl.n	80062b0 <_printf_i+0x1ac>
 8006286:	07d9      	lsls	r1, r3, #31
 8006288:	bf44      	itt	mi
 800628a:	f043 0320 	orrmi.w	r3, r3, #32
 800628e:	6023      	strmi	r3, [r4, #0]
 8006290:	b91d      	cbnz	r5, 800629a <_printf_i+0x196>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	f023 0320 	bic.w	r3, r3, #32
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	2310      	movs	r3, #16
 800629c:	e7b0      	b.n	8006200 <_printf_i+0xfc>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	f043 0320 	orr.w	r3, r3, #32
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	2378      	movs	r3, #120	; 0x78
 80062a8:	4828      	ldr	r0, [pc, #160]	; (800634c <_printf_i+0x248>)
 80062aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062ae:	e7e3      	b.n	8006278 <_printf_i+0x174>
 80062b0:	065e      	lsls	r6, r3, #25
 80062b2:	bf48      	it	mi
 80062b4:	b2ad      	uxthmi	r5, r5
 80062b6:	e7e6      	b.n	8006286 <_printf_i+0x182>
 80062b8:	4616      	mov	r6, r2
 80062ba:	e7bb      	b.n	8006234 <_printf_i+0x130>
 80062bc:	680b      	ldr	r3, [r1, #0]
 80062be:	6826      	ldr	r6, [r4, #0]
 80062c0:	6960      	ldr	r0, [r4, #20]
 80062c2:	1d1d      	adds	r5, r3, #4
 80062c4:	600d      	str	r5, [r1, #0]
 80062c6:	0635      	lsls	r5, r6, #24
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	d501      	bpl.n	80062d0 <_printf_i+0x1cc>
 80062cc:	6018      	str	r0, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <_printf_i+0x1d2>
 80062d0:	0671      	lsls	r1, r6, #25
 80062d2:	d5fb      	bpl.n	80062cc <_printf_i+0x1c8>
 80062d4:	8018      	strh	r0, [r3, #0]
 80062d6:	2300      	movs	r3, #0
 80062d8:	6123      	str	r3, [r4, #16]
 80062da:	4616      	mov	r6, r2
 80062dc:	e7ba      	b.n	8006254 <_printf_i+0x150>
 80062de:	680b      	ldr	r3, [r1, #0]
 80062e0:	1d1a      	adds	r2, r3, #4
 80062e2:	600a      	str	r2, [r1, #0]
 80062e4:	681e      	ldr	r6, [r3, #0]
 80062e6:	6862      	ldr	r2, [r4, #4]
 80062e8:	2100      	movs	r1, #0
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7f9 ff88 	bl	8000200 <memchr>
 80062f0:	b108      	cbz	r0, 80062f6 <_printf_i+0x1f2>
 80062f2:	1b80      	subs	r0, r0, r6
 80062f4:	6060      	str	r0, [r4, #4]
 80062f6:	6863      	ldr	r3, [r4, #4]
 80062f8:	6123      	str	r3, [r4, #16]
 80062fa:	2300      	movs	r3, #0
 80062fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006300:	e7a8      	b.n	8006254 <_printf_i+0x150>
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	4632      	mov	r2, r6
 8006306:	4649      	mov	r1, r9
 8006308:	4640      	mov	r0, r8
 800630a:	47d0      	blx	sl
 800630c:	3001      	adds	r0, #1
 800630e:	d0ab      	beq.n	8006268 <_printf_i+0x164>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	079b      	lsls	r3, r3, #30
 8006314:	d413      	bmi.n	800633e <_printf_i+0x23a>
 8006316:	68e0      	ldr	r0, [r4, #12]
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	4298      	cmp	r0, r3
 800631c:	bfb8      	it	lt
 800631e:	4618      	movlt	r0, r3
 8006320:	e7a4      	b.n	800626c <_printf_i+0x168>
 8006322:	2301      	movs	r3, #1
 8006324:	4632      	mov	r2, r6
 8006326:	4649      	mov	r1, r9
 8006328:	4640      	mov	r0, r8
 800632a:	47d0      	blx	sl
 800632c:	3001      	adds	r0, #1
 800632e:	d09b      	beq.n	8006268 <_printf_i+0x164>
 8006330:	3501      	adds	r5, #1
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	9903      	ldr	r1, [sp, #12]
 8006336:	1a5b      	subs	r3, r3, r1
 8006338:	42ab      	cmp	r3, r5
 800633a:	dcf2      	bgt.n	8006322 <_printf_i+0x21e>
 800633c:	e7eb      	b.n	8006316 <_printf_i+0x212>
 800633e:	2500      	movs	r5, #0
 8006340:	f104 0619 	add.w	r6, r4, #25
 8006344:	e7f5      	b.n	8006332 <_printf_i+0x22e>
 8006346:	bf00      	nop
 8006348:	08008c1a 	.word	0x08008c1a
 800634c:	08008c2b 	.word	0x08008c2b

08006350 <siprintf>:
 8006350:	b40e      	push	{r1, r2, r3}
 8006352:	b500      	push	{lr}
 8006354:	b09c      	sub	sp, #112	; 0x70
 8006356:	ab1d      	add	r3, sp, #116	; 0x74
 8006358:	9002      	str	r0, [sp, #8]
 800635a:	9006      	str	r0, [sp, #24]
 800635c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006360:	4809      	ldr	r0, [pc, #36]	; (8006388 <siprintf+0x38>)
 8006362:	9107      	str	r1, [sp, #28]
 8006364:	9104      	str	r1, [sp, #16]
 8006366:	4909      	ldr	r1, [pc, #36]	; (800638c <siprintf+0x3c>)
 8006368:	f853 2b04 	ldr.w	r2, [r3], #4
 800636c:	9105      	str	r1, [sp, #20]
 800636e:	6800      	ldr	r0, [r0, #0]
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	a902      	add	r1, sp, #8
 8006374:	f001 fb22 	bl	80079bc <_svfiprintf_r>
 8006378:	9b02      	ldr	r3, [sp, #8]
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	b01c      	add	sp, #112	; 0x70
 8006380:	f85d eb04 	ldr.w	lr, [sp], #4
 8006384:	b003      	add	sp, #12
 8006386:	4770      	bx	lr
 8006388:	20000034 	.word	0x20000034
 800638c:	ffff0208 	.word	0xffff0208

08006390 <quorem>:
 8006390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	6903      	ldr	r3, [r0, #16]
 8006396:	690c      	ldr	r4, [r1, #16]
 8006398:	42a3      	cmp	r3, r4
 800639a:	4607      	mov	r7, r0
 800639c:	f2c0 8081 	blt.w	80064a2 <quorem+0x112>
 80063a0:	3c01      	subs	r4, #1
 80063a2:	f101 0814 	add.w	r8, r1, #20
 80063a6:	f100 0514 	add.w	r5, r0, #20
 80063aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063b8:	3301      	adds	r3, #1
 80063ba:	429a      	cmp	r2, r3
 80063bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80063c8:	d331      	bcc.n	800642e <quorem+0x9e>
 80063ca:	f04f 0e00 	mov.w	lr, #0
 80063ce:	4640      	mov	r0, r8
 80063d0:	46ac      	mov	ip, r5
 80063d2:	46f2      	mov	sl, lr
 80063d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80063d8:	b293      	uxth	r3, r2
 80063da:	fb06 e303 	mla	r3, r6, r3, lr
 80063de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	ebaa 0303 	sub.w	r3, sl, r3
 80063e8:	0c12      	lsrs	r2, r2, #16
 80063ea:	f8dc a000 	ldr.w	sl, [ip]
 80063ee:	fb06 e202 	mla	r2, r6, r2, lr
 80063f2:	fa13 f38a 	uxtah	r3, r3, sl
 80063f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063fa:	fa1f fa82 	uxth.w	sl, r2
 80063fe:	f8dc 2000 	ldr.w	r2, [ip]
 8006402:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006406:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800640a:	b29b      	uxth	r3, r3
 800640c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006410:	4581      	cmp	r9, r0
 8006412:	f84c 3b04 	str.w	r3, [ip], #4
 8006416:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800641a:	d2db      	bcs.n	80063d4 <quorem+0x44>
 800641c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006420:	b92b      	cbnz	r3, 800642e <quorem+0x9e>
 8006422:	9b01      	ldr	r3, [sp, #4]
 8006424:	3b04      	subs	r3, #4
 8006426:	429d      	cmp	r5, r3
 8006428:	461a      	mov	r2, r3
 800642a:	d32e      	bcc.n	800648a <quorem+0xfa>
 800642c:	613c      	str	r4, [r7, #16]
 800642e:	4638      	mov	r0, r7
 8006430:	f001 f8b0 	bl	8007594 <__mcmp>
 8006434:	2800      	cmp	r0, #0
 8006436:	db24      	blt.n	8006482 <quorem+0xf2>
 8006438:	3601      	adds	r6, #1
 800643a:	4628      	mov	r0, r5
 800643c:	f04f 0c00 	mov.w	ip, #0
 8006440:	f858 2b04 	ldr.w	r2, [r8], #4
 8006444:	f8d0 e000 	ldr.w	lr, [r0]
 8006448:	b293      	uxth	r3, r2
 800644a:	ebac 0303 	sub.w	r3, ip, r3
 800644e:	0c12      	lsrs	r2, r2, #16
 8006450:	fa13 f38e 	uxtah	r3, r3, lr
 8006454:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800645c:	b29b      	uxth	r3, r3
 800645e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006462:	45c1      	cmp	r9, r8
 8006464:	f840 3b04 	str.w	r3, [r0], #4
 8006468:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800646c:	d2e8      	bcs.n	8006440 <quorem+0xb0>
 800646e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006476:	b922      	cbnz	r2, 8006482 <quorem+0xf2>
 8006478:	3b04      	subs	r3, #4
 800647a:	429d      	cmp	r5, r3
 800647c:	461a      	mov	r2, r3
 800647e:	d30a      	bcc.n	8006496 <quorem+0x106>
 8006480:	613c      	str	r4, [r7, #16]
 8006482:	4630      	mov	r0, r6
 8006484:	b003      	add	sp, #12
 8006486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648a:	6812      	ldr	r2, [r2, #0]
 800648c:	3b04      	subs	r3, #4
 800648e:	2a00      	cmp	r2, #0
 8006490:	d1cc      	bne.n	800642c <quorem+0x9c>
 8006492:	3c01      	subs	r4, #1
 8006494:	e7c7      	b.n	8006426 <quorem+0x96>
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	3b04      	subs	r3, #4
 800649a:	2a00      	cmp	r2, #0
 800649c:	d1f0      	bne.n	8006480 <quorem+0xf0>
 800649e:	3c01      	subs	r4, #1
 80064a0:	e7eb      	b.n	800647a <quorem+0xea>
 80064a2:	2000      	movs	r0, #0
 80064a4:	e7ee      	b.n	8006484 <quorem+0xf4>
	...

080064a8 <_dtoa_r>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	ed2d 8b02 	vpush	{d8}
 80064b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064b2:	b095      	sub	sp, #84	; 0x54
 80064b4:	4616      	mov	r6, r2
 80064b6:	461f      	mov	r7, r3
 80064b8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80064bc:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 80064c0:	4604      	mov	r4, r0
 80064c2:	b975      	cbnz	r5, 80064e2 <_dtoa_r+0x3a>
 80064c4:	2010      	movs	r0, #16
 80064c6:	f000 fddf 	bl	8007088 <malloc>
 80064ca:	4602      	mov	r2, r0
 80064cc:	6260      	str	r0, [r4, #36]	; 0x24
 80064ce:	b920      	cbnz	r0, 80064da <_dtoa_r+0x32>
 80064d0:	4bb1      	ldr	r3, [pc, #708]	; (8006798 <_dtoa_r+0x2f0>)
 80064d2:	21ea      	movs	r1, #234	; 0xea
 80064d4:	48b1      	ldr	r0, [pc, #708]	; (800679c <_dtoa_r+0x2f4>)
 80064d6:	f001 fb81 	bl	8007bdc <__assert_func>
 80064da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064de:	6005      	str	r5, [r0, #0]
 80064e0:	60c5      	str	r5, [r0, #12]
 80064e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064e4:	6819      	ldr	r1, [r3, #0]
 80064e6:	b151      	cbz	r1, 80064fe <_dtoa_r+0x56>
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	604a      	str	r2, [r1, #4]
 80064ec:	2301      	movs	r3, #1
 80064ee:	4093      	lsls	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 fe10 	bl	8007118 <_Bfree>
 80064f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	1e3b      	subs	r3, r7, #0
 8006500:	bfb9      	ittee	lt
 8006502:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006506:	9305      	strlt	r3, [sp, #20]
 8006508:	2300      	movge	r3, #0
 800650a:	f8c8 3000 	strge.w	r3, [r8]
 800650e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006512:	4ba3      	ldr	r3, [pc, #652]	; (80067a0 <_dtoa_r+0x2f8>)
 8006514:	bfbc      	itt	lt
 8006516:	2201      	movlt	r2, #1
 8006518:	f8c8 2000 	strlt.w	r2, [r8]
 800651c:	ea33 0309 	bics.w	r3, r3, r9
 8006520:	d11b      	bne.n	800655a <_dtoa_r+0xb2>
 8006522:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006524:	f242 730f 	movw	r3, #9999	; 0x270f
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800652e:	4333      	orrs	r3, r6
 8006530:	f000 857d 	beq.w	800702e <_dtoa_r+0xb86>
 8006534:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006536:	b963      	cbnz	r3, 8006552 <_dtoa_r+0xaa>
 8006538:	4b9a      	ldr	r3, [pc, #616]	; (80067a4 <_dtoa_r+0x2fc>)
 800653a:	e024      	b.n	8006586 <_dtoa_r+0xde>
 800653c:	4b9a      	ldr	r3, [pc, #616]	; (80067a8 <_dtoa_r+0x300>)
 800653e:	9303      	str	r3, [sp, #12]
 8006540:	3308      	adds	r3, #8
 8006542:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	9803      	ldr	r0, [sp, #12]
 8006548:	b015      	add	sp, #84	; 0x54
 800654a:	ecbd 8b02 	vpop	{d8}
 800654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006552:	4b94      	ldr	r3, [pc, #592]	; (80067a4 <_dtoa_r+0x2fc>)
 8006554:	9303      	str	r3, [sp, #12]
 8006556:	3303      	adds	r3, #3
 8006558:	e7f3      	b.n	8006542 <_dtoa_r+0x9a>
 800655a:	ed9d 7b04 	vldr	d7, [sp, #16]
 800655e:	2200      	movs	r2, #0
 8006560:	ec51 0b17 	vmov	r0, r1, d7
 8006564:	2300      	movs	r3, #0
 8006566:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800656a:	f7fa fabd 	bl	8000ae8 <__aeabi_dcmpeq>
 800656e:	4680      	mov	r8, r0
 8006570:	b158      	cbz	r0, 800658a <_dtoa_r+0xe2>
 8006572:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006574:	2301      	movs	r3, #1
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8554 	beq.w	8007028 <_dtoa_r+0xb80>
 8006580:	488a      	ldr	r0, [pc, #552]	; (80067ac <_dtoa_r+0x304>)
 8006582:	6018      	str	r0, [r3, #0]
 8006584:	1e43      	subs	r3, r0, #1
 8006586:	9303      	str	r3, [sp, #12]
 8006588:	e7dd      	b.n	8006546 <_dtoa_r+0x9e>
 800658a:	ab12      	add	r3, sp, #72	; 0x48
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	ab13      	add	r3, sp, #76	; 0x4c
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	4620      	mov	r0, r4
 8006594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006598:	f001 f8a0 	bl	80076dc <__d2b>
 800659c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065a0:	4683      	mov	fp, r0
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	d07c      	beq.n	80066a0 <_dtoa_r+0x1f8>
 80065a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80065ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065b0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80065b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065b8:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065bc:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065c0:	4b7b      	ldr	r3, [pc, #492]	; (80067b0 <_dtoa_r+0x308>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7f9 fe6e 	bl	80002a8 <__aeabi_dsub>
 80065cc:	a36c      	add	r3, pc, #432	; (adr r3, 8006780 <_dtoa_r+0x2d8>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f7fa f821 	bl	8000618 <__aeabi_dmul>
 80065d6:	a36c      	add	r3, pc, #432	; (adr r3, 8006788 <_dtoa_r+0x2e0>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f7f9 fe66 	bl	80002ac <__adddf3>
 80065e0:	4606      	mov	r6, r0
 80065e2:	4628      	mov	r0, r5
 80065e4:	460f      	mov	r7, r1
 80065e6:	f7f9 ffad 	bl	8000544 <__aeabi_i2d>
 80065ea:	a369      	add	r3, pc, #420	; (adr r3, 8006790 <_dtoa_r+0x2e8>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7fa f812 	bl	8000618 <__aeabi_dmul>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7f9 fe56 	bl	80002ac <__adddf3>
 8006600:	4606      	mov	r6, r0
 8006602:	460f      	mov	r7, r1
 8006604:	f7fa fab8 	bl	8000b78 <__aeabi_d2iz>
 8006608:	2200      	movs	r2, #0
 800660a:	4682      	mov	sl, r0
 800660c:	2300      	movs	r3, #0
 800660e:	4630      	mov	r0, r6
 8006610:	4639      	mov	r1, r7
 8006612:	f7fa fa73 	bl	8000afc <__aeabi_dcmplt>
 8006616:	b148      	cbz	r0, 800662c <_dtoa_r+0x184>
 8006618:	4650      	mov	r0, sl
 800661a:	f7f9 ff93 	bl	8000544 <__aeabi_i2d>
 800661e:	4632      	mov	r2, r6
 8006620:	463b      	mov	r3, r7
 8006622:	f7fa fa61 	bl	8000ae8 <__aeabi_dcmpeq>
 8006626:	b908      	cbnz	r0, 800662c <_dtoa_r+0x184>
 8006628:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800662c:	f1ba 0f16 	cmp.w	sl, #22
 8006630:	d854      	bhi.n	80066dc <_dtoa_r+0x234>
 8006632:	4b60      	ldr	r3, [pc, #384]	; (80067b4 <_dtoa_r+0x30c>)
 8006634:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006640:	f7fa fa5c 	bl	8000afc <__aeabi_dcmplt>
 8006644:	2800      	cmp	r0, #0
 8006646:	d04b      	beq.n	80066e0 <_dtoa_r+0x238>
 8006648:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800664c:	2300      	movs	r3, #0
 800664e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006652:	1b5d      	subs	r5, r3, r5
 8006654:	1e6b      	subs	r3, r5, #1
 8006656:	9307      	str	r3, [sp, #28]
 8006658:	bf43      	ittte	mi
 800665a:	2300      	movmi	r3, #0
 800665c:	f1c5 0801 	rsbmi	r8, r5, #1
 8006660:	9307      	strmi	r3, [sp, #28]
 8006662:	f04f 0800 	movpl.w	r8, #0
 8006666:	f1ba 0f00 	cmp.w	sl, #0
 800666a:	db3b      	blt.n	80066e4 <_dtoa_r+0x23c>
 800666c:	9b07      	ldr	r3, [sp, #28]
 800666e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006672:	4453      	add	r3, sl
 8006674:	9307      	str	r3, [sp, #28]
 8006676:	2300      	movs	r3, #0
 8006678:	9308      	str	r3, [sp, #32]
 800667a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800667c:	2b09      	cmp	r3, #9
 800667e:	d869      	bhi.n	8006754 <_dtoa_r+0x2ac>
 8006680:	2b05      	cmp	r3, #5
 8006682:	bfc4      	itt	gt
 8006684:	3b04      	subgt	r3, #4
 8006686:	9320      	strgt	r3, [sp, #128]	; 0x80
 8006688:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800668a:	f1a3 0302 	sub.w	r3, r3, #2
 800668e:	bfcc      	ite	gt
 8006690:	2500      	movgt	r5, #0
 8006692:	2501      	movle	r5, #1
 8006694:	2b03      	cmp	r3, #3
 8006696:	d869      	bhi.n	800676c <_dtoa_r+0x2c4>
 8006698:	e8df f003 	tbb	[pc, r3]
 800669c:	5a4c4e2c 	.word	0x5a4c4e2c
 80066a0:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80066a4:	441d      	add	r5, r3
 80066a6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	bfc1      	itttt	gt
 80066ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066b2:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066b6:	fa09 f303 	lslgt.w	r3, r9, r3
 80066ba:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066be:	bfda      	itte	le
 80066c0:	f1c3 0320 	rsble	r3, r3, #32
 80066c4:	fa06 f003 	lslle.w	r0, r6, r3
 80066c8:	4318      	orrgt	r0, r3
 80066ca:	f7f9 ff2b 	bl	8000524 <__aeabi_ui2d>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4606      	mov	r6, r0
 80066d2:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066d6:	3d01      	subs	r5, #1
 80066d8:	9310      	str	r3, [sp, #64]	; 0x40
 80066da:	e771      	b.n	80065c0 <_dtoa_r+0x118>
 80066dc:	2301      	movs	r3, #1
 80066de:	e7b6      	b.n	800664e <_dtoa_r+0x1a6>
 80066e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80066e2:	e7b5      	b.n	8006650 <_dtoa_r+0x1a8>
 80066e4:	f1ca 0300 	rsb	r3, sl, #0
 80066e8:	9308      	str	r3, [sp, #32]
 80066ea:	2300      	movs	r3, #0
 80066ec:	eba8 080a 	sub.w	r8, r8, sl
 80066f0:	930e      	str	r3, [sp, #56]	; 0x38
 80066f2:	e7c2      	b.n	800667a <_dtoa_r+0x1d2>
 80066f4:	2300      	movs	r3, #0
 80066f6:	930c      	str	r3, [sp, #48]	; 0x30
 80066f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dc39      	bgt.n	8006772 <_dtoa_r+0x2ca>
 80066fe:	f04f 0901 	mov.w	r9, #1
 8006702:	f8cd 9018 	str.w	r9, [sp, #24]
 8006706:	464b      	mov	r3, r9
 8006708:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 800670c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800670e:	2200      	movs	r2, #0
 8006710:	6042      	str	r2, [r0, #4]
 8006712:	2204      	movs	r2, #4
 8006714:	f102 0614 	add.w	r6, r2, #20
 8006718:	429e      	cmp	r6, r3
 800671a:	6841      	ldr	r1, [r0, #4]
 800671c:	d94e      	bls.n	80067bc <_dtoa_r+0x314>
 800671e:	4620      	mov	r0, r4
 8006720:	f000 fcba 	bl	8007098 <_Balloc>
 8006724:	9003      	str	r0, [sp, #12]
 8006726:	2800      	cmp	r0, #0
 8006728:	d14c      	bne.n	80067c4 <_dtoa_r+0x31c>
 800672a:	4b23      	ldr	r3, [pc, #140]	; (80067b8 <_dtoa_r+0x310>)
 800672c:	4602      	mov	r2, r0
 800672e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006732:	e6cf      	b.n	80064d4 <_dtoa_r+0x2c>
 8006734:	2301      	movs	r3, #1
 8006736:	e7de      	b.n	80066f6 <_dtoa_r+0x24e>
 8006738:	2300      	movs	r3, #0
 800673a:	930c      	str	r3, [sp, #48]	; 0x30
 800673c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800673e:	eb0a 0903 	add.w	r9, sl, r3
 8006742:	f109 0301 	add.w	r3, r9, #1
 8006746:	2b01      	cmp	r3, #1
 8006748:	9306      	str	r3, [sp, #24]
 800674a:	bfb8      	it	lt
 800674c:	2301      	movlt	r3, #1
 800674e:	e7dd      	b.n	800670c <_dtoa_r+0x264>
 8006750:	2301      	movs	r3, #1
 8006752:	e7f2      	b.n	800673a <_dtoa_r+0x292>
 8006754:	2501      	movs	r5, #1
 8006756:	2300      	movs	r3, #0
 8006758:	9320      	str	r3, [sp, #128]	; 0x80
 800675a:	950c      	str	r5, [sp, #48]	; 0x30
 800675c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006760:	2200      	movs	r2, #0
 8006762:	f8cd 9018 	str.w	r9, [sp, #24]
 8006766:	2312      	movs	r3, #18
 8006768:	9221      	str	r2, [sp, #132]	; 0x84
 800676a:	e7cf      	b.n	800670c <_dtoa_r+0x264>
 800676c:	2301      	movs	r3, #1
 800676e:	930c      	str	r3, [sp, #48]	; 0x30
 8006770:	e7f4      	b.n	800675c <_dtoa_r+0x2b4>
 8006772:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8006776:	f8cd 9018 	str.w	r9, [sp, #24]
 800677a:	464b      	mov	r3, r9
 800677c:	e7c6      	b.n	800670c <_dtoa_r+0x264>
 800677e:	bf00      	nop
 8006780:	636f4361 	.word	0x636f4361
 8006784:	3fd287a7 	.word	0x3fd287a7
 8006788:	8b60c8b3 	.word	0x8b60c8b3
 800678c:	3fc68a28 	.word	0x3fc68a28
 8006790:	509f79fb 	.word	0x509f79fb
 8006794:	3fd34413 	.word	0x3fd34413
 8006798:	08008c49 	.word	0x08008c49
 800679c:	08008c60 	.word	0x08008c60
 80067a0:	7ff00000 	.word	0x7ff00000
 80067a4:	08008c45 	.word	0x08008c45
 80067a8:	08008c3c 	.word	0x08008c3c
 80067ac:	08008c19 	.word	0x08008c19
 80067b0:	3ff80000 	.word	0x3ff80000
 80067b4:	08008d58 	.word	0x08008d58
 80067b8:	08008cbf 	.word	0x08008cbf
 80067bc:	3101      	adds	r1, #1
 80067be:	6041      	str	r1, [r0, #4]
 80067c0:	0052      	lsls	r2, r2, #1
 80067c2:	e7a7      	b.n	8006714 <_dtoa_r+0x26c>
 80067c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067c6:	9a03      	ldr	r2, [sp, #12]
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	9b06      	ldr	r3, [sp, #24]
 80067cc:	2b0e      	cmp	r3, #14
 80067ce:	f200 80ad 	bhi.w	800692c <_dtoa_r+0x484>
 80067d2:	2d00      	cmp	r5, #0
 80067d4:	f000 80aa 	beq.w	800692c <_dtoa_r+0x484>
 80067d8:	f1ba 0f00 	cmp.w	sl, #0
 80067dc:	dd36      	ble.n	800684c <_dtoa_r+0x3a4>
 80067de:	4ac3      	ldr	r2, [pc, #780]	; (8006aec <_dtoa_r+0x644>)
 80067e0:	f00a 030f 	and.w	r3, sl, #15
 80067e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067e8:	ed93 7b00 	vldr	d7, [r3]
 80067ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80067f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80067f4:	eeb0 8a47 	vmov.f32	s16, s14
 80067f8:	eef0 8a67 	vmov.f32	s17, s15
 80067fc:	d016      	beq.n	800682c <_dtoa_r+0x384>
 80067fe:	4bbc      	ldr	r3, [pc, #752]	; (8006af0 <_dtoa_r+0x648>)
 8006800:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006804:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006808:	f7fa f830 	bl	800086c <__aeabi_ddiv>
 800680c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006810:	f007 070f 	and.w	r7, r7, #15
 8006814:	2503      	movs	r5, #3
 8006816:	4eb6      	ldr	r6, [pc, #728]	; (8006af0 <_dtoa_r+0x648>)
 8006818:	b957      	cbnz	r7, 8006830 <_dtoa_r+0x388>
 800681a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800681e:	ec53 2b18 	vmov	r2, r3, d8
 8006822:	f7fa f823 	bl	800086c <__aeabi_ddiv>
 8006826:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800682a:	e029      	b.n	8006880 <_dtoa_r+0x3d8>
 800682c:	2502      	movs	r5, #2
 800682e:	e7f2      	b.n	8006816 <_dtoa_r+0x36e>
 8006830:	07f9      	lsls	r1, r7, #31
 8006832:	d508      	bpl.n	8006846 <_dtoa_r+0x39e>
 8006834:	ec51 0b18 	vmov	r0, r1, d8
 8006838:	e9d6 2300 	ldrd	r2, r3, [r6]
 800683c:	f7f9 feec 	bl	8000618 <__aeabi_dmul>
 8006840:	ec41 0b18 	vmov	d8, r0, r1
 8006844:	3501      	adds	r5, #1
 8006846:	107f      	asrs	r7, r7, #1
 8006848:	3608      	adds	r6, #8
 800684a:	e7e5      	b.n	8006818 <_dtoa_r+0x370>
 800684c:	f000 80a6 	beq.w	800699c <_dtoa_r+0x4f4>
 8006850:	f1ca 0600 	rsb	r6, sl, #0
 8006854:	4ba5      	ldr	r3, [pc, #660]	; (8006aec <_dtoa_r+0x644>)
 8006856:	4fa6      	ldr	r7, [pc, #664]	; (8006af0 <_dtoa_r+0x648>)
 8006858:	f006 020f 	and.w	r2, r6, #15
 800685c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006868:	f7f9 fed6 	bl	8000618 <__aeabi_dmul>
 800686c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006870:	1136      	asrs	r6, r6, #4
 8006872:	2300      	movs	r3, #0
 8006874:	2502      	movs	r5, #2
 8006876:	2e00      	cmp	r6, #0
 8006878:	f040 8085 	bne.w	8006986 <_dtoa_r+0x4de>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1d2      	bne.n	8006826 <_dtoa_r+0x37e>
 8006880:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 808c 	beq.w	80069a0 <_dtoa_r+0x4f8>
 8006888:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800688c:	4b99      	ldr	r3, [pc, #612]	; (8006af4 <_dtoa_r+0x64c>)
 800688e:	2200      	movs	r2, #0
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	f7fa f932 	bl	8000afc <__aeabi_dcmplt>
 8006898:	2800      	cmp	r0, #0
 800689a:	f000 8081 	beq.w	80069a0 <_dtoa_r+0x4f8>
 800689e:	9b06      	ldr	r3, [sp, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d07d      	beq.n	80069a0 <_dtoa_r+0x4f8>
 80068a4:	f1b9 0f00 	cmp.w	r9, #0
 80068a8:	dd3c      	ble.n	8006924 <_dtoa_r+0x47c>
 80068aa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80068ae:	9309      	str	r3, [sp, #36]	; 0x24
 80068b0:	2200      	movs	r2, #0
 80068b2:	4b91      	ldr	r3, [pc, #580]	; (8006af8 <_dtoa_r+0x650>)
 80068b4:	4630      	mov	r0, r6
 80068b6:	4639      	mov	r1, r7
 80068b8:	f7f9 feae 	bl	8000618 <__aeabi_dmul>
 80068bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068c0:	3501      	adds	r5, #1
 80068c2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80068c6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80068ca:	4628      	mov	r0, r5
 80068cc:	f7f9 fe3a 	bl	8000544 <__aeabi_i2d>
 80068d0:	4632      	mov	r2, r6
 80068d2:	463b      	mov	r3, r7
 80068d4:	f7f9 fea0 	bl	8000618 <__aeabi_dmul>
 80068d8:	4b88      	ldr	r3, [pc, #544]	; (8006afc <_dtoa_r+0x654>)
 80068da:	2200      	movs	r2, #0
 80068dc:	f7f9 fce6 	bl	80002ac <__adddf3>
 80068e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80068e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068e8:	9305      	str	r3, [sp, #20]
 80068ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d15c      	bne.n	80069aa <_dtoa_r+0x502>
 80068f0:	4b83      	ldr	r3, [pc, #524]	; (8006b00 <_dtoa_r+0x658>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	4630      	mov	r0, r6
 80068f6:	4639      	mov	r1, r7
 80068f8:	f7f9 fcd6 	bl	80002a8 <__aeabi_dsub>
 80068fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006900:	4606      	mov	r6, r0
 8006902:	460f      	mov	r7, r1
 8006904:	f7fa f918 	bl	8000b38 <__aeabi_dcmpgt>
 8006908:	2800      	cmp	r0, #0
 800690a:	f040 8296 	bne.w	8006e3a <_dtoa_r+0x992>
 800690e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8006912:	4630      	mov	r0, r6
 8006914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006918:	4639      	mov	r1, r7
 800691a:	f7fa f8ef 	bl	8000afc <__aeabi_dcmplt>
 800691e:	2800      	cmp	r0, #0
 8006920:	f040 8288 	bne.w	8006e34 <_dtoa_r+0x98c>
 8006924:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006928:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800692c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800692e:	2b00      	cmp	r3, #0
 8006930:	f2c0 8158 	blt.w	8006be4 <_dtoa_r+0x73c>
 8006934:	f1ba 0f0e 	cmp.w	sl, #14
 8006938:	f300 8154 	bgt.w	8006be4 <_dtoa_r+0x73c>
 800693c:	4b6b      	ldr	r3, [pc, #428]	; (8006aec <_dtoa_r+0x644>)
 800693e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006942:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006948:	2b00      	cmp	r3, #0
 800694a:	f280 80e3 	bge.w	8006b14 <_dtoa_r+0x66c>
 800694e:	9b06      	ldr	r3, [sp, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f300 80df 	bgt.w	8006b14 <_dtoa_r+0x66c>
 8006956:	f040 826d 	bne.w	8006e34 <_dtoa_r+0x98c>
 800695a:	4b69      	ldr	r3, [pc, #420]	; (8006b00 <_dtoa_r+0x658>)
 800695c:	2200      	movs	r2, #0
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7f9 fe59 	bl	8000618 <__aeabi_dmul>
 8006966:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800696a:	f7fa f8db 	bl	8000b24 <__aeabi_dcmpge>
 800696e:	9e06      	ldr	r6, [sp, #24]
 8006970:	4637      	mov	r7, r6
 8006972:	2800      	cmp	r0, #0
 8006974:	f040 8243 	bne.w	8006dfe <_dtoa_r+0x956>
 8006978:	9d03      	ldr	r5, [sp, #12]
 800697a:	2331      	movs	r3, #49	; 0x31
 800697c:	f805 3b01 	strb.w	r3, [r5], #1
 8006980:	f10a 0a01 	add.w	sl, sl, #1
 8006984:	e23f      	b.n	8006e06 <_dtoa_r+0x95e>
 8006986:	07f2      	lsls	r2, r6, #31
 8006988:	d505      	bpl.n	8006996 <_dtoa_r+0x4ee>
 800698a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800698e:	f7f9 fe43 	bl	8000618 <__aeabi_dmul>
 8006992:	3501      	adds	r5, #1
 8006994:	2301      	movs	r3, #1
 8006996:	1076      	asrs	r6, r6, #1
 8006998:	3708      	adds	r7, #8
 800699a:	e76c      	b.n	8006876 <_dtoa_r+0x3ce>
 800699c:	2502      	movs	r5, #2
 800699e:	e76f      	b.n	8006880 <_dtoa_r+0x3d8>
 80069a0:	9b06      	ldr	r3, [sp, #24]
 80069a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80069a6:	930d      	str	r3, [sp, #52]	; 0x34
 80069a8:	e78d      	b.n	80068c6 <_dtoa_r+0x41e>
 80069aa:	9903      	ldr	r1, [sp, #12]
 80069ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80069ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069b0:	4b4e      	ldr	r3, [pc, #312]	; (8006aec <_dtoa_r+0x644>)
 80069b2:	ed9d 7b04 	vldr	d7, [sp, #16]
 80069b6:	4401      	add	r1, r0
 80069b8:	9104      	str	r1, [sp, #16]
 80069ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069bc:	eeb0 8a47 	vmov.f32	s16, s14
 80069c0:	eef0 8a67 	vmov.f32	s17, s15
 80069c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d045      	beq.n	8006a5c <_dtoa_r+0x5b4>
 80069d0:	494c      	ldr	r1, [pc, #304]	; (8006b04 <_dtoa_r+0x65c>)
 80069d2:	2000      	movs	r0, #0
 80069d4:	f7f9 ff4a 	bl	800086c <__aeabi_ddiv>
 80069d8:	ec53 2b18 	vmov	r2, r3, d8
 80069dc:	f7f9 fc64 	bl	80002a8 <__aeabi_dsub>
 80069e0:	9d03      	ldr	r5, [sp, #12]
 80069e2:	ec41 0b18 	vmov	d8, r0, r1
 80069e6:	4639      	mov	r1, r7
 80069e8:	4630      	mov	r0, r6
 80069ea:	f7fa f8c5 	bl	8000b78 <__aeabi_d2iz>
 80069ee:	900d      	str	r0, [sp, #52]	; 0x34
 80069f0:	f7f9 fda8 	bl	8000544 <__aeabi_i2d>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4630      	mov	r0, r6
 80069fa:	4639      	mov	r1, r7
 80069fc:	f7f9 fc54 	bl	80002a8 <__aeabi_dsub>
 8006a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a02:	3330      	adds	r3, #48	; 0x30
 8006a04:	f805 3b01 	strb.w	r3, [r5], #1
 8006a08:	ec53 2b18 	vmov	r2, r3, d8
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	460f      	mov	r7, r1
 8006a10:	f7fa f874 	bl	8000afc <__aeabi_dcmplt>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d165      	bne.n	8006ae4 <_dtoa_r+0x63c>
 8006a18:	4632      	mov	r2, r6
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	4935      	ldr	r1, [pc, #212]	; (8006af4 <_dtoa_r+0x64c>)
 8006a1e:	2000      	movs	r0, #0
 8006a20:	f7f9 fc42 	bl	80002a8 <__aeabi_dsub>
 8006a24:	ec53 2b18 	vmov	r2, r3, d8
 8006a28:	f7fa f868 	bl	8000afc <__aeabi_dcmplt>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f040 80b9 	bne.w	8006ba4 <_dtoa_r+0x6fc>
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	429d      	cmp	r5, r3
 8006a36:	f43f af75 	beq.w	8006924 <_dtoa_r+0x47c>
 8006a3a:	4b2f      	ldr	r3, [pc, #188]	; (8006af8 <_dtoa_r+0x650>)
 8006a3c:	ec51 0b18 	vmov	r0, r1, d8
 8006a40:	2200      	movs	r2, #0
 8006a42:	f7f9 fde9 	bl	8000618 <__aeabi_dmul>
 8006a46:	4b2c      	ldr	r3, [pc, #176]	; (8006af8 <_dtoa_r+0x650>)
 8006a48:	ec41 0b18 	vmov	d8, r0, r1
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4630      	mov	r0, r6
 8006a50:	4639      	mov	r1, r7
 8006a52:	f7f9 fde1 	bl	8000618 <__aeabi_dmul>
 8006a56:	4606      	mov	r6, r0
 8006a58:	460f      	mov	r7, r1
 8006a5a:	e7c4      	b.n	80069e6 <_dtoa_r+0x53e>
 8006a5c:	ec51 0b17 	vmov	r0, r1, d7
 8006a60:	f7f9 fdda 	bl	8000618 <__aeabi_dmul>
 8006a64:	9b04      	ldr	r3, [sp, #16]
 8006a66:	9d03      	ldr	r5, [sp, #12]
 8006a68:	930d      	str	r3, [sp, #52]	; 0x34
 8006a6a:	ec41 0b18 	vmov	d8, r0, r1
 8006a6e:	4639      	mov	r1, r7
 8006a70:	4630      	mov	r0, r6
 8006a72:	f7fa f881 	bl	8000b78 <__aeabi_d2iz>
 8006a76:	9011      	str	r0, [sp, #68]	; 0x44
 8006a78:	f7f9 fd64 	bl	8000544 <__aeabi_i2d>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4630      	mov	r0, r6
 8006a82:	4639      	mov	r1, r7
 8006a84:	f7f9 fc10 	bl	80002a8 <__aeabi_dsub>
 8006a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a8a:	3330      	adds	r3, #48	; 0x30
 8006a8c:	f805 3b01 	strb.w	r3, [r5], #1
 8006a90:	9b04      	ldr	r3, [sp, #16]
 8006a92:	429d      	cmp	r5, r3
 8006a94:	4606      	mov	r6, r0
 8006a96:	460f      	mov	r7, r1
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	d134      	bne.n	8006b08 <_dtoa_r+0x660>
 8006a9e:	4b19      	ldr	r3, [pc, #100]	; (8006b04 <_dtoa_r+0x65c>)
 8006aa0:	ec51 0b18 	vmov	r0, r1, d8
 8006aa4:	f7f9 fc02 	bl	80002ac <__adddf3>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7fa f842 	bl	8000b38 <__aeabi_dcmpgt>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d175      	bne.n	8006ba4 <_dtoa_r+0x6fc>
 8006ab8:	ec53 2b18 	vmov	r2, r3, d8
 8006abc:	4911      	ldr	r1, [pc, #68]	; (8006b04 <_dtoa_r+0x65c>)
 8006abe:	2000      	movs	r0, #0
 8006ac0:	f7f9 fbf2 	bl	80002a8 <__aeabi_dsub>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	f7fa f816 	bl	8000afc <__aeabi_dcmplt>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	f43f af27 	beq.w	8006924 <_dtoa_r+0x47c>
 8006ad6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006ad8:	1e6b      	subs	r3, r5, #1
 8006ada:	930d      	str	r3, [sp, #52]	; 0x34
 8006adc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ae0:	2b30      	cmp	r3, #48	; 0x30
 8006ae2:	d0f8      	beq.n	8006ad6 <_dtoa_r+0x62e>
 8006ae4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006ae8:	e04a      	b.n	8006b80 <_dtoa_r+0x6d8>
 8006aea:	bf00      	nop
 8006aec:	08008d58 	.word	0x08008d58
 8006af0:	08008d30 	.word	0x08008d30
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	40240000 	.word	0x40240000
 8006afc:	401c0000 	.word	0x401c0000
 8006b00:	40140000 	.word	0x40140000
 8006b04:	3fe00000 	.word	0x3fe00000
 8006b08:	4baf      	ldr	r3, [pc, #700]	; (8006dc8 <_dtoa_r+0x920>)
 8006b0a:	f7f9 fd85 	bl	8000618 <__aeabi_dmul>
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460f      	mov	r7, r1
 8006b12:	e7ac      	b.n	8006a6e <_dtoa_r+0x5c6>
 8006b14:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8006b18:	9d03      	ldr	r5, [sp, #12]
 8006b1a:	4642      	mov	r2, r8
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	4630      	mov	r0, r6
 8006b20:	4639      	mov	r1, r7
 8006b22:	f7f9 fea3 	bl	800086c <__aeabi_ddiv>
 8006b26:	f7fa f827 	bl	8000b78 <__aeabi_d2iz>
 8006b2a:	9004      	str	r0, [sp, #16]
 8006b2c:	f7f9 fd0a 	bl	8000544 <__aeabi_i2d>
 8006b30:	4642      	mov	r2, r8
 8006b32:	464b      	mov	r3, r9
 8006b34:	f7f9 fd70 	bl	8000618 <__aeabi_dmul>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4639      	mov	r1, r7
 8006b40:	f7f9 fbb2 	bl	80002a8 <__aeabi_dsub>
 8006b44:	9e04      	ldr	r6, [sp, #16]
 8006b46:	9f06      	ldr	r7, [sp, #24]
 8006b48:	3630      	adds	r6, #48	; 0x30
 8006b4a:	f805 6b01 	strb.w	r6, [r5], #1
 8006b4e:	9e03      	ldr	r6, [sp, #12]
 8006b50:	1bae      	subs	r6, r5, r6
 8006b52:	42b7      	cmp	r7, r6
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	d137      	bne.n	8006bca <_dtoa_r+0x722>
 8006b5a:	f7f9 fba7 	bl	80002ac <__adddf3>
 8006b5e:	4642      	mov	r2, r8
 8006b60:	464b      	mov	r3, r9
 8006b62:	4606      	mov	r6, r0
 8006b64:	460f      	mov	r7, r1
 8006b66:	f7f9 ffe7 	bl	8000b38 <__aeabi_dcmpgt>
 8006b6a:	b9c8      	cbnz	r0, 8006ba0 <_dtoa_r+0x6f8>
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	464b      	mov	r3, r9
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 ffb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b78:	b110      	cbz	r0, 8006b80 <_dtoa_r+0x6d8>
 8006b7a:	9b04      	ldr	r3, [sp, #16]
 8006b7c:	07d9      	lsls	r1, r3, #31
 8006b7e:	d40f      	bmi.n	8006ba0 <_dtoa_r+0x6f8>
 8006b80:	4620      	mov	r0, r4
 8006b82:	4659      	mov	r1, fp
 8006b84:	f000 fac8 	bl	8007118 <_Bfree>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	702b      	strb	r3, [r5, #0]
 8006b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b8e:	f10a 0001 	add.w	r0, sl, #1
 8006b92:	6018      	str	r0, [r3, #0]
 8006b94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f43f acd5 	beq.w	8006546 <_dtoa_r+0x9e>
 8006b9c:	601d      	str	r5, [r3, #0]
 8006b9e:	e4d2      	b.n	8006546 <_dtoa_r+0x9e>
 8006ba0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006ba4:	462b      	mov	r3, r5
 8006ba6:	461d      	mov	r5, r3
 8006ba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bac:	2a39      	cmp	r2, #57	; 0x39
 8006bae:	d108      	bne.n	8006bc2 <_dtoa_r+0x71a>
 8006bb0:	9a03      	ldr	r2, [sp, #12]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d1f7      	bne.n	8006ba6 <_dtoa_r+0x6fe>
 8006bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bb8:	9903      	ldr	r1, [sp, #12]
 8006bba:	3201      	adds	r2, #1
 8006bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8006bbe:	2230      	movs	r2, #48	; 0x30
 8006bc0:	700a      	strb	r2, [r1, #0]
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	3201      	adds	r2, #1
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	e78c      	b.n	8006ae4 <_dtoa_r+0x63c>
 8006bca:	4b7f      	ldr	r3, [pc, #508]	; (8006dc8 <_dtoa_r+0x920>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f7f9 fd23 	bl	8000618 <__aeabi_dmul>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460f      	mov	r7, r1
 8006bda:	f7f9 ff85 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d09b      	beq.n	8006b1a <_dtoa_r+0x672>
 8006be2:	e7cd      	b.n	8006b80 <_dtoa_r+0x6d8>
 8006be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	f000 80c4 	beq.w	8006d74 <_dtoa_r+0x8cc>
 8006bec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006bee:	2a01      	cmp	r2, #1
 8006bf0:	f300 80a8 	bgt.w	8006d44 <_dtoa_r+0x89c>
 8006bf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	f000 80a0 	beq.w	8006d3c <_dtoa_r+0x894>
 8006bfc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c00:	9e08      	ldr	r6, [sp, #32]
 8006c02:	4645      	mov	r5, r8
 8006c04:	9a07      	ldr	r2, [sp, #28]
 8006c06:	2101      	movs	r1, #1
 8006c08:	441a      	add	r2, r3
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	4498      	add	r8, r3
 8006c0e:	9207      	str	r2, [sp, #28]
 8006c10:	f000 fb3e 	bl	8007290 <__i2b>
 8006c14:	4607      	mov	r7, r0
 8006c16:	2d00      	cmp	r5, #0
 8006c18:	dd0b      	ble.n	8006c32 <_dtoa_r+0x78a>
 8006c1a:	9b07      	ldr	r3, [sp, #28]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	dd08      	ble.n	8006c32 <_dtoa_r+0x78a>
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	9a07      	ldr	r2, [sp, #28]
 8006c24:	bfa8      	it	ge
 8006c26:	462b      	movge	r3, r5
 8006c28:	eba8 0803 	sub.w	r8, r8, r3
 8006c2c:	1aed      	subs	r5, r5, r3
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	9307      	str	r3, [sp, #28]
 8006c32:	9b08      	ldr	r3, [sp, #32]
 8006c34:	b1fb      	cbz	r3, 8006c76 <_dtoa_r+0x7ce>
 8006c36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 809f 	beq.w	8006d7c <_dtoa_r+0x8d4>
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	dd11      	ble.n	8006c66 <_dtoa_r+0x7be>
 8006c42:	4639      	mov	r1, r7
 8006c44:	4632      	mov	r2, r6
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 fbde 	bl	8007408 <__pow5mult>
 8006c4c:	465a      	mov	r2, fp
 8006c4e:	4601      	mov	r1, r0
 8006c50:	4607      	mov	r7, r0
 8006c52:	4620      	mov	r0, r4
 8006c54:	f000 fb32 	bl	80072bc <__multiply>
 8006c58:	4659      	mov	r1, fp
 8006c5a:	9009      	str	r0, [sp, #36]	; 0x24
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 fa5b 	bl	8007118 <_Bfree>
 8006c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c64:	469b      	mov	fp, r3
 8006c66:	9b08      	ldr	r3, [sp, #32]
 8006c68:	1b9a      	subs	r2, r3, r6
 8006c6a:	d004      	beq.n	8006c76 <_dtoa_r+0x7ce>
 8006c6c:	4659      	mov	r1, fp
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 fbca 	bl	8007408 <__pow5mult>
 8006c74:	4683      	mov	fp, r0
 8006c76:	2101      	movs	r1, #1
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 fb09 	bl	8007290 <__i2b>
 8006c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	4606      	mov	r6, r0
 8006c84:	dd7c      	ble.n	8006d80 <_dtoa_r+0x8d8>
 8006c86:	461a      	mov	r2, r3
 8006c88:	4601      	mov	r1, r0
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fbbc 	bl	8007408 <__pow5mult>
 8006c90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	4606      	mov	r6, r0
 8006c96:	dd76      	ble.n	8006d86 <_dtoa_r+0x8de>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9308      	str	r3, [sp, #32]
 8006c9c:	6933      	ldr	r3, [r6, #16]
 8006c9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ca2:	6918      	ldr	r0, [r3, #16]
 8006ca4:	f000 faa4 	bl	80071f0 <__hi0bits>
 8006ca8:	f1c0 0020 	rsb	r0, r0, #32
 8006cac:	9b07      	ldr	r3, [sp, #28]
 8006cae:	4418      	add	r0, r3
 8006cb0:	f010 001f 	ands.w	r0, r0, #31
 8006cb4:	f000 8086 	beq.w	8006dc4 <_dtoa_r+0x91c>
 8006cb8:	f1c0 0320 	rsb	r3, r0, #32
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	dd7f      	ble.n	8006dc0 <_dtoa_r+0x918>
 8006cc0:	f1c0 001c 	rsb	r0, r0, #28
 8006cc4:	9b07      	ldr	r3, [sp, #28]
 8006cc6:	4403      	add	r3, r0
 8006cc8:	4480      	add	r8, r0
 8006cca:	4405      	add	r5, r0
 8006ccc:	9307      	str	r3, [sp, #28]
 8006cce:	f1b8 0f00 	cmp.w	r8, #0
 8006cd2:	dd05      	ble.n	8006ce0 <_dtoa_r+0x838>
 8006cd4:	4659      	mov	r1, fp
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 fbef 	bl	80074bc <__lshift>
 8006cde:	4683      	mov	fp, r0
 8006ce0:	9b07      	ldr	r3, [sp, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd05      	ble.n	8006cf2 <_dtoa_r+0x84a>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 fbe6 	bl	80074bc <__lshift>
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d069      	beq.n	8006dcc <_dtoa_r+0x924>
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	4658      	mov	r0, fp
 8006cfc:	f000 fc4a 	bl	8007594 <__mcmp>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	da63      	bge.n	8006dcc <_dtoa_r+0x924>
 8006d04:	2300      	movs	r3, #0
 8006d06:	4659      	mov	r1, fp
 8006d08:	220a      	movs	r2, #10
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 fa26 	bl	800715c <__multadd>
 8006d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006d16:	4683      	mov	fp, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 818f 	beq.w	800703c <_dtoa_r+0xb94>
 8006d1e:	4639      	mov	r1, r7
 8006d20:	2300      	movs	r3, #0
 8006d22:	220a      	movs	r2, #10
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fa19 	bl	800715c <__multadd>
 8006d2a:	f1b9 0f00 	cmp.w	r9, #0
 8006d2e:	4607      	mov	r7, r0
 8006d30:	f300 808e 	bgt.w	8006e50 <_dtoa_r+0x9a8>
 8006d34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	dc50      	bgt.n	8006ddc <_dtoa_r+0x934>
 8006d3a:	e089      	b.n	8006e50 <_dtoa_r+0x9a8>
 8006d3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d42:	e75d      	b.n	8006c00 <_dtoa_r+0x758>
 8006d44:	9b06      	ldr	r3, [sp, #24]
 8006d46:	1e5e      	subs	r6, r3, #1
 8006d48:	9b08      	ldr	r3, [sp, #32]
 8006d4a:	42b3      	cmp	r3, r6
 8006d4c:	bfbf      	itttt	lt
 8006d4e:	9b08      	ldrlt	r3, [sp, #32]
 8006d50:	9608      	strlt	r6, [sp, #32]
 8006d52:	1af2      	sublt	r2, r6, r3
 8006d54:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006d56:	bfb6      	itet	lt
 8006d58:	189b      	addlt	r3, r3, r2
 8006d5a:	1b9e      	subge	r6, r3, r6
 8006d5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006d5e:	9b06      	ldr	r3, [sp, #24]
 8006d60:	bfb8      	it	lt
 8006d62:	2600      	movlt	r6, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bfb5      	itete	lt
 8006d68:	eba8 0503 	sublt.w	r5, r8, r3
 8006d6c:	9b06      	ldrge	r3, [sp, #24]
 8006d6e:	2300      	movlt	r3, #0
 8006d70:	4645      	movge	r5, r8
 8006d72:	e747      	b.n	8006c04 <_dtoa_r+0x75c>
 8006d74:	9e08      	ldr	r6, [sp, #32]
 8006d76:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8006d78:	4645      	mov	r5, r8
 8006d7a:	e74c      	b.n	8006c16 <_dtoa_r+0x76e>
 8006d7c:	9a08      	ldr	r2, [sp, #32]
 8006d7e:	e775      	b.n	8006c6c <_dtoa_r+0x7c4>
 8006d80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	dc18      	bgt.n	8006db8 <_dtoa_r+0x910>
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	b9b3      	cbnz	r3, 8006db8 <_dtoa_r+0x910>
 8006d8a:	9b05      	ldr	r3, [sp, #20]
 8006d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d90:	b9a3      	cbnz	r3, 8006dbc <_dtoa_r+0x914>
 8006d92:	9b05      	ldr	r3, [sp, #20]
 8006d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d98:	0d1b      	lsrs	r3, r3, #20
 8006d9a:	051b      	lsls	r3, r3, #20
 8006d9c:	b12b      	cbz	r3, 8006daa <_dtoa_r+0x902>
 8006d9e:	9b07      	ldr	r3, [sp, #28]
 8006da0:	3301      	adds	r3, #1
 8006da2:	9307      	str	r3, [sp, #28]
 8006da4:	f108 0801 	add.w	r8, r8, #1
 8006da8:	2301      	movs	r3, #1
 8006daa:	9308      	str	r3, [sp, #32]
 8006dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f47f af74 	bne.w	8006c9c <_dtoa_r+0x7f4>
 8006db4:	2001      	movs	r0, #1
 8006db6:	e779      	b.n	8006cac <_dtoa_r+0x804>
 8006db8:	2300      	movs	r3, #0
 8006dba:	e7f6      	b.n	8006daa <_dtoa_r+0x902>
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	e7f4      	b.n	8006daa <_dtoa_r+0x902>
 8006dc0:	d085      	beq.n	8006cce <_dtoa_r+0x826>
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	301c      	adds	r0, #28
 8006dc6:	e77d      	b.n	8006cc4 <_dtoa_r+0x81c>
 8006dc8:	40240000 	.word	0x40240000
 8006dcc:	9b06      	ldr	r3, [sp, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dc38      	bgt.n	8006e44 <_dtoa_r+0x99c>
 8006dd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	dd35      	ble.n	8006e44 <_dtoa_r+0x99c>
 8006dd8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8006ddc:	f1b9 0f00 	cmp.w	r9, #0
 8006de0:	d10d      	bne.n	8006dfe <_dtoa_r+0x956>
 8006de2:	4631      	mov	r1, r6
 8006de4:	464b      	mov	r3, r9
 8006de6:	2205      	movs	r2, #5
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 f9b7 	bl	800715c <__multadd>
 8006dee:	4601      	mov	r1, r0
 8006df0:	4606      	mov	r6, r0
 8006df2:	4658      	mov	r0, fp
 8006df4:	f000 fbce 	bl	8007594 <__mcmp>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	f73f adbd 	bgt.w	8006978 <_dtoa_r+0x4d0>
 8006dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e00:	9d03      	ldr	r5, [sp, #12]
 8006e02:	ea6f 0a03 	mvn.w	sl, r3
 8006e06:	f04f 0800 	mov.w	r8, #0
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 f983 	bl	8007118 <_Bfree>
 8006e12:	2f00      	cmp	r7, #0
 8006e14:	f43f aeb4 	beq.w	8006b80 <_dtoa_r+0x6d8>
 8006e18:	f1b8 0f00 	cmp.w	r8, #0
 8006e1c:	d005      	beq.n	8006e2a <_dtoa_r+0x982>
 8006e1e:	45b8      	cmp	r8, r7
 8006e20:	d003      	beq.n	8006e2a <_dtoa_r+0x982>
 8006e22:	4641      	mov	r1, r8
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 f977 	bl	8007118 <_Bfree>
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 f973 	bl	8007118 <_Bfree>
 8006e32:	e6a5      	b.n	8006b80 <_dtoa_r+0x6d8>
 8006e34:	2600      	movs	r6, #0
 8006e36:	4637      	mov	r7, r6
 8006e38:	e7e1      	b.n	8006dfe <_dtoa_r+0x956>
 8006e3a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006e3c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006e40:	4637      	mov	r7, r6
 8006e42:	e599      	b.n	8006978 <_dtoa_r+0x4d0>
 8006e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e46:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80fd 	beq.w	800704a <_dtoa_r+0xba2>
 8006e50:	2d00      	cmp	r5, #0
 8006e52:	dd05      	ble.n	8006e60 <_dtoa_r+0x9b8>
 8006e54:	4639      	mov	r1, r7
 8006e56:	462a      	mov	r2, r5
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 fb2f 	bl	80074bc <__lshift>
 8006e5e:	4607      	mov	r7, r0
 8006e60:	9b08      	ldr	r3, [sp, #32]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d05c      	beq.n	8006f20 <_dtoa_r+0xa78>
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f000 f915 	bl	8007098 <_Balloc>
 8006e6e:	4605      	mov	r5, r0
 8006e70:	b928      	cbnz	r0, 8006e7e <_dtoa_r+0x9d6>
 8006e72:	4b80      	ldr	r3, [pc, #512]	; (8007074 <_dtoa_r+0xbcc>)
 8006e74:	4602      	mov	r2, r0
 8006e76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e7a:	f7ff bb2b 	b.w	80064d4 <_dtoa_r+0x2c>
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	3202      	adds	r2, #2
 8006e82:	0092      	lsls	r2, r2, #2
 8006e84:	f107 010c 	add.w	r1, r7, #12
 8006e88:	300c      	adds	r0, #12
 8006e8a:	f7fe fddf 	bl	8005a4c <memcpy>
 8006e8e:	2201      	movs	r2, #1
 8006e90:	4629      	mov	r1, r5
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fb12 	bl	80074bc <__lshift>
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	9306      	str	r3, [sp, #24]
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	444b      	add	r3, r9
 8006ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea4:	9b04      	ldr	r3, [sp, #16]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	46b8      	mov	r8, r7
 8006eac:	9308      	str	r3, [sp, #32]
 8006eae:	4607      	mov	r7, r0
 8006eb0:	9b06      	ldr	r3, [sp, #24]
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	4658      	mov	r0, fp
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	f7ff fa69 	bl	8006390 <quorem>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	3330      	adds	r3, #48	; 0x30
 8006ec2:	9007      	str	r0, [sp, #28]
 8006ec4:	4641      	mov	r1, r8
 8006ec6:	4658      	mov	r0, fp
 8006ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8006eca:	f000 fb63 	bl	8007594 <__mcmp>
 8006ece:	463a      	mov	r2, r7
 8006ed0:	4681      	mov	r9, r0
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fb79 	bl	80075cc <__mdiff>
 8006eda:	68c2      	ldr	r2, [r0, #12]
 8006edc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ede:	4605      	mov	r5, r0
 8006ee0:	bb02      	cbnz	r2, 8006f24 <_dtoa_r+0xa7c>
 8006ee2:	4601      	mov	r1, r0
 8006ee4:	4658      	mov	r0, fp
 8006ee6:	f000 fb55 	bl	8007594 <__mcmp>
 8006eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eec:	4602      	mov	r2, r0
 8006eee:	4629      	mov	r1, r5
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	920a      	str	r2, [sp, #40]	; 0x28
 8006ef4:	930c      	str	r3, [sp, #48]	; 0x30
 8006ef6:	f000 f90f 	bl	8007118 <_Bfree>
 8006efa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006efe:	9d06      	ldr	r5, [sp, #24]
 8006f00:	ea43 0102 	orr.w	r1, r3, r2
 8006f04:	9b08      	ldr	r3, [sp, #32]
 8006f06:	430b      	orrs	r3, r1
 8006f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f0a:	d10d      	bne.n	8006f28 <_dtoa_r+0xa80>
 8006f0c:	2b39      	cmp	r3, #57	; 0x39
 8006f0e:	d029      	beq.n	8006f64 <_dtoa_r+0xabc>
 8006f10:	f1b9 0f00 	cmp.w	r9, #0
 8006f14:	dd01      	ble.n	8006f1a <_dtoa_r+0xa72>
 8006f16:	9b07      	ldr	r3, [sp, #28]
 8006f18:	3331      	adds	r3, #49	; 0x31
 8006f1a:	9a04      	ldr	r2, [sp, #16]
 8006f1c:	7013      	strb	r3, [r2, #0]
 8006f1e:	e774      	b.n	8006e0a <_dtoa_r+0x962>
 8006f20:	4638      	mov	r0, r7
 8006f22:	e7b9      	b.n	8006e98 <_dtoa_r+0x9f0>
 8006f24:	2201      	movs	r2, #1
 8006f26:	e7e2      	b.n	8006eee <_dtoa_r+0xa46>
 8006f28:	f1b9 0f00 	cmp.w	r9, #0
 8006f2c:	db06      	blt.n	8006f3c <_dtoa_r+0xa94>
 8006f2e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006f30:	ea41 0909 	orr.w	r9, r1, r9
 8006f34:	9908      	ldr	r1, [sp, #32]
 8006f36:	ea59 0101 	orrs.w	r1, r9, r1
 8006f3a:	d120      	bne.n	8006f7e <_dtoa_r+0xad6>
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	ddec      	ble.n	8006f1a <_dtoa_r+0xa72>
 8006f40:	4659      	mov	r1, fp
 8006f42:	2201      	movs	r2, #1
 8006f44:	4620      	mov	r0, r4
 8006f46:	9306      	str	r3, [sp, #24]
 8006f48:	f000 fab8 	bl	80074bc <__lshift>
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4683      	mov	fp, r0
 8006f50:	f000 fb20 	bl	8007594 <__mcmp>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	9b06      	ldr	r3, [sp, #24]
 8006f58:	dc02      	bgt.n	8006f60 <_dtoa_r+0xab8>
 8006f5a:	d1de      	bne.n	8006f1a <_dtoa_r+0xa72>
 8006f5c:	07da      	lsls	r2, r3, #31
 8006f5e:	d5dc      	bpl.n	8006f1a <_dtoa_r+0xa72>
 8006f60:	2b39      	cmp	r3, #57	; 0x39
 8006f62:	d1d8      	bne.n	8006f16 <_dtoa_r+0xa6e>
 8006f64:	9a04      	ldr	r2, [sp, #16]
 8006f66:	2339      	movs	r3, #57	; 0x39
 8006f68:	7013      	strb	r3, [r2, #0]
 8006f6a:	462b      	mov	r3, r5
 8006f6c:	461d      	mov	r5, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f74:	2a39      	cmp	r2, #57	; 0x39
 8006f76:	d050      	beq.n	800701a <_dtoa_r+0xb72>
 8006f78:	3201      	adds	r2, #1
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e745      	b.n	8006e0a <_dtoa_r+0x962>
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	dd03      	ble.n	8006f8a <_dtoa_r+0xae2>
 8006f82:	2b39      	cmp	r3, #57	; 0x39
 8006f84:	d0ee      	beq.n	8006f64 <_dtoa_r+0xabc>
 8006f86:	3301      	adds	r3, #1
 8006f88:	e7c7      	b.n	8006f1a <_dtoa_r+0xa72>
 8006f8a:	9a06      	ldr	r2, [sp, #24]
 8006f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f92:	428a      	cmp	r2, r1
 8006f94:	d02a      	beq.n	8006fec <_dtoa_r+0xb44>
 8006f96:	4659      	mov	r1, fp
 8006f98:	2300      	movs	r3, #0
 8006f9a:	220a      	movs	r2, #10
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 f8dd 	bl	800715c <__multadd>
 8006fa2:	45b8      	cmp	r8, r7
 8006fa4:	4683      	mov	fp, r0
 8006fa6:	f04f 0300 	mov.w	r3, #0
 8006faa:	f04f 020a 	mov.w	r2, #10
 8006fae:	4641      	mov	r1, r8
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	d107      	bne.n	8006fc4 <_dtoa_r+0xb1c>
 8006fb4:	f000 f8d2 	bl	800715c <__multadd>
 8006fb8:	4680      	mov	r8, r0
 8006fba:	4607      	mov	r7, r0
 8006fbc:	9b06      	ldr	r3, [sp, #24]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	9306      	str	r3, [sp, #24]
 8006fc2:	e775      	b.n	8006eb0 <_dtoa_r+0xa08>
 8006fc4:	f000 f8ca 	bl	800715c <__multadd>
 8006fc8:	4639      	mov	r1, r7
 8006fca:	4680      	mov	r8, r0
 8006fcc:	2300      	movs	r3, #0
 8006fce:	220a      	movs	r2, #10
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 f8c3 	bl	800715c <__multadd>
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	e7f0      	b.n	8006fbc <_dtoa_r+0xb14>
 8006fda:	f1b9 0f00 	cmp.w	r9, #0
 8006fde:	9a03      	ldr	r2, [sp, #12]
 8006fe0:	bfcc      	ite	gt
 8006fe2:	464d      	movgt	r5, r9
 8006fe4:	2501      	movle	r5, #1
 8006fe6:	4415      	add	r5, r2
 8006fe8:	f04f 0800 	mov.w	r8, #0
 8006fec:	4659      	mov	r1, fp
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	9306      	str	r3, [sp, #24]
 8006ff4:	f000 fa62 	bl	80074bc <__lshift>
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4683      	mov	fp, r0
 8006ffc:	f000 faca 	bl	8007594 <__mcmp>
 8007000:	2800      	cmp	r0, #0
 8007002:	dcb2      	bgt.n	8006f6a <_dtoa_r+0xac2>
 8007004:	d102      	bne.n	800700c <_dtoa_r+0xb64>
 8007006:	9b06      	ldr	r3, [sp, #24]
 8007008:	07db      	lsls	r3, r3, #31
 800700a:	d4ae      	bmi.n	8006f6a <_dtoa_r+0xac2>
 800700c:	462b      	mov	r3, r5
 800700e:	461d      	mov	r5, r3
 8007010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007014:	2a30      	cmp	r2, #48	; 0x30
 8007016:	d0fa      	beq.n	800700e <_dtoa_r+0xb66>
 8007018:	e6f7      	b.n	8006e0a <_dtoa_r+0x962>
 800701a:	9a03      	ldr	r2, [sp, #12]
 800701c:	429a      	cmp	r2, r3
 800701e:	d1a5      	bne.n	8006f6c <_dtoa_r+0xac4>
 8007020:	f10a 0a01 	add.w	sl, sl, #1
 8007024:	2331      	movs	r3, #49	; 0x31
 8007026:	e779      	b.n	8006f1c <_dtoa_r+0xa74>
 8007028:	4b13      	ldr	r3, [pc, #76]	; (8007078 <_dtoa_r+0xbd0>)
 800702a:	f7ff baac 	b.w	8006586 <_dtoa_r+0xde>
 800702e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007030:	2b00      	cmp	r3, #0
 8007032:	f47f aa83 	bne.w	800653c <_dtoa_r+0x94>
 8007036:	4b11      	ldr	r3, [pc, #68]	; (800707c <_dtoa_r+0xbd4>)
 8007038:	f7ff baa5 	b.w	8006586 <_dtoa_r+0xde>
 800703c:	f1b9 0f00 	cmp.w	r9, #0
 8007040:	dc03      	bgt.n	800704a <_dtoa_r+0xba2>
 8007042:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007044:	2b02      	cmp	r3, #2
 8007046:	f73f aec9 	bgt.w	8006ddc <_dtoa_r+0x934>
 800704a:	9d03      	ldr	r5, [sp, #12]
 800704c:	4631      	mov	r1, r6
 800704e:	4658      	mov	r0, fp
 8007050:	f7ff f99e 	bl	8006390 <quorem>
 8007054:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007058:	f805 3b01 	strb.w	r3, [r5], #1
 800705c:	9a03      	ldr	r2, [sp, #12]
 800705e:	1aaa      	subs	r2, r5, r2
 8007060:	4591      	cmp	r9, r2
 8007062:	ddba      	ble.n	8006fda <_dtoa_r+0xb32>
 8007064:	4659      	mov	r1, fp
 8007066:	2300      	movs	r3, #0
 8007068:	220a      	movs	r2, #10
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f876 	bl	800715c <__multadd>
 8007070:	4683      	mov	fp, r0
 8007072:	e7eb      	b.n	800704c <_dtoa_r+0xba4>
 8007074:	08008cbf 	.word	0x08008cbf
 8007078:	08008c18 	.word	0x08008c18
 800707c:	08008c3c 	.word	0x08008c3c

08007080 <_localeconv_r>:
 8007080:	4800      	ldr	r0, [pc, #0]	; (8007084 <_localeconv_r+0x4>)
 8007082:	4770      	bx	lr
 8007084:	20000188 	.word	0x20000188

08007088 <malloc>:
 8007088:	4b02      	ldr	r3, [pc, #8]	; (8007094 <malloc+0xc>)
 800708a:	4601      	mov	r1, r0
 800708c:	6818      	ldr	r0, [r3, #0]
 800708e:	f000 bbdf 	b.w	8007850 <_malloc_r>
 8007092:	bf00      	nop
 8007094:	20000034 	.word	0x20000034

08007098 <_Balloc>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800709c:	4604      	mov	r4, r0
 800709e:	460d      	mov	r5, r1
 80070a0:	b976      	cbnz	r6, 80070c0 <_Balloc+0x28>
 80070a2:	2010      	movs	r0, #16
 80070a4:	f7ff fff0 	bl	8007088 <malloc>
 80070a8:	4602      	mov	r2, r0
 80070aa:	6260      	str	r0, [r4, #36]	; 0x24
 80070ac:	b920      	cbnz	r0, 80070b8 <_Balloc+0x20>
 80070ae:	4b18      	ldr	r3, [pc, #96]	; (8007110 <_Balloc+0x78>)
 80070b0:	4818      	ldr	r0, [pc, #96]	; (8007114 <_Balloc+0x7c>)
 80070b2:	2166      	movs	r1, #102	; 0x66
 80070b4:	f000 fd92 	bl	8007bdc <__assert_func>
 80070b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070bc:	6006      	str	r6, [r0, #0]
 80070be:	60c6      	str	r6, [r0, #12]
 80070c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070c2:	68f3      	ldr	r3, [r6, #12]
 80070c4:	b183      	cbz	r3, 80070e8 <_Balloc+0x50>
 80070c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070ce:	b9b8      	cbnz	r0, 8007100 <_Balloc+0x68>
 80070d0:	2101      	movs	r1, #1
 80070d2:	fa01 f605 	lsl.w	r6, r1, r5
 80070d6:	1d72      	adds	r2, r6, #5
 80070d8:	0092      	lsls	r2, r2, #2
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 fb58 	bl	8007790 <_calloc_r>
 80070e0:	b160      	cbz	r0, 80070fc <_Balloc+0x64>
 80070e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070e6:	e00e      	b.n	8007106 <_Balloc+0x6e>
 80070e8:	2221      	movs	r2, #33	; 0x21
 80070ea:	2104      	movs	r1, #4
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 fb4f 	bl	8007790 <_calloc_r>
 80070f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f4:	60f0      	str	r0, [r6, #12]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e4      	bne.n	80070c6 <_Balloc+0x2e>
 80070fc:	2000      	movs	r0, #0
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	6802      	ldr	r2, [r0, #0]
 8007102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007106:	2300      	movs	r3, #0
 8007108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800710c:	e7f7      	b.n	80070fe <_Balloc+0x66>
 800710e:	bf00      	nop
 8007110:	08008c49 	.word	0x08008c49
 8007114:	08008cd0 	.word	0x08008cd0

08007118 <_Bfree>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800711c:	4605      	mov	r5, r0
 800711e:	460c      	mov	r4, r1
 8007120:	b976      	cbnz	r6, 8007140 <_Bfree+0x28>
 8007122:	2010      	movs	r0, #16
 8007124:	f7ff ffb0 	bl	8007088 <malloc>
 8007128:	4602      	mov	r2, r0
 800712a:	6268      	str	r0, [r5, #36]	; 0x24
 800712c:	b920      	cbnz	r0, 8007138 <_Bfree+0x20>
 800712e:	4b09      	ldr	r3, [pc, #36]	; (8007154 <_Bfree+0x3c>)
 8007130:	4809      	ldr	r0, [pc, #36]	; (8007158 <_Bfree+0x40>)
 8007132:	218a      	movs	r1, #138	; 0x8a
 8007134:	f000 fd52 	bl	8007bdc <__assert_func>
 8007138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800713c:	6006      	str	r6, [r0, #0]
 800713e:	60c6      	str	r6, [r0, #12]
 8007140:	b13c      	cbz	r4, 8007152 <_Bfree+0x3a>
 8007142:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007144:	6862      	ldr	r2, [r4, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800714c:	6021      	str	r1, [r4, #0]
 800714e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	08008c49 	.word	0x08008c49
 8007158:	08008cd0 	.word	0x08008cd0

0800715c <__multadd>:
 800715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007160:	690e      	ldr	r6, [r1, #16]
 8007162:	4607      	mov	r7, r0
 8007164:	4698      	mov	r8, r3
 8007166:	460c      	mov	r4, r1
 8007168:	f101 0014 	add.w	r0, r1, #20
 800716c:	2300      	movs	r3, #0
 800716e:	6805      	ldr	r5, [r0, #0]
 8007170:	b2a9      	uxth	r1, r5
 8007172:	fb02 8101 	mla	r1, r2, r1, r8
 8007176:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800717a:	0c2d      	lsrs	r5, r5, #16
 800717c:	fb02 c505 	mla	r5, r2, r5, ip
 8007180:	b289      	uxth	r1, r1
 8007182:	3301      	adds	r3, #1
 8007184:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007188:	429e      	cmp	r6, r3
 800718a:	f840 1b04 	str.w	r1, [r0], #4
 800718e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007192:	dcec      	bgt.n	800716e <__multadd+0x12>
 8007194:	f1b8 0f00 	cmp.w	r8, #0
 8007198:	d022      	beq.n	80071e0 <__multadd+0x84>
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	42b3      	cmp	r3, r6
 800719e:	dc19      	bgt.n	80071d4 <__multadd+0x78>
 80071a0:	6861      	ldr	r1, [r4, #4]
 80071a2:	4638      	mov	r0, r7
 80071a4:	3101      	adds	r1, #1
 80071a6:	f7ff ff77 	bl	8007098 <_Balloc>
 80071aa:	4605      	mov	r5, r0
 80071ac:	b928      	cbnz	r0, 80071ba <__multadd+0x5e>
 80071ae:	4602      	mov	r2, r0
 80071b0:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <__multadd+0x8c>)
 80071b2:	480e      	ldr	r0, [pc, #56]	; (80071ec <__multadd+0x90>)
 80071b4:	21b5      	movs	r1, #181	; 0xb5
 80071b6:	f000 fd11 	bl	8007bdc <__assert_func>
 80071ba:	6922      	ldr	r2, [r4, #16]
 80071bc:	3202      	adds	r2, #2
 80071be:	f104 010c 	add.w	r1, r4, #12
 80071c2:	0092      	lsls	r2, r2, #2
 80071c4:	300c      	adds	r0, #12
 80071c6:	f7fe fc41 	bl	8005a4c <memcpy>
 80071ca:	4621      	mov	r1, r4
 80071cc:	4638      	mov	r0, r7
 80071ce:	f7ff ffa3 	bl	8007118 <_Bfree>
 80071d2:	462c      	mov	r4, r5
 80071d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80071d8:	3601      	adds	r6, #1
 80071da:	f8c3 8014 	str.w	r8, [r3, #20]
 80071de:	6126      	str	r6, [r4, #16]
 80071e0:	4620      	mov	r0, r4
 80071e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e6:	bf00      	nop
 80071e8:	08008cbf 	.word	0x08008cbf
 80071ec:	08008cd0 	.word	0x08008cd0

080071f0 <__hi0bits>:
 80071f0:	0c03      	lsrs	r3, r0, #16
 80071f2:	041b      	lsls	r3, r3, #16
 80071f4:	b9d3      	cbnz	r3, 800722c <__hi0bits+0x3c>
 80071f6:	0400      	lsls	r0, r0, #16
 80071f8:	2310      	movs	r3, #16
 80071fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071fe:	bf04      	itt	eq
 8007200:	0200      	lsleq	r0, r0, #8
 8007202:	3308      	addeq	r3, #8
 8007204:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007208:	bf04      	itt	eq
 800720a:	0100      	lsleq	r0, r0, #4
 800720c:	3304      	addeq	r3, #4
 800720e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007212:	bf04      	itt	eq
 8007214:	0080      	lsleq	r0, r0, #2
 8007216:	3302      	addeq	r3, #2
 8007218:	2800      	cmp	r0, #0
 800721a:	db05      	blt.n	8007228 <__hi0bits+0x38>
 800721c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007220:	f103 0301 	add.w	r3, r3, #1
 8007224:	bf08      	it	eq
 8007226:	2320      	moveq	r3, #32
 8007228:	4618      	mov	r0, r3
 800722a:	4770      	bx	lr
 800722c:	2300      	movs	r3, #0
 800722e:	e7e4      	b.n	80071fa <__hi0bits+0xa>

08007230 <__lo0bits>:
 8007230:	6803      	ldr	r3, [r0, #0]
 8007232:	f013 0207 	ands.w	r2, r3, #7
 8007236:	4601      	mov	r1, r0
 8007238:	d00b      	beq.n	8007252 <__lo0bits+0x22>
 800723a:	07da      	lsls	r2, r3, #31
 800723c:	d424      	bmi.n	8007288 <__lo0bits+0x58>
 800723e:	0798      	lsls	r0, r3, #30
 8007240:	bf49      	itett	mi
 8007242:	085b      	lsrmi	r3, r3, #1
 8007244:	089b      	lsrpl	r3, r3, #2
 8007246:	2001      	movmi	r0, #1
 8007248:	600b      	strmi	r3, [r1, #0]
 800724a:	bf5c      	itt	pl
 800724c:	600b      	strpl	r3, [r1, #0]
 800724e:	2002      	movpl	r0, #2
 8007250:	4770      	bx	lr
 8007252:	b298      	uxth	r0, r3
 8007254:	b9b0      	cbnz	r0, 8007284 <__lo0bits+0x54>
 8007256:	0c1b      	lsrs	r3, r3, #16
 8007258:	2010      	movs	r0, #16
 800725a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800725e:	bf04      	itt	eq
 8007260:	0a1b      	lsreq	r3, r3, #8
 8007262:	3008      	addeq	r0, #8
 8007264:	071a      	lsls	r2, r3, #28
 8007266:	bf04      	itt	eq
 8007268:	091b      	lsreq	r3, r3, #4
 800726a:	3004      	addeq	r0, #4
 800726c:	079a      	lsls	r2, r3, #30
 800726e:	bf04      	itt	eq
 8007270:	089b      	lsreq	r3, r3, #2
 8007272:	3002      	addeq	r0, #2
 8007274:	07da      	lsls	r2, r3, #31
 8007276:	d403      	bmi.n	8007280 <__lo0bits+0x50>
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	f100 0001 	add.w	r0, r0, #1
 800727e:	d005      	beq.n	800728c <__lo0bits+0x5c>
 8007280:	600b      	str	r3, [r1, #0]
 8007282:	4770      	bx	lr
 8007284:	4610      	mov	r0, r2
 8007286:	e7e8      	b.n	800725a <__lo0bits+0x2a>
 8007288:	2000      	movs	r0, #0
 800728a:	4770      	bx	lr
 800728c:	2020      	movs	r0, #32
 800728e:	4770      	bx	lr

08007290 <__i2b>:
 8007290:	b510      	push	{r4, lr}
 8007292:	460c      	mov	r4, r1
 8007294:	2101      	movs	r1, #1
 8007296:	f7ff feff 	bl	8007098 <_Balloc>
 800729a:	4602      	mov	r2, r0
 800729c:	b928      	cbnz	r0, 80072aa <__i2b+0x1a>
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <__i2b+0x24>)
 80072a0:	4805      	ldr	r0, [pc, #20]	; (80072b8 <__i2b+0x28>)
 80072a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072a6:	f000 fc99 	bl	8007bdc <__assert_func>
 80072aa:	2301      	movs	r3, #1
 80072ac:	6144      	str	r4, [r0, #20]
 80072ae:	6103      	str	r3, [r0, #16]
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	bf00      	nop
 80072b4:	08008cbf 	.word	0x08008cbf
 80072b8:	08008cd0 	.word	0x08008cd0

080072bc <__multiply>:
 80072bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	4614      	mov	r4, r2
 80072c2:	690a      	ldr	r2, [r1, #16]
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	bfb8      	it	lt
 80072ca:	460b      	movlt	r3, r1
 80072cc:	460d      	mov	r5, r1
 80072ce:	bfbc      	itt	lt
 80072d0:	4625      	movlt	r5, r4
 80072d2:	461c      	movlt	r4, r3
 80072d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80072d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072dc:	68ab      	ldr	r3, [r5, #8]
 80072de:	6869      	ldr	r1, [r5, #4]
 80072e0:	eb0a 0709 	add.w	r7, sl, r9
 80072e4:	42bb      	cmp	r3, r7
 80072e6:	b085      	sub	sp, #20
 80072e8:	bfb8      	it	lt
 80072ea:	3101      	addlt	r1, #1
 80072ec:	f7ff fed4 	bl	8007098 <_Balloc>
 80072f0:	b930      	cbnz	r0, 8007300 <__multiply+0x44>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b42      	ldr	r3, [pc, #264]	; (8007400 <__multiply+0x144>)
 80072f6:	4843      	ldr	r0, [pc, #268]	; (8007404 <__multiply+0x148>)
 80072f8:	f240 115d 	movw	r1, #349	; 0x15d
 80072fc:	f000 fc6e 	bl	8007bdc <__assert_func>
 8007300:	f100 0614 	add.w	r6, r0, #20
 8007304:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007308:	4633      	mov	r3, r6
 800730a:	2200      	movs	r2, #0
 800730c:	4543      	cmp	r3, r8
 800730e:	d31e      	bcc.n	800734e <__multiply+0x92>
 8007310:	f105 0c14 	add.w	ip, r5, #20
 8007314:	f104 0314 	add.w	r3, r4, #20
 8007318:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800731c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007320:	9202      	str	r2, [sp, #8]
 8007322:	ebac 0205 	sub.w	r2, ip, r5
 8007326:	3a15      	subs	r2, #21
 8007328:	f022 0203 	bic.w	r2, r2, #3
 800732c:	3204      	adds	r2, #4
 800732e:	f105 0115 	add.w	r1, r5, #21
 8007332:	458c      	cmp	ip, r1
 8007334:	bf38      	it	cc
 8007336:	2204      	movcc	r2, #4
 8007338:	9201      	str	r2, [sp, #4]
 800733a:	9a02      	ldr	r2, [sp, #8]
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	429a      	cmp	r2, r3
 8007340:	d808      	bhi.n	8007354 <__multiply+0x98>
 8007342:	2f00      	cmp	r7, #0
 8007344:	dc55      	bgt.n	80073f2 <__multiply+0x136>
 8007346:	6107      	str	r7, [r0, #16]
 8007348:	b005      	add	sp, #20
 800734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734e:	f843 2b04 	str.w	r2, [r3], #4
 8007352:	e7db      	b.n	800730c <__multiply+0x50>
 8007354:	f8b3 a000 	ldrh.w	sl, [r3]
 8007358:	f1ba 0f00 	cmp.w	sl, #0
 800735c:	d020      	beq.n	80073a0 <__multiply+0xe4>
 800735e:	f105 0e14 	add.w	lr, r5, #20
 8007362:	46b1      	mov	r9, r6
 8007364:	2200      	movs	r2, #0
 8007366:	f85e 4b04 	ldr.w	r4, [lr], #4
 800736a:	f8d9 b000 	ldr.w	fp, [r9]
 800736e:	b2a1      	uxth	r1, r4
 8007370:	fa1f fb8b 	uxth.w	fp, fp
 8007374:	fb0a b101 	mla	r1, sl, r1, fp
 8007378:	4411      	add	r1, r2
 800737a:	f8d9 2000 	ldr.w	r2, [r9]
 800737e:	0c24      	lsrs	r4, r4, #16
 8007380:	0c12      	lsrs	r2, r2, #16
 8007382:	fb0a 2404 	mla	r4, sl, r4, r2
 8007386:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800738a:	b289      	uxth	r1, r1
 800738c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007390:	45f4      	cmp	ip, lr
 8007392:	f849 1b04 	str.w	r1, [r9], #4
 8007396:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800739a:	d8e4      	bhi.n	8007366 <__multiply+0xaa>
 800739c:	9901      	ldr	r1, [sp, #4]
 800739e:	5072      	str	r2, [r6, r1]
 80073a0:	9a03      	ldr	r2, [sp, #12]
 80073a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073a6:	3304      	adds	r3, #4
 80073a8:	f1b9 0f00 	cmp.w	r9, #0
 80073ac:	d01f      	beq.n	80073ee <__multiply+0x132>
 80073ae:	6834      	ldr	r4, [r6, #0]
 80073b0:	f105 0114 	add.w	r1, r5, #20
 80073b4:	46b6      	mov	lr, r6
 80073b6:	f04f 0a00 	mov.w	sl, #0
 80073ba:	880a      	ldrh	r2, [r1, #0]
 80073bc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80073c0:	fb09 b202 	mla	r2, r9, r2, fp
 80073c4:	4492      	add	sl, r2
 80073c6:	b2a4      	uxth	r4, r4
 80073c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80073cc:	f84e 4b04 	str.w	r4, [lr], #4
 80073d0:	f851 4b04 	ldr.w	r4, [r1], #4
 80073d4:	f8be 2000 	ldrh.w	r2, [lr]
 80073d8:	0c24      	lsrs	r4, r4, #16
 80073da:	fb09 2404 	mla	r4, r9, r4, r2
 80073de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80073e2:	458c      	cmp	ip, r1
 80073e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073e8:	d8e7      	bhi.n	80073ba <__multiply+0xfe>
 80073ea:	9a01      	ldr	r2, [sp, #4]
 80073ec:	50b4      	str	r4, [r6, r2]
 80073ee:	3604      	adds	r6, #4
 80073f0:	e7a3      	b.n	800733a <__multiply+0x7e>
 80073f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1a5      	bne.n	8007346 <__multiply+0x8a>
 80073fa:	3f01      	subs	r7, #1
 80073fc:	e7a1      	b.n	8007342 <__multiply+0x86>
 80073fe:	bf00      	nop
 8007400:	08008cbf 	.word	0x08008cbf
 8007404:	08008cd0 	.word	0x08008cd0

08007408 <__pow5mult>:
 8007408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800740c:	4615      	mov	r5, r2
 800740e:	f012 0203 	ands.w	r2, r2, #3
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	d007      	beq.n	8007428 <__pow5mult+0x20>
 8007418:	4c25      	ldr	r4, [pc, #148]	; (80074b0 <__pow5mult+0xa8>)
 800741a:	3a01      	subs	r2, #1
 800741c:	2300      	movs	r3, #0
 800741e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007422:	f7ff fe9b 	bl	800715c <__multadd>
 8007426:	4607      	mov	r7, r0
 8007428:	10ad      	asrs	r5, r5, #2
 800742a:	d03d      	beq.n	80074a8 <__pow5mult+0xa0>
 800742c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800742e:	b97c      	cbnz	r4, 8007450 <__pow5mult+0x48>
 8007430:	2010      	movs	r0, #16
 8007432:	f7ff fe29 	bl	8007088 <malloc>
 8007436:	4602      	mov	r2, r0
 8007438:	6270      	str	r0, [r6, #36]	; 0x24
 800743a:	b928      	cbnz	r0, 8007448 <__pow5mult+0x40>
 800743c:	4b1d      	ldr	r3, [pc, #116]	; (80074b4 <__pow5mult+0xac>)
 800743e:	481e      	ldr	r0, [pc, #120]	; (80074b8 <__pow5mult+0xb0>)
 8007440:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007444:	f000 fbca 	bl	8007bdc <__assert_func>
 8007448:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800744c:	6004      	str	r4, [r0, #0]
 800744e:	60c4      	str	r4, [r0, #12]
 8007450:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007454:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007458:	b94c      	cbnz	r4, 800746e <__pow5mult+0x66>
 800745a:	f240 2171 	movw	r1, #625	; 0x271
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ff16 	bl	8007290 <__i2b>
 8007464:	2300      	movs	r3, #0
 8007466:	f8c8 0008 	str.w	r0, [r8, #8]
 800746a:	4604      	mov	r4, r0
 800746c:	6003      	str	r3, [r0, #0]
 800746e:	f04f 0900 	mov.w	r9, #0
 8007472:	07eb      	lsls	r3, r5, #31
 8007474:	d50a      	bpl.n	800748c <__pow5mult+0x84>
 8007476:	4639      	mov	r1, r7
 8007478:	4622      	mov	r2, r4
 800747a:	4630      	mov	r0, r6
 800747c:	f7ff ff1e 	bl	80072bc <__multiply>
 8007480:	4639      	mov	r1, r7
 8007482:	4680      	mov	r8, r0
 8007484:	4630      	mov	r0, r6
 8007486:	f7ff fe47 	bl	8007118 <_Bfree>
 800748a:	4647      	mov	r7, r8
 800748c:	106d      	asrs	r5, r5, #1
 800748e:	d00b      	beq.n	80074a8 <__pow5mult+0xa0>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	b938      	cbnz	r0, 80074a4 <__pow5mult+0x9c>
 8007494:	4622      	mov	r2, r4
 8007496:	4621      	mov	r1, r4
 8007498:	4630      	mov	r0, r6
 800749a:	f7ff ff0f 	bl	80072bc <__multiply>
 800749e:	6020      	str	r0, [r4, #0]
 80074a0:	f8c0 9000 	str.w	r9, [r0]
 80074a4:	4604      	mov	r4, r0
 80074a6:	e7e4      	b.n	8007472 <__pow5mult+0x6a>
 80074a8:	4638      	mov	r0, r7
 80074aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ae:	bf00      	nop
 80074b0:	08008e20 	.word	0x08008e20
 80074b4:	08008c49 	.word	0x08008c49
 80074b8:	08008cd0 	.word	0x08008cd0

080074bc <__lshift>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	460c      	mov	r4, r1
 80074c2:	6849      	ldr	r1, [r1, #4]
 80074c4:	6923      	ldr	r3, [r4, #16]
 80074c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074ca:	68a3      	ldr	r3, [r4, #8]
 80074cc:	4607      	mov	r7, r0
 80074ce:	4691      	mov	r9, r2
 80074d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074d4:	f108 0601 	add.w	r6, r8, #1
 80074d8:	42b3      	cmp	r3, r6
 80074da:	db0b      	blt.n	80074f4 <__lshift+0x38>
 80074dc:	4638      	mov	r0, r7
 80074de:	f7ff fddb 	bl	8007098 <_Balloc>
 80074e2:	4605      	mov	r5, r0
 80074e4:	b948      	cbnz	r0, 80074fa <__lshift+0x3e>
 80074e6:	4602      	mov	r2, r0
 80074e8:	4b28      	ldr	r3, [pc, #160]	; (800758c <__lshift+0xd0>)
 80074ea:	4829      	ldr	r0, [pc, #164]	; (8007590 <__lshift+0xd4>)
 80074ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074f0:	f000 fb74 	bl	8007bdc <__assert_func>
 80074f4:	3101      	adds	r1, #1
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	e7ee      	b.n	80074d8 <__lshift+0x1c>
 80074fa:	2300      	movs	r3, #0
 80074fc:	f100 0114 	add.w	r1, r0, #20
 8007500:	f100 0210 	add.w	r2, r0, #16
 8007504:	4618      	mov	r0, r3
 8007506:	4553      	cmp	r3, sl
 8007508:	db33      	blt.n	8007572 <__lshift+0xb6>
 800750a:	6920      	ldr	r0, [r4, #16]
 800750c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007510:	f104 0314 	add.w	r3, r4, #20
 8007514:	f019 091f 	ands.w	r9, r9, #31
 8007518:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800751c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007520:	d02b      	beq.n	800757a <__lshift+0xbe>
 8007522:	f1c9 0e20 	rsb	lr, r9, #32
 8007526:	468a      	mov	sl, r1
 8007528:	2200      	movs	r2, #0
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	fa00 f009 	lsl.w	r0, r0, r9
 8007530:	4302      	orrs	r2, r0
 8007532:	f84a 2b04 	str.w	r2, [sl], #4
 8007536:	f853 2b04 	ldr.w	r2, [r3], #4
 800753a:	459c      	cmp	ip, r3
 800753c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007540:	d8f3      	bhi.n	800752a <__lshift+0x6e>
 8007542:	ebac 0304 	sub.w	r3, ip, r4
 8007546:	3b15      	subs	r3, #21
 8007548:	f023 0303 	bic.w	r3, r3, #3
 800754c:	3304      	adds	r3, #4
 800754e:	f104 0015 	add.w	r0, r4, #21
 8007552:	4584      	cmp	ip, r0
 8007554:	bf38      	it	cc
 8007556:	2304      	movcc	r3, #4
 8007558:	50ca      	str	r2, [r1, r3]
 800755a:	b10a      	cbz	r2, 8007560 <__lshift+0xa4>
 800755c:	f108 0602 	add.w	r6, r8, #2
 8007560:	3e01      	subs	r6, #1
 8007562:	4638      	mov	r0, r7
 8007564:	612e      	str	r6, [r5, #16]
 8007566:	4621      	mov	r1, r4
 8007568:	f7ff fdd6 	bl	8007118 <_Bfree>
 800756c:	4628      	mov	r0, r5
 800756e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007572:	f842 0f04 	str.w	r0, [r2, #4]!
 8007576:	3301      	adds	r3, #1
 8007578:	e7c5      	b.n	8007506 <__lshift+0x4a>
 800757a:	3904      	subs	r1, #4
 800757c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007580:	f841 2f04 	str.w	r2, [r1, #4]!
 8007584:	459c      	cmp	ip, r3
 8007586:	d8f9      	bhi.n	800757c <__lshift+0xc0>
 8007588:	e7ea      	b.n	8007560 <__lshift+0xa4>
 800758a:	bf00      	nop
 800758c:	08008cbf 	.word	0x08008cbf
 8007590:	08008cd0 	.word	0x08008cd0

08007594 <__mcmp>:
 8007594:	b530      	push	{r4, r5, lr}
 8007596:	6902      	ldr	r2, [r0, #16]
 8007598:	690c      	ldr	r4, [r1, #16]
 800759a:	1b12      	subs	r2, r2, r4
 800759c:	d10e      	bne.n	80075bc <__mcmp+0x28>
 800759e:	f100 0314 	add.w	r3, r0, #20
 80075a2:	3114      	adds	r1, #20
 80075a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075b4:	42a5      	cmp	r5, r4
 80075b6:	d003      	beq.n	80075c0 <__mcmp+0x2c>
 80075b8:	d305      	bcc.n	80075c6 <__mcmp+0x32>
 80075ba:	2201      	movs	r2, #1
 80075bc:	4610      	mov	r0, r2
 80075be:	bd30      	pop	{r4, r5, pc}
 80075c0:	4283      	cmp	r3, r0
 80075c2:	d3f3      	bcc.n	80075ac <__mcmp+0x18>
 80075c4:	e7fa      	b.n	80075bc <__mcmp+0x28>
 80075c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075ca:	e7f7      	b.n	80075bc <__mcmp+0x28>

080075cc <__mdiff>:
 80075cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	460c      	mov	r4, r1
 80075d2:	4606      	mov	r6, r0
 80075d4:	4611      	mov	r1, r2
 80075d6:	4620      	mov	r0, r4
 80075d8:	4617      	mov	r7, r2
 80075da:	f7ff ffdb 	bl	8007594 <__mcmp>
 80075de:	1e05      	subs	r5, r0, #0
 80075e0:	d110      	bne.n	8007604 <__mdiff+0x38>
 80075e2:	4629      	mov	r1, r5
 80075e4:	4630      	mov	r0, r6
 80075e6:	f7ff fd57 	bl	8007098 <_Balloc>
 80075ea:	b930      	cbnz	r0, 80075fa <__mdiff+0x2e>
 80075ec:	4b39      	ldr	r3, [pc, #228]	; (80076d4 <__mdiff+0x108>)
 80075ee:	4602      	mov	r2, r0
 80075f0:	f240 2132 	movw	r1, #562	; 0x232
 80075f4:	4838      	ldr	r0, [pc, #224]	; (80076d8 <__mdiff+0x10c>)
 80075f6:	f000 faf1 	bl	8007bdc <__assert_func>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007604:	bfa4      	itt	ge
 8007606:	463b      	movge	r3, r7
 8007608:	4627      	movge	r7, r4
 800760a:	4630      	mov	r0, r6
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	bfa6      	itte	ge
 8007610:	461c      	movge	r4, r3
 8007612:	2500      	movge	r5, #0
 8007614:	2501      	movlt	r5, #1
 8007616:	f7ff fd3f 	bl	8007098 <_Balloc>
 800761a:	b920      	cbnz	r0, 8007626 <__mdiff+0x5a>
 800761c:	4b2d      	ldr	r3, [pc, #180]	; (80076d4 <__mdiff+0x108>)
 800761e:	4602      	mov	r2, r0
 8007620:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007624:	e7e6      	b.n	80075f4 <__mdiff+0x28>
 8007626:	693e      	ldr	r6, [r7, #16]
 8007628:	60c5      	str	r5, [r0, #12]
 800762a:	6925      	ldr	r5, [r4, #16]
 800762c:	f107 0114 	add.w	r1, r7, #20
 8007630:	f104 0914 	add.w	r9, r4, #20
 8007634:	f100 0e14 	add.w	lr, r0, #20
 8007638:	f107 0210 	add.w	r2, r7, #16
 800763c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007640:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007644:	46f2      	mov	sl, lr
 8007646:	2700      	movs	r7, #0
 8007648:	f859 3b04 	ldr.w	r3, [r9], #4
 800764c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007650:	fa1f f883 	uxth.w	r8, r3
 8007654:	fa17 f78b 	uxtah	r7, r7, fp
 8007658:	0c1b      	lsrs	r3, r3, #16
 800765a:	eba7 0808 	sub.w	r8, r7, r8
 800765e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007662:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007666:	fa1f f888 	uxth.w	r8, r8
 800766a:	141f      	asrs	r7, r3, #16
 800766c:	454d      	cmp	r5, r9
 800766e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007672:	f84a 3b04 	str.w	r3, [sl], #4
 8007676:	d8e7      	bhi.n	8007648 <__mdiff+0x7c>
 8007678:	1b2b      	subs	r3, r5, r4
 800767a:	3b15      	subs	r3, #21
 800767c:	f023 0303 	bic.w	r3, r3, #3
 8007680:	3304      	adds	r3, #4
 8007682:	3415      	adds	r4, #21
 8007684:	42a5      	cmp	r5, r4
 8007686:	bf38      	it	cc
 8007688:	2304      	movcc	r3, #4
 800768a:	4419      	add	r1, r3
 800768c:	4473      	add	r3, lr
 800768e:	469e      	mov	lr, r3
 8007690:	460d      	mov	r5, r1
 8007692:	4565      	cmp	r5, ip
 8007694:	d30e      	bcc.n	80076b4 <__mdiff+0xe8>
 8007696:	f10c 0203 	add.w	r2, ip, #3
 800769a:	1a52      	subs	r2, r2, r1
 800769c:	f022 0203 	bic.w	r2, r2, #3
 80076a0:	3903      	subs	r1, #3
 80076a2:	458c      	cmp	ip, r1
 80076a4:	bf38      	it	cc
 80076a6:	2200      	movcc	r2, #0
 80076a8:	441a      	add	r2, r3
 80076aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076ae:	b17b      	cbz	r3, 80076d0 <__mdiff+0x104>
 80076b0:	6106      	str	r6, [r0, #16]
 80076b2:	e7a5      	b.n	8007600 <__mdiff+0x34>
 80076b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80076b8:	fa17 f488 	uxtah	r4, r7, r8
 80076bc:	1422      	asrs	r2, r4, #16
 80076be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80076c2:	b2a4      	uxth	r4, r4
 80076c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80076c8:	f84e 4b04 	str.w	r4, [lr], #4
 80076cc:	1417      	asrs	r7, r2, #16
 80076ce:	e7e0      	b.n	8007692 <__mdiff+0xc6>
 80076d0:	3e01      	subs	r6, #1
 80076d2:	e7ea      	b.n	80076aa <__mdiff+0xde>
 80076d4:	08008cbf 	.word	0x08008cbf
 80076d8:	08008cd0 	.word	0x08008cd0

080076dc <__d2b>:
 80076dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076e0:	2101      	movs	r1, #1
 80076e2:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 80076e6:	4690      	mov	r8, r2
 80076e8:	4699      	mov	r9, r3
 80076ea:	f7ff fcd5 	bl	8007098 <_Balloc>
 80076ee:	4604      	mov	r4, r0
 80076f0:	b930      	cbnz	r0, 8007700 <__d2b+0x24>
 80076f2:	4602      	mov	r2, r0
 80076f4:	4b24      	ldr	r3, [pc, #144]	; (8007788 <__d2b+0xac>)
 80076f6:	4825      	ldr	r0, [pc, #148]	; (800778c <__d2b+0xb0>)
 80076f8:	f240 310a 	movw	r1, #778	; 0x30a
 80076fc:	f000 fa6e 	bl	8007bdc <__assert_func>
 8007700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007708:	bb2d      	cbnz	r5, 8007756 <__d2b+0x7a>
 800770a:	f1b8 0200 	subs.w	r2, r8, #0
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	d026      	beq.n	8007760 <__d2b+0x84>
 8007712:	4668      	mov	r0, sp
 8007714:	9200      	str	r2, [sp, #0]
 8007716:	f7ff fd8b 	bl	8007230 <__lo0bits>
 800771a:	9900      	ldr	r1, [sp, #0]
 800771c:	b1f0      	cbz	r0, 800775c <__d2b+0x80>
 800771e:	9a01      	ldr	r2, [sp, #4]
 8007720:	f1c0 0320 	rsb	r3, r0, #32
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	430b      	orrs	r3, r1
 800772a:	40c2      	lsrs	r2, r0
 800772c:	6163      	str	r3, [r4, #20]
 800772e:	9201      	str	r2, [sp, #4]
 8007730:	9b01      	ldr	r3, [sp, #4]
 8007732:	61a3      	str	r3, [r4, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	bf14      	ite	ne
 8007738:	2202      	movne	r2, #2
 800773a:	2201      	moveq	r2, #1
 800773c:	6122      	str	r2, [r4, #16]
 800773e:	b1c5      	cbz	r5, 8007772 <__d2b+0x96>
 8007740:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007744:	4405      	add	r5, r0
 8007746:	603d      	str	r5, [r7, #0]
 8007748:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800774c:	6030      	str	r0, [r6, #0]
 800774e:	4620      	mov	r0, r4
 8007750:	b003      	add	sp, #12
 8007752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800775a:	e7d6      	b.n	800770a <__d2b+0x2e>
 800775c:	6161      	str	r1, [r4, #20]
 800775e:	e7e7      	b.n	8007730 <__d2b+0x54>
 8007760:	a801      	add	r0, sp, #4
 8007762:	f7ff fd65 	bl	8007230 <__lo0bits>
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	6163      	str	r3, [r4, #20]
 800776a:	2201      	movs	r2, #1
 800776c:	6122      	str	r2, [r4, #16]
 800776e:	3020      	adds	r0, #32
 8007770:	e7e5      	b.n	800773e <__d2b+0x62>
 8007772:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007776:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800777a:	6038      	str	r0, [r7, #0]
 800777c:	6918      	ldr	r0, [r3, #16]
 800777e:	f7ff fd37 	bl	80071f0 <__hi0bits>
 8007782:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007786:	e7e1      	b.n	800774c <__d2b+0x70>
 8007788:	08008cbf 	.word	0x08008cbf
 800778c:	08008cd0 	.word	0x08008cd0

08007790 <_calloc_r>:
 8007790:	b513      	push	{r0, r1, r4, lr}
 8007792:	434a      	muls	r2, r1
 8007794:	4611      	mov	r1, r2
 8007796:	9201      	str	r2, [sp, #4]
 8007798:	f000 f85a 	bl	8007850 <_malloc_r>
 800779c:	4604      	mov	r4, r0
 800779e:	b118      	cbz	r0, 80077a8 <_calloc_r+0x18>
 80077a0:	9a01      	ldr	r2, [sp, #4]
 80077a2:	2100      	movs	r1, #0
 80077a4:	f7fe f960 	bl	8005a68 <memset>
 80077a8:	4620      	mov	r0, r4
 80077aa:	b002      	add	sp, #8
 80077ac:	bd10      	pop	{r4, pc}
	...

080077b0 <_free_r>:
 80077b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077b2:	2900      	cmp	r1, #0
 80077b4:	d048      	beq.n	8007848 <_free_r+0x98>
 80077b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ba:	9001      	str	r0, [sp, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f1a1 0404 	sub.w	r4, r1, #4
 80077c2:	bfb8      	it	lt
 80077c4:	18e4      	addlt	r4, r4, r3
 80077c6:	f000 fa65 	bl	8007c94 <__malloc_lock>
 80077ca:	4a20      	ldr	r2, [pc, #128]	; (800784c <_free_r+0x9c>)
 80077cc:	9801      	ldr	r0, [sp, #4]
 80077ce:	6813      	ldr	r3, [r2, #0]
 80077d0:	4615      	mov	r5, r2
 80077d2:	b933      	cbnz	r3, 80077e2 <_free_r+0x32>
 80077d4:	6063      	str	r3, [r4, #4]
 80077d6:	6014      	str	r4, [r2, #0]
 80077d8:	b003      	add	sp, #12
 80077da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077de:	f000 ba5f 	b.w	8007ca0 <__malloc_unlock>
 80077e2:	42a3      	cmp	r3, r4
 80077e4:	d90b      	bls.n	80077fe <_free_r+0x4e>
 80077e6:	6821      	ldr	r1, [r4, #0]
 80077e8:	1862      	adds	r2, r4, r1
 80077ea:	4293      	cmp	r3, r2
 80077ec:	bf04      	itt	eq
 80077ee:	681a      	ldreq	r2, [r3, #0]
 80077f0:	685b      	ldreq	r3, [r3, #4]
 80077f2:	6063      	str	r3, [r4, #4]
 80077f4:	bf04      	itt	eq
 80077f6:	1852      	addeq	r2, r2, r1
 80077f8:	6022      	streq	r2, [r4, #0]
 80077fa:	602c      	str	r4, [r5, #0]
 80077fc:	e7ec      	b.n	80077d8 <_free_r+0x28>
 80077fe:	461a      	mov	r2, r3
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	b10b      	cbz	r3, 8007808 <_free_r+0x58>
 8007804:	42a3      	cmp	r3, r4
 8007806:	d9fa      	bls.n	80077fe <_free_r+0x4e>
 8007808:	6811      	ldr	r1, [r2, #0]
 800780a:	1855      	adds	r5, r2, r1
 800780c:	42a5      	cmp	r5, r4
 800780e:	d10b      	bne.n	8007828 <_free_r+0x78>
 8007810:	6824      	ldr	r4, [r4, #0]
 8007812:	4421      	add	r1, r4
 8007814:	1854      	adds	r4, r2, r1
 8007816:	42a3      	cmp	r3, r4
 8007818:	6011      	str	r1, [r2, #0]
 800781a:	d1dd      	bne.n	80077d8 <_free_r+0x28>
 800781c:	681c      	ldr	r4, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	6053      	str	r3, [r2, #4]
 8007822:	4421      	add	r1, r4
 8007824:	6011      	str	r1, [r2, #0]
 8007826:	e7d7      	b.n	80077d8 <_free_r+0x28>
 8007828:	d902      	bls.n	8007830 <_free_r+0x80>
 800782a:	230c      	movs	r3, #12
 800782c:	6003      	str	r3, [r0, #0]
 800782e:	e7d3      	b.n	80077d8 <_free_r+0x28>
 8007830:	6825      	ldr	r5, [r4, #0]
 8007832:	1961      	adds	r1, r4, r5
 8007834:	428b      	cmp	r3, r1
 8007836:	bf04      	itt	eq
 8007838:	6819      	ldreq	r1, [r3, #0]
 800783a:	685b      	ldreq	r3, [r3, #4]
 800783c:	6063      	str	r3, [r4, #4]
 800783e:	bf04      	itt	eq
 8007840:	1949      	addeq	r1, r1, r5
 8007842:	6021      	streq	r1, [r4, #0]
 8007844:	6054      	str	r4, [r2, #4]
 8007846:	e7c7      	b.n	80077d8 <_free_r+0x28>
 8007848:	b003      	add	sp, #12
 800784a:	bd30      	pop	{r4, r5, pc}
 800784c:	20012f9c 	.word	0x20012f9c

08007850 <_malloc_r>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	1ccd      	adds	r5, r1, #3
 8007854:	f025 0503 	bic.w	r5, r5, #3
 8007858:	3508      	adds	r5, #8
 800785a:	2d0c      	cmp	r5, #12
 800785c:	bf38      	it	cc
 800785e:	250c      	movcc	r5, #12
 8007860:	2d00      	cmp	r5, #0
 8007862:	4606      	mov	r6, r0
 8007864:	db01      	blt.n	800786a <_malloc_r+0x1a>
 8007866:	42a9      	cmp	r1, r5
 8007868:	d903      	bls.n	8007872 <_malloc_r+0x22>
 800786a:	230c      	movs	r3, #12
 800786c:	6033      	str	r3, [r6, #0]
 800786e:	2000      	movs	r0, #0
 8007870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007872:	f000 fa0f 	bl	8007c94 <__malloc_lock>
 8007876:	4921      	ldr	r1, [pc, #132]	; (80078fc <_malloc_r+0xac>)
 8007878:	680a      	ldr	r2, [r1, #0]
 800787a:	4614      	mov	r4, r2
 800787c:	b99c      	cbnz	r4, 80078a6 <_malloc_r+0x56>
 800787e:	4f20      	ldr	r7, [pc, #128]	; (8007900 <_malloc_r+0xb0>)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	b923      	cbnz	r3, 800788e <_malloc_r+0x3e>
 8007884:	4621      	mov	r1, r4
 8007886:	4630      	mov	r0, r6
 8007888:	f000 f998 	bl	8007bbc <_sbrk_r>
 800788c:	6038      	str	r0, [r7, #0]
 800788e:	4629      	mov	r1, r5
 8007890:	4630      	mov	r0, r6
 8007892:	f000 f993 	bl	8007bbc <_sbrk_r>
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	d123      	bne.n	80078e2 <_malloc_r+0x92>
 800789a:	230c      	movs	r3, #12
 800789c:	6033      	str	r3, [r6, #0]
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 f9fe 	bl	8007ca0 <__malloc_unlock>
 80078a4:	e7e3      	b.n	800786e <_malloc_r+0x1e>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	1b5b      	subs	r3, r3, r5
 80078aa:	d417      	bmi.n	80078dc <_malloc_r+0x8c>
 80078ac:	2b0b      	cmp	r3, #11
 80078ae:	d903      	bls.n	80078b8 <_malloc_r+0x68>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	441c      	add	r4, r3
 80078b4:	6025      	str	r5, [r4, #0]
 80078b6:	e004      	b.n	80078c2 <_malloc_r+0x72>
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	42a2      	cmp	r2, r4
 80078bc:	bf0c      	ite	eq
 80078be:	600b      	streq	r3, [r1, #0]
 80078c0:	6053      	strne	r3, [r2, #4]
 80078c2:	4630      	mov	r0, r6
 80078c4:	f000 f9ec 	bl	8007ca0 <__malloc_unlock>
 80078c8:	f104 000b 	add.w	r0, r4, #11
 80078cc:	1d23      	adds	r3, r4, #4
 80078ce:	f020 0007 	bic.w	r0, r0, #7
 80078d2:	1ac2      	subs	r2, r0, r3
 80078d4:	d0cc      	beq.n	8007870 <_malloc_r+0x20>
 80078d6:	1a1b      	subs	r3, r3, r0
 80078d8:	50a3      	str	r3, [r4, r2]
 80078da:	e7c9      	b.n	8007870 <_malloc_r+0x20>
 80078dc:	4622      	mov	r2, r4
 80078de:	6864      	ldr	r4, [r4, #4]
 80078e0:	e7cc      	b.n	800787c <_malloc_r+0x2c>
 80078e2:	1cc4      	adds	r4, r0, #3
 80078e4:	f024 0403 	bic.w	r4, r4, #3
 80078e8:	42a0      	cmp	r0, r4
 80078ea:	d0e3      	beq.n	80078b4 <_malloc_r+0x64>
 80078ec:	1a21      	subs	r1, r4, r0
 80078ee:	4630      	mov	r0, r6
 80078f0:	f000 f964 	bl	8007bbc <_sbrk_r>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1dd      	bne.n	80078b4 <_malloc_r+0x64>
 80078f8:	e7cf      	b.n	800789a <_malloc_r+0x4a>
 80078fa:	bf00      	nop
 80078fc:	20012f9c 	.word	0x20012f9c
 8007900:	20012fa0 	.word	0x20012fa0

08007904 <__ssputs_r>:
 8007904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007908:	688e      	ldr	r6, [r1, #8]
 800790a:	429e      	cmp	r6, r3
 800790c:	4682      	mov	sl, r0
 800790e:	460c      	mov	r4, r1
 8007910:	4690      	mov	r8, r2
 8007912:	461f      	mov	r7, r3
 8007914:	d838      	bhi.n	8007988 <__ssputs_r+0x84>
 8007916:	898a      	ldrh	r2, [r1, #12]
 8007918:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800791c:	d032      	beq.n	8007984 <__ssputs_r+0x80>
 800791e:	6825      	ldr	r5, [r4, #0]
 8007920:	6909      	ldr	r1, [r1, #16]
 8007922:	eba5 0901 	sub.w	r9, r5, r1
 8007926:	6965      	ldr	r5, [r4, #20]
 8007928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800792c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007930:	3301      	adds	r3, #1
 8007932:	444b      	add	r3, r9
 8007934:	106d      	asrs	r5, r5, #1
 8007936:	429d      	cmp	r5, r3
 8007938:	bf38      	it	cc
 800793a:	461d      	movcc	r5, r3
 800793c:	0553      	lsls	r3, r2, #21
 800793e:	d531      	bpl.n	80079a4 <__ssputs_r+0xa0>
 8007940:	4629      	mov	r1, r5
 8007942:	f7ff ff85 	bl	8007850 <_malloc_r>
 8007946:	4606      	mov	r6, r0
 8007948:	b950      	cbnz	r0, 8007960 <__ssputs_r+0x5c>
 800794a:	230c      	movs	r3, #12
 800794c:	f8ca 3000 	str.w	r3, [sl]
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007960:	6921      	ldr	r1, [r4, #16]
 8007962:	464a      	mov	r2, r9
 8007964:	f7fe f872 	bl	8005a4c <memcpy>
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800796e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	6126      	str	r6, [r4, #16]
 8007976:	6165      	str	r5, [r4, #20]
 8007978:	444e      	add	r6, r9
 800797a:	eba5 0509 	sub.w	r5, r5, r9
 800797e:	6026      	str	r6, [r4, #0]
 8007980:	60a5      	str	r5, [r4, #8]
 8007982:	463e      	mov	r6, r7
 8007984:	42be      	cmp	r6, r7
 8007986:	d900      	bls.n	800798a <__ssputs_r+0x86>
 8007988:	463e      	mov	r6, r7
 800798a:	4632      	mov	r2, r6
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	4641      	mov	r1, r8
 8007990:	f000 f966 	bl	8007c60 <memmove>
 8007994:	68a3      	ldr	r3, [r4, #8]
 8007996:	6822      	ldr	r2, [r4, #0]
 8007998:	1b9b      	subs	r3, r3, r6
 800799a:	4432      	add	r2, r6
 800799c:	60a3      	str	r3, [r4, #8]
 800799e:	6022      	str	r2, [r4, #0]
 80079a0:	2000      	movs	r0, #0
 80079a2:	e7db      	b.n	800795c <__ssputs_r+0x58>
 80079a4:	462a      	mov	r2, r5
 80079a6:	f000 f981 	bl	8007cac <_realloc_r>
 80079aa:	4606      	mov	r6, r0
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d1e1      	bne.n	8007974 <__ssputs_r+0x70>
 80079b0:	6921      	ldr	r1, [r4, #16]
 80079b2:	4650      	mov	r0, sl
 80079b4:	f7ff fefc 	bl	80077b0 <_free_r>
 80079b8:	e7c7      	b.n	800794a <__ssputs_r+0x46>
	...

080079bc <_svfiprintf_r>:
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	4698      	mov	r8, r3
 80079c2:	898b      	ldrh	r3, [r1, #12]
 80079c4:	061b      	lsls	r3, r3, #24
 80079c6:	b09d      	sub	sp, #116	; 0x74
 80079c8:	4607      	mov	r7, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	4614      	mov	r4, r2
 80079ce:	d50e      	bpl.n	80079ee <_svfiprintf_r+0x32>
 80079d0:	690b      	ldr	r3, [r1, #16]
 80079d2:	b963      	cbnz	r3, 80079ee <_svfiprintf_r+0x32>
 80079d4:	2140      	movs	r1, #64	; 0x40
 80079d6:	f7ff ff3b 	bl	8007850 <_malloc_r>
 80079da:	6028      	str	r0, [r5, #0]
 80079dc:	6128      	str	r0, [r5, #16]
 80079de:	b920      	cbnz	r0, 80079ea <_svfiprintf_r+0x2e>
 80079e0:	230c      	movs	r3, #12
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079e8:	e0d1      	b.n	8007b8e <_svfiprintf_r+0x1d2>
 80079ea:	2340      	movs	r3, #64	; 0x40
 80079ec:	616b      	str	r3, [r5, #20]
 80079ee:	2300      	movs	r3, #0
 80079f0:	9309      	str	r3, [sp, #36]	; 0x24
 80079f2:	2320      	movs	r3, #32
 80079f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80079fc:	2330      	movs	r3, #48	; 0x30
 80079fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ba8 <_svfiprintf_r+0x1ec>
 8007a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a06:	f04f 0901 	mov.w	r9, #1
 8007a0a:	4623      	mov	r3, r4
 8007a0c:	469a      	mov	sl, r3
 8007a0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a12:	b10a      	cbz	r2, 8007a18 <_svfiprintf_r+0x5c>
 8007a14:	2a25      	cmp	r2, #37	; 0x25
 8007a16:	d1f9      	bne.n	8007a0c <_svfiprintf_r+0x50>
 8007a18:	ebba 0b04 	subs.w	fp, sl, r4
 8007a1c:	d00b      	beq.n	8007a36 <_svfiprintf_r+0x7a>
 8007a1e:	465b      	mov	r3, fp
 8007a20:	4622      	mov	r2, r4
 8007a22:	4629      	mov	r1, r5
 8007a24:	4638      	mov	r0, r7
 8007a26:	f7ff ff6d 	bl	8007904 <__ssputs_r>
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	f000 80aa 	beq.w	8007b84 <_svfiprintf_r+0x1c8>
 8007a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a32:	445a      	add	r2, fp
 8007a34:	9209      	str	r2, [sp, #36]	; 0x24
 8007a36:	f89a 3000 	ldrb.w	r3, [sl]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 80a2 	beq.w	8007b84 <_svfiprintf_r+0x1c8>
 8007a40:	2300      	movs	r3, #0
 8007a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a4a:	f10a 0a01 	add.w	sl, sl, #1
 8007a4e:	9304      	str	r3, [sp, #16]
 8007a50:	9307      	str	r3, [sp, #28]
 8007a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a56:	931a      	str	r3, [sp, #104]	; 0x68
 8007a58:	4654      	mov	r4, sl
 8007a5a:	2205      	movs	r2, #5
 8007a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a60:	4851      	ldr	r0, [pc, #324]	; (8007ba8 <_svfiprintf_r+0x1ec>)
 8007a62:	f7f8 fbcd 	bl	8000200 <memchr>
 8007a66:	9a04      	ldr	r2, [sp, #16]
 8007a68:	b9d8      	cbnz	r0, 8007aa2 <_svfiprintf_r+0xe6>
 8007a6a:	06d0      	lsls	r0, r2, #27
 8007a6c:	bf44      	itt	mi
 8007a6e:	2320      	movmi	r3, #32
 8007a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a74:	0711      	lsls	r1, r2, #28
 8007a76:	bf44      	itt	mi
 8007a78:	232b      	movmi	r3, #43	; 0x2b
 8007a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a82:	2b2a      	cmp	r3, #42	; 0x2a
 8007a84:	d015      	beq.n	8007ab2 <_svfiprintf_r+0xf6>
 8007a86:	9a07      	ldr	r2, [sp, #28]
 8007a88:	4654      	mov	r4, sl
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	f04f 0c0a 	mov.w	ip, #10
 8007a90:	4621      	mov	r1, r4
 8007a92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a96:	3b30      	subs	r3, #48	; 0x30
 8007a98:	2b09      	cmp	r3, #9
 8007a9a:	d94e      	bls.n	8007b3a <_svfiprintf_r+0x17e>
 8007a9c:	b1b0      	cbz	r0, 8007acc <_svfiprintf_r+0x110>
 8007a9e:	9207      	str	r2, [sp, #28]
 8007aa0:	e014      	b.n	8007acc <_svfiprintf_r+0x110>
 8007aa2:	eba0 0308 	sub.w	r3, r0, r8
 8007aa6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	46a2      	mov	sl, r4
 8007ab0:	e7d2      	b.n	8007a58 <_svfiprintf_r+0x9c>
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	1d19      	adds	r1, r3, #4
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	9103      	str	r1, [sp, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bfbb      	ittet	lt
 8007abe:	425b      	neglt	r3, r3
 8007ac0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac4:	9307      	strge	r3, [sp, #28]
 8007ac6:	9307      	strlt	r3, [sp, #28]
 8007ac8:	bfb8      	it	lt
 8007aca:	9204      	strlt	r2, [sp, #16]
 8007acc:	7823      	ldrb	r3, [r4, #0]
 8007ace:	2b2e      	cmp	r3, #46	; 0x2e
 8007ad0:	d10c      	bne.n	8007aec <_svfiprintf_r+0x130>
 8007ad2:	7863      	ldrb	r3, [r4, #1]
 8007ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad6:	d135      	bne.n	8007b44 <_svfiprintf_r+0x188>
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	1d1a      	adds	r2, r3, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	9203      	str	r2, [sp, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bfb8      	it	lt
 8007ae4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ae8:	3402      	adds	r4, #2
 8007aea:	9305      	str	r3, [sp, #20]
 8007aec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bb8 <_svfiprintf_r+0x1fc>
 8007af0:	7821      	ldrb	r1, [r4, #0]
 8007af2:	2203      	movs	r2, #3
 8007af4:	4650      	mov	r0, sl
 8007af6:	f7f8 fb83 	bl	8000200 <memchr>
 8007afa:	b140      	cbz	r0, 8007b0e <_svfiprintf_r+0x152>
 8007afc:	2340      	movs	r3, #64	; 0x40
 8007afe:	eba0 000a 	sub.w	r0, r0, sl
 8007b02:	fa03 f000 	lsl.w	r0, r3, r0
 8007b06:	9b04      	ldr	r3, [sp, #16]
 8007b08:	4303      	orrs	r3, r0
 8007b0a:	3401      	adds	r4, #1
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b12:	4826      	ldr	r0, [pc, #152]	; (8007bac <_svfiprintf_r+0x1f0>)
 8007b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b18:	2206      	movs	r2, #6
 8007b1a:	f7f8 fb71 	bl	8000200 <memchr>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d038      	beq.n	8007b94 <_svfiprintf_r+0x1d8>
 8007b22:	4b23      	ldr	r3, [pc, #140]	; (8007bb0 <_svfiprintf_r+0x1f4>)
 8007b24:	bb1b      	cbnz	r3, 8007b6e <_svfiprintf_r+0x1b2>
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	3307      	adds	r3, #7
 8007b2a:	f023 0307 	bic.w	r3, r3, #7
 8007b2e:	3308      	adds	r3, #8
 8007b30:	9303      	str	r3, [sp, #12]
 8007b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b34:	4433      	add	r3, r6
 8007b36:	9309      	str	r3, [sp, #36]	; 0x24
 8007b38:	e767      	b.n	8007a0a <_svfiprintf_r+0x4e>
 8007b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b3e:	460c      	mov	r4, r1
 8007b40:	2001      	movs	r0, #1
 8007b42:	e7a5      	b.n	8007a90 <_svfiprintf_r+0xd4>
 8007b44:	2300      	movs	r3, #0
 8007b46:	3401      	adds	r4, #1
 8007b48:	9305      	str	r3, [sp, #20]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	f04f 0c0a 	mov.w	ip, #10
 8007b50:	4620      	mov	r0, r4
 8007b52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b56:	3a30      	subs	r2, #48	; 0x30
 8007b58:	2a09      	cmp	r2, #9
 8007b5a:	d903      	bls.n	8007b64 <_svfiprintf_r+0x1a8>
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0c5      	beq.n	8007aec <_svfiprintf_r+0x130>
 8007b60:	9105      	str	r1, [sp, #20]
 8007b62:	e7c3      	b.n	8007aec <_svfiprintf_r+0x130>
 8007b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b68:	4604      	mov	r4, r0
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e7f0      	b.n	8007b50 <_svfiprintf_r+0x194>
 8007b6e:	ab03      	add	r3, sp, #12
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	462a      	mov	r2, r5
 8007b74:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <_svfiprintf_r+0x1f8>)
 8007b76:	a904      	add	r1, sp, #16
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7fe f81d 	bl	8005bb8 <_printf_float>
 8007b7e:	1c42      	adds	r2, r0, #1
 8007b80:	4606      	mov	r6, r0
 8007b82:	d1d6      	bne.n	8007b32 <_svfiprintf_r+0x176>
 8007b84:	89ab      	ldrh	r3, [r5, #12]
 8007b86:	065b      	lsls	r3, r3, #25
 8007b88:	f53f af2c 	bmi.w	80079e4 <_svfiprintf_r+0x28>
 8007b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b8e:	b01d      	add	sp, #116	; 0x74
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	ab03      	add	r3, sp, #12
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <_svfiprintf_r+0x1f8>)
 8007b9c:	a904      	add	r1, sp, #16
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	f7fe fab0 	bl	8006104 <_printf_i>
 8007ba4:	e7eb      	b.n	8007b7e <_svfiprintf_r+0x1c2>
 8007ba6:	bf00      	nop
 8007ba8:	08008e2c 	.word	0x08008e2c
 8007bac:	08008e36 	.word	0x08008e36
 8007bb0:	08005bb9 	.word	0x08005bb9
 8007bb4:	08007905 	.word	0x08007905
 8007bb8:	08008e32 	.word	0x08008e32

08007bbc <_sbrk_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4d06      	ldr	r5, [pc, #24]	; (8007bd8 <_sbrk_r+0x1c>)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	f7fd feb6 	bl	8005938 <_sbrk>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_sbrk_r+0x1a>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_sbrk_r+0x1a>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	20013248 	.word	0x20013248

08007bdc <__assert_func>:
 8007bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bde:	4614      	mov	r4, r2
 8007be0:	461a      	mov	r2, r3
 8007be2:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <__assert_func+0x2c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4605      	mov	r5, r0
 8007be8:	68d8      	ldr	r0, [r3, #12]
 8007bea:	b14c      	cbz	r4, 8007c00 <__assert_func+0x24>
 8007bec:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <__assert_func+0x30>)
 8007bee:	9100      	str	r1, [sp, #0]
 8007bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bf4:	4906      	ldr	r1, [pc, #24]	; (8007c10 <__assert_func+0x34>)
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	f000 f80e 	bl	8007c18 <fiprintf>
 8007bfc:	f000 faa4 	bl	8008148 <abort>
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <__assert_func+0x38>)
 8007c02:	461c      	mov	r4, r3
 8007c04:	e7f3      	b.n	8007bee <__assert_func+0x12>
 8007c06:	bf00      	nop
 8007c08:	20000034 	.word	0x20000034
 8007c0c:	08008e3d 	.word	0x08008e3d
 8007c10:	08008e4a 	.word	0x08008e4a
 8007c14:	08008e78 	.word	0x08008e78

08007c18 <fiprintf>:
 8007c18:	b40e      	push	{r1, r2, r3}
 8007c1a:	b503      	push	{r0, r1, lr}
 8007c1c:	4601      	mov	r1, r0
 8007c1e:	ab03      	add	r3, sp, #12
 8007c20:	4805      	ldr	r0, [pc, #20]	; (8007c38 <fiprintf+0x20>)
 8007c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	f000 f88f 	bl	8007d4c <_vfiprintf_r>
 8007c2e:	b002      	add	sp, #8
 8007c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c34:	b003      	add	sp, #12
 8007c36:	4770      	bx	lr
 8007c38:	20000034 	.word	0x20000034

08007c3c <__ascii_mbtowc>:
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	b901      	cbnz	r1, 8007c42 <__ascii_mbtowc+0x6>
 8007c40:	a901      	add	r1, sp, #4
 8007c42:	b142      	cbz	r2, 8007c56 <__ascii_mbtowc+0x1a>
 8007c44:	b14b      	cbz	r3, 8007c5a <__ascii_mbtowc+0x1e>
 8007c46:	7813      	ldrb	r3, [r2, #0]
 8007c48:	600b      	str	r3, [r1, #0]
 8007c4a:	7812      	ldrb	r2, [r2, #0]
 8007c4c:	1e10      	subs	r0, r2, #0
 8007c4e:	bf18      	it	ne
 8007c50:	2001      	movne	r0, #1
 8007c52:	b002      	add	sp, #8
 8007c54:	4770      	bx	lr
 8007c56:	4610      	mov	r0, r2
 8007c58:	e7fb      	b.n	8007c52 <__ascii_mbtowc+0x16>
 8007c5a:	f06f 0001 	mvn.w	r0, #1
 8007c5e:	e7f8      	b.n	8007c52 <__ascii_mbtowc+0x16>

08007c60 <memmove>:
 8007c60:	4288      	cmp	r0, r1
 8007c62:	b510      	push	{r4, lr}
 8007c64:	eb01 0402 	add.w	r4, r1, r2
 8007c68:	d902      	bls.n	8007c70 <memmove+0x10>
 8007c6a:	4284      	cmp	r4, r0
 8007c6c:	4623      	mov	r3, r4
 8007c6e:	d807      	bhi.n	8007c80 <memmove+0x20>
 8007c70:	1e43      	subs	r3, r0, #1
 8007c72:	42a1      	cmp	r1, r4
 8007c74:	d008      	beq.n	8007c88 <memmove+0x28>
 8007c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c7e:	e7f8      	b.n	8007c72 <memmove+0x12>
 8007c80:	4402      	add	r2, r0
 8007c82:	4601      	mov	r1, r0
 8007c84:	428a      	cmp	r2, r1
 8007c86:	d100      	bne.n	8007c8a <memmove+0x2a>
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c92:	e7f7      	b.n	8007c84 <memmove+0x24>

08007c94 <__malloc_lock>:
 8007c94:	4801      	ldr	r0, [pc, #4]	; (8007c9c <__malloc_lock+0x8>)
 8007c96:	f000 bc17 	b.w	80084c8 <__retarget_lock_acquire_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	20013250 	.word	0x20013250

08007ca0 <__malloc_unlock>:
 8007ca0:	4801      	ldr	r0, [pc, #4]	; (8007ca8 <__malloc_unlock+0x8>)
 8007ca2:	f000 bc12 	b.w	80084ca <__retarget_lock_release_recursive>
 8007ca6:	bf00      	nop
 8007ca8:	20013250 	.word	0x20013250

08007cac <_realloc_r>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	4607      	mov	r7, r0
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	460e      	mov	r6, r1
 8007cb4:	b921      	cbnz	r1, 8007cc0 <_realloc_r+0x14>
 8007cb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cba:	4611      	mov	r1, r2
 8007cbc:	f7ff bdc8 	b.w	8007850 <_malloc_r>
 8007cc0:	b922      	cbnz	r2, 8007ccc <_realloc_r+0x20>
 8007cc2:	f7ff fd75 	bl	80077b0 <_free_r>
 8007cc6:	4625      	mov	r5, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ccc:	f000 fc62 	bl	8008594 <_malloc_usable_size_r>
 8007cd0:	42a0      	cmp	r0, r4
 8007cd2:	d20f      	bcs.n	8007cf4 <_realloc_r+0x48>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f7ff fdba 	bl	8007850 <_malloc_r>
 8007cdc:	4605      	mov	r5, r0
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d0f2      	beq.n	8007cc8 <_realloc_r+0x1c>
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	f7fd feb1 	bl	8005a4c <memcpy>
 8007cea:	4631      	mov	r1, r6
 8007cec:	4638      	mov	r0, r7
 8007cee:	f7ff fd5f 	bl	80077b0 <_free_r>
 8007cf2:	e7e9      	b.n	8007cc8 <_realloc_r+0x1c>
 8007cf4:	4635      	mov	r5, r6
 8007cf6:	e7e7      	b.n	8007cc8 <_realloc_r+0x1c>

08007cf8 <__sfputc_r>:
 8007cf8:	6893      	ldr	r3, [r2, #8]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	b410      	push	{r4}
 8007d00:	6093      	str	r3, [r2, #8]
 8007d02:	da08      	bge.n	8007d16 <__sfputc_r+0x1e>
 8007d04:	6994      	ldr	r4, [r2, #24]
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	db01      	blt.n	8007d0e <__sfputc_r+0x16>
 8007d0a:	290a      	cmp	r1, #10
 8007d0c:	d103      	bne.n	8007d16 <__sfputc_r+0x1e>
 8007d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d12:	f000 b94b 	b.w	8007fac <__swbuf_r>
 8007d16:	6813      	ldr	r3, [r2, #0]
 8007d18:	1c58      	adds	r0, r3, #1
 8007d1a:	6010      	str	r0, [r2, #0]
 8007d1c:	7019      	strb	r1, [r3, #0]
 8007d1e:	4608      	mov	r0, r1
 8007d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <__sfputs_r>:
 8007d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d28:	4606      	mov	r6, r0
 8007d2a:	460f      	mov	r7, r1
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	18d5      	adds	r5, r2, r3
 8007d30:	42ac      	cmp	r4, r5
 8007d32:	d101      	bne.n	8007d38 <__sfputs_r+0x12>
 8007d34:	2000      	movs	r0, #0
 8007d36:	e007      	b.n	8007d48 <__sfputs_r+0x22>
 8007d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3c:	463a      	mov	r2, r7
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ffda 	bl	8007cf8 <__sfputc_r>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d1f3      	bne.n	8007d30 <__sfputs_r+0xa>
 8007d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d4c <_vfiprintf_r>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	460d      	mov	r5, r1
 8007d52:	b09d      	sub	sp, #116	; 0x74
 8007d54:	4614      	mov	r4, r2
 8007d56:	4698      	mov	r8, r3
 8007d58:	4606      	mov	r6, r0
 8007d5a:	b118      	cbz	r0, 8007d64 <_vfiprintf_r+0x18>
 8007d5c:	6983      	ldr	r3, [r0, #24]
 8007d5e:	b90b      	cbnz	r3, 8007d64 <_vfiprintf_r+0x18>
 8007d60:	f000 fb14 	bl	800838c <__sinit>
 8007d64:	4b89      	ldr	r3, [pc, #548]	; (8007f8c <_vfiprintf_r+0x240>)
 8007d66:	429d      	cmp	r5, r3
 8007d68:	d11b      	bne.n	8007da2 <_vfiprintf_r+0x56>
 8007d6a:	6875      	ldr	r5, [r6, #4]
 8007d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d6e:	07d9      	lsls	r1, r3, #31
 8007d70:	d405      	bmi.n	8007d7e <_vfiprintf_r+0x32>
 8007d72:	89ab      	ldrh	r3, [r5, #12]
 8007d74:	059a      	lsls	r2, r3, #22
 8007d76:	d402      	bmi.n	8007d7e <_vfiprintf_r+0x32>
 8007d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d7a:	f000 fba5 	bl	80084c8 <__retarget_lock_acquire_recursive>
 8007d7e:	89ab      	ldrh	r3, [r5, #12]
 8007d80:	071b      	lsls	r3, r3, #28
 8007d82:	d501      	bpl.n	8007d88 <_vfiprintf_r+0x3c>
 8007d84:	692b      	ldr	r3, [r5, #16]
 8007d86:	b9eb      	cbnz	r3, 8007dc4 <_vfiprintf_r+0x78>
 8007d88:	4629      	mov	r1, r5
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f000 f96e 	bl	800806c <__swsetup_r>
 8007d90:	b1c0      	cbz	r0, 8007dc4 <_vfiprintf_r+0x78>
 8007d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d94:	07dc      	lsls	r4, r3, #31
 8007d96:	d50e      	bpl.n	8007db6 <_vfiprintf_r+0x6a>
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d9c:	b01d      	add	sp, #116	; 0x74
 8007d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da2:	4b7b      	ldr	r3, [pc, #492]	; (8007f90 <_vfiprintf_r+0x244>)
 8007da4:	429d      	cmp	r5, r3
 8007da6:	d101      	bne.n	8007dac <_vfiprintf_r+0x60>
 8007da8:	68b5      	ldr	r5, [r6, #8]
 8007daa:	e7df      	b.n	8007d6c <_vfiprintf_r+0x20>
 8007dac:	4b79      	ldr	r3, [pc, #484]	; (8007f94 <_vfiprintf_r+0x248>)
 8007dae:	429d      	cmp	r5, r3
 8007db0:	bf08      	it	eq
 8007db2:	68f5      	ldreq	r5, [r6, #12]
 8007db4:	e7da      	b.n	8007d6c <_vfiprintf_r+0x20>
 8007db6:	89ab      	ldrh	r3, [r5, #12]
 8007db8:	0598      	lsls	r0, r3, #22
 8007dba:	d4ed      	bmi.n	8007d98 <_vfiprintf_r+0x4c>
 8007dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dbe:	f000 fb84 	bl	80084ca <__retarget_lock_release_recursive>
 8007dc2:	e7e9      	b.n	8007d98 <_vfiprintf_r+0x4c>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc8:	2320      	movs	r3, #32
 8007dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd2:	2330      	movs	r3, #48	; 0x30
 8007dd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f98 <_vfiprintf_r+0x24c>
 8007dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ddc:	f04f 0901 	mov.w	r9, #1
 8007de0:	4623      	mov	r3, r4
 8007de2:	469a      	mov	sl, r3
 8007de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de8:	b10a      	cbz	r2, 8007dee <_vfiprintf_r+0xa2>
 8007dea:	2a25      	cmp	r2, #37	; 0x25
 8007dec:	d1f9      	bne.n	8007de2 <_vfiprintf_r+0x96>
 8007dee:	ebba 0b04 	subs.w	fp, sl, r4
 8007df2:	d00b      	beq.n	8007e0c <_vfiprintf_r+0xc0>
 8007df4:	465b      	mov	r3, fp
 8007df6:	4622      	mov	r2, r4
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ff93 	bl	8007d26 <__sfputs_r>
 8007e00:	3001      	adds	r0, #1
 8007e02:	f000 80aa 	beq.w	8007f5a <_vfiprintf_r+0x20e>
 8007e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e08:	445a      	add	r2, fp
 8007e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 80a2 	beq.w	8007f5a <_vfiprintf_r+0x20e>
 8007e16:	2300      	movs	r3, #0
 8007e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e20:	f10a 0a01 	add.w	sl, sl, #1
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	9307      	str	r3, [sp, #28]
 8007e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e2e:	4654      	mov	r4, sl
 8007e30:	2205      	movs	r2, #5
 8007e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e36:	4858      	ldr	r0, [pc, #352]	; (8007f98 <_vfiprintf_r+0x24c>)
 8007e38:	f7f8 f9e2 	bl	8000200 <memchr>
 8007e3c:	9a04      	ldr	r2, [sp, #16]
 8007e3e:	b9d8      	cbnz	r0, 8007e78 <_vfiprintf_r+0x12c>
 8007e40:	06d1      	lsls	r1, r2, #27
 8007e42:	bf44      	itt	mi
 8007e44:	2320      	movmi	r3, #32
 8007e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e4a:	0713      	lsls	r3, r2, #28
 8007e4c:	bf44      	itt	mi
 8007e4e:	232b      	movmi	r3, #43	; 0x2b
 8007e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e54:	f89a 3000 	ldrb.w	r3, [sl]
 8007e58:	2b2a      	cmp	r3, #42	; 0x2a
 8007e5a:	d015      	beq.n	8007e88 <_vfiprintf_r+0x13c>
 8007e5c:	9a07      	ldr	r2, [sp, #28]
 8007e5e:	4654      	mov	r4, sl
 8007e60:	2000      	movs	r0, #0
 8007e62:	f04f 0c0a 	mov.w	ip, #10
 8007e66:	4621      	mov	r1, r4
 8007e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e6c:	3b30      	subs	r3, #48	; 0x30
 8007e6e:	2b09      	cmp	r3, #9
 8007e70:	d94e      	bls.n	8007f10 <_vfiprintf_r+0x1c4>
 8007e72:	b1b0      	cbz	r0, 8007ea2 <_vfiprintf_r+0x156>
 8007e74:	9207      	str	r2, [sp, #28]
 8007e76:	e014      	b.n	8007ea2 <_vfiprintf_r+0x156>
 8007e78:	eba0 0308 	sub.w	r3, r0, r8
 8007e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e80:	4313      	orrs	r3, r2
 8007e82:	9304      	str	r3, [sp, #16]
 8007e84:	46a2      	mov	sl, r4
 8007e86:	e7d2      	b.n	8007e2e <_vfiprintf_r+0xe2>
 8007e88:	9b03      	ldr	r3, [sp, #12]
 8007e8a:	1d19      	adds	r1, r3, #4
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	9103      	str	r1, [sp, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	bfbb      	ittet	lt
 8007e94:	425b      	neglt	r3, r3
 8007e96:	f042 0202 	orrlt.w	r2, r2, #2
 8007e9a:	9307      	strge	r3, [sp, #28]
 8007e9c:	9307      	strlt	r3, [sp, #28]
 8007e9e:	bfb8      	it	lt
 8007ea0:	9204      	strlt	r2, [sp, #16]
 8007ea2:	7823      	ldrb	r3, [r4, #0]
 8007ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ea6:	d10c      	bne.n	8007ec2 <_vfiprintf_r+0x176>
 8007ea8:	7863      	ldrb	r3, [r4, #1]
 8007eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8007eac:	d135      	bne.n	8007f1a <_vfiprintf_r+0x1ce>
 8007eae:	9b03      	ldr	r3, [sp, #12]
 8007eb0:	1d1a      	adds	r2, r3, #4
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	9203      	str	r2, [sp, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	bfb8      	it	lt
 8007eba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ebe:	3402      	adds	r4, #2
 8007ec0:	9305      	str	r3, [sp, #20]
 8007ec2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fa8 <_vfiprintf_r+0x25c>
 8007ec6:	7821      	ldrb	r1, [r4, #0]
 8007ec8:	2203      	movs	r2, #3
 8007eca:	4650      	mov	r0, sl
 8007ecc:	f7f8 f998 	bl	8000200 <memchr>
 8007ed0:	b140      	cbz	r0, 8007ee4 <_vfiprintf_r+0x198>
 8007ed2:	2340      	movs	r3, #64	; 0x40
 8007ed4:	eba0 000a 	sub.w	r0, r0, sl
 8007ed8:	fa03 f000 	lsl.w	r0, r3, r0
 8007edc:	9b04      	ldr	r3, [sp, #16]
 8007ede:	4303      	orrs	r3, r0
 8007ee0:	3401      	adds	r4, #1
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee8:	482c      	ldr	r0, [pc, #176]	; (8007f9c <_vfiprintf_r+0x250>)
 8007eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eee:	2206      	movs	r2, #6
 8007ef0:	f7f8 f986 	bl	8000200 <memchr>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d03f      	beq.n	8007f78 <_vfiprintf_r+0x22c>
 8007ef8:	4b29      	ldr	r3, [pc, #164]	; (8007fa0 <_vfiprintf_r+0x254>)
 8007efa:	bb1b      	cbnz	r3, 8007f44 <_vfiprintf_r+0x1f8>
 8007efc:	9b03      	ldr	r3, [sp, #12]
 8007efe:	3307      	adds	r3, #7
 8007f00:	f023 0307 	bic.w	r3, r3, #7
 8007f04:	3308      	adds	r3, #8
 8007f06:	9303      	str	r3, [sp, #12]
 8007f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0a:	443b      	add	r3, r7
 8007f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0e:	e767      	b.n	8007de0 <_vfiprintf_r+0x94>
 8007f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f14:	460c      	mov	r4, r1
 8007f16:	2001      	movs	r0, #1
 8007f18:	e7a5      	b.n	8007e66 <_vfiprintf_r+0x11a>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	3401      	adds	r4, #1
 8007f1e:	9305      	str	r3, [sp, #20]
 8007f20:	4619      	mov	r1, r3
 8007f22:	f04f 0c0a 	mov.w	ip, #10
 8007f26:	4620      	mov	r0, r4
 8007f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f2c:	3a30      	subs	r2, #48	; 0x30
 8007f2e:	2a09      	cmp	r2, #9
 8007f30:	d903      	bls.n	8007f3a <_vfiprintf_r+0x1ee>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0c5      	beq.n	8007ec2 <_vfiprintf_r+0x176>
 8007f36:	9105      	str	r1, [sp, #20]
 8007f38:	e7c3      	b.n	8007ec2 <_vfiprintf_r+0x176>
 8007f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f3e:	4604      	mov	r4, r0
 8007f40:	2301      	movs	r3, #1
 8007f42:	e7f0      	b.n	8007f26 <_vfiprintf_r+0x1da>
 8007f44:	ab03      	add	r3, sp, #12
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	462a      	mov	r2, r5
 8007f4a:	4b16      	ldr	r3, [pc, #88]	; (8007fa4 <_vfiprintf_r+0x258>)
 8007f4c:	a904      	add	r1, sp, #16
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7fd fe32 	bl	8005bb8 <_printf_float>
 8007f54:	4607      	mov	r7, r0
 8007f56:	1c78      	adds	r0, r7, #1
 8007f58:	d1d6      	bne.n	8007f08 <_vfiprintf_r+0x1bc>
 8007f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f5c:	07d9      	lsls	r1, r3, #31
 8007f5e:	d405      	bmi.n	8007f6c <_vfiprintf_r+0x220>
 8007f60:	89ab      	ldrh	r3, [r5, #12]
 8007f62:	059a      	lsls	r2, r3, #22
 8007f64:	d402      	bmi.n	8007f6c <_vfiprintf_r+0x220>
 8007f66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f68:	f000 faaf 	bl	80084ca <__retarget_lock_release_recursive>
 8007f6c:	89ab      	ldrh	r3, [r5, #12]
 8007f6e:	065b      	lsls	r3, r3, #25
 8007f70:	f53f af12 	bmi.w	8007d98 <_vfiprintf_r+0x4c>
 8007f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f76:	e711      	b.n	8007d9c <_vfiprintf_r+0x50>
 8007f78:	ab03      	add	r3, sp, #12
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <_vfiprintf_r+0x258>)
 8007f80:	a904      	add	r1, sp, #16
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7fe f8be 	bl	8006104 <_printf_i>
 8007f88:	e7e4      	b.n	8007f54 <_vfiprintf_r+0x208>
 8007f8a:	bf00      	nop
 8007f8c:	08008fa4 	.word	0x08008fa4
 8007f90:	08008fc4 	.word	0x08008fc4
 8007f94:	08008f84 	.word	0x08008f84
 8007f98:	08008e2c 	.word	0x08008e2c
 8007f9c:	08008e36 	.word	0x08008e36
 8007fa0:	08005bb9 	.word	0x08005bb9
 8007fa4:	08007d27 	.word	0x08007d27
 8007fa8:	08008e32 	.word	0x08008e32

08007fac <__swbuf_r>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	460e      	mov	r6, r1
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	b118      	cbz	r0, 8007fbe <__swbuf_r+0x12>
 8007fb6:	6983      	ldr	r3, [r0, #24]
 8007fb8:	b90b      	cbnz	r3, 8007fbe <__swbuf_r+0x12>
 8007fba:	f000 f9e7 	bl	800838c <__sinit>
 8007fbe:	4b21      	ldr	r3, [pc, #132]	; (8008044 <__swbuf_r+0x98>)
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	d12b      	bne.n	800801c <__swbuf_r+0x70>
 8007fc4:	686c      	ldr	r4, [r5, #4]
 8007fc6:	69a3      	ldr	r3, [r4, #24]
 8007fc8:	60a3      	str	r3, [r4, #8]
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	071a      	lsls	r2, r3, #28
 8007fce:	d52f      	bpl.n	8008030 <__swbuf_r+0x84>
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	b36b      	cbz	r3, 8008030 <__swbuf_r+0x84>
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	6820      	ldr	r0, [r4, #0]
 8007fd8:	1ac0      	subs	r0, r0, r3
 8007fda:	6963      	ldr	r3, [r4, #20]
 8007fdc:	b2f6      	uxtb	r6, r6
 8007fde:	4283      	cmp	r3, r0
 8007fe0:	4637      	mov	r7, r6
 8007fe2:	dc04      	bgt.n	8007fee <__swbuf_r+0x42>
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f000 f93c 	bl	8008264 <_fflush_r>
 8007fec:	bb30      	cbnz	r0, 800803c <__swbuf_r+0x90>
 8007fee:	68a3      	ldr	r3, [r4, #8]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	60a3      	str	r3, [r4, #8]
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	6022      	str	r2, [r4, #0]
 8007ffa:	701e      	strb	r6, [r3, #0]
 8007ffc:	6963      	ldr	r3, [r4, #20]
 8007ffe:	3001      	adds	r0, #1
 8008000:	4283      	cmp	r3, r0
 8008002:	d004      	beq.n	800800e <__swbuf_r+0x62>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	07db      	lsls	r3, r3, #31
 8008008:	d506      	bpl.n	8008018 <__swbuf_r+0x6c>
 800800a:	2e0a      	cmp	r6, #10
 800800c:	d104      	bne.n	8008018 <__swbuf_r+0x6c>
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f000 f927 	bl	8008264 <_fflush_r>
 8008016:	b988      	cbnz	r0, 800803c <__swbuf_r+0x90>
 8008018:	4638      	mov	r0, r7
 800801a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800801c:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <__swbuf_r+0x9c>)
 800801e:	429c      	cmp	r4, r3
 8008020:	d101      	bne.n	8008026 <__swbuf_r+0x7a>
 8008022:	68ac      	ldr	r4, [r5, #8]
 8008024:	e7cf      	b.n	8007fc6 <__swbuf_r+0x1a>
 8008026:	4b09      	ldr	r3, [pc, #36]	; (800804c <__swbuf_r+0xa0>)
 8008028:	429c      	cmp	r4, r3
 800802a:	bf08      	it	eq
 800802c:	68ec      	ldreq	r4, [r5, #12]
 800802e:	e7ca      	b.n	8007fc6 <__swbuf_r+0x1a>
 8008030:	4621      	mov	r1, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f000 f81a 	bl	800806c <__swsetup_r>
 8008038:	2800      	cmp	r0, #0
 800803a:	d0cb      	beq.n	8007fd4 <__swbuf_r+0x28>
 800803c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008040:	e7ea      	b.n	8008018 <__swbuf_r+0x6c>
 8008042:	bf00      	nop
 8008044:	08008fa4 	.word	0x08008fa4
 8008048:	08008fc4 	.word	0x08008fc4
 800804c:	08008f84 	.word	0x08008f84

08008050 <__ascii_wctomb>:
 8008050:	b149      	cbz	r1, 8008066 <__ascii_wctomb+0x16>
 8008052:	2aff      	cmp	r2, #255	; 0xff
 8008054:	bf85      	ittet	hi
 8008056:	238a      	movhi	r3, #138	; 0x8a
 8008058:	6003      	strhi	r3, [r0, #0]
 800805a:	700a      	strbls	r2, [r1, #0]
 800805c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008060:	bf98      	it	ls
 8008062:	2001      	movls	r0, #1
 8008064:	4770      	bx	lr
 8008066:	4608      	mov	r0, r1
 8008068:	4770      	bx	lr
	...

0800806c <__swsetup_r>:
 800806c:	4b32      	ldr	r3, [pc, #200]	; (8008138 <__swsetup_r+0xcc>)
 800806e:	b570      	push	{r4, r5, r6, lr}
 8008070:	681d      	ldr	r5, [r3, #0]
 8008072:	4606      	mov	r6, r0
 8008074:	460c      	mov	r4, r1
 8008076:	b125      	cbz	r5, 8008082 <__swsetup_r+0x16>
 8008078:	69ab      	ldr	r3, [r5, #24]
 800807a:	b913      	cbnz	r3, 8008082 <__swsetup_r+0x16>
 800807c:	4628      	mov	r0, r5
 800807e:	f000 f985 	bl	800838c <__sinit>
 8008082:	4b2e      	ldr	r3, [pc, #184]	; (800813c <__swsetup_r+0xd0>)
 8008084:	429c      	cmp	r4, r3
 8008086:	d10f      	bne.n	80080a8 <__swsetup_r+0x3c>
 8008088:	686c      	ldr	r4, [r5, #4]
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008090:	0719      	lsls	r1, r3, #28
 8008092:	d42c      	bmi.n	80080ee <__swsetup_r+0x82>
 8008094:	06dd      	lsls	r5, r3, #27
 8008096:	d411      	bmi.n	80080bc <__swsetup_r+0x50>
 8008098:	2309      	movs	r3, #9
 800809a:	6033      	str	r3, [r6, #0]
 800809c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a6:	e03e      	b.n	8008126 <__swsetup_r+0xba>
 80080a8:	4b25      	ldr	r3, [pc, #148]	; (8008140 <__swsetup_r+0xd4>)
 80080aa:	429c      	cmp	r4, r3
 80080ac:	d101      	bne.n	80080b2 <__swsetup_r+0x46>
 80080ae:	68ac      	ldr	r4, [r5, #8]
 80080b0:	e7eb      	b.n	800808a <__swsetup_r+0x1e>
 80080b2:	4b24      	ldr	r3, [pc, #144]	; (8008144 <__swsetup_r+0xd8>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	bf08      	it	eq
 80080b8:	68ec      	ldreq	r4, [r5, #12]
 80080ba:	e7e6      	b.n	800808a <__swsetup_r+0x1e>
 80080bc:	0758      	lsls	r0, r3, #29
 80080be:	d512      	bpl.n	80080e6 <__swsetup_r+0x7a>
 80080c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080c2:	b141      	cbz	r1, 80080d6 <__swsetup_r+0x6a>
 80080c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080c8:	4299      	cmp	r1, r3
 80080ca:	d002      	beq.n	80080d2 <__swsetup_r+0x66>
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7ff fb6f 	bl	80077b0 <_free_r>
 80080d2:	2300      	movs	r3, #0
 80080d4:	6363      	str	r3, [r4, #52]	; 0x34
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	2300      	movs	r3, #0
 80080e0:	6063      	str	r3, [r4, #4]
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	f043 0308 	orr.w	r3, r3, #8
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	b94b      	cbnz	r3, 8008106 <__swsetup_r+0x9a>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080fc:	d003      	beq.n	8008106 <__swsetup_r+0x9a>
 80080fe:	4621      	mov	r1, r4
 8008100:	4630      	mov	r0, r6
 8008102:	f000 fa07 	bl	8008514 <__smakebuf_r>
 8008106:	89a0      	ldrh	r0, [r4, #12]
 8008108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800810c:	f010 0301 	ands.w	r3, r0, #1
 8008110:	d00a      	beq.n	8008128 <__swsetup_r+0xbc>
 8008112:	2300      	movs	r3, #0
 8008114:	60a3      	str	r3, [r4, #8]
 8008116:	6963      	ldr	r3, [r4, #20]
 8008118:	425b      	negs	r3, r3
 800811a:	61a3      	str	r3, [r4, #24]
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	b943      	cbnz	r3, 8008132 <__swsetup_r+0xc6>
 8008120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008124:	d1ba      	bne.n	800809c <__swsetup_r+0x30>
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	0781      	lsls	r1, r0, #30
 800812a:	bf58      	it	pl
 800812c:	6963      	ldrpl	r3, [r4, #20]
 800812e:	60a3      	str	r3, [r4, #8]
 8008130:	e7f4      	b.n	800811c <__swsetup_r+0xb0>
 8008132:	2000      	movs	r0, #0
 8008134:	e7f7      	b.n	8008126 <__swsetup_r+0xba>
 8008136:	bf00      	nop
 8008138:	20000034 	.word	0x20000034
 800813c:	08008fa4 	.word	0x08008fa4
 8008140:	08008fc4 	.word	0x08008fc4
 8008144:	08008f84 	.word	0x08008f84

08008148 <abort>:
 8008148:	b508      	push	{r3, lr}
 800814a:	2006      	movs	r0, #6
 800814c:	f000 fa52 	bl	80085f4 <raise>
 8008150:	2001      	movs	r0, #1
 8008152:	f7fd fb79 	bl	8005848 <_exit>
	...

08008158 <__sflush_r>:
 8008158:	898a      	ldrh	r2, [r1, #12]
 800815a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815e:	4605      	mov	r5, r0
 8008160:	0710      	lsls	r0, r2, #28
 8008162:	460c      	mov	r4, r1
 8008164:	d458      	bmi.n	8008218 <__sflush_r+0xc0>
 8008166:	684b      	ldr	r3, [r1, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	dc05      	bgt.n	8008178 <__sflush_r+0x20>
 800816c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800816e:	2b00      	cmp	r3, #0
 8008170:	dc02      	bgt.n	8008178 <__sflush_r+0x20>
 8008172:	2000      	movs	r0, #0
 8008174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800817a:	2e00      	cmp	r6, #0
 800817c:	d0f9      	beq.n	8008172 <__sflush_r+0x1a>
 800817e:	2300      	movs	r3, #0
 8008180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008184:	682f      	ldr	r7, [r5, #0]
 8008186:	602b      	str	r3, [r5, #0]
 8008188:	d032      	beq.n	80081f0 <__sflush_r+0x98>
 800818a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	075a      	lsls	r2, r3, #29
 8008190:	d505      	bpl.n	800819e <__sflush_r+0x46>
 8008192:	6863      	ldr	r3, [r4, #4]
 8008194:	1ac0      	subs	r0, r0, r3
 8008196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008198:	b10b      	cbz	r3, 800819e <__sflush_r+0x46>
 800819a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	2300      	movs	r3, #0
 80081a0:	4602      	mov	r2, r0
 80081a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a4:	6a21      	ldr	r1, [r4, #32]
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b0      	blx	r6
 80081aa:	1c43      	adds	r3, r0, #1
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	d106      	bne.n	80081be <__sflush_r+0x66>
 80081b0:	6829      	ldr	r1, [r5, #0]
 80081b2:	291d      	cmp	r1, #29
 80081b4:	d82c      	bhi.n	8008210 <__sflush_r+0xb8>
 80081b6:	4a2a      	ldr	r2, [pc, #168]	; (8008260 <__sflush_r+0x108>)
 80081b8:	40ca      	lsrs	r2, r1
 80081ba:	07d6      	lsls	r6, r2, #31
 80081bc:	d528      	bpl.n	8008210 <__sflush_r+0xb8>
 80081be:	2200      	movs	r2, #0
 80081c0:	6062      	str	r2, [r4, #4]
 80081c2:	04d9      	lsls	r1, r3, #19
 80081c4:	6922      	ldr	r2, [r4, #16]
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	d504      	bpl.n	80081d4 <__sflush_r+0x7c>
 80081ca:	1c42      	adds	r2, r0, #1
 80081cc:	d101      	bne.n	80081d2 <__sflush_r+0x7a>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	b903      	cbnz	r3, 80081d4 <__sflush_r+0x7c>
 80081d2:	6560      	str	r0, [r4, #84]	; 0x54
 80081d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081d6:	602f      	str	r7, [r5, #0]
 80081d8:	2900      	cmp	r1, #0
 80081da:	d0ca      	beq.n	8008172 <__sflush_r+0x1a>
 80081dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e0:	4299      	cmp	r1, r3
 80081e2:	d002      	beq.n	80081ea <__sflush_r+0x92>
 80081e4:	4628      	mov	r0, r5
 80081e6:	f7ff fae3 	bl	80077b0 <_free_r>
 80081ea:	2000      	movs	r0, #0
 80081ec:	6360      	str	r0, [r4, #52]	; 0x34
 80081ee:	e7c1      	b.n	8008174 <__sflush_r+0x1c>
 80081f0:	6a21      	ldr	r1, [r4, #32]
 80081f2:	2301      	movs	r3, #1
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b0      	blx	r6
 80081f8:	1c41      	adds	r1, r0, #1
 80081fa:	d1c7      	bne.n	800818c <__sflush_r+0x34>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0c4      	beq.n	800818c <__sflush_r+0x34>
 8008202:	2b1d      	cmp	r3, #29
 8008204:	d001      	beq.n	800820a <__sflush_r+0xb2>
 8008206:	2b16      	cmp	r3, #22
 8008208:	d101      	bne.n	800820e <__sflush_r+0xb6>
 800820a:	602f      	str	r7, [r5, #0]
 800820c:	e7b1      	b.n	8008172 <__sflush_r+0x1a>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	e7ad      	b.n	8008174 <__sflush_r+0x1c>
 8008218:	690f      	ldr	r7, [r1, #16]
 800821a:	2f00      	cmp	r7, #0
 800821c:	d0a9      	beq.n	8008172 <__sflush_r+0x1a>
 800821e:	0793      	lsls	r3, r2, #30
 8008220:	680e      	ldr	r6, [r1, #0]
 8008222:	bf08      	it	eq
 8008224:	694b      	ldreq	r3, [r1, #20]
 8008226:	600f      	str	r7, [r1, #0]
 8008228:	bf18      	it	ne
 800822a:	2300      	movne	r3, #0
 800822c:	eba6 0807 	sub.w	r8, r6, r7
 8008230:	608b      	str	r3, [r1, #8]
 8008232:	f1b8 0f00 	cmp.w	r8, #0
 8008236:	dd9c      	ble.n	8008172 <__sflush_r+0x1a>
 8008238:	6a21      	ldr	r1, [r4, #32]
 800823a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800823c:	4643      	mov	r3, r8
 800823e:	463a      	mov	r2, r7
 8008240:	4628      	mov	r0, r5
 8008242:	47b0      	blx	r6
 8008244:	2800      	cmp	r0, #0
 8008246:	dc06      	bgt.n	8008256 <__sflush_r+0xfe>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008254:	e78e      	b.n	8008174 <__sflush_r+0x1c>
 8008256:	4407      	add	r7, r0
 8008258:	eba8 0800 	sub.w	r8, r8, r0
 800825c:	e7e9      	b.n	8008232 <__sflush_r+0xda>
 800825e:	bf00      	nop
 8008260:	20400001 	.word	0x20400001

08008264 <_fflush_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	690b      	ldr	r3, [r1, #16]
 8008268:	4605      	mov	r5, r0
 800826a:	460c      	mov	r4, r1
 800826c:	b913      	cbnz	r3, 8008274 <_fflush_r+0x10>
 800826e:	2500      	movs	r5, #0
 8008270:	4628      	mov	r0, r5
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	b118      	cbz	r0, 800827e <_fflush_r+0x1a>
 8008276:	6983      	ldr	r3, [r0, #24]
 8008278:	b90b      	cbnz	r3, 800827e <_fflush_r+0x1a>
 800827a:	f000 f887 	bl	800838c <__sinit>
 800827e:	4b14      	ldr	r3, [pc, #80]	; (80082d0 <_fflush_r+0x6c>)
 8008280:	429c      	cmp	r4, r3
 8008282:	d11b      	bne.n	80082bc <_fflush_r+0x58>
 8008284:	686c      	ldr	r4, [r5, #4]
 8008286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0ef      	beq.n	800826e <_fflush_r+0xa>
 800828e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008290:	07d0      	lsls	r0, r2, #31
 8008292:	d404      	bmi.n	800829e <_fflush_r+0x3a>
 8008294:	0599      	lsls	r1, r3, #22
 8008296:	d402      	bmi.n	800829e <_fflush_r+0x3a>
 8008298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829a:	f000 f915 	bl	80084c8 <__retarget_lock_acquire_recursive>
 800829e:	4628      	mov	r0, r5
 80082a0:	4621      	mov	r1, r4
 80082a2:	f7ff ff59 	bl	8008158 <__sflush_r>
 80082a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082a8:	07da      	lsls	r2, r3, #31
 80082aa:	4605      	mov	r5, r0
 80082ac:	d4e0      	bmi.n	8008270 <_fflush_r+0xc>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	059b      	lsls	r3, r3, #22
 80082b2:	d4dd      	bmi.n	8008270 <_fflush_r+0xc>
 80082b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082b6:	f000 f908 	bl	80084ca <__retarget_lock_release_recursive>
 80082ba:	e7d9      	b.n	8008270 <_fflush_r+0xc>
 80082bc:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <_fflush_r+0x70>)
 80082be:	429c      	cmp	r4, r3
 80082c0:	d101      	bne.n	80082c6 <_fflush_r+0x62>
 80082c2:	68ac      	ldr	r4, [r5, #8]
 80082c4:	e7df      	b.n	8008286 <_fflush_r+0x22>
 80082c6:	4b04      	ldr	r3, [pc, #16]	; (80082d8 <_fflush_r+0x74>)
 80082c8:	429c      	cmp	r4, r3
 80082ca:	bf08      	it	eq
 80082cc:	68ec      	ldreq	r4, [r5, #12]
 80082ce:	e7da      	b.n	8008286 <_fflush_r+0x22>
 80082d0:	08008fa4 	.word	0x08008fa4
 80082d4:	08008fc4 	.word	0x08008fc4
 80082d8:	08008f84 	.word	0x08008f84

080082dc <std>:
 80082dc:	2300      	movs	r3, #0
 80082de:	b510      	push	{r4, lr}
 80082e0:	4604      	mov	r4, r0
 80082e2:	e9c0 3300 	strd	r3, r3, [r0]
 80082e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ea:	6083      	str	r3, [r0, #8]
 80082ec:	8181      	strh	r1, [r0, #12]
 80082ee:	6643      	str	r3, [r0, #100]	; 0x64
 80082f0:	81c2      	strh	r2, [r0, #14]
 80082f2:	6183      	str	r3, [r0, #24]
 80082f4:	4619      	mov	r1, r3
 80082f6:	2208      	movs	r2, #8
 80082f8:	305c      	adds	r0, #92	; 0x5c
 80082fa:	f7fd fbb5 	bl	8005a68 <memset>
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <std+0x38>)
 8008300:	6263      	str	r3, [r4, #36]	; 0x24
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <std+0x3c>)
 8008304:	62a3      	str	r3, [r4, #40]	; 0x28
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <std+0x40>)
 8008308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800830a:	4b05      	ldr	r3, [pc, #20]	; (8008320 <std+0x44>)
 800830c:	6224      	str	r4, [r4, #32]
 800830e:	6323      	str	r3, [r4, #48]	; 0x30
 8008310:	bd10      	pop	{r4, pc}
 8008312:	bf00      	nop
 8008314:	0800862d 	.word	0x0800862d
 8008318:	0800864f 	.word	0x0800864f
 800831c:	08008687 	.word	0x08008687
 8008320:	080086ab 	.word	0x080086ab

08008324 <_cleanup_r>:
 8008324:	4901      	ldr	r1, [pc, #4]	; (800832c <_cleanup_r+0x8>)
 8008326:	f000 b8af 	b.w	8008488 <_fwalk_reent>
 800832a:	bf00      	nop
 800832c:	08008265 	.word	0x08008265

08008330 <__sfmoreglue>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	1e4a      	subs	r2, r1, #1
 8008334:	2568      	movs	r5, #104	; 0x68
 8008336:	4355      	muls	r5, r2
 8008338:	460e      	mov	r6, r1
 800833a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800833e:	f7ff fa87 	bl	8007850 <_malloc_r>
 8008342:	4604      	mov	r4, r0
 8008344:	b140      	cbz	r0, 8008358 <__sfmoreglue+0x28>
 8008346:	2100      	movs	r1, #0
 8008348:	e9c0 1600 	strd	r1, r6, [r0]
 800834c:	300c      	adds	r0, #12
 800834e:	60a0      	str	r0, [r4, #8]
 8008350:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008354:	f7fd fb88 	bl	8005a68 <memset>
 8008358:	4620      	mov	r0, r4
 800835a:	bd70      	pop	{r4, r5, r6, pc}

0800835c <__sfp_lock_acquire>:
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <__sfp_lock_acquire+0x8>)
 800835e:	f000 b8b3 	b.w	80084c8 <__retarget_lock_acquire_recursive>
 8008362:	bf00      	nop
 8008364:	20013254 	.word	0x20013254

08008368 <__sfp_lock_release>:
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <__sfp_lock_release+0x8>)
 800836a:	f000 b8ae 	b.w	80084ca <__retarget_lock_release_recursive>
 800836e:	bf00      	nop
 8008370:	20013254 	.word	0x20013254

08008374 <__sinit_lock_acquire>:
 8008374:	4801      	ldr	r0, [pc, #4]	; (800837c <__sinit_lock_acquire+0x8>)
 8008376:	f000 b8a7 	b.w	80084c8 <__retarget_lock_acquire_recursive>
 800837a:	bf00      	nop
 800837c:	2001324f 	.word	0x2001324f

08008380 <__sinit_lock_release>:
 8008380:	4801      	ldr	r0, [pc, #4]	; (8008388 <__sinit_lock_release+0x8>)
 8008382:	f000 b8a2 	b.w	80084ca <__retarget_lock_release_recursive>
 8008386:	bf00      	nop
 8008388:	2001324f 	.word	0x2001324f

0800838c <__sinit>:
 800838c:	b510      	push	{r4, lr}
 800838e:	4604      	mov	r4, r0
 8008390:	f7ff fff0 	bl	8008374 <__sinit_lock_acquire>
 8008394:	69a3      	ldr	r3, [r4, #24]
 8008396:	b11b      	cbz	r3, 80083a0 <__sinit+0x14>
 8008398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800839c:	f7ff bff0 	b.w	8008380 <__sinit_lock_release>
 80083a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083a4:	6523      	str	r3, [r4, #80]	; 0x50
 80083a6:	4b13      	ldr	r3, [pc, #76]	; (80083f4 <__sinit+0x68>)
 80083a8:	4a13      	ldr	r2, [pc, #76]	; (80083f8 <__sinit+0x6c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	bf04      	itt	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	61a3      	streq	r3, [r4, #24]
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 f820 	bl	80083fc <__sfp>
 80083bc:	6060      	str	r0, [r4, #4]
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 f81c 	bl	80083fc <__sfp>
 80083c4:	60a0      	str	r0, [r4, #8]
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 f818 	bl	80083fc <__sfp>
 80083cc:	2200      	movs	r2, #0
 80083ce:	60e0      	str	r0, [r4, #12]
 80083d0:	2104      	movs	r1, #4
 80083d2:	6860      	ldr	r0, [r4, #4]
 80083d4:	f7ff ff82 	bl	80082dc <std>
 80083d8:	68a0      	ldr	r0, [r4, #8]
 80083da:	2201      	movs	r2, #1
 80083dc:	2109      	movs	r1, #9
 80083de:	f7ff ff7d 	bl	80082dc <std>
 80083e2:	68e0      	ldr	r0, [r4, #12]
 80083e4:	2202      	movs	r2, #2
 80083e6:	2112      	movs	r1, #18
 80083e8:	f7ff ff78 	bl	80082dc <std>
 80083ec:	2301      	movs	r3, #1
 80083ee:	61a3      	str	r3, [r4, #24]
 80083f0:	e7d2      	b.n	8008398 <__sinit+0xc>
 80083f2:	bf00      	nop
 80083f4:	08008c04 	.word	0x08008c04
 80083f8:	08008325 	.word	0x08008325

080083fc <__sfp>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	4607      	mov	r7, r0
 8008400:	f7ff ffac 	bl	800835c <__sfp_lock_acquire>
 8008404:	4b1e      	ldr	r3, [pc, #120]	; (8008480 <__sfp+0x84>)
 8008406:	681e      	ldr	r6, [r3, #0]
 8008408:	69b3      	ldr	r3, [r6, #24]
 800840a:	b913      	cbnz	r3, 8008412 <__sfp+0x16>
 800840c:	4630      	mov	r0, r6
 800840e:	f7ff ffbd 	bl	800838c <__sinit>
 8008412:	3648      	adds	r6, #72	; 0x48
 8008414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008418:	3b01      	subs	r3, #1
 800841a:	d503      	bpl.n	8008424 <__sfp+0x28>
 800841c:	6833      	ldr	r3, [r6, #0]
 800841e:	b30b      	cbz	r3, 8008464 <__sfp+0x68>
 8008420:	6836      	ldr	r6, [r6, #0]
 8008422:	e7f7      	b.n	8008414 <__sfp+0x18>
 8008424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008428:	b9d5      	cbnz	r5, 8008460 <__sfp+0x64>
 800842a:	4b16      	ldr	r3, [pc, #88]	; (8008484 <__sfp+0x88>)
 800842c:	60e3      	str	r3, [r4, #12]
 800842e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008432:	6665      	str	r5, [r4, #100]	; 0x64
 8008434:	f000 f847 	bl	80084c6 <__retarget_lock_init_recursive>
 8008438:	f7ff ff96 	bl	8008368 <__sfp_lock_release>
 800843c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008444:	6025      	str	r5, [r4, #0]
 8008446:	61a5      	str	r5, [r4, #24]
 8008448:	2208      	movs	r2, #8
 800844a:	4629      	mov	r1, r5
 800844c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008450:	f7fd fb0a 	bl	8005a68 <memset>
 8008454:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008458:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800845c:	4620      	mov	r0, r4
 800845e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008460:	3468      	adds	r4, #104	; 0x68
 8008462:	e7d9      	b.n	8008418 <__sfp+0x1c>
 8008464:	2104      	movs	r1, #4
 8008466:	4638      	mov	r0, r7
 8008468:	f7ff ff62 	bl	8008330 <__sfmoreglue>
 800846c:	4604      	mov	r4, r0
 800846e:	6030      	str	r0, [r6, #0]
 8008470:	2800      	cmp	r0, #0
 8008472:	d1d5      	bne.n	8008420 <__sfp+0x24>
 8008474:	f7ff ff78 	bl	8008368 <__sfp_lock_release>
 8008478:	230c      	movs	r3, #12
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	e7ee      	b.n	800845c <__sfp+0x60>
 800847e:	bf00      	nop
 8008480:	08008c04 	.word	0x08008c04
 8008484:	ffff0001 	.word	0xffff0001

08008488 <_fwalk_reent>:
 8008488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800848c:	4606      	mov	r6, r0
 800848e:	4688      	mov	r8, r1
 8008490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008494:	2700      	movs	r7, #0
 8008496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800849a:	f1b9 0901 	subs.w	r9, r9, #1
 800849e:	d505      	bpl.n	80084ac <_fwalk_reent+0x24>
 80084a0:	6824      	ldr	r4, [r4, #0]
 80084a2:	2c00      	cmp	r4, #0
 80084a4:	d1f7      	bne.n	8008496 <_fwalk_reent+0xe>
 80084a6:	4638      	mov	r0, r7
 80084a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ac:	89ab      	ldrh	r3, [r5, #12]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d907      	bls.n	80084c2 <_fwalk_reent+0x3a>
 80084b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084b6:	3301      	adds	r3, #1
 80084b8:	d003      	beq.n	80084c2 <_fwalk_reent+0x3a>
 80084ba:	4629      	mov	r1, r5
 80084bc:	4630      	mov	r0, r6
 80084be:	47c0      	blx	r8
 80084c0:	4307      	orrs	r7, r0
 80084c2:	3568      	adds	r5, #104	; 0x68
 80084c4:	e7e9      	b.n	800849a <_fwalk_reent+0x12>

080084c6 <__retarget_lock_init_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <__retarget_lock_acquire_recursive>:
 80084c8:	4770      	bx	lr

080084ca <__retarget_lock_release_recursive>:
 80084ca:	4770      	bx	lr

080084cc <__swhatbuf_r>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	460e      	mov	r6, r1
 80084d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d4:	2900      	cmp	r1, #0
 80084d6:	b096      	sub	sp, #88	; 0x58
 80084d8:	4614      	mov	r4, r2
 80084da:	461d      	mov	r5, r3
 80084dc:	da07      	bge.n	80084ee <__swhatbuf_r+0x22>
 80084de:	2300      	movs	r3, #0
 80084e0:	602b      	str	r3, [r5, #0]
 80084e2:	89b3      	ldrh	r3, [r6, #12]
 80084e4:	061a      	lsls	r2, r3, #24
 80084e6:	d410      	bmi.n	800850a <__swhatbuf_r+0x3e>
 80084e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ec:	e00e      	b.n	800850c <__swhatbuf_r+0x40>
 80084ee:	466a      	mov	r2, sp
 80084f0:	f000 f902 	bl	80086f8 <_fstat_r>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dbf2      	blt.n	80084de <__swhatbuf_r+0x12>
 80084f8:	9a01      	ldr	r2, [sp, #4]
 80084fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008502:	425a      	negs	r2, r3
 8008504:	415a      	adcs	r2, r3
 8008506:	602a      	str	r2, [r5, #0]
 8008508:	e7ee      	b.n	80084e8 <__swhatbuf_r+0x1c>
 800850a:	2340      	movs	r3, #64	; 0x40
 800850c:	2000      	movs	r0, #0
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	b016      	add	sp, #88	; 0x58
 8008512:	bd70      	pop	{r4, r5, r6, pc}

08008514 <__smakebuf_r>:
 8008514:	898b      	ldrh	r3, [r1, #12]
 8008516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008518:	079d      	lsls	r5, r3, #30
 800851a:	4606      	mov	r6, r0
 800851c:	460c      	mov	r4, r1
 800851e:	d507      	bpl.n	8008530 <__smakebuf_r+0x1c>
 8008520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	2301      	movs	r3, #1
 800852a:	6163      	str	r3, [r4, #20]
 800852c:	b002      	add	sp, #8
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	ab01      	add	r3, sp, #4
 8008532:	466a      	mov	r2, sp
 8008534:	f7ff ffca 	bl	80084cc <__swhatbuf_r>
 8008538:	9900      	ldr	r1, [sp, #0]
 800853a:	4605      	mov	r5, r0
 800853c:	4630      	mov	r0, r6
 800853e:	f7ff f987 	bl	8007850 <_malloc_r>
 8008542:	b948      	cbnz	r0, 8008558 <__smakebuf_r+0x44>
 8008544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008548:	059a      	lsls	r2, r3, #22
 800854a:	d4ef      	bmi.n	800852c <__smakebuf_r+0x18>
 800854c:	f023 0303 	bic.w	r3, r3, #3
 8008550:	f043 0302 	orr.w	r3, r3, #2
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	e7e3      	b.n	8008520 <__smakebuf_r+0xc>
 8008558:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <__smakebuf_r+0x7c>)
 800855a:	62b3      	str	r3, [r6, #40]	; 0x28
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	6020      	str	r0, [r4, #0]
 8008560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	9b00      	ldr	r3, [sp, #0]
 8008568:	6163      	str	r3, [r4, #20]
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	6120      	str	r0, [r4, #16]
 800856e:	b15b      	cbz	r3, 8008588 <__smakebuf_r+0x74>
 8008570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008574:	4630      	mov	r0, r6
 8008576:	f000 f8d1 	bl	800871c <_isatty_r>
 800857a:	b128      	cbz	r0, 8008588 <__smakebuf_r+0x74>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	89a0      	ldrh	r0, [r4, #12]
 800858a:	4305      	orrs	r5, r0
 800858c:	81a5      	strh	r5, [r4, #12]
 800858e:	e7cd      	b.n	800852c <__smakebuf_r+0x18>
 8008590:	08008325 	.word	0x08008325

08008594 <_malloc_usable_size_r>:
 8008594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008598:	1f18      	subs	r0, r3, #4
 800859a:	2b00      	cmp	r3, #0
 800859c:	bfbc      	itt	lt
 800859e:	580b      	ldrlt	r3, [r1, r0]
 80085a0:	18c0      	addlt	r0, r0, r3
 80085a2:	4770      	bx	lr

080085a4 <_raise_r>:
 80085a4:	291f      	cmp	r1, #31
 80085a6:	b538      	push	{r3, r4, r5, lr}
 80085a8:	4604      	mov	r4, r0
 80085aa:	460d      	mov	r5, r1
 80085ac:	d904      	bls.n	80085b8 <_raise_r+0x14>
 80085ae:	2316      	movs	r3, #22
 80085b0:	6003      	str	r3, [r0, #0]
 80085b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085ba:	b112      	cbz	r2, 80085c2 <_raise_r+0x1e>
 80085bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085c0:	b94b      	cbnz	r3, 80085d6 <_raise_r+0x32>
 80085c2:	4620      	mov	r0, r4
 80085c4:	f000 f830 	bl	8008628 <_getpid_r>
 80085c8:	462a      	mov	r2, r5
 80085ca:	4601      	mov	r1, r0
 80085cc:	4620      	mov	r0, r4
 80085ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085d2:	f000 b817 	b.w	8008604 <_kill_r>
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d00a      	beq.n	80085f0 <_raise_r+0x4c>
 80085da:	1c59      	adds	r1, r3, #1
 80085dc:	d103      	bne.n	80085e6 <_raise_r+0x42>
 80085de:	2316      	movs	r3, #22
 80085e0:	6003      	str	r3, [r0, #0]
 80085e2:	2001      	movs	r0, #1
 80085e4:	e7e7      	b.n	80085b6 <_raise_r+0x12>
 80085e6:	2400      	movs	r4, #0
 80085e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085ec:	4628      	mov	r0, r5
 80085ee:	4798      	blx	r3
 80085f0:	2000      	movs	r0, #0
 80085f2:	e7e0      	b.n	80085b6 <_raise_r+0x12>

080085f4 <raise>:
 80085f4:	4b02      	ldr	r3, [pc, #8]	; (8008600 <raise+0xc>)
 80085f6:	4601      	mov	r1, r0
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	f7ff bfd3 	b.w	80085a4 <_raise_r>
 80085fe:	bf00      	nop
 8008600:	20000034 	.word	0x20000034

08008604 <_kill_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4d07      	ldr	r5, [pc, #28]	; (8008624 <_kill_r+0x20>)
 8008608:	2300      	movs	r3, #0
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	4611      	mov	r1, r2
 8008610:	602b      	str	r3, [r5, #0]
 8008612:	f7fd f909 	bl	8005828 <_kill>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d102      	bne.n	8008620 <_kill_r+0x1c>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	b103      	cbz	r3, 8008620 <_kill_r+0x1c>
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	bd38      	pop	{r3, r4, r5, pc}
 8008622:	bf00      	nop
 8008624:	20013248 	.word	0x20013248

08008628 <_getpid_r>:
 8008628:	f7fd b8f6 	b.w	8005818 <_getpid>

0800862c <__sread>:
 800862c:	b510      	push	{r4, lr}
 800862e:	460c      	mov	r4, r1
 8008630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008634:	f000 f894 	bl	8008760 <_read_r>
 8008638:	2800      	cmp	r0, #0
 800863a:	bfab      	itete	ge
 800863c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800863e:	89a3      	ldrhlt	r3, [r4, #12]
 8008640:	181b      	addge	r3, r3, r0
 8008642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008646:	bfac      	ite	ge
 8008648:	6563      	strge	r3, [r4, #84]	; 0x54
 800864a:	81a3      	strhlt	r3, [r4, #12]
 800864c:	bd10      	pop	{r4, pc}

0800864e <__swrite>:
 800864e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008652:	461f      	mov	r7, r3
 8008654:	898b      	ldrh	r3, [r1, #12]
 8008656:	05db      	lsls	r3, r3, #23
 8008658:	4605      	mov	r5, r0
 800865a:	460c      	mov	r4, r1
 800865c:	4616      	mov	r6, r2
 800865e:	d505      	bpl.n	800866c <__swrite+0x1e>
 8008660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008664:	2302      	movs	r3, #2
 8008666:	2200      	movs	r2, #0
 8008668:	f000 f868 	bl	800873c <_lseek_r>
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008676:	81a3      	strh	r3, [r4, #12]
 8008678:	4632      	mov	r2, r6
 800867a:	463b      	mov	r3, r7
 800867c:	4628      	mov	r0, r5
 800867e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008682:	f000 b817 	b.w	80086b4 <_write_r>

08008686 <__sseek>:
 8008686:	b510      	push	{r4, lr}
 8008688:	460c      	mov	r4, r1
 800868a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868e:	f000 f855 	bl	800873c <_lseek_r>
 8008692:	1c43      	adds	r3, r0, #1
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	bf15      	itete	ne
 8008698:	6560      	strne	r0, [r4, #84]	; 0x54
 800869a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800869e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086a2:	81a3      	strheq	r3, [r4, #12]
 80086a4:	bf18      	it	ne
 80086a6:	81a3      	strhne	r3, [r4, #12]
 80086a8:	bd10      	pop	{r4, pc}

080086aa <__sclose>:
 80086aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ae:	f000 b813 	b.w	80086d8 <_close_r>
	...

080086b4 <_write_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d07      	ldr	r5, [pc, #28]	; (80086d4 <_write_r+0x20>)
 80086b8:	4604      	mov	r4, r0
 80086ba:	4608      	mov	r0, r1
 80086bc:	4611      	mov	r1, r2
 80086be:	2200      	movs	r2, #0
 80086c0:	602a      	str	r2, [r5, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	f7fd f8e7 	bl	8005896 <_write>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_write_r+0x1e>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_write_r+0x1e>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	20013248 	.word	0x20013248

080086d8 <_close_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	; (80086f4 <_close_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f7fd f8f3 	bl	80058ce <_close>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_close_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_close_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20013248 	.word	0x20013248

080086f8 <_fstat_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4d07      	ldr	r5, [pc, #28]	; (8008718 <_fstat_r+0x20>)
 80086fc:	2300      	movs	r3, #0
 80086fe:	4604      	mov	r4, r0
 8008700:	4608      	mov	r0, r1
 8008702:	4611      	mov	r1, r2
 8008704:	602b      	str	r3, [r5, #0]
 8008706:	f7fd f8ee 	bl	80058e6 <_fstat>
 800870a:	1c43      	adds	r3, r0, #1
 800870c:	d102      	bne.n	8008714 <_fstat_r+0x1c>
 800870e:	682b      	ldr	r3, [r5, #0]
 8008710:	b103      	cbz	r3, 8008714 <_fstat_r+0x1c>
 8008712:	6023      	str	r3, [r4, #0]
 8008714:	bd38      	pop	{r3, r4, r5, pc}
 8008716:	bf00      	nop
 8008718:	20013248 	.word	0x20013248

0800871c <_isatty_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4d06      	ldr	r5, [pc, #24]	; (8008738 <_isatty_r+0x1c>)
 8008720:	2300      	movs	r3, #0
 8008722:	4604      	mov	r4, r0
 8008724:	4608      	mov	r0, r1
 8008726:	602b      	str	r3, [r5, #0]
 8008728:	f7fd f8ed 	bl	8005906 <_isatty>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_isatty_r+0x1a>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_isatty_r+0x1a>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	20013248 	.word	0x20013248

0800873c <_lseek_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d07      	ldr	r5, [pc, #28]	; (800875c <_lseek_r+0x20>)
 8008740:	4604      	mov	r4, r0
 8008742:	4608      	mov	r0, r1
 8008744:	4611      	mov	r1, r2
 8008746:	2200      	movs	r2, #0
 8008748:	602a      	str	r2, [r5, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	f7fd f8e6 	bl	800591c <_lseek>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_lseek_r+0x1e>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_lseek_r+0x1e>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	20013248 	.word	0x20013248

08008760 <_read_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4d07      	ldr	r5, [pc, #28]	; (8008780 <_read_r+0x20>)
 8008764:	4604      	mov	r4, r0
 8008766:	4608      	mov	r0, r1
 8008768:	4611      	mov	r1, r2
 800876a:	2200      	movs	r2, #0
 800876c:	602a      	str	r2, [r5, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	f7fd f874 	bl	800585c <_read>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d102      	bne.n	800877e <_read_r+0x1e>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b103      	cbz	r3, 800877e <_read_r+0x1e>
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	20013248 	.word	0x20013248

08008784 <_init>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	bf00      	nop
 8008788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878a:	bc08      	pop	{r3}
 800878c:	469e      	mov	lr, r3
 800878e:	4770      	bx	lr

08008790 <_fini>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	bf00      	nop
 8008794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008796:	bc08      	pop	{r3}
 8008798:	469e      	mov	lr, r3
 800879a:	4770      	bx	lr
