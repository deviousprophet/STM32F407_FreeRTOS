
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000984  0800bbf8  0800bbf8  0001bbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c57c  0800c57c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c57c  0800c57c  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c57c  0800c57c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c57c  0800c57c  0001c57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c580  0800c580  0001c580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000136f0  2000020c  0800c790  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200138fc  0800c790  000238fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e24  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036db  00000000  00000000  0003905e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0003c740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  0003d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006624  00000000  00000000  0003e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f46  00000000  00000000  00044c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001e827  00000000  00000000  00055be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00074409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000541c  00000000  00000000  0007445c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bbdc 	.word	0x0800bbdc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000210 	.word	0x20000210
 80001ec:	0800bbdc 	.word	0x0800bbdc

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	200137cc 	.word	0x200137cc

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <ADE_Init>:
void ADE_SPI_Init();
void ZeroX_Init();
void SAG_Init();
void IRQ_Init();

void ADE_Init(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	ADE_SPI_Init();
 8000d0c:	f000 f894 	bl	8000e38 <ADE_SPI_Init>

	ZeroX_Init();
 8000d10:	f000 f904 	bl	8000f1c <ZeroX_Init>
//	SAG_Init();
	IRQ_Init();
 8000d14:	f000 f922 	bl	8000f5c <IRQ_Init>

	ADE_Reset();
 8000d18:	f000 f802 	bl	8000d20 <ADE_Reset>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <ADE_Reset>:

void ADE_Reset(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2109      	movs	r1, #9
 8000d2a:	480b      	ldr	r0, [pc, #44]	; (8000d58 <ADE_Reset+0x38>)
 8000d2c:	f003 fe44 	bl	80049b8 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 1000; i++);
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	e002      	b.n	8000d3c <ADE_Reset+0x1c>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d42:	dbf8      	blt.n	8000d36 <ADE_Reset+0x16>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2109      	movs	r1, #9
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <ADE_Reset+0x38>)
 8000d4a:	f003 fe35 	bl	80049b8 <GPIO_WriteToOutputPin>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40020c00 	.word	0x40020c00

08000d5c <ADE_ReadData>:

uint32_t ADE_ReadData(uint8_t address, uint8_t bytes_to_read) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
	uint32_t data = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000d70:	2101      	movs	r1, #1
 8000d72:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <ADE_ReadData+0x64>)
 8000d74:	f004 fa58 	bl	8005228 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <ADE_ReadData+0x64>)
 8000d7e:	f004 fa28 	bl	80051d2 <SPI_Transfer>
	for(uint8_t i = 0; i < bytes_to_read; i++) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	72fb      	strb	r3, [r7, #11]
 8000d86:	e00d      	b.n	8000da4 <ADE_ReadData+0x48>
		data <<= 8;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	60fb      	str	r3, [r7, #12]
		data |= SPI_Transfer(ADE_SPI_HOST, 0xff);
 8000d8e:	21ff      	movs	r1, #255	; 0xff
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <ADE_ReadData+0x64>)
 8000d92:	f004 fa1e 	bl	80051d2 <SPI_Transfer>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < bytes_to_read; i++) {
 8000d9e:	7afb      	ldrb	r3, [r7, #11]
 8000da0:	3301      	adds	r3, #1
 8000da2:	72fb      	strb	r3, [r7, #11]
 8000da4:	7afa      	ldrb	r2, [r7, #11]
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d3ed      	bcc.n	8000d88 <ADE_ReadData+0x2c>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE); //SS pin pull to high
 8000dac:	2100      	movs	r1, #0
 8000dae:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <ADE_ReadData+0x64>)
 8000db0:	f004 fa3a 	bl	8005228 <SPI_PeripheralControl>
	return data;
 8000db4:	68fb      	ldr	r3, [r7, #12]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40003800 	.word	0x40003800

08000dc4 <ADE_WriteData>:

void ADE_WriteData(uint8_t address, uint32_t write_buffer, uint8_t bytes_to_write) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	71bb      	strb	r3, [r7, #6]
	uint8_t data = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73bb      	strb	r3, [r7, #14]
	address |= 0x80;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dde:	71fb      	strb	r3, [r7, #7]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000de0:	2101      	movs	r1, #1
 8000de2:	4814      	ldr	r0, [pc, #80]	; (8000e34 <ADE_WriteData+0x70>)
 8000de4:	f004 fa20 	bl	8005228 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4619      	mov	r1, r3
 8000dec:	4811      	ldr	r0, [pc, #68]	; (8000e34 <ADE_WriteData+0x70>)
 8000dee:	f004 f9f0 	bl	80051d2 <SPI_Transfer>
	for(uint8_t i = 0; i < bytes_to_write; i++) {
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e010      	b.n	8000e1a <ADE_WriteData+0x56>
		data = (uint8_t) (write_buffer >> 8 * (bytes_to_write - i - 1));
 8000df8:	79ba      	ldrb	r2, [r7, #6]
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	fa22 f303 	lsr.w	r3, r2, r3
 8000e08:	73bb      	strb	r3, [r7, #14]
		SPI_Transfer(ADE_SPI_HOST, data);
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <ADE_WriteData+0x70>)
 8000e10:	f004 f9df 	bl	80051d2 <SPI_Transfer>
	for(uint8_t i = 0; i < bytes_to_write; i++) {
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	3301      	adds	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	7bfa      	ldrb	r2, [r7, #15]
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3ea      	bcc.n	8000df8 <ADE_WriteData+0x34>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE);; //SS pin pull to high
 8000e22:	2100      	movs	r1, #0
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <ADE_WriteData+0x70>)
 8000e26:	f004 f9ff 	bl	8005228 <SPI_PeripheralControl>
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40003800 	.word	0x40003800

08000e38 <ADE_SPI_Init>:

void ADE_SPI_Init() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
	 * PB13 -> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT function mode : 5
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <ADE_SPI_Init+0xd8>)
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e42:	2302      	movs	r3, #2
 8000e44:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000e60:	230d      	movs	r3, #13
 8000e62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fbf2 	bl	8004654 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000e70:	230f      	movs	r3, #15
 8000e72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fbea 	bl	8004654 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000e80:	230e      	movs	r3, #14
 8000e82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fbe2 	bl	8004654 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000e90:	230c      	movs	r3, #12
 8000e92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 fbda 	bl	8004654 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <ADE_SPI_Init+0xdc>)
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000ea4:	2309      	movs	r3, #9
 8000ea6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(&SPIPins);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fbca 	bl	8004654 <GPIO_Init>

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = ADE_SPI_HOST;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ec2:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;	// clock 1MHz
 8000ecc:	2303      	movs	r3, #3
 8000ece:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;				// CPOL 0
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;				// CPHA 1
 8000ed8:	2301      	movs	r3, #1
 8000eda:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 					// Hardware slave management enabled for NSS pin
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]

	ADE_SPI_HOST->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eea:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 f914 	bl	800511c <SPI_Init>
	ADE_SPI_HOST->CR1 |= (1 << SPI_CR1_SPE);
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efe:	6013      	str	r3, [r2, #0]

	SPI_SSOEConfig(ADE_SPI_HOST, ENABLE);
 8000f00:	2101      	movs	r1, #1
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000f04:	f004 f9ac 	bl	8005260 <SPI_SSOEConfig>
}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40003800 	.word	0x40003800

08000f1c <ZeroX_Init>:

void ZeroX_Init() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
//	Input pin trigger as falling edge
	GPIO_Handle_t GpioZX;
	GpioZX.pGPIOx = PORT_ZX_IT;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <ZeroX_Init+0x3c>)
 8000f24:	607b      	str	r3, [r7, #4]
	GpioZX.GPIO_PinConfig.GPIO_PinNumber = PIN_ZX_IT;
 8000f26:	230b      	movs	r3, #11
 8000f28:	723b      	strb	r3, [r7, #8]
	GpioZX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	727b      	strb	r3, [r7, #9]
	GpioZX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	72bb      	strb	r3, [r7, #10]
	GpioZX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000f32:	2300      	movs	r3, #0
 8000f34:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioZX);
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f003 fb8b 	bl	8004654 <GPIO_Init>

//	IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI0);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2028      	movs	r0, #40	; 0x28
 8000f42:	f003 fde5 	bl	8004b10 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000f46:	2101      	movs	r1, #1
 8000f48:	2028      	movs	r0, #40	; 0x28
 8000f4a:	f003 fd5b 	bl	8004a04 <GPIO_IRQInterruptConfig>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <IRQ_Init>:
////	IRQ configuration
//	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI10);
//	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
}

void IRQ_Init() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
//	Input pin trigger as falling edge
	GPIO_Handle_t GpioIRQ;
	GpioIRQ.pGPIOx = PORT_IRQ_IT;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <IRQ_Init+0x3c>)
 8000f64:	607b      	str	r3, [r7, #4]
	GpioIRQ.GPIO_PinConfig.GPIO_PinNumber = PIN_IRQ_IT;
 8000f66:	230d      	movs	r3, #13
 8000f68:	723b      	strb	r3, [r7, #8]
	GpioIRQ.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	727b      	strb	r3, [r7, #9]
	GpioIRQ.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	72bb      	strb	r3, [r7, #10]
	GpioIRQ.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000f72:	2301      	movs	r3, #1
 8000f74:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioIRQ);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 fb6b 	bl	8004654 <GPIO_Init>

//	IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI15);
 8000f7e:	210f      	movs	r1, #15
 8000f80:	2028      	movs	r0, #40	; 0x28
 8000f82:	f003 fdc5 	bl	8004b10 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000f86:	2101      	movs	r1, #1
 8000f88:	2028      	movs	r0, #40	; 0x28
 8000f8a:	f003 fd3b 	bl	8004a04 <GPIO_IRQInterruptConfig>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020c00 	.word	0x40020c00

08000f9c <DS1307_Init>:

uint8_t DS1307_Bcd2Bin(uint8_t bcd);
uint8_t DS1307_Bin2Bcd(uint8_t bin);
uint8_t DS1307_CheckMinMax(uint8_t val, uint8_t min, uint8_t max);

DS1307_Result_t DS1307_Init(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0
//	I2C GPIO Init
	GPIO_Handle_t ds_gpio;
	ds_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ds_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ds_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	ds_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ds_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	ds_gpio.pGPIOx = DS1307_I2C_SCL_GPIO_PORT;
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <DS1307_Init+0x80>)
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	ds_gpio.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_GPIO_PIN;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&ds_gpio);
 8000fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fb40 	bl	8004654 <GPIO_Init>

	ds_gpio.pGPIOx = DS1307_I2C_SDA_GPIO_PORT;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <DS1307_Init+0x84>)
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	ds_gpio.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_GPIO_PIN;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&ds_gpio);
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fb36 	bl	8004654 <GPIO_Init>

	I2C_Handle_t ds_i2c;
	ds_i2c.pI2Cx = DS1307_I2C;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <DS1307_Init+0x88>)
 8000fea:	607b      	str	r3, [r7, #4]
	ds_i2c.I2C_Config.I2C_AckControl = I2C_ACK_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	737b      	strb	r3, [r7, #13]
	ds_i2c.I2C_Config.I2C_SCLSpeed = DS1307_I2C_CLOCK;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <DS1307_Init+0x8c>)
 8000ff2:	60bb      	str	r3, [r7, #8]
	ds_i2c.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73bb      	strb	r3, [r7, #14]

	I2C_Init(&ds_i2c);
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 fe06 	bl	8004c0c <I2C_Init>

	if(!I2C_IsDeviceConnected(DS1307_I2C, DS1307_I2C_ADDR)) return DS1307_Result_DeviceNotConnected;
 8001000:	21d0      	movs	r1, #208	; 0xd0
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <DS1307_Init+0x88>)
 8001004:	f003 ff08 	bl	8004e18 <I2C_IsDeviceConnected>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <DS1307_Init+0x76>
 800100e:	2302      	movs	r3, #2
 8001010:	e000      	b.n	8001014 <DS1307_Init+0x78>
	return DS1307_Result_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3738      	adds	r7, #56	; 0x38
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40020000 	.word	0x40020000
 8001020:	40020800 	.word	0x40020800
 8001024:	40005c00 	.word	0x40005c00
 8001028:	000186a0 	.word	0x000186a0

0800102c <DS1307_GetSeconds>:

uint8_t DS1307_GetSeconds(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_SECONDS));
 8001030:	2200      	movs	r2, #0
 8001032:	21d0      	movs	r1, #208	; 0xd0
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <DS1307_GetSeconds+0x1c>)
 8001036:	f003 fea7 	bl	8004d88 <I2C_Read>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f986 	bl	800134e <DS1307_Bcd2Bin>
 8001042:	4603      	mov	r3, r0
}
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40005c00 	.word	0x40005c00

0800104c <DS1307_GetMinutes>:

uint8_t DS1307_GetMinutes(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MINUTES));
 8001050:	2201      	movs	r2, #1
 8001052:	21d0      	movs	r1, #208	; 0xd0
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <DS1307_GetMinutes+0x1c>)
 8001056:	f003 fe97 	bl	8004d88 <I2C_Read>
 800105a:	4603      	mov	r3, r0
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f976 	bl	800134e <DS1307_Bcd2Bin>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40005c00 	.word	0x40005c00

0800106c <DS1307_GetHours>:

uint8_t DS1307_GetHours(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_HOURS));
 8001070:	2202      	movs	r2, #2
 8001072:	21d0      	movs	r1, #208	; 0xd0
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <DS1307_GetHours+0x1c>)
 8001076:	f003 fe87 	bl	8004d88 <I2C_Read>
 800107a:	4603      	mov	r3, r0
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f966 	bl	800134e <DS1307_Bcd2Bin>
 8001082:	4603      	mov	r3, r0
}
 8001084:	4618      	mov	r0, r3
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40005c00 	.word	0x40005c00

0800108c <DS1307_GetDay>:

uint8_t DS1307_GetDay(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DAY));
 8001090:	2203      	movs	r2, #3
 8001092:	21d0      	movs	r1, #208	; 0xd0
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <DS1307_GetDay+0x1c>)
 8001096:	f003 fe77 	bl	8004d88 <I2C_Read>
 800109a:	4603      	mov	r3, r0
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f956 	bl	800134e <DS1307_Bcd2Bin>
 80010a2:	4603      	mov	r3, r0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40005c00 	.word	0x40005c00

080010ac <DS1307_GetDate>:

uint8_t DS1307_GetDate(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DATE));
 80010b0:	2204      	movs	r2, #4
 80010b2:	21d0      	movs	r1, #208	; 0xd0
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <DS1307_GetDate+0x1c>)
 80010b6:	f003 fe67 	bl	8004d88 <I2C_Read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f946 	bl	800134e <DS1307_Bcd2Bin>
 80010c2:	4603      	mov	r3, r0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40005c00 	.word	0x40005c00

080010cc <DS1307_GetMonth>:

uint8_t DS1307_GetMonth(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MONTH));
 80010d0:	2205      	movs	r2, #5
 80010d2:	21d0      	movs	r1, #208	; 0xd0
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <DS1307_GetMonth+0x1c>)
 80010d6:	f003 fe57 	bl	8004d88 <I2C_Read>
 80010da:	4603      	mov	r3, r0
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f936 	bl	800134e <DS1307_Bcd2Bin>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40005c00 	.word	0x40005c00

080010ec <DS1307_GetYear>:

uint8_t DS1307_GetYear(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_YEAR));
 80010f0:	2206      	movs	r2, #6
 80010f2:	21d0      	movs	r1, #208	; 0xd0
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <DS1307_GetYear+0x1c>)
 80010f6:	f003 fe47 	bl	8004d88 <I2C_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f926 	bl	800134e <DS1307_Bcd2Bin>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40005c00 	.word	0x40005c00

0800110c <DS1307_SetSeconds>:

void DS1307_SetSeconds(uint8_t seconds) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_SECONDS, DS1307_Bin2Bcd(DS1307_CheckMinMax(seconds, 0, 59)));
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	223b      	movs	r2, #59	; 0x3b
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f953 	bl	80013c8 <DS1307_CheckMinMax>
 8001122:	4603      	mov	r3, r0
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f92b 	bl	8001380 <DS1307_Bin2Bcd>
 800112a:	4603      	mov	r3, r0
 800112c:	2200      	movs	r2, #0
 800112e:	21d0      	movs	r1, #208	; 0xd0
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <DS1307_SetSeconds+0x34>)
 8001132:	f003 fe4d 	bl	8004dd0 <I2C_Write>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40005c00 	.word	0x40005c00

08001144 <DS1307_SetMinutes>:

void DS1307_SetMinutes(uint8_t minutes) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MINUTES, DS1307_Bin2Bcd(DS1307_CheckMinMax(minutes, 0, 59)));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	223b      	movs	r2, #59	; 0x3b
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f937 	bl	80013c8 <DS1307_CheckMinMax>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f90f 	bl	8001380 <DS1307_Bin2Bcd>
 8001162:	4603      	mov	r3, r0
 8001164:	2201      	movs	r2, #1
 8001166:	21d0      	movs	r1, #208	; 0xd0
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <DS1307_SetMinutes+0x34>)
 800116a:	f003 fe31 	bl	8004dd0 <I2C_Write>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40005c00 	.word	0x40005c00

0800117c <DS1307_SetHours>:

void DS1307_SetHours(uint8_t hours) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_HOURS, DS1307_Bin2Bcd(DS1307_CheckMinMax(hours, 0, 23)));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2217      	movs	r2, #23
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f91b 	bl	80013c8 <DS1307_CheckMinMax>
 8001192:	4603      	mov	r3, r0
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f8f3 	bl	8001380 <DS1307_Bin2Bcd>
 800119a:	4603      	mov	r3, r0
 800119c:	2202      	movs	r2, #2
 800119e:	21d0      	movs	r1, #208	; 0xd0
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <DS1307_SetHours+0x34>)
 80011a2:	f003 fe15 	bl	8004dd0 <I2C_Write>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40005c00 	.word	0x40005c00

080011b4 <DS1307_SetDay>:

void DS1307_SetDay(uint8_t day) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DAY, DS1307_Bin2Bcd(DS1307_CheckMinMax(day, 1, 7)));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2207      	movs	r2, #7
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f8ff 	bl	80013c8 <DS1307_CheckMinMax>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f8d7 	bl	8001380 <DS1307_Bin2Bcd>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2203      	movs	r2, #3
 80011d6:	21d0      	movs	r1, #208	; 0xd0
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <DS1307_SetDay+0x34>)
 80011da:	f003 fdf9 	bl	8004dd0 <I2C_Write>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40005c00 	.word	0x40005c00

080011ec <DS1307_SetDate>:

void DS1307_SetDate(uint8_t date) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DATE, DS1307_Bin2Bcd(DS1307_CheckMinMax(date, 1, 31)));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	221f      	movs	r2, #31
 80011fa:	2101      	movs	r1, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f8e3 	bl	80013c8 <DS1307_CheckMinMax>
 8001202:	4603      	mov	r3, r0
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f8bb 	bl	8001380 <DS1307_Bin2Bcd>
 800120a:	4603      	mov	r3, r0
 800120c:	2204      	movs	r2, #4
 800120e:	21d0      	movs	r1, #208	; 0xd0
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <DS1307_SetDate+0x34>)
 8001212:	f003 fddd 	bl	8004dd0 <I2C_Write>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40005c00 	.word	0x40005c00

08001224 <DS1307_SetMonth>:

void DS1307_SetMonth(uint8_t month) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MONTH, DS1307_Bin2Bcd(DS1307_CheckMinMax(month, 1, 12)));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	220c      	movs	r2, #12
 8001232:	2101      	movs	r1, #1
 8001234:	4618      	mov	r0, r3
 8001236:	f000 f8c7 	bl	80013c8 <DS1307_CheckMinMax>
 800123a:	4603      	mov	r3, r0
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f89f 	bl	8001380 <DS1307_Bin2Bcd>
 8001242:	4603      	mov	r3, r0
 8001244:	2205      	movs	r2, #5
 8001246:	21d0      	movs	r1, #208	; 0xd0
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <DS1307_SetMonth+0x34>)
 800124a:	f003 fdc1 	bl	8004dd0 <I2C_Write>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40005c00 	.word	0x40005c00

0800125c <DS1307_SetYear>:

void DS1307_SetYear(uint8_t year) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_YEAR, DS1307_Bin2Bcd(DS1307_CheckMinMax(year, 0, 99)));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2263      	movs	r2, #99	; 0x63
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f8ab 	bl	80013c8 <DS1307_CheckMinMax>
 8001272:	4603      	mov	r3, r0
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f883 	bl	8001380 <DS1307_Bin2Bcd>
 800127a:	4603      	mov	r3, r0
 800127c:	2206      	movs	r2, #6
 800127e:	21d0      	movs	r1, #208	; 0xd0
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <DS1307_SetYear+0x34>)
 8001282:	f003 fda5 	bl	8004dd0 <I2C_Write>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40005c00 	.word	0x40005c00

08001294 <DS1307_GetDateTime>:

void DS1307_GetDateTime(DS1307_DateTime_t* time) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	time->seconds = DS1307_GetSeconds();
 800129c:	f7ff fec6 	bl	800102c <DS1307_GetSeconds>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	701a      	strb	r2, [r3, #0]
	time->minutes = DS1307_GetMinutes();
 80012a8:	f7ff fed0 	bl	800104c <DS1307_GetMinutes>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	705a      	strb	r2, [r3, #1]
	time->hours = DS1307_GetHours();
 80012b4:	f7ff feda 	bl	800106c <DS1307_GetHours>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	709a      	strb	r2, [r3, #2]
	time->day = DS1307_GetDay();
 80012c0:	f7ff fee4 	bl	800108c <DS1307_GetDay>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	70da      	strb	r2, [r3, #3]
	time->date = DS1307_GetDate();
 80012cc:	f7ff feee 	bl	80010ac <DS1307_GetDate>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	711a      	strb	r2, [r3, #4]
	time->month = DS1307_GetMonth();
 80012d8:	f7ff fef8 	bl	80010cc <DS1307_GetMonth>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	715a      	strb	r2, [r3, #5]
	time->year = DS1307_GetYear();
 80012e4:	f7ff ff02 	bl	80010ec <DS1307_GetYear>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	719a      	strb	r2, [r3, #6]
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <DS1307_SetDateTime>:

void DS1307_SetDateTime(DS1307_DateTime_t* time) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	DS1307_SetSeconds(time->seconds);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff01 	bl	800110c <DS1307_SetSeconds>
	DS1307_SetMinutes(time->minutes);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	785b      	ldrb	r3, [r3, #1]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff18 	bl	8001144 <DS1307_SetMinutes>
	DS1307_SetHours(time->hours);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	789b      	ldrb	r3, [r3, #2]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff2f 	bl	800117c <DS1307_SetHours>
	DS1307_SetDay(time->day);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	78db      	ldrb	r3, [r3, #3]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff46 	bl	80011b4 <DS1307_SetDay>
	DS1307_SetDate(time->date);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	791b      	ldrb	r3, [r3, #4]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <DS1307_SetDate>
	DS1307_SetMonth(time->month);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	795b      	ldrb	r3, [r3, #5]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff74 	bl	8001224 <DS1307_SetMonth>
	DS1307_SetYear(time->year);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	799b      	ldrb	r3, [r3, #6]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff8b 	bl	800125c <DS1307_SetYear>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <DS1307_Bcd2Bin>:

void DS1307_DisableOutputPin(void) {
	DS1307_EnableOutputPin(DS1307_OutputFreq_HIGH);
}

uint8_t DS1307_Bcd2Bin(uint8_t bcd) {
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4413      	add	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	b2db      	uxtb	r3, r3
 8001370:	4413      	add	r3, r2
 8001372:	b2db      	uxtb	r3, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <DS1307_Bin2Bcd>:

uint8_t DS1307_Bin2Bcd(uint8_t bin) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	return (bin / 10) << 4 | bin % 10;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <DS1307_Bin2Bcd+0x44>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	b258      	sxtb	r0, r3
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <DS1307_Bin2Bcd+0x44>)
 800139e:	fba3 1302 	umull	r1, r3, r3, r2
 80013a2:	08d9      	lsrs	r1, r3, #3
 80013a4:	460b      	mov	r3, r1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	4303      	orrs	r3, r0
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	cccccccd 	.word	0xcccccccd

080013c8 <DS1307_CheckMinMax>:

uint8_t DS1307_CheckMinMax(uint8_t val, uint8_t min, uint8_t max) {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	460b      	mov	r3, r1
 80013d4:	71bb      	strb	r3, [r7, #6]
 80013d6:	4613      	mov	r3, r2
 80013d8:	717b      	strb	r3, [r7, #5]
	if(val < min)
 80013da:	79fa      	ldrb	r2, [r7, #7]
 80013dc:	79bb      	ldrb	r3, [r7, #6]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d201      	bcs.n	80013e6 <DS1307_CheckMinMax+0x1e>
		return min;
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	e006      	b.n	80013f4 <DS1307_CheckMinMax+0x2c>
	else if (val > max)
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	797b      	ldrb	r3, [r7, #5]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d901      	bls.n	80013f2 <DS1307_CheckMinMax+0x2a>
		return max;
 80013ee:	797b      	ldrb	r3, [r7, #5]
 80013f0:	e000      	b.n	80013f4 <DS1307_CheckMinMax+0x2c>
	else return val;
 80013f2:	79fb      	ldrb	r3, [r7, #7]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <KEYPAD_Init>:

/* Private variables */
KEYPAD_Type_t KEYPAD_INT_KeypadType;
static KEYPAD_Button_t KeypadStatus = KEYPAD_NOPRESSED;

void KEYPAD_Init(KEYPAD_Type_t type) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	KEYPAD_INT_KeypadType = type;
 800140a:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <KEYPAD_Init+0xd4>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	7013      	strb	r3, [r2, #0]
	GPIO_Handle_t GpioR_Out, GpioC_In;

	/* Rows are output */
	/* Row 1 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_1_PORT;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <KEYPAD_Init+0xd8>)
 8001412:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_1_PIN;
 8001414:	230b      	movs	r3, #11
 8001416:	763b      	strb	r3, [r7, #24]
	GpioR_Out.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001418:	2301      	movs	r3, #1
 800141a:	767b      	strb	r3, [r7, #25]
	GpioR_Out.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 800141c:	2301      	movs	r3, #1
 800141e:	76bb      	strb	r3, [r7, #26]
	GpioR_Out.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001420:	2300      	movs	r3, #0
 8001422:	773b      	strb	r3, [r7, #28]
	GpioR_Out.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001424:	2300      	movs	r3, #0
 8001426:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GpioR_Out);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4618      	mov	r0, r3
 800142e:	f003 f911 	bl	8004654 <GPIO_Init>

	/* Row 2 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_2_PORT;
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <KEYPAD_Init+0xdc>)
 8001434:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_2_PIN;
 8001436:	2300      	movs	r3, #0
 8001438:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4618      	mov	r0, r3
 8001440:	f003 f908 	bl	8004654 <GPIO_Init>

	/* Row 3 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_3_PORT;
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <KEYPAD_Init+0xdc>)
 8001446:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_3_PIN;
 8001448:	2302      	movs	r3, #2
 800144a:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4618      	mov	r0, r3
 8001452:	f003 f8ff 	bl	8004654 <GPIO_Init>

	/* Row 4 */
	if (type == KEYPAD_Type_Large) {
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d108      	bne.n	800146e <KEYPAD_Init+0x6e>
		GpioR_Out.pGPIOx = KEYPAD_ROW_4_PORT;
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <KEYPAD_Init+0xdc>)
 800145e:	617b      	str	r3, [r7, #20]
		GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_4_PIN;
 8001460:	2304      	movs	r3, #4
 8001462:	763b      	strb	r3, [r7, #24]
		GPIO_Init(&GpioR_Out);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4618      	mov	r0, r3
 800146a:	f003 f8f3 	bl	8004654 <GPIO_Init>
	}


	/* Columns are inputs */
	/* Column 1 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_1_PORT;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <KEYPAD_Init+0xdc>)
 8001470:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_1_PIN;
 8001472:	2306      	movs	r3, #6
 8001474:	733b      	strb	r3, [r7, #12]
	GpioC_In.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8001476:	2300      	movs	r3, #0
 8001478:	737b      	strb	r3, [r7, #13]
	GpioC_In.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 800147a:	2301      	movs	r3, #1
 800147c:	73bb      	strb	r3, [r7, #14]
	GpioC_In.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800147e:	2300      	movs	r3, #0
 8001480:	743b      	strb	r3, [r7, #16]
	GpioC_In.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&GpioC_In);
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	4618      	mov	r0, r3
 800148c:	f003 f8e2 	bl	8004654 <GPIO_Init>

	/* Column 2 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_2_PORT;
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <KEYPAD_Init+0xe0>)
 8001492:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 8001494:	2303      	movs	r3, #3
 8001496:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	4618      	mov	r0, r3
 800149e:	f003 f8d9 	bl	8004654 <GPIO_Init>

	/* Column 3 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_3_PORT;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <KEYPAD_Init+0xe0>)
 80014a4:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_3_PIN;
 80014a6:	2305      	movs	r3, #5
 80014a8:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 f8d0 	bl	8004654 <GPIO_Init>

	/* Column 4 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_4_PORT;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <KEYPAD_Init+0xe0>)
 80014b6:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_4_PIN;
 80014b8:	2307      	movs	r3, #7
 80014ba:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 f8c7 	bl	8004654 <GPIO_Init>

	/* All rows high */
	KEYPAD_INT_SetRow(0);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 f818 	bl	80014fc <KEYPAD_INT_SetRow>
}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2001358c 	.word	0x2001358c
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40020400 	.word	0x40020400

080014e4 <KEYPAD_Read>:

KEYPAD_Button_t KEYPAD_Read(void) {
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	return KeypadStatus;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <KEYPAD_Read+0x14>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000010 	.word	0x20000010

080014fc <KEYPAD_INT_SetRow>:

/* Private */
void KEYPAD_INT_SetRow(uint8_t row) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_ROW_1_HIGH;
 8001506:	2201      	movs	r2, #1
 8001508:	210b      	movs	r1, #11
 800150a:	481d      	ldr	r0, [pc, #116]	; (8001580 <KEYPAD_INT_SetRow+0x84>)
 800150c:	f003 fa54 	bl	80049b8 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_2_HIGH;
 8001510:	2201      	movs	r2, #1
 8001512:	2100      	movs	r1, #0
 8001514:	481b      	ldr	r0, [pc, #108]	; (8001584 <KEYPAD_INT_SetRow+0x88>)
 8001516:	f003 fa4f 	bl	80049b8 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_3_HIGH;
 800151a:	2201      	movs	r2, #1
 800151c:	2102      	movs	r1, #2
 800151e:	4819      	ldr	r0, [pc, #100]	; (8001584 <KEYPAD_INT_SetRow+0x88>)
 8001520:	f003 fa4a 	bl	80049b8 <GPIO_WriteToOutputPin>
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large)
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <KEYPAD_INT_SetRow+0x8c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d104      	bne.n	8001536 <KEYPAD_INT_SetRow+0x3a>
		KEYPAD_ROW_4_HIGH;
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	4814      	ldr	r0, [pc, #80]	; (8001584 <KEYPAD_INT_SetRow+0x88>)
 8001532:	f003 fa41 	bl	80049b8 <GPIO_WriteToOutputPin>

	/* Set row low */
	if (row == 1)
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d104      	bne.n	8001546 <KEYPAD_INT_SetRow+0x4a>
		KEYPAD_ROW_1_LOW;
 800153c:	2200      	movs	r2, #0
 800153e:	210b      	movs	r1, #11
 8001540:	480f      	ldr	r0, [pc, #60]	; (8001580 <KEYPAD_INT_SetRow+0x84>)
 8001542:	f003 fa39 	bl	80049b8 <GPIO_WriteToOutputPin>
	if (row == 2)
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d104      	bne.n	8001556 <KEYPAD_INT_SetRow+0x5a>
		KEYPAD_ROW_2_LOW;
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <KEYPAD_INT_SetRow+0x88>)
 8001552:	f003 fa31 	bl	80049b8 <GPIO_WriteToOutputPin>
	if (row == 3)
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d104      	bne.n	8001566 <KEYPAD_INT_SetRow+0x6a>
		KEYPAD_ROW_3_LOW;
 800155c:	2200      	movs	r2, #0
 800155e:	2102      	movs	r1, #2
 8001560:	4808      	ldr	r0, [pc, #32]	; (8001584 <KEYPAD_INT_SetRow+0x88>)
 8001562:	f003 fa29 	bl	80049b8 <GPIO_WriteToOutputPin>
	if (row == 4)
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b04      	cmp	r3, #4
 800156a:	d104      	bne.n	8001576 <KEYPAD_INT_SetRow+0x7a>
		KEYPAD_ROW_4_LOW;
 800156c:	2200      	movs	r2, #0
 800156e:	2104      	movs	r1, #4
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <KEYPAD_INT_SetRow+0x88>)
 8001572:	f003 fa21 	bl	80049b8 <GPIO_WriteToOutputPin>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00
 8001588:	2001358c 	.word	0x2001358c

0800158c <KEYPAD_INT_CheckColumn>:

uint8_t KEYPAD_INT_CheckColumn(uint8_t row) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	/* Read columns */

	/* Scan column 1 */
	if (KEYPAD_COLUMN_1_CHECK) {
 8001596:	2106      	movs	r1, #6
 8001598:	481f      	ldr	r0, [pc, #124]	; (8001618 <KEYPAD_INT_CheckColumn+0x8c>)
 800159a:	f003 f9f7 	bl	800498c <GPIO_ReadFromInputPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d105      	bne.n	80015b0 <KEYPAD_INT_CheckColumn+0x24>
		return KEYPAD_INT_Buttons[row - 1][0];
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	4a1c      	ldr	r2, [pc, #112]	; (800161c <KEYPAD_INT_CheckColumn+0x90>)
 80015aa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80015ae:	e02e      	b.n	800160e <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 2 */
	if (KEYPAD_COLUMN_2_CHECK) {
 80015b0:	2103      	movs	r1, #3
 80015b2:	481b      	ldr	r0, [pc, #108]	; (8001620 <KEYPAD_INT_CheckColumn+0x94>)
 80015b4:	f003 f9ea 	bl	800498c <GPIO_ReadFromInputPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <KEYPAD_INT_CheckColumn+0x40>
		return KEYPAD_INT_Buttons[row - 1][1];
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4a16      	ldr	r2, [pc, #88]	; (800161c <KEYPAD_INT_CheckColumn+0x90>)
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	e020      	b.n	800160e <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 3 */
	if (KEYPAD_COLUMN_3_CHECK) {
 80015cc:	2105      	movs	r1, #5
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <KEYPAD_INT_CheckColumn+0x94>)
 80015d0:	f003 f9dc 	bl	800498c <GPIO_ReadFromInputPin>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <KEYPAD_INT_CheckColumn+0x5c>
		return KEYPAD_INT_Buttons[row - 1][2];
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	3b01      	subs	r3, #1
 80015de:	4a0f      	ldr	r2, [pc, #60]	; (800161c <KEYPAD_INT_CheckColumn+0x90>)
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	789b      	ldrb	r3, [r3, #2]
 80015e6:	e012      	b.n	800160e <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 4 */
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large && KEYPAD_COLUMN_4_CHECK) {
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <KEYPAD_INT_CheckColumn+0x98>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10d      	bne.n	800160c <KEYPAD_INT_CheckColumn+0x80>
 80015f0:	2107      	movs	r1, #7
 80015f2:	480b      	ldr	r0, [pc, #44]	; (8001620 <KEYPAD_INT_CheckColumn+0x94>)
 80015f4:	f003 f9ca 	bl	800498c <GPIO_ReadFromInputPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <KEYPAD_INT_CheckColumn+0x80>
		return KEYPAD_INT_Buttons[row - 1][3];
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	3b01      	subs	r3, #1
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <KEYPAD_INT_CheckColumn+0x90>)
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	78db      	ldrb	r3, [r3, #3]
 800160a:	e000      	b.n	800160e <KEYPAD_INT_CheckColumn+0x82>
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 800160c:	23ff      	movs	r3, #255	; 0xff
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40020c00 	.word	0x40020c00
 800161c:	20000000 	.word	0x20000000
 8001620:	40020400 	.word	0x40020400
 8001624:	2001358c 	.word	0x2001358c

08001628 <KEYPAD_INT_Read>:

uint8_t KEYPAD_INT_Read(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	KEYPAD_INT_SetRow(1);
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff ff64 	bl	80014fc <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff ffa9 	bl	800158c <KEYPAD_INT_CheckColumn>
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2bff      	cmp	r3, #255	; 0xff
 8001642:	d001      	beq.n	8001648 <KEYPAD_INT_Read+0x20>
		return check;
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	e02b      	b.n	80016a0 <KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	KEYPAD_INT_SetRow(2);
 8001648:	2002      	movs	r0, #2
 800164a:	f7ff ff57 	bl	80014fc <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(2);
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff ff9c 	bl	800158c <KEYPAD_INT_CheckColumn>
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2bff      	cmp	r3, #255	; 0xff
 800165c:	d001      	beq.n	8001662 <KEYPAD_INT_Read+0x3a>
		return check;
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	e01e      	b.n	80016a0 <KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	KEYPAD_INT_SetRow(3);
 8001662:	2003      	movs	r0, #3
 8001664:	f7ff ff4a 	bl	80014fc <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(3);
 8001668:	2003      	movs	r0, #3
 800166a:	f7ff ff8f 	bl	800158c <KEYPAD_INT_CheckColumn>
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2bff      	cmp	r3, #255	; 0xff
 8001676:	d001      	beq.n	800167c <KEYPAD_INT_Read+0x54>
		return check;
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	e011      	b.n	80016a0 <KEYPAD_INT_Read+0x78>
	}

	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large) {
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <KEYPAD_INT_Read+0x80>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10c      	bne.n	800169e <KEYPAD_INT_Read+0x76>
		/* Set row 4 to LOW */
		KEYPAD_INT_SetRow(4);
 8001684:	2004      	movs	r0, #4
 8001686:	f7ff ff39 	bl	80014fc <KEYPAD_INT_SetRow>
		/* Check columns */
		check = KEYPAD_INT_CheckColumn(4);
 800168a:	2004      	movs	r0, #4
 800168c:	f7ff ff7e 	bl	800158c <KEYPAD_INT_CheckColumn>
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NOPRESSED) {
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2bff      	cmp	r3, #255	; 0xff
 8001698:	d001      	beq.n	800169e <KEYPAD_INT_Read+0x76>
			return check;
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	e000      	b.n	80016a0 <KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 800169e:	23ff      	movs	r3, #255	; 0xff
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2001358c 	.word	0x2001358c

080016ac <KEYPAD_Hold_Button>:

KEYPAD_Button_t KEYPAD_Hold_Button(KEYPAD_Button_t button) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
	return button | 0x80;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016bc:	b2db      	uxtb	r3, r3
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <KEYPAD_Update>:

void KEYPAD_Update(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	KeypadStatus = (KEYPAD_Button_t) KEYPAD_INT_Read();
 80016d0:	f7ff ffaa 	bl	8001628 <KEYPAD_INT_Read>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b01      	ldr	r3, [pc, #4]	; (80016e0 <KEYPAD_Update+0x14>)
 80016da:	701a      	strb	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000010 	.word	0x20000010

080016e4 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 80016ee:	2101      	movs	r1, #1
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <LCD5110_send+0x40>)
 80016f2:	f003 fd99 	bl	8005228 <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2101      	movs	r1, #1
 80016fa:	480b      	ldr	r0, [pc, #44]	; (8001728 <LCD5110_send+0x44>)
 80016fc:	f003 f95c 	bl	80049b8 <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	4619      	mov	r1, r3
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <LCD5110_send+0x40>)
 8001706:	f003 fd64 	bl	80051d2 <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 800170a:	2201      	movs	r2, #1
 800170c:	2101      	movs	r1, #1
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <LCD5110_send+0x44>)
 8001710:	f003 f952 	bl	80049b8 <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 8001714:	2100      	movs	r1, #0
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <LCD5110_send+0x40>)
 8001718:	f003 fd86 	bl	8005228 <SPI_PeripheralControl>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40013000 	.word	0x40013000
 8001728:	40020400 	.word	0x40020400

0800172c <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	460a      	mov	r2, r1
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	4613      	mov	r3, r2
 800173a:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d002      	beq.n	8001748 <LCD5110_Pin+0x1c>
 8001742:	2b02      	cmp	r3, #2
 8001744:	d00f      	beq.n	8001766 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 8001746:	e01d      	b.n	8001784 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 800174e:	2201      	movs	r2, #1
 8001750:	2105      	movs	r1, #5
 8001752:	480e      	ldr	r0, [pc, #56]	; (800178c <LCD5110_Pin+0x60>)
 8001754:	f003 f930 	bl	80049b8 <GPIO_WriteToOutputPin>
			break;
 8001758:	e014      	b.n	8001784 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2105      	movs	r1, #5
 800175e:	480b      	ldr	r0, [pc, #44]	; (800178c <LCD5110_Pin+0x60>)
 8001760:	f003 f92a 	bl	80049b8 <GPIO_WriteToOutputPin>
			break;
 8001764:	e00e      	b.n	8001784 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 800176c:	2201      	movs	r2, #1
 800176e:	2107      	movs	r1, #7
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <LCD5110_Pin+0x64>)
 8001772:	f003 f921 	bl	80049b8 <GPIO_WriteToOutputPin>
			break;
 8001776:	e004      	b.n	8001782 <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8001778:	2200      	movs	r2, #0
 800177a:	2107      	movs	r1, #7
 800177c:	4804      	ldr	r0, [pc, #16]	; (8001790 <LCD5110_Pin+0x64>)
 800177e:	f003 f91b 	bl	80049b8 <GPIO_WriteToOutputPin>
			break;
 8001782:	bf00      	nop
	}
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40020800 	.word	0x40020800
 8001790:	40021000 	.word	0x40021000

08001794 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e002      	b.n	80017a8 <LCD5110_Delay+0x14>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f8      	bhi.n	80017a2 <LCD5110_Delay+0xe>
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08e      	sub	sp, #56	; 0x38
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <LCD5110_Init+0x138>)
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80017ce:	2302      	movs	r3, #2
 80017d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80017d4:	2305      	movs	r3, #5
 80017d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80017ec:	2305      	movs	r3, #5
 80017ee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 ff2c 	bl	8004654 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80017fc:	2307      	movs	r3, #7
 80017fe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001806:	4618      	mov	r0, r3
 8001808:	f002 ff24 	bl	8004654 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 800180c:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <LCD5110_Init+0x13c>)
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 8001810:	2301      	movs	r3, #1
 8001812:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 8001828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182c:	4618      	mov	r0, r3
 800182e:	f002 ff11 	bl	8004654 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <LCD5110_Init+0x140>)
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 8001836:	2305      	movs	r3, #5
 8001838:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800183c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001840:	4618      	mov	r0, r3
 8001842:	f002 ff07 	bl	8004654 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <LCD5110_Init+0x144>)
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 800184a:	2307      	movs	r3, #7
 800184c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fefd 	bl	8004654 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <LCD5110_Init+0x148>)
 800185c:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800185e:	2301      	movs	r3, #1
 8001860:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 8001862:	2301      	movs	r3, #1
 8001864:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8001866:	2302      	movs	r3, #2
 8001868:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 800186a:	2300      	movs	r3, #0
 800186c:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 800186e:	2300      	movs	r3, #0
 8001870:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 8001872:	2300      	movs	r3, #0
 8001874:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 8001876:	2300      	movs	r3, #0
 8001878:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fc4c 	bl	800511c <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 8001884:	2101      	movs	r1, #1
 8001886:	4820      	ldr	r0, [pc, #128]	; (8001908 <LCD5110_Init+0x148>)
 8001888:	f003 fcea 	bl	8005260 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 800188c:	2100      	movs	r1, #0
 800188e:	2002      	movs	r0, #2
 8001890:	f7ff ff4c 	bl	800172c <LCD5110_Pin>
	LCD5110_Delay(10000);
 8001894:	f242 7010 	movw	r0, #10000	; 0x2710
 8001898:	f7ff ff7c 	bl	8001794 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 800189c:	2101      	movs	r1, #1
 800189e:	2002      	movs	r0, #2
 80018a0:	f7ff ff44 	bl	800172c <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 80018a4:	2121      	movs	r1, #33	; 0x21
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 f830 	bl	800190c <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 80018ac:	2114      	movs	r1, #20
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f82c 	bl	800190c <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da01      	bge.n	80018c0 <LCD5110_Init+0x100>
		contrast = 0x7F;
 80018bc:	237f      	movs	r3, #127	; 0x7f
 80018be:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4619      	mov	r1, r3
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f81e 	bl	800190c <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 80018d0:	2120      	movs	r1, #32
 80018d2:	2000      	movs	r0, #0
 80018d4:	f000 f81a 	bl	800190c <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 80018d8:	210c      	movs	r1, #12
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 f816 	bl	800190c <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 80018e0:	f000 f8b8 	bl	8001a54 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 80018e4:	210c      	movs	r1, #12
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f810 	bl	800190c <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 80018ec:	f000 f88c 	bl	8001a08 <LCD5110_Clear>
}
 80018f0:	bf00      	nop
 80018f2:	3738      	adds	r7, #56	; 0x38
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40021000 	.word	0x40021000
 8001908:	40013000 	.word	0x40013000

0800190c <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	4613      	mov	r3, r2
 800191a:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <LCD5110_Write+0x24>
 8001922:	2b01      	cmp	r3, #1
 8001924:	d109      	bne.n	800193a <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 8001926:	2101      	movs	r1, #1
 8001928:	2001      	movs	r0, #1
 800192a:	f7ff feff 	bl	800172c <LCD5110_Pin>
			break;
 800192e:	e005      	b.n	800193c <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 8001930:	2100      	movs	r1, #0
 8001932:	2001      	movs	r0, #1
 8001934:	f7ff fefa 	bl	800172c <LCD5110_Pin>
			break;
 8001938:	e000      	b.n	800193c <LCD5110_Write+0x30>
		default: break;
 800193a:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fed0 	bl	80016e4 <LCD5110_send>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
 8001956:	460b      	mov	r3, r1
 8001958:	71bb      	strb	r3, [r7, #6]
 800195a:	4613      	mov	r3, r2
 800195c:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b53      	cmp	r3, #83	; 0x53
 8001962:	d849      	bhi.n	80019f8 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	2b2f      	cmp	r3, #47	; 0x2f
 8001968:	d848      	bhi.n	80019fc <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 800196a:	797b      	ldrb	r3, [r7, #5]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01d      	beq.n	80019ac <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	b2d8      	uxtb	r0, r3
 8001978:	4601      	mov	r1, r0
 800197a:	2354      	movs	r3, #84	; 0x54
 800197c:	fb03 f301 	mul.w	r3, r3, r1
 8001980:	4413      	add	r3, r2
 8001982:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <LCD5110_DrawPixel+0xb8>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	b25a      	sxtb	r2, r3
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	b25b      	sxtb	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	b259      	sxtb	r1, r3
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	2354      	movs	r3, #84	; 0x54
 800199e:	fb03 f300 	mul.w	r3, r3, r0
 80019a2:	4413      	add	r3, r2
 80019a4:	b2c9      	uxtb	r1, r1
 80019a6:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <LCD5110_DrawPixel+0xb8>)
 80019a8:	54d1      	strb	r1, [r2, r3]
 80019aa:	e01e      	b.n	80019ea <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	79bb      	ldrb	r3, [r7, #6]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	b2d8      	uxtb	r0, r3
 80019b4:	4601      	mov	r1, r0
 80019b6:	2354      	movs	r3, #84	; 0x54
 80019b8:	fb03 f301 	mul.w	r3, r3, r1
 80019bc:	4413      	add	r3, r2
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <LCD5110_DrawPixel+0xb8>)
 80019c0:	5cd3      	ldrb	r3, [r2, r3]
 80019c2:	b25a      	sxtb	r2, r3
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	4013      	ands	r3, r2
 80019d8:	b259      	sxtb	r1, r3
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	2354      	movs	r3, #84	; 0x54
 80019de:	fb03 f300 	mul.w	r3, r3, r0
 80019e2:	4413      	add	r3, r2
 80019e4:	b2c9      	uxtb	r1, r1
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <LCD5110_DrawPixel+0xb8>)
 80019e8:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	79fa      	ldrb	r2, [r7, #7]
 80019ee:	79b9      	ldrb	r1, [r7, #6]
 80019f0:	79f8      	ldrb	r0, [r7, #7]
 80019f2:	f000 f89d 	bl	8001b30 <LCD5110_UpdateArea>
 80019f6:	e002      	b.n	80019fe <LCD5110_DrawPixel+0xb2>
		return;
 80019f8:	bf00      	nop
 80019fa:	e000      	b.n	80019fe <LCD5110_DrawPixel+0xb2>
		return;
 80019fc:	bf00      	nop
}
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20013594 	.word	0x20013594

08001a08 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 8001a0e:	f000 f821 	bl	8001a54 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	e007      	b.n	8001a28 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <LCD5110_Clear+0x48>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3301      	adds	r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001a2e:	d3f3      	bcc.n	8001a18 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 8001a30:	2100      	movs	r1, #0
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f8b8 	bl	8001ba8 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 8001a38:	232f      	movs	r3, #47	; 0x2f
 8001a3a:	2253      	movs	r2, #83	; 0x53
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f876 	bl	8001b30 <LCD5110_UpdateArea>
	LCD5110_Refresh();
 8001a44:	f000 f812 	bl	8001a6c <LCD5110_Refresh>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20013594 	.word	0x20013594

08001a54 <LCD5110_Home>:

void LCD5110_Home(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff ff56 	bl	800190c <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 8001a60:	2140      	movs	r1, #64	; 0x40
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff ff52 	bl	800190c <LCD5110_Write>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8001a72:	2300      	movs	r3, #0
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	e03b      	b.n	8001af0 <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <LCD5110_Refresh+0xb0>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	3301      	adds	r3, #1
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dc2f      	bgt.n	8001ae8 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4a24      	ldr	r2, [pc, #144]	; (8001b20 <LCD5110_Refresh+0xb4>)
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	dc31      	bgt.n	8001af8 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff ff34 	bl	800190c <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <LCD5110_Refresh+0xb8>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4619      	mov	r1, r3
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff ff2b 	bl	800190c <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <LCD5110_Refresh+0xb8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	71bb      	strb	r3, [r7, #6]
 8001abc:	e00e      	b.n	8001adc <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2254      	movs	r2, #84	; 0x54
 8001ac2:	fb02 f203 	mul.w	r2, r2, r3
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <LCD5110_Refresh+0xbc>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff ff1b 	bl	800190c <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	71bb      	strb	r3, [r7, #6]
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <LCD5110_Refresh+0xc0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	79ba      	ldrb	r2, [r7, #6]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d9eb      	bls.n	8001abe <LCD5110_Refresh+0x52>
 8001ae6:	e000      	b.n	8001aea <LCD5110_Refresh+0x7e>
			continue;
 8001ae8:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	3301      	adds	r3, #1
 8001aee:	71fb      	strb	r3, [r7, #7]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d9c0      	bls.n	8001a78 <LCD5110_Refresh+0xc>
 8001af6:	e000      	b.n	8001afa <LCD5110_Refresh+0x8e>
			break;
 8001af8:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <LCD5110_Refresh+0xb8>)
 8001afc:	2253      	movs	r2, #83	; 0x53
 8001afe:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <LCD5110_Refresh+0xc0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <LCD5110_Refresh+0xb0>)
 8001b08:	222f      	movs	r2, #47	; 0x2f
 8001b0a:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <LCD5110_Refresh+0xb4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000022a 	.word	0x2000022a
 8001b20:	2000022b 	.word	0x2000022b
 8001b24:	20000228 	.word	0x20000228
 8001b28:	20013594 	.word	0x20013594
 8001b2c:	20000229 	.word	0x20000229

08001b30 <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8001b30:	b490      	push	{r4, r7}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4604      	mov	r4, r0
 8001b38:	4608      	mov	r0, r1
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4623      	mov	r3, r4
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	4603      	mov	r3, r0
 8001b44:	71bb      	strb	r3, [r7, #6]
 8001b46:	460b      	mov	r3, r1
 8001b48:	717b      	strb	r3, [r7, #5]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <LCD5110_UpdateArea+0x68>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d202      	bcs.n	8001b5e <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8001b58:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <LCD5110_UpdateArea+0x68>)
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <LCD5110_UpdateArea+0x6c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	797a      	ldrb	r2, [r7, #5]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d902      	bls.n	8001b6e <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8001b68:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <LCD5110_UpdateArea+0x6c>)
 8001b6a:	797b      	ldrb	r3, [r7, #5]
 8001b6c:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <LCD5110_UpdateArea+0x70>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	79ba      	ldrb	r2, [r7, #6]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d202      	bcs.n	8001b7e <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8001b78:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <LCD5110_UpdateArea+0x70>)
 8001b7a:	79bb      	ldrb	r3, [r7, #6]
 8001b7c:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <LCD5110_UpdateArea+0x74>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	793a      	ldrb	r2, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d902      	bls.n	8001b8e <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8001b88:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <LCD5110_UpdateArea+0x74>)
 8001b8a:	793b      	ldrb	r3, [r7, #4]
 8001b8c:	7013      	strb	r3, [r2, #0]
	}
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc90      	pop	{r4, r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000228 	.word	0x20000228
 8001b9c:	20000229 	.word	0x20000229
 8001ba0:	2000022a 	.word	0x2000022a
 8001ba4:	2000022b 	.word	0x2000022b

08001ba8 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	71fb      	strb	r3, [r7, #7]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8001bb8:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <LCD5110_GotoXY+0x28>)
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <LCD5110_GotoXY+0x2c>)
 8001bc0:	79bb      	ldrb	r3, [r7, #6]
 8001bc2:	7013      	strb	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	20013590 	.word	0x20013590
 8001bd4:	20013591 	.word	0x20013591

08001bd8 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	460b      	mov	r3, r1
 8001be4:	71bb      	strb	r3, [r7, #6]
 8001be6:	4613      	mov	r3, r2
 8001be8:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8001bea:	797b      	ldrb	r3, [r7, #5]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d104      	bne.n	8001bfa <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8001bf4:	2306      	movs	r3, #6
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e003      	b.n	8001c02 <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 8001bfe:	2308      	movs	r3, #8
 8001c00:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8001c02:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <LCD5110_Putc+0x144>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	7bbb      	ldrb	r3, [r7, #14]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2b54      	cmp	r3, #84	; 0x54
 8001c0e:	dd09      	ble.n	8001c24 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8001c10:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <LCD5110_Putc+0x148>)
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	4413      	add	r3, r2
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <LCD5110_Putc+0x148>)
 8001c1c:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <LCD5110_Putc+0x144>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	737b      	strb	r3, [r7, #13]
 8001c28:	e068      	b.n	8001cfc <LCD5110_Putc+0x124>
		if (c < 32) {
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b1f      	cmp	r3, #31
 8001c2e:	d91c      	bls.n	8001c6a <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8001c30:	797b      	ldrb	r3, [r7, #5]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10c      	bne.n	8001c50 <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f1a3 0220 	sub.w	r2, r3, #32
 8001c3c:	7b79      	ldrb	r1, [r7, #13]
 8001c3e:	4839      	ldr	r0, [pc, #228]	; (8001d24 <LCD5110_Putc+0x14c>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	4403      	add	r3, r0
 8001c48:	440b      	add	r3, r1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	733b      	strb	r3, [r7, #12]
 8001c4e:	e00c      	b.n	8001c6a <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f1a3 0220 	sub.w	r2, r3, #32
 8001c56:	7b79      	ldrb	r1, [r7, #13]
 8001c58:	4833      	ldr	r0, [pc, #204]	; (8001d28 <LCD5110_Putc+0x150>)
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4403      	add	r3, r0
 8001c64:	440b      	add	r3, r1
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8001c6a:	7b3b      	ldrb	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d105      	bne.n	8001c7c <LCD5110_Putc+0xa4>
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <LCD5110_Putc+0xa4>
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	d13b      	bne.n	8001cf4 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	72fb      	strb	r3, [r7, #11]
 8001c80:	e02d      	b.n	8001cde <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d112      	bne.n	8001cae <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <LCD5110_Putc+0x144>)
 8001c8a:	7818      	ldrb	r0, [r3, #0]
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <LCD5110_Putc+0x148>)
 8001c8e:	781a      	ldrb	r2, [r3, #0]
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	4413      	add	r3, r2
 8001c94:	b2d9      	uxtb	r1, r3
 8001c96:	7b3a      	ldrb	r2, [r7, #12]
 8001c98:	7afb      	ldrb	r3, [r7, #11]
 8001c9a:	fa42 f303 	asr.w	r3, r2, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f7ff fe50 	bl	800194c <LCD5110_DrawPixel>
 8001cac:	e014      	b.n	8001cd8 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <LCD5110_Putc+0x144>)
 8001cb0:	7818      	ldrb	r0, [r3, #0]
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <LCD5110_Putc+0x148>)
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
 8001cb8:	4413      	add	r3, r2
 8001cba:	b2d9      	uxtb	r1, r3
 8001cbc:	7b3a      	ldrb	r2, [r7, #12]
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
 8001cc0:	fa42 f303 	asr.w	r3, r2, r3
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f7ff fe3a 	bl	800194c <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	72fb      	strb	r3, [r7, #11]
 8001cde:	7afa      	ldrb	r2, [r7, #11]
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d3cd      	bcc.n	8001c82 <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <LCD5110_Putc+0x144>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <LCD5110_Putc+0x144>)
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	e000      	b.n	8001cf6 <LCD5110_Putc+0x11e>
			continue;
 8001cf4:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8001cf6:	7b7b      	ldrb	r3, [r7, #13]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	737b      	strb	r3, [r7, #13]
 8001cfc:	7b7a      	ldrb	r2, [r7, #13]
 8001cfe:	7bbb      	ldrb	r3, [r7, #14]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	429a      	cmp	r2, r3
 8001d04:	db91      	blt.n	8001c2a <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <LCD5110_Putc+0x144>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <LCD5110_Putc+0x144>)
 8001d10:	701a      	strb	r2, [r3, #0]
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20013590 	.word	0x20013590
 8001d20:	20013591 	.word	0x20013591
 8001d24:	0800c04c 	.word	0x0800c04c
 8001d28:	0800be04 	.word	0x0800be04

08001d2c <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8001d3c:	e008      	b.n	8001d50 <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	78ba      	ldrb	r2, [r7, #2]
 8001d48:	78f9      	ldrb	r1, [r7, #3]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff44 	bl	8001bd8 <LCD5110_Putc>
	while (*c) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f2      	bne.n	8001d3e <LCD5110_Puts+0x12>
	}
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f103 0208 	add.w	r2, r3, #8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d7a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f103 0208 	add.w	r2, r3, #8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f103 0208 	add.w	r2, r3, #8
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	601a      	str	r2, [r3, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e1a:	d103      	bne.n	8001e24 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e00c      	b.n	8001e3e <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3308      	adds	r3, #8
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e002      	b.n	8001e32 <vListInsert+0x2e>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d2f6      	bcs.n	8001e2c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	601a      	str	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6892      	ldr	r2, [r2, #8]
 8001e8c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6852      	ldr	r2, [r2, #4]
 8001e96:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d103      	bne.n	8001eaa <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10a      	bne.n	8001ef4 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee2:	f383 8811 	msr	BASEPRI, r3
 8001ee6:	f3bf 8f6f 	isb	sy
 8001eea:	f3bf 8f4f 	dsb	sy
 8001eee:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001ef0:	bf00      	nop
 8001ef2:	e7fe      	b.n	8001ef2 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001ef4:	f002 f800 	bl	8003ef8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	441a      	add	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f24:	3b01      	subs	r3, #1
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	441a      	add	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	22ff      	movs	r2, #255	; 0xff
 8001f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	22ff      	movs	r2, #255	; 0xff
 8001f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00f      	beq.n	8001f72 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3310      	adds	r3, #16
 8001f56:	4618      	mov	r0, r3
 8001f58:	f001 f8e0 	bl	800311c <xTaskRemoveFromEventList>
 8001f5c:	e009      	b.n	8001f72 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3310      	adds	r3, #16
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fefd 	bl	8001d62 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3324      	adds	r3, #36	; 0x24
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fef8 	bl	8001d62 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001f72:	f001 fff1 	bl	8003f58 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10a      	bne.n	8001faa <xQueueGenericCreate+0x2a>
        __asm volatile
 8001f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	61bb      	str	r3, [r7, #24]
    }
 8001fa6:	bf00      	nop
 8001fa8:	e7fe      	b.n	8001fa8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <xQueueGenericCreate+0x48>
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d101      	bne.n	8001fcc <xQueueGenericCreate+0x4c>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <xQueueGenericCreate+0x4e>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10a      	bne.n	8001fe8 <xQueueGenericCreate+0x68>
        __asm volatile
 8001fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	617b      	str	r3, [r7, #20]
    }
 8001fe4:	bf00      	nop
 8001fe6:	e7fe      	b.n	8001fe6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001fee:	d90a      	bls.n	8002006 <xQueueGenericCreate+0x86>
        __asm volatile
 8001ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	613b      	str	r3, [r7, #16]
    }
 8002002:	bf00      	nop
 8002004:	e7fe      	b.n	8002004 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	3350      	adds	r3, #80	; 0x50
 800200a:	4618      	mov	r0, r3
 800200c:	f002 f89e 	bl	800414c <pvPortMalloc>
 8002010:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	3350      	adds	r3, #80	; 0x50
 8002020:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002022:	79fa      	ldrb	r2, [r7, #7]
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f805 	bl	800203e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002034:	6a3b      	ldr	r3, [r7, #32]
    }
 8002036:	4618      	mov	r0, r3
 8002038:	3728      	adds	r7, #40	; 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e002      	b.n	8002060 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800206c:	2101      	movs	r1, #1
 800206e:	69b8      	ldr	r0, [r7, #24]
 8002070:	f7ff ff2b 	bl	8001eca <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	68f9      	ldr	r1, [r7, #12]
 8002082:	2073      	movs	r0, #115	; 0x73
 8002084:	f003 fe8c 	bl	8005da0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b090      	sub	sp, #64	; 0x40
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800209e:	2300      	movs	r3, #0
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10a      	bne.n	80020c2 <xQueueGenericSend+0x32>
        __asm volatile
 80020ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80020be:	bf00      	nop
 80020c0:	e7fe      	b.n	80020c0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <xQueueGenericSend+0x40>
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <xQueueGenericSend+0x44>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <xQueueGenericSend+0x46>
 80020d4:	2300      	movs	r3, #0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10a      	bne.n	80020f0 <xQueueGenericSend+0x60>
        __asm volatile
 80020da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80020ec:	bf00      	nop
 80020ee:	e7fe      	b.n	80020ee <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d103      	bne.n	80020fe <xQueueGenericSend+0x6e>
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <xQueueGenericSend+0x72>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <xQueueGenericSend+0x74>
 8002102:	2300      	movs	r3, #0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <xQueueGenericSend+0x8e>
        __asm volatile
 8002108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	623b      	str	r3, [r7, #32]
    }
 800211a:	bf00      	nop
 800211c:	e7fe      	b.n	800211c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800211e:	f001 f997 	bl	8003450 <xTaskGetSchedulerState>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <xQueueGenericSend+0x9e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <xQueueGenericSend+0xa2>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <xQueueGenericSend+0xa4>
 8002132:	2300      	movs	r3, #0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <xQueueGenericSend+0xbe>
        __asm volatile
 8002138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213c:	f383 8811 	msr	BASEPRI, r3
 8002140:	f3bf 8f6f 	isb	sy
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	61fb      	str	r3, [r7, #28]
    }
 800214a:	bf00      	nop
 800214c:	e7fe      	b.n	800214c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800214e:	f001 fed3 	bl	8003ef8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <xQueueGenericSend+0xd4>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d11f      	bne.n	80021a4 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	4618      	mov	r0, r3
 8002168:	f004 fb84 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	460b      	mov	r3, r1
 8002176:	4601      	mov	r1, r0
 8002178:	205a      	movs	r0, #90	; 0x5a
 800217a:	f003 fe87 	bl	8005e8c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002184:	f000 fa56 	bl	8002634 <prvCopyDataToQueue>
 8002188:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	3324      	adds	r3, #36	; 0x24
 8002196:	4618      	mov	r0, r3
 8002198:	f000 ffc0 	bl	800311c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800219c:	f001 fedc 	bl	8003f58 <vPortExitCritical>
                return pdPASS;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e07d      	b.n	80022a0 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d110      	bne.n	80021cc <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80021aa:	f001 fed5 	bl	8003f58 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 fb5f 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	460b      	mov	r3, r1
 80021c0:	4601      	mov	r1, r0
 80021c2:	205a      	movs	r0, #90	; 0x5a
 80021c4:	f003 fe62 	bl	8005e8c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e069      	b.n	80022a0 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 80021cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 f806 	bl	80031e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80021dc:	2301      	movs	r3, #1
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80021e0:	f001 feba 	bl	8003f58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80021e4:	f000 fd90 	bl	8002d08 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80021e8:	f001 fe86 	bl	8003ef8 <vPortEnterCritical>
 80021ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f8:	d103      	bne.n	8002202 <xQueueGenericSend+0x172>
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002208:	b25b      	sxtb	r3, r3
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800220e:	d103      	bne.n	8002218 <xQueueGenericSend+0x188>
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002218:	f001 fe9e 	bl	8003f58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800221c:	1d3a      	adds	r2, r7, #4
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fff5 	bl	8003214 <xTaskCheckForTimeOut>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d124      	bne.n	800227a <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002232:	f000 faf7 	bl	8002824 <prvIsQueueFull>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d018      	beq.n	800226e <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	3310      	adds	r3, #16
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f000 ff17 	bl	8003078 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800224a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800224c:	f000 fa82 	bl	8002754 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002250:	f000 fd68 	bl	8002d24 <xTaskResumeAll>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	f47f af79 	bne.w	800214e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <xQueueGenericSend+0x218>)
 800225e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	e76f      	b.n	800214e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800226e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002270:	f000 fa70 	bl	8002754 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002274:	f000 fd56 	bl	8002d24 <xTaskResumeAll>
 8002278:	e769      	b.n	800214e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800227a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800227c:	f000 fa6a 	bl	8002754 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002280:	f000 fd50 	bl	8002d24 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	4618      	mov	r0, r3
 8002288:	f004 faf4 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	460b      	mov	r3, r1
 8002296:	4601      	mov	r1, r0
 8002298:	205a      	movs	r0, #90	; 0x5a
 800229a:	f003 fdf7 	bl	8005e8c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800229e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3738      	adds	r7, #56	; 0x38
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	e000ed04 	.word	0xe000ed04

080022ac <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b090      	sub	sp, #64	; 0x40
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80022be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80022d6:	bf00      	nop
 80022d8:	e7fe      	b.n	80022d8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <xQueueGenericSendFromISR+0x3c>
 80022e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <xQueueGenericSendFromISR+0x40>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <xQueueGenericSendFromISR+0x42>
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10a      	bne.n	8002308 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002304:	bf00      	nop
 8002306:	e7fe      	b.n	8002306 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d103      	bne.n	8002316 <xQueueGenericSendFromISR+0x6a>
 800230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <xQueueGenericSendFromISR+0x6e>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <xQueueGenericSendFromISR+0x70>
 800231a:	2300      	movs	r3, #0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	623b      	str	r3, [r7, #32]
    }
 8002332:	bf00      	nop
 8002334:	e7fe      	b.n	8002334 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002336:	f001 fec9 	bl	80040cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800233a:	f3ef 8211 	mrs	r2, BASEPRI
 800233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	61fa      	str	r2, [r7, #28]
 8002350:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002352:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	429a      	cmp	r2, r3
 8002360:	d302      	bcc.n	8002368 <xQueueGenericSendFromISR+0xbc>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d148      	bne.n	80023fa <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800236e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237a:	4618      	mov	r0, r3
 800237c:	f004 fa7a 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 8002380:	4601      	mov	r1, r0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	461a      	mov	r2, r3
 8002386:	2060      	movs	r0, #96	; 0x60
 8002388:	f003 fcb0 	bl	8005cec <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002392:	f000 f94f 	bl	8002634 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002396:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800239e:	d112      	bne.n	80023c6 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d025      	beq.n	80023f4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023aa:	3324      	adds	r3, #36	; 0x24
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 feb5 	bl	800311c <xTaskRemoveFromEventList>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01d      	beq.n	80023f4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d01a      	beq.n	80023f4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e016      	b.n	80023f4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80023c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023ca:	2b7f      	cmp	r3, #127	; 0x7f
 80023cc:	d10a      	bne.n	80023e4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	617b      	str	r3, [r7, #20]
    }
 80023e0:	bf00      	nop
 80023e2:	e7fe      	b.n	80023e2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80023e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023e8:	3301      	adds	r3, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	b25a      	sxtb	r2, r3
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80023f4:	2301      	movs	r3, #1
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80023f8:	e00b      	b.n	8002412 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	4618      	mov	r0, r3
 80023fe:	f004 fa39 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 8002402:	4601      	mov	r1, r0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	461a      	mov	r2, r3
 8002408:	2060      	movs	r0, #96	; 0x60
 800240a:	f003 fc6f 	bl	8005cec <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800240e:	2300      	movs	r3, #0
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002414:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800241c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800241e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002420:	4618      	mov	r0, r3
 8002422:	3740      	adds	r7, #64	; 0x40
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b08f      	sub	sp, #60	; 0x3c
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002434:	2300      	movs	r3, #0
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <xQueueReceive+0x30>
        __asm volatile
 8002442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	623b      	str	r3, [r7, #32]
    }
 8002454:	bf00      	nop
 8002456:	e7fe      	b.n	8002456 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <xQueueReceive+0x3e>
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <xQueueReceive+0x42>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <xQueueReceive+0x44>
 800246a:	2300      	movs	r3, #0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <xQueueReceive+0x5e>
        __asm volatile
 8002470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	61fb      	str	r3, [r7, #28]
    }
 8002482:	bf00      	nop
 8002484:	e7fe      	b.n	8002484 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002486:	f000 ffe3 	bl	8003450 <xTaskGetSchedulerState>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <xQueueReceive+0x6e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <xQueueReceive+0x72>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <xQueueReceive+0x74>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <xQueueReceive+0x8e>
        __asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	61bb      	str	r3, [r7, #24]
    }
 80024b2:	bf00      	nop
 80024b4:	e7fe      	b.n	80024b4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024b6:	f001 fd1f 	bl	8003ef8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d024      	beq.n	8002510 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ca:	f000 f91d 	bl	8002708 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	4618      	mov	r0, r3
 80024d2:	f004 f9cf 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 80024d6:	4604      	mov	r4, r0
 80024d8:	2000      	movs	r0, #0
 80024da:	f004 f9cb 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 80024de:	4602      	mov	r2, r0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2101      	movs	r1, #1
 80024e4:	9100      	str	r1, [sp, #0]
 80024e6:	4621      	mov	r1, r4
 80024e8:	205c      	movs	r0, #92	; 0x5c
 80024ea:	f003 fccf 	bl	8005e8c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	3310      	adds	r3, #16
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fe0a 	bl	800311c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002508:	f001 fd26 	bl	8003f58 <vPortExitCritical>
                return pdPASS;
 800250c:	2301      	movs	r3, #1
 800250e:	e08a      	b.n	8002626 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d113      	bne.n	800253e <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002516:	f001 fd1f 	bl	8003f58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	4618      	mov	r0, r3
 800251e:	f004 f9a9 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 8002522:	4604      	mov	r4, r0
 8002524:	2000      	movs	r0, #0
 8002526:	f004 f9a5 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 800252a:	4602      	mov	r2, r0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2101      	movs	r1, #1
 8002530:	9100      	str	r1, [sp, #0]
 8002532:	4621      	mov	r1, r4
 8002534:	205c      	movs	r0, #92	; 0x5c
 8002536:	f003 fca9 	bl	8005e8c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800253a:	2300      	movs	r3, #0
 800253c:	e073      	b.n	8002626 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fe4d 	bl	80031e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800254e:	2301      	movs	r3, #1
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002552:	f001 fd01 	bl	8003f58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002556:	f000 fbd7 	bl	8002d08 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800255a:	f001 fccd 	bl	8003ef8 <vPortEnterCritical>
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002564:	b25b      	sxtb	r3, r3
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800256a:	d103      	bne.n	8002574 <xQueueReceive+0x14c>
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800257a:	b25b      	sxtb	r3, r3
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002580:	d103      	bne.n	800258a <xQueueReceive+0x162>
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800258a:	f001 fce5 	bl	8003f58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800258e:	1d3a      	adds	r2, r7, #4
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fe3c 	bl	8003214 <xTaskCheckForTimeOut>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d124      	bne.n	80025ec <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a4:	f000 f928 	bl	80027f8 <prvIsQueueEmpty>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d018      	beq.n	80025e0 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b0:	3324      	adds	r3, #36	; 0x24
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fd5e 	bl	8003078 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025be:	f000 f8c9 	bl	8002754 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025c2:	f000 fbaf 	bl	8002d24 <xTaskResumeAll>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f47f af74 	bne.w	80024b6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <xQueueReceive+0x208>)
 80025d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	e76a      	b.n	80024b6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e2:	f000 f8b7 	bl	8002754 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025e6:	f000 fb9d 	bl	8002d24 <xTaskResumeAll>
 80025ea:	e764      	b.n	80024b6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025ee:	f000 f8b1 	bl	8002754 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025f2:	f000 fb97 	bl	8002d24 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025f8:	f000 f8fe 	bl	80027f8 <prvIsQueueEmpty>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f43f af59 	beq.w	80024b6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	4618      	mov	r0, r3
 8002608:	f004 f934 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 800260c:	4604      	mov	r4, r0
 800260e:	2000      	movs	r0, #0
 8002610:	f004 f930 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 8002614:	4602      	mov	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2101      	movs	r1, #1
 800261a:	9100      	str	r1, [sp, #0]
 800261c:	4621      	mov	r1, r4
 800261e:	205c      	movs	r0, #92	; 0x5c
 8002620:	f003 fc34 	bl	8005e8c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002624:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002626:	4618      	mov	r0, r3
 8002628:	3734      	adds	r7, #52	; 0x34
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	e000ed04 	.word	0xe000ed04

08002634 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002648:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d14d      	bne.n	80026f6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 ff14 	bl	800348c <xTaskPriorityDisinherit>
 8002664:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	e043      	b.n	80026f6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d119      	bne.n	80026a8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6858      	ldr	r0, [r3, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	461a      	mov	r2, r3
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	f006 fbf0 	bl	8008e64 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	441a      	add	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d32b      	bcc.n	80026f6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	e026      	b.n	80026f6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	68d8      	ldr	r0, [r3, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	461a      	mov	r2, r3
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	f006 fbd6 	bl	8008e64 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	425b      	negs	r3, r3
 80026c2:	441a      	add	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	425b      	negs	r3, r3
 80026de:	441a      	add	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d105      	bne.n	80026f6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80026fe:	697b      	ldr	r3, [r7, #20]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d018      	beq.n	800274c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	441a      	add	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d303      	bcc.n	800273c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68d9      	ldr	r1, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	461a      	mov	r2, r3
 8002746:	6838      	ldr	r0, [r7, #0]
 8002748:	f006 fb8c 	bl	8008e64 <memcpy>
    }
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800275c:	f001 fbcc 	bl	8003ef8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002766:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002768:	e011      	b.n	800278e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	2b00      	cmp	r3, #0
 8002770:	d012      	beq.n	8002798 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3324      	adds	r3, #36	; 0x24
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fcd0 	bl	800311c <xTaskRemoveFromEventList>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002782:	f000 fdad 	bl	80032e0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	3b01      	subs	r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002792:	2b00      	cmp	r3, #0
 8002794:	dce9      	bgt.n	800276a <prvUnlockQueue+0x16>
 8002796:	e000      	b.n	800279a <prvUnlockQueue+0x46>
                        break;
 8002798:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	22ff      	movs	r2, #255	; 0xff
 800279e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80027a2:	f001 fbd9 	bl	8003f58 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80027a6:	f001 fba7 	bl	8003ef8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027b0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027b2:	e011      	b.n	80027d8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d012      	beq.n	80027e2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3310      	adds	r3, #16
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fcab 	bl	800311c <xTaskRemoveFromEventList>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80027cc:	f000 fd88 	bl	80032e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80027d0:	7bbb      	ldrb	r3, [r7, #14]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	dce9      	bgt.n	80027b4 <prvUnlockQueue+0x60>
 80027e0:	e000      	b.n	80027e4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80027e2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	22ff      	movs	r2, #255	; 0xff
 80027e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80027ec:	f001 fbb4 	bl	8003f58 <vPortExitCritical>
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002800:	f001 fb7a 	bl	8003ef8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800280c:	2301      	movs	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e001      	b.n	8002816 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002816:	f001 fb9f 	bl	8003f58 <vPortExitCritical>

    return xReturn;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800282c:	f001 fb64 	bl	8003ef8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	429a      	cmp	r2, r3
 800283a:	d102      	bne.n	8002842 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800283c:	2301      	movs	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e001      	b.n	8002846 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002846:	f001 fb87 	bl	8003f58 <vPortExitCritical>

    return xReturn;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e01e      	b.n	80028a2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002864:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <vQueueAddToRegistry+0x60>)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d115      	bne.n	800289c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002870:	4910      	ldr	r1, [pc, #64]	; (80028b4 <vQueueAddToRegistry+0x60>)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <vQueueAddToRegistry+0x60>)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4618      	mov	r0, r3
 800288a:	f003 fff3 	bl	8006874 <SEGGER_SYSVIEW_ShrinkId>
 800288e:	4601      	mov	r1, r0
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	2071      	movs	r0, #113	; 0x71
 8002896:	f003 fa29 	bl	8005cec <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800289a:	e006      	b.n	80028aa <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3301      	adds	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b07      	cmp	r3, #7
 80028a6:	d9dd      	bls.n	8002864 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	2001378c 	.word	0x2001378c

080028b8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80028c8:	f001 fb16 	bl	8003ef8 <vPortEnterCritical>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d2:	b25b      	sxtb	r3, r3
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d8:	d103      	bne.n	80028e2 <vQueueWaitForMessageRestricted+0x2a>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ee:	d103      	bne.n	80028f8 <vQueueWaitForMessageRestricted+0x40>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f8:	f001 fb2e 	bl	8003f58 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3324      	adds	r3, #36	; 0x24
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fbd7 	bl	80030c0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff1e 	bl	8002754 <prvUnlockQueue>
    }
 8002918:	bf00      	nop
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	; 0x30
 8002924:	af04      	add	r7, sp, #16
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4618      	mov	r0, r3
 8002936:	f001 fc09 	bl	800414c <pvPortMalloc>
 800293a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00e      	beq.n	8002960 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002942:	2058      	movs	r0, #88	; 0x58
 8002944:	f001 fc02 	bl	800414c <pvPortMalloc>
 8002948:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
 8002956:	e005      	b.n	8002964 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002958:	6978      	ldr	r0, [r7, #20]
 800295a:	f001 fcd7 	bl	800430c <vPortFree>
 800295e:	e001      	b.n	8002964 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d013      	beq.n	8002992 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	2300      	movs	r3, #0
 800296e:	9303      	str	r3, [sp, #12]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	9302      	str	r3, [sp, #8]
 8002974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f80e 	bl	80029a2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002986:	69f8      	ldr	r0, [r7, #28]
 8002988:	f000 f8a2 	bl	8002ad0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800298c:	2301      	movs	r3, #1
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	e002      	b.n	8002998 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002996:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002998:	69bb      	ldr	r3, [r7, #24]
    }
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b088      	sub	sp, #32
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	461a      	mov	r2, r3
 80029ba:	21a5      	movs	r1, #165	; 0xa5
 80029bc:	f006 fa60 	bl	8008e80 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029ca:	3b01      	subs	r3, #1
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f023 0307 	bic.w	r3, r3, #7
 80029d8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <prvInitialiseNewTask+0x58>
        __asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	617b      	str	r3, [r7, #20]
    }
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01f      	beq.n	8002a40 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	e012      	b.n	8002a2c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	7819      	ldrb	r1, [r3, #0]
 8002a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	3334      	adds	r3, #52	; 0x34
 8002a16:	460a      	mov	r2, r1
 8002a18:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d006      	beq.n	8002a34 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b09      	cmp	r3, #9
 8002a30:	d9e9      	bls.n	8002a06 <prvInitialiseNewTask+0x64>
 8002a32:	e000      	b.n	8002a36 <prvInitialiseNewTask+0x94>
            {
                break;
 8002a34:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a3e:	e003      	b.n	8002a48 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d901      	bls.n	8002a52 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a5c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	2200      	movs	r2, #0
 8002a62:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	3304      	adds	r3, #4
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff f99a 	bl	8001da2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	3318      	adds	r3, #24
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f995 	bl	8001da2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	f1c3 0205 	rsb	r2, r3, #5
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	3350      	adds	r3, #80	; 0x50
 8002a92:	2204      	movs	r2, #4
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f006 f9f2 	bl	8008e80 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	3354      	adds	r3, #84	; 0x54
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f006 f9eb 	bl	8008e80 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	69b8      	ldr	r0, [r7, #24]
 8002ab0:	f001 f8f6 	bl	8003ca0 <pxPortInitialiseStack>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ac6:	bf00      	nop
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ad0:	b5b0      	push	{r4, r5, r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ad8:	f001 fa0e 	bl	8003ef8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002adc:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <prvAddNewTaskToReadyList+0xe4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	4a34      	ldr	r2, [pc, #208]	; (8002bb4 <prvAddNewTaskToReadyList+0xe4>)
 8002ae4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ae6:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <prvAddNewTaskToReadyList+0xe8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002aee:	4a32      	ldr	r2, [pc, #200]	; (8002bb8 <prvAddNewTaskToReadyList+0xe8>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <prvAddNewTaskToReadyList+0xe4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d110      	bne.n	8002b1e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002afc:	f000 fc0e 	bl	800331c <prvInitialiseTaskLists>
 8002b00:	e00d      	b.n	8002b1e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b02:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <prvAddNewTaskToReadyList+0xec>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b0a:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <prvAddNewTaskToReadyList+0xe8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d802      	bhi.n	8002b1e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b18:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <prvAddNewTaskToReadyList+0xe8>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <prvAddNewTaskToReadyList+0xf0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <prvAddNewTaskToReadyList+0xf0>)
 8002b26:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <prvAddNewTaskToReadyList+0xf0>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d016      	beq.n	8002b64 <prvAddNewTaskToReadyList+0x94>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 fd75 	bl	8006628 <SEGGER_SYSVIEW_OnTaskCreate>
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	461d      	mov	r5, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461c      	mov	r4, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	1ae3      	subs	r3, r4, r3
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	462b      	mov	r3, r5
 8002b60:	f002 fb9a 	bl	8005298 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fde2 	bl	8006730 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	2201      	movs	r2, #1
 8002b72:	409a      	lsls	r2, r3
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <prvAddNewTaskToReadyList+0xf4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <prvAddNewTaskToReadyList+0xf4>)
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <prvAddNewTaskToReadyList+0xf8>)
 8002b8c:	441a      	add	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f7ff f911 	bl	8001dbc <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b9a:	f001 f9dd 	bl	8003f58 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <prvAddNewTaskToReadyList+0xec>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <prvAddNewTaskToReadyList+0xe8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000304 	.word	0x20000304
 8002bb8:	2000022c 	.word	0x2000022c
 8002bbc:	20000310 	.word	0x20000310
 8002bc0:	20000320 	.word	0x20000320
 8002bc4:	2000030c 	.word	0x2000030c
 8002bc8:	20000230 	.word	0x20000230

08002bcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01b      	beq.n	8002c16 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <vTaskDelay+0x68>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <vTaskDelay+0x30>
        __asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	60bb      	str	r3, [r7, #8]
    }
 8002bf8:	bf00      	nop
 8002bfa:	e7fe      	b.n	8002bfa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002bfc:	f000 f884 	bl	8002d08 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	2023      	movs	r0, #35	; 0x23
 8002c04:	f003 f836 	bl	8005c74 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c08:	2100      	movs	r1, #0
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fcbe 	bl	800358c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002c10:	f000 f888 	bl	8002d24 <xTaskResumeAll>
 8002c14:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <vTaskDelay+0x6c>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	2000032c 	.word	0x2000032c
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002c42:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <vTaskStartScheduler+0xac>)
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	2300      	movs	r3, #0
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2282      	movs	r2, #130	; 0x82
 8002c4e:	4927      	ldr	r1, [pc, #156]	; (8002cec <vTaskStartScheduler+0xb0>)
 8002c50:	4827      	ldr	r0, [pc, #156]	; (8002cf0 <vTaskStartScheduler+0xb4>)
 8002c52:	f7ff fe65 	bl	8002920 <xTaskCreate>
 8002c56:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002c5e:	f000 fd0d 	bl	800367c <xTimerCreateTimerTask>
 8002c62:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d129      	bne.n	8002cbe <vTaskStartScheduler+0x82>
        __asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	60bb      	str	r3, [r7, #8]
    }
 8002c7c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <vTaskStartScheduler+0xb8>)
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c84:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <vTaskStartScheduler+0xbc>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <vTaskStartScheduler+0xc0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <vTaskStartScheduler+0xc4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3334      	adds	r3, #52	; 0x34
 8002c98:	2205      	movs	r2, #5
 8002c9a:	4914      	ldr	r1, [pc, #80]	; (8002cec <vTaskStartScheduler+0xb0>)
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f006 f8d3 	bl	8008e48 <memcmp>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <vTaskStartScheduler+0x78>
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <vTaskStartScheduler+0xc4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 fcfd 	bl	80066ac <SEGGER_SYSVIEW_OnTaskStartExec>
 8002cb2:	e001      	b.n	8002cb8 <vTaskStartScheduler+0x7c>
 8002cb4:	f003 fc9c 	bl	80065f0 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002cb8:	f001 f87c 	bl	8003db4 <xPortStartScheduler>
 8002cbc:	e00e      	b.n	8002cdc <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc4:	d10a      	bne.n	8002cdc <vTaskStartScheduler+0xa0>
        __asm volatile
 8002cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	607b      	str	r3, [r7, #4]
    }
 8002cd8:	bf00      	nop
 8002cda:	e7fe      	b.n	8002cda <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <vTaskStartScheduler+0xc8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000328 	.word	0x20000328
 8002cec:	0800bbf8 	.word	0x0800bbf8
 8002cf0:	080032f9 	.word	0x080032f9
 8002cf4:	20000324 	.word	0x20000324
 8002cf8:	20000310 	.word	0x20000310
 8002cfc:	20000308 	.word	0x20000308
 8002d00:	2000022c 	.word	0x2000022c
 8002d04:	20000014 	.word	0x20000014

08002d08 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <vTaskSuspendAll+0x18>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	4a03      	ldr	r2, [pc, #12]	; (8002d20 <vTaskSuspendAll+0x18>)
 8002d14:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	2000032c 	.word	0x2000032c

08002d24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <xTaskResumeAll+0x104>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10a      	bne.n	8002d50 <xTaskResumeAll+0x2c>
        __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	603b      	str	r3, [r7, #0]
    }
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d50:	f001 f8d2 	bl	8003ef8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d54:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <xTaskResumeAll+0x104>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	4a33      	ldr	r2, [pc, #204]	; (8002e28 <xTaskResumeAll+0x104>)
 8002d5c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d5e:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <xTaskResumeAll+0x104>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d159      	bne.n	8002e1a <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <xTaskResumeAll+0x108>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d055      	beq.n	8002e1a <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d6e:	e032      	b.n	8002dd6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d70:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <xTaskResumeAll+0x10c>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3318      	adds	r3, #24
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f87a 	bl	8001e76 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3304      	adds	r3, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f875 	bl	8001e76 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 fcce 	bl	8006730 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	2201      	movs	r2, #1
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <xTaskResumeAll+0x110>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <xTaskResumeAll+0x110>)
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <xTaskResumeAll+0x114>)
 8002db4:	441a      	add	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7fe fffd 	bl	8001dbc <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <xTaskResumeAll+0x118>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d302      	bcc.n	8002dd6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <xTaskResumeAll+0x11c>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dd6:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <xTaskResumeAll+0x10c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1c8      	bne.n	8002d70 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002de4:	f000 fb18 	bl	8003418 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <xTaskResumeAll+0x120>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002df4:	f000 f838 	bl	8002e68 <xTaskIncrementTick>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <xTaskResumeAll+0x11c>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f1      	bne.n	8002df4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <xTaskResumeAll+0x120>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e16:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <xTaskResumeAll+0x11c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e1a:	f001 f89d 	bl	8003f58 <vPortExitCritical>

    return xAlreadyYielded;
 8002e1e:	687b      	ldr	r3, [r7, #4]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	2000032c 	.word	0x2000032c
 8002e2c:	20000304 	.word	0x20000304
 8002e30:	200002c4 	.word	0x200002c4
 8002e34:	2000030c 	.word	0x2000030c
 8002e38:	20000230 	.word	0x20000230
 8002e3c:	2000022c 	.word	0x2000022c
 8002e40:	20000318 	.word	0x20000318
 8002e44:	20000314 	.word	0x20000314

08002e48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <xTaskGetTickCount+0x1c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e54:	687b      	ldr	r3, [r7, #4]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000308 	.word	0x20000308

08002e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e72:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <xTaskIncrementTick+0x110>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d173      	bne.n	8002f62 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e7a:	4b40      	ldr	r3, [pc, #256]	; (8002f7c <xTaskIncrementTick+0x114>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e82:	4a3e      	ldr	r2, [pc, #248]	; (8002f7c <xTaskIncrementTick+0x114>)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d120      	bne.n	8002ed0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e8e:	4b3c      	ldr	r3, [pc, #240]	; (8002f80 <xTaskIncrementTick+0x118>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <xTaskIncrementTick+0x46>
        __asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	603b      	str	r3, [r7, #0]
    }
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <xTaskIncrementTick+0x44>
 8002eae:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <xTaskIncrementTick+0x118>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <xTaskIncrementTick+0x11c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a31      	ldr	r2, [pc, #196]	; (8002f80 <xTaskIncrementTick+0x118>)
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	4a31      	ldr	r2, [pc, #196]	; (8002f84 <xTaskIncrementTick+0x11c>)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <xTaskIncrementTick+0x120>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	4a2f      	ldr	r2, [pc, #188]	; (8002f88 <xTaskIncrementTick+0x120>)
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	f000 faa4 	bl	8003418 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ed0:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <xTaskIncrementTick+0x124>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d348      	bcc.n	8002f6c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eda:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <xTaskIncrementTick+0x118>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee4:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <xTaskIncrementTick+0x124>)
 8002ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eea:	601a      	str	r2, [r3, #0]
                    break;
 8002eec:	e03e      	b.n	8002f6c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <xTaskIncrementTick+0x118>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d203      	bcs.n	8002f0e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f06:	4a21      	ldr	r2, [pc, #132]	; (8002f8c <xTaskIncrementTick+0x124>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f0c:	e02e      	b.n	8002f6c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe ffaf 	bl	8001e76 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	3318      	adds	r3, #24
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe ffa6 	bl	8001e76 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 fbff 	bl	8006730 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	2201      	movs	r2, #1
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <xTaskIncrementTick+0x128>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <xTaskIncrementTick+0x128>)
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <xTaskIncrementTick+0x12c>)
 8002f52:	441a      	add	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f7fe ff2e 	bl	8001dbc <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f60:	e7bb      	b.n	8002eda <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <xTaskIncrementTick+0x130>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <xTaskIncrementTick+0x130>)
 8002f6a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002f6c:	697b      	ldr	r3, [r7, #20]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	2000032c 	.word	0x2000032c
 8002f7c:	20000308 	.word	0x20000308
 8002f80:	200002bc 	.word	0x200002bc
 8002f84:	200002c0 	.word	0x200002c0
 8002f88:	2000031c 	.word	0x2000031c
 8002f8c:	20000324 	.word	0x20000324
 8002f90:	2000030c 	.word	0x2000030c
 8002f94:	20000230 	.word	0x20000230
 8002f98:	20000314 	.word	0x20000314

08002f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <vTaskSwitchContext+0xc4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002faa:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <vTaskSwitchContext+0xc8>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002fb0:	e052      	b.n	8003058 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <vTaskSwitchContext+0xc8>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <vTaskSwitchContext+0xcc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	f1c3 031f 	rsb	r3, r3, #31
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	4927      	ldr	r1, [pc, #156]	; (800306c <vTaskSwitchContext+0xd0>)
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	607b      	str	r3, [r7, #4]
    }
 8002ff4:	bf00      	nop
 8002ff6:	e7fe      	b.n	8002ff6 <vTaskSwitchContext+0x5a>
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <vTaskSwitchContext+0xd0>)
 8003004:	4413      	add	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	3308      	adds	r3, #8
 800301a:	429a      	cmp	r2, r3
 800301c:	d104      	bne.n	8003028 <vTaskSwitchContext+0x8c>
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	4a10      	ldr	r2, [pc, #64]	; (8003070 <vTaskSwitchContext+0xd4>)
 8003030:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <vTaskSwitchContext+0xd4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3334      	adds	r3, #52	; 0x34
 8003038:	2205      	movs	r2, #5
 800303a:	490e      	ldr	r1, [pc, #56]	; (8003074 <vTaskSwitchContext+0xd8>)
 800303c:	4618      	mov	r0, r3
 800303e:	f005 ff03 	bl	8008e48 <memcmp>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <vTaskSwitchContext+0xb8>
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <vTaskSwitchContext+0xd4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fb2d 	bl	80066ac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003052:	e001      	b.n	8003058 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8003054:	f003 facc 	bl	80065f0 <SEGGER_SYSVIEW_OnIdle>
}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	2000032c 	.word	0x2000032c
 8003064:	20000318 	.word	0x20000318
 8003068:	2000030c 	.word	0x2000030c
 800306c:	20000230 	.word	0x20000230
 8003070:	2000022c 	.word	0x2000022c
 8003074:	0800bbf8 	.word	0x0800bbf8

08003078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	60fb      	str	r3, [r7, #12]
    }
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <vTaskPlaceOnEventList+0x44>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3318      	adds	r3, #24
 80030a4:	4619      	mov	r1, r3
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fe feac 	bl	8001e04 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030ac:	2101      	movs	r1, #1
 80030ae:	6838      	ldr	r0, [r7, #0]
 80030b0:	f000 fa6c 	bl	800358c <prvAddCurrentTaskToDelayedList>
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	2000022c 	.word	0x2000022c

080030c0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	617b      	str	r3, [r7, #20]
    }
 80030e4:	bf00      	nop
 80030e6:	e7fe      	b.n	80030e6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <vTaskPlaceOnEventListRestricted+0x58>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3318      	adds	r3, #24
 80030ee:	4619      	mov	r1, r3
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7fe fe63 	bl	8001dbc <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003100:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003102:	2024      	movs	r0, #36	; 0x24
 8003104:	f002 fd98 	bl	8005c38 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	68b8      	ldr	r0, [r7, #8]
 800310c:	f000 fa3e 	bl	800358c <prvAddCurrentTaskToDelayedList>
    }
 8003110:	bf00      	nop
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	2000022c 	.word	0x2000022c

0800311c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	60fb      	str	r3, [r7, #12]
    }
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	3318      	adds	r3, #24
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe fe92 	bl	8001e76 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003152:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <xTaskRemoveFromEventList+0xb4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d120      	bne.n	800319c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3304      	adds	r3, #4
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fe89 	bl	8001e76 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4618      	mov	r0, r3
 8003168:	f003 fae2 	bl	8006730 <SEGGER_SYSVIEW_OnTaskStartReady>
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2201      	movs	r2, #1
 8003172:	409a      	lsls	r2, r3
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <xTaskRemoveFromEventList+0xb8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <xTaskRemoveFromEventList+0xb8>)
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <xTaskRemoveFromEventList+0xbc>)
 800318c:	441a      	add	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	3304      	adds	r3, #4
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f7fe fe11 	bl	8001dbc <vListInsertEnd>
 800319a:	e005      	b.n	80031a8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	3318      	adds	r3, #24
 80031a0:	4619      	mov	r1, r3
 80031a2:	480e      	ldr	r0, [pc, #56]	; (80031dc <xTaskRemoveFromEventList+0xc0>)
 80031a4:	f7fe fe0a 	bl	8001dbc <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <xTaskRemoveFromEventList+0xc4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d905      	bls.n	80031c2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80031b6:	2301      	movs	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <xTaskRemoveFromEventList+0xc8>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	e001      	b.n	80031c6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80031c6:	697b      	ldr	r3, [r7, #20]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	2000032c 	.word	0x2000032c
 80031d4:	2000030c 	.word	0x2000030c
 80031d8:	20000230 	.word	0x20000230
 80031dc:	200002c4 	.word	0x200002c4
 80031e0:	2000022c 	.word	0x2000022c
 80031e4:	20000318 	.word	0x20000318

080031e8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <vTaskInternalSetTimeOutState+0x24>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <vTaskInternalSetTimeOutState+0x28>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	605a      	str	r2, [r3, #4]
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	2000031c 	.word	0x2000031c
 8003210:	20000308 	.word	0x20000308

08003214 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	613b      	str	r3, [r7, #16]
    }
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	60fb      	str	r3, [r7, #12]
    }
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003256:	f000 fe4f 	bl	8003ef8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800325a:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <xTaskCheckForTimeOut+0xc4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003272:	d102      	bne.n	800327a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	e026      	b.n	80032c8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <xTaskCheckForTimeOut+0xc8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d00a      	beq.n	800329c <xTaskCheckForTimeOut+0x88>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	429a      	cmp	r2, r3
 800328e:	d305      	bcc.n	800329c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003290:	2301      	movs	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e015      	b.n	80032c8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d20b      	bcs.n	80032be <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	1ad2      	subs	r2, r2, r3
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ff98 	bl	80031e8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	e004      	b.n	80032c8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80032c8:	f000 fe46 	bl	8003f58 <vPortExitCritical>

    return xReturn;
 80032cc:	69fb      	ldr	r3, [r7, #28]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000308 	.word	0x20000308
 80032dc:	2000031c 	.word	0x2000031c

080032e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <vTaskMissedYield+0x14>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	20000318 	.word	0x20000318

080032f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003300:	f000 f84c 	bl	800339c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <prvIdleTask+0x20>)
 8003306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003314:	e7f4      	b.n	8003300 <prvIdleTask+0x8>
 8003316:	bf00      	nop
 8003318:	e000ed04 	.word	0xe000ed04

0800331c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	e00c      	b.n	8003342 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <prvInitialiseTaskLists+0x60>)
 8003334:	4413      	add	r3, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fd13 	bl	8001d62 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d9ef      	bls.n	8003328 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003348:	480d      	ldr	r0, [pc, #52]	; (8003380 <prvInitialiseTaskLists+0x64>)
 800334a:	f7fe fd0a 	bl	8001d62 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800334e:	480d      	ldr	r0, [pc, #52]	; (8003384 <prvInitialiseTaskLists+0x68>)
 8003350:	f7fe fd07 	bl	8001d62 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003354:	480c      	ldr	r0, [pc, #48]	; (8003388 <prvInitialiseTaskLists+0x6c>)
 8003356:	f7fe fd04 	bl	8001d62 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800335a:	480c      	ldr	r0, [pc, #48]	; (800338c <prvInitialiseTaskLists+0x70>)
 800335c:	f7fe fd01 	bl	8001d62 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <prvInitialiseTaskLists+0x74>)
 8003362:	f7fe fcfe 	bl	8001d62 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <prvInitialiseTaskLists+0x78>)
 8003368:	4a05      	ldr	r2, [pc, #20]	; (8003380 <prvInitialiseTaskLists+0x64>)
 800336a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <prvInitialiseTaskLists+0x7c>)
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <prvInitialiseTaskLists+0x68>)
 8003370:	601a      	str	r2, [r3, #0]
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000230 	.word	0x20000230
 8003380:	20000294 	.word	0x20000294
 8003384:	200002a8 	.word	0x200002a8
 8003388:	200002c4 	.word	0x200002c4
 800338c:	200002d8 	.word	0x200002d8
 8003390:	200002f0 	.word	0x200002f0
 8003394:	200002bc 	.word	0x200002bc
 8003398:	200002c0 	.word	0x200002c0

0800339c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033a2:	e019      	b.n	80033d8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80033a4:	f000 fda8 	bl	8003ef8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <prvCheckTasksWaitingTermination+0x50>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe fd5e 	bl	8001e76 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <prvCheckTasksWaitingTermination+0x54>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3b01      	subs	r3, #1
 80033c0:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <prvCheckTasksWaitingTermination+0x54>)
 80033c2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <prvCheckTasksWaitingTermination+0x58>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <prvCheckTasksWaitingTermination+0x58>)
 80033cc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80033ce:	f000 fdc3 	bl	8003f58 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f810 	bl	80033f8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <prvCheckTasksWaitingTermination+0x58>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e1      	bne.n	80033a4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200002d8 	.word	0x200002d8
 80033f0:	20000304 	.word	0x20000304
 80033f4:	200002ec 	.word	0x200002ec

080033f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4618      	mov	r0, r3
 8003406:	f000 ff81 	bl	800430c <vPortFree>
                vPortFree( pxTCB );
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 ff7e 	bl	800430c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <prvResetNextTaskUnblockTime+0x30>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d104      	bne.n	8003430 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <prvResetNextTaskUnblockTime+0x34>)
 8003428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800342c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800342e:	e005      	b.n	800343c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <prvResetNextTaskUnblockTime+0x30>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <prvResetNextTaskUnblockTime+0x34>)
 800343a:	6013      	str	r3, [r2, #0]
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	200002bc 	.word	0x200002bc
 800344c:	20000324 	.word	0x20000324

08003450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <xTaskGetSchedulerState+0x34>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800345e:	2301      	movs	r3, #1
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	e008      	b.n	8003476 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <xTaskGetSchedulerState+0x38>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800346c:	2302      	movs	r3, #2
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	e001      	b.n	8003476 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003476:	687b      	ldr	r3, [r7, #4]
    }
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	20000310 	.word	0x20000310
 8003488:	2000032c 	.word	0x2000032c

0800348c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d068      	beq.n	8003574 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80034a2:	4b37      	ldr	r3, [pc, #220]	; (8003580 <xTaskPriorityDisinherit+0xf4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d00a      	beq.n	80034c2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	60fb      	str	r3, [r7, #12]
    }
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	60bb      	str	r3, [r7, #8]
    }
 80034dc:	bf00      	nop
 80034de:	e7fe      	b.n	80034de <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d03e      	beq.n	8003574 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d13a      	bne.n	8003574 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	3304      	adds	r3, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fcb7 	bl	8001e76 <uxListRemove>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	2201      	movs	r2, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43da      	mvns	r2, r3
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <xTaskPriorityDisinherit+0xf8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4013      	ands	r3, r2
 8003520:	4a18      	ldr	r2, [pc, #96]	; (8003584 <xTaskPriorityDisinherit+0xf8>)
 8003522:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4619      	mov	r1, r3
 8003528:	204a      	movs	r0, #74	; 0x4a
 800352a:	f002 fba3 	bl	8005c74 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f1c3 0205 	rsb	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	2201      	movs	r2, #1
 8003548:	409a      	lsls	r2, r3
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <xTaskPriorityDisinherit+0xf8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <xTaskPriorityDisinherit+0xf8>)
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4a09      	ldr	r2, [pc, #36]	; (8003588 <xTaskPriorityDisinherit+0xfc>)
 8003562:	441a      	add	r2, r3
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f7fe fc26 	bl	8001dbc <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003570:	2301      	movs	r3, #1
 8003572:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003574:	697b      	ldr	r3, [r7, #20]
    }
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	2000022c 	.word	0x2000022c
 8003584:	2000030c 	.word	0x2000030c
 8003588:	20000230 	.word	0x20000230

0800358c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003596:	4b32      	ldr	r3, [pc, #200]	; (8003660 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800359c:	4b31      	ldr	r3, [pc, #196]	; (8003664 <prvAddCurrentTaskToDelayedList+0xd8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3304      	adds	r3, #4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fc67 	bl	8001e76 <uxListRemove>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80035ae:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2201      	movs	r2, #1
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <prvAddCurrentTaskToDelayedList+0xdc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4013      	ands	r3, r2
 80035c2:	4a29      	ldr	r2, [pc, #164]	; (8003668 <prvAddCurrentTaskToDelayedList+0xdc>)
 80035c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035cc:	d110      	bne.n	80035f0 <prvAddCurrentTaskToDelayedList+0x64>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00d      	beq.n	80035f0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80035d4:	4b23      	ldr	r3, [pc, #140]	; (8003664 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	211b      	movs	r1, #27
 80035da:	4618      	mov	r0, r3
 80035dc:	f003 f8ea 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e0:	4b20      	ldr	r3, [pc, #128]	; (8003664 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3304      	adds	r3, #4
 80035e6:	4619      	mov	r1, r3
 80035e8:	4820      	ldr	r0, [pc, #128]	; (800366c <prvAddCurrentTaskToDelayedList+0xe0>)
 80035ea:	f7fe fbe7 	bl	8001dbc <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80035ee:	e032      	b.n	8003656 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	429a      	cmp	r2, r3
 8003606:	d20f      	bcs.n	8003628 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003608:	4b16      	ldr	r3, [pc, #88]	; (8003664 <prvAddCurrentTaskToDelayedList+0xd8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2104      	movs	r1, #4
 800360e:	4618      	mov	r0, r3
 8003610:	f003 f8d0 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003614:	4b16      	ldr	r3, [pc, #88]	; (8003670 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b12      	ldr	r3, [pc, #72]	; (8003664 <prvAddCurrentTaskToDelayedList+0xd8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3304      	adds	r3, #4
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f7fe fbef 	bl	8001e04 <vListInsert>
}
 8003626:	e016      	b.n	8003656 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <prvAddCurrentTaskToDelayedList+0xd8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2104      	movs	r1, #4
 800362e:	4618      	mov	r0, r3
 8003630:	f003 f8c0 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <prvAddCurrentTaskToDelayedList+0xd8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3304      	adds	r3, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f7fe fbdf 	bl	8001e04 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <prvAddCurrentTaskToDelayedList+0xec>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	429a      	cmp	r2, r3
 800364e:	d202      	bcs.n	8003656 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003650:	4a09      	ldr	r2, [pc, #36]	; (8003678 <prvAddCurrentTaskToDelayedList+0xec>)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	6013      	str	r3, [r2, #0]
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000308 	.word	0x20000308
 8003664:	2000022c 	.word	0x2000022c
 8003668:	2000030c 	.word	0x2000030c
 800366c:	200002f0 	.word	0x200002f0
 8003670:	200002c0 	.word	0x200002c0
 8003674:	200002bc 	.word	0x200002bc
 8003678:	20000324 	.word	0x20000324

0800367c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003686:	f000 fad5 	bl	8003c34 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <xTimerCreateTimerTask+0x54>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <xTimerCreateTimerTask+0x58>)
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	2302      	movs	r3, #2
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2300      	movs	r3, #0
 800369c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036a0:	490d      	ldr	r1, [pc, #52]	; (80036d8 <xTimerCreateTimerTask+0x5c>)
 80036a2:	480e      	ldr	r0, [pc, #56]	; (80036dc <xTimerCreateTimerTask+0x60>)
 80036a4:	f7ff f93c 	bl	8002920 <xTaskCreate>
 80036a8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	603b      	str	r3, [r7, #0]
    }
 80036c2:	bf00      	nop
 80036c4:	e7fe      	b.n	80036c4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80036c6:	687b      	ldr	r3, [r7, #4]
    }
 80036c8:	4618      	mov	r0, r3
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000360 	.word	0x20000360
 80036d4:	20000364 	.word	0x20000364
 80036d8:	0800bc00 	.word	0x0800bc00
 80036dc:	08003815 	.word	0x08003815

080036e0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <xTimerGenericCommand+0x2e>
        __asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	623b      	str	r3, [r7, #32]
    }
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <xTimerGenericCommand+0x98>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d02a      	beq.n	800376c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b05      	cmp	r3, #5
 8003726:	dc18      	bgt.n	800375a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003728:	f7ff fe92 	bl	8003450 <xTaskGetSchedulerState>
 800372c:	4603      	mov	r3, r0
 800372e:	2b02      	cmp	r3, #2
 8003730:	d109      	bne.n	8003746 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <xTimerGenericCommand+0x98>)
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	f107 0114 	add.w	r1, r7, #20
 800373a:	2300      	movs	r3, #0
 800373c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373e:	f7fe fca7 	bl	8002090 <xQueueGenericSend>
 8003742:	6278      	str	r0, [r7, #36]	; 0x24
 8003744:	e012      	b.n	800376c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <xTimerGenericCommand+0x98>)
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	f107 0114 	add.w	r1, r7, #20
 800374e:	2300      	movs	r3, #0
 8003750:	2200      	movs	r2, #0
 8003752:	f7fe fc9d 	bl	8002090 <xQueueGenericSend>
 8003756:	6278      	str	r0, [r7, #36]	; 0x24
 8003758:	e008      	b.n	800376c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800375a:	4b07      	ldr	r3, [pc, #28]	; (8003778 <xTimerGenericCommand+0x98>)
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	f107 0114 	add.w	r1, r7, #20
 8003762:	2300      	movs	r3, #0
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	f7fe fda1 	bl	80022ac <xQueueGenericSendFromISR>
 800376a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800376e:	4618      	mov	r0, r3
 8003770:	3728      	adds	r7, #40	; 0x28
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000360 	.word	0x20000360

0800377c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af02      	add	r7, sp, #8
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003786:	4b22      	ldr	r3, [pc, #136]	; (8003810 <prvProcessExpiredTimer+0x94>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3304      	adds	r3, #4
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe fb6e 	bl	8001e76 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d022      	beq.n	80037ee <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	699a      	ldr	r2, [r3, #24]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	18d1      	adds	r1, r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	6978      	ldr	r0, [r7, #20]
 80037b6:	f000 f8d1 	bl	800395c <prvInsertTimerInActiveList>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01f      	beq.n	8003800 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037c0:	2300      	movs	r3, #0
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	2100      	movs	r1, #0
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff88 	bl	80036e0 <xTimerGenericCommand>
 80037d0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	60fb      	str	r3, [r7, #12]
    }
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	6978      	ldr	r0, [r7, #20]
 8003806:	4798      	blx	r3
    }
 8003808:	bf00      	nop
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000358 	.word	0x20000358

08003814 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800381c:	f107 0308 	add.w	r3, r7, #8
 8003820:	4618      	mov	r0, r3
 8003822:	f000 f857 	bl	80038d4 <prvGetNextExpireTime>
 8003826:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4619      	mov	r1, r3
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f803 	bl	8003838 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003832:	f000 f8d5 	bl	80039e0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003836:	e7f1      	b.n	800381c <prvTimerTask+0x8>

08003838 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003842:	f7ff fa61 	bl	8002d08 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f866 	bl	800391c <prvSampleTimeNow>
 8003850:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d130      	bne.n	80038ba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <prvProcessTimerOrBlockTask+0x3c>
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	429a      	cmp	r2, r3
 8003864:	d806      	bhi.n	8003874 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003866:	f7ff fa5d 	bl	8002d24 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff85 	bl	800377c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003872:	e024      	b.n	80038be <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800387a:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <prvProcessTimerOrBlockTask+0x90>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <prvProcessTimerOrBlockTask+0x50>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <prvProcessTimerOrBlockTask+0x52>
 8003888:	2300      	movs	r3, #0
 800388a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <prvProcessTimerOrBlockTask+0x94>)
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	f7ff f80d 	bl	80028b8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800389e:	f7ff fa41 	bl	8002d24 <xTaskResumeAll>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <prvProcessTimerOrBlockTask+0x98>)
 80038aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	f3bf 8f6f 	isb	sy
    }
 80038b8:	e001      	b.n	80038be <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80038ba:	f7ff fa33 	bl	8002d24 <xTaskResumeAll>
    }
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	2000035c 	.word	0x2000035c
 80038cc:	20000360 	.word	0x20000360
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <prvGetNextExpireTime+0x44>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <prvGetNextExpireTime+0x16>
 80038e6:	2201      	movs	r2, #1
 80038e8:	e000      	b.n	80038ec <prvGetNextExpireTime+0x18>
 80038ea:	2200      	movs	r2, #0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038f8:	4b07      	ldr	r3, [pc, #28]	; (8003918 <prvGetNextExpireTime+0x44>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	e001      	b.n	8003908 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003908:	68fb      	ldr	r3, [r7, #12]
    }
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000358 	.word	0x20000358

0800391c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003924:	f7ff fa90 	bl	8002e48 <xTaskGetTickCount>
 8003928:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <prvSampleTimeNow+0x3c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	429a      	cmp	r2, r3
 8003932:	d205      	bcs.n	8003940 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003934:	f000 f91a 	bl	8003b6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e002      	b.n	8003946 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003946:	4a04      	ldr	r2, [pc, #16]	; (8003958 <prvSampleTimeNow+0x3c>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800394c:	68fb      	ldr	r3, [r7, #12]
    }
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000368 	.word	0x20000368

0800395c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	429a      	cmp	r2, r3
 8003980:	d812      	bhi.n	80039a8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	1ad2      	subs	r2, r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	429a      	cmp	r2, r3
 800398e:	d302      	bcc.n	8003996 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003990:	2301      	movs	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e01b      	b.n	80039ce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <prvInsertTimerInActiveList+0x7c>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3304      	adds	r3, #4
 800399e:	4619      	mov	r1, r3
 80039a0:	4610      	mov	r0, r2
 80039a2:	f7fe fa2f 	bl	8001e04 <vListInsert>
 80039a6:	e012      	b.n	80039ce <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d206      	bcs.n	80039be <prvInsertTimerInActiveList+0x62>
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d302      	bcc.n	80039be <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80039b8:	2301      	movs	r3, #1
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	e007      	b.n	80039ce <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <prvInsertTimerInActiveList+0x80>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	4610      	mov	r0, r2
 80039ca:	f7fe fa1b 	bl	8001e04 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80039ce:	697b      	ldr	r3, [r7, #20]
    }
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	2000035c 	.word	0x2000035c
 80039dc:	20000358 	.word	0x20000358

080039e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	; 0x30
 80039e4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039e6:	e0ae      	b.n	8003b46 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f2c0 80aa 	blt.w	8003b44 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	3304      	adds	r3, #4
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe fa38 	bl	8001e76 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ff87 	bl	800391c <prvSampleTimeNow>
 8003a0e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b09      	cmp	r3, #9
 8003a14:	f200 8097 	bhi.w	8003b46 <prvProcessReceivedCommands+0x166>
 8003a18:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <prvProcessReceivedCommands+0x40>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a49 	.word	0x08003a49
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a49 	.word	0x08003a49
 8003a2c:	08003abd 	.word	0x08003abd
 8003a30:	08003ad1 	.word	0x08003ad1
 8003a34:	08003b1b 	.word	0x08003b1b
 8003a38:	08003a49 	.word	0x08003a49
 8003a3c:	08003a49 	.word	0x08003a49
 8003a40:	08003abd 	.word	0x08003abd
 8003a44:	08003ad1 	.word	0x08003ad1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	18d1      	adds	r1, r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a3a      	ldr	r2, [r7, #32]
 8003a66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a68:	f7ff ff78 	bl	800395c <prvInsertTimerInActiveList>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d069      	beq.n	8003b46 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a78:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d05e      	beq.n	8003b46 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	441a      	add	r2, r3
 8003a90:	2300      	movs	r3, #0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	2300      	movs	r3, #0
 8003a96:	2100      	movs	r1, #0
 8003a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a9a:	f7ff fe21 	bl	80036e0 <xTimerGenericCommand>
 8003a9e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d14f      	bne.n	8003b46 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	61bb      	str	r3, [r7, #24]
    }
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003ace:	e03a      	b.n	8003b46 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	617b      	str	r3, [r7, #20]
    }
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	18d1      	adds	r1, r2, r3
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b14:	f7ff ff22 	bl	800395c <prvInsertTimerInActiveList>
                        break;
 8003b18:	e015      	b.n	8003b46 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d103      	bne.n	8003b30 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b2a:	f000 fbef 	bl	800430c <vPortFree>
 8003b2e:	e00a      	b.n	8003b46 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003b42:	e000      	b.n	8003b46 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003b44:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <prvProcessReceivedCommands+0x188>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f107 0108 	add.w	r1, r7, #8
 8003b4e:	2200      	movs	r2, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fc69 	bl	8002428 <xQueueReceive>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f47f af45 	bne.w	80039e8 <prvProcessReceivedCommands+0x8>
        }
    }
 8003b5e:	bf00      	nop
 8003b60:	bf00      	nop
 8003b62:	3728      	adds	r7, #40	; 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000360 	.word	0x20000360

08003b6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b72:	e048      	b.n	8003c06 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b74:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <prvSwitchTimerLists+0xc0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <prvSwitchTimerLists+0xc0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe f972 	bl	8001e76 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d02e      	beq.n	8003c06 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d90e      	bls.n	8003bd8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <prvSwitchTimerLists+0xc0>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	f7fe f917 	bl	8001e04 <vListInsert>
 8003bd6:	e016      	b.n	8003c06 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	2100      	movs	r1, #0
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff fd7c 	bl	80036e0 <xTimerGenericCommand>
 8003be8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	603b      	str	r3, [r7, #0]
    }
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c06:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <prvSwitchTimerLists+0xc0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1b1      	bne.n	8003b74 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <prvSwitchTimerLists+0xc0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <prvSwitchTimerLists+0xc4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <prvSwitchTimerLists+0xc0>)
 8003c1c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c1e:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <prvSwitchTimerLists+0xc4>)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	6013      	str	r3, [r2, #0]
    }
 8003c24:	bf00      	nop
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000358 	.word	0x20000358
 8003c30:	2000035c 	.word	0x2000035c

08003c34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c38:	f000 f95e 	bl	8003ef8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <prvCheckForValidListAndQueue+0x54>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d11d      	bne.n	8003c80 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c44:	4811      	ldr	r0, [pc, #68]	; (8003c8c <prvCheckForValidListAndQueue+0x58>)
 8003c46:	f7fe f88c 	bl	8001d62 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c4a:	4811      	ldr	r0, [pc, #68]	; (8003c90 <prvCheckForValidListAndQueue+0x5c>)
 8003c4c:	f7fe f889 	bl	8001d62 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003c50:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <prvCheckForValidListAndQueue+0x60>)
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <prvCheckForValidListAndQueue+0x58>)
 8003c54:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <prvCheckForValidListAndQueue+0x64>)
 8003c58:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <prvCheckForValidListAndQueue+0x5c>)
 8003c5a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	210c      	movs	r1, #12
 8003c60:	200a      	movs	r0, #10
 8003c62:	f7fe f98d 	bl	8001f80 <xQueueGenericCreate>
 8003c66:	4603      	mov	r3, r0
 8003c68:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <prvCheckForValidListAndQueue+0x54>)
 8003c6a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <prvCheckForValidListAndQueue+0x54>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <prvCheckForValidListAndQueue+0x54>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4908      	ldr	r1, [pc, #32]	; (8003c9c <prvCheckForValidListAndQueue+0x68>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fdea 	bl	8002854 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c80:	f000 f96a 	bl	8003f58 <vPortExitCritical>
    }
 8003c84:	bf00      	nop
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000360 	.word	0x20000360
 8003c8c:	20000330 	.word	0x20000330
 8003c90:	20000344 	.word	0x20000344
 8003c94:	20000358 	.word	0x20000358
 8003c98:	2000035c 	.word	0x2000035c
 8003c9c:	0800bc08 	.word	0x0800bc08

08003ca0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3b04      	subs	r3, #4
 8003cb0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cb8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3b04      	subs	r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f023 0201 	bic.w	r2, r3, #1
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3b04      	subs	r3, #4
 8003cce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003cd0:	4a0c      	ldr	r2, [pc, #48]	; (8003d04 <pxPortInitialiseStack+0x64>)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3b14      	subs	r3, #20
 8003cda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3b04      	subs	r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f06f 0202 	mvn.w	r2, #2
 8003cee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3b20      	subs	r3, #32
 8003cf4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	08003d09 	.word	0x08003d09

08003d08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <prvTaskExitError+0x54>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1a:	d00a      	beq.n	8003d32 <prvTaskExitError+0x2a>
        __asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	60fb      	str	r3, [r7, #12]
    }
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <prvTaskExitError+0x28>
        __asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	60bb      	str	r3, [r7, #8]
    }
 8003d44:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d46:	bf00      	nop
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0fc      	beq.n	8003d48 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	20000018 	.word	0x20000018

08003d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <pxCurrentTCBConst2>)
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	6808      	ldr	r0, [r1, #0]
 8003d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d6a:	f380 8809 	msr	PSP, r0
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f04f 0000 	mov.w	r0, #0
 8003d76:	f380 8811 	msr	BASEPRI, r0
 8003d7a:	4770      	bx	lr
 8003d7c:	f3af 8000 	nop.w

08003d80 <pxCurrentTCBConst2>:
 8003d80:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop

08003d88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003d88:	4808      	ldr	r0, [pc, #32]	; (8003dac <prvPortStartFirstTask+0x24>)
 8003d8a:	6800      	ldr	r0, [r0, #0]
 8003d8c:	6800      	ldr	r0, [r0, #0]
 8003d8e:	f380 8808 	msr	MSP, r0
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f380 8814 	msr	CONTROL, r0
 8003d9a:	b662      	cpsie	i
 8003d9c:	b661      	cpsie	f
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	df00      	svc	0
 8003da8:	bf00      	nop
 8003daa:	0000      	.short	0x0000
 8003dac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop

08003db4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dba:	4b46      	ldr	r3, [pc, #280]	; (8003ed4 <xPortStartScheduler+0x120>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a46      	ldr	r2, [pc, #280]	; (8003ed8 <xPortStartScheduler+0x124>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d10a      	bne.n	8003dda <xPortStartScheduler+0x26>
        __asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	613b      	str	r3, [r7, #16]
    }
 8003dd6:	bf00      	nop
 8003dd8:	e7fe      	b.n	8003dd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003dda:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <xPortStartScheduler+0x120>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a3f      	ldr	r2, [pc, #252]	; (8003edc <xPortStartScheduler+0x128>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10a      	bne.n	8003dfa <xPortStartScheduler+0x46>
        __asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	60fb      	str	r3, [r7, #12]
    }
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003dfa:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <xPortStartScheduler+0x12c>)
 8003dfc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	22ff      	movs	r2, #255	; 0xff
 8003e0a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <xPortStartScheduler+0x130>)
 8003e20:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <xPortStartScheduler+0x134>)
 8003e24:	2207      	movs	r2, #7
 8003e26:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e28:	e009      	b.n	8003e3e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003e2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ee8 <xPortStartScheduler+0x134>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	4a2d      	ldr	r2, [pc, #180]	; (8003ee8 <xPortStartScheduler+0x134>)
 8003e32:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b80      	cmp	r3, #128	; 0x80
 8003e48:	d0ef      	beq.n	8003e2a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e4a:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <xPortStartScheduler+0x134>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f1c3 0307 	rsb	r3, r3, #7
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d00a      	beq.n	8003e6c <xPortStartScheduler+0xb8>
        __asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	60bb      	str	r3, [r7, #8]
    }
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <xPortStartScheduler+0x134>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <xPortStartScheduler+0x134>)
 8003e74:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e76:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <xPortStartScheduler+0x134>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <xPortStartScheduler+0x134>)
 8003e80:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003e8a:	4b18      	ldr	r3, [pc, #96]	; (8003eec <xPortStartScheduler+0x138>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a17      	ldr	r2, [pc, #92]	; (8003eec <xPortStartScheduler+0x138>)
 8003e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e96:	4b15      	ldr	r3, [pc, #84]	; (8003eec <xPortStartScheduler+0x138>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a14      	ldr	r2, [pc, #80]	; (8003eec <xPortStartScheduler+0x138>)
 8003e9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ea0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ea2:	f000 f8e3 	bl	800406c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <xPortStartScheduler+0x13c>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003eac:	f000 f902 	bl	80040b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <xPortStartScheduler+0x140>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <xPortStartScheduler+0x140>)
 8003eb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003eba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ebc:	f7ff ff64 	bl	8003d88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ec0:	f7ff f86c 	bl	8002f9c <vTaskSwitchContext>
    prvTaskExitError();
 8003ec4:	f7ff ff20 	bl	8003d08 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	e000ed00 	.word	0xe000ed00
 8003ed8:	410fc271 	.word	0x410fc271
 8003edc:	410fc270 	.word	0x410fc270
 8003ee0:	e000e400 	.word	0xe000e400
 8003ee4:	2000036c 	.word	0x2000036c
 8003ee8:	20000370 	.word	0x20000370
 8003eec:	e000ed20 	.word	0xe000ed20
 8003ef0:	20000018 	.word	0x20000018
 8003ef4:	e000ef34 	.word	0xe000ef34

08003ef8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
        __asm volatile
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	607b      	str	r3, [r7, #4]
    }
 8003f10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <vPortEnterCritical+0x58>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3301      	adds	r3, #1
 8003f18:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <vPortEnterCritical+0x58>)
 8003f1a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <vPortEnterCritical+0x58>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d10f      	bne.n	8003f44 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <vPortEnterCritical+0x5c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <vPortEnterCritical+0x4c>
        __asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	603b      	str	r3, [r7, #0]
    }
 8003f40:	bf00      	nop
 8003f42:	e7fe      	b.n	8003f42 <vPortEnterCritical+0x4a>
    }
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	20000018 	.word	0x20000018
 8003f54:	e000ed04 	.word	0xe000ed04

08003f58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003f5e:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <vPortExitCritical+0x50>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <vPortExitCritical+0x24>
        __asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	607b      	str	r3, [r7, #4]
    }
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <vPortExitCritical+0x50>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <vPortExitCritical+0x50>)
 8003f84:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003f86:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <vPortExitCritical+0x50>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <vPortExitCritical+0x42>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f383 8811 	msr	BASEPRI, r3
    }
 8003f98:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000018 	.word	0x20000018
 8003fac:	00000000 	.word	0x00000000

08003fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003fb0:	f3ef 8009 	mrs	r0, PSP
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	4b15      	ldr	r3, [pc, #84]	; (8004010 <pxCurrentTCBConst>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	f01e 0f10 	tst.w	lr, #16
 8003fc0:	bf08      	it	eq
 8003fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fca:	6010      	str	r0, [r2, #0]
 8003fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003fd4:	f380 8811 	msr	BASEPRI, r0
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f7fe ffdc 	bl	8002f9c <vTaskSwitchContext>
 8003fe4:	f04f 0000 	mov.w	r0, #0
 8003fe8:	f380 8811 	msr	BASEPRI, r0
 8003fec:	bc09      	pop	{r0, r3}
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	6808      	ldr	r0, [r1, #0]
 8003ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff6:	f01e 0f10 	tst.w	lr, #16
 8003ffa:	bf08      	it	eq
 8003ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004000:	f380 8809 	msr	PSP, r0
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	f3af 8000 	nop.w

08004010 <pxCurrentTCBConst>:
 8004010:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop

08004018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
        __asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	607b      	str	r3, [r7, #4]
    }
 8004030:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004032:	f002 fa63 	bl	80064fc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004036:	f7fe ff17 	bl	8002e68 <xTaskIncrementTick>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d006      	beq.n	800404e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004040:	f002 faba 	bl	80065b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004044:	4b08      	ldr	r3, [pc, #32]	; (8004068 <SysTick_Handler+0x50>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e001      	b.n	8004052 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800404e:	f002 fa97 	bl	8006580 <SEGGER_SYSVIEW_RecordExitISR>
 8004052:	2300      	movs	r3, #0
 8004054:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f383 8811 	msr	BASEPRI, r3
    }
 800405c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	e000ed04 	.word	0xe000ed04

0800406c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <vPortSetupTimerInterrupt+0x34>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <vPortSetupTimerInterrupt+0x38>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <vPortSetupTimerInterrupt+0x3c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <vPortSetupTimerInterrupt+0x40>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <vPortSetupTimerInterrupt+0x44>)
 800408a:	3b01      	subs	r3, #1
 800408c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800408e:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <vPortSetupTimerInterrupt+0x34>)
 8004090:	2207      	movs	r2, #7
 8004092:	601a      	str	r2, [r3, #0]
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e010 	.word	0xe000e010
 80040a4:	e000e018 	.word	0xe000e018
 80040a8:	20000034 	.word	0x20000034
 80040ac:	10624dd3 	.word	0x10624dd3
 80040b0:	e000e014 	.word	0xe000e014

080040b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80040b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80040c4 <vPortEnableVFP+0x10>
 80040b8:	6801      	ldr	r1, [r0, #0]
 80040ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040be:	6001      	str	r1, [r0, #0]
 80040c0:	4770      	bx	lr
 80040c2:	0000      	.short	0x0000
 80040c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80040c8:	bf00      	nop
 80040ca:	bf00      	nop

080040cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80040d2:	f3ef 8305 	mrs	r3, IPSR
 80040d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b0f      	cmp	r3, #15
 80040dc:	d914      	bls.n	8004108 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <vPortValidateInterruptPriority+0x70>)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <vPortValidateInterruptPriority+0x74>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	7afa      	ldrb	r2, [r7, #11]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d20a      	bcs.n	8004108 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	607b      	str	r3, [r7, #4]
    }
 8004104:	bf00      	nop
 8004106:	e7fe      	b.n	8004106 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <vPortValidateInterruptPriority+0x78>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <vPortValidateInterruptPriority+0x7c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d90a      	bls.n	800412e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	603b      	str	r3, [r7, #0]
    }
 800412a:	bf00      	nop
 800412c:	e7fe      	b.n	800412c <vPortValidateInterruptPriority+0x60>
    }
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	e000e3f0 	.word	0xe000e3f0
 8004140:	2000036c 	.word	0x2000036c
 8004144:	e000ed0c 	.word	0xe000ed0c
 8004148:	20000370 	.word	0x20000370

0800414c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004158:	f7fe fdd6 	bl	8002d08 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800415c:	4b65      	ldr	r3, [pc, #404]	; (80042f4 <pvPortMalloc+0x1a8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004164:	f000 f934 	bl	80043d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004168:	4b63      	ldr	r3, [pc, #396]	; (80042f8 <pvPortMalloc+0x1ac>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	f040 80a7 	bne.w	80042c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d02d      	beq.n	80041d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800417c:	2208      	movs	r2, #8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	429a      	cmp	r2, r3
 8004186:	d227      	bcs.n	80041d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004188:	2208      	movs	r2, #8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	2b00      	cmp	r3, #0
 8004198:	d021      	beq.n	80041de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f023 0307 	bic.w	r3, r3, #7
 80041a0:	3308      	adds	r3, #8
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d214      	bcs.n	80041d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f023 0307 	bic.w	r3, r3, #7
 80041ae:	3308      	adds	r3, #8
 80041b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d010      	beq.n	80041de <pvPortMalloc+0x92>
        __asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	617b      	str	r3, [r7, #20]
    }
 80041ce:	bf00      	nop
 80041d0:	e7fe      	b.n	80041d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041d6:	e002      	b.n	80041de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	e000      	b.n	80041e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d06e      	beq.n	80042c4 <pvPortMalloc+0x178>
 80041e6:	4b45      	ldr	r3, [pc, #276]	; (80042fc <pvPortMalloc+0x1b0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d869      	bhi.n	80042c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80041f0:	4b43      	ldr	r3, [pc, #268]	; (8004300 <pvPortMalloc+0x1b4>)
 80041f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80041f4:	4b42      	ldr	r3, [pc, #264]	; (8004300 <pvPortMalloc+0x1b4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041fa:	e004      	b.n	8004206 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d903      	bls.n	8004218 <pvPortMalloc+0xcc>
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f1      	bne.n	80041fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004218:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <pvPortMalloc+0x1a8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421e:	429a      	cmp	r2, r3
 8004220:	d050      	beq.n	80042c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2208      	movs	r2, #8
 8004228:	4413      	add	r3, r2
 800422a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1ad2      	subs	r2, r2, r3
 800423c:	2308      	movs	r3, #8
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	429a      	cmp	r2, r3
 8004242:	d91f      	bls.n	8004284 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <pvPortMalloc+0x120>
        __asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	613b      	str	r3, [r7, #16]
    }
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800427e:	69b8      	ldr	r0, [r7, #24]
 8004280:	f000 f908 	bl	8004494 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004284:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <pvPortMalloc+0x1b0>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <pvPortMalloc+0x1b0>)
 8004290:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004292:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <pvPortMalloc+0x1b0>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <pvPortMalloc+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d203      	bcs.n	80042a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800429e:	4b17      	ldr	r3, [pc, #92]	; (80042fc <pvPortMalloc+0x1b0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <pvPortMalloc+0x1b8>)
 80042a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <pvPortMalloc+0x1ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80042ba:	4b13      	ldr	r3, [pc, #76]	; (8004308 <pvPortMalloc+0x1bc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3301      	adds	r3, #1
 80042c0:	4a11      	ldr	r2, [pc, #68]	; (8004308 <pvPortMalloc+0x1bc>)
 80042c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80042c4:	f7fe fd2e 	bl	8002d24 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <pvPortMalloc+0x19c>
        __asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	60fb      	str	r3, [r7, #12]
    }
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80042e8:	69fb      	ldr	r3, [r7, #28]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3728      	adds	r7, #40	; 0x28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20012f7c 	.word	0x20012f7c
 80042f8:	20012f90 	.word	0x20012f90
 80042fc:	20012f80 	.word	0x20012f80
 8004300:	20012f74 	.word	0x20012f74
 8004304:	20012f84 	.word	0x20012f84
 8004308:	20012f88 	.word	0x20012f88

0800430c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d04d      	beq.n	80043ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800431e:	2308      	movs	r3, #8
 8004320:	425b      	negs	r3, r3
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4413      	add	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <vPortFree+0xb8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <vPortFree+0x44>
        __asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	60fb      	str	r3, [r7, #12]
    }
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <vPortFree+0x62>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60bb      	str	r3, [r7, #8]
    }
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <vPortFree+0xb8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01e      	beq.n	80043ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d11a      	bne.n	80043ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <vPortFree+0xb8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	43db      	mvns	r3, r3
 800438e:	401a      	ands	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004394:	f7fe fcb8 	bl	8002d08 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <vPortFree+0xbc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4413      	add	r3, r2
 80043a2:	4a09      	ldr	r2, [pc, #36]	; (80043c8 <vPortFree+0xbc>)
 80043a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043a6:	6938      	ldr	r0, [r7, #16]
 80043a8:	f000 f874 	bl	8004494 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <vPortFree+0xc0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a06      	ldr	r2, [pc, #24]	; (80043cc <vPortFree+0xc0>)
 80043b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80043b6:	f7fe fcb5 	bl	8002d24 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80043ba:	bf00      	nop
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20012f90 	.word	0x20012f90
 80043c8:	20012f80 	.word	0x20012f80
 80043cc:	20012f8c 	.word	0x20012f8c

080043d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80043da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80043dc:	4b27      	ldr	r3, [pc, #156]	; (800447c <prvHeapInit+0xac>)
 80043de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00c      	beq.n	8004404 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3307      	adds	r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0307 	bic.w	r3, r3, #7
 80043f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	4a1f      	ldr	r2, [pc, #124]	; (800447c <prvHeapInit+0xac>)
 8004400:	4413      	add	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004408:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <prvHeapInit+0xb0>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800440e:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <prvHeapInit+0xb0>)
 8004410:	2200      	movs	r2, #0
 8004412:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	4413      	add	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800441c:	2208      	movs	r2, #8
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <prvHeapInit+0xb4>)
 8004430:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004432:	4b14      	ldr	r3, [pc, #80]	; (8004484 <prvHeapInit+0xb4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2200      	movs	r2, #0
 8004438:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <prvHeapInit+0xb4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	1ad2      	subs	r2, r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <prvHeapInit+0xb4>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <prvHeapInit+0xb8>)
 800445e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a09      	ldr	r2, [pc, #36]	; (800448c <prvHeapInit+0xbc>)
 8004466:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <prvHeapInit+0xc0>)
 800446a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	20000374 	.word	0x20000374
 8004480:	20012f74 	.word	0x20012f74
 8004484:	20012f7c 	.word	0x20012f7c
 8004488:	20012f84 	.word	0x20012f84
 800448c:	20012f80 	.word	0x20012f80
 8004490:	20012f90 	.word	0x20012f90

08004494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <prvInsertBlockIntoFreeList+0xac>)
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e002      	b.n	80044a8 <prvInsertBlockIntoFreeList+0x14>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d8f7      	bhi.n	80044a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d108      	bne.n	80044d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	441a      	add	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	441a      	add	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d118      	bne.n	800451c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <prvInsertBlockIntoFreeList+0xb0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d00d      	beq.n	8004512 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	441a      	add	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	e008      	b.n	8004524 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <prvInsertBlockIntoFreeList+0xb0>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e003      	b.n	8004524 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	d002      	beq.n	8004532 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20012f74 	.word	0x20012f74
 8004544:	20012f7c 	.word	0x20012f7c

08004548 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d161      	bne.n	800461e <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a33      	ldr	r2, [pc, #204]	; (800462c <GPIO_PeriClockControl+0xe4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d106      	bne.n	8004570 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8004562:	4b33      	ldr	r3, [pc, #204]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a32      	ldr	r2, [pc, #200]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 800456e:	e056      	b.n	800461e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a30      	ldr	r2, [pc, #192]	; (8004634 <GPIO_PeriClockControl+0xec>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d106      	bne.n	8004586 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8004578:	4b2d      	ldr	r3, [pc, #180]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	4a2c      	ldr	r2, [pc, #176]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 800457e:	f043 0302 	orr.w	r3, r3, #2
 8004582:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004584:	e04b      	b.n	800461e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2b      	ldr	r2, [pc, #172]	; (8004638 <GPIO_PeriClockControl+0xf0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d106      	bne.n	800459c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800458e:	4b28      	ldr	r3, [pc, #160]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	4a27      	ldr	r2, [pc, #156]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	6313      	str	r3, [r2, #48]	; 0x30
}
 800459a:	e040      	b.n	800461e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a27      	ldr	r2, [pc, #156]	; (800463c <GPIO_PeriClockControl+0xf4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d106      	bne.n	80045b2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80045a4:	4b22      	ldr	r3, [pc, #136]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	4a21      	ldr	r2, [pc, #132]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 80045aa:	f043 0308 	orr.w	r3, r3, #8
 80045ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80045b0:	e035      	b.n	800461e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a22      	ldr	r2, [pc, #136]	; (8004640 <GPIO_PeriClockControl+0xf8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d106      	bne.n	80045c8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 80045c0:	f043 0310 	orr.w	r3, r3, #16
 80045c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80045c6:	e02a      	b.n	800461e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <GPIO_PeriClockControl+0xfc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d106      	bne.n	80045de <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80045d0:	4b17      	ldr	r3, [pc, #92]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	4a16      	ldr	r2, [pc, #88]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 80045d6:	f043 0320 	orr.w	r3, r3, #32
 80045da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80045dc:	e01f      	b.n	800461e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a19      	ldr	r2, [pc, #100]	; (8004648 <GPIO_PeriClockControl+0x100>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d106      	bne.n	80045f4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	4a11      	ldr	r2, [pc, #68]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 80045ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80045f2:	e014      	b.n	800461e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a15      	ldr	r2, [pc, #84]	; (800464c <GPIO_PeriClockControl+0x104>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d106      	bne.n	800460a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	4a0b      	ldr	r2, [pc, #44]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004608:	e009      	b.n	800461e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a10      	ldr	r2, [pc, #64]	; (8004650 <GPIO_PeriClockControl+0x108>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d105      	bne.n	800461e <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	4a06      	ldr	r2, [pc, #24]	; (8004630 <GPIO_PeriClockControl+0xe8>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40020000 	.word	0x40020000
 8004630:	40023800 	.word	0x40023800
 8004634:	40020400 	.word	0x40020400
 8004638:	40020800 	.word	0x40020800
 800463c:	40020c00 	.word	0x40020c00
 8004640:	40021000 	.word	0x40021000
 8004644:	40021400 	.word	0x40021400
 8004648:	40021800 	.word	0x40021800
 800464c:	40021c00 	.word	0x40021c00
 8004650:	40022000 	.word	0x40022000

08004654 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2101      	movs	r1, #1
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff6e 	bl	8004548 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	795b      	ldrb	r3, [r3, #5]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d820      	bhi.n	80046b6 <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	795b      	ldrb	r3, [r3, #5]
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	791b      	ldrb	r3, [r3, #4]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	791b      	ldrb	r3, [r3, #4]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	2103      	movs	r1, #3
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	4619      	mov	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	400a      	ands	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e0cb      	b.n	800484e <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	795b      	ldrb	r3, [r3, #5]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d117      	bne.n	80046ee <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80046be:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <GPIO_Init+0x198>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	7912      	ldrb	r2, [r2, #4]
 80046c6:	4611      	mov	r1, r2
 80046c8:	2201      	movs	r2, #1
 80046ca:	408a      	lsls	r2, r1
 80046cc:	4611      	mov	r1, r2
 80046ce:	4a47      	ldr	r2, [pc, #284]	; (80047ec <GPIO_Init+0x198>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80046d4:	4b45      	ldr	r3, [pc, #276]	; (80047ec <GPIO_Init+0x198>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	7912      	ldrb	r2, [r2, #4]
 80046dc:	4611      	mov	r1, r2
 80046de:	2201      	movs	r2, #1
 80046e0:	408a      	lsls	r2, r1
 80046e2:	43d2      	mvns	r2, r2
 80046e4:	4611      	mov	r1, r2
 80046e6:	4a41      	ldr	r2, [pc, #260]	; (80047ec <GPIO_Init+0x198>)
 80046e8:	400b      	ands	r3, r1
 80046ea:	6093      	str	r3, [r2, #8]
 80046ec:	e035      	b.n	800475a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	795b      	ldrb	r3, [r3, #5]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d117      	bne.n	8004726 <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80046f6:	4b3d      	ldr	r3, [pc, #244]	; (80047ec <GPIO_Init+0x198>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	7912      	ldrb	r2, [r2, #4]
 80046fe:	4611      	mov	r1, r2
 8004700:	2201      	movs	r2, #1
 8004702:	408a      	lsls	r2, r1
 8004704:	4611      	mov	r1, r2
 8004706:	4a39      	ldr	r2, [pc, #228]	; (80047ec <GPIO_Init+0x198>)
 8004708:	430b      	orrs	r3, r1
 800470a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800470c:	4b37      	ldr	r3, [pc, #220]	; (80047ec <GPIO_Init+0x198>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	7912      	ldrb	r2, [r2, #4]
 8004714:	4611      	mov	r1, r2
 8004716:	2201      	movs	r2, #1
 8004718:	408a      	lsls	r2, r1
 800471a:	43d2      	mvns	r2, r2
 800471c:	4611      	mov	r1, r2
 800471e:	4a33      	ldr	r2, [pc, #204]	; (80047ec <GPIO_Init+0x198>)
 8004720:	400b      	ands	r3, r1
 8004722:	60d3      	str	r3, [r2, #12]
 8004724:	e019      	b.n	800475a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	795b      	ldrb	r3, [r3, #5]
 800472a:	2b06      	cmp	r3, #6
 800472c:	d115      	bne.n	800475a <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800472e:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <GPIO_Init+0x198>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	7912      	ldrb	r2, [r2, #4]
 8004736:	4611      	mov	r1, r2
 8004738:	2201      	movs	r2, #1
 800473a:	408a      	lsls	r2, r1
 800473c:	4611      	mov	r1, r2
 800473e:	4a2b      	ldr	r2, [pc, #172]	; (80047ec <GPIO_Init+0x198>)
 8004740:	430b      	orrs	r3, r1
 8004742:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004744:	4b29      	ldr	r3, [pc, #164]	; (80047ec <GPIO_Init+0x198>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	7912      	ldrb	r2, [r2, #4]
 800474c:	4611      	mov	r1, r2
 800474e:	2201      	movs	r2, #1
 8004750:	408a      	lsls	r2, r1
 8004752:	4611      	mov	r1, r2
 8004754:	4a25      	ldr	r2, [pc, #148]	; (80047ec <GPIO_Init+0x198>)
 8004756:	430b      	orrs	r3, r1
 8004758:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	791b      	ldrb	r3, [r3, #4]
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	791b      	ldrb	r3, [r3, #4]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <GPIO_Init+0x19c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d04e      	beq.n	8004814 <GPIO_Init+0x1c0>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1e      	ldr	r2, [pc, #120]	; (80047f4 <GPIO_Init+0x1a0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d032      	beq.n	80047e6 <GPIO_Init+0x192>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <GPIO_Init+0x1a4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d02b      	beq.n	80047e2 <GPIO_Init+0x18e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <GPIO_Init+0x1a8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d024      	beq.n	80047de <GPIO_Init+0x18a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a19      	ldr	r2, [pc, #100]	; (8004800 <GPIO_Init+0x1ac>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01d      	beq.n	80047da <GPIO_Init+0x186>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a18      	ldr	r2, [pc, #96]	; (8004804 <GPIO_Init+0x1b0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d016      	beq.n	80047d6 <GPIO_Init+0x182>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a16      	ldr	r2, [pc, #88]	; (8004808 <GPIO_Init+0x1b4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00f      	beq.n	80047d2 <GPIO_Init+0x17e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <GPIO_Init+0x1b8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d008      	beq.n	80047ce <GPIO_Init+0x17a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a13      	ldr	r2, [pc, #76]	; (8004810 <GPIO_Init+0x1bc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d101      	bne.n	80047ca <GPIO_Init+0x176>
 80047c6:	2308      	movs	r3, #8
 80047c8:	e025      	b.n	8004816 <GPIO_Init+0x1c2>
 80047ca:	2300      	movs	r3, #0
 80047cc:	e023      	b.n	8004816 <GPIO_Init+0x1c2>
 80047ce:	2307      	movs	r3, #7
 80047d0:	e021      	b.n	8004816 <GPIO_Init+0x1c2>
 80047d2:	2306      	movs	r3, #6
 80047d4:	e01f      	b.n	8004816 <GPIO_Init+0x1c2>
 80047d6:	2305      	movs	r3, #5
 80047d8:	e01d      	b.n	8004816 <GPIO_Init+0x1c2>
 80047da:	2304      	movs	r3, #4
 80047dc:	e01b      	b.n	8004816 <GPIO_Init+0x1c2>
 80047de:	2303      	movs	r3, #3
 80047e0:	e019      	b.n	8004816 <GPIO_Init+0x1c2>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e017      	b.n	8004816 <GPIO_Init+0x1c2>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e015      	b.n	8004816 <GPIO_Init+0x1c2>
 80047ea:	bf00      	nop
 80047ec:	40013c00 	.word	0x40013c00
 80047f0:	40020000 	.word	0x40020000
 80047f4:	40020400 	.word	0x40020400
 80047f8:	40020800 	.word	0x40020800
 80047fc:	40020c00 	.word	0x40020c00
 8004800:	40021000 	.word	0x40021000
 8004804:	40021400 	.word	0x40021400
 8004808:	40021800 	.word	0x40021800
 800480c:	40021c00 	.word	0x40021c00
 8004810:	40022000 	.word	0x40022000
 8004814:	2300      	movs	r3, #0
 8004816:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8004818:	4b59      	ldr	r3, [pc, #356]	; (8004980 <GPIO_Init+0x32c>)
 800481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481c:	4a58      	ldr	r2, [pc, #352]	; (8004980 <GPIO_Init+0x32c>)
 800481e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004822:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8004824:	7c7a      	ldrb	r2, [r7, #17]
 8004826:	7cbb      	ldrb	r3, [r7, #18]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	fa02 f103 	lsl.w	r1, r2, r3
 800482e:	4a55      	ldr	r2, [pc, #340]	; (8004984 <GPIO_Init+0x330>)
 8004830:	7cfb      	ldrb	r3, [r7, #19]
 8004832:	3302      	adds	r3, #2
 8004834:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8004838:	4b53      	ldr	r3, [pc, #332]	; (8004988 <GPIO_Init+0x334>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	7912      	ldrb	r2, [r2, #4]
 8004840:	4611      	mov	r1, r2
 8004842:	2201      	movs	r2, #1
 8004844:	408a      	lsls	r2, r1
 8004846:	4611      	mov	r1, r2
 8004848:	4a4f      	ldr	r2, [pc, #316]	; (8004988 <GPIO_Init+0x334>)
 800484a:	430b      	orrs	r3, r1
 800484c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	799b      	ldrb	r3, [r3, #6]
 8004852:	461a      	mov	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	791b      	ldrb	r3, [r3, #4]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	791b      	ldrb	r3, [r3, #4]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	2103      	movs	r1, #3
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	4619      	mov	r1, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	400a      	ands	r2, r1
 800487c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6899      	ldr	r1, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	79db      	ldrb	r3, [r3, #7]
 8004892:	461a      	mov	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	791b      	ldrb	r3, [r3, #4]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	791b      	ldrb	r3, [r3, #4]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	2103      	movs	r1, #3
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	4619      	mov	r1, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	400a      	ands	r2, r1
 80048bc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68d9      	ldr	r1, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	7a1b      	ldrb	r3, [r3, #8]
 80048d2:	461a      	mov	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	791b      	ldrb	r3, [r3, #4]
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	791b      	ldrb	r3, [r3, #4]
 80048e8:	4619      	mov	r1, r3
 80048ea:	2301      	movs	r3, #1
 80048ec:	408b      	lsls	r3, r1
 80048ee:	43db      	mvns	r3, r3
 80048f0:	4619      	mov	r1, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	400a      	ands	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	795b      	ldrb	r3, [r3, #5]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d131      	bne.n	8004976 <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	791b      	ldrb	r3, [r3, #4]
 8004916:	08db      	lsrs	r3, r3, #3
 8004918:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	791b      	ldrb	r3, [r3, #4]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	7c3a      	ldrb	r2, [r7, #16]
 800492a:	3208      	adds	r2, #8
 800492c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	220f      	movs	r2, #15
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	4618      	mov	r0, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	7c3a      	ldrb	r2, [r7, #16]
 8004944:	4001      	ands	r1, r0
 8004946:	3208      	adds	r2, #8
 8004948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	7c3a      	ldrb	r2, [r7, #16]
 8004952:	3208      	adds	r2, #8
 8004954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	7a5b      	ldrb	r3, [r3, #9]
 800495c:	461a      	mov	r2, r3
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	4618      	mov	r0, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	7c3a      	ldrb	r2, [r7, #16]
 800496e:	4301      	orrs	r1, r0
 8004970:	3208      	adds	r2, #8
 8004972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8004976:	bf00      	nop
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800
 8004984:	40013800 	.word	0x40013800
 8004988:	40013c00 	.word	0x40013c00

0800498c <GPIO_ReadFromInputPin>:
 *
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]

   return value;
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
 80049c4:	4613      	mov	r3, r2
 80049c6:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80049c8:	78bb      	ldrb	r3, [r7, #2]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d109      	bne.n	80049e2 <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	2101      	movs	r1, #1
 80049d6:	fa01 f202 	lsl.w	r2, r1, r2
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 80049e0:	e009      	b.n	80049f6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	2101      	movs	r1, #1
 80049ea:	fa01 f202 	lsl.w	r2, r1, r2
 80049ee:	43d2      	mvns	r2, r2
 80049f0:	401a      	ands	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	615a      	str	r2, [r3, #20]
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <GPIO_IRQInterruptConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi) {
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	460a      	mov	r2, r1
 8004a0e:	71fb      	strb	r3, [r7, #7]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE) {
 8004a14:	79bb      	ldrb	r3, [r7, #6]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d133      	bne.n	8004a82 <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31)
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	2b1f      	cmp	r3, #31
 8004a1e:	d80a      	bhi.n	8004a36 <GPIO_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8004a20:	4b35      	ldr	r3, [pc, #212]	; (8004af8 <GPIO_IRQInterruptConfig+0xf4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	79fa      	ldrb	r2, [r7, #7]
 8004a26:	2101      	movs	r1, #1
 8004a28:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4a32      	ldr	r2, [pc, #200]	; (8004af8 <GPIO_IRQInterruptConfig+0xf4>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6013      	str	r3, [r2, #0]

		else if(IRQNumber >= 64 && IRQNumber < 96 )
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
	}
}
 8004a34:	e059      	b.n	8004aea <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	2b1f      	cmp	r3, #31
 8004a3a:	d90f      	bls.n	8004a5c <GPIO_IRQInterruptConfig+0x58>
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	2b3f      	cmp	r3, #63	; 0x3f
 8004a40:	d80c      	bhi.n	8004a5c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8004a42:	4b2e      	ldr	r3, [pc, #184]	; (8004afc <GPIO_IRQInterruptConfig+0xf8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	79fa      	ldrb	r2, [r7, #7]
 8004a48:	f002 021f 	and.w	r2, r2, #31
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a52:	4611      	mov	r1, r2
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <GPIO_IRQInterruptConfig+0xf8>)
 8004a56:	430b      	orrs	r3, r1
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e046      	b.n	8004aea <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	2b3f      	cmp	r3, #63	; 0x3f
 8004a60:	d943      	bls.n	8004aea <GPIO_IRQInterruptConfig+0xe6>
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	2b5f      	cmp	r3, #95	; 0x5f
 8004a66:	d840      	bhi.n	8004aea <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8004a68:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <GPIO_IRQInterruptConfig+0xfc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	79fa      	ldrb	r2, [r7, #7]
 8004a6e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004a72:	2101      	movs	r1, #1
 8004a74:	fa01 f202 	lsl.w	r2, r1, r2
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <GPIO_IRQInterruptConfig+0xfc>)
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6013      	str	r3, [r2, #0]
}
 8004a80:	e033      	b.n	8004aea <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	2b1f      	cmp	r3, #31
 8004a86:	d80a      	bhi.n	8004a9e <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8004a88:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <GPIO_IRQInterruptConfig+0x100>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	79fa      	ldrb	r2, [r7, #7]
 8004a8e:	2101      	movs	r1, #1
 8004a90:	fa01 f202 	lsl.w	r2, r1, r2
 8004a94:	4611      	mov	r1, r2
 8004a96:	4a1b      	ldr	r2, [pc, #108]	; (8004b04 <GPIO_IRQInterruptConfig+0x100>)
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6013      	str	r3, [r2, #0]
}
 8004a9c:	e025      	b.n	8004aea <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 )
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	2b1f      	cmp	r3, #31
 8004aa2:	d90f      	bls.n	8004ac4 <GPIO_IRQInterruptConfig+0xc0>
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	2b3f      	cmp	r3, #63	; 0x3f
 8004aa8:	d80c      	bhi.n	8004ac4 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8004aaa:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <GPIO_IRQInterruptConfig+0x104>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	79fa      	ldrb	r2, [r7, #7]
 8004ab0:	f002 021f 	and.w	r2, r2, #31
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aba:	4611      	mov	r1, r2
 8004abc:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <GPIO_IRQInterruptConfig+0x104>)
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e012      	b.n	8004aea <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	2b3f      	cmp	r3, #63	; 0x3f
 8004ac8:	d90f      	bls.n	8004aea <GPIO_IRQInterruptConfig+0xe6>
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	2b5f      	cmp	r3, #95	; 0x5f
 8004ace:	d80c      	bhi.n	8004aea <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <GPIO_IRQInterruptConfig+0x108>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	79fa      	ldrb	r2, [r7, #7]
 8004ad6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <GPIO_IRQInterruptConfig+0x108>)
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6013      	str	r3, [r2, #0]
}
 8004ae8:	e7ff      	b.n	8004aea <GPIO_IRQInterruptConfig+0xe6>
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000e100 	.word	0xe000e100
 8004afc:	e000e104 	.word	0xe000e104
 8004b00:	e000e108 	.word	0xe000e108
 8004b04:	e000e180 	.word	0xe000e180
 8004b08:	e000e184 	.word	0xe000e184
 8004b0c:	e000e188 	.word	0xe000e188

08004b10 <GPIO_IRQPriorityConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	6039      	str	r1, [r7, #0]
 8004b1a:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 8004b2a:	7bbb      	ldrb	r3, [r7, #14]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	3304      	adds	r3, #4
 8004b32:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |=  (IRQPriority << shift_amount);
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004b3c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	7b7b      	ldrb	r3, [r7, #13]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	409a      	lsls	r2, r3
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004b50:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]

}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <I2C_PeripheralControl>:


#include "stm32f407xx_i2c.h"
#include "stm32f407xx_rcc.h"

void I2C_PeripheralControl(I2C_RegDef_t *I2Cx, uint8_t EnOrDi) {
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d106      	bne.n	8004b84 <I2C_PeripheralControl+0x20>
		I2Cx->CR1 |= (1 << I2C_CR1_PE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f043 0201 	orr.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	else
		I2Cx->CR1 &= ~(1 << 0);
}
 8004b82:	e005      	b.n	8004b90 <I2C_PeripheralControl+0x2c>
		I2Cx->CR1 &= ~(1 << 0);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 0201 	bic.w	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *I2Cx, uint8_t EnorDi) {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d11f      	bne.n	8004bee <I2C_PeriClockControl+0x52>
		if(I2Cx == I2C1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <I2C_PeriClockControl+0x60>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d106      	bne.n	8004bc4 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8004bb6:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <I2C_PeriClockControl+0x64>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <I2C_PeriClockControl+0x64>)
 8004bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bc0:	6413      	str	r3, [r2, #64]	; 0x40
		else if (I2Cx == I2C3)
			I2C3_PCLK_EN();
	} else {
		//TODO
	}
}
 8004bc2:	e014      	b.n	8004bee <I2C_PeriClockControl+0x52>
		else if (I2Cx == I2C2)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a0f      	ldr	r2, [pc, #60]	; (8004c04 <I2C_PeriClockControl+0x68>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d106      	bne.n	8004bda <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <I2C_PeriClockControl+0x64>)
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	4a0b      	ldr	r2, [pc, #44]	; (8004c00 <I2C_PeriClockControl+0x64>)
 8004bd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bd6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004bd8:	e009      	b.n	8004bee <I2C_PeriClockControl+0x52>
		else if (I2Cx == I2C3)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <I2C_PeriClockControl+0x6c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d105      	bne.n	8004bee <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <I2C_PeriClockControl+0x64>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	4a06      	ldr	r2, [pc, #24]	; (8004c00 <I2C_PeriClockControl+0x64>)
 8004be8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40005400 	.word	0x40005400
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40005800 	.word	0x40005800
 8004c08:	40005c00 	.word	0x40005c00

08004c0c <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff ffbc 	bl	8004b9c <I2C_PeriClockControl>

	I2C_PeripheralControl(pI2CHandle->pI2Cx, DISABLE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ff9a 	bl	8004b64 <I2C_PeripheralControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	7a5b      	ldrb	r3, [r3, #9]
 8004c34:	029b      	lsls	r3, r3, #10
 8004c36:	461a      	mov	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 8004c4a:	f000 f9cf 	bl	8004fec <RCC_GetPCLK1Value>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4a4a      	ldr	r2, [pc, #296]	; (8004d7c <I2C_Init+0x170>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	0c9b      	lsrs	r3, r3, #18
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004c68:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	7a1b      	ldrb	r3, [r3, #8]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	461a      	mov	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c82:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4a39      	ldr	r2, [pc, #228]	; (8004d80 <I2C_Init+0x174>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d80f      	bhi.n	8004cbe <I2C_Init+0xb2>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004c9e:	f000 f9a5 	bl	8004fec <RCC_GetPCLK1Value>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cae:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004cb0:	897b      	ldrh	r3, [r7, #10]
 8004cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e02d      	b.n	8004d1a <I2C_Init+0x10e>
	} else {
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc4:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	7a9b      	ldrb	r3, [r3, #10]
 8004cca:	039b      	lsls	r3, r3, #14
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	7a9b      	ldrb	r3, [r3, #10]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <I2C_Init+0xe8>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004cdc:	f000 f986 	bl	8004fec <RCC_GetPCLK1Value>
 8004ce0:	4601      	mov	r1, r0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cf0:	817b      	strh	r3, [r7, #10]
 8004cf2:	e00c      	b.n	8004d0e <I2C_Init+0x102>
		else
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004cf4:	f000 f97a 	bl	8004fec <RCC_GetPCLK1Value>
 8004cf8:	4601      	mov	r1, r0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009a      	lsls	r2, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d0c:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004d0e:	897b      	ldrh	r3, [r7, #10]
 8004d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <I2C_Init+0x174>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d809      	bhi.n	8004d40 <I2C_Init+0x134>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8004d2c:	f000 f95e 	bl	8004fec <RCC_GetPCLK1Value>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a12      	ldr	r2, [pc, #72]	; (8004d7c <I2C_Init+0x170>)
 8004d34:	fba2 2303 	umull	r2, r3, r2, r3
 8004d38:	0c9b      	lsrs	r3, r3, #18
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	e00d      	b.n	8004d5c <I2C_Init+0x150>
	else
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8004d40:	f000 f954 	bl	8004fec <RCC_GetPCLK1Value>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	0a5b      	lsrs	r3, r3, #9
 8004d50:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <I2C_Init+0x178>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	09db      	lsrs	r3, r3, #7
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004d66:	621a      	str	r2, [r3, #32]

	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff fef8 	bl	8004b64 <I2C_PeripheralControl>
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	431bde83 	.word	0x431bde83
 8004d80:	000186a0 	.word	0x000186a0
 8004d84:	00044b83 	.word	0x00044b83

08004d88 <I2C_Read>:

uint8_t I2C_Read(I2C_RegDef_t *I2Cx, uint8_t address, uint8_t reg) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
 8004d94:	4613      	mov	r3, r2
 8004d96:	70bb      	strb	r3, [r7, #2]
	I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8004d98:	78f9      	ldrb	r1, [r7, #3]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f855 	bl	8004e4e <I2C_Start>
	I2C_WriteData(I2Cx, reg);
 8004da4:	78bb      	ldrb	r3, [r7, #2]
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8fd 	bl	8004fa8 <I2C_WriteData>
	I2C_Stop(I2Cx);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f8a6 	bl	8004f00 <I2C_Stop>
	I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_DISABLE);
 8004db4:	78f9      	ldrb	r1, [r7, #3]
 8004db6:	2300      	movs	r3, #0
 8004db8:	2201      	movs	r2, #1
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f847 	bl	8004e4e <I2C_Start>
	return I2C_ReadNack(I2Cx);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f8c6 	bl	8004f52 <I2C_ReadNack>
 8004dc6:	4603      	mov	r3, r0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_Write>:
		else
			*data++ = I2C_ReadAck(I2Cx);
	}
}

void I2C_Write(I2C_RegDef_t *I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	70fb      	strb	r3, [r7, #3]
 8004de2:	460b      	mov	r3, r1
 8004de4:	70bb      	strb	r3, [r7, #2]
 8004de6:	4613      	mov	r3, r2
 8004de8:	707b      	strb	r3, [r7, #1]
	I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8004dea:	78f9      	ldrb	r1, [r7, #3]
 8004dec:	2300      	movs	r3, #0
 8004dee:	2200      	movs	r2, #0
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f82c 	bl	8004e4e <I2C_Start>
	I2C_WriteData(I2Cx, reg);
 8004df6:	78bb      	ldrb	r3, [r7, #2]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8d4 	bl	8004fa8 <I2C_WriteData>
	I2C_WriteData(I2Cx, data);
 8004e00:	787b      	ldrb	r3, [r7, #1]
 8004e02:	4619      	mov	r1, r3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f8cf 	bl	8004fa8 <I2C_WriteData>
	I2C_Stop(I2Cx);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f878 	bl	8004f00 <I2C_Stop>
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <I2C_IsDeviceConnected>:
	I2C_WriteData(I2Cx, reg);
	while(count--) I2C_WriteData(I2Cx, *data++);
	I2C_Stop(I2Cx);
}

uint8_t I2C_IsDeviceConnected(I2C_RegDef_t* I2Cx, uint8_t address) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]
	if(!I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) connected = 1;
 8004e28:	78f9      	ldrb	r1, [r7, #3]
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f80d 	bl	8004e4e <I2C_Start>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <I2C_IsDeviceConnected+0x26>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
	I2C_Stop(I2Cx);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f85e 	bl	8004f00 <I2C_Stop>
	return connected;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <I2C_Start>:

int16_t I2C_Start(I2C_RegDef_t* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8004e4e:	b480      	push	{r7}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	4608      	mov	r0, r1
 8004e58:	4611      	mov	r1, r2
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	70fb      	strb	r3, [r7, #3]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70bb      	strb	r3, [r7, #2]
 8004e64:	4613      	mov	r3, r2
 8004e66:	707b      	strb	r3, [r7, #1]
	I2Cx->CR1 |= (1 << I2C_CR1_START);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	601a      	str	r2, [r3, #0]

	uint32_t timeout = I2C_TIMEOUT;
 8004e74:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004e78:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_SB)))
 8004e7a:	e007      	b.n	8004e8c <I2C_Start+0x3e>
		if(--timeout == 0) return 1;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <I2C_Start+0x3e>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e033      	b.n	8004ef4 <I2C_Start+0xa6>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_SB)))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f1      	beq.n	8004e7c <I2C_Start+0x2e>

	if(ack) I2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8004e98:	787b      	ldrb	r3, [r7, #1]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <I2C_Start+0x5c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]

	if(direction == I2C_TRANSMITTER_MODE)
 8004eaa:	78bb      	ldrb	r3, [r7, #2]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <I2C_Start+0x6e>
		I2Cx->DR = address & ~(0x01);
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]
 8004eba:	e006      	b.n	8004eca <I2C_Start+0x7c>
	else I2Cx->DR = address | 0x01;
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	611a      	str	r2, [r3, #16]

	timeout = I2C_TIMEOUT;
 8004eca:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004ece:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_ADDR)))
 8004ed0:	e007      	b.n	8004ee2 <I2C_Start+0x94>
		if(--timeout == 0) return 1;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <I2C_Start+0x94>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e008      	b.n	8004ef4 <I2C_Start+0xa6>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_ADDR)))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f1      	beq.n	8004ed2 <I2C_Start+0x84>

	I2Cx->SR2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]

	return 0;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <I2C_Stop>:

uint8_t I2C_Stop(I2C_RegDef_t* I2Cx) {
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	uint32_t timeout = I2C_TIMEOUT;
 8004f08:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004f0c:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)) || !(I2Cx->SR1 & (1 << I2C_SR1_BTF)))
 8004f0e:	e007      	b.n	8004f20 <I2C_Stop+0x20>
		if(--timeout == 0) return 1;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <I2C_Stop+0x20>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e012      	b.n	8004f46 <I2C_Stop+0x46>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)) || !(I2Cx->SR1 & (1 << I2C_SR1_BTF)))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f1      	beq.n	8004f10 <I2C_Stop+0x10>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0eb      	beq.n	8004f10 <I2C_Stop+0x10>

	I2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]

	return 0;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <I2C_ReadNack>:

uint8_t I2C_ReadNack(I2C_RegDef_t* I2Cx) {
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
	I2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]

	I2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	601a      	str	r2, [r3, #0]

	uint32_t timeout = I2C_TIMEOUT;
 8004f72:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004f76:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_RXNE)))
 8004f78:	e007      	b.n	8004f8a <I2C_ReadNack+0x38>
		if(--timeout == 0) return 1;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <I2C_ReadNack+0x38>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e008      	b.n	8004f9c <I2C_ReadNack+0x4a>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_RXNE)))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0f1      	beq.n	8004f7a <I2C_ReadNack+0x28>

	return I2Cx->DR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	b2db      	uxtb	r3, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <I2C_WriteData>:
		if(--timeout == 0) return 1;

	return I2Cx->DR;
}

void I2C_WriteData(I2C_RegDef_t* I2Cx, uint8_t data) {
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout = I2C_TIMEOUT;
 8004fb4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004fb8:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)))
 8004fba:	e005      	b.n	8004fc8 <I2C_WriteData+0x20>
		if(--timeout == 0) break;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <I2C_WriteData+0x2e>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f3      	beq.n	8004fbc <I2C_WriteData+0x14>
 8004fd4:	e000      	b.n	8004fd8 <I2C_WriteData+0x30>
		if(--timeout == 0) break;
 8004fd6:	bf00      	nop
	I2Cx->DR = data;
 8004fd8:	78fa      	ldrb	r2, [r7, #3]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	611a      	str	r2, [r3, #16]
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8004ff2:	4b25      	ldr	r3, [pc, #148]	; (8005088 <RCC_GetPCLK1Value+0x9c>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	089b      	lsrs	r3, r3, #2
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8005000:	7a7b      	ldrb	r3, [r7, #9]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <RCC_GetPCLK1Value+0xa0>)
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e00b      	b.n	8005024 <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 1)
 800500c:	7a7b      	ldrb	r3, [r7, #9]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d102      	bne.n	8005018 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8005012:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <RCC_GetPCLK1Value+0xa4>)
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	e005      	b.n	8005024 <RCC_GetPCLK1Value+0x38>
	else if (clksrc == 2)
 8005018:	7a7b      	ldrb	r3, [r7, #9]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d102      	bne.n	8005024 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 800501e:	f000 f83d 	bl	800509c <RCC_GetPLLOutputClock>
 8005022:	60f8      	str	r0, [r7, #12]

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8005024:	4b18      	ldr	r3, [pc, #96]	; (8005088 <RCC_GetPCLK1Value+0x9c>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8005032:	7a3b      	ldrb	r3, [r7, #8]
 8005034:	2b07      	cmp	r3, #7
 8005036:	d802      	bhi.n	800503e <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8005038:	2301      	movs	r3, #1
 800503a:	72fb      	strb	r3, [r7, #11]
 800503c:	e005      	b.n	800504a <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_PreScaler[temp-8];
 800503e:	7a3b      	ldrb	r3, [r7, #8]
 8005040:	3b08      	subs	r3, #8
 8005042:	4a14      	ldr	r2, [pc, #80]	; (8005094 <RCC_GetPCLK1Value+0xa8>)
 8005044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005048:	72fb      	strb	r3, [r7, #11]

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 800504a:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <RCC_GetPCLK1Value+0x9c>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0a9b      	lsrs	r3, r3, #10
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8005058:	7a3b      	ldrb	r3, [r7, #8]
 800505a:	2b03      	cmp	r3, #3
 800505c:	d802      	bhi.n	8005064 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 800505e:	2301      	movs	r3, #1
 8005060:	72bb      	strb	r3, [r7, #10]
 8005062:	e004      	b.n	800506e <RCC_GetPCLK1Value+0x82>
	else
		apb1p = APB1_PreScaler[temp-4];
 8005064:	7a3b      	ldrb	r3, [r7, #8]
 8005066:	3b04      	subs	r3, #4
 8005068:	4a0b      	ldr	r2, [pc, #44]	; (8005098 <RCC_GetPCLK1Value+0xac>)
 800506a:	5cd3      	ldrb	r3, [r2, r3]
 800506c:	72bb      	strb	r3, [r7, #10]

	pclk1 = (SystemClk / ahbp) /apb1p;
 800506e:	7afb      	ldrb	r3, [r7, #11]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	fbb2 f2f3 	udiv	r2, r2, r3
 8005076:	7abb      	ldrb	r3, [r7, #10]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	607b      	str	r3, [r7, #4]

	return pclk1;
 800507e:	687b      	ldr	r3, [r7, #4]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40023800 	.word	0x40023800
 800508c:	00f42400 	.word	0x00f42400
 8005090:	007a1200 	.word	0x007a1200
 8005094:	2000001c 	.word	0x2000001c
 8005098:	2000002c 	.word	0x2000002c

0800509c <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock() {
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
	return 0;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d11f      	bne.n	80050fe <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a12      	ldr	r2, [pc, #72]	; (800510c <SPI_PeriClockControl+0x60>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d106      	bne.n	80050d4 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80050c6:	4b12      	ldr	r3, [pc, #72]	; (8005110 <SPI_PeriClockControl+0x64>)
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	4a11      	ldr	r2, [pc, #68]	; (8005110 <SPI_PeriClockControl+0x64>)
 80050cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050d0:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 80050d2:	e014      	b.n	80050fe <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a0f      	ldr	r2, [pc, #60]	; (8005114 <SPI_PeriClockControl+0x68>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d106      	bne.n	80050ea <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <SPI_PeriClockControl+0x64>)
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <SPI_PeriClockControl+0x64>)
 80050e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80050e8:	e009      	b.n	80050fe <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <SPI_PeriClockControl+0x6c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d105      	bne.n	80050fe <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 80050f2:	4b07      	ldr	r3, [pc, #28]	; (8005110 <SPI_PeriClockControl+0x64>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	4a06      	ldr	r2, [pc, #24]	; (8005110 <SPI_PeriClockControl+0x64>)
 80050f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40013000 	.word	0x40013000
 8005110:	40023800 	.word	0x40023800
 8005114:	40003800 	.word	0x40003800
 8005118:	40003c00 	.word	0x40003c00

0800511c <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2101      	movs	r1, #1
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff ffbe 	bl	80050ac <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	791b      	ldrb	r3, [r3, #4]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	461a      	mov	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	795b      	ldrb	r3, [r3, #5]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d104      	bne.n	8005154 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e014      	b.n	800517e <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	795b      	ldrb	r3, [r3, #5]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d104      	bne.n	8005166 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e00b      	b.n	800517e <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	795b      	ldrb	r3, [r3, #5]
 800516a:	2b03      	cmp	r3, #3
 800516c:	d107      	bne.n	800517e <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005174:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800517c:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	799b      	ldrb	r3, [r3, #6]
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	461a      	mov	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	79db      	ldrb	r3, [r3, #7]
 8005190:	02db      	lsls	r3, r3, #11
 8005192:	461a      	mov	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	7a1b      	ldrb	r3, [r3, #8]
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	461a      	mov	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	7a5b      	ldrb	r3, [r3, #9]
 80051ac:	461a      	mov	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	7a9b      	ldrb	r3, [r3, #10]
 80051b8:	025b      	lsls	r3, r3, #9
 80051ba:	461a      	mov	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]

}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	70fb      	strb	r3, [r7, #3]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 80051de:	bf00      	nop
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f9      	beq.n	80051e0 <SPI_Transfer+0xe>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f3      	bne.n	80051e0 <SPI_Transfer+0xe>
	pSPIx->DR = data;
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60da      	str	r2, [r3, #12]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 80051fe:	bf00      	nop
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f9      	beq.n	8005200 <SPI_Transfer+0x2e>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1f3      	bne.n	8005200 <SPI_Transfer+0x2e>
	return pSPIx->DR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d106      	bne.n	8005248 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8005246:	e005      	b.n	8005254 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d106      	bne.n	8005280 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f043 0204 	orr.w	r2, r3, #4
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 800527e:	e005      	b.n	800528c <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f023 0204 	bic.w	r2, r3, #4
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	605a      	str	r2, [r3, #4]
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80052a6:	2205      	movs	r2, #5
 80052a8:	492b      	ldr	r1, [pc, #172]	; (8005358 <SYSVIEW_AddTask+0xc0>)
 80052aa:	68b8      	ldr	r0, [r7, #8]
 80052ac:	f003 fdcc 	bl	8008e48 <memcmp>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d04b      	beq.n	800534e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80052b6:	4b29      	ldr	r3, [pc, #164]	; (800535c <SYSVIEW_AddTask+0xc4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b07      	cmp	r3, #7
 80052bc:	d903      	bls.n	80052c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80052be:	4828      	ldr	r0, [pc, #160]	; (8005360 <SYSVIEW_AddTask+0xc8>)
 80052c0:	f001 fbc4 	bl	8006a4c <SEGGER_SYSVIEW_Warn>
    return;
 80052c4:	e044      	b.n	8005350 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80052c6:	4b25      	ldr	r3, [pc, #148]	; (800535c <SYSVIEW_AddTask+0xc4>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4926      	ldr	r1, [pc, #152]	; (8005364 <SYSVIEW_AddTask+0xcc>)
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80052da:	4b20      	ldr	r3, [pc, #128]	; (800535c <SYSVIEW_AddTask+0xc4>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4921      	ldr	r1, [pc, #132]	; (8005364 <SYSVIEW_AddTask+0xcc>)
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	3304      	adds	r3, #4
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80052f0:	4b1a      	ldr	r3, [pc, #104]	; (800535c <SYSVIEW_AddTask+0xc4>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	491b      	ldr	r1, [pc, #108]	; (8005364 <SYSVIEW_AddTask+0xcc>)
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	3308      	adds	r3, #8
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005306:	4b15      	ldr	r3, [pc, #84]	; (800535c <SYSVIEW_AddTask+0xc4>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4916      	ldr	r1, [pc, #88]	; (8005364 <SYSVIEW_AddTask+0xcc>)
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	330c      	adds	r3, #12
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800531c:	4b0f      	ldr	r3, [pc, #60]	; (800535c <SYSVIEW_AddTask+0xc4>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4910      	ldr	r1, [pc, #64]	; (8005364 <SYSVIEW_AddTask+0xcc>)
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3310      	adds	r3, #16
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <SYSVIEW_AddTask+0xc4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	4a08      	ldr	r2, [pc, #32]	; (800535c <SYSVIEW_AddTask+0xc4>)
 800533a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f80e 	bl	8005368 <SYSVIEW_SendTaskInfo>
 800534c:	e000      	b.n	8005350 <SYSVIEW_AddTask+0xb8>
    return;
 800534e:	bf00      	nop

}
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	0800bc10 	.word	0x0800bc10
 800535c:	20013034 	.word	0x20013034
 8005360:	0800bc18 	.word	0x0800bc18
 8005364:	20012f94 	.word	0x20012f94

08005368 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005376:	f107 0314 	add.w	r3, r7, #20
 800537a:	2214      	movs	r2, #20
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f003 fd7e 	bl	8008e80 <memset>
  TaskInfo.TaskID     = TaskID;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005398:	f107 0314 	add.w	r3, r7, #20
 800539c:	4618      	mov	r0, r3
 800539e:	f000 ff83 	bl	80062a8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80053a2:	bf00      	nop
 80053a4:	3728      	adds	r7, #40	; 0x28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80053b2:	4b24      	ldr	r3, [pc, #144]	; (8005444 <_DoInit+0x98>)
 80053b4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2203      	movs	r2, #3
 80053ba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2203      	movs	r2, #3
 80053c0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a20      	ldr	r2, [pc, #128]	; (8005448 <_DoInit+0x9c>)
 80053c6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a20      	ldr	r2, [pc, #128]	; (800544c <_DoInit+0xa0>)
 80053cc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053d4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a17      	ldr	r2, [pc, #92]	; (8005448 <_DoInit+0x9c>)
 80053ec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a17      	ldr	r2, [pc, #92]	; (8005450 <_DoInit+0xa4>)
 80053f2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2210      	movs	r2, #16
 80053f8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3307      	adds	r3, #7
 8005410:	4a10      	ldr	r2, [pc, #64]	; (8005454 <_DoInit+0xa8>)
 8005412:	6810      	ldr	r0, [r2, #0]
 8005414:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005416:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a0e      	ldr	r2, [pc, #56]	; (8005458 <_DoInit+0xac>)
 800541e:	6810      	ldr	r0, [r2, #0]
 8005420:	6018      	str	r0, [r3, #0]
 8005422:	8891      	ldrh	r1, [r2, #4]
 8005424:	7992      	ldrb	r2, [r2, #6]
 8005426:	8099      	strh	r1, [r3, #4]
 8005428:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800542a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005434:	f3bf 8f5f 	dmb	sy
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	200137cc 	.word	0x200137cc
 8005448:	0800bc68 	.word	0x0800bc68
 800544c:	20013038 	.word	0x20013038
 8005450:	20013438 	.word	0x20013438
 8005454:	0800bc74 	.word	0x0800bc74
 8005458:	0800bc78 	.word	0x0800bc78

0800545c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005468:	2300      	movs	r3, #0
 800546a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	429a      	cmp	r2, r3
 800547e:	d905      	bls.n	800548c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
 800548a:	e007      	b.n	800549c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	69b9      	ldr	r1, [r7, #24]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	1acb      	subs	r3, r1, r3
 8005496:	4413      	add	r3, r2
 8005498:	3b01      	subs	r3, #1
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a6:	4293      	cmp	r3, r2
 80054a8:	bf28      	it	cs
 80054aa:	4613      	movcs	r3, r2
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80054ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4293      	cmp	r3, r2
 80054b4:	bf28      	it	cs
 80054b6:	4613      	movcs	r3, r2
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80054c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	6978      	ldr	r0, [r7, #20]
 80054ca:	f003 fccb 	bl	8008e64 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80054ce:	6a3a      	ldr	r2, [r7, #32]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	4413      	add	r3, r2
 80054d4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	4413      	add	r3, r2
 80054dc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	4413      	add	r3, r2
 80054ec:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d101      	bne.n	80054fc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054fc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1b2      	bne.n	8005472 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800550c:	6a3b      	ldr	r3, [r7, #32]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3728      	adds	r7, #40	; 0x28
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005516:	b580      	push	{r7, lr}
 8005518:	b088      	sub	sp, #32
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	429a      	cmp	r2, r3
 8005538:	d911      	bls.n	800555e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	6938      	ldr	r0, [r7, #16]
 800554a:	f003 fc8b 	bl	8008e64 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800554e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	441a      	add	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800555c:	e01f      	b.n	800559e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	6938      	ldr	r0, [r7, #16]
 8005572:	f003 fc77 	bl	8008e64 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	4413      	add	r3, r2
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4619      	mov	r1, r3
 800558e:	6938      	ldr	r0, [r7, #16]
 8005590:	f003 fc68 	bl	8008e64 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005594:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	60da      	str	r2, [r3, #12]
}
 800559e:	bf00      	nop
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80055a6:	b480      	push	{r7}
 80055a8:	b087      	sub	sp, #28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d808      	bhi.n	80055d4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad2      	subs	r2, r2, r3
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	3b01      	subs	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e004      	b.n	80055de <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80055de:	697b      	ldr	r3, [r7, #20]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08c      	sub	sp, #48	; 0x30
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80055f8:	4b3e      	ldr	r3, [pc, #248]	; (80056f4 <SEGGER_RTT_ReadNoLock+0x108>)
 80055fa:	623b      	str	r3, [r7, #32]
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <SEGGER_RTT_ReadNoLock+0x1e>
 8005606:	f7ff fed1 	bl	80053ac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4613      	mov	r3, r2
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	4413      	add	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	3360      	adds	r3, #96	; 0x60
 8005616:	4a37      	ldr	r2, [pc, #220]	; (80056f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005618:	4413      	add	r3, r2
 800561a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800562c:	2300      	movs	r3, #0
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	429a      	cmp	r2, r3
 8005636:	d92b      	bls.n	8005690 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4293      	cmp	r3, r2
 8005648:	bf28      	it	cs
 800564a:	4613      	movcs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	4413      	add	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	6939      	ldr	r1, [r7, #16]
 800565c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800565e:	f003 fc01 	bl	8008e64 <memcpy>
    NumBytesRead += NumBytesRem;
 8005662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	4413      	add	r3, r2
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800566a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	4413      	add	r3, r2
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800567a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	4413      	add	r3, r2
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005688:	429a      	cmp	r2, r3
 800568a:	d101      	bne.n	8005690 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800568c:	2300      	movs	r3, #0
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4293      	cmp	r3, r2
 800569e:	bf28      	it	cs
 80056a0:	4613      	movcs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d019      	beq.n	80056de <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	4413      	add	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	6939      	ldr	r1, [r7, #16]
 80056b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056ba:	f003 fbd3 	bl	8008e64 <memcpy>
    NumBytesRead += NumBytesRem;
 80056be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	4413      	add	r3, r2
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	4413      	add	r3, r2
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3730      	adds	r7, #48	; 0x30
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	200137cc 	.word	0x200137cc

080056f8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	4613      	mov	r3, r2
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	4413      	add	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4a1f      	ldr	r2, [pc, #124]	; (8005794 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005716:	4413      	add	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d029      	beq.n	8005776 <SEGGER_RTT_WriteNoLock+0x7e>
 8005722:	2b02      	cmp	r3, #2
 8005724:	d82e      	bhi.n	8005784 <SEGGER_RTT_WriteNoLock+0x8c>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <SEGGER_RTT_WriteNoLock+0x38>
 800572a:	2b01      	cmp	r3, #1
 800572c:	d013      	beq.n	8005756 <SEGGER_RTT_WriteNoLock+0x5e>
 800572e:	e029      	b.n	8005784 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005730:	6978      	ldr	r0, [r7, #20]
 8005732:	f7ff ff38 	bl	80055a6 <_GetAvailWriteSpace>
 8005736:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d202      	bcs.n	8005746 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005744:	e021      	b.n	800578a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	69b9      	ldr	r1, [r7, #24]
 800574e:	6978      	ldr	r0, [r7, #20]
 8005750:	f7ff fee1 	bl	8005516 <_WriteNoCheck>
    break;
 8005754:	e019      	b.n	800578a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005756:	6978      	ldr	r0, [r7, #20]
 8005758:	f7ff ff25 	bl	80055a6 <_GetAvailWriteSpace>
 800575c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4293      	cmp	r3, r2
 8005764:	bf28      	it	cs
 8005766:	4613      	movcs	r3, r2
 8005768:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	69b9      	ldr	r1, [r7, #24]
 800576e:	6978      	ldr	r0, [r7, #20]
 8005770:	f7ff fed1 	bl	8005516 <_WriteNoCheck>
    break;
 8005774:	e009      	b.n	800578a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	69b9      	ldr	r1, [r7, #24]
 800577a:	6978      	ldr	r0, [r7, #20]
 800577c:	f7ff fe6e 	bl	800545c <_WriteBlocking>
 8005780:	61f8      	str	r0, [r7, #28]
    break;
 8005782:	e002      	b.n	800578a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]
    break;
 8005788:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800578a:	69fb      	ldr	r3, [r7, #28]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3720      	adds	r7, #32
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	200137cc 	.word	0x200137cc

08005798 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80057a4:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <SEGGER_RTT_Write+0x48>)
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <SEGGER_RTT_Write+0x1e>
 80057b2:	f7ff fdfb 	bl	80053ac <_DoInit>
  SEGGER_RTT_LOCK();
 80057b6:	f3ef 8311 	mrs	r3, BASEPRI
 80057ba:	f04f 0120 	mov.w	r1, #32
 80057be:	f381 8811 	msr	BASEPRI, r1
 80057c2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f7ff ff95 	bl	80056f8 <SEGGER_RTT_WriteNoLock>
 80057ce:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80057d6:	697b      	ldr	r3, [r7, #20]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3720      	adds	r7, #32
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	200137cc 	.word	0x200137cc

080057e4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00f      	beq.n	800581a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80057fa:	e002      	b.n	8005802 <_EncodeStr+0x1e>
      Len++;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	3301      	adds	r3, #1
 8005800:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	4413      	add	r3, r2
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f6      	bne.n	80057fc <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	429a      	cmp	r2, r3
 8005814:	d901      	bls.n	800581a <_EncodeStr+0x36>
      Len = Limit;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2bfe      	cmp	r3, #254	; 0xfe
 800581e:	d806      	bhi.n	800582e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	60fa      	str	r2, [r7, #12]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	e011      	b.n	8005852 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	60fa      	str	r2, [r7, #12]
 8005834:	22ff      	movs	r2, #255	; 0xff
 8005836:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	60fa      	str	r2, [r7, #12]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	0a19      	lsrs	r1, r3, #8
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	60fa      	str	r2, [r7, #12]
 800584e:	b2ca      	uxtb	r2, r1
 8005850:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005856:	e00a      	b.n	800586e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	1c53      	adds	r3, r2, #1
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1c59      	adds	r1, r3, #1
 8005862:	60f9      	str	r1, [r7, #12]
 8005864:	7812      	ldrb	r2, [r2, #0]
 8005866:	701a      	strb	r2, [r3, #0]
    n++;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	3301      	adds	r3, #1
 800586c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	429a      	cmp	r2, r3
 8005874:	d3f0      	bcc.n	8005858 <_EncodeStr+0x74>
  }
  return pPayload;
 8005876:	68fb      	ldr	r3, [r7, #12]
}
 8005878:	4618      	mov	r0, r3
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3304      	adds	r3, #4
}
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058a2:	4b36      	ldr	r3, [pc, #216]	; (800597c <_HandleIncomingPacket+0xe0>)
 80058a4:	7e1b      	ldrb	r3, [r3, #24]
 80058a6:	4618      	mov	r0, r3
 80058a8:	1cfb      	adds	r3, r7, #3
 80058aa:	2201      	movs	r2, #1
 80058ac:	4619      	mov	r1, r3
 80058ae:	f7ff fe9d 	bl	80055ec <SEGGER_RTT_ReadNoLock>
 80058b2:	4603      	mov	r3, r0
 80058b4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dd54      	ble.n	8005966 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	2b80      	cmp	r3, #128	; 0x80
 80058c0:	d032      	beq.n	8005928 <_HandleIncomingPacket+0x8c>
 80058c2:	2b80      	cmp	r3, #128	; 0x80
 80058c4:	dc42      	bgt.n	800594c <_HandleIncomingPacket+0xb0>
 80058c6:	2b07      	cmp	r3, #7
 80058c8:	dc16      	bgt.n	80058f8 <_HandleIncomingPacket+0x5c>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	dd3e      	ble.n	800594c <_HandleIncomingPacket+0xb0>
 80058ce:	3b01      	subs	r3, #1
 80058d0:	2b06      	cmp	r3, #6
 80058d2:	d83b      	bhi.n	800594c <_HandleIncomingPacket+0xb0>
 80058d4:	a201      	add	r2, pc, #4	; (adr r2, 80058dc <_HandleIncomingPacket+0x40>)
 80058d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058da:	bf00      	nop
 80058dc:	080058ff 	.word	0x080058ff
 80058e0:	08005905 	.word	0x08005905
 80058e4:	0800590b 	.word	0x0800590b
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005917 	.word	0x08005917
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	08005923 	.word	0x08005923
 80058f8:	2b7f      	cmp	r3, #127	; 0x7f
 80058fa:	d036      	beq.n	800596a <_HandleIncomingPacket+0xce>
 80058fc:	e026      	b.n	800594c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80058fe:	f000 fb57 	bl	8005fb0 <SEGGER_SYSVIEW_Start>
      break;
 8005902:	e037      	b.n	8005974 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005904:	f000 fc10 	bl	8006128 <SEGGER_SYSVIEW_Stop>
      break;
 8005908:	e034      	b.n	8005974 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800590a:	f000 fdc5 	bl	8006498 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800590e:	e031      	b.n	8005974 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005910:	f000 fdae 	bl	8006470 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005914:	e02e      	b.n	8005974 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005916:	f000 fc2d 	bl	8006174 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800591a:	e02b      	b.n	8005974 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800591c:	f001 f858 	bl	80069d0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005920:	e028      	b.n	8005974 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005922:	f001 f837 	bl	8006994 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005926:	e025      	b.n	8005974 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <_HandleIncomingPacket+0xe0>)
 800592a:	7e1b      	ldrb	r3, [r3, #24]
 800592c:	4618      	mov	r0, r3
 800592e:	1cfb      	adds	r3, r7, #3
 8005930:	2201      	movs	r2, #1
 8005932:	4619      	mov	r1, r3
 8005934:	f7ff fe5a 	bl	80055ec <SEGGER_RTT_ReadNoLock>
 8005938:	4603      	mov	r3, r0
 800593a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	dd15      	ble.n	800596e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 ffa5 	bl	8006894 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800594a:	e010      	b.n	800596e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	b25b      	sxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	da0e      	bge.n	8005972 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005954:	4b09      	ldr	r3, [pc, #36]	; (800597c <_HandleIncomingPacket+0xe0>)
 8005956:	7e1b      	ldrb	r3, [r3, #24]
 8005958:	4618      	mov	r0, r3
 800595a:	1cfb      	adds	r3, r7, #3
 800595c:	2201      	movs	r2, #1
 800595e:	4619      	mov	r1, r3
 8005960:	f7ff fe44 	bl	80055ec <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005964:	e005      	b.n	8005972 <_HandleIncomingPacket+0xd6>
    }
  }
 8005966:	bf00      	nop
 8005968:	e004      	b.n	8005974 <_HandleIncomingPacket+0xd8>
      break;
 800596a:	bf00      	nop
 800596c:	e002      	b.n	8005974 <_HandleIncomingPacket+0xd8>
      break;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <_HandleIncomingPacket+0xd8>
      break;
 8005972:	bf00      	nop
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20013448 	.word	0x20013448

08005980 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b08c      	sub	sp, #48	; 0x30
 8005984:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005986:	2301      	movs	r3, #1
 8005988:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800598a:	1d3b      	adds	r3, r7, #4
 800598c:	3301      	adds	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005994:	4b32      	ldr	r3, [pc, #200]	; (8005a60 <_TrySendOverflowPacket+0xe0>)
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
 800599a:	e00b      	b.n	80059b4 <_TrySendOverflowPacket+0x34>
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a2:	1c59      	adds	r1, r3, #1
 80059a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	09db      	lsrs	r3, r3, #7
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2b7f      	cmp	r3, #127	; 0x7f
 80059b8:	d8f0      	bhi.n	800599c <_TrySendOverflowPacket+0x1c>
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80059ca:	4b26      	ldr	r3, [pc, #152]	; (8005a64 <_TrySendOverflowPacket+0xe4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059d0:	4b23      	ldr	r3, [pc, #140]	; (8005a60 <_TrySendOverflowPacket+0xe0>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	623b      	str	r3, [r7, #32]
 80059e2:	e00b      	b.n	80059fc <_TrySendOverflowPacket+0x7c>
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	1c59      	adds	r1, r3, #1
 80059ec:	6279      	str	r1, [r7, #36]	; 0x24
 80059ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	09db      	lsrs	r3, r3, #7
 80059fa:	623b      	str	r3, [r7, #32]
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005a00:	d8f0      	bhi.n	80059e4 <_TrySendOverflowPacket+0x64>
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	627a      	str	r2, [r7, #36]	; 0x24
 8005a08:	6a3a      	ldr	r2, [r7, #32]
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <_TrySendOverflowPacket+0xe0>)
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	4618      	mov	r0, r3
 8005a18:	1d3b      	adds	r3, r7, #4
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	4619      	mov	r1, r3
 8005a24:	f7fa fbe4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005a2c:	f001 f8c6 	bl	8006bbc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d009      	beq.n	8005a4a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a36:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <_TrySendOverflowPacket+0xe0>)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a3c:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <_TrySendOverflowPacket+0xe0>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <_TrySendOverflowPacket+0xe0>)
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e004      	b.n	8005a54 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005a4a:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <_TrySendOverflowPacket+0xe0>)
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	4a03      	ldr	r2, [pc, #12]	; (8005a60 <_TrySendOverflowPacket+0xe0>)
 8005a52:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005a54:	693b      	ldr	r3, [r7, #16]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3730      	adds	r7, #48	; 0x30
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20013448 	.word	0x20013448
 8005a64:	e0001004 	.word	0xe0001004

08005a68 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005a74:	4b6d      	ldr	r3, [pc, #436]	; (8005c2c <_SendPacket+0x1c4>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d010      	beq.n	8005a9e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005a7c:	4b6b      	ldr	r3, [pc, #428]	; (8005c2c <_SendPacket+0x1c4>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 80a5 	beq.w	8005bd0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005a86:	4b69      	ldr	r3, [pc, #420]	; (8005c2c <_SendPacket+0x1c4>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d109      	bne.n	8005aa2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005a8e:	f7ff ff77 	bl	8005980 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005a92:	4b66      	ldr	r3, [pc, #408]	; (8005c2c <_SendPacket+0x1c4>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	f040 809c 	bne.w	8005bd4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005a9c:	e001      	b.n	8005aa2 <_SendPacket+0x3a>
    goto Send;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <_SendPacket+0x3c>
Send:
 8005aa2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b1f      	cmp	r3, #31
 8005aa8:	d809      	bhi.n	8005abe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005aaa:	4b60      	ldr	r3, [pc, #384]	; (8005c2c <_SendPacket+0x1c4>)
 8005aac:	69da      	ldr	r2, [r3, #28]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 808d 	bne.w	8005bd8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b17      	cmp	r3, #23
 8005ac2:	d807      	bhi.n	8005ad4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	e03d      	b.n	8005b50 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae0:	d912      	bls.n	8005b08 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	09da      	lsrs	r2, r3, #7
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	3a01      	subs	r2, #1
 8005afa:	60fa      	str	r2, [r7, #12]
 8005afc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e006      	b.n	8005b16 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b7f      	cmp	r3, #127	; 0x7f
 8005b1a:	d912      	bls.n	8005b42 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	09da      	lsrs	r2, r3, #7
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	3a01      	subs	r2, #1
 8005b34:	60fa      	str	r2, [r7, #12]
 8005b36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e006      	b.n	8005b50 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b50:	4b37      	ldr	r3, [pc, #220]	; (8005c30 <_SendPacket+0x1c8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b56:	4b35      	ldr	r3, [pc, #212]	; (8005c2c <_SendPacket+0x1c4>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	623b      	str	r3, [r7, #32]
 8005b68:	e00b      	b.n	8005b82 <_SendPacket+0x11a>
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	1c59      	adds	r1, r3, #1
 8005b72:	6279      	str	r1, [r7, #36]	; 0x24
 8005b74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	09db      	lsrs	r3, r3, #7
 8005b80:	623b      	str	r3, [r7, #32]
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	2b7f      	cmp	r3, #127	; 0x7f
 8005b86:	d8f0      	bhi.n	8005b6a <_SendPacket+0x102>
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	627a      	str	r2, [r7, #36]	; 0x24
 8005b8e:	6a3a      	ldr	r2, [r7, #32]
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <_SendPacket+0x1c4>)
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	68f9      	ldr	r1, [r7, #12]
 8005ba8:	f7fa fb22 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005bac:	4603      	mov	r3, r0
 8005bae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005bb0:	f001 f804 	bl	8006bbc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bba:	4a1c      	ldr	r2, [pc, #112]	; (8005c2c <_SendPacket+0x1c4>)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	60d3      	str	r3, [r2, #12]
 8005bc0:	e00b      	b.n	8005bda <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <_SendPacket+0x1c4>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	4b18      	ldr	r3, [pc, #96]	; (8005c2c <_SendPacket+0x1c4>)
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e004      	b.n	8005bda <_SendPacket+0x172>
    goto SendDone;
 8005bd0:	bf00      	nop
 8005bd2:	e002      	b.n	8005bda <_SendPacket+0x172>
      goto SendDone;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <_SendPacket+0x172>
      goto SendDone;
 8005bd8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005bda:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <_SendPacket+0x1c4>)
 8005bdc:	7e1b      	ldrb	r3, [r3, #24]
 8005bde:	4619      	mov	r1, r3
 8005be0:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <_SendPacket+0x1cc>)
 8005be2:	460b      	mov	r3, r1
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	440b      	add	r3, r1
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4413      	add	r3, r2
 8005bec:	336c      	adds	r3, #108	; 0x6c
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <_SendPacket+0x1c4>)
 8005bf2:	7e1b      	ldrb	r3, [r3, #24]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	490f      	ldr	r1, [pc, #60]	; (8005c34 <_SendPacket+0x1cc>)
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4403      	add	r3, r0
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	440b      	add	r3, r1
 8005c02:	3370      	adds	r3, #112	; 0x70
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d00b      	beq.n	8005c22 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c0a:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <_SendPacket+0x1c4>)
 8005c0c:	789b      	ldrb	r3, [r3, #2]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d107      	bne.n	8005c22 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <_SendPacket+0x1c4>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c18:	f7ff fe40 	bl	800589c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c1c:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <_SendPacket+0x1c4>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005c22:	bf00      	nop
 8005c24:	3728      	adds	r7, #40	; 0x28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20013448 	.word	0x20013448
 8005c30:	e0001004 	.word	0xe0001004
 8005c34:	200137cc 	.word	0x200137cc

08005c38 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c40:	f3ef 8311 	mrs	r3, BASEPRI
 8005c44:	f04f 0120 	mov.w	r1, #32
 8005c48:	f381 8811 	msr	BASEPRI, r1
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	4808      	ldr	r0, [pc, #32]	; (8005c70 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005c50:	f7ff fe18 	bl	8005884 <_PreparePacket>
 8005c54:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	68b8      	ldr	r0, [r7, #8]
 8005c5c:	f7ff ff04 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f383 8811 	msr	BASEPRI, r3
}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20013478 	.word	0x20013478

08005c74 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c82:	f04f 0120 	mov.w	r1, #32
 8005c86:	f381 8811 	msr	BASEPRI, r1
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	4816      	ldr	r0, [pc, #88]	; (8005ce8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005c8e:	f7ff fdf9 	bl	8005884 <_PreparePacket>
 8005c92:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	e00b      	b.n	8005cba <SEGGER_SYSVIEW_RecordU32+0x46>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	1c59      	adds	r1, r3, #1
 8005caa:	61f9      	str	r1, [r7, #28]
 8005cac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	09db      	lsrs	r3, r3, #7
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8005cbe:	d8f0      	bhi.n	8005ca2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	61fa      	str	r2, [r7, #28]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	6938      	ldr	r0, [r7, #16]
 8005cd6:	f7ff fec7 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f383 8811 	msr	BASEPRI, r3
}
 8005ce0:	bf00      	nop
 8005ce2:	3720      	adds	r7, #32
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20013478 	.word	0x20013478

08005cec <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cf8:	f3ef 8311 	mrs	r3, BASEPRI
 8005cfc:	f04f 0120 	mov.w	r1, #32
 8005d00:	f381 8811 	msr	BASEPRI, r1
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	4825      	ldr	r0, [pc, #148]	; (8005d9c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005d08:	f7ff fdbc 	bl	8005884 <_PreparePacket>
 8005d0c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d1a:	e00b      	b.n	8005d34 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	1c59      	adds	r1, r3, #1
 8005d24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	09db      	lsrs	r3, r3, #7
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	2b7f      	cmp	r3, #127	; 0x7f
 8005d38:	d8f0      	bhi.n	8005d1c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	e00b      	b.n	8005d6c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	1c59      	adds	r1, r3, #1
 8005d5c:	6279      	str	r1, [r7, #36]	; 0x24
 8005d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	09db      	lsrs	r3, r3, #7
 8005d6a:	623b      	str	r3, [r7, #32]
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d70:	d8f0      	bhi.n	8005d54 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	627a      	str	r2, [r7, #36]	; 0x24
 8005d78:	6a3a      	ldr	r2, [r7, #32]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	6979      	ldr	r1, [r7, #20]
 8005d86:	69b8      	ldr	r0, [r7, #24]
 8005d88:	f7ff fe6e 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f383 8811 	msr	BASEPRI, r3
}
 8005d92:	bf00      	nop
 8005d94:	3730      	adds	r7, #48	; 0x30
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20013478 	.word	0x20013478

08005da0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08e      	sub	sp, #56	; 0x38
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dae:	f3ef 8311 	mrs	r3, BASEPRI
 8005db2:	f04f 0120 	mov.w	r1, #32
 8005db6:	f381 8811 	msr	BASEPRI, r1
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	4832      	ldr	r0, [pc, #200]	; (8005e88 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005dbe:	f7ff fd61 	bl	8005884 <_PreparePacket>
 8005dc2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	637b      	str	r3, [r7, #52]	; 0x34
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	633b      	str	r3, [r7, #48]	; 0x30
 8005dd0:	e00b      	b.n	8005dea <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd8:	1c59      	adds	r1, r3, #1
 8005dda:	6379      	str	r1, [r7, #52]	; 0x34
 8005ddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	09db      	lsrs	r3, r3, #7
 8005de8:	633b      	str	r3, [r7, #48]	; 0x30
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	2b7f      	cmp	r3, #127	; 0x7f
 8005dee:	d8f0      	bhi.n	8005dd2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	637a      	str	r2, [r7, #52]	; 0x34
 8005df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e08:	e00b      	b.n	8005e22 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	1c59      	adds	r1, r3, #1
 8005e12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	09db      	lsrs	r3, r3, #7
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	2b7f      	cmp	r3, #127	; 0x7f
 8005e26:	d8f0      	bhi.n	8005e0a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	623b      	str	r3, [r7, #32]
 8005e40:	e00b      	b.n	8005e5a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	1c59      	adds	r1, r3, #1
 8005e4a:	6279      	str	r1, [r7, #36]	; 0x24
 8005e4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	09db      	lsrs	r3, r3, #7
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e5e:	d8f0      	bhi.n	8005e42 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	627a      	str	r2, [r7, #36]	; 0x24
 8005e66:	6a3a      	ldr	r2, [r7, #32]
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	6979      	ldr	r1, [r7, #20]
 8005e74:	69b8      	ldr	r0, [r7, #24]
 8005e76:	f7ff fdf7 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	f383 8811 	msr	BASEPRI, r3
}
 8005e80:	bf00      	nop
 8005e82:	3738      	adds	r7, #56	; 0x38
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20013478 	.word	0x20013478

08005e8c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b090      	sub	sp, #64	; 0x40
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e9e:	f04f 0120 	mov.w	r1, #32
 8005ea2:	f381 8811 	msr	BASEPRI, r1
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	4840      	ldr	r0, [pc, #256]	; (8005fac <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005eaa:	f7ff fceb 	bl	8005884 <_PreparePacket>
 8005eae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ebc:	e00b      	b.n	8005ed6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	09db      	lsrs	r3, r3, #7
 8005ed4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eda:	d8f0      	bhi.n	8005ebe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ef4:	e00b      	b.n	8005f0e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efc:	1c59      	adds	r1, r3, #1
 8005efe:	6379      	str	r1, [r7, #52]	; 0x34
 8005f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	09db      	lsrs	r3, r3, #7
 8005f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	2b7f      	cmp	r3, #127	; 0x7f
 8005f12:	d8f0      	bhi.n	8005ef6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	637a      	str	r2, [r7, #52]	; 0x34
 8005f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f2c:	e00b      	b.n	8005f46 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	09db      	lsrs	r3, r3, #7
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4a:	d8f0      	bhi.n	8005f2e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f62:	623b      	str	r3, [r7, #32]
 8005f64:	e00b      	b.n	8005f7e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	6279      	str	r1, [r7, #36]	; 0x24
 8005f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	09db      	lsrs	r3, r3, #7
 8005f7c:	623b      	str	r3, [r7, #32]
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	2b7f      	cmp	r3, #127	; 0x7f
 8005f82:	d8f0      	bhi.n	8005f66 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	627a      	str	r2, [r7, #36]	; 0x24
 8005f8a:	6a3a      	ldr	r2, [r7, #32]
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	6979      	ldr	r1, [r7, #20]
 8005f98:	69b8      	ldr	r0, [r7, #24]
 8005f9a:	f7ff fd65 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f383 8811 	msr	BASEPRI, r3
}
 8005fa4:	bf00      	nop
 8005fa6:	3740      	adds	r7, #64	; 0x40
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	20013478 	.word	0x20013478

08005fb0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08c      	sub	sp, #48	; 0x30
 8005fb4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005fb6:	4b59      	ldr	r3, [pc, #356]	; (800611c <SEGGER_SYSVIEW_Start+0x16c>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc0:	f04f 0120 	mov.w	r1, #32
 8005fc4:	f381 8811 	msr	BASEPRI, r1
 8005fc8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005fca:	4b54      	ldr	r3, [pc, #336]	; (800611c <SEGGER_SYSVIEW_Start+0x16c>)
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	220a      	movs	r2, #10
 8005fd0:	4953      	ldr	r1, [pc, #332]	; (8006120 <SEGGER_SYSVIEW_Start+0x170>)
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fa f90c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005fde:	f000 fded 	bl	8006bbc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005fe2:	200a      	movs	r0, #10
 8005fe4:	f7ff fe28 	bl	8005c38 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fe8:	f3ef 8311 	mrs	r3, BASEPRI
 8005fec:	f04f 0120 	mov.w	r1, #32
 8005ff0:	f381 8811 	msr	BASEPRI, r1
 8005ff4:	60bb      	str	r3, [r7, #8]
 8005ff6:	484b      	ldr	r0, [pc, #300]	; (8006124 <SEGGER_SYSVIEW_Start+0x174>)
 8005ff8:	f7ff fc44 	bl	8005884 <_PreparePacket>
 8005ffc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006006:	4b45      	ldr	r3, [pc, #276]	; (800611c <SEGGER_SYSVIEW_Start+0x16c>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
 800600c:	e00b      	b.n	8006026 <SEGGER_SYSVIEW_Start+0x76>
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	b2da      	uxtb	r2, r3
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	1c59      	adds	r1, r3, #1
 8006016:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	09db      	lsrs	r3, r3, #7
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	2b7f      	cmp	r3, #127	; 0x7f
 800602a:	d8f0      	bhi.n	800600e <SEGGER_SYSVIEW_Start+0x5e>
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
 8006040:	4b36      	ldr	r3, [pc, #216]	; (800611c <SEGGER_SYSVIEW_Start+0x16c>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	623b      	str	r3, [r7, #32]
 8006046:	e00b      	b.n	8006060 <SEGGER_SYSVIEW_Start+0xb0>
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	b2da      	uxtb	r2, r3
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	6279      	str	r1, [r7, #36]	; 0x24
 8006052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	09db      	lsrs	r3, r3, #7
 800605e:	623b      	str	r3, [r7, #32]
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	2b7f      	cmp	r3, #127	; 0x7f
 8006064:	d8f0      	bhi.n	8006048 <SEGGER_SYSVIEW_Start+0x98>
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	627a      	str	r2, [r7, #36]	; 0x24
 800606c:	6a3a      	ldr	r2, [r7, #32]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	4b28      	ldr	r3, [pc, #160]	; (800611c <SEGGER_SYSVIEW_Start+0x16c>)
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	61bb      	str	r3, [r7, #24]
 8006080:	e00b      	b.n	800609a <SEGGER_SYSVIEW_Start+0xea>
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	b2da      	uxtb	r2, r3
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	1c59      	adds	r1, r3, #1
 800608a:	61f9      	str	r1, [r7, #28]
 800608c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	09db      	lsrs	r3, r3, #7
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b7f      	cmp	r3, #127	; 0x7f
 800609e:	d8f0      	bhi.n	8006082 <SEGGER_SYSVIEW_Start+0xd2>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	61fa      	str	r2, [r7, #28]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	e00b      	b.n	80060d2 <SEGGER_SYSVIEW_Start+0x122>
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	1c59      	adds	r1, r3, #1
 80060c2:	6179      	str	r1, [r7, #20]
 80060c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	09db      	lsrs	r3, r3, #7
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b7f      	cmp	r3, #127	; 0x7f
 80060d6:	d8f0      	bhi.n	80060ba <SEGGER_SYSVIEW_Start+0x10a>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	617a      	str	r2, [r7, #20]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80060e8:	2218      	movs	r2, #24
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fcbb 	bl	8005a68 <_SendPacket>
      RECORD_END();
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80060f8:	4b08      	ldr	r3, [pc, #32]	; (800611c <SEGGER_SYSVIEW_Start+0x16c>)
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006100:	4b06      	ldr	r3, [pc, #24]	; (800611c <SEGGER_SYSVIEW_Start+0x16c>)
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006106:	f000 f9c7 	bl	8006498 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800610a:	f000 f9b1 	bl	8006470 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800610e:	f000 fc5f 	bl	80069d0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006112:	bf00      	nop
 8006114:	3730      	adds	r7, #48	; 0x30
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20013448 	.word	0x20013448
 8006120:	0800c18c 	.word	0x0800c18c
 8006124:	20013478 	.word	0x20013478

08006128 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800612e:	f3ef 8311 	mrs	r3, BASEPRI
 8006132:	f04f 0120 	mov.w	r1, #32
 8006136:	f381 8811 	msr	BASEPRI, r1
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	480b      	ldr	r0, [pc, #44]	; (800616c <SEGGER_SYSVIEW_Stop+0x44>)
 800613e:	f7ff fba1 	bl	8005884 <_PreparePacket>
 8006142:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006144:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <SEGGER_SYSVIEW_Stop+0x48>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800614c:	220b      	movs	r2, #11
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6838      	ldr	r0, [r7, #0]
 8006152:	f7ff fc89 	bl	8005a68 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <SEGGER_SYSVIEW_Stop+0x48>)
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f383 8811 	msr	BASEPRI, r3
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20013478 	.word	0x20013478
 8006170:	20013448 	.word	0x20013448

08006174 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006174:	b580      	push	{r7, lr}
 8006176:	b08c      	sub	sp, #48	; 0x30
 8006178:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800617a:	f3ef 8311 	mrs	r3, BASEPRI
 800617e:	f04f 0120 	mov.w	r1, #32
 8006182:	f381 8811 	msr	BASEPRI, r1
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	4845      	ldr	r0, [pc, #276]	; (80062a0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800618a:	f7ff fb7b 	bl	8005884 <_PreparePacket>
 800618e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006198:	4b42      	ldr	r3, [pc, #264]	; (80062a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
 800619e:	e00b      	b.n	80061b8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	1c59      	adds	r1, r3, #1
 80061a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	09db      	lsrs	r3, r3, #7
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2b7f      	cmp	r3, #127	; 0x7f
 80061bc:	d8f0      	bhi.n	80061a0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
 80061d2:	4b34      	ldr	r3, [pc, #208]	; (80062a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	e00b      	b.n	80061f2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	1c59      	adds	r1, r3, #1
 80061e2:	6279      	str	r1, [r7, #36]	; 0x24
 80061e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	09db      	lsrs	r3, r3, #7
 80061f0:	623b      	str	r3, [r7, #32]
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	2b7f      	cmp	r3, #127	; 0x7f
 80061f6:	d8f0      	bhi.n	80061da <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	627a      	str	r2, [r7, #36]	; 0x24
 80061fe:	6a3a      	ldr	r2, [r7, #32]
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	61fb      	str	r3, [r7, #28]
 800620c:	4b25      	ldr	r3, [pc, #148]	; (80062a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	e00b      	b.n	800622c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	61f9      	str	r1, [r7, #28]
 800621e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	09db      	lsrs	r3, r3, #7
 800622a:	61bb      	str	r3, [r7, #24]
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b7f      	cmp	r3, #127	; 0x7f
 8006230:	d8f0      	bhi.n	8006214 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	61fa      	str	r2, [r7, #28]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	e00b      	b.n	8006264 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	6179      	str	r1, [r7, #20]
 8006256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b7f      	cmp	r3, #127	; 0x7f
 8006268:	d8f0      	bhi.n	800624c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	617a      	str	r2, [r7, #20]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800627a:	2218      	movs	r2, #24
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	68b8      	ldr	r0, [r7, #8]
 8006280:	f7ff fbf2 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800628a:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006292:	4b04      	ldr	r3, [pc, #16]	; (80062a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	4798      	blx	r3
  }
}
 8006298:	bf00      	nop
 800629a:	3730      	adds	r7, #48	; 0x30
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20013478 	.word	0x20013478
 80062a4:	20013448 	.word	0x20013448

080062a8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b092      	sub	sp, #72	; 0x48
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80062b0:	f3ef 8311 	mrs	r3, BASEPRI
 80062b4:	f04f 0120 	mov.w	r1, #32
 80062b8:	f381 8811 	msr	BASEPRI, r1
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	486a      	ldr	r0, [pc, #424]	; (8006468 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80062c0:	f7ff fae0 	bl	8005884 <_PreparePacket>
 80062c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	647b      	str	r3, [r7, #68]	; 0x44
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b66      	ldr	r3, [pc, #408]	; (800646c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	643b      	str	r3, [r7, #64]	; 0x40
 80062da:	e00b      	b.n	80062f4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80062dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e2:	1c59      	adds	r1, r3, #1
 80062e4:	6479      	str	r1, [r7, #68]	; 0x44
 80062e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f0:	09db      	lsrs	r3, r3, #7
 80062f2:	643b      	str	r3, [r7, #64]	; 0x40
 80062f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f6:	2b7f      	cmp	r3, #127	; 0x7f
 80062f8:	d8f0      	bhi.n	80062dc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80062fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	647a      	str	r2, [r7, #68]	; 0x44
 8006300:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006308:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38
 8006314:	e00b      	b.n	800632e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006318:	b2da      	uxtb	r2, r3
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	1c59      	adds	r1, r3, #1
 800631e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006320:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	09db      	lsrs	r3, r3, #7
 800632c:	63bb      	str	r3, [r7, #56]	; 0x38
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	2b7f      	cmp	r3, #127	; 0x7f
 8006332:	d8f0      	bhi.n	8006316 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	63fa      	str	r2, [r7, #60]	; 0x3c
 800633a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006342:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	4619      	mov	r1, r3
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff fa49 	bl	80057e4 <_EncodeStr>
 8006352:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006354:	2209      	movs	r2, #9
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	6938      	ldr	r0, [r7, #16]
 800635a:	f7ff fb85 	bl	8005a68 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b40      	ldr	r3, [pc, #256]	; (800646c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	633b      	str	r3, [r7, #48]	; 0x30
 8006372:	e00b      	b.n	800638c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	b2da      	uxtb	r2, r3
 8006378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637a:	1c59      	adds	r1, r3, #1
 800637c:	6379      	str	r1, [r7, #52]	; 0x34
 800637e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	09db      	lsrs	r3, r3, #7
 800638a:	633b      	str	r3, [r7, #48]	; 0x30
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	2b7f      	cmp	r3, #127	; 0x7f
 8006390:	d8f0      	bhi.n	8006374 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	637a      	str	r2, [r7, #52]	; 0x34
 8006398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ac:	e00b      	b.n	80063c6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	1c59      	adds	r1, r3, #1
 80063b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	09db      	lsrs	r3, r3, #7
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	2b7f      	cmp	r3, #127	; 0x7f
 80063ca:	d8f0      	bhi.n	80063ae <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	623b      	str	r3, [r7, #32]
 80063e6:	e00b      	b.n	8006400 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	1c59      	adds	r1, r3, #1
 80063f0:	6279      	str	r1, [r7, #36]	; 0x24
 80063f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	09db      	lsrs	r3, r3, #7
 80063fe:	623b      	str	r3, [r7, #32]
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	2b7f      	cmp	r3, #127	; 0x7f
 8006404:	d8f0      	bhi.n	80063e8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	627a      	str	r2, [r7, #36]	; 0x24
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	b2d2      	uxtb	r2, r2
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	61fb      	str	r3, [r7, #28]
 800641a:	2300      	movs	r3, #0
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	e00b      	b.n	8006438 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	b2da      	uxtb	r2, r3
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	61f9      	str	r1, [r7, #28]
 800642a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	09db      	lsrs	r3, r3, #7
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b7f      	cmp	r3, #127	; 0x7f
 800643c:	d8f0      	bhi.n	8006420 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	61fa      	str	r2, [r7, #28]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800644e:	2215      	movs	r2, #21
 8006450:	68f9      	ldr	r1, [r7, #12]
 8006452:	6938      	ldr	r0, [r7, #16]
 8006454:	f7ff fb08 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f383 8811 	msr	BASEPRI, r3
}
 800645e:	bf00      	nop
 8006460:	3748      	adds	r7, #72	; 0x48
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20013478 	.word	0x20013478
 800646c:	20013448 	.word	0x20013448

08006470 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800647c:	4b05      	ldr	r3, [pc, #20]	; (8006494 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006486:	4b03      	ldr	r3, [pc, #12]	; (8006494 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	4798      	blx	r3
  }
}
 800648e:	bf00      	nop
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20013448 	.word	0x20013448

08006498 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006498:	b590      	push	{r4, r7, lr}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800649e:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d01a      	beq.n	80064dc <SEGGER_SYSVIEW_RecordSystime+0x44>
 80064a6:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d015      	beq.n	80064dc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80064b0:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4798      	blx	r3
 80064b8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80064bc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80064be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	000a      	movs	r2, r1
 80064cc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80064ce:	4613      	mov	r3, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	4621      	mov	r1, r4
 80064d4:	200d      	movs	r0, #13
 80064d6:	f7ff fc09 	bl	8005cec <SEGGER_SYSVIEW_RecordU32x2>
 80064da:	e006      	b.n	80064ea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4619      	mov	r1, r3
 80064e2:	200c      	movs	r0, #12
 80064e4:	f7ff fbc6 	bl	8005c74 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd90      	pop	{r4, r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20013448 	.word	0x20013448
 80064f8:	e0001004 	.word	0xe0001004

080064fc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006502:	f3ef 8311 	mrs	r3, BASEPRI
 8006506:	f04f 0120 	mov.w	r1, #32
 800650a:	f381 8811 	msr	BASEPRI, r1
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	4819      	ldr	r0, [pc, #100]	; (8006578 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006512:	f7ff f9b7 	bl	8005884 <_PreparePacket>
 8006516:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800651c:	4b17      	ldr	r3, [pc, #92]	; (800657c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006524:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	613b      	str	r3, [r7, #16]
 800652e:	e00b      	b.n	8006548 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	b2da      	uxtb	r2, r3
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	1c59      	adds	r1, r3, #1
 8006538:	6179      	str	r1, [r7, #20]
 800653a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	09db      	lsrs	r3, r3, #7
 8006546:	613b      	str	r3, [r7, #16]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2b7f      	cmp	r3, #127	; 0x7f
 800654c:	d8f0      	bhi.n	8006530 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	617a      	str	r2, [r7, #20]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800655e:	2202      	movs	r2, #2
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	68b8      	ldr	r0, [r7, #8]
 8006564:	f7ff fa80 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f383 8811 	msr	BASEPRI, r3
}
 800656e:	bf00      	nop
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20013478 	.word	0x20013478
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006586:	f3ef 8311 	mrs	r3, BASEPRI
 800658a:	f04f 0120 	mov.w	r1, #32
 800658e:	f381 8811 	msr	BASEPRI, r1
 8006592:	607b      	str	r3, [r7, #4]
 8006594:	4807      	ldr	r0, [pc, #28]	; (80065b4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006596:	f7ff f975 	bl	8005884 <_PreparePacket>
 800659a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800659c:	2203      	movs	r2, #3
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6838      	ldr	r0, [r7, #0]
 80065a2:	f7ff fa61 	bl	8005a68 <_SendPacket>
  RECORD_END();
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f383 8811 	msr	BASEPRI, r3
}
 80065ac:	bf00      	nop
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20013478 	.word	0x20013478

080065b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065be:	f3ef 8311 	mrs	r3, BASEPRI
 80065c2:	f04f 0120 	mov.w	r1, #32
 80065c6:	f381 8811 	msr	BASEPRI, r1
 80065ca:	607b      	str	r3, [r7, #4]
 80065cc:	4807      	ldr	r0, [pc, #28]	; (80065ec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80065ce:	f7ff f959 	bl	8005884 <_PreparePacket>
 80065d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80065d4:	2212      	movs	r2, #18
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6838      	ldr	r0, [r7, #0]
 80065da:	f7ff fa45 	bl	8005a68 <_SendPacket>
  RECORD_END();
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f383 8811 	msr	BASEPRI, r3
}
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20013478 	.word	0x20013478

080065f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065f6:	f3ef 8311 	mrs	r3, BASEPRI
 80065fa:	f04f 0120 	mov.w	r1, #32
 80065fe:	f381 8811 	msr	BASEPRI, r1
 8006602:	607b      	str	r3, [r7, #4]
 8006604:	4807      	ldr	r0, [pc, #28]	; (8006624 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006606:	f7ff f93d 	bl	8005884 <_PreparePacket>
 800660a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800660c:	2211      	movs	r2, #17
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6838      	ldr	r0, [r7, #0]
 8006612:	f7ff fa29 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f383 8811 	msr	BASEPRI, r3
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	20013478 	.word	0x20013478

08006628 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006630:	f3ef 8311 	mrs	r3, BASEPRI
 8006634:	f04f 0120 	mov.w	r1, #32
 8006638:	f381 8811 	msr	BASEPRI, r1
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	4819      	ldr	r0, [pc, #100]	; (80066a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006640:	f7ff f920 	bl	8005884 <_PreparePacket>
 8006644:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800664a:	4b17      	ldr	r3, [pc, #92]	; (80066a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	e00b      	b.n	8006676 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	b2da      	uxtb	r2, r3
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	1c59      	adds	r1, r3, #1
 8006666:	61f9      	str	r1, [r7, #28]
 8006668:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	09db      	lsrs	r3, r3, #7
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	2b7f      	cmp	r3, #127	; 0x7f
 800667a:	d8f0      	bhi.n	800665e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	61fa      	str	r2, [r7, #28]
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800668c:	2208      	movs	r2, #8
 800668e:	68f9      	ldr	r1, [r7, #12]
 8006690:	6938      	ldr	r0, [r7, #16]
 8006692:	f7ff f9e9 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f383 8811 	msr	BASEPRI, r3
}
 800669c:	bf00      	nop
 800669e:	3720      	adds	r7, #32
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20013478 	.word	0x20013478
 80066a8:	20013448 	.word	0x20013448

080066ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066b4:	f3ef 8311 	mrs	r3, BASEPRI
 80066b8:	f04f 0120 	mov.w	r1, #32
 80066bc:	f381 8811 	msr	BASEPRI, r1
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	4819      	ldr	r0, [pc, #100]	; (8006728 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80066c4:	f7ff f8de 	bl	8005884 <_PreparePacket>
 80066c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066ce:	4b17      	ldr	r3, [pc, #92]	; (800672c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e00b      	b.n	80066fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	1c59      	adds	r1, r3, #1
 80066ea:	61f9      	str	r1, [r7, #28]
 80066ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	09db      	lsrs	r3, r3, #7
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b7f      	cmp	r3, #127	; 0x7f
 80066fe:	d8f0      	bhi.n	80066e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	61fa      	str	r2, [r7, #28]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006710:	2204      	movs	r2, #4
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	6938      	ldr	r0, [r7, #16]
 8006716:	f7ff f9a7 	bl	8005a68 <_SendPacket>
  RECORD_END();
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f383 8811 	msr	BASEPRI, r3
}
 8006720:	bf00      	nop
 8006722:	3720      	adds	r7, #32
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20013478 	.word	0x20013478
 800672c:	20013448 	.word	0x20013448

08006730 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006738:	f3ef 8311 	mrs	r3, BASEPRI
 800673c:	f04f 0120 	mov.w	r1, #32
 8006740:	f381 8811 	msr	BASEPRI, r1
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	4819      	ldr	r0, [pc, #100]	; (80067ac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006748:	f7ff f89c 	bl	8005884 <_PreparePacket>
 800674c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006752:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e00b      	b.n	800677e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	b2da      	uxtb	r2, r3
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1c59      	adds	r1, r3, #1
 800676e:	61f9      	str	r1, [r7, #28]
 8006770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	09db      	lsrs	r3, r3, #7
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b7f      	cmp	r3, #127	; 0x7f
 8006782:	d8f0      	bhi.n	8006766 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	61fa      	str	r2, [r7, #28]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006794:	2206      	movs	r2, #6
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	6938      	ldr	r0, [r7, #16]
 800679a:	f7ff f965 	bl	8005a68 <_SendPacket>
  RECORD_END();
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f383 8811 	msr	BASEPRI, r3
}
 80067a4:	bf00      	nop
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20013478 	.word	0x20013478
 80067b0:	20013448 	.word	0x20013448

080067b4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08a      	sub	sp, #40	; 0x28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80067be:	f3ef 8311 	mrs	r3, BASEPRI
 80067c2:	f04f 0120 	mov.w	r1, #32
 80067c6:	f381 8811 	msr	BASEPRI, r1
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	4827      	ldr	r0, [pc, #156]	; (800686c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80067ce:	f7ff f859 	bl	8005884 <_PreparePacket>
 80067d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067d8:	4b25      	ldr	r3, [pc, #148]	; (8006870 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	623b      	str	r3, [r7, #32]
 80067ea:	e00b      	b.n	8006804 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	1c59      	adds	r1, r3, #1
 80067f4:	6279      	str	r1, [r7, #36]	; 0x24
 80067f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	09db      	lsrs	r3, r3, #7
 8006802:	623b      	str	r3, [r7, #32]
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	2b7f      	cmp	r3, #127	; 0x7f
 8006808:	d8f0      	bhi.n	80067ec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	627a      	str	r2, [r7, #36]	; 0x24
 8006810:	6a3a      	ldr	r2, [r7, #32]
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	61fb      	str	r3, [r7, #28]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e00b      	b.n	800683c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	b2da      	uxtb	r2, r3
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	1c59      	adds	r1, r3, #1
 800682c:	61f9      	str	r1, [r7, #28]
 800682e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	09db      	lsrs	r3, r3, #7
 800683a:	61bb      	str	r3, [r7, #24]
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b7f      	cmp	r3, #127	; 0x7f
 8006840:	d8f0      	bhi.n	8006824 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	61fa      	str	r2, [r7, #28]
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006852:	2207      	movs	r2, #7
 8006854:	68f9      	ldr	r1, [r7, #12]
 8006856:	6938      	ldr	r0, [r7, #16]
 8006858:	f7ff f906 	bl	8005a68 <_SendPacket>
  RECORD_END();
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f383 8811 	msr	BASEPRI, r3
}
 8006862:	bf00      	nop
 8006864:	3728      	adds	r7, #40	; 0x28
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20013478 	.word	0x20013478
 8006870:	20013448 	.word	0x20013448

08006874 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800687c:	4b04      	ldr	r3, [pc, #16]	; (8006890 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	1ad3      	subs	r3, r2, r3
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	20013448 	.word	0x20013448

08006894 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b08c      	sub	sp, #48	; 0x30
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800689e:	4b3b      	ldr	r3, [pc, #236]	; (800698c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d06d      	beq.n	8006982 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80068a6:	4b39      	ldr	r3, [pc, #228]	; (800698c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80068ac:	2300      	movs	r3, #0
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b0:	e008      	b.n	80068c4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80068b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	3301      	adds	r3, #1
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c4:	79fb      	ldrb	r3, [r7, #7]
 80068c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d3f2      	bcc.n	80068b2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80068cc:	e000      	b.n	80068d0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80068ce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d055      	beq.n	8006982 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068d6:	f3ef 8311 	mrs	r3, BASEPRI
 80068da:	f04f 0120 	mov.w	r1, #32
 80068de:	f381 8811 	msr	BASEPRI, r1
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	482a      	ldr	r0, [pc, #168]	; (8006990 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80068e6:	f7fe ffcd 	bl	8005884 <_PreparePacket>
 80068ea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	623b      	str	r3, [r7, #32]
 80068f8:	e00b      	b.n	8006912 <SEGGER_SYSVIEW_SendModule+0x7e>
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	1c59      	adds	r1, r3, #1
 8006902:	6279      	str	r1, [r7, #36]	; 0x24
 8006904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	09db      	lsrs	r3, r3, #7
 8006910:	623b      	str	r3, [r7, #32]
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	2b7f      	cmp	r3, #127	; 0x7f
 8006916:	d8f0      	bhi.n	80068fa <SEGGER_SYSVIEW_SendModule+0x66>
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	627a      	str	r2, [r7, #36]	; 0x24
 800691e:	6a3a      	ldr	r2, [r7, #32]
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	61fb      	str	r3, [r7, #28]
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	e00b      	b.n	800694c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	b2da      	uxtb	r2, r3
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	1c59      	adds	r1, r3, #1
 800693c:	61f9      	str	r1, [r7, #28]
 800693e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	09db      	lsrs	r3, r3, #7
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	2b7f      	cmp	r3, #127	; 0x7f
 8006950:	d8f0      	bhi.n	8006934 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	61fa      	str	r2, [r7, #28]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2280      	movs	r2, #128	; 0x80
 8006968:	4619      	mov	r1, r3
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f7fe ff3a 	bl	80057e4 <_EncodeStr>
 8006970:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006972:	2216      	movs	r2, #22
 8006974:	68f9      	ldr	r1, [r7, #12]
 8006976:	6938      	ldr	r0, [r7, #16]
 8006978:	f7ff f876 	bl	8005a68 <_SendPacket>
      RECORD_END();
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006982:	bf00      	nop
 8006984:	3730      	adds	r7, #48	; 0x30
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20013470 	.word	0x20013470
 8006990:	20013478 	.word	0x20013478

08006994 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00f      	beq.n	80069c2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80069a2:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f2      	bne.n	80069a8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20013470 	.word	0x20013470

080069d0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80069d6:	f3ef 8311 	mrs	r3, BASEPRI
 80069da:	f04f 0120 	mov.w	r1, #32
 80069de:	f381 8811 	msr	BASEPRI, r1
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	4817      	ldr	r0, [pc, #92]	; (8006a44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80069e6:	f7fe ff4d 	bl	8005884 <_PreparePacket>
 80069ea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	e00b      	b.n	8006a14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	1c59      	adds	r1, r3, #1
 8006a04:	6179      	str	r1, [r7, #20]
 8006a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	09db      	lsrs	r3, r3, #7
 8006a12:	613b      	str	r3, [r7, #16]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2b7f      	cmp	r3, #127	; 0x7f
 8006a18:	d8f0      	bhi.n	80069fc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	617a      	str	r2, [r7, #20]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006a2a:	221b      	movs	r2, #27
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	68b8      	ldr	r0, [r7, #8]
 8006a30:	f7ff f81a 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f383 8811 	msr	BASEPRI, r3
}
 8006a3a:	bf00      	nop
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20013478 	.word	0x20013478
 8006a48:	20013474 	.word	0x20013474

08006a4c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	; 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a54:	f3ef 8311 	mrs	r3, BASEPRI
 8006a58:	f04f 0120 	mov.w	r1, #32
 8006a5c:	f381 8811 	msr	BASEPRI, r1
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	4827      	ldr	r0, [pc, #156]	; (8006b00 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006a64:	f7fe ff0e 	bl	8005884 <_PreparePacket>
 8006a68:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	6938      	ldr	r0, [r7, #16]
 8006a70:	f7fe feb8 	bl	80057e4 <_EncodeStr>
 8006a74:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	623b      	str	r3, [r7, #32]
 8006a7e:	e00b      	b.n	8006a98 <SEGGER_SYSVIEW_Warn+0x4c>
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	1c59      	adds	r1, r3, #1
 8006a88:	6279      	str	r1, [r7, #36]	; 0x24
 8006a8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	09db      	lsrs	r3, r3, #7
 8006a96:	623b      	str	r3, [r7, #32]
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a9c:	d8f0      	bhi.n	8006a80 <SEGGER_SYSVIEW_Warn+0x34>
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	627a      	str	r2, [r7, #36]	; 0x24
 8006aa4:	6a3a      	ldr	r2, [r7, #32]
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	61fb      	str	r3, [r7, #28]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	e00b      	b.n	8006ad0 <SEGGER_SYSVIEW_Warn+0x84>
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	1c59      	adds	r1, r3, #1
 8006ac0:	61f9      	str	r1, [r7, #28]
 8006ac2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	09db      	lsrs	r3, r3, #7
 8006ace:	61bb      	str	r3, [r7, #24]
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad4:	d8f0      	bhi.n	8006ab8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	61fa      	str	r2, [r7, #28]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ae6:	221a      	movs	r2, #26
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	6938      	ldr	r0, [r7, #16]
 8006aec:	f7fe ffbc 	bl	8005a68 <_SendPacket>
  RECORD_END();
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f383 8811 	msr	BASEPRI, r3
}
 8006af6:	bf00      	nop
 8006af8:	3728      	adds	r7, #40	; 0x28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20013478 	.word	0x20013478

08006b04 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	2000      	movs	r0, #0
 8006b18:	f7fe fe3e 	bl	8005798 <SEGGER_RTT_Write>
  return len;
 8006b1c:	683b      	ldr	r3, [r7, #0]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
//void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
	int UsartStatus;
	uint8_t v;
	int r;

	UsartStatus = USART_SR;                              // Examine status register
 8006b2e:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <USART2_IRQHandler+0x80>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	60fb      	str	r3, [r7, #12]
	if(UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d011      	beq.n	8006b62 <USART2_IRQHandler+0x3a>
		v = USART_DR;                                      // Read data
 8006b3e:	4b1b      	ldr	r3, [pc, #108]	; (8006bac <USART2_IRQHandler+0x84>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	71fb      	strb	r3, [r7, #7]
		if((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f003 030b 	and.w	r3, r3, #11
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d108      	bne.n	8006b62 <USART2_IRQHandler+0x3a>
			(void)v;                                         // Avoid warning in BTL
			if(_cbOnRx) {
 8006b50:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <USART2_IRQHandler+0x88>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d004      	beq.n	8006b62 <USART2_IRQHandler+0x3a>
				_cbOnRx(v);
 8006b58:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <USART2_IRQHandler+0x88>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	79fa      	ldrb	r2, [r7, #7]
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4798      	blx	r3
			}
		}
	}
	if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01a      	beq.n	8006ba2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 8006b6c:	4b11      	ldr	r3, [pc, #68]	; (8006bb4 <USART2_IRQHandler+0x8c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d015      	beq.n	8006ba0 <USART2_IRQHandler+0x78>
		r = _cbOnTx(&v);
 8006b74:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <USART2_IRQHandler+0x8c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	1dfa      	adds	r2, r7, #7
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4798      	blx	r3
 8006b7e:	60b8      	str	r0, [r7, #8]
		if (r == 0) {                          // No more characters to send ?
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <USART2_IRQHandler+0x6c>
			USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8006b86:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <USART2_IRQHandler+0x90>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a0b      	ldr	r2, [pc, #44]	; (8006bb8 <USART2_IRQHandler+0x90>)
 8006b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e006      	b.n	8006ba2 <USART2_IRQHandler+0x7a>
		} else {
			USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006b94:	4b04      	ldr	r3, [pc, #16]	; (8006ba8 <USART2_IRQHandler+0x80>)
 8006b96:	681b      	ldr	r3, [r3, #0]
			USART_DR = v;  // Start transmission by writing to data register
 8006b98:	79fa      	ldrb	r2, [r7, #7]
 8006b9a:	4b04      	ldr	r3, [pc, #16]	; (8006bac <USART2_IRQHandler+0x84>)
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e000      	b.n	8006ba2 <USART2_IRQHandler+0x7a>
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 8006ba0:	bf00      	nop
		}
	}
}
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40004400 	.word	0x40004400
 8006bac:	40004404 	.word	0x40004404
 8006bb0:	2001355c 	.word	0x2001355c
 8006bb4:	20013560 	.word	0x20013560
 8006bb8:	4000440c 	.word	0x4000440c

08006bbc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
	USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a04      	ldr	r2, [pc, #16]	; (8006bd8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bca:	6013      	str	r3, [r2, #0]
}
 8006bcc:	bf00      	nop
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	4000440c 	.word	0x4000440c

08006bdc <ade_signed_value>:
#include "ade_value_scale.h"

float power = 0, reactive_power = 0, apparant_power = 0;
float energy = 0;

int ade_signed_value(uint32_t value, uint8_t msb) {
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	70fb      	strb	r3, [r7, #3]
	int val = value;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	60fb      	str	r3, [r7, #12]
	if(val & (1 << msb)) {
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	fa42 f303 	asr.w	r3, r2, r3
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d016      	beq.n	8006c2a <ade_signed_value+0x4e>
		for(int i = 0; i <= msb; i++)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60bb      	str	r3, [r7, #8]
 8006c00:	e009      	b.n	8006c16 <ade_signed_value+0x3a>
			val ^= (1 << i);
 8006c02:	2201      	movs	r2, #1
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4053      	eors	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i <= msb; i++)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	ddf1      	ble.n	8006c02 <ade_signed_value+0x26>
		val++;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
		val *= -1;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	425b      	negs	r3, r3
 8006c28:	60fb      	str	r3, [r7, #12]
	}
	return val;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <ade_scale_vrms>:

float ade_scale_vrms(uint32_t value) {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	return ((float) value) * VRMS_SCALE_CONST;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	ee17 0a90 	vmov	r0, s15
 8006c4e:	f7f9 fcdb 	bl	8000608 <__aeabi_f2d>
 8006c52:	a309      	add	r3, pc, #36	; (adr r3, 8006c78 <ade_scale_vrms+0x40>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f7f9 fe58 	bl	800090c <__aeabi_ddiv>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4610      	mov	r0, r2
 8006c62:	4619      	mov	r1, r3
 8006c64:	f7fa f800 	bl	8000c68 <__aeabi_d2f>
 8006c68:	4603      	mov	r3, r0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	f3af 8000 	nop.w
 8006c78:	fdb8fde3 	.word	0xfdb8fde3
 8006c7c:	4008a9f2 	.word	0x4008a9f2

08006c80 <ade_scale_irms>:

float ade_scale_irms(uint32_t value) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	return ((float) value) * IRMS_SCALE_CONST;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c92:	ee17 0a90 	vmov	r0, s15
 8006c96:	f7f9 fcb7 	bl	8000608 <__aeabi_f2d>
 8006c9a:	a309      	add	r3, pc, #36	; (adr r3, 8006cc0 <ade_scale_irms+0x40>)
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	f7f9 fe34 	bl	800090c <__aeabi_ddiv>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4619      	mov	r1, r3
 8006cac:	f7f9 ffdc 	bl	8000c68 <__aeabi_d2f>
 8006cb0:	4603      	mov	r3, r0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	f3af 8000 	nop.w
 8006cc0:	9e89c363 	.word	0x9e89c363
 8006cc4:	4087e76a 	.word	0x4087e76a

08006cc8 <ade_scale_power>:

float ade_scale_power(uint32_t value) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	return power = ((float) ade_signed_value(value, 23)) * POWER_SCALE_CONST;
 8006cd0:	2117      	movs	r1, #23
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ff82 	bl	8006bdc <ade_signed_value>
 8006cd8:	ee07 0a90 	vmov	s15, r0
 8006cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ce0:	ee17 0a90 	vmov	r0, s15
 8006ce4:	f7f9 fc90 	bl	8000608 <__aeabi_f2d>
 8006ce8:	a30a      	add	r3, pc, #40	; (adr r3, 8006d14 <ade_scale_power+0x4c>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fce3 	bl	80006b8 <__aeabi_dmul>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	f7f9 ffb5 	bl	8000c68 <__aeabi_d2f>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4a03      	ldr	r2, [pc, #12]	; (8006d10 <ade_scale_power+0x48>)
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	4b02      	ldr	r3, [pc, #8]	; (8006d10 <ade_scale_power+0x48>)
 8006d06:	681b      	ldr	r3, [r3, #0]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20013564 	.word	0x20013564
 8006d14:	220c9a42 	.word	0x220c9a42
 8006d18:	403b6cad 	.word	0x403b6cad
 8006d1c:	00000000 	.word	0x00000000

08006d20 <ade_scale_reactive_power>:

float ade_scale_reactive_power(uint32_t value) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	return reactive_power = ((float) ade_signed_value(value, 23)) * REACTIVE_POWER_SCALE_CONST;
 8006d28:	2117      	movs	r1, #23
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff ff56 	bl	8006bdc <ade_signed_value>
 8006d30:	ee07 0a90 	vmov	s15, r0
 8006d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d38:	ee17 0a90 	vmov	r0, s15
 8006d3c:	f7f9 fc64 	bl	8000608 <__aeabi_f2d>
 8006d40:	a30a      	add	r3, pc, #40	; (adr r3, 8006d6c <ade_scale_reactive_power+0x4c>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f7f9 fcb7 	bl	80006b8 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4610      	mov	r0, r2
 8006d50:	4619      	mov	r1, r3
 8006d52:	f7f9 ff89 	bl	8000c68 <__aeabi_d2f>
 8006d56:	4603      	mov	r3, r0
 8006d58:	4a03      	ldr	r2, [pc, #12]	; (8006d68 <ade_scale_reactive_power+0x48>)
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	4b02      	ldr	r3, [pc, #8]	; (8006d68 <ade_scale_reactive_power+0x48>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	20013568 	.word	0x20013568
 8006d6c:	a4b830b3 	.word	0xa4b830b3
 8006d70:	40534932 	.word	0x40534932

08006d74 <ade_get_apparant_power>:

float ade_get_apparant_power() {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
	return apparant_power = sqrtf(power*power + reactive_power*reactive_power);
 8006d78:	4b0e      	ldr	r3, [pc, #56]	; (8006db4 <ade_get_apparant_power+0x40>)
 8006d7a:	ed93 7a00 	vldr	s14, [r3]
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	; (8006db4 <ade_get_apparant_power+0x40>)
 8006d80:	edd3 7a00 	vldr	s15, [r3]
 8006d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d88:	4b0b      	ldr	r3, [pc, #44]	; (8006db8 <ade_get_apparant_power+0x44>)
 8006d8a:	edd3 6a00 	vldr	s13, [r3]
 8006d8e:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <ade_get_apparant_power+0x44>)
 8006d90:	edd3 7a00 	vldr	s15, [r3]
 8006d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d9c:	ee17 0a90 	vmov	r0, s15
 8006da0:	f004 feea 	bl	800bb78 <sqrtf>
 8006da4:	4603      	mov	r3, r0
 8006da6:	4a05      	ldr	r2, [pc, #20]	; (8006dbc <ade_get_apparant_power+0x48>)
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	4b04      	ldr	r3, [pc, #16]	; (8006dbc <ade_get_apparant_power+0x48>)
 8006dac:	681b      	ldr	r3, [r3, #0]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20013564 	.word	0x20013564
 8006db8:	20013568 	.word	0x20013568
 8006dbc:	2001356c 	.word	0x2001356c

08006dc0 <ade_get_power_factor>:

float ade_get_power_factor() {
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
	if(power) return power / apparant_power;
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <ade_get_power_factor+0x38>)
 8006dc6:	edd3 7a00 	vldr	s15, [r3]
 8006dca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd2:	d008      	beq.n	8006de6 <ade_get_power_factor+0x26>
 8006dd4:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <ade_get_power_factor+0x38>)
 8006dd6:	ed93 7a00 	vldr	s14, [r3]
 8006dda:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <ade_get_power_factor+0x3c>)
 8006ddc:	edd3 7a00 	vldr	s15, [r3]
 8006de0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006de4:	e001      	b.n	8006dea <ade_get_power_factor+0x2a>
	return 0;
 8006de6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8006e00 <ade_get_power_factor+0x40>
 8006dea:	ee16 3a90 	vmov	r3, s13
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	20013564 	.word	0x20013564
 8006dfc:	2001356c 	.word	0x2001356c
	...

08006e08 <ade_accumulate_scale_energy>:

float ade_accumulate_scale_energy(uint32_t value) {
 8006e08:	b5b0      	push	{r4, r5, r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	return energy += ((float) ade_signed_value(value, 23)) * ENERGY_SCALE_CONST;
 8006e10:	2117      	movs	r1, #23
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fee2 	bl	8006bdc <ade_signed_value>
 8006e18:	ee07 0a90 	vmov	s15, r0
 8006e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e20:	ee17 0a90 	vmov	r0, s15
 8006e24:	f7f9 fbf0 	bl	8000608 <__aeabi_f2d>
 8006e28:	a312      	add	r3, pc, #72	; (adr r3, 8006e74 <ade_accumulate_scale_energy+0x6c>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 fc43 	bl	80006b8 <__aeabi_dmul>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4614      	mov	r4, r2
 8006e38:	461d      	mov	r5, r3
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <ade_accumulate_scale_energy+0x68>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7f9 fbe2 	bl	8000608 <__aeabi_f2d>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4620      	mov	r0, r4
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	f7f9 fa7e 	bl	800034c <__adddf3>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4610      	mov	r0, r2
 8006e56:	4619      	mov	r1, r3
 8006e58:	f7f9 ff06 	bl	8000c68 <__aeabi_d2f>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	4a04      	ldr	r2, [pc, #16]	; (8006e70 <ade_accumulate_scale_energy+0x68>)
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	4b03      	ldr	r3, [pc, #12]	; (8006e70 <ade_accumulate_scale_energy+0x68>)
 8006e64:	681b      	ldr	r3, [r3, #0]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20013570 	.word	0x20013570
 8006e74:	2fd7b9c0 	.word	0x2fd7b9c0
 8006e78:	3f6f33f8 	.word	0x3f6f33f8

08006e7c <reset_energy>:

//float ade_scale_apparant_energy(uint32_t value) {
//	return value;
//}

void reset_energy(void) {
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
	energy = 0;
 8006e80:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <reset_energy+0x18>)
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]
}
 8006e88:	bf00      	nop
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	20013570 	.word	0x20013570

08006e98 <lcd_puts_xy>:
LCD_Data_Screen3_t screen3_data;
LCD_Data_Screen4_t screen4_data, screen4_data_config;

DS1307_DateTime_t rtc_display, rtc_config;

void lcd_puts_xy(unsigned char x, unsigned char y, char* c, LCD5110_Pixel_t color, LCD5110_FontSize_t font) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	603a      	str	r2, [r7, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	71fb      	strb	r3, [r7, #7]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	71bb      	strb	r3, [r7, #6]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	717b      	strb	r3, [r7, #5]
	LCD5110_GotoXY(x, y);
 8006eae:	79ba      	ldrb	r2, [r7, #6]
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fa fe77 	bl	8001ba8 <LCD5110_GotoXY>
	LCD5110_Puts(c, color, font);
 8006eba:	7c3a      	ldrb	r2, [r7, #16]
 8006ebc:	797b      	ldrb	r3, [r7, #5]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6838      	ldr	r0, [r7, #0]
 8006ec2:	f7fa ff33 	bl	8001d2c <LCD5110_Puts>
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <range_scale>:

void range_scale(float value, char* value_buf, char* range, uint8_t range_type) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	70fb      	strb	r3, [r7, #3]

	if(value < 0) value *= -1;
 8006ede:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eea:	d505      	bpl.n	8006ef8 <range_scale+0x28>
 8006eec:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ef0:	eef1 7a67 	vneg.f32	s15, s15
 8006ef4:	edc7 7a03 	vstr	s15, [r7, #12]

	if(value >= 1000*1000*1000) value = 1000*1000*1000 - 1;
 8006ef8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006efc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006ffc <range_scale+0x12c>
 8006f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f08:	db01      	blt.n	8006f0e <range_scale+0x3e>
 8006f0a:	4b3d      	ldr	r3, [pc, #244]	; (8007000 <range_scale+0x130>)
 8006f0c:	60fb      	str	r3, [r7, #12]

	if(value >= 1000*1000 || range_type == 2) {
 8006f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f12:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007004 <range_scale+0x134>
 8006f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1e:	da02      	bge.n	8006f26 <range_scale+0x56>
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d10d      	bne.n	8006f42 <range_scale+0x72>
		sprintf(range, "%s", "k");
 8006f26:	4a38      	ldr	r2, [pc, #224]	; (8007008 <range_scale+0x138>)
 8006f28:	4938      	ldr	r1, [pc, #224]	; (800700c <range_scale+0x13c>)
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f002 fc1c 	bl	8009768 <siprintf>
		value /= 1000*1000;
 8006f30:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f34:	eddf 6a33 	vldr	s13, [pc, #204]	; 8007004 <range_scale+0x134>
 8006f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f3c:	edc7 7a03 	vstr	s15, [r7, #12]
 8006f40:	e01e      	b.n	8006f80 <range_scale+0xb0>
	} else if (value >= 1000 || range_type == 1) {
 8006f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f46:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007010 <range_scale+0x140>
 8006f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f52:	da02      	bge.n	8006f5a <range_scale+0x8a>
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d10d      	bne.n	8006f76 <range_scale+0xa6>
		sprintf(range, "%s", " ");
 8006f5a:	4a2e      	ldr	r2, [pc, #184]	; (8007014 <range_scale+0x144>)
 8006f5c:	492b      	ldr	r1, [pc, #172]	; (800700c <range_scale+0x13c>)
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f002 fc02 	bl	8009768 <siprintf>
		value /= 1000;
 8006f64:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f68:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007010 <range_scale+0x140>
 8006f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f70:	edc7 7a03 	vstr	s15, [r7, #12]
 8006f74:	e004      	b.n	8006f80 <range_scale+0xb0>
	} else sprintf(range, "%s", "m");
 8006f76:	4a28      	ldr	r2, [pc, #160]	; (8007018 <range_scale+0x148>)
 8006f78:	4924      	ldr	r1, [pc, #144]	; (800700c <range_scale+0x13c>)
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f002 fbf4 	bl	8009768 <siprintf>

	if(value < 10)
 8006f80:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f84:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f90:	d509      	bpl.n	8006fa6 <range_scale+0xd6>
		sprintf(value_buf, "%1.3f", value);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7f9 fb38 	bl	8000608 <__aeabi_f2d>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	491f      	ldr	r1, [pc, #124]	; (800701c <range_scale+0x14c>)
 8006f9e:	68b8      	ldr	r0, [r7, #8]
 8006fa0:	f002 fbe2 	bl	8009768 <siprintf>
	else if(value < 100)
		sprintf(value_buf, "%2.2f", value);
	else if(value < 1000)
		sprintf(value_buf, "%3.1f", value);
}
 8006fa4:	e025      	b.n	8006ff2 <range_scale+0x122>
	else if(value < 100)
 8006fa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006faa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007020 <range_scale+0x150>
 8006fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb6:	d509      	bpl.n	8006fcc <range_scale+0xfc>
		sprintf(value_buf, "%2.2f", value);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7f9 fb25 	bl	8000608 <__aeabi_f2d>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4918      	ldr	r1, [pc, #96]	; (8007024 <range_scale+0x154>)
 8006fc4:	68b8      	ldr	r0, [r7, #8]
 8006fc6:	f002 fbcf 	bl	8009768 <siprintf>
}
 8006fca:	e012      	b.n	8006ff2 <range_scale+0x122>
	else if(value < 1000)
 8006fcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fd0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007010 <range_scale+0x140>
 8006fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	d400      	bmi.n	8006fe0 <range_scale+0x110>
}
 8006fde:	e008      	b.n	8006ff2 <range_scale+0x122>
		sprintf(value_buf, "%3.1f", value);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7f9 fb11 	bl	8000608 <__aeabi_f2d>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	490f      	ldr	r1, [pc, #60]	; (8007028 <range_scale+0x158>)
 8006fec:	68b8      	ldr	r0, [r7, #8]
 8006fee:	f002 fbbb 	bl	8009768 <siprintf>
}
 8006ff2:	bf00      	nop
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	4e6e6b28 	.word	0x4e6e6b28
 8007000:	4e6e6b28 	.word	0x4e6e6b28
 8007004:	49742400 	.word	0x49742400
 8007008:	0800bc80 	.word	0x0800bc80
 800700c:	0800bc84 	.word	0x0800bc84
 8007010:	447a0000 	.word	0x447a0000
 8007014:	0800bc88 	.word	0x0800bc88
 8007018:	0800bc8c 	.word	0x0800bc8c
 800701c:	0800bc90 	.word	0x0800bc90
 8007020:	42c80000 	.word	0x42c80000
 8007024:	0800bc98 	.word	0x0800bc98
 8007028:	0800bca0 	.word	0x0800bca0

0800702c <lcd_screen_1_refresh>:

void lcd_screen_1_refresh() {
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8007032:	f7fa fce9 	bl	8001a08 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "Vrms", 1, 1);
 8007036:	2301      	movs	r3, #1
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	2301      	movs	r3, #1
 800703c:	4a4f      	ldr	r2, [pc, #316]	; (800717c <lcd_screen_1_refresh+0x150>)
 800703e:	2100      	movs	r1, #0
 8007040:	2000      	movs	r0, #0
 8007042:	f7ff ff29 	bl	8006e98 <lcd_puts_xy>
	range_scale(screen1_data.Vrms, val_buf, range_buf, 1);
 8007046:	4b4e      	ldr	r3, [pc, #312]	; (8007180 <lcd_screen_1_refresh+0x154>)
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	463a      	mov	r2, r7
 800704c:	1d39      	adds	r1, r7, #4
 800704e:	2301      	movs	r3, #1
 8007050:	f7ff ff3e 	bl	8006ed0 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8007054:	1d3a      	adds	r2, r7, #4
 8007056:	2301      	movs	r3, #1
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	2301      	movs	r3, #1
 800705c:	2100      	movs	r1, #0
 800705e:	201c      	movs	r0, #28
 8007060:	f7ff ff1a 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 8007064:	463a      	mov	r2, r7
 8007066:	2301      	movs	r3, #1
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2301      	movs	r3, #1
 800706c:	2100      	movs	r1, #0
 800706e:	203c      	movs	r0, #60	; 0x3c
 8007070:	f7ff ff12 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "V", 1, 1);
 8007074:	2301      	movs	r3, #1
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2301      	movs	r3, #1
 800707a:	4a42      	ldr	r2, [pc, #264]	; (8007184 <lcd_screen_1_refresh+0x158>)
 800707c:	2100      	movs	r1, #0
 800707e:	2042      	movs	r0, #66	; 0x42
 8007080:	f7ff ff0a 	bl	8006e98 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Vp", 1, 1);
 8007084:	2301      	movs	r3, #1
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	2301      	movs	r3, #1
 800708a:	4a3f      	ldr	r2, [pc, #252]	; (8007188 <lcd_screen_1_refresh+0x15c>)
 800708c:	210c      	movs	r1, #12
 800708e:	2000      	movs	r0, #0
 8007090:	f7ff ff02 	bl	8006e98 <lcd_puts_xy>
	range_scale(screen1_data.Vpeak, val_buf, range_buf, 1);
 8007094:	4b3a      	ldr	r3, [pc, #232]	; (8007180 <lcd_screen_1_refresh+0x154>)
 8007096:	6858      	ldr	r0, [r3, #4]
 8007098:	463a      	mov	r2, r7
 800709a:	1d39      	adds	r1, r7, #4
 800709c:	2301      	movs	r3, #1
 800709e:	f7ff ff17 	bl	8006ed0 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 80070a2:	1d3a      	adds	r2, r7, #4
 80070a4:	2301      	movs	r3, #1
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	2301      	movs	r3, #1
 80070aa:	210c      	movs	r1, #12
 80070ac:	201c      	movs	r0, #28
 80070ae:	f7ff fef3 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 80070b2:	463a      	mov	r2, r7
 80070b4:	2301      	movs	r3, #1
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	2301      	movs	r3, #1
 80070ba:	210c      	movs	r1, #12
 80070bc:	203c      	movs	r0, #60	; 0x3c
 80070be:	f7ff feeb 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1, 1);
 80070c2:	2301      	movs	r3, #1
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	2301      	movs	r3, #1
 80070c8:	4a2e      	ldr	r2, [pc, #184]	; (8007184 <lcd_screen_1_refresh+0x158>)
 80070ca:	210c      	movs	r1, #12
 80070cc:	2042      	movs	r0, #66	; 0x42
 80070ce:	f7ff fee3 	bl	8006e98 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_2, "Irms", 1, 1);
 80070d2:	2301      	movs	r3, #1
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	2301      	movs	r3, #1
 80070d8:	4a2c      	ldr	r2, [pc, #176]	; (800718c <lcd_screen_1_refresh+0x160>)
 80070da:	211d      	movs	r1, #29
 80070dc:	2000      	movs	r0, #0
 80070de:	f7ff fedb 	bl	8006e98 <lcd_puts_xy>
	range_scale(screen1_data.Irms, val_buf, range_buf, 0);
 80070e2:	4b27      	ldr	r3, [pc, #156]	; (8007180 <lcd_screen_1_refresh+0x154>)
 80070e4:	6898      	ldr	r0, [r3, #8]
 80070e6:	463a      	mov	r2, r7
 80070e8:	1d39      	adds	r1, r7, #4
 80070ea:	2300      	movs	r3, #0
 80070ec:	f7ff fef0 	bl	8006ed0 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_2, val_buf, 1, 1);
 80070f0:	1d3a      	adds	r2, r7, #4
 80070f2:	2301      	movs	r3, #1
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	2301      	movs	r3, #1
 80070f8:	211d      	movs	r1, #29
 80070fa:	201c      	movs	r0, #28
 80070fc:	f7ff fecc 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_2, range_buf, 1, 1);
 8007100:	463a      	mov	r2, r7
 8007102:	2301      	movs	r3, #1
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2301      	movs	r3, #1
 8007108:	211d      	movs	r1, #29
 800710a:	203c      	movs	r0, #60	; 0x3c
 800710c:	f7ff fec4 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_2, "A", 1, 1);
 8007110:	2301      	movs	r3, #1
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	2301      	movs	r3, #1
 8007116:	4a1e      	ldr	r2, [pc, #120]	; (8007190 <lcd_screen_1_refresh+0x164>)
 8007118:	211d      	movs	r1, #29
 800711a:	2042      	movs	r0, #66	; 0x42
 800711c:	f7ff febc 	bl	8006e98 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "Ip", 1, 1);
 8007120:	2301      	movs	r3, #1
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	2301      	movs	r3, #1
 8007126:	4a1b      	ldr	r2, [pc, #108]	; (8007194 <lcd_screen_1_refresh+0x168>)
 8007128:	2129      	movs	r1, #41	; 0x29
 800712a:	2000      	movs	r0, #0
 800712c:	f7ff feb4 	bl	8006e98 <lcd_puts_xy>
	range_scale(screen1_data.Ipeak, val_buf, range_buf, 0);
 8007130:	4b13      	ldr	r3, [pc, #76]	; (8007180 <lcd_screen_1_refresh+0x154>)
 8007132:	68d8      	ldr	r0, [r3, #12]
 8007134:	463a      	mov	r2, r7
 8007136:	1d39      	adds	r1, r7, #4
 8007138:	2300      	movs	r3, #0
 800713a:	f7ff fec9 	bl	8006ed0 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 800713e:	1d3a      	adds	r2, r7, #4
 8007140:	2301      	movs	r3, #1
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	2301      	movs	r3, #1
 8007146:	2129      	movs	r1, #41	; 0x29
 8007148:	201c      	movs	r0, #28
 800714a:	f7ff fea5 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1, 1);
 800714e:	463a      	mov	r2, r7
 8007150:	2301      	movs	r3, #1
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	2301      	movs	r3, #1
 8007156:	2129      	movs	r1, #41	; 0x29
 8007158:	203c      	movs	r0, #60	; 0x3c
 800715a:	f7ff fe9d 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "A", 1, 1);
 800715e:	2301      	movs	r3, #1
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	2301      	movs	r3, #1
 8007164:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <lcd_screen_1_refresh+0x164>)
 8007166:	2129      	movs	r1, #41	; 0x29
 8007168:	2042      	movs	r0, #66	; 0x42
 800716a:	f7ff fe95 	bl	8006e98 <lcd_puts_xy>

	LCD5110_Refresh();
 800716e:	f7fa fc7d 	bl	8001a6c <LCD5110_Refresh>
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	0800bca8 	.word	0x0800bca8
 8007180:	20013898 	.word	0x20013898
 8007184:	0800bcb0 	.word	0x0800bcb0
 8007188:	0800bcb4 	.word	0x0800bcb4
 800718c:	0800bcb8 	.word	0x0800bcb8
 8007190:	0800bcc0 	.word	0x0800bcc0
 8007194:	0800bcc4 	.word	0x0800bcc4

08007198 <lcd_screen_2_refresh>:

void lcd_screen_2_refresh() {
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 800719e:	f7fa fc33 	bl	8001a08 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "P", 1, 1);
 80071a2:	2301      	movs	r3, #1
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	2301      	movs	r3, #1
 80071a8:	4a51      	ldr	r2, [pc, #324]	; (80072f0 <lcd_screen_2_refresh+0x158>)
 80071aa:	2100      	movs	r1, #0
 80071ac:	2000      	movs	r0, #0
 80071ae:	f7ff fe73 	bl	8006e98 <lcd_puts_xy>
	range_scale(screen2_data.ActivePower, val_buf, range_buf, 1);
 80071b2:	4b50      	ldr	r3, [pc, #320]	; (80072f4 <lcd_screen_2_refresh+0x15c>)
 80071b4:	6818      	ldr	r0, [r3, #0]
 80071b6:	463a      	mov	r2, r7
 80071b8:	1d39      	adds	r1, r7, #4
 80071ba:	2301      	movs	r3, #1
 80071bc:	f7ff fe88 	bl	8006ed0 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 80071c0:	1d3a      	adds	r2, r7, #4
 80071c2:	2301      	movs	r3, #1
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	2301      	movs	r3, #1
 80071c8:	2100      	movs	r1, #0
 80071ca:	201c      	movs	r0, #28
 80071cc:	f7ff fe64 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 80071d0:	463a      	mov	r2, r7
 80071d2:	2301      	movs	r3, #1
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	2301      	movs	r3, #1
 80071d8:	2100      	movs	r1, #0
 80071da:	203c      	movs	r0, #60	; 0x3c
 80071dc:	f7ff fe5c 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "W", 1, 1);
 80071e0:	2301      	movs	r3, #1
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	2301      	movs	r3, #1
 80071e6:	4a44      	ldr	r2, [pc, #272]	; (80072f8 <lcd_screen_2_refresh+0x160>)
 80071e8:	2100      	movs	r1, #0
 80071ea:	2042      	movs	r0, #66	; 0x42
 80071ec:	f7ff fe54 	bl	8006e98 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Q", 1, 1);
 80071f0:	2301      	movs	r3, #1
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	2301      	movs	r3, #1
 80071f6:	4a41      	ldr	r2, [pc, #260]	; (80072fc <lcd_screen_2_refresh+0x164>)
 80071f8:	210c      	movs	r1, #12
 80071fa:	2000      	movs	r0, #0
 80071fc:	f7ff fe4c 	bl	8006e98 <lcd_puts_xy>
	range_scale(screen2_data.ReactivePower, val_buf, range_buf, 1);
 8007200:	4b3c      	ldr	r3, [pc, #240]	; (80072f4 <lcd_screen_2_refresh+0x15c>)
 8007202:	6858      	ldr	r0, [r3, #4]
 8007204:	463a      	mov	r2, r7
 8007206:	1d39      	adds	r1, r7, #4
 8007208:	2301      	movs	r3, #1
 800720a:	f7ff fe61 	bl	8006ed0 <range_scale>
	if(screen2_data.ReactivePower < 0)
 800720e:	4b39      	ldr	r3, [pc, #228]	; (80072f4 <lcd_screen_2_refresh+0x15c>)
 8007210:	edd3 7a01 	vldr	s15, [r3, #4]
 8007214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721c:	d507      	bpl.n	800722e <lcd_screen_2_refresh+0x96>
		lcd_puts_xy(VALUE_COLUMN - 6, ROW_LINE_2, "-", 1, 1);
 800721e:	2301      	movs	r3, #1
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	2301      	movs	r3, #1
 8007224:	4a36      	ldr	r2, [pc, #216]	; (8007300 <lcd_screen_2_refresh+0x168>)
 8007226:	210c      	movs	r1, #12
 8007228:	2016      	movs	r0, #22
 800722a:	f7ff fe35 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 800722e:	1d3a      	adds	r2, r7, #4
 8007230:	2301      	movs	r3, #1
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	2301      	movs	r3, #1
 8007236:	210c      	movs	r1, #12
 8007238:	201c      	movs	r0, #28
 800723a:	f7ff fe2d 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 800723e:	463a      	mov	r2, r7
 8007240:	2301      	movs	r3, #1
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	2301      	movs	r3, #1
 8007246:	210c      	movs	r1, #12
 8007248:	203c      	movs	r0, #60	; 0x3c
 800724a:	f7ff fe25 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAR", 1, 1);
 800724e:	2301      	movs	r3, #1
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	2301      	movs	r3, #1
 8007254:	4a2b      	ldr	r2, [pc, #172]	; (8007304 <lcd_screen_2_refresh+0x16c>)
 8007256:	210c      	movs	r1, #12
 8007258:	2042      	movs	r0, #66	; 0x42
 800725a:	f7ff fe1d 	bl	8006e98 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_1, "S", 1, 1);
 800725e:	2301      	movs	r3, #1
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	2301      	movs	r3, #1
 8007264:	4a28      	ldr	r2, [pc, #160]	; (8007308 <lcd_screen_2_refresh+0x170>)
 8007266:	2118      	movs	r1, #24
 8007268:	2000      	movs	r0, #0
 800726a:	f7ff fe15 	bl	8006e98 <lcd_puts_xy>
	range_scale(screen2_data.ApparantPower, val_buf, range_buf, 1);
 800726e:	4b21      	ldr	r3, [pc, #132]	; (80072f4 <lcd_screen_2_refresh+0x15c>)
 8007270:	6898      	ldr	r0, [r3, #8]
 8007272:	463a      	mov	r2, r7
 8007274:	1d39      	adds	r1, r7, #4
 8007276:	2301      	movs	r3, #1
 8007278:	f7ff fe2a 	bl	8006ed0 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1, 1);
 800727c:	1d3a      	adds	r2, r7, #4
 800727e:	2301      	movs	r3, #1
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	2301      	movs	r3, #1
 8007284:	2118      	movs	r1, #24
 8007286:	201c      	movs	r0, #28
 8007288:	f7ff fe06 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1, 1);
 800728c:	463a      	mov	r2, r7
 800728e:	2301      	movs	r3, #1
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	2301      	movs	r3, #1
 8007294:	2118      	movs	r1, #24
 8007296:	203c      	movs	r0, #60	; 0x3c
 8007298:	f7ff fdfe 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "VA", 1, 1);
 800729c:	2301      	movs	r3, #1
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	2301      	movs	r3, #1
 80072a2:	4a1a      	ldr	r2, [pc, #104]	; (800730c <lcd_screen_2_refresh+0x174>)
 80072a4:	2118      	movs	r1, #24
 80072a6:	2042      	movs	r0, #66	; 0x42
 80072a8:	f7ff fdf6 	bl	8006e98 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "PF", 1, 1);
 80072ac:	2301      	movs	r3, #1
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	2301      	movs	r3, #1
 80072b2:	4a17      	ldr	r2, [pc, #92]	; (8007310 <lcd_screen_2_refresh+0x178>)
 80072b4:	2129      	movs	r1, #41	; 0x29
 80072b6:	2000      	movs	r0, #0
 80072b8:	f7ff fdee 	bl	8006e98 <lcd_puts_xy>
	sprintf(val_buf, "%.2f", screen2_data.PowerFactor);
 80072bc:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <lcd_screen_2_refresh+0x15c>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7f9 f9a1 	bl	8000608 <__aeabi_f2d>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	1d38      	adds	r0, r7, #4
 80072cc:	4911      	ldr	r1, [pc, #68]	; (8007314 <lcd_screen_2_refresh+0x17c>)
 80072ce:	f002 fa4b 	bl	8009768 <siprintf>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 80072d2:	1d3a      	adds	r2, r7, #4
 80072d4:	2301      	movs	r3, #1
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	2301      	movs	r3, #1
 80072da:	2129      	movs	r1, #41	; 0x29
 80072dc:	201c      	movs	r0, #28
 80072de:	f7ff fddb 	bl	8006e98 <lcd_puts_xy>

	LCD5110_Refresh();
 80072e2:	f7fa fbc3 	bl	8001a6c <LCD5110_Refresh>
}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	0800bcc8 	.word	0x0800bcc8
 80072f4:	20013884 	.word	0x20013884
 80072f8:	0800bccc 	.word	0x0800bccc
 80072fc:	0800bcd0 	.word	0x0800bcd0
 8007300:	0800bcd4 	.word	0x0800bcd4
 8007304:	0800bcd8 	.word	0x0800bcd8
 8007308:	0800bcdc 	.word	0x0800bcdc
 800730c:	0800bce0 	.word	0x0800bce0
 8007310:	0800bce4 	.word	0x0800bce4
 8007314:	0800bce8 	.word	0x0800bce8

08007318 <lcd_screen_3_refresh>:

void lcd_screen_3_refresh() {
 8007318:	b580      	push	{r7, lr}
 800731a:	b08c      	sub	sp, #48	; 0x30
 800731c:	af02      	add	r7, sp, #8
	LCD5110_Clear();
 800731e:	f7fa fb73 	bl	8001a08 <LCD5110_Clear>

	char val_buf[10];
	char range_buf[2];

	lcd_puts_xy(0, ROW_LINE_1, "P.t", 1, 1);
 8007322:	2301      	movs	r3, #1
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	2301      	movs	r3, #1
 8007328:	4a4d      	ldr	r2, [pc, #308]	; (8007460 <lcd_screen_3_refresh+0x148>)
 800732a:	2100      	movs	r1, #0
 800732c:	2000      	movs	r0, #0
 800732e:	f7ff fdb3 	bl	8006e98 <lcd_puts_xy>
	range_scale(screen3_data.ActiveEnergy, val_buf, range_buf, 1);
 8007332:	4b4c      	ldr	r3, [pc, #304]	; (8007464 <lcd_screen_3_refresh+0x14c>)
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	f107 0218 	add.w	r2, r7, #24
 800733a:	f107 011c 	add.w	r1, r7, #28
 800733e:	2301      	movs	r3, #1
 8007340:	f7ff fdc6 	bl	8006ed0 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8007344:	f107 021c 	add.w	r2, r7, #28
 8007348:	2301      	movs	r3, #1
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	2301      	movs	r3, #1
 800734e:	2100      	movs	r1, #0
 8007350:	201c      	movs	r0, #28
 8007352:	f7ff fda1 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 8007356:	f107 0218 	add.w	r2, r7, #24
 800735a:	2301      	movs	r3, #1
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	2301      	movs	r3, #1
 8007360:	2100      	movs	r1, #0
 8007362:	203c      	movs	r0, #60	; 0x3c
 8007364:	f7ff fd98 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "Wh", 1, 1);
 8007368:	2301      	movs	r3, #1
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	2301      	movs	r3, #1
 800736e:	4a3e      	ldr	r2, [pc, #248]	; (8007468 <lcd_screen_3_refresh+0x150>)
 8007370:	2100      	movs	r1, #0
 8007372:	2042      	movs	r0, #66	; 0x42
 8007374:	f7ff fd90 	bl	8006e98 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "S.t", 1, 1);
 8007378:	2301      	movs	r3, #1
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	2301      	movs	r3, #1
 800737e:	4a3b      	ldr	r2, [pc, #236]	; (800746c <lcd_screen_3_refresh+0x154>)
 8007380:	210c      	movs	r1, #12
 8007382:	2000      	movs	r0, #0
 8007384:	f7ff fd88 	bl	8006e98 <lcd_puts_xy>
	range_scale(screen3_data.ApparantEnergy, val_buf, range_buf, 2);
 8007388:	4b36      	ldr	r3, [pc, #216]	; (8007464 <lcd_screen_3_refresh+0x14c>)
 800738a:	6858      	ldr	r0, [r3, #4]
 800738c:	f107 0218 	add.w	r2, r7, #24
 8007390:	f107 011c 	add.w	r1, r7, #28
 8007394:	2302      	movs	r3, #2
 8007396:	f7ff fd9b 	bl	8006ed0 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 800739a:	f107 021c 	add.w	r2, r7, #28
 800739e:	2301      	movs	r3, #1
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	2301      	movs	r3, #1
 80073a4:	210c      	movs	r1, #12
 80073a6:	201c      	movs	r0, #28
 80073a8:	f7ff fd76 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 80073ac:	f107 0218 	add.w	r2, r7, #24
 80073b0:	2301      	movs	r3, #1
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2301      	movs	r3, #1
 80073b6:	210c      	movs	r1, #12
 80073b8:	203c      	movs	r0, #60	; 0x3c
 80073ba:	f7ff fd6d 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAh", 1, 1);
 80073be:	2301      	movs	r3, #1
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	2301      	movs	r3, #1
 80073c4:	4a2a      	ldr	r2, [pc, #168]	; (8007470 <lcd_screen_3_refresh+0x158>)
 80073c6:	210c      	movs	r1, #12
 80073c8:	2042      	movs	r0, #66	; 0x42
 80073ca:	f7ff fd65 	bl	8006e98 <lcd_puts_xy>

	if(screen3_mode == S3_RESET_CONFIRM_DISPLAY) {
 80073ce:	4b29      	ldr	r3, [pc, #164]	; (8007474 <lcd_screen_3_refresh+0x15c>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d10f      	bne.n	80073f6 <lcd_screen_3_refresh+0xde>
		lcd_puts_xy(12, ROW_LINE_3_1, "Clear Data?", 1, 1);
 80073d6:	2301      	movs	r3, #1
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	2301      	movs	r3, #1
 80073dc:	4a26      	ldr	r2, [pc, #152]	; (8007478 <lcd_screen_3_refresh+0x160>)
 80073de:	2118      	movs	r1, #24
 80073e0:	200c      	movs	r0, #12
 80073e2:	f7ff fd59 	bl	8006e98 <lcd_puts_xy>
		lcd_puts_xy(12, ROW_LINE_3_1 + 8, "[#]Y / [*]N", 1, 1);
 80073e6:	2301      	movs	r3, #1
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	2301      	movs	r3, #1
 80073ec:	4a23      	ldr	r2, [pc, #140]	; (800747c <lcd_screen_3_refresh+0x164>)
 80073ee:	2120      	movs	r1, #32
 80073f0:	200c      	movs	r0, #12
 80073f2:	f7ff fd51 	bl	8006e98 <lcd_puts_xy>
	}

	char days_buf[5];
	sprintf(days_buf, "%04lu", screen3_timer.days);
 80073f6:	4b22      	ldr	r3, [pc, #136]	; (8007480 <lcd_screen_3_refresh+0x168>)
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	f107 0310 	add.w	r3, r7, #16
 80073fe:	4921      	ldr	r1, [pc, #132]	; (8007484 <lcd_screen_3_refresh+0x16c>)
 8007400:	4618      	mov	r0, r3
 8007402:	f002 f9b1 	bl	8009768 <siprintf>
	lcd_puts_xy(0, ROW_LINE_4, days_buf, 1, 1);
 8007406:	f107 0210 	add.w	r2, r7, #16
 800740a:	2301      	movs	r3, #1
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	2301      	movs	r3, #1
 8007410:	2129      	movs	r1, #41	; 0x29
 8007412:	2000      	movs	r0, #0
 8007414:	f7ff fd40 	bl	8006e98 <lcd_puts_xy>
	lcd_puts_xy(26, ROW_LINE_4 + 2, "DAY(s)", 1, 0);
 8007418:	2300      	movs	r3, #0
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	2301      	movs	r3, #1
 800741e:	4a1a      	ldr	r2, [pc, #104]	; (8007488 <lcd_screen_3_refresh+0x170>)
 8007420:	212b      	movs	r1, #43	; 0x2b
 8007422:	201a      	movs	r0, #26
 8007424:	f7ff fd38 	bl	8006e98 <lcd_puts_xy>

	char runtime_buf[9];
	sprintf(runtime_buf, "%02u:%02u:%02u", screen3_timer.hours, screen3_timer.minutes, screen3_timer.seconds);
 8007428:	4b15      	ldr	r3, [pc, #84]	; (8007480 <lcd_screen_3_refresh+0x168>)
 800742a:	791b      	ldrb	r3, [r3, #4]
 800742c:	461a      	mov	r2, r3
 800742e:	4b14      	ldr	r3, [pc, #80]	; (8007480 <lcd_screen_3_refresh+0x168>)
 8007430:	795b      	ldrb	r3, [r3, #5]
 8007432:	4619      	mov	r1, r3
 8007434:	4b12      	ldr	r3, [pc, #72]	; (8007480 <lcd_screen_3_refresh+0x168>)
 8007436:	799b      	ldrb	r3, [r3, #6]
 8007438:	1d38      	adds	r0, r7, #4
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	460b      	mov	r3, r1
 800743e:	4913      	ldr	r1, [pc, #76]	; (800748c <lcd_screen_3_refresh+0x174>)
 8007440:	f002 f992 	bl	8009768 <siprintf>
	lcd_puts_xy(56, ROW_LINE_4 + 2, runtime_buf, 1, 0);
 8007444:	1d3a      	adds	r2, r7, #4
 8007446:	2300      	movs	r3, #0
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	2301      	movs	r3, #1
 800744c:	212b      	movs	r1, #43	; 0x2b
 800744e:	2038      	movs	r0, #56	; 0x38
 8007450:	f7ff fd22 	bl	8006e98 <lcd_puts_xy>

	LCD5110_Refresh();
 8007454:	f7fa fb0a 	bl	8001a6c <LCD5110_Refresh>
}
 8007458:	bf00      	nop
 800745a:	3728      	adds	r7, #40	; 0x28
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	0800bcf0 	.word	0x0800bcf0
 8007464:	200138c0 	.word	0x200138c0
 8007468:	0800bcf4 	.word	0x0800bcf4
 800746c:	0800bcf8 	.word	0x0800bcf8
 8007470:	0800bcfc 	.word	0x0800bcfc
 8007474:	20013894 	.word	0x20013894
 8007478:	0800bd00 	.word	0x0800bd00
 800747c:	0800bd0c 	.word	0x0800bd0c
 8007480:	20013874 	.word	0x20013874
 8007484:	0800bd18 	.word	0x0800bd18
 8007488:	0800bd20 	.word	0x0800bd20
 800748c:	0800bd28 	.word	0x0800bd28

08007490 <lcd_screen_4_refresh>:

void lcd_screen_4_refresh() {
 8007490:	b580      	push	{r7, lr}
 8007492:	b08e      	sub	sp, #56	; 0x38
 8007494:	af02      	add	r7, sp, #8
	char time_buf[9];
	char val_buf[10];
	char range_buf[2];
	char interval_buf[7];

	LCD5110_Clear();
 8007496:	f7fa fab7 	bl	8001a08 <LCD5110_Clear>

	if(screen4_mode == S4_NORMAL_DISPLAY) {
 800749a:	4bc0      	ldr	r3, [pc, #768]	; (800779c <lcd_screen_4_refresh+0x30c>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f040 80af 	bne.w	8007602 <lcd_screen_4_refresh+0x172>

		lcd_puts_xy(0, 0, "PKV", 1, 1);
 80074a4:	2301      	movs	r3, #1
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	2301      	movs	r3, #1
 80074aa:	4abd      	ldr	r2, [pc, #756]	; (80077a0 <lcd_screen_4_refresh+0x310>)
 80074ac:	2100      	movs	r1, #0
 80074ae:	2000      	movs	r0, #0
 80074b0:	f7ff fcf2 	bl	8006e98 <lcd_puts_xy>
		range_scale(screen4_data.User_PKV, val_buf, range_buf, 1);
 80074b4:	4bbb      	ldr	r3, [pc, #748]	; (80077a4 <lcd_screen_4_refresh+0x314>)
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	f107 0208 	add.w	r2, r7, #8
 80074bc:	f107 010c 	add.w	r1, r7, #12
 80074c0:	2301      	movs	r3, #1
 80074c2:	f7ff fd05 	bl	8006ed0 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 0, val_buf, 1, 1);
 80074c6:	f107 020c 	add.w	r2, r7, #12
 80074ca:	2301      	movs	r3, #1
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2301      	movs	r3, #1
 80074d0:	2100      	movs	r1, #0
 80074d2:	201c      	movs	r0, #28
 80074d4:	f7ff fce0 	bl	8006e98 <lcd_puts_xy>
//		lcd_puts_xy(VALUE_RANGE_COLUMN, 0, range_buf, 1, 1);
		lcd_puts_xy(UNITS_COLUMN, 0, "V", 1, 1);
 80074d8:	2301      	movs	r3, #1
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	2301      	movs	r3, #1
 80074de:	4ab2      	ldr	r2, [pc, #712]	; (80077a8 <lcd_screen_4_refresh+0x318>)
 80074e0:	2100      	movs	r1, #0
 80074e2:	2042      	movs	r0, #66	; 0x42
 80074e4:	f7ff fcd8 	bl	8006e98 <lcd_puts_xy>

		lcd_puts_xy(0, 10, "PKI", 1, 1);
 80074e8:	2301      	movs	r3, #1
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	2301      	movs	r3, #1
 80074ee:	4aaf      	ldr	r2, [pc, #700]	; (80077ac <lcd_screen_4_refresh+0x31c>)
 80074f0:	210a      	movs	r1, #10
 80074f2:	2000      	movs	r0, #0
 80074f4:	f7ff fcd0 	bl	8006e98 <lcd_puts_xy>
		range_scale(screen4_data.User_PKI, val_buf, range_buf, 1);
 80074f8:	4baa      	ldr	r3, [pc, #680]	; (80077a4 <lcd_screen_4_refresh+0x314>)
 80074fa:	6858      	ldr	r0, [r3, #4]
 80074fc:	f107 0208 	add.w	r2, r7, #8
 8007500:	f107 010c 	add.w	r1, r7, #12
 8007504:	2301      	movs	r3, #1
 8007506:	f7ff fce3 	bl	8006ed0 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 10, val_buf, 1, 1);
 800750a:	f107 020c 	add.w	r2, r7, #12
 800750e:	2301      	movs	r3, #1
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	2301      	movs	r3, #1
 8007514:	210a      	movs	r1, #10
 8007516:	201c      	movs	r0, #28
 8007518:	f7ff fcbe 	bl	8006e98 <lcd_puts_xy>
//		lcd_puts_xy(VALUE_RANGE_COLUMN, 10, range_buf, 1, 1);
		lcd_puts_xy(UNITS_COLUMN, 10, "A", 1, 1);
 800751c:	2301      	movs	r3, #1
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	2301      	movs	r3, #1
 8007522:	4aa3      	ldr	r2, [pc, #652]	; (80077b0 <lcd_screen_4_refresh+0x320>)
 8007524:	210a      	movs	r1, #10
 8007526:	2042      	movs	r0, #66	; 0x42
 8007528:	f7ff fcb6 	bl	8006e98 <lcd_puts_xy>

		lcd_puts_xy(0, 20, "SAG", 1, 1);
 800752c:	2301      	movs	r3, #1
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	2301      	movs	r3, #1
 8007532:	4aa0      	ldr	r2, [pc, #640]	; (80077b4 <lcd_screen_4_refresh+0x324>)
 8007534:	2114      	movs	r1, #20
 8007536:	2000      	movs	r0, #0
 8007538:	f7ff fcae 	bl	8006e98 <lcd_puts_xy>
		range_scale(screen4_data.User_SAG, val_buf, range_buf, 1);
 800753c:	4b99      	ldr	r3, [pc, #612]	; (80077a4 <lcd_screen_4_refresh+0x314>)
 800753e:	6898      	ldr	r0, [r3, #8]
 8007540:	f107 0208 	add.w	r2, r7, #8
 8007544:	f107 010c 	add.w	r1, r7, #12
 8007548:	2301      	movs	r3, #1
 800754a:	f7ff fcc1 	bl	8006ed0 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 20, val_buf, 1, 1);
 800754e:	f107 020c 	add.w	r2, r7, #12
 8007552:	2301      	movs	r3, #1
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	2301      	movs	r3, #1
 8007558:	2114      	movs	r1, #20
 800755a:	201c      	movs	r0, #28
 800755c:	f7ff fc9c 	bl	8006e98 <lcd_puts_xy>
//		lcd_puts_xy(VALUE_RANGE_COLUMN, 20, range_buf, 1, 1);
		lcd_puts_xy(UNITS_COLUMN, 20, "V", 1, 1);
 8007560:	2301      	movs	r3, #1
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	2301      	movs	r3, #1
 8007566:	4a90      	ldr	r2, [pc, #576]	; (80077a8 <lcd_screen_4_refresh+0x318>)
 8007568:	2114      	movs	r1, #20
 800756a:	2042      	movs	r0, #66	; 0x42
 800756c:	f7ff fc94 	bl	8006e98 <lcd_puts_xy>

		lcd_puts_xy(0, 30, "Intv", 1, 1);
 8007570:	2301      	movs	r3, #1
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	2301      	movs	r3, #1
 8007576:	4a90      	ldr	r2, [pc, #576]	; (80077b8 <lcd_screen_4_refresh+0x328>)
 8007578:	211e      	movs	r1, #30
 800757a:	2000      	movs	r0, #0
 800757c:	f7ff fc8c 	bl	8006e98 <lcd_puts_xy>
		sprintf(interval_buf, "%02dmins", screen4_data.User_Interval);
 8007580:	4b88      	ldr	r3, [pc, #544]	; (80077a4 <lcd_screen_4_refresh+0x314>)
 8007582:	7b1b      	ldrb	r3, [r3, #12]
 8007584:	461a      	mov	r2, r3
 8007586:	463b      	mov	r3, r7
 8007588:	498c      	ldr	r1, [pc, #560]	; (80077bc <lcd_screen_4_refresh+0x32c>)
 800758a:	4618      	mov	r0, r3
 800758c:	f002 f8ec 	bl	8009768 <siprintf>
		lcd_puts_xy(INTVL_COLUMN, 30, interval_buf, 1, 1);
 8007590:	463a      	mov	r2, r7
 8007592:	2301      	movs	r3, #1
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	2301      	movs	r3, #1
 8007598:	211e      	movs	r1, #30
 800759a:	2028      	movs	r0, #40	; 0x28
 800759c:	f7ff fc7c 	bl	8006e98 <lcd_puts_xy>

		sprintf(date_buf, "%02u/%02u/20%02u",
				rtc_display.date,
 80075a0:	4b87      	ldr	r3, [pc, #540]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 80075a2:	791b      	ldrb	r3, [r3, #4]
		sprintf(date_buf, "%02u/%02u/20%02u",
 80075a4:	461a      	mov	r2, r3
				rtc_display.month,
 80075a6:	4b86      	ldr	r3, [pc, #536]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 80075a8:	795b      	ldrb	r3, [r3, #5]
		sprintf(date_buf, "%02u/%02u/20%02u",
 80075aa:	4619      	mov	r1, r3
				rtc_display.year);
 80075ac:	4b84      	ldr	r3, [pc, #528]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 80075ae:	799b      	ldrb	r3, [r3, #6]
		sprintf(date_buf, "%02u/%02u/20%02u",
 80075b0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	460b      	mov	r3, r1
 80075b8:	4982      	ldr	r1, [pc, #520]	; (80077c4 <lcd_screen_4_refresh+0x334>)
 80075ba:	f002 f8d5 	bl	8009768 <siprintf>
		lcd_puts_xy(0, ROW_LINE_4 + 2, date_buf, 1, 0);
 80075be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80075c2:	2300      	movs	r3, #0
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	2301      	movs	r3, #1
 80075c8:	212b      	movs	r1, #43	; 0x2b
 80075ca:	2000      	movs	r0, #0
 80075cc:	f7ff fc64 	bl	8006e98 <lcd_puts_xy>
		sprintf(time_buf, "%02u:%02u:%02u",
				rtc_display.hours,
 80075d0:	4b7b      	ldr	r3, [pc, #492]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 80075d2:	789b      	ldrb	r3, [r3, #2]
		sprintf(time_buf, "%02u:%02u:%02u",
 80075d4:	461a      	mov	r2, r3
				rtc_display.minutes,
 80075d6:	4b7a      	ldr	r3, [pc, #488]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 80075d8:	785b      	ldrb	r3, [r3, #1]
		sprintf(time_buf, "%02u:%02u:%02u",
 80075da:	4619      	mov	r1, r3
				rtc_display.seconds);
 80075dc:	4b78      	ldr	r3, [pc, #480]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 80075de:	781b      	ldrb	r3, [r3, #0]
		sprintf(time_buf, "%02u:%02u:%02u",
 80075e0:	f107 0018 	add.w	r0, r7, #24
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	460b      	mov	r3, r1
 80075e8:	4977      	ldr	r1, [pc, #476]	; (80077c8 <lcd_screen_4_refresh+0x338>)
 80075ea:	f002 f8bd 	bl	8009768 <siprintf>
		lcd_puts_xy(56, ROW_LINE_4 + 2, time_buf, 1, 0);
 80075ee:	f107 0218 	add.w	r2, r7, #24
 80075f2:	2300      	movs	r3, #0
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	2301      	movs	r3, #1
 80075f8:	212b      	movs	r1, #43	; 0x2b
 80075fa:	2038      	movs	r0, #56	; 0x38
 80075fc:	f7ff fc4c 	bl	8006e98 <lcd_puts_xy>
 8007600:	e1f8      	b.n	80079f4 <lcd_screen_4_refresh+0x564>

	} else {

		lcd_puts_xy(5, 0, "Configuration", 1, 1);
 8007602:	2301      	movs	r3, #1
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	2301      	movs	r3, #1
 8007608:	4a70      	ldr	r2, [pc, #448]	; (80077cc <lcd_screen_4_refresh+0x33c>)
 800760a:	2100      	movs	r1, #0
 800760c:	2005      	movs	r0, #5
 800760e:	f7ff fc43 	bl	8006e98 <lcd_puts_xy>

		if(screen4_mode == S4_CONFIG_DISPLAY) {
 8007612:	4b62      	ldr	r3, [pc, #392]	; (800779c <lcd_screen_4_refresh+0x30c>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d155      	bne.n	80076c6 <lcd_screen_4_refresh+0x236>
			lcd_puts_xy(10, 10, "Parameters", 1, 1);
 800761a:	2301      	movs	r3, #1
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	2301      	movs	r3, #1
 8007620:	4a6b      	ldr	r2, [pc, #428]	; (80077d0 <lcd_screen_4_refresh+0x340>)
 8007622:	210a      	movs	r1, #10
 8007624:	200a      	movs	r0, #10
 8007626:	f7ff fc37 	bl	8006e98 <lcd_puts_xy>
			lcd_puts_xy(10, 20, "Date & Time", 1, 1);
 800762a:	2301      	movs	r3, #1
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	2301      	movs	r3, #1
 8007630:	4a68      	ldr	r2, [pc, #416]	; (80077d4 <lcd_screen_4_refresh+0x344>)
 8007632:	2114      	movs	r1, #20
 8007634:	200a      	movs	r0, #10
 8007636:	f7ff fc2f 	bl	8006e98 <lcd_puts_xy>
			if(screen4_config_option == Config_Params)
 800763a:	4b67      	ldr	r3, [pc, #412]	; (80077d8 <lcd_screen_4_refresh+0x348>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d108      	bne.n	8007654 <lcd_screen_4_refresh+0x1c4>
				lcd_puts_xy(0, 10, ">", 1, 1);
 8007642:	2301      	movs	r3, #1
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	2301      	movs	r3, #1
 8007648:	4a64      	ldr	r2, [pc, #400]	; (80077dc <lcd_screen_4_refresh+0x34c>)
 800764a:	210a      	movs	r1, #10
 800764c:	2000      	movs	r0, #0
 800764e:	f7ff fc23 	bl	8006e98 <lcd_puts_xy>
 8007652:	e007      	b.n	8007664 <lcd_screen_4_refresh+0x1d4>
			else lcd_puts_xy(0, 20, ">", 1, 1);
 8007654:	2301      	movs	r3, #1
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	2301      	movs	r3, #1
 800765a:	4a60      	ldr	r2, [pc, #384]	; (80077dc <lcd_screen_4_refresh+0x34c>)
 800765c:	2114      	movs	r1, #20
 800765e:	2000      	movs	r0, #0
 8007660:	f7ff fc1a 	bl	8006e98 <lcd_puts_xy>

			sprintf(date_buf, "%02u/%02u/20%02u",
					rtc_display.date,
 8007664:	4b56      	ldr	r3, [pc, #344]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 8007666:	791b      	ldrb	r3, [r3, #4]
			sprintf(date_buf, "%02u/%02u/20%02u",
 8007668:	461a      	mov	r2, r3
					rtc_display.month,
 800766a:	4b55      	ldr	r3, [pc, #340]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 800766c:	795b      	ldrb	r3, [r3, #5]
			sprintf(date_buf, "%02u/%02u/20%02u",
 800766e:	4619      	mov	r1, r3
					rtc_display.year);
 8007670:	4b53      	ldr	r3, [pc, #332]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 8007672:	799b      	ldrb	r3, [r3, #6]
			sprintf(date_buf, "%02u/%02u/20%02u",
 8007674:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	460b      	mov	r3, r1
 800767c:	4951      	ldr	r1, [pc, #324]	; (80077c4 <lcd_screen_4_refresh+0x334>)
 800767e:	f002 f873 	bl	8009768 <siprintf>
			lcd_puts_xy(0, ROW_LINE_4 + 2, date_buf, 1, 0);
 8007682:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007686:	2300      	movs	r3, #0
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	2301      	movs	r3, #1
 800768c:	212b      	movs	r1, #43	; 0x2b
 800768e:	2000      	movs	r0, #0
 8007690:	f7ff fc02 	bl	8006e98 <lcd_puts_xy>
			sprintf(time_buf, "%02u:%02u:%02u",
					rtc_display.hours,
 8007694:	4b4a      	ldr	r3, [pc, #296]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 8007696:	789b      	ldrb	r3, [r3, #2]
			sprintf(time_buf, "%02u:%02u:%02u",
 8007698:	461a      	mov	r2, r3
					rtc_display.minutes,
 800769a:	4b49      	ldr	r3, [pc, #292]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 800769c:	785b      	ldrb	r3, [r3, #1]
			sprintf(time_buf, "%02u:%02u:%02u",
 800769e:	4619      	mov	r1, r3
					rtc_display.seconds);
 80076a0:	4b47      	ldr	r3, [pc, #284]	; (80077c0 <lcd_screen_4_refresh+0x330>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
			sprintf(time_buf, "%02u:%02u:%02u",
 80076a4:	f107 0018 	add.w	r0, r7, #24
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	460b      	mov	r3, r1
 80076ac:	4946      	ldr	r1, [pc, #280]	; (80077c8 <lcd_screen_4_refresh+0x338>)
 80076ae:	f002 f85b 	bl	8009768 <siprintf>
			lcd_puts_xy(56, ROW_LINE_4 + 2, time_buf, 1, 0);
 80076b2:	f107 0218 	add.w	r2, r7, #24
 80076b6:	2300      	movs	r3, #0
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	2301      	movs	r3, #1
 80076bc:	212b      	movs	r1, #43	; 0x2b
 80076be:	2038      	movs	r0, #56	; 0x38
 80076c0:	f7ff fbea 	bl	8006e98 <lcd_puts_xy>
 80076c4:	e196      	b.n	80079f4 <lcd_screen_4_refresh+0x564>

		} else if (screen4_mode == S4_CONFIG_PARAMS_DISPLAY) {
 80076c6:	4b35      	ldr	r3, [pc, #212]	; (800779c <lcd_screen_4_refresh+0x30c>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	f040 8107 	bne.w	80078de <lcd_screen_4_refresh+0x44e>
			lcd_puts_xy(0, 10, "PKV", 1, 1);
 80076d0:	2301      	movs	r3, #1
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2301      	movs	r3, #1
 80076d6:	4a32      	ldr	r2, [pc, #200]	; (80077a0 <lcd_screen_4_refresh+0x310>)
 80076d8:	210a      	movs	r1, #10
 80076da:	2000      	movs	r0, #0
 80076dc:	f7ff fbdc 	bl	8006e98 <lcd_puts_xy>
			lcd_puts_xy(0, 20, "PKI", 1, 1);
 80076e0:	2301      	movs	r3, #1
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	2301      	movs	r3, #1
 80076e6:	4a31      	ldr	r2, [pc, #196]	; (80077ac <lcd_screen_4_refresh+0x31c>)
 80076e8:	2114      	movs	r1, #20
 80076ea:	2000      	movs	r0, #0
 80076ec:	f7ff fbd4 	bl	8006e98 <lcd_puts_xy>
			lcd_puts_xy(0, 30, "SAG", 1, 1);
 80076f0:	2301      	movs	r3, #1
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	2301      	movs	r3, #1
 80076f6:	4a2f      	ldr	r2, [pc, #188]	; (80077b4 <lcd_screen_4_refresh+0x324>)
 80076f8:	211e      	movs	r1, #30
 80076fa:	2000      	movs	r0, #0
 80076fc:	f7ff fbcc 	bl	8006e98 <lcd_puts_xy>
			lcd_puts_xy(0, 40, "Intv", 1, 1);
 8007700:	2301      	movs	r3, #1
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	2301      	movs	r3, #1
 8007706:	4a2c      	ldr	r2, [pc, #176]	; (80077b8 <lcd_screen_4_refresh+0x328>)
 8007708:	2128      	movs	r1, #40	; 0x28
 800770a:	2000      	movs	r0, #0
 800770c:	f7ff fbc4 	bl	8006e98 <lcd_puts_xy>

			switch (screen4_config_item) {
 8007710:	4b33      	ldr	r3, [pc, #204]	; (80077e0 <lcd_screen_4_refresh+0x350>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b07      	cmp	r3, #7
 8007716:	f200 8082 	bhi.w	800781e <lcd_screen_4_refresh+0x38e>
 800771a:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <lcd_screen_4_refresh+0x290>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	08007741 	.word	0x08007741
 8007724:	08007753 	.word	0x08007753
 8007728:	08007765 	.word	0x08007765
 800772c:	08007777 	.word	0x08007777
 8007730:	08007789 	.word	0x08007789
 8007734:	080077e9 	.word	0x080077e9
 8007738:	080077fb 	.word	0x080077fb
 800773c:	0800780d 	.word	0x0800780d
				case Config_pkv:
					lcd_puts_xy(20, 10, "<", 1, 1);
 8007740:	2301      	movs	r3, #1
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	2301      	movs	r3, #1
 8007746:	4a27      	ldr	r2, [pc, #156]	; (80077e4 <lcd_screen_4_refresh+0x354>)
 8007748:	210a      	movs	r1, #10
 800774a:	2014      	movs	r0, #20
 800774c:	f7ff fba4 	bl	8006e98 <lcd_puts_xy>
					break;
 8007750:	e066      	b.n	8007820 <lcd_screen_4_refresh+0x390>
				case Config_pkv_selected:
					lcd_puts_xy(20, 10, ">", 1, 1);
 8007752:	2301      	movs	r3, #1
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	2301      	movs	r3, #1
 8007758:	4a20      	ldr	r2, [pc, #128]	; (80077dc <lcd_screen_4_refresh+0x34c>)
 800775a:	210a      	movs	r1, #10
 800775c:	2014      	movs	r0, #20
 800775e:	f7ff fb9b 	bl	8006e98 <lcd_puts_xy>
					break;
 8007762:	e05d      	b.n	8007820 <lcd_screen_4_refresh+0x390>
				case Config_pki:
					lcd_puts_xy(20, 20, "<", 1, 1);
 8007764:	2301      	movs	r3, #1
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	2301      	movs	r3, #1
 800776a:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <lcd_screen_4_refresh+0x354>)
 800776c:	2114      	movs	r1, #20
 800776e:	2014      	movs	r0, #20
 8007770:	f7ff fb92 	bl	8006e98 <lcd_puts_xy>
					break;
 8007774:	e054      	b.n	8007820 <lcd_screen_4_refresh+0x390>
				case Config_pki_selected:
					lcd_puts_xy(20, 20, ">", 1, 1);
 8007776:	2301      	movs	r3, #1
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	2301      	movs	r3, #1
 800777c:	4a17      	ldr	r2, [pc, #92]	; (80077dc <lcd_screen_4_refresh+0x34c>)
 800777e:	2114      	movs	r1, #20
 8007780:	2014      	movs	r0, #20
 8007782:	f7ff fb89 	bl	8006e98 <lcd_puts_xy>
					break;
 8007786:	e04b      	b.n	8007820 <lcd_screen_4_refresh+0x390>
				case Config_sag:
					lcd_puts_xy(20, 30, "<", 1, 1);
 8007788:	2301      	movs	r3, #1
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	2301      	movs	r3, #1
 800778e:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <lcd_screen_4_refresh+0x354>)
 8007790:	211e      	movs	r1, #30
 8007792:	2014      	movs	r0, #20
 8007794:	f7ff fb80 	bl	8006e98 <lcd_puts_xy>
					break;
 8007798:	e042      	b.n	8007820 <lcd_screen_4_refresh+0x390>
 800779a:	bf00      	nop
 800779c:	200138c8 	.word	0x200138c8
 80077a0:	0800bd38 	.word	0x0800bd38
 80077a4:	200138b0 	.word	0x200138b0
 80077a8:	0800bcb0 	.word	0x0800bcb0
 80077ac:	0800bd3c 	.word	0x0800bd3c
 80077b0:	0800bcc0 	.word	0x0800bcc0
 80077b4:	0800bd40 	.word	0x0800bd40
 80077b8:	0800bd44 	.word	0x0800bd44
 80077bc:	0800bd4c 	.word	0x0800bd4c
 80077c0:	200138a8 	.word	0x200138a8
 80077c4:	0800bd58 	.word	0x0800bd58
 80077c8:	0800bd28 	.word	0x0800bd28
 80077cc:	0800bd6c 	.word	0x0800bd6c
 80077d0:	0800bd7c 	.word	0x0800bd7c
 80077d4:	0800bd88 	.word	0x0800bd88
 80077d8:	200138c9 	.word	0x200138c9
 80077dc:	0800bd94 	.word	0x0800bd94
 80077e0:	20013895 	.word	0x20013895
 80077e4:	0800bd98 	.word	0x0800bd98
				case Config_sag_selected:
					lcd_puts_xy(20, 30, ">", 1, 1);
 80077e8:	2301      	movs	r3, #1
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	2301      	movs	r3, #1
 80077ee:	4a84      	ldr	r2, [pc, #528]	; (8007a00 <lcd_screen_4_refresh+0x570>)
 80077f0:	211e      	movs	r1, #30
 80077f2:	2014      	movs	r0, #20
 80077f4:	f7ff fb50 	bl	8006e98 <lcd_puts_xy>
					break;
 80077f8:	e012      	b.n	8007820 <lcd_screen_4_refresh+0x390>
				case Config_interval:
					lcd_puts_xy(26, 40, "<", 1, 1);
 80077fa:	2301      	movs	r3, #1
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	2301      	movs	r3, #1
 8007800:	4a80      	ldr	r2, [pc, #512]	; (8007a04 <lcd_screen_4_refresh+0x574>)
 8007802:	2128      	movs	r1, #40	; 0x28
 8007804:	201a      	movs	r0, #26
 8007806:	f7ff fb47 	bl	8006e98 <lcd_puts_xy>
					break;
 800780a:	e009      	b.n	8007820 <lcd_screen_4_refresh+0x390>
				case Config_interval_selected:
					lcd_puts_xy(26, 40, ">", 1, 1);
 800780c:	2301      	movs	r3, #1
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	2301      	movs	r3, #1
 8007812:	4a7b      	ldr	r2, [pc, #492]	; (8007a00 <lcd_screen_4_refresh+0x570>)
 8007814:	2128      	movs	r1, #40	; 0x28
 8007816:	201a      	movs	r0, #26
 8007818:	f7ff fb3e 	bl	8006e98 <lcd_puts_xy>
					break;
 800781c:	e000      	b.n	8007820 <lcd_screen_4_refresh+0x390>
				default:
					break;
 800781e:	bf00      	nop
			}

			range_scale(screen4_data_config.User_PKV, val_buf, range_buf, 1);
 8007820:	4b79      	ldr	r3, [pc, #484]	; (8007a08 <lcd_screen_4_refresh+0x578>)
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	f107 0208 	add.w	r2, r7, #8
 8007828:	f107 010c 	add.w	r1, r7, #12
 800782c:	2301      	movs	r3, #1
 800782e:	f7ff fb4f 	bl	8006ed0 <range_scale>
			lcd_puts_xy(VALUE_COLUMN, 10, val_buf, 1, 1);
 8007832:	f107 020c 	add.w	r2, r7, #12
 8007836:	2301      	movs	r3, #1
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	2301      	movs	r3, #1
 800783c:	210a      	movs	r1, #10
 800783e:	201c      	movs	r0, #28
 8007840:	f7ff fb2a 	bl	8006e98 <lcd_puts_xy>
//			lcd_puts_xy(VALUE_RANGE_COLUMN, 10, range_buf, 1, 1);
			lcd_puts_xy(UNITS_COLUMN, 10, "V", 1, 1);
 8007844:	2301      	movs	r3, #1
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	2301      	movs	r3, #1
 800784a:	4a70      	ldr	r2, [pc, #448]	; (8007a0c <lcd_screen_4_refresh+0x57c>)
 800784c:	210a      	movs	r1, #10
 800784e:	2042      	movs	r0, #66	; 0x42
 8007850:	f7ff fb22 	bl	8006e98 <lcd_puts_xy>

			range_scale(screen4_data_config.User_PKI, val_buf, range_buf, 1);
 8007854:	4b6c      	ldr	r3, [pc, #432]	; (8007a08 <lcd_screen_4_refresh+0x578>)
 8007856:	6858      	ldr	r0, [r3, #4]
 8007858:	f107 0208 	add.w	r2, r7, #8
 800785c:	f107 010c 	add.w	r1, r7, #12
 8007860:	2301      	movs	r3, #1
 8007862:	f7ff fb35 	bl	8006ed0 <range_scale>
			lcd_puts_xy(VALUE_COLUMN, 20, val_buf, 1, 1);
 8007866:	f107 020c 	add.w	r2, r7, #12
 800786a:	2301      	movs	r3, #1
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	2301      	movs	r3, #1
 8007870:	2114      	movs	r1, #20
 8007872:	201c      	movs	r0, #28
 8007874:	f7ff fb10 	bl	8006e98 <lcd_puts_xy>
//			lcd_puts_xy(VALUE_RANGE_COLUMN, 20, range_buf, 1, 1);
			lcd_puts_xy(UNITS_COLUMN, 20, "A", 1, 1);
 8007878:	2301      	movs	r3, #1
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	2301      	movs	r3, #1
 800787e:	4a64      	ldr	r2, [pc, #400]	; (8007a10 <lcd_screen_4_refresh+0x580>)
 8007880:	2114      	movs	r1, #20
 8007882:	2042      	movs	r0, #66	; 0x42
 8007884:	f7ff fb08 	bl	8006e98 <lcd_puts_xy>

			range_scale(screen4_data_config.User_SAG, val_buf, range_buf, 1);
 8007888:	4b5f      	ldr	r3, [pc, #380]	; (8007a08 <lcd_screen_4_refresh+0x578>)
 800788a:	6898      	ldr	r0, [r3, #8]
 800788c:	f107 0208 	add.w	r2, r7, #8
 8007890:	f107 010c 	add.w	r1, r7, #12
 8007894:	2301      	movs	r3, #1
 8007896:	f7ff fb1b 	bl	8006ed0 <range_scale>
			lcd_puts_xy(VALUE_COLUMN, 30, val_buf, 1, 1);
 800789a:	f107 020c 	add.w	r2, r7, #12
 800789e:	2301      	movs	r3, #1
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	2301      	movs	r3, #1
 80078a4:	211e      	movs	r1, #30
 80078a6:	201c      	movs	r0, #28
 80078a8:	f7ff faf6 	bl	8006e98 <lcd_puts_xy>
//			lcd_puts_xy(VALUE_RANGE_COLUMN, 30, range_buf, 1, 1);
			lcd_puts_xy(UNITS_COLUMN, 30, "V", 1, 1);
 80078ac:	2301      	movs	r3, #1
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	2301      	movs	r3, #1
 80078b2:	4a56      	ldr	r2, [pc, #344]	; (8007a0c <lcd_screen_4_refresh+0x57c>)
 80078b4:	211e      	movs	r1, #30
 80078b6:	2042      	movs	r0, #66	; 0x42
 80078b8:	f7ff faee 	bl	8006e98 <lcd_puts_xy>

			sprintf(interval_buf, "%02dmins", screen4_data_config.User_Interval);
 80078bc:	4b52      	ldr	r3, [pc, #328]	; (8007a08 <lcd_screen_4_refresh+0x578>)
 80078be:	7b1b      	ldrb	r3, [r3, #12]
 80078c0:	461a      	mov	r2, r3
 80078c2:	463b      	mov	r3, r7
 80078c4:	4953      	ldr	r1, [pc, #332]	; (8007a14 <lcd_screen_4_refresh+0x584>)
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 ff4e 	bl	8009768 <siprintf>
			lcd_puts_xy(INTVL_COLUMN, 40, interval_buf, 1, 1);
 80078cc:	463a      	mov	r2, r7
 80078ce:	2301      	movs	r3, #1
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	2301      	movs	r3, #1
 80078d4:	2128      	movs	r1, #40	; 0x28
 80078d6:	2028      	movs	r0, #40	; 0x28
 80078d8:	f7ff fade 	bl	8006e98 <lcd_puts_xy>
 80078dc:	e08a      	b.n	80079f4 <lcd_screen_4_refresh+0x564>


		} else if (screen4_mode == S4_CONFIG_DATETIME_DISPLAY) {
 80078de:	4b4e      	ldr	r3, [pc, #312]	; (8007a18 <lcd_screen_4_refresh+0x588>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d176      	bne.n	80079d4 <lcd_screen_4_refresh+0x544>
			lcd_puts_xy(0, 10, "Date", 1, 1);
 80078e6:	2301      	movs	r3, #1
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	2301      	movs	r3, #1
 80078ec:	4a4b      	ldr	r2, [pc, #300]	; (8007a1c <lcd_screen_4_refresh+0x58c>)
 80078ee:	210a      	movs	r1, #10
 80078f0:	2000      	movs	r0, #0
 80078f2:	f7ff fad1 	bl	8006e98 <lcd_puts_xy>
			lcd_puts_xy(0, 30, "Time", 1, 1);
 80078f6:	2301      	movs	r3, #1
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	2301      	movs	r3, #1
 80078fc:	4a48      	ldr	r2, [pc, #288]	; (8007a20 <lcd_screen_4_refresh+0x590>)
 80078fe:	211e      	movs	r1, #30
 8007900:	2000      	movs	r0, #0
 8007902:	f7ff fac9 	bl	8006e98 <lcd_puts_xy>

			switch (screen4_config_item) {
 8007906:	4b47      	ldr	r3, [pc, #284]	; (8007a24 <lcd_screen_4_refresh+0x594>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	3b08      	subs	r3, #8
 800790c:	2b03      	cmp	r3, #3
 800790e:	d82f      	bhi.n	8007970 <lcd_screen_4_refresh+0x4e0>
 8007910:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <lcd_screen_4_refresh+0x488>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	08007929 	.word	0x08007929
 800791c:	0800793b 	.word	0x0800793b
 8007920:	0800794d 	.word	0x0800794d
 8007924:	0800795f 	.word	0x0800795f
				case Config_date:
					lcd_puts_xy(26, 10, "<", 1, 1);
 8007928:	2301      	movs	r3, #1
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	2301      	movs	r3, #1
 800792e:	4a35      	ldr	r2, [pc, #212]	; (8007a04 <lcd_screen_4_refresh+0x574>)
 8007930:	210a      	movs	r1, #10
 8007932:	201a      	movs	r0, #26
 8007934:	f7ff fab0 	bl	8006e98 <lcd_puts_xy>
					break;
 8007938:	e01b      	b.n	8007972 <lcd_screen_4_refresh+0x4e2>
				case Config_date_selected:
					lcd_puts_xy(0, 20, ">", 1, 1);
 800793a:	2301      	movs	r3, #1
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	2301      	movs	r3, #1
 8007940:	4a2f      	ldr	r2, [pc, #188]	; (8007a00 <lcd_screen_4_refresh+0x570>)
 8007942:	2114      	movs	r1, #20
 8007944:	2000      	movs	r0, #0
 8007946:	f7ff faa7 	bl	8006e98 <lcd_puts_xy>
					break;
 800794a:	e012      	b.n	8007972 <lcd_screen_4_refresh+0x4e2>
				case Config_time:
					lcd_puts_xy(26, 30, "<", 1, 1);
 800794c:	2301      	movs	r3, #1
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	2301      	movs	r3, #1
 8007952:	4a2c      	ldr	r2, [pc, #176]	; (8007a04 <lcd_screen_4_refresh+0x574>)
 8007954:	211e      	movs	r1, #30
 8007956:	201a      	movs	r0, #26
 8007958:	f7ff fa9e 	bl	8006e98 <lcd_puts_xy>
					break;
 800795c:	e009      	b.n	8007972 <lcd_screen_4_refresh+0x4e2>
				case Config_time_selected:
					lcd_puts_xy(0, 40, ">", 1, 1);
 800795e:	2301      	movs	r3, #1
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	2301      	movs	r3, #1
 8007964:	4a26      	ldr	r2, [pc, #152]	; (8007a00 <lcd_screen_4_refresh+0x570>)
 8007966:	2128      	movs	r1, #40	; 0x28
 8007968:	2000      	movs	r0, #0
 800796a:	f7ff fa95 	bl	8006e98 <lcd_puts_xy>
					break;
 800796e:	e000      	b.n	8007972 <lcd_screen_4_refresh+0x4e2>
				default:
					break;
 8007970:	bf00      	nop
			}

			sprintf(date_buf, "%02d/%02d/20%02d",
					rtc_config.date,
 8007972:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <lcd_screen_4_refresh+0x598>)
 8007974:	791b      	ldrb	r3, [r3, #4]
			sprintf(date_buf, "%02d/%02d/20%02d",
 8007976:	461a      	mov	r2, r3
					rtc_config.month,
 8007978:	4b2b      	ldr	r3, [pc, #172]	; (8007a28 <lcd_screen_4_refresh+0x598>)
 800797a:	795b      	ldrb	r3, [r3, #5]
			sprintf(date_buf, "%02d/%02d/20%02d",
 800797c:	4619      	mov	r1, r3
					rtc_config.year);
 800797e:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <lcd_screen_4_refresh+0x598>)
 8007980:	799b      	ldrb	r3, [r3, #6]
			sprintf(date_buf, "%02d/%02d/20%02d",
 8007982:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	460b      	mov	r3, r1
 800798a:	4928      	ldr	r1, [pc, #160]	; (8007a2c <lcd_screen_4_refresh+0x59c>)
 800798c:	f001 feec 	bl	8009768 <siprintf>
			lcd_puts_xy(20, 20, date_buf, 1, 1);
 8007990:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007994:	2301      	movs	r3, #1
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	2301      	movs	r3, #1
 800799a:	2114      	movs	r1, #20
 800799c:	2014      	movs	r0, #20
 800799e:	f7ff fa7b 	bl	8006e98 <lcd_puts_xy>

			sprintf(time_buf, "%02d:%02d:%02d",
					rtc_config.hours,
 80079a2:	4b21      	ldr	r3, [pc, #132]	; (8007a28 <lcd_screen_4_refresh+0x598>)
 80079a4:	789b      	ldrb	r3, [r3, #2]
			sprintf(time_buf, "%02d:%02d:%02d",
 80079a6:	461a      	mov	r2, r3
					rtc_config.minutes,
 80079a8:	4b1f      	ldr	r3, [pc, #124]	; (8007a28 <lcd_screen_4_refresh+0x598>)
 80079aa:	785b      	ldrb	r3, [r3, #1]
			sprintf(time_buf, "%02d:%02d:%02d",
 80079ac:	4619      	mov	r1, r3
					rtc_config.seconds);
 80079ae:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <lcd_screen_4_refresh+0x598>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
			sprintf(time_buf, "%02d:%02d:%02d",
 80079b2:	f107 0018 	add.w	r0, r7, #24
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	460b      	mov	r3, r1
 80079ba:	491d      	ldr	r1, [pc, #116]	; (8007a30 <lcd_screen_4_refresh+0x5a0>)
 80079bc:	f001 fed4 	bl	8009768 <siprintf>
			lcd_puts_xy(20, 40, time_buf, 1, 1);
 80079c0:	f107 0218 	add.w	r2, r7, #24
 80079c4:	2301      	movs	r3, #1
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	2301      	movs	r3, #1
 80079ca:	2128      	movs	r1, #40	; 0x28
 80079cc:	2014      	movs	r0, #20
 80079ce:	f7ff fa63 	bl	8006e98 <lcd_puts_xy>
 80079d2:	e00f      	b.n	80079f4 <lcd_screen_4_refresh+0x564>

		} else {
			lcd_puts_xy(24, ROW_LINE_2, "Commit?", 1, 1);
 80079d4:	2301      	movs	r3, #1
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	2301      	movs	r3, #1
 80079da:	4a16      	ldr	r2, [pc, #88]	; (8007a34 <lcd_screen_4_refresh+0x5a4>)
 80079dc:	210c      	movs	r1, #12
 80079de:	2018      	movs	r0, #24
 80079e0:	f7ff fa5a 	bl	8006e98 <lcd_puts_xy>
			lcd_puts_xy(12, ROW_LINE_3_1, "[#]Y / [*]N", 1, 1);
 80079e4:	2301      	movs	r3, #1
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	2301      	movs	r3, #1
 80079ea:	4a13      	ldr	r2, [pc, #76]	; (8007a38 <lcd_screen_4_refresh+0x5a8>)
 80079ec:	2118      	movs	r1, #24
 80079ee:	200c      	movs	r0, #12
 80079f0:	f7ff fa52 	bl	8006e98 <lcd_puts_xy>
		}
	}

	LCD5110_Refresh();
 80079f4:	f7fa f83a 	bl	8001a6c <LCD5110_Refresh>
}
 80079f8:	bf00      	nop
 80079fa:	3730      	adds	r7, #48	; 0x30
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	0800bd94 	.word	0x0800bd94
 8007a04:	0800bd98 	.word	0x0800bd98
 8007a08:	200138cc 	.word	0x200138cc
 8007a0c:	0800bcb0 	.word	0x0800bcb0
 8007a10:	0800bcc0 	.word	0x0800bcc0
 8007a14:	0800bd4c 	.word	0x0800bd4c
 8007a18:	200138c8 	.word	0x200138c8
 8007a1c:	0800bd9c 	.word	0x0800bd9c
 8007a20:	0800bda4 	.word	0x0800bda4
 8007a24:	20013895 	.word	0x20013895
 8007a28:	2001387c 	.word	0x2001387c
 8007a2c:	0800bdac 	.word	0x0800bdac
 8007a30:	0800bdc0 	.word	0x0800bdc0
 8007a34:	0800bdd0 	.word	0x0800bdd0
 8007a38:	0800bd0c 	.word	0x0800bd0c

08007a3c <lcd_screen_refresh>:

void lcd_screen_refresh(LCD_Screen_t screen) {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	71fb      	strb	r3, [r7, #7]
	switch (screen) {
 8007a46:	79fb      	ldrb	r3, [r7, #7]
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d817      	bhi.n	8007a7c <lcd_screen_refresh+0x40>
 8007a4c:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <lcd_screen_refresh+0x18>)
 8007a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a52:	bf00      	nop
 8007a54:	08007a65 	.word	0x08007a65
 8007a58:	08007a6b 	.word	0x08007a6b
 8007a5c:	08007a71 	.word	0x08007a71
 8007a60:	08007a77 	.word	0x08007a77
		case LCD_Screen_1:
			lcd_screen_1_refresh();
 8007a64:	f7ff fae2 	bl	800702c <lcd_screen_1_refresh>
			break;
 8007a68:	e009      	b.n	8007a7e <lcd_screen_refresh+0x42>
		case LCD_Screen_2:
			lcd_screen_2_refresh();
 8007a6a:	f7ff fb95 	bl	8007198 <lcd_screen_2_refresh>
			break;
 8007a6e:	e006      	b.n	8007a7e <lcd_screen_refresh+0x42>
		case LCD_Screen_3:
			lcd_screen_3_refresh();
 8007a70:	f7ff fc52 	bl	8007318 <lcd_screen_3_refresh>
			break;
 8007a74:	e003      	b.n	8007a7e <lcd_screen_refresh+0x42>
		case LCD_Screen_4:
			lcd_screen_4_refresh();
 8007a76:	f7ff fd0b 	bl	8007490 <lcd_screen_4_refresh>
			break;
 8007a7a:	e000      	b.n	8007a7e <lcd_screen_refresh+0x42>
		default:
			break;
 8007a7c:	bf00      	nop
	}
}
 8007a7e:	bf00      	nop
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop

08007a88 <lcd_screen_1_data_update>:

void lcd_screen_1_data_update(LCD_Data_Screen1_t data) {
 8007a88:	b490      	push	{r4, r7}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	463c      	mov	r4, r7
 8007a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	screen1_data = data;
 8007a94:	4b05      	ldr	r3, [pc, #20]	; (8007aac <lcd_screen_1_data_update+0x24>)
 8007a96:	461c      	mov	r4, r3
 8007a98:	463b      	mov	r3, r7
 8007a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007aa0:	bf00      	nop
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc90      	pop	{r4, r7}
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	20013898 	.word	0x20013898

08007ab0 <lcd_screen_2_data_update>:

void lcd_screen_2_data_update(LCD_Data_Screen2_t data) {
 8007ab0:	b490      	push	{r4, r7}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	463c      	mov	r4, r7
 8007ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	screen2_data = data;
 8007abc:	4b05      	ldr	r3, [pc, #20]	; (8007ad4 <lcd_screen_2_data_update+0x24>)
 8007abe:	461c      	mov	r4, r3
 8007ac0:	463b      	mov	r3, r7
 8007ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007ac8:	bf00      	nop
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bc90      	pop	{r4, r7}
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	20013884 	.word	0x20013884

08007ad8 <lcd_screen_3_data_update>:

void lcd_screen_3_data_update(LCD_Data_Screen3_t data) {
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	463b      	mov	r3, r7
 8007ae0:	e883 0003 	stmia.w	r3, {r0, r1}
	screen3_data = data;
 8007ae4:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <lcd_screen_3_data_update+0x28>)
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	463b      	mov	r3, r7
 8007aea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007aee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	200138c0 	.word	0x200138c0

08007b04 <lcd_screen_1_clear>:

void lcd_screen_4_data_update(LCD_Data_Screen4_t data) {
	screen4_data = data;
}

void lcd_screen_1_clear() {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
	memset(&screen1_data, 0, sizeof(screen1_data));
 8007b08:	2210      	movs	r2, #16
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4802      	ldr	r0, [pc, #8]	; (8007b18 <lcd_screen_1_clear+0x14>)
 8007b0e:	f001 f9b7 	bl	8008e80 <memset>
}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20013898 	.word	0x20013898

08007b1c <lcd_screen_2_clear>:

void lcd_screen_2_clear() {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
	memset(&screen2_data, 0, sizeof(screen2_data));
 8007b20:	2210      	movs	r2, #16
 8007b22:	2100      	movs	r1, #0
 8007b24:	4802      	ldr	r0, [pc, #8]	; (8007b30 <lcd_screen_2_clear+0x14>)
 8007b26:	f001 f9ab 	bl	8008e80 <memset>
}
 8007b2a:	bf00      	nop
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20013884 	.word	0x20013884

08007b34 <lcd_screen_3_clear>:

void lcd_screen_3_clear() {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
	memset(&screen3_data, 0, sizeof(screen3_data));
 8007b38:	2208      	movs	r2, #8
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	4806      	ldr	r0, [pc, #24]	; (8007b58 <lcd_screen_3_clear+0x24>)
 8007b3e:	f001 f99f 	bl	8008e80 <memset>
	memset(&screen3_timer, 0, sizeof(screen3_timer));
 8007b42:	2208      	movs	r2, #8
 8007b44:	2100      	movs	r1, #0
 8007b46:	4805      	ldr	r0, [pc, #20]	; (8007b5c <lcd_screen_3_clear+0x28>)
 8007b48:	f001 f99a 	bl	8008e80 <memset>
	screen3_mode = S3_NORMAL_DISPLAY;
 8007b4c:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <lcd_screen_3_clear+0x2c>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	701a      	strb	r2, [r3, #0]
}
 8007b52:	bf00      	nop
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	200138c0 	.word	0x200138c0
 8007b5c:	20013874 	.word	0x20013874
 8007b60:	20013894 	.word	0x20013894

08007b64 <lcd_screen_4_clear>:

void lcd_screen_4_clear() {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
	memset(&screen4_data, 0, sizeof(screen4_data));
 8007b68:	2210      	movs	r2, #16
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4808      	ldr	r0, [pc, #32]	; (8007b90 <lcd_screen_4_clear+0x2c>)
 8007b6e:	f001 f987 	bl	8008e80 <memset>
	screen4_data.User_Interval = Sample_Interval_60;
 8007b72:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <lcd_screen_4_clear+0x2c>)
 8007b74:	223c      	movs	r2, #60	; 0x3c
 8007b76:	731a      	strb	r2, [r3, #12]
	screen4_mode = S4_NORMAL_DISPLAY;
 8007b78:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <lcd_screen_4_clear+0x30>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
	screen4_config_option = Config_Params;
 8007b7e:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <lcd_screen_4_clear+0x34>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	701a      	strb	r2, [r3, #0]
	screen4_config_item = Config_pkv;
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <lcd_screen_4_clear+0x38>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	200138b0 	.word	0x200138b0
 8007b94:	200138c8 	.word	0x200138c8
 8007b98:	200138c9 	.word	0x200138c9
 8007b9c:	20013895 	.word	0x20013895

08007ba0 <lcd_screen_3_timer_count_up>:

void lcd_screen_3_timer_count_up() {
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
	screen3_timer.seconds++;
 8007ba4:	4b1c      	ldr	r3, [pc, #112]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007ba6:	799b      	ldrb	r3, [r3, #6]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	4b1a      	ldr	r3, [pc, #104]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bae:	719a      	strb	r2, [r3, #6]
	if(screen3_timer.seconds > 59) {
 8007bb0:	4b19      	ldr	r3, [pc, #100]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bb2:	799b      	ldrb	r3, [r3, #6]
 8007bb4:	2b3b      	cmp	r3, #59	; 0x3b
 8007bb6:	d92a      	bls.n	8007c0e <lcd_screen_3_timer_count_up+0x6e>
		screen3_timer.seconds -= 60;
 8007bb8:	4b17      	ldr	r3, [pc, #92]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bba:	799b      	ldrb	r3, [r3, #6]
 8007bbc:	3b3c      	subs	r3, #60	; 0x3c
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	4b15      	ldr	r3, [pc, #84]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bc2:	719a      	strb	r2, [r3, #6]
		screen3_timer.minutes++;
 8007bc4:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bc6:	795b      	ldrb	r3, [r3, #5]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bce:	715a      	strb	r2, [r3, #5]
		if(screen3_timer.minutes > 59) {
 8007bd0:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bd2:	795b      	ldrb	r3, [r3, #5]
 8007bd4:	2b3b      	cmp	r3, #59	; 0x3b
 8007bd6:	d91a      	bls.n	8007c0e <lcd_screen_3_timer_count_up+0x6e>
			screen3_timer.minutes -= 60;
 8007bd8:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bda:	795b      	ldrb	r3, [r3, #5]
 8007bdc:	3b3c      	subs	r3, #60	; 0x3c
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007be2:	715a      	strb	r2, [r3, #5]
			screen3_timer.hours++;
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007be6:	791b      	ldrb	r3, [r3, #4]
 8007be8:	3301      	adds	r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bee:	711a      	strb	r2, [r3, #4]
			if(screen3_timer.hours > 23) {
 8007bf0:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bf2:	791b      	ldrb	r3, [r3, #4]
 8007bf4:	2b17      	cmp	r3, #23
 8007bf6:	d90a      	bls.n	8007c0e <lcd_screen_3_timer_count_up+0x6e>
				screen3_timer.hours -= 24;
 8007bf8:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007bfa:	791b      	ldrb	r3, [r3, #4]
 8007bfc:	3b18      	subs	r3, #24
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007c02:	711a      	strb	r2, [r3, #4]
				screen3_timer.days++;
 8007c04:	4b04      	ldr	r3, [pc, #16]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	4a03      	ldr	r2, [pc, #12]	; (8007c18 <lcd_screen_3_timer_count_up+0x78>)
 8007c0c:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 8007c0e:	bf00      	nop
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	20013874 	.word	0x20013874

08007c1c <lcd_screen_3_switch_mode>:

void lcd_screen_3_switch_mode(LCD_Screen3_Mode mode) {
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	71fb      	strb	r3, [r7, #7]
	screen3_mode = mode;
 8007c26:	4a04      	ldr	r2, [pc, #16]	; (8007c38 <lcd_screen_3_switch_mode+0x1c>)
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	7013      	strb	r3, [r2, #0]
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	20013894 	.word	0x20013894

08007c3c <lcd_screen_4_rtc_update>:

LCD_Screen3_Mode lcd_screen_3_mode() {
	return screen3_mode;
}

void lcd_screen_4_rtc_update(DS1307_DateTime_t datetime) {
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	463b      	mov	r3, r7
 8007c44:	e883 0003 	stmia.w	r3, {r0, r1}
	rtc_display = datetime;
 8007c48:	4b07      	ldr	r3, [pc, #28]	; (8007c68 <lcd_screen_4_rtc_update+0x2c>)
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	6010      	str	r0, [r2, #0]
 8007c52:	8899      	ldrh	r1, [r3, #4]
 8007c54:	799b      	ldrb	r3, [r3, #6]
 8007c56:	8091      	strh	r1, [r2, #4]
 8007c58:	7193      	strb	r3, [r2, #6]
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	200138a8 	.word	0x200138a8

08007c6c <lcd_screen_4_switch_mode>:

void lcd_screen_4_switch_mode(LCD_Screen4_Mode mode) {
 8007c6c:	b490      	push	{r4, r7}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	71fb      	strb	r3, [r7, #7]
	if(mode == S4_CONFIG_PARAMS_DISPLAY) {
 8007c76:	79fb      	ldrb	r3, [r7, #7]
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d10c      	bne.n	8007c96 <lcd_screen_4_switch_mode+0x2a>
		if(screen4_mode == S4_CONFIG_DISPLAY) {
 8007c7c:	4b18      	ldr	r3, [pc, #96]	; (8007ce0 <lcd_screen_4_switch_mode+0x74>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d108      	bne.n	8007c96 <lcd_screen_4_switch_mode+0x2a>
			screen4_config_item = Config_pkv;
 8007c84:	4b17      	ldr	r3, [pc, #92]	; (8007ce4 <lcd_screen_4_switch_mode+0x78>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
			screen4_data_config = screen4_data;
 8007c8a:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <lcd_screen_4_switch_mode+0x7c>)
 8007c8c:	4b17      	ldr	r3, [pc, #92]	; (8007cec <lcd_screen_4_switch_mode+0x80>)
 8007c8e:	4614      	mov	r4, r2
 8007c90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}

	if(mode == S4_CONFIG_DATETIME_DISPLAY) {
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d106      	bne.n	8007caa <lcd_screen_4_switch_mode+0x3e>
		if(screen4_mode == S4_CONFIG_DISPLAY) {
 8007c9c:	4b10      	ldr	r3, [pc, #64]	; (8007ce0 <lcd_screen_4_switch_mode+0x74>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d102      	bne.n	8007caa <lcd_screen_4_switch_mode+0x3e>
			screen4_config_item = Config_date;
 8007ca4:	4b0f      	ldr	r3, [pc, #60]	; (8007ce4 <lcd_screen_4_switch_mode+0x78>)
 8007ca6:	2208      	movs	r2, #8
 8007ca8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(mode == S4_CONFIG_DISPLAY) {
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d10e      	bne.n	8007cce <lcd_screen_4_switch_mode+0x62>
		if(screen4_mode == S4_NORMAL_DISPLAY) {
 8007cb0:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <lcd_screen_4_switch_mode+0x74>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <lcd_screen_4_switch_mode+0x62>
			screen4_config_option = Config_Params;
 8007cb8:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <lcd_screen_4_switch_mode+0x84>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	701a      	strb	r2, [r3, #0]
			rtc_config = rtc_display;
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <lcd_screen_4_switch_mode+0x88>)
 8007cc0:	4a0d      	ldr	r2, [pc, #52]	; (8007cf8 <lcd_screen_4_switch_mode+0x8c>)
 8007cc2:	6811      	ldr	r1, [r2, #0]
 8007cc4:	6019      	str	r1, [r3, #0]
 8007cc6:	8891      	ldrh	r1, [r2, #4]
 8007cc8:	7992      	ldrb	r2, [r2, #6]
 8007cca:	8099      	strh	r1, [r3, #4]
 8007ccc:	719a      	strb	r2, [r3, #6]
		}
	}
	screen4_mode = mode;
 8007cce:	4a04      	ldr	r2, [pc, #16]	; (8007ce0 <lcd_screen_4_switch_mode+0x74>)
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	7013      	strb	r3, [r2, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc90      	pop	{r4, r7}
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	200138c8 	.word	0x200138c8
 8007ce4:	20013895 	.word	0x20013895
 8007ce8:	200138cc 	.word	0x200138cc
 8007cec:	200138b0 	.word	0x200138b0
 8007cf0:	200138c9 	.word	0x200138c9
 8007cf4:	2001387c 	.word	0x2001387c
 8007cf8:	200138a8 	.word	0x200138a8

08007cfc <lcd_screen_4_mode>:

LCD_Screen4_Mode lcd_screen_4_mode() {
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
	return screen4_mode;
 8007d00:	4b03      	ldr	r3, [pc, #12]	; (8007d10 <lcd_screen_4_mode+0x14>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	200138c8 	.word	0x200138c8

08007d14 <lcd_screen_4_config_option>:

Config_Option_t lcd_screen_4_config_option() {
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
	return screen4_config_option;
 8007d18:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <lcd_screen_4_config_option+0x14>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	200138c9 	.word	0x200138c9

08007d2c <lcd_screen_4_config_item>:

Config_Items_t lcd_screen_4_config_item() {
 8007d2c:	b480      	push	{r7}
 8007d2e:	af00      	add	r7, sp, #0
	return screen4_config_item;
 8007d30:	4b03      	ldr	r3, [pc, #12]	; (8007d40 <lcd_screen_4_config_item+0x14>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20013895 	.word	0x20013895

08007d44 <lcd_screen_4_next_config_option>:

void lcd_screen_4_next_config_option() {
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
	screen4_config_option ^= 1;
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <lcd_screen_4_next_config_option+0x1c>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f083 0301 	eor.w	r3, r3, #1
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	4b03      	ldr	r3, [pc, #12]	; (8007d60 <lcd_screen_4_next_config_option+0x1c>)
 8007d54:	701a      	strb	r2, [r3, #0]
}
 8007d56:	bf00      	nop
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	200138c9 	.word	0x200138c9

08007d64 <lcd_screen_4_next_config_item>:

void lcd_screen_4_next_config_item() {
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
	if(!(screen4_config_item % 2)) {
 8007d68:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <lcd_screen_4_next_config_item+0x54>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d11b      	bne.n	8007dae <lcd_screen_4_next_config_item+0x4a>
		screen4_config_item += 2;
 8007d76:	4b10      	ldr	r3, [pc, #64]	; (8007db8 <lcd_screen_4_next_config_item+0x54>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <lcd_screen_4_next_config_item+0x54>)
 8007d80:	701a      	strb	r2, [r3, #0]
		if(screen4_mode == S4_CONFIG_PARAMS_DISPLAY) {
 8007d82:	4b0e      	ldr	r3, [pc, #56]	; (8007dbc <lcd_screen_4_next_config_item+0x58>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d106      	bne.n	8007d98 <lcd_screen_4_next_config_item+0x34>
			if(screen4_config_item > Config_interval)
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <lcd_screen_4_next_config_item+0x54>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b06      	cmp	r3, #6
 8007d90:	d902      	bls.n	8007d98 <lcd_screen_4_next_config_item+0x34>
				screen4_config_item = Config_pkv;
 8007d92:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <lcd_screen_4_next_config_item+0x54>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]
		}
		if(screen4_mode == S4_CONFIG_DATETIME_DISPLAY) {
 8007d98:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <lcd_screen_4_next_config_item+0x58>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d106      	bne.n	8007dae <lcd_screen_4_next_config_item+0x4a>
			if(screen4_config_item == Max_Config_Items)
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <lcd_screen_4_next_config_item+0x54>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b0c      	cmp	r3, #12
 8007da6:	d102      	bne.n	8007dae <lcd_screen_4_next_config_item+0x4a>
				screen4_config_item = Config_date;
 8007da8:	4b03      	ldr	r3, [pc, #12]	; (8007db8 <lcd_screen_4_next_config_item+0x54>)
 8007daa:	2208      	movs	r2, #8
 8007dac:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8007dae:	bf00      	nop
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	20013895 	.word	0x20013895
 8007dbc:	200138c8 	.word	0x200138c8

08007dc0 <lcd_screen_4_config_select>:

void lcd_screen_4_config_select(Config_Select_t select) {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	71fb      	strb	r3, [r7, #7]
	if(select == CONFIG_SELECT) {
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d133      	bne.n	8007e38 <lcd_screen_4_config_select+0x78>
		if(!(screen4_config_item % 2)) {
 8007dd0:	4b24      	ldr	r3, [pc, #144]	; (8007e64 <lcd_screen_4_config_select+0xa4>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d13a      	bne.n	8007e54 <lcd_screen_4_config_select+0x94>
			switch (++screen4_config_item) {
 8007dde:	4b21      	ldr	r3, [pc, #132]	; (8007e64 <lcd_screen_4_config_select+0xa4>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	4b1f      	ldr	r3, [pc, #124]	; (8007e64 <lcd_screen_4_config_select+0xa4>)
 8007de8:	701a      	strb	r2, [r3, #0]
 8007dea:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <lcd_screen_4_config_select+0xa4>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	2b0a      	cmp	r3, #10
 8007df2:	d831      	bhi.n	8007e58 <lcd_screen_4_config_select+0x98>
 8007df4:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <lcd_screen_4_config_select+0x3c>)
 8007df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfa:	bf00      	nop
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	08007e59 	.word	0x08007e59
 8007e04:	08007e29 	.word	0x08007e29
 8007e08:	08007e59 	.word	0x08007e59
 8007e0c:	08007e29 	.word	0x08007e29
 8007e10:	08007e59 	.word	0x08007e59
 8007e14:	08007e59 	.word	0x08007e59
 8007e18:	08007e59 	.word	0x08007e59
 8007e1c:	08007e31 	.word	0x08007e31
 8007e20:	08007e59 	.word	0x08007e59
 8007e24:	08007e31 	.word	0x08007e31
				case Config_pkv_selected:
				case Config_pki_selected:
				case Config_sag_selected:
					lcd_enter_params_value(0xff);
 8007e28:	20ff      	movs	r0, #255	; 0xff
 8007e2a:	f000 f909 	bl	8008040 <lcd_enter_params_value>
					break;
 8007e2e:	e014      	b.n	8007e5a <lcd_screen_4_config_select+0x9a>
				case Config_date_selected:
				case Config_time_selected:
					lcd_enter_datetime_value(0xff);
 8007e30:	20ff      	movs	r0, #255	; 0xff
 8007e32:	f000 f871 	bl	8007f18 <lcd_enter_datetime_value>
					break;
 8007e36:	e010      	b.n	8007e5a <lcd_screen_4_config_select+0x9a>
				default:
					break;
			}
		}
	} else if(screen4_config_item % 2) screen4_config_item--;
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <lcd_screen_4_config_select+0xa4>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <lcd_screen_4_config_select+0x9a>
 8007e46:	4b07      	ldr	r3, [pc, #28]	; (8007e64 <lcd_screen_4_config_select+0xa4>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <lcd_screen_4_config_select+0xa4>)
 8007e50:	701a      	strb	r2, [r3, #0]
}
 8007e52:	e002      	b.n	8007e5a <lcd_screen_4_config_select+0x9a>
		}
 8007e54:	bf00      	nop
 8007e56:	e000      	b.n	8007e5a <lcd_screen_4_config_select+0x9a>
					break;
 8007e58:	bf00      	nop
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20013895 	.word	0x20013895

08007e68 <lcd_screen_4_next_interval_set>:

void lcd_screen_4_next_interval_set() {
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
	switch(screen4_data_config.User_Interval) {
 8007e6c:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <lcd_screen_4_next_interval_set+0x50>)
 8007e6e:	7b1b      	ldrb	r3, [r3, #12]
 8007e70:	2b3c      	cmp	r3, #60	; 0x3c
 8007e72:	d016      	beq.n	8007ea2 <lcd_screen_4_next_interval_set+0x3a>
 8007e74:	2b3c      	cmp	r3, #60	; 0x3c
 8007e76:	dc18      	bgt.n	8007eaa <lcd_screen_4_next_interval_set+0x42>
 8007e78:	2b1e      	cmp	r3, #30
 8007e7a:	d00e      	beq.n	8007e9a <lcd_screen_4_next_interval_set+0x32>
 8007e7c:	2b1e      	cmp	r3, #30
 8007e7e:	dc14      	bgt.n	8007eaa <lcd_screen_4_next_interval_set+0x42>
 8007e80:	2b05      	cmp	r3, #5
 8007e82:	d002      	beq.n	8007e8a <lcd_screen_4_next_interval_set+0x22>
 8007e84:	2b0f      	cmp	r3, #15
 8007e86:	d004      	beq.n	8007e92 <lcd_screen_4_next_interval_set+0x2a>
			break;
		case Sample_Interval_60:
			screen4_data_config.User_Interval = Sample_Interval_5;
			break;
		default:
			break;
 8007e88:	e00f      	b.n	8007eaa <lcd_screen_4_next_interval_set+0x42>
			screen4_data_config.User_Interval = Sample_Interval_15;
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <lcd_screen_4_next_interval_set+0x50>)
 8007e8c:	220f      	movs	r2, #15
 8007e8e:	731a      	strb	r2, [r3, #12]
			break;
 8007e90:	e00c      	b.n	8007eac <lcd_screen_4_next_interval_set+0x44>
			screen4_data_config.User_Interval = Sample_Interval_30;
 8007e92:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <lcd_screen_4_next_interval_set+0x50>)
 8007e94:	221e      	movs	r2, #30
 8007e96:	731a      	strb	r2, [r3, #12]
			break;
 8007e98:	e008      	b.n	8007eac <lcd_screen_4_next_interval_set+0x44>
			screen4_data_config.User_Interval = Sample_Interval_60;
 8007e9a:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <lcd_screen_4_next_interval_set+0x50>)
 8007e9c:	223c      	movs	r2, #60	; 0x3c
 8007e9e:	731a      	strb	r2, [r3, #12]
			break;
 8007ea0:	e004      	b.n	8007eac <lcd_screen_4_next_interval_set+0x44>
			screen4_data_config.User_Interval = Sample_Interval_5;
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <lcd_screen_4_next_interval_set+0x50>)
 8007ea4:	2205      	movs	r2, #5
 8007ea6:	731a      	strb	r2, [r3, #12]
			break;
 8007ea8:	e000      	b.n	8007eac <lcd_screen_4_next_interval_set+0x44>
			break;
 8007eaa:	bf00      	nop
	}
}
 8007eac:	bf00      	nop
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	200138cc 	.word	0x200138cc

08007ebc <lcd_screen_4_commit_rtc>:

DS1307_DateTime_t lcd_screen_4_commit_rtc() {
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
	return rtc_config;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a06      	ldr	r2, [pc, #24]	; (8007ee0 <lcd_screen_4_commit_rtc+0x24>)
 8007ec8:	6811      	ldr	r1, [r2, #0]
 8007eca:	6019      	str	r1, [r3, #0]
 8007ecc:	8891      	ldrh	r1, [r2, #4]
 8007ece:	7992      	ldrb	r2, [r2, #6]
 8007ed0:	8099      	strh	r1, [r3, #4]
 8007ed2:	719a      	strb	r2, [r3, #6]
}
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	2001387c 	.word	0x2001387c

08007ee4 <lcd_screen_4_commit_parameters>:

LCD_Data_Screen4_t lcd_screen_4_commit_parameters() {
 8007ee4:	b490      	push	{r4, r7}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	return screen4_data = screen4_data_config;
 8007eec:	4a08      	ldr	r2, [pc, #32]	; (8007f10 <lcd_screen_4_commit_parameters+0x2c>)
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <lcd_screen_4_commit_parameters+0x30>)
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a05      	ldr	r2, [pc, #20]	; (8007f10 <lcd_screen_4_commit_parameters+0x2c>)
 8007efc:	461c      	mov	r4, r3
 8007efe:	4613      	mov	r3, r2
 8007f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc90      	pop	{r4, r7}
 8007f0e:	4770      	bx	lr
 8007f10:	200138b0 	.word	0x200138b0
 8007f14:	200138cc 	.word	0x200138cc

08007f18 <lcd_enter_datetime_value>:

void lcd_enter_datetime_value(KEYPAD_Button_t key) {
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	71fb      	strb	r3, [r7, #7]
	static uint32_t base_value = 0;
	static uint32_t range = 100000;

	switch (key) {
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	2b09      	cmp	r3, #9
 8007f26:	d812      	bhi.n	8007f4e <lcd_enter_datetime_value+0x36>
		case KEYPAD_Button_6:
		case KEYPAD_Button_7:
		case KEYPAD_Button_8:
		case KEYPAD_Button_9:
			if(true) {
				base_value += ((uint8_t) key) * range;
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	4a3d      	ldr	r2, [pc, #244]	; (8008020 <lcd_enter_datetime_value+0x108>)
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	fb02 f203 	mul.w	r2, r2, r3
 8007f32:	4b3c      	ldr	r3, [pc, #240]	; (8008024 <lcd_enter_datetime_value+0x10c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4413      	add	r3, r2
 8007f38:	4a3a      	ldr	r2, [pc, #232]	; (8008024 <lcd_enter_datetime_value+0x10c>)
 8007f3a:	6013      	str	r3, [r2, #0]
				range /= 10;
 8007f3c:	4b38      	ldr	r3, [pc, #224]	; (8008020 <lcd_enter_datetime_value+0x108>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a39      	ldr	r2, [pc, #228]	; (8008028 <lcd_enter_datetime_value+0x110>)
 8007f42:	fba2 2303 	umull	r2, r3, r2, r3
 8007f46:	08db      	lsrs	r3, r3, #3
 8007f48:	4a35      	ldr	r2, [pc, #212]	; (8008020 <lcd_enter_datetime_value+0x108>)
 8007f4a:	6013      	str	r3, [r2, #0]
			}
			break;
 8007f4c:	e006      	b.n	8007f5c <lcd_enter_datetime_value+0x44>
		default:
			base_value = 0;
 8007f4e:	4b35      	ldr	r3, [pc, #212]	; (8008024 <lcd_enter_datetime_value+0x10c>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
			range = 100000;
 8007f54:	4b32      	ldr	r3, [pc, #200]	; (8008020 <lcd_enter_datetime_value+0x108>)
 8007f56:	4a35      	ldr	r2, [pc, #212]	; (800802c <lcd_enter_datetime_value+0x114>)
 8007f58:	601a      	str	r2, [r3, #0]
			break;
 8007f5a:	bf00      	nop
	}

	if(screen4_config_item == Config_date_selected) {
 8007f5c:	4b34      	ldr	r3, [pc, #208]	; (8008030 <lcd_enter_datetime_value+0x118>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b09      	cmp	r3, #9
 8007f62:	d12a      	bne.n	8007fba <lcd_enter_datetime_value+0xa2>
		rtc_config.day = MONDAY;
 8007f64:	4b33      	ldr	r3, [pc, #204]	; (8008034 <lcd_enter_datetime_value+0x11c>)
 8007f66:	2202      	movs	r2, #2
 8007f68:	70da      	strb	r2, [r3, #3]
		rtc_config.date = base_value / 10000;
 8007f6a:	4b2e      	ldr	r3, [pc, #184]	; (8008024 <lcd_enter_datetime_value+0x10c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a32      	ldr	r2, [pc, #200]	; (8008038 <lcd_enter_datetime_value+0x120>)
 8007f70:	fba2 2303 	umull	r2, r3, r2, r3
 8007f74:	0b5b      	lsrs	r3, r3, #13
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	4b2e      	ldr	r3, [pc, #184]	; (8008034 <lcd_enter_datetime_value+0x11c>)
 8007f7a:	711a      	strb	r2, [r3, #4]
		rtc_config.month = (base_value % 10000) / 100;
 8007f7c:	4b29      	ldr	r3, [pc, #164]	; (8008024 <lcd_enter_datetime_value+0x10c>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4b2d      	ldr	r3, [pc, #180]	; (8008038 <lcd_enter_datetime_value+0x120>)
 8007f82:	fba3 1302 	umull	r1, r3, r3, r2
 8007f86:	0b5b      	lsrs	r3, r3, #13
 8007f88:	f242 7110 	movw	r1, #10000	; 0x2710
 8007f8c:	fb01 f303 	mul.w	r3, r1, r3
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	4a2a      	ldr	r2, [pc, #168]	; (800803c <lcd_enter_datetime_value+0x124>)
 8007f94:	fba2 2303 	umull	r2, r3, r2, r3
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	4b25      	ldr	r3, [pc, #148]	; (8008034 <lcd_enter_datetime_value+0x11c>)
 8007f9e:	715a      	strb	r2, [r3, #5]
		rtc_config.year = base_value % 100;
 8007fa0:	4b20      	ldr	r3, [pc, #128]	; (8008024 <lcd_enter_datetime_value+0x10c>)
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b25      	ldr	r3, [pc, #148]	; (800803c <lcd_enter_datetime_value+0x124>)
 8007fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8007faa:	095b      	lsrs	r3, r3, #5
 8007fac:	2164      	movs	r1, #100	; 0x64
 8007fae:	fb01 f303 	mul.w	r3, r1, r3
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	4b1f      	ldr	r3, [pc, #124]	; (8008034 <lcd_enter_datetime_value+0x11c>)
 8007fb8:	719a      	strb	r2, [r3, #6]
	}
	if(screen4_config_item == Config_time_selected) {
 8007fba:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <lcd_enter_datetime_value+0x118>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b0b      	cmp	r3, #11
 8007fc0:	d127      	bne.n	8008012 <lcd_enter_datetime_value+0xfa>
		rtc_config.hours = base_value / 10000;
 8007fc2:	4b18      	ldr	r3, [pc, #96]	; (8008024 <lcd_enter_datetime_value+0x10c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a1c      	ldr	r2, [pc, #112]	; (8008038 <lcd_enter_datetime_value+0x120>)
 8007fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fcc:	0b5b      	lsrs	r3, r3, #13
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	4b18      	ldr	r3, [pc, #96]	; (8008034 <lcd_enter_datetime_value+0x11c>)
 8007fd2:	709a      	strb	r2, [r3, #2]
		rtc_config.minutes = (base_value % 10000) / 100;
 8007fd4:	4b13      	ldr	r3, [pc, #76]	; (8008024 <lcd_enter_datetime_value+0x10c>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	4b17      	ldr	r3, [pc, #92]	; (8008038 <lcd_enter_datetime_value+0x120>)
 8007fda:	fba3 1302 	umull	r1, r3, r3, r2
 8007fde:	0b5b      	lsrs	r3, r3, #13
 8007fe0:	f242 7110 	movw	r1, #10000	; 0x2710
 8007fe4:	fb01 f303 	mul.w	r3, r1, r3
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	4a14      	ldr	r2, [pc, #80]	; (800803c <lcd_enter_datetime_value+0x124>)
 8007fec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff0:	095b      	lsrs	r3, r3, #5
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <lcd_enter_datetime_value+0x11c>)
 8007ff6:	705a      	strb	r2, [r3, #1]
		rtc_config.seconds = base_value % 100;
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <lcd_enter_datetime_value+0x10c>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	; (800803c <lcd_enter_datetime_value+0x124>)
 8007ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8008002:	095b      	lsrs	r3, r3, #5
 8008004:	2164      	movs	r1, #100	; 0x64
 8008006:	fb01 f303 	mul.w	r3, r1, r3
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	b2da      	uxtb	r2, r3
 800800e:	4b09      	ldr	r3, [pc, #36]	; (8008034 <lcd_enter_datetime_value+0x11c>)
 8008010:	701a      	strb	r2, [r3, #0]
	}
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	20000030 	.word	0x20000030
 8008024:	20013574 	.word	0x20013574
 8008028:	cccccccd 	.word	0xcccccccd
 800802c:	000186a0 	.word	0x000186a0
 8008030:	20013895 	.word	0x20013895
 8008034:	2001387c 	.word	0x2001387c
 8008038:	d1b71759 	.word	0xd1b71759
 800803c:	51eb851f 	.word	0x51eb851f

08008040 <lcd_enter_params_value>:

void lcd_enter_params_value(KEYPAD_Button_t key) {
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	71fb      	strb	r3, [r7, #7]
	static uint16_t base_value = 0;
	static uint16_t afterpoint = 0;

	switch (key) {
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	2b09      	cmp	r3, #9
 800804e:	dc02      	bgt.n	8008056 <lcd_enter_params_value+0x16>
 8008050:	2b00      	cmp	r3, #0
 8008052:	da03      	bge.n	800805c <lcd_enter_params_value+0x1c>
 8008054:	e038      	b.n	80080c8 <lcd_enter_params_value+0x88>
 8008056:	2b0f      	cmp	r3, #15
 8008058:	d02e      	beq.n	80080b8 <lcd_enter_params_value+0x78>
 800805a:	e035      	b.n	80080c8 <lcd_enter_params_value+0x88>
		case KEYPAD_Button_5:
		case KEYPAD_Button_6:
		case KEYPAD_Button_7:
		case KEYPAD_Button_8:
		case KEYPAD_Button_9:
			if(base_value < 1000 && afterpoint < 1000) {
 800805c:	4b3a      	ldr	r3, [pc, #232]	; (8008148 <lcd_enter_params_value+0x108>)
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008064:	d237      	bcs.n	80080d6 <lcd_enter_params_value+0x96>
 8008066:	4b39      	ldr	r3, [pc, #228]	; (800814c <lcd_enter_params_value+0x10c>)
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800806e:	d232      	bcs.n	80080d6 <lcd_enter_params_value+0x96>
				base_value = base_value * 10 + ((uint8_t) key);
 8008070:	4b35      	ldr	r3, [pc, #212]	; (8008148 <lcd_enter_params_value+0x108>)
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	0092      	lsls	r2, r2, #2
 8008078:	4413      	add	r3, r2
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	b29a      	uxth	r2, r3
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	b29b      	uxth	r3, r3
 8008082:	4413      	add	r3, r2
 8008084:	b29a      	uxth	r2, r3
 8008086:	4b30      	ldr	r3, [pc, #192]	; (8008148 <lcd_enter_params_value+0x108>)
 8008088:	801a      	strh	r2, [r3, #0]
				if(afterpoint) afterpoint *= 10;
 800808a:	4b30      	ldr	r3, [pc, #192]	; (800814c <lcd_enter_params_value+0x10c>)
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <lcd_enter_params_value+0x66>
 8008092:	4b2e      	ldr	r3, [pc, #184]	; (800814c <lcd_enter_params_value+0x10c>)
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	0092      	lsls	r2, r2, #2
 800809a:	4413      	add	r3, r2
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	4b2a      	ldr	r3, [pc, #168]	; (800814c <lcd_enter_params_value+0x10c>)
 80080a2:	801a      	strh	r2, [r3, #0]
				else if(base_value >= 1000) afterpoint = 10;
			}
			break;
 80080a4:	e017      	b.n	80080d6 <lcd_enter_params_value+0x96>
				else if(base_value >= 1000) afterpoint = 10;
 80080a6:	4b28      	ldr	r3, [pc, #160]	; (8008148 <lcd_enter_params_value+0x108>)
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ae:	d312      	bcc.n	80080d6 <lcd_enter_params_value+0x96>
 80080b0:	4b26      	ldr	r3, [pc, #152]	; (800814c <lcd_enter_params_value+0x10c>)
 80080b2:	220a      	movs	r2, #10
 80080b4:	801a      	strh	r2, [r3, #0]
			break;
 80080b6:	e00e      	b.n	80080d6 <lcd_enter_params_value+0x96>
		case KEYPAD_Button_D:
			if(!afterpoint) afterpoint = 1;
 80080b8:	4b24      	ldr	r3, [pc, #144]	; (800814c <lcd_enter_params_value+0x10c>)
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10c      	bne.n	80080da <lcd_enter_params_value+0x9a>
 80080c0:	4b22      	ldr	r3, [pc, #136]	; (800814c <lcd_enter_params_value+0x10c>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	801a      	strh	r2, [r3, #0]
			break;
 80080c6:	e008      	b.n	80080da <lcd_enter_params_value+0x9a>
		default:
			base_value = 0;
 80080c8:	4b1f      	ldr	r3, [pc, #124]	; (8008148 <lcd_enter_params_value+0x108>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	801a      	strh	r2, [r3, #0]
			afterpoint = 0;
 80080ce:	4b1f      	ldr	r3, [pc, #124]	; (800814c <lcd_enter_params_value+0x10c>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	801a      	strh	r2, [r3, #0]
			break;
 80080d4:	e002      	b.n	80080dc <lcd_enter_params_value+0x9c>
			break;
 80080d6:	bf00      	nop
 80080d8:	e000      	b.n	80080dc <lcd_enter_params_value+0x9c>
			break;
 80080da:	bf00      	nop
	}

	float key_input = (float) base_value;
 80080dc:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <lcd_enter_params_value+0x108>)
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	ee07 3a90 	vmov	s15, r3
 80080e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e8:	edc7 7a03 	vstr	s15, [r7, #12]
	if(afterpoint) key_input /= afterpoint;
 80080ec:	4b17      	ldr	r3, [pc, #92]	; (800814c <lcd_enter_params_value+0x10c>)
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <lcd_enter_params_value+0xcc>
 80080f4:	4b15      	ldr	r3, [pc, #84]	; (800814c <lcd_enter_params_value+0x10c>)
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	ee07 3a90 	vmov	s15, r3
 80080fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008100:	edd7 6a03 	vldr	s13, [r7, #12]
 8008104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008108:	edc7 7a03 	vstr	s15, [r7, #12]

	switch (screen4_config_item) {
 800810c:	4b10      	ldr	r3, [pc, #64]	; (8008150 <lcd_enter_params_value+0x110>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b05      	cmp	r3, #5
 8008112:	d00e      	beq.n	8008132 <lcd_enter_params_value+0xf2>
 8008114:	2b05      	cmp	r3, #5
 8008116:	dc10      	bgt.n	800813a <lcd_enter_params_value+0xfa>
 8008118:	2b01      	cmp	r3, #1
 800811a:	d002      	beq.n	8008122 <lcd_enter_params_value+0xe2>
 800811c:	2b03      	cmp	r3, #3
 800811e:	d004      	beq.n	800812a <lcd_enter_params_value+0xea>
			break;
		case Config_sag_selected:
			screen4_data_config.User_SAG = key_input;
			break;
		default:
			break;
 8008120:	e00b      	b.n	800813a <lcd_enter_params_value+0xfa>
			screen4_data_config.User_PKV = key_input;
 8008122:	4a0c      	ldr	r2, [pc, #48]	; (8008154 <lcd_enter_params_value+0x114>)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6013      	str	r3, [r2, #0]
			break;
 8008128:	e008      	b.n	800813c <lcd_enter_params_value+0xfc>
			screen4_data_config.User_PKI = key_input;
 800812a:	4a0a      	ldr	r2, [pc, #40]	; (8008154 <lcd_enter_params_value+0x114>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6053      	str	r3, [r2, #4]
			break;
 8008130:	e004      	b.n	800813c <lcd_enter_params_value+0xfc>
			screen4_data_config.User_SAG = key_input;
 8008132:	4a08      	ldr	r2, [pc, #32]	; (8008154 <lcd_enter_params_value+0x114>)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6093      	str	r3, [r2, #8]
			break;
 8008138:	e000      	b.n	800813c <lcd_enter_params_value+0xfc>
			break;
 800813a:	bf00      	nop
	}
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	20013578 	.word	0x20013578
 800814c:	2001357a 	.word	0x2001357a
 8008150:	20013895 	.word	0x20013895
 8008154:	200138cc 	.word	0x200138cc

08008158 <lcd_is_busy>:

bool lcd_is_busy() {
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
	return screen3_mode || screen4_mode;
 800815c:	4b09      	ldr	r3, [pc, #36]	; (8008184 <lcd_is_busy+0x2c>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d103      	bne.n	800816c <lcd_is_busy+0x14>
 8008164:	4b08      	ldr	r3, [pc, #32]	; (8008188 <lcd_is_busy+0x30>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <lcd_is_busy+0x18>
 800816c:	2301      	movs	r3, #1
 800816e:	e000      	b.n	8008172 <lcd_is_busy+0x1a>
 8008170:	2300      	movs	r3, #0
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	b2db      	uxtb	r3, r3
}
 8008178:	4618      	mov	r0, r3
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	20013894 	.word	0x20013894
 8008188:	200138c8 	.word	0x200138c8

0800818c <main>:
void keypad_handler(void* parameters);
void rtc_handler(void* parameters);
void usart_handler(void* parameters);
void led_handler(void* parameters);

int main(void) {
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af02      	add	r7, sp, #8

	xTaskCreate(lcd_handler, "LCD5110", 2048, NULL, 1, NULL);
 8008192:	2300      	movs	r3, #0
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	2301      	movs	r3, #1
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	2300      	movs	r3, #0
 800819c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081a0:	492e      	ldr	r1, [pc, #184]	; (800825c <main+0xd0>)
 80081a2:	482f      	ldr	r0, [pc, #188]	; (8008260 <main+0xd4>)
 80081a4:	f7fa fbbc 	bl	8002920 <xTaskCreate>
	xTaskCreate(ade_handler, "ADE7753", 512, NULL, 1, NULL);
 80081a8:	2300      	movs	r3, #0
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	2301      	movs	r3, #1
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	2300      	movs	r3, #0
 80081b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b6:	492b      	ldr	r1, [pc, #172]	; (8008264 <main+0xd8>)
 80081b8:	482b      	ldr	r0, [pc, #172]	; (8008268 <main+0xdc>)
 80081ba:	f7fa fbb1 	bl	8002920 <xTaskCreate>
	xTaskCreate(keypad_handler, "Keypad", 256, NULL, 1, NULL);
 80081be:	2300      	movs	r3, #0
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	2301      	movs	r3, #1
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	2300      	movs	r3, #0
 80081c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081cc:	4927      	ldr	r1, [pc, #156]	; (800826c <main+0xe0>)
 80081ce:	4828      	ldr	r0, [pc, #160]	; (8008270 <main+0xe4>)
 80081d0:	f7fa fba6 	bl	8002920 <xTaskCreate>
	xTaskCreate(rtc_handler, "DS1307", 512, NULL, 1, NULL);
 80081d4:	2300      	movs	r3, #0
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	2301      	movs	r3, #1
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	2300      	movs	r3, #0
 80081de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081e2:	4924      	ldr	r1, [pc, #144]	; (8008274 <main+0xe8>)
 80081e4:	4824      	ldr	r0, [pc, #144]	; (8008278 <main+0xec>)
 80081e6:	f7fa fb9b 	bl	8002920 <xTaskCreate>
	xTaskCreate(usart_handler, "USART", 512, NULL, 1, NULL);
 80081ea:	2300      	movs	r3, #0
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	2301      	movs	r3, #1
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	2300      	movs	r3, #0
 80081f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081f8:	4920      	ldr	r1, [pc, #128]	; (800827c <main+0xf0>)
 80081fa:	4821      	ldr	r0, [pc, #132]	; (8008280 <main+0xf4>)
 80081fc:	f7fa fb90 	bl	8002920 <xTaskCreate>
	xTaskCreate(led_handler, "LED", 128, NULL, 1, NULL);
 8008200:	2300      	movs	r3, #0
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	2301      	movs	r3, #1
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	2300      	movs	r3, #0
 800820a:	2280      	movs	r2, #128	; 0x80
 800820c:	491d      	ldr	r1, [pc, #116]	; (8008284 <main+0xf8>)
 800820e:	481e      	ldr	r0, [pc, #120]	; (8008288 <main+0xfc>)
 8008210:	f7fa fb86 	bl	8002920 <xTaskCreate>

	ade_queue_handle = xQueueCreate(20, sizeof(ADE_INT_t));
 8008214:	2200      	movs	r2, #0
 8008216:	2101      	movs	r1, #1
 8008218:	2014      	movs	r0, #20
 800821a:	f7f9 feb1 	bl	8001f80 <xQueueGenericCreate>
 800821e:	4603      	mov	r3, r0
 8008220:	4a1a      	ldr	r2, [pc, #104]	; (800828c <main+0x100>)
 8008222:	6013      	str	r3, [r2, #0]
	keypad_queue_handle = xQueueCreate(5, sizeof(KEYPAD_Button_t));
 8008224:	2200      	movs	r2, #0
 8008226:	2101      	movs	r1, #1
 8008228:	2005      	movs	r0, #5
 800822a:	f7f9 fea9 	bl	8001f80 <xQueueGenericCreate>
 800822e:	4603      	mov	r3, r0
 8008230:	4a17      	ldr	r2, [pc, #92]	; (8008290 <main+0x104>)
 8008232:	6013      	str	r3, [r2, #0]
	rtc_queue_handle = xQueueCreate(1, sizeof(DS1307_DateTime_t));
 8008234:	2200      	movs	r2, #0
 8008236:	2107      	movs	r1, #7
 8008238:	2001      	movs	r0, #1
 800823a:	f7f9 fea1 	bl	8001f80 <xQueueGenericCreate>
 800823e:	4603      	mov	r3, r0
 8008240:	4a14      	ldr	r2, [pc, #80]	; (8008294 <main+0x108>)
 8008242:	6013      	str	r3, [r2, #0]
	led_queue_handle = xQueueCreate(10, sizeof(LED_Control_t));
 8008244:	2200      	movs	r2, #0
 8008246:	2101      	movs	r1, #1
 8008248:	200a      	movs	r0, #10
 800824a:	f7f9 fe99 	bl	8001f80 <xQueueGenericCreate>
 800824e:	4603      	mov	r3, r0
 8008250:	4a11      	ldr	r2, [pc, #68]	; (8008298 <main+0x10c>)
 8008252:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8008254:	f7fa fcf2 	bl	8002c3c <vTaskStartScheduler>

	while(1);
 8008258:	e7fe      	b.n	8008258 <main+0xcc>
 800825a:	bf00      	nop
 800825c:	0800bdd8 	.word	0x0800bdd8
 8008260:	0800829d 	.word	0x0800829d
 8008264:	0800bde0 	.word	0x0800bde0
 8008268:	08008669 	.word	0x08008669
 800826c:	0800bde8 	.word	0x0800bde8
 8008270:	080088c1 	.word	0x080088c1
 8008274:	0800bdf0 	.word	0x0800bdf0
 8008278:	08008999 	.word	0x08008999
 800827c:	0800bdf8 	.word	0x0800bdf8
 8008280:	08008a35 	.word	0x08008a35
 8008284:	0800be00 	.word	0x0800be00
 8008288:	08008a59 	.word	0x08008a59
 800828c:	200138e0 	.word	0x200138e0
 8008290:	200138dc 	.word	0x200138dc
 8008294:	200138e8 	.word	0x200138e8
 8008298:	200138e4 	.word	0x200138e4

0800829c <lcd_handler>:
	return 0;
}

void lcd_handler(void* parameters) {
 800829c:	b590      	push	{r4, r7, lr}
 800829e:	b08b      	sub	sp, #44	; 0x2c
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6178      	str	r0, [r7, #20]
	LCD5110_Init(0x37);
 80082a4:	2037      	movs	r0, #55	; 0x37
 80082a6:	f7f9 fa8b 	bl	80017c0 <LCD5110_Init>

	memset(&screen1_data, 0, sizeof(screen1_data));
 80082aa:	2210      	movs	r2, #16
 80082ac:	2100      	movs	r1, #0
 80082ae:	48d2      	ldr	r0, [pc, #840]	; (80085f8 <lcd_handler+0x35c>)
 80082b0:	f000 fde6 	bl	8008e80 <memset>
	memset(&screen2_data, 0, sizeof(screen2_data));
 80082b4:	2210      	movs	r2, #16
 80082b6:	2100      	movs	r1, #0
 80082b8:	48d0      	ldr	r0, [pc, #832]	; (80085fc <lcd_handler+0x360>)
 80082ba:	f000 fde1 	bl	8008e80 <memset>
	memset(&screen3_data, 0, sizeof(screen3_data));
 80082be:	2208      	movs	r2, #8
 80082c0:	2100      	movs	r1, #0
 80082c2:	48cf      	ldr	r0, [pc, #828]	; (8008600 <lcd_handler+0x364>)
 80082c4:	f000 fddc 	bl	8008e80 <memset>
	memset(&screen4_data, 0, sizeof(screen4_data));
 80082c8:	2210      	movs	r2, #16
 80082ca:	2100      	movs	r1, #0
 80082cc:	48cd      	ldr	r0, [pc, #820]	; (8008604 <lcd_handler+0x368>)
 80082ce:	f000 fdd7 	bl	8008e80 <memset>

	lcd_screen_1_clear();
 80082d2:	f7ff fc17 	bl	8007b04 <lcd_screen_1_clear>
	lcd_screen_2_clear();
 80082d6:	f7ff fc21 	bl	8007b1c <lcd_screen_2_clear>
	lcd_screen_3_clear();
 80082da:	f7ff fc2b 	bl	8007b34 <lcd_screen_3_clear>
	lcd_screen_4_clear();
 80082de:	f7ff fc41 	bl	8007b64 <lcd_screen_4_clear>

	KEYPAD_Button_t keypad;
	LCD_Screen_t screen = LCD_Screen_1;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	while(1) {
		if(keypad_queue_handle != NULL) {
 80082e8:	4bc7      	ldr	r3, [pc, #796]	; (8008608 <lcd_handler+0x36c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8198 	beq.w	8008622 <lcd_handler+0x386>
			if(xQueueReceive(keypad_queue_handle, &keypad, (TickType_t) 5)) {
 80082f2:	4bc5      	ldr	r3, [pc, #788]	; (8008608 <lcd_handler+0x36c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f107 0126 	add.w	r1, r7, #38	; 0x26
 80082fa:	2205      	movs	r2, #5
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fa f893 	bl	8002428 <xQueueReceive>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 818c 	beq.w	8008622 <lcd_handler+0x386>
				switch (keypad) {
 800830a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800830e:	2b0f      	cmp	r3, #15
 8008310:	dc50      	bgt.n	80083b4 <lcd_handler+0x118>
 8008312:	2b00      	cmp	r3, #0
 8008314:	da28      	bge.n	8008368 <lcd_handler+0xcc>

					case KEYPAD_Button_HOLD_HASH:
					case KEYPAD_Button_HOLD_STAR:
						break;
					default:
						break;
 8008316:	e186      	b.n	8008626 <lcd_handler+0x38a>
 8008318:	3b80      	subs	r3, #128	; 0x80
 800831a:	2b0f      	cmp	r3, #15
 800831c:	f200 8183 	bhi.w	8008626 <lcd_handler+0x38a>
 8008320:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <lcd_handler+0x8c>)
 8008322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008326:	bf00      	nop
 8008328:	08008627 	.word	0x08008627
 800832c:	08008627 	.word	0x08008627
 8008330:	08008627 	.word	0x08008627
 8008334:	08008627 	.word	0x08008627
 8008338:	08008627 	.word	0x08008627
 800833c:	08008627 	.word	0x08008627
 8008340:	08008627 	.word	0x08008627
 8008344:	08008627 	.word	0x08008627
 8008348:	08008627 	.word	0x08008627
 800834c:	08008627 	.word	0x08008627
 8008350:	08008627 	.word	0x08008627
 8008354:	08008627 	.word	0x08008627
 8008358:	08008627 	.word	0x08008627
 800835c:	08008627 	.word	0x08008627
 8008360:	080085b9 	.word	0x080085b9
 8008364:	080085d9 	.word	0x080085d9
 8008368:	2b0f      	cmp	r3, #15
 800836a:	f200 815c 	bhi.w	8008626 <lcd_handler+0x38a>
 800836e:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <lcd_handler+0xd8>)
 8008370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008374:	080083c1 	.word	0x080083c1
 8008378:	080083c1 	.word	0x080083c1
 800837c:	080083c1 	.word	0x080083c1
 8008380:	080083c1 	.word	0x080083c1
 8008384:	080083c1 	.word	0x080083c1
 8008388:	080083c1 	.word	0x080083c1
 800838c:	080083c1 	.word	0x080083c1
 8008390:	080083c1 	.word	0x080083c1
 8008394:	080083c1 	.word	0x080083c1
 8008398:	080083c1 	.word	0x080083c1
 800839c:	08008557 	.word	0x08008557
 80083a0:	0800849d 	.word	0x0800849d
 80083a4:	080083ed 	.word	0x080083ed
 80083a8:	08008407 	.word	0x08008407
 80083ac:	08008421 	.word	0x08008421
 80083b0:	0800843b 	.word	0x0800843b
				switch (keypad) {
 80083b4:	2b8f      	cmp	r3, #143	; 0x8f
 80083b6:	f300 8136 	bgt.w	8008626 <lcd_handler+0x38a>
 80083ba:	2b80      	cmp	r3, #128	; 0x80
 80083bc:	daac      	bge.n	8008318 <lcd_handler+0x7c>
						break;
 80083be:	e132      	b.n	8008626 <lcd_handler+0x38a>
						if(lcd_screen_4_mode() == S4_CONFIG_PARAMS_DISPLAY)
 80083c0:	f7ff fc9c 	bl	8007cfc <lcd_screen_4_mode>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d104      	bne.n	80083d4 <lcd_handler+0x138>
							lcd_enter_params_value(keypad);
 80083ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fe36 	bl	8008040 <lcd_enter_params_value>
						if(lcd_screen_4_mode() == S4_CONFIG_DATETIME_DISPLAY)
 80083d4:	f7ff fc92 	bl	8007cfc <lcd_screen_4_mode>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b03      	cmp	r3, #3
 80083dc:	f040 8125 	bne.w	800862a <lcd_handler+0x38e>
							lcd_enter_datetime_value(keypad);
 80083e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff fd97 	bl	8007f18 <lcd_enter_datetime_value>
						break;
 80083ea:	e11e      	b.n	800862a <lcd_handler+0x38e>
						if(!lcd_is_busy()) screen = LCD_Screen_1;
 80083ec:	f7ff feb4 	bl	8008158 <lcd_is_busy>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f083 0301 	eor.w	r3, r3, #1
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 8118 	beq.w	800862e <lcd_handler+0x392>
 80083fe:	2300      	movs	r3, #0
 8008400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 8008404:	e113      	b.n	800862e <lcd_handler+0x392>
						if(!lcd_is_busy()) screen = LCD_Screen_2;
 8008406:	f7ff fea7 	bl	8008158 <lcd_is_busy>
 800840a:	4603      	mov	r3, r0
 800840c:	f083 0301 	eor.w	r3, r3, #1
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 810d 	beq.w	8008632 <lcd_handler+0x396>
 8008418:	2301      	movs	r3, #1
 800841a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 800841e:	e108      	b.n	8008632 <lcd_handler+0x396>
						if(!lcd_is_busy()) screen = LCD_Screen_3;
 8008420:	f7ff fe9a 	bl	8008158 <lcd_is_busy>
 8008424:	4603      	mov	r3, r0
 8008426:	f083 0301 	eor.w	r3, r3, #1
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8102 	beq.w	8008636 <lcd_handler+0x39a>
 8008432:	2302      	movs	r3, #2
 8008434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 8008438:	e0fd      	b.n	8008636 <lcd_handler+0x39a>
						if(!lcd_is_busy()) screen = LCD_Screen_4;
 800843a:	f7ff fe8d 	bl	8008158 <lcd_is_busy>
 800843e:	4603      	mov	r3, r0
 8008440:	f083 0301 	eor.w	r3, r3, #1
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <lcd_handler+0x1b6>
 800844a:	2303      	movs	r3, #3
 800844c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 8008450:	e0f6      	b.n	8008640 <lcd_handler+0x3a4>
							switch (lcd_screen_4_mode()) {
 8008452:	f7ff fc53 	bl	8007cfc <lcd_screen_4_mode>
 8008456:	4603      	mov	r3, r0
 8008458:	2b03      	cmp	r3, #3
 800845a:	d01a      	beq.n	8008492 <lcd_handler+0x1f6>
 800845c:	2b03      	cmp	r3, #3
 800845e:	dc1b      	bgt.n	8008498 <lcd_handler+0x1fc>
 8008460:	2b01      	cmp	r3, #1
 8008462:	d002      	beq.n	800846a <lcd_handler+0x1ce>
 8008464:	2b02      	cmp	r3, #2
 8008466:	d003      	beq.n	8008470 <lcd_handler+0x1d4>
									break;
 8008468:	e016      	b.n	8008498 <lcd_handler+0x1fc>
									lcd_screen_4_next_config_option();
 800846a:	f7ff fc6b 	bl	8007d44 <lcd_screen_4_next_config_option>
									break;
 800846e:	e014      	b.n	800849a <lcd_handler+0x1fe>
									if(lcd_screen_4_config_item() % 2)
 8008470:	f7ff fc5c 	bl	8007d2c <lcd_screen_4_config_item>
 8008474:	4603      	mov	r3, r0
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <lcd_handler+0x1f0>
										lcd_enter_params_value(keypad);
 8008480:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff fddb 	bl	8008040 <lcd_enter_params_value>
									break;
 800848a:	e006      	b.n	800849a <lcd_handler+0x1fe>
									else lcd_screen_4_next_config_item();
 800848c:	f7ff fc6a 	bl	8007d64 <lcd_screen_4_next_config_item>
									break;
 8008490:	e003      	b.n	800849a <lcd_handler+0x1fe>
									lcd_screen_4_next_config_item();
 8008492:	f7ff fc67 	bl	8007d64 <lcd_screen_4_next_config_item>
									break;
 8008496:	e000      	b.n	800849a <lcd_handler+0x1fe>
									break;
 8008498:	bf00      	nop
						break;
 800849a:	e0d1      	b.n	8008640 <lcd_handler+0x3a4>
						if(lcd_is_busy()) {
 800849c:	f7ff fe5c 	bl	8008158 <lcd_is_busy>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d053      	beq.n	800854e <lcd_handler+0x2b2>
							if(screen == LCD_Screen_3) {
 80084a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d103      	bne.n	80084b6 <lcd_handler+0x21a>
								lcd_screen_3_clear();
 80084ae:	f7ff fb41 	bl	8007b34 <lcd_screen_3_clear>
								reset_energy();
 80084b2:	f7fe fce3 	bl	8006e7c <reset_energy>
							if(screen == LCD_Screen_4) {
 80084b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d147      	bne.n	800854e <lcd_handler+0x2b2>
								switch (lcd_screen_4_mode()) {
 80084be:	f7ff fc1d 	bl	8007cfc <lcd_screen_4_mode>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d022      	beq.n	800850e <lcd_handler+0x272>
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	dc42      	bgt.n	8008552 <lcd_handler+0x2b6>
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d005      	beq.n	80084dc <lcd_handler+0x240>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	dd3e      	ble.n	8008552 <lcd_handler+0x2b6>
 80084d4:	3b02      	subs	r3, #2
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d83b      	bhi.n	8008552 <lcd_handler+0x2b6>
 80084da:	e00c      	b.n	80084f6 <lcd_handler+0x25a>
										if(lcd_screen_4_config_option() == Config_Params)
 80084dc:	f7ff fc1a 	bl	8007d14 <lcd_screen_4_config_option>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d103      	bne.n	80084ee <lcd_handler+0x252>
											lcd_screen_4_switch_mode(S4_CONFIG_PARAMS_DISPLAY);
 80084e6:	2002      	movs	r0, #2
 80084e8:	f7ff fbc0 	bl	8007c6c <lcd_screen_4_switch_mode>
										break;
 80084ec:	e032      	b.n	8008554 <lcd_handler+0x2b8>
										else lcd_screen_4_switch_mode(S4_CONFIG_DATETIME_DISPLAY);
 80084ee:	2003      	movs	r0, #3
 80084f0:	f7ff fbbc 	bl	8007c6c <lcd_screen_4_switch_mode>
										break;
 80084f4:	e02e      	b.n	8008554 <lcd_handler+0x2b8>
										if(lcd_screen_4_config_item() == Config_interval_selected)
 80084f6:	f7ff fc19 	bl	8007d2c <lcd_screen_4_config_item>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b07      	cmp	r3, #7
 80084fe:	d102      	bne.n	8008506 <lcd_handler+0x26a>
											lcd_screen_4_next_interval_set();
 8008500:	f7ff fcb2 	bl	8007e68 <lcd_screen_4_next_interval_set>
										break;
 8008504:	e026      	b.n	8008554 <lcd_handler+0x2b8>
										else lcd_screen_4_config_select(CONFIG_SELECT);
 8008506:	2001      	movs	r0, #1
 8008508:	f7ff fc5a 	bl	8007dc0 <lcd_screen_4_config_select>
										break;
 800850c:	e022      	b.n	8008554 <lcd_handler+0x2b8>
										if(lcd_screen_4_config_option() == Config_Params) {
 800850e:	f7ff fc01 	bl	8007d14 <lcd_screen_4_config_option>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d109      	bne.n	800852c <lcd_handler+0x290>
											screen4_data = lcd_screen_4_commit_parameters();
 8008518:	4c3a      	ldr	r4, [pc, #232]	; (8008604 <lcd_handler+0x368>)
 800851a:	463b      	mov	r3, r7
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff fce1 	bl	8007ee4 <lcd_screen_4_commit_parameters>
 8008522:	463b      	mov	r3, r7
 8008524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800852a:	e00c      	b.n	8008546 <lcd_handler+0x2aa>
											DS1307_DateTime_t config_rtc = lcd_screen_4_commit_rtc();
 800852c:	f107 031c 	add.w	r3, r7, #28
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff fcc3 	bl	8007ebc <lcd_screen_4_commit_rtc>
											xQueueSend(rtc_queue_handle, (void*) &config_rtc, (TickType_t) 0);
 8008536:	4b35      	ldr	r3, [pc, #212]	; (800860c <lcd_handler+0x370>)
 8008538:	6818      	ldr	r0, [r3, #0]
 800853a:	f107 011c 	add.w	r1, r7, #28
 800853e:	2300      	movs	r3, #0
 8008540:	2200      	movs	r2, #0
 8008542:	f7f9 fda5 	bl	8002090 <xQueueGenericSend>
										lcd_screen_4_switch_mode(S4_CONFIG_DISPLAY);
 8008546:	2001      	movs	r0, #1
 8008548:	f7ff fb90 	bl	8007c6c <lcd_screen_4_switch_mode>
										break;
 800854c:	e002      	b.n	8008554 <lcd_handler+0x2b8>
							}
 800854e:	bf00      	nop
 8008550:	e076      	b.n	8008640 <lcd_handler+0x3a4>
										break;
 8008552:	bf00      	nop
						break;
 8008554:	e074      	b.n	8008640 <lcd_handler+0x3a4>
						if(lcd_is_busy()) {
 8008556:	f7ff fdff 	bl	8008158 <lcd_is_busy>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d029      	beq.n	80085b4 <lcd_handler+0x318>
							if(screen == LCD_Screen_3)
 8008560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008564:	2b02      	cmp	r3, #2
 8008566:	d102      	bne.n	800856e <lcd_handler+0x2d2>
								lcd_screen_3_switch_mode(S3_NORMAL_DISPLAY);
 8008568:	2000      	movs	r0, #0
 800856a:	f7ff fb57 	bl	8007c1c <lcd_screen_3_switch_mode>
							if(screen == LCD_Screen_4) {
 800856e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008572:	2b03      	cmp	r3, #3
 8008574:	d11e      	bne.n	80085b4 <lcd_handler+0x318>
								switch (lcd_screen_4_mode()) {
 8008576:	f7ff fbc1 	bl	8007cfc <lcd_screen_4_mode>
 800857a:	4603      	mov	r3, r0
 800857c:	2b03      	cmp	r3, #3
 800857e:	dc02      	bgt.n	8008586 <lcd_handler+0x2ea>
 8008580:	2b02      	cmp	r3, #2
 8008582:	da03      	bge.n	800858c <lcd_handler+0x2f0>
										break;
 8008584:	e017      	b.n	80085b6 <lcd_handler+0x31a>
 8008586:	2b04      	cmp	r3, #4
 8008588:	d010      	beq.n	80085ac <lcd_handler+0x310>
 800858a:	e014      	b.n	80085b6 <lcd_handler+0x31a>
										if(lcd_screen_4_config_item() % 2)
 800858c:	f7ff fbce 	bl	8007d2c <lcd_screen_4_config_item>
 8008590:	4603      	mov	r3, r0
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <lcd_handler+0x308>
											lcd_screen_4_config_select(CONFIG_DESELECT);
 800859c:	2000      	movs	r0, #0
 800859e:	f7ff fc0f 	bl	8007dc0 <lcd_screen_4_config_select>
										break;
 80085a2:	e008      	b.n	80085b6 <lcd_handler+0x31a>
										else lcd_screen_4_switch_mode(S4_COMMIT_DISPLAY);
 80085a4:	2004      	movs	r0, #4
 80085a6:	f7ff fb61 	bl	8007c6c <lcd_screen_4_switch_mode>
										break;
 80085aa:	e004      	b.n	80085b6 <lcd_handler+0x31a>
										lcd_screen_4_switch_mode(S4_CONFIG_DISPLAY);
 80085ac:	2001      	movs	r0, #1
 80085ae:	f7ff fb5d 	bl	8007c6c <lcd_screen_4_switch_mode>
										break;
 80085b2:	e000      	b.n	80085b6 <lcd_handler+0x31a>
							}
 80085b4:	bf00      	nop
						break;
 80085b6:	e043      	b.n	8008640 <lcd_handler+0x3a4>
						if(!lcd_is_busy() && screen == LCD_Screen_3)
 80085b8:	f7ff fdce 	bl	8008158 <lcd_is_busy>
 80085bc:	4603      	mov	r3, r0
 80085be:	f083 0301 	eor.w	r3, r3, #1
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d038      	beq.n	800863a <lcd_handler+0x39e>
 80085c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d134      	bne.n	800863a <lcd_handler+0x39e>
							lcd_screen_3_switch_mode(S3_RESET_CONFIRM_DISPLAY);
 80085d0:	2001      	movs	r0, #1
 80085d2:	f7ff fb23 	bl	8007c1c <lcd_screen_3_switch_mode>
						break;
 80085d6:	e030      	b.n	800863a <lcd_handler+0x39e>
						if(!lcd_is_busy()) {
 80085d8:	f7ff fdbe 	bl	8008158 <lcd_is_busy>
 80085dc:	4603      	mov	r3, r0
 80085de:	f083 0301 	eor.w	r3, r3, #1
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d013      	beq.n	8008610 <lcd_handler+0x374>
							if(screen == LCD_Screen_4)
 80085e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d126      	bne.n	800863e <lcd_handler+0x3a2>
								lcd_screen_4_switch_mode(S4_CONFIG_DISPLAY);
 80085f0:	2001      	movs	r0, #1
 80085f2:	f7ff fb3b 	bl	8007c6c <lcd_screen_4_switch_mode>
						break;
 80085f6:	e022      	b.n	800863e <lcd_handler+0x3a2>
 80085f8:	20013898 	.word	0x20013898
 80085fc:	20013884 	.word	0x20013884
 8008600:	200138c0 	.word	0x200138c0
 8008604:	200138b0 	.word	0x200138b0
 8008608:	200138dc 	.word	0x200138dc
 800860c:	200138e8 	.word	0x200138e8
						} else if(lcd_screen_4_mode() == S4_CONFIG_DISPLAY)
 8008610:	f7ff fb74 	bl	8007cfc <lcd_screen_4_mode>
 8008614:	4603      	mov	r3, r0
 8008616:	2b01      	cmp	r3, #1
 8008618:	d111      	bne.n	800863e <lcd_handler+0x3a2>
							lcd_screen_4_switch_mode(S4_NORMAL_DISPLAY);
 800861a:	2000      	movs	r0, #0
 800861c:	f7ff fb26 	bl	8007c6c <lcd_screen_4_switch_mode>
						break;
 8008620:	e00d      	b.n	800863e <lcd_handler+0x3a2>
				}
			}
 8008622:	bf00      	nop
 8008624:	e00c      	b.n	8008640 <lcd_handler+0x3a4>
						break;
 8008626:	bf00      	nop
 8008628:	e00a      	b.n	8008640 <lcd_handler+0x3a4>
						break;
 800862a:	bf00      	nop
 800862c:	e008      	b.n	8008640 <lcd_handler+0x3a4>
						break;
 800862e:	bf00      	nop
 8008630:	e006      	b.n	8008640 <lcd_handler+0x3a4>
						break;
 8008632:	bf00      	nop
 8008634:	e004      	b.n	8008640 <lcd_handler+0x3a4>
						break;
 8008636:	bf00      	nop
 8008638:	e002      	b.n	8008640 <lcd_handler+0x3a4>
						break;
 800863a:	bf00      	nop
 800863c:	e000      	b.n	8008640 <lcd_handler+0x3a4>
						break;
 800863e:	bf00      	nop
		}

		lcd_screen_refresh(screen);
 8008640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff f9f9 	bl	8007a3c <lcd_screen_refresh>
		vTaskDelay(200);
 800864a:	20c8      	movs	r0, #200	; 0xc8
 800864c:	f7fa fabe 	bl	8002bcc <vTaskDelay>
		taskYIELD();
 8008650:	4b04      	ldr	r3, [pc, #16]	; (8008664 <lcd_handler+0x3c8>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
		if(keypad_queue_handle != NULL) {
 8008660:	e642      	b.n	80082e8 <lcd_handler+0x4c>
 8008662:	bf00      	nop
 8008664:	e000ed04 	.word	0xe000ed04

08008668 <ade_handler>:
	}
}

void ade_handler(void* parameters) {
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	LED_Control_t led_ctrl;
	ADE_INT_t ade_int;
	uint32_t rststatus;

	ADE_Init();
 8008670:	f7f8 fb4a 	bl	8000d08 <ADE_Init>

//	CH1 full-scale 0.125V
//	PGA1 x16
//	PGA2 x2
	ADE_WriteData(GAIN, 0x34, 1);
 8008674:	2201      	movs	r2, #1
 8008676:	2134      	movs	r1, #52	; 0x34
 8008678:	200f      	movs	r0, #15
 800867a:	f7f8 fba3 	bl	8000dc4 <ADE_WriteData>

//	set POAM, CYCMODE
//	clear DISSAG
	ADE_WriteData(MODE,
 800867e:	2202      	movs	r2, #2
 8008680:	f248 0184 	movw	r1, #32900	; 0x8084
 8008684:	2009      	movs	r0, #9
 8008686:	f7f8 fb9d 	bl	8000dc4 <ADE_WriteData>
			| (1 << MODE_CYCMODE)
			| (1 << MODE_POAM),
			2);

//	LINECYC = 200
	ADE_WriteData(LINECYC, 0x00c8, 2);
 800868a:	2202      	movs	r2, #2
 800868c:	21c8      	movs	r1, #200	; 0xc8
 800868e:	201c      	movs	r0, #28
 8008690:	f7f8 fb98 	bl	8000dc4 <ADE_WriteData>

//	Sag Cycle: 3
	ADE_WriteData(SAGCYC, 0x04, 1);
 8008694:	2201      	movs	r2, #1
 8008696:	2104      	movs	r1, #4
 8008698:	201e      	movs	r0, #30
 800869a:	f7f8 fb93 	bl	8000dc4 <ADE_WriteData>

//	Sag level
	ADE_WriteData(SAGLVL, 0x00, 1);
 800869e:	2201      	movs	r2, #1
 80086a0:	2100      	movs	r1, #0
 80086a2:	201f      	movs	r0, #31
 80086a4:	f7f8 fb8e 	bl	8000dc4 <ADE_WriteData>

//	Vpeak level
	ADE_WriteData(VPKLVL, 0xFF, 1);
 80086a8:	2201      	movs	r2, #1
 80086aa:	21ff      	movs	r1, #255	; 0xff
 80086ac:	2021      	movs	r0, #33	; 0x21
 80086ae:	f7f8 fb89 	bl	8000dc4 <ADE_WriteData>

//	Ipeak level
	ADE_WriteData(IPKLVL, 0xFF, 1);
 80086b2:	2201      	movs	r2, #1
 80086b4:	21ff      	movs	r1, #255	; 0xff
 80086b6:	2020      	movs	r0, #32
 80086b8:	f7f8 fb84 	bl	8000dc4 <ADE_WriteData>

//	set SAG, CYCEND, PKV, PKI
	ADE_WriteData(IRQEN,
 80086bc:	2202      	movs	r2, #2
 80086be:	f240 3146 	movw	r1, #838	; 0x346
 80086c2:	200a      	movs	r0, #10
 80086c4:	f7f8 fb7e 	bl	8000dc4 <ADE_WriteData>
			| (1 << IRQ_PKV)
			| (1 << IRQ_PKI),
			2);

//	clear STATUS Register
	ADE_ReadData(RSTSTATUS, 2);
 80086c8:	2102      	movs	r1, #2
 80086ca:	200c      	movs	r0, #12
 80086cc:	f7f8 fb46 	bl	8000d5c <ADE_ReadData>

	while(1) {
		if(ade_queue_handle != NULL)
 80086d0:	4b75      	ldr	r3, [pc, #468]	; (80088a8 <ade_handler+0x240>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 80d3 	beq.w	8008880 <ade_handler+0x218>
			if(xQueueReceive(ade_queue_handle, &ade_int, portMAX_DELAY)) {
 80086da:	4b73      	ldr	r3, [pc, #460]	; (80088a8 <ade_handler+0x240>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f107 010a 	add.w	r1, r7, #10
 80086e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7f9 fe9e 	bl	8002428 <xQueueReceive>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 80c6 	beq.w	8008880 <ade_handler+0x218>
				switch (ade_int) {
 80086f4:	7abb      	ldrb	r3, [r7, #10]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	f000 80c4 	beq.w	8008884 <ade_handler+0x21c>
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	f300 80c3 	bgt.w	8008888 <ade_handler+0x220>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d061      	beq.n	80087ca <ade_handler+0x162>
 8008706:	2b01      	cmp	r3, #1
 8008708:	f040 80be 	bne.w	8008888 <ade_handler+0x220>
					case ADE_INT_IRQ:
						vTaskDelay(1);
 800870c:	2001      	movs	r0, #1
 800870e:	f7fa fa5d 	bl	8002bcc <vTaskDelay>
						rststatus = ADE_ReadData(RSTSTATUS, 2);
 8008712:	2102      	movs	r1, #2
 8008714:	200c      	movs	r0, #12
 8008716:	f7f8 fb21 	bl	8000d5c <ADE_ReadData>
 800871a:	60f8      	str	r0, [r7, #12]

						if(rststatus & (1 << IRQ_SAG)) {
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <ade_handler+0xd2>
							led_ctrl = B_ON;
 8008726:	2304      	movs	r3, #4
 8008728:	72fb      	strb	r3, [r7, #11]
							xQueueSend(led_queue_handle, (void *) &led_ctrl, (TickType_t) 0);
 800872a:	4b60      	ldr	r3, [pc, #384]	; (80088ac <ade_handler+0x244>)
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	f107 010b 	add.w	r1, r7, #11
 8008732:	2300      	movs	r3, #0
 8008734:	2200      	movs	r2, #0
 8008736:	f7f9 fcab 	bl	8002090 <xQueueGenericSend>
						}

						if(rststatus & (1 << IRQ_CYCEND)) {
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d023      	beq.n	800878c <ade_handler+0x124>
							screen2_data.ActivePower = ade_scale_power(ADE_ReadData(LAENERGY, 3));
 8008744:	2103      	movs	r1, #3
 8008746:	2004      	movs	r0, #4
 8008748:	f7f8 fb08 	bl	8000d5c <ADE_ReadData>
 800874c:	4603      	mov	r3, r0
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe faba 	bl	8006cc8 <ade_scale_power>
 8008754:	4603      	mov	r3, r0
 8008756:	4a56      	ldr	r2, [pc, #344]	; (80088b0 <ade_handler+0x248>)
 8008758:	6013      	str	r3, [r2, #0]
							screen2_data.ReactivePower = ade_scale_reactive_power(ADE_ReadData(LVARENERGY, 3));
 800875a:	2103      	movs	r1, #3
 800875c:	2008      	movs	r0, #8
 800875e:	f7f8 fafd 	bl	8000d5c <ADE_ReadData>
 8008762:	4603      	mov	r3, r0
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe fadb 	bl	8006d20 <ade_scale_reactive_power>
 800876a:	4603      	mov	r3, r0
 800876c:	4a50      	ldr	r2, [pc, #320]	; (80088b0 <ade_handler+0x248>)
 800876e:	6053      	str	r3, [r2, #4]
							screen2_data.ApparantPower = ade_get_apparant_power();
 8008770:	f7fe fb00 	bl	8006d74 <ade_get_apparant_power>
 8008774:	4603      	mov	r3, r0
 8008776:	4a4e      	ldr	r2, [pc, #312]	; (80088b0 <ade_handler+0x248>)
 8008778:	6093      	str	r3, [r2, #8]
							screen2_data.PowerFactor = ade_get_power_factor();
 800877a:	f7fe fb21 	bl	8006dc0 <ade_get_power_factor>
 800877e:	4603      	mov	r3, r0
 8008780:	4a4b      	ldr	r2, [pc, #300]	; (80088b0 <ade_handler+0x248>)
 8008782:	60d3      	str	r3, [r2, #12]
							lcd_screen_2_data_update(screen2_data);
 8008784:	4b4a      	ldr	r3, [pc, #296]	; (80088b0 <ade_handler+0x248>)
 8008786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008788:	f7ff f992 	bl	8007ab0 <lcd_screen_2_data_update>
						}

						if(rststatus & (1 << IRQ_PKV)) {
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008792:	2b00      	cmp	r3, #0
 8008794:	d009      	beq.n	80087aa <ade_handler+0x142>
							led_ctrl = R_ON;
 8008796:	2300      	movs	r3, #0
 8008798:	72fb      	strb	r3, [r7, #11]
							xQueueSend(led_queue_handle, (void *) &led_ctrl, (TickType_t) 0);
 800879a:	4b44      	ldr	r3, [pc, #272]	; (80088ac <ade_handler+0x244>)
 800879c:	6818      	ldr	r0, [r3, #0]
 800879e:	f107 010b 	add.w	r1, r7, #11
 80087a2:	2300      	movs	r3, #0
 80087a4:	2200      	movs	r2, #0
 80087a6:	f7f9 fc73 	bl	8002090 <xQueueGenericSend>
						}

						if(rststatus & (1 << IRQ_PKI)) {
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d06b      	beq.n	800888c <ade_handler+0x224>
							led_ctrl = R_ON;
 80087b4:	2300      	movs	r3, #0
 80087b6:	72fb      	strb	r3, [r7, #11]
							xQueueSend(led_queue_handle, (void *) &led_ctrl, (TickType_t) 0);
 80087b8:	4b3c      	ldr	r3, [pc, #240]	; (80088ac <ade_handler+0x244>)
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	f107 010b 	add.w	r1, r7, #11
 80087c0:	2300      	movs	r3, #0
 80087c2:	2200      	movs	r2, #0
 80087c4:	f7f9 fc64 	bl	8002090 <xQueueGenericSend>
						}

//						ADE_ReadData(RSTSTATUS, 2);
						break;
 80087c8:	e060      	b.n	800888c <ade_handler+0x224>

					case ADE_INT_ZX:
						screen1_data.Vrms = ade_scale_vrms(ADE_ReadData(VRMS, 3));
 80087ca:	2103      	movs	r1, #3
 80087cc:	2017      	movs	r0, #23
 80087ce:	f7f8 fac5 	bl	8000d5c <ADE_ReadData>
 80087d2:	4603      	mov	r3, r0
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe fa2f 	bl	8006c38 <ade_scale_vrms>
 80087da:	4603      	mov	r3, r0
 80087dc:	4a35      	ldr	r2, [pc, #212]	; (80088b4 <ade_handler+0x24c>)
 80087de:	6013      	str	r3, [r2, #0]
						screen1_data.Irms = ade_scale_irms(ADE_ReadData(IRMS, 3));
 80087e0:	2103      	movs	r1, #3
 80087e2:	2016      	movs	r0, #22
 80087e4:	f7f8 faba 	bl	8000d5c <ADE_ReadData>
 80087e8:	4603      	mov	r3, r0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe fa48 	bl	8006c80 <ade_scale_irms>
 80087f0:	4603      	mov	r3, r0
 80087f2:	4a30      	ldr	r2, [pc, #192]	; (80088b4 <ade_handler+0x24c>)
 80087f4:	6093      	str	r3, [r2, #8]
						screen1_data.Vpeak = screen1_data.Vrms * SQRT_2;
 80087f6:	4b2f      	ldr	r3, [pc, #188]	; (80088b4 <ade_handler+0x24c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f7 ff04 	bl	8000608 <__aeabi_f2d>
 8008800:	a327      	add	r3, pc, #156	; (adr r3, 80088a0 <ade_handler+0x238>)
 8008802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008806:	f7f7 ff57 	bl	80006b8 <__aeabi_dmul>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	4610      	mov	r0, r2
 8008810:	4619      	mov	r1, r3
 8008812:	f7f8 fa29 	bl	8000c68 <__aeabi_d2f>
 8008816:	4603      	mov	r3, r0
 8008818:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <ade_handler+0x24c>)
 800881a:	6053      	str	r3, [r2, #4]
						screen1_data.Ipeak = screen1_data.Irms * SQRT_2;
 800881c:	4b25      	ldr	r3, [pc, #148]	; (80088b4 <ade_handler+0x24c>)
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	4618      	mov	r0, r3
 8008822:	f7f7 fef1 	bl	8000608 <__aeabi_f2d>
 8008826:	a31e      	add	r3, pc, #120	; (adr r3, 80088a0 <ade_handler+0x238>)
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	f7f7 ff44 	bl	80006b8 <__aeabi_dmul>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4610      	mov	r0, r2
 8008836:	4619      	mov	r1, r3
 8008838:	f7f8 fa16 	bl	8000c68 <__aeabi_d2f>
 800883c:	4603      	mov	r3, r0
 800883e:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <ade_handler+0x24c>)
 8008840:	60d3      	str	r3, [r2, #12]
						lcd_screen_1_data_update(screen1_data);
 8008842:	4b1c      	ldr	r3, [pc, #112]	; (80088b4 <ade_handler+0x24c>)
 8008844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008846:	f7ff f91f 	bl	8007a88 <lcd_screen_1_data_update>

						screen3_data.ActiveEnergy = ade_accumulate_scale_energy(ADE_ReadData(RAENERGY, 3));
 800884a:	2103      	movs	r1, #3
 800884c:	2003      	movs	r0, #3
 800884e:	f7f8 fa85 	bl	8000d5c <ADE_ReadData>
 8008852:	4603      	mov	r3, r0
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fad7 	bl	8006e08 <ade_accumulate_scale_energy>
 800885a:	4603      	mov	r3, r0
 800885c:	4a16      	ldr	r2, [pc, #88]	; (80088b8 <ade_handler+0x250>)
 800885e:	6013      	str	r3, [r2, #0]
						lcd_screen_3_data_update(screen3_data);
 8008860:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <ade_handler+0x250>)
 8008862:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008866:	f7ff f937 	bl	8007ad8 <lcd_screen_3_data_update>

						led_ctrl = G_ON;
 800886a:	2302      	movs	r3, #2
 800886c:	72fb      	strb	r3, [r7, #11]
						xQueueSend(led_queue_handle, (void *) &led_ctrl, (TickType_t) 0);
 800886e:	4b0f      	ldr	r3, [pc, #60]	; (80088ac <ade_handler+0x244>)
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	f107 010b 	add.w	r1, r7, #11
 8008876:	2300      	movs	r3, #0
 8008878:	2200      	movs	r2, #0
 800887a:	f7f9 fc09 	bl	8002090 <xQueueGenericSend>
						break;
 800887e:	e006      	b.n	800888e <ade_handler+0x226>
						break;

					default:
						break;
				}
			}
 8008880:	bf00      	nop
 8008882:	e004      	b.n	800888e <ade_handler+0x226>
						break;
 8008884:	bf00      	nop
 8008886:	e002      	b.n	800888e <ade_handler+0x226>
						break;
 8008888:	bf00      	nop
 800888a:	e000      	b.n	800888e <ade_handler+0x226>
						break;
 800888c:	bf00      	nop

		taskYIELD();
 800888e:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <ade_handler+0x254>)
 8008890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	f3bf 8f6f 	isb	sy
		if(ade_queue_handle != NULL)
 800889e:	e717      	b.n	80086d0 <ade_handler+0x68>
 80088a0:	6665983e 	.word	0x6665983e
 80088a4:	3ff6a09e 	.word	0x3ff6a09e
 80088a8:	200138e0 	.word	0x200138e0
 80088ac:	200138e4 	.word	0x200138e4
 80088b0:	20013884 	.word	0x20013884
 80088b4:	20013898 	.word	0x20013898
 80088b8:	200138c0 	.word	0x200138c0
 80088bc:	e000ed04 	.word	0xe000ed04

080088c0 <keypad_handler>:
	}
}

void keypad_handler(void* parameters) {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
	KEYPAD_Init(KEYPAD_Type_Large);
 80088c8:	2000      	movs	r0, #0
 80088ca:	f7f8 fd99 	bl	8001400 <KEYPAD_Init>

	KEYPAD_Button_t Keypad_Hold_Button, Keypad_Button, Keypad_prev = KEYPAD_NOPRESSED;
 80088ce:	23ff      	movs	r3, #255	; 0xff
 80088d0:	737b      	strb	r3, [r7, #13]
	TickType_t update_delay = 10;
 80088d2:	230a      	movs	r3, #10
 80088d4:	613b      	str	r3, [r7, #16]
	int hold_timeout = KEYPAD_HOLD_TIMEOUT / (uint8_t) update_delay;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80088e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80088e4:	617b      	str	r3, [r7, #20]

	while(1) {
		KEYPAD_Update();
 80088e6:	f7f8 fef1 	bl	80016cc <KEYPAD_Update>
		Keypad_Button = KEYPAD_Read();
 80088ea:	f7f8 fdfb 	bl	80014e4 <KEYPAD_Read>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]

		if(Keypad_Button != KEYPAD_NOPRESSED && Keypad_Button == Keypad_prev) {
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	2bff      	cmp	r3, #255	; 0xff
 80088f6:	d01e      	beq.n	8008936 <keypad_handler+0x76>
 80088f8:	7b7b      	ldrb	r3, [r7, #13]
 80088fa:	7bfa      	ldrb	r2, [r7, #15]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d11a      	bne.n	8008936 <keypad_handler+0x76>
			if(hold_timeout > 0) hold_timeout--;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	dd03      	ble.n	800890e <keypad_handler+0x4e>
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	3b01      	subs	r3, #1
 800890a:	617b      	str	r3, [r7, #20]
 800890c:	e013      	b.n	8008936 <keypad_handler+0x76>
			else if (!hold_timeout) {
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d110      	bne.n	8008936 <keypad_handler+0x76>
				hold_timeout--;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	3b01      	subs	r3, #1
 8008918:	617b      	str	r3, [r7, #20]
				Keypad_Hold_Button = KEYPAD_Hold_Button(Keypad_Button);
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	4618      	mov	r0, r3
 800891e:	f7f8 fec5 	bl	80016ac <KEYPAD_Hold_Button>
 8008922:	4603      	mov	r3, r0
 8008924:	73bb      	strb	r3, [r7, #14]
				xQueueSend(keypad_queue_handle, (void*) &Keypad_Hold_Button, (TickType_t) 0);
 8008926:	4b1a      	ldr	r3, [pc, #104]	; (8008990 <keypad_handler+0xd0>)
 8008928:	6818      	ldr	r0, [r3, #0]
 800892a:	f107 010e 	add.w	r1, r7, #14
 800892e:	2300      	movs	r3, #0
 8008930:	2200      	movs	r2, #0
 8008932:	f7f9 fbad 	bl	8002090 <xQueueGenericSend>
			}
		}
		if(Keypad_Button == KEYPAD_NOPRESSED && Keypad_prev != KEYPAD_NOPRESSED)
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	2bff      	cmp	r3, #255	; 0xff
 800893a:	d10d      	bne.n	8008958 <keypad_handler+0x98>
 800893c:	7b7b      	ldrb	r3, [r7, #13]
 800893e:	2bff      	cmp	r3, #255	; 0xff
 8008940:	d00a      	beq.n	8008958 <keypad_handler+0x98>
			if(hold_timeout > 0)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	dd07      	ble.n	8008958 <keypad_handler+0x98>
				xQueueSend(keypad_queue_handle, (void*) &Keypad_prev, (TickType_t) 0);
 8008948:	4b11      	ldr	r3, [pc, #68]	; (8008990 <keypad_handler+0xd0>)
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	f107 010d 	add.w	r1, r7, #13
 8008950:	2300      	movs	r3, #0
 8008952:	2200      	movs	r2, #0
 8008954:	f7f9 fb9c 	bl	8002090 <xQueueGenericSend>
		if(Keypad_Button == KEYPAD_NOPRESSED && Keypad_prev != KEYPAD_NOPRESSED)
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	2bff      	cmp	r3, #255	; 0xff
 800895c:	d10a      	bne.n	8008974 <keypad_handler+0xb4>
 800895e:	7b7b      	ldrb	r3, [r7, #13]
 8008960:	2bff      	cmp	r3, #255	; 0xff
 8008962:	d007      	beq.n	8008974 <keypad_handler+0xb4>
			hold_timeout = KEYPAD_HOLD_TIMEOUT / (uint8_t) update_delay;
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	461a      	mov	r2, r3
 800896a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800896e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008972:	617b      	str	r3, [r7, #20]

		Keypad_prev = Keypad_Button;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	737b      	strb	r3, [r7, #13]
		vTaskDelay(update_delay);
 8008978:	6938      	ldr	r0, [r7, #16]
 800897a:	f7fa f927 	bl	8002bcc <vTaskDelay>
		taskYIELD();
 800897e:	4b05      	ldr	r3, [pc, #20]	; (8008994 <keypad_handler+0xd4>)
 8008980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	f3bf 8f6f 	isb	sy
		KEYPAD_Update();
 800898e:	e7aa      	b.n	80088e6 <keypad_handler+0x26>
 8008990:	200138dc 	.word	0x200138dc
 8008994:	e000ed04 	.word	0xe000ed04

08008998 <rtc_handler>:
	}
}

void rtc_handler(void* parameters) {
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
	DS1307_DateTime_t rtc_datetime, rtc_config_data;
	int sec, sec_prev = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61fb      	str	r3, [r7, #28]

	while(DS1307_Init() != DS1307_Result_OK) vTaskDelay(10);
 80089a4:	e002      	b.n	80089ac <rtc_handler+0x14>
 80089a6:	200a      	movs	r0, #10
 80089a8:	f7fa f910 	bl	8002bcc <vTaskDelay>
 80089ac:	f7f8 faf6 	bl	8000f9c <DS1307_Init>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1f7      	bne.n	80089a6 <rtc_handler+0xe>

	while(1) {
		if(rtc_queue_handle != NULL)
 80089b6:	4b1d      	ldr	r3, [pc, #116]	; (8008a2c <rtc_handler+0x94>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00f      	beq.n	80089de <rtc_handler+0x46>
			if(xQueueReceive(rtc_queue_handle, &rtc_config_data, (TickType_t) 5))
 80089be:	4b1b      	ldr	r3, [pc, #108]	; (8008a2c <rtc_handler+0x94>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f107 0108 	add.w	r1, r7, #8
 80089c6:	2205      	movs	r2, #5
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7f9 fd2d 	bl	8002428 <xQueueReceive>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d004      	beq.n	80089de <rtc_handler+0x46>
				DS1307_SetDateTime(&rtc_config_data);
 80089d4:	f107 0308 	add.w	r3, r7, #8
 80089d8:	4618      	mov	r0, r3
 80089da:	f7f8 fc8d 	bl	80012f8 <DS1307_SetDateTime>

		DS1307_GetDateTime(&rtc_datetime);
 80089de:	f107 0310 	add.w	r3, r7, #16
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7f8 fc56 	bl	8001294 <DS1307_GetDateTime>
		sec = rtc_datetime.seconds;
 80089e8:	7c3b      	ldrb	r3, [r7, #16]
 80089ea:	61bb      	str	r3, [r7, #24]
		if((sec - sec_prev == 1) || (sec_prev - sec == 59)) lcd_screen_3_timer_count_up();
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d004      	beq.n	8008a00 <rtc_handler+0x68>
 80089f6:	69fa      	ldr	r2, [r7, #28]
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b3b      	cmp	r3, #59	; 0x3b
 80089fe:	d101      	bne.n	8008a04 <rtc_handler+0x6c>
 8008a00:	f7ff f8ce 	bl	8007ba0 <lcd_screen_3_timer_count_up>
		lcd_screen_4_rtc_update(rtc_datetime);
 8008a04:	f107 0310 	add.w	r3, r7, #16
 8008a08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a0c:	f7ff f916 	bl	8007c3c <lcd_screen_4_rtc_update>

		sec_prev = sec;
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	61fb      	str	r3, [r7, #28]
		vTaskDelay(250);
 8008a14:	20fa      	movs	r0, #250	; 0xfa
 8008a16:	f7fa f8d9 	bl	8002bcc <vTaskDelay>
		taskYIELD();
 8008a1a:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <rtc_handler+0x98>)
 8008a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	f3bf 8f6f 	isb	sy
		if(rtc_queue_handle != NULL)
 8008a2a:	e7c4      	b.n	80089b6 <rtc_handler+0x1e>
 8008a2c:	200138e8 	.word	0x200138e8
 8008a30:	e000ed04 	.word	0xe000ed04

08008a34 <usart_handler>:
	}
}

void usart_handler(void* parameters) {
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]



	while(1) {
		vTaskDelay(100);
 8008a3c:	2064      	movs	r0, #100	; 0x64
 8008a3e:	f7fa f8c5 	bl	8002bcc <vTaskDelay>
		taskYIELD();
 8008a42:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <usart_handler+0x20>)
 8008a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	f3bf 8f6f 	isb	sy
		vTaskDelay(100);
 8008a52:	e7f3      	b.n	8008a3c <usart_handler+0x8>
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <led_handler>:
	}
}

void led_handler(void* parameters) {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	uint16_t led_timeout = 20;
 8008a60:	2314      	movs	r3, #20
 8008a62:	837b      	strh	r3, [r7, #26]

//	LED Init
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = PORT_LED;
 8008a64:	4b53      	ldr	r3, [pc, #332]	; (8008bb4 <led_handler+0x15c>)
 8008a66:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8008a70:	2300      	movs	r3, #0
 8008a72:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8008a74:	2300      	movs	r3, #0
 8008a76:	74fb      	strb	r3, [r7, #19]

//	Red LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_R_LED;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLed);
 8008a7c:	f107 030c 	add.w	r3, r7, #12
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fb fde7 	bl	8004654 <GPIO_Init>

//	Green LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_G_LED;
 8008a86:	2303      	movs	r3, #3
 8008a88:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLed);
 8008a8a:	f107 030c 	add.w	r3, r7, #12
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fb fde0 	bl	8004654 <GPIO_Init>

//	Blue LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_B_LED;
 8008a94:	2305      	movs	r3, #5
 8008a96:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLed);
 8008a98:	f107 030c 	add.w	r3, r7, #12
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fb fdd9 	bl	8004654 <GPIO_Init>

	R_LED_OFF;
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	4843      	ldr	r0, [pc, #268]	; (8008bb4 <led_handler+0x15c>)
 8008aa8:	f7fb ff86 	bl	80049b8 <GPIO_WriteToOutputPin>
	G_LED_OFF;
 8008aac:	2201      	movs	r2, #1
 8008aae:	2103      	movs	r1, #3
 8008ab0:	4840      	ldr	r0, [pc, #256]	; (8008bb4 <led_handler+0x15c>)
 8008ab2:	f7fb ff81 	bl	80049b8 <GPIO_WriteToOutputPin>
	B_LED_OFF;
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	2105      	movs	r1, #5
 8008aba:	483e      	ldr	r0, [pc, #248]	; (8008bb4 <led_handler+0x15c>)
 8008abc:	f7fb ff7c 	bl	80049b8 <GPIO_WriteToOutputPin>

	LED_Control_t led;

	uint8_t r_led_count = 0, g_led_count = 0, b_led_count = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	77fb      	strb	r3, [r7, #31]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	77bb      	strb	r3, [r7, #30]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	777b      	strb	r3, [r7, #29]

	while(1) {
		if(led_queue_handle != NULL) {
 8008acc:	4b3a      	ldr	r3, [pc, #232]	; (8008bb8 <led_handler+0x160>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d02f      	beq.n	8008b34 <led_handler+0xdc>
			if(xQueueReceive(led_queue_handle, &led, (TickType_t) 100)) {
 8008ad4:	4b38      	ldr	r3, [pc, #224]	; (8008bb8 <led_handler+0x160>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f107 010b 	add.w	r1, r7, #11
 8008adc:	2264      	movs	r2, #100	; 0x64
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7f9 fca2 	bl	8002428 <xQueueReceive>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d024      	beq.n	8008b34 <led_handler+0xdc>
				switch (led) {
 8008aea:	7afb      	ldrb	r3, [r7, #11]
 8008aec:	2b05      	cmp	r3, #5
 8008aee:	d823      	bhi.n	8008b38 <led_handler+0xe0>
 8008af0:	a201      	add	r2, pc, #4	; (adr r2, 8008af8 <led_handler+0xa0>)
 8008af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af6:	bf00      	nop
 8008af8:	08008b11 	.word	0x08008b11
 8008afc:	08008b23 	.word	0x08008b23
 8008b00:	08008b17 	.word	0x08008b17
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b1d 	.word	0x08008b1d
 8008b0c:	08008b2f 	.word	0x08008b2f
					case R_ON:
						r_led_count = led_timeout;
 8008b10:	8b7b      	ldrh	r3, [r7, #26]
 8008b12:	77fb      	strb	r3, [r7, #31]
						break;
 8008b14:	e011      	b.n	8008b3a <led_handler+0xe2>
					case G_ON:
						g_led_count = led_timeout;
 8008b16:	8b7b      	ldrh	r3, [r7, #26]
 8008b18:	77bb      	strb	r3, [r7, #30]
						break;
 8008b1a:	e00e      	b.n	8008b3a <led_handler+0xe2>
					case B_ON:
						b_led_count = led_timeout;
 8008b1c:	8b7b      	ldrh	r3, [r7, #26]
 8008b1e:	777b      	strb	r3, [r7, #29]
						break;
 8008b20:	e00b      	b.n	8008b3a <led_handler+0xe2>
					case R_OFF:
						r_led_count = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	77fb      	strb	r3, [r7, #31]
						break;
 8008b26:	e008      	b.n	8008b3a <led_handler+0xe2>
					case G_OFF:
						g_led_count = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	77bb      	strb	r3, [r7, #30]
						break;
 8008b2c:	e005      	b.n	8008b3a <led_handler+0xe2>
					case B_OFF:
						b_led_count = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	777b      	strb	r3, [r7, #29]
						break;
 8008b32:	e002      	b.n	8008b3a <led_handler+0xe2>
					default:
						break;
				}
			}
 8008b34:	bf00      	nop
 8008b36:	e000      	b.n	8008b3a <led_handler+0xe2>
						break;
 8008b38:	bf00      	nop
		}

		if(r_led_count) {
 8008b3a:	7ffb      	ldrb	r3, [r7, #31]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d008      	beq.n	8008b52 <led_handler+0xfa>
			R_LED_ON;
 8008b40:	2200      	movs	r2, #0
 8008b42:	2101      	movs	r1, #1
 8008b44:	481b      	ldr	r0, [pc, #108]	; (8008bb4 <led_handler+0x15c>)
 8008b46:	f7fb ff37 	bl	80049b8 <GPIO_WriteToOutputPin>
			r_led_count--;
 8008b4a:	7ffb      	ldrb	r3, [r7, #31]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	77fb      	strb	r3, [r7, #31]
 8008b50:	e004      	b.n	8008b5c <led_handler+0x104>
		}
		else R_LED_OFF;
 8008b52:	2201      	movs	r2, #1
 8008b54:	2101      	movs	r1, #1
 8008b56:	4817      	ldr	r0, [pc, #92]	; (8008bb4 <led_handler+0x15c>)
 8008b58:	f7fb ff2e 	bl	80049b8 <GPIO_WriteToOutputPin>

		if(g_led_count) {
 8008b5c:	7fbb      	ldrb	r3, [r7, #30]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d008      	beq.n	8008b74 <led_handler+0x11c>
			G_LED_ON;
 8008b62:	2200      	movs	r2, #0
 8008b64:	2103      	movs	r1, #3
 8008b66:	4813      	ldr	r0, [pc, #76]	; (8008bb4 <led_handler+0x15c>)
 8008b68:	f7fb ff26 	bl	80049b8 <GPIO_WriteToOutputPin>
			g_led_count--;
 8008b6c:	7fbb      	ldrb	r3, [r7, #30]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	77bb      	strb	r3, [r7, #30]
 8008b72:	e004      	b.n	8008b7e <led_handler+0x126>
		}
		else G_LED_OFF;
 8008b74:	2201      	movs	r2, #1
 8008b76:	2103      	movs	r1, #3
 8008b78:	480e      	ldr	r0, [pc, #56]	; (8008bb4 <led_handler+0x15c>)
 8008b7a:	f7fb ff1d 	bl	80049b8 <GPIO_WriteToOutputPin>

		if(b_led_count) {
 8008b7e:	7f7b      	ldrb	r3, [r7, #29]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d008      	beq.n	8008b96 <led_handler+0x13e>
			B_LED_ON;
 8008b84:	2200      	movs	r2, #0
 8008b86:	2105      	movs	r1, #5
 8008b88:	480a      	ldr	r0, [pc, #40]	; (8008bb4 <led_handler+0x15c>)
 8008b8a:	f7fb ff15 	bl	80049b8 <GPIO_WriteToOutputPin>
			b_led_count--;
 8008b8e:	7f7b      	ldrb	r3, [r7, #29]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	777b      	strb	r3, [r7, #29]
 8008b94:	e004      	b.n	8008ba0 <led_handler+0x148>
		}
		else B_LED_OFF;
 8008b96:	2201      	movs	r2, #1
 8008b98:	2105      	movs	r1, #5
 8008b9a:	4806      	ldr	r0, [pc, #24]	; (8008bb4 <led_handler+0x15c>)
 8008b9c:	f7fb ff0c 	bl	80049b8 <GPIO_WriteToOutputPin>

		taskYIELD();
 8008ba0:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <led_handler+0x164>)
 8008ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	f3bf 8f6f 	isb	sy
		if(led_queue_handle != NULL) {
 8008bb0:	e78c      	b.n	8008acc <led_handler+0x74>
 8008bb2:	bf00      	nop
 8008bb4:	40021000 	.word	0x40021000
 8008bb8:	200138e4 	.word	0x200138e4
 8008bbc:	e000ed04 	.word	0xe000ed04

08008bc0 <EXTI15_10_IRQHandler>:
	}
}

void EXTI15_10_IRQHandler(void) {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
	static uint8_t zx_count = 0;
	ADE_INT_t ade_int;
    uint32_t pending = EXTI->PR;
 8008bc6:	4b1e      	ldr	r3, [pc, #120]	; (8008c40 <EXTI15_10_IRQHandler+0x80>)
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	607b      	str	r3, [r7, #4]
//        // handle pin SAG here
//		ade_int = ADE_INT_SAG;
//		xQueueSendFromISR(ade_queue_handle, &ade_int, NULL);
//    }

    if(pending & (1 << PIN_ZX_IT)) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01b      	beq.n	8008c0e <EXTI15_10_IRQHandler+0x4e>
        EXTI->PR |= 1 << PIN_ZX_IT;		// clear pending flag, otherwise we'd get endless interrupts
 8008bd6:	4b1a      	ldr	r3, [pc, #104]	; (8008c40 <EXTI15_10_IRQHandler+0x80>)
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	4a19      	ldr	r2, [pc, #100]	; (8008c40 <EXTI15_10_IRQHandler+0x80>)
 8008bdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008be0:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
		if(++zx_count >= 50) {
 8008be2:	4b18      	ldr	r3, [pc, #96]	; (8008c44 <EXTI15_10_IRQHandler+0x84>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	3301      	adds	r3, #1
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <EXTI15_10_IRQHandler+0x84>)
 8008bec:	701a      	strb	r2, [r3, #0]
 8008bee:	4b15      	ldr	r3, [pc, #84]	; (8008c44 <EXTI15_10_IRQHandler+0x84>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b31      	cmp	r3, #49	; 0x31
 8008bf4:	d90b      	bls.n	8008c0e <EXTI15_10_IRQHandler+0x4e>
			zx_count = 0;
 8008bf6:	4b13      	ldr	r3, [pc, #76]	; (8008c44 <EXTI15_10_IRQHandler+0x84>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	701a      	strb	r2, [r3, #0]
			ade_int = ADE_INT_ZX;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	70fb      	strb	r3, [r7, #3]
			xQueueSendToFrontFromISR(ade_queue_handle, &ade_int, NULL);
 8008c00:	4b11      	ldr	r3, [pc, #68]	; (8008c48 <EXTI15_10_IRQHandler+0x88>)
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	1cf9      	adds	r1, r7, #3
 8008c06:	2301      	movs	r3, #1
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f7f9 fb4f 	bl	80022ac <xQueueGenericSendFromISR>
		}
    }

    if(pending & (1 << PIN_IRQ_IT)) {
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00e      	beq.n	8008c36 <EXTI15_10_IRQHandler+0x76>
        EXTI->PR |= 1 << PIN_IRQ_IT;	// clear pending flag, otherwise we'd get endless interrupts
 8008c18:	4b09      	ldr	r3, [pc, #36]	; (8008c40 <EXTI15_10_IRQHandler+0x80>)
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	4a08      	ldr	r2, [pc, #32]	; (8008c40 <EXTI15_10_IRQHandler+0x80>)
 8008c1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008c22:	6153      	str	r3, [r2, #20]
        // handle pin IRQ here
        ade_int = ADE_INT_IRQ;
 8008c24:	2301      	movs	r3, #1
 8008c26:	70fb      	strb	r3, [r7, #3]
		xQueueSendFromISR(ade_queue_handle, &ade_int, NULL);
 8008c28:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <EXTI15_10_IRQHandler+0x88>)
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	1cf9      	adds	r1, r7, #3
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2200      	movs	r2, #0
 8008c32:	f7f9 fb3b 	bl	80022ac <xQueueGenericSendFromISR>
    }
}
 8008c36:	bf00      	nop
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	40013c00 	.word	0x40013c00
 8008c44:	2001357c 	.word	0x2001357c
 8008c48:	200138e0 	.word	0x200138e0

08008c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
	return 1;
 8008c50:	2301      	movs	r3, #1
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <_kill>:

int _kill(int pid, int sig)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008c66:	f000 f8c5 	bl	8008df4 <__errno>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2216      	movs	r2, #22
 8008c6e:	601a      	str	r2, [r3, #0]
	return -1;
 8008c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <_exit>:

void _exit (int status)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff ffe7 	bl	8008c5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8008c8e:	e7fe      	b.n	8008c8e <_exit+0x12>

08008c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	e00a      	b.n	8008cb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008ca2:	f3af 8000 	nop.w
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	60ba      	str	r2, [r7, #8]
 8008cae:	b2ca      	uxtb	r2, r1
 8008cb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	617b      	str	r3, [r7, #20]
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	dbf0      	blt.n	8008ca2 <_read+0x12>
	}

return len;
 8008cc0:	687b      	ldr	r3, [r7, #4]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <_close>:
	}
	return len;
}

int _close(int file)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b083      	sub	sp, #12
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
	return -1;
 8008cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b083      	sub	sp, #12
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008cf2:	605a      	str	r2, [r3, #4]
	return 0;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <_isatty>:

int _isatty(int file)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
	return 1;
 8008d0a:	2301      	movs	r3, #1
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
	return 0;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d3c:	4a14      	ldr	r2, [pc, #80]	; (8008d90 <_sbrk+0x5c>)
 8008d3e:	4b15      	ldr	r3, [pc, #84]	; (8008d94 <_sbrk+0x60>)
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d48:	4b13      	ldr	r3, [pc, #76]	; (8008d98 <_sbrk+0x64>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d50:	4b11      	ldr	r3, [pc, #68]	; (8008d98 <_sbrk+0x64>)
 8008d52:	4a12      	ldr	r2, [pc, #72]	; (8008d9c <_sbrk+0x68>)
 8008d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d56:	4b10      	ldr	r3, [pc, #64]	; (8008d98 <_sbrk+0x64>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d207      	bcs.n	8008d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d64:	f000 f846 	bl	8008df4 <__errno>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	220c      	movs	r2, #12
 8008d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d72:	e009      	b.n	8008d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d74:	4b08      	ldr	r3, [pc, #32]	; (8008d98 <_sbrk+0x64>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d7a:	4b07      	ldr	r3, [pc, #28]	; (8008d98 <_sbrk+0x64>)
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4413      	add	r3, r2
 8008d82:	4a05      	ldr	r2, [pc, #20]	; (8008d98 <_sbrk+0x64>)
 8008d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d86:	68fb      	ldr	r3, [r7, #12]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20020000 	.word	0x20020000
 8008d94:	00000400 	.word	0x00000400
 8008d98:	20013580 	.word	0x20013580
 8008d9c:	20013900 	.word	0x20013900

08008da0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008da0:	480d      	ldr	r0, [pc, #52]	; (8008dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008da2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008da4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008da8:	480c      	ldr	r0, [pc, #48]	; (8008ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8008daa:	490d      	ldr	r1, [pc, #52]	; (8008de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008dac:	4a0d      	ldr	r2, [pc, #52]	; (8008de4 <LoopForever+0xe>)
  movs r3, #0
 8008dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008db0:	e002      	b.n	8008db8 <LoopCopyDataInit>

08008db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008db6:	3304      	adds	r3, #4

08008db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008dbc:	d3f9      	bcc.n	8008db2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008dbe:	4a0a      	ldr	r2, [pc, #40]	; (8008de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008dc0:	4c0a      	ldr	r4, [pc, #40]	; (8008dec <LoopForever+0x16>)
  movs r3, #0
 8008dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008dc4:	e001      	b.n	8008dca <LoopFillZerobss>

08008dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008dc8:	3204      	adds	r2, #4

08008dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008dcc:	d3fb      	bcc.n	8008dc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008dce:	f000 f817 	bl	8008e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008dd2:	f7ff f9db 	bl	800818c <main>

08008dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8008dd6:	e7fe      	b.n	8008dd6 <LoopForever>
  ldr   r0, =_estack
 8008dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008de0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8008de4:	0800c584 	.word	0x0800c584
  ldr r2, =_sbss
 8008de8:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8008dec:	200138fc 	.word	0x200138fc

08008df0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008df0:	e7fe      	b.n	8008df0 <ADC_IRQHandler>
	...

08008df4 <__errno>:
 8008df4:	4b01      	ldr	r3, [pc, #4]	; (8008dfc <__errno+0x8>)
 8008df6:	6818      	ldr	r0, [r3, #0]
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	20000038 	.word	0x20000038

08008e00 <__libc_init_array>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	4d0d      	ldr	r5, [pc, #52]	; (8008e38 <__libc_init_array+0x38>)
 8008e04:	4c0d      	ldr	r4, [pc, #52]	; (8008e3c <__libc_init_array+0x3c>)
 8008e06:	1b64      	subs	r4, r4, r5
 8008e08:	10a4      	asrs	r4, r4, #2
 8008e0a:	2600      	movs	r6, #0
 8008e0c:	42a6      	cmp	r6, r4
 8008e0e:	d109      	bne.n	8008e24 <__libc_init_array+0x24>
 8008e10:	4d0b      	ldr	r5, [pc, #44]	; (8008e40 <__libc_init_array+0x40>)
 8008e12:	4c0c      	ldr	r4, [pc, #48]	; (8008e44 <__libc_init_array+0x44>)
 8008e14:	f002 fee2 	bl	800bbdc <_init>
 8008e18:	1b64      	subs	r4, r4, r5
 8008e1a:	10a4      	asrs	r4, r4, #2
 8008e1c:	2600      	movs	r6, #0
 8008e1e:	42a6      	cmp	r6, r4
 8008e20:	d105      	bne.n	8008e2e <__libc_init_array+0x2e>
 8008e22:	bd70      	pop	{r4, r5, r6, pc}
 8008e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e28:	4798      	blx	r3
 8008e2a:	3601      	adds	r6, #1
 8008e2c:	e7ee      	b.n	8008e0c <__libc_init_array+0xc>
 8008e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e32:	4798      	blx	r3
 8008e34:	3601      	adds	r6, #1
 8008e36:	e7f2      	b.n	8008e1e <__libc_init_array+0x1e>
 8008e38:	0800c57c 	.word	0x0800c57c
 8008e3c:	0800c57c 	.word	0x0800c57c
 8008e40:	0800c57c 	.word	0x0800c57c
 8008e44:	0800c580 	.word	0x0800c580

08008e48 <memcmp>:
 8008e48:	b530      	push	{r4, r5, lr}
 8008e4a:	3901      	subs	r1, #1
 8008e4c:	2400      	movs	r4, #0
 8008e4e:	42a2      	cmp	r2, r4
 8008e50:	d101      	bne.n	8008e56 <memcmp+0xe>
 8008e52:	2000      	movs	r0, #0
 8008e54:	e005      	b.n	8008e62 <memcmp+0x1a>
 8008e56:	5d03      	ldrb	r3, [r0, r4]
 8008e58:	3401      	adds	r4, #1
 8008e5a:	5d0d      	ldrb	r5, [r1, r4]
 8008e5c:	42ab      	cmp	r3, r5
 8008e5e:	d0f6      	beq.n	8008e4e <memcmp+0x6>
 8008e60:	1b58      	subs	r0, r3, r5
 8008e62:	bd30      	pop	{r4, r5, pc}

08008e64 <memcpy>:
 8008e64:	440a      	add	r2, r1
 8008e66:	4291      	cmp	r1, r2
 8008e68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e6c:	d100      	bne.n	8008e70 <memcpy+0xc>
 8008e6e:	4770      	bx	lr
 8008e70:	b510      	push	{r4, lr}
 8008e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e7a:	4291      	cmp	r1, r2
 8008e7c:	d1f9      	bne.n	8008e72 <memcpy+0xe>
 8008e7e:	bd10      	pop	{r4, pc}

08008e80 <memset>:
 8008e80:	4402      	add	r2, r0
 8008e82:	4603      	mov	r3, r0
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d100      	bne.n	8008e8a <memset+0xa>
 8008e88:	4770      	bx	lr
 8008e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e8e:	e7f9      	b.n	8008e84 <memset+0x4>

08008e90 <__cvt>:
 8008e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e94:	b088      	sub	sp, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	461d      	mov	r5, r3
 8008e9a:	4614      	mov	r4, r2
 8008e9c:	bfbc      	itt	lt
 8008e9e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008ea2:	4614      	movlt	r4, r2
 8008ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ea6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008ea8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008eac:	bfb6      	itet	lt
 8008eae:	461d      	movlt	r5, r3
 8008eb0:	2300      	movge	r3, #0
 8008eb2:	232d      	movlt	r3, #45	; 0x2d
 8008eb4:	7013      	strb	r3, [r2, #0]
 8008eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008eb8:	f023 0820 	bic.w	r8, r3, #32
 8008ebc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ec0:	d005      	beq.n	8008ece <__cvt+0x3e>
 8008ec2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ec6:	d100      	bne.n	8008eca <__cvt+0x3a>
 8008ec8:	3601      	adds	r6, #1
 8008eca:	2302      	movs	r3, #2
 8008ecc:	e000      	b.n	8008ed0 <__cvt+0x40>
 8008ece:	2303      	movs	r3, #3
 8008ed0:	aa07      	add	r2, sp, #28
 8008ed2:	9204      	str	r2, [sp, #16]
 8008ed4:	aa06      	add	r2, sp, #24
 8008ed6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008eda:	e9cd 3600 	strd	r3, r6, [sp]
 8008ede:	4622      	mov	r2, r4
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	f000 fced 	bl	80098c0 <_dtoa_r>
 8008ee6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008eea:	4607      	mov	r7, r0
 8008eec:	d102      	bne.n	8008ef4 <__cvt+0x64>
 8008eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ef0:	07db      	lsls	r3, r3, #31
 8008ef2:	d522      	bpl.n	8008f3a <__cvt+0xaa>
 8008ef4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ef8:	eb07 0906 	add.w	r9, r7, r6
 8008efc:	d110      	bne.n	8008f20 <__cvt+0x90>
 8008efe:	783b      	ldrb	r3, [r7, #0]
 8008f00:	2b30      	cmp	r3, #48	; 0x30
 8008f02:	d10a      	bne.n	8008f1a <__cvt+0x8a>
 8008f04:	2200      	movs	r2, #0
 8008f06:	2300      	movs	r3, #0
 8008f08:	4620      	mov	r0, r4
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	f7f7 fe3c 	bl	8000b88 <__aeabi_dcmpeq>
 8008f10:	b918      	cbnz	r0, 8008f1a <__cvt+0x8a>
 8008f12:	f1c6 0601 	rsb	r6, r6, #1
 8008f16:	f8ca 6000 	str.w	r6, [sl]
 8008f1a:	f8da 3000 	ldr.w	r3, [sl]
 8008f1e:	4499      	add	r9, r3
 8008f20:	2200      	movs	r2, #0
 8008f22:	2300      	movs	r3, #0
 8008f24:	4620      	mov	r0, r4
 8008f26:	4629      	mov	r1, r5
 8008f28:	f7f7 fe2e 	bl	8000b88 <__aeabi_dcmpeq>
 8008f2c:	b108      	cbz	r0, 8008f32 <__cvt+0xa2>
 8008f2e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008f32:	2230      	movs	r2, #48	; 0x30
 8008f34:	9b07      	ldr	r3, [sp, #28]
 8008f36:	454b      	cmp	r3, r9
 8008f38:	d307      	bcc.n	8008f4a <__cvt+0xba>
 8008f3a:	9b07      	ldr	r3, [sp, #28]
 8008f3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f3e:	1bdb      	subs	r3, r3, r7
 8008f40:	4638      	mov	r0, r7
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	b008      	add	sp, #32
 8008f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4a:	1c59      	adds	r1, r3, #1
 8008f4c:	9107      	str	r1, [sp, #28]
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	e7f0      	b.n	8008f34 <__cvt+0xa4>

08008f52 <__exponent>:
 8008f52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f54:	4603      	mov	r3, r0
 8008f56:	2900      	cmp	r1, #0
 8008f58:	bfb8      	it	lt
 8008f5a:	4249      	neglt	r1, r1
 8008f5c:	f803 2b02 	strb.w	r2, [r3], #2
 8008f60:	bfb4      	ite	lt
 8008f62:	222d      	movlt	r2, #45	; 0x2d
 8008f64:	222b      	movge	r2, #43	; 0x2b
 8008f66:	2909      	cmp	r1, #9
 8008f68:	7042      	strb	r2, [r0, #1]
 8008f6a:	dd2a      	ble.n	8008fc2 <__exponent+0x70>
 8008f6c:	f10d 0407 	add.w	r4, sp, #7
 8008f70:	46a4      	mov	ip, r4
 8008f72:	270a      	movs	r7, #10
 8008f74:	46a6      	mov	lr, r4
 8008f76:	460a      	mov	r2, r1
 8008f78:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f7c:	fb07 1516 	mls	r5, r7, r6, r1
 8008f80:	3530      	adds	r5, #48	; 0x30
 8008f82:	2a63      	cmp	r2, #99	; 0x63
 8008f84:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008f88:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	dcf1      	bgt.n	8008f74 <__exponent+0x22>
 8008f90:	3130      	adds	r1, #48	; 0x30
 8008f92:	f1ae 0502 	sub.w	r5, lr, #2
 8008f96:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008f9a:	1c44      	adds	r4, r0, #1
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	4561      	cmp	r1, ip
 8008fa0:	d30a      	bcc.n	8008fb8 <__exponent+0x66>
 8008fa2:	f10d 0209 	add.w	r2, sp, #9
 8008fa6:	eba2 020e 	sub.w	r2, r2, lr
 8008faa:	4565      	cmp	r5, ip
 8008fac:	bf88      	it	hi
 8008fae:	2200      	movhi	r2, #0
 8008fb0:	4413      	add	r3, r2
 8008fb2:	1a18      	subs	r0, r3, r0
 8008fb4:	b003      	add	sp, #12
 8008fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fbc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008fc0:	e7ed      	b.n	8008f9e <__exponent+0x4c>
 8008fc2:	2330      	movs	r3, #48	; 0x30
 8008fc4:	3130      	adds	r1, #48	; 0x30
 8008fc6:	7083      	strb	r3, [r0, #2]
 8008fc8:	70c1      	strb	r1, [r0, #3]
 8008fca:	1d03      	adds	r3, r0, #4
 8008fcc:	e7f1      	b.n	8008fb2 <__exponent+0x60>
	...

08008fd0 <_printf_float>:
 8008fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	ed2d 8b02 	vpush	{d8}
 8008fd8:	b091      	sub	sp, #68	; 0x44
 8008fda:	460c      	mov	r4, r1
 8008fdc:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008fe0:	4616      	mov	r6, r2
 8008fe2:	461f      	mov	r7, r3
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	f001 fa57 	bl	800a498 <_localeconv_r>
 8008fea:	f8d0 a000 	ldr.w	sl, [r0]
 8008fee:	4650      	mov	r0, sl
 8008ff0:	f7f7 f948 	bl	8000284 <strlen>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	930e      	str	r3, [sp, #56]	; 0x38
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8008ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8009000:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009004:	3307      	adds	r3, #7
 8009006:	f023 0307 	bic.w	r3, r3, #7
 800900a:	f103 0208 	add.w	r2, r3, #8
 800900e:	f8c8 2000 	str.w	r2, [r8]
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800901a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800901e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009022:	930b      	str	r3, [sp, #44]	; 0x2c
 8009024:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009028:	ee08 0a10 	vmov	s16, r0
 800902c:	4ba0      	ldr	r3, [pc, #640]	; (80092b0 <_printf_float+0x2e0>)
 800902e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009036:	f7f7 fdd9 	bl	8000bec <__aeabi_dcmpun>
 800903a:	bb88      	cbnz	r0, 80090a0 <_printf_float+0xd0>
 800903c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009040:	4b9b      	ldr	r3, [pc, #620]	; (80092b0 <_printf_float+0x2e0>)
 8009042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009046:	f7f7 fdb3 	bl	8000bb0 <__aeabi_dcmple>
 800904a:	bb48      	cbnz	r0, 80090a0 <_printf_float+0xd0>
 800904c:	2200      	movs	r2, #0
 800904e:	2300      	movs	r3, #0
 8009050:	4640      	mov	r0, r8
 8009052:	4649      	mov	r1, r9
 8009054:	f7f7 fda2 	bl	8000b9c <__aeabi_dcmplt>
 8009058:	b110      	cbz	r0, 8009060 <_printf_float+0x90>
 800905a:	232d      	movs	r3, #45	; 0x2d
 800905c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009060:	4b94      	ldr	r3, [pc, #592]	; (80092b4 <_printf_float+0x2e4>)
 8009062:	4895      	ldr	r0, [pc, #596]	; (80092b8 <_printf_float+0x2e8>)
 8009064:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009068:	bf94      	ite	ls
 800906a:	4698      	movls	r8, r3
 800906c:	4680      	movhi	r8, r0
 800906e:	2303      	movs	r3, #3
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009074:	f023 0304 	bic.w	r3, r3, #4
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	f04f 0900 	mov.w	r9, #0
 800907e:	9700      	str	r7, [sp, #0]
 8009080:	4633      	mov	r3, r6
 8009082:	aa0f      	add	r2, sp, #60	; 0x3c
 8009084:	4621      	mov	r1, r4
 8009086:	4628      	mov	r0, r5
 8009088:	f000 f9da 	bl	8009440 <_printf_common>
 800908c:	3001      	adds	r0, #1
 800908e:	f040 8092 	bne.w	80091b6 <_printf_float+0x1e6>
 8009092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009096:	b011      	add	sp, #68	; 0x44
 8009098:	ecbd 8b02 	vpop	{d8}
 800909c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a0:	4642      	mov	r2, r8
 80090a2:	464b      	mov	r3, r9
 80090a4:	4640      	mov	r0, r8
 80090a6:	4649      	mov	r1, r9
 80090a8:	f7f7 fda0 	bl	8000bec <__aeabi_dcmpun>
 80090ac:	b140      	cbz	r0, 80090c0 <_printf_float+0xf0>
 80090ae:	464b      	mov	r3, r9
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfbc      	itt	lt
 80090b4:	232d      	movlt	r3, #45	; 0x2d
 80090b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090ba:	4880      	ldr	r0, [pc, #512]	; (80092bc <_printf_float+0x2ec>)
 80090bc:	4b80      	ldr	r3, [pc, #512]	; (80092c0 <_printf_float+0x2f0>)
 80090be:	e7d1      	b.n	8009064 <_printf_float+0x94>
 80090c0:	6863      	ldr	r3, [r4, #4]
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 80090c8:	d143      	bne.n	8009152 <_printf_float+0x182>
 80090ca:	2306      	movs	r3, #6
 80090cc:	6063      	str	r3, [r4, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d2:	9206      	str	r2, [sp, #24]
 80090d4:	aa0e      	add	r2, sp, #56	; 0x38
 80090d6:	e9cd b204 	strd	fp, r2, [sp, #16]
 80090da:	aa0d      	add	r2, sp, #52	; 0x34
 80090dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80090e0:	9203      	str	r2, [sp, #12]
 80090e2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80090e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80090ea:	6023      	str	r3, [r4, #0]
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	4642      	mov	r2, r8
 80090f2:	464b      	mov	r3, r9
 80090f4:	4628      	mov	r0, r5
 80090f6:	910a      	str	r1, [sp, #40]	; 0x28
 80090f8:	f7ff feca 	bl	8008e90 <__cvt>
 80090fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090fe:	2947      	cmp	r1, #71	; 0x47
 8009100:	4680      	mov	r8, r0
 8009102:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009104:	d108      	bne.n	8009118 <_printf_float+0x148>
 8009106:	1cc8      	adds	r0, r1, #3
 8009108:	db02      	blt.n	8009110 <_printf_float+0x140>
 800910a:	6863      	ldr	r3, [r4, #4]
 800910c:	4299      	cmp	r1, r3
 800910e:	dd40      	ble.n	8009192 <_printf_float+0x1c2>
 8009110:	f1ab 0b02 	sub.w	fp, fp, #2
 8009114:	fa5f fb8b 	uxtb.w	fp, fp
 8009118:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800911c:	d81f      	bhi.n	800915e <_printf_float+0x18e>
 800911e:	3901      	subs	r1, #1
 8009120:	465a      	mov	r2, fp
 8009122:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009126:	910d      	str	r1, [sp, #52]	; 0x34
 8009128:	f7ff ff13 	bl	8008f52 <__exponent>
 800912c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800912e:	1813      	adds	r3, r2, r0
 8009130:	2a01      	cmp	r2, #1
 8009132:	4681      	mov	r9, r0
 8009134:	6123      	str	r3, [r4, #16]
 8009136:	dc02      	bgt.n	800913e <_printf_float+0x16e>
 8009138:	6822      	ldr	r2, [r4, #0]
 800913a:	07d2      	lsls	r2, r2, #31
 800913c:	d501      	bpl.n	8009142 <_printf_float+0x172>
 800913e:	3301      	adds	r3, #1
 8009140:	6123      	str	r3, [r4, #16]
 8009142:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009146:	2b00      	cmp	r3, #0
 8009148:	d099      	beq.n	800907e <_printf_float+0xae>
 800914a:	232d      	movs	r3, #45	; 0x2d
 800914c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009150:	e795      	b.n	800907e <_printf_float+0xae>
 8009152:	2947      	cmp	r1, #71	; 0x47
 8009154:	d1bb      	bne.n	80090ce <_printf_float+0xfe>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1b9      	bne.n	80090ce <_printf_float+0xfe>
 800915a:	2301      	movs	r3, #1
 800915c:	e7b6      	b.n	80090cc <_printf_float+0xfc>
 800915e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009162:	d118      	bne.n	8009196 <_printf_float+0x1c6>
 8009164:	2900      	cmp	r1, #0
 8009166:	6863      	ldr	r3, [r4, #4]
 8009168:	dd0b      	ble.n	8009182 <_printf_float+0x1b2>
 800916a:	6121      	str	r1, [r4, #16]
 800916c:	b913      	cbnz	r3, 8009174 <_printf_float+0x1a4>
 800916e:	6822      	ldr	r2, [r4, #0]
 8009170:	07d0      	lsls	r0, r2, #31
 8009172:	d502      	bpl.n	800917a <_printf_float+0x1aa>
 8009174:	3301      	adds	r3, #1
 8009176:	440b      	add	r3, r1
 8009178:	6123      	str	r3, [r4, #16]
 800917a:	65a1      	str	r1, [r4, #88]	; 0x58
 800917c:	f04f 0900 	mov.w	r9, #0
 8009180:	e7df      	b.n	8009142 <_printf_float+0x172>
 8009182:	b913      	cbnz	r3, 800918a <_printf_float+0x1ba>
 8009184:	6822      	ldr	r2, [r4, #0]
 8009186:	07d2      	lsls	r2, r2, #31
 8009188:	d501      	bpl.n	800918e <_printf_float+0x1be>
 800918a:	3302      	adds	r3, #2
 800918c:	e7f4      	b.n	8009178 <_printf_float+0x1a8>
 800918e:	2301      	movs	r3, #1
 8009190:	e7f2      	b.n	8009178 <_printf_float+0x1a8>
 8009192:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009198:	4299      	cmp	r1, r3
 800919a:	db05      	blt.n	80091a8 <_printf_float+0x1d8>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	6121      	str	r1, [r4, #16]
 80091a0:	07d8      	lsls	r0, r3, #31
 80091a2:	d5ea      	bpl.n	800917a <_printf_float+0x1aa>
 80091a4:	1c4b      	adds	r3, r1, #1
 80091a6:	e7e7      	b.n	8009178 <_printf_float+0x1a8>
 80091a8:	2900      	cmp	r1, #0
 80091aa:	bfd4      	ite	le
 80091ac:	f1c1 0202 	rsble	r2, r1, #2
 80091b0:	2201      	movgt	r2, #1
 80091b2:	4413      	add	r3, r2
 80091b4:	e7e0      	b.n	8009178 <_printf_float+0x1a8>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	055a      	lsls	r2, r3, #21
 80091ba:	d407      	bmi.n	80091cc <_printf_float+0x1fc>
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	4642      	mov	r2, r8
 80091c0:	4631      	mov	r1, r6
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b8      	blx	r7
 80091c6:	3001      	adds	r0, #1
 80091c8:	d12c      	bne.n	8009224 <_printf_float+0x254>
 80091ca:	e762      	b.n	8009092 <_printf_float+0xc2>
 80091cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091d0:	f240 80e0 	bls.w	8009394 <_printf_float+0x3c4>
 80091d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091d8:	2200      	movs	r2, #0
 80091da:	2300      	movs	r3, #0
 80091dc:	f7f7 fcd4 	bl	8000b88 <__aeabi_dcmpeq>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d034      	beq.n	800924e <_printf_float+0x27e>
 80091e4:	4a37      	ldr	r2, [pc, #220]	; (80092c4 <_printf_float+0x2f4>)
 80091e6:	2301      	movs	r3, #1
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	f43f af4f 	beq.w	8009092 <_printf_float+0xc2>
 80091f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091f8:	429a      	cmp	r2, r3
 80091fa:	db02      	blt.n	8009202 <_printf_float+0x232>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	07d8      	lsls	r0, r3, #31
 8009200:	d510      	bpl.n	8009224 <_printf_float+0x254>
 8009202:	ee18 3a10 	vmov	r3, s16
 8009206:	4652      	mov	r2, sl
 8009208:	4631      	mov	r1, r6
 800920a:	4628      	mov	r0, r5
 800920c:	47b8      	blx	r7
 800920e:	3001      	adds	r0, #1
 8009210:	f43f af3f 	beq.w	8009092 <_printf_float+0xc2>
 8009214:	f04f 0800 	mov.w	r8, #0
 8009218:	f104 091a 	add.w	r9, r4, #26
 800921c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800921e:	3b01      	subs	r3, #1
 8009220:	4543      	cmp	r3, r8
 8009222:	dc09      	bgt.n	8009238 <_printf_float+0x268>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	079b      	lsls	r3, r3, #30
 8009228:	f100 8105 	bmi.w	8009436 <_printf_float+0x466>
 800922c:	68e0      	ldr	r0, [r4, #12]
 800922e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009230:	4298      	cmp	r0, r3
 8009232:	bfb8      	it	lt
 8009234:	4618      	movlt	r0, r3
 8009236:	e72e      	b.n	8009096 <_printf_float+0xc6>
 8009238:	2301      	movs	r3, #1
 800923a:	464a      	mov	r2, r9
 800923c:	4631      	mov	r1, r6
 800923e:	4628      	mov	r0, r5
 8009240:	47b8      	blx	r7
 8009242:	3001      	adds	r0, #1
 8009244:	f43f af25 	beq.w	8009092 <_printf_float+0xc2>
 8009248:	f108 0801 	add.w	r8, r8, #1
 800924c:	e7e6      	b.n	800921c <_printf_float+0x24c>
 800924e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009250:	2b00      	cmp	r3, #0
 8009252:	dc39      	bgt.n	80092c8 <_printf_float+0x2f8>
 8009254:	4a1b      	ldr	r2, [pc, #108]	; (80092c4 <_printf_float+0x2f4>)
 8009256:	2301      	movs	r3, #1
 8009258:	4631      	mov	r1, r6
 800925a:	4628      	mov	r0, r5
 800925c:	47b8      	blx	r7
 800925e:	3001      	adds	r0, #1
 8009260:	f43f af17 	beq.w	8009092 <_printf_float+0xc2>
 8009264:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009268:	4313      	orrs	r3, r2
 800926a:	d102      	bne.n	8009272 <_printf_float+0x2a2>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	07d9      	lsls	r1, r3, #31
 8009270:	d5d8      	bpl.n	8009224 <_printf_float+0x254>
 8009272:	ee18 3a10 	vmov	r3, s16
 8009276:	4652      	mov	r2, sl
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f af07 	beq.w	8009092 <_printf_float+0xc2>
 8009284:	f04f 0900 	mov.w	r9, #0
 8009288:	f104 0a1a 	add.w	sl, r4, #26
 800928c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800928e:	425b      	negs	r3, r3
 8009290:	454b      	cmp	r3, r9
 8009292:	dc01      	bgt.n	8009298 <_printf_float+0x2c8>
 8009294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009296:	e792      	b.n	80091be <_printf_float+0x1ee>
 8009298:	2301      	movs	r3, #1
 800929a:	4652      	mov	r2, sl
 800929c:	4631      	mov	r1, r6
 800929e:	4628      	mov	r0, r5
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	f43f aef5 	beq.w	8009092 <_printf_float+0xc2>
 80092a8:	f109 0901 	add.w	r9, r9, #1
 80092ac:	e7ee      	b.n	800928c <_printf_float+0x2bc>
 80092ae:	bf00      	nop
 80092b0:	7fefffff 	.word	0x7fefffff
 80092b4:	0800c19c 	.word	0x0800c19c
 80092b8:	0800c1a0 	.word	0x0800c1a0
 80092bc:	0800c1a8 	.word	0x0800c1a8
 80092c0:	0800c1a4 	.word	0x0800c1a4
 80092c4:	0800c1ac 	.word	0x0800c1ac
 80092c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092cc:	429a      	cmp	r2, r3
 80092ce:	bfa8      	it	ge
 80092d0:	461a      	movge	r2, r3
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	4691      	mov	r9, r2
 80092d6:	dc37      	bgt.n	8009348 <_printf_float+0x378>
 80092d8:	f04f 0b00 	mov.w	fp, #0
 80092dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092e0:	f104 021a 	add.w	r2, r4, #26
 80092e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092e6:	9309      	str	r3, [sp, #36]	; 0x24
 80092e8:	eba3 0309 	sub.w	r3, r3, r9
 80092ec:	455b      	cmp	r3, fp
 80092ee:	dc33      	bgt.n	8009358 <_printf_float+0x388>
 80092f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80092f4:	429a      	cmp	r2, r3
 80092f6:	db3b      	blt.n	8009370 <_printf_float+0x3a0>
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	07da      	lsls	r2, r3, #31
 80092fc:	d438      	bmi.n	8009370 <_printf_float+0x3a0>
 80092fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009302:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	eba2 0901 	sub.w	r9, r2, r1
 800930a:	4599      	cmp	r9, r3
 800930c:	bfa8      	it	ge
 800930e:	4699      	movge	r9, r3
 8009310:	f1b9 0f00 	cmp.w	r9, #0
 8009314:	dc35      	bgt.n	8009382 <_printf_float+0x3b2>
 8009316:	f04f 0800 	mov.w	r8, #0
 800931a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800931e:	f104 0a1a 	add.w	sl, r4, #26
 8009322:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009326:	1a9b      	subs	r3, r3, r2
 8009328:	eba3 0309 	sub.w	r3, r3, r9
 800932c:	4543      	cmp	r3, r8
 800932e:	f77f af79 	ble.w	8009224 <_printf_float+0x254>
 8009332:	2301      	movs	r3, #1
 8009334:	4652      	mov	r2, sl
 8009336:	4631      	mov	r1, r6
 8009338:	4628      	mov	r0, r5
 800933a:	47b8      	blx	r7
 800933c:	3001      	adds	r0, #1
 800933e:	f43f aea8 	beq.w	8009092 <_printf_float+0xc2>
 8009342:	f108 0801 	add.w	r8, r8, #1
 8009346:	e7ec      	b.n	8009322 <_printf_float+0x352>
 8009348:	4613      	mov	r3, r2
 800934a:	4631      	mov	r1, r6
 800934c:	4642      	mov	r2, r8
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	d1c0      	bne.n	80092d8 <_printf_float+0x308>
 8009356:	e69c      	b.n	8009092 <_printf_float+0xc2>
 8009358:	2301      	movs	r3, #1
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	9209      	str	r2, [sp, #36]	; 0x24
 8009360:	47b8      	blx	r7
 8009362:	3001      	adds	r0, #1
 8009364:	f43f ae95 	beq.w	8009092 <_printf_float+0xc2>
 8009368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800936a:	f10b 0b01 	add.w	fp, fp, #1
 800936e:	e7b9      	b.n	80092e4 <_printf_float+0x314>
 8009370:	ee18 3a10 	vmov	r3, s16
 8009374:	4652      	mov	r2, sl
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	47b8      	blx	r7
 800937c:	3001      	adds	r0, #1
 800937e:	d1be      	bne.n	80092fe <_printf_float+0x32e>
 8009380:	e687      	b.n	8009092 <_printf_float+0xc2>
 8009382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009384:	464b      	mov	r3, r9
 8009386:	4442      	add	r2, r8
 8009388:	4631      	mov	r1, r6
 800938a:	4628      	mov	r0, r5
 800938c:	47b8      	blx	r7
 800938e:	3001      	adds	r0, #1
 8009390:	d1c1      	bne.n	8009316 <_printf_float+0x346>
 8009392:	e67e      	b.n	8009092 <_printf_float+0xc2>
 8009394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009396:	2a01      	cmp	r2, #1
 8009398:	dc01      	bgt.n	800939e <_printf_float+0x3ce>
 800939a:	07db      	lsls	r3, r3, #31
 800939c:	d538      	bpl.n	8009410 <_printf_float+0x440>
 800939e:	2301      	movs	r3, #1
 80093a0:	4642      	mov	r2, r8
 80093a2:	4631      	mov	r1, r6
 80093a4:	4628      	mov	r0, r5
 80093a6:	47b8      	blx	r7
 80093a8:	3001      	adds	r0, #1
 80093aa:	f43f ae72 	beq.w	8009092 <_printf_float+0xc2>
 80093ae:	ee18 3a10 	vmov	r3, s16
 80093b2:	4652      	mov	r2, sl
 80093b4:	4631      	mov	r1, r6
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b8      	blx	r7
 80093ba:	3001      	adds	r0, #1
 80093bc:	f43f ae69 	beq.w	8009092 <_printf_float+0xc2>
 80093c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093c4:	2200      	movs	r2, #0
 80093c6:	2300      	movs	r3, #0
 80093c8:	f7f7 fbde 	bl	8000b88 <__aeabi_dcmpeq>
 80093cc:	b9d8      	cbnz	r0, 8009406 <_printf_float+0x436>
 80093ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093d0:	f108 0201 	add.w	r2, r8, #1
 80093d4:	3b01      	subs	r3, #1
 80093d6:	4631      	mov	r1, r6
 80093d8:	4628      	mov	r0, r5
 80093da:	47b8      	blx	r7
 80093dc:	3001      	adds	r0, #1
 80093de:	d10e      	bne.n	80093fe <_printf_float+0x42e>
 80093e0:	e657      	b.n	8009092 <_printf_float+0xc2>
 80093e2:	2301      	movs	r3, #1
 80093e4:	4652      	mov	r2, sl
 80093e6:	4631      	mov	r1, r6
 80093e8:	4628      	mov	r0, r5
 80093ea:	47b8      	blx	r7
 80093ec:	3001      	adds	r0, #1
 80093ee:	f43f ae50 	beq.w	8009092 <_printf_float+0xc2>
 80093f2:	f108 0801 	add.w	r8, r8, #1
 80093f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093f8:	3b01      	subs	r3, #1
 80093fa:	4543      	cmp	r3, r8
 80093fc:	dcf1      	bgt.n	80093e2 <_printf_float+0x412>
 80093fe:	464b      	mov	r3, r9
 8009400:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009404:	e6dc      	b.n	80091c0 <_printf_float+0x1f0>
 8009406:	f04f 0800 	mov.w	r8, #0
 800940a:	f104 0a1a 	add.w	sl, r4, #26
 800940e:	e7f2      	b.n	80093f6 <_printf_float+0x426>
 8009410:	2301      	movs	r3, #1
 8009412:	4642      	mov	r2, r8
 8009414:	e7df      	b.n	80093d6 <_printf_float+0x406>
 8009416:	2301      	movs	r3, #1
 8009418:	464a      	mov	r2, r9
 800941a:	4631      	mov	r1, r6
 800941c:	4628      	mov	r0, r5
 800941e:	47b8      	blx	r7
 8009420:	3001      	adds	r0, #1
 8009422:	f43f ae36 	beq.w	8009092 <_printf_float+0xc2>
 8009426:	f108 0801 	add.w	r8, r8, #1
 800942a:	68e3      	ldr	r3, [r4, #12]
 800942c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800942e:	1a5b      	subs	r3, r3, r1
 8009430:	4543      	cmp	r3, r8
 8009432:	dcf0      	bgt.n	8009416 <_printf_float+0x446>
 8009434:	e6fa      	b.n	800922c <_printf_float+0x25c>
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	f104 0919 	add.w	r9, r4, #25
 800943e:	e7f4      	b.n	800942a <_printf_float+0x45a>

08009440 <_printf_common>:
 8009440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009444:	4616      	mov	r6, r2
 8009446:	4699      	mov	r9, r3
 8009448:	688a      	ldr	r2, [r1, #8]
 800944a:	690b      	ldr	r3, [r1, #16]
 800944c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009450:	4293      	cmp	r3, r2
 8009452:	bfb8      	it	lt
 8009454:	4613      	movlt	r3, r2
 8009456:	6033      	str	r3, [r6, #0]
 8009458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800945c:	4607      	mov	r7, r0
 800945e:	460c      	mov	r4, r1
 8009460:	b10a      	cbz	r2, 8009466 <_printf_common+0x26>
 8009462:	3301      	adds	r3, #1
 8009464:	6033      	str	r3, [r6, #0]
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	0699      	lsls	r1, r3, #26
 800946a:	bf42      	ittt	mi
 800946c:	6833      	ldrmi	r3, [r6, #0]
 800946e:	3302      	addmi	r3, #2
 8009470:	6033      	strmi	r3, [r6, #0]
 8009472:	6825      	ldr	r5, [r4, #0]
 8009474:	f015 0506 	ands.w	r5, r5, #6
 8009478:	d106      	bne.n	8009488 <_printf_common+0x48>
 800947a:	f104 0a19 	add.w	sl, r4, #25
 800947e:	68e3      	ldr	r3, [r4, #12]
 8009480:	6832      	ldr	r2, [r6, #0]
 8009482:	1a9b      	subs	r3, r3, r2
 8009484:	42ab      	cmp	r3, r5
 8009486:	dc26      	bgt.n	80094d6 <_printf_common+0x96>
 8009488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800948c:	1e13      	subs	r3, r2, #0
 800948e:	6822      	ldr	r2, [r4, #0]
 8009490:	bf18      	it	ne
 8009492:	2301      	movne	r3, #1
 8009494:	0692      	lsls	r2, r2, #26
 8009496:	d42b      	bmi.n	80094f0 <_printf_common+0xb0>
 8009498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800949c:	4649      	mov	r1, r9
 800949e:	4638      	mov	r0, r7
 80094a0:	47c0      	blx	r8
 80094a2:	3001      	adds	r0, #1
 80094a4:	d01e      	beq.n	80094e4 <_printf_common+0xa4>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	68e5      	ldr	r5, [r4, #12]
 80094aa:	6832      	ldr	r2, [r6, #0]
 80094ac:	f003 0306 	and.w	r3, r3, #6
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	bf08      	it	eq
 80094b4:	1aad      	subeq	r5, r5, r2
 80094b6:	68a3      	ldr	r3, [r4, #8]
 80094b8:	6922      	ldr	r2, [r4, #16]
 80094ba:	bf0c      	ite	eq
 80094bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094c0:	2500      	movne	r5, #0
 80094c2:	4293      	cmp	r3, r2
 80094c4:	bfc4      	itt	gt
 80094c6:	1a9b      	subgt	r3, r3, r2
 80094c8:	18ed      	addgt	r5, r5, r3
 80094ca:	2600      	movs	r6, #0
 80094cc:	341a      	adds	r4, #26
 80094ce:	42b5      	cmp	r5, r6
 80094d0:	d11a      	bne.n	8009508 <_printf_common+0xc8>
 80094d2:	2000      	movs	r0, #0
 80094d4:	e008      	b.n	80094e8 <_printf_common+0xa8>
 80094d6:	2301      	movs	r3, #1
 80094d8:	4652      	mov	r2, sl
 80094da:	4649      	mov	r1, r9
 80094dc:	4638      	mov	r0, r7
 80094de:	47c0      	blx	r8
 80094e0:	3001      	adds	r0, #1
 80094e2:	d103      	bne.n	80094ec <_printf_common+0xac>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ec:	3501      	adds	r5, #1
 80094ee:	e7c6      	b.n	800947e <_printf_common+0x3e>
 80094f0:	18e1      	adds	r1, r4, r3
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	2030      	movs	r0, #48	; 0x30
 80094f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094fa:	4422      	add	r2, r4
 80094fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009504:	3302      	adds	r3, #2
 8009506:	e7c7      	b.n	8009498 <_printf_common+0x58>
 8009508:	2301      	movs	r3, #1
 800950a:	4622      	mov	r2, r4
 800950c:	4649      	mov	r1, r9
 800950e:	4638      	mov	r0, r7
 8009510:	47c0      	blx	r8
 8009512:	3001      	adds	r0, #1
 8009514:	d0e6      	beq.n	80094e4 <_printf_common+0xa4>
 8009516:	3601      	adds	r6, #1
 8009518:	e7d9      	b.n	80094ce <_printf_common+0x8e>
	...

0800951c <_printf_i>:
 800951c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	460c      	mov	r4, r1
 8009522:	4691      	mov	r9, r2
 8009524:	7e27      	ldrb	r7, [r4, #24]
 8009526:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009528:	2f78      	cmp	r7, #120	; 0x78
 800952a:	4680      	mov	r8, r0
 800952c:	469a      	mov	sl, r3
 800952e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009532:	d807      	bhi.n	8009544 <_printf_i+0x28>
 8009534:	2f62      	cmp	r7, #98	; 0x62
 8009536:	d80a      	bhi.n	800954e <_printf_i+0x32>
 8009538:	2f00      	cmp	r7, #0
 800953a:	f000 80d8 	beq.w	80096ee <_printf_i+0x1d2>
 800953e:	2f58      	cmp	r7, #88	; 0x58
 8009540:	f000 80a3 	beq.w	800968a <_printf_i+0x16e>
 8009544:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800954c:	e03a      	b.n	80095c4 <_printf_i+0xa8>
 800954e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009552:	2b15      	cmp	r3, #21
 8009554:	d8f6      	bhi.n	8009544 <_printf_i+0x28>
 8009556:	a001      	add	r0, pc, #4	; (adr r0, 800955c <_printf_i+0x40>)
 8009558:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800955c:	080095b5 	.word	0x080095b5
 8009560:	080095c9 	.word	0x080095c9
 8009564:	08009545 	.word	0x08009545
 8009568:	08009545 	.word	0x08009545
 800956c:	08009545 	.word	0x08009545
 8009570:	08009545 	.word	0x08009545
 8009574:	080095c9 	.word	0x080095c9
 8009578:	08009545 	.word	0x08009545
 800957c:	08009545 	.word	0x08009545
 8009580:	08009545 	.word	0x08009545
 8009584:	08009545 	.word	0x08009545
 8009588:	080096d5 	.word	0x080096d5
 800958c:	080095f9 	.word	0x080095f9
 8009590:	080096b7 	.word	0x080096b7
 8009594:	08009545 	.word	0x08009545
 8009598:	08009545 	.word	0x08009545
 800959c:	080096f7 	.word	0x080096f7
 80095a0:	08009545 	.word	0x08009545
 80095a4:	080095f9 	.word	0x080095f9
 80095a8:	08009545 	.word	0x08009545
 80095ac:	08009545 	.word	0x08009545
 80095b0:	080096bf 	.word	0x080096bf
 80095b4:	680b      	ldr	r3, [r1, #0]
 80095b6:	1d1a      	adds	r2, r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	600a      	str	r2, [r1, #0]
 80095bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095c4:	2301      	movs	r3, #1
 80095c6:	e0a3      	b.n	8009710 <_printf_i+0x1f4>
 80095c8:	6825      	ldr	r5, [r4, #0]
 80095ca:	6808      	ldr	r0, [r1, #0]
 80095cc:	062e      	lsls	r6, r5, #24
 80095ce:	f100 0304 	add.w	r3, r0, #4
 80095d2:	d50a      	bpl.n	80095ea <_printf_i+0xce>
 80095d4:	6805      	ldr	r5, [r0, #0]
 80095d6:	600b      	str	r3, [r1, #0]
 80095d8:	2d00      	cmp	r5, #0
 80095da:	da03      	bge.n	80095e4 <_printf_i+0xc8>
 80095dc:	232d      	movs	r3, #45	; 0x2d
 80095de:	426d      	negs	r5, r5
 80095e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e4:	485e      	ldr	r0, [pc, #376]	; (8009760 <_printf_i+0x244>)
 80095e6:	230a      	movs	r3, #10
 80095e8:	e019      	b.n	800961e <_printf_i+0x102>
 80095ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80095ee:	6805      	ldr	r5, [r0, #0]
 80095f0:	600b      	str	r3, [r1, #0]
 80095f2:	bf18      	it	ne
 80095f4:	b22d      	sxthne	r5, r5
 80095f6:	e7ef      	b.n	80095d8 <_printf_i+0xbc>
 80095f8:	680b      	ldr	r3, [r1, #0]
 80095fa:	6825      	ldr	r5, [r4, #0]
 80095fc:	1d18      	adds	r0, r3, #4
 80095fe:	6008      	str	r0, [r1, #0]
 8009600:	0628      	lsls	r0, r5, #24
 8009602:	d501      	bpl.n	8009608 <_printf_i+0xec>
 8009604:	681d      	ldr	r5, [r3, #0]
 8009606:	e002      	b.n	800960e <_printf_i+0xf2>
 8009608:	0669      	lsls	r1, r5, #25
 800960a:	d5fb      	bpl.n	8009604 <_printf_i+0xe8>
 800960c:	881d      	ldrh	r5, [r3, #0]
 800960e:	4854      	ldr	r0, [pc, #336]	; (8009760 <_printf_i+0x244>)
 8009610:	2f6f      	cmp	r7, #111	; 0x6f
 8009612:	bf0c      	ite	eq
 8009614:	2308      	moveq	r3, #8
 8009616:	230a      	movne	r3, #10
 8009618:	2100      	movs	r1, #0
 800961a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800961e:	6866      	ldr	r6, [r4, #4]
 8009620:	60a6      	str	r6, [r4, #8]
 8009622:	2e00      	cmp	r6, #0
 8009624:	bfa2      	ittt	ge
 8009626:	6821      	ldrge	r1, [r4, #0]
 8009628:	f021 0104 	bicge.w	r1, r1, #4
 800962c:	6021      	strge	r1, [r4, #0]
 800962e:	b90d      	cbnz	r5, 8009634 <_printf_i+0x118>
 8009630:	2e00      	cmp	r6, #0
 8009632:	d04d      	beq.n	80096d0 <_printf_i+0x1b4>
 8009634:	4616      	mov	r6, r2
 8009636:	fbb5 f1f3 	udiv	r1, r5, r3
 800963a:	fb03 5711 	mls	r7, r3, r1, r5
 800963e:	5dc7      	ldrb	r7, [r0, r7]
 8009640:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009644:	462f      	mov	r7, r5
 8009646:	42bb      	cmp	r3, r7
 8009648:	460d      	mov	r5, r1
 800964a:	d9f4      	bls.n	8009636 <_printf_i+0x11a>
 800964c:	2b08      	cmp	r3, #8
 800964e:	d10b      	bne.n	8009668 <_printf_i+0x14c>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	07df      	lsls	r7, r3, #31
 8009654:	d508      	bpl.n	8009668 <_printf_i+0x14c>
 8009656:	6923      	ldr	r3, [r4, #16]
 8009658:	6861      	ldr	r1, [r4, #4]
 800965a:	4299      	cmp	r1, r3
 800965c:	bfde      	ittt	le
 800965e:	2330      	movle	r3, #48	; 0x30
 8009660:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009664:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009668:	1b92      	subs	r2, r2, r6
 800966a:	6122      	str	r2, [r4, #16]
 800966c:	f8cd a000 	str.w	sl, [sp]
 8009670:	464b      	mov	r3, r9
 8009672:	aa03      	add	r2, sp, #12
 8009674:	4621      	mov	r1, r4
 8009676:	4640      	mov	r0, r8
 8009678:	f7ff fee2 	bl	8009440 <_printf_common>
 800967c:	3001      	adds	r0, #1
 800967e:	d14c      	bne.n	800971a <_printf_i+0x1fe>
 8009680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009684:	b004      	add	sp, #16
 8009686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968a:	4835      	ldr	r0, [pc, #212]	; (8009760 <_printf_i+0x244>)
 800968c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	680e      	ldr	r6, [r1, #0]
 8009694:	061f      	lsls	r7, r3, #24
 8009696:	f856 5b04 	ldr.w	r5, [r6], #4
 800969a:	600e      	str	r6, [r1, #0]
 800969c:	d514      	bpl.n	80096c8 <_printf_i+0x1ac>
 800969e:	07d9      	lsls	r1, r3, #31
 80096a0:	bf44      	itt	mi
 80096a2:	f043 0320 	orrmi.w	r3, r3, #32
 80096a6:	6023      	strmi	r3, [r4, #0]
 80096a8:	b91d      	cbnz	r5, 80096b2 <_printf_i+0x196>
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	f023 0320 	bic.w	r3, r3, #32
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	2310      	movs	r3, #16
 80096b4:	e7b0      	b.n	8009618 <_printf_i+0xfc>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	f043 0320 	orr.w	r3, r3, #32
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	2378      	movs	r3, #120	; 0x78
 80096c0:	4828      	ldr	r0, [pc, #160]	; (8009764 <_printf_i+0x248>)
 80096c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096c6:	e7e3      	b.n	8009690 <_printf_i+0x174>
 80096c8:	065e      	lsls	r6, r3, #25
 80096ca:	bf48      	it	mi
 80096cc:	b2ad      	uxthmi	r5, r5
 80096ce:	e7e6      	b.n	800969e <_printf_i+0x182>
 80096d0:	4616      	mov	r6, r2
 80096d2:	e7bb      	b.n	800964c <_printf_i+0x130>
 80096d4:	680b      	ldr	r3, [r1, #0]
 80096d6:	6826      	ldr	r6, [r4, #0]
 80096d8:	6960      	ldr	r0, [r4, #20]
 80096da:	1d1d      	adds	r5, r3, #4
 80096dc:	600d      	str	r5, [r1, #0]
 80096de:	0635      	lsls	r5, r6, #24
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	d501      	bpl.n	80096e8 <_printf_i+0x1cc>
 80096e4:	6018      	str	r0, [r3, #0]
 80096e6:	e002      	b.n	80096ee <_printf_i+0x1d2>
 80096e8:	0671      	lsls	r1, r6, #25
 80096ea:	d5fb      	bpl.n	80096e4 <_printf_i+0x1c8>
 80096ec:	8018      	strh	r0, [r3, #0]
 80096ee:	2300      	movs	r3, #0
 80096f0:	6123      	str	r3, [r4, #16]
 80096f2:	4616      	mov	r6, r2
 80096f4:	e7ba      	b.n	800966c <_printf_i+0x150>
 80096f6:	680b      	ldr	r3, [r1, #0]
 80096f8:	1d1a      	adds	r2, r3, #4
 80096fa:	600a      	str	r2, [r1, #0]
 80096fc:	681e      	ldr	r6, [r3, #0]
 80096fe:	6862      	ldr	r2, [r4, #4]
 8009700:	2100      	movs	r1, #0
 8009702:	4630      	mov	r0, r6
 8009704:	f7f6 fdcc 	bl	80002a0 <memchr>
 8009708:	b108      	cbz	r0, 800970e <_printf_i+0x1f2>
 800970a:	1b80      	subs	r0, r0, r6
 800970c:	6060      	str	r0, [r4, #4]
 800970e:	6863      	ldr	r3, [r4, #4]
 8009710:	6123      	str	r3, [r4, #16]
 8009712:	2300      	movs	r3, #0
 8009714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009718:	e7a8      	b.n	800966c <_printf_i+0x150>
 800971a:	6923      	ldr	r3, [r4, #16]
 800971c:	4632      	mov	r2, r6
 800971e:	4649      	mov	r1, r9
 8009720:	4640      	mov	r0, r8
 8009722:	47d0      	blx	sl
 8009724:	3001      	adds	r0, #1
 8009726:	d0ab      	beq.n	8009680 <_printf_i+0x164>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	079b      	lsls	r3, r3, #30
 800972c:	d413      	bmi.n	8009756 <_printf_i+0x23a>
 800972e:	68e0      	ldr	r0, [r4, #12]
 8009730:	9b03      	ldr	r3, [sp, #12]
 8009732:	4298      	cmp	r0, r3
 8009734:	bfb8      	it	lt
 8009736:	4618      	movlt	r0, r3
 8009738:	e7a4      	b.n	8009684 <_printf_i+0x168>
 800973a:	2301      	movs	r3, #1
 800973c:	4632      	mov	r2, r6
 800973e:	4649      	mov	r1, r9
 8009740:	4640      	mov	r0, r8
 8009742:	47d0      	blx	sl
 8009744:	3001      	adds	r0, #1
 8009746:	d09b      	beq.n	8009680 <_printf_i+0x164>
 8009748:	3501      	adds	r5, #1
 800974a:	68e3      	ldr	r3, [r4, #12]
 800974c:	9903      	ldr	r1, [sp, #12]
 800974e:	1a5b      	subs	r3, r3, r1
 8009750:	42ab      	cmp	r3, r5
 8009752:	dcf2      	bgt.n	800973a <_printf_i+0x21e>
 8009754:	e7eb      	b.n	800972e <_printf_i+0x212>
 8009756:	2500      	movs	r5, #0
 8009758:	f104 0619 	add.w	r6, r4, #25
 800975c:	e7f5      	b.n	800974a <_printf_i+0x22e>
 800975e:	bf00      	nop
 8009760:	0800c1ae 	.word	0x0800c1ae
 8009764:	0800c1bf 	.word	0x0800c1bf

08009768 <siprintf>:
 8009768:	b40e      	push	{r1, r2, r3}
 800976a:	b500      	push	{lr}
 800976c:	b09c      	sub	sp, #112	; 0x70
 800976e:	ab1d      	add	r3, sp, #116	; 0x74
 8009770:	9002      	str	r0, [sp, #8]
 8009772:	9006      	str	r0, [sp, #24]
 8009774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009778:	4809      	ldr	r0, [pc, #36]	; (80097a0 <siprintf+0x38>)
 800977a:	9107      	str	r1, [sp, #28]
 800977c:	9104      	str	r1, [sp, #16]
 800977e:	4909      	ldr	r1, [pc, #36]	; (80097a4 <siprintf+0x3c>)
 8009780:	f853 2b04 	ldr.w	r2, [r3], #4
 8009784:	9105      	str	r1, [sp, #20]
 8009786:	6800      	ldr	r0, [r0, #0]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	a902      	add	r1, sp, #8
 800978c:	f001 fb22 	bl	800add4 <_svfiprintf_r>
 8009790:	9b02      	ldr	r3, [sp, #8]
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
 8009796:	b01c      	add	sp, #112	; 0x70
 8009798:	f85d eb04 	ldr.w	lr, [sp], #4
 800979c:	b003      	add	sp, #12
 800979e:	4770      	bx	lr
 80097a0:	20000038 	.word	0x20000038
 80097a4:	ffff0208 	.word	0xffff0208

080097a8 <quorem>:
 80097a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	6903      	ldr	r3, [r0, #16]
 80097ae:	690c      	ldr	r4, [r1, #16]
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	4607      	mov	r7, r0
 80097b4:	f2c0 8081 	blt.w	80098ba <quorem+0x112>
 80097b8:	3c01      	subs	r4, #1
 80097ba:	f101 0814 	add.w	r8, r1, #20
 80097be:	f100 0514 	add.w	r5, r0, #20
 80097c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097c6:	9301      	str	r3, [sp, #4]
 80097c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097d0:	3301      	adds	r3, #1
 80097d2:	429a      	cmp	r2, r3
 80097d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80097d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80097e0:	d331      	bcc.n	8009846 <quorem+0x9e>
 80097e2:	f04f 0e00 	mov.w	lr, #0
 80097e6:	4640      	mov	r0, r8
 80097e8:	46ac      	mov	ip, r5
 80097ea:	46f2      	mov	sl, lr
 80097ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80097f0:	b293      	uxth	r3, r2
 80097f2:	fb06 e303 	mla	r3, r6, r3, lr
 80097f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	ebaa 0303 	sub.w	r3, sl, r3
 8009800:	0c12      	lsrs	r2, r2, #16
 8009802:	f8dc a000 	ldr.w	sl, [ip]
 8009806:	fb06 e202 	mla	r2, r6, r2, lr
 800980a:	fa13 f38a 	uxtah	r3, r3, sl
 800980e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009812:	fa1f fa82 	uxth.w	sl, r2
 8009816:	f8dc 2000 	ldr.w	r2, [ip]
 800981a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800981e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009822:	b29b      	uxth	r3, r3
 8009824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009828:	4581      	cmp	r9, r0
 800982a:	f84c 3b04 	str.w	r3, [ip], #4
 800982e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009832:	d2db      	bcs.n	80097ec <quorem+0x44>
 8009834:	f855 300b 	ldr.w	r3, [r5, fp]
 8009838:	b92b      	cbnz	r3, 8009846 <quorem+0x9e>
 800983a:	9b01      	ldr	r3, [sp, #4]
 800983c:	3b04      	subs	r3, #4
 800983e:	429d      	cmp	r5, r3
 8009840:	461a      	mov	r2, r3
 8009842:	d32e      	bcc.n	80098a2 <quorem+0xfa>
 8009844:	613c      	str	r4, [r7, #16]
 8009846:	4638      	mov	r0, r7
 8009848:	f001 f8b0 	bl	800a9ac <__mcmp>
 800984c:	2800      	cmp	r0, #0
 800984e:	db24      	blt.n	800989a <quorem+0xf2>
 8009850:	3601      	adds	r6, #1
 8009852:	4628      	mov	r0, r5
 8009854:	f04f 0c00 	mov.w	ip, #0
 8009858:	f858 2b04 	ldr.w	r2, [r8], #4
 800985c:	f8d0 e000 	ldr.w	lr, [r0]
 8009860:	b293      	uxth	r3, r2
 8009862:	ebac 0303 	sub.w	r3, ip, r3
 8009866:	0c12      	lsrs	r2, r2, #16
 8009868:	fa13 f38e 	uxtah	r3, r3, lr
 800986c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009874:	b29b      	uxth	r3, r3
 8009876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800987a:	45c1      	cmp	r9, r8
 800987c:	f840 3b04 	str.w	r3, [r0], #4
 8009880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009884:	d2e8      	bcs.n	8009858 <quorem+0xb0>
 8009886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800988a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800988e:	b922      	cbnz	r2, 800989a <quorem+0xf2>
 8009890:	3b04      	subs	r3, #4
 8009892:	429d      	cmp	r5, r3
 8009894:	461a      	mov	r2, r3
 8009896:	d30a      	bcc.n	80098ae <quorem+0x106>
 8009898:	613c      	str	r4, [r7, #16]
 800989a:	4630      	mov	r0, r6
 800989c:	b003      	add	sp, #12
 800989e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a2:	6812      	ldr	r2, [r2, #0]
 80098a4:	3b04      	subs	r3, #4
 80098a6:	2a00      	cmp	r2, #0
 80098a8:	d1cc      	bne.n	8009844 <quorem+0x9c>
 80098aa:	3c01      	subs	r4, #1
 80098ac:	e7c7      	b.n	800983e <quorem+0x96>
 80098ae:	6812      	ldr	r2, [r2, #0]
 80098b0:	3b04      	subs	r3, #4
 80098b2:	2a00      	cmp	r2, #0
 80098b4:	d1f0      	bne.n	8009898 <quorem+0xf0>
 80098b6:	3c01      	subs	r4, #1
 80098b8:	e7eb      	b.n	8009892 <quorem+0xea>
 80098ba:	2000      	movs	r0, #0
 80098bc:	e7ee      	b.n	800989c <quorem+0xf4>
	...

080098c0 <_dtoa_r>:
 80098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	ed2d 8b02 	vpush	{d8}
 80098c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098ca:	b095      	sub	sp, #84	; 0x54
 80098cc:	4616      	mov	r6, r2
 80098ce:	461f      	mov	r7, r3
 80098d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80098d4:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 80098d8:	4604      	mov	r4, r0
 80098da:	b975      	cbnz	r5, 80098fa <_dtoa_r+0x3a>
 80098dc:	2010      	movs	r0, #16
 80098de:	f000 fddf 	bl	800a4a0 <malloc>
 80098e2:	4602      	mov	r2, r0
 80098e4:	6260      	str	r0, [r4, #36]	; 0x24
 80098e6:	b920      	cbnz	r0, 80098f2 <_dtoa_r+0x32>
 80098e8:	4bb1      	ldr	r3, [pc, #708]	; (8009bb0 <_dtoa_r+0x2f0>)
 80098ea:	21ea      	movs	r1, #234	; 0xea
 80098ec:	48b1      	ldr	r0, [pc, #708]	; (8009bb4 <_dtoa_r+0x2f4>)
 80098ee:	f001 fb81 	bl	800aff4 <__assert_func>
 80098f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098f6:	6005      	str	r5, [r0, #0]
 80098f8:	60c5      	str	r5, [r0, #12]
 80098fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098fc:	6819      	ldr	r1, [r3, #0]
 80098fe:	b151      	cbz	r1, 8009916 <_dtoa_r+0x56>
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	604a      	str	r2, [r1, #4]
 8009904:	2301      	movs	r3, #1
 8009906:	4093      	lsls	r3, r2
 8009908:	608b      	str	r3, [r1, #8]
 800990a:	4620      	mov	r0, r4
 800990c:	f000 fe10 	bl	800a530 <_Bfree>
 8009910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	1e3b      	subs	r3, r7, #0
 8009918:	bfb9      	ittee	lt
 800991a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800991e:	9305      	strlt	r3, [sp, #20]
 8009920:	2300      	movge	r3, #0
 8009922:	f8c8 3000 	strge.w	r3, [r8]
 8009926:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800992a:	4ba3      	ldr	r3, [pc, #652]	; (8009bb8 <_dtoa_r+0x2f8>)
 800992c:	bfbc      	itt	lt
 800992e:	2201      	movlt	r2, #1
 8009930:	f8c8 2000 	strlt.w	r2, [r8]
 8009934:	ea33 0309 	bics.w	r3, r3, r9
 8009938:	d11b      	bne.n	8009972 <_dtoa_r+0xb2>
 800993a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800993c:	f242 730f 	movw	r3, #9999	; 0x270f
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009946:	4333      	orrs	r3, r6
 8009948:	f000 857d 	beq.w	800a446 <_dtoa_r+0xb86>
 800994c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800994e:	b963      	cbnz	r3, 800996a <_dtoa_r+0xaa>
 8009950:	4b9a      	ldr	r3, [pc, #616]	; (8009bbc <_dtoa_r+0x2fc>)
 8009952:	e024      	b.n	800999e <_dtoa_r+0xde>
 8009954:	4b9a      	ldr	r3, [pc, #616]	; (8009bc0 <_dtoa_r+0x300>)
 8009956:	9303      	str	r3, [sp, #12]
 8009958:	3308      	adds	r3, #8
 800995a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	9803      	ldr	r0, [sp, #12]
 8009960:	b015      	add	sp, #84	; 0x54
 8009962:	ecbd 8b02 	vpop	{d8}
 8009966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996a:	4b94      	ldr	r3, [pc, #592]	; (8009bbc <_dtoa_r+0x2fc>)
 800996c:	9303      	str	r3, [sp, #12]
 800996e:	3303      	adds	r3, #3
 8009970:	e7f3      	b.n	800995a <_dtoa_r+0x9a>
 8009972:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009976:	2200      	movs	r2, #0
 8009978:	ec51 0b17 	vmov	r0, r1, d7
 800997c:	2300      	movs	r3, #0
 800997e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009982:	f7f7 f901 	bl	8000b88 <__aeabi_dcmpeq>
 8009986:	4680      	mov	r8, r0
 8009988:	b158      	cbz	r0, 80099a2 <_dtoa_r+0xe2>
 800998a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800998c:	2301      	movs	r3, #1
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 8554 	beq.w	800a440 <_dtoa_r+0xb80>
 8009998:	488a      	ldr	r0, [pc, #552]	; (8009bc4 <_dtoa_r+0x304>)
 800999a:	6018      	str	r0, [r3, #0]
 800999c:	1e43      	subs	r3, r0, #1
 800999e:	9303      	str	r3, [sp, #12]
 80099a0:	e7dd      	b.n	800995e <_dtoa_r+0x9e>
 80099a2:	ab12      	add	r3, sp, #72	; 0x48
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	ab13      	add	r3, sp, #76	; 0x4c
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	4620      	mov	r0, r4
 80099ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80099b0:	f001 f8a0 	bl	800aaf4 <__d2b>
 80099b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80099b8:	4683      	mov	fp, r0
 80099ba:	2d00      	cmp	r5, #0
 80099bc:	d07c      	beq.n	8009ab8 <_dtoa_r+0x1f8>
 80099be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099c0:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80099c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099c8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80099cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80099d0:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80099d4:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80099d8:	4b7b      	ldr	r3, [pc, #492]	; (8009bc8 <_dtoa_r+0x308>)
 80099da:	2200      	movs	r2, #0
 80099dc:	4630      	mov	r0, r6
 80099de:	4639      	mov	r1, r7
 80099e0:	f7f6 fcb2 	bl	8000348 <__aeabi_dsub>
 80099e4:	a36c      	add	r3, pc, #432	; (adr r3, 8009b98 <_dtoa_r+0x2d8>)
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	f7f6 fe65 	bl	80006b8 <__aeabi_dmul>
 80099ee:	a36c      	add	r3, pc, #432	; (adr r3, 8009ba0 <_dtoa_r+0x2e0>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f7f6 fcaa 	bl	800034c <__adddf3>
 80099f8:	4606      	mov	r6, r0
 80099fa:	4628      	mov	r0, r5
 80099fc:	460f      	mov	r7, r1
 80099fe:	f7f6 fdf1 	bl	80005e4 <__aeabi_i2d>
 8009a02:	a369      	add	r3, pc, #420	; (adr r3, 8009ba8 <_dtoa_r+0x2e8>)
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f7f6 fe56 	bl	80006b8 <__aeabi_dmul>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f6 fc9a 	bl	800034c <__adddf3>
 8009a18:	4606      	mov	r6, r0
 8009a1a:	460f      	mov	r7, r1
 8009a1c:	f7f7 f8fc 	bl	8000c18 <__aeabi_d2iz>
 8009a20:	2200      	movs	r2, #0
 8009a22:	4682      	mov	sl, r0
 8009a24:	2300      	movs	r3, #0
 8009a26:	4630      	mov	r0, r6
 8009a28:	4639      	mov	r1, r7
 8009a2a:	f7f7 f8b7 	bl	8000b9c <__aeabi_dcmplt>
 8009a2e:	b148      	cbz	r0, 8009a44 <_dtoa_r+0x184>
 8009a30:	4650      	mov	r0, sl
 8009a32:	f7f6 fdd7 	bl	80005e4 <__aeabi_i2d>
 8009a36:	4632      	mov	r2, r6
 8009a38:	463b      	mov	r3, r7
 8009a3a:	f7f7 f8a5 	bl	8000b88 <__aeabi_dcmpeq>
 8009a3e:	b908      	cbnz	r0, 8009a44 <_dtoa_r+0x184>
 8009a40:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009a44:	f1ba 0f16 	cmp.w	sl, #22
 8009a48:	d854      	bhi.n	8009af4 <_dtoa_r+0x234>
 8009a4a:	4b60      	ldr	r3, [pc, #384]	; (8009bcc <_dtoa_r+0x30c>)
 8009a4c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a58:	f7f7 f8a0 	bl	8000b9c <__aeabi_dcmplt>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d04b      	beq.n	8009af8 <_dtoa_r+0x238>
 8009a60:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009a64:	2300      	movs	r3, #0
 8009a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a6a:	1b5d      	subs	r5, r3, r5
 8009a6c:	1e6b      	subs	r3, r5, #1
 8009a6e:	9307      	str	r3, [sp, #28]
 8009a70:	bf43      	ittte	mi
 8009a72:	2300      	movmi	r3, #0
 8009a74:	f1c5 0801 	rsbmi	r8, r5, #1
 8009a78:	9307      	strmi	r3, [sp, #28]
 8009a7a:	f04f 0800 	movpl.w	r8, #0
 8009a7e:	f1ba 0f00 	cmp.w	sl, #0
 8009a82:	db3b      	blt.n	8009afc <_dtoa_r+0x23c>
 8009a84:	9b07      	ldr	r3, [sp, #28]
 8009a86:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009a8a:	4453      	add	r3, sl
 8009a8c:	9307      	str	r3, [sp, #28]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9308      	str	r3, [sp, #32]
 8009a92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a94:	2b09      	cmp	r3, #9
 8009a96:	d869      	bhi.n	8009b6c <_dtoa_r+0x2ac>
 8009a98:	2b05      	cmp	r3, #5
 8009a9a:	bfc4      	itt	gt
 8009a9c:	3b04      	subgt	r3, #4
 8009a9e:	9320      	strgt	r3, [sp, #128]	; 0x80
 8009aa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009aa2:	f1a3 0302 	sub.w	r3, r3, #2
 8009aa6:	bfcc      	ite	gt
 8009aa8:	2500      	movgt	r5, #0
 8009aaa:	2501      	movle	r5, #1
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d869      	bhi.n	8009b84 <_dtoa_r+0x2c4>
 8009ab0:	e8df f003 	tbb	[pc, r3]
 8009ab4:	5a4c4e2c 	.word	0x5a4c4e2c
 8009ab8:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009abc:	441d      	add	r5, r3
 8009abe:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ac2:	2b20      	cmp	r3, #32
 8009ac4:	bfc1      	itttt	gt
 8009ac6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009aca:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009ace:	fa09 f303 	lslgt.w	r3, r9, r3
 8009ad2:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009ad6:	bfda      	itte	le
 8009ad8:	f1c3 0320 	rsble	r3, r3, #32
 8009adc:	fa06 f003 	lslle.w	r0, r6, r3
 8009ae0:	4318      	orrgt	r0, r3
 8009ae2:	f7f6 fd6f 	bl	80005c4 <__aeabi_ui2d>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4606      	mov	r6, r0
 8009aea:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009aee:	3d01      	subs	r5, #1
 8009af0:	9310      	str	r3, [sp, #64]	; 0x40
 8009af2:	e771      	b.n	80099d8 <_dtoa_r+0x118>
 8009af4:	2301      	movs	r3, #1
 8009af6:	e7b6      	b.n	8009a66 <_dtoa_r+0x1a6>
 8009af8:	900f      	str	r0, [sp, #60]	; 0x3c
 8009afa:	e7b5      	b.n	8009a68 <_dtoa_r+0x1a8>
 8009afc:	f1ca 0300 	rsb	r3, sl, #0
 8009b00:	9308      	str	r3, [sp, #32]
 8009b02:	2300      	movs	r3, #0
 8009b04:	eba8 080a 	sub.w	r8, r8, sl
 8009b08:	930e      	str	r3, [sp, #56]	; 0x38
 8009b0a:	e7c2      	b.n	8009a92 <_dtoa_r+0x1d2>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dc39      	bgt.n	8009b8a <_dtoa_r+0x2ca>
 8009b16:	f04f 0901 	mov.w	r9, #1
 8009b1a:	f8cd 9018 	str.w	r9, [sp, #24]
 8009b1e:	464b      	mov	r3, r9
 8009b20:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8009b24:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b26:	2200      	movs	r2, #0
 8009b28:	6042      	str	r2, [r0, #4]
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	f102 0614 	add.w	r6, r2, #20
 8009b30:	429e      	cmp	r6, r3
 8009b32:	6841      	ldr	r1, [r0, #4]
 8009b34:	d94e      	bls.n	8009bd4 <_dtoa_r+0x314>
 8009b36:	4620      	mov	r0, r4
 8009b38:	f000 fcba 	bl	800a4b0 <_Balloc>
 8009b3c:	9003      	str	r0, [sp, #12]
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d14c      	bne.n	8009bdc <_dtoa_r+0x31c>
 8009b42:	4b23      	ldr	r3, [pc, #140]	; (8009bd0 <_dtoa_r+0x310>)
 8009b44:	4602      	mov	r2, r0
 8009b46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b4a:	e6cf      	b.n	80098ec <_dtoa_r+0x2c>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e7de      	b.n	8009b0e <_dtoa_r+0x24e>
 8009b50:	2300      	movs	r3, #0
 8009b52:	930c      	str	r3, [sp, #48]	; 0x30
 8009b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b56:	eb0a 0903 	add.w	r9, sl, r3
 8009b5a:	f109 0301 	add.w	r3, r9, #1
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	9306      	str	r3, [sp, #24]
 8009b62:	bfb8      	it	lt
 8009b64:	2301      	movlt	r3, #1
 8009b66:	e7dd      	b.n	8009b24 <_dtoa_r+0x264>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e7f2      	b.n	8009b52 <_dtoa_r+0x292>
 8009b6c:	2501      	movs	r5, #1
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9320      	str	r3, [sp, #128]	; 0x80
 8009b72:	950c      	str	r5, [sp, #48]	; 0x30
 8009b74:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8cd 9018 	str.w	r9, [sp, #24]
 8009b7e:	2312      	movs	r3, #18
 8009b80:	9221      	str	r2, [sp, #132]	; 0x84
 8009b82:	e7cf      	b.n	8009b24 <_dtoa_r+0x264>
 8009b84:	2301      	movs	r3, #1
 8009b86:	930c      	str	r3, [sp, #48]	; 0x30
 8009b88:	e7f4      	b.n	8009b74 <_dtoa_r+0x2b4>
 8009b8a:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8009b8e:	f8cd 9018 	str.w	r9, [sp, #24]
 8009b92:	464b      	mov	r3, r9
 8009b94:	e7c6      	b.n	8009b24 <_dtoa_r+0x264>
 8009b96:	bf00      	nop
 8009b98:	636f4361 	.word	0x636f4361
 8009b9c:	3fd287a7 	.word	0x3fd287a7
 8009ba0:	8b60c8b3 	.word	0x8b60c8b3
 8009ba4:	3fc68a28 	.word	0x3fc68a28
 8009ba8:	509f79fb 	.word	0x509f79fb
 8009bac:	3fd34413 	.word	0x3fd34413
 8009bb0:	0800c1dd 	.word	0x0800c1dd
 8009bb4:	0800c1f4 	.word	0x0800c1f4
 8009bb8:	7ff00000 	.word	0x7ff00000
 8009bbc:	0800c1d9 	.word	0x0800c1d9
 8009bc0:	0800c1d0 	.word	0x0800c1d0
 8009bc4:	0800c1ad 	.word	0x0800c1ad
 8009bc8:	3ff80000 	.word	0x3ff80000
 8009bcc:	0800c2f0 	.word	0x0800c2f0
 8009bd0:	0800c253 	.word	0x0800c253
 8009bd4:	3101      	adds	r1, #1
 8009bd6:	6041      	str	r1, [r0, #4]
 8009bd8:	0052      	lsls	r2, r2, #1
 8009bda:	e7a7      	b.n	8009b2c <_dtoa_r+0x26c>
 8009bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bde:	9a03      	ldr	r2, [sp, #12]
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	9b06      	ldr	r3, [sp, #24]
 8009be4:	2b0e      	cmp	r3, #14
 8009be6:	f200 80ad 	bhi.w	8009d44 <_dtoa_r+0x484>
 8009bea:	2d00      	cmp	r5, #0
 8009bec:	f000 80aa 	beq.w	8009d44 <_dtoa_r+0x484>
 8009bf0:	f1ba 0f00 	cmp.w	sl, #0
 8009bf4:	dd36      	ble.n	8009c64 <_dtoa_r+0x3a4>
 8009bf6:	4ac3      	ldr	r2, [pc, #780]	; (8009f04 <_dtoa_r+0x644>)
 8009bf8:	f00a 030f 	and.w	r3, sl, #15
 8009bfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c00:	ed93 7b00 	vldr	d7, [r3]
 8009c04:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009c08:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009c0c:	eeb0 8a47 	vmov.f32	s16, s14
 8009c10:	eef0 8a67 	vmov.f32	s17, s15
 8009c14:	d016      	beq.n	8009c44 <_dtoa_r+0x384>
 8009c16:	4bbc      	ldr	r3, [pc, #752]	; (8009f08 <_dtoa_r+0x648>)
 8009c18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c20:	f7f6 fe74 	bl	800090c <__aeabi_ddiv>
 8009c24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c28:	f007 070f 	and.w	r7, r7, #15
 8009c2c:	2503      	movs	r5, #3
 8009c2e:	4eb6      	ldr	r6, [pc, #728]	; (8009f08 <_dtoa_r+0x648>)
 8009c30:	b957      	cbnz	r7, 8009c48 <_dtoa_r+0x388>
 8009c32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c36:	ec53 2b18 	vmov	r2, r3, d8
 8009c3a:	f7f6 fe67 	bl	800090c <__aeabi_ddiv>
 8009c3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c42:	e029      	b.n	8009c98 <_dtoa_r+0x3d8>
 8009c44:	2502      	movs	r5, #2
 8009c46:	e7f2      	b.n	8009c2e <_dtoa_r+0x36e>
 8009c48:	07f9      	lsls	r1, r7, #31
 8009c4a:	d508      	bpl.n	8009c5e <_dtoa_r+0x39e>
 8009c4c:	ec51 0b18 	vmov	r0, r1, d8
 8009c50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c54:	f7f6 fd30 	bl	80006b8 <__aeabi_dmul>
 8009c58:	ec41 0b18 	vmov	d8, r0, r1
 8009c5c:	3501      	adds	r5, #1
 8009c5e:	107f      	asrs	r7, r7, #1
 8009c60:	3608      	adds	r6, #8
 8009c62:	e7e5      	b.n	8009c30 <_dtoa_r+0x370>
 8009c64:	f000 80a6 	beq.w	8009db4 <_dtoa_r+0x4f4>
 8009c68:	f1ca 0600 	rsb	r6, sl, #0
 8009c6c:	4ba5      	ldr	r3, [pc, #660]	; (8009f04 <_dtoa_r+0x644>)
 8009c6e:	4fa6      	ldr	r7, [pc, #664]	; (8009f08 <_dtoa_r+0x648>)
 8009c70:	f006 020f 	and.w	r2, r6, #15
 8009c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c80:	f7f6 fd1a 	bl	80006b8 <__aeabi_dmul>
 8009c84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c88:	1136      	asrs	r6, r6, #4
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	2502      	movs	r5, #2
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	f040 8085 	bne.w	8009d9e <_dtoa_r+0x4de>
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1d2      	bne.n	8009c3e <_dtoa_r+0x37e>
 8009c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 808c 	beq.w	8009db8 <_dtoa_r+0x4f8>
 8009ca0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009ca4:	4b99      	ldr	r3, [pc, #612]	; (8009f0c <_dtoa_r+0x64c>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	4630      	mov	r0, r6
 8009caa:	4639      	mov	r1, r7
 8009cac:	f7f6 ff76 	bl	8000b9c <__aeabi_dcmplt>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	f000 8081 	beq.w	8009db8 <_dtoa_r+0x4f8>
 8009cb6:	9b06      	ldr	r3, [sp, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d07d      	beq.n	8009db8 <_dtoa_r+0x4f8>
 8009cbc:	f1b9 0f00 	cmp.w	r9, #0
 8009cc0:	dd3c      	ble.n	8009d3c <_dtoa_r+0x47c>
 8009cc2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc8:	2200      	movs	r2, #0
 8009cca:	4b91      	ldr	r3, [pc, #580]	; (8009f10 <_dtoa_r+0x650>)
 8009ccc:	4630      	mov	r0, r6
 8009cce:	4639      	mov	r1, r7
 8009cd0:	f7f6 fcf2 	bl	80006b8 <__aeabi_dmul>
 8009cd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cd8:	3501      	adds	r5, #1
 8009cda:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8009cde:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f7f6 fc7e 	bl	80005e4 <__aeabi_i2d>
 8009ce8:	4632      	mov	r2, r6
 8009cea:	463b      	mov	r3, r7
 8009cec:	f7f6 fce4 	bl	80006b8 <__aeabi_dmul>
 8009cf0:	4b88      	ldr	r3, [pc, #544]	; (8009f14 <_dtoa_r+0x654>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f7f6 fb2a 	bl	800034c <__adddf3>
 8009cf8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009cfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d00:	9305      	str	r3, [sp, #20]
 8009d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d15c      	bne.n	8009dc2 <_dtoa_r+0x502>
 8009d08:	4b83      	ldr	r3, [pc, #524]	; (8009f18 <_dtoa_r+0x658>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	4639      	mov	r1, r7
 8009d10:	f7f6 fb1a 	bl	8000348 <__aeabi_dsub>
 8009d14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d18:	4606      	mov	r6, r0
 8009d1a:	460f      	mov	r7, r1
 8009d1c:	f7f6 ff5c 	bl	8000bd8 <__aeabi_dcmpgt>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	f040 8296 	bne.w	800a252 <_dtoa_r+0x992>
 8009d26:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d30:	4639      	mov	r1, r7
 8009d32:	f7f6 ff33 	bl	8000b9c <__aeabi_dcmplt>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	f040 8288 	bne.w	800a24c <_dtoa_r+0x98c>
 8009d3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f2c0 8158 	blt.w	8009ffc <_dtoa_r+0x73c>
 8009d4c:	f1ba 0f0e 	cmp.w	sl, #14
 8009d50:	f300 8154 	bgt.w	8009ffc <_dtoa_r+0x73c>
 8009d54:	4b6b      	ldr	r3, [pc, #428]	; (8009f04 <_dtoa_r+0x644>)
 8009d56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f280 80e3 	bge.w	8009f2c <_dtoa_r+0x66c>
 8009d66:	9b06      	ldr	r3, [sp, #24]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f300 80df 	bgt.w	8009f2c <_dtoa_r+0x66c>
 8009d6e:	f040 826d 	bne.w	800a24c <_dtoa_r+0x98c>
 8009d72:	4b69      	ldr	r3, [pc, #420]	; (8009f18 <_dtoa_r+0x658>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	4640      	mov	r0, r8
 8009d78:	4649      	mov	r1, r9
 8009d7a:	f7f6 fc9d 	bl	80006b8 <__aeabi_dmul>
 8009d7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d82:	f7f6 ff1f 	bl	8000bc4 <__aeabi_dcmpge>
 8009d86:	9e06      	ldr	r6, [sp, #24]
 8009d88:	4637      	mov	r7, r6
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	f040 8243 	bne.w	800a216 <_dtoa_r+0x956>
 8009d90:	9d03      	ldr	r5, [sp, #12]
 8009d92:	2331      	movs	r3, #49	; 0x31
 8009d94:	f805 3b01 	strb.w	r3, [r5], #1
 8009d98:	f10a 0a01 	add.w	sl, sl, #1
 8009d9c:	e23f      	b.n	800a21e <_dtoa_r+0x95e>
 8009d9e:	07f2      	lsls	r2, r6, #31
 8009da0:	d505      	bpl.n	8009dae <_dtoa_r+0x4ee>
 8009da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009da6:	f7f6 fc87 	bl	80006b8 <__aeabi_dmul>
 8009daa:	3501      	adds	r5, #1
 8009dac:	2301      	movs	r3, #1
 8009dae:	1076      	asrs	r6, r6, #1
 8009db0:	3708      	adds	r7, #8
 8009db2:	e76c      	b.n	8009c8e <_dtoa_r+0x3ce>
 8009db4:	2502      	movs	r5, #2
 8009db6:	e76f      	b.n	8009c98 <_dtoa_r+0x3d8>
 8009db8:	9b06      	ldr	r3, [sp, #24]
 8009dba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009dbe:	930d      	str	r3, [sp, #52]	; 0x34
 8009dc0:	e78d      	b.n	8009cde <_dtoa_r+0x41e>
 8009dc2:	9903      	ldr	r1, [sp, #12]
 8009dc4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dc8:	4b4e      	ldr	r3, [pc, #312]	; (8009f04 <_dtoa_r+0x644>)
 8009dca:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009dce:	4401      	add	r1, r0
 8009dd0:	9104      	str	r1, [sp, #16]
 8009dd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009dd4:	eeb0 8a47 	vmov.f32	s16, s14
 8009dd8:	eef0 8a67 	vmov.f32	s17, s15
 8009ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009de0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009de4:	2900      	cmp	r1, #0
 8009de6:	d045      	beq.n	8009e74 <_dtoa_r+0x5b4>
 8009de8:	494c      	ldr	r1, [pc, #304]	; (8009f1c <_dtoa_r+0x65c>)
 8009dea:	2000      	movs	r0, #0
 8009dec:	f7f6 fd8e 	bl	800090c <__aeabi_ddiv>
 8009df0:	ec53 2b18 	vmov	r2, r3, d8
 8009df4:	f7f6 faa8 	bl	8000348 <__aeabi_dsub>
 8009df8:	9d03      	ldr	r5, [sp, #12]
 8009dfa:	ec41 0b18 	vmov	d8, r0, r1
 8009dfe:	4639      	mov	r1, r7
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7f6 ff09 	bl	8000c18 <__aeabi_d2iz>
 8009e06:	900d      	str	r0, [sp, #52]	; 0x34
 8009e08:	f7f6 fbec 	bl	80005e4 <__aeabi_i2d>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4630      	mov	r0, r6
 8009e12:	4639      	mov	r1, r7
 8009e14:	f7f6 fa98 	bl	8000348 <__aeabi_dsub>
 8009e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e1a:	3330      	adds	r3, #48	; 0x30
 8009e1c:	f805 3b01 	strb.w	r3, [r5], #1
 8009e20:	ec53 2b18 	vmov	r2, r3, d8
 8009e24:	4606      	mov	r6, r0
 8009e26:	460f      	mov	r7, r1
 8009e28:	f7f6 feb8 	bl	8000b9c <__aeabi_dcmplt>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d165      	bne.n	8009efc <_dtoa_r+0x63c>
 8009e30:	4632      	mov	r2, r6
 8009e32:	463b      	mov	r3, r7
 8009e34:	4935      	ldr	r1, [pc, #212]	; (8009f0c <_dtoa_r+0x64c>)
 8009e36:	2000      	movs	r0, #0
 8009e38:	f7f6 fa86 	bl	8000348 <__aeabi_dsub>
 8009e3c:	ec53 2b18 	vmov	r2, r3, d8
 8009e40:	f7f6 feac 	bl	8000b9c <__aeabi_dcmplt>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	f040 80b9 	bne.w	8009fbc <_dtoa_r+0x6fc>
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	429d      	cmp	r5, r3
 8009e4e:	f43f af75 	beq.w	8009d3c <_dtoa_r+0x47c>
 8009e52:	4b2f      	ldr	r3, [pc, #188]	; (8009f10 <_dtoa_r+0x650>)
 8009e54:	ec51 0b18 	vmov	r0, r1, d8
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f7f6 fc2d 	bl	80006b8 <__aeabi_dmul>
 8009e5e:	4b2c      	ldr	r3, [pc, #176]	; (8009f10 <_dtoa_r+0x650>)
 8009e60:	ec41 0b18 	vmov	d8, r0, r1
 8009e64:	2200      	movs	r2, #0
 8009e66:	4630      	mov	r0, r6
 8009e68:	4639      	mov	r1, r7
 8009e6a:	f7f6 fc25 	bl	80006b8 <__aeabi_dmul>
 8009e6e:	4606      	mov	r6, r0
 8009e70:	460f      	mov	r7, r1
 8009e72:	e7c4      	b.n	8009dfe <_dtoa_r+0x53e>
 8009e74:	ec51 0b17 	vmov	r0, r1, d7
 8009e78:	f7f6 fc1e 	bl	80006b8 <__aeabi_dmul>
 8009e7c:	9b04      	ldr	r3, [sp, #16]
 8009e7e:	9d03      	ldr	r5, [sp, #12]
 8009e80:	930d      	str	r3, [sp, #52]	; 0x34
 8009e82:	ec41 0b18 	vmov	d8, r0, r1
 8009e86:	4639      	mov	r1, r7
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f7f6 fec5 	bl	8000c18 <__aeabi_d2iz>
 8009e8e:	9011      	str	r0, [sp, #68]	; 0x44
 8009e90:	f7f6 fba8 	bl	80005e4 <__aeabi_i2d>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7f6 fa54 	bl	8000348 <__aeabi_dsub>
 8009ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ea2:	3330      	adds	r3, #48	; 0x30
 8009ea4:	f805 3b01 	strb.w	r3, [r5], #1
 8009ea8:	9b04      	ldr	r3, [sp, #16]
 8009eaa:	429d      	cmp	r5, r3
 8009eac:	4606      	mov	r6, r0
 8009eae:	460f      	mov	r7, r1
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	d134      	bne.n	8009f20 <_dtoa_r+0x660>
 8009eb6:	4b19      	ldr	r3, [pc, #100]	; (8009f1c <_dtoa_r+0x65c>)
 8009eb8:	ec51 0b18 	vmov	r0, r1, d8
 8009ebc:	f7f6 fa46 	bl	800034c <__adddf3>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	f7f6 fe86 	bl	8000bd8 <__aeabi_dcmpgt>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d175      	bne.n	8009fbc <_dtoa_r+0x6fc>
 8009ed0:	ec53 2b18 	vmov	r2, r3, d8
 8009ed4:	4911      	ldr	r1, [pc, #68]	; (8009f1c <_dtoa_r+0x65c>)
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	f7f6 fa36 	bl	8000348 <__aeabi_dsub>
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	f7f6 fe5a 	bl	8000b9c <__aeabi_dcmplt>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	f43f af27 	beq.w	8009d3c <_dtoa_r+0x47c>
 8009eee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009ef0:	1e6b      	subs	r3, r5, #1
 8009ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ef4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ef8:	2b30      	cmp	r3, #48	; 0x30
 8009efa:	d0f8      	beq.n	8009eee <_dtoa_r+0x62e>
 8009efc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009f00:	e04a      	b.n	8009f98 <_dtoa_r+0x6d8>
 8009f02:	bf00      	nop
 8009f04:	0800c2f0 	.word	0x0800c2f0
 8009f08:	0800c2c8 	.word	0x0800c2c8
 8009f0c:	3ff00000 	.word	0x3ff00000
 8009f10:	40240000 	.word	0x40240000
 8009f14:	401c0000 	.word	0x401c0000
 8009f18:	40140000 	.word	0x40140000
 8009f1c:	3fe00000 	.word	0x3fe00000
 8009f20:	4baf      	ldr	r3, [pc, #700]	; (800a1e0 <_dtoa_r+0x920>)
 8009f22:	f7f6 fbc9 	bl	80006b8 <__aeabi_dmul>
 8009f26:	4606      	mov	r6, r0
 8009f28:	460f      	mov	r7, r1
 8009f2a:	e7ac      	b.n	8009e86 <_dtoa_r+0x5c6>
 8009f2c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009f30:	9d03      	ldr	r5, [sp, #12]
 8009f32:	4642      	mov	r2, r8
 8009f34:	464b      	mov	r3, r9
 8009f36:	4630      	mov	r0, r6
 8009f38:	4639      	mov	r1, r7
 8009f3a:	f7f6 fce7 	bl	800090c <__aeabi_ddiv>
 8009f3e:	f7f6 fe6b 	bl	8000c18 <__aeabi_d2iz>
 8009f42:	9004      	str	r0, [sp, #16]
 8009f44:	f7f6 fb4e 	bl	80005e4 <__aeabi_i2d>
 8009f48:	4642      	mov	r2, r8
 8009f4a:	464b      	mov	r3, r9
 8009f4c:	f7f6 fbb4 	bl	80006b8 <__aeabi_dmul>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4630      	mov	r0, r6
 8009f56:	4639      	mov	r1, r7
 8009f58:	f7f6 f9f6 	bl	8000348 <__aeabi_dsub>
 8009f5c:	9e04      	ldr	r6, [sp, #16]
 8009f5e:	9f06      	ldr	r7, [sp, #24]
 8009f60:	3630      	adds	r6, #48	; 0x30
 8009f62:	f805 6b01 	strb.w	r6, [r5], #1
 8009f66:	9e03      	ldr	r6, [sp, #12]
 8009f68:	1bae      	subs	r6, r5, r6
 8009f6a:	42b7      	cmp	r7, r6
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	d137      	bne.n	8009fe2 <_dtoa_r+0x722>
 8009f72:	f7f6 f9eb 	bl	800034c <__adddf3>
 8009f76:	4642      	mov	r2, r8
 8009f78:	464b      	mov	r3, r9
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	460f      	mov	r7, r1
 8009f7e:	f7f6 fe2b 	bl	8000bd8 <__aeabi_dcmpgt>
 8009f82:	b9c8      	cbnz	r0, 8009fb8 <_dtoa_r+0x6f8>
 8009f84:	4642      	mov	r2, r8
 8009f86:	464b      	mov	r3, r9
 8009f88:	4630      	mov	r0, r6
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	f7f6 fdfc 	bl	8000b88 <__aeabi_dcmpeq>
 8009f90:	b110      	cbz	r0, 8009f98 <_dtoa_r+0x6d8>
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	07d9      	lsls	r1, r3, #31
 8009f96:	d40f      	bmi.n	8009fb8 <_dtoa_r+0x6f8>
 8009f98:	4620      	mov	r0, r4
 8009f9a:	4659      	mov	r1, fp
 8009f9c:	f000 fac8 	bl	800a530 <_Bfree>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	702b      	strb	r3, [r5, #0]
 8009fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fa6:	f10a 0001 	add.w	r0, sl, #1
 8009faa:	6018      	str	r0, [r3, #0]
 8009fac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f43f acd5 	beq.w	800995e <_dtoa_r+0x9e>
 8009fb4:	601d      	str	r5, [r3, #0]
 8009fb6:	e4d2      	b.n	800995e <_dtoa_r+0x9e>
 8009fb8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009fbc:	462b      	mov	r3, r5
 8009fbe:	461d      	mov	r5, r3
 8009fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fc4:	2a39      	cmp	r2, #57	; 0x39
 8009fc6:	d108      	bne.n	8009fda <_dtoa_r+0x71a>
 8009fc8:	9a03      	ldr	r2, [sp, #12]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d1f7      	bne.n	8009fbe <_dtoa_r+0x6fe>
 8009fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd0:	9903      	ldr	r1, [sp, #12]
 8009fd2:	3201      	adds	r2, #1
 8009fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8009fd6:	2230      	movs	r2, #48	; 0x30
 8009fd8:	700a      	strb	r2, [r1, #0]
 8009fda:	781a      	ldrb	r2, [r3, #0]
 8009fdc:	3201      	adds	r2, #1
 8009fde:	701a      	strb	r2, [r3, #0]
 8009fe0:	e78c      	b.n	8009efc <_dtoa_r+0x63c>
 8009fe2:	4b7f      	ldr	r3, [pc, #508]	; (800a1e0 <_dtoa_r+0x920>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f7f6 fb67 	bl	80006b8 <__aeabi_dmul>
 8009fea:	2200      	movs	r2, #0
 8009fec:	2300      	movs	r3, #0
 8009fee:	4606      	mov	r6, r0
 8009ff0:	460f      	mov	r7, r1
 8009ff2:	f7f6 fdc9 	bl	8000b88 <__aeabi_dcmpeq>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d09b      	beq.n	8009f32 <_dtoa_r+0x672>
 8009ffa:	e7cd      	b.n	8009f98 <_dtoa_r+0x6d8>
 8009ffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	f000 80c4 	beq.w	800a18c <_dtoa_r+0x8cc>
 800a004:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a006:	2a01      	cmp	r2, #1
 800a008:	f300 80a8 	bgt.w	800a15c <_dtoa_r+0x89c>
 800a00c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a00e:	2a00      	cmp	r2, #0
 800a010:	f000 80a0 	beq.w	800a154 <_dtoa_r+0x894>
 800a014:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a018:	9e08      	ldr	r6, [sp, #32]
 800a01a:	4645      	mov	r5, r8
 800a01c:	9a07      	ldr	r2, [sp, #28]
 800a01e:	2101      	movs	r1, #1
 800a020:	441a      	add	r2, r3
 800a022:	4620      	mov	r0, r4
 800a024:	4498      	add	r8, r3
 800a026:	9207      	str	r2, [sp, #28]
 800a028:	f000 fb3e 	bl	800a6a8 <__i2b>
 800a02c:	4607      	mov	r7, r0
 800a02e:	2d00      	cmp	r5, #0
 800a030:	dd0b      	ble.n	800a04a <_dtoa_r+0x78a>
 800a032:	9b07      	ldr	r3, [sp, #28]
 800a034:	2b00      	cmp	r3, #0
 800a036:	dd08      	ble.n	800a04a <_dtoa_r+0x78a>
 800a038:	42ab      	cmp	r3, r5
 800a03a:	9a07      	ldr	r2, [sp, #28]
 800a03c:	bfa8      	it	ge
 800a03e:	462b      	movge	r3, r5
 800a040:	eba8 0803 	sub.w	r8, r8, r3
 800a044:	1aed      	subs	r5, r5, r3
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	9307      	str	r3, [sp, #28]
 800a04a:	9b08      	ldr	r3, [sp, #32]
 800a04c:	b1fb      	cbz	r3, 800a08e <_dtoa_r+0x7ce>
 800a04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 809f 	beq.w	800a194 <_dtoa_r+0x8d4>
 800a056:	2e00      	cmp	r6, #0
 800a058:	dd11      	ble.n	800a07e <_dtoa_r+0x7be>
 800a05a:	4639      	mov	r1, r7
 800a05c:	4632      	mov	r2, r6
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 fbde 	bl	800a820 <__pow5mult>
 800a064:	465a      	mov	r2, fp
 800a066:	4601      	mov	r1, r0
 800a068:	4607      	mov	r7, r0
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 fb32 	bl	800a6d4 <__multiply>
 800a070:	4659      	mov	r1, fp
 800a072:	9009      	str	r0, [sp, #36]	; 0x24
 800a074:	4620      	mov	r0, r4
 800a076:	f000 fa5b 	bl	800a530 <_Bfree>
 800a07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07c:	469b      	mov	fp, r3
 800a07e:	9b08      	ldr	r3, [sp, #32]
 800a080:	1b9a      	subs	r2, r3, r6
 800a082:	d004      	beq.n	800a08e <_dtoa_r+0x7ce>
 800a084:	4659      	mov	r1, fp
 800a086:	4620      	mov	r0, r4
 800a088:	f000 fbca 	bl	800a820 <__pow5mult>
 800a08c:	4683      	mov	fp, r0
 800a08e:	2101      	movs	r1, #1
 800a090:	4620      	mov	r0, r4
 800a092:	f000 fb09 	bl	800a6a8 <__i2b>
 800a096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a098:	2b00      	cmp	r3, #0
 800a09a:	4606      	mov	r6, r0
 800a09c:	dd7c      	ble.n	800a198 <_dtoa_r+0x8d8>
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4601      	mov	r1, r0
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 fbbc 	bl	800a820 <__pow5mult>
 800a0a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	dd76      	ble.n	800a19e <_dtoa_r+0x8de>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	9308      	str	r3, [sp, #32]
 800a0b4:	6933      	ldr	r3, [r6, #16]
 800a0b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a0ba:	6918      	ldr	r0, [r3, #16]
 800a0bc:	f000 faa4 	bl	800a608 <__hi0bits>
 800a0c0:	f1c0 0020 	rsb	r0, r0, #32
 800a0c4:	9b07      	ldr	r3, [sp, #28]
 800a0c6:	4418      	add	r0, r3
 800a0c8:	f010 001f 	ands.w	r0, r0, #31
 800a0cc:	f000 8086 	beq.w	800a1dc <_dtoa_r+0x91c>
 800a0d0:	f1c0 0320 	rsb	r3, r0, #32
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	dd7f      	ble.n	800a1d8 <_dtoa_r+0x918>
 800a0d8:	f1c0 001c 	rsb	r0, r0, #28
 800a0dc:	9b07      	ldr	r3, [sp, #28]
 800a0de:	4403      	add	r3, r0
 800a0e0:	4480      	add	r8, r0
 800a0e2:	4405      	add	r5, r0
 800a0e4:	9307      	str	r3, [sp, #28]
 800a0e6:	f1b8 0f00 	cmp.w	r8, #0
 800a0ea:	dd05      	ble.n	800a0f8 <_dtoa_r+0x838>
 800a0ec:	4659      	mov	r1, fp
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 fbef 	bl	800a8d4 <__lshift>
 800a0f6:	4683      	mov	fp, r0
 800a0f8:	9b07      	ldr	r3, [sp, #28]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	dd05      	ble.n	800a10a <_dtoa_r+0x84a>
 800a0fe:	4631      	mov	r1, r6
 800a100:	461a      	mov	r2, r3
 800a102:	4620      	mov	r0, r4
 800a104:	f000 fbe6 	bl	800a8d4 <__lshift>
 800a108:	4606      	mov	r6, r0
 800a10a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d069      	beq.n	800a1e4 <_dtoa_r+0x924>
 800a110:	4631      	mov	r1, r6
 800a112:	4658      	mov	r0, fp
 800a114:	f000 fc4a 	bl	800a9ac <__mcmp>
 800a118:	2800      	cmp	r0, #0
 800a11a:	da63      	bge.n	800a1e4 <_dtoa_r+0x924>
 800a11c:	2300      	movs	r3, #0
 800a11e:	4659      	mov	r1, fp
 800a120:	220a      	movs	r2, #10
 800a122:	4620      	mov	r0, r4
 800a124:	f000 fa26 	bl	800a574 <__multadd>
 800a128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a12a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a12e:	4683      	mov	fp, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 818f 	beq.w	800a454 <_dtoa_r+0xb94>
 800a136:	4639      	mov	r1, r7
 800a138:	2300      	movs	r3, #0
 800a13a:	220a      	movs	r2, #10
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 fa19 	bl	800a574 <__multadd>
 800a142:	f1b9 0f00 	cmp.w	r9, #0
 800a146:	4607      	mov	r7, r0
 800a148:	f300 808e 	bgt.w	800a268 <_dtoa_r+0x9a8>
 800a14c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a14e:	2b02      	cmp	r3, #2
 800a150:	dc50      	bgt.n	800a1f4 <_dtoa_r+0x934>
 800a152:	e089      	b.n	800a268 <_dtoa_r+0x9a8>
 800a154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a15a:	e75d      	b.n	800a018 <_dtoa_r+0x758>
 800a15c:	9b06      	ldr	r3, [sp, #24]
 800a15e:	1e5e      	subs	r6, r3, #1
 800a160:	9b08      	ldr	r3, [sp, #32]
 800a162:	42b3      	cmp	r3, r6
 800a164:	bfbf      	itttt	lt
 800a166:	9b08      	ldrlt	r3, [sp, #32]
 800a168:	9608      	strlt	r6, [sp, #32]
 800a16a:	1af2      	sublt	r2, r6, r3
 800a16c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a16e:	bfb6      	itet	lt
 800a170:	189b      	addlt	r3, r3, r2
 800a172:	1b9e      	subge	r6, r3, r6
 800a174:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a176:	9b06      	ldr	r3, [sp, #24]
 800a178:	bfb8      	it	lt
 800a17a:	2600      	movlt	r6, #0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bfb5      	itete	lt
 800a180:	eba8 0503 	sublt.w	r5, r8, r3
 800a184:	9b06      	ldrge	r3, [sp, #24]
 800a186:	2300      	movlt	r3, #0
 800a188:	4645      	movge	r5, r8
 800a18a:	e747      	b.n	800a01c <_dtoa_r+0x75c>
 800a18c:	9e08      	ldr	r6, [sp, #32]
 800a18e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a190:	4645      	mov	r5, r8
 800a192:	e74c      	b.n	800a02e <_dtoa_r+0x76e>
 800a194:	9a08      	ldr	r2, [sp, #32]
 800a196:	e775      	b.n	800a084 <_dtoa_r+0x7c4>
 800a198:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	dc18      	bgt.n	800a1d0 <_dtoa_r+0x910>
 800a19e:	9b04      	ldr	r3, [sp, #16]
 800a1a0:	b9b3      	cbnz	r3, 800a1d0 <_dtoa_r+0x910>
 800a1a2:	9b05      	ldr	r3, [sp, #20]
 800a1a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1a8:	b9a3      	cbnz	r3, 800a1d4 <_dtoa_r+0x914>
 800a1aa:	9b05      	ldr	r3, [sp, #20]
 800a1ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1b0:	0d1b      	lsrs	r3, r3, #20
 800a1b2:	051b      	lsls	r3, r3, #20
 800a1b4:	b12b      	cbz	r3, 800a1c2 <_dtoa_r+0x902>
 800a1b6:	9b07      	ldr	r3, [sp, #28]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	9307      	str	r3, [sp, #28]
 800a1bc:	f108 0801 	add.w	r8, r8, #1
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	9308      	str	r3, [sp, #32]
 800a1c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f47f af74 	bne.w	800a0b4 <_dtoa_r+0x7f4>
 800a1cc:	2001      	movs	r0, #1
 800a1ce:	e779      	b.n	800a0c4 <_dtoa_r+0x804>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	e7f6      	b.n	800a1c2 <_dtoa_r+0x902>
 800a1d4:	9b04      	ldr	r3, [sp, #16]
 800a1d6:	e7f4      	b.n	800a1c2 <_dtoa_r+0x902>
 800a1d8:	d085      	beq.n	800a0e6 <_dtoa_r+0x826>
 800a1da:	4618      	mov	r0, r3
 800a1dc:	301c      	adds	r0, #28
 800a1de:	e77d      	b.n	800a0dc <_dtoa_r+0x81c>
 800a1e0:	40240000 	.word	0x40240000
 800a1e4:	9b06      	ldr	r3, [sp, #24]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	dc38      	bgt.n	800a25c <_dtoa_r+0x99c>
 800a1ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	dd35      	ble.n	800a25c <_dtoa_r+0x99c>
 800a1f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800a1f4:	f1b9 0f00 	cmp.w	r9, #0
 800a1f8:	d10d      	bne.n	800a216 <_dtoa_r+0x956>
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	464b      	mov	r3, r9
 800a1fe:	2205      	movs	r2, #5
 800a200:	4620      	mov	r0, r4
 800a202:	f000 f9b7 	bl	800a574 <__multadd>
 800a206:	4601      	mov	r1, r0
 800a208:	4606      	mov	r6, r0
 800a20a:	4658      	mov	r0, fp
 800a20c:	f000 fbce 	bl	800a9ac <__mcmp>
 800a210:	2800      	cmp	r0, #0
 800a212:	f73f adbd 	bgt.w	8009d90 <_dtoa_r+0x4d0>
 800a216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a218:	9d03      	ldr	r5, [sp, #12]
 800a21a:	ea6f 0a03 	mvn.w	sl, r3
 800a21e:	f04f 0800 	mov.w	r8, #0
 800a222:	4631      	mov	r1, r6
 800a224:	4620      	mov	r0, r4
 800a226:	f000 f983 	bl	800a530 <_Bfree>
 800a22a:	2f00      	cmp	r7, #0
 800a22c:	f43f aeb4 	beq.w	8009f98 <_dtoa_r+0x6d8>
 800a230:	f1b8 0f00 	cmp.w	r8, #0
 800a234:	d005      	beq.n	800a242 <_dtoa_r+0x982>
 800a236:	45b8      	cmp	r8, r7
 800a238:	d003      	beq.n	800a242 <_dtoa_r+0x982>
 800a23a:	4641      	mov	r1, r8
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 f977 	bl	800a530 <_Bfree>
 800a242:	4639      	mov	r1, r7
 800a244:	4620      	mov	r0, r4
 800a246:	f000 f973 	bl	800a530 <_Bfree>
 800a24a:	e6a5      	b.n	8009f98 <_dtoa_r+0x6d8>
 800a24c:	2600      	movs	r6, #0
 800a24e:	4637      	mov	r7, r6
 800a250:	e7e1      	b.n	800a216 <_dtoa_r+0x956>
 800a252:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a254:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a258:	4637      	mov	r7, r6
 800a25a:	e599      	b.n	8009d90 <_dtoa_r+0x4d0>
 800a25c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a25e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 80fd 	beq.w	800a462 <_dtoa_r+0xba2>
 800a268:	2d00      	cmp	r5, #0
 800a26a:	dd05      	ble.n	800a278 <_dtoa_r+0x9b8>
 800a26c:	4639      	mov	r1, r7
 800a26e:	462a      	mov	r2, r5
 800a270:	4620      	mov	r0, r4
 800a272:	f000 fb2f 	bl	800a8d4 <__lshift>
 800a276:	4607      	mov	r7, r0
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d05c      	beq.n	800a338 <_dtoa_r+0xa78>
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	4620      	mov	r0, r4
 800a282:	f000 f915 	bl	800a4b0 <_Balloc>
 800a286:	4605      	mov	r5, r0
 800a288:	b928      	cbnz	r0, 800a296 <_dtoa_r+0x9d6>
 800a28a:	4b80      	ldr	r3, [pc, #512]	; (800a48c <_dtoa_r+0xbcc>)
 800a28c:	4602      	mov	r2, r0
 800a28e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a292:	f7ff bb2b 	b.w	80098ec <_dtoa_r+0x2c>
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	3202      	adds	r2, #2
 800a29a:	0092      	lsls	r2, r2, #2
 800a29c:	f107 010c 	add.w	r1, r7, #12
 800a2a0:	300c      	adds	r0, #12
 800a2a2:	f7fe fddf 	bl	8008e64 <memcpy>
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 fb12 	bl	800a8d4 <__lshift>
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	9306      	str	r3, [sp, #24]
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	444b      	add	r3, r9
 800a2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a2bc:	9b04      	ldr	r3, [sp, #16]
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	46b8      	mov	r8, r7
 800a2c4:	9308      	str	r3, [sp, #32]
 800a2c6:	4607      	mov	r7, r0
 800a2c8:	9b06      	ldr	r3, [sp, #24]
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	4658      	mov	r0, fp
 800a2d0:	9304      	str	r3, [sp, #16]
 800a2d2:	f7ff fa69 	bl	80097a8 <quorem>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	3330      	adds	r3, #48	; 0x30
 800a2da:	9007      	str	r0, [sp, #28]
 800a2dc:	4641      	mov	r1, r8
 800a2de:	4658      	mov	r0, fp
 800a2e0:	930c      	str	r3, [sp, #48]	; 0x30
 800a2e2:	f000 fb63 	bl	800a9ac <__mcmp>
 800a2e6:	463a      	mov	r2, r7
 800a2e8:	4681      	mov	r9, r0
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f000 fb79 	bl	800a9e4 <__mdiff>
 800a2f2:	68c2      	ldr	r2, [r0, #12]
 800a2f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	bb02      	cbnz	r2, 800a33c <_dtoa_r+0xa7c>
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	4658      	mov	r0, fp
 800a2fe:	f000 fb55 	bl	800a9ac <__mcmp>
 800a302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a304:	4602      	mov	r2, r0
 800a306:	4629      	mov	r1, r5
 800a308:	4620      	mov	r0, r4
 800a30a:	920a      	str	r2, [sp, #40]	; 0x28
 800a30c:	930c      	str	r3, [sp, #48]	; 0x30
 800a30e:	f000 f90f 	bl	800a530 <_Bfree>
 800a312:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a316:	9d06      	ldr	r5, [sp, #24]
 800a318:	ea43 0102 	orr.w	r1, r3, r2
 800a31c:	9b08      	ldr	r3, [sp, #32]
 800a31e:	430b      	orrs	r3, r1
 800a320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a322:	d10d      	bne.n	800a340 <_dtoa_r+0xa80>
 800a324:	2b39      	cmp	r3, #57	; 0x39
 800a326:	d029      	beq.n	800a37c <_dtoa_r+0xabc>
 800a328:	f1b9 0f00 	cmp.w	r9, #0
 800a32c:	dd01      	ble.n	800a332 <_dtoa_r+0xa72>
 800a32e:	9b07      	ldr	r3, [sp, #28]
 800a330:	3331      	adds	r3, #49	; 0x31
 800a332:	9a04      	ldr	r2, [sp, #16]
 800a334:	7013      	strb	r3, [r2, #0]
 800a336:	e774      	b.n	800a222 <_dtoa_r+0x962>
 800a338:	4638      	mov	r0, r7
 800a33a:	e7b9      	b.n	800a2b0 <_dtoa_r+0x9f0>
 800a33c:	2201      	movs	r2, #1
 800a33e:	e7e2      	b.n	800a306 <_dtoa_r+0xa46>
 800a340:	f1b9 0f00 	cmp.w	r9, #0
 800a344:	db06      	blt.n	800a354 <_dtoa_r+0xa94>
 800a346:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a348:	ea41 0909 	orr.w	r9, r1, r9
 800a34c:	9908      	ldr	r1, [sp, #32]
 800a34e:	ea59 0101 	orrs.w	r1, r9, r1
 800a352:	d120      	bne.n	800a396 <_dtoa_r+0xad6>
 800a354:	2a00      	cmp	r2, #0
 800a356:	ddec      	ble.n	800a332 <_dtoa_r+0xa72>
 800a358:	4659      	mov	r1, fp
 800a35a:	2201      	movs	r2, #1
 800a35c:	4620      	mov	r0, r4
 800a35e:	9306      	str	r3, [sp, #24]
 800a360:	f000 fab8 	bl	800a8d4 <__lshift>
 800a364:	4631      	mov	r1, r6
 800a366:	4683      	mov	fp, r0
 800a368:	f000 fb20 	bl	800a9ac <__mcmp>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	9b06      	ldr	r3, [sp, #24]
 800a370:	dc02      	bgt.n	800a378 <_dtoa_r+0xab8>
 800a372:	d1de      	bne.n	800a332 <_dtoa_r+0xa72>
 800a374:	07da      	lsls	r2, r3, #31
 800a376:	d5dc      	bpl.n	800a332 <_dtoa_r+0xa72>
 800a378:	2b39      	cmp	r3, #57	; 0x39
 800a37a:	d1d8      	bne.n	800a32e <_dtoa_r+0xa6e>
 800a37c:	9a04      	ldr	r2, [sp, #16]
 800a37e:	2339      	movs	r3, #57	; 0x39
 800a380:	7013      	strb	r3, [r2, #0]
 800a382:	462b      	mov	r3, r5
 800a384:	461d      	mov	r5, r3
 800a386:	3b01      	subs	r3, #1
 800a388:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a38c:	2a39      	cmp	r2, #57	; 0x39
 800a38e:	d050      	beq.n	800a432 <_dtoa_r+0xb72>
 800a390:	3201      	adds	r2, #1
 800a392:	701a      	strb	r2, [r3, #0]
 800a394:	e745      	b.n	800a222 <_dtoa_r+0x962>
 800a396:	2a00      	cmp	r2, #0
 800a398:	dd03      	ble.n	800a3a2 <_dtoa_r+0xae2>
 800a39a:	2b39      	cmp	r3, #57	; 0x39
 800a39c:	d0ee      	beq.n	800a37c <_dtoa_r+0xabc>
 800a39e:	3301      	adds	r3, #1
 800a3a0:	e7c7      	b.n	800a332 <_dtoa_r+0xa72>
 800a3a2:	9a06      	ldr	r2, [sp, #24]
 800a3a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a3aa:	428a      	cmp	r2, r1
 800a3ac:	d02a      	beq.n	800a404 <_dtoa_r+0xb44>
 800a3ae:	4659      	mov	r1, fp
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	220a      	movs	r2, #10
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f000 f8dd 	bl	800a574 <__multadd>
 800a3ba:	45b8      	cmp	r8, r7
 800a3bc:	4683      	mov	fp, r0
 800a3be:	f04f 0300 	mov.w	r3, #0
 800a3c2:	f04f 020a 	mov.w	r2, #10
 800a3c6:	4641      	mov	r1, r8
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	d107      	bne.n	800a3dc <_dtoa_r+0xb1c>
 800a3cc:	f000 f8d2 	bl	800a574 <__multadd>
 800a3d0:	4680      	mov	r8, r0
 800a3d2:	4607      	mov	r7, r0
 800a3d4:	9b06      	ldr	r3, [sp, #24]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	9306      	str	r3, [sp, #24]
 800a3da:	e775      	b.n	800a2c8 <_dtoa_r+0xa08>
 800a3dc:	f000 f8ca 	bl	800a574 <__multadd>
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	4680      	mov	r8, r0
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	220a      	movs	r2, #10
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f000 f8c3 	bl	800a574 <__multadd>
 800a3ee:	4607      	mov	r7, r0
 800a3f0:	e7f0      	b.n	800a3d4 <_dtoa_r+0xb14>
 800a3f2:	f1b9 0f00 	cmp.w	r9, #0
 800a3f6:	9a03      	ldr	r2, [sp, #12]
 800a3f8:	bfcc      	ite	gt
 800a3fa:	464d      	movgt	r5, r9
 800a3fc:	2501      	movle	r5, #1
 800a3fe:	4415      	add	r5, r2
 800a400:	f04f 0800 	mov.w	r8, #0
 800a404:	4659      	mov	r1, fp
 800a406:	2201      	movs	r2, #1
 800a408:	4620      	mov	r0, r4
 800a40a:	9306      	str	r3, [sp, #24]
 800a40c:	f000 fa62 	bl	800a8d4 <__lshift>
 800a410:	4631      	mov	r1, r6
 800a412:	4683      	mov	fp, r0
 800a414:	f000 faca 	bl	800a9ac <__mcmp>
 800a418:	2800      	cmp	r0, #0
 800a41a:	dcb2      	bgt.n	800a382 <_dtoa_r+0xac2>
 800a41c:	d102      	bne.n	800a424 <_dtoa_r+0xb64>
 800a41e:	9b06      	ldr	r3, [sp, #24]
 800a420:	07db      	lsls	r3, r3, #31
 800a422:	d4ae      	bmi.n	800a382 <_dtoa_r+0xac2>
 800a424:	462b      	mov	r3, r5
 800a426:	461d      	mov	r5, r3
 800a428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a42c:	2a30      	cmp	r2, #48	; 0x30
 800a42e:	d0fa      	beq.n	800a426 <_dtoa_r+0xb66>
 800a430:	e6f7      	b.n	800a222 <_dtoa_r+0x962>
 800a432:	9a03      	ldr	r2, [sp, #12]
 800a434:	429a      	cmp	r2, r3
 800a436:	d1a5      	bne.n	800a384 <_dtoa_r+0xac4>
 800a438:	f10a 0a01 	add.w	sl, sl, #1
 800a43c:	2331      	movs	r3, #49	; 0x31
 800a43e:	e779      	b.n	800a334 <_dtoa_r+0xa74>
 800a440:	4b13      	ldr	r3, [pc, #76]	; (800a490 <_dtoa_r+0xbd0>)
 800a442:	f7ff baac 	b.w	800999e <_dtoa_r+0xde>
 800a446:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f47f aa83 	bne.w	8009954 <_dtoa_r+0x94>
 800a44e:	4b11      	ldr	r3, [pc, #68]	; (800a494 <_dtoa_r+0xbd4>)
 800a450:	f7ff baa5 	b.w	800999e <_dtoa_r+0xde>
 800a454:	f1b9 0f00 	cmp.w	r9, #0
 800a458:	dc03      	bgt.n	800a462 <_dtoa_r+0xba2>
 800a45a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	f73f aec9 	bgt.w	800a1f4 <_dtoa_r+0x934>
 800a462:	9d03      	ldr	r5, [sp, #12]
 800a464:	4631      	mov	r1, r6
 800a466:	4658      	mov	r0, fp
 800a468:	f7ff f99e 	bl	80097a8 <quorem>
 800a46c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a470:	f805 3b01 	strb.w	r3, [r5], #1
 800a474:	9a03      	ldr	r2, [sp, #12]
 800a476:	1aaa      	subs	r2, r5, r2
 800a478:	4591      	cmp	r9, r2
 800a47a:	ddba      	ble.n	800a3f2 <_dtoa_r+0xb32>
 800a47c:	4659      	mov	r1, fp
 800a47e:	2300      	movs	r3, #0
 800a480:	220a      	movs	r2, #10
 800a482:	4620      	mov	r0, r4
 800a484:	f000 f876 	bl	800a574 <__multadd>
 800a488:	4683      	mov	fp, r0
 800a48a:	e7eb      	b.n	800a464 <_dtoa_r+0xba4>
 800a48c:	0800c253 	.word	0x0800c253
 800a490:	0800c1ac 	.word	0x0800c1ac
 800a494:	0800c1d0 	.word	0x0800c1d0

0800a498 <_localeconv_r>:
 800a498:	4800      	ldr	r0, [pc, #0]	; (800a49c <_localeconv_r+0x4>)
 800a49a:	4770      	bx	lr
 800a49c:	2000018c 	.word	0x2000018c

0800a4a0 <malloc>:
 800a4a0:	4b02      	ldr	r3, [pc, #8]	; (800a4ac <malloc+0xc>)
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	6818      	ldr	r0, [r3, #0]
 800a4a6:	f000 bbdf 	b.w	800ac68 <_malloc_r>
 800a4aa:	bf00      	nop
 800a4ac:	20000038 	.word	0x20000038

0800a4b0 <_Balloc>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	460d      	mov	r5, r1
 800a4b8:	b976      	cbnz	r6, 800a4d8 <_Balloc+0x28>
 800a4ba:	2010      	movs	r0, #16
 800a4bc:	f7ff fff0 	bl	800a4a0 <malloc>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	6260      	str	r0, [r4, #36]	; 0x24
 800a4c4:	b920      	cbnz	r0, 800a4d0 <_Balloc+0x20>
 800a4c6:	4b18      	ldr	r3, [pc, #96]	; (800a528 <_Balloc+0x78>)
 800a4c8:	4818      	ldr	r0, [pc, #96]	; (800a52c <_Balloc+0x7c>)
 800a4ca:	2166      	movs	r1, #102	; 0x66
 800a4cc:	f000 fd92 	bl	800aff4 <__assert_func>
 800a4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4d4:	6006      	str	r6, [r0, #0]
 800a4d6:	60c6      	str	r6, [r0, #12]
 800a4d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4da:	68f3      	ldr	r3, [r6, #12]
 800a4dc:	b183      	cbz	r3, 800a500 <_Balloc+0x50>
 800a4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4e6:	b9b8      	cbnz	r0, 800a518 <_Balloc+0x68>
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	fa01 f605 	lsl.w	r6, r1, r5
 800a4ee:	1d72      	adds	r2, r6, #5
 800a4f0:	0092      	lsls	r2, r2, #2
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 fb58 	bl	800aba8 <_calloc_r>
 800a4f8:	b160      	cbz	r0, 800a514 <_Balloc+0x64>
 800a4fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4fe:	e00e      	b.n	800a51e <_Balloc+0x6e>
 800a500:	2221      	movs	r2, #33	; 0x21
 800a502:	2104      	movs	r1, #4
 800a504:	4620      	mov	r0, r4
 800a506:	f000 fb4f 	bl	800aba8 <_calloc_r>
 800a50a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a50c:	60f0      	str	r0, [r6, #12]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1e4      	bne.n	800a4de <_Balloc+0x2e>
 800a514:	2000      	movs	r0, #0
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	6802      	ldr	r2, [r0, #0]
 800a51a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a51e:	2300      	movs	r3, #0
 800a520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a524:	e7f7      	b.n	800a516 <_Balloc+0x66>
 800a526:	bf00      	nop
 800a528:	0800c1dd 	.word	0x0800c1dd
 800a52c:	0800c264 	.word	0x0800c264

0800a530 <_Bfree>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a534:	4605      	mov	r5, r0
 800a536:	460c      	mov	r4, r1
 800a538:	b976      	cbnz	r6, 800a558 <_Bfree+0x28>
 800a53a:	2010      	movs	r0, #16
 800a53c:	f7ff ffb0 	bl	800a4a0 <malloc>
 800a540:	4602      	mov	r2, r0
 800a542:	6268      	str	r0, [r5, #36]	; 0x24
 800a544:	b920      	cbnz	r0, 800a550 <_Bfree+0x20>
 800a546:	4b09      	ldr	r3, [pc, #36]	; (800a56c <_Bfree+0x3c>)
 800a548:	4809      	ldr	r0, [pc, #36]	; (800a570 <_Bfree+0x40>)
 800a54a:	218a      	movs	r1, #138	; 0x8a
 800a54c:	f000 fd52 	bl	800aff4 <__assert_func>
 800a550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a554:	6006      	str	r6, [r0, #0]
 800a556:	60c6      	str	r6, [r0, #12]
 800a558:	b13c      	cbz	r4, 800a56a <_Bfree+0x3a>
 800a55a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a55c:	6862      	ldr	r2, [r4, #4]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a564:	6021      	str	r1, [r4, #0]
 800a566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a56a:	bd70      	pop	{r4, r5, r6, pc}
 800a56c:	0800c1dd 	.word	0x0800c1dd
 800a570:	0800c264 	.word	0x0800c264

0800a574 <__multadd>:
 800a574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a578:	690e      	ldr	r6, [r1, #16]
 800a57a:	4607      	mov	r7, r0
 800a57c:	4698      	mov	r8, r3
 800a57e:	460c      	mov	r4, r1
 800a580:	f101 0014 	add.w	r0, r1, #20
 800a584:	2300      	movs	r3, #0
 800a586:	6805      	ldr	r5, [r0, #0]
 800a588:	b2a9      	uxth	r1, r5
 800a58a:	fb02 8101 	mla	r1, r2, r1, r8
 800a58e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a592:	0c2d      	lsrs	r5, r5, #16
 800a594:	fb02 c505 	mla	r5, r2, r5, ip
 800a598:	b289      	uxth	r1, r1
 800a59a:	3301      	adds	r3, #1
 800a59c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a5a0:	429e      	cmp	r6, r3
 800a5a2:	f840 1b04 	str.w	r1, [r0], #4
 800a5a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a5aa:	dcec      	bgt.n	800a586 <__multadd+0x12>
 800a5ac:	f1b8 0f00 	cmp.w	r8, #0
 800a5b0:	d022      	beq.n	800a5f8 <__multadd+0x84>
 800a5b2:	68a3      	ldr	r3, [r4, #8]
 800a5b4:	42b3      	cmp	r3, r6
 800a5b6:	dc19      	bgt.n	800a5ec <__multadd+0x78>
 800a5b8:	6861      	ldr	r1, [r4, #4]
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	3101      	adds	r1, #1
 800a5be:	f7ff ff77 	bl	800a4b0 <_Balloc>
 800a5c2:	4605      	mov	r5, r0
 800a5c4:	b928      	cbnz	r0, 800a5d2 <__multadd+0x5e>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	4b0d      	ldr	r3, [pc, #52]	; (800a600 <__multadd+0x8c>)
 800a5ca:	480e      	ldr	r0, [pc, #56]	; (800a604 <__multadd+0x90>)
 800a5cc:	21b5      	movs	r1, #181	; 0xb5
 800a5ce:	f000 fd11 	bl	800aff4 <__assert_func>
 800a5d2:	6922      	ldr	r2, [r4, #16]
 800a5d4:	3202      	adds	r2, #2
 800a5d6:	f104 010c 	add.w	r1, r4, #12
 800a5da:	0092      	lsls	r2, r2, #2
 800a5dc:	300c      	adds	r0, #12
 800a5de:	f7fe fc41 	bl	8008e64 <memcpy>
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7ff ffa3 	bl	800a530 <_Bfree>
 800a5ea:	462c      	mov	r4, r5
 800a5ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a5f0:	3601      	adds	r6, #1
 800a5f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800a5f6:	6126      	str	r6, [r4, #16]
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5fe:	bf00      	nop
 800a600:	0800c253 	.word	0x0800c253
 800a604:	0800c264 	.word	0x0800c264

0800a608 <__hi0bits>:
 800a608:	0c03      	lsrs	r3, r0, #16
 800a60a:	041b      	lsls	r3, r3, #16
 800a60c:	b9d3      	cbnz	r3, 800a644 <__hi0bits+0x3c>
 800a60e:	0400      	lsls	r0, r0, #16
 800a610:	2310      	movs	r3, #16
 800a612:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a616:	bf04      	itt	eq
 800a618:	0200      	lsleq	r0, r0, #8
 800a61a:	3308      	addeq	r3, #8
 800a61c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a620:	bf04      	itt	eq
 800a622:	0100      	lsleq	r0, r0, #4
 800a624:	3304      	addeq	r3, #4
 800a626:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a62a:	bf04      	itt	eq
 800a62c:	0080      	lsleq	r0, r0, #2
 800a62e:	3302      	addeq	r3, #2
 800a630:	2800      	cmp	r0, #0
 800a632:	db05      	blt.n	800a640 <__hi0bits+0x38>
 800a634:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a638:	f103 0301 	add.w	r3, r3, #1
 800a63c:	bf08      	it	eq
 800a63e:	2320      	moveq	r3, #32
 800a640:	4618      	mov	r0, r3
 800a642:	4770      	bx	lr
 800a644:	2300      	movs	r3, #0
 800a646:	e7e4      	b.n	800a612 <__hi0bits+0xa>

0800a648 <__lo0bits>:
 800a648:	6803      	ldr	r3, [r0, #0]
 800a64a:	f013 0207 	ands.w	r2, r3, #7
 800a64e:	4601      	mov	r1, r0
 800a650:	d00b      	beq.n	800a66a <__lo0bits+0x22>
 800a652:	07da      	lsls	r2, r3, #31
 800a654:	d424      	bmi.n	800a6a0 <__lo0bits+0x58>
 800a656:	0798      	lsls	r0, r3, #30
 800a658:	bf49      	itett	mi
 800a65a:	085b      	lsrmi	r3, r3, #1
 800a65c:	089b      	lsrpl	r3, r3, #2
 800a65e:	2001      	movmi	r0, #1
 800a660:	600b      	strmi	r3, [r1, #0]
 800a662:	bf5c      	itt	pl
 800a664:	600b      	strpl	r3, [r1, #0]
 800a666:	2002      	movpl	r0, #2
 800a668:	4770      	bx	lr
 800a66a:	b298      	uxth	r0, r3
 800a66c:	b9b0      	cbnz	r0, 800a69c <__lo0bits+0x54>
 800a66e:	0c1b      	lsrs	r3, r3, #16
 800a670:	2010      	movs	r0, #16
 800a672:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a676:	bf04      	itt	eq
 800a678:	0a1b      	lsreq	r3, r3, #8
 800a67a:	3008      	addeq	r0, #8
 800a67c:	071a      	lsls	r2, r3, #28
 800a67e:	bf04      	itt	eq
 800a680:	091b      	lsreq	r3, r3, #4
 800a682:	3004      	addeq	r0, #4
 800a684:	079a      	lsls	r2, r3, #30
 800a686:	bf04      	itt	eq
 800a688:	089b      	lsreq	r3, r3, #2
 800a68a:	3002      	addeq	r0, #2
 800a68c:	07da      	lsls	r2, r3, #31
 800a68e:	d403      	bmi.n	800a698 <__lo0bits+0x50>
 800a690:	085b      	lsrs	r3, r3, #1
 800a692:	f100 0001 	add.w	r0, r0, #1
 800a696:	d005      	beq.n	800a6a4 <__lo0bits+0x5c>
 800a698:	600b      	str	r3, [r1, #0]
 800a69a:	4770      	bx	lr
 800a69c:	4610      	mov	r0, r2
 800a69e:	e7e8      	b.n	800a672 <__lo0bits+0x2a>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	4770      	bx	lr
 800a6a4:	2020      	movs	r0, #32
 800a6a6:	4770      	bx	lr

0800a6a8 <__i2b>:
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	f7ff feff 	bl	800a4b0 <_Balloc>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	b928      	cbnz	r0, 800a6c2 <__i2b+0x1a>
 800a6b6:	4b05      	ldr	r3, [pc, #20]	; (800a6cc <__i2b+0x24>)
 800a6b8:	4805      	ldr	r0, [pc, #20]	; (800a6d0 <__i2b+0x28>)
 800a6ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a6be:	f000 fc99 	bl	800aff4 <__assert_func>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	6144      	str	r4, [r0, #20]
 800a6c6:	6103      	str	r3, [r0, #16]
 800a6c8:	bd10      	pop	{r4, pc}
 800a6ca:	bf00      	nop
 800a6cc:	0800c253 	.word	0x0800c253
 800a6d0:	0800c264 	.word	0x0800c264

0800a6d4 <__multiply>:
 800a6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	4614      	mov	r4, r2
 800a6da:	690a      	ldr	r2, [r1, #16]
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	bfb8      	it	lt
 800a6e2:	460b      	movlt	r3, r1
 800a6e4:	460d      	mov	r5, r1
 800a6e6:	bfbc      	itt	lt
 800a6e8:	4625      	movlt	r5, r4
 800a6ea:	461c      	movlt	r4, r3
 800a6ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a6f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a6f4:	68ab      	ldr	r3, [r5, #8]
 800a6f6:	6869      	ldr	r1, [r5, #4]
 800a6f8:	eb0a 0709 	add.w	r7, sl, r9
 800a6fc:	42bb      	cmp	r3, r7
 800a6fe:	b085      	sub	sp, #20
 800a700:	bfb8      	it	lt
 800a702:	3101      	addlt	r1, #1
 800a704:	f7ff fed4 	bl	800a4b0 <_Balloc>
 800a708:	b930      	cbnz	r0, 800a718 <__multiply+0x44>
 800a70a:	4602      	mov	r2, r0
 800a70c:	4b42      	ldr	r3, [pc, #264]	; (800a818 <__multiply+0x144>)
 800a70e:	4843      	ldr	r0, [pc, #268]	; (800a81c <__multiply+0x148>)
 800a710:	f240 115d 	movw	r1, #349	; 0x15d
 800a714:	f000 fc6e 	bl	800aff4 <__assert_func>
 800a718:	f100 0614 	add.w	r6, r0, #20
 800a71c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a720:	4633      	mov	r3, r6
 800a722:	2200      	movs	r2, #0
 800a724:	4543      	cmp	r3, r8
 800a726:	d31e      	bcc.n	800a766 <__multiply+0x92>
 800a728:	f105 0c14 	add.w	ip, r5, #20
 800a72c:	f104 0314 	add.w	r3, r4, #20
 800a730:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a734:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a738:	9202      	str	r2, [sp, #8]
 800a73a:	ebac 0205 	sub.w	r2, ip, r5
 800a73e:	3a15      	subs	r2, #21
 800a740:	f022 0203 	bic.w	r2, r2, #3
 800a744:	3204      	adds	r2, #4
 800a746:	f105 0115 	add.w	r1, r5, #21
 800a74a:	458c      	cmp	ip, r1
 800a74c:	bf38      	it	cc
 800a74e:	2204      	movcc	r2, #4
 800a750:	9201      	str	r2, [sp, #4]
 800a752:	9a02      	ldr	r2, [sp, #8]
 800a754:	9303      	str	r3, [sp, #12]
 800a756:	429a      	cmp	r2, r3
 800a758:	d808      	bhi.n	800a76c <__multiply+0x98>
 800a75a:	2f00      	cmp	r7, #0
 800a75c:	dc55      	bgt.n	800a80a <__multiply+0x136>
 800a75e:	6107      	str	r7, [r0, #16]
 800a760:	b005      	add	sp, #20
 800a762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a766:	f843 2b04 	str.w	r2, [r3], #4
 800a76a:	e7db      	b.n	800a724 <__multiply+0x50>
 800a76c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a770:	f1ba 0f00 	cmp.w	sl, #0
 800a774:	d020      	beq.n	800a7b8 <__multiply+0xe4>
 800a776:	f105 0e14 	add.w	lr, r5, #20
 800a77a:	46b1      	mov	r9, r6
 800a77c:	2200      	movs	r2, #0
 800a77e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a782:	f8d9 b000 	ldr.w	fp, [r9]
 800a786:	b2a1      	uxth	r1, r4
 800a788:	fa1f fb8b 	uxth.w	fp, fp
 800a78c:	fb0a b101 	mla	r1, sl, r1, fp
 800a790:	4411      	add	r1, r2
 800a792:	f8d9 2000 	ldr.w	r2, [r9]
 800a796:	0c24      	lsrs	r4, r4, #16
 800a798:	0c12      	lsrs	r2, r2, #16
 800a79a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a79e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a7a2:	b289      	uxth	r1, r1
 800a7a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a7a8:	45f4      	cmp	ip, lr
 800a7aa:	f849 1b04 	str.w	r1, [r9], #4
 800a7ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a7b2:	d8e4      	bhi.n	800a77e <__multiply+0xaa>
 800a7b4:	9901      	ldr	r1, [sp, #4]
 800a7b6:	5072      	str	r2, [r6, r1]
 800a7b8:	9a03      	ldr	r2, [sp, #12]
 800a7ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	f1b9 0f00 	cmp.w	r9, #0
 800a7c4:	d01f      	beq.n	800a806 <__multiply+0x132>
 800a7c6:	6834      	ldr	r4, [r6, #0]
 800a7c8:	f105 0114 	add.w	r1, r5, #20
 800a7cc:	46b6      	mov	lr, r6
 800a7ce:	f04f 0a00 	mov.w	sl, #0
 800a7d2:	880a      	ldrh	r2, [r1, #0]
 800a7d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a7d8:	fb09 b202 	mla	r2, r9, r2, fp
 800a7dc:	4492      	add	sl, r2
 800a7de:	b2a4      	uxth	r4, r4
 800a7e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a7e4:	f84e 4b04 	str.w	r4, [lr], #4
 800a7e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a7ec:	f8be 2000 	ldrh.w	r2, [lr]
 800a7f0:	0c24      	lsrs	r4, r4, #16
 800a7f2:	fb09 2404 	mla	r4, r9, r4, r2
 800a7f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a7fa:	458c      	cmp	ip, r1
 800a7fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a800:	d8e7      	bhi.n	800a7d2 <__multiply+0xfe>
 800a802:	9a01      	ldr	r2, [sp, #4]
 800a804:	50b4      	str	r4, [r6, r2]
 800a806:	3604      	adds	r6, #4
 800a808:	e7a3      	b.n	800a752 <__multiply+0x7e>
 800a80a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1a5      	bne.n	800a75e <__multiply+0x8a>
 800a812:	3f01      	subs	r7, #1
 800a814:	e7a1      	b.n	800a75a <__multiply+0x86>
 800a816:	bf00      	nop
 800a818:	0800c253 	.word	0x0800c253
 800a81c:	0800c264 	.word	0x0800c264

0800a820 <__pow5mult>:
 800a820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a824:	4615      	mov	r5, r2
 800a826:	f012 0203 	ands.w	r2, r2, #3
 800a82a:	4606      	mov	r6, r0
 800a82c:	460f      	mov	r7, r1
 800a82e:	d007      	beq.n	800a840 <__pow5mult+0x20>
 800a830:	4c25      	ldr	r4, [pc, #148]	; (800a8c8 <__pow5mult+0xa8>)
 800a832:	3a01      	subs	r2, #1
 800a834:	2300      	movs	r3, #0
 800a836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a83a:	f7ff fe9b 	bl	800a574 <__multadd>
 800a83e:	4607      	mov	r7, r0
 800a840:	10ad      	asrs	r5, r5, #2
 800a842:	d03d      	beq.n	800a8c0 <__pow5mult+0xa0>
 800a844:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a846:	b97c      	cbnz	r4, 800a868 <__pow5mult+0x48>
 800a848:	2010      	movs	r0, #16
 800a84a:	f7ff fe29 	bl	800a4a0 <malloc>
 800a84e:	4602      	mov	r2, r0
 800a850:	6270      	str	r0, [r6, #36]	; 0x24
 800a852:	b928      	cbnz	r0, 800a860 <__pow5mult+0x40>
 800a854:	4b1d      	ldr	r3, [pc, #116]	; (800a8cc <__pow5mult+0xac>)
 800a856:	481e      	ldr	r0, [pc, #120]	; (800a8d0 <__pow5mult+0xb0>)
 800a858:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a85c:	f000 fbca 	bl	800aff4 <__assert_func>
 800a860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a864:	6004      	str	r4, [r0, #0]
 800a866:	60c4      	str	r4, [r0, #12]
 800a868:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a86c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a870:	b94c      	cbnz	r4, 800a886 <__pow5mult+0x66>
 800a872:	f240 2171 	movw	r1, #625	; 0x271
 800a876:	4630      	mov	r0, r6
 800a878:	f7ff ff16 	bl	800a6a8 <__i2b>
 800a87c:	2300      	movs	r3, #0
 800a87e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a882:	4604      	mov	r4, r0
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	f04f 0900 	mov.w	r9, #0
 800a88a:	07eb      	lsls	r3, r5, #31
 800a88c:	d50a      	bpl.n	800a8a4 <__pow5mult+0x84>
 800a88e:	4639      	mov	r1, r7
 800a890:	4622      	mov	r2, r4
 800a892:	4630      	mov	r0, r6
 800a894:	f7ff ff1e 	bl	800a6d4 <__multiply>
 800a898:	4639      	mov	r1, r7
 800a89a:	4680      	mov	r8, r0
 800a89c:	4630      	mov	r0, r6
 800a89e:	f7ff fe47 	bl	800a530 <_Bfree>
 800a8a2:	4647      	mov	r7, r8
 800a8a4:	106d      	asrs	r5, r5, #1
 800a8a6:	d00b      	beq.n	800a8c0 <__pow5mult+0xa0>
 800a8a8:	6820      	ldr	r0, [r4, #0]
 800a8aa:	b938      	cbnz	r0, 800a8bc <__pow5mult+0x9c>
 800a8ac:	4622      	mov	r2, r4
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f7ff ff0f 	bl	800a6d4 <__multiply>
 800a8b6:	6020      	str	r0, [r4, #0]
 800a8b8:	f8c0 9000 	str.w	r9, [r0]
 800a8bc:	4604      	mov	r4, r0
 800a8be:	e7e4      	b.n	800a88a <__pow5mult+0x6a>
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8c6:	bf00      	nop
 800a8c8:	0800c3b8 	.word	0x0800c3b8
 800a8cc:	0800c1dd 	.word	0x0800c1dd
 800a8d0:	0800c264 	.word	0x0800c264

0800a8d4 <__lshift>:
 800a8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d8:	460c      	mov	r4, r1
 800a8da:	6849      	ldr	r1, [r1, #4]
 800a8dc:	6923      	ldr	r3, [r4, #16]
 800a8de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8e2:	68a3      	ldr	r3, [r4, #8]
 800a8e4:	4607      	mov	r7, r0
 800a8e6:	4691      	mov	r9, r2
 800a8e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8ec:	f108 0601 	add.w	r6, r8, #1
 800a8f0:	42b3      	cmp	r3, r6
 800a8f2:	db0b      	blt.n	800a90c <__lshift+0x38>
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f7ff fddb 	bl	800a4b0 <_Balloc>
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	b948      	cbnz	r0, 800a912 <__lshift+0x3e>
 800a8fe:	4602      	mov	r2, r0
 800a900:	4b28      	ldr	r3, [pc, #160]	; (800a9a4 <__lshift+0xd0>)
 800a902:	4829      	ldr	r0, [pc, #164]	; (800a9a8 <__lshift+0xd4>)
 800a904:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a908:	f000 fb74 	bl	800aff4 <__assert_func>
 800a90c:	3101      	adds	r1, #1
 800a90e:	005b      	lsls	r3, r3, #1
 800a910:	e7ee      	b.n	800a8f0 <__lshift+0x1c>
 800a912:	2300      	movs	r3, #0
 800a914:	f100 0114 	add.w	r1, r0, #20
 800a918:	f100 0210 	add.w	r2, r0, #16
 800a91c:	4618      	mov	r0, r3
 800a91e:	4553      	cmp	r3, sl
 800a920:	db33      	blt.n	800a98a <__lshift+0xb6>
 800a922:	6920      	ldr	r0, [r4, #16]
 800a924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a928:	f104 0314 	add.w	r3, r4, #20
 800a92c:	f019 091f 	ands.w	r9, r9, #31
 800a930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a934:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a938:	d02b      	beq.n	800a992 <__lshift+0xbe>
 800a93a:	f1c9 0e20 	rsb	lr, r9, #32
 800a93e:	468a      	mov	sl, r1
 800a940:	2200      	movs	r2, #0
 800a942:	6818      	ldr	r0, [r3, #0]
 800a944:	fa00 f009 	lsl.w	r0, r0, r9
 800a948:	4302      	orrs	r2, r0
 800a94a:	f84a 2b04 	str.w	r2, [sl], #4
 800a94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a952:	459c      	cmp	ip, r3
 800a954:	fa22 f20e 	lsr.w	r2, r2, lr
 800a958:	d8f3      	bhi.n	800a942 <__lshift+0x6e>
 800a95a:	ebac 0304 	sub.w	r3, ip, r4
 800a95e:	3b15      	subs	r3, #21
 800a960:	f023 0303 	bic.w	r3, r3, #3
 800a964:	3304      	adds	r3, #4
 800a966:	f104 0015 	add.w	r0, r4, #21
 800a96a:	4584      	cmp	ip, r0
 800a96c:	bf38      	it	cc
 800a96e:	2304      	movcc	r3, #4
 800a970:	50ca      	str	r2, [r1, r3]
 800a972:	b10a      	cbz	r2, 800a978 <__lshift+0xa4>
 800a974:	f108 0602 	add.w	r6, r8, #2
 800a978:	3e01      	subs	r6, #1
 800a97a:	4638      	mov	r0, r7
 800a97c:	612e      	str	r6, [r5, #16]
 800a97e:	4621      	mov	r1, r4
 800a980:	f7ff fdd6 	bl	800a530 <_Bfree>
 800a984:	4628      	mov	r0, r5
 800a986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a98e:	3301      	adds	r3, #1
 800a990:	e7c5      	b.n	800a91e <__lshift+0x4a>
 800a992:	3904      	subs	r1, #4
 800a994:	f853 2b04 	ldr.w	r2, [r3], #4
 800a998:	f841 2f04 	str.w	r2, [r1, #4]!
 800a99c:	459c      	cmp	ip, r3
 800a99e:	d8f9      	bhi.n	800a994 <__lshift+0xc0>
 800a9a0:	e7ea      	b.n	800a978 <__lshift+0xa4>
 800a9a2:	bf00      	nop
 800a9a4:	0800c253 	.word	0x0800c253
 800a9a8:	0800c264 	.word	0x0800c264

0800a9ac <__mcmp>:
 800a9ac:	b530      	push	{r4, r5, lr}
 800a9ae:	6902      	ldr	r2, [r0, #16]
 800a9b0:	690c      	ldr	r4, [r1, #16]
 800a9b2:	1b12      	subs	r2, r2, r4
 800a9b4:	d10e      	bne.n	800a9d4 <__mcmp+0x28>
 800a9b6:	f100 0314 	add.w	r3, r0, #20
 800a9ba:	3114      	adds	r1, #20
 800a9bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a9c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a9c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a9c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9cc:	42a5      	cmp	r5, r4
 800a9ce:	d003      	beq.n	800a9d8 <__mcmp+0x2c>
 800a9d0:	d305      	bcc.n	800a9de <__mcmp+0x32>
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	bd30      	pop	{r4, r5, pc}
 800a9d8:	4283      	cmp	r3, r0
 800a9da:	d3f3      	bcc.n	800a9c4 <__mcmp+0x18>
 800a9dc:	e7fa      	b.n	800a9d4 <__mcmp+0x28>
 800a9de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9e2:	e7f7      	b.n	800a9d4 <__mcmp+0x28>

0800a9e4 <__mdiff>:
 800a9e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	4617      	mov	r7, r2
 800a9f2:	f7ff ffdb 	bl	800a9ac <__mcmp>
 800a9f6:	1e05      	subs	r5, r0, #0
 800a9f8:	d110      	bne.n	800aa1c <__mdiff+0x38>
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f7ff fd57 	bl	800a4b0 <_Balloc>
 800aa02:	b930      	cbnz	r0, 800aa12 <__mdiff+0x2e>
 800aa04:	4b39      	ldr	r3, [pc, #228]	; (800aaec <__mdiff+0x108>)
 800aa06:	4602      	mov	r2, r0
 800aa08:	f240 2132 	movw	r1, #562	; 0x232
 800aa0c:	4838      	ldr	r0, [pc, #224]	; (800aaf0 <__mdiff+0x10c>)
 800aa0e:	f000 faf1 	bl	800aff4 <__assert_func>
 800aa12:	2301      	movs	r3, #1
 800aa14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	bfa4      	itt	ge
 800aa1e:	463b      	movge	r3, r7
 800aa20:	4627      	movge	r7, r4
 800aa22:	4630      	mov	r0, r6
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	bfa6      	itte	ge
 800aa28:	461c      	movge	r4, r3
 800aa2a:	2500      	movge	r5, #0
 800aa2c:	2501      	movlt	r5, #1
 800aa2e:	f7ff fd3f 	bl	800a4b0 <_Balloc>
 800aa32:	b920      	cbnz	r0, 800aa3e <__mdiff+0x5a>
 800aa34:	4b2d      	ldr	r3, [pc, #180]	; (800aaec <__mdiff+0x108>)
 800aa36:	4602      	mov	r2, r0
 800aa38:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa3c:	e7e6      	b.n	800aa0c <__mdiff+0x28>
 800aa3e:	693e      	ldr	r6, [r7, #16]
 800aa40:	60c5      	str	r5, [r0, #12]
 800aa42:	6925      	ldr	r5, [r4, #16]
 800aa44:	f107 0114 	add.w	r1, r7, #20
 800aa48:	f104 0914 	add.w	r9, r4, #20
 800aa4c:	f100 0e14 	add.w	lr, r0, #20
 800aa50:	f107 0210 	add.w	r2, r7, #16
 800aa54:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aa58:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aa5c:	46f2      	mov	sl, lr
 800aa5e:	2700      	movs	r7, #0
 800aa60:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa68:	fa1f f883 	uxth.w	r8, r3
 800aa6c:	fa17 f78b 	uxtah	r7, r7, fp
 800aa70:	0c1b      	lsrs	r3, r3, #16
 800aa72:	eba7 0808 	sub.w	r8, r7, r8
 800aa76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa7e:	fa1f f888 	uxth.w	r8, r8
 800aa82:	141f      	asrs	r7, r3, #16
 800aa84:	454d      	cmp	r5, r9
 800aa86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa8a:	f84a 3b04 	str.w	r3, [sl], #4
 800aa8e:	d8e7      	bhi.n	800aa60 <__mdiff+0x7c>
 800aa90:	1b2b      	subs	r3, r5, r4
 800aa92:	3b15      	subs	r3, #21
 800aa94:	f023 0303 	bic.w	r3, r3, #3
 800aa98:	3304      	adds	r3, #4
 800aa9a:	3415      	adds	r4, #21
 800aa9c:	42a5      	cmp	r5, r4
 800aa9e:	bf38      	it	cc
 800aaa0:	2304      	movcc	r3, #4
 800aaa2:	4419      	add	r1, r3
 800aaa4:	4473      	add	r3, lr
 800aaa6:	469e      	mov	lr, r3
 800aaa8:	460d      	mov	r5, r1
 800aaaa:	4565      	cmp	r5, ip
 800aaac:	d30e      	bcc.n	800aacc <__mdiff+0xe8>
 800aaae:	f10c 0203 	add.w	r2, ip, #3
 800aab2:	1a52      	subs	r2, r2, r1
 800aab4:	f022 0203 	bic.w	r2, r2, #3
 800aab8:	3903      	subs	r1, #3
 800aaba:	458c      	cmp	ip, r1
 800aabc:	bf38      	it	cc
 800aabe:	2200      	movcc	r2, #0
 800aac0:	441a      	add	r2, r3
 800aac2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aac6:	b17b      	cbz	r3, 800aae8 <__mdiff+0x104>
 800aac8:	6106      	str	r6, [r0, #16]
 800aaca:	e7a5      	b.n	800aa18 <__mdiff+0x34>
 800aacc:	f855 8b04 	ldr.w	r8, [r5], #4
 800aad0:	fa17 f488 	uxtah	r4, r7, r8
 800aad4:	1422      	asrs	r2, r4, #16
 800aad6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800aada:	b2a4      	uxth	r4, r4
 800aadc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800aae0:	f84e 4b04 	str.w	r4, [lr], #4
 800aae4:	1417      	asrs	r7, r2, #16
 800aae6:	e7e0      	b.n	800aaaa <__mdiff+0xc6>
 800aae8:	3e01      	subs	r6, #1
 800aaea:	e7ea      	b.n	800aac2 <__mdiff+0xde>
 800aaec:	0800c253 	.word	0x0800c253
 800aaf0:	0800c264 	.word	0x0800c264

0800aaf4 <__d2b>:
 800aaf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aaf8:	2101      	movs	r1, #1
 800aafa:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 800aafe:	4690      	mov	r8, r2
 800ab00:	4699      	mov	r9, r3
 800ab02:	f7ff fcd5 	bl	800a4b0 <_Balloc>
 800ab06:	4604      	mov	r4, r0
 800ab08:	b930      	cbnz	r0, 800ab18 <__d2b+0x24>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	4b24      	ldr	r3, [pc, #144]	; (800aba0 <__d2b+0xac>)
 800ab0e:	4825      	ldr	r0, [pc, #148]	; (800aba4 <__d2b+0xb0>)
 800ab10:	f240 310a 	movw	r1, #778	; 0x30a
 800ab14:	f000 fa6e 	bl	800aff4 <__assert_func>
 800ab18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab20:	bb2d      	cbnz	r5, 800ab6e <__d2b+0x7a>
 800ab22:	f1b8 0200 	subs.w	r2, r8, #0
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	d026      	beq.n	800ab78 <__d2b+0x84>
 800ab2a:	4668      	mov	r0, sp
 800ab2c:	9200      	str	r2, [sp, #0]
 800ab2e:	f7ff fd8b 	bl	800a648 <__lo0bits>
 800ab32:	9900      	ldr	r1, [sp, #0]
 800ab34:	b1f0      	cbz	r0, 800ab74 <__d2b+0x80>
 800ab36:	9a01      	ldr	r2, [sp, #4]
 800ab38:	f1c0 0320 	rsb	r3, r0, #32
 800ab3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab40:	430b      	orrs	r3, r1
 800ab42:	40c2      	lsrs	r2, r0
 800ab44:	6163      	str	r3, [r4, #20]
 800ab46:	9201      	str	r2, [sp, #4]
 800ab48:	9b01      	ldr	r3, [sp, #4]
 800ab4a:	61a3      	str	r3, [r4, #24]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	bf14      	ite	ne
 800ab50:	2202      	movne	r2, #2
 800ab52:	2201      	moveq	r2, #1
 800ab54:	6122      	str	r2, [r4, #16]
 800ab56:	b1c5      	cbz	r5, 800ab8a <__d2b+0x96>
 800ab58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab5c:	4405      	add	r5, r0
 800ab5e:	603d      	str	r5, [r7, #0]
 800ab60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab64:	6030      	str	r0, [r6, #0]
 800ab66:	4620      	mov	r0, r4
 800ab68:	b003      	add	sp, #12
 800ab6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab72:	e7d6      	b.n	800ab22 <__d2b+0x2e>
 800ab74:	6161      	str	r1, [r4, #20]
 800ab76:	e7e7      	b.n	800ab48 <__d2b+0x54>
 800ab78:	a801      	add	r0, sp, #4
 800ab7a:	f7ff fd65 	bl	800a648 <__lo0bits>
 800ab7e:	9b01      	ldr	r3, [sp, #4]
 800ab80:	6163      	str	r3, [r4, #20]
 800ab82:	2201      	movs	r2, #1
 800ab84:	6122      	str	r2, [r4, #16]
 800ab86:	3020      	adds	r0, #32
 800ab88:	e7e5      	b.n	800ab56 <__d2b+0x62>
 800ab8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab92:	6038      	str	r0, [r7, #0]
 800ab94:	6918      	ldr	r0, [r3, #16]
 800ab96:	f7ff fd37 	bl	800a608 <__hi0bits>
 800ab9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab9e:	e7e1      	b.n	800ab64 <__d2b+0x70>
 800aba0:	0800c253 	.word	0x0800c253
 800aba4:	0800c264 	.word	0x0800c264

0800aba8 <_calloc_r>:
 800aba8:	b513      	push	{r0, r1, r4, lr}
 800abaa:	434a      	muls	r2, r1
 800abac:	4611      	mov	r1, r2
 800abae:	9201      	str	r2, [sp, #4]
 800abb0:	f000 f85a 	bl	800ac68 <_malloc_r>
 800abb4:	4604      	mov	r4, r0
 800abb6:	b118      	cbz	r0, 800abc0 <_calloc_r+0x18>
 800abb8:	9a01      	ldr	r2, [sp, #4]
 800abba:	2100      	movs	r1, #0
 800abbc:	f7fe f960 	bl	8008e80 <memset>
 800abc0:	4620      	mov	r0, r4
 800abc2:	b002      	add	sp, #8
 800abc4:	bd10      	pop	{r4, pc}
	...

0800abc8 <_free_r>:
 800abc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abca:	2900      	cmp	r1, #0
 800abcc:	d048      	beq.n	800ac60 <_free_r+0x98>
 800abce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abd2:	9001      	str	r0, [sp, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f1a1 0404 	sub.w	r4, r1, #4
 800abda:	bfb8      	it	lt
 800abdc:	18e4      	addlt	r4, r4, r3
 800abde:	f000 fa65 	bl	800b0ac <__malloc_lock>
 800abe2:	4a20      	ldr	r2, [pc, #128]	; (800ac64 <_free_r+0x9c>)
 800abe4:	9801      	ldr	r0, [sp, #4]
 800abe6:	6813      	ldr	r3, [r2, #0]
 800abe8:	4615      	mov	r5, r2
 800abea:	b933      	cbnz	r3, 800abfa <_free_r+0x32>
 800abec:	6063      	str	r3, [r4, #4]
 800abee:	6014      	str	r4, [r2, #0]
 800abf0:	b003      	add	sp, #12
 800abf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abf6:	f000 ba5f 	b.w	800b0b8 <__malloc_unlock>
 800abfa:	42a3      	cmp	r3, r4
 800abfc:	d90b      	bls.n	800ac16 <_free_r+0x4e>
 800abfe:	6821      	ldr	r1, [r4, #0]
 800ac00:	1862      	adds	r2, r4, r1
 800ac02:	4293      	cmp	r3, r2
 800ac04:	bf04      	itt	eq
 800ac06:	681a      	ldreq	r2, [r3, #0]
 800ac08:	685b      	ldreq	r3, [r3, #4]
 800ac0a:	6063      	str	r3, [r4, #4]
 800ac0c:	bf04      	itt	eq
 800ac0e:	1852      	addeq	r2, r2, r1
 800ac10:	6022      	streq	r2, [r4, #0]
 800ac12:	602c      	str	r4, [r5, #0]
 800ac14:	e7ec      	b.n	800abf0 <_free_r+0x28>
 800ac16:	461a      	mov	r2, r3
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	b10b      	cbz	r3, 800ac20 <_free_r+0x58>
 800ac1c:	42a3      	cmp	r3, r4
 800ac1e:	d9fa      	bls.n	800ac16 <_free_r+0x4e>
 800ac20:	6811      	ldr	r1, [r2, #0]
 800ac22:	1855      	adds	r5, r2, r1
 800ac24:	42a5      	cmp	r5, r4
 800ac26:	d10b      	bne.n	800ac40 <_free_r+0x78>
 800ac28:	6824      	ldr	r4, [r4, #0]
 800ac2a:	4421      	add	r1, r4
 800ac2c:	1854      	adds	r4, r2, r1
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	6011      	str	r1, [r2, #0]
 800ac32:	d1dd      	bne.n	800abf0 <_free_r+0x28>
 800ac34:	681c      	ldr	r4, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	6053      	str	r3, [r2, #4]
 800ac3a:	4421      	add	r1, r4
 800ac3c:	6011      	str	r1, [r2, #0]
 800ac3e:	e7d7      	b.n	800abf0 <_free_r+0x28>
 800ac40:	d902      	bls.n	800ac48 <_free_r+0x80>
 800ac42:	230c      	movs	r3, #12
 800ac44:	6003      	str	r3, [r0, #0]
 800ac46:	e7d3      	b.n	800abf0 <_free_r+0x28>
 800ac48:	6825      	ldr	r5, [r4, #0]
 800ac4a:	1961      	adds	r1, r4, r5
 800ac4c:	428b      	cmp	r3, r1
 800ac4e:	bf04      	itt	eq
 800ac50:	6819      	ldreq	r1, [r3, #0]
 800ac52:	685b      	ldreq	r3, [r3, #4]
 800ac54:	6063      	str	r3, [r4, #4]
 800ac56:	bf04      	itt	eq
 800ac58:	1949      	addeq	r1, r1, r5
 800ac5a:	6021      	streq	r1, [r4, #0]
 800ac5c:	6054      	str	r4, [r2, #4]
 800ac5e:	e7c7      	b.n	800abf0 <_free_r+0x28>
 800ac60:	b003      	add	sp, #12
 800ac62:	bd30      	pop	{r4, r5, pc}
 800ac64:	20013584 	.word	0x20013584

0800ac68 <_malloc_r>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	1ccd      	adds	r5, r1, #3
 800ac6c:	f025 0503 	bic.w	r5, r5, #3
 800ac70:	3508      	adds	r5, #8
 800ac72:	2d0c      	cmp	r5, #12
 800ac74:	bf38      	it	cc
 800ac76:	250c      	movcc	r5, #12
 800ac78:	2d00      	cmp	r5, #0
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	db01      	blt.n	800ac82 <_malloc_r+0x1a>
 800ac7e:	42a9      	cmp	r1, r5
 800ac80:	d903      	bls.n	800ac8a <_malloc_r+0x22>
 800ac82:	230c      	movs	r3, #12
 800ac84:	6033      	str	r3, [r6, #0]
 800ac86:	2000      	movs	r0, #0
 800ac88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac8a:	f000 fa0f 	bl	800b0ac <__malloc_lock>
 800ac8e:	4921      	ldr	r1, [pc, #132]	; (800ad14 <_malloc_r+0xac>)
 800ac90:	680a      	ldr	r2, [r1, #0]
 800ac92:	4614      	mov	r4, r2
 800ac94:	b99c      	cbnz	r4, 800acbe <_malloc_r+0x56>
 800ac96:	4f20      	ldr	r7, [pc, #128]	; (800ad18 <_malloc_r+0xb0>)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	b923      	cbnz	r3, 800aca6 <_malloc_r+0x3e>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4630      	mov	r0, r6
 800aca0:	f000 f998 	bl	800afd4 <_sbrk_r>
 800aca4:	6038      	str	r0, [r7, #0]
 800aca6:	4629      	mov	r1, r5
 800aca8:	4630      	mov	r0, r6
 800acaa:	f000 f993 	bl	800afd4 <_sbrk_r>
 800acae:	1c43      	adds	r3, r0, #1
 800acb0:	d123      	bne.n	800acfa <_malloc_r+0x92>
 800acb2:	230c      	movs	r3, #12
 800acb4:	6033      	str	r3, [r6, #0]
 800acb6:	4630      	mov	r0, r6
 800acb8:	f000 f9fe 	bl	800b0b8 <__malloc_unlock>
 800acbc:	e7e3      	b.n	800ac86 <_malloc_r+0x1e>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	1b5b      	subs	r3, r3, r5
 800acc2:	d417      	bmi.n	800acf4 <_malloc_r+0x8c>
 800acc4:	2b0b      	cmp	r3, #11
 800acc6:	d903      	bls.n	800acd0 <_malloc_r+0x68>
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	441c      	add	r4, r3
 800accc:	6025      	str	r5, [r4, #0]
 800acce:	e004      	b.n	800acda <_malloc_r+0x72>
 800acd0:	6863      	ldr	r3, [r4, #4]
 800acd2:	42a2      	cmp	r2, r4
 800acd4:	bf0c      	ite	eq
 800acd6:	600b      	streq	r3, [r1, #0]
 800acd8:	6053      	strne	r3, [r2, #4]
 800acda:	4630      	mov	r0, r6
 800acdc:	f000 f9ec 	bl	800b0b8 <__malloc_unlock>
 800ace0:	f104 000b 	add.w	r0, r4, #11
 800ace4:	1d23      	adds	r3, r4, #4
 800ace6:	f020 0007 	bic.w	r0, r0, #7
 800acea:	1ac2      	subs	r2, r0, r3
 800acec:	d0cc      	beq.n	800ac88 <_malloc_r+0x20>
 800acee:	1a1b      	subs	r3, r3, r0
 800acf0:	50a3      	str	r3, [r4, r2]
 800acf2:	e7c9      	b.n	800ac88 <_malloc_r+0x20>
 800acf4:	4622      	mov	r2, r4
 800acf6:	6864      	ldr	r4, [r4, #4]
 800acf8:	e7cc      	b.n	800ac94 <_malloc_r+0x2c>
 800acfa:	1cc4      	adds	r4, r0, #3
 800acfc:	f024 0403 	bic.w	r4, r4, #3
 800ad00:	42a0      	cmp	r0, r4
 800ad02:	d0e3      	beq.n	800accc <_malloc_r+0x64>
 800ad04:	1a21      	subs	r1, r4, r0
 800ad06:	4630      	mov	r0, r6
 800ad08:	f000 f964 	bl	800afd4 <_sbrk_r>
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	d1dd      	bne.n	800accc <_malloc_r+0x64>
 800ad10:	e7cf      	b.n	800acb2 <_malloc_r+0x4a>
 800ad12:	bf00      	nop
 800ad14:	20013584 	.word	0x20013584
 800ad18:	20013588 	.word	0x20013588

0800ad1c <__ssputs_r>:
 800ad1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad20:	688e      	ldr	r6, [r1, #8]
 800ad22:	429e      	cmp	r6, r3
 800ad24:	4682      	mov	sl, r0
 800ad26:	460c      	mov	r4, r1
 800ad28:	4690      	mov	r8, r2
 800ad2a:	461f      	mov	r7, r3
 800ad2c:	d838      	bhi.n	800ada0 <__ssputs_r+0x84>
 800ad2e:	898a      	ldrh	r2, [r1, #12]
 800ad30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad34:	d032      	beq.n	800ad9c <__ssputs_r+0x80>
 800ad36:	6825      	ldr	r5, [r4, #0]
 800ad38:	6909      	ldr	r1, [r1, #16]
 800ad3a:	eba5 0901 	sub.w	r9, r5, r1
 800ad3e:	6965      	ldr	r5, [r4, #20]
 800ad40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad48:	3301      	adds	r3, #1
 800ad4a:	444b      	add	r3, r9
 800ad4c:	106d      	asrs	r5, r5, #1
 800ad4e:	429d      	cmp	r5, r3
 800ad50:	bf38      	it	cc
 800ad52:	461d      	movcc	r5, r3
 800ad54:	0553      	lsls	r3, r2, #21
 800ad56:	d531      	bpl.n	800adbc <__ssputs_r+0xa0>
 800ad58:	4629      	mov	r1, r5
 800ad5a:	f7ff ff85 	bl	800ac68 <_malloc_r>
 800ad5e:	4606      	mov	r6, r0
 800ad60:	b950      	cbnz	r0, 800ad78 <__ssputs_r+0x5c>
 800ad62:	230c      	movs	r3, #12
 800ad64:	f8ca 3000 	str.w	r3, [sl]
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad6e:	81a3      	strh	r3, [r4, #12]
 800ad70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad78:	6921      	ldr	r1, [r4, #16]
 800ad7a:	464a      	mov	r2, r9
 800ad7c:	f7fe f872 	bl	8008e64 <memcpy>
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad8a:	81a3      	strh	r3, [r4, #12]
 800ad8c:	6126      	str	r6, [r4, #16]
 800ad8e:	6165      	str	r5, [r4, #20]
 800ad90:	444e      	add	r6, r9
 800ad92:	eba5 0509 	sub.w	r5, r5, r9
 800ad96:	6026      	str	r6, [r4, #0]
 800ad98:	60a5      	str	r5, [r4, #8]
 800ad9a:	463e      	mov	r6, r7
 800ad9c:	42be      	cmp	r6, r7
 800ad9e:	d900      	bls.n	800ada2 <__ssputs_r+0x86>
 800ada0:	463e      	mov	r6, r7
 800ada2:	4632      	mov	r2, r6
 800ada4:	6820      	ldr	r0, [r4, #0]
 800ada6:	4641      	mov	r1, r8
 800ada8:	f000 f966 	bl	800b078 <memmove>
 800adac:	68a3      	ldr	r3, [r4, #8]
 800adae:	6822      	ldr	r2, [r4, #0]
 800adb0:	1b9b      	subs	r3, r3, r6
 800adb2:	4432      	add	r2, r6
 800adb4:	60a3      	str	r3, [r4, #8]
 800adb6:	6022      	str	r2, [r4, #0]
 800adb8:	2000      	movs	r0, #0
 800adba:	e7db      	b.n	800ad74 <__ssputs_r+0x58>
 800adbc:	462a      	mov	r2, r5
 800adbe:	f000 f981 	bl	800b0c4 <_realloc_r>
 800adc2:	4606      	mov	r6, r0
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d1e1      	bne.n	800ad8c <__ssputs_r+0x70>
 800adc8:	6921      	ldr	r1, [r4, #16]
 800adca:	4650      	mov	r0, sl
 800adcc:	f7ff fefc 	bl	800abc8 <_free_r>
 800add0:	e7c7      	b.n	800ad62 <__ssputs_r+0x46>
	...

0800add4 <_svfiprintf_r>:
 800add4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add8:	4698      	mov	r8, r3
 800adda:	898b      	ldrh	r3, [r1, #12]
 800addc:	061b      	lsls	r3, r3, #24
 800adde:	b09d      	sub	sp, #116	; 0x74
 800ade0:	4607      	mov	r7, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	4614      	mov	r4, r2
 800ade6:	d50e      	bpl.n	800ae06 <_svfiprintf_r+0x32>
 800ade8:	690b      	ldr	r3, [r1, #16]
 800adea:	b963      	cbnz	r3, 800ae06 <_svfiprintf_r+0x32>
 800adec:	2140      	movs	r1, #64	; 0x40
 800adee:	f7ff ff3b 	bl	800ac68 <_malloc_r>
 800adf2:	6028      	str	r0, [r5, #0]
 800adf4:	6128      	str	r0, [r5, #16]
 800adf6:	b920      	cbnz	r0, 800ae02 <_svfiprintf_r+0x2e>
 800adf8:	230c      	movs	r3, #12
 800adfa:	603b      	str	r3, [r7, #0]
 800adfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae00:	e0d1      	b.n	800afa6 <_svfiprintf_r+0x1d2>
 800ae02:	2340      	movs	r3, #64	; 0x40
 800ae04:	616b      	str	r3, [r5, #20]
 800ae06:	2300      	movs	r3, #0
 800ae08:	9309      	str	r3, [sp, #36]	; 0x24
 800ae0a:	2320      	movs	r3, #32
 800ae0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae10:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae14:	2330      	movs	r3, #48	; 0x30
 800ae16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800afc0 <_svfiprintf_r+0x1ec>
 800ae1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae1e:	f04f 0901 	mov.w	r9, #1
 800ae22:	4623      	mov	r3, r4
 800ae24:	469a      	mov	sl, r3
 800ae26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae2a:	b10a      	cbz	r2, 800ae30 <_svfiprintf_r+0x5c>
 800ae2c:	2a25      	cmp	r2, #37	; 0x25
 800ae2e:	d1f9      	bne.n	800ae24 <_svfiprintf_r+0x50>
 800ae30:	ebba 0b04 	subs.w	fp, sl, r4
 800ae34:	d00b      	beq.n	800ae4e <_svfiprintf_r+0x7a>
 800ae36:	465b      	mov	r3, fp
 800ae38:	4622      	mov	r2, r4
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f7ff ff6d 	bl	800ad1c <__ssputs_r>
 800ae42:	3001      	adds	r0, #1
 800ae44:	f000 80aa 	beq.w	800af9c <_svfiprintf_r+0x1c8>
 800ae48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae4a:	445a      	add	r2, fp
 800ae4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 80a2 	beq.w	800af9c <_svfiprintf_r+0x1c8>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae62:	f10a 0a01 	add.w	sl, sl, #1
 800ae66:	9304      	str	r3, [sp, #16]
 800ae68:	9307      	str	r3, [sp, #28]
 800ae6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae6e:	931a      	str	r3, [sp, #104]	; 0x68
 800ae70:	4654      	mov	r4, sl
 800ae72:	2205      	movs	r2, #5
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	4851      	ldr	r0, [pc, #324]	; (800afc0 <_svfiprintf_r+0x1ec>)
 800ae7a:	f7f5 fa11 	bl	80002a0 <memchr>
 800ae7e:	9a04      	ldr	r2, [sp, #16]
 800ae80:	b9d8      	cbnz	r0, 800aeba <_svfiprintf_r+0xe6>
 800ae82:	06d0      	lsls	r0, r2, #27
 800ae84:	bf44      	itt	mi
 800ae86:	2320      	movmi	r3, #32
 800ae88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae8c:	0711      	lsls	r1, r2, #28
 800ae8e:	bf44      	itt	mi
 800ae90:	232b      	movmi	r3, #43	; 0x2b
 800ae92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae96:	f89a 3000 	ldrb.w	r3, [sl]
 800ae9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae9c:	d015      	beq.n	800aeca <_svfiprintf_r+0xf6>
 800ae9e:	9a07      	ldr	r2, [sp, #28]
 800aea0:	4654      	mov	r4, sl
 800aea2:	2000      	movs	r0, #0
 800aea4:	f04f 0c0a 	mov.w	ip, #10
 800aea8:	4621      	mov	r1, r4
 800aeaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeae:	3b30      	subs	r3, #48	; 0x30
 800aeb0:	2b09      	cmp	r3, #9
 800aeb2:	d94e      	bls.n	800af52 <_svfiprintf_r+0x17e>
 800aeb4:	b1b0      	cbz	r0, 800aee4 <_svfiprintf_r+0x110>
 800aeb6:	9207      	str	r2, [sp, #28]
 800aeb8:	e014      	b.n	800aee4 <_svfiprintf_r+0x110>
 800aeba:	eba0 0308 	sub.w	r3, r0, r8
 800aebe:	fa09 f303 	lsl.w	r3, r9, r3
 800aec2:	4313      	orrs	r3, r2
 800aec4:	9304      	str	r3, [sp, #16]
 800aec6:	46a2      	mov	sl, r4
 800aec8:	e7d2      	b.n	800ae70 <_svfiprintf_r+0x9c>
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	1d19      	adds	r1, r3, #4
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	9103      	str	r1, [sp, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bfbb      	ittet	lt
 800aed6:	425b      	neglt	r3, r3
 800aed8:	f042 0202 	orrlt.w	r2, r2, #2
 800aedc:	9307      	strge	r3, [sp, #28]
 800aede:	9307      	strlt	r3, [sp, #28]
 800aee0:	bfb8      	it	lt
 800aee2:	9204      	strlt	r2, [sp, #16]
 800aee4:	7823      	ldrb	r3, [r4, #0]
 800aee6:	2b2e      	cmp	r3, #46	; 0x2e
 800aee8:	d10c      	bne.n	800af04 <_svfiprintf_r+0x130>
 800aeea:	7863      	ldrb	r3, [r4, #1]
 800aeec:	2b2a      	cmp	r3, #42	; 0x2a
 800aeee:	d135      	bne.n	800af5c <_svfiprintf_r+0x188>
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	1d1a      	adds	r2, r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	9203      	str	r2, [sp, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	bfb8      	it	lt
 800aefc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800af00:	3402      	adds	r4, #2
 800af02:	9305      	str	r3, [sp, #20]
 800af04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800afd0 <_svfiprintf_r+0x1fc>
 800af08:	7821      	ldrb	r1, [r4, #0]
 800af0a:	2203      	movs	r2, #3
 800af0c:	4650      	mov	r0, sl
 800af0e:	f7f5 f9c7 	bl	80002a0 <memchr>
 800af12:	b140      	cbz	r0, 800af26 <_svfiprintf_r+0x152>
 800af14:	2340      	movs	r3, #64	; 0x40
 800af16:	eba0 000a 	sub.w	r0, r0, sl
 800af1a:	fa03 f000 	lsl.w	r0, r3, r0
 800af1e:	9b04      	ldr	r3, [sp, #16]
 800af20:	4303      	orrs	r3, r0
 800af22:	3401      	adds	r4, #1
 800af24:	9304      	str	r3, [sp, #16]
 800af26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af2a:	4826      	ldr	r0, [pc, #152]	; (800afc4 <_svfiprintf_r+0x1f0>)
 800af2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af30:	2206      	movs	r2, #6
 800af32:	f7f5 f9b5 	bl	80002a0 <memchr>
 800af36:	2800      	cmp	r0, #0
 800af38:	d038      	beq.n	800afac <_svfiprintf_r+0x1d8>
 800af3a:	4b23      	ldr	r3, [pc, #140]	; (800afc8 <_svfiprintf_r+0x1f4>)
 800af3c:	bb1b      	cbnz	r3, 800af86 <_svfiprintf_r+0x1b2>
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	3307      	adds	r3, #7
 800af42:	f023 0307 	bic.w	r3, r3, #7
 800af46:	3308      	adds	r3, #8
 800af48:	9303      	str	r3, [sp, #12]
 800af4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af4c:	4433      	add	r3, r6
 800af4e:	9309      	str	r3, [sp, #36]	; 0x24
 800af50:	e767      	b.n	800ae22 <_svfiprintf_r+0x4e>
 800af52:	fb0c 3202 	mla	r2, ip, r2, r3
 800af56:	460c      	mov	r4, r1
 800af58:	2001      	movs	r0, #1
 800af5a:	e7a5      	b.n	800aea8 <_svfiprintf_r+0xd4>
 800af5c:	2300      	movs	r3, #0
 800af5e:	3401      	adds	r4, #1
 800af60:	9305      	str	r3, [sp, #20]
 800af62:	4619      	mov	r1, r3
 800af64:	f04f 0c0a 	mov.w	ip, #10
 800af68:	4620      	mov	r0, r4
 800af6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af6e:	3a30      	subs	r2, #48	; 0x30
 800af70:	2a09      	cmp	r2, #9
 800af72:	d903      	bls.n	800af7c <_svfiprintf_r+0x1a8>
 800af74:	2b00      	cmp	r3, #0
 800af76:	d0c5      	beq.n	800af04 <_svfiprintf_r+0x130>
 800af78:	9105      	str	r1, [sp, #20]
 800af7a:	e7c3      	b.n	800af04 <_svfiprintf_r+0x130>
 800af7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af80:	4604      	mov	r4, r0
 800af82:	2301      	movs	r3, #1
 800af84:	e7f0      	b.n	800af68 <_svfiprintf_r+0x194>
 800af86:	ab03      	add	r3, sp, #12
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	462a      	mov	r2, r5
 800af8c:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <_svfiprintf_r+0x1f8>)
 800af8e:	a904      	add	r1, sp, #16
 800af90:	4638      	mov	r0, r7
 800af92:	f7fe f81d 	bl	8008fd0 <_printf_float>
 800af96:	1c42      	adds	r2, r0, #1
 800af98:	4606      	mov	r6, r0
 800af9a:	d1d6      	bne.n	800af4a <_svfiprintf_r+0x176>
 800af9c:	89ab      	ldrh	r3, [r5, #12]
 800af9e:	065b      	lsls	r3, r3, #25
 800afa0:	f53f af2c 	bmi.w	800adfc <_svfiprintf_r+0x28>
 800afa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afa6:	b01d      	add	sp, #116	; 0x74
 800afa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afac:	ab03      	add	r3, sp, #12
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	462a      	mov	r2, r5
 800afb2:	4b06      	ldr	r3, [pc, #24]	; (800afcc <_svfiprintf_r+0x1f8>)
 800afb4:	a904      	add	r1, sp, #16
 800afb6:	4638      	mov	r0, r7
 800afb8:	f7fe fab0 	bl	800951c <_printf_i>
 800afbc:	e7eb      	b.n	800af96 <_svfiprintf_r+0x1c2>
 800afbe:	bf00      	nop
 800afc0:	0800c3c4 	.word	0x0800c3c4
 800afc4:	0800c3ce 	.word	0x0800c3ce
 800afc8:	08008fd1 	.word	0x08008fd1
 800afcc:	0800ad1d 	.word	0x0800ad1d
 800afd0:	0800c3ca 	.word	0x0800c3ca

0800afd4 <_sbrk_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d06      	ldr	r5, [pc, #24]	; (800aff0 <_sbrk_r+0x1c>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	f7fd fea8 	bl	8008d34 <_sbrk>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_sbrk_r+0x1a>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_sbrk_r+0x1a>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	200138ec 	.word	0x200138ec

0800aff4 <__assert_func>:
 800aff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff6:	4614      	mov	r4, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	4b09      	ldr	r3, [pc, #36]	; (800b020 <__assert_func+0x2c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4605      	mov	r5, r0
 800b000:	68d8      	ldr	r0, [r3, #12]
 800b002:	b14c      	cbz	r4, 800b018 <__assert_func+0x24>
 800b004:	4b07      	ldr	r3, [pc, #28]	; (800b024 <__assert_func+0x30>)
 800b006:	9100      	str	r1, [sp, #0]
 800b008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b00c:	4906      	ldr	r1, [pc, #24]	; (800b028 <__assert_func+0x34>)
 800b00e:	462b      	mov	r3, r5
 800b010:	f000 f80e 	bl	800b030 <fiprintf>
 800b014:	f000 faa4 	bl	800b560 <abort>
 800b018:	4b04      	ldr	r3, [pc, #16]	; (800b02c <__assert_func+0x38>)
 800b01a:	461c      	mov	r4, r3
 800b01c:	e7f3      	b.n	800b006 <__assert_func+0x12>
 800b01e:	bf00      	nop
 800b020:	20000038 	.word	0x20000038
 800b024:	0800c3d5 	.word	0x0800c3d5
 800b028:	0800c3e2 	.word	0x0800c3e2
 800b02c:	0800c410 	.word	0x0800c410

0800b030 <fiprintf>:
 800b030:	b40e      	push	{r1, r2, r3}
 800b032:	b503      	push	{r0, r1, lr}
 800b034:	4601      	mov	r1, r0
 800b036:	ab03      	add	r3, sp, #12
 800b038:	4805      	ldr	r0, [pc, #20]	; (800b050 <fiprintf+0x20>)
 800b03a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b03e:	6800      	ldr	r0, [r0, #0]
 800b040:	9301      	str	r3, [sp, #4]
 800b042:	f000 f88f 	bl	800b164 <_vfiprintf_r>
 800b046:	b002      	add	sp, #8
 800b048:	f85d eb04 	ldr.w	lr, [sp], #4
 800b04c:	b003      	add	sp, #12
 800b04e:	4770      	bx	lr
 800b050:	20000038 	.word	0x20000038

0800b054 <__ascii_mbtowc>:
 800b054:	b082      	sub	sp, #8
 800b056:	b901      	cbnz	r1, 800b05a <__ascii_mbtowc+0x6>
 800b058:	a901      	add	r1, sp, #4
 800b05a:	b142      	cbz	r2, 800b06e <__ascii_mbtowc+0x1a>
 800b05c:	b14b      	cbz	r3, 800b072 <__ascii_mbtowc+0x1e>
 800b05e:	7813      	ldrb	r3, [r2, #0]
 800b060:	600b      	str	r3, [r1, #0]
 800b062:	7812      	ldrb	r2, [r2, #0]
 800b064:	1e10      	subs	r0, r2, #0
 800b066:	bf18      	it	ne
 800b068:	2001      	movne	r0, #1
 800b06a:	b002      	add	sp, #8
 800b06c:	4770      	bx	lr
 800b06e:	4610      	mov	r0, r2
 800b070:	e7fb      	b.n	800b06a <__ascii_mbtowc+0x16>
 800b072:	f06f 0001 	mvn.w	r0, #1
 800b076:	e7f8      	b.n	800b06a <__ascii_mbtowc+0x16>

0800b078 <memmove>:
 800b078:	4288      	cmp	r0, r1
 800b07a:	b510      	push	{r4, lr}
 800b07c:	eb01 0402 	add.w	r4, r1, r2
 800b080:	d902      	bls.n	800b088 <memmove+0x10>
 800b082:	4284      	cmp	r4, r0
 800b084:	4623      	mov	r3, r4
 800b086:	d807      	bhi.n	800b098 <memmove+0x20>
 800b088:	1e43      	subs	r3, r0, #1
 800b08a:	42a1      	cmp	r1, r4
 800b08c:	d008      	beq.n	800b0a0 <memmove+0x28>
 800b08e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b092:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b096:	e7f8      	b.n	800b08a <memmove+0x12>
 800b098:	4402      	add	r2, r0
 800b09a:	4601      	mov	r1, r0
 800b09c:	428a      	cmp	r2, r1
 800b09e:	d100      	bne.n	800b0a2 <memmove+0x2a>
 800b0a0:	bd10      	pop	{r4, pc}
 800b0a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0aa:	e7f7      	b.n	800b09c <memmove+0x24>

0800b0ac <__malloc_lock>:
 800b0ac:	4801      	ldr	r0, [pc, #4]	; (800b0b4 <__malloc_lock+0x8>)
 800b0ae:	f000 bc17 	b.w	800b8e0 <__retarget_lock_acquire_recursive>
 800b0b2:	bf00      	nop
 800b0b4:	200138f4 	.word	0x200138f4

0800b0b8 <__malloc_unlock>:
 800b0b8:	4801      	ldr	r0, [pc, #4]	; (800b0c0 <__malloc_unlock+0x8>)
 800b0ba:	f000 bc12 	b.w	800b8e2 <__retarget_lock_release_recursive>
 800b0be:	bf00      	nop
 800b0c0:	200138f4 	.word	0x200138f4

0800b0c4 <_realloc_r>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	4614      	mov	r4, r2
 800b0ca:	460e      	mov	r6, r1
 800b0cc:	b921      	cbnz	r1, 800b0d8 <_realloc_r+0x14>
 800b0ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	f7ff bdc8 	b.w	800ac68 <_malloc_r>
 800b0d8:	b922      	cbnz	r2, 800b0e4 <_realloc_r+0x20>
 800b0da:	f7ff fd75 	bl	800abc8 <_free_r>
 800b0de:	4625      	mov	r5, r4
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0e4:	f000 fc62 	bl	800b9ac <_malloc_usable_size_r>
 800b0e8:	42a0      	cmp	r0, r4
 800b0ea:	d20f      	bcs.n	800b10c <_realloc_r+0x48>
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	f7ff fdba 	bl	800ac68 <_malloc_r>
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d0f2      	beq.n	800b0e0 <_realloc_r+0x1c>
 800b0fa:	4631      	mov	r1, r6
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	f7fd feb1 	bl	8008e64 <memcpy>
 800b102:	4631      	mov	r1, r6
 800b104:	4638      	mov	r0, r7
 800b106:	f7ff fd5f 	bl	800abc8 <_free_r>
 800b10a:	e7e9      	b.n	800b0e0 <_realloc_r+0x1c>
 800b10c:	4635      	mov	r5, r6
 800b10e:	e7e7      	b.n	800b0e0 <_realloc_r+0x1c>

0800b110 <__sfputc_r>:
 800b110:	6893      	ldr	r3, [r2, #8]
 800b112:	3b01      	subs	r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	b410      	push	{r4}
 800b118:	6093      	str	r3, [r2, #8]
 800b11a:	da08      	bge.n	800b12e <__sfputc_r+0x1e>
 800b11c:	6994      	ldr	r4, [r2, #24]
 800b11e:	42a3      	cmp	r3, r4
 800b120:	db01      	blt.n	800b126 <__sfputc_r+0x16>
 800b122:	290a      	cmp	r1, #10
 800b124:	d103      	bne.n	800b12e <__sfputc_r+0x1e>
 800b126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b12a:	f000 b94b 	b.w	800b3c4 <__swbuf_r>
 800b12e:	6813      	ldr	r3, [r2, #0]
 800b130:	1c58      	adds	r0, r3, #1
 800b132:	6010      	str	r0, [r2, #0]
 800b134:	7019      	strb	r1, [r3, #0]
 800b136:	4608      	mov	r0, r1
 800b138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <__sfputs_r>:
 800b13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b140:	4606      	mov	r6, r0
 800b142:	460f      	mov	r7, r1
 800b144:	4614      	mov	r4, r2
 800b146:	18d5      	adds	r5, r2, r3
 800b148:	42ac      	cmp	r4, r5
 800b14a:	d101      	bne.n	800b150 <__sfputs_r+0x12>
 800b14c:	2000      	movs	r0, #0
 800b14e:	e007      	b.n	800b160 <__sfputs_r+0x22>
 800b150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b154:	463a      	mov	r2, r7
 800b156:	4630      	mov	r0, r6
 800b158:	f7ff ffda 	bl	800b110 <__sfputc_r>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	d1f3      	bne.n	800b148 <__sfputs_r+0xa>
 800b160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b164 <_vfiprintf_r>:
 800b164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b168:	460d      	mov	r5, r1
 800b16a:	b09d      	sub	sp, #116	; 0x74
 800b16c:	4614      	mov	r4, r2
 800b16e:	4698      	mov	r8, r3
 800b170:	4606      	mov	r6, r0
 800b172:	b118      	cbz	r0, 800b17c <_vfiprintf_r+0x18>
 800b174:	6983      	ldr	r3, [r0, #24]
 800b176:	b90b      	cbnz	r3, 800b17c <_vfiprintf_r+0x18>
 800b178:	f000 fb14 	bl	800b7a4 <__sinit>
 800b17c:	4b89      	ldr	r3, [pc, #548]	; (800b3a4 <_vfiprintf_r+0x240>)
 800b17e:	429d      	cmp	r5, r3
 800b180:	d11b      	bne.n	800b1ba <_vfiprintf_r+0x56>
 800b182:	6875      	ldr	r5, [r6, #4]
 800b184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b186:	07d9      	lsls	r1, r3, #31
 800b188:	d405      	bmi.n	800b196 <_vfiprintf_r+0x32>
 800b18a:	89ab      	ldrh	r3, [r5, #12]
 800b18c:	059a      	lsls	r2, r3, #22
 800b18e:	d402      	bmi.n	800b196 <_vfiprintf_r+0x32>
 800b190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b192:	f000 fba5 	bl	800b8e0 <__retarget_lock_acquire_recursive>
 800b196:	89ab      	ldrh	r3, [r5, #12]
 800b198:	071b      	lsls	r3, r3, #28
 800b19a:	d501      	bpl.n	800b1a0 <_vfiprintf_r+0x3c>
 800b19c:	692b      	ldr	r3, [r5, #16]
 800b19e:	b9eb      	cbnz	r3, 800b1dc <_vfiprintf_r+0x78>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f000 f96e 	bl	800b484 <__swsetup_r>
 800b1a8:	b1c0      	cbz	r0, 800b1dc <_vfiprintf_r+0x78>
 800b1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ac:	07dc      	lsls	r4, r3, #31
 800b1ae:	d50e      	bpl.n	800b1ce <_vfiprintf_r+0x6a>
 800b1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1b4:	b01d      	add	sp, #116	; 0x74
 800b1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ba:	4b7b      	ldr	r3, [pc, #492]	; (800b3a8 <_vfiprintf_r+0x244>)
 800b1bc:	429d      	cmp	r5, r3
 800b1be:	d101      	bne.n	800b1c4 <_vfiprintf_r+0x60>
 800b1c0:	68b5      	ldr	r5, [r6, #8]
 800b1c2:	e7df      	b.n	800b184 <_vfiprintf_r+0x20>
 800b1c4:	4b79      	ldr	r3, [pc, #484]	; (800b3ac <_vfiprintf_r+0x248>)
 800b1c6:	429d      	cmp	r5, r3
 800b1c8:	bf08      	it	eq
 800b1ca:	68f5      	ldreq	r5, [r6, #12]
 800b1cc:	e7da      	b.n	800b184 <_vfiprintf_r+0x20>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	0598      	lsls	r0, r3, #22
 800b1d2:	d4ed      	bmi.n	800b1b0 <_vfiprintf_r+0x4c>
 800b1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d6:	f000 fb84 	bl	800b8e2 <__retarget_lock_release_recursive>
 800b1da:	e7e9      	b.n	800b1b0 <_vfiprintf_r+0x4c>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e0:	2320      	movs	r3, #32
 800b1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ea:	2330      	movs	r3, #48	; 0x30
 800b1ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3b0 <_vfiprintf_r+0x24c>
 800b1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1f4:	f04f 0901 	mov.w	r9, #1
 800b1f8:	4623      	mov	r3, r4
 800b1fa:	469a      	mov	sl, r3
 800b1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b200:	b10a      	cbz	r2, 800b206 <_vfiprintf_r+0xa2>
 800b202:	2a25      	cmp	r2, #37	; 0x25
 800b204:	d1f9      	bne.n	800b1fa <_vfiprintf_r+0x96>
 800b206:	ebba 0b04 	subs.w	fp, sl, r4
 800b20a:	d00b      	beq.n	800b224 <_vfiprintf_r+0xc0>
 800b20c:	465b      	mov	r3, fp
 800b20e:	4622      	mov	r2, r4
 800b210:	4629      	mov	r1, r5
 800b212:	4630      	mov	r0, r6
 800b214:	f7ff ff93 	bl	800b13e <__sfputs_r>
 800b218:	3001      	adds	r0, #1
 800b21a:	f000 80aa 	beq.w	800b372 <_vfiprintf_r+0x20e>
 800b21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b220:	445a      	add	r2, fp
 800b222:	9209      	str	r2, [sp, #36]	; 0x24
 800b224:	f89a 3000 	ldrb.w	r3, [sl]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 80a2 	beq.w	800b372 <_vfiprintf_r+0x20e>
 800b22e:	2300      	movs	r3, #0
 800b230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b238:	f10a 0a01 	add.w	sl, sl, #1
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	9307      	str	r3, [sp, #28]
 800b240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b244:	931a      	str	r3, [sp, #104]	; 0x68
 800b246:	4654      	mov	r4, sl
 800b248:	2205      	movs	r2, #5
 800b24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24e:	4858      	ldr	r0, [pc, #352]	; (800b3b0 <_vfiprintf_r+0x24c>)
 800b250:	f7f5 f826 	bl	80002a0 <memchr>
 800b254:	9a04      	ldr	r2, [sp, #16]
 800b256:	b9d8      	cbnz	r0, 800b290 <_vfiprintf_r+0x12c>
 800b258:	06d1      	lsls	r1, r2, #27
 800b25a:	bf44      	itt	mi
 800b25c:	2320      	movmi	r3, #32
 800b25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b262:	0713      	lsls	r3, r2, #28
 800b264:	bf44      	itt	mi
 800b266:	232b      	movmi	r3, #43	; 0x2b
 800b268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b26c:	f89a 3000 	ldrb.w	r3, [sl]
 800b270:	2b2a      	cmp	r3, #42	; 0x2a
 800b272:	d015      	beq.n	800b2a0 <_vfiprintf_r+0x13c>
 800b274:	9a07      	ldr	r2, [sp, #28]
 800b276:	4654      	mov	r4, sl
 800b278:	2000      	movs	r0, #0
 800b27a:	f04f 0c0a 	mov.w	ip, #10
 800b27e:	4621      	mov	r1, r4
 800b280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b284:	3b30      	subs	r3, #48	; 0x30
 800b286:	2b09      	cmp	r3, #9
 800b288:	d94e      	bls.n	800b328 <_vfiprintf_r+0x1c4>
 800b28a:	b1b0      	cbz	r0, 800b2ba <_vfiprintf_r+0x156>
 800b28c:	9207      	str	r2, [sp, #28]
 800b28e:	e014      	b.n	800b2ba <_vfiprintf_r+0x156>
 800b290:	eba0 0308 	sub.w	r3, r0, r8
 800b294:	fa09 f303 	lsl.w	r3, r9, r3
 800b298:	4313      	orrs	r3, r2
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	46a2      	mov	sl, r4
 800b29e:	e7d2      	b.n	800b246 <_vfiprintf_r+0xe2>
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	1d19      	adds	r1, r3, #4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	9103      	str	r1, [sp, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bfbb      	ittet	lt
 800b2ac:	425b      	neglt	r3, r3
 800b2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b2:	9307      	strge	r3, [sp, #28]
 800b2b4:	9307      	strlt	r3, [sp, #28]
 800b2b6:	bfb8      	it	lt
 800b2b8:	9204      	strlt	r2, [sp, #16]
 800b2ba:	7823      	ldrb	r3, [r4, #0]
 800b2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b2be:	d10c      	bne.n	800b2da <_vfiprintf_r+0x176>
 800b2c0:	7863      	ldrb	r3, [r4, #1]
 800b2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c4:	d135      	bne.n	800b332 <_vfiprintf_r+0x1ce>
 800b2c6:	9b03      	ldr	r3, [sp, #12]
 800b2c8:	1d1a      	adds	r2, r3, #4
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	9203      	str	r2, [sp, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bfb8      	it	lt
 800b2d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b2d6:	3402      	adds	r4, #2
 800b2d8:	9305      	str	r3, [sp, #20]
 800b2da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3c0 <_vfiprintf_r+0x25c>
 800b2de:	7821      	ldrb	r1, [r4, #0]
 800b2e0:	2203      	movs	r2, #3
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f7f4 ffdc 	bl	80002a0 <memchr>
 800b2e8:	b140      	cbz	r0, 800b2fc <_vfiprintf_r+0x198>
 800b2ea:	2340      	movs	r3, #64	; 0x40
 800b2ec:	eba0 000a 	sub.w	r0, r0, sl
 800b2f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	4303      	orrs	r3, r0
 800b2f8:	3401      	adds	r4, #1
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b300:	482c      	ldr	r0, [pc, #176]	; (800b3b4 <_vfiprintf_r+0x250>)
 800b302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b306:	2206      	movs	r2, #6
 800b308:	f7f4 ffca 	bl	80002a0 <memchr>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d03f      	beq.n	800b390 <_vfiprintf_r+0x22c>
 800b310:	4b29      	ldr	r3, [pc, #164]	; (800b3b8 <_vfiprintf_r+0x254>)
 800b312:	bb1b      	cbnz	r3, 800b35c <_vfiprintf_r+0x1f8>
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	3307      	adds	r3, #7
 800b318:	f023 0307 	bic.w	r3, r3, #7
 800b31c:	3308      	adds	r3, #8
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b322:	443b      	add	r3, r7
 800b324:	9309      	str	r3, [sp, #36]	; 0x24
 800b326:	e767      	b.n	800b1f8 <_vfiprintf_r+0x94>
 800b328:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32c:	460c      	mov	r4, r1
 800b32e:	2001      	movs	r0, #1
 800b330:	e7a5      	b.n	800b27e <_vfiprintf_r+0x11a>
 800b332:	2300      	movs	r3, #0
 800b334:	3401      	adds	r4, #1
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	4619      	mov	r1, r3
 800b33a:	f04f 0c0a 	mov.w	ip, #10
 800b33e:	4620      	mov	r0, r4
 800b340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b344:	3a30      	subs	r2, #48	; 0x30
 800b346:	2a09      	cmp	r2, #9
 800b348:	d903      	bls.n	800b352 <_vfiprintf_r+0x1ee>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0c5      	beq.n	800b2da <_vfiprintf_r+0x176>
 800b34e:	9105      	str	r1, [sp, #20]
 800b350:	e7c3      	b.n	800b2da <_vfiprintf_r+0x176>
 800b352:	fb0c 2101 	mla	r1, ip, r1, r2
 800b356:	4604      	mov	r4, r0
 800b358:	2301      	movs	r3, #1
 800b35a:	e7f0      	b.n	800b33e <_vfiprintf_r+0x1da>
 800b35c:	ab03      	add	r3, sp, #12
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	462a      	mov	r2, r5
 800b362:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <_vfiprintf_r+0x258>)
 800b364:	a904      	add	r1, sp, #16
 800b366:	4630      	mov	r0, r6
 800b368:	f7fd fe32 	bl	8008fd0 <_printf_float>
 800b36c:	4607      	mov	r7, r0
 800b36e:	1c78      	adds	r0, r7, #1
 800b370:	d1d6      	bne.n	800b320 <_vfiprintf_r+0x1bc>
 800b372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b374:	07d9      	lsls	r1, r3, #31
 800b376:	d405      	bmi.n	800b384 <_vfiprintf_r+0x220>
 800b378:	89ab      	ldrh	r3, [r5, #12]
 800b37a:	059a      	lsls	r2, r3, #22
 800b37c:	d402      	bmi.n	800b384 <_vfiprintf_r+0x220>
 800b37e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b380:	f000 faaf 	bl	800b8e2 <__retarget_lock_release_recursive>
 800b384:	89ab      	ldrh	r3, [r5, #12]
 800b386:	065b      	lsls	r3, r3, #25
 800b388:	f53f af12 	bmi.w	800b1b0 <_vfiprintf_r+0x4c>
 800b38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b38e:	e711      	b.n	800b1b4 <_vfiprintf_r+0x50>
 800b390:	ab03      	add	r3, sp, #12
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	462a      	mov	r2, r5
 800b396:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <_vfiprintf_r+0x258>)
 800b398:	a904      	add	r1, sp, #16
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7fe f8be 	bl	800951c <_printf_i>
 800b3a0:	e7e4      	b.n	800b36c <_vfiprintf_r+0x208>
 800b3a2:	bf00      	nop
 800b3a4:	0800c53c 	.word	0x0800c53c
 800b3a8:	0800c55c 	.word	0x0800c55c
 800b3ac:	0800c51c 	.word	0x0800c51c
 800b3b0:	0800c3c4 	.word	0x0800c3c4
 800b3b4:	0800c3ce 	.word	0x0800c3ce
 800b3b8:	08008fd1 	.word	0x08008fd1
 800b3bc:	0800b13f 	.word	0x0800b13f
 800b3c0:	0800c3ca 	.word	0x0800c3ca

0800b3c4 <__swbuf_r>:
 800b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c6:	460e      	mov	r6, r1
 800b3c8:	4614      	mov	r4, r2
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	b118      	cbz	r0, 800b3d6 <__swbuf_r+0x12>
 800b3ce:	6983      	ldr	r3, [r0, #24]
 800b3d0:	b90b      	cbnz	r3, 800b3d6 <__swbuf_r+0x12>
 800b3d2:	f000 f9e7 	bl	800b7a4 <__sinit>
 800b3d6:	4b21      	ldr	r3, [pc, #132]	; (800b45c <__swbuf_r+0x98>)
 800b3d8:	429c      	cmp	r4, r3
 800b3da:	d12b      	bne.n	800b434 <__swbuf_r+0x70>
 800b3dc:	686c      	ldr	r4, [r5, #4]
 800b3de:	69a3      	ldr	r3, [r4, #24]
 800b3e0:	60a3      	str	r3, [r4, #8]
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	071a      	lsls	r2, r3, #28
 800b3e6:	d52f      	bpl.n	800b448 <__swbuf_r+0x84>
 800b3e8:	6923      	ldr	r3, [r4, #16]
 800b3ea:	b36b      	cbz	r3, 800b448 <__swbuf_r+0x84>
 800b3ec:	6923      	ldr	r3, [r4, #16]
 800b3ee:	6820      	ldr	r0, [r4, #0]
 800b3f0:	1ac0      	subs	r0, r0, r3
 800b3f2:	6963      	ldr	r3, [r4, #20]
 800b3f4:	b2f6      	uxtb	r6, r6
 800b3f6:	4283      	cmp	r3, r0
 800b3f8:	4637      	mov	r7, r6
 800b3fa:	dc04      	bgt.n	800b406 <__swbuf_r+0x42>
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	4628      	mov	r0, r5
 800b400:	f000 f93c 	bl	800b67c <_fflush_r>
 800b404:	bb30      	cbnz	r0, 800b454 <__swbuf_r+0x90>
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	3b01      	subs	r3, #1
 800b40a:	60a3      	str	r3, [r4, #8]
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	6022      	str	r2, [r4, #0]
 800b412:	701e      	strb	r6, [r3, #0]
 800b414:	6963      	ldr	r3, [r4, #20]
 800b416:	3001      	adds	r0, #1
 800b418:	4283      	cmp	r3, r0
 800b41a:	d004      	beq.n	800b426 <__swbuf_r+0x62>
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	07db      	lsls	r3, r3, #31
 800b420:	d506      	bpl.n	800b430 <__swbuf_r+0x6c>
 800b422:	2e0a      	cmp	r6, #10
 800b424:	d104      	bne.n	800b430 <__swbuf_r+0x6c>
 800b426:	4621      	mov	r1, r4
 800b428:	4628      	mov	r0, r5
 800b42a:	f000 f927 	bl	800b67c <_fflush_r>
 800b42e:	b988      	cbnz	r0, 800b454 <__swbuf_r+0x90>
 800b430:	4638      	mov	r0, r7
 800b432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b434:	4b0a      	ldr	r3, [pc, #40]	; (800b460 <__swbuf_r+0x9c>)
 800b436:	429c      	cmp	r4, r3
 800b438:	d101      	bne.n	800b43e <__swbuf_r+0x7a>
 800b43a:	68ac      	ldr	r4, [r5, #8]
 800b43c:	e7cf      	b.n	800b3de <__swbuf_r+0x1a>
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <__swbuf_r+0xa0>)
 800b440:	429c      	cmp	r4, r3
 800b442:	bf08      	it	eq
 800b444:	68ec      	ldreq	r4, [r5, #12]
 800b446:	e7ca      	b.n	800b3de <__swbuf_r+0x1a>
 800b448:	4621      	mov	r1, r4
 800b44a:	4628      	mov	r0, r5
 800b44c:	f000 f81a 	bl	800b484 <__swsetup_r>
 800b450:	2800      	cmp	r0, #0
 800b452:	d0cb      	beq.n	800b3ec <__swbuf_r+0x28>
 800b454:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b458:	e7ea      	b.n	800b430 <__swbuf_r+0x6c>
 800b45a:	bf00      	nop
 800b45c:	0800c53c 	.word	0x0800c53c
 800b460:	0800c55c 	.word	0x0800c55c
 800b464:	0800c51c 	.word	0x0800c51c

0800b468 <__ascii_wctomb>:
 800b468:	b149      	cbz	r1, 800b47e <__ascii_wctomb+0x16>
 800b46a:	2aff      	cmp	r2, #255	; 0xff
 800b46c:	bf85      	ittet	hi
 800b46e:	238a      	movhi	r3, #138	; 0x8a
 800b470:	6003      	strhi	r3, [r0, #0]
 800b472:	700a      	strbls	r2, [r1, #0]
 800b474:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b478:	bf98      	it	ls
 800b47a:	2001      	movls	r0, #1
 800b47c:	4770      	bx	lr
 800b47e:	4608      	mov	r0, r1
 800b480:	4770      	bx	lr
	...

0800b484 <__swsetup_r>:
 800b484:	4b32      	ldr	r3, [pc, #200]	; (800b550 <__swsetup_r+0xcc>)
 800b486:	b570      	push	{r4, r5, r6, lr}
 800b488:	681d      	ldr	r5, [r3, #0]
 800b48a:	4606      	mov	r6, r0
 800b48c:	460c      	mov	r4, r1
 800b48e:	b125      	cbz	r5, 800b49a <__swsetup_r+0x16>
 800b490:	69ab      	ldr	r3, [r5, #24]
 800b492:	b913      	cbnz	r3, 800b49a <__swsetup_r+0x16>
 800b494:	4628      	mov	r0, r5
 800b496:	f000 f985 	bl	800b7a4 <__sinit>
 800b49a:	4b2e      	ldr	r3, [pc, #184]	; (800b554 <__swsetup_r+0xd0>)
 800b49c:	429c      	cmp	r4, r3
 800b49e:	d10f      	bne.n	800b4c0 <__swsetup_r+0x3c>
 800b4a0:	686c      	ldr	r4, [r5, #4]
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4a8:	0719      	lsls	r1, r3, #28
 800b4aa:	d42c      	bmi.n	800b506 <__swsetup_r+0x82>
 800b4ac:	06dd      	lsls	r5, r3, #27
 800b4ae:	d411      	bmi.n	800b4d4 <__swsetup_r+0x50>
 800b4b0:	2309      	movs	r3, #9
 800b4b2:	6033      	str	r3, [r6, #0]
 800b4b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4b8:	81a3      	strh	r3, [r4, #12]
 800b4ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4be:	e03e      	b.n	800b53e <__swsetup_r+0xba>
 800b4c0:	4b25      	ldr	r3, [pc, #148]	; (800b558 <__swsetup_r+0xd4>)
 800b4c2:	429c      	cmp	r4, r3
 800b4c4:	d101      	bne.n	800b4ca <__swsetup_r+0x46>
 800b4c6:	68ac      	ldr	r4, [r5, #8]
 800b4c8:	e7eb      	b.n	800b4a2 <__swsetup_r+0x1e>
 800b4ca:	4b24      	ldr	r3, [pc, #144]	; (800b55c <__swsetup_r+0xd8>)
 800b4cc:	429c      	cmp	r4, r3
 800b4ce:	bf08      	it	eq
 800b4d0:	68ec      	ldreq	r4, [r5, #12]
 800b4d2:	e7e6      	b.n	800b4a2 <__swsetup_r+0x1e>
 800b4d4:	0758      	lsls	r0, r3, #29
 800b4d6:	d512      	bpl.n	800b4fe <__swsetup_r+0x7a>
 800b4d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4da:	b141      	cbz	r1, 800b4ee <__swsetup_r+0x6a>
 800b4dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4e0:	4299      	cmp	r1, r3
 800b4e2:	d002      	beq.n	800b4ea <__swsetup_r+0x66>
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f7ff fb6f 	bl	800abc8 <_free_r>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	6363      	str	r3, [r4, #52]	; 0x34
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4f4:	81a3      	strh	r3, [r4, #12]
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6063      	str	r3, [r4, #4]
 800b4fa:	6923      	ldr	r3, [r4, #16]
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	f043 0308 	orr.w	r3, r3, #8
 800b504:	81a3      	strh	r3, [r4, #12]
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	b94b      	cbnz	r3, 800b51e <__swsetup_r+0x9a>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b514:	d003      	beq.n	800b51e <__swsetup_r+0x9a>
 800b516:	4621      	mov	r1, r4
 800b518:	4630      	mov	r0, r6
 800b51a:	f000 fa07 	bl	800b92c <__smakebuf_r>
 800b51e:	89a0      	ldrh	r0, [r4, #12]
 800b520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b524:	f010 0301 	ands.w	r3, r0, #1
 800b528:	d00a      	beq.n	800b540 <__swsetup_r+0xbc>
 800b52a:	2300      	movs	r3, #0
 800b52c:	60a3      	str	r3, [r4, #8]
 800b52e:	6963      	ldr	r3, [r4, #20]
 800b530:	425b      	negs	r3, r3
 800b532:	61a3      	str	r3, [r4, #24]
 800b534:	6923      	ldr	r3, [r4, #16]
 800b536:	b943      	cbnz	r3, 800b54a <__swsetup_r+0xc6>
 800b538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b53c:	d1ba      	bne.n	800b4b4 <__swsetup_r+0x30>
 800b53e:	bd70      	pop	{r4, r5, r6, pc}
 800b540:	0781      	lsls	r1, r0, #30
 800b542:	bf58      	it	pl
 800b544:	6963      	ldrpl	r3, [r4, #20]
 800b546:	60a3      	str	r3, [r4, #8]
 800b548:	e7f4      	b.n	800b534 <__swsetup_r+0xb0>
 800b54a:	2000      	movs	r0, #0
 800b54c:	e7f7      	b.n	800b53e <__swsetup_r+0xba>
 800b54e:	bf00      	nop
 800b550:	20000038 	.word	0x20000038
 800b554:	0800c53c 	.word	0x0800c53c
 800b558:	0800c55c 	.word	0x0800c55c
 800b55c:	0800c51c 	.word	0x0800c51c

0800b560 <abort>:
 800b560:	b508      	push	{r3, lr}
 800b562:	2006      	movs	r0, #6
 800b564:	f000 fa52 	bl	800ba0c <raise>
 800b568:	2001      	movs	r0, #1
 800b56a:	f7fd fb87 	bl	8008c7c <_exit>
	...

0800b570 <__sflush_r>:
 800b570:	898a      	ldrh	r2, [r1, #12]
 800b572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b576:	4605      	mov	r5, r0
 800b578:	0710      	lsls	r0, r2, #28
 800b57a:	460c      	mov	r4, r1
 800b57c:	d458      	bmi.n	800b630 <__sflush_r+0xc0>
 800b57e:	684b      	ldr	r3, [r1, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	dc05      	bgt.n	800b590 <__sflush_r+0x20>
 800b584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b586:	2b00      	cmp	r3, #0
 800b588:	dc02      	bgt.n	800b590 <__sflush_r+0x20>
 800b58a:	2000      	movs	r0, #0
 800b58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b592:	2e00      	cmp	r6, #0
 800b594:	d0f9      	beq.n	800b58a <__sflush_r+0x1a>
 800b596:	2300      	movs	r3, #0
 800b598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b59c:	682f      	ldr	r7, [r5, #0]
 800b59e:	602b      	str	r3, [r5, #0]
 800b5a0:	d032      	beq.n	800b608 <__sflush_r+0x98>
 800b5a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	075a      	lsls	r2, r3, #29
 800b5a8:	d505      	bpl.n	800b5b6 <__sflush_r+0x46>
 800b5aa:	6863      	ldr	r3, [r4, #4]
 800b5ac:	1ac0      	subs	r0, r0, r3
 800b5ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5b0:	b10b      	cbz	r3, 800b5b6 <__sflush_r+0x46>
 800b5b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5b4:	1ac0      	subs	r0, r0, r3
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5bc:	6a21      	ldr	r1, [r4, #32]
 800b5be:	4628      	mov	r0, r5
 800b5c0:	47b0      	blx	r6
 800b5c2:	1c43      	adds	r3, r0, #1
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	d106      	bne.n	800b5d6 <__sflush_r+0x66>
 800b5c8:	6829      	ldr	r1, [r5, #0]
 800b5ca:	291d      	cmp	r1, #29
 800b5cc:	d82c      	bhi.n	800b628 <__sflush_r+0xb8>
 800b5ce:	4a2a      	ldr	r2, [pc, #168]	; (800b678 <__sflush_r+0x108>)
 800b5d0:	40ca      	lsrs	r2, r1
 800b5d2:	07d6      	lsls	r6, r2, #31
 800b5d4:	d528      	bpl.n	800b628 <__sflush_r+0xb8>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	6062      	str	r2, [r4, #4]
 800b5da:	04d9      	lsls	r1, r3, #19
 800b5dc:	6922      	ldr	r2, [r4, #16]
 800b5de:	6022      	str	r2, [r4, #0]
 800b5e0:	d504      	bpl.n	800b5ec <__sflush_r+0x7c>
 800b5e2:	1c42      	adds	r2, r0, #1
 800b5e4:	d101      	bne.n	800b5ea <__sflush_r+0x7a>
 800b5e6:	682b      	ldr	r3, [r5, #0]
 800b5e8:	b903      	cbnz	r3, 800b5ec <__sflush_r+0x7c>
 800b5ea:	6560      	str	r0, [r4, #84]	; 0x54
 800b5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ee:	602f      	str	r7, [r5, #0]
 800b5f0:	2900      	cmp	r1, #0
 800b5f2:	d0ca      	beq.n	800b58a <__sflush_r+0x1a>
 800b5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5f8:	4299      	cmp	r1, r3
 800b5fa:	d002      	beq.n	800b602 <__sflush_r+0x92>
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	f7ff fae3 	bl	800abc8 <_free_r>
 800b602:	2000      	movs	r0, #0
 800b604:	6360      	str	r0, [r4, #52]	; 0x34
 800b606:	e7c1      	b.n	800b58c <__sflush_r+0x1c>
 800b608:	6a21      	ldr	r1, [r4, #32]
 800b60a:	2301      	movs	r3, #1
 800b60c:	4628      	mov	r0, r5
 800b60e:	47b0      	blx	r6
 800b610:	1c41      	adds	r1, r0, #1
 800b612:	d1c7      	bne.n	800b5a4 <__sflush_r+0x34>
 800b614:	682b      	ldr	r3, [r5, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0c4      	beq.n	800b5a4 <__sflush_r+0x34>
 800b61a:	2b1d      	cmp	r3, #29
 800b61c:	d001      	beq.n	800b622 <__sflush_r+0xb2>
 800b61e:	2b16      	cmp	r3, #22
 800b620:	d101      	bne.n	800b626 <__sflush_r+0xb6>
 800b622:	602f      	str	r7, [r5, #0]
 800b624:	e7b1      	b.n	800b58a <__sflush_r+0x1a>
 800b626:	89a3      	ldrh	r3, [r4, #12]
 800b628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b62c:	81a3      	strh	r3, [r4, #12]
 800b62e:	e7ad      	b.n	800b58c <__sflush_r+0x1c>
 800b630:	690f      	ldr	r7, [r1, #16]
 800b632:	2f00      	cmp	r7, #0
 800b634:	d0a9      	beq.n	800b58a <__sflush_r+0x1a>
 800b636:	0793      	lsls	r3, r2, #30
 800b638:	680e      	ldr	r6, [r1, #0]
 800b63a:	bf08      	it	eq
 800b63c:	694b      	ldreq	r3, [r1, #20]
 800b63e:	600f      	str	r7, [r1, #0]
 800b640:	bf18      	it	ne
 800b642:	2300      	movne	r3, #0
 800b644:	eba6 0807 	sub.w	r8, r6, r7
 800b648:	608b      	str	r3, [r1, #8]
 800b64a:	f1b8 0f00 	cmp.w	r8, #0
 800b64e:	dd9c      	ble.n	800b58a <__sflush_r+0x1a>
 800b650:	6a21      	ldr	r1, [r4, #32]
 800b652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b654:	4643      	mov	r3, r8
 800b656:	463a      	mov	r2, r7
 800b658:	4628      	mov	r0, r5
 800b65a:	47b0      	blx	r6
 800b65c:	2800      	cmp	r0, #0
 800b65e:	dc06      	bgt.n	800b66e <__sflush_r+0xfe>
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b666:	81a3      	strh	r3, [r4, #12]
 800b668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b66c:	e78e      	b.n	800b58c <__sflush_r+0x1c>
 800b66e:	4407      	add	r7, r0
 800b670:	eba8 0800 	sub.w	r8, r8, r0
 800b674:	e7e9      	b.n	800b64a <__sflush_r+0xda>
 800b676:	bf00      	nop
 800b678:	20400001 	.word	0x20400001

0800b67c <_fflush_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	690b      	ldr	r3, [r1, #16]
 800b680:	4605      	mov	r5, r0
 800b682:	460c      	mov	r4, r1
 800b684:	b913      	cbnz	r3, 800b68c <_fflush_r+0x10>
 800b686:	2500      	movs	r5, #0
 800b688:	4628      	mov	r0, r5
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	b118      	cbz	r0, 800b696 <_fflush_r+0x1a>
 800b68e:	6983      	ldr	r3, [r0, #24]
 800b690:	b90b      	cbnz	r3, 800b696 <_fflush_r+0x1a>
 800b692:	f000 f887 	bl	800b7a4 <__sinit>
 800b696:	4b14      	ldr	r3, [pc, #80]	; (800b6e8 <_fflush_r+0x6c>)
 800b698:	429c      	cmp	r4, r3
 800b69a:	d11b      	bne.n	800b6d4 <_fflush_r+0x58>
 800b69c:	686c      	ldr	r4, [r5, #4]
 800b69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0ef      	beq.n	800b686 <_fflush_r+0xa>
 800b6a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6a8:	07d0      	lsls	r0, r2, #31
 800b6aa:	d404      	bmi.n	800b6b6 <_fflush_r+0x3a>
 800b6ac:	0599      	lsls	r1, r3, #22
 800b6ae:	d402      	bmi.n	800b6b6 <_fflush_r+0x3a>
 800b6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6b2:	f000 f915 	bl	800b8e0 <__retarget_lock_acquire_recursive>
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	f7ff ff59 	bl	800b570 <__sflush_r>
 800b6be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6c0:	07da      	lsls	r2, r3, #31
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	d4e0      	bmi.n	800b688 <_fflush_r+0xc>
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	059b      	lsls	r3, r3, #22
 800b6ca:	d4dd      	bmi.n	800b688 <_fflush_r+0xc>
 800b6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ce:	f000 f908 	bl	800b8e2 <__retarget_lock_release_recursive>
 800b6d2:	e7d9      	b.n	800b688 <_fflush_r+0xc>
 800b6d4:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <_fflush_r+0x70>)
 800b6d6:	429c      	cmp	r4, r3
 800b6d8:	d101      	bne.n	800b6de <_fflush_r+0x62>
 800b6da:	68ac      	ldr	r4, [r5, #8]
 800b6dc:	e7df      	b.n	800b69e <_fflush_r+0x22>
 800b6de:	4b04      	ldr	r3, [pc, #16]	; (800b6f0 <_fflush_r+0x74>)
 800b6e0:	429c      	cmp	r4, r3
 800b6e2:	bf08      	it	eq
 800b6e4:	68ec      	ldreq	r4, [r5, #12]
 800b6e6:	e7da      	b.n	800b69e <_fflush_r+0x22>
 800b6e8:	0800c53c 	.word	0x0800c53c
 800b6ec:	0800c55c 	.word	0x0800c55c
 800b6f0:	0800c51c 	.word	0x0800c51c

0800b6f4 <std>:
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	b510      	push	{r4, lr}
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b6fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b702:	6083      	str	r3, [r0, #8]
 800b704:	8181      	strh	r1, [r0, #12]
 800b706:	6643      	str	r3, [r0, #100]	; 0x64
 800b708:	81c2      	strh	r2, [r0, #14]
 800b70a:	6183      	str	r3, [r0, #24]
 800b70c:	4619      	mov	r1, r3
 800b70e:	2208      	movs	r2, #8
 800b710:	305c      	adds	r0, #92	; 0x5c
 800b712:	f7fd fbb5 	bl	8008e80 <memset>
 800b716:	4b05      	ldr	r3, [pc, #20]	; (800b72c <std+0x38>)
 800b718:	6263      	str	r3, [r4, #36]	; 0x24
 800b71a:	4b05      	ldr	r3, [pc, #20]	; (800b730 <std+0x3c>)
 800b71c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b71e:	4b05      	ldr	r3, [pc, #20]	; (800b734 <std+0x40>)
 800b720:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b722:	4b05      	ldr	r3, [pc, #20]	; (800b738 <std+0x44>)
 800b724:	6224      	str	r4, [r4, #32]
 800b726:	6323      	str	r3, [r4, #48]	; 0x30
 800b728:	bd10      	pop	{r4, pc}
 800b72a:	bf00      	nop
 800b72c:	0800ba45 	.word	0x0800ba45
 800b730:	0800ba67 	.word	0x0800ba67
 800b734:	0800ba9f 	.word	0x0800ba9f
 800b738:	0800bac3 	.word	0x0800bac3

0800b73c <_cleanup_r>:
 800b73c:	4901      	ldr	r1, [pc, #4]	; (800b744 <_cleanup_r+0x8>)
 800b73e:	f000 b8af 	b.w	800b8a0 <_fwalk_reent>
 800b742:	bf00      	nop
 800b744:	0800b67d 	.word	0x0800b67d

0800b748 <__sfmoreglue>:
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	1e4a      	subs	r2, r1, #1
 800b74c:	2568      	movs	r5, #104	; 0x68
 800b74e:	4355      	muls	r5, r2
 800b750:	460e      	mov	r6, r1
 800b752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b756:	f7ff fa87 	bl	800ac68 <_malloc_r>
 800b75a:	4604      	mov	r4, r0
 800b75c:	b140      	cbz	r0, 800b770 <__sfmoreglue+0x28>
 800b75e:	2100      	movs	r1, #0
 800b760:	e9c0 1600 	strd	r1, r6, [r0]
 800b764:	300c      	adds	r0, #12
 800b766:	60a0      	str	r0, [r4, #8]
 800b768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b76c:	f7fd fb88 	bl	8008e80 <memset>
 800b770:	4620      	mov	r0, r4
 800b772:	bd70      	pop	{r4, r5, r6, pc}

0800b774 <__sfp_lock_acquire>:
 800b774:	4801      	ldr	r0, [pc, #4]	; (800b77c <__sfp_lock_acquire+0x8>)
 800b776:	f000 b8b3 	b.w	800b8e0 <__retarget_lock_acquire_recursive>
 800b77a:	bf00      	nop
 800b77c:	200138f8 	.word	0x200138f8

0800b780 <__sfp_lock_release>:
 800b780:	4801      	ldr	r0, [pc, #4]	; (800b788 <__sfp_lock_release+0x8>)
 800b782:	f000 b8ae 	b.w	800b8e2 <__retarget_lock_release_recursive>
 800b786:	bf00      	nop
 800b788:	200138f8 	.word	0x200138f8

0800b78c <__sinit_lock_acquire>:
 800b78c:	4801      	ldr	r0, [pc, #4]	; (800b794 <__sinit_lock_acquire+0x8>)
 800b78e:	f000 b8a7 	b.w	800b8e0 <__retarget_lock_acquire_recursive>
 800b792:	bf00      	nop
 800b794:	200138f3 	.word	0x200138f3

0800b798 <__sinit_lock_release>:
 800b798:	4801      	ldr	r0, [pc, #4]	; (800b7a0 <__sinit_lock_release+0x8>)
 800b79a:	f000 b8a2 	b.w	800b8e2 <__retarget_lock_release_recursive>
 800b79e:	bf00      	nop
 800b7a0:	200138f3 	.word	0x200138f3

0800b7a4 <__sinit>:
 800b7a4:	b510      	push	{r4, lr}
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	f7ff fff0 	bl	800b78c <__sinit_lock_acquire>
 800b7ac:	69a3      	ldr	r3, [r4, #24]
 800b7ae:	b11b      	cbz	r3, 800b7b8 <__sinit+0x14>
 800b7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7b4:	f7ff bff0 	b.w	800b798 <__sinit_lock_release>
 800b7b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7bc:	6523      	str	r3, [r4, #80]	; 0x50
 800b7be:	4b13      	ldr	r3, [pc, #76]	; (800b80c <__sinit+0x68>)
 800b7c0:	4a13      	ldr	r2, [pc, #76]	; (800b810 <__sinit+0x6c>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7c6:	42a3      	cmp	r3, r4
 800b7c8:	bf04      	itt	eq
 800b7ca:	2301      	moveq	r3, #1
 800b7cc:	61a3      	streq	r3, [r4, #24]
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f000 f820 	bl	800b814 <__sfp>
 800b7d4:	6060      	str	r0, [r4, #4]
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f000 f81c 	bl	800b814 <__sfp>
 800b7dc:	60a0      	str	r0, [r4, #8]
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f000 f818 	bl	800b814 <__sfp>
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	60e0      	str	r0, [r4, #12]
 800b7e8:	2104      	movs	r1, #4
 800b7ea:	6860      	ldr	r0, [r4, #4]
 800b7ec:	f7ff ff82 	bl	800b6f4 <std>
 800b7f0:	68a0      	ldr	r0, [r4, #8]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	2109      	movs	r1, #9
 800b7f6:	f7ff ff7d 	bl	800b6f4 <std>
 800b7fa:	68e0      	ldr	r0, [r4, #12]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	2112      	movs	r1, #18
 800b800:	f7ff ff78 	bl	800b6f4 <std>
 800b804:	2301      	movs	r3, #1
 800b806:	61a3      	str	r3, [r4, #24]
 800b808:	e7d2      	b.n	800b7b0 <__sinit+0xc>
 800b80a:	bf00      	nop
 800b80c:	0800c198 	.word	0x0800c198
 800b810:	0800b73d 	.word	0x0800b73d

0800b814 <__sfp>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	4607      	mov	r7, r0
 800b818:	f7ff ffac 	bl	800b774 <__sfp_lock_acquire>
 800b81c:	4b1e      	ldr	r3, [pc, #120]	; (800b898 <__sfp+0x84>)
 800b81e:	681e      	ldr	r6, [r3, #0]
 800b820:	69b3      	ldr	r3, [r6, #24]
 800b822:	b913      	cbnz	r3, 800b82a <__sfp+0x16>
 800b824:	4630      	mov	r0, r6
 800b826:	f7ff ffbd 	bl	800b7a4 <__sinit>
 800b82a:	3648      	adds	r6, #72	; 0x48
 800b82c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b830:	3b01      	subs	r3, #1
 800b832:	d503      	bpl.n	800b83c <__sfp+0x28>
 800b834:	6833      	ldr	r3, [r6, #0]
 800b836:	b30b      	cbz	r3, 800b87c <__sfp+0x68>
 800b838:	6836      	ldr	r6, [r6, #0]
 800b83a:	e7f7      	b.n	800b82c <__sfp+0x18>
 800b83c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b840:	b9d5      	cbnz	r5, 800b878 <__sfp+0x64>
 800b842:	4b16      	ldr	r3, [pc, #88]	; (800b89c <__sfp+0x88>)
 800b844:	60e3      	str	r3, [r4, #12]
 800b846:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b84a:	6665      	str	r5, [r4, #100]	; 0x64
 800b84c:	f000 f847 	bl	800b8de <__retarget_lock_init_recursive>
 800b850:	f7ff ff96 	bl	800b780 <__sfp_lock_release>
 800b854:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b858:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b85c:	6025      	str	r5, [r4, #0]
 800b85e:	61a5      	str	r5, [r4, #24]
 800b860:	2208      	movs	r2, #8
 800b862:	4629      	mov	r1, r5
 800b864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b868:	f7fd fb0a 	bl	8008e80 <memset>
 800b86c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b874:	4620      	mov	r0, r4
 800b876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b878:	3468      	adds	r4, #104	; 0x68
 800b87a:	e7d9      	b.n	800b830 <__sfp+0x1c>
 800b87c:	2104      	movs	r1, #4
 800b87e:	4638      	mov	r0, r7
 800b880:	f7ff ff62 	bl	800b748 <__sfmoreglue>
 800b884:	4604      	mov	r4, r0
 800b886:	6030      	str	r0, [r6, #0]
 800b888:	2800      	cmp	r0, #0
 800b88a:	d1d5      	bne.n	800b838 <__sfp+0x24>
 800b88c:	f7ff ff78 	bl	800b780 <__sfp_lock_release>
 800b890:	230c      	movs	r3, #12
 800b892:	603b      	str	r3, [r7, #0]
 800b894:	e7ee      	b.n	800b874 <__sfp+0x60>
 800b896:	bf00      	nop
 800b898:	0800c198 	.word	0x0800c198
 800b89c:	ffff0001 	.word	0xffff0001

0800b8a0 <_fwalk_reent>:
 800b8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a4:	4606      	mov	r6, r0
 800b8a6:	4688      	mov	r8, r1
 800b8a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8ac:	2700      	movs	r7, #0
 800b8ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8b2:	f1b9 0901 	subs.w	r9, r9, #1
 800b8b6:	d505      	bpl.n	800b8c4 <_fwalk_reent+0x24>
 800b8b8:	6824      	ldr	r4, [r4, #0]
 800b8ba:	2c00      	cmp	r4, #0
 800b8bc:	d1f7      	bne.n	800b8ae <_fwalk_reent+0xe>
 800b8be:	4638      	mov	r0, r7
 800b8c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8c4:	89ab      	ldrh	r3, [r5, #12]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d907      	bls.n	800b8da <_fwalk_reent+0x3a>
 800b8ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	d003      	beq.n	800b8da <_fwalk_reent+0x3a>
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	47c0      	blx	r8
 800b8d8:	4307      	orrs	r7, r0
 800b8da:	3568      	adds	r5, #104	; 0x68
 800b8dc:	e7e9      	b.n	800b8b2 <_fwalk_reent+0x12>

0800b8de <__retarget_lock_init_recursive>:
 800b8de:	4770      	bx	lr

0800b8e0 <__retarget_lock_acquire_recursive>:
 800b8e0:	4770      	bx	lr

0800b8e2 <__retarget_lock_release_recursive>:
 800b8e2:	4770      	bx	lr

0800b8e4 <__swhatbuf_r>:
 800b8e4:	b570      	push	{r4, r5, r6, lr}
 800b8e6:	460e      	mov	r6, r1
 800b8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	b096      	sub	sp, #88	; 0x58
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	461d      	mov	r5, r3
 800b8f4:	da07      	bge.n	800b906 <__swhatbuf_r+0x22>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	602b      	str	r3, [r5, #0]
 800b8fa:	89b3      	ldrh	r3, [r6, #12]
 800b8fc:	061a      	lsls	r2, r3, #24
 800b8fe:	d410      	bmi.n	800b922 <__swhatbuf_r+0x3e>
 800b900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b904:	e00e      	b.n	800b924 <__swhatbuf_r+0x40>
 800b906:	466a      	mov	r2, sp
 800b908:	f000 f8f0 	bl	800baec <_fstat_r>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	dbf2      	blt.n	800b8f6 <__swhatbuf_r+0x12>
 800b910:	9a01      	ldr	r2, [sp, #4]
 800b912:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b916:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b91a:	425a      	negs	r2, r3
 800b91c:	415a      	adcs	r2, r3
 800b91e:	602a      	str	r2, [r5, #0]
 800b920:	e7ee      	b.n	800b900 <__swhatbuf_r+0x1c>
 800b922:	2340      	movs	r3, #64	; 0x40
 800b924:	2000      	movs	r0, #0
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	b016      	add	sp, #88	; 0x58
 800b92a:	bd70      	pop	{r4, r5, r6, pc}

0800b92c <__smakebuf_r>:
 800b92c:	898b      	ldrh	r3, [r1, #12]
 800b92e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b930:	079d      	lsls	r5, r3, #30
 800b932:	4606      	mov	r6, r0
 800b934:	460c      	mov	r4, r1
 800b936:	d507      	bpl.n	800b948 <__smakebuf_r+0x1c>
 800b938:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	6123      	str	r3, [r4, #16]
 800b940:	2301      	movs	r3, #1
 800b942:	6163      	str	r3, [r4, #20]
 800b944:	b002      	add	sp, #8
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	ab01      	add	r3, sp, #4
 800b94a:	466a      	mov	r2, sp
 800b94c:	f7ff ffca 	bl	800b8e4 <__swhatbuf_r>
 800b950:	9900      	ldr	r1, [sp, #0]
 800b952:	4605      	mov	r5, r0
 800b954:	4630      	mov	r0, r6
 800b956:	f7ff f987 	bl	800ac68 <_malloc_r>
 800b95a:	b948      	cbnz	r0, 800b970 <__smakebuf_r+0x44>
 800b95c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b960:	059a      	lsls	r2, r3, #22
 800b962:	d4ef      	bmi.n	800b944 <__smakebuf_r+0x18>
 800b964:	f023 0303 	bic.w	r3, r3, #3
 800b968:	f043 0302 	orr.w	r3, r3, #2
 800b96c:	81a3      	strh	r3, [r4, #12]
 800b96e:	e7e3      	b.n	800b938 <__smakebuf_r+0xc>
 800b970:	4b0d      	ldr	r3, [pc, #52]	; (800b9a8 <__smakebuf_r+0x7c>)
 800b972:	62b3      	str	r3, [r6, #40]	; 0x28
 800b974:	89a3      	ldrh	r3, [r4, #12]
 800b976:	6020      	str	r0, [r4, #0]
 800b978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b97c:	81a3      	strh	r3, [r4, #12]
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	6163      	str	r3, [r4, #20]
 800b982:	9b01      	ldr	r3, [sp, #4]
 800b984:	6120      	str	r0, [r4, #16]
 800b986:	b15b      	cbz	r3, 800b9a0 <__smakebuf_r+0x74>
 800b988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b98c:	4630      	mov	r0, r6
 800b98e:	f000 f8bf 	bl	800bb10 <_isatty_r>
 800b992:	b128      	cbz	r0, 800b9a0 <__smakebuf_r+0x74>
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	f023 0303 	bic.w	r3, r3, #3
 800b99a:	f043 0301 	orr.w	r3, r3, #1
 800b99e:	81a3      	strh	r3, [r4, #12]
 800b9a0:	89a0      	ldrh	r0, [r4, #12]
 800b9a2:	4305      	orrs	r5, r0
 800b9a4:	81a5      	strh	r5, [r4, #12]
 800b9a6:	e7cd      	b.n	800b944 <__smakebuf_r+0x18>
 800b9a8:	0800b73d 	.word	0x0800b73d

0800b9ac <_malloc_usable_size_r>:
 800b9ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9b0:	1f18      	subs	r0, r3, #4
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	bfbc      	itt	lt
 800b9b6:	580b      	ldrlt	r3, [r1, r0]
 800b9b8:	18c0      	addlt	r0, r0, r3
 800b9ba:	4770      	bx	lr

0800b9bc <_raise_r>:
 800b9bc:	291f      	cmp	r1, #31
 800b9be:	b538      	push	{r3, r4, r5, lr}
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	460d      	mov	r5, r1
 800b9c4:	d904      	bls.n	800b9d0 <_raise_r+0x14>
 800b9c6:	2316      	movs	r3, #22
 800b9c8:	6003      	str	r3, [r0, #0]
 800b9ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b9d2:	b112      	cbz	r2, 800b9da <_raise_r+0x1e>
 800b9d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9d8:	b94b      	cbnz	r3, 800b9ee <_raise_r+0x32>
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 f830 	bl	800ba40 <_getpid_r>
 800b9e0:	462a      	mov	r2, r5
 800b9e2:	4601      	mov	r1, r0
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9ea:	f000 b817 	b.w	800ba1c <_kill_r>
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d00a      	beq.n	800ba08 <_raise_r+0x4c>
 800b9f2:	1c59      	adds	r1, r3, #1
 800b9f4:	d103      	bne.n	800b9fe <_raise_r+0x42>
 800b9f6:	2316      	movs	r3, #22
 800b9f8:	6003      	str	r3, [r0, #0]
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	e7e7      	b.n	800b9ce <_raise_r+0x12>
 800b9fe:	2400      	movs	r4, #0
 800ba00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba04:	4628      	mov	r0, r5
 800ba06:	4798      	blx	r3
 800ba08:	2000      	movs	r0, #0
 800ba0a:	e7e0      	b.n	800b9ce <_raise_r+0x12>

0800ba0c <raise>:
 800ba0c:	4b02      	ldr	r3, [pc, #8]	; (800ba18 <raise+0xc>)
 800ba0e:	4601      	mov	r1, r0
 800ba10:	6818      	ldr	r0, [r3, #0]
 800ba12:	f7ff bfd3 	b.w	800b9bc <_raise_r>
 800ba16:	bf00      	nop
 800ba18:	20000038 	.word	0x20000038

0800ba1c <_kill_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4d07      	ldr	r5, [pc, #28]	; (800ba3c <_kill_r+0x20>)
 800ba20:	2300      	movs	r3, #0
 800ba22:	4604      	mov	r4, r0
 800ba24:	4608      	mov	r0, r1
 800ba26:	4611      	mov	r1, r2
 800ba28:	602b      	str	r3, [r5, #0]
 800ba2a:	f7fd f917 	bl	8008c5c <_kill>
 800ba2e:	1c43      	adds	r3, r0, #1
 800ba30:	d102      	bne.n	800ba38 <_kill_r+0x1c>
 800ba32:	682b      	ldr	r3, [r5, #0]
 800ba34:	b103      	cbz	r3, 800ba38 <_kill_r+0x1c>
 800ba36:	6023      	str	r3, [r4, #0]
 800ba38:	bd38      	pop	{r3, r4, r5, pc}
 800ba3a:	bf00      	nop
 800ba3c:	200138ec 	.word	0x200138ec

0800ba40 <_getpid_r>:
 800ba40:	f7fd b904 	b.w	8008c4c <_getpid>

0800ba44 <__sread>:
 800ba44:	b510      	push	{r4, lr}
 800ba46:	460c      	mov	r4, r1
 800ba48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba4c:	f000 f882 	bl	800bb54 <_read_r>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	bfab      	itete	ge
 800ba54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba56:	89a3      	ldrhlt	r3, [r4, #12]
 800ba58:	181b      	addge	r3, r3, r0
 800ba5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba5e:	bfac      	ite	ge
 800ba60:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba62:	81a3      	strhlt	r3, [r4, #12]
 800ba64:	bd10      	pop	{r4, pc}

0800ba66 <__swrite>:
 800ba66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6a:	461f      	mov	r7, r3
 800ba6c:	898b      	ldrh	r3, [r1, #12]
 800ba6e:	05db      	lsls	r3, r3, #23
 800ba70:	4605      	mov	r5, r0
 800ba72:	460c      	mov	r4, r1
 800ba74:	4616      	mov	r6, r2
 800ba76:	d505      	bpl.n	800ba84 <__swrite+0x1e>
 800ba78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f000 f856 	bl	800bb30 <_lseek_r>
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	4632      	mov	r2, r6
 800ba92:	463b      	mov	r3, r7
 800ba94:	4628      	mov	r0, r5
 800ba96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9a:	f7fb b833 	b.w	8006b04 <_write_r>

0800ba9e <__sseek>:
 800ba9e:	b510      	push	{r4, lr}
 800baa0:	460c      	mov	r4, r1
 800baa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa6:	f000 f843 	bl	800bb30 <_lseek_r>
 800baaa:	1c43      	adds	r3, r0, #1
 800baac:	89a3      	ldrh	r3, [r4, #12]
 800baae:	bf15      	itete	ne
 800bab0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800baba:	81a3      	strheq	r3, [r4, #12]
 800babc:	bf18      	it	ne
 800babe:	81a3      	strhne	r3, [r4, #12]
 800bac0:	bd10      	pop	{r4, pc}

0800bac2 <__sclose>:
 800bac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac6:	f000 b801 	b.w	800bacc <_close_r>
	...

0800bacc <_close_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d06      	ldr	r5, [pc, #24]	; (800bae8 <_close_r+0x1c>)
 800bad0:	2300      	movs	r3, #0
 800bad2:	4604      	mov	r4, r0
 800bad4:	4608      	mov	r0, r1
 800bad6:	602b      	str	r3, [r5, #0]
 800bad8:	f7fd f8f7 	bl	8008cca <_close>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d102      	bne.n	800bae6 <_close_r+0x1a>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <_close_r+0x1a>
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	200138ec 	.word	0x200138ec

0800baec <_fstat_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4d07      	ldr	r5, [pc, #28]	; (800bb0c <_fstat_r+0x20>)
 800baf0:	2300      	movs	r3, #0
 800baf2:	4604      	mov	r4, r0
 800baf4:	4608      	mov	r0, r1
 800baf6:	4611      	mov	r1, r2
 800baf8:	602b      	str	r3, [r5, #0]
 800bafa:	f7fd f8f2 	bl	8008ce2 <_fstat>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	d102      	bne.n	800bb08 <_fstat_r+0x1c>
 800bb02:	682b      	ldr	r3, [r5, #0]
 800bb04:	b103      	cbz	r3, 800bb08 <_fstat_r+0x1c>
 800bb06:	6023      	str	r3, [r4, #0]
 800bb08:	bd38      	pop	{r3, r4, r5, pc}
 800bb0a:	bf00      	nop
 800bb0c:	200138ec 	.word	0x200138ec

0800bb10 <_isatty_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d06      	ldr	r5, [pc, #24]	; (800bb2c <_isatty_r+0x1c>)
 800bb14:	2300      	movs	r3, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	602b      	str	r3, [r5, #0]
 800bb1c:	f7fd f8f1 	bl	8008d02 <_isatty>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d102      	bne.n	800bb2a <_isatty_r+0x1a>
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	b103      	cbz	r3, 800bb2a <_isatty_r+0x1a>
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}
 800bb2c:	200138ec 	.word	0x200138ec

0800bb30 <_lseek_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4d07      	ldr	r5, [pc, #28]	; (800bb50 <_lseek_r+0x20>)
 800bb34:	4604      	mov	r4, r0
 800bb36:	4608      	mov	r0, r1
 800bb38:	4611      	mov	r1, r2
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	602a      	str	r2, [r5, #0]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	f7fd f8ea 	bl	8008d18 <_lseek>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_lseek_r+0x1e>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_lseek_r+0x1e>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	200138ec 	.word	0x200138ec

0800bb54 <_read_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d07      	ldr	r5, [pc, #28]	; (800bb74 <_read_r+0x20>)
 800bb58:	4604      	mov	r4, r0
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	602a      	str	r2, [r5, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f7fd f894 	bl	8008c90 <_read>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_read_r+0x1e>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_read_r+0x1e>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	200138ec 	.word	0x200138ec

0800bb78 <sqrtf>:
 800bb78:	b508      	push	{r3, lr}
 800bb7a:	ed2d 8b02 	vpush	{d8}
 800bb7e:	ee08 0a10 	vmov	s16, r0
 800bb82:	f000 f823 	bl	800bbcc <__ieee754_sqrtf>
 800bb86:	4b0f      	ldr	r3, [pc, #60]	; (800bbc4 <sqrtf+0x4c>)
 800bb88:	f993 3000 	ldrsb.w	r3, [r3]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	ee07 0a90 	vmov	s15, r0
 800bb92:	d011      	beq.n	800bbb8 <sqrtf+0x40>
 800bb94:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb9c:	d60c      	bvs.n	800bbb8 <sqrtf+0x40>
 800bb9e:	eddf 8a0a 	vldr	s17, [pc, #40]	; 800bbc8 <sqrtf+0x50>
 800bba2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbaa:	d505      	bpl.n	800bbb8 <sqrtf+0x40>
 800bbac:	f7fd f922 	bl	8008df4 <__errno>
 800bbb0:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 800bbb4:	2321      	movs	r3, #33	; 0x21
 800bbb6:	6003      	str	r3, [r0, #0]
 800bbb8:	ecbd 8b02 	vpop	{d8}
 800bbbc:	ee17 0a90 	vmov	r0, s15
 800bbc0:	bd08      	pop	{r3, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20000208 	.word	0x20000208
 800bbc8:	00000000 	.word	0x00000000

0800bbcc <__ieee754_sqrtf>:
 800bbcc:	ee07 0a90 	vmov	s15, r0
 800bbd0:	eef1 7ae7 	vsqrt.f32	s15, s15
 800bbd4:	ee17 0a90 	vmov	r0, s15
 800bbd8:	4770      	bx	lr
	...

0800bbdc <_init>:
 800bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbde:	bf00      	nop
 800bbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe2:	bc08      	pop	{r3}
 800bbe4:	469e      	mov	lr, r3
 800bbe6:	4770      	bx	lr

0800bbe8 <_fini>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	bf00      	nop
 800bbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbee:	bc08      	pop	{r3}
 800bbf0:	469e      	mov	lr, r3
 800bbf2:	4770      	bx	lr
