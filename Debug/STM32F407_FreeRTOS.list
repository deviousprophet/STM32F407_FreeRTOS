
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b80c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  0800b9c0  0800b9c0  0001b9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c33c  0800c33c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c33c  0800c33c  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c33c  0800c33c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c33c  0800c33c  0001c33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c340  0800c340  0001c340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800c344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000136e8  2000020c  0800c550  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200138f4  0800c550  000238f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d21  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b4  00000000  00000000  00038f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0003c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  0003d698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000065e2  00000000  00000000  0003e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f16  00000000  00000000  00044b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001e732  00000000  00000000  00055a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000741a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000549c  00000000  00000000  000741f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b9a4 	.word	0x0800b9a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000210 	.word	0x20000210
 80001ec:	0800b9a4 	.word	0x0800b9a4

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	200137c8 	.word	0x200137c8

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <ADE_Init>:
void ADE_SPI_Init();
void ZeroX_Init();
void SAG_Init();
void IRQ_Init();

void ADE_Init(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	ADE_SPI_Init();
 8000d0c:	f000 f894 	bl	8000e38 <ADE_SPI_Init>

	ZeroX_Init();
 8000d10:	f000 f904 	bl	8000f1c <ZeroX_Init>
	SAG_Init();
 8000d14:	f000 f922 	bl	8000f5c <SAG_Init>
	IRQ_Init();
 8000d18:	f000 f940 	bl	8000f9c <IRQ_Init>

	ADE_Reset();
 8000d1c:	f000 f802 	bl	8000d24 <ADE_Reset>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <ADE_Reset>:

void ADE_Reset(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2109      	movs	r1, #9
 8000d2e:	480b      	ldr	r0, [pc, #44]	; (8000d5c <ADE_Reset+0x38>)
 8000d30:	f003 fe62 	bl	80049f8 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 1000; i++);
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	e002      	b.n	8000d40 <ADE_Reset+0x1c>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d46:	dbf8      	blt.n	8000d3a <ADE_Reset+0x16>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2109      	movs	r1, #9
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <ADE_Reset+0x38>)
 8000d4e:	f003 fe53 	bl	80049f8 <GPIO_WriteToOutputPin>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40020c00 	.word	0x40020c00

08000d60 <ADE_ReadData>:

uint32_t ADE_ReadData(uint8_t address, uint32_t bytes_to_read) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
	uint32_t data = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
	uint8_t dummy_write = 0xff;
 8000d70:	23ff      	movs	r3, #255	; 0xff
 8000d72:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000d74:	2101      	movs	r1, #1
 8000d76:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <ADE_ReadData+0x64>)
 8000d78:	f004 fa76 	bl	8005268 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4810      	ldr	r0, [pc, #64]	; (8000dc4 <ADE_ReadData+0x64>)
 8000d82:	f004 fa46 	bl	8005212 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	e00e      	b.n	8000daa <ADE_ReadData+0x4a>
		data <<= 8;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	617b      	str	r3, [r7, #20]
		data |= SPI_Transfer(ADE_SPI_HOST, dummy_write);
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4619      	mov	r1, r3
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <ADE_ReadData+0x64>)
 8000d98:	f004 fa3b 	bl	8005212 <SPI_Transfer>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	3301      	adds	r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3ec      	bcc.n	8000d8c <ADE_ReadData+0x2c>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE); //SS pin pull to high
 8000db2:	2100      	movs	r1, #0
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <ADE_ReadData+0x64>)
 8000db6:	f004 fa57 	bl	8005268 <SPI_PeripheralControl>
	return data;
 8000dba:	697b      	ldr	r3, [r7, #20]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40003800 	.word	0x40003800

08000dc8 <ADE_WriteData>:

void ADE_WriteData(uint8_t address, uint32_t write_buffer, uint32_t bytes_to_write) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	74fb      	strb	r3, [r7, #19]
	address |= 0x80;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000de0:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000de2:	2101      	movs	r1, #1
 8000de4:	4813      	ldr	r0, [pc, #76]	; (8000e34 <ADE_WriteData+0x6c>)
 8000de6:	f004 fa3f 	bl	8005268 <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <ADE_WriteData+0x6c>)
 8000df0:	f004 fa0f 	bl	8005212 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e010      	b.n	8000e1c <ADE_WriteData+0x54>
		data = (uint8_t)(write_buffer >> 8*(bytes_to_write - i - 1));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	3b01      	subs	r3, #1
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0a:	74fb      	strb	r3, [r7, #19]
		SPI_Transfer(ADE_SPI_HOST, data);
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <ADE_WriteData+0x6c>)
 8000e12:	f004 f9fe 	bl	8005212 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++) {
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3ea      	bcc.n	8000dfa <ADE_WriteData+0x32>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE);; //SS pin pull to high
 8000e24:	2100      	movs	r1, #0
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <ADE_WriteData+0x6c>)
 8000e28:	f004 fa1e 	bl	8005268 <SPI_PeripheralControl>
}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40003800 	.word	0x40003800

08000e38 <ADE_SPI_Init>:
			mode &= ~(1 << bit_flag);
		ADE_WriteData(MODE, mode, 2);
	}
}

void ADE_SPI_Init() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
	 * PB13 -> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT function mode : 5
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <ADE_SPI_Init+0xd8>)
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e42:	2302      	movs	r3, #2
 8000e44:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000e60:	230d      	movs	r3, #13
 8000e62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fc12 	bl	8004694 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000e70:	230f      	movs	r3, #15
 8000e72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fc0a 	bl	8004694 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000e80:	230e      	movs	r3, #14
 8000e82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 fc02 	bl	8004694 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000e90:	230c      	movs	r3, #12
 8000e92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 fbfa 	bl	8004694 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <ADE_SPI_Init+0xdc>)
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000ea4:	2309      	movs	r3, #9
 8000ea6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(&SPIPins);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fbea 	bl	8004694 <GPIO_Init>

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = ADE_SPI_HOST;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ec2:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;	// clock 1MHz
 8000ecc:	2303      	movs	r3, #3
 8000ece:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;				// CPOL 0
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;				// CPHA 1
 8000ed8:	2301      	movs	r3, #1
 8000eda:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 					// Hardware slave management enabled for NSS pin
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]

	ADE_SPI_HOST->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eea:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 f934 	bl	800515c <SPI_Init>
	ADE_SPI_HOST->CR1 |= (1 << SPI_CR1_SPE);
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efe:	6013      	str	r3, [r2, #0]

	SPI_SSOEConfig(ADE_SPI_HOST, ENABLE);
 8000f00:	2101      	movs	r1, #1
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <ADE_SPI_Init+0xe0>)
 8000f04:	f004 f9cc 	bl	80052a0 <SPI_SSOEConfig>
}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	40003800 	.word	0x40003800

08000f1c <ZeroX_Init>:

void ZeroX_Init() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
//	Input pin trigger as falling edge
	GPIO_Handle_t GpioZX;
	GpioZX.pGPIOx = PORT_ZX_IT;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <ZeroX_Init+0x3c>)
 8000f24:	607b      	str	r3, [r7, #4]
	GpioZX.GPIO_PinConfig.GPIO_PinNumber = PIN_ZX_IT;
 8000f26:	230b      	movs	r3, #11
 8000f28:	723b      	strb	r3, [r7, #8]
	GpioZX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	727b      	strb	r3, [r7, #9]
	GpioZX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	72bb      	strb	r3, [r7, #10]
	GpioZX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000f32:	2301      	movs	r3, #1
 8000f34:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioZX);
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f003 fbab 	bl	8004694 <GPIO_Init>

//	IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI0);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2028      	movs	r0, #40	; 0x28
 8000f42:	f003 fe05 	bl	8004b50 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000f46:	2101      	movs	r1, #1
 8000f48:	2028      	movs	r0, #40	; 0x28
 8000f4a:	f003 fd7b 	bl	8004a44 <GPIO_IRQInterruptConfig>
}
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <SAG_Init>:

void SAG_Init() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
//	Input pin
	GPIO_Handle_t GpioSAG;
	GpioSAG.pGPIOx = PORT_SAG;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <SAG_Init+0x3c>)
 8000f64:	607b      	str	r3, [r7, #4]
	GpioSAG.GPIO_PinConfig.GPIO_PinNumber = PIN_SAG;
 8000f66:	230d      	movs	r3, #13
 8000f68:	723b      	strb	r3, [r7, #8]
	GpioSAG.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	727b      	strb	r3, [r7, #9]
	GpioSAG.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	72bb      	strb	r3, [r7, #10]
	GpioSAG.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000f72:	2301      	movs	r3, #1
 8000f74:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioSAG);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 fb8b 	bl	8004694 <GPIO_Init>

//	IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI10);
 8000f7e:	210a      	movs	r1, #10
 8000f80:	2028      	movs	r0, #40	; 0x28
 8000f82:	f003 fde5 	bl	8004b50 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000f86:	2101      	movs	r1, #1
 8000f88:	2028      	movs	r0, #40	; 0x28
 8000f8a:	f003 fd5b 	bl	8004a44 <GPIO_IRQInterruptConfig>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020c00 	.word	0x40020c00

08000f9c <IRQ_Init>:

void IRQ_Init() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
//	Input pin trigger as falling edge
	GPIO_Handle_t GpioIRQ;
	GpioIRQ.pGPIOx = PORT_IRQ_IT;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <IRQ_Init+0x3c>)
 8000fa4:	607b      	str	r3, [r7, #4]
	GpioIRQ.GPIO_PinConfig.GPIO_PinNumber = PIN_IRQ_IT;
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	723b      	strb	r3, [r7, #8]
	GpioIRQ.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000faa:	2304      	movs	r3, #4
 8000fac:	727b      	strb	r3, [r7, #9]
	GpioIRQ.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	72bb      	strb	r3, [r7, #10]
	GpioIRQ.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioIRQ);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f003 fb6b 	bl	8004694 <GPIO_Init>

//	IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI15_10, NVIC_IRQ_PRI15);
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	2028      	movs	r0, #40	; 0x28
 8000fc2:	f003 fdc5 	bl	8004b50 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI15_10, ENABLE);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2028      	movs	r0, #40	; 0x28
 8000fca:	f003 fd3b 	bl	8004a44 <GPIO_IRQInterruptConfig>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020c00 	.word	0x40020c00

08000fdc <DS1307_Init>:

uint8_t DS1307_Bcd2Bin(uint8_t bcd);
uint8_t DS1307_Bin2Bcd(uint8_t bin);
uint8_t DS1307_CheckMinMax(uint8_t val, uint8_t min, uint8_t max);

DS1307_Result_t DS1307_Init(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af00      	add	r7, sp, #0
//	I2C GPIO Init
	GPIO_Handle_t ds_gpio;
	ds_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	ds_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	ds_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	ds_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	ds_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	ds_gpio.pGPIOx = DS1307_I2C_SCL_GPIO_PORT;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <DS1307_Init+0x80>)
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
	ds_gpio.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_GPIO_PIN;
 8001004:	2308      	movs	r3, #8
 8001006:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&ds_gpio);
 800100a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100e:	4618      	mov	r0, r3
 8001010:	f003 fb40 	bl	8004694 <GPIO_Init>

	ds_gpio.pGPIOx = DS1307_I2C_SDA_GPIO_PORT;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <DS1307_Init+0x84>)
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
	ds_gpio.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_GPIO_PIN;
 8001018:	2309      	movs	r3, #9
 800101a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&ds_gpio);
 800101e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fb36 	bl	8004694 <GPIO_Init>

	I2C_Handle_t ds_i2c;
	ds_i2c.pI2Cx = DS1307_I2C;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <DS1307_Init+0x88>)
 800102a:	607b      	str	r3, [r7, #4]
	ds_i2c.I2C_Config.I2C_AckControl = I2C_ACK_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	737b      	strb	r3, [r7, #13]
	ds_i2c.I2C_Config.I2C_SCLSpeed = DS1307_I2C_CLOCK;
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <DS1307_Init+0x8c>)
 8001032:	60bb      	str	r3, [r7, #8]
	ds_i2c.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8001034:	2300      	movs	r3, #0
 8001036:	73bb      	strb	r3, [r7, #14]

	I2C_Init(&ds_i2c);
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fe06 	bl	8004c4c <I2C_Init>

	if(!I2C_IsDeviceConnected(DS1307_I2C, DS1307_I2C_ADDR)) return DS1307_Result_DeviceNotConnected;
 8001040:	21d0      	movs	r1, #208	; 0xd0
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <DS1307_Init+0x88>)
 8001044:	f003 ff08 	bl	8004e58 <I2C_IsDeviceConnected>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <DS1307_Init+0x76>
 800104e:	2302      	movs	r3, #2
 8001050:	e000      	b.n	8001054 <DS1307_Init+0x78>
	return DS1307_Result_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3738      	adds	r7, #56	; 0x38
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020000 	.word	0x40020000
 8001060:	40020800 	.word	0x40020800
 8001064:	40005c00 	.word	0x40005c00
 8001068:	000186a0 	.word	0x000186a0

0800106c <DS1307_GetSeconds>:

uint8_t DS1307_GetSeconds(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_SECONDS));
 8001070:	2200      	movs	r2, #0
 8001072:	21d0      	movs	r1, #208	; 0xd0
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <DS1307_GetSeconds+0x1c>)
 8001076:	f003 fea7 	bl	8004dc8 <I2C_Read>
 800107a:	4603      	mov	r3, r0
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f986 	bl	800138e <DS1307_Bcd2Bin>
 8001082:	4603      	mov	r3, r0
}
 8001084:	4618      	mov	r0, r3
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40005c00 	.word	0x40005c00

0800108c <DS1307_GetMinutes>:

uint8_t DS1307_GetMinutes(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MINUTES));
 8001090:	2201      	movs	r2, #1
 8001092:	21d0      	movs	r1, #208	; 0xd0
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <DS1307_GetMinutes+0x1c>)
 8001096:	f003 fe97 	bl	8004dc8 <I2C_Read>
 800109a:	4603      	mov	r3, r0
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f976 	bl	800138e <DS1307_Bcd2Bin>
 80010a2:	4603      	mov	r3, r0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40005c00 	.word	0x40005c00

080010ac <DS1307_GetHours>:

uint8_t DS1307_GetHours(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_HOURS));
 80010b0:	2202      	movs	r2, #2
 80010b2:	21d0      	movs	r1, #208	; 0xd0
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <DS1307_GetHours+0x1c>)
 80010b6:	f003 fe87 	bl	8004dc8 <I2C_Read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f966 	bl	800138e <DS1307_Bcd2Bin>
 80010c2:	4603      	mov	r3, r0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40005c00 	.word	0x40005c00

080010cc <DS1307_GetDay>:

uint8_t DS1307_GetDay(void) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DAY));
 80010d0:	2203      	movs	r2, #3
 80010d2:	21d0      	movs	r1, #208	; 0xd0
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <DS1307_GetDay+0x1c>)
 80010d6:	f003 fe77 	bl	8004dc8 <I2C_Read>
 80010da:	4603      	mov	r3, r0
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f956 	bl	800138e <DS1307_Bcd2Bin>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40005c00 	.word	0x40005c00

080010ec <DS1307_GetDate>:

uint8_t DS1307_GetDate(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DATE));
 80010f0:	2204      	movs	r2, #4
 80010f2:	21d0      	movs	r1, #208	; 0xd0
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <DS1307_GetDate+0x1c>)
 80010f6:	f003 fe67 	bl	8004dc8 <I2C_Read>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f946 	bl	800138e <DS1307_Bcd2Bin>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40005c00 	.word	0x40005c00

0800110c <DS1307_GetMonth>:

uint8_t DS1307_GetMonth(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MONTH));
 8001110:	2205      	movs	r2, #5
 8001112:	21d0      	movs	r1, #208	; 0xd0
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <DS1307_GetMonth+0x1c>)
 8001116:	f003 fe57 	bl	8004dc8 <I2C_Read>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f936 	bl	800138e <DS1307_Bcd2Bin>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40005c00 	.word	0x40005c00

0800112c <DS1307_GetYear>:

uint8_t DS1307_GetYear(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	return DS1307_Bcd2Bin(I2C_Read(DS1307_I2C, DS1307_I2C_ADDR, DS1307_YEAR));
 8001130:	2206      	movs	r2, #6
 8001132:	21d0      	movs	r1, #208	; 0xd0
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <DS1307_GetYear+0x1c>)
 8001136:	f003 fe47 	bl	8004dc8 <I2C_Read>
 800113a:	4603      	mov	r3, r0
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f926 	bl	800138e <DS1307_Bcd2Bin>
 8001142:	4603      	mov	r3, r0
}
 8001144:	4618      	mov	r0, r3
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40005c00 	.word	0x40005c00

0800114c <DS1307_SetSeconds>:

void DS1307_SetSeconds(uint8_t seconds) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_SECONDS, DS1307_Bin2Bcd(DS1307_CheckMinMax(seconds, 0, 59)));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	223b      	movs	r2, #59	; 0x3b
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f953 	bl	8001408 <DS1307_CheckMinMax>
 8001162:	4603      	mov	r3, r0
 8001164:	4618      	mov	r0, r3
 8001166:	f000 f92b 	bl	80013c0 <DS1307_Bin2Bcd>
 800116a:	4603      	mov	r3, r0
 800116c:	2200      	movs	r2, #0
 800116e:	21d0      	movs	r1, #208	; 0xd0
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <DS1307_SetSeconds+0x34>)
 8001172:	f003 fe4d 	bl	8004e10 <I2C_Write>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40005c00 	.word	0x40005c00

08001184 <DS1307_SetMinutes>:

void DS1307_SetMinutes(uint8_t minutes) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MINUTES, DS1307_Bin2Bcd(DS1307_CheckMinMax(minutes, 0, 59)));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	223b      	movs	r2, #59	; 0x3b
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f937 	bl	8001408 <DS1307_CheckMinMax>
 800119a:	4603      	mov	r3, r0
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f90f 	bl	80013c0 <DS1307_Bin2Bcd>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2201      	movs	r2, #1
 80011a6:	21d0      	movs	r1, #208	; 0xd0
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <DS1307_SetMinutes+0x34>)
 80011aa:	f003 fe31 	bl	8004e10 <I2C_Write>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40005c00 	.word	0x40005c00

080011bc <DS1307_SetHours>:

void DS1307_SetHours(uint8_t hours) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_HOURS, DS1307_Bin2Bcd(DS1307_CheckMinMax(hours, 0, 23)));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2217      	movs	r2, #23
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f91b 	bl	8001408 <DS1307_CheckMinMax>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f8f3 	bl	80013c0 <DS1307_Bin2Bcd>
 80011da:	4603      	mov	r3, r0
 80011dc:	2202      	movs	r2, #2
 80011de:	21d0      	movs	r1, #208	; 0xd0
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <DS1307_SetHours+0x34>)
 80011e2:	f003 fe15 	bl	8004e10 <I2C_Write>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40005c00 	.word	0x40005c00

080011f4 <DS1307_SetDay>:

void DS1307_SetDay(uint8_t day) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DAY, DS1307_Bin2Bcd(DS1307_CheckMinMax(day, 1, 7)));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2207      	movs	r2, #7
 8001202:	2101      	movs	r1, #1
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f8ff 	bl	8001408 <DS1307_CheckMinMax>
 800120a:	4603      	mov	r3, r0
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f8d7 	bl	80013c0 <DS1307_Bin2Bcd>
 8001212:	4603      	mov	r3, r0
 8001214:	2203      	movs	r2, #3
 8001216:	21d0      	movs	r1, #208	; 0xd0
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <DS1307_SetDay+0x34>)
 800121a:	f003 fdf9 	bl	8004e10 <I2C_Write>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40005c00 	.word	0x40005c00

0800122c <DS1307_SetDate>:

void DS1307_SetDate(uint8_t date) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_DATE, DS1307_Bin2Bcd(DS1307_CheckMinMax(date, 1, 31)));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	221f      	movs	r2, #31
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f8e3 	bl	8001408 <DS1307_CheckMinMax>
 8001242:	4603      	mov	r3, r0
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f8bb 	bl	80013c0 <DS1307_Bin2Bcd>
 800124a:	4603      	mov	r3, r0
 800124c:	2204      	movs	r2, #4
 800124e:	21d0      	movs	r1, #208	; 0xd0
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <DS1307_SetDate+0x34>)
 8001252:	f003 fddd 	bl	8004e10 <I2C_Write>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40005c00 	.word	0x40005c00

08001264 <DS1307_SetMonth>:

void DS1307_SetMonth(uint8_t month) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_MONTH, DS1307_Bin2Bcd(DS1307_CheckMinMax(month, 1, 12)));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	220c      	movs	r2, #12
 8001272:	2101      	movs	r1, #1
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f8c7 	bl	8001408 <DS1307_CheckMinMax>
 800127a:	4603      	mov	r3, r0
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f89f 	bl	80013c0 <DS1307_Bin2Bcd>
 8001282:	4603      	mov	r3, r0
 8001284:	2205      	movs	r2, #5
 8001286:	21d0      	movs	r1, #208	; 0xd0
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <DS1307_SetMonth+0x34>)
 800128a:	f003 fdc1 	bl	8004e10 <I2C_Write>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40005c00 	.word	0x40005c00

0800129c <DS1307_SetYear>:

void DS1307_SetYear(uint8_t year) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	I2C_Write(DS1307_I2C, DS1307_I2C_ADDR, DS1307_YEAR, DS1307_Bin2Bcd(DS1307_CheckMinMax(year, 0, 99)));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2263      	movs	r2, #99	; 0x63
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f8ab 	bl	8001408 <DS1307_CheckMinMax>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f883 	bl	80013c0 <DS1307_Bin2Bcd>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2206      	movs	r2, #6
 80012be:	21d0      	movs	r1, #208	; 0xd0
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <DS1307_SetYear+0x34>)
 80012c2:	f003 fda5 	bl	8004e10 <I2C_Write>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40005c00 	.word	0x40005c00

080012d4 <DS1307_GetDateTime>:

void DS1307_GetDateTime(DS1307_DateTime_t* time) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	time->seconds = DS1307_GetSeconds();
 80012dc:	f7ff fec6 	bl	800106c <DS1307_GetSeconds>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	701a      	strb	r2, [r3, #0]
	time->minutes = DS1307_GetMinutes();
 80012e8:	f7ff fed0 	bl	800108c <DS1307_GetMinutes>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	705a      	strb	r2, [r3, #1]
	time->hours = DS1307_GetHours();
 80012f4:	f7ff feda 	bl	80010ac <DS1307_GetHours>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	709a      	strb	r2, [r3, #2]
	time->day = DS1307_GetDay();
 8001300:	f7ff fee4 	bl	80010cc <DS1307_GetDay>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	70da      	strb	r2, [r3, #3]
	time->date = DS1307_GetDate();
 800130c:	f7ff feee 	bl	80010ec <DS1307_GetDate>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	711a      	strb	r2, [r3, #4]
	time->month = DS1307_GetMonth();
 8001318:	f7ff fef8 	bl	800110c <DS1307_GetMonth>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	715a      	strb	r2, [r3, #5]
	time->year = DS1307_GetYear();
 8001324:	f7ff ff02 	bl	800112c <DS1307_GetYear>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	719a      	strb	r2, [r3, #6]
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <DS1307_SetDateTime>:

void DS1307_SetDateTime(DS1307_DateTime_t* time) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	DS1307_SetSeconds(time->seconds);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff01 	bl	800114c <DS1307_SetSeconds>
	DS1307_SetMinutes(time->minutes);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	785b      	ldrb	r3, [r3, #1]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff18 	bl	8001184 <DS1307_SetMinutes>
	DS1307_SetHours(time->hours);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff2f 	bl	80011bc <DS1307_SetHours>
	DS1307_SetDay(time->day);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	78db      	ldrb	r3, [r3, #3]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff46 	bl	80011f4 <DS1307_SetDay>
	DS1307_SetDate(time->date);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5d 	bl	800122c <DS1307_SetDate>
	DS1307_SetMonth(time->month);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	795b      	ldrb	r3, [r3, #5]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff74 	bl	8001264 <DS1307_SetMonth>
	DS1307_SetYear(time->year);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	799b      	ldrb	r3, [r3, #6]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff8b 	bl	800129c <DS1307_SetYear>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <DS1307_Bcd2Bin>:

void DS1307_DisableOutputPin(void) {
	DS1307_EnableOutputPin(DS1307_OutputFreq_HIGH);
}

uint8_t DS1307_Bcd2Bin(uint8_t bcd) {
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	b2db      	uxtb	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4413      	add	r3, r2
 80013b2:	b2db      	uxtb	r3, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DS1307_Bin2Bcd>:

uint8_t DS1307_Bin2Bcd(uint8_t bin) {
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	return (bin / 10) << 4 | bin % 10;
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <DS1307_Bin2Bcd+0x44>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	08db      	lsrs	r3, r3, #3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	b258      	sxtb	r0, r3
 80013da:	79fa      	ldrb	r2, [r7, #7]
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <DS1307_Bin2Bcd+0x44>)
 80013de:	fba3 1302 	umull	r1, r3, r3, r2
 80013e2:	08d9      	lsrs	r1, r3, #3
 80013e4:	460b      	mov	r3, r1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	4303      	orrs	r3, r0
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	cccccccd 	.word	0xcccccccd

08001408 <DS1307_CheckMinMax>:

uint8_t DS1307_CheckMinMax(uint8_t val, uint8_t min, uint8_t max) {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	460b      	mov	r3, r1
 8001414:	71bb      	strb	r3, [r7, #6]
 8001416:	4613      	mov	r3, r2
 8001418:	717b      	strb	r3, [r7, #5]
	if(val < min)
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	429a      	cmp	r2, r3
 8001420:	d201      	bcs.n	8001426 <DS1307_CheckMinMax+0x1e>
		return min;
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	e006      	b.n	8001434 <DS1307_CheckMinMax+0x2c>
	else if (val > max)
 8001426:	79fa      	ldrb	r2, [r7, #7]
 8001428:	797b      	ldrb	r3, [r7, #5]
 800142a:	429a      	cmp	r2, r3
 800142c:	d901      	bls.n	8001432 <DS1307_CheckMinMax+0x2a>
		return max;
 800142e:	797b      	ldrb	r3, [r7, #5]
 8001430:	e000      	b.n	8001434 <DS1307_CheckMinMax+0x2c>
	else return val;
 8001432:	79fb      	ldrb	r3, [r7, #7]
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <KEYPAD_Init>:

/* Private variables */
KEYPAD_Type_t KEYPAD_INT_KeypadType;
static KEYPAD_Button_t KeypadStatus = KEYPAD_NOPRESSED;

void KEYPAD_Init(KEYPAD_Type_t type) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	KEYPAD_INT_KeypadType = type;
 800144a:	4a32      	ldr	r2, [pc, #200]	; (8001514 <KEYPAD_Init+0xd4>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	7013      	strb	r3, [r2, #0]
	GPIO_Handle_t GpioR_Out, GpioC_In;

	/* Rows are output */
	/* Row 1 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_1_PORT;
 8001450:	4b31      	ldr	r3, [pc, #196]	; (8001518 <KEYPAD_Init+0xd8>)
 8001452:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_1_PIN;
 8001454:	230b      	movs	r3, #11
 8001456:	763b      	strb	r3, [r7, #24]
	GpioR_Out.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001458:	2301      	movs	r3, #1
 800145a:	767b      	strb	r3, [r7, #25]
	GpioR_Out.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 800145c:	2301      	movs	r3, #1
 800145e:	76bb      	strb	r3, [r7, #26]
	GpioR_Out.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001460:	2300      	movs	r3, #0
 8001462:	773b      	strb	r3, [r7, #28]
	GpioR_Out.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001464:	2300      	movs	r3, #0
 8001466:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GpioR_Out);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4618      	mov	r0, r3
 800146e:	f003 f911 	bl	8004694 <GPIO_Init>

	/* Row 2 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_2_PORT;
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <KEYPAD_Init+0xdc>)
 8001474:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_2_PIN;
 8001476:	2300      	movs	r3, #0
 8001478:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4618      	mov	r0, r3
 8001480:	f003 f908 	bl	8004694 <GPIO_Init>

	/* Row 3 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_3_PORT;
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <KEYPAD_Init+0xdc>)
 8001486:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_3_PIN;
 8001488:	2302      	movs	r3, #2
 800148a:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4618      	mov	r0, r3
 8001492:	f003 f8ff 	bl	8004694 <GPIO_Init>

	/* Row 4 */
	if (type == KEYPAD_Type_Large) {
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d108      	bne.n	80014ae <KEYPAD_Init+0x6e>
		GpioR_Out.pGPIOx = KEYPAD_ROW_4_PORT;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <KEYPAD_Init+0xdc>)
 800149e:	617b      	str	r3, [r7, #20]
		GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_4_PIN;
 80014a0:	2304      	movs	r3, #4
 80014a2:	763b      	strb	r3, [r7, #24]
		GPIO_Init(&GpioR_Out);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 f8f3 	bl	8004694 <GPIO_Init>
	}


	/* Columns are inputs */
	/* Column 1 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_1_PORT;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <KEYPAD_Init+0xdc>)
 80014b0:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_1_PIN;
 80014b2:	2306      	movs	r3, #6
 80014b4:	733b      	strb	r3, [r7, #12]
	GpioC_In.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80014b6:	2300      	movs	r3, #0
 80014b8:	737b      	strb	r3, [r7, #13]
	GpioC_In.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80014ba:	2301      	movs	r3, #1
 80014bc:	73bb      	strb	r3, [r7, #14]
	GpioC_In.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80014be:	2300      	movs	r3, #0
 80014c0:	743b      	strb	r3, [r7, #16]
	GpioC_In.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&GpioC_In);
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 f8e2 	bl	8004694 <GPIO_Init>

	/* Column 2 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_2_PORT;
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <KEYPAD_Init+0xe0>)
 80014d2:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 80014d4:	2303      	movs	r3, #3
 80014d6:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 f8d9 	bl	8004694 <GPIO_Init>

	/* Column 3 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_3_PORT;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <KEYPAD_Init+0xe0>)
 80014e4:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_3_PIN;
 80014e6:	2305      	movs	r3, #5
 80014e8:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 f8d0 	bl	8004694 <GPIO_Init>

	/* Column 4 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_4_PORT;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <KEYPAD_Init+0xe0>)
 80014f6:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_4_PIN;
 80014f8:	2307      	movs	r3, #7
 80014fa:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4618      	mov	r0, r3
 8001502:	f003 f8c7 	bl	8004694 <GPIO_Init>

	/* All rows high */
	KEYPAD_INT_SetRow(0);
 8001506:	2000      	movs	r0, #0
 8001508:	f000 f818 	bl	800153c <KEYPAD_INT_SetRow>
}
 800150c:	bf00      	nop
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20013588 	.word	0x20013588
 8001518:	40020800 	.word	0x40020800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40020400 	.word	0x40020400

08001524 <KEYPAD_Read>:

KEYPAD_Button_t KEYPAD_Read(void) {
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	return KeypadStatus;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <KEYPAD_Read+0x14>)
 800152a:	781b      	ldrb	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000010 	.word	0x20000010

0800153c <KEYPAD_INT_SetRow>:

/* Private */
void KEYPAD_INT_SetRow(uint8_t row) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_ROW_1_HIGH;
 8001546:	2201      	movs	r2, #1
 8001548:	210b      	movs	r1, #11
 800154a:	481d      	ldr	r0, [pc, #116]	; (80015c0 <KEYPAD_INT_SetRow+0x84>)
 800154c:	f003 fa54 	bl	80049f8 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_2_HIGH;
 8001550:	2201      	movs	r2, #1
 8001552:	2100      	movs	r1, #0
 8001554:	481b      	ldr	r0, [pc, #108]	; (80015c4 <KEYPAD_INT_SetRow+0x88>)
 8001556:	f003 fa4f 	bl	80049f8 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_3_HIGH;
 800155a:	2201      	movs	r2, #1
 800155c:	2102      	movs	r1, #2
 800155e:	4819      	ldr	r0, [pc, #100]	; (80015c4 <KEYPAD_INT_SetRow+0x88>)
 8001560:	f003 fa4a 	bl	80049f8 <GPIO_WriteToOutputPin>
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large)
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <KEYPAD_INT_SetRow+0x8c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d104      	bne.n	8001576 <KEYPAD_INT_SetRow+0x3a>
		KEYPAD_ROW_4_HIGH;
 800156c:	2201      	movs	r2, #1
 800156e:	2104      	movs	r1, #4
 8001570:	4814      	ldr	r0, [pc, #80]	; (80015c4 <KEYPAD_INT_SetRow+0x88>)
 8001572:	f003 fa41 	bl	80049f8 <GPIO_WriteToOutputPin>

	/* Set row low */
	if (row == 1)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d104      	bne.n	8001586 <KEYPAD_INT_SetRow+0x4a>
		KEYPAD_ROW_1_LOW;
 800157c:	2200      	movs	r2, #0
 800157e:	210b      	movs	r1, #11
 8001580:	480f      	ldr	r0, [pc, #60]	; (80015c0 <KEYPAD_INT_SetRow+0x84>)
 8001582:	f003 fa39 	bl	80049f8 <GPIO_WriteToOutputPin>
	if (row == 2)
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d104      	bne.n	8001596 <KEYPAD_INT_SetRow+0x5a>
		KEYPAD_ROW_2_LOW;
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <KEYPAD_INT_SetRow+0x88>)
 8001592:	f003 fa31 	bl	80049f8 <GPIO_WriteToOutputPin>
	if (row == 3)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d104      	bne.n	80015a6 <KEYPAD_INT_SetRow+0x6a>
		KEYPAD_ROW_3_LOW;
 800159c:	2200      	movs	r2, #0
 800159e:	2102      	movs	r1, #2
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <KEYPAD_INT_SetRow+0x88>)
 80015a2:	f003 fa29 	bl	80049f8 <GPIO_WriteToOutputPin>
	if (row == 4)
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d104      	bne.n	80015b6 <KEYPAD_INT_SetRow+0x7a>
		KEYPAD_ROW_4_LOW;
 80015ac:	2200      	movs	r2, #0
 80015ae:	2104      	movs	r1, #4
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <KEYPAD_INT_SetRow+0x88>)
 80015b2:	f003 fa21 	bl	80049f8 <GPIO_WriteToOutputPin>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40020800 	.word	0x40020800
 80015c4:	40020c00 	.word	0x40020c00
 80015c8:	20013588 	.word	0x20013588

080015cc <KEYPAD_INT_CheckColumn>:

uint8_t KEYPAD_INT_CheckColumn(uint8_t row) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	/* Read columns */

	/* Scan column 1 */
	if (KEYPAD_COLUMN_1_CHECK) {
 80015d6:	2106      	movs	r1, #6
 80015d8:	481f      	ldr	r0, [pc, #124]	; (8001658 <KEYPAD_INT_CheckColumn+0x8c>)
 80015da:	f003 f9f7 	bl	80049cc <GPIO_ReadFromInputPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <KEYPAD_INT_CheckColumn+0x24>
		return KEYPAD_INT_Buttons[row - 1][0];
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <KEYPAD_INT_CheckColumn+0x90>)
 80015ea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80015ee:	e02e      	b.n	800164e <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 2 */
	if (KEYPAD_COLUMN_2_CHECK) {
 80015f0:	2103      	movs	r1, #3
 80015f2:	481b      	ldr	r0, [pc, #108]	; (8001660 <KEYPAD_INT_CheckColumn+0x94>)
 80015f4:	f003 f9ea 	bl	80049cc <GPIO_ReadFromInputPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <KEYPAD_INT_CheckColumn+0x40>
		return KEYPAD_INT_Buttons[row - 1][1];
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	3b01      	subs	r3, #1
 8001602:	4a16      	ldr	r2, [pc, #88]	; (800165c <KEYPAD_INT_CheckColumn+0x90>)
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	785b      	ldrb	r3, [r3, #1]
 800160a:	e020      	b.n	800164e <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 3 */
	if (KEYPAD_COLUMN_3_CHECK) {
 800160c:	2105      	movs	r1, #5
 800160e:	4814      	ldr	r0, [pc, #80]	; (8001660 <KEYPAD_INT_CheckColumn+0x94>)
 8001610:	f003 f9dc 	bl	80049cc <GPIO_ReadFromInputPin>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <KEYPAD_INT_CheckColumn+0x5c>
		return KEYPAD_INT_Buttons[row - 1][2];
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	3b01      	subs	r3, #1
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <KEYPAD_INT_CheckColumn+0x90>)
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	789b      	ldrb	r3, [r3, #2]
 8001626:	e012      	b.n	800164e <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 4 */
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large && KEYPAD_COLUMN_4_CHECK) {
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <KEYPAD_INT_CheckColumn+0x98>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10d      	bne.n	800164c <KEYPAD_INT_CheckColumn+0x80>
 8001630:	2107      	movs	r1, #7
 8001632:	480b      	ldr	r0, [pc, #44]	; (8001660 <KEYPAD_INT_CheckColumn+0x94>)
 8001634:	f003 f9ca 	bl	80049cc <GPIO_ReadFromInputPin>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <KEYPAD_INT_CheckColumn+0x80>
		return KEYPAD_INT_Buttons[row - 1][3];
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3b01      	subs	r3, #1
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <KEYPAD_INT_CheckColumn+0x90>)
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	78db      	ldrb	r3, [r3, #3]
 800164a:	e000      	b.n	800164e <KEYPAD_INT_CheckColumn+0x82>
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 800164c:	23ff      	movs	r3, #255	; 0xff
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40020c00 	.word	0x40020c00
 800165c:	20000000 	.word	0x20000000
 8001660:	40020400 	.word	0x40020400
 8001664:	20013588 	.word	0x20013588

08001668 <KEYPAD_INT_Read>:

uint8_t KEYPAD_INT_Read(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	KEYPAD_INT_SetRow(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff ff64 	bl	800153c <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff ffa9 	bl	80015cc <KEYPAD_INT_CheckColumn>
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2bff      	cmp	r3, #255	; 0xff
 8001682:	d001      	beq.n	8001688 <KEYPAD_INT_Read+0x20>
		return check;
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	e02b      	b.n	80016e0 <KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	KEYPAD_INT_SetRow(2);
 8001688:	2002      	movs	r0, #2
 800168a:	f7ff ff57 	bl	800153c <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(2);
 800168e:	2002      	movs	r0, #2
 8001690:	f7ff ff9c 	bl	80015cc <KEYPAD_INT_CheckColumn>
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2bff      	cmp	r3, #255	; 0xff
 800169c:	d001      	beq.n	80016a2 <KEYPAD_INT_Read+0x3a>
		return check;
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	e01e      	b.n	80016e0 <KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	KEYPAD_INT_SetRow(3);
 80016a2:	2003      	movs	r0, #3
 80016a4:	f7ff ff4a 	bl	800153c <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(3);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f7ff ff8f 	bl	80015cc <KEYPAD_INT_CheckColumn>
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2bff      	cmp	r3, #255	; 0xff
 80016b6:	d001      	beq.n	80016bc <KEYPAD_INT_Read+0x54>
		return check;
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	e011      	b.n	80016e0 <KEYPAD_INT_Read+0x78>
	}

	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large) {
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <KEYPAD_INT_Read+0x80>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10c      	bne.n	80016de <KEYPAD_INT_Read+0x76>
		/* Set row 4 to LOW */
		KEYPAD_INT_SetRow(4);
 80016c4:	2004      	movs	r0, #4
 80016c6:	f7ff ff39 	bl	800153c <KEYPAD_INT_SetRow>
		/* Check columns */
		check = KEYPAD_INT_CheckColumn(4);
 80016ca:	2004      	movs	r0, #4
 80016cc:	f7ff ff7e 	bl	80015cc <KEYPAD_INT_CheckColumn>
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NOPRESSED) {
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2bff      	cmp	r3, #255	; 0xff
 80016d8:	d001      	beq.n	80016de <KEYPAD_INT_Read+0x76>
			return check;
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	e000      	b.n	80016e0 <KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 80016de:	23ff      	movs	r3, #255	; 0xff
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20013588 	.word	0x20013588

080016ec <KEYPAD_Hold_Button>:

KEYPAD_Button_t KEYPAD_Hold_Button(KEYPAD_Button_t button) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	return button | 0x80;
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016fc:	b2db      	uxtb	r3, r3
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <KEYPAD_Update>:

void KEYPAD_Update(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	KeypadStatus = (KEYPAD_Button_t) KEYPAD_INT_Read();
 8001710:	f7ff ffaa 	bl	8001668 <KEYPAD_INT_Read>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	4b01      	ldr	r3, [pc, #4]	; (8001720 <KEYPAD_Update+0x14>)
 800171a:	701a      	strb	r2, [r3, #0]
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000010 	.word	0x20000010

08001724 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 800172e:	2101      	movs	r1, #1
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <LCD5110_send+0x40>)
 8001732:	f003 fd99 	bl	8005268 <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <LCD5110_send+0x44>)
 800173c:	f003 f95c 	bl	80049f8 <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4619      	mov	r1, r3
 8001744:	4807      	ldr	r0, [pc, #28]	; (8001764 <LCD5110_send+0x40>)
 8001746:	f003 fd64 	bl	8005212 <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 800174a:	2201      	movs	r2, #1
 800174c:	2101      	movs	r1, #1
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <LCD5110_send+0x44>)
 8001750:	f003 f952 	bl	80049f8 <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 8001754:	2100      	movs	r1, #0
 8001756:	4803      	ldr	r0, [pc, #12]	; (8001764 <LCD5110_send+0x40>)
 8001758:	f003 fd86 	bl	8005268 <SPI_PeripheralControl>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40013000 	.word	0x40013000
 8001768:	40020400 	.word	0x40020400

0800176c <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d002      	beq.n	8001788 <LCD5110_Pin+0x1c>
 8001782:	2b02      	cmp	r3, #2
 8001784:	d00f      	beq.n	80017a6 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 8001786:	e01d      	b.n	80017c4 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 800178e:	2201      	movs	r2, #1
 8001790:	2105      	movs	r1, #5
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <LCD5110_Pin+0x60>)
 8001794:	f003 f930 	bl	80049f8 <GPIO_WriteToOutputPin>
			break;
 8001798:	e014      	b.n	80017c4 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2105      	movs	r1, #5
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <LCD5110_Pin+0x60>)
 80017a0:	f003 f92a 	bl	80049f8 <GPIO_WriteToOutputPin>
			break;
 80017a4:	e00e      	b.n	80017c4 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2107      	movs	r1, #7
 80017b0:	4807      	ldr	r0, [pc, #28]	; (80017d0 <LCD5110_Pin+0x64>)
 80017b2:	f003 f921 	bl	80049f8 <GPIO_WriteToOutputPin>
			break;
 80017b6:	e004      	b.n	80017c2 <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2107      	movs	r1, #7
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <LCD5110_Pin+0x64>)
 80017be:	f003 f91b 	bl	80049f8 <GPIO_WriteToOutputPin>
			break;
 80017c2:	bf00      	nop
	}
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40021000 	.word	0x40021000

080017d4 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e002      	b.n	80017e8 <LCD5110_Delay+0x14>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f8      	bhi.n	80017e2 <LCD5110_Delay+0xe>
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b08e      	sub	sp, #56	; 0x38
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 800180a:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <LCD5110_Init+0x138>)
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800180e:	2302      	movs	r3, #2
 8001810:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8001814:	2305      	movs	r3, #5
 8001816:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001826:	2302      	movs	r3, #2
 8001828:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800182c:	2305      	movs	r3, #5
 800182e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001836:	4618      	mov	r0, r3
 8001838:	f002 ff2c 	bl	8004694 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800183c:	2307      	movs	r3, #7
 800183e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001846:	4618      	mov	r0, r3
 8001848:	f002 ff24 	bl	8004694 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 800184c:	4b3b      	ldr	r3, [pc, #236]	; (800193c <LCD5110_Init+0x13c>)
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 8001850:	2301      	movs	r3, #1
 8001852:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 8001868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186c:	4618      	mov	r0, r3
 800186e:	f002 ff11 	bl	8004694 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <LCD5110_Init+0x140>)
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 8001876:	2305      	movs	r3, #5
 8001878:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800187c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001880:	4618      	mov	r0, r3
 8001882:	f002 ff07 	bl	8004694 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <LCD5110_Init+0x144>)
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 800188a:	2307      	movs	r3, #7
 800188c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fefd 	bl	8004694 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <LCD5110_Init+0x148>)
 800189c:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800189e:	2301      	movs	r3, #1
 80018a0:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 80018a2:	2301      	movs	r3, #1
 80018a4:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 80018a6:	2302      	movs	r3, #2
 80018a8:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 80018aa:	2300      	movs	r3, #0
 80018ac:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 80018ae:	2300      	movs	r3, #0
 80018b0:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 80018b2:	2300      	movs	r3, #0
 80018b4:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 80018b6:	2300      	movs	r3, #0
 80018b8:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fc4c 	bl	800515c <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 80018c4:	2101      	movs	r1, #1
 80018c6:	4820      	ldr	r0, [pc, #128]	; (8001948 <LCD5110_Init+0x148>)
 80018c8:	f003 fcea 	bl	80052a0 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 80018cc:	2100      	movs	r1, #0
 80018ce:	2002      	movs	r0, #2
 80018d0:	f7ff ff4c 	bl	800176c <LCD5110_Pin>
	LCD5110_Delay(10000);
 80018d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80018d8:	f7ff ff7c 	bl	80017d4 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 80018dc:	2101      	movs	r1, #1
 80018de:	2002      	movs	r0, #2
 80018e0:	f7ff ff44 	bl	800176c <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 80018e4:	2121      	movs	r1, #33	; 0x21
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f830 	bl	800194c <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 80018ec:	2114      	movs	r1, #20
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f82c 	bl	800194c <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da01      	bge.n	8001900 <LCD5110_Init+0x100>
		contrast = 0x7F;
 80018fc:	237f      	movs	r3, #127	; 0x7f
 80018fe:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001906:	b2db      	uxtb	r3, r3
 8001908:	4619      	mov	r1, r3
 800190a:	2000      	movs	r0, #0
 800190c:	f000 f81e 	bl	800194c <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 8001910:	2120      	movs	r1, #32
 8001912:	2000      	movs	r0, #0
 8001914:	f000 f81a 	bl	800194c <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001918:	210c      	movs	r1, #12
 800191a:	2000      	movs	r0, #0
 800191c:	f000 f816 	bl	800194c <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 8001920:	f000 f8b8 	bl	8001a94 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001924:	210c      	movs	r1, #12
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f810 	bl	800194c <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 800192c:	f000 f88c 	bl	8001a48 <LCD5110_Clear>
}
 8001930:	bf00      	nop
 8001932:	3738      	adds	r7, #56	; 0x38
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40021000 	.word	0x40021000
 8001948:	40013000 	.word	0x40013000

0800194c <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d006      	beq.n	8001970 <LCD5110_Write+0x24>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d109      	bne.n	800197a <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 8001966:	2101      	movs	r1, #1
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff feff 	bl	800176c <LCD5110_Pin>
			break;
 800196e:	e005      	b.n	800197c <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 8001970:	2100      	movs	r1, #0
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff fefa 	bl	800176c <LCD5110_Pin>
			break;
 8001978:	e000      	b.n	800197c <LCD5110_Write+0x30>
		default: break;
 800197a:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fed0 	bl	8001724 <LCD5110_send>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	460b      	mov	r3, r1
 8001998:	71bb      	strb	r3, [r7, #6]
 800199a:	4613      	mov	r3, r2
 800199c:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b53      	cmp	r3, #83	; 0x53
 80019a2:	d849      	bhi.n	8001a38 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	2b2f      	cmp	r3, #47	; 0x2f
 80019a8:	d848      	bhi.n	8001a3c <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01d      	beq.n	80019ec <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	08db      	lsrs	r3, r3, #3
 80019b6:	b2d8      	uxtb	r0, r3
 80019b8:	4601      	mov	r1, r0
 80019ba:	2354      	movs	r3, #84	; 0x54
 80019bc:	fb03 f301 	mul.w	r3, r3, r1
 80019c0:	4413      	add	r3, r2
 80019c2:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <LCD5110_DrawPixel+0xb8>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	b25a      	sxtb	r2, r3
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b259      	sxtb	r1, r3
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	2354      	movs	r3, #84	; 0x54
 80019de:	fb03 f300 	mul.w	r3, r3, r0
 80019e2:	4413      	add	r3, r2
 80019e4:	b2c9      	uxtb	r1, r1
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <LCD5110_DrawPixel+0xb8>)
 80019e8:	54d1      	strb	r1, [r2, r3]
 80019ea:	e01e      	b.n	8001a2a <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 80019ec:	79fa      	ldrb	r2, [r7, #7]
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	b2d8      	uxtb	r0, r3
 80019f4:	4601      	mov	r1, r0
 80019f6:	2354      	movs	r3, #84	; 0x54
 80019f8:	fb03 f301 	mul.w	r3, r3, r1
 80019fc:	4413      	add	r3, r2
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <LCD5110_DrawPixel+0xb8>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	b25a      	sxtb	r2, r3
 8001a04:	79bb      	ldrb	r3, [r7, #6]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	4013      	ands	r3, r2
 8001a18:	b259      	sxtb	r1, r3
 8001a1a:	79fa      	ldrb	r2, [r7, #7]
 8001a1c:	2354      	movs	r3, #84	; 0x54
 8001a1e:	fb03 f300 	mul.w	r3, r3, r0
 8001a22:	4413      	add	r3, r2
 8001a24:	b2c9      	uxtb	r1, r1
 8001a26:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <LCD5110_DrawPixel+0xb8>)
 8001a28:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	79fa      	ldrb	r2, [r7, #7]
 8001a2e:	79b9      	ldrb	r1, [r7, #6]
 8001a30:	79f8      	ldrb	r0, [r7, #7]
 8001a32:	f000 f89d 	bl	8001b70 <LCD5110_UpdateArea>
 8001a36:	e002      	b.n	8001a3e <LCD5110_DrawPixel+0xb2>
		return;
 8001a38:	bf00      	nop
 8001a3a:	e000      	b.n	8001a3e <LCD5110_DrawPixel+0xb2>
		return;
 8001a3c:	bf00      	nop
}
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20013590 	.word	0x20013590

08001a48 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 8001a4e:	f000 f821 	bl	8001a94 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	e007      	b.n	8001a68 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <LCD5110_Clear+0x48>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001a6e:	d3f3      	bcc.n	8001a58 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 8001a70:	2100      	movs	r1, #0
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 f8b8 	bl	8001be8 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 8001a78:	232f      	movs	r3, #47	; 0x2f
 8001a7a:	2253      	movs	r2, #83	; 0x53
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 f876 	bl	8001b70 <LCD5110_UpdateArea>
	LCD5110_Refresh();
 8001a84:	f000 f812 	bl	8001aac <LCD5110_Refresh>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20013590 	.word	0x20013590

08001a94 <LCD5110_Home>:

void LCD5110_Home(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff ff56 	bl	800194c <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 8001aa0:	2140      	movs	r1, #64	; 0x40
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff ff52 	bl	800194c <LCD5110_Write>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	71fb      	strb	r3, [r7, #7]
 8001ab6:	e03b      	b.n	8001b30 <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8001ab8:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <LCD5110_Refresh+0xb0>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dc2f      	bgt.n	8001b28 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <LCD5110_Refresh+0xb4>)
 8001ace:	7812      	ldrb	r2, [r2, #0]
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	dc31      	bgt.n	8001b38 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4619      	mov	r1, r3
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff ff34 	bl	800194c <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <LCD5110_Refresh+0xb8>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff ff2b 	bl	800194c <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <LCD5110_Refresh+0xb8>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	71bb      	strb	r3, [r7, #6]
 8001afc:	e00e      	b.n	8001b1c <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2254      	movs	r2, #84	; 0x54
 8001b02:	fb02 f203 	mul.w	r2, r2, r3
 8001b06:	79bb      	ldrb	r3, [r7, #6]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <LCD5110_Refresh+0xbc>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7ff ff1b 	bl	800194c <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8001b16:	79bb      	ldrb	r3, [r7, #6]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	71bb      	strb	r3, [r7, #6]
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <LCD5110_Refresh+0xc0>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	79ba      	ldrb	r2, [r7, #6]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d9eb      	bls.n	8001afe <LCD5110_Refresh+0x52>
 8001b26:	e000      	b.n	8001b2a <LCD5110_Refresh+0x7e>
			continue;
 8001b28:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d9c0      	bls.n	8001ab8 <LCD5110_Refresh+0xc>
 8001b36:	e000      	b.n	8001b3a <LCD5110_Refresh+0x8e>
			break;
 8001b38:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <LCD5110_Refresh+0xb8>)
 8001b3c:	2253      	movs	r2, #83	; 0x53
 8001b3e:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <LCD5110_Refresh+0xc0>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <LCD5110_Refresh+0xb0>)
 8001b48:	222f      	movs	r2, #47	; 0x2f
 8001b4a:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <LCD5110_Refresh+0xb4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000022a 	.word	0x2000022a
 8001b60:	2000022b 	.word	0x2000022b
 8001b64:	20000228 	.word	0x20000228
 8001b68:	20013590 	.word	0x20013590
 8001b6c:	20000229 	.word	0x20000229

08001b70 <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8001b70:	b490      	push	{r4, r7}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4623      	mov	r3, r4
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	4603      	mov	r3, r0
 8001b84:	71bb      	strb	r3, [r7, #6]
 8001b86:	460b      	mov	r3, r1
 8001b88:	717b      	strb	r3, [r7, #5]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <LCD5110_UpdateArea+0x68>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	79fa      	ldrb	r2, [r7, #7]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d202      	bcs.n	8001b9e <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8001b98:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <LCD5110_UpdateArea+0x68>)
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <LCD5110_UpdateArea+0x6c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	797a      	ldrb	r2, [r7, #5]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d902      	bls.n	8001bae <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <LCD5110_UpdateArea+0x6c>)
 8001baa:	797b      	ldrb	r3, [r7, #5]
 8001bac:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <LCD5110_UpdateArea+0x70>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	79ba      	ldrb	r2, [r7, #6]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d202      	bcs.n	8001bbe <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8001bb8:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <LCD5110_UpdateArea+0x70>)
 8001bba:	79bb      	ldrb	r3, [r7, #6]
 8001bbc:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <LCD5110_UpdateArea+0x74>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	793a      	ldrb	r2, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d902      	bls.n	8001bce <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <LCD5110_UpdateArea+0x74>)
 8001bca:	793b      	ldrb	r3, [r7, #4]
 8001bcc:	7013      	strb	r3, [r2, #0]
	}
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc90      	pop	{r4, r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000228 	.word	0x20000228
 8001bdc:	20000229 	.word	0x20000229
 8001be0:	2000022a 	.word	0x2000022a
 8001be4:	2000022b 	.word	0x2000022b

08001be8 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8001bf8:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <LCD5110_GotoXY+0x28>)
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <LCD5110_GotoXY+0x2c>)
 8001c00:	79bb      	ldrb	r3, [r7, #6]
 8001c02:	7013      	strb	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	2001358c 	.word	0x2001358c
 8001c14:	2001358d 	.word	0x2001358d

08001c18 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	460b      	mov	r3, r1
 8001c24:	71bb      	strb	r3, [r7, #6]
 8001c26:	4613      	mov	r3, r2
 8001c28:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8001c2a:	797b      	ldrb	r3, [r7, #5]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d104      	bne.n	8001c3a <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8001c30:	2304      	movs	r3, #4
 8001c32:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8001c34:	2306      	movs	r3, #6
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e003      	b.n	8001c42 <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 8001c3e:	2308      	movs	r3, #8
 8001c40:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <LCD5110_Putc+0x144>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	7bbb      	ldrb	r3, [r7, #14]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	2b54      	cmp	r3, #84	; 0x54
 8001c4e:	dd09      	ble.n	8001c64 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8001c50:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <LCD5110_Putc+0x148>)
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	4413      	add	r3, r2
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <LCD5110_Putc+0x148>)
 8001c5c:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <LCD5110_Putc+0x144>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	737b      	strb	r3, [r7, #13]
 8001c68:	e068      	b.n	8001d3c <LCD5110_Putc+0x124>
		if (c < 32) {
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b1f      	cmp	r3, #31
 8001c6e:	d91c      	bls.n	8001caa <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8001c70:	797b      	ldrb	r3, [r7, #5]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f1a3 0220 	sub.w	r2, r3, #32
 8001c7c:	7b79      	ldrb	r1, [r7, #13]
 8001c7e:	4839      	ldr	r0, [pc, #228]	; (8001d64 <LCD5110_Putc+0x14c>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	4403      	add	r3, r0
 8001c88:	440b      	add	r3, r1
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	733b      	strb	r3, [r7, #12]
 8001c8e:	e00c      	b.n	8001caa <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f1a3 0220 	sub.w	r2, r3, #32
 8001c96:	7b79      	ldrb	r1, [r7, #13]
 8001c98:	4833      	ldr	r0, [pc, #204]	; (8001d68 <LCD5110_Putc+0x150>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4403      	add	r3, r0
 8001ca4:	440b      	add	r3, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8001caa:	7b3b      	ldrb	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <LCD5110_Putc+0xa4>
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <LCD5110_Putc+0xa4>
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d13b      	bne.n	8001d34 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	72fb      	strb	r3, [r7, #11]
 8001cc0:	e02d      	b.n	8001d1e <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 8001cc2:	79bb      	ldrb	r3, [r7, #6]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d112      	bne.n	8001cee <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <LCD5110_Putc+0x144>)
 8001cca:	7818      	ldrb	r0, [r3, #0]
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <LCD5110_Putc+0x148>)
 8001cce:	781a      	ldrb	r2, [r3, #0]
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2d9      	uxtb	r1, r3
 8001cd6:	7b3a      	ldrb	r2, [r7, #12]
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	fa42 f303 	asr.w	r3, r2, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f7ff fe50 	bl	800198c <LCD5110_DrawPixel>
 8001cec:	e014      	b.n	8001d18 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <LCD5110_Putc+0x144>)
 8001cf0:	7818      	ldrb	r0, [r3, #0]
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <LCD5110_Putc+0x148>)
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	7afb      	ldrb	r3, [r7, #11]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2d9      	uxtb	r1, r3
 8001cfc:	7b3a      	ldrb	r2, [r7, #12]
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	fa42 f303 	asr.w	r3, r2, r3
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	f7ff fe3a 	bl	800198c <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8001d18:	7afb      	ldrb	r3, [r7, #11]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	72fb      	strb	r3, [r7, #11]
 8001d1e:	7afa      	ldrb	r2, [r7, #11]
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d3cd      	bcc.n	8001cc2 <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <LCD5110_Putc+0x144>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <LCD5110_Putc+0x144>)
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e000      	b.n	8001d36 <LCD5110_Putc+0x11e>
			continue;
 8001d34:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8001d36:	7b7b      	ldrb	r3, [r7, #13]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	737b      	strb	r3, [r7, #13]
 8001d3c:	7b7a      	ldrb	r2, [r7, #13]
 8001d3e:	7bbb      	ldrb	r3, [r7, #14]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	429a      	cmp	r2, r3
 8001d44:	db91      	blt.n	8001c6a <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <LCD5110_Putc+0x144>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <LCD5110_Putc+0x144>)
 8001d50:	701a      	strb	r2, [r3, #0]
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2001358c 	.word	0x2001358c
 8001d60:	2001358d 	.word	0x2001358d
 8001d64:	0800be10 	.word	0x0800be10
 8001d68:	0800bbc8 	.word	0x0800bbc8

08001d6c <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8001d7c:	e008      	b.n	8001d90 <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	78ba      	ldrb	r2, [r7, #2]
 8001d88:	78f9      	ldrb	r1, [r7, #3]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff44 	bl	8001c18 <LCD5110_Putc>
	while (*c) {
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f2      	bne.n	8001d7e <LCD5110_Puts+0x12>
	}
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f103 0208 	add.w	r2, r3, #8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dba:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f103 0208 	add.w	r2, r3, #8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f103 0208 	add.w	r2, r3, #8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	601a      	str	r2, [r3, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e5a:	d103      	bne.n	8001e64 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e00c      	b.n	8001e7e <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3308      	adds	r3, #8
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e002      	b.n	8001e72 <vListInsert+0x2e>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d2f6      	bcs.n	8001e6c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6892      	ldr	r2, [r2, #8]
 8001ecc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6852      	ldr	r2, [r2, #4]
 8001ed6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d103      	bne.n	8001eea <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10a      	bne.n	8001f34 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f22:	f383 8811 	msr	BASEPRI, r3
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001f30:	bf00      	nop
 8001f32:	e7fe      	b.n	8001f32 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001f34:	f002 f800 	bl	8003f38 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	68f9      	ldr	r1, [r7, #12]
 8001f42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	441a      	add	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f64:	3b01      	subs	r3, #1
 8001f66:	68f9      	ldr	r1, [r7, #12]
 8001f68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	441a      	add	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	22ff      	movs	r2, #255	; 0xff
 8001f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	22ff      	movs	r2, #255	; 0xff
 8001f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00f      	beq.n	8001fb2 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3310      	adds	r3, #16
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 f8e0 	bl	800315c <xTaskRemoveFromEventList>
 8001f9c:	e009      	b.n	8001fb2 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3310      	adds	r3, #16
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fefd 	bl	8001da2 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3324      	adds	r3, #36	; 0x24
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fef8 	bl	8001da2 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001fb2:	f001 fff1 	bl	8003f98 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10a      	bne.n	8001fea <xQueueGenericCreate+0x2a>
        __asm volatile
 8001fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd8:	f383 8811 	msr	BASEPRI, r3
 8001fdc:	f3bf 8f6f 	isb	sy
 8001fe0:	f3bf 8f4f 	dsb	sy
 8001fe4:	61bb      	str	r3, [r7, #24]
    }
 8001fe6:	bf00      	nop
 8001fe8:	e7fe      	b.n	8001fe8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <xQueueGenericCreate+0x48>
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d101      	bne.n	800200c <xQueueGenericCreate+0x4c>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <xQueueGenericCreate+0x4e>
 800200c:	2300      	movs	r3, #0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10a      	bne.n	8002028 <xQueueGenericCreate+0x68>
        __asm volatile
 8002012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002016:	f383 8811 	msr	BASEPRI, r3
 800201a:	f3bf 8f6f 	isb	sy
 800201e:	f3bf 8f4f 	dsb	sy
 8002022:	617b      	str	r3, [r7, #20]
    }
 8002024:	bf00      	nop
 8002026:	e7fe      	b.n	8002026 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800202e:	d90a      	bls.n	8002046 <xQueueGenericCreate+0x86>
        __asm volatile
 8002030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	613b      	str	r3, [r7, #16]
    }
 8002042:	bf00      	nop
 8002044:	e7fe      	b.n	8002044 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	3350      	adds	r3, #80	; 0x50
 800204a:	4618      	mov	r0, r3
 800204c:	f002 f89e 	bl	800418c <pvPortMalloc>
 8002050:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3350      	adds	r3, #80	; 0x50
 8002060:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4613      	mov	r3, r2
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f805 	bl	800207e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002074:	6a3b      	ldr	r3, [r7, #32]
    }
 8002076:	4618      	mov	r0, r3
 8002078:	3728      	adds	r7, #40	; 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e002      	b.n	80020a0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020ac:	2101      	movs	r1, #1
 80020ae:	69b8      	ldr	r0, [r7, #24]
 80020b0:	f7ff ff2b 	bl	8001f0a <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	68f9      	ldr	r1, [r7, #12]
 80020c2:	2073      	movs	r0, #115	; 0x73
 80020c4:	f003 fe8c 	bl	8005de0 <SEGGER_SYSVIEW_RecordU32x3>
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b090      	sub	sp, #64	; 0x40
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80020de:	2300      	movs	r3, #0
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <xQueueGenericSend+0x32>
        __asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80020fe:	bf00      	nop
 8002100:	e7fe      	b.n	8002100 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <xQueueGenericSend+0x40>
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <xQueueGenericSend+0x44>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <xQueueGenericSend+0x46>
 8002114:	2300      	movs	r3, #0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10a      	bne.n	8002130 <xQueueGenericSend+0x60>
        __asm volatile
 800211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800212c:	bf00      	nop
 800212e:	e7fe      	b.n	800212e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d103      	bne.n	800213e <xQueueGenericSend+0x6e>
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <xQueueGenericSend+0x72>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <xQueueGenericSend+0x74>
 8002142:	2300      	movs	r3, #0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <xQueueGenericSend+0x8e>
        __asm volatile
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	623b      	str	r3, [r7, #32]
    }
 800215a:	bf00      	nop
 800215c:	e7fe      	b.n	800215c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800215e:	f001 f997 	bl	8003490 <xTaskGetSchedulerState>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <xQueueGenericSend+0x9e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <xQueueGenericSend+0xa2>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <xQueueGenericSend+0xa4>
 8002172:	2300      	movs	r3, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10a      	bne.n	800218e <xQueueGenericSend+0xbe>
        __asm volatile
 8002178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	61fb      	str	r3, [r7, #28]
    }
 800218a:	bf00      	nop
 800218c:	e7fe      	b.n	800218c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800218e:	f001 fed3 	bl	8003f38 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	429a      	cmp	r2, r3
 800219c:	d302      	bcc.n	80021a4 <xQueueGenericSend+0xd4>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d11f      	bne.n	80021e4 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 fb84 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	460b      	mov	r3, r1
 80021b6:	4601      	mov	r1, r0
 80021b8:	205a      	movs	r0, #90	; 0x5a
 80021ba:	f003 fe87 	bl	8005ecc <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021c4:	f000 fa56 	bl	8002674 <prvCopyDataToQueue>
 80021c8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	3324      	adds	r3, #36	; 0x24
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 ffc0 	bl	800315c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80021dc:	f001 fedc 	bl	8003f98 <vPortExitCritical>
                return pdPASS;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e07d      	b.n	80022e0 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d110      	bne.n	800220c <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80021ea:	f001 fed5 	bl	8003f98 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 fb5f 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	460b      	mov	r3, r1
 8002200:	4601      	mov	r1, r0
 8002202:	205a      	movs	r0, #90	; 0x5a
 8002204:	f003 fe62 	bl	8005ecc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002208:	2300      	movs	r3, #0
 800220a:	e069      	b.n	80022e0 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4618      	mov	r0, r3
 8002218:	f001 f806 	bl	8003228 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800221c:	2301      	movs	r3, #1
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002220:	f001 feba 	bl	8003f98 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002224:	f000 fd90 	bl	8002d48 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002228:	f001 fe86 	bl	8003f38 <vPortEnterCritical>
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002232:	b25b      	sxtb	r3, r3
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002238:	d103      	bne.n	8002242 <xQueueGenericSend+0x172>
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002248:	b25b      	sxtb	r3, r3
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800224e:	d103      	bne.n	8002258 <xQueueGenericSend+0x188>
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002258:	f001 fe9e 	bl	8003f98 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800225c:	1d3a      	adds	r2, r7, #4
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fff5 	bl	8003254 <xTaskCheckForTimeOut>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d124      	bne.n	80022ba <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002272:	f000 faf7 	bl	8002864 <prvIsQueueFull>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d018      	beq.n	80022ae <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	3310      	adds	r3, #16
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f000 ff17 	bl	80030b8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800228a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800228c:	f000 fa82 	bl	8002794 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002290:	f000 fd68 	bl	8002d64 <xTaskResumeAll>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	f47f af79 	bne.w	800218e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <xQueueGenericSend+0x218>)
 800229e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	e76f      	b.n	800218e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80022ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022b0:	f000 fa70 	bl	8002794 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80022b4:	f000 fd56 	bl	8002d64 <xTaskResumeAll>
 80022b8:	e769      	b.n	800218e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80022ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022bc:	f000 fa6a 	bl	8002794 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80022c0:	f000 fd50 	bl	8002d64 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80022c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 faf4 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	460b      	mov	r3, r1
 80022d6:	4601      	mov	r1, r0
 80022d8:	205a      	movs	r0, #90	; 0x5a
 80022da:	f003 fdf7 	bl	8005ecc <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80022de:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3738      	adds	r7, #56	; 0x38
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	e000ed04 	.word	0xe000ed04

080022ec <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b090      	sub	sp, #64	; 0x40
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80022fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002316:	bf00      	nop
 8002318:	e7fe      	b.n	8002318 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <xQueueGenericSendFromISR+0x3c>
 8002320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <xQueueGenericSendFromISR+0x40>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <xQueueGenericSendFromISR+0x42>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002344:	bf00      	nop
 8002346:	e7fe      	b.n	8002346 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d103      	bne.n	8002356 <xQueueGenericSendFromISR+0x6a>
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <xQueueGenericSendFromISR+0x6e>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <xQueueGenericSendFromISR+0x70>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	623b      	str	r3, [r7, #32]
    }
 8002372:	bf00      	nop
 8002374:	e7fe      	b.n	8002374 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002376:	f001 fec9 	bl	800410c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800237a:	f3ef 8211 	mrs	r2, BASEPRI
 800237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	61fa      	str	r2, [r7, #28]
 8002390:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002392:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	429a      	cmp	r2, r3
 80023a0:	d302      	bcc.n	80023a8 <xQueueGenericSendFromISR+0xbc>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d148      	bne.n	800243a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80023a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80023b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 fa7a 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 80023c0:	4601      	mov	r1, r0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	461a      	mov	r2, r3
 80023c6:	2060      	movs	r0, #96	; 0x60
 80023c8:	f003 fcb0 	bl	8005d2c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023d2:	f000 f94f 	bl	8002674 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80023d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023de:	d112      	bne.n	8002406 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d025      	beq.n	8002434 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	3324      	adds	r3, #36	; 0x24
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 feb5 	bl	800315c <xTaskRemoveFromEventList>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01d      	beq.n	8002434 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01a      	beq.n	8002434 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e016      	b.n	8002434 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002406:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800240a:	2b7f      	cmp	r3, #127	; 0x7f
 800240c:	d10a      	bne.n	8002424 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800240e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002412:	f383 8811 	msr	BASEPRI, r3
 8002416:	f3bf 8f6f 	isb	sy
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	617b      	str	r3, [r7, #20]
    }
 8002420:	bf00      	nop
 8002422:	e7fe      	b.n	8002422 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002428:	3301      	adds	r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	b25a      	sxtb	r2, r3
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002434:	2301      	movs	r3, #1
 8002436:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002438:	e00b      	b.n	8002452 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243c:	4618      	mov	r0, r3
 800243e:	f004 fa39 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 8002442:	4601      	mov	r1, r0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	461a      	mov	r2, r3
 8002448:	2060      	movs	r0, #96	; 0x60
 800244a:	f003 fc6f 	bl	8005d2c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800244e:	2300      	movs	r3, #0
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002454:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800245c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002460:	4618      	mov	r0, r3
 8002462:	3740      	adds	r7, #64	; 0x40
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b08f      	sub	sp, #60	; 0x3c
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <xQueueReceive+0x30>
        __asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	623b      	str	r3, [r7, #32]
    }
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <xQueueReceive+0x3e>
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <xQueueReceive+0x42>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <xQueueReceive+0x44>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <xQueueReceive+0x5e>
        __asm volatile
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	61fb      	str	r3, [r7, #28]
    }
 80024c2:	bf00      	nop
 80024c4:	e7fe      	b.n	80024c4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024c6:	f000 ffe3 	bl	8003490 <xTaskGetSchedulerState>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <xQueueReceive+0x6e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <xQueueReceive+0x72>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <xQueueReceive+0x74>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <xQueueReceive+0x8e>
        __asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	61bb      	str	r3, [r7, #24]
    }
 80024f2:	bf00      	nop
 80024f4:	e7fe      	b.n	80024f4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024f6:	f001 fd1f 	bl	8003f38 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	2b00      	cmp	r3, #0
 8002504:	d024      	beq.n	8002550 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800250a:	f000 f91d 	bl	8002748 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	4618      	mov	r0, r3
 8002512:	f004 f9cf 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 8002516:	4604      	mov	r4, r0
 8002518:	2000      	movs	r0, #0
 800251a:	f004 f9cb 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 800251e:	4602      	mov	r2, r0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2101      	movs	r1, #1
 8002524:	9100      	str	r1, [sp, #0]
 8002526:	4621      	mov	r1, r4
 8002528:	205c      	movs	r0, #92	; 0x5c
 800252a:	f003 fccf 	bl	8005ecc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	3310      	adds	r3, #16
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fe0a 	bl	800315c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002548:	f001 fd26 	bl	8003f98 <vPortExitCritical>
                return pdPASS;
 800254c:	2301      	movs	r3, #1
 800254e:	e08a      	b.n	8002666 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d113      	bne.n	800257e <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002556:	f001 fd1f 	bl	8003f98 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	4618      	mov	r0, r3
 800255e:	f004 f9a9 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 8002562:	4604      	mov	r4, r0
 8002564:	2000      	movs	r0, #0
 8002566:	f004 f9a5 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 800256a:	4602      	mov	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2101      	movs	r1, #1
 8002570:	9100      	str	r1, [sp, #0]
 8002572:	4621      	mov	r1, r4
 8002574:	205c      	movs	r0, #92	; 0x5c
 8002576:	f003 fca9 	bl	8005ecc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800257a:	2300      	movs	r3, #0
 800257c:	e073      	b.n	8002666 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fe4d 	bl	8003228 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800258e:	2301      	movs	r3, #1
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002592:	f001 fd01 	bl	8003f98 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002596:	f000 fbd7 	bl	8002d48 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800259a:	f001 fccd 	bl	8003f38 <vPortEnterCritical>
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025a4:	b25b      	sxtb	r3, r3
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025aa:	d103      	bne.n	80025b4 <xQueueReceive+0x14c>
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025ba:	b25b      	sxtb	r3, r3
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c0:	d103      	bne.n	80025ca <xQueueReceive+0x162>
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ca:	f001 fce5 	bl	8003f98 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025ce:	1d3a      	adds	r2, r7, #4
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fe3c 	bl	8003254 <xTaskCheckForTimeOut>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d124      	bne.n	800262c <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e4:	f000 f928 	bl	8002838 <prvIsQueueEmpty>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d018      	beq.n	8002620 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	3324      	adds	r3, #36	; 0x24
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fd5e 	bl	80030b8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025fe:	f000 f8c9 	bl	8002794 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002602:	f000 fbaf 	bl	8002d64 <xTaskResumeAll>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	f47f af74 	bne.w	80024f6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800260e:	4b18      	ldr	r3, [pc, #96]	; (8002670 <xQueueReceive+0x208>)
 8002610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	e76a      	b.n	80024f6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002622:	f000 f8b7 	bl	8002794 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002626:	f000 fb9d 	bl	8002d64 <xTaskResumeAll>
 800262a:	e764      	b.n	80024f6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800262c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800262e:	f000 f8b1 	bl	8002794 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002632:	f000 fb97 	bl	8002d64 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002638:	f000 f8fe 	bl	8002838 <prvIsQueueEmpty>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	f43f af59 	beq.w	80024f6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	4618      	mov	r0, r3
 8002648:	f004 f934 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 800264c:	4604      	mov	r4, r0
 800264e:	2000      	movs	r0, #0
 8002650:	f004 f930 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 8002654:	4602      	mov	r2, r0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2101      	movs	r1, #1
 800265a:	9100      	str	r1, [sp, #0]
 800265c:	4621      	mov	r1, r4
 800265e:	205c      	movs	r0, #92	; 0x5c
 8002660:	f003 fc34 	bl	8005ecc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002664:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002666:	4618      	mov	r0, r3
 8002668:	3734      	adds	r7, #52	; 0x34
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	bf00      	nop
 8002670:	e000ed04 	.word	0xe000ed04

08002674 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d14d      	bne.n	8002736 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 ff14 	bl	80034cc <xTaskPriorityDisinherit>
 80026a4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	e043      	b.n	8002736 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d119      	bne.n	80026e8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6858      	ldr	r0, [r3, #4]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	461a      	mov	r2, r3
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	f006 fab2 	bl	8008c28 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	441a      	add	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d32b      	bcc.n	8002736 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	e026      	b.n	8002736 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	68d8      	ldr	r0, [r3, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	461a      	mov	r2, r3
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	f006 fa98 	bl	8008c28 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	425b      	negs	r3, r3
 8002702:	441a      	add	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	425b      	negs	r3, r3
 800271e:	441a      	add	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d105      	bne.n	8002736 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	3b01      	subs	r3, #1
 8002734:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800273e:	697b      	ldr	r3, [r7, #20]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d018      	beq.n	800278c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	441a      	add	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	429a      	cmp	r2, r3
 8002772:	d303      	bcc.n	800277c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68d9      	ldr	r1, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	461a      	mov	r2, r3
 8002786:	6838      	ldr	r0, [r7, #0]
 8002788:	f006 fa4e 	bl	8008c28 <memcpy>
    }
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800279c:	f001 fbcc 	bl	8003f38 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027a8:	e011      	b.n	80027ce <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d012      	beq.n	80027d8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3324      	adds	r3, #36	; 0x24
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fcd0 	bl	800315c <xTaskRemoveFromEventList>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80027c2:	f000 fdad 	bl	8003320 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	dce9      	bgt.n	80027aa <prvUnlockQueue+0x16>
 80027d6:	e000      	b.n	80027da <prvUnlockQueue+0x46>
                        break;
 80027d8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	22ff      	movs	r2, #255	; 0xff
 80027de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80027e2:	f001 fbd9 	bl	8003f98 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80027e6:	f001 fba7 	bl	8003f38 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027f0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027f2:	e011      	b.n	8002818 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d012      	beq.n	8002822 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3310      	adds	r3, #16
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fcab 	bl	800315c <xTaskRemoveFromEventList>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800280c:	f000 fd88 	bl	8003320 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002810:	7bbb      	ldrb	r3, [r7, #14]
 8002812:	3b01      	subs	r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800281c:	2b00      	cmp	r3, #0
 800281e:	dce9      	bgt.n	80027f4 <prvUnlockQueue+0x60>
 8002820:	e000      	b.n	8002824 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002822:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	22ff      	movs	r2, #255	; 0xff
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800282c:	f001 fbb4 	bl	8003f98 <vPortExitCritical>
}
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002840:	f001 fb7a 	bl	8003f38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800284c:	2301      	movs	r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	e001      	b.n	8002856 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002856:	f001 fb9f 	bl	8003f98 <vPortExitCritical>

    return xReturn;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800286c:	f001 fb64 	bl	8003f38 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	429a      	cmp	r2, r3
 800287a:	d102      	bne.n	8002882 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800287c:	2301      	movs	r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e001      	b.n	8002886 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002886:	f001 fb87 	bl	8003f98 <vPortExitCritical>

    return xReturn;
 800288a:	68fb      	ldr	r3, [r7, #12]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e01e      	b.n	80028e2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028a4:	4a13      	ldr	r2, [pc, #76]	; (80028f4 <vQueueAddToRegistry+0x60>)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d115      	bne.n	80028dc <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028b0:	4910      	ldr	r1, [pc, #64]	; (80028f4 <vQueueAddToRegistry+0x60>)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80028ba:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <vQueueAddToRegistry+0x60>)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 fff3 	bl	80068b4 <SEGGER_SYSVIEW_ShrinkId>
 80028ce:	4601      	mov	r1, r0
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	2071      	movs	r0, #113	; 0x71
 80028d6:	f003 fa29 	bl	8005d2c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80028da:	e006      	b.n	80028ea <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3301      	adds	r3, #1
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b07      	cmp	r3, #7
 80028e6:	d9dd      	bls.n	80028a4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20013788 	.word	0x20013788

080028f8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002908:	f001 fb16 	bl	8003f38 <vPortEnterCritical>
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002912:	b25b      	sxtb	r3, r3
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002918:	d103      	bne.n	8002922 <vQueueWaitForMessageRestricted+0x2a>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002928:	b25b      	sxtb	r3, r3
 800292a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800292e:	d103      	bne.n	8002938 <vQueueWaitForMessageRestricted+0x40>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002938:	f001 fb2e 	bl	8003f98 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3324      	adds	r3, #36	; 0x24
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fbd7 	bl	8003100 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7ff ff1e 	bl	8002794 <prvUnlockQueue>
    }
 8002958:	bf00      	nop
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	; 0x30
 8002964:	af04      	add	r7, sp, #16
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4618      	mov	r0, r3
 8002976:	f001 fc09 	bl	800418c <pvPortMalloc>
 800297a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00e      	beq.n	80029a0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002982:	2058      	movs	r0, #88	; 0x58
 8002984:	f001 fc02 	bl	800418c <pvPortMalloc>
 8002988:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
 8002996:	e005      	b.n	80029a4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002998:	6978      	ldr	r0, [r7, #20]
 800299a:	f001 fcd7 	bl	800434c <vPortFree>
 800299e:	e001      	b.n	80029a4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d013      	beq.n	80029d2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	2300      	movs	r3, #0
 80029ae:	9303      	str	r3, [sp, #12]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f80e 	bl	80029e2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80029c6:	69f8      	ldr	r0, [r7, #28]
 80029c8:	f000 f8a2 	bl	8002b10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029cc:	2301      	movs	r3, #1
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	e002      	b.n	80029d8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80029d8:	69bb      	ldr	r3, [r7, #24]
    }
 80029da:	4618      	mov	r0, r3
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b088      	sub	sp, #32
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	461a      	mov	r2, r3
 80029fa:	21a5      	movs	r1, #165	; 0xa5
 80029fc:	f006 f922 	bl	8008c44 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f023 0307 	bic.w	r3, r3, #7
 8002a18:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	617b      	str	r3, [r7, #20]
    }
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01f      	beq.n	8002a80 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	e012      	b.n	8002a6c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	7819      	ldrb	r1, [r3, #0]
 8002a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	4413      	add	r3, r2
 8002a54:	3334      	adds	r3, #52	; 0x34
 8002a56:	460a      	mov	r2, r1
 8002a58:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d006      	beq.n	8002a74 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b09      	cmp	r3, #9
 8002a70:	d9e9      	bls.n	8002a46 <prvInitialiseNewTask+0x64>
 8002a72:	e000      	b.n	8002a76 <prvInitialiseNewTask+0x94>
            {
                break;
 8002a74:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a7e:	e003      	b.n	8002a88 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d901      	bls.n	8002a92 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a8e:	2304      	movs	r3, #4
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff f99a 	bl	8001de2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	3318      	adds	r3, #24
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f995 	bl	8001de2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002abc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	f1c3 0205 	rsb	r2, r3, #5
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	3350      	adds	r3, #80	; 0x50
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f006 f8b4 	bl	8008c44 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	3354      	adds	r3, #84	; 0x54
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f006 f8ad 	bl	8008c44 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	68f9      	ldr	r1, [r7, #12]
 8002aee:	69b8      	ldr	r0, [r7, #24]
 8002af0:	f001 f8f6 	bl	8003ce0 <pxPortInitialiseStack>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b04:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b06:	bf00      	nop
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b10:	b5b0      	push	{r4, r5, r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b18:	f001 fa0e 	bl	8003f38 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b1c:	4b35      	ldr	r3, [pc, #212]	; (8002bf4 <prvAddNewTaskToReadyList+0xe4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	4a34      	ldr	r2, [pc, #208]	; (8002bf4 <prvAddNewTaskToReadyList+0xe4>)
 8002b24:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b26:	4b34      	ldr	r3, [pc, #208]	; (8002bf8 <prvAddNewTaskToReadyList+0xe8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b2e:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <prvAddNewTaskToReadyList+0xe8>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <prvAddNewTaskToReadyList+0xe4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d110      	bne.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b3c:	f000 fc0e 	bl	800335c <prvInitialiseTaskLists>
 8002b40:	e00d      	b.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b42:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <prvAddNewTaskToReadyList+0xec>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <prvAddNewTaskToReadyList+0xe8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d802      	bhi.n	8002b5e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <prvAddNewTaskToReadyList+0xe8>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b5e:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <prvAddNewTaskToReadyList+0xf0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <prvAddNewTaskToReadyList+0xf0>)
 8002b66:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <prvAddNewTaskToReadyList+0xf0>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d016      	beq.n	8002ba4 <prvAddNewTaskToReadyList+0x94>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 fd75 	bl	8006668 <SEGGER_SYSVIEW_OnTaskCreate>
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	461d      	mov	r5, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461c      	mov	r4, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	1ae3      	subs	r3, r4, r3
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	f002 fb9a 	bl	80052d8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 fde2 	bl	8006770 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <prvAddNewTaskToReadyList+0xf4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <prvAddNewTaskToReadyList+0xf4>)
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <prvAddNewTaskToReadyList+0xf8>)
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f7ff f911 	bl	8001dfc <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002bda:	f001 f9dd 	bl	8003f98 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <prvAddNewTaskToReadyList+0xec>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <prvAddNewTaskToReadyList+0xe8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000304 	.word	0x20000304
 8002bf8:	2000022c 	.word	0x2000022c
 8002bfc:	20000310 	.word	0x20000310
 8002c00:	20000320 	.word	0x20000320
 8002c04:	2000030c 	.word	0x2000030c
 8002c08:	20000230 	.word	0x20000230

08002c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01b      	beq.n	8002c56 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <vTaskDelay+0x68>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <vTaskDelay+0x30>
        __asm volatile
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	60bb      	str	r3, [r7, #8]
    }
 8002c38:	bf00      	nop
 8002c3a:	e7fe      	b.n	8002c3a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002c3c:	f000 f884 	bl	8002d48 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	2023      	movs	r0, #35	; 0x23
 8002c44:	f003 f836 	bl	8005cb4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c48:	2100      	movs	r1, #0
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fcbe 	bl	80035cc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002c50:	f000 f888 	bl	8002d64 <xTaskResumeAll>
 8002c54:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d107      	bne.n	8002c6c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <vTaskDelay+0x6c>)
 8002c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	2000032c 	.word	0x2000032c
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <vTaskStartScheduler+0xac>)
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	2300      	movs	r3, #0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2282      	movs	r2, #130	; 0x82
 8002c8e:	4927      	ldr	r1, [pc, #156]	; (8002d2c <vTaskStartScheduler+0xb0>)
 8002c90:	4827      	ldr	r0, [pc, #156]	; (8002d30 <vTaskStartScheduler+0xb4>)
 8002c92:	f7ff fe65 	bl	8002960 <xTaskCreate>
 8002c96:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002c9e:	f000 fd0d 	bl	80036bc <xTimerCreateTimerTask>
 8002ca2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d129      	bne.n	8002cfe <vTaskStartScheduler+0x82>
        __asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	f383 8811 	msr	BASEPRI, r3
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	60bb      	str	r3, [r7, #8]
    }
 8002cbc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <vTaskStartScheduler+0xb8>)
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cc4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <vTaskStartScheduler+0xbc>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <vTaskStartScheduler+0xc0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <vTaskStartScheduler+0xc4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3334      	adds	r3, #52	; 0x34
 8002cd8:	2205      	movs	r2, #5
 8002cda:	4914      	ldr	r1, [pc, #80]	; (8002d2c <vTaskStartScheduler+0xb0>)
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f005 ff95 	bl	8008c0c <memcmp>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <vTaskStartScheduler+0x78>
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <vTaskStartScheduler+0xc4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fcfd 	bl	80066ec <SEGGER_SYSVIEW_OnTaskStartExec>
 8002cf2:	e001      	b.n	8002cf8 <vTaskStartScheduler+0x7c>
 8002cf4:	f003 fc9c 	bl	8006630 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002cf8:	f001 f87c 	bl	8003df4 <xPortStartScheduler>
 8002cfc:	e00e      	b.n	8002d1c <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d04:	d10a      	bne.n	8002d1c <vTaskStartScheduler+0xa0>
        __asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	607b      	str	r3, [r7, #4]
    }
 8002d18:	bf00      	nop
 8002d1a:	e7fe      	b.n	8002d1a <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <vTaskStartScheduler+0xc8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000328 	.word	0x20000328
 8002d2c:	0800b9c0 	.word	0x0800b9c0
 8002d30:	08003339 	.word	0x08003339
 8002d34:	20000324 	.word	0x20000324
 8002d38:	20000310 	.word	0x20000310
 8002d3c:	20000308 	.word	0x20000308
 8002d40:	2000022c 	.word	0x2000022c
 8002d44:	20000014 	.word	0x20000014

08002d48 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <vTaskSuspendAll+0x18>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	4a03      	ldr	r2, [pc, #12]	; (8002d60 <vTaskSuspendAll+0x18>)
 8002d54:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	2000032c 	.word	0x2000032c

08002d64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d72:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <xTaskResumeAll+0x104>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10a      	bne.n	8002d90 <xTaskResumeAll+0x2c>
        __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	603b      	str	r3, [r7, #0]
    }
 8002d8c:	bf00      	nop
 8002d8e:	e7fe      	b.n	8002d8e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d90:	f001 f8d2 	bl	8003f38 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <xTaskResumeAll+0x104>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	4a33      	ldr	r2, [pc, #204]	; (8002e68 <xTaskResumeAll+0x104>)
 8002d9c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d9e:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <xTaskResumeAll+0x104>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d159      	bne.n	8002e5a <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <xTaskResumeAll+0x108>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d055      	beq.n	8002e5a <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dae:	e032      	b.n	8002e16 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db0:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <xTaskResumeAll+0x10c>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3318      	adds	r3, #24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff f87a 	bl	8001eb6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f875 	bl	8001eb6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fcce 	bl	8006770 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2201      	movs	r2, #1
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	4b25      	ldr	r3, [pc, #148]	; (8002e74 <xTaskResumeAll+0x110>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <xTaskResumeAll+0x110>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <xTaskResumeAll+0x114>)
 8002df4:	441a      	add	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f7fe fffd 	bl	8001dfc <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <xTaskResumeAll+0x118>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d302      	bcc.n	8002e16 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <xTaskResumeAll+0x11c>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <xTaskResumeAll+0x10c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1c8      	bne.n	8002db0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e24:	f000 fb18 	bl	8003458 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e28:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <xTaskResumeAll+0x120>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e34:	f000 f838 	bl	8002ea8 <xTaskIncrementTick>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <xTaskResumeAll+0x11c>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f1      	bne.n	8002e34 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <xTaskResumeAll+0x120>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <xTaskResumeAll+0x11c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e5a:	f001 f89d 	bl	8003f98 <vPortExitCritical>

    return xAlreadyYielded;
 8002e5e:	687b      	ldr	r3, [r7, #4]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000032c 	.word	0x2000032c
 8002e6c:	20000304 	.word	0x20000304
 8002e70:	200002c4 	.word	0x200002c4
 8002e74:	2000030c 	.word	0x2000030c
 8002e78:	20000230 	.word	0x20000230
 8002e7c:	2000022c 	.word	0x2000022c
 8002e80:	20000318 	.word	0x20000318
 8002e84:	20000314 	.word	0x20000314

08002e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <xTaskGetTickCount+0x1c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e94:	687b      	ldr	r3, [r7, #4]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000308 	.word	0x20000308

08002ea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eb2:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <xTaskIncrementTick+0x110>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d173      	bne.n	8002fa2 <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002eba:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <xTaskIncrementTick+0x114>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ec2:	4a3e      	ldr	r2, [pc, #248]	; (8002fbc <xTaskIncrementTick+0x114>)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d120      	bne.n	8002f10 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ece:	4b3c      	ldr	r3, [pc, #240]	; (8002fc0 <xTaskIncrementTick+0x118>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <xTaskIncrementTick+0x46>
        __asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	603b      	str	r3, [r7, #0]
    }
 8002eea:	bf00      	nop
 8002eec:	e7fe      	b.n	8002eec <xTaskIncrementTick+0x44>
 8002eee:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <xTaskIncrementTick+0x118>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <xTaskIncrementTick+0x11c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a31      	ldr	r2, [pc, #196]	; (8002fc0 <xTaskIncrementTick+0x118>)
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4a31      	ldr	r2, [pc, #196]	; (8002fc4 <xTaskIncrementTick+0x11c>)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <xTaskIncrementTick+0x120>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3301      	adds	r3, #1
 8002f08:	4a2f      	ldr	r2, [pc, #188]	; (8002fc8 <xTaskIncrementTick+0x120>)
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	f000 faa4 	bl	8003458 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f10:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <xTaskIncrementTick+0x124>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d348      	bcc.n	8002fac <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <xTaskIncrementTick+0x118>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d104      	bne.n	8002f2e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f24:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <xTaskIncrementTick+0x124>)
 8002f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f2a:	601a      	str	r2, [r3, #0]
                    break;
 8002f2c:	e03e      	b.n	8002fac <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f2e:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <xTaskIncrementTick+0x118>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d203      	bcs.n	8002f4e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f46:	4a21      	ldr	r2, [pc, #132]	; (8002fcc <xTaskIncrementTick+0x124>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f4c:	e02e      	b.n	8002fac <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	3304      	adds	r3, #4
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe ffaf 	bl	8001eb6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	3318      	adds	r3, #24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe ffa6 	bl	8001eb6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fbff 	bl	8006770 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	2201      	movs	r2, #1
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <xTaskIncrementTick+0x128>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <xTaskIncrementTick+0x128>)
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <xTaskIncrementTick+0x12c>)
 8002f92:	441a      	add	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	3304      	adds	r3, #4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f7fe ff2e 	bl	8001dfc <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fa0:	e7bb      	b.n	8002f1a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <xTaskIncrementTick+0x130>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <xTaskIncrementTick+0x130>)
 8002faa:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002fac:	697b      	ldr	r3, [r7, #20]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000032c 	.word	0x2000032c
 8002fbc:	20000308 	.word	0x20000308
 8002fc0:	200002bc 	.word	0x200002bc
 8002fc4:	200002c0 	.word	0x200002c0
 8002fc8:	2000031c 	.word	0x2000031c
 8002fcc:	20000324 	.word	0x20000324
 8002fd0:	2000030c 	.word	0x2000030c
 8002fd4:	20000230 	.word	0x20000230
 8002fd8:	20000314 	.word	0x20000314

08002fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fe2:	4b2f      	ldr	r3, [pc, #188]	; (80030a0 <vTaskSwitchContext+0xc4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fea:	4b2e      	ldr	r3, [pc, #184]	; (80030a4 <vTaskSwitchContext+0xc8>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002ff0:	e052      	b.n	8003098 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8002ff2:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <vTaskSwitchContext+0xc8>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <vTaskSwitchContext+0xcc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	f1c3 031f 	rsb	r3, r3, #31
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	4927      	ldr	r1, [pc, #156]	; (80030ac <vTaskSwitchContext+0xd0>)
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	607b      	str	r3, [r7, #4]
    }
 8003034:	bf00      	nop
 8003036:	e7fe      	b.n	8003036 <vTaskSwitchContext+0x5a>
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <vTaskSwitchContext+0xd0>)
 8003044:	4413      	add	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3308      	adds	r3, #8
 800305a:	429a      	cmp	r2, r3
 800305c:	d104      	bne.n	8003068 <vTaskSwitchContext+0x8c>
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <vTaskSwitchContext+0xd4>)
 8003070:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <vTaskSwitchContext+0xd4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3334      	adds	r3, #52	; 0x34
 8003078:	2205      	movs	r2, #5
 800307a:	490e      	ldr	r1, [pc, #56]	; (80030b4 <vTaskSwitchContext+0xd8>)
 800307c:	4618      	mov	r0, r3
 800307e:	f005 fdc5 	bl	8008c0c <memcmp>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <vTaskSwitchContext+0xb8>
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <vTaskSwitchContext+0xd4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f003 fb2d 	bl	80066ec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003092:	e001      	b.n	8003098 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8003094:	f003 facc 	bl	8006630 <SEGGER_SYSVIEW_OnIdle>
}
 8003098:	bf00      	nop
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	2000032c 	.word	0x2000032c
 80030a4:	20000318 	.word	0x20000318
 80030a8:	2000030c 	.word	0x2000030c
 80030ac:	20000230 	.word	0x20000230
 80030b0:	2000022c 	.word	0x2000022c
 80030b4:	0800b9c0 	.word	0x0800b9c0

080030b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	60fb      	str	r3, [r7, #12]
    }
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030de:	4b07      	ldr	r3, [pc, #28]	; (80030fc <vTaskPlaceOnEventList+0x44>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3318      	adds	r3, #24
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe feac 	bl	8001e44 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030ec:	2101      	movs	r1, #1
 80030ee:	6838      	ldr	r0, [r7, #0]
 80030f0:	f000 fa6c 	bl	80035cc <prvAddCurrentTaskToDelayedList>
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	2000022c 	.word	0x2000022c

08003100 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	617b      	str	r3, [r7, #20]
    }
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <vTaskPlaceOnEventListRestricted+0x58>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3318      	adds	r3, #24
 800312e:	4619      	mov	r1, r3
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7fe fe63 	bl	8001dfc <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003140:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003142:	2024      	movs	r0, #36	; 0x24
 8003144:	f002 fd98 	bl	8005c78 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	68b8      	ldr	r0, [r7, #8]
 800314c:	f000 fa3e 	bl	80035cc <prvAddCurrentTaskToDelayedList>
    }
 8003150:	bf00      	nop
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000022c 	.word	0x2000022c

0800315c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	60fb      	str	r3, [r7, #12]
    }
 8003184:	bf00      	nop
 8003186:	e7fe      	b.n	8003186 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	3318      	adds	r3, #24
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fe92 	bl	8001eb6 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <xTaskRemoveFromEventList+0xb4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d120      	bne.n	80031dc <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3304      	adds	r3, #4
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fe89 	bl	8001eb6 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 fae2 	bl	8006770 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	2201      	movs	r2, #1
 80031b2:	409a      	lsls	r2, r3
 80031b4:	4b17      	ldr	r3, [pc, #92]	; (8003214 <xTaskRemoveFromEventList+0xb8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	4a16      	ldr	r2, [pc, #88]	; (8003214 <xTaskRemoveFromEventList+0xb8>)
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4a13      	ldr	r2, [pc, #76]	; (8003218 <xTaskRemoveFromEventList+0xbc>)
 80031cc:	441a      	add	r2, r3
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	3304      	adds	r3, #4
 80031d2:	4619      	mov	r1, r3
 80031d4:	4610      	mov	r0, r2
 80031d6:	f7fe fe11 	bl	8001dfc <vListInsertEnd>
 80031da:	e005      	b.n	80031e8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	3318      	adds	r3, #24
 80031e0:	4619      	mov	r1, r3
 80031e2:	480e      	ldr	r0, [pc, #56]	; (800321c <xTaskRemoveFromEventList+0xc0>)
 80031e4:	f7fe fe0a 	bl	8001dfc <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <xTaskRemoveFromEventList+0xc4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d905      	bls.n	8003202 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80031f6:	2301      	movs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <xTaskRemoveFromEventList+0xc8>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e001      	b.n	8003206 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003206:	697b      	ldr	r3, [r7, #20]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	2000032c 	.word	0x2000032c
 8003214:	2000030c 	.word	0x2000030c
 8003218:	20000230 	.word	0x20000230
 800321c:	200002c4 	.word	0x200002c4
 8003220:	2000022c 	.word	0x2000022c
 8003224:	20000318 	.word	0x20000318

08003228 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <vTaskInternalSetTimeOutState+0x24>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <vTaskInternalSetTimeOutState+0x28>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	605a      	str	r2, [r3, #4]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	2000031c 	.word	0x2000031c
 8003250:	20000308 	.word	0x20000308

08003254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	613b      	str	r3, [r7, #16]
    }
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	60fb      	str	r3, [r7, #12]
    }
 8003292:	bf00      	nop
 8003294:	e7fe      	b.n	8003294 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003296:	f000 fe4f 	bl	8003f38 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800329a:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <xTaskCheckForTimeOut+0xc4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b2:	d102      	bne.n	80032ba <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	e026      	b.n	8003308 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <xTaskCheckForTimeOut+0xc8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d00a      	beq.n	80032dc <xTaskCheckForTimeOut+0x88>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d305      	bcc.n	80032dc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80032d0:	2301      	movs	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e015      	b.n	8003308 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d20b      	bcs.n	80032fe <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	1ad2      	subs	r2, r2, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ff98 	bl	8003228 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e004      	b.n	8003308 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003308:	f000 fe46 	bl	8003f98 <vPortExitCritical>

    return xReturn;
 800330c:	69fb      	ldr	r3, [r7, #28]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000308 	.word	0x20000308
 800331c:	2000031c 	.word	0x2000031c

08003320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <vTaskMissedYield+0x14>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	20000318 	.word	0x20000318

08003338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003340:	f000 f84c 	bl	80033dc <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <prvIdleTask+0x20>)
 8003346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003354:	e7f4      	b.n	8003340 <prvIdleTask+0x8>
 8003356:	bf00      	nop
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	e00c      	b.n	8003382 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4a12      	ldr	r2, [pc, #72]	; (80033bc <prvInitialiseTaskLists+0x60>)
 8003374:	4413      	add	r3, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fd13 	bl	8001da2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d9ef      	bls.n	8003368 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003388:	480d      	ldr	r0, [pc, #52]	; (80033c0 <prvInitialiseTaskLists+0x64>)
 800338a:	f7fe fd0a 	bl	8001da2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800338e:	480d      	ldr	r0, [pc, #52]	; (80033c4 <prvInitialiseTaskLists+0x68>)
 8003390:	f7fe fd07 	bl	8001da2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003394:	480c      	ldr	r0, [pc, #48]	; (80033c8 <prvInitialiseTaskLists+0x6c>)
 8003396:	f7fe fd04 	bl	8001da2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800339a:	480c      	ldr	r0, [pc, #48]	; (80033cc <prvInitialiseTaskLists+0x70>)
 800339c:	f7fe fd01 	bl	8001da2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80033a0:	480b      	ldr	r0, [pc, #44]	; (80033d0 <prvInitialiseTaskLists+0x74>)
 80033a2:	f7fe fcfe 	bl	8001da2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <prvInitialiseTaskLists+0x78>)
 80033a8:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <prvInitialiseTaskLists+0x64>)
 80033aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <prvInitialiseTaskLists+0x7c>)
 80033ae:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <prvInitialiseTaskLists+0x68>)
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000230 	.word	0x20000230
 80033c0:	20000294 	.word	0x20000294
 80033c4:	200002a8 	.word	0x200002a8
 80033c8:	200002c4 	.word	0x200002c4
 80033cc:	200002d8 	.word	0x200002d8
 80033d0:	200002f0 	.word	0x200002f0
 80033d4:	200002bc 	.word	0x200002bc
 80033d8:	200002c0 	.word	0x200002c0

080033dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e2:	e019      	b.n	8003418 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80033e4:	f000 fda8 	bl	8003f38 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e8:	4b10      	ldr	r3, [pc, #64]	; (800342c <prvCheckTasksWaitingTermination+0x50>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fd5e 	bl	8001eb6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <prvCheckTasksWaitingTermination+0x54>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3b01      	subs	r3, #1
 8003400:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <prvCheckTasksWaitingTermination+0x54>)
 8003402:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <prvCheckTasksWaitingTermination+0x58>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <prvCheckTasksWaitingTermination+0x58>)
 800340c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800340e:	f000 fdc3 	bl	8003f98 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f810 	bl	8003438 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <prvCheckTasksWaitingTermination+0x58>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e1      	bne.n	80033e4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200002d8 	.word	0x200002d8
 8003430:	20000304 	.word	0x20000304
 8003434:	200002ec 	.word	0x200002ec

08003438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	4618      	mov	r0, r3
 8003446:	f000 ff81 	bl	800434c <vPortFree>
                vPortFree( pxTCB );
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 ff7e 	bl	800434c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <prvResetNextTaskUnblockTime+0x30>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d104      	bne.n	8003470 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003466:	4b09      	ldr	r3, [pc, #36]	; (800348c <prvResetNextTaskUnblockTime+0x34>)
 8003468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800346e:	e005      	b.n	800347c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <prvResetNextTaskUnblockTime+0x30>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <prvResetNextTaskUnblockTime+0x34>)
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	200002bc 	.word	0x200002bc
 800348c:	20000324 	.word	0x20000324

08003490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003496:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <xTaskGetSchedulerState+0x34>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800349e:	2301      	movs	r3, #1
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	e008      	b.n	80034b6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <xTaskGetSchedulerState+0x38>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80034ac:	2302      	movs	r3, #2
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	e001      	b.n	80034b6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80034b6:	687b      	ldr	r3, [r7, #4]
    }
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	20000310 	.word	0x20000310
 80034c8:	2000032c 	.word	0x2000032c

080034cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d068      	beq.n	80035b4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <xTaskPriorityDisinherit+0xf4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d00a      	beq.n	8003502 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80034ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	60fb      	str	r3, [r7, #12]
    }
 80034fe:	bf00      	nop
 8003500:	e7fe      	b.n	8003500 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800350a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	60bb      	str	r3, [r7, #8]
    }
 800351c:	bf00      	nop
 800351e:	e7fe      	b.n	800351e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003524:	1e5a      	subs	r2, r3, #1
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003532:	429a      	cmp	r2, r3
 8003534:	d03e      	beq.n	80035b4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d13a      	bne.n	80035b4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	3304      	adds	r3, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fcb7 	bl	8001eb6 <uxListRemove>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	2201      	movs	r2, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43da      	mvns	r2, r3
 800355a:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <xTaskPriorityDisinherit+0xf8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4013      	ands	r3, r2
 8003560:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <xTaskPriorityDisinherit+0xf8>)
 8003562:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4619      	mov	r1, r3
 8003568:	204a      	movs	r0, #74	; 0x4a
 800356a:	f002 fba3 	bl	8005cb4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f1c3 0205 	rsb	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	2201      	movs	r2, #1
 8003588:	409a      	lsls	r2, r3
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <xTaskPriorityDisinherit+0xf8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <xTaskPriorityDisinherit+0xf8>)
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <xTaskPriorityDisinherit+0xfc>)
 80035a2:	441a      	add	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f7fe fc26 	bl	8001dfc <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80035b4:	697b      	ldr	r3, [r7, #20]
    }
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	2000022c 	.word	0x2000022c
 80035c4:	2000030c 	.word	0x2000030c
 80035c8:	20000230 	.word	0x20000230

080035cc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80035d6:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fc67 	bl	8001eb6 <uxListRemove>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80035ee:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	2201      	movs	r2, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43da      	mvns	r2, r3
 80035fc:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xdc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4013      	ands	r3, r2
 8003602:	4a29      	ldr	r2, [pc, #164]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003604:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800360c:	d110      	bne.n	8003630 <prvAddCurrentTaskToDelayedList+0x64>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003614:	4b23      	ldr	r3, [pc, #140]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	211b      	movs	r1, #27
 800361a:	4618      	mov	r0, r3
 800361c:	f003 f8ea 	bl	80067f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4820      	ldr	r0, [pc, #128]	; (80036ac <prvAddCurrentTaskToDelayedList+0xe0>)
 800362a:	f7fe fbe7 	bl	8001dfc <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800362e:	e032      	b.n	8003696 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	429a      	cmp	r2, r3
 8003646:	d20f      	bcs.n	8003668 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2104      	movs	r1, #4
 800364e:	4618      	mov	r0, r3
 8003650:	f003 f8d0 	bl	80067f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003654:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3304      	adds	r3, #4
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f7fe fbef 	bl	8001e44 <vListInsert>
}
 8003666:	e016      	b.n	8003696 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2104      	movs	r1, #4
 800366e:	4618      	mov	r0, r3
 8003670:	f003 f8c0 	bl	80067f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7fe fbdf 	bl	8001e44 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	d202      	bcs.n	8003696 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003690:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000308 	.word	0x20000308
 80036a4:	2000022c 	.word	0x2000022c
 80036a8:	2000030c 	.word	0x2000030c
 80036ac:	200002f0 	.word	0x200002f0
 80036b0:	200002c0 	.word	0x200002c0
 80036b4:	200002bc 	.word	0x200002bc
 80036b8:	20000324 	.word	0x20000324

080036bc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80036c6:	f000 fad5 	bl	8003c74 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <xTimerCreateTimerTask+0x54>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <xTimerCreateTimerTask+0x58>)
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	2302      	movs	r3, #2
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2300      	movs	r3, #0
 80036dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036e0:	490d      	ldr	r1, [pc, #52]	; (8003718 <xTimerCreateTimerTask+0x5c>)
 80036e2:	480e      	ldr	r0, [pc, #56]	; (800371c <xTimerCreateTimerTask+0x60>)
 80036e4:	f7ff f93c 	bl	8002960 <xTaskCreate>
 80036e8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	603b      	str	r3, [r7, #0]
    }
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003706:	687b      	ldr	r3, [r7, #4]
    }
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000360 	.word	0x20000360
 8003714:	20000364 	.word	0x20000364
 8003718:	0800b9c8 	.word	0x0800b9c8
 800371c:	08003855 	.word	0x08003855

08003720 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800372e:	2300      	movs	r3, #0
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	623b      	str	r3, [r7, #32]
    }
 800374a:	bf00      	nop
 800374c:	e7fe      	b.n	800374c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800374e:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <xTimerGenericCommand+0x98>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02a      	beq.n	80037ac <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b05      	cmp	r3, #5
 8003766:	dc18      	bgt.n	800379a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003768:	f7ff fe92 	bl	8003490 <xTaskGetSchedulerState>
 800376c:	4603      	mov	r3, r0
 800376e:	2b02      	cmp	r3, #2
 8003770:	d109      	bne.n	8003786 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <xTimerGenericCommand+0x98>)
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	f107 0114 	add.w	r1, r7, #20
 800377a:	2300      	movs	r3, #0
 800377c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377e:	f7fe fca7 	bl	80020d0 <xQueueGenericSend>
 8003782:	6278      	str	r0, [r7, #36]	; 0x24
 8003784:	e012      	b.n	80037ac <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <xTimerGenericCommand+0x98>)
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	f107 0114 	add.w	r1, r7, #20
 800378e:	2300      	movs	r3, #0
 8003790:	2200      	movs	r2, #0
 8003792:	f7fe fc9d 	bl	80020d0 <xQueueGenericSend>
 8003796:	6278      	str	r0, [r7, #36]	; 0x24
 8003798:	e008      	b.n	80037ac <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <xTimerGenericCommand+0x98>)
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	f107 0114 	add.w	r1, r7, #20
 80037a2:	2300      	movs	r3, #0
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	f7fe fda1 	bl	80022ec <xQueueGenericSendFromISR>
 80037aa:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80037ae:	4618      	mov	r0, r3
 80037b0:	3728      	adds	r7, #40	; 0x28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000360 	.word	0x20000360

080037bc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <prvProcessExpiredTimer+0x94>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fb6e 	bl	8001eb6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d022      	beq.n	800382e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	699a      	ldr	r2, [r3, #24]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	18d1      	adds	r1, r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	6978      	ldr	r0, [r7, #20]
 80037f6:	f000 f8d1 	bl	800399c <prvInsertTimerInActiveList>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01f      	beq.n	8003840 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003800:	2300      	movs	r3, #0
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	2300      	movs	r3, #0
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	2100      	movs	r1, #0
 800380a:	6978      	ldr	r0, [r7, #20]
 800380c:	f7ff ff88 	bl	8003720 <xTimerGenericCommand>
 8003810:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d113      	bne.n	8003840 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	60fb      	str	r3, [r7, #12]
    }
 800382a:	bf00      	nop
 800382c:	e7fe      	b.n	800382c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	b2da      	uxtb	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	4798      	blx	r3
    }
 8003848:	bf00      	nop
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000358 	.word	0x20000358

08003854 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800385c:	f107 0308 	add.w	r3, r7, #8
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f857 	bl	8003914 <prvGetNextExpireTime>
 8003866:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4619      	mov	r1, r3
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f803 	bl	8003878 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003872:	f000 f8d5 	bl	8003a20 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003876:	e7f1      	b.n	800385c <prvTimerTask+0x8>

08003878 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003882:	f7ff fa61 	bl	8002d48 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003886:	f107 0308 	add.w	r3, r7, #8
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f866 	bl	800395c <prvSampleTimeNow>
 8003890:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d130      	bne.n	80038fa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <prvProcessTimerOrBlockTask+0x3c>
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d806      	bhi.n	80038b4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80038a6:	f7ff fa5d 	bl	8002d64 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff85 	bl	80037bc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80038b2:	e024      	b.n	80038fe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <prvProcessTimerOrBlockTask+0x90>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <prvProcessTimerOrBlockTask+0x50>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <prvProcessTimerOrBlockTask+0x52>
 80038c8:	2300      	movs	r3, #0
 80038ca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <prvProcessTimerOrBlockTask+0x94>)
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	4619      	mov	r1, r3
 80038da:	f7ff f80d 	bl	80028f8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80038de:	f7ff fa41 	bl	8002d64 <xTaskResumeAll>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <prvProcessTimerOrBlockTask+0x98>)
 80038ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	f3bf 8f6f 	isb	sy
    }
 80038f8:	e001      	b.n	80038fe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80038fa:	f7ff fa33 	bl	8002d64 <xTaskResumeAll>
    }
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	2000035c 	.word	0x2000035c
 800390c:	20000360 	.word	0x20000360
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <prvGetNextExpireTime+0x44>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <prvGetNextExpireTime+0x16>
 8003926:	2201      	movs	r2, #1
 8003928:	e000      	b.n	800392c <prvGetNextExpireTime+0x18>
 800392a:	2200      	movs	r2, #0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <prvGetNextExpireTime+0x44>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	e001      	b.n	8003948 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003948:	68fb      	ldr	r3, [r7, #12]
    }
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000358 	.word	0x20000358

0800395c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003964:	f7ff fa90 	bl	8002e88 <xTaskGetTickCount>
 8003968:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <prvSampleTimeNow+0x3c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d205      	bcs.n	8003980 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003974:	f000 f91a 	bl	8003bac <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e002      	b.n	8003986 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003986:	4a04      	ldr	r2, [pc, #16]	; (8003998 <prvSampleTimeNow+0x3c>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800398c:	68fb      	ldr	r3, [r7, #12]
    }
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000368 	.word	0x20000368

0800399c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d812      	bhi.n	80039e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	1ad2      	subs	r2, r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d302      	bcc.n	80039d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80039d0:	2301      	movs	r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	e01b      	b.n	8003a0e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <prvInsertTimerInActiveList+0x7c>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7fe fa2f 	bl	8001e44 <vListInsert>
 80039e6:	e012      	b.n	8003a0e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d206      	bcs.n	80039fe <prvInsertTimerInActiveList+0x62>
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d302      	bcc.n	80039fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	e007      	b.n	8003a0e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <prvInsertTimerInActiveList+0x80>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7fe fa1b 	bl	8001e44 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003a0e:	697b      	ldr	r3, [r7, #20]
    }
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	2000035c 	.word	0x2000035c
 8003a1c:	20000358 	.word	0x20000358

08003a20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	; 0x30
 8003a24:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a26:	e0ae      	b.n	8003b86 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f2c0 80aa 	blt.w	8003b84 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fa38 	bl	8001eb6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff87 	bl	800395c <prvSampleTimeNow>
 8003a4e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b09      	cmp	r3, #9
 8003a54:	f200 8097 	bhi.w	8003b86 <prvProcessReceivedCommands+0x166>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <prvProcessReceivedCommands+0x40>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a89 	.word	0x08003a89
 8003a64:	08003a89 	.word	0x08003a89
 8003a68:	08003a89 	.word	0x08003a89
 8003a6c:	08003afd 	.word	0x08003afd
 8003a70:	08003b11 	.word	0x08003b11
 8003a74:	08003b5b 	.word	0x08003b5b
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a89 	.word	0x08003a89
 8003a80:	08003afd 	.word	0x08003afd
 8003a84:	08003b11 	.word	0x08003b11
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	18d1      	adds	r1, r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aa8:	f7ff ff78 	bl	800399c <prvInsertTimerInActiveList>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d069      	beq.n	8003b86 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05e      	beq.n	8003b86 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	441a      	add	r2, r3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ada:	f7ff fe21 	bl	8003720 <xTimerGenericCommand>
 8003ade:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d14f      	bne.n	8003b86 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	61bb      	str	r3, [r7, #24]
    }
 8003af8:	bf00      	nop
 8003afa:	e7fe      	b.n	8003afa <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003b0e:	e03a      	b.n	8003b86 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	617b      	str	r3, [r7, #20]
    }
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	18d1      	adds	r1, r2, r3
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b54:	f7ff ff22 	bl	800399c <prvInsertTimerInActiveList>
                        break;
 8003b58:	e015      	b.n	8003b86 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b6a:	f000 fbef 	bl	800434c <vPortFree>
 8003b6e:	e00a      	b.n	8003b86 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003b82:	e000      	b.n	8003b86 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003b84:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <prvProcessReceivedCommands+0x188>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f107 0108 	add.w	r1, r7, #8
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fe fc69 	bl	8002468 <xQueueReceive>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f47f af45 	bne.w	8003a28 <prvProcessReceivedCommands+0x8>
        }
    }
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	3728      	adds	r7, #40	; 0x28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000360 	.word	0x20000360

08003bac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bb2:	e048      	b.n	8003c46 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bbe:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe f972 	bl	8001eb6 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d02e      	beq.n	8003c46 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d90e      	bls.n	8003c18 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c06:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4610      	mov	r0, r2
 8003c12:	f7fe f917 	bl	8001e44 <vListInsert>
 8003c16:	e016      	b.n	8003c46 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	2100      	movs	r1, #0
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff fd7c 	bl	8003720 <xTimerGenericCommand>
 8003c28:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	603b      	str	r3, [r7, #0]
    }
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1b1      	bne.n	8003bb4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <prvSwitchTimerLists+0xc4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <prvSwitchTimerLists+0xc0>)
 8003c5c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c5e:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <prvSwitchTimerLists+0xc4>)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	6013      	str	r3, [r2, #0]
    }
 8003c64:	bf00      	nop
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000358 	.word	0x20000358
 8003c70:	2000035c 	.word	0x2000035c

08003c74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c78:	f000 f95e 	bl	8003f38 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <prvCheckForValidListAndQueue+0x54>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d11d      	bne.n	8003cc0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c84:	4811      	ldr	r0, [pc, #68]	; (8003ccc <prvCheckForValidListAndQueue+0x58>)
 8003c86:	f7fe f88c 	bl	8001da2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c8a:	4811      	ldr	r0, [pc, #68]	; (8003cd0 <prvCheckForValidListAndQueue+0x5c>)
 8003c8c:	f7fe f889 	bl	8001da2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003c90:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <prvCheckForValidListAndQueue+0x60>)
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <prvCheckForValidListAndQueue+0x58>)
 8003c94:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <prvCheckForValidListAndQueue+0x64>)
 8003c98:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <prvCheckForValidListAndQueue+0x5c>)
 8003c9a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	210c      	movs	r1, #12
 8003ca0:	200a      	movs	r0, #10
 8003ca2:	f7fe f98d 	bl	8001fc0 <xQueueGenericCreate>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <prvCheckForValidListAndQueue+0x54>)
 8003caa:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <prvCheckForValidListAndQueue+0x54>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <prvCheckForValidListAndQueue+0x54>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4908      	ldr	r1, [pc, #32]	; (8003cdc <prvCheckForValidListAndQueue+0x68>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fdea 	bl	8002894 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cc0:	f000 f96a 	bl	8003f98 <vPortExitCritical>
    }
 8003cc4:	bf00      	nop
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000360 	.word	0x20000360
 8003ccc:	20000330 	.word	0x20000330
 8003cd0:	20000344 	.word	0x20000344
 8003cd4:	20000358 	.word	0x20000358
 8003cd8:	2000035c 	.word	0x2000035c
 8003cdc:	0800b9d0 	.word	0x0800b9d0

08003ce0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3b04      	subs	r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cf8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b04      	subs	r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f023 0201 	bic.w	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3b04      	subs	r3, #4
 8003d0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d10:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <pxPortInitialiseStack+0x64>)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3b14      	subs	r3, #20
 8003d1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3b04      	subs	r3, #4
 8003d26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f06f 0202 	mvn.w	r2, #2
 8003d2e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3b20      	subs	r3, #32
 8003d34:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d36:	68fb      	ldr	r3, [r7, #12]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	08003d49 	.word	0x08003d49

08003d48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <prvTaskExitError+0x54>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d5a:	d00a      	beq.n	8003d72 <prvTaskExitError+0x2a>
        __asm volatile
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	60fb      	str	r3, [r7, #12]
    }
 8003d6e:	bf00      	nop
 8003d70:	e7fe      	b.n	8003d70 <prvTaskExitError+0x28>
        __asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	60bb      	str	r3, [r7, #8]
    }
 8003d84:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d86:	bf00      	nop
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0fc      	beq.n	8003d88 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	20000018 	.word	0x20000018

08003da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <pxCurrentTCBConst2>)
 8003da2:	6819      	ldr	r1, [r3, #0]
 8003da4:	6808      	ldr	r0, [r1, #0]
 8003da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003daa:	f380 8809 	msr	PSP, r0
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f380 8811 	msr	BASEPRI, r0
 8003dba:	4770      	bx	lr
 8003dbc:	f3af 8000 	nop.w

08003dc0 <pxCurrentTCBConst2>:
 8003dc0:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop

08003dc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003dc8:	4808      	ldr	r0, [pc, #32]	; (8003dec <prvPortStartFirstTask+0x24>)
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	6800      	ldr	r0, [r0, #0]
 8003dce:	f380 8808 	msr	MSP, r0
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8814 	msr	CONTROL, r0
 8003dda:	b662      	cpsie	i
 8003ddc:	b661      	cpsie	f
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	df00      	svc	0
 8003de8:	bf00      	nop
 8003dea:	0000      	.short	0x0000
 8003dec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop

08003df4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dfa:	4b46      	ldr	r3, [pc, #280]	; (8003f14 <xPortStartScheduler+0x120>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a46      	ldr	r2, [pc, #280]	; (8003f18 <xPortStartScheduler+0x124>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10a      	bne.n	8003e1a <xPortStartScheduler+0x26>
        __asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	613b      	str	r3, [r7, #16]
    }
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e1a:	4b3e      	ldr	r3, [pc, #248]	; (8003f14 <xPortStartScheduler+0x120>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	; (8003f1c <xPortStartScheduler+0x128>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10a      	bne.n	8003e3a <xPortStartScheduler+0x46>
        __asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60fb      	str	r3, [r7, #12]
    }
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e3a:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <xPortStartScheduler+0x12c>)
 8003e3c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	22ff      	movs	r2, #255	; 0xff
 8003e4a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <xPortStartScheduler+0x130>)
 8003e60:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <xPortStartScheduler+0x134>)
 8003e64:	2207      	movs	r2, #7
 8003e66:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e68:	e009      	b.n	8003e7e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003e6a:	4b2f      	ldr	r3, [pc, #188]	; (8003f28 <xPortStartScheduler+0x134>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	4a2d      	ldr	r2, [pc, #180]	; (8003f28 <xPortStartScheduler+0x134>)
 8003e72:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b80      	cmp	r3, #128	; 0x80
 8003e88:	d0ef      	beq.n	8003e6a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e8a:	4b27      	ldr	r3, [pc, #156]	; (8003f28 <xPortStartScheduler+0x134>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f1c3 0307 	rsb	r3, r3, #7
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d00a      	beq.n	8003eac <xPortStartScheduler+0xb8>
        __asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60bb      	str	r3, [r7, #8]
    }
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003eac:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <xPortStartScheduler+0x134>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <xPortStartScheduler+0x134>)
 8003eb4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <xPortStartScheduler+0x134>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ebe:	4a1a      	ldr	r2, [pc, #104]	; (8003f28 <xPortStartScheduler+0x134>)
 8003ec0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <xPortStartScheduler+0x138>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <xPortStartScheduler+0x138>)
 8003ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003ed6:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <xPortStartScheduler+0x138>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <xPortStartScheduler+0x138>)
 8003edc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ee0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ee2:	f000 f8e3 	bl	80040ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <xPortStartScheduler+0x13c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003eec:	f000 f902 	bl	80040f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ef0:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <xPortStartScheduler+0x140>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0f      	ldr	r2, [pc, #60]	; (8003f34 <xPortStartScheduler+0x140>)
 8003ef6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003efa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003efc:	f7ff ff64 	bl	8003dc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f00:	f7ff f86c 	bl	8002fdc <vTaskSwitchContext>
    prvTaskExitError();
 8003f04:	f7ff ff20 	bl	8003d48 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	e000ed00 	.word	0xe000ed00
 8003f18:	410fc271 	.word	0x410fc271
 8003f1c:	410fc270 	.word	0x410fc270
 8003f20:	e000e400 	.word	0xe000e400
 8003f24:	2000036c 	.word	0x2000036c
 8003f28:	20000370 	.word	0x20000370
 8003f2c:	e000ed20 	.word	0xe000ed20
 8003f30:	20000018 	.word	0x20000018
 8003f34:	e000ef34 	.word	0xe000ef34

08003f38 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	607b      	str	r3, [r7, #4]
    }
 8003f50:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <vPortEnterCritical+0x58>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3301      	adds	r3, #1
 8003f58:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <vPortEnterCritical+0x58>)
 8003f5a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <vPortEnterCritical+0x58>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d10f      	bne.n	8003f84 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <vPortEnterCritical+0x5c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <vPortEnterCritical+0x4c>
        __asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	603b      	str	r3, [r7, #0]
    }
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <vPortEnterCritical+0x4a>
    }
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	20000018 	.word	0x20000018
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <vPortExitCritical+0x50>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <vPortExitCritical+0x24>
        __asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	607b      	str	r3, [r7, #4]
    }
 8003fb8:	bf00      	nop
 8003fba:	e7fe      	b.n	8003fba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <vPortExitCritical+0x50>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <vPortExitCritical+0x50>)
 8003fc4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003fc6:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <vPortExitCritical+0x50>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <vPortExitCritical+0x42>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f383 8811 	msr	BASEPRI, r3
    }
 8003fd8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000018 	.word	0x20000018
 8003fec:	00000000 	.word	0x00000000

08003ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ff0:	f3ef 8009 	mrs	r0, PSP
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <pxCurrentTCBConst>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f01e 0f10 	tst.w	lr, #16
 8004000:	bf08      	it	eq
 8004002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400a:	6010      	str	r0, [r2, #0]
 800400c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004014:	f380 8811 	msr	BASEPRI, r0
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f7fe ffdc 	bl	8002fdc <vTaskSwitchContext>
 8004024:	f04f 0000 	mov.w	r0, #0
 8004028:	f380 8811 	msr	BASEPRI, r0
 800402c:	bc09      	pop	{r0, r3}
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	6808      	ldr	r0, [r1, #0]
 8004032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004036:	f01e 0f10 	tst.w	lr, #16
 800403a:	bf08      	it	eq
 800403c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004040:	f380 8809 	msr	PSP, r0
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	f3af 8000 	nop.w

08004050 <pxCurrentTCBConst>:
 8004050:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
        __asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	607b      	str	r3, [r7, #4]
    }
 8004070:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004072:	f002 fa63 	bl	800653c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004076:	f7fe ff17 	bl	8002ea8 <xTaskIncrementTick>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004080:	f002 faba 	bl	80065f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <SysTick_Handler+0x50>)
 8004086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e001      	b.n	8004092 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800408e:	f002 fa97 	bl	80065c0 <SEGGER_SYSVIEW_RecordExitISR>
 8004092:	2300      	movs	r3, #0
 8004094:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	f383 8811 	msr	BASEPRI, r3
    }
 800409c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <vPortSetupTimerInterrupt+0x34>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040b6:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <vPortSetupTimerInterrupt+0x38>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <vPortSetupTimerInterrupt+0x3c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <vPortSetupTimerInterrupt+0x40>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	4a09      	ldr	r2, [pc, #36]	; (80040f0 <vPortSetupTimerInterrupt+0x44>)
 80040ca:	3b01      	subs	r3, #1
 80040cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040ce:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <vPortSetupTimerInterrupt+0x34>)
 80040d0:	2207      	movs	r2, #7
 80040d2:	601a      	str	r2, [r3, #0]
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	e000e010 	.word	0xe000e010
 80040e4:	e000e018 	.word	0xe000e018
 80040e8:	20000034 	.word	0x20000034
 80040ec:	10624dd3 	.word	0x10624dd3
 80040f0:	e000e014 	.word	0xe000e014

080040f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80040f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004104 <vPortEnableVFP+0x10>
 80040f8:	6801      	ldr	r1, [r0, #0]
 80040fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040fe:	6001      	str	r1, [r0, #0]
 8004100:	4770      	bx	lr
 8004102:	0000      	.short	0x0000
 8004104:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop

0800410c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004112:	f3ef 8305 	mrs	r3, IPSR
 8004116:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b0f      	cmp	r3, #15
 800411c:	d914      	bls.n	8004148 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <vPortValidateInterruptPriority+0x70>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <vPortValidateInterruptPriority+0x74>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	7afa      	ldrb	r2, [r7, #11]
 800412e:	429a      	cmp	r2, r3
 8004130:	d20a      	bcs.n	8004148 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	607b      	str	r3, [r7, #4]
    }
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004148:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <vPortValidateInterruptPriority+0x78>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004150:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <vPortValidateInterruptPriority+0x7c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d90a      	bls.n	800416e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	603b      	str	r3, [r7, #0]
    }
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <vPortValidateInterruptPriority+0x60>
    }
 800416e:	bf00      	nop
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	e000e3f0 	.word	0xe000e3f0
 8004180:	2000036c 	.word	0x2000036c
 8004184:	e000ed0c 	.word	0xe000ed0c
 8004188:	20000370 	.word	0x20000370

0800418c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004198:	f7fe fdd6 	bl	8002d48 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800419c:	4b65      	ldr	r3, [pc, #404]	; (8004334 <pvPortMalloc+0x1a8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80041a4:	f000 f934 	bl	8004410 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041a8:	4b63      	ldr	r3, [pc, #396]	; (8004338 <pvPortMalloc+0x1ac>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 80a7 	bne.w	8004304 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02d      	beq.n	8004218 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80041bc:	2208      	movs	r2, #8
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d227      	bcs.n	8004218 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80041c8:	2208      	movs	r2, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d021      	beq.n	800421e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f023 0307 	bic.w	r3, r3, #7
 80041e0:	3308      	adds	r3, #8
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d214      	bcs.n	8004212 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f023 0307 	bic.w	r3, r3, #7
 80041ee:	3308      	adds	r3, #8
 80041f0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d010      	beq.n	800421e <pvPortMalloc+0x92>
        __asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	617b      	str	r3, [r7, #20]
    }
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004216:	e002      	b.n	800421e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	e000      	b.n	8004220 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800421e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d06e      	beq.n	8004304 <pvPortMalloc+0x178>
 8004226:	4b45      	ldr	r3, [pc, #276]	; (800433c <pvPortMalloc+0x1b0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d869      	bhi.n	8004304 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004230:	4b43      	ldr	r3, [pc, #268]	; (8004340 <pvPortMalloc+0x1b4>)
 8004232:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004234:	4b42      	ldr	r3, [pc, #264]	; (8004340 <pvPortMalloc+0x1b4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800423a:	e004      	b.n	8004246 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d903      	bls.n	8004258 <pvPortMalloc+0xcc>
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f1      	bne.n	800423c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004258:	4b36      	ldr	r3, [pc, #216]	; (8004334 <pvPortMalloc+0x1a8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425e:	429a      	cmp	r2, r3
 8004260:	d050      	beq.n	8004304 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2208      	movs	r2, #8
 8004268:	4413      	add	r3, r2
 800426a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	1ad2      	subs	r2, r2, r3
 800427c:	2308      	movs	r3, #8
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	429a      	cmp	r2, r3
 8004282:	d91f      	bls.n	80042c4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <pvPortMalloc+0x120>
        __asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	613b      	str	r3, [r7, #16]
    }
 80042a8:	bf00      	nop
 80042aa:	e7fe      	b.n	80042aa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	1ad2      	subs	r2, r2, r3
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042be:	69b8      	ldr	r0, [r7, #24]
 80042c0:	f000 f908 	bl	80044d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042c4:	4b1d      	ldr	r3, [pc, #116]	; (800433c <pvPortMalloc+0x1b0>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	4a1b      	ldr	r2, [pc, #108]	; (800433c <pvPortMalloc+0x1b0>)
 80042d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042d2:	4b1a      	ldr	r3, [pc, #104]	; (800433c <pvPortMalloc+0x1b0>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <pvPortMalloc+0x1b8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d203      	bcs.n	80042e6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042de:	4b17      	ldr	r3, [pc, #92]	; (800433c <pvPortMalloc+0x1b0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a18      	ldr	r2, [pc, #96]	; (8004344 <pvPortMalloc+0x1b8>)
 80042e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <pvPortMalloc+0x1ac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80042fa:	4b13      	ldr	r3, [pc, #76]	; (8004348 <pvPortMalloc+0x1bc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3301      	adds	r3, #1
 8004300:	4a11      	ldr	r2, [pc, #68]	; (8004348 <pvPortMalloc+0x1bc>)
 8004302:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004304:	f7fe fd2e 	bl	8002d64 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <pvPortMalloc+0x19c>
        __asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60fb      	str	r3, [r7, #12]
    }
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <pvPortMalloc+0x19a>
    return pvReturn;
 8004328:	69fb      	ldr	r3, [r7, #28]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3728      	adds	r7, #40	; 0x28
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20012f7c 	.word	0x20012f7c
 8004338:	20012f90 	.word	0x20012f90
 800433c:	20012f80 	.word	0x20012f80
 8004340:	20012f74 	.word	0x20012f74
 8004344:	20012f84 	.word	0x20012f84
 8004348:	20012f88 	.word	0x20012f88

0800434c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d04d      	beq.n	80043fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800435e:	2308      	movs	r3, #8
 8004360:	425b      	negs	r3, r3
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4413      	add	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	4b24      	ldr	r3, [pc, #144]	; (8004404 <vPortFree+0xb8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <vPortFree+0x44>
        __asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	60fb      	str	r3, [r7, #12]
    }
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <vPortFree+0x62>
        __asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	60bb      	str	r3, [r7, #8]
    }
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	4b14      	ldr	r3, [pc, #80]	; (8004404 <vPortFree+0xb8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01e      	beq.n	80043fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11a      	bne.n	80043fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <vPortFree+0xb8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	401a      	ands	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80043d4:	f7fe fcb8 	bl	8002d48 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <vPortFree+0xbc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4413      	add	r3, r2
 80043e2:	4a09      	ldr	r2, [pc, #36]	; (8004408 <vPortFree+0xbc>)
 80043e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043e6:	6938      	ldr	r0, [r7, #16]
 80043e8:	f000 f874 	bl	80044d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80043ec:	4b07      	ldr	r3, [pc, #28]	; (800440c <vPortFree+0xc0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	4a06      	ldr	r2, [pc, #24]	; (800440c <vPortFree+0xc0>)
 80043f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80043f6:	f7fe fcb5 	bl	8002d64 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20012f90 	.word	0x20012f90
 8004408:	20012f80 	.word	0x20012f80
 800440c:	20012f8c 	.word	0x20012f8c

08004410 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004416:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800441a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800441c:	4b27      	ldr	r3, [pc, #156]	; (80044bc <prvHeapInit+0xac>)
 800441e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00c      	beq.n	8004444 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3307      	adds	r3, #7
 800442e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0307 	bic.w	r3, r3, #7
 8004436:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <prvHeapInit+0xac>)
 8004440:	4413      	add	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004448:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <prvHeapInit+0xb0>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800444e:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <prvHeapInit+0xb0>)
 8004450:	2200      	movs	r2, #0
 8004452:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	4413      	add	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800445c:	2208      	movs	r2, #8
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0307 	bic.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <prvHeapInit+0xb4>)
 8004470:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004472:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <prvHeapInit+0xb4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800447a:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <prvHeapInit+0xb4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <prvHeapInit+0xb4>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <prvHeapInit+0xb8>)
 800449e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4a09      	ldr	r2, [pc, #36]	; (80044cc <prvHeapInit+0xbc>)
 80044a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <prvHeapInit+0xc0>)
 80044aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044ae:	601a      	str	r2, [r3, #0]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	20000374 	.word	0x20000374
 80044c0:	20012f74 	.word	0x20012f74
 80044c4:	20012f7c 	.word	0x20012f7c
 80044c8:	20012f84 	.word	0x20012f84
 80044cc:	20012f80 	.word	0x20012f80
 80044d0:	20012f90 	.word	0x20012f90

080044d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044dc:	4b28      	ldr	r3, [pc, #160]	; (8004580 <prvInsertBlockIntoFreeList+0xac>)
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	e002      	b.n	80044e8 <prvInsertBlockIntoFreeList+0x14>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d8f7      	bhi.n	80044e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4413      	add	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d108      	bne.n	8004516 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	441a      	add	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	441a      	add	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d118      	bne.n	800455c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b15      	ldr	r3, [pc, #84]	; (8004584 <prvInsertBlockIntoFreeList+0xb0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d00d      	beq.n	8004552 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	441a      	add	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e008      	b.n	8004564 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <prvInsertBlockIntoFreeList+0xb0>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e003      	b.n	8004564 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	429a      	cmp	r2, r3
 800456a:	d002      	beq.n	8004572 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20012f74 	.word	0x20012f74
 8004584:	20012f7c 	.word	0x20012f7c

08004588 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d161      	bne.n	800465e <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a33      	ldr	r2, [pc, #204]	; (800466c <GPIO_PeriClockControl+0xe4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d106      	bne.n	80045b0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80045a2:	4b33      	ldr	r3, [pc, #204]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	4a32      	ldr	r2, [pc, #200]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 80045ae:	e056      	b.n	800465e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a30      	ldr	r2, [pc, #192]	; (8004674 <GPIO_PeriClockControl+0xec>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d106      	bne.n	80045c6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4a2c      	ldr	r2, [pc, #176]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 80045be:	f043 0302 	orr.w	r3, r3, #2
 80045c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80045c4:	e04b      	b.n	800465e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2b      	ldr	r2, [pc, #172]	; (8004678 <GPIO_PeriClockControl+0xf0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d106      	bne.n	80045dc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80045ce:	4b28      	ldr	r3, [pc, #160]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a27      	ldr	r2, [pc, #156]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 80045d4:	f043 0304 	orr.w	r3, r3, #4
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80045da:	e040      	b.n	800465e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a27      	ldr	r2, [pc, #156]	; (800467c <GPIO_PeriClockControl+0xf4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d106      	bne.n	80045f2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80045e4:	4b22      	ldr	r3, [pc, #136]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	4a21      	ldr	r2, [pc, #132]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 80045ea:	f043 0308 	orr.w	r3, r3, #8
 80045ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80045f0:	e035      	b.n	800465e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a22      	ldr	r2, [pc, #136]	; (8004680 <GPIO_PeriClockControl+0xf8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d106      	bne.n	8004608 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80045fa:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 8004600:	f043 0310 	orr.w	r3, r3, #16
 8004604:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004606:	e02a      	b.n	800465e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <GPIO_PeriClockControl+0xfc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d106      	bne.n	800461e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	4a16      	ldr	r2, [pc, #88]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 8004616:	f043 0320 	orr.w	r3, r3, #32
 800461a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800461c:	e01f      	b.n	800465e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a19      	ldr	r2, [pc, #100]	; (8004688 <GPIO_PeriClockControl+0x100>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d106      	bne.n	8004634 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	4a11      	ldr	r2, [pc, #68]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 800462c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004630:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004632:	e014      	b.n	800465e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a15      	ldr	r2, [pc, #84]	; (800468c <GPIO_PeriClockControl+0x104>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d106      	bne.n	800464a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	4a0b      	ldr	r2, [pc, #44]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004648:	e009      	b.n	800465e <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a10      	ldr	r2, [pc, #64]	; (8004690 <GPIO_PeriClockControl+0x108>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d105      	bne.n	800465e <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	4a06      	ldr	r2, [pc, #24]	; (8004670 <GPIO_PeriClockControl+0xe8>)
 8004658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40020000 	.word	0x40020000
 8004670:	40023800 	.word	0x40023800
 8004674:	40020400 	.word	0x40020400
 8004678:	40020800 	.word	0x40020800
 800467c:	40020c00 	.word	0x40020c00
 8004680:	40021000 	.word	0x40021000
 8004684:	40021400 	.word	0x40021400
 8004688:	40021800 	.word	0x40021800
 800468c:	40021c00 	.word	0x40021c00
 8004690:	40022000 	.word	0x40022000

08004694 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff6e 	bl	8004588 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	795b      	ldrb	r3, [r3, #5]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d820      	bhi.n	80046f6 <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	795b      	ldrb	r3, [r3, #5]
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	791b      	ldrb	r3, [r3, #4]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	791b      	ldrb	r3, [r3, #4]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	2103      	movs	r1, #3
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	4619      	mov	r1, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	400a      	ands	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e0cb      	b.n	800488e <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	795b      	ldrb	r3, [r3, #5]
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d117      	bne.n	800472e <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80046fe:	4b4b      	ldr	r3, [pc, #300]	; (800482c <GPIO_Init+0x198>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	7912      	ldrb	r2, [r2, #4]
 8004706:	4611      	mov	r1, r2
 8004708:	2201      	movs	r2, #1
 800470a:	408a      	lsls	r2, r1
 800470c:	4611      	mov	r1, r2
 800470e:	4a47      	ldr	r2, [pc, #284]	; (800482c <GPIO_Init+0x198>)
 8004710:	430b      	orrs	r3, r1
 8004712:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004714:	4b45      	ldr	r3, [pc, #276]	; (800482c <GPIO_Init+0x198>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	7912      	ldrb	r2, [r2, #4]
 800471c:	4611      	mov	r1, r2
 800471e:	2201      	movs	r2, #1
 8004720:	408a      	lsls	r2, r1
 8004722:	43d2      	mvns	r2, r2
 8004724:	4611      	mov	r1, r2
 8004726:	4a41      	ldr	r2, [pc, #260]	; (800482c <GPIO_Init+0x198>)
 8004728:	400b      	ands	r3, r1
 800472a:	6093      	str	r3, [r2, #8]
 800472c:	e035      	b.n	800479a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	795b      	ldrb	r3, [r3, #5]
 8004732:	2b05      	cmp	r3, #5
 8004734:	d117      	bne.n	8004766 <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004736:	4b3d      	ldr	r3, [pc, #244]	; (800482c <GPIO_Init+0x198>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	7912      	ldrb	r2, [r2, #4]
 800473e:	4611      	mov	r1, r2
 8004740:	2201      	movs	r2, #1
 8004742:	408a      	lsls	r2, r1
 8004744:	4611      	mov	r1, r2
 8004746:	4a39      	ldr	r2, [pc, #228]	; (800482c <GPIO_Init+0x198>)
 8004748:	430b      	orrs	r3, r1
 800474a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800474c:	4b37      	ldr	r3, [pc, #220]	; (800482c <GPIO_Init+0x198>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	7912      	ldrb	r2, [r2, #4]
 8004754:	4611      	mov	r1, r2
 8004756:	2201      	movs	r2, #1
 8004758:	408a      	lsls	r2, r1
 800475a:	43d2      	mvns	r2, r2
 800475c:	4611      	mov	r1, r2
 800475e:	4a33      	ldr	r2, [pc, #204]	; (800482c <GPIO_Init+0x198>)
 8004760:	400b      	ands	r3, r1
 8004762:	60d3      	str	r3, [r2, #12]
 8004764:	e019      	b.n	800479a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	795b      	ldrb	r3, [r3, #5]
 800476a:	2b06      	cmp	r3, #6
 800476c:	d115      	bne.n	800479a <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800476e:	4b2f      	ldr	r3, [pc, #188]	; (800482c <GPIO_Init+0x198>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	7912      	ldrb	r2, [r2, #4]
 8004776:	4611      	mov	r1, r2
 8004778:	2201      	movs	r2, #1
 800477a:	408a      	lsls	r2, r1
 800477c:	4611      	mov	r1, r2
 800477e:	4a2b      	ldr	r2, [pc, #172]	; (800482c <GPIO_Init+0x198>)
 8004780:	430b      	orrs	r3, r1
 8004782:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004784:	4b29      	ldr	r3, [pc, #164]	; (800482c <GPIO_Init+0x198>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	7912      	ldrb	r2, [r2, #4]
 800478c:	4611      	mov	r1, r2
 800478e:	2201      	movs	r2, #1
 8004790:	408a      	lsls	r2, r1
 8004792:	4611      	mov	r1, r2
 8004794:	4a25      	ldr	r2, [pc, #148]	; (800482c <GPIO_Init+0x198>)
 8004796:	430b      	orrs	r3, r1
 8004798:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	791b      	ldrb	r3, [r3, #4]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	791b      	ldrb	r3, [r3, #4]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <GPIO_Init+0x19c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d04e      	beq.n	8004854 <GPIO_Init+0x1c0>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <GPIO_Init+0x1a0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d032      	beq.n	8004826 <GPIO_Init+0x192>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <GPIO_Init+0x1a4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d02b      	beq.n	8004822 <GPIO_Init+0x18e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1b      	ldr	r2, [pc, #108]	; (800483c <GPIO_Init+0x1a8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d024      	beq.n	800481e <GPIO_Init+0x18a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a19      	ldr	r2, [pc, #100]	; (8004840 <GPIO_Init+0x1ac>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01d      	beq.n	800481a <GPIO_Init+0x186>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a18      	ldr	r2, [pc, #96]	; (8004844 <GPIO_Init+0x1b0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d016      	beq.n	8004816 <GPIO_Init+0x182>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a16      	ldr	r2, [pc, #88]	; (8004848 <GPIO_Init+0x1b4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00f      	beq.n	8004812 <GPIO_Init+0x17e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a15      	ldr	r2, [pc, #84]	; (800484c <GPIO_Init+0x1b8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d008      	beq.n	800480e <GPIO_Init+0x17a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <GPIO_Init+0x1bc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <GPIO_Init+0x176>
 8004806:	2308      	movs	r3, #8
 8004808:	e025      	b.n	8004856 <GPIO_Init+0x1c2>
 800480a:	2300      	movs	r3, #0
 800480c:	e023      	b.n	8004856 <GPIO_Init+0x1c2>
 800480e:	2307      	movs	r3, #7
 8004810:	e021      	b.n	8004856 <GPIO_Init+0x1c2>
 8004812:	2306      	movs	r3, #6
 8004814:	e01f      	b.n	8004856 <GPIO_Init+0x1c2>
 8004816:	2305      	movs	r3, #5
 8004818:	e01d      	b.n	8004856 <GPIO_Init+0x1c2>
 800481a:	2304      	movs	r3, #4
 800481c:	e01b      	b.n	8004856 <GPIO_Init+0x1c2>
 800481e:	2303      	movs	r3, #3
 8004820:	e019      	b.n	8004856 <GPIO_Init+0x1c2>
 8004822:	2302      	movs	r3, #2
 8004824:	e017      	b.n	8004856 <GPIO_Init+0x1c2>
 8004826:	2301      	movs	r3, #1
 8004828:	e015      	b.n	8004856 <GPIO_Init+0x1c2>
 800482a:	bf00      	nop
 800482c:	40013c00 	.word	0x40013c00
 8004830:	40020000 	.word	0x40020000
 8004834:	40020400 	.word	0x40020400
 8004838:	40020800 	.word	0x40020800
 800483c:	40020c00 	.word	0x40020c00
 8004840:	40021000 	.word	0x40021000
 8004844:	40021400 	.word	0x40021400
 8004848:	40021800 	.word	0x40021800
 800484c:	40021c00 	.word	0x40021c00
 8004850:	40022000 	.word	0x40022000
 8004854:	2300      	movs	r3, #0
 8004856:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8004858:	4b59      	ldr	r3, [pc, #356]	; (80049c0 <GPIO_Init+0x32c>)
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	4a58      	ldr	r2, [pc, #352]	; (80049c0 <GPIO_Init+0x32c>)
 800485e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004862:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8004864:	7c7a      	ldrb	r2, [r7, #17]
 8004866:	7cbb      	ldrb	r3, [r7, #18]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	fa02 f103 	lsl.w	r1, r2, r3
 800486e:	4a55      	ldr	r2, [pc, #340]	; (80049c4 <GPIO_Init+0x330>)
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	3302      	adds	r3, #2
 8004874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8004878:	4b53      	ldr	r3, [pc, #332]	; (80049c8 <GPIO_Init+0x334>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	7912      	ldrb	r2, [r2, #4]
 8004880:	4611      	mov	r1, r2
 8004882:	2201      	movs	r2, #1
 8004884:	408a      	lsls	r2, r1
 8004886:	4611      	mov	r1, r2
 8004888:	4a4f      	ldr	r2, [pc, #316]	; (80049c8 <GPIO_Init+0x334>)
 800488a:	430b      	orrs	r3, r1
 800488c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	799b      	ldrb	r3, [r3, #6]
 8004892:	461a      	mov	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	791b      	ldrb	r3, [r3, #4]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	791b      	ldrb	r3, [r3, #4]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	2103      	movs	r1, #3
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	4619      	mov	r1, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	400a      	ands	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6899      	ldr	r1, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	79db      	ldrb	r3, [r3, #7]
 80048d2:	461a      	mov	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	791b      	ldrb	r3, [r3, #4]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	791b      	ldrb	r3, [r3, #4]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	2103      	movs	r1, #3
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	4619      	mov	r1, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	400a      	ands	r2, r1
 80048fc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68d9      	ldr	r1, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	430a      	orrs	r2, r1
 800490c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	7a1b      	ldrb	r3, [r3, #8]
 8004912:	461a      	mov	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	791b      	ldrb	r3, [r3, #4]
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	791b      	ldrb	r3, [r3, #4]
 8004928:	4619      	mov	r1, r3
 800492a:	2301      	movs	r3, #1
 800492c:	408b      	lsls	r3, r1
 800492e:	43db      	mvns	r3, r3
 8004930:	4619      	mov	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	400a      	ands	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	795b      	ldrb	r3, [r3, #5]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d131      	bne.n	80049b6 <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	791b      	ldrb	r3, [r3, #4]
 8004956:	08db      	lsrs	r3, r3, #3
 8004958:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	791b      	ldrb	r3, [r3, #4]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	7c3a      	ldrb	r2, [r7, #16]
 800496a:	3208      	adds	r2, #8
 800496c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	220f      	movs	r2, #15
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	4618      	mov	r0, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	7c3a      	ldrb	r2, [r7, #16]
 8004984:	4001      	ands	r1, r0
 8004986:	3208      	adds	r2, #8
 8004988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	7c3a      	ldrb	r2, [r7, #16]
 8004992:	3208      	adds	r2, #8
 8004994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7a5b      	ldrb	r3, [r3, #9]
 800499c:	461a      	mov	r2, r3
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	4618      	mov	r0, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	7c3a      	ldrb	r2, [r7, #16]
 80049ae:	4301      	orrs	r1, r0
 80049b0:	3208      	adds	r2, #8
 80049b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80049b6:	bf00      	nop
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40013800 	.word	0x40013800
 80049c8:	40013c00 	.word	0x40013c00

080049cc <GPIO_ReadFromInputPin>:
 *
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]

   return value;
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
 8004a04:	4613      	mov	r3, r2
 8004a06:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8004a08:	78bb      	ldrb	r3, [r7, #2]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d109      	bne.n	8004a22 <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	2101      	movs	r1, #1
 8004a16:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 8004a20:	e009      	b.n	8004a36 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	2101      	movs	r1, #1
 8004a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2e:	43d2      	mvns	r2, r2
 8004a30:	401a      	ands	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	615a      	str	r2, [r3, #20]
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <GPIO_IRQInterruptConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi) {
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	460a      	mov	r2, r1
 8004a4e:	71fb      	strb	r3, [r7, #7]
 8004a50:	4613      	mov	r3, r2
 8004a52:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE) {
 8004a54:	79bb      	ldrb	r3, [r7, #6]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d133      	bne.n	8004ac2 <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31)
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	2b1f      	cmp	r3, #31
 8004a5e:	d80a      	bhi.n	8004a76 <GPIO_IRQInterruptConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8004a60:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <GPIO_IRQInterruptConfig+0xf4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	79fa      	ldrb	r2, [r7, #7]
 8004a66:	2101      	movs	r1, #1
 8004a68:	fa01 f202 	lsl.w	r2, r1, r2
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4a32      	ldr	r2, [pc, #200]	; (8004b38 <GPIO_IRQInterruptConfig+0xf4>)
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6013      	str	r3, [r2, #0]

		else if(IRQNumber >= 64 && IRQNumber < 96 )
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
	}
}
 8004a74:	e059      	b.n	8004b2a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	2b1f      	cmp	r3, #31
 8004a7a:	d90f      	bls.n	8004a9c <GPIO_IRQInterruptConfig+0x58>
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	2b3f      	cmp	r3, #63	; 0x3f
 8004a80:	d80c      	bhi.n	8004a9c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8004a82:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <GPIO_IRQInterruptConfig+0xf8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	79fa      	ldrb	r2, [r7, #7]
 8004a88:	f002 021f 	and.w	r2, r2, #31
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a92:	4611      	mov	r1, r2
 8004a94:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <GPIO_IRQInterruptConfig+0xf8>)
 8004a96:	430b      	orrs	r3, r1
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e046      	b.n	8004b2a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	2b3f      	cmp	r3, #63	; 0x3f
 8004aa0:	d943      	bls.n	8004b2a <GPIO_IRQInterruptConfig+0xe6>
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	2b5f      	cmp	r3, #95	; 0x5f
 8004aa6:	d840      	bhi.n	8004b2a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <GPIO_IRQInterruptConfig+0xfc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	79fa      	ldrb	r2, [r7, #7]
 8004aae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <GPIO_IRQInterruptConfig+0xfc>)
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6013      	str	r3, [r2, #0]
}
 8004ac0:	e033      	b.n	8004b2a <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	2b1f      	cmp	r3, #31
 8004ac6:	d80a      	bhi.n	8004ade <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8004ac8:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <GPIO_IRQInterruptConfig+0x100>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	79fa      	ldrb	r2, [r7, #7]
 8004ace:	2101      	movs	r1, #1
 8004ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <GPIO_IRQInterruptConfig+0x100>)
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	e025      	b.n	8004b2a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 )
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	2b1f      	cmp	r3, #31
 8004ae2:	d90f      	bls.n	8004b04 <GPIO_IRQInterruptConfig+0xc0>
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	2b3f      	cmp	r3, #63	; 0x3f
 8004ae8:	d80c      	bhi.n	8004b04 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8004aea:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <GPIO_IRQInterruptConfig+0x104>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	79fa      	ldrb	r2, [r7, #7]
 8004af0:	f002 021f 	and.w	r2, r2, #31
 8004af4:	2101      	movs	r1, #1
 8004af6:	fa01 f202 	lsl.w	r2, r1, r2
 8004afa:	4611      	mov	r1, r2
 8004afc:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <GPIO_IRQInterruptConfig+0x104>)
 8004afe:	430b      	orrs	r3, r1
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e012      	b.n	8004b2a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2b3f      	cmp	r3, #63	; 0x3f
 8004b08:	d90f      	bls.n	8004b2a <GPIO_IRQInterruptConfig+0xe6>
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	2b5f      	cmp	r3, #95	; 0x5f
 8004b0e:	d80c      	bhi.n	8004b2a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8004b10:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <GPIO_IRQInterruptConfig+0x108>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	79fa      	ldrb	r2, [r7, #7]
 8004b16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b20:	4611      	mov	r1, r2
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <GPIO_IRQInterruptConfig+0x108>)
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6013      	str	r3, [r2, #0]
}
 8004b28:	e7ff      	b.n	8004b2a <GPIO_IRQInterruptConfig+0xe6>
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000e100 	.word	0xe000e100
 8004b3c:	e000e104 	.word	0xe000e104
 8004b40:	e000e108 	.word	0xe000e108
 8004b44:	e000e180 	.word	0xe000e180
 8004b48:	e000e184 	.word	0xe000e184
 8004b4c:	e000e188 	.word	0xe000e188

08004b50 <GPIO_IRQPriorityConfig>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	6039      	str	r1, [r7, #0]
 8004b5a:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	089b      	lsrs	r3, r3, #2
 8004b60:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 8004b6a:	7bbb      	ldrb	r3, [r7, #14]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	3304      	adds	r3, #4
 8004b72:	737b      	strb	r3, [r7, #13]

	*(NVIC_PR_BASE_ADDR + iprx) |=  (IRQPriority << shift_amount);
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004b7c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8004b80:	6819      	ldr	r1, [r3, #0]
 8004b82:	7b7b      	ldrb	r3, [r7, #13]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	409a      	lsls	r2, r3
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004b90:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]

}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <I2C_PeripheralControl>:


#include "stm32f407xx_i2c.h"
#include "stm32f407xx_rcc.h"

void I2C_PeripheralControl(I2C_RegDef_t *I2Cx, uint8_t EnOrDi) {
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d106      	bne.n	8004bc4 <I2C_PeripheralControl+0x20>
		I2Cx->CR1 |= (1 << I2C_CR1_PE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f043 0201 	orr.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	else
		I2Cx->CR1 &= ~(1 << 0);
}
 8004bc2:	e005      	b.n	8004bd0 <I2C_PeripheralControl+0x2c>
		I2Cx->CR1 &= ~(1 << 0);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f023 0201 	bic.w	r2, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	601a      	str	r2, [r3, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *I2Cx, uint8_t EnorDi) {
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d11f      	bne.n	8004c2e <I2C_PeriClockControl+0x52>
		if(I2Cx == I2C1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <I2C_PeriClockControl+0x60>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d106      	bne.n	8004c04 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <I2C_PeriClockControl+0x64>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <I2C_PeriClockControl+0x64>)
 8004bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c00:	6413      	str	r3, [r2, #64]	; 0x40
		else if (I2Cx == I2C3)
			I2C3_PCLK_EN();
	} else {
		//TODO
	}
}
 8004c02:	e014      	b.n	8004c2e <I2C_PeriClockControl+0x52>
		else if (I2Cx == I2C2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a0f      	ldr	r2, [pc, #60]	; (8004c44 <I2C_PeriClockControl+0x68>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d106      	bne.n	8004c1a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <I2C_PeriClockControl+0x64>)
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <I2C_PeriClockControl+0x64>)
 8004c12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c16:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004c18:	e009      	b.n	8004c2e <I2C_PeriClockControl+0x52>
		else if (I2Cx == I2C3)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <I2C_PeriClockControl+0x6c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d105      	bne.n	8004c2e <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8004c22:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <I2C_PeriClockControl+0x64>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	4a06      	ldr	r2, [pc, #24]	; (8004c40 <I2C_PeriClockControl+0x64>)
 8004c28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c2c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40005400 	.word	0x40005400
 8004c40:	40023800 	.word	0x40023800
 8004c44:	40005800 	.word	0x40005800
 8004c48:	40005c00 	.word	0x40005c00

08004c4c <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff ffbc 	bl	8004bdc <I2C_PeriClockControl>

	I2C_PeripheralControl(pI2CHandle->pI2Cx, DISABLE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ff9a 	bl	8004ba4 <I2C_PeripheralControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	7a5b      	ldrb	r3, [r3, #9]
 8004c74:	029b      	lsls	r3, r3, #10
 8004c76:	461a      	mov	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 8004c8a:	f000 f9cf 	bl	800502c <RCC_GetPCLK1Value>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4a4a      	ldr	r2, [pc, #296]	; (8004dbc <I2C_Init+0x170>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	0c9b      	lsrs	r3, r3, #18
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004ca8:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	7a1b      	ldrb	r3, [r3, #8]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cc2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a39      	ldr	r2, [pc, #228]	; (8004dc0 <I2C_Init+0x174>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d80f      	bhi.n	8004cfe <I2C_Init+0xb2>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004cde:	f000 f9a5 	bl	800502c <RCC_GetPCLK1Value>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004cf0:	897b      	ldrh	r3, [r7, #10]
 8004cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e02d      	b.n	8004d5a <I2C_Init+0x10e>
	} else {
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d04:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	7a9b      	ldrb	r3, [r3, #10]
 8004d0a:	039b      	lsls	r3, r3, #14
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	7a9b      	ldrb	r3, [r3, #10]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10b      	bne.n	8004d34 <I2C_Init+0xe8>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004d1c:	f000 f986 	bl	800502c <RCC_GetPCLK1Value>
 8004d20:	4601      	mov	r1, r0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d30:	817b      	strh	r3, [r7, #10]
 8004d32:	e00c      	b.n	8004d4e <I2C_Init+0x102>
		else
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004d34:	f000 f97a 	bl	800502c <RCC_GetPCLK1Value>
 8004d38:	4601      	mov	r1, r0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009a      	lsls	r2, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d4c:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004d4e:	897b      	ldrh	r3, [r7, #10]
 8004d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4a16      	ldr	r2, [pc, #88]	; (8004dc0 <I2C_Init+0x174>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d809      	bhi.n	8004d80 <I2C_Init+0x134>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8004d6c:	f000 f95e 	bl	800502c <RCC_GetPCLK1Value>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <I2C_Init+0x170>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	0c9b      	lsrs	r3, r3, #18
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e00d      	b.n	8004d9c <I2C_Init+0x150>
	else
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8004d80:	f000 f954 	bl	800502c <RCC_GetPCLK1Value>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	0a5b      	lsrs	r3, r3, #9
 8004d90:	4a0c      	ldr	r2, [pc, #48]	; (8004dc4 <I2C_Init+0x178>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	09db      	lsrs	r3, r3, #7
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004da6:	621a      	str	r2, [r3, #32]

	I2C_PeripheralControl(pI2CHandle->pI2Cx, ENABLE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fef8 	bl	8004ba4 <I2C_PeripheralControl>
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	431bde83 	.word	0x431bde83
 8004dc0:	000186a0 	.word	0x000186a0
 8004dc4:	00044b83 	.word	0x00044b83

08004dc8 <I2C_Read>:

uint8_t I2C_Read(I2C_RegDef_t *I2Cx, uint8_t address, uint8_t reg) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	70bb      	strb	r3, [r7, #2]
	I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8004dd8:	78f9      	ldrb	r1, [r7, #3]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2200      	movs	r2, #0
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f855 	bl	8004e8e <I2C_Start>
	I2C_WriteData(I2Cx, reg);
 8004de4:	78bb      	ldrb	r3, [r7, #2]
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f8fd 	bl	8004fe8 <I2C_WriteData>
	I2C_Stop(I2Cx);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f8a6 	bl	8004f40 <I2C_Stop>
	I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_DISABLE);
 8004df4:	78f9      	ldrb	r1, [r7, #3]
 8004df6:	2300      	movs	r3, #0
 8004df8:	2201      	movs	r2, #1
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f847 	bl	8004e8e <I2C_Start>
	return I2C_ReadNack(I2Cx);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f8c6 	bl	8004f92 <I2C_ReadNack>
 8004e06:	4603      	mov	r3, r0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <I2C_Write>:
		else
			*data++ = I2C_ReadAck(I2Cx);
	}
}

void I2C_Write(I2C_RegDef_t *I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	4608      	mov	r0, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4603      	mov	r3, r0
 8004e20:	70fb      	strb	r3, [r7, #3]
 8004e22:	460b      	mov	r3, r1
 8004e24:	70bb      	strb	r3, [r7, #2]
 8004e26:	4613      	mov	r3, r2
 8004e28:	707b      	strb	r3, [r7, #1]
	I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8004e2a:	78f9      	ldrb	r1, [r7, #3]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2200      	movs	r2, #0
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f82c 	bl	8004e8e <I2C_Start>
	I2C_WriteData(I2Cx, reg);
 8004e36:	78bb      	ldrb	r3, [r7, #2]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f8d4 	bl	8004fe8 <I2C_WriteData>
	I2C_WriteData(I2Cx, data);
 8004e40:	787b      	ldrb	r3, [r7, #1]
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f8cf 	bl	8004fe8 <I2C_WriteData>
	I2C_Stop(I2Cx);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f878 	bl	8004f40 <I2C_Stop>
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <I2C_IsDeviceConnected>:
	I2C_WriteData(I2Cx, reg);
	while(count--) I2C_WriteData(I2Cx, *data++);
	I2C_Stop(I2Cx);
}

uint8_t I2C_IsDeviceConnected(I2C_RegDef_t* I2Cx, uint8_t address) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	73fb      	strb	r3, [r7, #15]
	if(!I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) connected = 1;
 8004e68:	78f9      	ldrb	r1, [r7, #3]
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f80d 	bl	8004e8e <I2C_Start>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <I2C_IsDeviceConnected+0x26>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
	I2C_Stop(I2Cx);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f85e 	bl	8004f40 <I2C_Stop>
	return connected;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <I2C_Start>:

int16_t I2C_Start(I2C_RegDef_t* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	4608      	mov	r0, r1
 8004e98:	4611      	mov	r1, r2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	70fb      	strb	r3, [r7, #3]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70bb      	strb	r3, [r7, #2]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	707b      	strb	r3, [r7, #1]
	I2Cx->CR1 |= (1 << I2C_CR1_START);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]

	uint32_t timeout = I2C_TIMEOUT;
 8004eb4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004eb8:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_SB)))
 8004eba:	e007      	b.n	8004ecc <I2C_Start+0x3e>
		if(--timeout == 0) return 1;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <I2C_Start+0x3e>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e033      	b.n	8004f34 <I2C_Start+0xa6>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_SB)))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f1      	beq.n	8004ebc <I2C_Start+0x2e>

	if(ack) I2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8004ed8:	787b      	ldrb	r3, [r7, #1]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <I2C_Start+0x5c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]

	if(direction == I2C_TRANSMITTER_MODE)
 8004eea:	78bb      	ldrb	r3, [r7, #2]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d105      	bne.n	8004efc <I2C_Start+0x6e>
		I2Cx->DR = address & ~(0x01);
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	611a      	str	r2, [r3, #16]
 8004efa:	e006      	b.n	8004f0a <I2C_Start+0x7c>
	else I2Cx->DR = address | 0x01;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	611a      	str	r2, [r3, #16]

	timeout = I2C_TIMEOUT;
 8004f0a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004f0e:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_ADDR)))
 8004f10:	e007      	b.n	8004f22 <I2C_Start+0x94>
		if(--timeout == 0) return 1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <I2C_Start+0x94>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e008      	b.n	8004f34 <I2C_Start+0xa6>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_ADDR)))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f1      	beq.n	8004f12 <I2C_Start+0x84>

	I2Cx->SR2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]

	return 0;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <I2C_Stop>:

uint8_t I2C_Stop(I2C_RegDef_t* I2Cx) {
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	uint32_t timeout = I2C_TIMEOUT;
 8004f48:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004f4c:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)) || !(I2Cx->SR1 & (1 << I2C_SR1_BTF)))
 8004f4e:	e007      	b.n	8004f60 <I2C_Stop+0x20>
		if(--timeout == 0) return 1;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <I2C_Stop+0x20>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e012      	b.n	8004f86 <I2C_Stop+0x46>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)) || !(I2Cx->SR1 & (1 << I2C_SR1_BTF)))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0f1      	beq.n	8004f50 <I2C_Stop+0x10>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0eb      	beq.n	8004f50 <I2C_Stop+0x10>

	I2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]

	return 0;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <I2C_ReadNack>:

uint8_t I2C_ReadNack(I2C_RegDef_t* I2Cx) {
 8004f92:	b480      	push	{r7}
 8004f94:	b085      	sub	sp, #20
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
	I2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]

	I2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]

	uint32_t timeout = I2C_TIMEOUT;
 8004fb2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004fb6:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_RXNE)))
 8004fb8:	e007      	b.n	8004fca <I2C_ReadNack+0x38>
		if(--timeout == 0) return 1;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <I2C_ReadNack+0x38>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e008      	b.n	8004fdc <I2C_ReadNack+0x4a>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_RXNE)))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f1      	beq.n	8004fba <I2C_ReadNack+0x28>

	return I2Cx->DR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	b2db      	uxtb	r3, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <I2C_WriteData>:
		if(--timeout == 0) return 1;

	return I2Cx->DR;
}

void I2C_WriteData(I2C_RegDef_t* I2Cx, uint8_t data) {
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
	uint32_t timeout = I2C_TIMEOUT;
 8004ff4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004ff8:	60fb      	str	r3, [r7, #12]
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)))
 8004ffa:	e005      	b.n	8005008 <I2C_WriteData+0x20>
		if(--timeout == 0) break;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d006      	beq.n	8005016 <I2C_WriteData+0x2e>
	while(!(I2Cx->SR1 & (1 << I2C_SR1_TXE)))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f3      	beq.n	8004ffc <I2C_WriteData+0x14>
 8005014:	e000      	b.n	8005018 <I2C_WriteData+0x30>
		if(--timeout == 0) break;
 8005016:	bf00      	nop
	I2Cx->DR = data;
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8005032:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <RCC_GetPCLK1Value+0x9c>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	089b      	lsrs	r3, r3, #2
 8005038:	b2db      	uxtb	r3, r3
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8005040:	7a7b      	ldrb	r3, [r7, #9]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8005046:	4b21      	ldr	r3, [pc, #132]	; (80050cc <RCC_GetPCLK1Value+0xa0>)
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e00b      	b.n	8005064 <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 1)
 800504c:	7a7b      	ldrb	r3, [r7, #9]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d102      	bne.n	8005058 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8005052:	4b1f      	ldr	r3, [pc, #124]	; (80050d0 <RCC_GetPCLK1Value+0xa4>)
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	e005      	b.n	8005064 <RCC_GetPCLK1Value+0x38>
	else if (clksrc == 2)
 8005058:	7a7b      	ldrb	r3, [r7, #9]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d102      	bne.n	8005064 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 800505e:	f000 f83d 	bl	80050dc <RCC_GetPLLOutputClock>
 8005062:	60f8      	str	r0, [r7, #12]

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8005064:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <RCC_GetPCLK1Value+0x9c>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8005072:	7a3b      	ldrb	r3, [r7, #8]
 8005074:	2b07      	cmp	r3, #7
 8005076:	d802      	bhi.n	800507e <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8005078:	2301      	movs	r3, #1
 800507a:	72fb      	strb	r3, [r7, #11]
 800507c:	e005      	b.n	800508a <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_PreScaler[temp-8];
 800507e:	7a3b      	ldrb	r3, [r7, #8]
 8005080:	3b08      	subs	r3, #8
 8005082:	4a14      	ldr	r2, [pc, #80]	; (80050d4 <RCC_GetPCLK1Value+0xa8>)
 8005084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005088:	72fb      	strb	r3, [r7, #11]

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 800508a:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <RCC_GetPCLK1Value+0x9c>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0a9b      	lsrs	r3, r3, #10
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8005098:	7a3b      	ldrb	r3, [r7, #8]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d802      	bhi.n	80050a4 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 800509e:	2301      	movs	r3, #1
 80050a0:	72bb      	strb	r3, [r7, #10]
 80050a2:	e004      	b.n	80050ae <RCC_GetPCLK1Value+0x82>
	else
		apb1p = APB1_PreScaler[temp-4];
 80050a4:	7a3b      	ldrb	r3, [r7, #8]
 80050a6:	3b04      	subs	r3, #4
 80050a8:	4a0b      	ldr	r2, [pc, #44]	; (80050d8 <RCC_GetPCLK1Value+0xac>)
 80050aa:	5cd3      	ldrb	r3, [r2, r3]
 80050ac:	72bb      	strb	r3, [r7, #10]

	pclk1 = (SystemClk / ahbp) /apb1p;
 80050ae:	7afb      	ldrb	r3, [r7, #11]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b6:	7abb      	ldrb	r3, [r7, #10]
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	607b      	str	r3, [r7, #4]

	return pclk1;
 80050be:	687b      	ldr	r3, [r7, #4]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	00f42400 	.word	0x00f42400
 80050d0:	007a1200 	.word	0x007a1200
 80050d4:	2000001c 	.word	0x2000001c
 80050d8:	2000002c 	.word	0x2000002c

080050dc <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock() {
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
	return 0;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d11f      	bne.n	800513e <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a12      	ldr	r2, [pc, #72]	; (800514c <SPI_PeriClockControl+0x60>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d106      	bne.n	8005114 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <SPI_PeriClockControl+0x64>)
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	4a11      	ldr	r2, [pc, #68]	; (8005150 <SPI_PeriClockControl+0x64>)
 800510c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005110:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8005112:	e014      	b.n	800513e <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a0f      	ldr	r2, [pc, #60]	; (8005154 <SPI_PeriClockControl+0x68>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d106      	bne.n	800512a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <SPI_PeriClockControl+0x64>)
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	4a0b      	ldr	r2, [pc, #44]	; (8005150 <SPI_PeriClockControl+0x64>)
 8005122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005126:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005128:	e009      	b.n	800513e <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <SPI_PeriClockControl+0x6c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d105      	bne.n	800513e <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8005132:	4b07      	ldr	r3, [pc, #28]	; (8005150 <SPI_PeriClockControl+0x64>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	4a06      	ldr	r2, [pc, #24]	; (8005150 <SPI_PeriClockControl+0x64>)
 8005138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40013000 	.word	0x40013000
 8005150:	40023800 	.word	0x40023800
 8005154:	40003800 	.word	0x40003800
 8005158:	40003c00 	.word	0x40003c00

0800515c <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2101      	movs	r1, #1
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff ffbe 	bl	80050ec <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	791b      	ldrb	r3, [r3, #4]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	461a      	mov	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	795b      	ldrb	r3, [r3, #5]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d104      	bne.n	8005194 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	e014      	b.n	80051be <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	795b      	ldrb	r3, [r3, #5]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d104      	bne.n	80051a6 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e00b      	b.n	80051be <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	795b      	ldrb	r3, [r3, #5]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d107      	bne.n	80051be <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051b4:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051bc:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	799b      	ldrb	r3, [r3, #6]
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	461a      	mov	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	79db      	ldrb	r3, [r3, #7]
 80051d0:	02db      	lsls	r3, r3, #11
 80051d2:	461a      	mov	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	7a1b      	ldrb	r3, [r3, #8]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	461a      	mov	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	7a5b      	ldrb	r3, [r3, #9]
 80051ec:	461a      	mov	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	7a9b      	ldrb	r3, [r3, #10]
 80051f8:	025b      	lsls	r3, r3, #9
 80051fa:	461a      	mov	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]

}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	70fb      	strb	r3, [r7, #3]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 800521e:	bf00      	nop
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f9      	beq.n	8005220 <SPI_Transfer+0xe>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f3      	bne.n	8005220 <SPI_Transfer+0xe>
	pSPIx->DR = data;
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60da      	str	r2, [r3, #12]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 800523e:	bf00      	nop
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f9      	beq.n	8005240 <SPI_Transfer+0x2e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f3      	bne.n	8005240 <SPI_Transfer+0x2e>
	return pSPIx->DR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d106      	bne.n	8005288 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8005286:	e005      	b.n	8005294 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d106      	bne.n	80052c0 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f043 0204 	orr.w	r2, r3, #4
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 80052be:	e005      	b.n	80052cc <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f023 0204 	bic.w	r2, r3, #4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	605a      	str	r2, [r3, #4]
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80052e6:	2205      	movs	r2, #5
 80052e8:	492b      	ldr	r1, [pc, #172]	; (8005398 <SYSVIEW_AddTask+0xc0>)
 80052ea:	68b8      	ldr	r0, [r7, #8]
 80052ec:	f003 fc8e 	bl	8008c0c <memcmp>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d04b      	beq.n	800538e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80052f6:	4b29      	ldr	r3, [pc, #164]	; (800539c <SYSVIEW_AddTask+0xc4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b07      	cmp	r3, #7
 80052fc:	d903      	bls.n	8005306 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80052fe:	4828      	ldr	r0, [pc, #160]	; (80053a0 <SYSVIEW_AddTask+0xc8>)
 8005300:	f001 fbc4 	bl	8006a8c <SEGGER_SYSVIEW_Warn>
    return;
 8005304:	e044      	b.n	8005390 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005306:	4b25      	ldr	r3, [pc, #148]	; (800539c <SYSVIEW_AddTask+0xc4>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4926      	ldr	r1, [pc, #152]	; (80053a4 <SYSVIEW_AddTask+0xcc>)
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800531a:	4b20      	ldr	r3, [pc, #128]	; (800539c <SYSVIEW_AddTask+0xc4>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4921      	ldr	r1, [pc, #132]	; (80053a4 <SYSVIEW_AddTask+0xcc>)
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	3304      	adds	r3, #4
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005330:	4b1a      	ldr	r3, [pc, #104]	; (800539c <SYSVIEW_AddTask+0xc4>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	491b      	ldr	r1, [pc, #108]	; (80053a4 <SYSVIEW_AddTask+0xcc>)
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	3308      	adds	r3, #8
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005346:	4b15      	ldr	r3, [pc, #84]	; (800539c <SYSVIEW_AddTask+0xc4>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4916      	ldr	r1, [pc, #88]	; (80053a4 <SYSVIEW_AddTask+0xcc>)
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	330c      	adds	r3, #12
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800535c:	4b0f      	ldr	r3, [pc, #60]	; (800539c <SYSVIEW_AddTask+0xc4>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4910      	ldr	r1, [pc, #64]	; (80053a4 <SYSVIEW_AddTask+0xcc>)
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3310      	adds	r3, #16
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <SYSVIEW_AddTask+0xc4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3301      	adds	r3, #1
 8005378:	4a08      	ldr	r2, [pc, #32]	; (800539c <SYSVIEW_AddTask+0xc4>)
 800537a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f80e 	bl	80053a8 <SYSVIEW_SendTaskInfo>
 800538c:	e000      	b.n	8005390 <SYSVIEW_AddTask+0xb8>
    return;
 800538e:	bf00      	nop

}
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	0800b9d8 	.word	0x0800b9d8
 800539c:	20013034 	.word	0x20013034
 80053a0:	0800b9e0 	.word	0x0800b9e0
 80053a4:	20012f94 	.word	0x20012f94

080053a8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80053b6:	f107 0314 	add.w	r3, r7, #20
 80053ba:	2214      	movs	r2, #20
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f003 fc40 	bl	8008c44 <memset>
  TaskInfo.TaskID     = TaskID;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80053d8:	f107 0314 	add.w	r3, r7, #20
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 ff83 	bl	80062e8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80053e2:	bf00      	nop
 80053e4:	3728      	adds	r7, #40	; 0x28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <_DoInit+0x98>)
 80053f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2203      	movs	r2, #3
 80053fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2203      	movs	r2, #3
 8005400:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a20      	ldr	r2, [pc, #128]	; (8005488 <_DoInit+0x9c>)
 8005406:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a20      	ldr	r2, [pc, #128]	; (800548c <_DoInit+0xa0>)
 800540c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005414:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <_DoInit+0x9c>)
 800542c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a17      	ldr	r2, [pc, #92]	; (8005490 <_DoInit+0xa4>)
 8005432:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2210      	movs	r2, #16
 8005438:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3307      	adds	r3, #7
 8005450:	4a10      	ldr	r2, [pc, #64]	; (8005494 <_DoInit+0xa8>)
 8005452:	6810      	ldr	r0, [r2, #0]
 8005454:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005456:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a0e      	ldr	r2, [pc, #56]	; (8005498 <_DoInit+0xac>)
 800545e:	6810      	ldr	r0, [r2, #0]
 8005460:	6018      	str	r0, [r3, #0]
 8005462:	8891      	ldrh	r1, [r2, #4]
 8005464:	7992      	ldrb	r2, [r2, #6]
 8005466:	8099      	strh	r1, [r3, #4]
 8005468:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800546a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005474:	f3bf 8f5f 	dmb	sy
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	200137c8 	.word	0x200137c8
 8005488:	0800ba30 	.word	0x0800ba30
 800548c:	20013038 	.word	0x20013038
 8005490:	20013438 	.word	0x20013438
 8005494:	0800ba3c 	.word	0x0800ba3c
 8005498:	0800ba40 	.word	0x0800ba40

0800549c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	; 0x28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80054a8:	2300      	movs	r3, #0
 80054aa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d905      	bls.n	80054cc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ca:	e007      	b.n	80054dc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	1acb      	subs	r3, r1, r3
 80054d6:	4413      	add	r3, r2
 80054d8:	3b01      	subs	r3, #1
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e6:	4293      	cmp	r3, r2
 80054e8:	bf28      	it	cs
 80054ea:	4613      	movcs	r3, r2
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80054ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	bf28      	it	cs
 80054f6:	4613      	movcs	r3, r2
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	6978      	ldr	r0, [r7, #20]
 800550a:	f003 fb8d 	bl	8008c28 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800550e:	6a3a      	ldr	r2, [r7, #32]
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	4413      	add	r3, r2
 8005514:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	4413      	add	r3, r2
 800551c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	4413      	add	r3, r2
 800552c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	429a      	cmp	r2, r3
 8005536:	d101      	bne.n	800553c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800553c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1b2      	bne.n	80054b2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800554c:	6a3b      	ldr	r3, [r7, #32]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3728      	adds	r7, #40	; 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005556:	b580      	push	{r7, lr}
 8005558:	b088      	sub	sp, #32
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	429a      	cmp	r2, r3
 8005578:	d911      	bls.n	800559e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	6938      	ldr	r0, [r7, #16]
 800558a:	f003 fb4d 	bl	8008c28 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800558e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	441a      	add	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800559c:	e01f      	b.n	80055de <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	6938      	ldr	r0, [r7, #16]
 80055b2:	f003 fb39 	bl	8008c28 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	4413      	add	r3, r2
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4619      	mov	r1, r3
 80055ce:	6938      	ldr	r0, [r7, #16]
 80055d0:	f003 fb2a 	bl	8008c28 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055d4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	60da      	str	r2, [r3, #12]
}
 80055de:	bf00      	nop
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80055e6:	b480      	push	{r7}
 80055e8:	b087      	sub	sp, #28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d808      	bhi.n	8005614 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad2      	subs	r2, r2, r3
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	3b01      	subs	r3, #1
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e004      	b.n	800561e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800561e:	697b      	ldr	r3, [r7, #20]
}
 8005620:	4618      	mov	r0, r3
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b08c      	sub	sp, #48	; 0x30
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005638:	4b3e      	ldr	r3, [pc, #248]	; (8005734 <SEGGER_RTT_ReadNoLock+0x108>)
 800563a:	623b      	str	r3, [r7, #32]
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <SEGGER_RTT_ReadNoLock+0x1e>
 8005646:	f7ff fed1 	bl	80053ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	3360      	adds	r3, #96	; 0x60
 8005656:	4a37      	ldr	r2, [pc, #220]	; (8005734 <SEGGER_RTT_ReadNoLock+0x108>)
 8005658:	4413      	add	r3, r2
 800565a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800566c:	2300      	movs	r3, #0
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	429a      	cmp	r2, r3
 8005676:	d92b      	bls.n	80056d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4293      	cmp	r3, r2
 8005688:	bf28      	it	cs
 800568a:	4613      	movcs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	4413      	add	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	6939      	ldr	r1, [r7, #16]
 800569c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800569e:	f003 fac3 	bl	8008c28 <memcpy>
    NumBytesRead += NumBytesRem;
 80056a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	4413      	add	r3, r2
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4413      	add	r3, r2
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4413      	add	r3, r2
 80056c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d101      	bne.n	80056d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80056cc:	2300      	movs	r3, #0
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4293      	cmp	r3, r2
 80056de:	bf28      	it	cs
 80056e0:	4613      	movcs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d019      	beq.n	800571e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	4413      	add	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	6939      	ldr	r1, [r7, #16]
 80056f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056fa:	f003 fa95 	bl	8008c28 <memcpy>
    NumBytesRead += NumBytesRem;
 80056fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	4413      	add	r3, r2
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	4413      	add	r3, r2
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4413      	add	r3, r2
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005728:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800572c:	4618      	mov	r0, r3
 800572e:	3730      	adds	r7, #48	; 0x30
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	200137c8 	.word	0x200137c8

08005738 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	4613      	mov	r3, r2
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	4413      	add	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4a1f      	ldr	r2, [pc, #124]	; (80057d4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005756:	4413      	add	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d029      	beq.n	80057b6 <SEGGER_RTT_WriteNoLock+0x7e>
 8005762:	2b02      	cmp	r3, #2
 8005764:	d82e      	bhi.n	80057c4 <SEGGER_RTT_WriteNoLock+0x8c>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <SEGGER_RTT_WriteNoLock+0x38>
 800576a:	2b01      	cmp	r3, #1
 800576c:	d013      	beq.n	8005796 <SEGGER_RTT_WriteNoLock+0x5e>
 800576e:	e029      	b.n	80057c4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005770:	6978      	ldr	r0, [r7, #20]
 8005772:	f7ff ff38 	bl	80055e6 <_GetAvailWriteSpace>
 8005776:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	429a      	cmp	r2, r3
 800577e:	d202      	bcs.n	8005786 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005784:	e021      	b.n	80057ca <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	69b9      	ldr	r1, [r7, #24]
 800578e:	6978      	ldr	r0, [r7, #20]
 8005790:	f7ff fee1 	bl	8005556 <_WriteNoCheck>
    break;
 8005794:	e019      	b.n	80057ca <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005796:	6978      	ldr	r0, [r7, #20]
 8005798:	f7ff ff25 	bl	80055e6 <_GetAvailWriteSpace>
 800579c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4293      	cmp	r3, r2
 80057a4:	bf28      	it	cs
 80057a6:	4613      	movcs	r3, r2
 80057a8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	69b9      	ldr	r1, [r7, #24]
 80057ae:	6978      	ldr	r0, [r7, #20]
 80057b0:	f7ff fed1 	bl	8005556 <_WriteNoCheck>
    break;
 80057b4:	e009      	b.n	80057ca <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	69b9      	ldr	r1, [r7, #24]
 80057ba:	6978      	ldr	r0, [r7, #20]
 80057bc:	f7ff fe6e 	bl	800549c <_WriteBlocking>
 80057c0:	61f8      	str	r0, [r7, #28]
    break;
 80057c2:	e002      	b.n	80057ca <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61fb      	str	r3, [r7, #28]
    break;
 80057c8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80057ca:	69fb      	ldr	r3, [r7, #28]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3720      	adds	r7, #32
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	200137c8 	.word	0x200137c8

080057d8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80057e4:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <SEGGER_RTT_Write+0x48>)
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <SEGGER_RTT_Write+0x1e>
 80057f2:	f7ff fdfb 	bl	80053ec <_DoInit>
  SEGGER_RTT_LOCK();
 80057f6:	f3ef 8311 	mrs	r3, BASEPRI
 80057fa:	f04f 0120 	mov.w	r1, #32
 80057fe:	f381 8811 	msr	BASEPRI, r1
 8005802:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff ff95 	bl	8005738 <SEGGER_RTT_WriteNoLock>
 800580e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005816:	697b      	ldr	r3, [r7, #20]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	200137c8 	.word	0x200137c8

08005824 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00f      	beq.n	800585a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800583a:	e002      	b.n	8005842 <_EncodeStr+0x1e>
      Len++;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	3301      	adds	r3, #1
 8005840:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f6      	bne.n	800583c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	429a      	cmp	r2, r3
 8005854:	d901      	bls.n	800585a <_EncodeStr+0x36>
      Len = Limit;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2bfe      	cmp	r3, #254	; 0xfe
 800585e:	d806      	bhi.n	800586e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	60fa      	str	r2, [r7, #12]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	e011      	b.n	8005892 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	60fa      	str	r2, [r7, #12]
 8005874:	22ff      	movs	r2, #255	; 0xff
 8005876:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	60fa      	str	r2, [r7, #12]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	0a19      	lsrs	r1, r3, #8
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	60fa      	str	r2, [r7, #12]
 800588e:	b2ca      	uxtb	r2, r1
 8005890:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005896:	e00a      	b.n	80058ae <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	1c53      	adds	r3, r2, #1
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1c59      	adds	r1, r3, #1
 80058a2:	60f9      	str	r1, [r7, #12]
 80058a4:	7812      	ldrb	r2, [r2, #0]
 80058a6:	701a      	strb	r2, [r3, #0]
    n++;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	3301      	adds	r3, #1
 80058ac:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d3f0      	bcc.n	8005898 <_EncodeStr+0x74>
  }
  return pPayload;
 80058b6:	68fb      	ldr	r3, [r7, #12]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058e2:	4b36      	ldr	r3, [pc, #216]	; (80059bc <_HandleIncomingPacket+0xe0>)
 80058e4:	7e1b      	ldrb	r3, [r3, #24]
 80058e6:	4618      	mov	r0, r3
 80058e8:	1cfb      	adds	r3, r7, #3
 80058ea:	2201      	movs	r2, #1
 80058ec:	4619      	mov	r1, r3
 80058ee:	f7ff fe9d 	bl	800562c <SEGGER_RTT_ReadNoLock>
 80058f2:	4603      	mov	r3, r0
 80058f4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dd54      	ble.n	80059a6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	2b80      	cmp	r3, #128	; 0x80
 8005900:	d032      	beq.n	8005968 <_HandleIncomingPacket+0x8c>
 8005902:	2b80      	cmp	r3, #128	; 0x80
 8005904:	dc42      	bgt.n	800598c <_HandleIncomingPacket+0xb0>
 8005906:	2b07      	cmp	r3, #7
 8005908:	dc16      	bgt.n	8005938 <_HandleIncomingPacket+0x5c>
 800590a:	2b00      	cmp	r3, #0
 800590c:	dd3e      	ble.n	800598c <_HandleIncomingPacket+0xb0>
 800590e:	3b01      	subs	r3, #1
 8005910:	2b06      	cmp	r3, #6
 8005912:	d83b      	bhi.n	800598c <_HandleIncomingPacket+0xb0>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <_HandleIncomingPacket+0x40>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	0800593f 	.word	0x0800593f
 8005920:	08005945 	.word	0x08005945
 8005924:	0800594b 	.word	0x0800594b
 8005928:	08005951 	.word	0x08005951
 800592c:	08005957 	.word	0x08005957
 8005930:	0800595d 	.word	0x0800595d
 8005934:	08005963 	.word	0x08005963
 8005938:	2b7f      	cmp	r3, #127	; 0x7f
 800593a:	d036      	beq.n	80059aa <_HandleIncomingPacket+0xce>
 800593c:	e026      	b.n	800598c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800593e:	f000 fb57 	bl	8005ff0 <SEGGER_SYSVIEW_Start>
      break;
 8005942:	e037      	b.n	80059b4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005944:	f000 fc10 	bl	8006168 <SEGGER_SYSVIEW_Stop>
      break;
 8005948:	e034      	b.n	80059b4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800594a:	f000 fdc5 	bl	80064d8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800594e:	e031      	b.n	80059b4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005950:	f000 fdae 	bl	80064b0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005954:	e02e      	b.n	80059b4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005956:	f000 fc2d 	bl	80061b4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800595a:	e02b      	b.n	80059b4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800595c:	f001 f858 	bl	8006a10 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005960:	e028      	b.n	80059b4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005962:	f001 f837 	bl	80069d4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005966:	e025      	b.n	80059b4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005968:	4b14      	ldr	r3, [pc, #80]	; (80059bc <_HandleIncomingPacket+0xe0>)
 800596a:	7e1b      	ldrb	r3, [r3, #24]
 800596c:	4618      	mov	r0, r3
 800596e:	1cfb      	adds	r3, r7, #3
 8005970:	2201      	movs	r2, #1
 8005972:	4619      	mov	r1, r3
 8005974:	f7ff fe5a 	bl	800562c <SEGGER_RTT_ReadNoLock>
 8005978:	4603      	mov	r3, r0
 800597a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	dd15      	ble.n	80059ae <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	4618      	mov	r0, r3
 8005986:	f000 ffa5 	bl	80068d4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800598a:	e010      	b.n	80059ae <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	b25b      	sxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	da0e      	bge.n	80059b2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <_HandleIncomingPacket+0xe0>)
 8005996:	7e1b      	ldrb	r3, [r3, #24]
 8005998:	4618      	mov	r0, r3
 800599a:	1cfb      	adds	r3, r7, #3
 800599c:	2201      	movs	r2, #1
 800599e:	4619      	mov	r1, r3
 80059a0:	f7ff fe44 	bl	800562c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80059a4:	e005      	b.n	80059b2 <_HandleIncomingPacket+0xd6>
    }
  }
 80059a6:	bf00      	nop
 80059a8:	e004      	b.n	80059b4 <_HandleIncomingPacket+0xd8>
      break;
 80059aa:	bf00      	nop
 80059ac:	e002      	b.n	80059b4 <_HandleIncomingPacket+0xd8>
      break;
 80059ae:	bf00      	nop
 80059b0:	e000      	b.n	80059b4 <_HandleIncomingPacket+0xd8>
      break;
 80059b2:	bf00      	nop
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20013448 	.word	0x20013448

080059c0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08c      	sub	sp, #48	; 0x30
 80059c4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80059c6:	2301      	movs	r3, #1
 80059c8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80059ca:	1d3b      	adds	r3, r7, #4
 80059cc:	3301      	adds	r3, #1
 80059ce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d4:	4b32      	ldr	r3, [pc, #200]	; (8005aa0 <_TrySendOverflowPacket+0xe0>)
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059da:	e00b      	b.n	80059f4 <_TrySendOverflowPacket+0x34>
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	1c59      	adds	r1, r3, #1
 80059e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	09db      	lsrs	r3, r3, #7
 80059f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	2b7f      	cmp	r3, #127	; 0x7f
 80059f8:	d8f0      	bhi.n	80059dc <_TrySendOverflowPacket+0x1c>
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a0a:	4b26      	ldr	r3, [pc, #152]	; (8005aa4 <_TrySendOverflowPacket+0xe4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a10:	4b23      	ldr	r3, [pc, #140]	; (8005aa0 <_TrySendOverflowPacket+0xe0>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	623b      	str	r3, [r7, #32]
 8005a22:	e00b      	b.n	8005a3c <_TrySendOverflowPacket+0x7c>
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	1c59      	adds	r1, r3, #1
 8005a2c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	09db      	lsrs	r3, r3, #7
 8005a3a:	623b      	str	r3, [r7, #32]
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a40:	d8f0      	bhi.n	8005a24 <_TrySendOverflowPacket+0x64>
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	627a      	str	r2, [r7, #36]	; 0x24
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005a52:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <_TrySendOverflowPacket+0xe0>)
 8005a54:	785b      	ldrb	r3, [r3, #1]
 8005a56:	4618      	mov	r0, r3
 8005a58:	1d3b      	adds	r3, r7, #4
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	f7fa fbc4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005a6c:	f001 f8c6 	bl	8006bfc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a76:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <_TrySendOverflowPacket+0xe0>)
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a7c:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <_TrySendOverflowPacket+0xe0>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <_TrySendOverflowPacket+0xe0>)
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	e004      	b.n	8005a94 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <_TrySendOverflowPacket+0xe0>)
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	4a03      	ldr	r2, [pc, #12]	; (8005aa0 <_TrySendOverflowPacket+0xe0>)
 8005a92:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005a94:	693b      	ldr	r3, [r7, #16]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3730      	adds	r7, #48	; 0x30
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20013448 	.word	0x20013448
 8005aa4:	e0001004 	.word	0xe0001004

08005aa8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005ab4:	4b6d      	ldr	r3, [pc, #436]	; (8005c6c <_SendPacket+0x1c4>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d010      	beq.n	8005ade <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005abc:	4b6b      	ldr	r3, [pc, #428]	; (8005c6c <_SendPacket+0x1c4>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80a5 	beq.w	8005c10 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005ac6:	4b69      	ldr	r3, [pc, #420]	; (8005c6c <_SendPacket+0x1c4>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d109      	bne.n	8005ae2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005ace:	f7ff ff77 	bl	80059c0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005ad2:	4b66      	ldr	r3, [pc, #408]	; (8005c6c <_SendPacket+0x1c4>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	f040 809c 	bne.w	8005c14 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005adc:	e001      	b.n	8005ae2 <_SendPacket+0x3a>
    goto Send;
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <_SendPacket+0x3c>
Send:
 8005ae2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b1f      	cmp	r3, #31
 8005ae8:	d809      	bhi.n	8005afe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005aea:	4b60      	ldr	r3, [pc, #384]	; (8005c6c <_SendPacket+0x1c4>)
 8005aec:	69da      	ldr	r2, [r3, #28]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f040 808d 	bne.w	8005c18 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b17      	cmp	r3, #23
 8005b02:	d807      	bhi.n	8005b14 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	e03d      	b.n	8005b90 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b20:	d912      	bls.n	8005b48 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	09da      	lsrs	r2, r3, #7
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	3a01      	subs	r2, #1
 8005b3a:	60fa      	str	r2, [r7, #12]
 8005b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e006      	b.n	8005b56 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b7f      	cmp	r3, #127	; 0x7f
 8005b5a:	d912      	bls.n	8005b82 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	09da      	lsrs	r2, r3, #7
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	3a01      	subs	r2, #1
 8005b74:	60fa      	str	r2, [r7, #12]
 8005b76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	e006      	b.n	8005b90 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b90:	4b37      	ldr	r3, [pc, #220]	; (8005c70 <_SendPacket+0x1c8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b96:	4b35      	ldr	r3, [pc, #212]	; (8005c6c <_SendPacket+0x1c4>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	e00b      	b.n	8005bc2 <_SendPacket+0x11a>
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	1c59      	adds	r1, r3, #1
 8005bb2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	09db      	lsrs	r3, r3, #7
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc6:	d8f0      	bhi.n	8005baa <_SendPacket+0x102>
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005bd8:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <_SendPacket+0x1c4>)
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	f7fa fb02 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005bec:	4603      	mov	r3, r0
 8005bee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005bf0:	f001 f804 	bl	8006bfc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bfa:	4a1c      	ldr	r2, [pc, #112]	; (8005c6c <_SendPacket+0x1c4>)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	60d3      	str	r3, [r2, #12]
 8005c00:	e00b      	b.n	8005c1a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005c02:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <_SendPacket+0x1c4>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <_SendPacket+0x1c4>)
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	e004      	b.n	8005c1a <_SendPacket+0x172>
    goto SendDone;
 8005c10:	bf00      	nop
 8005c12:	e002      	b.n	8005c1a <_SendPacket+0x172>
      goto SendDone;
 8005c14:	bf00      	nop
 8005c16:	e000      	b.n	8005c1a <_SendPacket+0x172>
      goto SendDone;
 8005c18:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <_SendPacket+0x1c4>)
 8005c1c:	7e1b      	ldrb	r3, [r3, #24]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4a14      	ldr	r2, [pc, #80]	; (8005c74 <_SendPacket+0x1cc>)
 8005c22:	460b      	mov	r3, r1
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	440b      	add	r3, r1
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	336c      	adds	r3, #108	; 0x6c
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <_SendPacket+0x1c4>)
 8005c32:	7e1b      	ldrb	r3, [r3, #24]
 8005c34:	4618      	mov	r0, r3
 8005c36:	490f      	ldr	r1, [pc, #60]	; (8005c74 <_SendPacket+0x1cc>)
 8005c38:	4603      	mov	r3, r0
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	4403      	add	r3, r0
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	440b      	add	r3, r1
 8005c42:	3370      	adds	r3, #112	; 0x70
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d00b      	beq.n	8005c62 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c4a:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <_SendPacket+0x1c4>)
 8005c4c:	789b      	ldrb	r3, [r3, #2]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d107      	bne.n	8005c62 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <_SendPacket+0x1c4>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c58:	f7ff fe40 	bl	80058dc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c5c:	4b03      	ldr	r3, [pc, #12]	; (8005c6c <_SendPacket+0x1c4>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005c62:	bf00      	nop
 8005c64:	3728      	adds	r7, #40	; 0x28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20013448 	.word	0x20013448
 8005c70:	e0001004 	.word	0xe0001004
 8005c74:	200137c8 	.word	0x200137c8

08005c78 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c80:	f3ef 8311 	mrs	r3, BASEPRI
 8005c84:	f04f 0120 	mov.w	r1, #32
 8005c88:	f381 8811 	msr	BASEPRI, r1
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	4808      	ldr	r0, [pc, #32]	; (8005cb0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005c90:	f7ff fe18 	bl	80058c4 <_PreparePacket>
 8005c94:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	68b8      	ldr	r0, [r7, #8]
 8005c9c:	f7ff ff04 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f383 8811 	msr	BASEPRI, r3
}
 8005ca6:	bf00      	nop
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20013478 	.word	0x20013478

08005cb4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc2:	f04f 0120 	mov.w	r1, #32
 8005cc6:	f381 8811 	msr	BASEPRI, r1
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	4816      	ldr	r0, [pc, #88]	; (8005d28 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005cce:	f7ff fdf9 	bl	80058c4 <_PreparePacket>
 8005cd2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	e00b      	b.n	8005cfa <SEGGER_SYSVIEW_RecordU32+0x46>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	1c59      	adds	r1, r3, #1
 8005cea:	61f9      	str	r1, [r7, #28]
 8005cec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	09db      	lsrs	r3, r3, #7
 8005cf8:	61bb      	str	r3, [r7, #24]
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005cfe:	d8f0      	bhi.n	8005ce2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	61fa      	str	r2, [r7, #28]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68f9      	ldr	r1, [r7, #12]
 8005d14:	6938      	ldr	r0, [r7, #16]
 8005d16:	f7ff fec7 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f383 8811 	msr	BASEPRI, r3
}
 8005d20:	bf00      	nop
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20013478 	.word	0x20013478

08005d2c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	; 0x30
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d38:	f3ef 8311 	mrs	r3, BASEPRI
 8005d3c:	f04f 0120 	mov.w	r1, #32
 8005d40:	f381 8811 	msr	BASEPRI, r1
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	4825      	ldr	r0, [pc, #148]	; (8005ddc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005d48:	f7ff fdbc 	bl	80058c4 <_PreparePacket>
 8005d4c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d5a:	e00b      	b.n	8005d74 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	1c59      	adds	r1, r3, #1
 8005d64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	09db      	lsrs	r3, r3, #7
 8005d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	2b7f      	cmp	r3, #127	; 0x7f
 8005d78:	d8f0      	bhi.n	8005d5c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	e00b      	b.n	8005dac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	1c59      	adds	r1, r3, #1
 8005d9c:	6279      	str	r1, [r7, #36]	; 0x24
 8005d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	09db      	lsrs	r3, r3, #7
 8005daa:	623b      	str	r3, [r7, #32]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2b7f      	cmp	r3, #127	; 0x7f
 8005db0:	d8f0      	bhi.n	8005d94 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	627a      	str	r2, [r7, #36]	; 0x24
 8005db8:	6a3a      	ldr	r2, [r7, #32]
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	6979      	ldr	r1, [r7, #20]
 8005dc6:	69b8      	ldr	r0, [r7, #24]
 8005dc8:	f7ff fe6e 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f383 8811 	msr	BASEPRI, r3
}
 8005dd2:	bf00      	nop
 8005dd4:	3730      	adds	r7, #48	; 0x30
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20013478 	.word	0x20013478

08005de0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08e      	sub	sp, #56	; 0x38
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dee:	f3ef 8311 	mrs	r3, BASEPRI
 8005df2:	f04f 0120 	mov.w	r1, #32
 8005df6:	f381 8811 	msr	BASEPRI, r1
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	4832      	ldr	r0, [pc, #200]	; (8005ec8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005dfe:	f7ff fd61 	bl	80058c4 <_PreparePacket>
 8005e02:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e10:	e00b      	b.n	8005e2a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e18:	1c59      	adds	r1, r3, #1
 8005e1a:	6379      	str	r1, [r7, #52]	; 0x34
 8005e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	09db      	lsrs	r3, r3, #7
 8005e28:	633b      	str	r3, [r7, #48]	; 0x30
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e2e:	d8f0      	bhi.n	8005e12 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	637a      	str	r2, [r7, #52]	; 0x34
 8005e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e48:	e00b      	b.n	8005e62 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e50:	1c59      	adds	r1, r3, #1
 8005e52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	09db      	lsrs	r3, r3, #7
 8005e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	2b7f      	cmp	r3, #127	; 0x7f
 8005e66:	d8f0      	bhi.n	8005e4a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	623b      	str	r3, [r7, #32]
 8005e80:	e00b      	b.n	8005e9a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	1c59      	adds	r1, r3, #1
 8005e8a:	6279      	str	r1, [r7, #36]	; 0x24
 8005e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	09db      	lsrs	r3, r3, #7
 8005e98:	623b      	str	r3, [r7, #32]
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9e:	d8f0      	bhi.n	8005e82 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ea6:	6a3a      	ldr	r2, [r7, #32]
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	6979      	ldr	r1, [r7, #20]
 8005eb4:	69b8      	ldr	r0, [r7, #24]
 8005eb6:	f7ff fdf7 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	f383 8811 	msr	BASEPRI, r3
}
 8005ec0:	bf00      	nop
 8005ec2:	3738      	adds	r7, #56	; 0x38
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20013478 	.word	0x20013478

08005ecc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b090      	sub	sp, #64	; 0x40
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005eda:	f3ef 8311 	mrs	r3, BASEPRI
 8005ede:	f04f 0120 	mov.w	r1, #32
 8005ee2:	f381 8811 	msr	BASEPRI, r1
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	4840      	ldr	r0, [pc, #256]	; (8005fec <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005eea:	f7ff fceb 	bl	80058c4 <_PreparePacket>
 8005eee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005efc:	e00b      	b.n	8005f16 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f04:	1c59      	adds	r1, r3, #1
 8005f06:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	09db      	lsrs	r3, r3, #7
 8005f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	2b7f      	cmp	r3, #127	; 0x7f
 8005f1a:	d8f0      	bhi.n	8005efe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30
 8005f34:	e00b      	b.n	8005f4e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	1c59      	adds	r1, r3, #1
 8005f3e:	6379      	str	r1, [r7, #52]	; 0x34
 8005f40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	09db      	lsrs	r3, r3, #7
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	2b7f      	cmp	r3, #127	; 0x7f
 8005f52:	d8f0      	bhi.n	8005f36 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	637a      	str	r2, [r7, #52]	; 0x34
 8005f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f6c:	e00b      	b.n	8005f86 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	1c59      	adds	r1, r3, #1
 8005f76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	09db      	lsrs	r3, r3, #7
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	2b7f      	cmp	r3, #127	; 0x7f
 8005f8a:	d8f0      	bhi.n	8005f6e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa2:	623b      	str	r3, [r7, #32]
 8005fa4:	e00b      	b.n	8005fbe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	1c59      	adds	r1, r3, #1
 8005fae:	6279      	str	r1, [r7, #36]	; 0x24
 8005fb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	09db      	lsrs	r3, r3, #7
 8005fbc:	623b      	str	r3, [r7, #32]
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc2:	d8f0      	bhi.n	8005fa6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8005fca:	6a3a      	ldr	r2, [r7, #32]
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	6979      	ldr	r1, [r7, #20]
 8005fd8:	69b8      	ldr	r0, [r7, #24]
 8005fda:	f7ff fd65 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	f383 8811 	msr	BASEPRI, r3
}
 8005fe4:	bf00      	nop
 8005fe6:	3740      	adds	r7, #64	; 0x40
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20013478 	.word	0x20013478

08005ff0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08c      	sub	sp, #48	; 0x30
 8005ff4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005ff6:	4b59      	ldr	r3, [pc, #356]	; (800615c <SEGGER_SYSVIEW_Start+0x16c>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005ffc:	f3ef 8311 	mrs	r3, BASEPRI
 8006000:	f04f 0120 	mov.w	r1, #32
 8006004:	f381 8811 	msr	BASEPRI, r1
 8006008:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800600a:	4b54      	ldr	r3, [pc, #336]	; (800615c <SEGGER_SYSVIEW_Start+0x16c>)
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	220a      	movs	r2, #10
 8006010:	4953      	ldr	r1, [pc, #332]	; (8006160 <SEGGER_SYSVIEW_Start+0x170>)
 8006012:	4618      	mov	r0, r3
 8006014:	f7fa f8ec 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800601e:	f000 fded 	bl	8006bfc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006022:	200a      	movs	r0, #10
 8006024:	f7ff fe28 	bl	8005c78 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006028:	f3ef 8311 	mrs	r3, BASEPRI
 800602c:	f04f 0120 	mov.w	r1, #32
 8006030:	f381 8811 	msr	BASEPRI, r1
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	484b      	ldr	r0, [pc, #300]	; (8006164 <SEGGER_SYSVIEW_Start+0x174>)
 8006038:	f7ff fc44 	bl	80058c4 <_PreparePacket>
 800603c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006046:	4b45      	ldr	r3, [pc, #276]	; (800615c <SEGGER_SYSVIEW_Start+0x16c>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	62bb      	str	r3, [r7, #40]	; 0x28
 800604c:	e00b      	b.n	8006066 <SEGGER_SYSVIEW_Start+0x76>
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	b2da      	uxtb	r2, r3
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	1c59      	adds	r1, r3, #1
 8006056:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006058:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	09db      	lsrs	r3, r3, #7
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	2b7f      	cmp	r3, #127	; 0x7f
 800606a:	d8f0      	bhi.n	800604e <SEGGER_SYSVIEW_Start+0x5e>
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
 8006080:	4b36      	ldr	r3, [pc, #216]	; (800615c <SEGGER_SYSVIEW_Start+0x16c>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	e00b      	b.n	80060a0 <SEGGER_SYSVIEW_Start+0xb0>
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	b2da      	uxtb	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	1c59      	adds	r1, r3, #1
 8006090:	6279      	str	r1, [r7, #36]	; 0x24
 8006092:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	09db      	lsrs	r3, r3, #7
 800609e:	623b      	str	r3, [r7, #32]
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	2b7f      	cmp	r3, #127	; 0x7f
 80060a4:	d8f0      	bhi.n	8006088 <SEGGER_SYSVIEW_Start+0x98>
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	627a      	str	r2, [r7, #36]	; 0x24
 80060ac:	6a3a      	ldr	r2, [r7, #32]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	61fb      	str	r3, [r7, #28]
 80060ba:	4b28      	ldr	r3, [pc, #160]	; (800615c <SEGGER_SYSVIEW_Start+0x16c>)
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	e00b      	b.n	80060da <SEGGER_SYSVIEW_Start+0xea>
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	1c59      	adds	r1, r3, #1
 80060ca:	61f9      	str	r1, [r7, #28]
 80060cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	09db      	lsrs	r3, r3, #7
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b7f      	cmp	r3, #127	; 0x7f
 80060de:	d8f0      	bhi.n	80060c2 <SEGGER_SYSVIEW_Start+0xd2>
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	61fa      	str	r2, [r7, #28]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	e00b      	b.n	8006112 <SEGGER_SYSVIEW_Start+0x122>
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	1c59      	adds	r1, r3, #1
 8006102:	6179      	str	r1, [r7, #20]
 8006104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	09db      	lsrs	r3, r3, #7
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b7f      	cmp	r3, #127	; 0x7f
 8006116:	d8f0      	bhi.n	80060fa <SEGGER_SYSVIEW_Start+0x10a>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	617a      	str	r2, [r7, #20]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006128:	2218      	movs	r2, #24
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff fcbb 	bl	8005aa8 <_SendPacket>
      RECORD_END();
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006138:	4b08      	ldr	r3, [pc, #32]	; (800615c <SEGGER_SYSVIEW_Start+0x16c>)
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <SEGGER_SYSVIEW_Start+0x16c>)
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006146:	f000 f9c7 	bl	80064d8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800614a:	f000 f9b1 	bl	80064b0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800614e:	f000 fc5f 	bl	8006a10 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006152:	bf00      	nop
 8006154:	3730      	adds	r7, #48	; 0x30
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20013448 	.word	0x20013448
 8006160:	0800bf50 	.word	0x0800bf50
 8006164:	20013478 	.word	0x20013478

08006168 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800616e:	f3ef 8311 	mrs	r3, BASEPRI
 8006172:	f04f 0120 	mov.w	r1, #32
 8006176:	f381 8811 	msr	BASEPRI, r1
 800617a:	607b      	str	r3, [r7, #4]
 800617c:	480b      	ldr	r0, [pc, #44]	; (80061ac <SEGGER_SYSVIEW_Stop+0x44>)
 800617e:	f7ff fba1 	bl	80058c4 <_PreparePacket>
 8006182:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d007      	beq.n	800619c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800618c:	220b      	movs	r2, #11
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6838      	ldr	r0, [r7, #0]
 8006192:	f7ff fc89 	bl	8005aa8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006198:	2200      	movs	r2, #0
 800619a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f383 8811 	msr	BASEPRI, r3
}
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20013478 	.word	0x20013478
 80061b0:	20013448 	.word	0x20013448

080061b4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08c      	sub	sp, #48	; 0x30
 80061b8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061ba:	f3ef 8311 	mrs	r3, BASEPRI
 80061be:	f04f 0120 	mov.w	r1, #32
 80061c2:	f381 8811 	msr	BASEPRI, r1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	4845      	ldr	r0, [pc, #276]	; (80062e0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80061ca:	f7ff fb7b 	bl	80058c4 <_PreparePacket>
 80061ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d8:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061de:	e00b      	b.n	80061f8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	1c59      	adds	r1, r3, #1
 80061e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	09db      	lsrs	r3, r3, #7
 80061f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	2b7f      	cmp	r3, #127	; 0x7f
 80061fc:	d8f0      	bhi.n	80061e0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
 8006212:	4b34      	ldr	r3, [pc, #208]	; (80062e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	623b      	str	r3, [r7, #32]
 8006218:	e00b      	b.n	8006232 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	1c59      	adds	r1, r3, #1
 8006222:	6279      	str	r1, [r7, #36]	; 0x24
 8006224:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	09db      	lsrs	r3, r3, #7
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	2b7f      	cmp	r3, #127	; 0x7f
 8006236:	d8f0      	bhi.n	800621a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	627a      	str	r2, [r7, #36]	; 0x24
 800623e:	6a3a      	ldr	r2, [r7, #32]
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	4b25      	ldr	r3, [pc, #148]	; (80062e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	e00b      	b.n	800626c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	b2da      	uxtb	r2, r3
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	1c59      	adds	r1, r3, #1
 800625c:	61f9      	str	r1, [r7, #28]
 800625e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	09db      	lsrs	r3, r3, #7
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	2b7f      	cmp	r3, #127	; 0x7f
 8006270:	d8f0      	bhi.n	8006254 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	61fa      	str	r2, [r7, #28]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	e00b      	b.n	80062a4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	1c59      	adds	r1, r3, #1
 8006294:	6179      	str	r1, [r7, #20]
 8006296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	09db      	lsrs	r3, r3, #7
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b7f      	cmp	r3, #127	; 0x7f
 80062a8:	d8f0      	bhi.n	800628c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	617a      	str	r2, [r7, #20]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80062ba:	2218      	movs	r2, #24
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	68b8      	ldr	r0, [r7, #8]
 80062c0:	f7ff fbf2 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80062d2:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	4798      	blx	r3
  }
}
 80062d8:	bf00      	nop
 80062da:	3730      	adds	r7, #48	; 0x30
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20013478 	.word	0x20013478
 80062e4:	20013448 	.word	0x20013448

080062e8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b092      	sub	sp, #72	; 0x48
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80062f0:	f3ef 8311 	mrs	r3, BASEPRI
 80062f4:	f04f 0120 	mov.w	r1, #32
 80062f8:	f381 8811 	msr	BASEPRI, r1
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	486a      	ldr	r0, [pc, #424]	; (80064a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006300:	f7ff fae0 	bl	80058c4 <_PreparePacket>
 8006304:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	647b      	str	r3, [r7, #68]	; 0x44
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b66      	ldr	r3, [pc, #408]	; (80064ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	643b      	str	r3, [r7, #64]	; 0x40
 800631a:	e00b      	b.n	8006334 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800631c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800631e:	b2da      	uxtb	r2, r3
 8006320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006322:	1c59      	adds	r1, r3, #1
 8006324:	6479      	str	r1, [r7, #68]	; 0x44
 8006326:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006330:	09db      	lsrs	r3, r3, #7
 8006332:	643b      	str	r3, [r7, #64]	; 0x40
 8006334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006336:	2b7f      	cmp	r3, #127	; 0x7f
 8006338:	d8f0      	bhi.n	800631c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800633a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	647a      	str	r2, [r7, #68]	; 0x44
 8006340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006348:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	63bb      	str	r3, [r7, #56]	; 0x38
 8006354:	e00b      	b.n	800636e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	b2da      	uxtb	r2, r3
 800635a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635c:	1c59      	adds	r1, r3, #1
 800635e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006360:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636a:	09db      	lsrs	r3, r3, #7
 800636c:	63bb      	str	r3, [r7, #56]	; 0x38
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	2b7f      	cmp	r3, #127	; 0x7f
 8006372:	d8f0      	bhi.n	8006356 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	63fa      	str	r2, [r7, #60]	; 0x3c
 800637a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006382:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	4619      	mov	r1, r3
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7ff fa49 	bl	8005824 <_EncodeStr>
 8006392:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006394:	2209      	movs	r2, #9
 8006396:	68f9      	ldr	r1, [r7, #12]
 8006398:	6938      	ldr	r0, [r7, #16]
 800639a:	f7ff fb85 	bl	8005aa8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b40      	ldr	r3, [pc, #256]	; (80064ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	633b      	str	r3, [r7, #48]	; 0x30
 80063b2:	e00b      	b.n	80063cc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ba:	1c59      	adds	r1, r3, #1
 80063bc:	6379      	str	r1, [r7, #52]	; 0x34
 80063be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c8:	09db      	lsrs	r3, r3, #7
 80063ca:	633b      	str	r3, [r7, #48]	; 0x30
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	2b7f      	cmp	r3, #127	; 0x7f
 80063d0:	d8f0      	bhi.n	80063b4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80063d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	637a      	str	r2, [r7, #52]	; 0x34
 80063d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ec:	e00b      	b.n	8006406 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	09db      	lsrs	r3, r3, #7
 8006404:	62bb      	str	r3, [r7, #40]	; 0x28
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	2b7f      	cmp	r3, #127	; 0x7f
 800640a:	d8f0      	bhi.n	80063ee <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	623b      	str	r3, [r7, #32]
 8006426:	e00b      	b.n	8006440 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	b2da      	uxtb	r2, r3
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	1c59      	adds	r1, r3, #1
 8006430:	6279      	str	r1, [r7, #36]	; 0x24
 8006432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	09db      	lsrs	r3, r3, #7
 800643e:	623b      	str	r3, [r7, #32]
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	2b7f      	cmp	r3, #127	; 0x7f
 8006444:	d8f0      	bhi.n	8006428 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	627a      	str	r2, [r7, #36]	; 0x24
 800644c:	6a3a      	ldr	r2, [r7, #32]
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	2300      	movs	r3, #0
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	e00b      	b.n	8006478 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	b2da      	uxtb	r2, r3
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	61f9      	str	r1, [r7, #28]
 800646a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	09db      	lsrs	r3, r3, #7
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b7f      	cmp	r3, #127	; 0x7f
 800647c:	d8f0      	bhi.n	8006460 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	61fa      	str	r2, [r7, #28]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800648e:	2215      	movs	r2, #21
 8006490:	68f9      	ldr	r1, [r7, #12]
 8006492:	6938      	ldr	r0, [r7, #16]
 8006494:	f7ff fb08 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f383 8811 	msr	BASEPRI, r3
}
 800649e:	bf00      	nop
 80064a0:	3748      	adds	r7, #72	; 0x48
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20013478 	.word	0x20013478
 80064ac:	20013448 	.word	0x20013448

080064b0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80064b4:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80064c6:	4b03      	ldr	r3, [pc, #12]	; (80064d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4798      	blx	r3
  }
}
 80064ce:	bf00      	nop
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20013448 	.word	0x20013448

080064d8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80064de:	4b15      	ldr	r3, [pc, #84]	; (8006534 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d01a      	beq.n	800651c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80064e6:	4b13      	ldr	r3, [pc, #76]	; (8006534 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d015      	beq.n	800651c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80064f0:	4b10      	ldr	r3, [pc, #64]	; (8006534 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4798      	blx	r3
 80064f8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80064fc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80064fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	000a      	movs	r2, r1
 800650c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800650e:	4613      	mov	r3, r2
 8006510:	461a      	mov	r2, r3
 8006512:	4621      	mov	r1, r4
 8006514:	200d      	movs	r0, #13
 8006516:	f7ff fc09 	bl	8005d2c <SEGGER_SYSVIEW_RecordU32x2>
 800651a:	e006      	b.n	800652a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800651c:	4b06      	ldr	r3, [pc, #24]	; (8006538 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4619      	mov	r1, r3
 8006522:	200c      	movs	r0, #12
 8006524:	f7ff fbc6 	bl	8005cb4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	bd90      	pop	{r4, r7, pc}
 8006532:	bf00      	nop
 8006534:	20013448 	.word	0x20013448
 8006538:	e0001004 	.word	0xe0001004

0800653c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006542:	f3ef 8311 	mrs	r3, BASEPRI
 8006546:	f04f 0120 	mov.w	r1, #32
 800654a:	f381 8811 	msr	BASEPRI, r1
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	4819      	ldr	r0, [pc, #100]	; (80065b8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006552:	f7ff f9b7 	bl	80058c4 <_PreparePacket>
 8006556:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800655c:	4b17      	ldr	r3, [pc, #92]	; (80065bc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006564:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	e00b      	b.n	8006588 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	b2da      	uxtb	r2, r3
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	6179      	str	r1, [r7, #20]
 800657a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	09db      	lsrs	r3, r3, #7
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2b7f      	cmp	r3, #127	; 0x7f
 800658c:	d8f0      	bhi.n	8006570 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	617a      	str	r2, [r7, #20]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800659e:	2202      	movs	r2, #2
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	68b8      	ldr	r0, [r7, #8]
 80065a4:	f7ff fa80 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f383 8811 	msr	BASEPRI, r3
}
 80065ae:	bf00      	nop
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20013478 	.word	0x20013478
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065c6:	f3ef 8311 	mrs	r3, BASEPRI
 80065ca:	f04f 0120 	mov.w	r1, #32
 80065ce:	f381 8811 	msr	BASEPRI, r1
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	4807      	ldr	r0, [pc, #28]	; (80065f4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80065d6:	f7ff f975 	bl	80058c4 <_PreparePacket>
 80065da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80065dc:	2203      	movs	r2, #3
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6838      	ldr	r0, [r7, #0]
 80065e2:	f7ff fa61 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f383 8811 	msr	BASEPRI, r3
}
 80065ec:	bf00      	nop
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20013478 	.word	0x20013478

080065f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006602:	f04f 0120 	mov.w	r1, #32
 8006606:	f381 8811 	msr	BASEPRI, r1
 800660a:	607b      	str	r3, [r7, #4]
 800660c:	4807      	ldr	r0, [pc, #28]	; (800662c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800660e:	f7ff f959 	bl	80058c4 <_PreparePacket>
 8006612:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006614:	2212      	movs	r2, #18
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6838      	ldr	r0, [r7, #0]
 800661a:	f7ff fa45 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f383 8811 	msr	BASEPRI, r3
}
 8006624:	bf00      	nop
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20013478 	.word	0x20013478

08006630 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006636:	f3ef 8311 	mrs	r3, BASEPRI
 800663a:	f04f 0120 	mov.w	r1, #32
 800663e:	f381 8811 	msr	BASEPRI, r1
 8006642:	607b      	str	r3, [r7, #4]
 8006644:	4807      	ldr	r0, [pc, #28]	; (8006664 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006646:	f7ff f93d 	bl	80058c4 <_PreparePacket>
 800664a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800664c:	2211      	movs	r2, #17
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6838      	ldr	r0, [r7, #0]
 8006652:	f7ff fa29 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f383 8811 	msr	BASEPRI, r3
}
 800665c:	bf00      	nop
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20013478 	.word	0x20013478

08006668 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006670:	f3ef 8311 	mrs	r3, BASEPRI
 8006674:	f04f 0120 	mov.w	r1, #32
 8006678:	f381 8811 	msr	BASEPRI, r1
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	4819      	ldr	r0, [pc, #100]	; (80066e4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006680:	f7ff f920 	bl	80058c4 <_PreparePacket>
 8006684:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800668a:	4b17      	ldr	r3, [pc, #92]	; (80066e8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	61fb      	str	r3, [r7, #28]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	e00b      	b.n	80066b6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	1c59      	adds	r1, r3, #1
 80066a6:	61f9      	str	r1, [r7, #28]
 80066a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ac:	b2d2      	uxtb	r2, r2
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	09db      	lsrs	r3, r3, #7
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b7f      	cmp	r3, #127	; 0x7f
 80066ba:	d8f0      	bhi.n	800669e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	61fa      	str	r2, [r7, #28]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80066cc:	2208      	movs	r2, #8
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	6938      	ldr	r0, [r7, #16]
 80066d2:	f7ff f9e9 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f383 8811 	msr	BASEPRI, r3
}
 80066dc:	bf00      	nop
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20013478 	.word	0x20013478
 80066e8:	20013448 	.word	0x20013448

080066ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066f4:	f3ef 8311 	mrs	r3, BASEPRI
 80066f8:	f04f 0120 	mov.w	r1, #32
 80066fc:	f381 8811 	msr	BASEPRI, r1
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	4819      	ldr	r0, [pc, #100]	; (8006768 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006704:	f7ff f8de 	bl	80058c4 <_PreparePacket>
 8006708:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800670e:	4b17      	ldr	r3, [pc, #92]	; (800676c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	e00b      	b.n	800673a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	1c59      	adds	r1, r3, #1
 800672a:	61f9      	str	r1, [r7, #28]
 800672c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	09db      	lsrs	r3, r3, #7
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b7f      	cmp	r3, #127	; 0x7f
 800673e:	d8f0      	bhi.n	8006722 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	61fa      	str	r2, [r7, #28]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006750:	2204      	movs	r2, #4
 8006752:	68f9      	ldr	r1, [r7, #12]
 8006754:	6938      	ldr	r0, [r7, #16]
 8006756:	f7ff f9a7 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f383 8811 	msr	BASEPRI, r3
}
 8006760:	bf00      	nop
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20013478 	.word	0x20013478
 800676c:	20013448 	.word	0x20013448

08006770 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006778:	f3ef 8311 	mrs	r3, BASEPRI
 800677c:	f04f 0120 	mov.w	r1, #32
 8006780:	f381 8811 	msr	BASEPRI, r1
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	4819      	ldr	r0, [pc, #100]	; (80067ec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006788:	f7ff f89c 	bl	80058c4 <_PreparePacket>
 800678c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006792:	4b17      	ldr	r3, [pc, #92]	; (80067f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	e00b      	b.n	80067be <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	1c59      	adds	r1, r3, #1
 80067ae:	61f9      	str	r1, [r7, #28]
 80067b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	09db      	lsrs	r3, r3, #7
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b7f      	cmp	r3, #127	; 0x7f
 80067c2:	d8f0      	bhi.n	80067a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	61fa      	str	r2, [r7, #28]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80067d4:	2206      	movs	r2, #6
 80067d6:	68f9      	ldr	r1, [r7, #12]
 80067d8:	6938      	ldr	r0, [r7, #16]
 80067da:	f7ff f965 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f383 8811 	msr	BASEPRI, r3
}
 80067e4:	bf00      	nop
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20013478 	.word	0x20013478
 80067f0:	20013448 	.word	0x20013448

080067f4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80067fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006802:	f04f 0120 	mov.w	r1, #32
 8006806:	f381 8811 	msr	BASEPRI, r1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	4827      	ldr	r0, [pc, #156]	; (80068ac <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800680e:	f7ff f859 	bl	80058c4 <_PreparePacket>
 8006812:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006818:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	e00b      	b.n	8006844 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	b2da      	uxtb	r2, r3
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	1c59      	adds	r1, r3, #1
 8006834:	6279      	str	r1, [r7, #36]	; 0x24
 8006836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	09db      	lsrs	r3, r3, #7
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	2b7f      	cmp	r3, #127	; 0x7f
 8006848:	d8f0      	bhi.n	800682c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	627a      	str	r2, [r7, #36]	; 0x24
 8006850:	6a3a      	ldr	r2, [r7, #32]
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	61fb      	str	r3, [r7, #28]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	e00b      	b.n	800687c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	b2da      	uxtb	r2, r3
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	61f9      	str	r1, [r7, #28]
 800686e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	09db      	lsrs	r3, r3, #7
 800687a:	61bb      	str	r3, [r7, #24]
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b7f      	cmp	r3, #127	; 0x7f
 8006880:	d8f0      	bhi.n	8006864 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	61fa      	str	r2, [r7, #28]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006892:	2207      	movs	r2, #7
 8006894:	68f9      	ldr	r1, [r7, #12]
 8006896:	6938      	ldr	r0, [r7, #16]
 8006898:	f7ff f906 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f383 8811 	msr	BASEPRI, r3
}
 80068a2:	bf00      	nop
 80068a4:	3728      	adds	r7, #40	; 0x28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20013478 	.word	0x20013478
 80068b0:	20013448 	.word	0x20013448

080068b4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80068bc:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	1ad3      	subs	r3, r2, r3
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	20013448 	.word	0x20013448

080068d4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	; 0x30
 80068d8:	af00      	add	r7, sp, #0
 80068da:	4603      	mov	r3, r0
 80068dc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80068de:	4b3b      	ldr	r3, [pc, #236]	; (80069cc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d06d      	beq.n	80069c2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80068e6:	4b39      	ldr	r3, [pc, #228]	; (80069cc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80068ec:	2300      	movs	r3, #0
 80068ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f0:	e008      	b.n	8006904 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	3301      	adds	r3, #1
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006908:	429a      	cmp	r2, r3
 800690a:	d3f2      	bcc.n	80068f2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800690c:	e000      	b.n	8006910 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800690e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d055      	beq.n	80069c2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006916:	f3ef 8311 	mrs	r3, BASEPRI
 800691a:	f04f 0120 	mov.w	r1, #32
 800691e:	f381 8811 	msr	BASEPRI, r1
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	482a      	ldr	r0, [pc, #168]	; (80069d0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006926:	f7fe ffcd 	bl	80058c4 <_PreparePacket>
 800692a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	623b      	str	r3, [r7, #32]
 8006938:	e00b      	b.n	8006952 <SEGGER_SYSVIEW_SendModule+0x7e>
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	b2da      	uxtb	r2, r3
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	1c59      	adds	r1, r3, #1
 8006942:	6279      	str	r1, [r7, #36]	; 0x24
 8006944:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	09db      	lsrs	r3, r3, #7
 8006950:	623b      	str	r3, [r7, #32]
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	2b7f      	cmp	r3, #127	; 0x7f
 8006956:	d8f0      	bhi.n	800693a <SEGGER_SYSVIEW_SendModule+0x66>
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	627a      	str	r2, [r7, #36]	; 0x24
 800695e:	6a3a      	ldr	r2, [r7, #32]
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	e00b      	b.n	800698c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	1c59      	adds	r1, r3, #1
 800697c:	61f9      	str	r1, [r7, #28]
 800697e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	09db      	lsrs	r3, r3, #7
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b7f      	cmp	r3, #127	; 0x7f
 8006990:	d8f0      	bhi.n	8006974 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	61fa      	str	r2, [r7, #28]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	4619      	mov	r1, r3
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7fe ff3a 	bl	8005824 <_EncodeStr>
 80069b0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80069b2:	2216      	movs	r2, #22
 80069b4:	68f9      	ldr	r1, [r7, #12]
 80069b6:	6938      	ldr	r0, [r7, #16]
 80069b8:	f7ff f876 	bl	8005aa8 <_SendPacket>
      RECORD_END();
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80069c2:	bf00      	nop
 80069c4:	3730      	adds	r7, #48	; 0x30
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20013470 	.word	0x20013470
 80069d0:	20013478 	.word	0x20013478

080069d4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80069da:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00f      	beq.n	8006a02 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f2      	bne.n	80069e8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20013470 	.word	0x20013470

08006a10 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006a16:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1a:	f04f 0120 	mov.w	r1, #32
 8006a1e:	f381 8811 	msr	BASEPRI, r1
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	4817      	ldr	r0, [pc, #92]	; (8006a84 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006a26:	f7fe ff4d 	bl	80058c4 <_PreparePacket>
 8006a2a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	e00b      	b.n	8006a54 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	1c59      	adds	r1, r3, #1
 8006a44:	6179      	str	r1, [r7, #20]
 8006a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	09db      	lsrs	r3, r3, #7
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b7f      	cmp	r3, #127	; 0x7f
 8006a58:	d8f0      	bhi.n	8006a3c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	617a      	str	r2, [r7, #20]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006a6a:	221b      	movs	r2, #27
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	68b8      	ldr	r0, [r7, #8]
 8006a70:	f7ff f81a 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f383 8811 	msr	BASEPRI, r3
}
 8006a7a:	bf00      	nop
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20013478 	.word	0x20013478
 8006a88:	20013474 	.word	0x20013474

08006a8c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a94:	f3ef 8311 	mrs	r3, BASEPRI
 8006a98:	f04f 0120 	mov.w	r1, #32
 8006a9c:	f381 8811 	msr	BASEPRI, r1
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	4827      	ldr	r0, [pc, #156]	; (8006b40 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006aa4:	f7fe ff0e 	bl	80058c4 <_PreparePacket>
 8006aa8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006aaa:	2280      	movs	r2, #128	; 0x80
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f7fe feb8 	bl	8005824 <_EncodeStr>
 8006ab4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aba:	2301      	movs	r3, #1
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	e00b      	b.n	8006ad8 <SEGGER_SYSVIEW_Warn+0x4c>
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	1c59      	adds	r1, r3, #1
 8006ac8:	6279      	str	r1, [r7, #36]	; 0x24
 8006aca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	09db      	lsrs	r3, r3, #7
 8006ad6:	623b      	str	r3, [r7, #32]
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	2b7f      	cmp	r3, #127	; 0x7f
 8006adc:	d8f0      	bhi.n	8006ac0 <SEGGER_SYSVIEW_Warn+0x34>
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	627a      	str	r2, [r7, #36]	; 0x24
 8006ae4:	6a3a      	ldr	r2, [r7, #32]
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	2300      	movs	r3, #0
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e00b      	b.n	8006b10 <SEGGER_SYSVIEW_Warn+0x84>
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	1c59      	adds	r1, r3, #1
 8006b00:	61f9      	str	r1, [r7, #28]
 8006b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	09db      	lsrs	r3, r3, #7
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b7f      	cmp	r3, #127	; 0x7f
 8006b14:	d8f0      	bhi.n	8006af8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	61fa      	str	r2, [r7, #28]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b26:	221a      	movs	r2, #26
 8006b28:	68f9      	ldr	r1, [r7, #12]
 8006b2a:	6938      	ldr	r0, [r7, #16]
 8006b2c:	f7fe ffbc 	bl	8005aa8 <_SendPacket>
  RECORD_END();
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f383 8811 	msr	BASEPRI, r3
}
 8006b36:	bf00      	nop
 8006b38:	3728      	adds	r7, #40	; 0x28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20013478 	.word	0x20013478

08006b44 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	2000      	movs	r0, #0
 8006b58:	f7fe fe3e 	bl	80057d8 <SEGGER_RTT_Write>
  return len;
 8006b5c:	683b      	ldr	r3, [r7, #0]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
//void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
	int UsartStatus;
	uint8_t v;
	int r;

	UsartStatus = USART_SR;                              // Examine status register
 8006b6e:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <USART2_IRQHandler+0x80>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60fb      	str	r3, [r7, #12]
	if(UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d011      	beq.n	8006ba2 <USART2_IRQHandler+0x3a>
		v = USART_DR;                                      // Read data
 8006b7e:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <USART2_IRQHandler+0x84>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	71fb      	strb	r3, [r7, #7]
		if((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f003 030b 	and.w	r3, r3, #11
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d108      	bne.n	8006ba2 <USART2_IRQHandler+0x3a>
			(void)v;                                         // Avoid warning in BTL
			if(_cbOnRx) {
 8006b90:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <USART2_IRQHandler+0x88>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <USART2_IRQHandler+0x3a>
				_cbOnRx(v);
 8006b98:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <USART2_IRQHandler+0x88>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	79fa      	ldrb	r2, [r7, #7]
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	4798      	blx	r3
			}
		}
	}
	if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01a      	beq.n	8006be2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 8006bac:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <USART2_IRQHandler+0x8c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d015      	beq.n	8006be0 <USART2_IRQHandler+0x78>
		r = _cbOnTx(&v);
 8006bb4:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <USART2_IRQHandler+0x8c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	1dfa      	adds	r2, r7, #7
 8006bba:	4610      	mov	r0, r2
 8006bbc:	4798      	blx	r3
 8006bbe:	60b8      	str	r0, [r7, #8]
		if (r == 0) {                          // No more characters to send ?
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d106      	bne.n	8006bd4 <USART2_IRQHandler+0x6c>
			USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <USART2_IRQHandler+0x90>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a0b      	ldr	r2, [pc, #44]	; (8006bf8 <USART2_IRQHandler+0x90>)
 8006bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e006      	b.n	8006be2 <USART2_IRQHandler+0x7a>
		} else {
			USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006bd4:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <USART2_IRQHandler+0x80>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
			USART_DR = v;  // Start transmission by writing to data register
 8006bd8:	79fa      	ldrb	r2, [r7, #7]
 8006bda:	4b04      	ldr	r3, [pc, #16]	; (8006bec <USART2_IRQHandler+0x84>)
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e000      	b.n	8006be2 <USART2_IRQHandler+0x7a>
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 8006be0:	bf00      	nop
		}
	}
}
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	40004400 	.word	0x40004400
 8006bec:	40004404 	.word	0x40004404
 8006bf0:	2001355c 	.word	0x2001355c
 8006bf4:	20013560 	.word	0x20013560
 8006bf8:	4000440c 	.word	0x4000440c

08006bfc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
	USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8006c00:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a04      	ldr	r2, [pc, #16]	; (8006c18 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0a:	6013      	str	r3, [r2, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	4000440c 	.word	0x4000440c

08006c1c <ade_signed_value>:

#include "ade_value_scale.h"

float power = 0, reactive_power = 0, apparant_power = 0;

int ade_signed_value(uint32_t value, uint8_t msb) {
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	70fb      	strb	r3, [r7, #3]
	int val = value;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	60fb      	str	r3, [r7, #12]
	if(val & (1 << msb)) {
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	fa42 f303 	asr.w	r3, r2, r3
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d016      	beq.n	8006c6a <ade_signed_value+0x4e>
		for(int i = 0; i <= msb; i++)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60bb      	str	r3, [r7, #8]
 8006c40:	e009      	b.n	8006c56 <ade_signed_value+0x3a>
			val ^= (1 << i);
 8006c42:	2201      	movs	r2, #1
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4053      	eors	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i <= msb; i++)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60bb      	str	r3, [r7, #8]
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	ddf1      	ble.n	8006c42 <ade_signed_value+0x26>
		val++;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	3301      	adds	r3, #1
 8006c62:	60fb      	str	r3, [r7, #12]
		val *= -1;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	425b      	negs	r3, r3
 8006c68:	60fb      	str	r3, [r7, #12]
	}
	return val;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <ade_scale_vrms>:

float ade_scale_vrms(uint32_t value) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	return ((float) value) / 3.082983;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8a:	ee17 0a90 	vmov	r0, s15
 8006c8e:	f7f9 fcbb 	bl	8000608 <__aeabi_f2d>
 8006c92:	a309      	add	r3, pc, #36	; (adr r3, 8006cb8 <ade_scale_vrms+0x40>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f7f9 fe38 	bl	800090c <__aeabi_ddiv>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	f7f9 ffe0 	bl	8000c68 <__aeabi_d2f>
 8006ca8:	4603      	mov	r3, r0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	f3af 8000 	nop.w
 8006cb8:	fdb8fde3 	.word	0xfdb8fde3
 8006cbc:	4008a9f2 	.word	0x4008a9f2

08006cc0 <ade_scale_irms>:

float ade_scale_vpeak(uint32_t value) {
	return value;
}

float ade_scale_irms(uint32_t value) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
	return ((float) value) / 764.9270602;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	ee17 0a90 	vmov	r0, s15
 8006cd6:	f7f9 fc97 	bl	8000608 <__aeabi_f2d>
 8006cda:	a309      	add	r3, pc, #36	; (adr r3, 8006d00 <ade_scale_irms+0x40>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f7f9 fe14 	bl	800090c <__aeabi_ddiv>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4619      	mov	r1, r3
 8006cec:	f7f9 ffbc 	bl	8000c68 <__aeabi_d2f>
 8006cf0:	4603      	mov	r3, r0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	f3af 8000 	nop.w
 8006d00:	9e89c363 	.word	0x9e89c363
 8006d04:	4087e76a 	.word	0x4087e76a

08006d08 <ade_scale_power>:

float ade_scale_ipeak(uint32_t value) {
	return value;
}

float ade_scale_power(uint32_t value) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	return power = ((float) ade_signed_value(value, 23)) * 27.4245168;
 8006d10:	2117      	movs	r1, #23
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff ff82 	bl	8006c1c <ade_signed_value>
 8006d18:	ee07 0a90 	vmov	s15, r0
 8006d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d20:	ee17 0a90 	vmov	r0, s15
 8006d24:	f7f9 fc70 	bl	8000608 <__aeabi_f2d>
 8006d28:	a30a      	add	r3, pc, #40	; (adr r3, 8006d54 <ade_scale_power+0x4c>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f7f9 fcc3 	bl	80006b8 <__aeabi_dmul>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4610      	mov	r0, r2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f7f9 ff95 	bl	8000c68 <__aeabi_d2f>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4a03      	ldr	r2, [pc, #12]	; (8006d50 <ade_scale_power+0x48>)
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <ade_scale_power+0x48>)
 8006d46:	681b      	ldr	r3, [r3, #0]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20013564 	.word	0x20013564
 8006d54:	220c9a42 	.word	0x220c9a42
 8006d58:	403b6cad 	.word	0x403b6cad
 8006d5c:	00000000 	.word	0x00000000

08006d60 <ade_scale_reactive_power>:

float ade_scale_reactive_power(uint32_t value) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	return reactive_power = ((float) ade_signed_value(value, 23)) * 77.14371603;
 8006d68:	2117      	movs	r1, #23
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff ff56 	bl	8006c1c <ade_signed_value>
 8006d70:	ee07 0a90 	vmov	s15, r0
 8006d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d78:	ee17 0a90 	vmov	r0, s15
 8006d7c:	f7f9 fc44 	bl	8000608 <__aeabi_f2d>
 8006d80:	a30a      	add	r3, pc, #40	; (adr r3, 8006dac <ade_scale_reactive_power+0x4c>)
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f7f9 fc97 	bl	80006b8 <__aeabi_dmul>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4610      	mov	r0, r2
 8006d90:	4619      	mov	r1, r3
 8006d92:	f7f9 ff69 	bl	8000c68 <__aeabi_d2f>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4a03      	ldr	r2, [pc, #12]	; (8006da8 <ade_scale_reactive_power+0x48>)
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	4b02      	ldr	r3, [pc, #8]	; (8006da8 <ade_scale_reactive_power+0x48>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20013568 	.word	0x20013568
 8006dac:	a4b830b3 	.word	0xa4b830b3
 8006db0:	40534932 	.word	0x40534932

08006db4 <ade_get_apparant_power>:

float ade_get_apparant_power() {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
	return apparant_power = sqrtf(power*power + reactive_power*reactive_power);
 8006db8:	4b0e      	ldr	r3, [pc, #56]	; (8006df4 <ade_get_apparant_power+0x40>)
 8006dba:	ed93 7a00 	vldr	s14, [r3]
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <ade_get_apparant_power+0x40>)
 8006dc0:	edd3 7a00 	vldr	s15, [r3]
 8006dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <ade_get_apparant_power+0x44>)
 8006dca:	edd3 6a00 	vldr	s13, [r3]
 8006dce:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <ade_get_apparant_power+0x44>)
 8006dd0:	edd3 7a00 	vldr	s15, [r3]
 8006dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ddc:	ee17 0a90 	vmov	r0, s15
 8006de0:	f004 fdae 	bl	800b940 <sqrtf>
 8006de4:	4603      	mov	r3, r0
 8006de6:	4a05      	ldr	r2, [pc, #20]	; (8006dfc <ade_get_apparant_power+0x48>)
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <ade_get_apparant_power+0x48>)
 8006dec:	681b      	ldr	r3, [r3, #0]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20013564 	.word	0x20013564
 8006df8:	20013568 	.word	0x20013568
 8006dfc:	2001356c 	.word	0x2001356c

08006e00 <ade_get_power_factor>:

float ade_get_power_factor() {
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
	if(power) return power / apparant_power;
 8006e04:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <ade_get_power_factor+0x38>)
 8006e06:	edd3 7a00 	vldr	s15, [r3]
 8006e0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e12:	d008      	beq.n	8006e26 <ade_get_power_factor+0x26>
 8006e14:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <ade_get_power_factor+0x38>)
 8006e16:	ed93 7a00 	vldr	s14, [r3]
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <ade_get_power_factor+0x3c>)
 8006e1c:	edd3 7a00 	vldr	s15, [r3]
 8006e20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006e24:	e001      	b.n	8006e2a <ade_get_power_factor+0x2a>
	return 0;
 8006e26:	eddf 6a06 	vldr	s13, [pc, #24]	; 8006e40 <ade_get_power_factor+0x40>
 8006e2a:	ee16 3a90 	vmov	r3, s13
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	20013564 	.word	0x20013564
 8006e3c:	2001356c 	.word	0x2001356c
 8006e40:	00000000 	.word	0x00000000

08006e44 <lcd_puts_xy>:
LCD_Data_Screen3_t screen3_data;
LCD_Data_Screen4_t screen4_data, screen4_data_config;

DS1307_DateTime_t rtc_display, rtc_config;

void lcd_puts_xy(unsigned char x, unsigned char y, char* c, LCD5110_Pixel_t color, LCD5110_FontSize_t font) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	603a      	str	r2, [r7, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	71fb      	strb	r3, [r7, #7]
 8006e52:	460b      	mov	r3, r1
 8006e54:	71bb      	strb	r3, [r7, #6]
 8006e56:	4613      	mov	r3, r2
 8006e58:	717b      	strb	r3, [r7, #5]
	LCD5110_GotoXY(x, y);
 8006e5a:	79ba      	ldrb	r2, [r7, #6]
 8006e5c:	79fb      	ldrb	r3, [r7, #7]
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fa fec1 	bl	8001be8 <LCD5110_GotoXY>
	LCD5110_Puts(c, color, font);
 8006e66:	7c3a      	ldrb	r2, [r7, #16]
 8006e68:	797b      	ldrb	r3, [r7, #5]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6838      	ldr	r0, [r7, #0]
 8006e6e:	f7fa ff7d 	bl	8001d6c <LCD5110_Puts>
}
 8006e72:	bf00      	nop
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <range_scale>:

void range_scale(float value, char* value_buf, char* range) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
	if(value < 0) value *= -1;
 8006e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e94:	d505      	bpl.n	8006ea2 <range_scale+0x26>
 8006e96:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e9a:	eef1 7a67 	vneg.f32	s15, s15
 8006e9e:	edc7 7a03 	vstr	s15, [r7, #12]
	if(value < 1000) {
 8006ea2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ea6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006f94 <range_scale+0x118>
 8006eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb2:	d505      	bpl.n	8006ec0 <range_scale+0x44>
		sprintf(range, "%s", "m");
 8006eb4:	4a38      	ldr	r2, [pc, #224]	; (8006f98 <range_scale+0x11c>)
 8006eb6:	4939      	ldr	r1, [pc, #228]	; (8006f9c <range_scale+0x120>)
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f002 fb37 	bl	800952c <siprintf>
 8006ebe:	e02c      	b.n	8006f1a <range_scale+0x9e>
	} else if(value < 1000*1000) {
 8006ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ec4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006fa0 <range_scale+0x124>
 8006ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed0:	d50d      	bpl.n	8006eee <range_scale+0x72>
		sprintf(range, "%s", " ");
 8006ed2:	4a34      	ldr	r2, [pc, #208]	; (8006fa4 <range_scale+0x128>)
 8006ed4:	4931      	ldr	r1, [pc, #196]	; (8006f9c <range_scale+0x120>)
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f002 fb28 	bl	800952c <siprintf>
		value /= 1000;
 8006edc:	ed97 7a03 	vldr	s14, [r7, #12]
 8006ee0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8006f94 <range_scale+0x118>
 8006ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ee8:	edc7 7a03 	vstr	s15, [r7, #12]
 8006eec:	e015      	b.n	8006f1a <range_scale+0x9e>
	} else if(value < 1000*1000*1000) {
 8006eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ef2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006fa8 <range_scale+0x12c>
 8006ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efe:	d50c      	bpl.n	8006f1a <range_scale+0x9e>
		sprintf(range, "%s", "k");
 8006f00:	4a2a      	ldr	r2, [pc, #168]	; (8006fac <range_scale+0x130>)
 8006f02:	4926      	ldr	r1, [pc, #152]	; (8006f9c <range_scale+0x120>)
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f002 fb11 	bl	800952c <siprintf>
		value /= 1000*1000;
 8006f0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8006f0e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006fa0 <range_scale+0x124>
 8006f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f16:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	if(value < 10)
 8006f1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f1e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2a:	d509      	bpl.n	8006f40 <range_scale+0xc4>
		sprintf(value_buf, "%1.3f", value);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7f9 fb6b 	bl	8000608 <__aeabi_f2d>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	491e      	ldr	r1, [pc, #120]	; (8006fb0 <range_scale+0x134>)
 8006f38:	68b8      	ldr	r0, [r7, #8]
 8006f3a:	f002 faf7 	bl	800952c <siprintf>
	else if(value < 100)
		sprintf(value_buf, "%2.2f", value);
	else if(value < 1000)
		sprintf(value_buf, "%3.1f", value);
}
 8006f3e:	e025      	b.n	8006f8c <range_scale+0x110>
	else if(value < 100)
 8006f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f44:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8006fb4 <range_scale+0x138>
 8006f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f50:	d509      	bpl.n	8006f66 <range_scale+0xea>
		sprintf(value_buf, "%2.2f", value);
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f7f9 fb58 	bl	8000608 <__aeabi_f2d>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4916      	ldr	r1, [pc, #88]	; (8006fb8 <range_scale+0x13c>)
 8006f5e:	68b8      	ldr	r0, [r7, #8]
 8006f60:	f002 fae4 	bl	800952c <siprintf>
}
 8006f64:	e012      	b.n	8006f8c <range_scale+0x110>
	else if(value < 1000)
 8006f66:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f6a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006f94 <range_scale+0x118>
 8006f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f76:	d400      	bmi.n	8006f7a <range_scale+0xfe>
}
 8006f78:	e008      	b.n	8006f8c <range_scale+0x110>
		sprintf(value_buf, "%3.1f", value);
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7f9 fb44 	bl	8000608 <__aeabi_f2d>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	490d      	ldr	r1, [pc, #52]	; (8006fbc <range_scale+0x140>)
 8006f86:	68b8      	ldr	r0, [r7, #8]
 8006f88:	f002 fad0 	bl	800952c <siprintf>
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	447a0000 	.word	0x447a0000
 8006f98:	0800ba48 	.word	0x0800ba48
 8006f9c:	0800ba4c 	.word	0x0800ba4c
 8006fa0:	49742400 	.word	0x49742400
 8006fa4:	0800ba50 	.word	0x0800ba50
 8006fa8:	4e6e6b28 	.word	0x4e6e6b28
 8006fac:	0800ba54 	.word	0x0800ba54
 8006fb0:	0800ba58 	.word	0x0800ba58
 8006fb4:	42c80000 	.word	0x42c80000
 8006fb8:	0800ba60 	.word	0x0800ba60
 8006fbc:	0800ba68 	.word	0x0800ba68

08006fc0 <lcd_screen_1_refresh>:

void lcd_screen_1_refresh() {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8006fc6:	f7fa fd3f 	bl	8001a48 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "Vrms", 1, 1);
 8006fca:	2301      	movs	r3, #1
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4a4f      	ldr	r2, [pc, #316]	; (8007110 <lcd_screen_1_refresh+0x150>)
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f7ff ff35 	bl	8006e44 <lcd_puts_xy>
	range_scale(screen1_data.Vrms, val_buf, range_buf);
 8006fda:	4b4e      	ldr	r3, [pc, #312]	; (8007114 <lcd_screen_1_refresh+0x154>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	463a      	mov	r2, r7
 8006fe0:	1d39      	adds	r1, r7, #4
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7ff ff4a 	bl	8006e7c <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8006fe8:	1d3a      	adds	r2, r7, #4
 8006fea:	2301      	movs	r3, #1
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	2301      	movs	r3, #1
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	201c      	movs	r0, #28
 8006ff4:	f7ff ff26 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 8006ff8:	463a      	mov	r2, r7
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	2301      	movs	r3, #1
 8007000:	2100      	movs	r1, #0
 8007002:	203c      	movs	r0, #60	; 0x3c
 8007004:	f7ff ff1e 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "V", 1, 1);
 8007008:	2301      	movs	r3, #1
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	2301      	movs	r3, #1
 800700e:	4a42      	ldr	r2, [pc, #264]	; (8007118 <lcd_screen_1_refresh+0x158>)
 8007010:	2100      	movs	r1, #0
 8007012:	2042      	movs	r0, #66	; 0x42
 8007014:	f7ff ff16 	bl	8006e44 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Vp", 1, 1);
 8007018:	2301      	movs	r3, #1
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	2301      	movs	r3, #1
 800701e:	4a3f      	ldr	r2, [pc, #252]	; (800711c <lcd_screen_1_refresh+0x15c>)
 8007020:	210c      	movs	r1, #12
 8007022:	2000      	movs	r0, #0
 8007024:	f7ff ff0e 	bl	8006e44 <lcd_puts_xy>
	range_scale(screen1_data.Vpeak, val_buf, range_buf);
 8007028:	4b3a      	ldr	r3, [pc, #232]	; (8007114 <lcd_screen_1_refresh+0x154>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	463a      	mov	r2, r7
 800702e:	1d39      	adds	r1, r7, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff ff23 	bl	8006e7c <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 8007036:	1d3a      	adds	r2, r7, #4
 8007038:	2301      	movs	r3, #1
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	2301      	movs	r3, #1
 800703e:	210c      	movs	r1, #12
 8007040:	201c      	movs	r0, #28
 8007042:	f7ff feff 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8007046:	463a      	mov	r2, r7
 8007048:	2301      	movs	r3, #1
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	2301      	movs	r3, #1
 800704e:	210c      	movs	r1, #12
 8007050:	203c      	movs	r0, #60	; 0x3c
 8007052:	f7ff fef7 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1, 1);
 8007056:	2301      	movs	r3, #1
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	2301      	movs	r3, #1
 800705c:	4a2e      	ldr	r2, [pc, #184]	; (8007118 <lcd_screen_1_refresh+0x158>)
 800705e:	210c      	movs	r1, #12
 8007060:	2042      	movs	r0, #66	; 0x42
 8007062:	f7ff feef 	bl	8006e44 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_2, "Irms", 1, 1);
 8007066:	2301      	movs	r3, #1
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2301      	movs	r3, #1
 800706c:	4a2c      	ldr	r2, [pc, #176]	; (8007120 <lcd_screen_1_refresh+0x160>)
 800706e:	211d      	movs	r1, #29
 8007070:	2000      	movs	r0, #0
 8007072:	f7ff fee7 	bl	8006e44 <lcd_puts_xy>
	range_scale(screen1_data.Irms, val_buf, range_buf);
 8007076:	4b27      	ldr	r3, [pc, #156]	; (8007114 <lcd_screen_1_refresh+0x154>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	463a      	mov	r2, r7
 800707c:	1d39      	adds	r1, r7, #4
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fefc 	bl	8006e7c <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_2, val_buf, 1, 1);
 8007084:	1d3a      	adds	r2, r7, #4
 8007086:	2301      	movs	r3, #1
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	2301      	movs	r3, #1
 800708c:	211d      	movs	r1, #29
 800708e:	201c      	movs	r0, #28
 8007090:	f7ff fed8 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_2, range_buf, 1, 1);
 8007094:	463a      	mov	r2, r7
 8007096:	2301      	movs	r3, #1
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2301      	movs	r3, #1
 800709c:	211d      	movs	r1, #29
 800709e:	203c      	movs	r0, #60	; 0x3c
 80070a0:	f7ff fed0 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_2, "A", 1, 1);
 80070a4:	2301      	movs	r3, #1
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	2301      	movs	r3, #1
 80070aa:	4a1e      	ldr	r2, [pc, #120]	; (8007124 <lcd_screen_1_refresh+0x164>)
 80070ac:	211d      	movs	r1, #29
 80070ae:	2042      	movs	r0, #66	; 0x42
 80070b0:	f7ff fec8 	bl	8006e44 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "Ip", 1, 1);
 80070b4:	2301      	movs	r3, #1
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	2301      	movs	r3, #1
 80070ba:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <lcd_screen_1_refresh+0x168>)
 80070bc:	2129      	movs	r1, #41	; 0x29
 80070be:	2000      	movs	r0, #0
 80070c0:	f7ff fec0 	bl	8006e44 <lcd_puts_xy>
	range_scale(screen1_data.Ipeak, val_buf, range_buf);
 80070c4:	4b13      	ldr	r3, [pc, #76]	; (8007114 <lcd_screen_1_refresh+0x154>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	463a      	mov	r2, r7
 80070ca:	1d39      	adds	r1, r7, #4
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff fed5 	bl	8006e7c <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 80070d2:	1d3a      	adds	r2, r7, #4
 80070d4:	2301      	movs	r3, #1
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	2301      	movs	r3, #1
 80070da:	2129      	movs	r1, #41	; 0x29
 80070dc:	201c      	movs	r0, #28
 80070de:	f7ff feb1 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1, 1);
 80070e2:	463a      	mov	r2, r7
 80070e4:	2301      	movs	r3, #1
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	2301      	movs	r3, #1
 80070ea:	2129      	movs	r1, #41	; 0x29
 80070ec:	203c      	movs	r0, #60	; 0x3c
 80070ee:	f7ff fea9 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "A", 1, 1);
 80070f2:	2301      	movs	r3, #1
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	2301      	movs	r3, #1
 80070f8:	4a0a      	ldr	r2, [pc, #40]	; (8007124 <lcd_screen_1_refresh+0x164>)
 80070fa:	2129      	movs	r1, #41	; 0x29
 80070fc:	2042      	movs	r0, #66	; 0x42
 80070fe:	f7ff fea1 	bl	8006e44 <lcd_puts_xy>

	LCD5110_Refresh();
 8007102:	f7fa fcd3 	bl	8001aac <LCD5110_Refresh>
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	0800ba70 	.word	0x0800ba70
 8007114:	20013894 	.word	0x20013894
 8007118:	0800ba78 	.word	0x0800ba78
 800711c:	0800ba7c 	.word	0x0800ba7c
 8007120:	0800ba80 	.word	0x0800ba80
 8007124:	0800ba88 	.word	0x0800ba88
 8007128:	0800ba8c 	.word	0x0800ba8c

0800712c <lcd_screen_2_refresh>:

void lcd_screen_2_refresh() {
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8007132:	f7fa fc89 	bl	8001a48 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "P", 1, 1);
 8007136:	2301      	movs	r3, #1
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	2301      	movs	r3, #1
 800713c:	4a49      	ldr	r2, [pc, #292]	; (8007264 <lcd_screen_2_refresh+0x138>)
 800713e:	2100      	movs	r1, #0
 8007140:	2000      	movs	r0, #0
 8007142:	f7ff fe7f 	bl	8006e44 <lcd_puts_xy>
	range_scale(screen2_data.ActivePower, val_buf, range_buf);
 8007146:	4b48      	ldr	r3, [pc, #288]	; (8007268 <lcd_screen_2_refresh+0x13c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	463a      	mov	r2, r7
 800714c:	1d39      	adds	r1, r7, #4
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff fe94 	bl	8006e7c <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8007154:	1d3a      	adds	r2, r7, #4
 8007156:	2301      	movs	r3, #1
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	2301      	movs	r3, #1
 800715c:	2100      	movs	r1, #0
 800715e:	201c      	movs	r0, #28
 8007160:	f7ff fe70 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 8007164:	463a      	mov	r2, r7
 8007166:	2301      	movs	r3, #1
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	2301      	movs	r3, #1
 800716c:	2100      	movs	r1, #0
 800716e:	203c      	movs	r0, #60	; 0x3c
 8007170:	f7ff fe68 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "W", 1, 1);
 8007174:	2301      	movs	r3, #1
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	2301      	movs	r3, #1
 800717a:	4a3c      	ldr	r2, [pc, #240]	; (800726c <lcd_screen_2_refresh+0x140>)
 800717c:	2100      	movs	r1, #0
 800717e:	2042      	movs	r0, #66	; 0x42
 8007180:	f7ff fe60 	bl	8006e44 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Q", 1, 1);
 8007184:	2301      	movs	r3, #1
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	2301      	movs	r3, #1
 800718a:	4a39      	ldr	r2, [pc, #228]	; (8007270 <lcd_screen_2_refresh+0x144>)
 800718c:	210c      	movs	r1, #12
 800718e:	2000      	movs	r0, #0
 8007190:	f7ff fe58 	bl	8006e44 <lcd_puts_xy>
	range_scale(screen2_data.ReactivePower, val_buf, range_buf);
 8007194:	4b34      	ldr	r3, [pc, #208]	; (8007268 <lcd_screen_2_refresh+0x13c>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	463a      	mov	r2, r7
 800719a:	1d39      	adds	r1, r7, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff fe6d 	bl	8006e7c <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 80071a2:	1d3a      	adds	r2, r7, #4
 80071a4:	2301      	movs	r3, #1
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2301      	movs	r3, #1
 80071aa:	210c      	movs	r1, #12
 80071ac:	201c      	movs	r0, #28
 80071ae:	f7ff fe49 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 80071b2:	463a      	mov	r2, r7
 80071b4:	2301      	movs	r3, #1
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2301      	movs	r3, #1
 80071ba:	210c      	movs	r1, #12
 80071bc:	203c      	movs	r0, #60	; 0x3c
 80071be:	f7ff fe41 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAR", 1, 1);
 80071c2:	2301      	movs	r3, #1
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	2301      	movs	r3, #1
 80071c8:	4a2a      	ldr	r2, [pc, #168]	; (8007274 <lcd_screen_2_refresh+0x148>)
 80071ca:	210c      	movs	r1, #12
 80071cc:	2042      	movs	r0, #66	; 0x42
 80071ce:	f7ff fe39 	bl	8006e44 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_1, "S", 1, 1);
 80071d2:	2301      	movs	r3, #1
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	2301      	movs	r3, #1
 80071d8:	4a27      	ldr	r2, [pc, #156]	; (8007278 <lcd_screen_2_refresh+0x14c>)
 80071da:	2118      	movs	r1, #24
 80071dc:	2000      	movs	r0, #0
 80071de:	f7ff fe31 	bl	8006e44 <lcd_puts_xy>
	range_scale(screen2_data.ApparantPower, val_buf, range_buf);
 80071e2:	4b21      	ldr	r3, [pc, #132]	; (8007268 <lcd_screen_2_refresh+0x13c>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	463a      	mov	r2, r7
 80071e8:	1d39      	adds	r1, r7, #4
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fe46 	bl	8006e7c <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1, 1);
 80071f0:	1d3a      	adds	r2, r7, #4
 80071f2:	2301      	movs	r3, #1
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	2301      	movs	r3, #1
 80071f8:	2118      	movs	r1, #24
 80071fa:	201c      	movs	r0, #28
 80071fc:	f7ff fe22 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1, 1);
 8007200:	463a      	mov	r2, r7
 8007202:	2301      	movs	r3, #1
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	2301      	movs	r3, #1
 8007208:	2118      	movs	r1, #24
 800720a:	203c      	movs	r0, #60	; 0x3c
 800720c:	f7ff fe1a 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "VA", 1, 1);
 8007210:	2301      	movs	r3, #1
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	2301      	movs	r3, #1
 8007216:	4a19      	ldr	r2, [pc, #100]	; (800727c <lcd_screen_2_refresh+0x150>)
 8007218:	2118      	movs	r1, #24
 800721a:	2042      	movs	r0, #66	; 0x42
 800721c:	f7ff fe12 	bl	8006e44 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "PF", 1, 1);
 8007220:	2301      	movs	r3, #1
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2301      	movs	r3, #1
 8007226:	4a16      	ldr	r2, [pc, #88]	; (8007280 <lcd_screen_2_refresh+0x154>)
 8007228:	2129      	movs	r1, #41	; 0x29
 800722a:	2000      	movs	r0, #0
 800722c:	f7ff fe0a 	bl	8006e44 <lcd_puts_xy>
	sprintf(val_buf, "%.2f", screen2_data.PowerFactor);
 8007230:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <lcd_screen_2_refresh+0x13c>)
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4618      	mov	r0, r3
 8007236:	f7f9 f9e7 	bl	8000608 <__aeabi_f2d>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	1d38      	adds	r0, r7, #4
 8007240:	4910      	ldr	r1, [pc, #64]	; (8007284 <lcd_screen_2_refresh+0x158>)
 8007242:	f002 f973 	bl	800952c <siprintf>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 8007246:	1d3a      	adds	r2, r7, #4
 8007248:	2301      	movs	r3, #1
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	2301      	movs	r3, #1
 800724e:	2129      	movs	r1, #41	; 0x29
 8007250:	201c      	movs	r0, #28
 8007252:	f7ff fdf7 	bl	8006e44 <lcd_puts_xy>

	LCD5110_Refresh();
 8007256:	f7fa fc29 	bl	8001aac <LCD5110_Refresh>
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	0800ba90 	.word	0x0800ba90
 8007268:	20013880 	.word	0x20013880
 800726c:	0800ba94 	.word	0x0800ba94
 8007270:	0800ba98 	.word	0x0800ba98
 8007274:	0800ba9c 	.word	0x0800ba9c
 8007278:	0800baa0 	.word	0x0800baa0
 800727c:	0800baa4 	.word	0x0800baa4
 8007280:	0800baa8 	.word	0x0800baa8
 8007284:	0800baac 	.word	0x0800baac

08007288 <lcd_screen_3_refresh>:

void lcd_screen_3_refresh() {
 8007288:	b580      	push	{r7, lr}
 800728a:	b08c      	sub	sp, #48	; 0x30
 800728c:	af02      	add	r7, sp, #8
	LCD5110_Clear();
 800728e:	f7fa fbdb 	bl	8001a48 <LCD5110_Clear>

	char val_buf[10];
	char range_buf[2];

	lcd_puts_xy(0, ROW_LINE_1, "P.t", 1, 1);
 8007292:	2301      	movs	r3, #1
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	2301      	movs	r3, #1
 8007298:	4a4d      	ldr	r2, [pc, #308]	; (80073d0 <lcd_screen_3_refresh+0x148>)
 800729a:	2100      	movs	r1, #0
 800729c:	2000      	movs	r0, #0
 800729e:	f7ff fdd1 	bl	8006e44 <lcd_puts_xy>
	range_scale(screen3_data.ActiveEnergy, val_buf, range_buf);
 80072a2:	4b4c      	ldr	r3, [pc, #304]	; (80073d4 <lcd_screen_3_refresh+0x14c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f107 0218 	add.w	r2, r7, #24
 80072aa:	f107 011c 	add.w	r1, r7, #28
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff fde4 	bl	8006e7c <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 80072b4:	f107 021c 	add.w	r2, r7, #28
 80072b8:	2301      	movs	r3, #1
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2301      	movs	r3, #1
 80072be:	2100      	movs	r1, #0
 80072c0:	201c      	movs	r0, #28
 80072c2:	f7ff fdbf 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 80072c6:	f107 0218 	add.w	r2, r7, #24
 80072ca:	2301      	movs	r3, #1
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	2301      	movs	r3, #1
 80072d0:	2100      	movs	r1, #0
 80072d2:	203c      	movs	r0, #60	; 0x3c
 80072d4:	f7ff fdb6 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "Wh", 1, 1);
 80072d8:	2301      	movs	r3, #1
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	2301      	movs	r3, #1
 80072de:	4a3e      	ldr	r2, [pc, #248]	; (80073d8 <lcd_screen_3_refresh+0x150>)
 80072e0:	2100      	movs	r1, #0
 80072e2:	2042      	movs	r0, #66	; 0x42
 80072e4:	f7ff fdae 	bl	8006e44 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "S.t", 1, 1);
 80072e8:	2301      	movs	r3, #1
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	2301      	movs	r3, #1
 80072ee:	4a3b      	ldr	r2, [pc, #236]	; (80073dc <lcd_screen_3_refresh+0x154>)
 80072f0:	210c      	movs	r1, #12
 80072f2:	2000      	movs	r0, #0
 80072f4:	f7ff fda6 	bl	8006e44 <lcd_puts_xy>
	range_scale(screen3_data.ApparantEnergy, val_buf, range_buf);
 80072f8:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <lcd_screen_3_refresh+0x14c>)
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f107 0218 	add.w	r2, r7, #24
 8007300:	f107 011c 	add.w	r1, r7, #28
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fdb9 	bl	8006e7c <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 800730a:	f107 021c 	add.w	r2, r7, #28
 800730e:	2301      	movs	r3, #1
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	2301      	movs	r3, #1
 8007314:	210c      	movs	r1, #12
 8007316:	201c      	movs	r0, #28
 8007318:	f7ff fd94 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 800731c:	f107 0218 	add.w	r2, r7, #24
 8007320:	2301      	movs	r3, #1
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	2301      	movs	r3, #1
 8007326:	210c      	movs	r1, #12
 8007328:	203c      	movs	r0, #60	; 0x3c
 800732a:	f7ff fd8b 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAh", 1, 1);
 800732e:	2301      	movs	r3, #1
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	2301      	movs	r3, #1
 8007334:	4a2a      	ldr	r2, [pc, #168]	; (80073e0 <lcd_screen_3_refresh+0x158>)
 8007336:	210c      	movs	r1, #12
 8007338:	2042      	movs	r0, #66	; 0x42
 800733a:	f7ff fd83 	bl	8006e44 <lcd_puts_xy>

	if(screen3_mode == S3_RESET_CONFIRM_DISPLAY) {
 800733e:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <lcd_screen_3_refresh+0x15c>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d10f      	bne.n	8007366 <lcd_screen_3_refresh+0xde>
		lcd_puts_xy(12, ROW_LINE_3_1, "Clear Data?", 1, 1);
 8007346:	2301      	movs	r3, #1
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	2301      	movs	r3, #1
 800734c:	4a26      	ldr	r2, [pc, #152]	; (80073e8 <lcd_screen_3_refresh+0x160>)
 800734e:	2118      	movs	r1, #24
 8007350:	200c      	movs	r0, #12
 8007352:	f7ff fd77 	bl	8006e44 <lcd_puts_xy>
		lcd_puts_xy(12, ROW_LINE_3_1 + 8, "[#]Y / [*]N", 1, 1);
 8007356:	2301      	movs	r3, #1
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	2301      	movs	r3, #1
 800735c:	4a23      	ldr	r2, [pc, #140]	; (80073ec <lcd_screen_3_refresh+0x164>)
 800735e:	2120      	movs	r1, #32
 8007360:	200c      	movs	r0, #12
 8007362:	f7ff fd6f 	bl	8006e44 <lcd_puts_xy>
	}

	char days_buf[5];
	sprintf(days_buf, "%04lu", screen3_timer.days);
 8007366:	4b22      	ldr	r3, [pc, #136]	; (80073f0 <lcd_screen_3_refresh+0x168>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	f107 0310 	add.w	r3, r7, #16
 800736e:	4921      	ldr	r1, [pc, #132]	; (80073f4 <lcd_screen_3_refresh+0x16c>)
 8007370:	4618      	mov	r0, r3
 8007372:	f002 f8db 	bl	800952c <siprintf>
	lcd_puts_xy(0, ROW_LINE_4, days_buf, 1, 1);
 8007376:	f107 0210 	add.w	r2, r7, #16
 800737a:	2301      	movs	r3, #1
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	2301      	movs	r3, #1
 8007380:	2129      	movs	r1, #41	; 0x29
 8007382:	2000      	movs	r0, #0
 8007384:	f7ff fd5e 	bl	8006e44 <lcd_puts_xy>
	lcd_puts_xy(26, ROW_LINE_4 + 2, "DAY(s)", 1, 0);
 8007388:	2300      	movs	r3, #0
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	2301      	movs	r3, #1
 800738e:	4a1a      	ldr	r2, [pc, #104]	; (80073f8 <lcd_screen_3_refresh+0x170>)
 8007390:	212b      	movs	r1, #43	; 0x2b
 8007392:	201a      	movs	r0, #26
 8007394:	f7ff fd56 	bl	8006e44 <lcd_puts_xy>

	char runtime_buf[9];
	sprintf(runtime_buf, "%02u:%02u:%02u", screen3_timer.hours, screen3_timer.minutes, screen3_timer.seconds);
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <lcd_screen_3_refresh+0x168>)
 800739a:	791b      	ldrb	r3, [r3, #4]
 800739c:	461a      	mov	r2, r3
 800739e:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <lcd_screen_3_refresh+0x168>)
 80073a0:	795b      	ldrb	r3, [r3, #5]
 80073a2:	4619      	mov	r1, r3
 80073a4:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <lcd_screen_3_refresh+0x168>)
 80073a6:	799b      	ldrb	r3, [r3, #6]
 80073a8:	1d38      	adds	r0, r7, #4
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	460b      	mov	r3, r1
 80073ae:	4913      	ldr	r1, [pc, #76]	; (80073fc <lcd_screen_3_refresh+0x174>)
 80073b0:	f002 f8bc 	bl	800952c <siprintf>
	lcd_puts_xy(56, ROW_LINE_4 + 2, runtime_buf, 1, 0);
 80073b4:	1d3a      	adds	r2, r7, #4
 80073b6:	2300      	movs	r3, #0
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	2301      	movs	r3, #1
 80073bc:	212b      	movs	r1, #43	; 0x2b
 80073be:	2038      	movs	r0, #56	; 0x38
 80073c0:	f7ff fd40 	bl	8006e44 <lcd_puts_xy>

	LCD5110_Refresh();
 80073c4:	f7fa fb72 	bl	8001aac <LCD5110_Refresh>
}
 80073c8:	bf00      	nop
 80073ca:	3728      	adds	r7, #40	; 0x28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	0800bab4 	.word	0x0800bab4
 80073d4:	200138bc 	.word	0x200138bc
 80073d8:	0800bab8 	.word	0x0800bab8
 80073dc:	0800babc 	.word	0x0800babc
 80073e0:	0800bac0 	.word	0x0800bac0
 80073e4:	20013890 	.word	0x20013890
 80073e8:	0800bac4 	.word	0x0800bac4
 80073ec:	0800bad0 	.word	0x0800bad0
 80073f0:	20013870 	.word	0x20013870
 80073f4:	0800badc 	.word	0x0800badc
 80073f8:	0800bae4 	.word	0x0800bae4
 80073fc:	0800baec 	.word	0x0800baec

08007400 <lcd_screen_4_refresh>:

void lcd_screen_4_refresh() {
 8007400:	b580      	push	{r7, lr}
 8007402:	b08e      	sub	sp, #56	; 0x38
 8007404:	af02      	add	r7, sp, #8
	char time_buf[9];
	char val_buf[10];
	char range_buf[2];
	char interval_buf[7];

	LCD5110_Clear();
 8007406:	f7fa fb1f 	bl	8001a48 <LCD5110_Clear>

	if(screen4_mode == S4_NORMAL_DISPLAY) {
 800740a:	4bc0      	ldr	r3, [pc, #768]	; (800770c <lcd_screen_4_refresh+0x30c>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f040 80af 	bne.w	8007572 <lcd_screen_4_refresh+0x172>

		lcd_puts_xy(0, 0, "PKV", 1, 1);
 8007414:	2301      	movs	r3, #1
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	2301      	movs	r3, #1
 800741a:	4abd      	ldr	r2, [pc, #756]	; (8007710 <lcd_screen_4_refresh+0x310>)
 800741c:	2100      	movs	r1, #0
 800741e:	2000      	movs	r0, #0
 8007420:	f7ff fd10 	bl	8006e44 <lcd_puts_xy>
		range_scale(screen4_data.User_PKV, val_buf, range_buf);
 8007424:	4bbb      	ldr	r3, [pc, #748]	; (8007714 <lcd_screen_4_refresh+0x314>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f107 0208 	add.w	r2, r7, #8
 800742c:	f107 010c 	add.w	r1, r7, #12
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff fd23 	bl	8006e7c <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 0, val_buf, 1, 1);
 8007436:	f107 020c 	add.w	r2, r7, #12
 800743a:	2301      	movs	r3, #1
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	2301      	movs	r3, #1
 8007440:	2100      	movs	r1, #0
 8007442:	201c      	movs	r0, #28
 8007444:	f7ff fcfe 	bl	8006e44 <lcd_puts_xy>
//		lcd_puts_xy(VALUE_RANGE_COLUMN, 0, range_buf, 1, 1);
		lcd_puts_xy(UNITS_COLUMN, 0, "V", 1, 1);
 8007448:	2301      	movs	r3, #1
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	2301      	movs	r3, #1
 800744e:	4ab2      	ldr	r2, [pc, #712]	; (8007718 <lcd_screen_4_refresh+0x318>)
 8007450:	2100      	movs	r1, #0
 8007452:	2042      	movs	r0, #66	; 0x42
 8007454:	f7ff fcf6 	bl	8006e44 <lcd_puts_xy>

		lcd_puts_xy(0, 10, "PKI", 1, 1);
 8007458:	2301      	movs	r3, #1
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	2301      	movs	r3, #1
 800745e:	4aaf      	ldr	r2, [pc, #700]	; (800771c <lcd_screen_4_refresh+0x31c>)
 8007460:	210a      	movs	r1, #10
 8007462:	2000      	movs	r0, #0
 8007464:	f7ff fcee 	bl	8006e44 <lcd_puts_xy>
		range_scale(screen4_data.User_PKI, val_buf, range_buf);
 8007468:	4baa      	ldr	r3, [pc, #680]	; (8007714 <lcd_screen_4_refresh+0x314>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f107 0208 	add.w	r2, r7, #8
 8007470:	f107 010c 	add.w	r1, r7, #12
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fd01 	bl	8006e7c <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 10, val_buf, 1, 1);
 800747a:	f107 020c 	add.w	r2, r7, #12
 800747e:	2301      	movs	r3, #1
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	2301      	movs	r3, #1
 8007484:	210a      	movs	r1, #10
 8007486:	201c      	movs	r0, #28
 8007488:	f7ff fcdc 	bl	8006e44 <lcd_puts_xy>
//		lcd_puts_xy(VALUE_RANGE_COLUMN, 10, range_buf, 1, 1);
		lcd_puts_xy(UNITS_COLUMN, 10, "A", 1, 1);
 800748c:	2301      	movs	r3, #1
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	2301      	movs	r3, #1
 8007492:	4aa3      	ldr	r2, [pc, #652]	; (8007720 <lcd_screen_4_refresh+0x320>)
 8007494:	210a      	movs	r1, #10
 8007496:	2042      	movs	r0, #66	; 0x42
 8007498:	f7ff fcd4 	bl	8006e44 <lcd_puts_xy>

		lcd_puts_xy(0, 20, "SAG", 1, 1);
 800749c:	2301      	movs	r3, #1
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	2301      	movs	r3, #1
 80074a2:	4aa0      	ldr	r2, [pc, #640]	; (8007724 <lcd_screen_4_refresh+0x324>)
 80074a4:	2114      	movs	r1, #20
 80074a6:	2000      	movs	r0, #0
 80074a8:	f7ff fccc 	bl	8006e44 <lcd_puts_xy>
		range_scale(screen4_data.User_SAG, val_buf, range_buf);
 80074ac:	4b99      	ldr	r3, [pc, #612]	; (8007714 <lcd_screen_4_refresh+0x314>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f107 0208 	add.w	r2, r7, #8
 80074b4:	f107 010c 	add.w	r1, r7, #12
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fcdf 	bl	8006e7c <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 20, val_buf, 1, 1);
 80074be:	f107 020c 	add.w	r2, r7, #12
 80074c2:	2301      	movs	r3, #1
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	2301      	movs	r3, #1
 80074c8:	2114      	movs	r1, #20
 80074ca:	201c      	movs	r0, #28
 80074cc:	f7ff fcba 	bl	8006e44 <lcd_puts_xy>
//		lcd_puts_xy(VALUE_RANGE_COLUMN, 20, range_buf, 1, 1);
		lcd_puts_xy(UNITS_COLUMN, 20, "V", 1, 1);
 80074d0:	2301      	movs	r3, #1
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	2301      	movs	r3, #1
 80074d6:	4a90      	ldr	r2, [pc, #576]	; (8007718 <lcd_screen_4_refresh+0x318>)
 80074d8:	2114      	movs	r1, #20
 80074da:	2042      	movs	r0, #66	; 0x42
 80074dc:	f7ff fcb2 	bl	8006e44 <lcd_puts_xy>

		lcd_puts_xy(0, 30, "Intv", 1, 1);
 80074e0:	2301      	movs	r3, #1
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2301      	movs	r3, #1
 80074e6:	4a90      	ldr	r2, [pc, #576]	; (8007728 <lcd_screen_4_refresh+0x328>)
 80074e8:	211e      	movs	r1, #30
 80074ea:	2000      	movs	r0, #0
 80074ec:	f7ff fcaa 	bl	8006e44 <lcd_puts_xy>
		sprintf(interval_buf, "%02dmins", screen4_data.User_Interval);
 80074f0:	4b88      	ldr	r3, [pc, #544]	; (8007714 <lcd_screen_4_refresh+0x314>)
 80074f2:	7b1b      	ldrb	r3, [r3, #12]
 80074f4:	461a      	mov	r2, r3
 80074f6:	463b      	mov	r3, r7
 80074f8:	498c      	ldr	r1, [pc, #560]	; (800772c <lcd_screen_4_refresh+0x32c>)
 80074fa:	4618      	mov	r0, r3
 80074fc:	f002 f816 	bl	800952c <siprintf>
		lcd_puts_xy(INTVL_COLUMN, 30, interval_buf, 1, 1);
 8007500:	463a      	mov	r2, r7
 8007502:	2301      	movs	r3, #1
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	2301      	movs	r3, #1
 8007508:	211e      	movs	r1, #30
 800750a:	2028      	movs	r0, #40	; 0x28
 800750c:	f7ff fc9a 	bl	8006e44 <lcd_puts_xy>

		sprintf(date_buf, "%02u/%02u/20%02u",
				rtc_display.date,
 8007510:	4b87      	ldr	r3, [pc, #540]	; (8007730 <lcd_screen_4_refresh+0x330>)
 8007512:	791b      	ldrb	r3, [r3, #4]
		sprintf(date_buf, "%02u/%02u/20%02u",
 8007514:	461a      	mov	r2, r3
				rtc_display.month,
 8007516:	4b86      	ldr	r3, [pc, #536]	; (8007730 <lcd_screen_4_refresh+0x330>)
 8007518:	795b      	ldrb	r3, [r3, #5]
		sprintf(date_buf, "%02u/%02u/20%02u",
 800751a:	4619      	mov	r1, r3
				rtc_display.year);
 800751c:	4b84      	ldr	r3, [pc, #528]	; (8007730 <lcd_screen_4_refresh+0x330>)
 800751e:	799b      	ldrb	r3, [r3, #6]
		sprintf(date_buf, "%02u/%02u/20%02u",
 8007520:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	460b      	mov	r3, r1
 8007528:	4982      	ldr	r1, [pc, #520]	; (8007734 <lcd_screen_4_refresh+0x334>)
 800752a:	f001 ffff 	bl	800952c <siprintf>
		lcd_puts_xy(0, ROW_LINE_4 + 2, date_buf, 1, 0);
 800752e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007532:	2300      	movs	r3, #0
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	2301      	movs	r3, #1
 8007538:	212b      	movs	r1, #43	; 0x2b
 800753a:	2000      	movs	r0, #0
 800753c:	f7ff fc82 	bl	8006e44 <lcd_puts_xy>
		sprintf(time_buf, "%02u:%02u:%02u",
				rtc_display.hours,
 8007540:	4b7b      	ldr	r3, [pc, #492]	; (8007730 <lcd_screen_4_refresh+0x330>)
 8007542:	789b      	ldrb	r3, [r3, #2]
		sprintf(time_buf, "%02u:%02u:%02u",
 8007544:	461a      	mov	r2, r3
				rtc_display.minutes,
 8007546:	4b7a      	ldr	r3, [pc, #488]	; (8007730 <lcd_screen_4_refresh+0x330>)
 8007548:	785b      	ldrb	r3, [r3, #1]
		sprintf(time_buf, "%02u:%02u:%02u",
 800754a:	4619      	mov	r1, r3
				rtc_display.seconds);
 800754c:	4b78      	ldr	r3, [pc, #480]	; (8007730 <lcd_screen_4_refresh+0x330>)
 800754e:	781b      	ldrb	r3, [r3, #0]
		sprintf(time_buf, "%02u:%02u:%02u",
 8007550:	f107 0018 	add.w	r0, r7, #24
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	460b      	mov	r3, r1
 8007558:	4977      	ldr	r1, [pc, #476]	; (8007738 <lcd_screen_4_refresh+0x338>)
 800755a:	f001 ffe7 	bl	800952c <siprintf>
		lcd_puts_xy(56, ROW_LINE_4 + 2, time_buf, 1, 0);
 800755e:	f107 0218 	add.w	r2, r7, #24
 8007562:	2300      	movs	r3, #0
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	2301      	movs	r3, #1
 8007568:	212b      	movs	r1, #43	; 0x2b
 800756a:	2038      	movs	r0, #56	; 0x38
 800756c:	f7ff fc6a 	bl	8006e44 <lcd_puts_xy>
 8007570:	e1f8      	b.n	8007964 <lcd_screen_4_refresh+0x564>

	} else {

		lcd_puts_xy(5, 0, "Configuration", 1, 1);
 8007572:	2301      	movs	r3, #1
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	2301      	movs	r3, #1
 8007578:	4a70      	ldr	r2, [pc, #448]	; (800773c <lcd_screen_4_refresh+0x33c>)
 800757a:	2100      	movs	r1, #0
 800757c:	2005      	movs	r0, #5
 800757e:	f7ff fc61 	bl	8006e44 <lcd_puts_xy>

		if(screen4_mode == S4_CONFIG_DISPLAY) {
 8007582:	4b62      	ldr	r3, [pc, #392]	; (800770c <lcd_screen_4_refresh+0x30c>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d155      	bne.n	8007636 <lcd_screen_4_refresh+0x236>
			lcd_puts_xy(10, 10, "Parameters", 1, 1);
 800758a:	2301      	movs	r3, #1
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	2301      	movs	r3, #1
 8007590:	4a6b      	ldr	r2, [pc, #428]	; (8007740 <lcd_screen_4_refresh+0x340>)
 8007592:	210a      	movs	r1, #10
 8007594:	200a      	movs	r0, #10
 8007596:	f7ff fc55 	bl	8006e44 <lcd_puts_xy>
			lcd_puts_xy(10, 20, "Date & Time", 1, 1);
 800759a:	2301      	movs	r3, #1
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	2301      	movs	r3, #1
 80075a0:	4a68      	ldr	r2, [pc, #416]	; (8007744 <lcd_screen_4_refresh+0x344>)
 80075a2:	2114      	movs	r1, #20
 80075a4:	200a      	movs	r0, #10
 80075a6:	f7ff fc4d 	bl	8006e44 <lcd_puts_xy>
			if(screen4_config_option == Config_Params)
 80075aa:	4b67      	ldr	r3, [pc, #412]	; (8007748 <lcd_screen_4_refresh+0x348>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d108      	bne.n	80075c4 <lcd_screen_4_refresh+0x1c4>
				lcd_puts_xy(0, 10, ">", 1, 1);
 80075b2:	2301      	movs	r3, #1
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	2301      	movs	r3, #1
 80075b8:	4a64      	ldr	r2, [pc, #400]	; (800774c <lcd_screen_4_refresh+0x34c>)
 80075ba:	210a      	movs	r1, #10
 80075bc:	2000      	movs	r0, #0
 80075be:	f7ff fc41 	bl	8006e44 <lcd_puts_xy>
 80075c2:	e007      	b.n	80075d4 <lcd_screen_4_refresh+0x1d4>
			else lcd_puts_xy(0, 20, ">", 1, 1);
 80075c4:	2301      	movs	r3, #1
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	2301      	movs	r3, #1
 80075ca:	4a60      	ldr	r2, [pc, #384]	; (800774c <lcd_screen_4_refresh+0x34c>)
 80075cc:	2114      	movs	r1, #20
 80075ce:	2000      	movs	r0, #0
 80075d0:	f7ff fc38 	bl	8006e44 <lcd_puts_xy>

			sprintf(date_buf, "%02u/%02u/20%02u",
					rtc_display.date,
 80075d4:	4b56      	ldr	r3, [pc, #344]	; (8007730 <lcd_screen_4_refresh+0x330>)
 80075d6:	791b      	ldrb	r3, [r3, #4]
			sprintf(date_buf, "%02u/%02u/20%02u",
 80075d8:	461a      	mov	r2, r3
					rtc_display.month,
 80075da:	4b55      	ldr	r3, [pc, #340]	; (8007730 <lcd_screen_4_refresh+0x330>)
 80075dc:	795b      	ldrb	r3, [r3, #5]
			sprintf(date_buf, "%02u/%02u/20%02u",
 80075de:	4619      	mov	r1, r3
					rtc_display.year);
 80075e0:	4b53      	ldr	r3, [pc, #332]	; (8007730 <lcd_screen_4_refresh+0x330>)
 80075e2:	799b      	ldrb	r3, [r3, #6]
			sprintf(date_buf, "%02u/%02u/20%02u",
 80075e4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	460b      	mov	r3, r1
 80075ec:	4951      	ldr	r1, [pc, #324]	; (8007734 <lcd_screen_4_refresh+0x334>)
 80075ee:	f001 ff9d 	bl	800952c <siprintf>
			lcd_puts_xy(0, ROW_LINE_4 + 2, date_buf, 1, 0);
 80075f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80075f6:	2300      	movs	r3, #0
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	2301      	movs	r3, #1
 80075fc:	212b      	movs	r1, #43	; 0x2b
 80075fe:	2000      	movs	r0, #0
 8007600:	f7ff fc20 	bl	8006e44 <lcd_puts_xy>
			sprintf(time_buf, "%02u:%02u:%02u",
					rtc_display.hours,
 8007604:	4b4a      	ldr	r3, [pc, #296]	; (8007730 <lcd_screen_4_refresh+0x330>)
 8007606:	789b      	ldrb	r3, [r3, #2]
			sprintf(time_buf, "%02u:%02u:%02u",
 8007608:	461a      	mov	r2, r3
					rtc_display.minutes,
 800760a:	4b49      	ldr	r3, [pc, #292]	; (8007730 <lcd_screen_4_refresh+0x330>)
 800760c:	785b      	ldrb	r3, [r3, #1]
			sprintf(time_buf, "%02u:%02u:%02u",
 800760e:	4619      	mov	r1, r3
					rtc_display.seconds);
 8007610:	4b47      	ldr	r3, [pc, #284]	; (8007730 <lcd_screen_4_refresh+0x330>)
 8007612:	781b      	ldrb	r3, [r3, #0]
			sprintf(time_buf, "%02u:%02u:%02u",
 8007614:	f107 0018 	add.w	r0, r7, #24
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	460b      	mov	r3, r1
 800761c:	4946      	ldr	r1, [pc, #280]	; (8007738 <lcd_screen_4_refresh+0x338>)
 800761e:	f001 ff85 	bl	800952c <siprintf>
			lcd_puts_xy(56, ROW_LINE_4 + 2, time_buf, 1, 0);
 8007622:	f107 0218 	add.w	r2, r7, #24
 8007626:	2300      	movs	r3, #0
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	2301      	movs	r3, #1
 800762c:	212b      	movs	r1, #43	; 0x2b
 800762e:	2038      	movs	r0, #56	; 0x38
 8007630:	f7ff fc08 	bl	8006e44 <lcd_puts_xy>
 8007634:	e196      	b.n	8007964 <lcd_screen_4_refresh+0x564>

		} else if (screen4_mode == S4_CONFIG_PARAMS_DISPLAY) {
 8007636:	4b35      	ldr	r3, [pc, #212]	; (800770c <lcd_screen_4_refresh+0x30c>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b02      	cmp	r3, #2
 800763c:	f040 8107 	bne.w	800784e <lcd_screen_4_refresh+0x44e>
			lcd_puts_xy(0, 10, "PKV", 1, 1);
 8007640:	2301      	movs	r3, #1
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	2301      	movs	r3, #1
 8007646:	4a32      	ldr	r2, [pc, #200]	; (8007710 <lcd_screen_4_refresh+0x310>)
 8007648:	210a      	movs	r1, #10
 800764a:	2000      	movs	r0, #0
 800764c:	f7ff fbfa 	bl	8006e44 <lcd_puts_xy>
			lcd_puts_xy(0, 20, "PKI", 1, 1);
 8007650:	2301      	movs	r3, #1
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	2301      	movs	r3, #1
 8007656:	4a31      	ldr	r2, [pc, #196]	; (800771c <lcd_screen_4_refresh+0x31c>)
 8007658:	2114      	movs	r1, #20
 800765a:	2000      	movs	r0, #0
 800765c:	f7ff fbf2 	bl	8006e44 <lcd_puts_xy>
			lcd_puts_xy(0, 30, "SAG", 1, 1);
 8007660:	2301      	movs	r3, #1
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	2301      	movs	r3, #1
 8007666:	4a2f      	ldr	r2, [pc, #188]	; (8007724 <lcd_screen_4_refresh+0x324>)
 8007668:	211e      	movs	r1, #30
 800766a:	2000      	movs	r0, #0
 800766c:	f7ff fbea 	bl	8006e44 <lcd_puts_xy>
			lcd_puts_xy(0, 40, "Intv", 1, 1);
 8007670:	2301      	movs	r3, #1
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	2301      	movs	r3, #1
 8007676:	4a2c      	ldr	r2, [pc, #176]	; (8007728 <lcd_screen_4_refresh+0x328>)
 8007678:	2128      	movs	r1, #40	; 0x28
 800767a:	2000      	movs	r0, #0
 800767c:	f7ff fbe2 	bl	8006e44 <lcd_puts_xy>

			switch (screen4_config_item) {
 8007680:	4b33      	ldr	r3, [pc, #204]	; (8007750 <lcd_screen_4_refresh+0x350>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b07      	cmp	r3, #7
 8007686:	f200 8082 	bhi.w	800778e <lcd_screen_4_refresh+0x38e>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <lcd_screen_4_refresh+0x290>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076b1 	.word	0x080076b1
 8007694:	080076c3 	.word	0x080076c3
 8007698:	080076d5 	.word	0x080076d5
 800769c:	080076e7 	.word	0x080076e7
 80076a0:	080076f9 	.word	0x080076f9
 80076a4:	08007759 	.word	0x08007759
 80076a8:	0800776b 	.word	0x0800776b
 80076ac:	0800777d 	.word	0x0800777d
				case Config_pkv:
					lcd_puts_xy(20, 10, "<", 1, 1);
 80076b0:	2301      	movs	r3, #1
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	2301      	movs	r3, #1
 80076b6:	4a27      	ldr	r2, [pc, #156]	; (8007754 <lcd_screen_4_refresh+0x354>)
 80076b8:	210a      	movs	r1, #10
 80076ba:	2014      	movs	r0, #20
 80076bc:	f7ff fbc2 	bl	8006e44 <lcd_puts_xy>
					break;
 80076c0:	e066      	b.n	8007790 <lcd_screen_4_refresh+0x390>
				case Config_pkv_selected:
					lcd_puts_xy(20, 10, ">", 1, 1);
 80076c2:	2301      	movs	r3, #1
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	2301      	movs	r3, #1
 80076c8:	4a20      	ldr	r2, [pc, #128]	; (800774c <lcd_screen_4_refresh+0x34c>)
 80076ca:	210a      	movs	r1, #10
 80076cc:	2014      	movs	r0, #20
 80076ce:	f7ff fbb9 	bl	8006e44 <lcd_puts_xy>
					break;
 80076d2:	e05d      	b.n	8007790 <lcd_screen_4_refresh+0x390>
				case Config_pki:
					lcd_puts_xy(20, 20, "<", 1, 1);
 80076d4:	2301      	movs	r3, #1
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	2301      	movs	r3, #1
 80076da:	4a1e      	ldr	r2, [pc, #120]	; (8007754 <lcd_screen_4_refresh+0x354>)
 80076dc:	2114      	movs	r1, #20
 80076de:	2014      	movs	r0, #20
 80076e0:	f7ff fbb0 	bl	8006e44 <lcd_puts_xy>
					break;
 80076e4:	e054      	b.n	8007790 <lcd_screen_4_refresh+0x390>
				case Config_pki_selected:
					lcd_puts_xy(20, 20, ">", 1, 1);
 80076e6:	2301      	movs	r3, #1
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	2301      	movs	r3, #1
 80076ec:	4a17      	ldr	r2, [pc, #92]	; (800774c <lcd_screen_4_refresh+0x34c>)
 80076ee:	2114      	movs	r1, #20
 80076f0:	2014      	movs	r0, #20
 80076f2:	f7ff fba7 	bl	8006e44 <lcd_puts_xy>
					break;
 80076f6:	e04b      	b.n	8007790 <lcd_screen_4_refresh+0x390>
				case Config_sag:
					lcd_puts_xy(20, 30, "<", 1, 1);
 80076f8:	2301      	movs	r3, #1
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	2301      	movs	r3, #1
 80076fe:	4a15      	ldr	r2, [pc, #84]	; (8007754 <lcd_screen_4_refresh+0x354>)
 8007700:	211e      	movs	r1, #30
 8007702:	2014      	movs	r0, #20
 8007704:	f7ff fb9e 	bl	8006e44 <lcd_puts_xy>
					break;
 8007708:	e042      	b.n	8007790 <lcd_screen_4_refresh+0x390>
 800770a:	bf00      	nop
 800770c:	200138c4 	.word	0x200138c4
 8007710:	0800bafc 	.word	0x0800bafc
 8007714:	200138ac 	.word	0x200138ac
 8007718:	0800ba78 	.word	0x0800ba78
 800771c:	0800bb00 	.word	0x0800bb00
 8007720:	0800ba88 	.word	0x0800ba88
 8007724:	0800bb04 	.word	0x0800bb04
 8007728:	0800bb08 	.word	0x0800bb08
 800772c:	0800bb10 	.word	0x0800bb10
 8007730:	200138a4 	.word	0x200138a4
 8007734:	0800bb1c 	.word	0x0800bb1c
 8007738:	0800baec 	.word	0x0800baec
 800773c:	0800bb30 	.word	0x0800bb30
 8007740:	0800bb40 	.word	0x0800bb40
 8007744:	0800bb4c 	.word	0x0800bb4c
 8007748:	200138c5 	.word	0x200138c5
 800774c:	0800bb58 	.word	0x0800bb58
 8007750:	20013891 	.word	0x20013891
 8007754:	0800bb5c 	.word	0x0800bb5c
				case Config_sag_selected:
					lcd_puts_xy(20, 30, ">", 1, 1);
 8007758:	2301      	movs	r3, #1
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	2301      	movs	r3, #1
 800775e:	4a84      	ldr	r2, [pc, #528]	; (8007970 <lcd_screen_4_refresh+0x570>)
 8007760:	211e      	movs	r1, #30
 8007762:	2014      	movs	r0, #20
 8007764:	f7ff fb6e 	bl	8006e44 <lcd_puts_xy>
					break;
 8007768:	e012      	b.n	8007790 <lcd_screen_4_refresh+0x390>
				case Config_interval:
					lcd_puts_xy(26, 40, "<", 1, 1);
 800776a:	2301      	movs	r3, #1
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	2301      	movs	r3, #1
 8007770:	4a80      	ldr	r2, [pc, #512]	; (8007974 <lcd_screen_4_refresh+0x574>)
 8007772:	2128      	movs	r1, #40	; 0x28
 8007774:	201a      	movs	r0, #26
 8007776:	f7ff fb65 	bl	8006e44 <lcd_puts_xy>
					break;
 800777a:	e009      	b.n	8007790 <lcd_screen_4_refresh+0x390>
				case Config_interval_selected:
					lcd_puts_xy(26, 40, ">", 1, 1);
 800777c:	2301      	movs	r3, #1
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	2301      	movs	r3, #1
 8007782:	4a7b      	ldr	r2, [pc, #492]	; (8007970 <lcd_screen_4_refresh+0x570>)
 8007784:	2128      	movs	r1, #40	; 0x28
 8007786:	201a      	movs	r0, #26
 8007788:	f7ff fb5c 	bl	8006e44 <lcd_puts_xy>
					break;
 800778c:	e000      	b.n	8007790 <lcd_screen_4_refresh+0x390>
				default:
					break;
 800778e:	bf00      	nop
			}

			range_scale(screen4_data_config.User_PKV, val_buf, range_buf);
 8007790:	4b79      	ldr	r3, [pc, #484]	; (8007978 <lcd_screen_4_refresh+0x578>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f107 0208 	add.w	r2, r7, #8
 8007798:	f107 010c 	add.w	r1, r7, #12
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff fb6d 	bl	8006e7c <range_scale>
			lcd_puts_xy(VALUE_COLUMN, 10, val_buf, 1, 1);
 80077a2:	f107 020c 	add.w	r2, r7, #12
 80077a6:	2301      	movs	r3, #1
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	2301      	movs	r3, #1
 80077ac:	210a      	movs	r1, #10
 80077ae:	201c      	movs	r0, #28
 80077b0:	f7ff fb48 	bl	8006e44 <lcd_puts_xy>
//			lcd_puts_xy(VALUE_RANGE_COLUMN, 10, range_buf, 1, 1);
			lcd_puts_xy(UNITS_COLUMN, 10, "V", 1, 1);
 80077b4:	2301      	movs	r3, #1
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	2301      	movs	r3, #1
 80077ba:	4a70      	ldr	r2, [pc, #448]	; (800797c <lcd_screen_4_refresh+0x57c>)
 80077bc:	210a      	movs	r1, #10
 80077be:	2042      	movs	r0, #66	; 0x42
 80077c0:	f7ff fb40 	bl	8006e44 <lcd_puts_xy>

			range_scale(screen4_data_config.User_PKI, val_buf, range_buf);
 80077c4:	4b6c      	ldr	r3, [pc, #432]	; (8007978 <lcd_screen_4_refresh+0x578>)
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f107 0208 	add.w	r2, r7, #8
 80077cc:	f107 010c 	add.w	r1, r7, #12
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff fb53 	bl	8006e7c <range_scale>
			lcd_puts_xy(VALUE_COLUMN, 20, val_buf, 1, 1);
 80077d6:	f107 020c 	add.w	r2, r7, #12
 80077da:	2301      	movs	r3, #1
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	2301      	movs	r3, #1
 80077e0:	2114      	movs	r1, #20
 80077e2:	201c      	movs	r0, #28
 80077e4:	f7ff fb2e 	bl	8006e44 <lcd_puts_xy>
//			lcd_puts_xy(VALUE_RANGE_COLUMN, 20, range_buf, 1, 1);
			lcd_puts_xy(UNITS_COLUMN, 20, "A", 1, 1);
 80077e8:	2301      	movs	r3, #1
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	2301      	movs	r3, #1
 80077ee:	4a64      	ldr	r2, [pc, #400]	; (8007980 <lcd_screen_4_refresh+0x580>)
 80077f0:	2114      	movs	r1, #20
 80077f2:	2042      	movs	r0, #66	; 0x42
 80077f4:	f7ff fb26 	bl	8006e44 <lcd_puts_xy>

			range_scale(screen4_data_config.User_SAG, val_buf, range_buf);
 80077f8:	4b5f      	ldr	r3, [pc, #380]	; (8007978 <lcd_screen_4_refresh+0x578>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f107 0208 	add.w	r2, r7, #8
 8007800:	f107 010c 	add.w	r1, r7, #12
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff fb39 	bl	8006e7c <range_scale>
			lcd_puts_xy(VALUE_COLUMN, 30, val_buf, 1, 1);
 800780a:	f107 020c 	add.w	r2, r7, #12
 800780e:	2301      	movs	r3, #1
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	2301      	movs	r3, #1
 8007814:	211e      	movs	r1, #30
 8007816:	201c      	movs	r0, #28
 8007818:	f7ff fb14 	bl	8006e44 <lcd_puts_xy>
//			lcd_puts_xy(VALUE_RANGE_COLUMN, 30, range_buf, 1, 1);
			lcd_puts_xy(UNITS_COLUMN, 30, "V", 1, 1);
 800781c:	2301      	movs	r3, #1
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	2301      	movs	r3, #1
 8007822:	4a56      	ldr	r2, [pc, #344]	; (800797c <lcd_screen_4_refresh+0x57c>)
 8007824:	211e      	movs	r1, #30
 8007826:	2042      	movs	r0, #66	; 0x42
 8007828:	f7ff fb0c 	bl	8006e44 <lcd_puts_xy>

			sprintf(interval_buf, "%02dmins", screen4_data_config.User_Interval);
 800782c:	4b52      	ldr	r3, [pc, #328]	; (8007978 <lcd_screen_4_refresh+0x578>)
 800782e:	7b1b      	ldrb	r3, [r3, #12]
 8007830:	461a      	mov	r2, r3
 8007832:	463b      	mov	r3, r7
 8007834:	4953      	ldr	r1, [pc, #332]	; (8007984 <lcd_screen_4_refresh+0x584>)
 8007836:	4618      	mov	r0, r3
 8007838:	f001 fe78 	bl	800952c <siprintf>
			lcd_puts_xy(INTVL_COLUMN, 40, interval_buf, 1, 1);
 800783c:	463a      	mov	r2, r7
 800783e:	2301      	movs	r3, #1
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	2301      	movs	r3, #1
 8007844:	2128      	movs	r1, #40	; 0x28
 8007846:	2028      	movs	r0, #40	; 0x28
 8007848:	f7ff fafc 	bl	8006e44 <lcd_puts_xy>
 800784c:	e08a      	b.n	8007964 <lcd_screen_4_refresh+0x564>


		} else if (screen4_mode == S4_CONFIG_DATETIME_DISPLAY) {
 800784e:	4b4e      	ldr	r3, [pc, #312]	; (8007988 <lcd_screen_4_refresh+0x588>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b03      	cmp	r3, #3
 8007854:	d176      	bne.n	8007944 <lcd_screen_4_refresh+0x544>
			lcd_puts_xy(0, 10, "Date", 1, 1);
 8007856:	2301      	movs	r3, #1
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	2301      	movs	r3, #1
 800785c:	4a4b      	ldr	r2, [pc, #300]	; (800798c <lcd_screen_4_refresh+0x58c>)
 800785e:	210a      	movs	r1, #10
 8007860:	2000      	movs	r0, #0
 8007862:	f7ff faef 	bl	8006e44 <lcd_puts_xy>
			lcd_puts_xy(0, 30, "Time", 1, 1);
 8007866:	2301      	movs	r3, #1
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	2301      	movs	r3, #1
 800786c:	4a48      	ldr	r2, [pc, #288]	; (8007990 <lcd_screen_4_refresh+0x590>)
 800786e:	211e      	movs	r1, #30
 8007870:	2000      	movs	r0, #0
 8007872:	f7ff fae7 	bl	8006e44 <lcd_puts_xy>

			switch (screen4_config_item) {
 8007876:	4b47      	ldr	r3, [pc, #284]	; (8007994 <lcd_screen_4_refresh+0x594>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	3b08      	subs	r3, #8
 800787c:	2b03      	cmp	r3, #3
 800787e:	d82f      	bhi.n	80078e0 <lcd_screen_4_refresh+0x4e0>
 8007880:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <lcd_screen_4_refresh+0x488>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	08007899 	.word	0x08007899
 800788c:	080078ab 	.word	0x080078ab
 8007890:	080078bd 	.word	0x080078bd
 8007894:	080078cf 	.word	0x080078cf
				case Config_date:
					lcd_puts_xy(26, 10, "<", 1, 1);
 8007898:	2301      	movs	r3, #1
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	2301      	movs	r3, #1
 800789e:	4a35      	ldr	r2, [pc, #212]	; (8007974 <lcd_screen_4_refresh+0x574>)
 80078a0:	210a      	movs	r1, #10
 80078a2:	201a      	movs	r0, #26
 80078a4:	f7ff face 	bl	8006e44 <lcd_puts_xy>
					break;
 80078a8:	e01b      	b.n	80078e2 <lcd_screen_4_refresh+0x4e2>
				case Config_date_selected:
					lcd_puts_xy(0, 20, ">", 1, 1);
 80078aa:	2301      	movs	r3, #1
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	2301      	movs	r3, #1
 80078b0:	4a2f      	ldr	r2, [pc, #188]	; (8007970 <lcd_screen_4_refresh+0x570>)
 80078b2:	2114      	movs	r1, #20
 80078b4:	2000      	movs	r0, #0
 80078b6:	f7ff fac5 	bl	8006e44 <lcd_puts_xy>
					break;
 80078ba:	e012      	b.n	80078e2 <lcd_screen_4_refresh+0x4e2>
				case Config_time:
					lcd_puts_xy(26, 30, "<", 1, 1);
 80078bc:	2301      	movs	r3, #1
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	2301      	movs	r3, #1
 80078c2:	4a2c      	ldr	r2, [pc, #176]	; (8007974 <lcd_screen_4_refresh+0x574>)
 80078c4:	211e      	movs	r1, #30
 80078c6:	201a      	movs	r0, #26
 80078c8:	f7ff fabc 	bl	8006e44 <lcd_puts_xy>
					break;
 80078cc:	e009      	b.n	80078e2 <lcd_screen_4_refresh+0x4e2>
				case Config_time_selected:
					lcd_puts_xy(0, 40, ">", 1, 1);
 80078ce:	2301      	movs	r3, #1
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	2301      	movs	r3, #1
 80078d4:	4a26      	ldr	r2, [pc, #152]	; (8007970 <lcd_screen_4_refresh+0x570>)
 80078d6:	2128      	movs	r1, #40	; 0x28
 80078d8:	2000      	movs	r0, #0
 80078da:	f7ff fab3 	bl	8006e44 <lcd_puts_xy>
					break;
 80078de:	e000      	b.n	80078e2 <lcd_screen_4_refresh+0x4e2>
				default:
					break;
 80078e0:	bf00      	nop
			}

			sprintf(date_buf, "%02d/%02d/20%02d",
					rtc_config.date,
 80078e2:	4b2d      	ldr	r3, [pc, #180]	; (8007998 <lcd_screen_4_refresh+0x598>)
 80078e4:	791b      	ldrb	r3, [r3, #4]
			sprintf(date_buf, "%02d/%02d/20%02d",
 80078e6:	461a      	mov	r2, r3
					rtc_config.month,
 80078e8:	4b2b      	ldr	r3, [pc, #172]	; (8007998 <lcd_screen_4_refresh+0x598>)
 80078ea:	795b      	ldrb	r3, [r3, #5]
			sprintf(date_buf, "%02d/%02d/20%02d",
 80078ec:	4619      	mov	r1, r3
					rtc_config.year);
 80078ee:	4b2a      	ldr	r3, [pc, #168]	; (8007998 <lcd_screen_4_refresh+0x598>)
 80078f0:	799b      	ldrb	r3, [r3, #6]
			sprintf(date_buf, "%02d/%02d/20%02d",
 80078f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	460b      	mov	r3, r1
 80078fa:	4928      	ldr	r1, [pc, #160]	; (800799c <lcd_screen_4_refresh+0x59c>)
 80078fc:	f001 fe16 	bl	800952c <siprintf>
			lcd_puts_xy(20, 20, date_buf, 1, 1);
 8007900:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007904:	2301      	movs	r3, #1
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	2301      	movs	r3, #1
 800790a:	2114      	movs	r1, #20
 800790c:	2014      	movs	r0, #20
 800790e:	f7ff fa99 	bl	8006e44 <lcd_puts_xy>

			sprintf(time_buf, "%02d:%02d:%02d",
					rtc_config.hours,
 8007912:	4b21      	ldr	r3, [pc, #132]	; (8007998 <lcd_screen_4_refresh+0x598>)
 8007914:	789b      	ldrb	r3, [r3, #2]
			sprintf(time_buf, "%02d:%02d:%02d",
 8007916:	461a      	mov	r2, r3
					rtc_config.minutes,
 8007918:	4b1f      	ldr	r3, [pc, #124]	; (8007998 <lcd_screen_4_refresh+0x598>)
 800791a:	785b      	ldrb	r3, [r3, #1]
			sprintf(time_buf, "%02d:%02d:%02d",
 800791c:	4619      	mov	r1, r3
					rtc_config.seconds);
 800791e:	4b1e      	ldr	r3, [pc, #120]	; (8007998 <lcd_screen_4_refresh+0x598>)
 8007920:	781b      	ldrb	r3, [r3, #0]
			sprintf(time_buf, "%02d:%02d:%02d",
 8007922:	f107 0018 	add.w	r0, r7, #24
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	460b      	mov	r3, r1
 800792a:	491d      	ldr	r1, [pc, #116]	; (80079a0 <lcd_screen_4_refresh+0x5a0>)
 800792c:	f001 fdfe 	bl	800952c <siprintf>
			lcd_puts_xy(20, 40, time_buf, 1, 1);
 8007930:	f107 0218 	add.w	r2, r7, #24
 8007934:	2301      	movs	r3, #1
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	2301      	movs	r3, #1
 800793a:	2128      	movs	r1, #40	; 0x28
 800793c:	2014      	movs	r0, #20
 800793e:	f7ff fa81 	bl	8006e44 <lcd_puts_xy>
 8007942:	e00f      	b.n	8007964 <lcd_screen_4_refresh+0x564>

		} else {
			lcd_puts_xy(24, ROW_LINE_2, "Commit?", 1, 1);
 8007944:	2301      	movs	r3, #1
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	2301      	movs	r3, #1
 800794a:	4a16      	ldr	r2, [pc, #88]	; (80079a4 <lcd_screen_4_refresh+0x5a4>)
 800794c:	210c      	movs	r1, #12
 800794e:	2018      	movs	r0, #24
 8007950:	f7ff fa78 	bl	8006e44 <lcd_puts_xy>
			lcd_puts_xy(12, ROW_LINE_3_1, "[#]Y / [*]N", 1, 1);
 8007954:	2301      	movs	r3, #1
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	2301      	movs	r3, #1
 800795a:	4a13      	ldr	r2, [pc, #76]	; (80079a8 <lcd_screen_4_refresh+0x5a8>)
 800795c:	2118      	movs	r1, #24
 800795e:	200c      	movs	r0, #12
 8007960:	f7ff fa70 	bl	8006e44 <lcd_puts_xy>
		}
	}

	LCD5110_Refresh();
 8007964:	f7fa f8a2 	bl	8001aac <LCD5110_Refresh>
}
 8007968:	bf00      	nop
 800796a:	3730      	adds	r7, #48	; 0x30
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	0800bb58 	.word	0x0800bb58
 8007974:	0800bb5c 	.word	0x0800bb5c
 8007978:	200138c8 	.word	0x200138c8
 800797c:	0800ba78 	.word	0x0800ba78
 8007980:	0800ba88 	.word	0x0800ba88
 8007984:	0800bb10 	.word	0x0800bb10
 8007988:	200138c4 	.word	0x200138c4
 800798c:	0800bb60 	.word	0x0800bb60
 8007990:	0800bb68 	.word	0x0800bb68
 8007994:	20013891 	.word	0x20013891
 8007998:	20013878 	.word	0x20013878
 800799c:	0800bb70 	.word	0x0800bb70
 80079a0:	0800bb84 	.word	0x0800bb84
 80079a4:	0800bb94 	.word	0x0800bb94
 80079a8:	0800bad0 	.word	0x0800bad0

080079ac <lcd_screen_refresh>:

void lcd_screen_refresh(LCD_Screen_t screen) {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	71fb      	strb	r3, [r7, #7]
	switch (screen) {
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d817      	bhi.n	80079ec <lcd_screen_refresh+0x40>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <lcd_screen_refresh+0x18>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079d5 	.word	0x080079d5
 80079c8:	080079db 	.word	0x080079db
 80079cc:	080079e1 	.word	0x080079e1
 80079d0:	080079e7 	.word	0x080079e7
		case LCD_Screen_1:
			lcd_screen_1_refresh();
 80079d4:	f7ff faf4 	bl	8006fc0 <lcd_screen_1_refresh>
			break;
 80079d8:	e009      	b.n	80079ee <lcd_screen_refresh+0x42>
		case LCD_Screen_2:
			lcd_screen_2_refresh();
 80079da:	f7ff fba7 	bl	800712c <lcd_screen_2_refresh>
			break;
 80079de:	e006      	b.n	80079ee <lcd_screen_refresh+0x42>
		case LCD_Screen_3:
			lcd_screen_3_refresh();
 80079e0:	f7ff fc52 	bl	8007288 <lcd_screen_3_refresh>
			break;
 80079e4:	e003      	b.n	80079ee <lcd_screen_refresh+0x42>
		case LCD_Screen_4:
			lcd_screen_4_refresh();
 80079e6:	f7ff fd0b 	bl	8007400 <lcd_screen_4_refresh>
			break;
 80079ea:	e000      	b.n	80079ee <lcd_screen_refresh+0x42>
		default:
			break;
 80079ec:	bf00      	nop
	}
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop

080079f8 <lcd_screen_1_data_update>:

void lcd_screen_1_data_update(LCD_Data_Screen1_t data) {
 80079f8:	b490      	push	{r4, r7}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	463c      	mov	r4, r7
 8007a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	screen1_data = data;
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <lcd_screen_1_data_update+0x24>)
 8007a06:	461c      	mov	r4, r3
 8007a08:	463b      	mov	r3, r7
 8007a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bc90      	pop	{r4, r7}
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	20013894 	.word	0x20013894

08007a20 <lcd_screen_2_data_update>:

void lcd_screen_2_data_update(LCD_Data_Screen2_t data) {
 8007a20:	b490      	push	{r4, r7}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	463c      	mov	r4, r7
 8007a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	screen2_data = data;
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <lcd_screen_2_data_update+0x24>)
 8007a2e:	461c      	mov	r4, r3
 8007a30:	463b      	mov	r3, r7
 8007a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bc90      	pop	{r4, r7}
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20013880 	.word	0x20013880

08007a48 <lcd_screen_1_clear>:

void lcd_screen_4_data_update(LCD_Data_Screen4_t data) {
	screen4_data = data;
}

void lcd_screen_1_clear() {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
	memset(&screen1_data, 0, sizeof(screen1_data));
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4802      	ldr	r0, [pc, #8]	; (8007a5c <lcd_screen_1_clear+0x14>)
 8007a52:	f001 f8f7 	bl	8008c44 <memset>
}
 8007a56:	bf00      	nop
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20013894 	.word	0x20013894

08007a60 <lcd_screen_2_clear>:

void lcd_screen_2_clear() {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
	memset(&screen2_data, 0, sizeof(screen2_data));
 8007a64:	2210      	movs	r2, #16
 8007a66:	2100      	movs	r1, #0
 8007a68:	4802      	ldr	r0, [pc, #8]	; (8007a74 <lcd_screen_2_clear+0x14>)
 8007a6a:	f001 f8eb 	bl	8008c44 <memset>
}
 8007a6e:	bf00      	nop
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20013880 	.word	0x20013880

08007a78 <lcd_screen_3_clear>:

void lcd_screen_3_clear() {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
	memset(&screen3_data, 0, sizeof(screen3_data));
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	2100      	movs	r1, #0
 8007a80:	4806      	ldr	r0, [pc, #24]	; (8007a9c <lcd_screen_3_clear+0x24>)
 8007a82:	f001 f8df 	bl	8008c44 <memset>
	memset(&screen3_timer, 0, sizeof(screen3_timer));
 8007a86:	2208      	movs	r2, #8
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4805      	ldr	r0, [pc, #20]	; (8007aa0 <lcd_screen_3_clear+0x28>)
 8007a8c:	f001 f8da 	bl	8008c44 <memset>
	screen3_mode = S3_NORMAL_DISPLAY;
 8007a90:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <lcd_screen_3_clear+0x2c>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
}
 8007a96:	bf00      	nop
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200138bc 	.word	0x200138bc
 8007aa0:	20013870 	.word	0x20013870
 8007aa4:	20013890 	.word	0x20013890

08007aa8 <lcd_screen_4_clear>:

void lcd_screen_4_clear() {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
	memset(&screen4_data, 0, sizeof(screen4_data));
 8007aac:	2210      	movs	r2, #16
 8007aae:	2100      	movs	r1, #0
 8007ab0:	4808      	ldr	r0, [pc, #32]	; (8007ad4 <lcd_screen_4_clear+0x2c>)
 8007ab2:	f001 f8c7 	bl	8008c44 <memset>
	screen4_data.User_Interval = Sample_Interval_60;
 8007ab6:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <lcd_screen_4_clear+0x2c>)
 8007ab8:	223c      	movs	r2, #60	; 0x3c
 8007aba:	731a      	strb	r2, [r3, #12]
	screen4_mode = S4_NORMAL_DISPLAY;
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <lcd_screen_4_clear+0x30>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
	screen4_config_option = Config_Params;
 8007ac2:	4b06      	ldr	r3, [pc, #24]	; (8007adc <lcd_screen_4_clear+0x34>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]
	screen4_config_item = Config_pkv;
 8007ac8:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <lcd_screen_4_clear+0x38>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	701a      	strb	r2, [r3, #0]
}
 8007ace:	bf00      	nop
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200138ac 	.word	0x200138ac
 8007ad8:	200138c4 	.word	0x200138c4
 8007adc:	200138c5 	.word	0x200138c5
 8007ae0:	20013891 	.word	0x20013891

08007ae4 <lcd_screen_3_timer_count_up>:

void lcd_screen_3_timer_count_up() {
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
	screen3_timer.seconds++;
 8007ae8:	4b1c      	ldr	r3, [pc, #112]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007aea:	799b      	ldrb	r3, [r3, #6]
 8007aec:	3301      	adds	r3, #1
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007af2:	719a      	strb	r2, [r3, #6]
	if(screen3_timer.seconds > 59) {
 8007af4:	4b19      	ldr	r3, [pc, #100]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007af6:	799b      	ldrb	r3, [r3, #6]
 8007af8:	2b3b      	cmp	r3, #59	; 0x3b
 8007afa:	d92a      	bls.n	8007b52 <lcd_screen_3_timer_count_up+0x6e>
		screen3_timer.seconds -= 60;
 8007afc:	4b17      	ldr	r3, [pc, #92]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007afe:	799b      	ldrb	r3, [r3, #6]
 8007b00:	3b3c      	subs	r3, #60	; 0x3c
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	4b15      	ldr	r3, [pc, #84]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b06:	719a      	strb	r2, [r3, #6]
		screen3_timer.minutes++;
 8007b08:	4b14      	ldr	r3, [pc, #80]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b0a:	795b      	ldrb	r3, [r3, #5]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b12:	715a      	strb	r2, [r3, #5]
		if(screen3_timer.minutes > 59) {
 8007b14:	4b11      	ldr	r3, [pc, #68]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b16:	795b      	ldrb	r3, [r3, #5]
 8007b18:	2b3b      	cmp	r3, #59	; 0x3b
 8007b1a:	d91a      	bls.n	8007b52 <lcd_screen_3_timer_count_up+0x6e>
			screen3_timer.minutes -= 60;
 8007b1c:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b1e:	795b      	ldrb	r3, [r3, #5]
 8007b20:	3b3c      	subs	r3, #60	; 0x3c
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b26:	715a      	strb	r2, [r3, #5]
			screen3_timer.hours++;
 8007b28:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b2a:	791b      	ldrb	r3, [r3, #4]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b32:	711a      	strb	r2, [r3, #4]
			if(screen3_timer.hours > 23) {
 8007b34:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b36:	791b      	ldrb	r3, [r3, #4]
 8007b38:	2b17      	cmp	r3, #23
 8007b3a:	d90a      	bls.n	8007b52 <lcd_screen_3_timer_count_up+0x6e>
				screen3_timer.hours -= 24;
 8007b3c:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b3e:	791b      	ldrb	r3, [r3, #4]
 8007b40:	3b18      	subs	r3, #24
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b46:	711a      	strb	r2, [r3, #4]
				screen3_timer.days++;
 8007b48:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	4a03      	ldr	r2, [pc, #12]	; (8007b5c <lcd_screen_3_timer_count_up+0x78>)
 8007b50:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 8007b52:	bf00      	nop
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	20013870 	.word	0x20013870

08007b60 <lcd_screen_3_switch_mode>:

void lcd_screen_3_switch_mode(LCD_Screen3_Mode mode) {
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	71fb      	strb	r3, [r7, #7]
	screen3_mode = mode;
 8007b6a:	4a04      	ldr	r2, [pc, #16]	; (8007b7c <lcd_screen_3_switch_mode+0x1c>)
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	7013      	strb	r3, [r2, #0]
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	20013890 	.word	0x20013890

08007b80 <lcd_screen_4_rtc_update>:

LCD_Screen3_Mode lcd_screen_3_mode() {
	return screen3_mode;
}

void lcd_screen_4_rtc_update(DS1307_DateTime_t datetime) {
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	463b      	mov	r3, r7
 8007b88:	e883 0003 	stmia.w	r3, {r0, r1}
	rtc_display = datetime;
 8007b8c:	4b07      	ldr	r3, [pc, #28]	; (8007bac <lcd_screen_4_rtc_update+0x2c>)
 8007b8e:	461a      	mov	r2, r3
 8007b90:	463b      	mov	r3, r7
 8007b92:	6818      	ldr	r0, [r3, #0]
 8007b94:	6010      	str	r0, [r2, #0]
 8007b96:	8899      	ldrh	r1, [r3, #4]
 8007b98:	799b      	ldrb	r3, [r3, #6]
 8007b9a:	8091      	strh	r1, [r2, #4]
 8007b9c:	7193      	strb	r3, [r2, #6]
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	200138a4 	.word	0x200138a4

08007bb0 <lcd_screen_4_switch_mode>:

void lcd_screen_4_switch_mode(LCD_Screen4_Mode mode) {
 8007bb0:	b490      	push	{r4, r7}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
	if(mode == S4_CONFIG_PARAMS_DISPLAY) {
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d10c      	bne.n	8007bda <lcd_screen_4_switch_mode+0x2a>
		if(screen4_mode == S4_CONFIG_DISPLAY) {
 8007bc0:	4b18      	ldr	r3, [pc, #96]	; (8007c24 <lcd_screen_4_switch_mode+0x74>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d108      	bne.n	8007bda <lcd_screen_4_switch_mode+0x2a>
			screen4_config_item = Config_pkv;
 8007bc8:	4b17      	ldr	r3, [pc, #92]	; (8007c28 <lcd_screen_4_switch_mode+0x78>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	701a      	strb	r2, [r3, #0]
			screen4_data_config = screen4_data;
 8007bce:	4a17      	ldr	r2, [pc, #92]	; (8007c2c <lcd_screen_4_switch_mode+0x7c>)
 8007bd0:	4b17      	ldr	r3, [pc, #92]	; (8007c30 <lcd_screen_4_switch_mode+0x80>)
 8007bd2:	4614      	mov	r4, r2
 8007bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007bd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}

	if(mode == S4_CONFIG_DATETIME_DISPLAY) {
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d106      	bne.n	8007bee <lcd_screen_4_switch_mode+0x3e>
		if(screen4_mode == S4_CONFIG_DISPLAY) {
 8007be0:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <lcd_screen_4_switch_mode+0x74>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d102      	bne.n	8007bee <lcd_screen_4_switch_mode+0x3e>
			screen4_config_item = Config_date;
 8007be8:	4b0f      	ldr	r3, [pc, #60]	; (8007c28 <lcd_screen_4_switch_mode+0x78>)
 8007bea:	2208      	movs	r2, #8
 8007bec:	701a      	strb	r2, [r3, #0]
		}
	}

	if(mode == S4_CONFIG_DISPLAY) {
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d10e      	bne.n	8007c12 <lcd_screen_4_switch_mode+0x62>
		if(screen4_mode == S4_NORMAL_DISPLAY) {
 8007bf4:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <lcd_screen_4_switch_mode+0x74>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <lcd_screen_4_switch_mode+0x62>
			screen4_config_option = Config_Params;
 8007bfc:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <lcd_screen_4_switch_mode+0x84>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
			rtc_config = rtc_display;
 8007c02:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <lcd_screen_4_switch_mode+0x88>)
 8007c04:	4a0d      	ldr	r2, [pc, #52]	; (8007c3c <lcd_screen_4_switch_mode+0x8c>)
 8007c06:	6811      	ldr	r1, [r2, #0]
 8007c08:	6019      	str	r1, [r3, #0]
 8007c0a:	8891      	ldrh	r1, [r2, #4]
 8007c0c:	7992      	ldrb	r2, [r2, #6]
 8007c0e:	8099      	strh	r1, [r3, #4]
 8007c10:	719a      	strb	r2, [r3, #6]
		}
	}
	screen4_mode = mode;
 8007c12:	4a04      	ldr	r2, [pc, #16]	; (8007c24 <lcd_screen_4_switch_mode+0x74>)
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	7013      	strb	r3, [r2, #0]
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc90      	pop	{r4, r7}
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	200138c4 	.word	0x200138c4
 8007c28:	20013891 	.word	0x20013891
 8007c2c:	200138c8 	.word	0x200138c8
 8007c30:	200138ac 	.word	0x200138ac
 8007c34:	200138c5 	.word	0x200138c5
 8007c38:	20013878 	.word	0x20013878
 8007c3c:	200138a4 	.word	0x200138a4

08007c40 <lcd_screen_4_mode>:

LCD_Screen4_Mode lcd_screen_4_mode() {
 8007c40:	b480      	push	{r7}
 8007c42:	af00      	add	r7, sp, #0
	return screen4_mode;
 8007c44:	4b03      	ldr	r3, [pc, #12]	; (8007c54 <lcd_screen_4_mode+0x14>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	200138c4 	.word	0x200138c4

08007c58 <lcd_screen_4_config_option>:

Config_Option_t lcd_screen_4_config_option() {
 8007c58:	b480      	push	{r7}
 8007c5a:	af00      	add	r7, sp, #0
	return screen4_config_option;
 8007c5c:	4b03      	ldr	r3, [pc, #12]	; (8007c6c <lcd_screen_4_config_option+0x14>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	200138c5 	.word	0x200138c5

08007c70 <lcd_screen_4_config_item>:

Config_Items_t lcd_screen_4_config_item() {
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
	return screen4_config_item;
 8007c74:	4b03      	ldr	r3, [pc, #12]	; (8007c84 <lcd_screen_4_config_item+0x14>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20013891 	.word	0x20013891

08007c88 <lcd_screen_4_next_config_option>:

void lcd_screen_4_next_config_option() {
 8007c88:	b480      	push	{r7}
 8007c8a:	af00      	add	r7, sp, #0
	screen4_config_option ^= 1;
 8007c8c:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <lcd_screen_4_next_config_option+0x1c>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	f083 0301 	eor.w	r3, r3, #1
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <lcd_screen_4_next_config_option+0x1c>)
 8007c98:	701a      	strb	r2, [r3, #0]
}
 8007c9a:	bf00      	nop
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	200138c5 	.word	0x200138c5

08007ca8 <lcd_screen_4_next_config_item>:

void lcd_screen_4_next_config_item() {
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
	if(!(screen4_config_item % 2)) {
 8007cac:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <lcd_screen_4_next_config_item+0x54>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d11b      	bne.n	8007cf2 <lcd_screen_4_next_config_item+0x4a>
		screen4_config_item += 2;
 8007cba:	4b10      	ldr	r3, [pc, #64]	; (8007cfc <lcd_screen_4_next_config_item+0x54>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	3302      	adds	r3, #2
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	4b0e      	ldr	r3, [pc, #56]	; (8007cfc <lcd_screen_4_next_config_item+0x54>)
 8007cc4:	701a      	strb	r2, [r3, #0]
		if(screen4_mode == S4_CONFIG_PARAMS_DISPLAY) {
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <lcd_screen_4_next_config_item+0x58>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d106      	bne.n	8007cdc <lcd_screen_4_next_config_item+0x34>
			if(screen4_config_item > Config_interval)
 8007cce:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <lcd_screen_4_next_config_item+0x54>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b06      	cmp	r3, #6
 8007cd4:	d902      	bls.n	8007cdc <lcd_screen_4_next_config_item+0x34>
				screen4_config_item = Config_pkv;
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <lcd_screen_4_next_config_item+0x54>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	701a      	strb	r2, [r3, #0]
		}
		if(screen4_mode == S4_CONFIG_DATETIME_DISPLAY) {
 8007cdc:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <lcd_screen_4_next_config_item+0x58>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d106      	bne.n	8007cf2 <lcd_screen_4_next_config_item+0x4a>
			if(screen4_config_item == Max_Config_Items)
 8007ce4:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <lcd_screen_4_next_config_item+0x54>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b0c      	cmp	r3, #12
 8007cea:	d102      	bne.n	8007cf2 <lcd_screen_4_next_config_item+0x4a>
				screen4_config_item = Config_date;
 8007cec:	4b03      	ldr	r3, [pc, #12]	; (8007cfc <lcd_screen_4_next_config_item+0x54>)
 8007cee:	2208      	movs	r2, #8
 8007cf0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8007cf2:	bf00      	nop
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	20013891 	.word	0x20013891
 8007d00:	200138c4 	.word	0x200138c4

08007d04 <lcd_screen_4_config_select>:

void lcd_screen_4_config_select(Config_Select_t select) {
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	71fb      	strb	r3, [r7, #7]
	if(select == CONFIG_SELECT) {
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d133      	bne.n	8007d7c <lcd_screen_4_config_select+0x78>
		if(!(screen4_config_item % 2)) {
 8007d14:	4b24      	ldr	r3, [pc, #144]	; (8007da8 <lcd_screen_4_config_select+0xa4>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d13a      	bne.n	8007d98 <lcd_screen_4_config_select+0x94>
			switch (++screen4_config_item) {
 8007d22:	4b21      	ldr	r3, [pc, #132]	; (8007da8 <lcd_screen_4_config_select+0xa4>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	3301      	adds	r3, #1
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	4b1f      	ldr	r3, [pc, #124]	; (8007da8 <lcd_screen_4_config_select+0xa4>)
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	4b1e      	ldr	r3, [pc, #120]	; (8007da8 <lcd_screen_4_config_select+0xa4>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	2b0a      	cmp	r3, #10
 8007d36:	d831      	bhi.n	8007d9c <lcd_screen_4_config_select+0x98>
 8007d38:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <lcd_screen_4_config_select+0x3c>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d6d 	.word	0x08007d6d
 8007d44:	08007d9d 	.word	0x08007d9d
 8007d48:	08007d6d 	.word	0x08007d6d
 8007d4c:	08007d9d 	.word	0x08007d9d
 8007d50:	08007d6d 	.word	0x08007d6d
 8007d54:	08007d9d 	.word	0x08007d9d
 8007d58:	08007d9d 	.word	0x08007d9d
 8007d5c:	08007d9d 	.word	0x08007d9d
 8007d60:	08007d75 	.word	0x08007d75
 8007d64:	08007d9d 	.word	0x08007d9d
 8007d68:	08007d75 	.word	0x08007d75
				case Config_pkv_selected:
				case Config_pki_selected:
				case Config_sag_selected:
					lcd_enter_params_value(0xff);
 8007d6c:	20ff      	movs	r0, #255	; 0xff
 8007d6e:	f000 f909 	bl	8007f84 <lcd_enter_params_value>
					break;
 8007d72:	e014      	b.n	8007d9e <lcd_screen_4_config_select+0x9a>
				case Config_date_selected:
				case Config_time_selected:
					lcd_enter_datetime_value(0xff);
 8007d74:	20ff      	movs	r0, #255	; 0xff
 8007d76:	f000 f871 	bl	8007e5c <lcd_enter_datetime_value>
					break;
 8007d7a:	e010      	b.n	8007d9e <lcd_screen_4_config_select+0x9a>
				default:
					break;
			}
		}
	} else if(screen4_config_item % 2) screen4_config_item--;
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <lcd_screen_4_config_select+0xa4>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <lcd_screen_4_config_select+0x9a>
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <lcd_screen_4_config_select+0xa4>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <lcd_screen_4_config_select+0xa4>)
 8007d94:	701a      	strb	r2, [r3, #0]
}
 8007d96:	e002      	b.n	8007d9e <lcd_screen_4_config_select+0x9a>
		}
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <lcd_screen_4_config_select+0x9a>
					break;
 8007d9c:	bf00      	nop
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20013891 	.word	0x20013891

08007dac <lcd_screen_4_next_interval_set>:

void lcd_screen_4_next_interval_set() {
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
	switch(screen4_data_config.User_Interval) {
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <lcd_screen_4_next_interval_set+0x50>)
 8007db2:	7b1b      	ldrb	r3, [r3, #12]
 8007db4:	2b3c      	cmp	r3, #60	; 0x3c
 8007db6:	d016      	beq.n	8007de6 <lcd_screen_4_next_interval_set+0x3a>
 8007db8:	2b3c      	cmp	r3, #60	; 0x3c
 8007dba:	dc18      	bgt.n	8007dee <lcd_screen_4_next_interval_set+0x42>
 8007dbc:	2b1e      	cmp	r3, #30
 8007dbe:	d00e      	beq.n	8007dde <lcd_screen_4_next_interval_set+0x32>
 8007dc0:	2b1e      	cmp	r3, #30
 8007dc2:	dc14      	bgt.n	8007dee <lcd_screen_4_next_interval_set+0x42>
 8007dc4:	2b05      	cmp	r3, #5
 8007dc6:	d002      	beq.n	8007dce <lcd_screen_4_next_interval_set+0x22>
 8007dc8:	2b0f      	cmp	r3, #15
 8007dca:	d004      	beq.n	8007dd6 <lcd_screen_4_next_interval_set+0x2a>
			break;
		case Sample_Interval_60:
			screen4_data_config.User_Interval = Sample_Interval_5;
			break;
		default:
			break;
 8007dcc:	e00f      	b.n	8007dee <lcd_screen_4_next_interval_set+0x42>
			screen4_data_config.User_Interval = Sample_Interval_15;
 8007dce:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <lcd_screen_4_next_interval_set+0x50>)
 8007dd0:	220f      	movs	r2, #15
 8007dd2:	731a      	strb	r2, [r3, #12]
			break;
 8007dd4:	e00c      	b.n	8007df0 <lcd_screen_4_next_interval_set+0x44>
			screen4_data_config.User_Interval = Sample_Interval_30;
 8007dd6:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <lcd_screen_4_next_interval_set+0x50>)
 8007dd8:	221e      	movs	r2, #30
 8007dda:	731a      	strb	r2, [r3, #12]
			break;
 8007ddc:	e008      	b.n	8007df0 <lcd_screen_4_next_interval_set+0x44>
			screen4_data_config.User_Interval = Sample_Interval_60;
 8007dde:	4b07      	ldr	r3, [pc, #28]	; (8007dfc <lcd_screen_4_next_interval_set+0x50>)
 8007de0:	223c      	movs	r2, #60	; 0x3c
 8007de2:	731a      	strb	r2, [r3, #12]
			break;
 8007de4:	e004      	b.n	8007df0 <lcd_screen_4_next_interval_set+0x44>
			screen4_data_config.User_Interval = Sample_Interval_5;
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <lcd_screen_4_next_interval_set+0x50>)
 8007de8:	2205      	movs	r2, #5
 8007dea:	731a      	strb	r2, [r3, #12]
			break;
 8007dec:	e000      	b.n	8007df0 <lcd_screen_4_next_interval_set+0x44>
			break;
 8007dee:	bf00      	nop
	}
}
 8007df0:	bf00      	nop
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	200138c8 	.word	0x200138c8

08007e00 <lcd_screen_4_commit_rtc>:

DS1307_DateTime_t lcd_screen_4_commit_rtc() {
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
	return rtc_config;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a06      	ldr	r2, [pc, #24]	; (8007e24 <lcd_screen_4_commit_rtc+0x24>)
 8007e0c:	6811      	ldr	r1, [r2, #0]
 8007e0e:	6019      	str	r1, [r3, #0]
 8007e10:	8891      	ldrh	r1, [r2, #4]
 8007e12:	7992      	ldrb	r2, [r2, #6]
 8007e14:	8099      	strh	r1, [r3, #4]
 8007e16:	719a      	strb	r2, [r3, #6]
}
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20013878 	.word	0x20013878

08007e28 <lcd_screen_4_commit_parameters>:

LCD_Data_Screen4_t lcd_screen_4_commit_parameters() {
 8007e28:	b490      	push	{r4, r7}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	return screen4_data = screen4_data_config;
 8007e30:	4a08      	ldr	r2, [pc, #32]	; (8007e54 <lcd_screen_4_commit_parameters+0x2c>)
 8007e32:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <lcd_screen_4_commit_parameters+0x30>)
 8007e34:	4614      	mov	r4, r2
 8007e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a05      	ldr	r2, [pc, #20]	; (8007e54 <lcd_screen_4_commit_parameters+0x2c>)
 8007e40:	461c      	mov	r4, r3
 8007e42:	4613      	mov	r3, r2
 8007e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc90      	pop	{r4, r7}
 8007e52:	4770      	bx	lr
 8007e54:	200138ac 	.word	0x200138ac
 8007e58:	200138c8 	.word	0x200138c8

08007e5c <lcd_enter_datetime_value>:

void lcd_enter_datetime_value(KEYPAD_Button_t key) {
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	71fb      	strb	r3, [r7, #7]
	static uint32_t base_value = 0;
	static uint32_t range = 100000;

	switch (key) {
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	2b09      	cmp	r3, #9
 8007e6a:	d812      	bhi.n	8007e92 <lcd_enter_datetime_value+0x36>
		case KEYPAD_Button_6:
		case KEYPAD_Button_7:
		case KEYPAD_Button_8:
		case KEYPAD_Button_9:
			if(true) {
				base_value += ((uint8_t) key) * range;
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	4a3d      	ldr	r2, [pc, #244]	; (8007f64 <lcd_enter_datetime_value+0x108>)
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	fb02 f203 	mul.w	r2, r2, r3
 8007e76:	4b3c      	ldr	r3, [pc, #240]	; (8007f68 <lcd_enter_datetime_value+0x10c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	4a3a      	ldr	r2, [pc, #232]	; (8007f68 <lcd_enter_datetime_value+0x10c>)
 8007e7e:	6013      	str	r3, [r2, #0]
				range /= 10;
 8007e80:	4b38      	ldr	r3, [pc, #224]	; (8007f64 <lcd_enter_datetime_value+0x108>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a39      	ldr	r2, [pc, #228]	; (8007f6c <lcd_enter_datetime_value+0x110>)
 8007e86:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8a:	08db      	lsrs	r3, r3, #3
 8007e8c:	4a35      	ldr	r2, [pc, #212]	; (8007f64 <lcd_enter_datetime_value+0x108>)
 8007e8e:	6013      	str	r3, [r2, #0]
			}
			break;
 8007e90:	e006      	b.n	8007ea0 <lcd_enter_datetime_value+0x44>
		default:
			base_value = 0;
 8007e92:	4b35      	ldr	r3, [pc, #212]	; (8007f68 <lcd_enter_datetime_value+0x10c>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]
			range = 100000;
 8007e98:	4b32      	ldr	r3, [pc, #200]	; (8007f64 <lcd_enter_datetime_value+0x108>)
 8007e9a:	4a35      	ldr	r2, [pc, #212]	; (8007f70 <lcd_enter_datetime_value+0x114>)
 8007e9c:	601a      	str	r2, [r3, #0]
			break;
 8007e9e:	bf00      	nop
	}

	if(screen4_config_item == Config_date_selected) {
 8007ea0:	4b34      	ldr	r3, [pc, #208]	; (8007f74 <lcd_enter_datetime_value+0x118>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	d12a      	bne.n	8007efe <lcd_enter_datetime_value+0xa2>
		rtc_config.day = MONDAY;
 8007ea8:	4b33      	ldr	r3, [pc, #204]	; (8007f78 <lcd_enter_datetime_value+0x11c>)
 8007eaa:	2202      	movs	r2, #2
 8007eac:	70da      	strb	r2, [r3, #3]
		rtc_config.date = base_value / 10000;
 8007eae:	4b2e      	ldr	r3, [pc, #184]	; (8007f68 <lcd_enter_datetime_value+0x10c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a32      	ldr	r2, [pc, #200]	; (8007f7c <lcd_enter_datetime_value+0x120>)
 8007eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb8:	0b5b      	lsrs	r3, r3, #13
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	4b2e      	ldr	r3, [pc, #184]	; (8007f78 <lcd_enter_datetime_value+0x11c>)
 8007ebe:	711a      	strb	r2, [r3, #4]
		rtc_config.month = (base_value % 10000) / 100;
 8007ec0:	4b29      	ldr	r3, [pc, #164]	; (8007f68 <lcd_enter_datetime_value+0x10c>)
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	4b2d      	ldr	r3, [pc, #180]	; (8007f7c <lcd_enter_datetime_value+0x120>)
 8007ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8007eca:	0b5b      	lsrs	r3, r3, #13
 8007ecc:	f242 7110 	movw	r1, #10000	; 0x2710
 8007ed0:	fb01 f303 	mul.w	r3, r1, r3
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	4a2a      	ldr	r2, [pc, #168]	; (8007f80 <lcd_enter_datetime_value+0x124>)
 8007ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8007edc:	095b      	lsrs	r3, r3, #5
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	4b25      	ldr	r3, [pc, #148]	; (8007f78 <lcd_enter_datetime_value+0x11c>)
 8007ee2:	715a      	strb	r2, [r3, #5]
		rtc_config.year = base_value % 100;
 8007ee4:	4b20      	ldr	r3, [pc, #128]	; (8007f68 <lcd_enter_datetime_value+0x10c>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	4b25      	ldr	r3, [pc, #148]	; (8007f80 <lcd_enter_datetime_value+0x124>)
 8007eea:	fba3 1302 	umull	r1, r3, r3, r2
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	2164      	movs	r1, #100	; 0x64
 8007ef2:	fb01 f303 	mul.w	r3, r1, r3
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	4b1f      	ldr	r3, [pc, #124]	; (8007f78 <lcd_enter_datetime_value+0x11c>)
 8007efc:	719a      	strb	r2, [r3, #6]
	}
	if(screen4_config_item == Config_time_selected) {
 8007efe:	4b1d      	ldr	r3, [pc, #116]	; (8007f74 <lcd_enter_datetime_value+0x118>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b0b      	cmp	r3, #11
 8007f04:	d127      	bne.n	8007f56 <lcd_enter_datetime_value+0xfa>
		rtc_config.hours = base_value / 10000;
 8007f06:	4b18      	ldr	r3, [pc, #96]	; (8007f68 <lcd_enter_datetime_value+0x10c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a1c      	ldr	r2, [pc, #112]	; (8007f7c <lcd_enter_datetime_value+0x120>)
 8007f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f10:	0b5b      	lsrs	r3, r3, #13
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	4b18      	ldr	r3, [pc, #96]	; (8007f78 <lcd_enter_datetime_value+0x11c>)
 8007f16:	709a      	strb	r2, [r3, #2]
		rtc_config.minutes = (base_value % 10000) / 100;
 8007f18:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <lcd_enter_datetime_value+0x10c>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	4b17      	ldr	r3, [pc, #92]	; (8007f7c <lcd_enter_datetime_value+0x120>)
 8007f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8007f22:	0b5b      	lsrs	r3, r3, #13
 8007f24:	f242 7110 	movw	r1, #10000	; 0x2710
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	4a14      	ldr	r2, [pc, #80]	; (8007f80 <lcd_enter_datetime_value+0x124>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <lcd_enter_datetime_value+0x11c>)
 8007f3a:	705a      	strb	r2, [r3, #1]
		rtc_config.seconds = base_value % 100;
 8007f3c:	4b0a      	ldr	r3, [pc, #40]	; (8007f68 <lcd_enter_datetime_value+0x10c>)
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	4b0f      	ldr	r3, [pc, #60]	; (8007f80 <lcd_enter_datetime_value+0x124>)
 8007f42:	fba3 1302 	umull	r1, r3, r3, r2
 8007f46:	095b      	lsrs	r3, r3, #5
 8007f48:	2164      	movs	r1, #100	; 0x64
 8007f4a:	fb01 f303 	mul.w	r3, r1, r3
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <lcd_enter_datetime_value+0x11c>)
 8007f54:	701a      	strb	r2, [r3, #0]
	}
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000030 	.word	0x20000030
 8007f68:	20013570 	.word	0x20013570
 8007f6c:	cccccccd 	.word	0xcccccccd
 8007f70:	000186a0 	.word	0x000186a0
 8007f74:	20013891 	.word	0x20013891
 8007f78:	20013878 	.word	0x20013878
 8007f7c:	d1b71759 	.word	0xd1b71759
 8007f80:	51eb851f 	.word	0x51eb851f

08007f84 <lcd_enter_params_value>:

void lcd_enter_params_value(KEYPAD_Button_t key) {
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	71fb      	strb	r3, [r7, #7]
	static uint16_t base_value = 0;
	static uint16_t afterpoint = 0;

	switch (key) {
 8007f8e:	79fb      	ldrb	r3, [r7, #7]
 8007f90:	2b09      	cmp	r3, #9
 8007f92:	dc02      	bgt.n	8007f9a <lcd_enter_params_value+0x16>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	da03      	bge.n	8007fa0 <lcd_enter_params_value+0x1c>
 8007f98:	e038      	b.n	800800c <lcd_enter_params_value+0x88>
 8007f9a:	2b0f      	cmp	r3, #15
 8007f9c:	d02e      	beq.n	8007ffc <lcd_enter_params_value+0x78>
 8007f9e:	e035      	b.n	800800c <lcd_enter_params_value+0x88>
		case KEYPAD_Button_5:
		case KEYPAD_Button_6:
		case KEYPAD_Button_7:
		case KEYPAD_Button_8:
		case KEYPAD_Button_9:
			if(base_value < 1000 && afterpoint < 1000) {
 8007fa0:	4b3a      	ldr	r3, [pc, #232]	; (800808c <lcd_enter_params_value+0x108>)
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fa8:	d237      	bcs.n	800801a <lcd_enter_params_value+0x96>
 8007faa:	4b39      	ldr	r3, [pc, #228]	; (8008090 <lcd_enter_params_value+0x10c>)
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fb2:	d232      	bcs.n	800801a <lcd_enter_params_value+0x96>
				base_value = base_value * 10 + ((uint8_t) key);
 8007fb4:	4b35      	ldr	r3, [pc, #212]	; (800808c <lcd_enter_params_value+0x108>)
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	0092      	lsls	r2, r2, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	79fb      	ldrb	r3, [r7, #7]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	4b30      	ldr	r3, [pc, #192]	; (800808c <lcd_enter_params_value+0x108>)
 8007fcc:	801a      	strh	r2, [r3, #0]
				if(afterpoint) afterpoint *= 10;
 8007fce:	4b30      	ldr	r3, [pc, #192]	; (8008090 <lcd_enter_params_value+0x10c>)
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d009      	beq.n	8007fea <lcd_enter_params_value+0x66>
 8007fd6:	4b2e      	ldr	r3, [pc, #184]	; (8008090 <lcd_enter_params_value+0x10c>)
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	0092      	lsls	r2, r2, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	4b2a      	ldr	r3, [pc, #168]	; (8008090 <lcd_enter_params_value+0x10c>)
 8007fe6:	801a      	strh	r2, [r3, #0]
				else if(base_value >= 1000) afterpoint = 10;
			}
			break;
 8007fe8:	e017      	b.n	800801a <lcd_enter_params_value+0x96>
				else if(base_value >= 1000) afterpoint = 10;
 8007fea:	4b28      	ldr	r3, [pc, #160]	; (800808c <lcd_enter_params_value+0x108>)
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ff2:	d312      	bcc.n	800801a <lcd_enter_params_value+0x96>
 8007ff4:	4b26      	ldr	r3, [pc, #152]	; (8008090 <lcd_enter_params_value+0x10c>)
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	801a      	strh	r2, [r3, #0]
			break;
 8007ffa:	e00e      	b.n	800801a <lcd_enter_params_value+0x96>
		case KEYPAD_Button_D:
			if(!afterpoint) afterpoint = 1;
 8007ffc:	4b24      	ldr	r3, [pc, #144]	; (8008090 <lcd_enter_params_value+0x10c>)
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10c      	bne.n	800801e <lcd_enter_params_value+0x9a>
 8008004:	4b22      	ldr	r3, [pc, #136]	; (8008090 <lcd_enter_params_value+0x10c>)
 8008006:	2201      	movs	r2, #1
 8008008:	801a      	strh	r2, [r3, #0]
			break;
 800800a:	e008      	b.n	800801e <lcd_enter_params_value+0x9a>
		default:
			base_value = 0;
 800800c:	4b1f      	ldr	r3, [pc, #124]	; (800808c <lcd_enter_params_value+0x108>)
 800800e:	2200      	movs	r2, #0
 8008010:	801a      	strh	r2, [r3, #0]
			afterpoint = 0;
 8008012:	4b1f      	ldr	r3, [pc, #124]	; (8008090 <lcd_enter_params_value+0x10c>)
 8008014:	2200      	movs	r2, #0
 8008016:	801a      	strh	r2, [r3, #0]
			break;
 8008018:	e002      	b.n	8008020 <lcd_enter_params_value+0x9c>
			break;
 800801a:	bf00      	nop
 800801c:	e000      	b.n	8008020 <lcd_enter_params_value+0x9c>
			break;
 800801e:	bf00      	nop
	}

	float key_input = (float) base_value;
 8008020:	4b1a      	ldr	r3, [pc, #104]	; (800808c <lcd_enter_params_value+0x108>)
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802c:	edc7 7a03 	vstr	s15, [r7, #12]
	if(afterpoint) key_input /= afterpoint;
 8008030:	4b17      	ldr	r3, [pc, #92]	; (8008090 <lcd_enter_params_value+0x10c>)
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <lcd_enter_params_value+0xcc>
 8008038:	4b15      	ldr	r3, [pc, #84]	; (8008090 <lcd_enter_params_value+0x10c>)
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	ee07 3a90 	vmov	s15, r3
 8008040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008044:	edd7 6a03 	vldr	s13, [r7, #12]
 8008048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800804c:	edc7 7a03 	vstr	s15, [r7, #12]

	switch (screen4_config_item) {
 8008050:	4b10      	ldr	r3, [pc, #64]	; (8008094 <lcd_enter_params_value+0x110>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b05      	cmp	r3, #5
 8008056:	d00e      	beq.n	8008076 <lcd_enter_params_value+0xf2>
 8008058:	2b05      	cmp	r3, #5
 800805a:	dc10      	bgt.n	800807e <lcd_enter_params_value+0xfa>
 800805c:	2b01      	cmp	r3, #1
 800805e:	d002      	beq.n	8008066 <lcd_enter_params_value+0xe2>
 8008060:	2b03      	cmp	r3, #3
 8008062:	d004      	beq.n	800806e <lcd_enter_params_value+0xea>
			break;
		case Config_sag_selected:
			screen4_data_config.User_SAG = key_input;
			break;
		default:
			break;
 8008064:	e00b      	b.n	800807e <lcd_enter_params_value+0xfa>
			screen4_data_config.User_PKV = key_input;
 8008066:	4a0c      	ldr	r2, [pc, #48]	; (8008098 <lcd_enter_params_value+0x114>)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6013      	str	r3, [r2, #0]
			break;
 800806c:	e008      	b.n	8008080 <lcd_enter_params_value+0xfc>
			screen4_data_config.User_PKI = key_input;
 800806e:	4a0a      	ldr	r2, [pc, #40]	; (8008098 <lcd_enter_params_value+0x114>)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6053      	str	r3, [r2, #4]
			break;
 8008074:	e004      	b.n	8008080 <lcd_enter_params_value+0xfc>
			screen4_data_config.User_SAG = key_input;
 8008076:	4a08      	ldr	r2, [pc, #32]	; (8008098 <lcd_enter_params_value+0x114>)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6093      	str	r3, [r2, #8]
			break;
 800807c:	e000      	b.n	8008080 <lcd_enter_params_value+0xfc>
			break;
 800807e:	bf00      	nop
	}
}
 8008080:	bf00      	nop
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	20013574 	.word	0x20013574
 8008090:	20013576 	.word	0x20013576
 8008094:	20013891 	.word	0x20013891
 8008098:	200138c8 	.word	0x200138c8

0800809c <lcd_is_busy>:

bool lcd_is_busy() {
 800809c:	b480      	push	{r7}
 800809e:	af00      	add	r7, sp, #0
	return screen3_mode || screen4_mode;
 80080a0:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <lcd_is_busy+0x2c>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d103      	bne.n	80080b0 <lcd_is_busy+0x14>
 80080a8:	4b08      	ldr	r3, [pc, #32]	; (80080cc <lcd_is_busy+0x30>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <lcd_is_busy+0x18>
 80080b0:	2301      	movs	r3, #1
 80080b2:	e000      	b.n	80080b6 <lcd_is_busy+0x1a>
 80080b4:	2300      	movs	r3, #0
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	b2db      	uxtb	r3, r3
}
 80080bc:	4618      	mov	r0, r3
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	20013890 	.word	0x20013890
 80080cc:	200138c4 	.word	0x200138c4

080080d0 <main>:
void keypad_handler(void* parameters);
void rtc_handler(void* parameters);
void usart_handler(void* parameters);
void led_handler(void* parameters);

int main(void) {
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af02      	add	r7, sp, #8

	xTaskCreate(lcd_handler, "LCD5110", 2048, NULL, 1, NULL);
 80080d6:	2300      	movs	r3, #0
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	2301      	movs	r3, #1
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	2300      	movs	r3, #0
 80080e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080e4:	492a      	ldr	r1, [pc, #168]	; (8008190 <main+0xc0>)
 80080e6:	482b      	ldr	r0, [pc, #172]	; (8008194 <main+0xc4>)
 80080e8:	f7fa fc3a 	bl	8002960 <xTaskCreate>
	xTaskCreate(ade_handler, "ADE7753", 512, NULL, 1, NULL);
 80080ec:	2300      	movs	r3, #0
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	2301      	movs	r3, #1
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	2300      	movs	r3, #0
 80080f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080fa:	4927      	ldr	r1, [pc, #156]	; (8008198 <main+0xc8>)
 80080fc:	4827      	ldr	r0, [pc, #156]	; (800819c <main+0xcc>)
 80080fe:	f7fa fc2f 	bl	8002960 <xTaskCreate>
	xTaskCreate(keypad_handler, "Keypad", 256, NULL, 1, NULL);
 8008102:	2300      	movs	r3, #0
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	2301      	movs	r3, #1
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	2300      	movs	r3, #0
 800810c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008110:	4923      	ldr	r1, [pc, #140]	; (80081a0 <main+0xd0>)
 8008112:	4824      	ldr	r0, [pc, #144]	; (80081a4 <main+0xd4>)
 8008114:	f7fa fc24 	bl	8002960 <xTaskCreate>
	xTaskCreate(rtc_handler, "DS1307", 512, NULL, 1, NULL);
 8008118:	2300      	movs	r3, #0
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	2301      	movs	r3, #1
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2300      	movs	r3, #0
 8008122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008126:	4920      	ldr	r1, [pc, #128]	; (80081a8 <main+0xd8>)
 8008128:	4820      	ldr	r0, [pc, #128]	; (80081ac <main+0xdc>)
 800812a:	f7fa fc19 	bl	8002960 <xTaskCreate>
	xTaskCreate(usart_handler, "USART", 512, NULL, 1, NULL);
 800812e:	2300      	movs	r3, #0
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	2301      	movs	r3, #1
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	2300      	movs	r3, #0
 8008138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800813c:	491c      	ldr	r1, [pc, #112]	; (80081b0 <main+0xe0>)
 800813e:	481d      	ldr	r0, [pc, #116]	; (80081b4 <main+0xe4>)
 8008140:	f7fa fc0e 	bl	8002960 <xTaskCreate>
	xTaskCreate(led_handler, "LED", 128, NULL, 1, NULL);
 8008144:	2300      	movs	r3, #0
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	2301      	movs	r3, #1
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	2300      	movs	r3, #0
 800814e:	2280      	movs	r2, #128	; 0x80
 8008150:	4919      	ldr	r1, [pc, #100]	; (80081b8 <main+0xe8>)
 8008152:	481a      	ldr	r0, [pc, #104]	; (80081bc <main+0xec>)
 8008154:	f7fa fc04 	bl	8002960 <xTaskCreate>

	ade_queue_handle = xQueueCreate(10, sizeof(ADE_INT_t));
 8008158:	2200      	movs	r2, #0
 800815a:	2101      	movs	r1, #1
 800815c:	200a      	movs	r0, #10
 800815e:	f7f9 ff2f 	bl	8001fc0 <xQueueGenericCreate>
 8008162:	4603      	mov	r3, r0
 8008164:	4a16      	ldr	r2, [pc, #88]	; (80081c0 <main+0xf0>)
 8008166:	6013      	str	r3, [r2, #0]
	keypad_queue_handle = xQueueCreate(5, sizeof(KEYPAD_Button_t));
 8008168:	2200      	movs	r2, #0
 800816a:	2101      	movs	r1, #1
 800816c:	2005      	movs	r0, #5
 800816e:	f7f9 ff27 	bl	8001fc0 <xQueueGenericCreate>
 8008172:	4603      	mov	r3, r0
 8008174:	4a13      	ldr	r2, [pc, #76]	; (80081c4 <main+0xf4>)
 8008176:	6013      	str	r3, [r2, #0]
	rtc_queue_handle = xQueueCreate(1, sizeof(DS1307_DateTime_t));
 8008178:	2200      	movs	r2, #0
 800817a:	2107      	movs	r1, #7
 800817c:	2001      	movs	r0, #1
 800817e:	f7f9 ff1f 	bl	8001fc0 <xQueueGenericCreate>
 8008182:	4603      	mov	r3, r0
 8008184:	4a10      	ldr	r2, [pc, #64]	; (80081c8 <main+0xf8>)
 8008186:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8008188:	f7fa fd78 	bl	8002c7c <vTaskStartScheduler>

	while(1);
 800818c:	e7fe      	b.n	800818c <main+0xbc>
 800818e:	bf00      	nop
 8008190:	0800bb9c 	.word	0x0800bb9c
 8008194:	080081cd 	.word	0x080081cd
 8008198:	0800bba4 	.word	0x0800bba4
 800819c:	08008599 	.word	0x08008599
 80081a0:	0800bbac 	.word	0x0800bbac
 80081a4:	08008721 	.word	0x08008721
 80081a8:	0800bbb4 	.word	0x0800bbb4
 80081ac:	080087f9 	.word	0x080087f9
 80081b0:	0800bbbc 	.word	0x0800bbbc
 80081b4:	08008895 	.word	0x08008895
 80081b8:	0800bbc4 	.word	0x0800bbc4
 80081bc:	080088b9 	.word	0x080088b9
 80081c0:	200138dc 	.word	0x200138dc
 80081c4:	200138d8 	.word	0x200138d8
 80081c8:	200138e0 	.word	0x200138e0

080081cc <lcd_handler>:
	return 0;
}

void lcd_handler(void* parameters) {
 80081cc:	b590      	push	{r4, r7, lr}
 80081ce:	b08b      	sub	sp, #44	; 0x2c
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6178      	str	r0, [r7, #20]
	LCD5110_Init(0x37);
 80081d4:	2037      	movs	r0, #55	; 0x37
 80081d6:	f7f9 fb13 	bl	8001800 <LCD5110_Init>

	memset(&screen1_data, 0, sizeof(screen1_data));
 80081da:	2210      	movs	r2, #16
 80081dc:	2100      	movs	r1, #0
 80081de:	48d1      	ldr	r0, [pc, #836]	; (8008524 <lcd_handler+0x358>)
 80081e0:	f000 fd30 	bl	8008c44 <memset>
	memset(&screen2_data, 0, sizeof(screen2_data));
 80081e4:	2210      	movs	r2, #16
 80081e6:	2100      	movs	r1, #0
 80081e8:	48cf      	ldr	r0, [pc, #828]	; (8008528 <lcd_handler+0x35c>)
 80081ea:	f000 fd2b 	bl	8008c44 <memset>
	memset(&screen3_data, 0, sizeof(screen3_data));
 80081ee:	2208      	movs	r2, #8
 80081f0:	2100      	movs	r1, #0
 80081f2:	48ce      	ldr	r0, [pc, #824]	; (800852c <lcd_handler+0x360>)
 80081f4:	f000 fd26 	bl	8008c44 <memset>
	memset(&screen4_data, 0, sizeof(screen4_data));
 80081f8:	2210      	movs	r2, #16
 80081fa:	2100      	movs	r1, #0
 80081fc:	48cc      	ldr	r0, [pc, #816]	; (8008530 <lcd_handler+0x364>)
 80081fe:	f000 fd21 	bl	8008c44 <memset>

	lcd_screen_1_clear();
 8008202:	f7ff fc21 	bl	8007a48 <lcd_screen_1_clear>
	lcd_screen_2_clear();
 8008206:	f7ff fc2b 	bl	8007a60 <lcd_screen_2_clear>
	lcd_screen_3_clear();
 800820a:	f7ff fc35 	bl	8007a78 <lcd_screen_3_clear>
	lcd_screen_4_clear();
 800820e:	f7ff fc4b 	bl	8007aa8 <lcd_screen_4_clear>

	KEYPAD_Button_t keypad;
	LCD_Screen_t screen = LCD_Screen_1;
 8008212:	2300      	movs	r3, #0
 8008214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

//	ADE_Write_Data_t ade_write_data;

	while(1) {
		if(keypad_queue_handle != NULL) {
 8008218:	4bc6      	ldr	r3, [pc, #792]	; (8008534 <lcd_handler+0x368>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8196 	beq.w	800854e <lcd_handler+0x382>
			if(xQueueReceive(keypad_queue_handle, &keypad, (TickType_t) 10) == pdPASS) {
 8008222:	4bc4      	ldr	r3, [pc, #784]	; (8008534 <lcd_handler+0x368>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800822a:	220a      	movs	r2, #10
 800822c:	4618      	mov	r0, r3
 800822e:	f7fa f91b 	bl	8002468 <xQueueReceive>
 8008232:	4603      	mov	r3, r0
 8008234:	2b01      	cmp	r3, #1
 8008236:	f040 818a 	bne.w	800854e <lcd_handler+0x382>
				switch (keypad) {
 800823a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800823e:	2b0f      	cmp	r3, #15
 8008240:	dc50      	bgt.n	80082e4 <lcd_handler+0x118>
 8008242:	2b00      	cmp	r3, #0
 8008244:	da28      	bge.n	8008298 <lcd_handler+0xcc>

					case KEYPAD_Button_HOLD_HASH:
					case KEYPAD_Button_HOLD_STAR:
						break;
					default:
						break;
 8008246:	e184      	b.n	8008552 <lcd_handler+0x386>
 8008248:	3b80      	subs	r3, #128	; 0x80
 800824a:	2b0f      	cmp	r3, #15
 800824c:	f200 8181 	bhi.w	8008552 <lcd_handler+0x386>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <lcd_handler+0x8c>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	08008553 	.word	0x08008553
 800825c:	08008553 	.word	0x08008553
 8008260:	08008553 	.word	0x08008553
 8008264:	08008553 	.word	0x08008553
 8008268:	08008553 	.word	0x08008553
 800826c:	08008553 	.word	0x08008553
 8008270:	08008553 	.word	0x08008553
 8008274:	08008553 	.word	0x08008553
 8008278:	08008553 	.word	0x08008553
 800827c:	08008553 	.word	0x08008553
 8008280:	08008553 	.word	0x08008553
 8008284:	08008553 	.word	0x08008553
 8008288:	08008553 	.word	0x08008553
 800828c:	08008553 	.word	0x08008553
 8008290:	080084e5 	.word	0x080084e5
 8008294:	08008505 	.word	0x08008505
 8008298:	2b0f      	cmp	r3, #15
 800829a:	f200 815a 	bhi.w	8008552 <lcd_handler+0x386>
 800829e:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <lcd_handler+0xd8>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082f1 	.word	0x080082f1
 80082a8:	080082f1 	.word	0x080082f1
 80082ac:	080082f1 	.word	0x080082f1
 80082b0:	080082f1 	.word	0x080082f1
 80082b4:	080082f1 	.word	0x080082f1
 80082b8:	080082f1 	.word	0x080082f1
 80082bc:	080082f1 	.word	0x080082f1
 80082c0:	080082f1 	.word	0x080082f1
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	080082f1 	.word	0x080082f1
 80082cc:	08008483 	.word	0x08008483
 80082d0:	080083cd 	.word	0x080083cd
 80082d4:	0800831d 	.word	0x0800831d
 80082d8:	08008337 	.word	0x08008337
 80082dc:	08008351 	.word	0x08008351
 80082e0:	0800836b 	.word	0x0800836b
				switch (keypad) {
 80082e4:	2b8f      	cmp	r3, #143	; 0x8f
 80082e6:	f300 8134 	bgt.w	8008552 <lcd_handler+0x386>
 80082ea:	2b80      	cmp	r3, #128	; 0x80
 80082ec:	daac      	bge.n	8008248 <lcd_handler+0x7c>
						break;
 80082ee:	e130      	b.n	8008552 <lcd_handler+0x386>
						if(lcd_screen_4_mode() == S4_CONFIG_PARAMS_DISPLAY)
 80082f0:	f7ff fca6 	bl	8007c40 <lcd_screen_4_mode>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d104      	bne.n	8008304 <lcd_handler+0x138>
							lcd_enter_params_value(keypad);
 80082fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff fe40 	bl	8007f84 <lcd_enter_params_value>
						if(lcd_screen_4_mode() == S4_CONFIG_DATETIME_DISPLAY)
 8008304:	f7ff fc9c 	bl	8007c40 <lcd_screen_4_mode>
 8008308:	4603      	mov	r3, r0
 800830a:	2b03      	cmp	r3, #3
 800830c:	f040 8123 	bne.w	8008556 <lcd_handler+0x38a>
							lcd_enter_datetime_value(keypad);
 8008310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008314:	4618      	mov	r0, r3
 8008316:	f7ff fda1 	bl	8007e5c <lcd_enter_datetime_value>
						break;
 800831a:	e11c      	b.n	8008556 <lcd_handler+0x38a>
						if(!lcd_is_busy()) screen = LCD_Screen_1;
 800831c:	f7ff febe 	bl	800809c <lcd_is_busy>
 8008320:	4603      	mov	r3, r0
 8008322:	f083 0301 	eor.w	r3, r3, #1
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8116 	beq.w	800855a <lcd_handler+0x38e>
 800832e:	2300      	movs	r3, #0
 8008330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 8008334:	e111      	b.n	800855a <lcd_handler+0x38e>
						if(!lcd_is_busy()) screen = LCD_Screen_2;
 8008336:	f7ff feb1 	bl	800809c <lcd_is_busy>
 800833a:	4603      	mov	r3, r0
 800833c:	f083 0301 	eor.w	r3, r3, #1
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 810b 	beq.w	800855e <lcd_handler+0x392>
 8008348:	2301      	movs	r3, #1
 800834a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 800834e:	e106      	b.n	800855e <lcd_handler+0x392>
						if(!lcd_is_busy()) screen = LCD_Screen_3;
 8008350:	f7ff fea4 	bl	800809c <lcd_is_busy>
 8008354:	4603      	mov	r3, r0
 8008356:	f083 0301 	eor.w	r3, r3, #1
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8100 	beq.w	8008562 <lcd_handler+0x396>
 8008362:	2302      	movs	r3, #2
 8008364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 8008368:	e0fb      	b.n	8008562 <lcd_handler+0x396>
						if(!lcd_is_busy()) screen = LCD_Screen_4;
 800836a:	f7ff fe97 	bl	800809c <lcd_is_busy>
 800836e:	4603      	mov	r3, r0
 8008370:	f083 0301 	eor.w	r3, r3, #1
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <lcd_handler+0x1b6>
 800837a:	2303      	movs	r3, #3
 800837c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
 8008380:	e0f4      	b.n	800856c <lcd_handler+0x3a0>
							switch (lcd_screen_4_mode()) {
 8008382:	f7ff fc5d 	bl	8007c40 <lcd_screen_4_mode>
 8008386:	4603      	mov	r3, r0
 8008388:	2b03      	cmp	r3, #3
 800838a:	d01a      	beq.n	80083c2 <lcd_handler+0x1f6>
 800838c:	2b03      	cmp	r3, #3
 800838e:	dc1b      	bgt.n	80083c8 <lcd_handler+0x1fc>
 8008390:	2b01      	cmp	r3, #1
 8008392:	d002      	beq.n	800839a <lcd_handler+0x1ce>
 8008394:	2b02      	cmp	r3, #2
 8008396:	d003      	beq.n	80083a0 <lcd_handler+0x1d4>
									break;
 8008398:	e016      	b.n	80083c8 <lcd_handler+0x1fc>
									lcd_screen_4_next_config_option();
 800839a:	f7ff fc75 	bl	8007c88 <lcd_screen_4_next_config_option>
									break;
 800839e:	e014      	b.n	80083ca <lcd_handler+0x1fe>
									if(lcd_screen_4_config_item() % 2)
 80083a0:	f7ff fc66 	bl	8007c70 <lcd_screen_4_config_item>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d005      	beq.n	80083bc <lcd_handler+0x1f0>
										lcd_enter_params_value(keypad);
 80083b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff fde5 	bl	8007f84 <lcd_enter_params_value>
									break;
 80083ba:	e006      	b.n	80083ca <lcd_handler+0x1fe>
									else lcd_screen_4_next_config_item();
 80083bc:	f7ff fc74 	bl	8007ca8 <lcd_screen_4_next_config_item>
									break;
 80083c0:	e003      	b.n	80083ca <lcd_handler+0x1fe>
									lcd_screen_4_next_config_item();
 80083c2:	f7ff fc71 	bl	8007ca8 <lcd_screen_4_next_config_item>
									break;
 80083c6:	e000      	b.n	80083ca <lcd_handler+0x1fe>
									break;
 80083c8:	bf00      	nop
						break;
 80083ca:	e0cf      	b.n	800856c <lcd_handler+0x3a0>
						if(lcd_is_busy()) {
 80083cc:	f7ff fe66 	bl	800809c <lcd_is_busy>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d051      	beq.n	800847a <lcd_handler+0x2ae>
							if(screen == LCD_Screen_3)
 80083d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d101      	bne.n	80083e2 <lcd_handler+0x216>
								lcd_screen_3_clear();
 80083de:	f7ff fb4b 	bl	8007a78 <lcd_screen_3_clear>
							if(screen == LCD_Screen_4) {
 80083e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d147      	bne.n	800847a <lcd_handler+0x2ae>
								switch (lcd_screen_4_mode()) {
 80083ea:	f7ff fc29 	bl	8007c40 <lcd_screen_4_mode>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d022      	beq.n	800843a <lcd_handler+0x26e>
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	dc42      	bgt.n	800847e <lcd_handler+0x2b2>
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d005      	beq.n	8008408 <lcd_handler+0x23c>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dd3e      	ble.n	800847e <lcd_handler+0x2b2>
 8008400:	3b02      	subs	r3, #2
 8008402:	2b01      	cmp	r3, #1
 8008404:	d83b      	bhi.n	800847e <lcd_handler+0x2b2>
 8008406:	e00c      	b.n	8008422 <lcd_handler+0x256>
										if(lcd_screen_4_config_option() == Config_Params)
 8008408:	f7ff fc26 	bl	8007c58 <lcd_screen_4_config_option>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d103      	bne.n	800841a <lcd_handler+0x24e>
											lcd_screen_4_switch_mode(S4_CONFIG_PARAMS_DISPLAY);
 8008412:	2002      	movs	r0, #2
 8008414:	f7ff fbcc 	bl	8007bb0 <lcd_screen_4_switch_mode>
										break;
 8008418:	e032      	b.n	8008480 <lcd_handler+0x2b4>
										else lcd_screen_4_switch_mode(S4_CONFIG_DATETIME_DISPLAY);
 800841a:	2003      	movs	r0, #3
 800841c:	f7ff fbc8 	bl	8007bb0 <lcd_screen_4_switch_mode>
										break;
 8008420:	e02e      	b.n	8008480 <lcd_handler+0x2b4>
										if(lcd_screen_4_config_item() == Config_interval_selected)
 8008422:	f7ff fc25 	bl	8007c70 <lcd_screen_4_config_item>
 8008426:	4603      	mov	r3, r0
 8008428:	2b07      	cmp	r3, #7
 800842a:	d102      	bne.n	8008432 <lcd_handler+0x266>
											lcd_screen_4_next_interval_set();
 800842c:	f7ff fcbe 	bl	8007dac <lcd_screen_4_next_interval_set>
										break;
 8008430:	e026      	b.n	8008480 <lcd_handler+0x2b4>
										else lcd_screen_4_config_select(CONFIG_SELECT);
 8008432:	2001      	movs	r0, #1
 8008434:	f7ff fc66 	bl	8007d04 <lcd_screen_4_config_select>
										break;
 8008438:	e022      	b.n	8008480 <lcd_handler+0x2b4>
										if(lcd_screen_4_config_option() == Config_Params) {
 800843a:	f7ff fc0d 	bl	8007c58 <lcd_screen_4_config_option>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <lcd_handler+0x28c>
											screen4_data = lcd_screen_4_commit_parameters();
 8008444:	4c3a      	ldr	r4, [pc, #232]	; (8008530 <lcd_handler+0x364>)
 8008446:	463b      	mov	r3, r7
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff fced 	bl	8007e28 <lcd_screen_4_commit_parameters>
 800844e:	463b      	mov	r3, r7
 8008450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008452:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008456:	e00c      	b.n	8008472 <lcd_handler+0x2a6>
											DS1307_DateTime_t config_rtc = lcd_screen_4_commit_rtc();
 8008458:	f107 031c 	add.w	r3, r7, #28
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff fccf 	bl	8007e00 <lcd_screen_4_commit_rtc>
											xQueueSend(rtc_queue_handle, (void*) &config_rtc, (TickType_t) 0);
 8008462:	4b35      	ldr	r3, [pc, #212]	; (8008538 <lcd_handler+0x36c>)
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	f107 011c 	add.w	r1, r7, #28
 800846a:	2300      	movs	r3, #0
 800846c:	2200      	movs	r2, #0
 800846e:	f7f9 fe2f 	bl	80020d0 <xQueueGenericSend>
										lcd_screen_4_switch_mode(S4_CONFIG_DISPLAY);
 8008472:	2001      	movs	r0, #1
 8008474:	f7ff fb9c 	bl	8007bb0 <lcd_screen_4_switch_mode>
										break;
 8008478:	e002      	b.n	8008480 <lcd_handler+0x2b4>
							}
 800847a:	bf00      	nop
 800847c:	e076      	b.n	800856c <lcd_handler+0x3a0>
										break;
 800847e:	bf00      	nop
						break;
 8008480:	e074      	b.n	800856c <lcd_handler+0x3a0>
						if(lcd_is_busy()) {
 8008482:	f7ff fe0b 	bl	800809c <lcd_is_busy>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d029      	beq.n	80084e0 <lcd_handler+0x314>
							if(screen == LCD_Screen_3)
 800848c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008490:	2b02      	cmp	r3, #2
 8008492:	d102      	bne.n	800849a <lcd_handler+0x2ce>
								lcd_screen_3_switch_mode(S3_NORMAL_DISPLAY);
 8008494:	2000      	movs	r0, #0
 8008496:	f7ff fb63 	bl	8007b60 <lcd_screen_3_switch_mode>
							if(screen == LCD_Screen_4) {
 800849a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d11e      	bne.n	80084e0 <lcd_handler+0x314>
								switch (lcd_screen_4_mode()) {
 80084a2:	f7ff fbcd 	bl	8007c40 <lcd_screen_4_mode>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	dc02      	bgt.n	80084b2 <lcd_handler+0x2e6>
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	da03      	bge.n	80084b8 <lcd_handler+0x2ec>
										break;
 80084b0:	e017      	b.n	80084e2 <lcd_handler+0x316>
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d010      	beq.n	80084d8 <lcd_handler+0x30c>
 80084b6:	e014      	b.n	80084e2 <lcd_handler+0x316>
										if(lcd_screen_4_config_item() % 2)
 80084b8:	f7ff fbda 	bl	8007c70 <lcd_screen_4_config_item>
 80084bc:	4603      	mov	r3, r0
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <lcd_handler+0x304>
											lcd_screen_4_config_select(CONFIG_DESELECT);
 80084c8:	2000      	movs	r0, #0
 80084ca:	f7ff fc1b 	bl	8007d04 <lcd_screen_4_config_select>
										break;
 80084ce:	e008      	b.n	80084e2 <lcd_handler+0x316>
										else lcd_screen_4_switch_mode(S4_COMMIT_DISPLAY);
 80084d0:	2004      	movs	r0, #4
 80084d2:	f7ff fb6d 	bl	8007bb0 <lcd_screen_4_switch_mode>
										break;
 80084d6:	e004      	b.n	80084e2 <lcd_handler+0x316>
										lcd_screen_4_switch_mode(S4_CONFIG_DISPLAY);
 80084d8:	2001      	movs	r0, #1
 80084da:	f7ff fb69 	bl	8007bb0 <lcd_screen_4_switch_mode>
										break;
 80084de:	e000      	b.n	80084e2 <lcd_handler+0x316>
							}
 80084e0:	bf00      	nop
						break;
 80084e2:	e043      	b.n	800856c <lcd_handler+0x3a0>
						if(!lcd_is_busy() && screen == LCD_Screen_3)
 80084e4:	f7ff fdda 	bl	800809c <lcd_is_busy>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f083 0301 	eor.w	r3, r3, #1
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d038      	beq.n	8008566 <lcd_handler+0x39a>
 80084f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d134      	bne.n	8008566 <lcd_handler+0x39a>
							lcd_screen_3_switch_mode(S3_RESET_CONFIRM_DISPLAY);
 80084fc:	2001      	movs	r0, #1
 80084fe:	f7ff fb2f 	bl	8007b60 <lcd_screen_3_switch_mode>
						break;
 8008502:	e030      	b.n	8008566 <lcd_handler+0x39a>
						if(!lcd_is_busy()) {
 8008504:	f7ff fdca 	bl	800809c <lcd_is_busy>
 8008508:	4603      	mov	r3, r0
 800850a:	f083 0301 	eor.w	r3, r3, #1
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d013      	beq.n	800853c <lcd_handler+0x370>
							if(screen == LCD_Screen_4)
 8008514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008518:	2b03      	cmp	r3, #3
 800851a:	d126      	bne.n	800856a <lcd_handler+0x39e>
								lcd_screen_4_switch_mode(S4_CONFIG_DISPLAY);
 800851c:	2001      	movs	r0, #1
 800851e:	f7ff fb47 	bl	8007bb0 <lcd_screen_4_switch_mode>
						break;
 8008522:	e022      	b.n	800856a <lcd_handler+0x39e>
 8008524:	20013894 	.word	0x20013894
 8008528:	20013880 	.word	0x20013880
 800852c:	200138bc 	.word	0x200138bc
 8008530:	200138ac 	.word	0x200138ac
 8008534:	200138d8 	.word	0x200138d8
 8008538:	200138e0 	.word	0x200138e0
						} else if(lcd_screen_4_mode() == S4_CONFIG_DISPLAY)
 800853c:	f7ff fb80 	bl	8007c40 <lcd_screen_4_mode>
 8008540:	4603      	mov	r3, r0
 8008542:	2b01      	cmp	r3, #1
 8008544:	d111      	bne.n	800856a <lcd_handler+0x39e>
							lcd_screen_4_switch_mode(S4_NORMAL_DISPLAY);
 8008546:	2000      	movs	r0, #0
 8008548:	f7ff fb32 	bl	8007bb0 <lcd_screen_4_switch_mode>
						break;
 800854c:	e00d      	b.n	800856a <lcd_handler+0x39e>
				}
			}
 800854e:	bf00      	nop
 8008550:	e00c      	b.n	800856c <lcd_handler+0x3a0>
						break;
 8008552:	bf00      	nop
 8008554:	e00a      	b.n	800856c <lcd_handler+0x3a0>
						break;
 8008556:	bf00      	nop
 8008558:	e008      	b.n	800856c <lcd_handler+0x3a0>
						break;
 800855a:	bf00      	nop
 800855c:	e006      	b.n	800856c <lcd_handler+0x3a0>
						break;
 800855e:	bf00      	nop
 8008560:	e004      	b.n	800856c <lcd_handler+0x3a0>
						break;
 8008562:	bf00      	nop
 8008564:	e002      	b.n	800856c <lcd_handler+0x3a0>
						break;
 8008566:	bf00      	nop
 8008568:	e000      	b.n	800856c <lcd_handler+0x3a0>
						break;
 800856a:	bf00      	nop
		}

		lcd_screen_refresh(screen);
 800856c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fa1b 	bl	80079ac <lcd_screen_refresh>
		vTaskDelay(500);
 8008576:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800857a:	f7fa fb47 	bl	8002c0c <vTaskDelay>
		taskYIELD();
 800857e:	4b04      	ldr	r3, [pc, #16]	; (8008590 <lcd_handler+0x3c4>)
 8008580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	f3bf 8f6f 	isb	sy
		if(keypad_queue_handle != NULL) {
 800858e:	e643      	b.n	8008218 <lcd_handler+0x4c>
 8008590:	e000ed04 	.word	0xe000ed04
 8008594:	00000000 	.word	0x00000000

08008598 <ade_handler>:
	}
}

void ade_handler(void* parameters) {
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	ADE_INT_t ade_int;
	uint32_t rststatus;

	ADE_Init();
 80085a0:	f7f8 fbb2 	bl	8000d08 <ADE_Init>

	ADE_WriteData(GAIN, 0x34, 1);
 80085a4:	2201      	movs	r2, #1
 80085a6:	2134      	movs	r1, #52	; 0x34
 80085a8:	200f      	movs	r0, #15
 80085aa:	f7f8 fc0d 	bl	8000dc8 <ADE_WriteData>
	ADE_WriteData(MODE, 0x008c, 2);
 80085ae:	2202      	movs	r2, #2
 80085b0:	218c      	movs	r1, #140	; 0x8c
 80085b2:	2009      	movs	r0, #9
 80085b4:	f7f8 fc08 	bl	8000dc8 <ADE_WriteData>
	ADE_WriteData(LINECYC, 0x00c8, 2);
 80085b8:	2202      	movs	r2, #2
 80085ba:	21c8      	movs	r1, #200	; 0xc8
 80085bc:	201c      	movs	r0, #28
 80085be:	f7f8 fc03 	bl	8000dc8 <ADE_WriteData>
	ADE_WriteData(IRQEN, 0x0044, 2);
 80085c2:	2202      	movs	r2, #2
 80085c4:	2144      	movs	r1, #68	; 0x44
 80085c6:	200a      	movs	r0, #10
 80085c8:	f7f8 fbfe 	bl	8000dc8 <ADE_WriteData>
	ADE_ReadData(RSTSTATUS, 2);
 80085cc:	2102      	movs	r1, #2
 80085ce:	200c      	movs	r0, #12
 80085d0:	f7f8 fbc6 	bl	8000d60 <ADE_ReadData>

	while(1) {
		if(ade_queue_handle != NULL)
 80085d4:	4b4e      	ldr	r3, [pc, #312]	; (8008710 <ade_handler+0x178>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8085 	beq.w	80086e8 <ade_handler+0x150>
			if(xQueueReceive(ade_queue_handle, &ade_int, (TickType_t) 10) == pdPASS) {
 80085de:	4b4c      	ldr	r3, [pc, #304]	; (8008710 <ade_handler+0x178>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f107 010b 	add.w	r1, r7, #11
 80085e6:	220a      	movs	r2, #10
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7f9 ff3d 	bl	8002468 <xQueueReceive>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d179      	bne.n	80086e8 <ade_handler+0x150>
				switch (ade_int) {
 80085f4:	7afb      	ldrb	r3, [r7, #11]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d078      	beq.n	80086ec <ade_handler+0x154>
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	dc78      	bgt.n	80086f0 <ade_handler+0x158>
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <ade_handler+0x70>
 8008602:	2b01      	cmp	r3, #1
 8008604:	d041      	beq.n	800868a <ade_handler+0xf2>
						break;
					case ADE_INT_SAG:

						break;
					default:
						break;
 8008606:	e073      	b.n	80086f0 <ade_handler+0x158>
						screen1_data.Vrms = ade_scale_vrms(ADE_ReadData(VRMS, 3));
 8008608:	2103      	movs	r1, #3
 800860a:	2017      	movs	r0, #23
 800860c:	f7f8 fba8 	bl	8000d60 <ADE_ReadData>
 8008610:	4603      	mov	r3, r0
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fb30 	bl	8006c78 <ade_scale_vrms>
 8008618:	4603      	mov	r3, r0
 800861a:	4a3e      	ldr	r2, [pc, #248]	; (8008714 <ade_handler+0x17c>)
 800861c:	6013      	str	r3, [r2, #0]
						screen1_data.Irms = ade_scale_irms(ADE_ReadData(IRMS, 3));
 800861e:	2103      	movs	r1, #3
 8008620:	2016      	movs	r0, #22
 8008622:	f7f8 fb9d 	bl	8000d60 <ADE_ReadData>
 8008626:	4603      	mov	r3, r0
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe fb49 	bl	8006cc0 <ade_scale_irms>
 800862e:	4603      	mov	r3, r0
 8008630:	4a38      	ldr	r2, [pc, #224]	; (8008714 <ade_handler+0x17c>)
 8008632:	6093      	str	r3, [r2, #8]
						screen1_data.Vpeak = screen1_data.Vrms * SQRT_2;
 8008634:	4b37      	ldr	r3, [pc, #220]	; (8008714 <ade_handler+0x17c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4618      	mov	r0, r3
 800863a:	f7f7 ffe5 	bl	8000608 <__aeabi_f2d>
 800863e:	a332      	add	r3, pc, #200	; (adr r3, 8008708 <ade_handler+0x170>)
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f7f8 f838 	bl	80006b8 <__aeabi_dmul>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4610      	mov	r0, r2
 800864e:	4619      	mov	r1, r3
 8008650:	f7f8 fb0a 	bl	8000c68 <__aeabi_d2f>
 8008654:	4603      	mov	r3, r0
 8008656:	4a2f      	ldr	r2, [pc, #188]	; (8008714 <ade_handler+0x17c>)
 8008658:	6053      	str	r3, [r2, #4]
						screen1_data.Ipeak = screen1_data.Irms * SQRT_2;
 800865a:	4b2e      	ldr	r3, [pc, #184]	; (8008714 <ade_handler+0x17c>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	4618      	mov	r0, r3
 8008660:	f7f7 ffd2 	bl	8000608 <__aeabi_f2d>
 8008664:	a328      	add	r3, pc, #160	; (adr r3, 8008708 <ade_handler+0x170>)
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f7f8 f825 	bl	80006b8 <__aeabi_dmul>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4610      	mov	r0, r2
 8008674:	4619      	mov	r1, r3
 8008676:	f7f8 faf7 	bl	8000c68 <__aeabi_d2f>
 800867a:	4603      	mov	r3, r0
 800867c:	4a25      	ldr	r2, [pc, #148]	; (8008714 <ade_handler+0x17c>)
 800867e:	60d3      	str	r3, [r2, #12]
						lcd_screen_1_data_update(screen1_data);
 8008680:	4b24      	ldr	r3, [pc, #144]	; (8008714 <ade_handler+0x17c>)
 8008682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008684:	f7ff f9b8 	bl	80079f8 <lcd_screen_1_data_update>
						break;
 8008688:	e035      	b.n	80086f6 <ade_handler+0x15e>
						rststatus = ADE_ReadData(RSTSTATUS, 2);
 800868a:	2102      	movs	r1, #2
 800868c:	200c      	movs	r0, #12
 800868e:	f7f8 fb67 	bl	8000d60 <ADE_ReadData>
 8008692:	60f8      	str	r0, [r7, #12]
						if(rststatus & (1 << IRQ_CYCEND)) {
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f003 0304 	and.w	r3, r3, #4
 800869a:	2b00      	cmp	r3, #0
 800869c:	d02a      	beq.n	80086f4 <ade_handler+0x15c>
							screen2_data.ActivePower = ade_scale_power(ADE_ReadData(LAENERGY, 3));
 800869e:	2103      	movs	r1, #3
 80086a0:	2004      	movs	r0, #4
 80086a2:	f7f8 fb5d 	bl	8000d60 <ADE_ReadData>
 80086a6:	4603      	mov	r3, r0
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fe fb2d 	bl	8006d08 <ade_scale_power>
 80086ae:	4603      	mov	r3, r0
 80086b0:	4a19      	ldr	r2, [pc, #100]	; (8008718 <ade_handler+0x180>)
 80086b2:	6013      	str	r3, [r2, #0]
							screen2_data.ReactivePower = ade_scale_reactive_power(ADE_ReadData(LVARENERGY, 3));
 80086b4:	2103      	movs	r1, #3
 80086b6:	2008      	movs	r0, #8
 80086b8:	f7f8 fb52 	bl	8000d60 <ADE_ReadData>
 80086bc:	4603      	mov	r3, r0
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fb4e 	bl	8006d60 <ade_scale_reactive_power>
 80086c4:	4603      	mov	r3, r0
 80086c6:	4a14      	ldr	r2, [pc, #80]	; (8008718 <ade_handler+0x180>)
 80086c8:	6053      	str	r3, [r2, #4]
							screen2_data.ApparantPower = ade_get_apparant_power();
 80086ca:	f7fe fb73 	bl	8006db4 <ade_get_apparant_power>
 80086ce:	4603      	mov	r3, r0
 80086d0:	4a11      	ldr	r2, [pc, #68]	; (8008718 <ade_handler+0x180>)
 80086d2:	6093      	str	r3, [r2, #8]
							screen2_data.PowerFactor = ade_get_power_factor();
 80086d4:	f7fe fb94 	bl	8006e00 <ade_get_power_factor>
 80086d8:	4603      	mov	r3, r0
 80086da:	4a0f      	ldr	r2, [pc, #60]	; (8008718 <ade_handler+0x180>)
 80086dc:	60d3      	str	r3, [r2, #12]
							lcd_screen_2_data_update(screen2_data);
 80086de:	4b0e      	ldr	r3, [pc, #56]	; (8008718 <ade_handler+0x180>)
 80086e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086e2:	f7ff f99d 	bl	8007a20 <lcd_screen_2_data_update>
						break;
 80086e6:	e005      	b.n	80086f4 <ade_handler+0x15c>
				}
			}
 80086e8:	bf00      	nop
 80086ea:	e004      	b.n	80086f6 <ade_handler+0x15e>
						break;
 80086ec:	bf00      	nop
 80086ee:	e002      	b.n	80086f6 <ade_handler+0x15e>
						break;
 80086f0:	bf00      	nop
 80086f2:	e000      	b.n	80086f6 <ade_handler+0x15e>
						break;
 80086f4:	bf00      	nop

		taskYIELD();
 80086f6:	4b09      	ldr	r3, [pc, #36]	; (800871c <ade_handler+0x184>)
 80086f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	f3bf 8f6f 	isb	sy
		if(ade_queue_handle != NULL)
 8008706:	e765      	b.n	80085d4 <ade_handler+0x3c>
 8008708:	6665983e 	.word	0x6665983e
 800870c:	3ff6a09e 	.word	0x3ff6a09e
 8008710:	200138dc 	.word	0x200138dc
 8008714:	20013894 	.word	0x20013894
 8008718:	20013880 	.word	0x20013880
 800871c:	e000ed04 	.word	0xe000ed04

08008720 <keypad_handler>:
	}
}

void keypad_handler(void* parameters) {
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
	KEYPAD_Init(KEYPAD_Type_Large);
 8008728:	2000      	movs	r0, #0
 800872a:	f7f8 fe89 	bl	8001440 <KEYPAD_Init>

	KEYPAD_Button_t Keypad_Hold_Button, Keypad_Button, Keypad_prev = KEYPAD_NOPRESSED;
 800872e:	23ff      	movs	r3, #255	; 0xff
 8008730:	737b      	strb	r3, [r7, #13]
	TickType_t update_delay = 10;
 8008732:	230a      	movs	r3, #10
 8008734:	613b      	str	r3, [r7, #16]
	int hold_timeout = KEYPAD_HOLD_TIMEOUT / (uint8_t) update_delay;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	b2db      	uxtb	r3, r3
 800873a:	461a      	mov	r2, r3
 800873c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008740:	fb93 f3f2 	sdiv	r3, r3, r2
 8008744:	617b      	str	r3, [r7, #20]

	while(1) {
		KEYPAD_Update();
 8008746:	f7f8 ffe1 	bl	800170c <KEYPAD_Update>
		Keypad_Button = KEYPAD_Read();
 800874a:	f7f8 feeb 	bl	8001524 <KEYPAD_Read>
 800874e:	4603      	mov	r3, r0
 8008750:	73fb      	strb	r3, [r7, #15]

		if(Keypad_Button != KEYPAD_NOPRESSED && Keypad_Button == Keypad_prev) {
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	2bff      	cmp	r3, #255	; 0xff
 8008756:	d01e      	beq.n	8008796 <keypad_handler+0x76>
 8008758:	7b7b      	ldrb	r3, [r7, #13]
 800875a:	7bfa      	ldrb	r2, [r7, #15]
 800875c:	429a      	cmp	r2, r3
 800875e:	d11a      	bne.n	8008796 <keypad_handler+0x76>
			if(hold_timeout > 0) hold_timeout--;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2b00      	cmp	r3, #0
 8008764:	dd03      	ble.n	800876e <keypad_handler+0x4e>
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	3b01      	subs	r3, #1
 800876a:	617b      	str	r3, [r7, #20]
 800876c:	e013      	b.n	8008796 <keypad_handler+0x76>
			else if (!hold_timeout) {
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d110      	bne.n	8008796 <keypad_handler+0x76>
				hold_timeout--;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	3b01      	subs	r3, #1
 8008778:	617b      	str	r3, [r7, #20]
				Keypad_Hold_Button = KEYPAD_Hold_Button(Keypad_Button);
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	4618      	mov	r0, r3
 800877e:	f7f8 ffb5 	bl	80016ec <KEYPAD_Hold_Button>
 8008782:	4603      	mov	r3, r0
 8008784:	73bb      	strb	r3, [r7, #14]
				xQueueSend(keypad_queue_handle, (void*) &Keypad_Hold_Button, (TickType_t) 0);
 8008786:	4b1a      	ldr	r3, [pc, #104]	; (80087f0 <keypad_handler+0xd0>)
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	f107 010e 	add.w	r1, r7, #14
 800878e:	2300      	movs	r3, #0
 8008790:	2200      	movs	r2, #0
 8008792:	f7f9 fc9d 	bl	80020d0 <xQueueGenericSend>
			}
		}
		if(Keypad_Button == KEYPAD_NOPRESSED && Keypad_prev != KEYPAD_NOPRESSED)
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2bff      	cmp	r3, #255	; 0xff
 800879a:	d10d      	bne.n	80087b8 <keypad_handler+0x98>
 800879c:	7b7b      	ldrb	r3, [r7, #13]
 800879e:	2bff      	cmp	r3, #255	; 0xff
 80087a0:	d00a      	beq.n	80087b8 <keypad_handler+0x98>
			if(hold_timeout > 0)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dd07      	ble.n	80087b8 <keypad_handler+0x98>
				xQueueSend(keypad_queue_handle, (void*) &Keypad_prev, (TickType_t) 0);
 80087a8:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <keypad_handler+0xd0>)
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	f107 010d 	add.w	r1, r7, #13
 80087b0:	2300      	movs	r3, #0
 80087b2:	2200      	movs	r2, #0
 80087b4:	f7f9 fc8c 	bl	80020d0 <xQueueGenericSend>
		if(Keypad_Button == KEYPAD_NOPRESSED && Keypad_prev != KEYPAD_NOPRESSED)
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	2bff      	cmp	r3, #255	; 0xff
 80087bc:	d10a      	bne.n	80087d4 <keypad_handler+0xb4>
 80087be:	7b7b      	ldrb	r3, [r7, #13]
 80087c0:	2bff      	cmp	r3, #255	; 0xff
 80087c2:	d007      	beq.n	80087d4 <keypad_handler+0xb4>
			hold_timeout = KEYPAD_HOLD_TIMEOUT / (uint8_t) update_delay;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	461a      	mov	r2, r3
 80087ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80087ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80087d2:	617b      	str	r3, [r7, #20]

		Keypad_prev = Keypad_Button;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	737b      	strb	r3, [r7, #13]
		vTaskDelay(update_delay);
 80087d8:	6938      	ldr	r0, [r7, #16]
 80087da:	f7fa fa17 	bl	8002c0c <vTaskDelay>
		taskYIELD();
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <keypad_handler+0xd4>)
 80087e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	f3bf 8f6f 	isb	sy
		KEYPAD_Update();
 80087ee:	e7aa      	b.n	8008746 <keypad_handler+0x26>
 80087f0:	200138d8 	.word	0x200138d8
 80087f4:	e000ed04 	.word	0xe000ed04

080087f8 <rtc_handler>:
	}
}

void rtc_handler(void* parameters) {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
	DS1307_DateTime_t rtc_datetime, rtc_config_data;
	int sec, sec_prev = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	61fb      	str	r3, [r7, #28]

	while(DS1307_Init() != DS1307_Result_OK) vTaskDelay(10);
 8008804:	e002      	b.n	800880c <rtc_handler+0x14>
 8008806:	200a      	movs	r0, #10
 8008808:	f7fa fa00 	bl	8002c0c <vTaskDelay>
 800880c:	f7f8 fbe6 	bl	8000fdc <DS1307_Init>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1f7      	bne.n	8008806 <rtc_handler+0xe>

	while(1) {
		if(rtc_queue_handle != NULL)
 8008816:	4b1d      	ldr	r3, [pc, #116]	; (800888c <rtc_handler+0x94>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00f      	beq.n	800883e <rtc_handler+0x46>
			if(xQueueReceive(rtc_queue_handle, &rtc_config_data, (TickType_t) 10) == pdPASS)
 800881e:	4b1b      	ldr	r3, [pc, #108]	; (800888c <rtc_handler+0x94>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f107 0108 	add.w	r1, r7, #8
 8008826:	220a      	movs	r2, #10
 8008828:	4618      	mov	r0, r3
 800882a:	f7f9 fe1d 	bl	8002468 <xQueueReceive>
 800882e:	4603      	mov	r3, r0
 8008830:	2b01      	cmp	r3, #1
 8008832:	d104      	bne.n	800883e <rtc_handler+0x46>
				DS1307_SetDateTime(&rtc_config_data);
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4618      	mov	r0, r3
 800883a:	f7f8 fd7d 	bl	8001338 <DS1307_SetDateTime>

		DS1307_GetDateTime(&rtc_datetime);
 800883e:	f107 0310 	add.w	r3, r7, #16
 8008842:	4618      	mov	r0, r3
 8008844:	f7f8 fd46 	bl	80012d4 <DS1307_GetDateTime>
		sec = rtc_datetime.seconds;
 8008848:	7c3b      	ldrb	r3, [r7, #16]
 800884a:	61bb      	str	r3, [r7, #24]
		if((sec - sec_prev == 1) || (sec_prev - sec == 59)) lcd_screen_3_timer_count_up();
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b01      	cmp	r3, #1
 8008854:	d004      	beq.n	8008860 <rtc_handler+0x68>
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b3b      	cmp	r3, #59	; 0x3b
 800885e:	d101      	bne.n	8008864 <rtc_handler+0x6c>
 8008860:	f7ff f940 	bl	8007ae4 <lcd_screen_3_timer_count_up>
		lcd_screen_4_rtc_update(rtc_datetime);
 8008864:	f107 0310 	add.w	r3, r7, #16
 8008868:	e893 0003 	ldmia.w	r3, {r0, r1}
 800886c:	f7ff f988 	bl	8007b80 <lcd_screen_4_rtc_update>

		sec_prev = sec;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	61fb      	str	r3, [r7, #28]
		vTaskDelay(250);
 8008874:	20fa      	movs	r0, #250	; 0xfa
 8008876:	f7fa f9c9 	bl	8002c0c <vTaskDelay>
		taskYIELD();
 800887a:	4b05      	ldr	r3, [pc, #20]	; (8008890 <rtc_handler+0x98>)
 800887c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	f3bf 8f6f 	isb	sy
		if(rtc_queue_handle != NULL)
 800888a:	e7c4      	b.n	8008816 <rtc_handler+0x1e>
 800888c:	200138e0 	.word	0x200138e0
 8008890:	e000ed04 	.word	0xe000ed04

08008894 <usart_handler>:
	}
}

void usart_handler(void* parameters) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]

	while(1) {
		vTaskDelay(100);
 800889c:	2064      	movs	r0, #100	; 0x64
 800889e:	f7fa f9b5 	bl	8002c0c <vTaskDelay>
		taskYIELD();
 80088a2:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <usart_handler+0x20>)
 80088a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	f3bf 8f6f 	isb	sy
		vTaskDelay(100);
 80088b2:	e7f3      	b.n	800889c <usart_handler+0x8>
 80088b4:	e000ed04 	.word	0xe000ed04

080088b8 <led_handler>:
	}
}

void led_handler(void* parameters) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
//	LED Init
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = PORT_LED;
 80088c0:	4b24      	ldr	r3, [pc, #144]	; (8008954 <led_handler+0x9c>)
 80088c2:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80088c4:	2301      	movs	r3, #1
 80088c6:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80088c8:	2302      	movs	r3, #2
 80088ca:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80088cc:	2300      	movs	r3, #0
 80088ce:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80088d0:	2300      	movs	r3, #0
 80088d2:	74fb      	strb	r3, [r7, #19]

//	Red LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_R_LED;
 80088d4:	2301      	movs	r3, #1
 80088d6:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLed);
 80088d8:	f107 030c 	add.w	r3, r7, #12
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fb fed9 	bl	8004694 <GPIO_Init>

//	Green LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_G_LED;
 80088e2:	2303      	movs	r3, #3
 80088e4:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLed);
 80088e6:	f107 030c 	add.w	r3, r7, #12
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fb fed2 	bl	8004694 <GPIO_Init>

//	Blue LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_B_LED;
 80088f0:	2305      	movs	r3, #5
 80088f2:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GpioLed);
 80088f4:	f107 030c 	add.w	r3, r7, #12
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fb fecb 	bl	8004694 <GPIO_Init>

	R_LED_OFF;
 80088fe:	2201      	movs	r2, #1
 8008900:	2101      	movs	r1, #1
 8008902:	4814      	ldr	r0, [pc, #80]	; (8008954 <led_handler+0x9c>)
 8008904:	f7fc f878 	bl	80049f8 <GPIO_WriteToOutputPin>
	G_LED_OFF;
 8008908:	2201      	movs	r2, #1
 800890a:	2103      	movs	r1, #3
 800890c:	4811      	ldr	r0, [pc, #68]	; (8008954 <led_handler+0x9c>)
 800890e:	f7fc f873 	bl	80049f8 <GPIO_WriteToOutputPin>
	B_LED_OFF;
 8008912:	2201      	movs	r2, #1
 8008914:	2105      	movs	r1, #5
 8008916:	480f      	ldr	r0, [pc, #60]	; (8008954 <led_handler+0x9c>)
 8008918:	f7fc f86e 	bl	80049f8 <GPIO_WriteToOutputPin>
	while(1) {
//		R_LED_ON;
//		vTaskDelay(100);
//		G_LED_ON;
//		vTaskDelay(100);
		B_LED_ON;
 800891c:	2200      	movs	r2, #0
 800891e:	2105      	movs	r1, #5
 8008920:	480c      	ldr	r0, [pc, #48]	; (8008954 <led_handler+0x9c>)
 8008922:	f7fc f869 	bl	80049f8 <GPIO_WriteToOutputPin>
		vTaskDelay(500);
 8008926:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800892a:	f7fa f96f 	bl	8002c0c <vTaskDelay>
//		R_LED_OFF;
//		vTaskDelay(100);
//		G_LED_OFF;
//		vTaskDelay(100);
		B_LED_OFF;
 800892e:	2201      	movs	r2, #1
 8008930:	2105      	movs	r1, #5
 8008932:	4808      	ldr	r0, [pc, #32]	; (8008954 <led_handler+0x9c>)
 8008934:	f7fc f860 	bl	80049f8 <GPIO_WriteToOutputPin>
		vTaskDelay(500);
 8008938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800893c:	f7fa f966 	bl	8002c0c <vTaskDelay>
		taskYIELD();
 8008940:	4b05      	ldr	r3, [pc, #20]	; (8008958 <led_handler+0xa0>)
 8008942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	f3bf 8f6f 	isb	sy
		B_LED_ON;
 8008950:	e7e4      	b.n	800891c <led_handler+0x64>
 8008952:	bf00      	nop
 8008954:	40021000 	.word	0x40021000
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <EXTI15_10_IRQHandler>:
	}
}

void EXTI15_10_IRQHandler(void) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
	static uint8_t zx_count = 0;
	ADE_INT_t ade_int;
    uint32_t pending = EXTI->PR;
 8008962:	4b28      	ldr	r3, [pc, #160]	; (8008a04 <EXTI15_10_IRQHandler+0xa8>)
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	607b      	str	r3, [r7, #4]

    if(pending & (1 << PIN_SAG)) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00e      	beq.n	8008990 <EXTI15_10_IRQHandler+0x34>
        EXTI->PR |= 1 << PIN_SAG;		// clear pending flag, otherwise we'd get endless interrupts
 8008972:	4b24      	ldr	r3, [pc, #144]	; (8008a04 <EXTI15_10_IRQHandler+0xa8>)
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	4a23      	ldr	r2, [pc, #140]	; (8008a04 <EXTI15_10_IRQHandler+0xa8>)
 8008978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800897c:	6153      	str	r3, [r2, #20]
        // handle pin SAG here
		ade_int = ADE_INT_SAG;
 800897e:	2302      	movs	r3, #2
 8008980:	70fb      	strb	r3, [r7, #3]
		xQueueSendFromISR(ade_queue_handle, &ade_int, NULL);
 8008982:	4b21      	ldr	r3, [pc, #132]	; (8008a08 <EXTI15_10_IRQHandler+0xac>)
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	1cf9      	adds	r1, r7, #3
 8008988:	2300      	movs	r3, #0
 800898a:	2200      	movs	r2, #0
 800898c:	f7f9 fcae 	bl	80022ec <xQueueGenericSendFromISR>
    }

    if(pending & (1 << PIN_ZX_IT)) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008996:	2b00      	cmp	r3, #0
 8008998:	d01b      	beq.n	80089d2 <EXTI15_10_IRQHandler+0x76>
        EXTI->PR |= 1 << PIN_ZX_IT;		// clear pending flag, otherwise we'd get endless interrupts
 800899a:	4b1a      	ldr	r3, [pc, #104]	; (8008a04 <EXTI15_10_IRQHandler+0xa8>)
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	4a19      	ldr	r2, [pc, #100]	; (8008a04 <EXTI15_10_IRQHandler+0xa8>)
 80089a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80089a4:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
		if(++zx_count >= 25) {
 80089a6:	4b19      	ldr	r3, [pc, #100]	; (8008a0c <EXTI15_10_IRQHandler+0xb0>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	3301      	adds	r3, #1
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	4b17      	ldr	r3, [pc, #92]	; (8008a0c <EXTI15_10_IRQHandler+0xb0>)
 80089b0:	701a      	strb	r2, [r3, #0]
 80089b2:	4b16      	ldr	r3, [pc, #88]	; (8008a0c <EXTI15_10_IRQHandler+0xb0>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b18      	cmp	r3, #24
 80089b8:	d90b      	bls.n	80089d2 <EXTI15_10_IRQHandler+0x76>
			zx_count = 0;
 80089ba:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <EXTI15_10_IRQHandler+0xb0>)
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]
			ade_int = ADE_INT_ZX;
 80089c0:	2300      	movs	r3, #0
 80089c2:	70fb      	strb	r3, [r7, #3]
			xQueueSendFromISR(ade_queue_handle, &ade_int, NULL);
 80089c4:	4b10      	ldr	r3, [pc, #64]	; (8008a08 <EXTI15_10_IRQHandler+0xac>)
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	1cf9      	adds	r1, r7, #3
 80089ca:	2300      	movs	r3, #0
 80089cc:	2200      	movs	r2, #0
 80089ce:	f7f9 fc8d 	bl	80022ec <xQueueGenericSendFromISR>
		}
    }

    if(pending & (1 << PIN_IRQ_IT)) {
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00e      	beq.n	80089fa <EXTI15_10_IRQHandler+0x9e>
        EXTI->PR |= 1 << PIN_IRQ_IT;	// clear pending flag, otherwise we'd get endless interrupts
 80089dc:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <EXTI15_10_IRQHandler+0xa8>)
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	4a08      	ldr	r2, [pc, #32]	; (8008a04 <EXTI15_10_IRQHandler+0xa8>)
 80089e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e6:	6153      	str	r3, [r2, #20]
        // handle pin IRQ here
        ade_int = ADE_INT_IRQ;
 80089e8:	2301      	movs	r3, #1
 80089ea:	70fb      	strb	r3, [r7, #3]
		xQueueSendFromISR(ade_queue_handle, &ade_int, NULL);
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <EXTI15_10_IRQHandler+0xac>)
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	1cf9      	adds	r1, r7, #3
 80089f2:	2300      	movs	r3, #0
 80089f4:	2200      	movs	r2, #0
 80089f6:	f7f9 fc79 	bl	80022ec <xQueueGenericSendFromISR>
    }
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40013c00 	.word	0x40013c00
 8008a08:	200138dc 	.word	0x200138dc
 8008a0c:	20013578 	.word	0x20013578

08008a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
	return 1;
 8008a14:	2301      	movs	r3, #1
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <_kill>:

int _kill(int pid, int sig)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008a2a:	f000 f8c5 	bl	8008bb8 <__errno>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2216      	movs	r2, #22
 8008a32:	601a      	str	r2, [r3, #0]
	return -1;
 8008a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <_exit>:

void _exit (int status)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff ffe7 	bl	8008a20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008a52:	e7fe      	b.n	8008a52 <_exit+0x12>

08008a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	e00a      	b.n	8008a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008a66:	f3af 8000 	nop.w
 8008a6a:	4601      	mov	r1, r0
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	60ba      	str	r2, [r7, #8]
 8008a72:	b2ca      	uxtb	r2, r1
 8008a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	dbf0      	blt.n	8008a66 <_read+0x12>
	}

return len;
 8008a84:	687b      	ldr	r3, [r7, #4]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <_close>:
	}
	return len;
}

int _close(int file)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
	return -1;
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008ab6:	605a      	str	r2, [r3, #4]
	return 0;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <_isatty>:

int _isatty(int file)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
	return 1;
 8008ace:	2301      	movs	r3, #1
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
	return 0;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b00:	4a14      	ldr	r2, [pc, #80]	; (8008b54 <_sbrk+0x5c>)
 8008b02:	4b15      	ldr	r3, [pc, #84]	; (8008b58 <_sbrk+0x60>)
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b0c:	4b13      	ldr	r3, [pc, #76]	; (8008b5c <_sbrk+0x64>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b14:	4b11      	ldr	r3, [pc, #68]	; (8008b5c <_sbrk+0x64>)
 8008b16:	4a12      	ldr	r2, [pc, #72]	; (8008b60 <_sbrk+0x68>)
 8008b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b1a:	4b10      	ldr	r3, [pc, #64]	; (8008b5c <_sbrk+0x64>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4413      	add	r3, r2
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d207      	bcs.n	8008b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b28:	f000 f846 	bl	8008bb8 <__errno>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	220c      	movs	r2, #12
 8008b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b36:	e009      	b.n	8008b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008b38:	4b08      	ldr	r3, [pc, #32]	; (8008b5c <_sbrk+0x64>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008b3e:	4b07      	ldr	r3, [pc, #28]	; (8008b5c <_sbrk+0x64>)
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4413      	add	r3, r2
 8008b46:	4a05      	ldr	r2, [pc, #20]	; (8008b5c <_sbrk+0x64>)
 8008b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20020000 	.word	0x20020000
 8008b58:	00000400 	.word	0x00000400
 8008b5c:	2001357c 	.word	0x2001357c
 8008b60:	200138f8 	.word	0x200138f8

08008b64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008b64:	480d      	ldr	r0, [pc, #52]	; (8008b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008b66:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008b68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008b6c:	480c      	ldr	r0, [pc, #48]	; (8008ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8008b6e:	490d      	ldr	r1, [pc, #52]	; (8008ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008b70:	4a0d      	ldr	r2, [pc, #52]	; (8008ba8 <LoopForever+0xe>)
  movs r3, #0
 8008b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b74:	e002      	b.n	8008b7c <LoopCopyDataInit>

08008b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b7a:	3304      	adds	r3, #4

08008b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b80:	d3f9      	bcc.n	8008b76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b82:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8008b84:	4c0a      	ldr	r4, [pc, #40]	; (8008bb0 <LoopForever+0x16>)
  movs r3, #0
 8008b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b88:	e001      	b.n	8008b8e <LoopFillZerobss>

08008b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b8c:	3204      	adds	r2, #4

08008b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b90:	d3fb      	bcc.n	8008b8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008b92:	f000 f817 	bl	8008bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008b96:	f7ff fa9b 	bl	80080d0 <main>

08008b9a <LoopForever>:

LoopForever:
    b LoopForever
 8008b9a:	e7fe      	b.n	8008b9a <LoopForever>
  ldr   r0, =_estack
 8008b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ba4:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8008ba8:	0800c344 	.word	0x0800c344
  ldr r2, =_sbss
 8008bac:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8008bb0:	200138f4 	.word	0x200138f4

08008bb4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008bb4:	e7fe      	b.n	8008bb4 <ADC_IRQHandler>
	...

08008bb8 <__errno>:
 8008bb8:	4b01      	ldr	r3, [pc, #4]	; (8008bc0 <__errno+0x8>)
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	20000038 	.word	0x20000038

08008bc4 <__libc_init_array>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	4d0d      	ldr	r5, [pc, #52]	; (8008bfc <__libc_init_array+0x38>)
 8008bc8:	4c0d      	ldr	r4, [pc, #52]	; (8008c00 <__libc_init_array+0x3c>)
 8008bca:	1b64      	subs	r4, r4, r5
 8008bcc:	10a4      	asrs	r4, r4, #2
 8008bce:	2600      	movs	r6, #0
 8008bd0:	42a6      	cmp	r6, r4
 8008bd2:	d109      	bne.n	8008be8 <__libc_init_array+0x24>
 8008bd4:	4d0b      	ldr	r5, [pc, #44]	; (8008c04 <__libc_init_array+0x40>)
 8008bd6:	4c0c      	ldr	r4, [pc, #48]	; (8008c08 <__libc_init_array+0x44>)
 8008bd8:	f002 fee4 	bl	800b9a4 <_init>
 8008bdc:	1b64      	subs	r4, r4, r5
 8008bde:	10a4      	asrs	r4, r4, #2
 8008be0:	2600      	movs	r6, #0
 8008be2:	42a6      	cmp	r6, r4
 8008be4:	d105      	bne.n	8008bf2 <__libc_init_array+0x2e>
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bec:	4798      	blx	r3
 8008bee:	3601      	adds	r6, #1
 8008bf0:	e7ee      	b.n	8008bd0 <__libc_init_array+0xc>
 8008bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf6:	4798      	blx	r3
 8008bf8:	3601      	adds	r6, #1
 8008bfa:	e7f2      	b.n	8008be2 <__libc_init_array+0x1e>
 8008bfc:	0800c33c 	.word	0x0800c33c
 8008c00:	0800c33c 	.word	0x0800c33c
 8008c04:	0800c33c 	.word	0x0800c33c
 8008c08:	0800c340 	.word	0x0800c340

08008c0c <memcmp>:
 8008c0c:	b530      	push	{r4, r5, lr}
 8008c0e:	3901      	subs	r1, #1
 8008c10:	2400      	movs	r4, #0
 8008c12:	42a2      	cmp	r2, r4
 8008c14:	d101      	bne.n	8008c1a <memcmp+0xe>
 8008c16:	2000      	movs	r0, #0
 8008c18:	e005      	b.n	8008c26 <memcmp+0x1a>
 8008c1a:	5d03      	ldrb	r3, [r0, r4]
 8008c1c:	3401      	adds	r4, #1
 8008c1e:	5d0d      	ldrb	r5, [r1, r4]
 8008c20:	42ab      	cmp	r3, r5
 8008c22:	d0f6      	beq.n	8008c12 <memcmp+0x6>
 8008c24:	1b58      	subs	r0, r3, r5
 8008c26:	bd30      	pop	{r4, r5, pc}

08008c28 <memcpy>:
 8008c28:	440a      	add	r2, r1
 8008c2a:	4291      	cmp	r1, r2
 8008c2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c30:	d100      	bne.n	8008c34 <memcpy+0xc>
 8008c32:	4770      	bx	lr
 8008c34:	b510      	push	{r4, lr}
 8008c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c3e:	4291      	cmp	r1, r2
 8008c40:	d1f9      	bne.n	8008c36 <memcpy+0xe>
 8008c42:	bd10      	pop	{r4, pc}

08008c44 <memset>:
 8008c44:	4402      	add	r2, r0
 8008c46:	4603      	mov	r3, r0
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d100      	bne.n	8008c4e <memset+0xa>
 8008c4c:	4770      	bx	lr
 8008c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c52:	e7f9      	b.n	8008c48 <memset+0x4>

08008c54 <__cvt>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	b088      	sub	sp, #32
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	461d      	mov	r5, r3
 8008c5e:	4614      	mov	r4, r2
 8008c60:	bfbc      	itt	lt
 8008c62:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008c66:	4614      	movlt	r4, r2
 8008c68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c6a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008c6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008c70:	bfb6      	itet	lt
 8008c72:	461d      	movlt	r5, r3
 8008c74:	2300      	movge	r3, #0
 8008c76:	232d      	movlt	r3, #45	; 0x2d
 8008c78:	7013      	strb	r3, [r2, #0]
 8008c7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c7c:	f023 0820 	bic.w	r8, r3, #32
 8008c80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c84:	d005      	beq.n	8008c92 <__cvt+0x3e>
 8008c86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c8a:	d100      	bne.n	8008c8e <__cvt+0x3a>
 8008c8c:	3601      	adds	r6, #1
 8008c8e:	2302      	movs	r3, #2
 8008c90:	e000      	b.n	8008c94 <__cvt+0x40>
 8008c92:	2303      	movs	r3, #3
 8008c94:	aa07      	add	r2, sp, #28
 8008c96:	9204      	str	r2, [sp, #16]
 8008c98:	aa06      	add	r2, sp, #24
 8008c9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008c9e:	e9cd 3600 	strd	r3, r6, [sp]
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	462b      	mov	r3, r5
 8008ca6:	f000 fcef 	bl	8009688 <_dtoa_r>
 8008caa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008cae:	4607      	mov	r7, r0
 8008cb0:	d102      	bne.n	8008cb8 <__cvt+0x64>
 8008cb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cb4:	07db      	lsls	r3, r3, #31
 8008cb6:	d522      	bpl.n	8008cfe <__cvt+0xaa>
 8008cb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cbc:	eb07 0906 	add.w	r9, r7, r6
 8008cc0:	d110      	bne.n	8008ce4 <__cvt+0x90>
 8008cc2:	783b      	ldrb	r3, [r7, #0]
 8008cc4:	2b30      	cmp	r3, #48	; 0x30
 8008cc6:	d10a      	bne.n	8008cde <__cvt+0x8a>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2300      	movs	r3, #0
 8008ccc:	4620      	mov	r0, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	f7f7 ff5a 	bl	8000b88 <__aeabi_dcmpeq>
 8008cd4:	b918      	cbnz	r0, 8008cde <__cvt+0x8a>
 8008cd6:	f1c6 0601 	rsb	r6, r6, #1
 8008cda:	f8ca 6000 	str.w	r6, [sl]
 8008cde:	f8da 3000 	ldr.w	r3, [sl]
 8008ce2:	4499      	add	r9, r3
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	4620      	mov	r0, r4
 8008cea:	4629      	mov	r1, r5
 8008cec:	f7f7 ff4c 	bl	8000b88 <__aeabi_dcmpeq>
 8008cf0:	b108      	cbz	r0, 8008cf6 <__cvt+0xa2>
 8008cf2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008cf6:	2230      	movs	r2, #48	; 0x30
 8008cf8:	9b07      	ldr	r3, [sp, #28]
 8008cfa:	454b      	cmp	r3, r9
 8008cfc:	d307      	bcc.n	8008d0e <__cvt+0xba>
 8008cfe:	9b07      	ldr	r3, [sp, #28]
 8008d00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d02:	1bdb      	subs	r3, r3, r7
 8008d04:	4638      	mov	r0, r7
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	b008      	add	sp, #32
 8008d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0e:	1c59      	adds	r1, r3, #1
 8008d10:	9107      	str	r1, [sp, #28]
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	e7f0      	b.n	8008cf8 <__cvt+0xa4>

08008d16 <__exponent>:
 8008d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2900      	cmp	r1, #0
 8008d1c:	bfb8      	it	lt
 8008d1e:	4249      	neglt	r1, r1
 8008d20:	f803 2b02 	strb.w	r2, [r3], #2
 8008d24:	bfb4      	ite	lt
 8008d26:	222d      	movlt	r2, #45	; 0x2d
 8008d28:	222b      	movge	r2, #43	; 0x2b
 8008d2a:	2909      	cmp	r1, #9
 8008d2c:	7042      	strb	r2, [r0, #1]
 8008d2e:	dd2a      	ble.n	8008d86 <__exponent+0x70>
 8008d30:	f10d 0407 	add.w	r4, sp, #7
 8008d34:	46a4      	mov	ip, r4
 8008d36:	270a      	movs	r7, #10
 8008d38:	46a6      	mov	lr, r4
 8008d3a:	460a      	mov	r2, r1
 8008d3c:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d40:	fb07 1516 	mls	r5, r7, r6, r1
 8008d44:	3530      	adds	r5, #48	; 0x30
 8008d46:	2a63      	cmp	r2, #99	; 0x63
 8008d48:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008d4c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d50:	4631      	mov	r1, r6
 8008d52:	dcf1      	bgt.n	8008d38 <__exponent+0x22>
 8008d54:	3130      	adds	r1, #48	; 0x30
 8008d56:	f1ae 0502 	sub.w	r5, lr, #2
 8008d5a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d5e:	1c44      	adds	r4, r0, #1
 8008d60:	4629      	mov	r1, r5
 8008d62:	4561      	cmp	r1, ip
 8008d64:	d30a      	bcc.n	8008d7c <__exponent+0x66>
 8008d66:	f10d 0209 	add.w	r2, sp, #9
 8008d6a:	eba2 020e 	sub.w	r2, r2, lr
 8008d6e:	4565      	cmp	r5, ip
 8008d70:	bf88      	it	hi
 8008d72:	2200      	movhi	r2, #0
 8008d74:	4413      	add	r3, r2
 8008d76:	1a18      	subs	r0, r3, r0
 8008d78:	b003      	add	sp, #12
 8008d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d80:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d84:	e7ed      	b.n	8008d62 <__exponent+0x4c>
 8008d86:	2330      	movs	r3, #48	; 0x30
 8008d88:	3130      	adds	r1, #48	; 0x30
 8008d8a:	7083      	strb	r3, [r0, #2]
 8008d8c:	70c1      	strb	r1, [r0, #3]
 8008d8e:	1d03      	adds	r3, r0, #4
 8008d90:	e7f1      	b.n	8008d76 <__exponent+0x60>
	...

08008d94 <_printf_float>:
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	ed2d 8b02 	vpush	{d8}
 8008d9c:	b091      	sub	sp, #68	; 0x44
 8008d9e:	460c      	mov	r4, r1
 8008da0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008da4:	4616      	mov	r6, r2
 8008da6:	461f      	mov	r7, r3
 8008da8:	4605      	mov	r5, r0
 8008daa:	f001 fa59 	bl	800a260 <_localeconv_r>
 8008dae:	f8d0 a000 	ldr.w	sl, [r0]
 8008db2:	4650      	mov	r0, sl
 8008db4:	f7f7 fa66 	bl	8000284 <strlen>
 8008db8:	2300      	movs	r3, #0
 8008dba:	930e      	str	r3, [sp, #56]	; 0x38
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8008dc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008dc8:	3307      	adds	r3, #7
 8008dca:	f023 0307 	bic.w	r3, r3, #7
 8008dce:	f103 0208 	add.w	r2, r3, #8
 8008dd2:	f8c8 2000 	str.w	r2, [r8]
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008dde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008de2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008de8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008dec:	ee08 0a10 	vmov	s16, r0
 8008df0:	4ba0      	ldr	r3, [pc, #640]	; (8009074 <_printf_float+0x2e0>)
 8008df2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dfa:	f7f7 fef7 	bl	8000bec <__aeabi_dcmpun>
 8008dfe:	bb88      	cbnz	r0, 8008e64 <_printf_float+0xd0>
 8008e00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e04:	4b9b      	ldr	r3, [pc, #620]	; (8009074 <_printf_float+0x2e0>)
 8008e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e0a:	f7f7 fed1 	bl	8000bb0 <__aeabi_dcmple>
 8008e0e:	bb48      	cbnz	r0, 8008e64 <_printf_float+0xd0>
 8008e10:	2200      	movs	r2, #0
 8008e12:	2300      	movs	r3, #0
 8008e14:	4640      	mov	r0, r8
 8008e16:	4649      	mov	r1, r9
 8008e18:	f7f7 fec0 	bl	8000b9c <__aeabi_dcmplt>
 8008e1c:	b110      	cbz	r0, 8008e24 <_printf_float+0x90>
 8008e1e:	232d      	movs	r3, #45	; 0x2d
 8008e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e24:	4b94      	ldr	r3, [pc, #592]	; (8009078 <_printf_float+0x2e4>)
 8008e26:	4895      	ldr	r0, [pc, #596]	; (800907c <_printf_float+0x2e8>)
 8008e28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e2c:	bf94      	ite	ls
 8008e2e:	4698      	movls	r8, r3
 8008e30:	4680      	movhi	r8, r0
 8008e32:	2303      	movs	r3, #3
 8008e34:	6123      	str	r3, [r4, #16]
 8008e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e38:	f023 0304 	bic.w	r3, r3, #4
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	f04f 0900 	mov.w	r9, #0
 8008e42:	9700      	str	r7, [sp, #0]
 8008e44:	4633      	mov	r3, r6
 8008e46:	aa0f      	add	r2, sp, #60	; 0x3c
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f000 f9da 	bl	8009204 <_printf_common>
 8008e50:	3001      	adds	r0, #1
 8008e52:	f040 8092 	bne.w	8008f7a <_printf_float+0x1e6>
 8008e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e5a:	b011      	add	sp, #68	; 0x44
 8008e5c:	ecbd 8b02 	vpop	{d8}
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e64:	4642      	mov	r2, r8
 8008e66:	464b      	mov	r3, r9
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	f7f7 febe 	bl	8000bec <__aeabi_dcmpun>
 8008e70:	b140      	cbz	r0, 8008e84 <_printf_float+0xf0>
 8008e72:	464b      	mov	r3, r9
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	bfbc      	itt	lt
 8008e78:	232d      	movlt	r3, #45	; 0x2d
 8008e7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e7e:	4880      	ldr	r0, [pc, #512]	; (8009080 <_printf_float+0x2ec>)
 8008e80:	4b80      	ldr	r3, [pc, #512]	; (8009084 <_printf_float+0x2f0>)
 8008e82:	e7d1      	b.n	8008e28 <_printf_float+0x94>
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 8008e8c:	d143      	bne.n	8008f16 <_printf_float+0x182>
 8008e8e:	2306      	movs	r3, #6
 8008e90:	6063      	str	r3, [r4, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e96:	9206      	str	r2, [sp, #24]
 8008e98:	aa0e      	add	r2, sp, #56	; 0x38
 8008e9a:	e9cd b204 	strd	fp, r2, [sp, #16]
 8008e9e:	aa0d      	add	r2, sp, #52	; 0x34
 8008ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ea4:	9203      	str	r2, [sp, #12]
 8008ea6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008eaa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	6863      	ldr	r3, [r4, #4]
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	4642      	mov	r2, r8
 8008eb6:	464b      	mov	r3, r9
 8008eb8:	4628      	mov	r0, r5
 8008eba:	910a      	str	r1, [sp, #40]	; 0x28
 8008ebc:	f7ff feca 	bl	8008c54 <__cvt>
 8008ec0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ec2:	2947      	cmp	r1, #71	; 0x47
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ec8:	d108      	bne.n	8008edc <_printf_float+0x148>
 8008eca:	1cc8      	adds	r0, r1, #3
 8008ecc:	db02      	blt.n	8008ed4 <_printf_float+0x140>
 8008ece:	6863      	ldr	r3, [r4, #4]
 8008ed0:	4299      	cmp	r1, r3
 8008ed2:	dd40      	ble.n	8008f56 <_printf_float+0x1c2>
 8008ed4:	f1ab 0b02 	sub.w	fp, fp, #2
 8008ed8:	fa5f fb8b 	uxtb.w	fp, fp
 8008edc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ee0:	d81f      	bhi.n	8008f22 <_printf_float+0x18e>
 8008ee2:	3901      	subs	r1, #1
 8008ee4:	465a      	mov	r2, fp
 8008ee6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008eea:	910d      	str	r1, [sp, #52]	; 0x34
 8008eec:	f7ff ff13 	bl	8008d16 <__exponent>
 8008ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ef2:	1813      	adds	r3, r2, r0
 8008ef4:	2a01      	cmp	r2, #1
 8008ef6:	4681      	mov	r9, r0
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	dc02      	bgt.n	8008f02 <_printf_float+0x16e>
 8008efc:	6822      	ldr	r2, [r4, #0]
 8008efe:	07d2      	lsls	r2, r2, #31
 8008f00:	d501      	bpl.n	8008f06 <_printf_float+0x172>
 8008f02:	3301      	adds	r3, #1
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d099      	beq.n	8008e42 <_printf_float+0xae>
 8008f0e:	232d      	movs	r3, #45	; 0x2d
 8008f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f14:	e795      	b.n	8008e42 <_printf_float+0xae>
 8008f16:	2947      	cmp	r1, #71	; 0x47
 8008f18:	d1bb      	bne.n	8008e92 <_printf_float+0xfe>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1b9      	bne.n	8008e92 <_printf_float+0xfe>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e7b6      	b.n	8008e90 <_printf_float+0xfc>
 8008f22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f26:	d118      	bne.n	8008f5a <_printf_float+0x1c6>
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	6863      	ldr	r3, [r4, #4]
 8008f2c:	dd0b      	ble.n	8008f46 <_printf_float+0x1b2>
 8008f2e:	6121      	str	r1, [r4, #16]
 8008f30:	b913      	cbnz	r3, 8008f38 <_printf_float+0x1a4>
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	07d0      	lsls	r0, r2, #31
 8008f36:	d502      	bpl.n	8008f3e <_printf_float+0x1aa>
 8008f38:	3301      	adds	r3, #1
 8008f3a:	440b      	add	r3, r1
 8008f3c:	6123      	str	r3, [r4, #16]
 8008f3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f40:	f04f 0900 	mov.w	r9, #0
 8008f44:	e7df      	b.n	8008f06 <_printf_float+0x172>
 8008f46:	b913      	cbnz	r3, 8008f4e <_printf_float+0x1ba>
 8008f48:	6822      	ldr	r2, [r4, #0]
 8008f4a:	07d2      	lsls	r2, r2, #31
 8008f4c:	d501      	bpl.n	8008f52 <_printf_float+0x1be>
 8008f4e:	3302      	adds	r3, #2
 8008f50:	e7f4      	b.n	8008f3c <_printf_float+0x1a8>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e7f2      	b.n	8008f3c <_printf_float+0x1a8>
 8008f56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f5c:	4299      	cmp	r1, r3
 8008f5e:	db05      	blt.n	8008f6c <_printf_float+0x1d8>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	6121      	str	r1, [r4, #16]
 8008f64:	07d8      	lsls	r0, r3, #31
 8008f66:	d5ea      	bpl.n	8008f3e <_printf_float+0x1aa>
 8008f68:	1c4b      	adds	r3, r1, #1
 8008f6a:	e7e7      	b.n	8008f3c <_printf_float+0x1a8>
 8008f6c:	2900      	cmp	r1, #0
 8008f6e:	bfd4      	ite	le
 8008f70:	f1c1 0202 	rsble	r2, r1, #2
 8008f74:	2201      	movgt	r2, #1
 8008f76:	4413      	add	r3, r2
 8008f78:	e7e0      	b.n	8008f3c <_printf_float+0x1a8>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	055a      	lsls	r2, r3, #21
 8008f7e:	d407      	bmi.n	8008f90 <_printf_float+0x1fc>
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	4642      	mov	r2, r8
 8008f84:	4631      	mov	r1, r6
 8008f86:	4628      	mov	r0, r5
 8008f88:	47b8      	blx	r7
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d12c      	bne.n	8008fe8 <_printf_float+0x254>
 8008f8e:	e762      	b.n	8008e56 <_printf_float+0xc2>
 8008f90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f94:	f240 80e0 	bls.w	8009158 <_printf_float+0x3c4>
 8008f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f7f7 fdf2 	bl	8000b88 <__aeabi_dcmpeq>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d034      	beq.n	8009012 <_printf_float+0x27e>
 8008fa8:	4a37      	ldr	r2, [pc, #220]	; (8009088 <_printf_float+0x2f4>)
 8008faa:	2301      	movs	r3, #1
 8008fac:	4631      	mov	r1, r6
 8008fae:	4628      	mov	r0, r5
 8008fb0:	47b8      	blx	r7
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	f43f af4f 	beq.w	8008e56 <_printf_float+0xc2>
 8008fb8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	db02      	blt.n	8008fc6 <_printf_float+0x232>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	07d8      	lsls	r0, r3, #31
 8008fc4:	d510      	bpl.n	8008fe8 <_printf_float+0x254>
 8008fc6:	ee18 3a10 	vmov	r3, s16
 8008fca:	4652      	mov	r2, sl
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4628      	mov	r0, r5
 8008fd0:	47b8      	blx	r7
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	f43f af3f 	beq.w	8008e56 <_printf_float+0xc2>
 8008fd8:	f04f 0800 	mov.w	r8, #0
 8008fdc:	f104 091a 	add.w	r9, r4, #26
 8008fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	4543      	cmp	r3, r8
 8008fe6:	dc09      	bgt.n	8008ffc <_printf_float+0x268>
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	079b      	lsls	r3, r3, #30
 8008fec:	f100 8105 	bmi.w	80091fa <_printf_float+0x466>
 8008ff0:	68e0      	ldr	r0, [r4, #12]
 8008ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ff4:	4298      	cmp	r0, r3
 8008ff6:	bfb8      	it	lt
 8008ff8:	4618      	movlt	r0, r3
 8008ffa:	e72e      	b.n	8008e5a <_printf_float+0xc6>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	464a      	mov	r2, r9
 8009000:	4631      	mov	r1, r6
 8009002:	4628      	mov	r0, r5
 8009004:	47b8      	blx	r7
 8009006:	3001      	adds	r0, #1
 8009008:	f43f af25 	beq.w	8008e56 <_printf_float+0xc2>
 800900c:	f108 0801 	add.w	r8, r8, #1
 8009010:	e7e6      	b.n	8008fe0 <_printf_float+0x24c>
 8009012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009014:	2b00      	cmp	r3, #0
 8009016:	dc39      	bgt.n	800908c <_printf_float+0x2f8>
 8009018:	4a1b      	ldr	r2, [pc, #108]	; (8009088 <_printf_float+0x2f4>)
 800901a:	2301      	movs	r3, #1
 800901c:	4631      	mov	r1, r6
 800901e:	4628      	mov	r0, r5
 8009020:	47b8      	blx	r7
 8009022:	3001      	adds	r0, #1
 8009024:	f43f af17 	beq.w	8008e56 <_printf_float+0xc2>
 8009028:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800902c:	4313      	orrs	r3, r2
 800902e:	d102      	bne.n	8009036 <_printf_float+0x2a2>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	07d9      	lsls	r1, r3, #31
 8009034:	d5d8      	bpl.n	8008fe8 <_printf_float+0x254>
 8009036:	ee18 3a10 	vmov	r3, s16
 800903a:	4652      	mov	r2, sl
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f af07 	beq.w	8008e56 <_printf_float+0xc2>
 8009048:	f04f 0900 	mov.w	r9, #0
 800904c:	f104 0a1a 	add.w	sl, r4, #26
 8009050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009052:	425b      	negs	r3, r3
 8009054:	454b      	cmp	r3, r9
 8009056:	dc01      	bgt.n	800905c <_printf_float+0x2c8>
 8009058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800905a:	e792      	b.n	8008f82 <_printf_float+0x1ee>
 800905c:	2301      	movs	r3, #1
 800905e:	4652      	mov	r2, sl
 8009060:	4631      	mov	r1, r6
 8009062:	4628      	mov	r0, r5
 8009064:	47b8      	blx	r7
 8009066:	3001      	adds	r0, #1
 8009068:	f43f aef5 	beq.w	8008e56 <_printf_float+0xc2>
 800906c:	f109 0901 	add.w	r9, r9, #1
 8009070:	e7ee      	b.n	8009050 <_printf_float+0x2bc>
 8009072:	bf00      	nop
 8009074:	7fefffff 	.word	0x7fefffff
 8009078:	0800bf60 	.word	0x0800bf60
 800907c:	0800bf64 	.word	0x0800bf64
 8009080:	0800bf6c 	.word	0x0800bf6c
 8009084:	0800bf68 	.word	0x0800bf68
 8009088:	0800bf70 	.word	0x0800bf70
 800908c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800908e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009090:	429a      	cmp	r2, r3
 8009092:	bfa8      	it	ge
 8009094:	461a      	movge	r2, r3
 8009096:	2a00      	cmp	r2, #0
 8009098:	4691      	mov	r9, r2
 800909a:	dc37      	bgt.n	800910c <_printf_float+0x378>
 800909c:	f04f 0b00 	mov.w	fp, #0
 80090a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090a4:	f104 021a 	add.w	r2, r4, #26
 80090a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090aa:	9309      	str	r3, [sp, #36]	; 0x24
 80090ac:	eba3 0309 	sub.w	r3, r3, r9
 80090b0:	455b      	cmp	r3, fp
 80090b2:	dc33      	bgt.n	800911c <_printf_float+0x388>
 80090b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090b8:	429a      	cmp	r2, r3
 80090ba:	db3b      	blt.n	8009134 <_printf_float+0x3a0>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	07da      	lsls	r2, r3, #31
 80090c0:	d438      	bmi.n	8009134 <_printf_float+0x3a0>
 80090c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	eba2 0901 	sub.w	r9, r2, r1
 80090ce:	4599      	cmp	r9, r3
 80090d0:	bfa8      	it	ge
 80090d2:	4699      	movge	r9, r3
 80090d4:	f1b9 0f00 	cmp.w	r9, #0
 80090d8:	dc35      	bgt.n	8009146 <_printf_float+0x3b2>
 80090da:	f04f 0800 	mov.w	r8, #0
 80090de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090e2:	f104 0a1a 	add.w	sl, r4, #26
 80090e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	eba3 0309 	sub.w	r3, r3, r9
 80090f0:	4543      	cmp	r3, r8
 80090f2:	f77f af79 	ble.w	8008fe8 <_printf_float+0x254>
 80090f6:	2301      	movs	r3, #1
 80090f8:	4652      	mov	r2, sl
 80090fa:	4631      	mov	r1, r6
 80090fc:	4628      	mov	r0, r5
 80090fe:	47b8      	blx	r7
 8009100:	3001      	adds	r0, #1
 8009102:	f43f aea8 	beq.w	8008e56 <_printf_float+0xc2>
 8009106:	f108 0801 	add.w	r8, r8, #1
 800910a:	e7ec      	b.n	80090e6 <_printf_float+0x352>
 800910c:	4613      	mov	r3, r2
 800910e:	4631      	mov	r1, r6
 8009110:	4642      	mov	r2, r8
 8009112:	4628      	mov	r0, r5
 8009114:	47b8      	blx	r7
 8009116:	3001      	adds	r0, #1
 8009118:	d1c0      	bne.n	800909c <_printf_float+0x308>
 800911a:	e69c      	b.n	8008e56 <_printf_float+0xc2>
 800911c:	2301      	movs	r3, #1
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	9209      	str	r2, [sp, #36]	; 0x24
 8009124:	47b8      	blx	r7
 8009126:	3001      	adds	r0, #1
 8009128:	f43f ae95 	beq.w	8008e56 <_printf_float+0xc2>
 800912c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800912e:	f10b 0b01 	add.w	fp, fp, #1
 8009132:	e7b9      	b.n	80090a8 <_printf_float+0x314>
 8009134:	ee18 3a10 	vmov	r3, s16
 8009138:	4652      	mov	r2, sl
 800913a:	4631      	mov	r1, r6
 800913c:	4628      	mov	r0, r5
 800913e:	47b8      	blx	r7
 8009140:	3001      	adds	r0, #1
 8009142:	d1be      	bne.n	80090c2 <_printf_float+0x32e>
 8009144:	e687      	b.n	8008e56 <_printf_float+0xc2>
 8009146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009148:	464b      	mov	r3, r9
 800914a:	4442      	add	r2, r8
 800914c:	4631      	mov	r1, r6
 800914e:	4628      	mov	r0, r5
 8009150:	47b8      	blx	r7
 8009152:	3001      	adds	r0, #1
 8009154:	d1c1      	bne.n	80090da <_printf_float+0x346>
 8009156:	e67e      	b.n	8008e56 <_printf_float+0xc2>
 8009158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800915a:	2a01      	cmp	r2, #1
 800915c:	dc01      	bgt.n	8009162 <_printf_float+0x3ce>
 800915e:	07db      	lsls	r3, r3, #31
 8009160:	d538      	bpl.n	80091d4 <_printf_float+0x440>
 8009162:	2301      	movs	r3, #1
 8009164:	4642      	mov	r2, r8
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	f43f ae72 	beq.w	8008e56 <_printf_float+0xc2>
 8009172:	ee18 3a10 	vmov	r3, s16
 8009176:	4652      	mov	r2, sl
 8009178:	4631      	mov	r1, r6
 800917a:	4628      	mov	r0, r5
 800917c:	47b8      	blx	r7
 800917e:	3001      	adds	r0, #1
 8009180:	f43f ae69 	beq.w	8008e56 <_printf_float+0xc2>
 8009184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009188:	2200      	movs	r2, #0
 800918a:	2300      	movs	r3, #0
 800918c:	f7f7 fcfc 	bl	8000b88 <__aeabi_dcmpeq>
 8009190:	b9d8      	cbnz	r0, 80091ca <_printf_float+0x436>
 8009192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009194:	f108 0201 	add.w	r2, r8, #1
 8009198:	3b01      	subs	r3, #1
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	d10e      	bne.n	80091c2 <_printf_float+0x42e>
 80091a4:	e657      	b.n	8008e56 <_printf_float+0xc2>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4652      	mov	r2, sl
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	f43f ae50 	beq.w	8008e56 <_printf_float+0xc2>
 80091b6:	f108 0801 	add.w	r8, r8, #1
 80091ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091bc:	3b01      	subs	r3, #1
 80091be:	4543      	cmp	r3, r8
 80091c0:	dcf1      	bgt.n	80091a6 <_printf_float+0x412>
 80091c2:	464b      	mov	r3, r9
 80091c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091c8:	e6dc      	b.n	8008f84 <_printf_float+0x1f0>
 80091ca:	f04f 0800 	mov.w	r8, #0
 80091ce:	f104 0a1a 	add.w	sl, r4, #26
 80091d2:	e7f2      	b.n	80091ba <_printf_float+0x426>
 80091d4:	2301      	movs	r3, #1
 80091d6:	4642      	mov	r2, r8
 80091d8:	e7df      	b.n	800919a <_printf_float+0x406>
 80091da:	2301      	movs	r3, #1
 80091dc:	464a      	mov	r2, r9
 80091de:	4631      	mov	r1, r6
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b8      	blx	r7
 80091e4:	3001      	adds	r0, #1
 80091e6:	f43f ae36 	beq.w	8008e56 <_printf_float+0xc2>
 80091ea:	f108 0801 	add.w	r8, r8, #1
 80091ee:	68e3      	ldr	r3, [r4, #12]
 80091f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80091f2:	1a5b      	subs	r3, r3, r1
 80091f4:	4543      	cmp	r3, r8
 80091f6:	dcf0      	bgt.n	80091da <_printf_float+0x446>
 80091f8:	e6fa      	b.n	8008ff0 <_printf_float+0x25c>
 80091fa:	f04f 0800 	mov.w	r8, #0
 80091fe:	f104 0919 	add.w	r9, r4, #25
 8009202:	e7f4      	b.n	80091ee <_printf_float+0x45a>

08009204 <_printf_common>:
 8009204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009208:	4616      	mov	r6, r2
 800920a:	4699      	mov	r9, r3
 800920c:	688a      	ldr	r2, [r1, #8]
 800920e:	690b      	ldr	r3, [r1, #16]
 8009210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009214:	4293      	cmp	r3, r2
 8009216:	bfb8      	it	lt
 8009218:	4613      	movlt	r3, r2
 800921a:	6033      	str	r3, [r6, #0]
 800921c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009220:	4607      	mov	r7, r0
 8009222:	460c      	mov	r4, r1
 8009224:	b10a      	cbz	r2, 800922a <_printf_common+0x26>
 8009226:	3301      	adds	r3, #1
 8009228:	6033      	str	r3, [r6, #0]
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	0699      	lsls	r1, r3, #26
 800922e:	bf42      	ittt	mi
 8009230:	6833      	ldrmi	r3, [r6, #0]
 8009232:	3302      	addmi	r3, #2
 8009234:	6033      	strmi	r3, [r6, #0]
 8009236:	6825      	ldr	r5, [r4, #0]
 8009238:	f015 0506 	ands.w	r5, r5, #6
 800923c:	d106      	bne.n	800924c <_printf_common+0x48>
 800923e:	f104 0a19 	add.w	sl, r4, #25
 8009242:	68e3      	ldr	r3, [r4, #12]
 8009244:	6832      	ldr	r2, [r6, #0]
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	42ab      	cmp	r3, r5
 800924a:	dc26      	bgt.n	800929a <_printf_common+0x96>
 800924c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009250:	1e13      	subs	r3, r2, #0
 8009252:	6822      	ldr	r2, [r4, #0]
 8009254:	bf18      	it	ne
 8009256:	2301      	movne	r3, #1
 8009258:	0692      	lsls	r2, r2, #26
 800925a:	d42b      	bmi.n	80092b4 <_printf_common+0xb0>
 800925c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009260:	4649      	mov	r1, r9
 8009262:	4638      	mov	r0, r7
 8009264:	47c0      	blx	r8
 8009266:	3001      	adds	r0, #1
 8009268:	d01e      	beq.n	80092a8 <_printf_common+0xa4>
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	68e5      	ldr	r5, [r4, #12]
 800926e:	6832      	ldr	r2, [r6, #0]
 8009270:	f003 0306 	and.w	r3, r3, #6
 8009274:	2b04      	cmp	r3, #4
 8009276:	bf08      	it	eq
 8009278:	1aad      	subeq	r5, r5, r2
 800927a:	68a3      	ldr	r3, [r4, #8]
 800927c:	6922      	ldr	r2, [r4, #16]
 800927e:	bf0c      	ite	eq
 8009280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009284:	2500      	movne	r5, #0
 8009286:	4293      	cmp	r3, r2
 8009288:	bfc4      	itt	gt
 800928a:	1a9b      	subgt	r3, r3, r2
 800928c:	18ed      	addgt	r5, r5, r3
 800928e:	2600      	movs	r6, #0
 8009290:	341a      	adds	r4, #26
 8009292:	42b5      	cmp	r5, r6
 8009294:	d11a      	bne.n	80092cc <_printf_common+0xc8>
 8009296:	2000      	movs	r0, #0
 8009298:	e008      	b.n	80092ac <_printf_common+0xa8>
 800929a:	2301      	movs	r3, #1
 800929c:	4652      	mov	r2, sl
 800929e:	4649      	mov	r1, r9
 80092a0:	4638      	mov	r0, r7
 80092a2:	47c0      	blx	r8
 80092a4:	3001      	adds	r0, #1
 80092a6:	d103      	bne.n	80092b0 <_printf_common+0xac>
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b0:	3501      	adds	r5, #1
 80092b2:	e7c6      	b.n	8009242 <_printf_common+0x3e>
 80092b4:	18e1      	adds	r1, r4, r3
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	2030      	movs	r0, #48	; 0x30
 80092ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092be:	4422      	add	r2, r4
 80092c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092c8:	3302      	adds	r3, #2
 80092ca:	e7c7      	b.n	800925c <_printf_common+0x58>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4622      	mov	r2, r4
 80092d0:	4649      	mov	r1, r9
 80092d2:	4638      	mov	r0, r7
 80092d4:	47c0      	blx	r8
 80092d6:	3001      	adds	r0, #1
 80092d8:	d0e6      	beq.n	80092a8 <_printf_common+0xa4>
 80092da:	3601      	adds	r6, #1
 80092dc:	e7d9      	b.n	8009292 <_printf_common+0x8e>
	...

080092e0 <_printf_i>:
 80092e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092e4:	460c      	mov	r4, r1
 80092e6:	4691      	mov	r9, r2
 80092e8:	7e27      	ldrb	r7, [r4, #24]
 80092ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092ec:	2f78      	cmp	r7, #120	; 0x78
 80092ee:	4680      	mov	r8, r0
 80092f0:	469a      	mov	sl, r3
 80092f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092f6:	d807      	bhi.n	8009308 <_printf_i+0x28>
 80092f8:	2f62      	cmp	r7, #98	; 0x62
 80092fa:	d80a      	bhi.n	8009312 <_printf_i+0x32>
 80092fc:	2f00      	cmp	r7, #0
 80092fe:	f000 80d8 	beq.w	80094b2 <_printf_i+0x1d2>
 8009302:	2f58      	cmp	r7, #88	; 0x58
 8009304:	f000 80a3 	beq.w	800944e <_printf_i+0x16e>
 8009308:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800930c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009310:	e03a      	b.n	8009388 <_printf_i+0xa8>
 8009312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009316:	2b15      	cmp	r3, #21
 8009318:	d8f6      	bhi.n	8009308 <_printf_i+0x28>
 800931a:	a001      	add	r0, pc, #4	; (adr r0, 8009320 <_printf_i+0x40>)
 800931c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009320:	08009379 	.word	0x08009379
 8009324:	0800938d 	.word	0x0800938d
 8009328:	08009309 	.word	0x08009309
 800932c:	08009309 	.word	0x08009309
 8009330:	08009309 	.word	0x08009309
 8009334:	08009309 	.word	0x08009309
 8009338:	0800938d 	.word	0x0800938d
 800933c:	08009309 	.word	0x08009309
 8009340:	08009309 	.word	0x08009309
 8009344:	08009309 	.word	0x08009309
 8009348:	08009309 	.word	0x08009309
 800934c:	08009499 	.word	0x08009499
 8009350:	080093bd 	.word	0x080093bd
 8009354:	0800947b 	.word	0x0800947b
 8009358:	08009309 	.word	0x08009309
 800935c:	08009309 	.word	0x08009309
 8009360:	080094bb 	.word	0x080094bb
 8009364:	08009309 	.word	0x08009309
 8009368:	080093bd 	.word	0x080093bd
 800936c:	08009309 	.word	0x08009309
 8009370:	08009309 	.word	0x08009309
 8009374:	08009483 	.word	0x08009483
 8009378:	680b      	ldr	r3, [r1, #0]
 800937a:	1d1a      	adds	r2, r3, #4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	600a      	str	r2, [r1, #0]
 8009380:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009388:	2301      	movs	r3, #1
 800938a:	e0a3      	b.n	80094d4 <_printf_i+0x1f4>
 800938c:	6825      	ldr	r5, [r4, #0]
 800938e:	6808      	ldr	r0, [r1, #0]
 8009390:	062e      	lsls	r6, r5, #24
 8009392:	f100 0304 	add.w	r3, r0, #4
 8009396:	d50a      	bpl.n	80093ae <_printf_i+0xce>
 8009398:	6805      	ldr	r5, [r0, #0]
 800939a:	600b      	str	r3, [r1, #0]
 800939c:	2d00      	cmp	r5, #0
 800939e:	da03      	bge.n	80093a8 <_printf_i+0xc8>
 80093a0:	232d      	movs	r3, #45	; 0x2d
 80093a2:	426d      	negs	r5, r5
 80093a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a8:	485e      	ldr	r0, [pc, #376]	; (8009524 <_printf_i+0x244>)
 80093aa:	230a      	movs	r3, #10
 80093ac:	e019      	b.n	80093e2 <_printf_i+0x102>
 80093ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80093b2:	6805      	ldr	r5, [r0, #0]
 80093b4:	600b      	str	r3, [r1, #0]
 80093b6:	bf18      	it	ne
 80093b8:	b22d      	sxthne	r5, r5
 80093ba:	e7ef      	b.n	800939c <_printf_i+0xbc>
 80093bc:	680b      	ldr	r3, [r1, #0]
 80093be:	6825      	ldr	r5, [r4, #0]
 80093c0:	1d18      	adds	r0, r3, #4
 80093c2:	6008      	str	r0, [r1, #0]
 80093c4:	0628      	lsls	r0, r5, #24
 80093c6:	d501      	bpl.n	80093cc <_printf_i+0xec>
 80093c8:	681d      	ldr	r5, [r3, #0]
 80093ca:	e002      	b.n	80093d2 <_printf_i+0xf2>
 80093cc:	0669      	lsls	r1, r5, #25
 80093ce:	d5fb      	bpl.n	80093c8 <_printf_i+0xe8>
 80093d0:	881d      	ldrh	r5, [r3, #0]
 80093d2:	4854      	ldr	r0, [pc, #336]	; (8009524 <_printf_i+0x244>)
 80093d4:	2f6f      	cmp	r7, #111	; 0x6f
 80093d6:	bf0c      	ite	eq
 80093d8:	2308      	moveq	r3, #8
 80093da:	230a      	movne	r3, #10
 80093dc:	2100      	movs	r1, #0
 80093de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093e2:	6866      	ldr	r6, [r4, #4]
 80093e4:	60a6      	str	r6, [r4, #8]
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	bfa2      	ittt	ge
 80093ea:	6821      	ldrge	r1, [r4, #0]
 80093ec:	f021 0104 	bicge.w	r1, r1, #4
 80093f0:	6021      	strge	r1, [r4, #0]
 80093f2:	b90d      	cbnz	r5, 80093f8 <_printf_i+0x118>
 80093f4:	2e00      	cmp	r6, #0
 80093f6:	d04d      	beq.n	8009494 <_printf_i+0x1b4>
 80093f8:	4616      	mov	r6, r2
 80093fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80093fe:	fb03 5711 	mls	r7, r3, r1, r5
 8009402:	5dc7      	ldrb	r7, [r0, r7]
 8009404:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009408:	462f      	mov	r7, r5
 800940a:	42bb      	cmp	r3, r7
 800940c:	460d      	mov	r5, r1
 800940e:	d9f4      	bls.n	80093fa <_printf_i+0x11a>
 8009410:	2b08      	cmp	r3, #8
 8009412:	d10b      	bne.n	800942c <_printf_i+0x14c>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	07df      	lsls	r7, r3, #31
 8009418:	d508      	bpl.n	800942c <_printf_i+0x14c>
 800941a:	6923      	ldr	r3, [r4, #16]
 800941c:	6861      	ldr	r1, [r4, #4]
 800941e:	4299      	cmp	r1, r3
 8009420:	bfde      	ittt	le
 8009422:	2330      	movle	r3, #48	; 0x30
 8009424:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009428:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800942c:	1b92      	subs	r2, r2, r6
 800942e:	6122      	str	r2, [r4, #16]
 8009430:	f8cd a000 	str.w	sl, [sp]
 8009434:	464b      	mov	r3, r9
 8009436:	aa03      	add	r2, sp, #12
 8009438:	4621      	mov	r1, r4
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fee2 	bl	8009204 <_printf_common>
 8009440:	3001      	adds	r0, #1
 8009442:	d14c      	bne.n	80094de <_printf_i+0x1fe>
 8009444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009448:	b004      	add	sp, #16
 800944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944e:	4835      	ldr	r0, [pc, #212]	; (8009524 <_printf_i+0x244>)
 8009450:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	680e      	ldr	r6, [r1, #0]
 8009458:	061f      	lsls	r7, r3, #24
 800945a:	f856 5b04 	ldr.w	r5, [r6], #4
 800945e:	600e      	str	r6, [r1, #0]
 8009460:	d514      	bpl.n	800948c <_printf_i+0x1ac>
 8009462:	07d9      	lsls	r1, r3, #31
 8009464:	bf44      	itt	mi
 8009466:	f043 0320 	orrmi.w	r3, r3, #32
 800946a:	6023      	strmi	r3, [r4, #0]
 800946c:	b91d      	cbnz	r5, 8009476 <_printf_i+0x196>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	f023 0320 	bic.w	r3, r3, #32
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	2310      	movs	r3, #16
 8009478:	e7b0      	b.n	80093dc <_printf_i+0xfc>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	f043 0320 	orr.w	r3, r3, #32
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	2378      	movs	r3, #120	; 0x78
 8009484:	4828      	ldr	r0, [pc, #160]	; (8009528 <_printf_i+0x248>)
 8009486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800948a:	e7e3      	b.n	8009454 <_printf_i+0x174>
 800948c:	065e      	lsls	r6, r3, #25
 800948e:	bf48      	it	mi
 8009490:	b2ad      	uxthmi	r5, r5
 8009492:	e7e6      	b.n	8009462 <_printf_i+0x182>
 8009494:	4616      	mov	r6, r2
 8009496:	e7bb      	b.n	8009410 <_printf_i+0x130>
 8009498:	680b      	ldr	r3, [r1, #0]
 800949a:	6826      	ldr	r6, [r4, #0]
 800949c:	6960      	ldr	r0, [r4, #20]
 800949e:	1d1d      	adds	r5, r3, #4
 80094a0:	600d      	str	r5, [r1, #0]
 80094a2:	0635      	lsls	r5, r6, #24
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	d501      	bpl.n	80094ac <_printf_i+0x1cc>
 80094a8:	6018      	str	r0, [r3, #0]
 80094aa:	e002      	b.n	80094b2 <_printf_i+0x1d2>
 80094ac:	0671      	lsls	r1, r6, #25
 80094ae:	d5fb      	bpl.n	80094a8 <_printf_i+0x1c8>
 80094b0:	8018      	strh	r0, [r3, #0]
 80094b2:	2300      	movs	r3, #0
 80094b4:	6123      	str	r3, [r4, #16]
 80094b6:	4616      	mov	r6, r2
 80094b8:	e7ba      	b.n	8009430 <_printf_i+0x150>
 80094ba:	680b      	ldr	r3, [r1, #0]
 80094bc:	1d1a      	adds	r2, r3, #4
 80094be:	600a      	str	r2, [r1, #0]
 80094c0:	681e      	ldr	r6, [r3, #0]
 80094c2:	6862      	ldr	r2, [r4, #4]
 80094c4:	2100      	movs	r1, #0
 80094c6:	4630      	mov	r0, r6
 80094c8:	f7f6 feea 	bl	80002a0 <memchr>
 80094cc:	b108      	cbz	r0, 80094d2 <_printf_i+0x1f2>
 80094ce:	1b80      	subs	r0, r0, r6
 80094d0:	6060      	str	r0, [r4, #4]
 80094d2:	6863      	ldr	r3, [r4, #4]
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	2300      	movs	r3, #0
 80094d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094dc:	e7a8      	b.n	8009430 <_printf_i+0x150>
 80094de:	6923      	ldr	r3, [r4, #16]
 80094e0:	4632      	mov	r2, r6
 80094e2:	4649      	mov	r1, r9
 80094e4:	4640      	mov	r0, r8
 80094e6:	47d0      	blx	sl
 80094e8:	3001      	adds	r0, #1
 80094ea:	d0ab      	beq.n	8009444 <_printf_i+0x164>
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	079b      	lsls	r3, r3, #30
 80094f0:	d413      	bmi.n	800951a <_printf_i+0x23a>
 80094f2:	68e0      	ldr	r0, [r4, #12]
 80094f4:	9b03      	ldr	r3, [sp, #12]
 80094f6:	4298      	cmp	r0, r3
 80094f8:	bfb8      	it	lt
 80094fa:	4618      	movlt	r0, r3
 80094fc:	e7a4      	b.n	8009448 <_printf_i+0x168>
 80094fe:	2301      	movs	r3, #1
 8009500:	4632      	mov	r2, r6
 8009502:	4649      	mov	r1, r9
 8009504:	4640      	mov	r0, r8
 8009506:	47d0      	blx	sl
 8009508:	3001      	adds	r0, #1
 800950a:	d09b      	beq.n	8009444 <_printf_i+0x164>
 800950c:	3501      	adds	r5, #1
 800950e:	68e3      	ldr	r3, [r4, #12]
 8009510:	9903      	ldr	r1, [sp, #12]
 8009512:	1a5b      	subs	r3, r3, r1
 8009514:	42ab      	cmp	r3, r5
 8009516:	dcf2      	bgt.n	80094fe <_printf_i+0x21e>
 8009518:	e7eb      	b.n	80094f2 <_printf_i+0x212>
 800951a:	2500      	movs	r5, #0
 800951c:	f104 0619 	add.w	r6, r4, #25
 8009520:	e7f5      	b.n	800950e <_printf_i+0x22e>
 8009522:	bf00      	nop
 8009524:	0800bf72 	.word	0x0800bf72
 8009528:	0800bf83 	.word	0x0800bf83

0800952c <siprintf>:
 800952c:	b40e      	push	{r1, r2, r3}
 800952e:	b500      	push	{lr}
 8009530:	b09c      	sub	sp, #112	; 0x70
 8009532:	ab1d      	add	r3, sp, #116	; 0x74
 8009534:	9002      	str	r0, [sp, #8]
 8009536:	9006      	str	r0, [sp, #24]
 8009538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800953c:	4809      	ldr	r0, [pc, #36]	; (8009564 <siprintf+0x38>)
 800953e:	9107      	str	r1, [sp, #28]
 8009540:	9104      	str	r1, [sp, #16]
 8009542:	4909      	ldr	r1, [pc, #36]	; (8009568 <siprintf+0x3c>)
 8009544:	f853 2b04 	ldr.w	r2, [r3], #4
 8009548:	9105      	str	r1, [sp, #20]
 800954a:	6800      	ldr	r0, [r0, #0]
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	a902      	add	r1, sp, #8
 8009550:	f001 fb24 	bl	800ab9c <_svfiprintf_r>
 8009554:	9b02      	ldr	r3, [sp, #8]
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	b01c      	add	sp, #112	; 0x70
 800955c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009560:	b003      	add	sp, #12
 8009562:	4770      	bx	lr
 8009564:	20000038 	.word	0x20000038
 8009568:	ffff0208 	.word	0xffff0208

0800956c <quorem>:
 800956c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	6903      	ldr	r3, [r0, #16]
 8009572:	690c      	ldr	r4, [r1, #16]
 8009574:	42a3      	cmp	r3, r4
 8009576:	4607      	mov	r7, r0
 8009578:	f2c0 8081 	blt.w	800967e <quorem+0x112>
 800957c:	3c01      	subs	r4, #1
 800957e:	f101 0814 	add.w	r8, r1, #20
 8009582:	f100 0514 	add.w	r5, r0, #20
 8009586:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009594:	3301      	adds	r3, #1
 8009596:	429a      	cmp	r2, r3
 8009598:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800959c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80095a4:	d331      	bcc.n	800960a <quorem+0x9e>
 80095a6:	f04f 0e00 	mov.w	lr, #0
 80095aa:	4640      	mov	r0, r8
 80095ac:	46ac      	mov	ip, r5
 80095ae:	46f2      	mov	sl, lr
 80095b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80095b4:	b293      	uxth	r3, r2
 80095b6:	fb06 e303 	mla	r3, r6, r3, lr
 80095ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80095be:	b29b      	uxth	r3, r3
 80095c0:	ebaa 0303 	sub.w	r3, sl, r3
 80095c4:	0c12      	lsrs	r2, r2, #16
 80095c6:	f8dc a000 	ldr.w	sl, [ip]
 80095ca:	fb06 e202 	mla	r2, r6, r2, lr
 80095ce:	fa13 f38a 	uxtah	r3, r3, sl
 80095d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095d6:	fa1f fa82 	uxth.w	sl, r2
 80095da:	f8dc 2000 	ldr.w	r2, [ip]
 80095de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80095e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ec:	4581      	cmp	r9, r0
 80095ee:	f84c 3b04 	str.w	r3, [ip], #4
 80095f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095f6:	d2db      	bcs.n	80095b0 <quorem+0x44>
 80095f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80095fc:	b92b      	cbnz	r3, 800960a <quorem+0x9e>
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	3b04      	subs	r3, #4
 8009602:	429d      	cmp	r5, r3
 8009604:	461a      	mov	r2, r3
 8009606:	d32e      	bcc.n	8009666 <quorem+0xfa>
 8009608:	613c      	str	r4, [r7, #16]
 800960a:	4638      	mov	r0, r7
 800960c:	f001 f8b2 	bl	800a774 <__mcmp>
 8009610:	2800      	cmp	r0, #0
 8009612:	db24      	blt.n	800965e <quorem+0xf2>
 8009614:	3601      	adds	r6, #1
 8009616:	4628      	mov	r0, r5
 8009618:	f04f 0c00 	mov.w	ip, #0
 800961c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009620:	f8d0 e000 	ldr.w	lr, [r0]
 8009624:	b293      	uxth	r3, r2
 8009626:	ebac 0303 	sub.w	r3, ip, r3
 800962a:	0c12      	lsrs	r2, r2, #16
 800962c:	fa13 f38e 	uxtah	r3, r3, lr
 8009630:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009634:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009638:	b29b      	uxth	r3, r3
 800963a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800963e:	45c1      	cmp	r9, r8
 8009640:	f840 3b04 	str.w	r3, [r0], #4
 8009644:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009648:	d2e8      	bcs.n	800961c <quorem+0xb0>
 800964a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800964e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009652:	b922      	cbnz	r2, 800965e <quorem+0xf2>
 8009654:	3b04      	subs	r3, #4
 8009656:	429d      	cmp	r5, r3
 8009658:	461a      	mov	r2, r3
 800965a:	d30a      	bcc.n	8009672 <quorem+0x106>
 800965c:	613c      	str	r4, [r7, #16]
 800965e:	4630      	mov	r0, r6
 8009660:	b003      	add	sp, #12
 8009662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009666:	6812      	ldr	r2, [r2, #0]
 8009668:	3b04      	subs	r3, #4
 800966a:	2a00      	cmp	r2, #0
 800966c:	d1cc      	bne.n	8009608 <quorem+0x9c>
 800966e:	3c01      	subs	r4, #1
 8009670:	e7c7      	b.n	8009602 <quorem+0x96>
 8009672:	6812      	ldr	r2, [r2, #0]
 8009674:	3b04      	subs	r3, #4
 8009676:	2a00      	cmp	r2, #0
 8009678:	d1f0      	bne.n	800965c <quorem+0xf0>
 800967a:	3c01      	subs	r4, #1
 800967c:	e7eb      	b.n	8009656 <quorem+0xea>
 800967e:	2000      	movs	r0, #0
 8009680:	e7ee      	b.n	8009660 <quorem+0xf4>
 8009682:	0000      	movs	r0, r0
 8009684:	0000      	movs	r0, r0
	...

08009688 <_dtoa_r>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	ed2d 8b02 	vpush	{d8}
 8009690:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009692:	b095      	sub	sp, #84	; 0x54
 8009694:	4616      	mov	r6, r2
 8009696:	461f      	mov	r7, r3
 8009698:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800969c:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 80096a0:	4604      	mov	r4, r0
 80096a2:	b975      	cbnz	r5, 80096c2 <_dtoa_r+0x3a>
 80096a4:	2010      	movs	r0, #16
 80096a6:	f000 fddf 	bl	800a268 <malloc>
 80096aa:	4602      	mov	r2, r0
 80096ac:	6260      	str	r0, [r4, #36]	; 0x24
 80096ae:	b920      	cbnz	r0, 80096ba <_dtoa_r+0x32>
 80096b0:	4bb1      	ldr	r3, [pc, #708]	; (8009978 <_dtoa_r+0x2f0>)
 80096b2:	21ea      	movs	r1, #234	; 0xea
 80096b4:	48b1      	ldr	r0, [pc, #708]	; (800997c <_dtoa_r+0x2f4>)
 80096b6:	f001 fb81 	bl	800adbc <__assert_func>
 80096ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096be:	6005      	str	r5, [r0, #0]
 80096c0:	60c5      	str	r5, [r0, #12]
 80096c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096c4:	6819      	ldr	r1, [r3, #0]
 80096c6:	b151      	cbz	r1, 80096de <_dtoa_r+0x56>
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	604a      	str	r2, [r1, #4]
 80096cc:	2301      	movs	r3, #1
 80096ce:	4093      	lsls	r3, r2
 80096d0:	608b      	str	r3, [r1, #8]
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 fe10 	bl	800a2f8 <_Bfree>
 80096d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	1e3b      	subs	r3, r7, #0
 80096e0:	bfb9      	ittee	lt
 80096e2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80096e6:	9305      	strlt	r3, [sp, #20]
 80096e8:	2300      	movge	r3, #0
 80096ea:	f8c8 3000 	strge.w	r3, [r8]
 80096ee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80096f2:	4ba3      	ldr	r3, [pc, #652]	; (8009980 <_dtoa_r+0x2f8>)
 80096f4:	bfbc      	itt	lt
 80096f6:	2201      	movlt	r2, #1
 80096f8:	f8c8 2000 	strlt.w	r2, [r8]
 80096fc:	ea33 0309 	bics.w	r3, r3, r9
 8009700:	d11b      	bne.n	800973a <_dtoa_r+0xb2>
 8009702:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009704:	f242 730f 	movw	r3, #9999	; 0x270f
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800970e:	4333      	orrs	r3, r6
 8009710:	f000 857d 	beq.w	800a20e <_dtoa_r+0xb86>
 8009714:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009716:	b963      	cbnz	r3, 8009732 <_dtoa_r+0xaa>
 8009718:	4b9a      	ldr	r3, [pc, #616]	; (8009984 <_dtoa_r+0x2fc>)
 800971a:	e024      	b.n	8009766 <_dtoa_r+0xde>
 800971c:	4b9a      	ldr	r3, [pc, #616]	; (8009988 <_dtoa_r+0x300>)
 800971e:	9303      	str	r3, [sp, #12]
 8009720:	3308      	adds	r3, #8
 8009722:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	9803      	ldr	r0, [sp, #12]
 8009728:	b015      	add	sp, #84	; 0x54
 800972a:	ecbd 8b02 	vpop	{d8}
 800972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009732:	4b94      	ldr	r3, [pc, #592]	; (8009984 <_dtoa_r+0x2fc>)
 8009734:	9303      	str	r3, [sp, #12]
 8009736:	3303      	adds	r3, #3
 8009738:	e7f3      	b.n	8009722 <_dtoa_r+0x9a>
 800973a:	ed9d 7b04 	vldr	d7, [sp, #16]
 800973e:	2200      	movs	r2, #0
 8009740:	ec51 0b17 	vmov	r0, r1, d7
 8009744:	2300      	movs	r3, #0
 8009746:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800974a:	f7f7 fa1d 	bl	8000b88 <__aeabi_dcmpeq>
 800974e:	4680      	mov	r8, r0
 8009750:	b158      	cbz	r0, 800976a <_dtoa_r+0xe2>
 8009752:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009754:	2301      	movs	r3, #1
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 8554 	beq.w	800a208 <_dtoa_r+0xb80>
 8009760:	488a      	ldr	r0, [pc, #552]	; (800998c <_dtoa_r+0x304>)
 8009762:	6018      	str	r0, [r3, #0]
 8009764:	1e43      	subs	r3, r0, #1
 8009766:	9303      	str	r3, [sp, #12]
 8009768:	e7dd      	b.n	8009726 <_dtoa_r+0x9e>
 800976a:	ab12      	add	r3, sp, #72	; 0x48
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	ab13      	add	r3, sp, #76	; 0x4c
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	4620      	mov	r0, r4
 8009774:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009778:	f001 f8a0 	bl	800a8bc <__d2b>
 800977c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009780:	4683      	mov	fp, r0
 8009782:	2d00      	cmp	r5, #0
 8009784:	d07c      	beq.n	8009880 <_dtoa_r+0x1f8>
 8009786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009788:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800978c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009790:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009794:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009798:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800979c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80097a0:	4b7b      	ldr	r3, [pc, #492]	; (8009990 <_dtoa_r+0x308>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	4630      	mov	r0, r6
 80097a6:	4639      	mov	r1, r7
 80097a8:	f7f6 fdce 	bl	8000348 <__aeabi_dsub>
 80097ac:	a36c      	add	r3, pc, #432	; (adr r3, 8009960 <_dtoa_r+0x2d8>)
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f7f6 ff81 	bl	80006b8 <__aeabi_dmul>
 80097b6:	a36c      	add	r3, pc, #432	; (adr r3, 8009968 <_dtoa_r+0x2e0>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7f6 fdc6 	bl	800034c <__adddf3>
 80097c0:	4606      	mov	r6, r0
 80097c2:	4628      	mov	r0, r5
 80097c4:	460f      	mov	r7, r1
 80097c6:	f7f6 ff0d 	bl	80005e4 <__aeabi_i2d>
 80097ca:	a369      	add	r3, pc, #420	; (adr r3, 8009970 <_dtoa_r+0x2e8>)
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f7f6 ff72 	bl	80006b8 <__aeabi_dmul>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	4630      	mov	r0, r6
 80097da:	4639      	mov	r1, r7
 80097dc:	f7f6 fdb6 	bl	800034c <__adddf3>
 80097e0:	4606      	mov	r6, r0
 80097e2:	460f      	mov	r7, r1
 80097e4:	f7f7 fa18 	bl	8000c18 <__aeabi_d2iz>
 80097e8:	2200      	movs	r2, #0
 80097ea:	4682      	mov	sl, r0
 80097ec:	2300      	movs	r3, #0
 80097ee:	4630      	mov	r0, r6
 80097f0:	4639      	mov	r1, r7
 80097f2:	f7f7 f9d3 	bl	8000b9c <__aeabi_dcmplt>
 80097f6:	b148      	cbz	r0, 800980c <_dtoa_r+0x184>
 80097f8:	4650      	mov	r0, sl
 80097fa:	f7f6 fef3 	bl	80005e4 <__aeabi_i2d>
 80097fe:	4632      	mov	r2, r6
 8009800:	463b      	mov	r3, r7
 8009802:	f7f7 f9c1 	bl	8000b88 <__aeabi_dcmpeq>
 8009806:	b908      	cbnz	r0, 800980c <_dtoa_r+0x184>
 8009808:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800980c:	f1ba 0f16 	cmp.w	sl, #22
 8009810:	d854      	bhi.n	80098bc <_dtoa_r+0x234>
 8009812:	4b60      	ldr	r3, [pc, #384]	; (8009994 <_dtoa_r+0x30c>)
 8009814:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009820:	f7f7 f9bc 	bl	8000b9c <__aeabi_dcmplt>
 8009824:	2800      	cmp	r0, #0
 8009826:	d04b      	beq.n	80098c0 <_dtoa_r+0x238>
 8009828:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800982c:	2300      	movs	r3, #0
 800982e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009830:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009832:	1b5d      	subs	r5, r3, r5
 8009834:	1e6b      	subs	r3, r5, #1
 8009836:	9307      	str	r3, [sp, #28]
 8009838:	bf43      	ittte	mi
 800983a:	2300      	movmi	r3, #0
 800983c:	f1c5 0801 	rsbmi	r8, r5, #1
 8009840:	9307      	strmi	r3, [sp, #28]
 8009842:	f04f 0800 	movpl.w	r8, #0
 8009846:	f1ba 0f00 	cmp.w	sl, #0
 800984a:	db3b      	blt.n	80098c4 <_dtoa_r+0x23c>
 800984c:	9b07      	ldr	r3, [sp, #28]
 800984e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009852:	4453      	add	r3, sl
 8009854:	9307      	str	r3, [sp, #28]
 8009856:	2300      	movs	r3, #0
 8009858:	9308      	str	r3, [sp, #32]
 800985a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800985c:	2b09      	cmp	r3, #9
 800985e:	d869      	bhi.n	8009934 <_dtoa_r+0x2ac>
 8009860:	2b05      	cmp	r3, #5
 8009862:	bfc4      	itt	gt
 8009864:	3b04      	subgt	r3, #4
 8009866:	9320      	strgt	r3, [sp, #128]	; 0x80
 8009868:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800986a:	f1a3 0302 	sub.w	r3, r3, #2
 800986e:	bfcc      	ite	gt
 8009870:	2500      	movgt	r5, #0
 8009872:	2501      	movle	r5, #1
 8009874:	2b03      	cmp	r3, #3
 8009876:	d869      	bhi.n	800994c <_dtoa_r+0x2c4>
 8009878:	e8df f003 	tbb	[pc, r3]
 800987c:	5a4c4e2c 	.word	0x5a4c4e2c
 8009880:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009884:	441d      	add	r5, r3
 8009886:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800988a:	2b20      	cmp	r3, #32
 800988c:	bfc1      	itttt	gt
 800988e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009892:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009896:	fa09 f303 	lslgt.w	r3, r9, r3
 800989a:	fa26 f000 	lsrgt.w	r0, r6, r0
 800989e:	bfda      	itte	le
 80098a0:	f1c3 0320 	rsble	r3, r3, #32
 80098a4:	fa06 f003 	lslle.w	r0, r6, r3
 80098a8:	4318      	orrgt	r0, r3
 80098aa:	f7f6 fe8b 	bl	80005c4 <__aeabi_ui2d>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4606      	mov	r6, r0
 80098b2:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80098b6:	3d01      	subs	r5, #1
 80098b8:	9310      	str	r3, [sp, #64]	; 0x40
 80098ba:	e771      	b.n	80097a0 <_dtoa_r+0x118>
 80098bc:	2301      	movs	r3, #1
 80098be:	e7b6      	b.n	800982e <_dtoa_r+0x1a6>
 80098c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80098c2:	e7b5      	b.n	8009830 <_dtoa_r+0x1a8>
 80098c4:	f1ca 0300 	rsb	r3, sl, #0
 80098c8:	9308      	str	r3, [sp, #32]
 80098ca:	2300      	movs	r3, #0
 80098cc:	eba8 080a 	sub.w	r8, r8, sl
 80098d0:	930e      	str	r3, [sp, #56]	; 0x38
 80098d2:	e7c2      	b.n	800985a <_dtoa_r+0x1d2>
 80098d4:	2300      	movs	r3, #0
 80098d6:	930c      	str	r3, [sp, #48]	; 0x30
 80098d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098da:	2b00      	cmp	r3, #0
 80098dc:	dc39      	bgt.n	8009952 <_dtoa_r+0x2ca>
 80098de:	f04f 0901 	mov.w	r9, #1
 80098e2:	f8cd 9018 	str.w	r9, [sp, #24]
 80098e6:	464b      	mov	r3, r9
 80098e8:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 80098ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80098ee:	2200      	movs	r2, #0
 80098f0:	6042      	str	r2, [r0, #4]
 80098f2:	2204      	movs	r2, #4
 80098f4:	f102 0614 	add.w	r6, r2, #20
 80098f8:	429e      	cmp	r6, r3
 80098fa:	6841      	ldr	r1, [r0, #4]
 80098fc:	d94e      	bls.n	800999c <_dtoa_r+0x314>
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 fcba 	bl	800a278 <_Balloc>
 8009904:	9003      	str	r0, [sp, #12]
 8009906:	2800      	cmp	r0, #0
 8009908:	d14c      	bne.n	80099a4 <_dtoa_r+0x31c>
 800990a:	4b23      	ldr	r3, [pc, #140]	; (8009998 <_dtoa_r+0x310>)
 800990c:	4602      	mov	r2, r0
 800990e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009912:	e6cf      	b.n	80096b4 <_dtoa_r+0x2c>
 8009914:	2301      	movs	r3, #1
 8009916:	e7de      	b.n	80098d6 <_dtoa_r+0x24e>
 8009918:	2300      	movs	r3, #0
 800991a:	930c      	str	r3, [sp, #48]	; 0x30
 800991c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800991e:	eb0a 0903 	add.w	r9, sl, r3
 8009922:	f109 0301 	add.w	r3, r9, #1
 8009926:	2b01      	cmp	r3, #1
 8009928:	9306      	str	r3, [sp, #24]
 800992a:	bfb8      	it	lt
 800992c:	2301      	movlt	r3, #1
 800992e:	e7dd      	b.n	80098ec <_dtoa_r+0x264>
 8009930:	2301      	movs	r3, #1
 8009932:	e7f2      	b.n	800991a <_dtoa_r+0x292>
 8009934:	2501      	movs	r5, #1
 8009936:	2300      	movs	r3, #0
 8009938:	9320      	str	r3, [sp, #128]	; 0x80
 800993a:	950c      	str	r5, [sp, #48]	; 0x30
 800993c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009940:	2200      	movs	r2, #0
 8009942:	f8cd 9018 	str.w	r9, [sp, #24]
 8009946:	2312      	movs	r3, #18
 8009948:	9221      	str	r2, [sp, #132]	; 0x84
 800994a:	e7cf      	b.n	80098ec <_dtoa_r+0x264>
 800994c:	2301      	movs	r3, #1
 800994e:	930c      	str	r3, [sp, #48]	; 0x30
 8009950:	e7f4      	b.n	800993c <_dtoa_r+0x2b4>
 8009952:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8009956:	f8cd 9018 	str.w	r9, [sp, #24]
 800995a:	464b      	mov	r3, r9
 800995c:	e7c6      	b.n	80098ec <_dtoa_r+0x264>
 800995e:	bf00      	nop
 8009960:	636f4361 	.word	0x636f4361
 8009964:	3fd287a7 	.word	0x3fd287a7
 8009968:	8b60c8b3 	.word	0x8b60c8b3
 800996c:	3fc68a28 	.word	0x3fc68a28
 8009970:	509f79fb 	.word	0x509f79fb
 8009974:	3fd34413 	.word	0x3fd34413
 8009978:	0800bfa1 	.word	0x0800bfa1
 800997c:	0800bfb8 	.word	0x0800bfb8
 8009980:	7ff00000 	.word	0x7ff00000
 8009984:	0800bf9d 	.word	0x0800bf9d
 8009988:	0800bf94 	.word	0x0800bf94
 800998c:	0800bf71 	.word	0x0800bf71
 8009990:	3ff80000 	.word	0x3ff80000
 8009994:	0800c0b0 	.word	0x0800c0b0
 8009998:	0800c017 	.word	0x0800c017
 800999c:	3101      	adds	r1, #1
 800999e:	6041      	str	r1, [r0, #4]
 80099a0:	0052      	lsls	r2, r2, #1
 80099a2:	e7a7      	b.n	80098f4 <_dtoa_r+0x26c>
 80099a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a6:	9a03      	ldr	r2, [sp, #12]
 80099a8:	601a      	str	r2, [r3, #0]
 80099aa:	9b06      	ldr	r3, [sp, #24]
 80099ac:	2b0e      	cmp	r3, #14
 80099ae:	f200 80ad 	bhi.w	8009b0c <_dtoa_r+0x484>
 80099b2:	2d00      	cmp	r5, #0
 80099b4:	f000 80aa 	beq.w	8009b0c <_dtoa_r+0x484>
 80099b8:	f1ba 0f00 	cmp.w	sl, #0
 80099bc:	dd36      	ble.n	8009a2c <_dtoa_r+0x3a4>
 80099be:	4ac3      	ldr	r2, [pc, #780]	; (8009ccc <_dtoa_r+0x644>)
 80099c0:	f00a 030f 	and.w	r3, sl, #15
 80099c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099c8:	ed93 7b00 	vldr	d7, [r3]
 80099cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80099d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80099d4:	eeb0 8a47 	vmov.f32	s16, s14
 80099d8:	eef0 8a67 	vmov.f32	s17, s15
 80099dc:	d016      	beq.n	8009a0c <_dtoa_r+0x384>
 80099de:	4bbc      	ldr	r3, [pc, #752]	; (8009cd0 <_dtoa_r+0x648>)
 80099e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80099e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099e8:	f7f6 ff90 	bl	800090c <__aeabi_ddiv>
 80099ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099f0:	f007 070f 	and.w	r7, r7, #15
 80099f4:	2503      	movs	r5, #3
 80099f6:	4eb6      	ldr	r6, [pc, #728]	; (8009cd0 <_dtoa_r+0x648>)
 80099f8:	b957      	cbnz	r7, 8009a10 <_dtoa_r+0x388>
 80099fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099fe:	ec53 2b18 	vmov	r2, r3, d8
 8009a02:	f7f6 ff83 	bl	800090c <__aeabi_ddiv>
 8009a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a0a:	e029      	b.n	8009a60 <_dtoa_r+0x3d8>
 8009a0c:	2502      	movs	r5, #2
 8009a0e:	e7f2      	b.n	80099f6 <_dtoa_r+0x36e>
 8009a10:	07f9      	lsls	r1, r7, #31
 8009a12:	d508      	bpl.n	8009a26 <_dtoa_r+0x39e>
 8009a14:	ec51 0b18 	vmov	r0, r1, d8
 8009a18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a1c:	f7f6 fe4c 	bl	80006b8 <__aeabi_dmul>
 8009a20:	ec41 0b18 	vmov	d8, r0, r1
 8009a24:	3501      	adds	r5, #1
 8009a26:	107f      	asrs	r7, r7, #1
 8009a28:	3608      	adds	r6, #8
 8009a2a:	e7e5      	b.n	80099f8 <_dtoa_r+0x370>
 8009a2c:	f000 80a6 	beq.w	8009b7c <_dtoa_r+0x4f4>
 8009a30:	f1ca 0600 	rsb	r6, sl, #0
 8009a34:	4ba5      	ldr	r3, [pc, #660]	; (8009ccc <_dtoa_r+0x644>)
 8009a36:	4fa6      	ldr	r7, [pc, #664]	; (8009cd0 <_dtoa_r+0x648>)
 8009a38:	f006 020f 	and.w	r2, r6, #15
 8009a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009a48:	f7f6 fe36 	bl	80006b8 <__aeabi_dmul>
 8009a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a50:	1136      	asrs	r6, r6, #4
 8009a52:	2300      	movs	r3, #0
 8009a54:	2502      	movs	r5, #2
 8009a56:	2e00      	cmp	r6, #0
 8009a58:	f040 8085 	bne.w	8009b66 <_dtoa_r+0x4de>
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1d2      	bne.n	8009a06 <_dtoa_r+0x37e>
 8009a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 808c 	beq.w	8009b80 <_dtoa_r+0x4f8>
 8009a68:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009a6c:	4b99      	ldr	r3, [pc, #612]	; (8009cd4 <_dtoa_r+0x64c>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	4630      	mov	r0, r6
 8009a72:	4639      	mov	r1, r7
 8009a74:	f7f7 f892 	bl	8000b9c <__aeabi_dcmplt>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	f000 8081 	beq.w	8009b80 <_dtoa_r+0x4f8>
 8009a7e:	9b06      	ldr	r3, [sp, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d07d      	beq.n	8009b80 <_dtoa_r+0x4f8>
 8009a84:	f1b9 0f00 	cmp.w	r9, #0
 8009a88:	dd3c      	ble.n	8009b04 <_dtoa_r+0x47c>
 8009a8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a90:	2200      	movs	r2, #0
 8009a92:	4b91      	ldr	r3, [pc, #580]	; (8009cd8 <_dtoa_r+0x650>)
 8009a94:	4630      	mov	r0, r6
 8009a96:	4639      	mov	r1, r7
 8009a98:	f7f6 fe0e 	bl	80006b8 <__aeabi_dmul>
 8009a9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8009aa6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f7f6 fd9a 	bl	80005e4 <__aeabi_i2d>
 8009ab0:	4632      	mov	r2, r6
 8009ab2:	463b      	mov	r3, r7
 8009ab4:	f7f6 fe00 	bl	80006b8 <__aeabi_dmul>
 8009ab8:	4b88      	ldr	r3, [pc, #544]	; (8009cdc <_dtoa_r+0x654>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	f7f6 fc46 	bl	800034c <__adddf3>
 8009ac0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009ac4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ac8:	9305      	str	r3, [sp, #20]
 8009aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d15c      	bne.n	8009b8a <_dtoa_r+0x502>
 8009ad0:	4b83      	ldr	r3, [pc, #524]	; (8009ce0 <_dtoa_r+0x658>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	f7f6 fc36 	bl	8000348 <__aeabi_dsub>
 8009adc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ae0:	4606      	mov	r6, r0
 8009ae2:	460f      	mov	r7, r1
 8009ae4:	f7f7 f878 	bl	8000bd8 <__aeabi_dcmpgt>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	f040 8296 	bne.w	800a01a <_dtoa_r+0x992>
 8009aee:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009af2:	4630      	mov	r0, r6
 8009af4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009af8:	4639      	mov	r1, r7
 8009afa:	f7f7 f84f 	bl	8000b9c <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f040 8288 	bne.w	800a014 <_dtoa_r+0x98c>
 8009b04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009b08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f2c0 8158 	blt.w	8009dc4 <_dtoa_r+0x73c>
 8009b14:	f1ba 0f0e 	cmp.w	sl, #14
 8009b18:	f300 8154 	bgt.w	8009dc4 <_dtoa_r+0x73c>
 8009b1c:	4b6b      	ldr	r3, [pc, #428]	; (8009ccc <_dtoa_r+0x644>)
 8009b1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f280 80e3 	bge.w	8009cf4 <_dtoa_r+0x66c>
 8009b2e:	9b06      	ldr	r3, [sp, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f300 80df 	bgt.w	8009cf4 <_dtoa_r+0x66c>
 8009b36:	f040 826d 	bne.w	800a014 <_dtoa_r+0x98c>
 8009b3a:	4b69      	ldr	r3, [pc, #420]	; (8009ce0 <_dtoa_r+0x658>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	4640      	mov	r0, r8
 8009b40:	4649      	mov	r1, r9
 8009b42:	f7f6 fdb9 	bl	80006b8 <__aeabi_dmul>
 8009b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b4a:	f7f7 f83b 	bl	8000bc4 <__aeabi_dcmpge>
 8009b4e:	9e06      	ldr	r6, [sp, #24]
 8009b50:	4637      	mov	r7, r6
 8009b52:	2800      	cmp	r0, #0
 8009b54:	f040 8243 	bne.w	8009fde <_dtoa_r+0x956>
 8009b58:	9d03      	ldr	r5, [sp, #12]
 8009b5a:	2331      	movs	r3, #49	; 0x31
 8009b5c:	f805 3b01 	strb.w	r3, [r5], #1
 8009b60:	f10a 0a01 	add.w	sl, sl, #1
 8009b64:	e23f      	b.n	8009fe6 <_dtoa_r+0x95e>
 8009b66:	07f2      	lsls	r2, r6, #31
 8009b68:	d505      	bpl.n	8009b76 <_dtoa_r+0x4ee>
 8009b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b6e:	f7f6 fda3 	bl	80006b8 <__aeabi_dmul>
 8009b72:	3501      	adds	r5, #1
 8009b74:	2301      	movs	r3, #1
 8009b76:	1076      	asrs	r6, r6, #1
 8009b78:	3708      	adds	r7, #8
 8009b7a:	e76c      	b.n	8009a56 <_dtoa_r+0x3ce>
 8009b7c:	2502      	movs	r5, #2
 8009b7e:	e76f      	b.n	8009a60 <_dtoa_r+0x3d8>
 8009b80:	9b06      	ldr	r3, [sp, #24]
 8009b82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009b86:	930d      	str	r3, [sp, #52]	; 0x34
 8009b88:	e78d      	b.n	8009aa6 <_dtoa_r+0x41e>
 8009b8a:	9903      	ldr	r1, [sp, #12]
 8009b8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b90:	4b4e      	ldr	r3, [pc, #312]	; (8009ccc <_dtoa_r+0x644>)
 8009b92:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009b96:	4401      	add	r1, r0
 8009b98:	9104      	str	r1, [sp, #16]
 8009b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b9c:	eeb0 8a47 	vmov.f32	s16, s14
 8009ba0:	eef0 8a67 	vmov.f32	s17, s15
 8009ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ba8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bac:	2900      	cmp	r1, #0
 8009bae:	d045      	beq.n	8009c3c <_dtoa_r+0x5b4>
 8009bb0:	494c      	ldr	r1, [pc, #304]	; (8009ce4 <_dtoa_r+0x65c>)
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	f7f6 feaa 	bl	800090c <__aeabi_ddiv>
 8009bb8:	ec53 2b18 	vmov	r2, r3, d8
 8009bbc:	f7f6 fbc4 	bl	8000348 <__aeabi_dsub>
 8009bc0:	9d03      	ldr	r5, [sp, #12]
 8009bc2:	ec41 0b18 	vmov	d8, r0, r1
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7f7 f825 	bl	8000c18 <__aeabi_d2iz>
 8009bce:	900d      	str	r0, [sp, #52]	; 0x34
 8009bd0:	f7f6 fd08 	bl	80005e4 <__aeabi_i2d>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	4630      	mov	r0, r6
 8009bda:	4639      	mov	r1, r7
 8009bdc:	f7f6 fbb4 	bl	8000348 <__aeabi_dsub>
 8009be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009be2:	3330      	adds	r3, #48	; 0x30
 8009be4:	f805 3b01 	strb.w	r3, [r5], #1
 8009be8:	ec53 2b18 	vmov	r2, r3, d8
 8009bec:	4606      	mov	r6, r0
 8009bee:	460f      	mov	r7, r1
 8009bf0:	f7f6 ffd4 	bl	8000b9c <__aeabi_dcmplt>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d165      	bne.n	8009cc4 <_dtoa_r+0x63c>
 8009bf8:	4632      	mov	r2, r6
 8009bfa:	463b      	mov	r3, r7
 8009bfc:	4935      	ldr	r1, [pc, #212]	; (8009cd4 <_dtoa_r+0x64c>)
 8009bfe:	2000      	movs	r0, #0
 8009c00:	f7f6 fba2 	bl	8000348 <__aeabi_dsub>
 8009c04:	ec53 2b18 	vmov	r2, r3, d8
 8009c08:	f7f6 ffc8 	bl	8000b9c <__aeabi_dcmplt>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	f040 80b9 	bne.w	8009d84 <_dtoa_r+0x6fc>
 8009c12:	9b04      	ldr	r3, [sp, #16]
 8009c14:	429d      	cmp	r5, r3
 8009c16:	f43f af75 	beq.w	8009b04 <_dtoa_r+0x47c>
 8009c1a:	4b2f      	ldr	r3, [pc, #188]	; (8009cd8 <_dtoa_r+0x650>)
 8009c1c:	ec51 0b18 	vmov	r0, r1, d8
 8009c20:	2200      	movs	r2, #0
 8009c22:	f7f6 fd49 	bl	80006b8 <__aeabi_dmul>
 8009c26:	4b2c      	ldr	r3, [pc, #176]	; (8009cd8 <_dtoa_r+0x650>)
 8009c28:	ec41 0b18 	vmov	d8, r0, r1
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4630      	mov	r0, r6
 8009c30:	4639      	mov	r1, r7
 8009c32:	f7f6 fd41 	bl	80006b8 <__aeabi_dmul>
 8009c36:	4606      	mov	r6, r0
 8009c38:	460f      	mov	r7, r1
 8009c3a:	e7c4      	b.n	8009bc6 <_dtoa_r+0x53e>
 8009c3c:	ec51 0b17 	vmov	r0, r1, d7
 8009c40:	f7f6 fd3a 	bl	80006b8 <__aeabi_dmul>
 8009c44:	9b04      	ldr	r3, [sp, #16]
 8009c46:	9d03      	ldr	r5, [sp, #12]
 8009c48:	930d      	str	r3, [sp, #52]	; 0x34
 8009c4a:	ec41 0b18 	vmov	d8, r0, r1
 8009c4e:	4639      	mov	r1, r7
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7f6 ffe1 	bl	8000c18 <__aeabi_d2iz>
 8009c56:	9011      	str	r0, [sp, #68]	; 0x44
 8009c58:	f7f6 fcc4 	bl	80005e4 <__aeabi_i2d>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4630      	mov	r0, r6
 8009c62:	4639      	mov	r1, r7
 8009c64:	f7f6 fb70 	bl	8000348 <__aeabi_dsub>
 8009c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c6a:	3330      	adds	r3, #48	; 0x30
 8009c6c:	f805 3b01 	strb.w	r3, [r5], #1
 8009c70:	9b04      	ldr	r3, [sp, #16]
 8009c72:	429d      	cmp	r5, r3
 8009c74:	4606      	mov	r6, r0
 8009c76:	460f      	mov	r7, r1
 8009c78:	f04f 0200 	mov.w	r2, #0
 8009c7c:	d134      	bne.n	8009ce8 <_dtoa_r+0x660>
 8009c7e:	4b19      	ldr	r3, [pc, #100]	; (8009ce4 <_dtoa_r+0x65c>)
 8009c80:	ec51 0b18 	vmov	r0, r1, d8
 8009c84:	f7f6 fb62 	bl	800034c <__adddf3>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 ffa2 	bl	8000bd8 <__aeabi_dcmpgt>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d175      	bne.n	8009d84 <_dtoa_r+0x6fc>
 8009c98:	ec53 2b18 	vmov	r2, r3, d8
 8009c9c:	4911      	ldr	r1, [pc, #68]	; (8009ce4 <_dtoa_r+0x65c>)
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	f7f6 fb52 	bl	8000348 <__aeabi_dsub>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4630      	mov	r0, r6
 8009caa:	4639      	mov	r1, r7
 8009cac:	f7f6 ff76 	bl	8000b9c <__aeabi_dcmplt>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	f43f af27 	beq.w	8009b04 <_dtoa_r+0x47c>
 8009cb6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009cb8:	1e6b      	subs	r3, r5, #1
 8009cba:	930d      	str	r3, [sp, #52]	; 0x34
 8009cbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cc0:	2b30      	cmp	r3, #48	; 0x30
 8009cc2:	d0f8      	beq.n	8009cb6 <_dtoa_r+0x62e>
 8009cc4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009cc8:	e04a      	b.n	8009d60 <_dtoa_r+0x6d8>
 8009cca:	bf00      	nop
 8009ccc:	0800c0b0 	.word	0x0800c0b0
 8009cd0:	0800c088 	.word	0x0800c088
 8009cd4:	3ff00000 	.word	0x3ff00000
 8009cd8:	40240000 	.word	0x40240000
 8009cdc:	401c0000 	.word	0x401c0000
 8009ce0:	40140000 	.word	0x40140000
 8009ce4:	3fe00000 	.word	0x3fe00000
 8009ce8:	4baf      	ldr	r3, [pc, #700]	; (8009fa8 <_dtoa_r+0x920>)
 8009cea:	f7f6 fce5 	bl	80006b8 <__aeabi_dmul>
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460f      	mov	r7, r1
 8009cf2:	e7ac      	b.n	8009c4e <_dtoa_r+0x5c6>
 8009cf4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009cf8:	9d03      	ldr	r5, [sp, #12]
 8009cfa:	4642      	mov	r2, r8
 8009cfc:	464b      	mov	r3, r9
 8009cfe:	4630      	mov	r0, r6
 8009d00:	4639      	mov	r1, r7
 8009d02:	f7f6 fe03 	bl	800090c <__aeabi_ddiv>
 8009d06:	f7f6 ff87 	bl	8000c18 <__aeabi_d2iz>
 8009d0a:	9004      	str	r0, [sp, #16]
 8009d0c:	f7f6 fc6a 	bl	80005e4 <__aeabi_i2d>
 8009d10:	4642      	mov	r2, r8
 8009d12:	464b      	mov	r3, r9
 8009d14:	f7f6 fcd0 	bl	80006b8 <__aeabi_dmul>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	4639      	mov	r1, r7
 8009d20:	f7f6 fb12 	bl	8000348 <__aeabi_dsub>
 8009d24:	9e04      	ldr	r6, [sp, #16]
 8009d26:	9f06      	ldr	r7, [sp, #24]
 8009d28:	3630      	adds	r6, #48	; 0x30
 8009d2a:	f805 6b01 	strb.w	r6, [r5], #1
 8009d2e:	9e03      	ldr	r6, [sp, #12]
 8009d30:	1bae      	subs	r6, r5, r6
 8009d32:	42b7      	cmp	r7, r6
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	d137      	bne.n	8009daa <_dtoa_r+0x722>
 8009d3a:	f7f6 fb07 	bl	800034c <__adddf3>
 8009d3e:	4642      	mov	r2, r8
 8009d40:	464b      	mov	r3, r9
 8009d42:	4606      	mov	r6, r0
 8009d44:	460f      	mov	r7, r1
 8009d46:	f7f6 ff47 	bl	8000bd8 <__aeabi_dcmpgt>
 8009d4a:	b9c8      	cbnz	r0, 8009d80 <_dtoa_r+0x6f8>
 8009d4c:	4642      	mov	r2, r8
 8009d4e:	464b      	mov	r3, r9
 8009d50:	4630      	mov	r0, r6
 8009d52:	4639      	mov	r1, r7
 8009d54:	f7f6 ff18 	bl	8000b88 <__aeabi_dcmpeq>
 8009d58:	b110      	cbz	r0, 8009d60 <_dtoa_r+0x6d8>
 8009d5a:	9b04      	ldr	r3, [sp, #16]
 8009d5c:	07d9      	lsls	r1, r3, #31
 8009d5e:	d40f      	bmi.n	8009d80 <_dtoa_r+0x6f8>
 8009d60:	4620      	mov	r0, r4
 8009d62:	4659      	mov	r1, fp
 8009d64:	f000 fac8 	bl	800a2f8 <_Bfree>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	702b      	strb	r3, [r5, #0]
 8009d6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d6e:	f10a 0001 	add.w	r0, sl, #1
 8009d72:	6018      	str	r0, [r3, #0]
 8009d74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f43f acd5 	beq.w	8009726 <_dtoa_r+0x9e>
 8009d7c:	601d      	str	r5, [r3, #0]
 8009d7e:	e4d2      	b.n	8009726 <_dtoa_r+0x9e>
 8009d80:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009d84:	462b      	mov	r3, r5
 8009d86:	461d      	mov	r5, r3
 8009d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d8c:	2a39      	cmp	r2, #57	; 0x39
 8009d8e:	d108      	bne.n	8009da2 <_dtoa_r+0x71a>
 8009d90:	9a03      	ldr	r2, [sp, #12]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d1f7      	bne.n	8009d86 <_dtoa_r+0x6fe>
 8009d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d98:	9903      	ldr	r1, [sp, #12]
 8009d9a:	3201      	adds	r2, #1
 8009d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d9e:	2230      	movs	r2, #48	; 0x30
 8009da0:	700a      	strb	r2, [r1, #0]
 8009da2:	781a      	ldrb	r2, [r3, #0]
 8009da4:	3201      	adds	r2, #1
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	e78c      	b.n	8009cc4 <_dtoa_r+0x63c>
 8009daa:	4b7f      	ldr	r3, [pc, #508]	; (8009fa8 <_dtoa_r+0x920>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	f7f6 fc83 	bl	80006b8 <__aeabi_dmul>
 8009db2:	2200      	movs	r2, #0
 8009db4:	2300      	movs	r3, #0
 8009db6:	4606      	mov	r6, r0
 8009db8:	460f      	mov	r7, r1
 8009dba:	f7f6 fee5 	bl	8000b88 <__aeabi_dcmpeq>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d09b      	beq.n	8009cfa <_dtoa_r+0x672>
 8009dc2:	e7cd      	b.n	8009d60 <_dtoa_r+0x6d8>
 8009dc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	f000 80c4 	beq.w	8009f54 <_dtoa_r+0x8cc>
 8009dcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009dce:	2a01      	cmp	r2, #1
 8009dd0:	f300 80a8 	bgt.w	8009f24 <_dtoa_r+0x89c>
 8009dd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009dd6:	2a00      	cmp	r2, #0
 8009dd8:	f000 80a0 	beq.w	8009f1c <_dtoa_r+0x894>
 8009ddc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009de0:	9e08      	ldr	r6, [sp, #32]
 8009de2:	4645      	mov	r5, r8
 8009de4:	9a07      	ldr	r2, [sp, #28]
 8009de6:	2101      	movs	r1, #1
 8009de8:	441a      	add	r2, r3
 8009dea:	4620      	mov	r0, r4
 8009dec:	4498      	add	r8, r3
 8009dee:	9207      	str	r2, [sp, #28]
 8009df0:	f000 fb3e 	bl	800a470 <__i2b>
 8009df4:	4607      	mov	r7, r0
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	dd0b      	ble.n	8009e12 <_dtoa_r+0x78a>
 8009dfa:	9b07      	ldr	r3, [sp, #28]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	dd08      	ble.n	8009e12 <_dtoa_r+0x78a>
 8009e00:	42ab      	cmp	r3, r5
 8009e02:	9a07      	ldr	r2, [sp, #28]
 8009e04:	bfa8      	it	ge
 8009e06:	462b      	movge	r3, r5
 8009e08:	eba8 0803 	sub.w	r8, r8, r3
 8009e0c:	1aed      	subs	r5, r5, r3
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	9307      	str	r3, [sp, #28]
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	b1fb      	cbz	r3, 8009e56 <_dtoa_r+0x7ce>
 8009e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 809f 	beq.w	8009f5c <_dtoa_r+0x8d4>
 8009e1e:	2e00      	cmp	r6, #0
 8009e20:	dd11      	ble.n	8009e46 <_dtoa_r+0x7be>
 8009e22:	4639      	mov	r1, r7
 8009e24:	4632      	mov	r2, r6
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 fbde 	bl	800a5e8 <__pow5mult>
 8009e2c:	465a      	mov	r2, fp
 8009e2e:	4601      	mov	r1, r0
 8009e30:	4607      	mov	r7, r0
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 fb32 	bl	800a49c <__multiply>
 8009e38:	4659      	mov	r1, fp
 8009e3a:	9009      	str	r0, [sp, #36]	; 0x24
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f000 fa5b 	bl	800a2f8 <_Bfree>
 8009e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e44:	469b      	mov	fp, r3
 8009e46:	9b08      	ldr	r3, [sp, #32]
 8009e48:	1b9a      	subs	r2, r3, r6
 8009e4a:	d004      	beq.n	8009e56 <_dtoa_r+0x7ce>
 8009e4c:	4659      	mov	r1, fp
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f000 fbca 	bl	800a5e8 <__pow5mult>
 8009e54:	4683      	mov	fp, r0
 8009e56:	2101      	movs	r1, #1
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 fb09 	bl	800a470 <__i2b>
 8009e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	4606      	mov	r6, r0
 8009e64:	dd7c      	ble.n	8009f60 <_dtoa_r+0x8d8>
 8009e66:	461a      	mov	r2, r3
 8009e68:	4601      	mov	r1, r0
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 fbbc 	bl	800a5e8 <__pow5mult>
 8009e70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	4606      	mov	r6, r0
 8009e76:	dd76      	ble.n	8009f66 <_dtoa_r+0x8de>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	9308      	str	r3, [sp, #32]
 8009e7c:	6933      	ldr	r3, [r6, #16]
 8009e7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e82:	6918      	ldr	r0, [r3, #16]
 8009e84:	f000 faa4 	bl	800a3d0 <__hi0bits>
 8009e88:	f1c0 0020 	rsb	r0, r0, #32
 8009e8c:	9b07      	ldr	r3, [sp, #28]
 8009e8e:	4418      	add	r0, r3
 8009e90:	f010 001f 	ands.w	r0, r0, #31
 8009e94:	f000 8086 	beq.w	8009fa4 <_dtoa_r+0x91c>
 8009e98:	f1c0 0320 	rsb	r3, r0, #32
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	dd7f      	ble.n	8009fa0 <_dtoa_r+0x918>
 8009ea0:	f1c0 001c 	rsb	r0, r0, #28
 8009ea4:	9b07      	ldr	r3, [sp, #28]
 8009ea6:	4403      	add	r3, r0
 8009ea8:	4480      	add	r8, r0
 8009eaa:	4405      	add	r5, r0
 8009eac:	9307      	str	r3, [sp, #28]
 8009eae:	f1b8 0f00 	cmp.w	r8, #0
 8009eb2:	dd05      	ble.n	8009ec0 <_dtoa_r+0x838>
 8009eb4:	4659      	mov	r1, fp
 8009eb6:	4642      	mov	r2, r8
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f000 fbef 	bl	800a69c <__lshift>
 8009ebe:	4683      	mov	fp, r0
 8009ec0:	9b07      	ldr	r3, [sp, #28]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	dd05      	ble.n	8009ed2 <_dtoa_r+0x84a>
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	461a      	mov	r2, r3
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f000 fbe6 	bl	800a69c <__lshift>
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d069      	beq.n	8009fac <_dtoa_r+0x924>
 8009ed8:	4631      	mov	r1, r6
 8009eda:	4658      	mov	r0, fp
 8009edc:	f000 fc4a 	bl	800a774 <__mcmp>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	da63      	bge.n	8009fac <_dtoa_r+0x924>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4659      	mov	r1, fp
 8009ee8:	220a      	movs	r2, #10
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 fa26 	bl	800a33c <__multadd>
 8009ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ef2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009ef6:	4683      	mov	fp, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 818f 	beq.w	800a21c <_dtoa_r+0xb94>
 8009efe:	4639      	mov	r1, r7
 8009f00:	2300      	movs	r3, #0
 8009f02:	220a      	movs	r2, #10
 8009f04:	4620      	mov	r0, r4
 8009f06:	f000 fa19 	bl	800a33c <__multadd>
 8009f0a:	f1b9 0f00 	cmp.w	r9, #0
 8009f0e:	4607      	mov	r7, r0
 8009f10:	f300 808e 	bgt.w	800a030 <_dtoa_r+0x9a8>
 8009f14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	dc50      	bgt.n	8009fbc <_dtoa_r+0x934>
 8009f1a:	e089      	b.n	800a030 <_dtoa_r+0x9a8>
 8009f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f22:	e75d      	b.n	8009de0 <_dtoa_r+0x758>
 8009f24:	9b06      	ldr	r3, [sp, #24]
 8009f26:	1e5e      	subs	r6, r3, #1
 8009f28:	9b08      	ldr	r3, [sp, #32]
 8009f2a:	42b3      	cmp	r3, r6
 8009f2c:	bfbf      	itttt	lt
 8009f2e:	9b08      	ldrlt	r3, [sp, #32]
 8009f30:	9608      	strlt	r6, [sp, #32]
 8009f32:	1af2      	sublt	r2, r6, r3
 8009f34:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009f36:	bfb6      	itet	lt
 8009f38:	189b      	addlt	r3, r3, r2
 8009f3a:	1b9e      	subge	r6, r3, r6
 8009f3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009f3e:	9b06      	ldr	r3, [sp, #24]
 8009f40:	bfb8      	it	lt
 8009f42:	2600      	movlt	r6, #0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bfb5      	itete	lt
 8009f48:	eba8 0503 	sublt.w	r5, r8, r3
 8009f4c:	9b06      	ldrge	r3, [sp, #24]
 8009f4e:	2300      	movlt	r3, #0
 8009f50:	4645      	movge	r5, r8
 8009f52:	e747      	b.n	8009de4 <_dtoa_r+0x75c>
 8009f54:	9e08      	ldr	r6, [sp, #32]
 8009f56:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009f58:	4645      	mov	r5, r8
 8009f5a:	e74c      	b.n	8009df6 <_dtoa_r+0x76e>
 8009f5c:	9a08      	ldr	r2, [sp, #32]
 8009f5e:	e775      	b.n	8009e4c <_dtoa_r+0x7c4>
 8009f60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	dc18      	bgt.n	8009f98 <_dtoa_r+0x910>
 8009f66:	9b04      	ldr	r3, [sp, #16]
 8009f68:	b9b3      	cbnz	r3, 8009f98 <_dtoa_r+0x910>
 8009f6a:	9b05      	ldr	r3, [sp, #20]
 8009f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f70:	b9a3      	cbnz	r3, 8009f9c <_dtoa_r+0x914>
 8009f72:	9b05      	ldr	r3, [sp, #20]
 8009f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f78:	0d1b      	lsrs	r3, r3, #20
 8009f7a:	051b      	lsls	r3, r3, #20
 8009f7c:	b12b      	cbz	r3, 8009f8a <_dtoa_r+0x902>
 8009f7e:	9b07      	ldr	r3, [sp, #28]
 8009f80:	3301      	adds	r3, #1
 8009f82:	9307      	str	r3, [sp, #28]
 8009f84:	f108 0801 	add.w	r8, r8, #1
 8009f88:	2301      	movs	r3, #1
 8009f8a:	9308      	str	r3, [sp, #32]
 8009f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f47f af74 	bne.w	8009e7c <_dtoa_r+0x7f4>
 8009f94:	2001      	movs	r0, #1
 8009f96:	e779      	b.n	8009e8c <_dtoa_r+0x804>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e7f6      	b.n	8009f8a <_dtoa_r+0x902>
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	e7f4      	b.n	8009f8a <_dtoa_r+0x902>
 8009fa0:	d085      	beq.n	8009eae <_dtoa_r+0x826>
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	301c      	adds	r0, #28
 8009fa6:	e77d      	b.n	8009ea4 <_dtoa_r+0x81c>
 8009fa8:	40240000 	.word	0x40240000
 8009fac:	9b06      	ldr	r3, [sp, #24]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	dc38      	bgt.n	800a024 <_dtoa_r+0x99c>
 8009fb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	dd35      	ble.n	800a024 <_dtoa_r+0x99c>
 8009fb8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009fbc:	f1b9 0f00 	cmp.w	r9, #0
 8009fc0:	d10d      	bne.n	8009fde <_dtoa_r+0x956>
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	464b      	mov	r3, r9
 8009fc6:	2205      	movs	r2, #5
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 f9b7 	bl	800a33c <__multadd>
 8009fce:	4601      	mov	r1, r0
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	4658      	mov	r0, fp
 8009fd4:	f000 fbce 	bl	800a774 <__mcmp>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f73f adbd 	bgt.w	8009b58 <_dtoa_r+0x4d0>
 8009fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fe0:	9d03      	ldr	r5, [sp, #12]
 8009fe2:	ea6f 0a03 	mvn.w	sl, r3
 8009fe6:	f04f 0800 	mov.w	r8, #0
 8009fea:	4631      	mov	r1, r6
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 f983 	bl	800a2f8 <_Bfree>
 8009ff2:	2f00      	cmp	r7, #0
 8009ff4:	f43f aeb4 	beq.w	8009d60 <_dtoa_r+0x6d8>
 8009ff8:	f1b8 0f00 	cmp.w	r8, #0
 8009ffc:	d005      	beq.n	800a00a <_dtoa_r+0x982>
 8009ffe:	45b8      	cmp	r8, r7
 800a000:	d003      	beq.n	800a00a <_dtoa_r+0x982>
 800a002:	4641      	mov	r1, r8
 800a004:	4620      	mov	r0, r4
 800a006:	f000 f977 	bl	800a2f8 <_Bfree>
 800a00a:	4639      	mov	r1, r7
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 f973 	bl	800a2f8 <_Bfree>
 800a012:	e6a5      	b.n	8009d60 <_dtoa_r+0x6d8>
 800a014:	2600      	movs	r6, #0
 800a016:	4637      	mov	r7, r6
 800a018:	e7e1      	b.n	8009fde <_dtoa_r+0x956>
 800a01a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a01c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a020:	4637      	mov	r7, r6
 800a022:	e599      	b.n	8009b58 <_dtoa_r+0x4d0>
 800a024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a026:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f000 80fd 	beq.w	800a22a <_dtoa_r+0xba2>
 800a030:	2d00      	cmp	r5, #0
 800a032:	dd05      	ble.n	800a040 <_dtoa_r+0x9b8>
 800a034:	4639      	mov	r1, r7
 800a036:	462a      	mov	r2, r5
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fb2f 	bl	800a69c <__lshift>
 800a03e:	4607      	mov	r7, r0
 800a040:	9b08      	ldr	r3, [sp, #32]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d05c      	beq.n	800a100 <_dtoa_r+0xa78>
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 f915 	bl	800a278 <_Balloc>
 800a04e:	4605      	mov	r5, r0
 800a050:	b928      	cbnz	r0, 800a05e <_dtoa_r+0x9d6>
 800a052:	4b80      	ldr	r3, [pc, #512]	; (800a254 <_dtoa_r+0xbcc>)
 800a054:	4602      	mov	r2, r0
 800a056:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a05a:	f7ff bb2b 	b.w	80096b4 <_dtoa_r+0x2c>
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	3202      	adds	r2, #2
 800a062:	0092      	lsls	r2, r2, #2
 800a064:	f107 010c 	add.w	r1, r7, #12
 800a068:	300c      	adds	r0, #12
 800a06a:	f7fe fddd 	bl	8008c28 <memcpy>
 800a06e:	2201      	movs	r2, #1
 800a070:	4629      	mov	r1, r5
 800a072:	4620      	mov	r0, r4
 800a074:	f000 fb12 	bl	800a69c <__lshift>
 800a078:	9b03      	ldr	r3, [sp, #12]
 800a07a:	3301      	adds	r3, #1
 800a07c:	9306      	str	r3, [sp, #24]
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	444b      	add	r3, r9
 800a082:	9309      	str	r3, [sp, #36]	; 0x24
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	46b8      	mov	r8, r7
 800a08c:	9308      	str	r3, [sp, #32]
 800a08e:	4607      	mov	r7, r0
 800a090:	9b06      	ldr	r3, [sp, #24]
 800a092:	4631      	mov	r1, r6
 800a094:	3b01      	subs	r3, #1
 800a096:	4658      	mov	r0, fp
 800a098:	9304      	str	r3, [sp, #16]
 800a09a:	f7ff fa67 	bl	800956c <quorem>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	3330      	adds	r3, #48	; 0x30
 800a0a2:	9007      	str	r0, [sp, #28]
 800a0a4:	4641      	mov	r1, r8
 800a0a6:	4658      	mov	r0, fp
 800a0a8:	930c      	str	r3, [sp, #48]	; 0x30
 800a0aa:	f000 fb63 	bl	800a774 <__mcmp>
 800a0ae:	463a      	mov	r2, r7
 800a0b0:	4681      	mov	r9, r0
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f000 fb79 	bl	800a7ac <__mdiff>
 800a0ba:	68c2      	ldr	r2, [r0, #12]
 800a0bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0be:	4605      	mov	r5, r0
 800a0c0:	bb02      	cbnz	r2, 800a104 <_dtoa_r+0xa7c>
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	4658      	mov	r0, fp
 800a0c6:	f000 fb55 	bl	800a774 <__mcmp>
 800a0ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	920a      	str	r2, [sp, #40]	; 0x28
 800a0d4:	930c      	str	r3, [sp, #48]	; 0x30
 800a0d6:	f000 f90f 	bl	800a2f8 <_Bfree>
 800a0da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a0dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0de:	9d06      	ldr	r5, [sp, #24]
 800a0e0:	ea43 0102 	orr.w	r1, r3, r2
 800a0e4:	9b08      	ldr	r3, [sp, #32]
 800a0e6:	430b      	orrs	r3, r1
 800a0e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ea:	d10d      	bne.n	800a108 <_dtoa_r+0xa80>
 800a0ec:	2b39      	cmp	r3, #57	; 0x39
 800a0ee:	d029      	beq.n	800a144 <_dtoa_r+0xabc>
 800a0f0:	f1b9 0f00 	cmp.w	r9, #0
 800a0f4:	dd01      	ble.n	800a0fa <_dtoa_r+0xa72>
 800a0f6:	9b07      	ldr	r3, [sp, #28]
 800a0f8:	3331      	adds	r3, #49	; 0x31
 800a0fa:	9a04      	ldr	r2, [sp, #16]
 800a0fc:	7013      	strb	r3, [r2, #0]
 800a0fe:	e774      	b.n	8009fea <_dtoa_r+0x962>
 800a100:	4638      	mov	r0, r7
 800a102:	e7b9      	b.n	800a078 <_dtoa_r+0x9f0>
 800a104:	2201      	movs	r2, #1
 800a106:	e7e2      	b.n	800a0ce <_dtoa_r+0xa46>
 800a108:	f1b9 0f00 	cmp.w	r9, #0
 800a10c:	db06      	blt.n	800a11c <_dtoa_r+0xa94>
 800a10e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a110:	ea41 0909 	orr.w	r9, r1, r9
 800a114:	9908      	ldr	r1, [sp, #32]
 800a116:	ea59 0101 	orrs.w	r1, r9, r1
 800a11a:	d120      	bne.n	800a15e <_dtoa_r+0xad6>
 800a11c:	2a00      	cmp	r2, #0
 800a11e:	ddec      	ble.n	800a0fa <_dtoa_r+0xa72>
 800a120:	4659      	mov	r1, fp
 800a122:	2201      	movs	r2, #1
 800a124:	4620      	mov	r0, r4
 800a126:	9306      	str	r3, [sp, #24]
 800a128:	f000 fab8 	bl	800a69c <__lshift>
 800a12c:	4631      	mov	r1, r6
 800a12e:	4683      	mov	fp, r0
 800a130:	f000 fb20 	bl	800a774 <__mcmp>
 800a134:	2800      	cmp	r0, #0
 800a136:	9b06      	ldr	r3, [sp, #24]
 800a138:	dc02      	bgt.n	800a140 <_dtoa_r+0xab8>
 800a13a:	d1de      	bne.n	800a0fa <_dtoa_r+0xa72>
 800a13c:	07da      	lsls	r2, r3, #31
 800a13e:	d5dc      	bpl.n	800a0fa <_dtoa_r+0xa72>
 800a140:	2b39      	cmp	r3, #57	; 0x39
 800a142:	d1d8      	bne.n	800a0f6 <_dtoa_r+0xa6e>
 800a144:	9a04      	ldr	r2, [sp, #16]
 800a146:	2339      	movs	r3, #57	; 0x39
 800a148:	7013      	strb	r3, [r2, #0]
 800a14a:	462b      	mov	r3, r5
 800a14c:	461d      	mov	r5, r3
 800a14e:	3b01      	subs	r3, #1
 800a150:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a154:	2a39      	cmp	r2, #57	; 0x39
 800a156:	d050      	beq.n	800a1fa <_dtoa_r+0xb72>
 800a158:	3201      	adds	r2, #1
 800a15a:	701a      	strb	r2, [r3, #0]
 800a15c:	e745      	b.n	8009fea <_dtoa_r+0x962>
 800a15e:	2a00      	cmp	r2, #0
 800a160:	dd03      	ble.n	800a16a <_dtoa_r+0xae2>
 800a162:	2b39      	cmp	r3, #57	; 0x39
 800a164:	d0ee      	beq.n	800a144 <_dtoa_r+0xabc>
 800a166:	3301      	adds	r3, #1
 800a168:	e7c7      	b.n	800a0fa <_dtoa_r+0xa72>
 800a16a:	9a06      	ldr	r2, [sp, #24]
 800a16c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a16e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a172:	428a      	cmp	r2, r1
 800a174:	d02a      	beq.n	800a1cc <_dtoa_r+0xb44>
 800a176:	4659      	mov	r1, fp
 800a178:	2300      	movs	r3, #0
 800a17a:	220a      	movs	r2, #10
 800a17c:	4620      	mov	r0, r4
 800a17e:	f000 f8dd 	bl	800a33c <__multadd>
 800a182:	45b8      	cmp	r8, r7
 800a184:	4683      	mov	fp, r0
 800a186:	f04f 0300 	mov.w	r3, #0
 800a18a:	f04f 020a 	mov.w	r2, #10
 800a18e:	4641      	mov	r1, r8
 800a190:	4620      	mov	r0, r4
 800a192:	d107      	bne.n	800a1a4 <_dtoa_r+0xb1c>
 800a194:	f000 f8d2 	bl	800a33c <__multadd>
 800a198:	4680      	mov	r8, r0
 800a19a:	4607      	mov	r7, r0
 800a19c:	9b06      	ldr	r3, [sp, #24]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	9306      	str	r3, [sp, #24]
 800a1a2:	e775      	b.n	800a090 <_dtoa_r+0xa08>
 800a1a4:	f000 f8ca 	bl	800a33c <__multadd>
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	220a      	movs	r2, #10
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 f8c3 	bl	800a33c <__multadd>
 800a1b6:	4607      	mov	r7, r0
 800a1b8:	e7f0      	b.n	800a19c <_dtoa_r+0xb14>
 800a1ba:	f1b9 0f00 	cmp.w	r9, #0
 800a1be:	9a03      	ldr	r2, [sp, #12]
 800a1c0:	bfcc      	ite	gt
 800a1c2:	464d      	movgt	r5, r9
 800a1c4:	2501      	movle	r5, #1
 800a1c6:	4415      	add	r5, r2
 800a1c8:	f04f 0800 	mov.w	r8, #0
 800a1cc:	4659      	mov	r1, fp
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	9306      	str	r3, [sp, #24]
 800a1d4:	f000 fa62 	bl	800a69c <__lshift>
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4683      	mov	fp, r0
 800a1dc:	f000 faca 	bl	800a774 <__mcmp>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	dcb2      	bgt.n	800a14a <_dtoa_r+0xac2>
 800a1e4:	d102      	bne.n	800a1ec <_dtoa_r+0xb64>
 800a1e6:	9b06      	ldr	r3, [sp, #24]
 800a1e8:	07db      	lsls	r3, r3, #31
 800a1ea:	d4ae      	bmi.n	800a14a <_dtoa_r+0xac2>
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	461d      	mov	r5, r3
 800a1f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1f4:	2a30      	cmp	r2, #48	; 0x30
 800a1f6:	d0fa      	beq.n	800a1ee <_dtoa_r+0xb66>
 800a1f8:	e6f7      	b.n	8009fea <_dtoa_r+0x962>
 800a1fa:	9a03      	ldr	r2, [sp, #12]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d1a5      	bne.n	800a14c <_dtoa_r+0xac4>
 800a200:	f10a 0a01 	add.w	sl, sl, #1
 800a204:	2331      	movs	r3, #49	; 0x31
 800a206:	e779      	b.n	800a0fc <_dtoa_r+0xa74>
 800a208:	4b13      	ldr	r3, [pc, #76]	; (800a258 <_dtoa_r+0xbd0>)
 800a20a:	f7ff baac 	b.w	8009766 <_dtoa_r+0xde>
 800a20e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a210:	2b00      	cmp	r3, #0
 800a212:	f47f aa83 	bne.w	800971c <_dtoa_r+0x94>
 800a216:	4b11      	ldr	r3, [pc, #68]	; (800a25c <_dtoa_r+0xbd4>)
 800a218:	f7ff baa5 	b.w	8009766 <_dtoa_r+0xde>
 800a21c:	f1b9 0f00 	cmp.w	r9, #0
 800a220:	dc03      	bgt.n	800a22a <_dtoa_r+0xba2>
 800a222:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a224:	2b02      	cmp	r3, #2
 800a226:	f73f aec9 	bgt.w	8009fbc <_dtoa_r+0x934>
 800a22a:	9d03      	ldr	r5, [sp, #12]
 800a22c:	4631      	mov	r1, r6
 800a22e:	4658      	mov	r0, fp
 800a230:	f7ff f99c 	bl	800956c <quorem>
 800a234:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a238:	f805 3b01 	strb.w	r3, [r5], #1
 800a23c:	9a03      	ldr	r2, [sp, #12]
 800a23e:	1aaa      	subs	r2, r5, r2
 800a240:	4591      	cmp	r9, r2
 800a242:	ddba      	ble.n	800a1ba <_dtoa_r+0xb32>
 800a244:	4659      	mov	r1, fp
 800a246:	2300      	movs	r3, #0
 800a248:	220a      	movs	r2, #10
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 f876 	bl	800a33c <__multadd>
 800a250:	4683      	mov	fp, r0
 800a252:	e7eb      	b.n	800a22c <_dtoa_r+0xba4>
 800a254:	0800c017 	.word	0x0800c017
 800a258:	0800bf70 	.word	0x0800bf70
 800a25c:	0800bf94 	.word	0x0800bf94

0800a260 <_localeconv_r>:
 800a260:	4800      	ldr	r0, [pc, #0]	; (800a264 <_localeconv_r+0x4>)
 800a262:	4770      	bx	lr
 800a264:	2000018c 	.word	0x2000018c

0800a268 <malloc>:
 800a268:	4b02      	ldr	r3, [pc, #8]	; (800a274 <malloc+0xc>)
 800a26a:	4601      	mov	r1, r0
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	f000 bbdf 	b.w	800aa30 <_malloc_r>
 800a272:	bf00      	nop
 800a274:	20000038 	.word	0x20000038

0800a278 <_Balloc>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a27c:	4604      	mov	r4, r0
 800a27e:	460d      	mov	r5, r1
 800a280:	b976      	cbnz	r6, 800a2a0 <_Balloc+0x28>
 800a282:	2010      	movs	r0, #16
 800a284:	f7ff fff0 	bl	800a268 <malloc>
 800a288:	4602      	mov	r2, r0
 800a28a:	6260      	str	r0, [r4, #36]	; 0x24
 800a28c:	b920      	cbnz	r0, 800a298 <_Balloc+0x20>
 800a28e:	4b18      	ldr	r3, [pc, #96]	; (800a2f0 <_Balloc+0x78>)
 800a290:	4818      	ldr	r0, [pc, #96]	; (800a2f4 <_Balloc+0x7c>)
 800a292:	2166      	movs	r1, #102	; 0x66
 800a294:	f000 fd92 	bl	800adbc <__assert_func>
 800a298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a29c:	6006      	str	r6, [r0, #0]
 800a29e:	60c6      	str	r6, [r0, #12]
 800a2a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2a2:	68f3      	ldr	r3, [r6, #12]
 800a2a4:	b183      	cbz	r3, 800a2c8 <_Balloc+0x50>
 800a2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2ae:	b9b8      	cbnz	r0, 800a2e0 <_Balloc+0x68>
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a2b6:	1d72      	adds	r2, r6, #5
 800a2b8:	0092      	lsls	r2, r2, #2
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 fb58 	bl	800a970 <_calloc_r>
 800a2c0:	b160      	cbz	r0, 800a2dc <_Balloc+0x64>
 800a2c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2c6:	e00e      	b.n	800a2e6 <_Balloc+0x6e>
 800a2c8:	2221      	movs	r2, #33	; 0x21
 800a2ca:	2104      	movs	r1, #4
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 fb4f 	bl	800a970 <_calloc_r>
 800a2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d4:	60f0      	str	r0, [r6, #12]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e4      	bne.n	800a2a6 <_Balloc+0x2e>
 800a2dc:	2000      	movs	r0, #0
 800a2de:	bd70      	pop	{r4, r5, r6, pc}
 800a2e0:	6802      	ldr	r2, [r0, #0]
 800a2e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2ec:	e7f7      	b.n	800a2de <_Balloc+0x66>
 800a2ee:	bf00      	nop
 800a2f0:	0800bfa1 	.word	0x0800bfa1
 800a2f4:	0800c028 	.word	0x0800c028

0800a2f8 <_Bfree>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	460c      	mov	r4, r1
 800a300:	b976      	cbnz	r6, 800a320 <_Bfree+0x28>
 800a302:	2010      	movs	r0, #16
 800a304:	f7ff ffb0 	bl	800a268 <malloc>
 800a308:	4602      	mov	r2, r0
 800a30a:	6268      	str	r0, [r5, #36]	; 0x24
 800a30c:	b920      	cbnz	r0, 800a318 <_Bfree+0x20>
 800a30e:	4b09      	ldr	r3, [pc, #36]	; (800a334 <_Bfree+0x3c>)
 800a310:	4809      	ldr	r0, [pc, #36]	; (800a338 <_Bfree+0x40>)
 800a312:	218a      	movs	r1, #138	; 0x8a
 800a314:	f000 fd52 	bl	800adbc <__assert_func>
 800a318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a31c:	6006      	str	r6, [r0, #0]
 800a31e:	60c6      	str	r6, [r0, #12]
 800a320:	b13c      	cbz	r4, 800a332 <_Bfree+0x3a>
 800a322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a324:	6862      	ldr	r2, [r4, #4]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a32c:	6021      	str	r1, [r4, #0]
 800a32e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	0800bfa1 	.word	0x0800bfa1
 800a338:	0800c028 	.word	0x0800c028

0800a33c <__multadd>:
 800a33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a340:	690e      	ldr	r6, [r1, #16]
 800a342:	4607      	mov	r7, r0
 800a344:	4698      	mov	r8, r3
 800a346:	460c      	mov	r4, r1
 800a348:	f101 0014 	add.w	r0, r1, #20
 800a34c:	2300      	movs	r3, #0
 800a34e:	6805      	ldr	r5, [r0, #0]
 800a350:	b2a9      	uxth	r1, r5
 800a352:	fb02 8101 	mla	r1, r2, r1, r8
 800a356:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a35a:	0c2d      	lsrs	r5, r5, #16
 800a35c:	fb02 c505 	mla	r5, r2, r5, ip
 800a360:	b289      	uxth	r1, r1
 800a362:	3301      	adds	r3, #1
 800a364:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a368:	429e      	cmp	r6, r3
 800a36a:	f840 1b04 	str.w	r1, [r0], #4
 800a36e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a372:	dcec      	bgt.n	800a34e <__multadd+0x12>
 800a374:	f1b8 0f00 	cmp.w	r8, #0
 800a378:	d022      	beq.n	800a3c0 <__multadd+0x84>
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	42b3      	cmp	r3, r6
 800a37e:	dc19      	bgt.n	800a3b4 <__multadd+0x78>
 800a380:	6861      	ldr	r1, [r4, #4]
 800a382:	4638      	mov	r0, r7
 800a384:	3101      	adds	r1, #1
 800a386:	f7ff ff77 	bl	800a278 <_Balloc>
 800a38a:	4605      	mov	r5, r0
 800a38c:	b928      	cbnz	r0, 800a39a <__multadd+0x5e>
 800a38e:	4602      	mov	r2, r0
 800a390:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <__multadd+0x8c>)
 800a392:	480e      	ldr	r0, [pc, #56]	; (800a3cc <__multadd+0x90>)
 800a394:	21b5      	movs	r1, #181	; 0xb5
 800a396:	f000 fd11 	bl	800adbc <__assert_func>
 800a39a:	6922      	ldr	r2, [r4, #16]
 800a39c:	3202      	adds	r2, #2
 800a39e:	f104 010c 	add.w	r1, r4, #12
 800a3a2:	0092      	lsls	r2, r2, #2
 800a3a4:	300c      	adds	r0, #12
 800a3a6:	f7fe fc3f 	bl	8008c28 <memcpy>
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4638      	mov	r0, r7
 800a3ae:	f7ff ffa3 	bl	800a2f8 <_Bfree>
 800a3b2:	462c      	mov	r4, r5
 800a3b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a3b8:	3601      	adds	r6, #1
 800a3ba:	f8c3 8014 	str.w	r8, [r3, #20]
 800a3be:	6126      	str	r6, [r4, #16]
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c6:	bf00      	nop
 800a3c8:	0800c017 	.word	0x0800c017
 800a3cc:	0800c028 	.word	0x0800c028

0800a3d0 <__hi0bits>:
 800a3d0:	0c03      	lsrs	r3, r0, #16
 800a3d2:	041b      	lsls	r3, r3, #16
 800a3d4:	b9d3      	cbnz	r3, 800a40c <__hi0bits+0x3c>
 800a3d6:	0400      	lsls	r0, r0, #16
 800a3d8:	2310      	movs	r3, #16
 800a3da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3de:	bf04      	itt	eq
 800a3e0:	0200      	lsleq	r0, r0, #8
 800a3e2:	3308      	addeq	r3, #8
 800a3e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3e8:	bf04      	itt	eq
 800a3ea:	0100      	lsleq	r0, r0, #4
 800a3ec:	3304      	addeq	r3, #4
 800a3ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3f2:	bf04      	itt	eq
 800a3f4:	0080      	lsleq	r0, r0, #2
 800a3f6:	3302      	addeq	r3, #2
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	db05      	blt.n	800a408 <__hi0bits+0x38>
 800a3fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a400:	f103 0301 	add.w	r3, r3, #1
 800a404:	bf08      	it	eq
 800a406:	2320      	moveq	r3, #32
 800a408:	4618      	mov	r0, r3
 800a40a:	4770      	bx	lr
 800a40c:	2300      	movs	r3, #0
 800a40e:	e7e4      	b.n	800a3da <__hi0bits+0xa>

0800a410 <__lo0bits>:
 800a410:	6803      	ldr	r3, [r0, #0]
 800a412:	f013 0207 	ands.w	r2, r3, #7
 800a416:	4601      	mov	r1, r0
 800a418:	d00b      	beq.n	800a432 <__lo0bits+0x22>
 800a41a:	07da      	lsls	r2, r3, #31
 800a41c:	d424      	bmi.n	800a468 <__lo0bits+0x58>
 800a41e:	0798      	lsls	r0, r3, #30
 800a420:	bf49      	itett	mi
 800a422:	085b      	lsrmi	r3, r3, #1
 800a424:	089b      	lsrpl	r3, r3, #2
 800a426:	2001      	movmi	r0, #1
 800a428:	600b      	strmi	r3, [r1, #0]
 800a42a:	bf5c      	itt	pl
 800a42c:	600b      	strpl	r3, [r1, #0]
 800a42e:	2002      	movpl	r0, #2
 800a430:	4770      	bx	lr
 800a432:	b298      	uxth	r0, r3
 800a434:	b9b0      	cbnz	r0, 800a464 <__lo0bits+0x54>
 800a436:	0c1b      	lsrs	r3, r3, #16
 800a438:	2010      	movs	r0, #16
 800a43a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a43e:	bf04      	itt	eq
 800a440:	0a1b      	lsreq	r3, r3, #8
 800a442:	3008      	addeq	r0, #8
 800a444:	071a      	lsls	r2, r3, #28
 800a446:	bf04      	itt	eq
 800a448:	091b      	lsreq	r3, r3, #4
 800a44a:	3004      	addeq	r0, #4
 800a44c:	079a      	lsls	r2, r3, #30
 800a44e:	bf04      	itt	eq
 800a450:	089b      	lsreq	r3, r3, #2
 800a452:	3002      	addeq	r0, #2
 800a454:	07da      	lsls	r2, r3, #31
 800a456:	d403      	bmi.n	800a460 <__lo0bits+0x50>
 800a458:	085b      	lsrs	r3, r3, #1
 800a45a:	f100 0001 	add.w	r0, r0, #1
 800a45e:	d005      	beq.n	800a46c <__lo0bits+0x5c>
 800a460:	600b      	str	r3, [r1, #0]
 800a462:	4770      	bx	lr
 800a464:	4610      	mov	r0, r2
 800a466:	e7e8      	b.n	800a43a <__lo0bits+0x2a>
 800a468:	2000      	movs	r0, #0
 800a46a:	4770      	bx	lr
 800a46c:	2020      	movs	r0, #32
 800a46e:	4770      	bx	lr

0800a470 <__i2b>:
 800a470:	b510      	push	{r4, lr}
 800a472:	460c      	mov	r4, r1
 800a474:	2101      	movs	r1, #1
 800a476:	f7ff feff 	bl	800a278 <_Balloc>
 800a47a:	4602      	mov	r2, r0
 800a47c:	b928      	cbnz	r0, 800a48a <__i2b+0x1a>
 800a47e:	4b05      	ldr	r3, [pc, #20]	; (800a494 <__i2b+0x24>)
 800a480:	4805      	ldr	r0, [pc, #20]	; (800a498 <__i2b+0x28>)
 800a482:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a486:	f000 fc99 	bl	800adbc <__assert_func>
 800a48a:	2301      	movs	r3, #1
 800a48c:	6144      	str	r4, [r0, #20]
 800a48e:	6103      	str	r3, [r0, #16]
 800a490:	bd10      	pop	{r4, pc}
 800a492:	bf00      	nop
 800a494:	0800c017 	.word	0x0800c017
 800a498:	0800c028 	.word	0x0800c028

0800a49c <__multiply>:
 800a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	4614      	mov	r4, r2
 800a4a2:	690a      	ldr	r2, [r1, #16]
 800a4a4:	6923      	ldr	r3, [r4, #16]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	bfb8      	it	lt
 800a4aa:	460b      	movlt	r3, r1
 800a4ac:	460d      	mov	r5, r1
 800a4ae:	bfbc      	itt	lt
 800a4b0:	4625      	movlt	r5, r4
 800a4b2:	461c      	movlt	r4, r3
 800a4b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a4b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a4bc:	68ab      	ldr	r3, [r5, #8]
 800a4be:	6869      	ldr	r1, [r5, #4]
 800a4c0:	eb0a 0709 	add.w	r7, sl, r9
 800a4c4:	42bb      	cmp	r3, r7
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	bfb8      	it	lt
 800a4ca:	3101      	addlt	r1, #1
 800a4cc:	f7ff fed4 	bl	800a278 <_Balloc>
 800a4d0:	b930      	cbnz	r0, 800a4e0 <__multiply+0x44>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	4b42      	ldr	r3, [pc, #264]	; (800a5e0 <__multiply+0x144>)
 800a4d6:	4843      	ldr	r0, [pc, #268]	; (800a5e4 <__multiply+0x148>)
 800a4d8:	f240 115d 	movw	r1, #349	; 0x15d
 800a4dc:	f000 fc6e 	bl	800adbc <__assert_func>
 800a4e0:	f100 0614 	add.w	r6, r0, #20
 800a4e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a4e8:	4633      	mov	r3, r6
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4543      	cmp	r3, r8
 800a4ee:	d31e      	bcc.n	800a52e <__multiply+0x92>
 800a4f0:	f105 0c14 	add.w	ip, r5, #20
 800a4f4:	f104 0314 	add.w	r3, r4, #20
 800a4f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a4fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a500:	9202      	str	r2, [sp, #8]
 800a502:	ebac 0205 	sub.w	r2, ip, r5
 800a506:	3a15      	subs	r2, #21
 800a508:	f022 0203 	bic.w	r2, r2, #3
 800a50c:	3204      	adds	r2, #4
 800a50e:	f105 0115 	add.w	r1, r5, #21
 800a512:	458c      	cmp	ip, r1
 800a514:	bf38      	it	cc
 800a516:	2204      	movcc	r2, #4
 800a518:	9201      	str	r2, [sp, #4]
 800a51a:	9a02      	ldr	r2, [sp, #8]
 800a51c:	9303      	str	r3, [sp, #12]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d808      	bhi.n	800a534 <__multiply+0x98>
 800a522:	2f00      	cmp	r7, #0
 800a524:	dc55      	bgt.n	800a5d2 <__multiply+0x136>
 800a526:	6107      	str	r7, [r0, #16]
 800a528:	b005      	add	sp, #20
 800a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52e:	f843 2b04 	str.w	r2, [r3], #4
 800a532:	e7db      	b.n	800a4ec <__multiply+0x50>
 800a534:	f8b3 a000 	ldrh.w	sl, [r3]
 800a538:	f1ba 0f00 	cmp.w	sl, #0
 800a53c:	d020      	beq.n	800a580 <__multiply+0xe4>
 800a53e:	f105 0e14 	add.w	lr, r5, #20
 800a542:	46b1      	mov	r9, r6
 800a544:	2200      	movs	r2, #0
 800a546:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a54a:	f8d9 b000 	ldr.w	fp, [r9]
 800a54e:	b2a1      	uxth	r1, r4
 800a550:	fa1f fb8b 	uxth.w	fp, fp
 800a554:	fb0a b101 	mla	r1, sl, r1, fp
 800a558:	4411      	add	r1, r2
 800a55a:	f8d9 2000 	ldr.w	r2, [r9]
 800a55e:	0c24      	lsrs	r4, r4, #16
 800a560:	0c12      	lsrs	r2, r2, #16
 800a562:	fb0a 2404 	mla	r4, sl, r4, r2
 800a566:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a56a:	b289      	uxth	r1, r1
 800a56c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a570:	45f4      	cmp	ip, lr
 800a572:	f849 1b04 	str.w	r1, [r9], #4
 800a576:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a57a:	d8e4      	bhi.n	800a546 <__multiply+0xaa>
 800a57c:	9901      	ldr	r1, [sp, #4]
 800a57e:	5072      	str	r2, [r6, r1]
 800a580:	9a03      	ldr	r2, [sp, #12]
 800a582:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a586:	3304      	adds	r3, #4
 800a588:	f1b9 0f00 	cmp.w	r9, #0
 800a58c:	d01f      	beq.n	800a5ce <__multiply+0x132>
 800a58e:	6834      	ldr	r4, [r6, #0]
 800a590:	f105 0114 	add.w	r1, r5, #20
 800a594:	46b6      	mov	lr, r6
 800a596:	f04f 0a00 	mov.w	sl, #0
 800a59a:	880a      	ldrh	r2, [r1, #0]
 800a59c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a5a0:	fb09 b202 	mla	r2, r9, r2, fp
 800a5a4:	4492      	add	sl, r2
 800a5a6:	b2a4      	uxth	r4, r4
 800a5a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a5ac:	f84e 4b04 	str.w	r4, [lr], #4
 800a5b0:	f851 4b04 	ldr.w	r4, [r1], #4
 800a5b4:	f8be 2000 	ldrh.w	r2, [lr]
 800a5b8:	0c24      	lsrs	r4, r4, #16
 800a5ba:	fb09 2404 	mla	r4, r9, r4, r2
 800a5be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a5c2:	458c      	cmp	ip, r1
 800a5c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a5c8:	d8e7      	bhi.n	800a59a <__multiply+0xfe>
 800a5ca:	9a01      	ldr	r2, [sp, #4]
 800a5cc:	50b4      	str	r4, [r6, r2]
 800a5ce:	3604      	adds	r6, #4
 800a5d0:	e7a3      	b.n	800a51a <__multiply+0x7e>
 800a5d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1a5      	bne.n	800a526 <__multiply+0x8a>
 800a5da:	3f01      	subs	r7, #1
 800a5dc:	e7a1      	b.n	800a522 <__multiply+0x86>
 800a5de:	bf00      	nop
 800a5e0:	0800c017 	.word	0x0800c017
 800a5e4:	0800c028 	.word	0x0800c028

0800a5e8 <__pow5mult>:
 800a5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5ec:	4615      	mov	r5, r2
 800a5ee:	f012 0203 	ands.w	r2, r2, #3
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	d007      	beq.n	800a608 <__pow5mult+0x20>
 800a5f8:	4c25      	ldr	r4, [pc, #148]	; (800a690 <__pow5mult+0xa8>)
 800a5fa:	3a01      	subs	r2, #1
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a602:	f7ff fe9b 	bl	800a33c <__multadd>
 800a606:	4607      	mov	r7, r0
 800a608:	10ad      	asrs	r5, r5, #2
 800a60a:	d03d      	beq.n	800a688 <__pow5mult+0xa0>
 800a60c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a60e:	b97c      	cbnz	r4, 800a630 <__pow5mult+0x48>
 800a610:	2010      	movs	r0, #16
 800a612:	f7ff fe29 	bl	800a268 <malloc>
 800a616:	4602      	mov	r2, r0
 800a618:	6270      	str	r0, [r6, #36]	; 0x24
 800a61a:	b928      	cbnz	r0, 800a628 <__pow5mult+0x40>
 800a61c:	4b1d      	ldr	r3, [pc, #116]	; (800a694 <__pow5mult+0xac>)
 800a61e:	481e      	ldr	r0, [pc, #120]	; (800a698 <__pow5mult+0xb0>)
 800a620:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a624:	f000 fbca 	bl	800adbc <__assert_func>
 800a628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a62c:	6004      	str	r4, [r0, #0]
 800a62e:	60c4      	str	r4, [r0, #12]
 800a630:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a638:	b94c      	cbnz	r4, 800a64e <__pow5mult+0x66>
 800a63a:	f240 2171 	movw	r1, #625	; 0x271
 800a63e:	4630      	mov	r0, r6
 800a640:	f7ff ff16 	bl	800a470 <__i2b>
 800a644:	2300      	movs	r3, #0
 800a646:	f8c8 0008 	str.w	r0, [r8, #8]
 800a64a:	4604      	mov	r4, r0
 800a64c:	6003      	str	r3, [r0, #0]
 800a64e:	f04f 0900 	mov.w	r9, #0
 800a652:	07eb      	lsls	r3, r5, #31
 800a654:	d50a      	bpl.n	800a66c <__pow5mult+0x84>
 800a656:	4639      	mov	r1, r7
 800a658:	4622      	mov	r2, r4
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7ff ff1e 	bl	800a49c <__multiply>
 800a660:	4639      	mov	r1, r7
 800a662:	4680      	mov	r8, r0
 800a664:	4630      	mov	r0, r6
 800a666:	f7ff fe47 	bl	800a2f8 <_Bfree>
 800a66a:	4647      	mov	r7, r8
 800a66c:	106d      	asrs	r5, r5, #1
 800a66e:	d00b      	beq.n	800a688 <__pow5mult+0xa0>
 800a670:	6820      	ldr	r0, [r4, #0]
 800a672:	b938      	cbnz	r0, 800a684 <__pow5mult+0x9c>
 800a674:	4622      	mov	r2, r4
 800a676:	4621      	mov	r1, r4
 800a678:	4630      	mov	r0, r6
 800a67a:	f7ff ff0f 	bl	800a49c <__multiply>
 800a67e:	6020      	str	r0, [r4, #0]
 800a680:	f8c0 9000 	str.w	r9, [r0]
 800a684:	4604      	mov	r4, r0
 800a686:	e7e4      	b.n	800a652 <__pow5mult+0x6a>
 800a688:	4638      	mov	r0, r7
 800a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68e:	bf00      	nop
 800a690:	0800c178 	.word	0x0800c178
 800a694:	0800bfa1 	.word	0x0800bfa1
 800a698:	0800c028 	.word	0x0800c028

0800a69c <__lshift>:
 800a69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	6849      	ldr	r1, [r1, #4]
 800a6a4:	6923      	ldr	r3, [r4, #16]
 800a6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	4691      	mov	r9, r2
 800a6b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6b4:	f108 0601 	add.w	r6, r8, #1
 800a6b8:	42b3      	cmp	r3, r6
 800a6ba:	db0b      	blt.n	800a6d4 <__lshift+0x38>
 800a6bc:	4638      	mov	r0, r7
 800a6be:	f7ff fddb 	bl	800a278 <_Balloc>
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	b948      	cbnz	r0, 800a6da <__lshift+0x3e>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	4b28      	ldr	r3, [pc, #160]	; (800a76c <__lshift+0xd0>)
 800a6ca:	4829      	ldr	r0, [pc, #164]	; (800a770 <__lshift+0xd4>)
 800a6cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6d0:	f000 fb74 	bl	800adbc <__assert_func>
 800a6d4:	3101      	adds	r1, #1
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	e7ee      	b.n	800a6b8 <__lshift+0x1c>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f100 0114 	add.w	r1, r0, #20
 800a6e0:	f100 0210 	add.w	r2, r0, #16
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	4553      	cmp	r3, sl
 800a6e8:	db33      	blt.n	800a752 <__lshift+0xb6>
 800a6ea:	6920      	ldr	r0, [r4, #16]
 800a6ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6f0:	f104 0314 	add.w	r3, r4, #20
 800a6f4:	f019 091f 	ands.w	r9, r9, #31
 800a6f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a700:	d02b      	beq.n	800a75a <__lshift+0xbe>
 800a702:	f1c9 0e20 	rsb	lr, r9, #32
 800a706:	468a      	mov	sl, r1
 800a708:	2200      	movs	r2, #0
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	fa00 f009 	lsl.w	r0, r0, r9
 800a710:	4302      	orrs	r2, r0
 800a712:	f84a 2b04 	str.w	r2, [sl], #4
 800a716:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71a:	459c      	cmp	ip, r3
 800a71c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a720:	d8f3      	bhi.n	800a70a <__lshift+0x6e>
 800a722:	ebac 0304 	sub.w	r3, ip, r4
 800a726:	3b15      	subs	r3, #21
 800a728:	f023 0303 	bic.w	r3, r3, #3
 800a72c:	3304      	adds	r3, #4
 800a72e:	f104 0015 	add.w	r0, r4, #21
 800a732:	4584      	cmp	ip, r0
 800a734:	bf38      	it	cc
 800a736:	2304      	movcc	r3, #4
 800a738:	50ca      	str	r2, [r1, r3]
 800a73a:	b10a      	cbz	r2, 800a740 <__lshift+0xa4>
 800a73c:	f108 0602 	add.w	r6, r8, #2
 800a740:	3e01      	subs	r6, #1
 800a742:	4638      	mov	r0, r7
 800a744:	612e      	str	r6, [r5, #16]
 800a746:	4621      	mov	r1, r4
 800a748:	f7ff fdd6 	bl	800a2f8 <_Bfree>
 800a74c:	4628      	mov	r0, r5
 800a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a752:	f842 0f04 	str.w	r0, [r2, #4]!
 800a756:	3301      	adds	r3, #1
 800a758:	e7c5      	b.n	800a6e6 <__lshift+0x4a>
 800a75a:	3904      	subs	r1, #4
 800a75c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a760:	f841 2f04 	str.w	r2, [r1, #4]!
 800a764:	459c      	cmp	ip, r3
 800a766:	d8f9      	bhi.n	800a75c <__lshift+0xc0>
 800a768:	e7ea      	b.n	800a740 <__lshift+0xa4>
 800a76a:	bf00      	nop
 800a76c:	0800c017 	.word	0x0800c017
 800a770:	0800c028 	.word	0x0800c028

0800a774 <__mcmp>:
 800a774:	b530      	push	{r4, r5, lr}
 800a776:	6902      	ldr	r2, [r0, #16]
 800a778:	690c      	ldr	r4, [r1, #16]
 800a77a:	1b12      	subs	r2, r2, r4
 800a77c:	d10e      	bne.n	800a79c <__mcmp+0x28>
 800a77e:	f100 0314 	add.w	r3, r0, #20
 800a782:	3114      	adds	r1, #20
 800a784:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a788:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a78c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a790:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a794:	42a5      	cmp	r5, r4
 800a796:	d003      	beq.n	800a7a0 <__mcmp+0x2c>
 800a798:	d305      	bcc.n	800a7a6 <__mcmp+0x32>
 800a79a:	2201      	movs	r2, #1
 800a79c:	4610      	mov	r0, r2
 800a79e:	bd30      	pop	{r4, r5, pc}
 800a7a0:	4283      	cmp	r3, r0
 800a7a2:	d3f3      	bcc.n	800a78c <__mcmp+0x18>
 800a7a4:	e7fa      	b.n	800a79c <__mcmp+0x28>
 800a7a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7aa:	e7f7      	b.n	800a79c <__mcmp+0x28>

0800a7ac <__mdiff>:
 800a7ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	4617      	mov	r7, r2
 800a7ba:	f7ff ffdb 	bl	800a774 <__mcmp>
 800a7be:	1e05      	subs	r5, r0, #0
 800a7c0:	d110      	bne.n	800a7e4 <__mdiff+0x38>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7ff fd57 	bl	800a278 <_Balloc>
 800a7ca:	b930      	cbnz	r0, 800a7da <__mdiff+0x2e>
 800a7cc:	4b39      	ldr	r3, [pc, #228]	; (800a8b4 <__mdiff+0x108>)
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	f240 2132 	movw	r1, #562	; 0x232
 800a7d4:	4838      	ldr	r0, [pc, #224]	; (800a8b8 <__mdiff+0x10c>)
 800a7d6:	f000 faf1 	bl	800adbc <__assert_func>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e4:	bfa4      	itt	ge
 800a7e6:	463b      	movge	r3, r7
 800a7e8:	4627      	movge	r7, r4
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	bfa6      	itte	ge
 800a7f0:	461c      	movge	r4, r3
 800a7f2:	2500      	movge	r5, #0
 800a7f4:	2501      	movlt	r5, #1
 800a7f6:	f7ff fd3f 	bl	800a278 <_Balloc>
 800a7fa:	b920      	cbnz	r0, 800a806 <__mdiff+0x5a>
 800a7fc:	4b2d      	ldr	r3, [pc, #180]	; (800a8b4 <__mdiff+0x108>)
 800a7fe:	4602      	mov	r2, r0
 800a800:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a804:	e7e6      	b.n	800a7d4 <__mdiff+0x28>
 800a806:	693e      	ldr	r6, [r7, #16]
 800a808:	60c5      	str	r5, [r0, #12]
 800a80a:	6925      	ldr	r5, [r4, #16]
 800a80c:	f107 0114 	add.w	r1, r7, #20
 800a810:	f104 0914 	add.w	r9, r4, #20
 800a814:	f100 0e14 	add.w	lr, r0, #20
 800a818:	f107 0210 	add.w	r2, r7, #16
 800a81c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a820:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a824:	46f2      	mov	sl, lr
 800a826:	2700      	movs	r7, #0
 800a828:	f859 3b04 	ldr.w	r3, [r9], #4
 800a82c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a830:	fa1f f883 	uxth.w	r8, r3
 800a834:	fa17 f78b 	uxtah	r7, r7, fp
 800a838:	0c1b      	lsrs	r3, r3, #16
 800a83a:	eba7 0808 	sub.w	r8, r7, r8
 800a83e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a842:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a846:	fa1f f888 	uxth.w	r8, r8
 800a84a:	141f      	asrs	r7, r3, #16
 800a84c:	454d      	cmp	r5, r9
 800a84e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a852:	f84a 3b04 	str.w	r3, [sl], #4
 800a856:	d8e7      	bhi.n	800a828 <__mdiff+0x7c>
 800a858:	1b2b      	subs	r3, r5, r4
 800a85a:	3b15      	subs	r3, #21
 800a85c:	f023 0303 	bic.w	r3, r3, #3
 800a860:	3304      	adds	r3, #4
 800a862:	3415      	adds	r4, #21
 800a864:	42a5      	cmp	r5, r4
 800a866:	bf38      	it	cc
 800a868:	2304      	movcc	r3, #4
 800a86a:	4419      	add	r1, r3
 800a86c:	4473      	add	r3, lr
 800a86e:	469e      	mov	lr, r3
 800a870:	460d      	mov	r5, r1
 800a872:	4565      	cmp	r5, ip
 800a874:	d30e      	bcc.n	800a894 <__mdiff+0xe8>
 800a876:	f10c 0203 	add.w	r2, ip, #3
 800a87a:	1a52      	subs	r2, r2, r1
 800a87c:	f022 0203 	bic.w	r2, r2, #3
 800a880:	3903      	subs	r1, #3
 800a882:	458c      	cmp	ip, r1
 800a884:	bf38      	it	cc
 800a886:	2200      	movcc	r2, #0
 800a888:	441a      	add	r2, r3
 800a88a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a88e:	b17b      	cbz	r3, 800a8b0 <__mdiff+0x104>
 800a890:	6106      	str	r6, [r0, #16]
 800a892:	e7a5      	b.n	800a7e0 <__mdiff+0x34>
 800a894:	f855 8b04 	ldr.w	r8, [r5], #4
 800a898:	fa17 f488 	uxtah	r4, r7, r8
 800a89c:	1422      	asrs	r2, r4, #16
 800a89e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a8a2:	b2a4      	uxth	r4, r4
 800a8a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a8a8:	f84e 4b04 	str.w	r4, [lr], #4
 800a8ac:	1417      	asrs	r7, r2, #16
 800a8ae:	e7e0      	b.n	800a872 <__mdiff+0xc6>
 800a8b0:	3e01      	subs	r6, #1
 800a8b2:	e7ea      	b.n	800a88a <__mdiff+0xde>
 800a8b4:	0800c017 	.word	0x0800c017
 800a8b8:	0800c028 	.word	0x0800c028

0800a8bc <__d2b>:
 800a8bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8c0:	2101      	movs	r1, #1
 800a8c2:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 800a8c6:	4690      	mov	r8, r2
 800a8c8:	4699      	mov	r9, r3
 800a8ca:	f7ff fcd5 	bl	800a278 <_Balloc>
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	b930      	cbnz	r0, 800a8e0 <__d2b+0x24>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	4b24      	ldr	r3, [pc, #144]	; (800a968 <__d2b+0xac>)
 800a8d6:	4825      	ldr	r0, [pc, #148]	; (800a96c <__d2b+0xb0>)
 800a8d8:	f240 310a 	movw	r1, #778	; 0x30a
 800a8dc:	f000 fa6e 	bl	800adbc <__assert_func>
 800a8e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8e8:	bb2d      	cbnz	r5, 800a936 <__d2b+0x7a>
 800a8ea:	f1b8 0200 	subs.w	r2, r8, #0
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	d026      	beq.n	800a940 <__d2b+0x84>
 800a8f2:	4668      	mov	r0, sp
 800a8f4:	9200      	str	r2, [sp, #0]
 800a8f6:	f7ff fd8b 	bl	800a410 <__lo0bits>
 800a8fa:	9900      	ldr	r1, [sp, #0]
 800a8fc:	b1f0      	cbz	r0, 800a93c <__d2b+0x80>
 800a8fe:	9a01      	ldr	r2, [sp, #4]
 800a900:	f1c0 0320 	rsb	r3, r0, #32
 800a904:	fa02 f303 	lsl.w	r3, r2, r3
 800a908:	430b      	orrs	r3, r1
 800a90a:	40c2      	lsrs	r2, r0
 800a90c:	6163      	str	r3, [r4, #20]
 800a90e:	9201      	str	r2, [sp, #4]
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	61a3      	str	r3, [r4, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	bf14      	ite	ne
 800a918:	2202      	movne	r2, #2
 800a91a:	2201      	moveq	r2, #1
 800a91c:	6122      	str	r2, [r4, #16]
 800a91e:	b1c5      	cbz	r5, 800a952 <__d2b+0x96>
 800a920:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a924:	4405      	add	r5, r0
 800a926:	603d      	str	r5, [r7, #0]
 800a928:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a92c:	6030      	str	r0, [r6, #0]
 800a92e:	4620      	mov	r0, r4
 800a930:	b003      	add	sp, #12
 800a932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a93a:	e7d6      	b.n	800a8ea <__d2b+0x2e>
 800a93c:	6161      	str	r1, [r4, #20]
 800a93e:	e7e7      	b.n	800a910 <__d2b+0x54>
 800a940:	a801      	add	r0, sp, #4
 800a942:	f7ff fd65 	bl	800a410 <__lo0bits>
 800a946:	9b01      	ldr	r3, [sp, #4]
 800a948:	6163      	str	r3, [r4, #20]
 800a94a:	2201      	movs	r2, #1
 800a94c:	6122      	str	r2, [r4, #16]
 800a94e:	3020      	adds	r0, #32
 800a950:	e7e5      	b.n	800a91e <__d2b+0x62>
 800a952:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a956:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a95a:	6038      	str	r0, [r7, #0]
 800a95c:	6918      	ldr	r0, [r3, #16]
 800a95e:	f7ff fd37 	bl	800a3d0 <__hi0bits>
 800a962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a966:	e7e1      	b.n	800a92c <__d2b+0x70>
 800a968:	0800c017 	.word	0x0800c017
 800a96c:	0800c028 	.word	0x0800c028

0800a970 <_calloc_r>:
 800a970:	b513      	push	{r0, r1, r4, lr}
 800a972:	434a      	muls	r2, r1
 800a974:	4611      	mov	r1, r2
 800a976:	9201      	str	r2, [sp, #4]
 800a978:	f000 f85a 	bl	800aa30 <_malloc_r>
 800a97c:	4604      	mov	r4, r0
 800a97e:	b118      	cbz	r0, 800a988 <_calloc_r+0x18>
 800a980:	9a01      	ldr	r2, [sp, #4]
 800a982:	2100      	movs	r1, #0
 800a984:	f7fe f95e 	bl	8008c44 <memset>
 800a988:	4620      	mov	r0, r4
 800a98a:	b002      	add	sp, #8
 800a98c:	bd10      	pop	{r4, pc}
	...

0800a990 <_free_r>:
 800a990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a992:	2900      	cmp	r1, #0
 800a994:	d048      	beq.n	800aa28 <_free_r+0x98>
 800a996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99a:	9001      	str	r0, [sp, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f1a1 0404 	sub.w	r4, r1, #4
 800a9a2:	bfb8      	it	lt
 800a9a4:	18e4      	addlt	r4, r4, r3
 800a9a6:	f000 fa65 	bl	800ae74 <__malloc_lock>
 800a9aa:	4a20      	ldr	r2, [pc, #128]	; (800aa2c <_free_r+0x9c>)
 800a9ac:	9801      	ldr	r0, [sp, #4]
 800a9ae:	6813      	ldr	r3, [r2, #0]
 800a9b0:	4615      	mov	r5, r2
 800a9b2:	b933      	cbnz	r3, 800a9c2 <_free_r+0x32>
 800a9b4:	6063      	str	r3, [r4, #4]
 800a9b6:	6014      	str	r4, [r2, #0]
 800a9b8:	b003      	add	sp, #12
 800a9ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9be:	f000 ba5f 	b.w	800ae80 <__malloc_unlock>
 800a9c2:	42a3      	cmp	r3, r4
 800a9c4:	d90b      	bls.n	800a9de <_free_r+0x4e>
 800a9c6:	6821      	ldr	r1, [r4, #0]
 800a9c8:	1862      	adds	r2, r4, r1
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	bf04      	itt	eq
 800a9ce:	681a      	ldreq	r2, [r3, #0]
 800a9d0:	685b      	ldreq	r3, [r3, #4]
 800a9d2:	6063      	str	r3, [r4, #4]
 800a9d4:	bf04      	itt	eq
 800a9d6:	1852      	addeq	r2, r2, r1
 800a9d8:	6022      	streq	r2, [r4, #0]
 800a9da:	602c      	str	r4, [r5, #0]
 800a9dc:	e7ec      	b.n	800a9b8 <_free_r+0x28>
 800a9de:	461a      	mov	r2, r3
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	b10b      	cbz	r3, 800a9e8 <_free_r+0x58>
 800a9e4:	42a3      	cmp	r3, r4
 800a9e6:	d9fa      	bls.n	800a9de <_free_r+0x4e>
 800a9e8:	6811      	ldr	r1, [r2, #0]
 800a9ea:	1855      	adds	r5, r2, r1
 800a9ec:	42a5      	cmp	r5, r4
 800a9ee:	d10b      	bne.n	800aa08 <_free_r+0x78>
 800a9f0:	6824      	ldr	r4, [r4, #0]
 800a9f2:	4421      	add	r1, r4
 800a9f4:	1854      	adds	r4, r2, r1
 800a9f6:	42a3      	cmp	r3, r4
 800a9f8:	6011      	str	r1, [r2, #0]
 800a9fa:	d1dd      	bne.n	800a9b8 <_free_r+0x28>
 800a9fc:	681c      	ldr	r4, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	6053      	str	r3, [r2, #4]
 800aa02:	4421      	add	r1, r4
 800aa04:	6011      	str	r1, [r2, #0]
 800aa06:	e7d7      	b.n	800a9b8 <_free_r+0x28>
 800aa08:	d902      	bls.n	800aa10 <_free_r+0x80>
 800aa0a:	230c      	movs	r3, #12
 800aa0c:	6003      	str	r3, [r0, #0]
 800aa0e:	e7d3      	b.n	800a9b8 <_free_r+0x28>
 800aa10:	6825      	ldr	r5, [r4, #0]
 800aa12:	1961      	adds	r1, r4, r5
 800aa14:	428b      	cmp	r3, r1
 800aa16:	bf04      	itt	eq
 800aa18:	6819      	ldreq	r1, [r3, #0]
 800aa1a:	685b      	ldreq	r3, [r3, #4]
 800aa1c:	6063      	str	r3, [r4, #4]
 800aa1e:	bf04      	itt	eq
 800aa20:	1949      	addeq	r1, r1, r5
 800aa22:	6021      	streq	r1, [r4, #0]
 800aa24:	6054      	str	r4, [r2, #4]
 800aa26:	e7c7      	b.n	800a9b8 <_free_r+0x28>
 800aa28:	b003      	add	sp, #12
 800aa2a:	bd30      	pop	{r4, r5, pc}
 800aa2c:	20013580 	.word	0x20013580

0800aa30 <_malloc_r>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	1ccd      	adds	r5, r1, #3
 800aa34:	f025 0503 	bic.w	r5, r5, #3
 800aa38:	3508      	adds	r5, #8
 800aa3a:	2d0c      	cmp	r5, #12
 800aa3c:	bf38      	it	cc
 800aa3e:	250c      	movcc	r5, #12
 800aa40:	2d00      	cmp	r5, #0
 800aa42:	4606      	mov	r6, r0
 800aa44:	db01      	blt.n	800aa4a <_malloc_r+0x1a>
 800aa46:	42a9      	cmp	r1, r5
 800aa48:	d903      	bls.n	800aa52 <_malloc_r+0x22>
 800aa4a:	230c      	movs	r3, #12
 800aa4c:	6033      	str	r3, [r6, #0]
 800aa4e:	2000      	movs	r0, #0
 800aa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa52:	f000 fa0f 	bl	800ae74 <__malloc_lock>
 800aa56:	4921      	ldr	r1, [pc, #132]	; (800aadc <_malloc_r+0xac>)
 800aa58:	680a      	ldr	r2, [r1, #0]
 800aa5a:	4614      	mov	r4, r2
 800aa5c:	b99c      	cbnz	r4, 800aa86 <_malloc_r+0x56>
 800aa5e:	4f20      	ldr	r7, [pc, #128]	; (800aae0 <_malloc_r+0xb0>)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	b923      	cbnz	r3, 800aa6e <_malloc_r+0x3e>
 800aa64:	4621      	mov	r1, r4
 800aa66:	4630      	mov	r0, r6
 800aa68:	f000 f998 	bl	800ad9c <_sbrk_r>
 800aa6c:	6038      	str	r0, [r7, #0]
 800aa6e:	4629      	mov	r1, r5
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 f993 	bl	800ad9c <_sbrk_r>
 800aa76:	1c43      	adds	r3, r0, #1
 800aa78:	d123      	bne.n	800aac2 <_malloc_r+0x92>
 800aa7a:	230c      	movs	r3, #12
 800aa7c:	6033      	str	r3, [r6, #0]
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f000 f9fe 	bl	800ae80 <__malloc_unlock>
 800aa84:	e7e3      	b.n	800aa4e <_malloc_r+0x1e>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	1b5b      	subs	r3, r3, r5
 800aa8a:	d417      	bmi.n	800aabc <_malloc_r+0x8c>
 800aa8c:	2b0b      	cmp	r3, #11
 800aa8e:	d903      	bls.n	800aa98 <_malloc_r+0x68>
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	441c      	add	r4, r3
 800aa94:	6025      	str	r5, [r4, #0]
 800aa96:	e004      	b.n	800aaa2 <_malloc_r+0x72>
 800aa98:	6863      	ldr	r3, [r4, #4]
 800aa9a:	42a2      	cmp	r2, r4
 800aa9c:	bf0c      	ite	eq
 800aa9e:	600b      	streq	r3, [r1, #0]
 800aaa0:	6053      	strne	r3, [r2, #4]
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f000 f9ec 	bl	800ae80 <__malloc_unlock>
 800aaa8:	f104 000b 	add.w	r0, r4, #11
 800aaac:	1d23      	adds	r3, r4, #4
 800aaae:	f020 0007 	bic.w	r0, r0, #7
 800aab2:	1ac2      	subs	r2, r0, r3
 800aab4:	d0cc      	beq.n	800aa50 <_malloc_r+0x20>
 800aab6:	1a1b      	subs	r3, r3, r0
 800aab8:	50a3      	str	r3, [r4, r2]
 800aaba:	e7c9      	b.n	800aa50 <_malloc_r+0x20>
 800aabc:	4622      	mov	r2, r4
 800aabe:	6864      	ldr	r4, [r4, #4]
 800aac0:	e7cc      	b.n	800aa5c <_malloc_r+0x2c>
 800aac2:	1cc4      	adds	r4, r0, #3
 800aac4:	f024 0403 	bic.w	r4, r4, #3
 800aac8:	42a0      	cmp	r0, r4
 800aaca:	d0e3      	beq.n	800aa94 <_malloc_r+0x64>
 800aacc:	1a21      	subs	r1, r4, r0
 800aace:	4630      	mov	r0, r6
 800aad0:	f000 f964 	bl	800ad9c <_sbrk_r>
 800aad4:	3001      	adds	r0, #1
 800aad6:	d1dd      	bne.n	800aa94 <_malloc_r+0x64>
 800aad8:	e7cf      	b.n	800aa7a <_malloc_r+0x4a>
 800aada:	bf00      	nop
 800aadc:	20013580 	.word	0x20013580
 800aae0:	20013584 	.word	0x20013584

0800aae4 <__ssputs_r>:
 800aae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae8:	688e      	ldr	r6, [r1, #8]
 800aaea:	429e      	cmp	r6, r3
 800aaec:	4682      	mov	sl, r0
 800aaee:	460c      	mov	r4, r1
 800aaf0:	4690      	mov	r8, r2
 800aaf2:	461f      	mov	r7, r3
 800aaf4:	d838      	bhi.n	800ab68 <__ssputs_r+0x84>
 800aaf6:	898a      	ldrh	r2, [r1, #12]
 800aaf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aafc:	d032      	beq.n	800ab64 <__ssputs_r+0x80>
 800aafe:	6825      	ldr	r5, [r4, #0]
 800ab00:	6909      	ldr	r1, [r1, #16]
 800ab02:	eba5 0901 	sub.w	r9, r5, r1
 800ab06:	6965      	ldr	r5, [r4, #20]
 800ab08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab10:	3301      	adds	r3, #1
 800ab12:	444b      	add	r3, r9
 800ab14:	106d      	asrs	r5, r5, #1
 800ab16:	429d      	cmp	r5, r3
 800ab18:	bf38      	it	cc
 800ab1a:	461d      	movcc	r5, r3
 800ab1c:	0553      	lsls	r3, r2, #21
 800ab1e:	d531      	bpl.n	800ab84 <__ssputs_r+0xa0>
 800ab20:	4629      	mov	r1, r5
 800ab22:	f7ff ff85 	bl	800aa30 <_malloc_r>
 800ab26:	4606      	mov	r6, r0
 800ab28:	b950      	cbnz	r0, 800ab40 <__ssputs_r+0x5c>
 800ab2a:	230c      	movs	r3, #12
 800ab2c:	f8ca 3000 	str.w	r3, [sl]
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab36:	81a3      	strh	r3, [r4, #12]
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab40:	6921      	ldr	r1, [r4, #16]
 800ab42:	464a      	mov	r2, r9
 800ab44:	f7fe f870 	bl	8008c28 <memcpy>
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab52:	81a3      	strh	r3, [r4, #12]
 800ab54:	6126      	str	r6, [r4, #16]
 800ab56:	6165      	str	r5, [r4, #20]
 800ab58:	444e      	add	r6, r9
 800ab5a:	eba5 0509 	sub.w	r5, r5, r9
 800ab5e:	6026      	str	r6, [r4, #0]
 800ab60:	60a5      	str	r5, [r4, #8]
 800ab62:	463e      	mov	r6, r7
 800ab64:	42be      	cmp	r6, r7
 800ab66:	d900      	bls.n	800ab6a <__ssputs_r+0x86>
 800ab68:	463e      	mov	r6, r7
 800ab6a:	4632      	mov	r2, r6
 800ab6c:	6820      	ldr	r0, [r4, #0]
 800ab6e:	4641      	mov	r1, r8
 800ab70:	f000 f966 	bl	800ae40 <memmove>
 800ab74:	68a3      	ldr	r3, [r4, #8]
 800ab76:	6822      	ldr	r2, [r4, #0]
 800ab78:	1b9b      	subs	r3, r3, r6
 800ab7a:	4432      	add	r2, r6
 800ab7c:	60a3      	str	r3, [r4, #8]
 800ab7e:	6022      	str	r2, [r4, #0]
 800ab80:	2000      	movs	r0, #0
 800ab82:	e7db      	b.n	800ab3c <__ssputs_r+0x58>
 800ab84:	462a      	mov	r2, r5
 800ab86:	f000 f981 	bl	800ae8c <_realloc_r>
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d1e1      	bne.n	800ab54 <__ssputs_r+0x70>
 800ab90:	6921      	ldr	r1, [r4, #16]
 800ab92:	4650      	mov	r0, sl
 800ab94:	f7ff fefc 	bl	800a990 <_free_r>
 800ab98:	e7c7      	b.n	800ab2a <__ssputs_r+0x46>
	...

0800ab9c <_svfiprintf_r>:
 800ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba0:	4698      	mov	r8, r3
 800aba2:	898b      	ldrh	r3, [r1, #12]
 800aba4:	061b      	lsls	r3, r3, #24
 800aba6:	b09d      	sub	sp, #116	; 0x74
 800aba8:	4607      	mov	r7, r0
 800abaa:	460d      	mov	r5, r1
 800abac:	4614      	mov	r4, r2
 800abae:	d50e      	bpl.n	800abce <_svfiprintf_r+0x32>
 800abb0:	690b      	ldr	r3, [r1, #16]
 800abb2:	b963      	cbnz	r3, 800abce <_svfiprintf_r+0x32>
 800abb4:	2140      	movs	r1, #64	; 0x40
 800abb6:	f7ff ff3b 	bl	800aa30 <_malloc_r>
 800abba:	6028      	str	r0, [r5, #0]
 800abbc:	6128      	str	r0, [r5, #16]
 800abbe:	b920      	cbnz	r0, 800abca <_svfiprintf_r+0x2e>
 800abc0:	230c      	movs	r3, #12
 800abc2:	603b      	str	r3, [r7, #0]
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abc8:	e0d1      	b.n	800ad6e <_svfiprintf_r+0x1d2>
 800abca:	2340      	movs	r3, #64	; 0x40
 800abcc:	616b      	str	r3, [r5, #20]
 800abce:	2300      	movs	r3, #0
 800abd0:	9309      	str	r3, [sp, #36]	; 0x24
 800abd2:	2320      	movs	r3, #32
 800abd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abd8:	f8cd 800c 	str.w	r8, [sp, #12]
 800abdc:	2330      	movs	r3, #48	; 0x30
 800abde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad88 <_svfiprintf_r+0x1ec>
 800abe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abe6:	f04f 0901 	mov.w	r9, #1
 800abea:	4623      	mov	r3, r4
 800abec:	469a      	mov	sl, r3
 800abee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abf2:	b10a      	cbz	r2, 800abf8 <_svfiprintf_r+0x5c>
 800abf4:	2a25      	cmp	r2, #37	; 0x25
 800abf6:	d1f9      	bne.n	800abec <_svfiprintf_r+0x50>
 800abf8:	ebba 0b04 	subs.w	fp, sl, r4
 800abfc:	d00b      	beq.n	800ac16 <_svfiprintf_r+0x7a>
 800abfe:	465b      	mov	r3, fp
 800ac00:	4622      	mov	r2, r4
 800ac02:	4629      	mov	r1, r5
 800ac04:	4638      	mov	r0, r7
 800ac06:	f7ff ff6d 	bl	800aae4 <__ssputs_r>
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	f000 80aa 	beq.w	800ad64 <_svfiprintf_r+0x1c8>
 800ac10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac12:	445a      	add	r2, fp
 800ac14:	9209      	str	r2, [sp, #36]	; 0x24
 800ac16:	f89a 3000 	ldrb.w	r3, [sl]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f000 80a2 	beq.w	800ad64 <_svfiprintf_r+0x1c8>
 800ac20:	2300      	movs	r3, #0
 800ac22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac2a:	f10a 0a01 	add.w	sl, sl, #1
 800ac2e:	9304      	str	r3, [sp, #16]
 800ac30:	9307      	str	r3, [sp, #28]
 800ac32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac36:	931a      	str	r3, [sp, #104]	; 0x68
 800ac38:	4654      	mov	r4, sl
 800ac3a:	2205      	movs	r2, #5
 800ac3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac40:	4851      	ldr	r0, [pc, #324]	; (800ad88 <_svfiprintf_r+0x1ec>)
 800ac42:	f7f5 fb2d 	bl	80002a0 <memchr>
 800ac46:	9a04      	ldr	r2, [sp, #16]
 800ac48:	b9d8      	cbnz	r0, 800ac82 <_svfiprintf_r+0xe6>
 800ac4a:	06d0      	lsls	r0, r2, #27
 800ac4c:	bf44      	itt	mi
 800ac4e:	2320      	movmi	r3, #32
 800ac50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac54:	0711      	lsls	r1, r2, #28
 800ac56:	bf44      	itt	mi
 800ac58:	232b      	movmi	r3, #43	; 0x2b
 800ac5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac62:	2b2a      	cmp	r3, #42	; 0x2a
 800ac64:	d015      	beq.n	800ac92 <_svfiprintf_r+0xf6>
 800ac66:	9a07      	ldr	r2, [sp, #28]
 800ac68:	4654      	mov	r4, sl
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f04f 0c0a 	mov.w	ip, #10
 800ac70:	4621      	mov	r1, r4
 800ac72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac76:	3b30      	subs	r3, #48	; 0x30
 800ac78:	2b09      	cmp	r3, #9
 800ac7a:	d94e      	bls.n	800ad1a <_svfiprintf_r+0x17e>
 800ac7c:	b1b0      	cbz	r0, 800acac <_svfiprintf_r+0x110>
 800ac7e:	9207      	str	r2, [sp, #28]
 800ac80:	e014      	b.n	800acac <_svfiprintf_r+0x110>
 800ac82:	eba0 0308 	sub.w	r3, r0, r8
 800ac86:	fa09 f303 	lsl.w	r3, r9, r3
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	9304      	str	r3, [sp, #16]
 800ac8e:	46a2      	mov	sl, r4
 800ac90:	e7d2      	b.n	800ac38 <_svfiprintf_r+0x9c>
 800ac92:	9b03      	ldr	r3, [sp, #12]
 800ac94:	1d19      	adds	r1, r3, #4
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	9103      	str	r1, [sp, #12]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	bfbb      	ittet	lt
 800ac9e:	425b      	neglt	r3, r3
 800aca0:	f042 0202 	orrlt.w	r2, r2, #2
 800aca4:	9307      	strge	r3, [sp, #28]
 800aca6:	9307      	strlt	r3, [sp, #28]
 800aca8:	bfb8      	it	lt
 800acaa:	9204      	strlt	r2, [sp, #16]
 800acac:	7823      	ldrb	r3, [r4, #0]
 800acae:	2b2e      	cmp	r3, #46	; 0x2e
 800acb0:	d10c      	bne.n	800accc <_svfiprintf_r+0x130>
 800acb2:	7863      	ldrb	r3, [r4, #1]
 800acb4:	2b2a      	cmp	r3, #42	; 0x2a
 800acb6:	d135      	bne.n	800ad24 <_svfiprintf_r+0x188>
 800acb8:	9b03      	ldr	r3, [sp, #12]
 800acba:	1d1a      	adds	r2, r3, #4
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	9203      	str	r2, [sp, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bfb8      	it	lt
 800acc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800acc8:	3402      	adds	r4, #2
 800acca:	9305      	str	r3, [sp, #20]
 800accc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad98 <_svfiprintf_r+0x1fc>
 800acd0:	7821      	ldrb	r1, [r4, #0]
 800acd2:	2203      	movs	r2, #3
 800acd4:	4650      	mov	r0, sl
 800acd6:	f7f5 fae3 	bl	80002a0 <memchr>
 800acda:	b140      	cbz	r0, 800acee <_svfiprintf_r+0x152>
 800acdc:	2340      	movs	r3, #64	; 0x40
 800acde:	eba0 000a 	sub.w	r0, r0, sl
 800ace2:	fa03 f000 	lsl.w	r0, r3, r0
 800ace6:	9b04      	ldr	r3, [sp, #16]
 800ace8:	4303      	orrs	r3, r0
 800acea:	3401      	adds	r4, #1
 800acec:	9304      	str	r3, [sp, #16]
 800acee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf2:	4826      	ldr	r0, [pc, #152]	; (800ad8c <_svfiprintf_r+0x1f0>)
 800acf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acf8:	2206      	movs	r2, #6
 800acfa:	f7f5 fad1 	bl	80002a0 <memchr>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d038      	beq.n	800ad74 <_svfiprintf_r+0x1d8>
 800ad02:	4b23      	ldr	r3, [pc, #140]	; (800ad90 <_svfiprintf_r+0x1f4>)
 800ad04:	bb1b      	cbnz	r3, 800ad4e <_svfiprintf_r+0x1b2>
 800ad06:	9b03      	ldr	r3, [sp, #12]
 800ad08:	3307      	adds	r3, #7
 800ad0a:	f023 0307 	bic.w	r3, r3, #7
 800ad0e:	3308      	adds	r3, #8
 800ad10:	9303      	str	r3, [sp, #12]
 800ad12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad14:	4433      	add	r3, r6
 800ad16:	9309      	str	r3, [sp, #36]	; 0x24
 800ad18:	e767      	b.n	800abea <_svfiprintf_r+0x4e>
 800ad1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad1e:	460c      	mov	r4, r1
 800ad20:	2001      	movs	r0, #1
 800ad22:	e7a5      	b.n	800ac70 <_svfiprintf_r+0xd4>
 800ad24:	2300      	movs	r3, #0
 800ad26:	3401      	adds	r4, #1
 800ad28:	9305      	str	r3, [sp, #20]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	f04f 0c0a 	mov.w	ip, #10
 800ad30:	4620      	mov	r0, r4
 800ad32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad36:	3a30      	subs	r2, #48	; 0x30
 800ad38:	2a09      	cmp	r2, #9
 800ad3a:	d903      	bls.n	800ad44 <_svfiprintf_r+0x1a8>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d0c5      	beq.n	800accc <_svfiprintf_r+0x130>
 800ad40:	9105      	str	r1, [sp, #20]
 800ad42:	e7c3      	b.n	800accc <_svfiprintf_r+0x130>
 800ad44:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad48:	4604      	mov	r4, r0
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e7f0      	b.n	800ad30 <_svfiprintf_r+0x194>
 800ad4e:	ab03      	add	r3, sp, #12
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	462a      	mov	r2, r5
 800ad54:	4b0f      	ldr	r3, [pc, #60]	; (800ad94 <_svfiprintf_r+0x1f8>)
 800ad56:	a904      	add	r1, sp, #16
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f7fe f81b 	bl	8008d94 <_printf_float>
 800ad5e:	1c42      	adds	r2, r0, #1
 800ad60:	4606      	mov	r6, r0
 800ad62:	d1d6      	bne.n	800ad12 <_svfiprintf_r+0x176>
 800ad64:	89ab      	ldrh	r3, [r5, #12]
 800ad66:	065b      	lsls	r3, r3, #25
 800ad68:	f53f af2c 	bmi.w	800abc4 <_svfiprintf_r+0x28>
 800ad6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad6e:	b01d      	add	sp, #116	; 0x74
 800ad70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad74:	ab03      	add	r3, sp, #12
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	462a      	mov	r2, r5
 800ad7a:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <_svfiprintf_r+0x1f8>)
 800ad7c:	a904      	add	r1, sp, #16
 800ad7e:	4638      	mov	r0, r7
 800ad80:	f7fe faae 	bl	80092e0 <_printf_i>
 800ad84:	e7eb      	b.n	800ad5e <_svfiprintf_r+0x1c2>
 800ad86:	bf00      	nop
 800ad88:	0800c184 	.word	0x0800c184
 800ad8c:	0800c18e 	.word	0x0800c18e
 800ad90:	08008d95 	.word	0x08008d95
 800ad94:	0800aae5 	.word	0x0800aae5
 800ad98:	0800c18a 	.word	0x0800c18a

0800ad9c <_sbrk_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4d06      	ldr	r5, [pc, #24]	; (800adb8 <_sbrk_r+0x1c>)
 800ada0:	2300      	movs	r3, #0
 800ada2:	4604      	mov	r4, r0
 800ada4:	4608      	mov	r0, r1
 800ada6:	602b      	str	r3, [r5, #0]
 800ada8:	f7fd fea6 	bl	8008af8 <_sbrk>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	d102      	bne.n	800adb6 <_sbrk_r+0x1a>
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	b103      	cbz	r3, 800adb6 <_sbrk_r+0x1a>
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	bd38      	pop	{r3, r4, r5, pc}
 800adb8:	200138e4 	.word	0x200138e4

0800adbc <__assert_func>:
 800adbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adbe:	4614      	mov	r4, r2
 800adc0:	461a      	mov	r2, r3
 800adc2:	4b09      	ldr	r3, [pc, #36]	; (800ade8 <__assert_func+0x2c>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4605      	mov	r5, r0
 800adc8:	68d8      	ldr	r0, [r3, #12]
 800adca:	b14c      	cbz	r4, 800ade0 <__assert_func+0x24>
 800adcc:	4b07      	ldr	r3, [pc, #28]	; (800adec <__assert_func+0x30>)
 800adce:	9100      	str	r1, [sp, #0]
 800add0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800add4:	4906      	ldr	r1, [pc, #24]	; (800adf0 <__assert_func+0x34>)
 800add6:	462b      	mov	r3, r5
 800add8:	f000 f80e 	bl	800adf8 <fiprintf>
 800addc:	f000 faa4 	bl	800b328 <abort>
 800ade0:	4b04      	ldr	r3, [pc, #16]	; (800adf4 <__assert_func+0x38>)
 800ade2:	461c      	mov	r4, r3
 800ade4:	e7f3      	b.n	800adce <__assert_func+0x12>
 800ade6:	bf00      	nop
 800ade8:	20000038 	.word	0x20000038
 800adec:	0800c195 	.word	0x0800c195
 800adf0:	0800c1a2 	.word	0x0800c1a2
 800adf4:	0800c1d0 	.word	0x0800c1d0

0800adf8 <fiprintf>:
 800adf8:	b40e      	push	{r1, r2, r3}
 800adfa:	b503      	push	{r0, r1, lr}
 800adfc:	4601      	mov	r1, r0
 800adfe:	ab03      	add	r3, sp, #12
 800ae00:	4805      	ldr	r0, [pc, #20]	; (800ae18 <fiprintf+0x20>)
 800ae02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae06:	6800      	ldr	r0, [r0, #0]
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	f000 f88f 	bl	800af2c <_vfiprintf_r>
 800ae0e:	b002      	add	sp, #8
 800ae10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae14:	b003      	add	sp, #12
 800ae16:	4770      	bx	lr
 800ae18:	20000038 	.word	0x20000038

0800ae1c <__ascii_mbtowc>:
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	b901      	cbnz	r1, 800ae22 <__ascii_mbtowc+0x6>
 800ae20:	a901      	add	r1, sp, #4
 800ae22:	b142      	cbz	r2, 800ae36 <__ascii_mbtowc+0x1a>
 800ae24:	b14b      	cbz	r3, 800ae3a <__ascii_mbtowc+0x1e>
 800ae26:	7813      	ldrb	r3, [r2, #0]
 800ae28:	600b      	str	r3, [r1, #0]
 800ae2a:	7812      	ldrb	r2, [r2, #0]
 800ae2c:	1e10      	subs	r0, r2, #0
 800ae2e:	bf18      	it	ne
 800ae30:	2001      	movne	r0, #1
 800ae32:	b002      	add	sp, #8
 800ae34:	4770      	bx	lr
 800ae36:	4610      	mov	r0, r2
 800ae38:	e7fb      	b.n	800ae32 <__ascii_mbtowc+0x16>
 800ae3a:	f06f 0001 	mvn.w	r0, #1
 800ae3e:	e7f8      	b.n	800ae32 <__ascii_mbtowc+0x16>

0800ae40 <memmove>:
 800ae40:	4288      	cmp	r0, r1
 800ae42:	b510      	push	{r4, lr}
 800ae44:	eb01 0402 	add.w	r4, r1, r2
 800ae48:	d902      	bls.n	800ae50 <memmove+0x10>
 800ae4a:	4284      	cmp	r4, r0
 800ae4c:	4623      	mov	r3, r4
 800ae4e:	d807      	bhi.n	800ae60 <memmove+0x20>
 800ae50:	1e43      	subs	r3, r0, #1
 800ae52:	42a1      	cmp	r1, r4
 800ae54:	d008      	beq.n	800ae68 <memmove+0x28>
 800ae56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae5e:	e7f8      	b.n	800ae52 <memmove+0x12>
 800ae60:	4402      	add	r2, r0
 800ae62:	4601      	mov	r1, r0
 800ae64:	428a      	cmp	r2, r1
 800ae66:	d100      	bne.n	800ae6a <memmove+0x2a>
 800ae68:	bd10      	pop	{r4, pc}
 800ae6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae72:	e7f7      	b.n	800ae64 <memmove+0x24>

0800ae74 <__malloc_lock>:
 800ae74:	4801      	ldr	r0, [pc, #4]	; (800ae7c <__malloc_lock+0x8>)
 800ae76:	f000 bc17 	b.w	800b6a8 <__retarget_lock_acquire_recursive>
 800ae7a:	bf00      	nop
 800ae7c:	200138ec 	.word	0x200138ec

0800ae80 <__malloc_unlock>:
 800ae80:	4801      	ldr	r0, [pc, #4]	; (800ae88 <__malloc_unlock+0x8>)
 800ae82:	f000 bc12 	b.w	800b6aa <__retarget_lock_release_recursive>
 800ae86:	bf00      	nop
 800ae88:	200138ec 	.word	0x200138ec

0800ae8c <_realloc_r>:
 800ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8e:	4607      	mov	r7, r0
 800ae90:	4614      	mov	r4, r2
 800ae92:	460e      	mov	r6, r1
 800ae94:	b921      	cbnz	r1, 800aea0 <_realloc_r+0x14>
 800ae96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	f7ff bdc8 	b.w	800aa30 <_malloc_r>
 800aea0:	b922      	cbnz	r2, 800aeac <_realloc_r+0x20>
 800aea2:	f7ff fd75 	bl	800a990 <_free_r>
 800aea6:	4625      	mov	r5, r4
 800aea8:	4628      	mov	r0, r5
 800aeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeac:	f000 fc62 	bl	800b774 <_malloc_usable_size_r>
 800aeb0:	42a0      	cmp	r0, r4
 800aeb2:	d20f      	bcs.n	800aed4 <_realloc_r+0x48>
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	f7ff fdba 	bl	800aa30 <_malloc_r>
 800aebc:	4605      	mov	r5, r0
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d0f2      	beq.n	800aea8 <_realloc_r+0x1c>
 800aec2:	4631      	mov	r1, r6
 800aec4:	4622      	mov	r2, r4
 800aec6:	f7fd feaf 	bl	8008c28 <memcpy>
 800aeca:	4631      	mov	r1, r6
 800aecc:	4638      	mov	r0, r7
 800aece:	f7ff fd5f 	bl	800a990 <_free_r>
 800aed2:	e7e9      	b.n	800aea8 <_realloc_r+0x1c>
 800aed4:	4635      	mov	r5, r6
 800aed6:	e7e7      	b.n	800aea8 <_realloc_r+0x1c>

0800aed8 <__sfputc_r>:
 800aed8:	6893      	ldr	r3, [r2, #8]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	2b00      	cmp	r3, #0
 800aede:	b410      	push	{r4}
 800aee0:	6093      	str	r3, [r2, #8]
 800aee2:	da08      	bge.n	800aef6 <__sfputc_r+0x1e>
 800aee4:	6994      	ldr	r4, [r2, #24]
 800aee6:	42a3      	cmp	r3, r4
 800aee8:	db01      	blt.n	800aeee <__sfputc_r+0x16>
 800aeea:	290a      	cmp	r1, #10
 800aeec:	d103      	bne.n	800aef6 <__sfputc_r+0x1e>
 800aeee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aef2:	f000 b94b 	b.w	800b18c <__swbuf_r>
 800aef6:	6813      	ldr	r3, [r2, #0]
 800aef8:	1c58      	adds	r0, r3, #1
 800aefa:	6010      	str	r0, [r2, #0]
 800aefc:	7019      	strb	r1, [r3, #0]
 800aefe:	4608      	mov	r0, r1
 800af00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <__sfputs_r>:
 800af06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af08:	4606      	mov	r6, r0
 800af0a:	460f      	mov	r7, r1
 800af0c:	4614      	mov	r4, r2
 800af0e:	18d5      	adds	r5, r2, r3
 800af10:	42ac      	cmp	r4, r5
 800af12:	d101      	bne.n	800af18 <__sfputs_r+0x12>
 800af14:	2000      	movs	r0, #0
 800af16:	e007      	b.n	800af28 <__sfputs_r+0x22>
 800af18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1c:	463a      	mov	r2, r7
 800af1e:	4630      	mov	r0, r6
 800af20:	f7ff ffda 	bl	800aed8 <__sfputc_r>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d1f3      	bne.n	800af10 <__sfputs_r+0xa>
 800af28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af2c <_vfiprintf_r>:
 800af2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af30:	460d      	mov	r5, r1
 800af32:	b09d      	sub	sp, #116	; 0x74
 800af34:	4614      	mov	r4, r2
 800af36:	4698      	mov	r8, r3
 800af38:	4606      	mov	r6, r0
 800af3a:	b118      	cbz	r0, 800af44 <_vfiprintf_r+0x18>
 800af3c:	6983      	ldr	r3, [r0, #24]
 800af3e:	b90b      	cbnz	r3, 800af44 <_vfiprintf_r+0x18>
 800af40:	f000 fb14 	bl	800b56c <__sinit>
 800af44:	4b89      	ldr	r3, [pc, #548]	; (800b16c <_vfiprintf_r+0x240>)
 800af46:	429d      	cmp	r5, r3
 800af48:	d11b      	bne.n	800af82 <_vfiprintf_r+0x56>
 800af4a:	6875      	ldr	r5, [r6, #4]
 800af4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af4e:	07d9      	lsls	r1, r3, #31
 800af50:	d405      	bmi.n	800af5e <_vfiprintf_r+0x32>
 800af52:	89ab      	ldrh	r3, [r5, #12]
 800af54:	059a      	lsls	r2, r3, #22
 800af56:	d402      	bmi.n	800af5e <_vfiprintf_r+0x32>
 800af58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af5a:	f000 fba5 	bl	800b6a8 <__retarget_lock_acquire_recursive>
 800af5e:	89ab      	ldrh	r3, [r5, #12]
 800af60:	071b      	lsls	r3, r3, #28
 800af62:	d501      	bpl.n	800af68 <_vfiprintf_r+0x3c>
 800af64:	692b      	ldr	r3, [r5, #16]
 800af66:	b9eb      	cbnz	r3, 800afa4 <_vfiprintf_r+0x78>
 800af68:	4629      	mov	r1, r5
 800af6a:	4630      	mov	r0, r6
 800af6c:	f000 f96e 	bl	800b24c <__swsetup_r>
 800af70:	b1c0      	cbz	r0, 800afa4 <_vfiprintf_r+0x78>
 800af72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af74:	07dc      	lsls	r4, r3, #31
 800af76:	d50e      	bpl.n	800af96 <_vfiprintf_r+0x6a>
 800af78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af7c:	b01d      	add	sp, #116	; 0x74
 800af7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af82:	4b7b      	ldr	r3, [pc, #492]	; (800b170 <_vfiprintf_r+0x244>)
 800af84:	429d      	cmp	r5, r3
 800af86:	d101      	bne.n	800af8c <_vfiprintf_r+0x60>
 800af88:	68b5      	ldr	r5, [r6, #8]
 800af8a:	e7df      	b.n	800af4c <_vfiprintf_r+0x20>
 800af8c:	4b79      	ldr	r3, [pc, #484]	; (800b174 <_vfiprintf_r+0x248>)
 800af8e:	429d      	cmp	r5, r3
 800af90:	bf08      	it	eq
 800af92:	68f5      	ldreq	r5, [r6, #12]
 800af94:	e7da      	b.n	800af4c <_vfiprintf_r+0x20>
 800af96:	89ab      	ldrh	r3, [r5, #12]
 800af98:	0598      	lsls	r0, r3, #22
 800af9a:	d4ed      	bmi.n	800af78 <_vfiprintf_r+0x4c>
 800af9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af9e:	f000 fb84 	bl	800b6aa <__retarget_lock_release_recursive>
 800afa2:	e7e9      	b.n	800af78 <_vfiprintf_r+0x4c>
 800afa4:	2300      	movs	r3, #0
 800afa6:	9309      	str	r3, [sp, #36]	; 0x24
 800afa8:	2320      	movs	r3, #32
 800afaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afae:	f8cd 800c 	str.w	r8, [sp, #12]
 800afb2:	2330      	movs	r3, #48	; 0x30
 800afb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b178 <_vfiprintf_r+0x24c>
 800afb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afbc:	f04f 0901 	mov.w	r9, #1
 800afc0:	4623      	mov	r3, r4
 800afc2:	469a      	mov	sl, r3
 800afc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afc8:	b10a      	cbz	r2, 800afce <_vfiprintf_r+0xa2>
 800afca:	2a25      	cmp	r2, #37	; 0x25
 800afcc:	d1f9      	bne.n	800afc2 <_vfiprintf_r+0x96>
 800afce:	ebba 0b04 	subs.w	fp, sl, r4
 800afd2:	d00b      	beq.n	800afec <_vfiprintf_r+0xc0>
 800afd4:	465b      	mov	r3, fp
 800afd6:	4622      	mov	r2, r4
 800afd8:	4629      	mov	r1, r5
 800afda:	4630      	mov	r0, r6
 800afdc:	f7ff ff93 	bl	800af06 <__sfputs_r>
 800afe0:	3001      	adds	r0, #1
 800afe2:	f000 80aa 	beq.w	800b13a <_vfiprintf_r+0x20e>
 800afe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afe8:	445a      	add	r2, fp
 800afea:	9209      	str	r2, [sp, #36]	; 0x24
 800afec:	f89a 3000 	ldrb.w	r3, [sl]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 80a2 	beq.w	800b13a <_vfiprintf_r+0x20e>
 800aff6:	2300      	movs	r3, #0
 800aff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800affc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b000:	f10a 0a01 	add.w	sl, sl, #1
 800b004:	9304      	str	r3, [sp, #16]
 800b006:	9307      	str	r3, [sp, #28]
 800b008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b00c:	931a      	str	r3, [sp, #104]	; 0x68
 800b00e:	4654      	mov	r4, sl
 800b010:	2205      	movs	r2, #5
 800b012:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b016:	4858      	ldr	r0, [pc, #352]	; (800b178 <_vfiprintf_r+0x24c>)
 800b018:	f7f5 f942 	bl	80002a0 <memchr>
 800b01c:	9a04      	ldr	r2, [sp, #16]
 800b01e:	b9d8      	cbnz	r0, 800b058 <_vfiprintf_r+0x12c>
 800b020:	06d1      	lsls	r1, r2, #27
 800b022:	bf44      	itt	mi
 800b024:	2320      	movmi	r3, #32
 800b026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b02a:	0713      	lsls	r3, r2, #28
 800b02c:	bf44      	itt	mi
 800b02e:	232b      	movmi	r3, #43	; 0x2b
 800b030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b034:	f89a 3000 	ldrb.w	r3, [sl]
 800b038:	2b2a      	cmp	r3, #42	; 0x2a
 800b03a:	d015      	beq.n	800b068 <_vfiprintf_r+0x13c>
 800b03c:	9a07      	ldr	r2, [sp, #28]
 800b03e:	4654      	mov	r4, sl
 800b040:	2000      	movs	r0, #0
 800b042:	f04f 0c0a 	mov.w	ip, #10
 800b046:	4621      	mov	r1, r4
 800b048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b04c:	3b30      	subs	r3, #48	; 0x30
 800b04e:	2b09      	cmp	r3, #9
 800b050:	d94e      	bls.n	800b0f0 <_vfiprintf_r+0x1c4>
 800b052:	b1b0      	cbz	r0, 800b082 <_vfiprintf_r+0x156>
 800b054:	9207      	str	r2, [sp, #28]
 800b056:	e014      	b.n	800b082 <_vfiprintf_r+0x156>
 800b058:	eba0 0308 	sub.w	r3, r0, r8
 800b05c:	fa09 f303 	lsl.w	r3, r9, r3
 800b060:	4313      	orrs	r3, r2
 800b062:	9304      	str	r3, [sp, #16]
 800b064:	46a2      	mov	sl, r4
 800b066:	e7d2      	b.n	800b00e <_vfiprintf_r+0xe2>
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	1d19      	adds	r1, r3, #4
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	9103      	str	r1, [sp, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	bfbb      	ittet	lt
 800b074:	425b      	neglt	r3, r3
 800b076:	f042 0202 	orrlt.w	r2, r2, #2
 800b07a:	9307      	strge	r3, [sp, #28]
 800b07c:	9307      	strlt	r3, [sp, #28]
 800b07e:	bfb8      	it	lt
 800b080:	9204      	strlt	r2, [sp, #16]
 800b082:	7823      	ldrb	r3, [r4, #0]
 800b084:	2b2e      	cmp	r3, #46	; 0x2e
 800b086:	d10c      	bne.n	800b0a2 <_vfiprintf_r+0x176>
 800b088:	7863      	ldrb	r3, [r4, #1]
 800b08a:	2b2a      	cmp	r3, #42	; 0x2a
 800b08c:	d135      	bne.n	800b0fa <_vfiprintf_r+0x1ce>
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	1d1a      	adds	r2, r3, #4
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	9203      	str	r2, [sp, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	bfb8      	it	lt
 800b09a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b09e:	3402      	adds	r4, #2
 800b0a0:	9305      	str	r3, [sp, #20]
 800b0a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b188 <_vfiprintf_r+0x25c>
 800b0a6:	7821      	ldrb	r1, [r4, #0]
 800b0a8:	2203      	movs	r2, #3
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	f7f5 f8f8 	bl	80002a0 <memchr>
 800b0b0:	b140      	cbz	r0, 800b0c4 <_vfiprintf_r+0x198>
 800b0b2:	2340      	movs	r3, #64	; 0x40
 800b0b4:	eba0 000a 	sub.w	r0, r0, sl
 800b0b8:	fa03 f000 	lsl.w	r0, r3, r0
 800b0bc:	9b04      	ldr	r3, [sp, #16]
 800b0be:	4303      	orrs	r3, r0
 800b0c0:	3401      	adds	r4, #1
 800b0c2:	9304      	str	r3, [sp, #16]
 800b0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c8:	482c      	ldr	r0, [pc, #176]	; (800b17c <_vfiprintf_r+0x250>)
 800b0ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0ce:	2206      	movs	r2, #6
 800b0d0:	f7f5 f8e6 	bl	80002a0 <memchr>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d03f      	beq.n	800b158 <_vfiprintf_r+0x22c>
 800b0d8:	4b29      	ldr	r3, [pc, #164]	; (800b180 <_vfiprintf_r+0x254>)
 800b0da:	bb1b      	cbnz	r3, 800b124 <_vfiprintf_r+0x1f8>
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	3307      	adds	r3, #7
 800b0e0:	f023 0307 	bic.w	r3, r3, #7
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ea:	443b      	add	r3, r7
 800b0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ee:	e767      	b.n	800afc0 <_vfiprintf_r+0x94>
 800b0f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	e7a5      	b.n	800b046 <_vfiprintf_r+0x11a>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	3401      	adds	r4, #1
 800b0fe:	9305      	str	r3, [sp, #20]
 800b100:	4619      	mov	r1, r3
 800b102:	f04f 0c0a 	mov.w	ip, #10
 800b106:	4620      	mov	r0, r4
 800b108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b10c:	3a30      	subs	r2, #48	; 0x30
 800b10e:	2a09      	cmp	r2, #9
 800b110:	d903      	bls.n	800b11a <_vfiprintf_r+0x1ee>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0c5      	beq.n	800b0a2 <_vfiprintf_r+0x176>
 800b116:	9105      	str	r1, [sp, #20]
 800b118:	e7c3      	b.n	800b0a2 <_vfiprintf_r+0x176>
 800b11a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b11e:	4604      	mov	r4, r0
 800b120:	2301      	movs	r3, #1
 800b122:	e7f0      	b.n	800b106 <_vfiprintf_r+0x1da>
 800b124:	ab03      	add	r3, sp, #12
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	462a      	mov	r2, r5
 800b12a:	4b16      	ldr	r3, [pc, #88]	; (800b184 <_vfiprintf_r+0x258>)
 800b12c:	a904      	add	r1, sp, #16
 800b12e:	4630      	mov	r0, r6
 800b130:	f7fd fe30 	bl	8008d94 <_printf_float>
 800b134:	4607      	mov	r7, r0
 800b136:	1c78      	adds	r0, r7, #1
 800b138:	d1d6      	bne.n	800b0e8 <_vfiprintf_r+0x1bc>
 800b13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b13c:	07d9      	lsls	r1, r3, #31
 800b13e:	d405      	bmi.n	800b14c <_vfiprintf_r+0x220>
 800b140:	89ab      	ldrh	r3, [r5, #12]
 800b142:	059a      	lsls	r2, r3, #22
 800b144:	d402      	bmi.n	800b14c <_vfiprintf_r+0x220>
 800b146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b148:	f000 faaf 	bl	800b6aa <__retarget_lock_release_recursive>
 800b14c:	89ab      	ldrh	r3, [r5, #12]
 800b14e:	065b      	lsls	r3, r3, #25
 800b150:	f53f af12 	bmi.w	800af78 <_vfiprintf_r+0x4c>
 800b154:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b156:	e711      	b.n	800af7c <_vfiprintf_r+0x50>
 800b158:	ab03      	add	r3, sp, #12
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	462a      	mov	r2, r5
 800b15e:	4b09      	ldr	r3, [pc, #36]	; (800b184 <_vfiprintf_r+0x258>)
 800b160:	a904      	add	r1, sp, #16
 800b162:	4630      	mov	r0, r6
 800b164:	f7fe f8bc 	bl	80092e0 <_printf_i>
 800b168:	e7e4      	b.n	800b134 <_vfiprintf_r+0x208>
 800b16a:	bf00      	nop
 800b16c:	0800c2fc 	.word	0x0800c2fc
 800b170:	0800c31c 	.word	0x0800c31c
 800b174:	0800c2dc 	.word	0x0800c2dc
 800b178:	0800c184 	.word	0x0800c184
 800b17c:	0800c18e 	.word	0x0800c18e
 800b180:	08008d95 	.word	0x08008d95
 800b184:	0800af07 	.word	0x0800af07
 800b188:	0800c18a 	.word	0x0800c18a

0800b18c <__swbuf_r>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	460e      	mov	r6, r1
 800b190:	4614      	mov	r4, r2
 800b192:	4605      	mov	r5, r0
 800b194:	b118      	cbz	r0, 800b19e <__swbuf_r+0x12>
 800b196:	6983      	ldr	r3, [r0, #24]
 800b198:	b90b      	cbnz	r3, 800b19e <__swbuf_r+0x12>
 800b19a:	f000 f9e7 	bl	800b56c <__sinit>
 800b19e:	4b21      	ldr	r3, [pc, #132]	; (800b224 <__swbuf_r+0x98>)
 800b1a0:	429c      	cmp	r4, r3
 800b1a2:	d12b      	bne.n	800b1fc <__swbuf_r+0x70>
 800b1a4:	686c      	ldr	r4, [r5, #4]
 800b1a6:	69a3      	ldr	r3, [r4, #24]
 800b1a8:	60a3      	str	r3, [r4, #8]
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	071a      	lsls	r2, r3, #28
 800b1ae:	d52f      	bpl.n	800b210 <__swbuf_r+0x84>
 800b1b0:	6923      	ldr	r3, [r4, #16]
 800b1b2:	b36b      	cbz	r3, 800b210 <__swbuf_r+0x84>
 800b1b4:	6923      	ldr	r3, [r4, #16]
 800b1b6:	6820      	ldr	r0, [r4, #0]
 800b1b8:	1ac0      	subs	r0, r0, r3
 800b1ba:	6963      	ldr	r3, [r4, #20]
 800b1bc:	b2f6      	uxtb	r6, r6
 800b1be:	4283      	cmp	r3, r0
 800b1c0:	4637      	mov	r7, r6
 800b1c2:	dc04      	bgt.n	800b1ce <__swbuf_r+0x42>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 f93c 	bl	800b444 <_fflush_r>
 800b1cc:	bb30      	cbnz	r0, 800b21c <__swbuf_r+0x90>
 800b1ce:	68a3      	ldr	r3, [r4, #8]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	60a3      	str	r3, [r4, #8]
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	6022      	str	r2, [r4, #0]
 800b1da:	701e      	strb	r6, [r3, #0]
 800b1dc:	6963      	ldr	r3, [r4, #20]
 800b1de:	3001      	adds	r0, #1
 800b1e0:	4283      	cmp	r3, r0
 800b1e2:	d004      	beq.n	800b1ee <__swbuf_r+0x62>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	07db      	lsls	r3, r3, #31
 800b1e8:	d506      	bpl.n	800b1f8 <__swbuf_r+0x6c>
 800b1ea:	2e0a      	cmp	r6, #10
 800b1ec:	d104      	bne.n	800b1f8 <__swbuf_r+0x6c>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f000 f927 	bl	800b444 <_fflush_r>
 800b1f6:	b988      	cbnz	r0, 800b21c <__swbuf_r+0x90>
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <__swbuf_r+0x9c>)
 800b1fe:	429c      	cmp	r4, r3
 800b200:	d101      	bne.n	800b206 <__swbuf_r+0x7a>
 800b202:	68ac      	ldr	r4, [r5, #8]
 800b204:	e7cf      	b.n	800b1a6 <__swbuf_r+0x1a>
 800b206:	4b09      	ldr	r3, [pc, #36]	; (800b22c <__swbuf_r+0xa0>)
 800b208:	429c      	cmp	r4, r3
 800b20a:	bf08      	it	eq
 800b20c:	68ec      	ldreq	r4, [r5, #12]
 800b20e:	e7ca      	b.n	800b1a6 <__swbuf_r+0x1a>
 800b210:	4621      	mov	r1, r4
 800b212:	4628      	mov	r0, r5
 800b214:	f000 f81a 	bl	800b24c <__swsetup_r>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d0cb      	beq.n	800b1b4 <__swbuf_r+0x28>
 800b21c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b220:	e7ea      	b.n	800b1f8 <__swbuf_r+0x6c>
 800b222:	bf00      	nop
 800b224:	0800c2fc 	.word	0x0800c2fc
 800b228:	0800c31c 	.word	0x0800c31c
 800b22c:	0800c2dc 	.word	0x0800c2dc

0800b230 <__ascii_wctomb>:
 800b230:	b149      	cbz	r1, 800b246 <__ascii_wctomb+0x16>
 800b232:	2aff      	cmp	r2, #255	; 0xff
 800b234:	bf85      	ittet	hi
 800b236:	238a      	movhi	r3, #138	; 0x8a
 800b238:	6003      	strhi	r3, [r0, #0]
 800b23a:	700a      	strbls	r2, [r1, #0]
 800b23c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b240:	bf98      	it	ls
 800b242:	2001      	movls	r0, #1
 800b244:	4770      	bx	lr
 800b246:	4608      	mov	r0, r1
 800b248:	4770      	bx	lr
	...

0800b24c <__swsetup_r>:
 800b24c:	4b32      	ldr	r3, [pc, #200]	; (800b318 <__swsetup_r+0xcc>)
 800b24e:	b570      	push	{r4, r5, r6, lr}
 800b250:	681d      	ldr	r5, [r3, #0]
 800b252:	4606      	mov	r6, r0
 800b254:	460c      	mov	r4, r1
 800b256:	b125      	cbz	r5, 800b262 <__swsetup_r+0x16>
 800b258:	69ab      	ldr	r3, [r5, #24]
 800b25a:	b913      	cbnz	r3, 800b262 <__swsetup_r+0x16>
 800b25c:	4628      	mov	r0, r5
 800b25e:	f000 f985 	bl	800b56c <__sinit>
 800b262:	4b2e      	ldr	r3, [pc, #184]	; (800b31c <__swsetup_r+0xd0>)
 800b264:	429c      	cmp	r4, r3
 800b266:	d10f      	bne.n	800b288 <__swsetup_r+0x3c>
 800b268:	686c      	ldr	r4, [r5, #4]
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b270:	0719      	lsls	r1, r3, #28
 800b272:	d42c      	bmi.n	800b2ce <__swsetup_r+0x82>
 800b274:	06dd      	lsls	r5, r3, #27
 800b276:	d411      	bmi.n	800b29c <__swsetup_r+0x50>
 800b278:	2309      	movs	r3, #9
 800b27a:	6033      	str	r3, [r6, #0]
 800b27c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b280:	81a3      	strh	r3, [r4, #12]
 800b282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b286:	e03e      	b.n	800b306 <__swsetup_r+0xba>
 800b288:	4b25      	ldr	r3, [pc, #148]	; (800b320 <__swsetup_r+0xd4>)
 800b28a:	429c      	cmp	r4, r3
 800b28c:	d101      	bne.n	800b292 <__swsetup_r+0x46>
 800b28e:	68ac      	ldr	r4, [r5, #8]
 800b290:	e7eb      	b.n	800b26a <__swsetup_r+0x1e>
 800b292:	4b24      	ldr	r3, [pc, #144]	; (800b324 <__swsetup_r+0xd8>)
 800b294:	429c      	cmp	r4, r3
 800b296:	bf08      	it	eq
 800b298:	68ec      	ldreq	r4, [r5, #12]
 800b29a:	e7e6      	b.n	800b26a <__swsetup_r+0x1e>
 800b29c:	0758      	lsls	r0, r3, #29
 800b29e:	d512      	bpl.n	800b2c6 <__swsetup_r+0x7a>
 800b2a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2a2:	b141      	cbz	r1, 800b2b6 <__swsetup_r+0x6a>
 800b2a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2a8:	4299      	cmp	r1, r3
 800b2aa:	d002      	beq.n	800b2b2 <__swsetup_r+0x66>
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7ff fb6f 	bl	800a990 <_free_r>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	6363      	str	r3, [r4, #52]	; 0x34
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	6063      	str	r3, [r4, #4]
 800b2c2:	6923      	ldr	r3, [r4, #16]
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	f043 0308 	orr.w	r3, r3, #8
 800b2cc:	81a3      	strh	r3, [r4, #12]
 800b2ce:	6923      	ldr	r3, [r4, #16]
 800b2d0:	b94b      	cbnz	r3, 800b2e6 <__swsetup_r+0x9a>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2dc:	d003      	beq.n	800b2e6 <__swsetup_r+0x9a>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f000 fa07 	bl	800b6f4 <__smakebuf_r>
 800b2e6:	89a0      	ldrh	r0, [r4, #12]
 800b2e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2ec:	f010 0301 	ands.w	r3, r0, #1
 800b2f0:	d00a      	beq.n	800b308 <__swsetup_r+0xbc>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	60a3      	str	r3, [r4, #8]
 800b2f6:	6963      	ldr	r3, [r4, #20]
 800b2f8:	425b      	negs	r3, r3
 800b2fa:	61a3      	str	r3, [r4, #24]
 800b2fc:	6923      	ldr	r3, [r4, #16]
 800b2fe:	b943      	cbnz	r3, 800b312 <__swsetup_r+0xc6>
 800b300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b304:	d1ba      	bne.n	800b27c <__swsetup_r+0x30>
 800b306:	bd70      	pop	{r4, r5, r6, pc}
 800b308:	0781      	lsls	r1, r0, #30
 800b30a:	bf58      	it	pl
 800b30c:	6963      	ldrpl	r3, [r4, #20]
 800b30e:	60a3      	str	r3, [r4, #8]
 800b310:	e7f4      	b.n	800b2fc <__swsetup_r+0xb0>
 800b312:	2000      	movs	r0, #0
 800b314:	e7f7      	b.n	800b306 <__swsetup_r+0xba>
 800b316:	bf00      	nop
 800b318:	20000038 	.word	0x20000038
 800b31c:	0800c2fc 	.word	0x0800c2fc
 800b320:	0800c31c 	.word	0x0800c31c
 800b324:	0800c2dc 	.word	0x0800c2dc

0800b328 <abort>:
 800b328:	b508      	push	{r3, lr}
 800b32a:	2006      	movs	r0, #6
 800b32c:	f000 fa52 	bl	800b7d4 <raise>
 800b330:	2001      	movs	r0, #1
 800b332:	f7fd fb85 	bl	8008a40 <_exit>
	...

0800b338 <__sflush_r>:
 800b338:	898a      	ldrh	r2, [r1, #12]
 800b33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b33e:	4605      	mov	r5, r0
 800b340:	0710      	lsls	r0, r2, #28
 800b342:	460c      	mov	r4, r1
 800b344:	d458      	bmi.n	800b3f8 <__sflush_r+0xc0>
 800b346:	684b      	ldr	r3, [r1, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	dc05      	bgt.n	800b358 <__sflush_r+0x20>
 800b34c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	dc02      	bgt.n	800b358 <__sflush_r+0x20>
 800b352:	2000      	movs	r0, #0
 800b354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b35a:	2e00      	cmp	r6, #0
 800b35c:	d0f9      	beq.n	800b352 <__sflush_r+0x1a>
 800b35e:	2300      	movs	r3, #0
 800b360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b364:	682f      	ldr	r7, [r5, #0]
 800b366:	602b      	str	r3, [r5, #0]
 800b368:	d032      	beq.n	800b3d0 <__sflush_r+0x98>
 800b36a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	075a      	lsls	r2, r3, #29
 800b370:	d505      	bpl.n	800b37e <__sflush_r+0x46>
 800b372:	6863      	ldr	r3, [r4, #4]
 800b374:	1ac0      	subs	r0, r0, r3
 800b376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b378:	b10b      	cbz	r3, 800b37e <__sflush_r+0x46>
 800b37a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b37c:	1ac0      	subs	r0, r0, r3
 800b37e:	2300      	movs	r3, #0
 800b380:	4602      	mov	r2, r0
 800b382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b384:	6a21      	ldr	r1, [r4, #32]
 800b386:	4628      	mov	r0, r5
 800b388:	47b0      	blx	r6
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	d106      	bne.n	800b39e <__sflush_r+0x66>
 800b390:	6829      	ldr	r1, [r5, #0]
 800b392:	291d      	cmp	r1, #29
 800b394:	d82c      	bhi.n	800b3f0 <__sflush_r+0xb8>
 800b396:	4a2a      	ldr	r2, [pc, #168]	; (800b440 <__sflush_r+0x108>)
 800b398:	40ca      	lsrs	r2, r1
 800b39a:	07d6      	lsls	r6, r2, #31
 800b39c:	d528      	bpl.n	800b3f0 <__sflush_r+0xb8>
 800b39e:	2200      	movs	r2, #0
 800b3a0:	6062      	str	r2, [r4, #4]
 800b3a2:	04d9      	lsls	r1, r3, #19
 800b3a4:	6922      	ldr	r2, [r4, #16]
 800b3a6:	6022      	str	r2, [r4, #0]
 800b3a8:	d504      	bpl.n	800b3b4 <__sflush_r+0x7c>
 800b3aa:	1c42      	adds	r2, r0, #1
 800b3ac:	d101      	bne.n	800b3b2 <__sflush_r+0x7a>
 800b3ae:	682b      	ldr	r3, [r5, #0]
 800b3b0:	b903      	cbnz	r3, 800b3b4 <__sflush_r+0x7c>
 800b3b2:	6560      	str	r0, [r4, #84]	; 0x54
 800b3b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3b6:	602f      	str	r7, [r5, #0]
 800b3b8:	2900      	cmp	r1, #0
 800b3ba:	d0ca      	beq.n	800b352 <__sflush_r+0x1a>
 800b3bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3c0:	4299      	cmp	r1, r3
 800b3c2:	d002      	beq.n	800b3ca <__sflush_r+0x92>
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f7ff fae3 	bl	800a990 <_free_r>
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	6360      	str	r0, [r4, #52]	; 0x34
 800b3ce:	e7c1      	b.n	800b354 <__sflush_r+0x1c>
 800b3d0:	6a21      	ldr	r1, [r4, #32]
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	47b0      	blx	r6
 800b3d8:	1c41      	adds	r1, r0, #1
 800b3da:	d1c7      	bne.n	800b36c <__sflush_r+0x34>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0c4      	beq.n	800b36c <__sflush_r+0x34>
 800b3e2:	2b1d      	cmp	r3, #29
 800b3e4:	d001      	beq.n	800b3ea <__sflush_r+0xb2>
 800b3e6:	2b16      	cmp	r3, #22
 800b3e8:	d101      	bne.n	800b3ee <__sflush_r+0xb6>
 800b3ea:	602f      	str	r7, [r5, #0]
 800b3ec:	e7b1      	b.n	800b352 <__sflush_r+0x1a>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	e7ad      	b.n	800b354 <__sflush_r+0x1c>
 800b3f8:	690f      	ldr	r7, [r1, #16]
 800b3fa:	2f00      	cmp	r7, #0
 800b3fc:	d0a9      	beq.n	800b352 <__sflush_r+0x1a>
 800b3fe:	0793      	lsls	r3, r2, #30
 800b400:	680e      	ldr	r6, [r1, #0]
 800b402:	bf08      	it	eq
 800b404:	694b      	ldreq	r3, [r1, #20]
 800b406:	600f      	str	r7, [r1, #0]
 800b408:	bf18      	it	ne
 800b40a:	2300      	movne	r3, #0
 800b40c:	eba6 0807 	sub.w	r8, r6, r7
 800b410:	608b      	str	r3, [r1, #8]
 800b412:	f1b8 0f00 	cmp.w	r8, #0
 800b416:	dd9c      	ble.n	800b352 <__sflush_r+0x1a>
 800b418:	6a21      	ldr	r1, [r4, #32]
 800b41a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b41c:	4643      	mov	r3, r8
 800b41e:	463a      	mov	r2, r7
 800b420:	4628      	mov	r0, r5
 800b422:	47b0      	blx	r6
 800b424:	2800      	cmp	r0, #0
 800b426:	dc06      	bgt.n	800b436 <__sflush_r+0xfe>
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b42e:	81a3      	strh	r3, [r4, #12]
 800b430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b434:	e78e      	b.n	800b354 <__sflush_r+0x1c>
 800b436:	4407      	add	r7, r0
 800b438:	eba8 0800 	sub.w	r8, r8, r0
 800b43c:	e7e9      	b.n	800b412 <__sflush_r+0xda>
 800b43e:	bf00      	nop
 800b440:	20400001 	.word	0x20400001

0800b444 <_fflush_r>:
 800b444:	b538      	push	{r3, r4, r5, lr}
 800b446:	690b      	ldr	r3, [r1, #16]
 800b448:	4605      	mov	r5, r0
 800b44a:	460c      	mov	r4, r1
 800b44c:	b913      	cbnz	r3, 800b454 <_fflush_r+0x10>
 800b44e:	2500      	movs	r5, #0
 800b450:	4628      	mov	r0, r5
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	b118      	cbz	r0, 800b45e <_fflush_r+0x1a>
 800b456:	6983      	ldr	r3, [r0, #24]
 800b458:	b90b      	cbnz	r3, 800b45e <_fflush_r+0x1a>
 800b45a:	f000 f887 	bl	800b56c <__sinit>
 800b45e:	4b14      	ldr	r3, [pc, #80]	; (800b4b0 <_fflush_r+0x6c>)
 800b460:	429c      	cmp	r4, r3
 800b462:	d11b      	bne.n	800b49c <_fflush_r+0x58>
 800b464:	686c      	ldr	r4, [r5, #4]
 800b466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0ef      	beq.n	800b44e <_fflush_r+0xa>
 800b46e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b470:	07d0      	lsls	r0, r2, #31
 800b472:	d404      	bmi.n	800b47e <_fflush_r+0x3a>
 800b474:	0599      	lsls	r1, r3, #22
 800b476:	d402      	bmi.n	800b47e <_fflush_r+0x3a>
 800b478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b47a:	f000 f915 	bl	800b6a8 <__retarget_lock_acquire_recursive>
 800b47e:	4628      	mov	r0, r5
 800b480:	4621      	mov	r1, r4
 800b482:	f7ff ff59 	bl	800b338 <__sflush_r>
 800b486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b488:	07da      	lsls	r2, r3, #31
 800b48a:	4605      	mov	r5, r0
 800b48c:	d4e0      	bmi.n	800b450 <_fflush_r+0xc>
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	059b      	lsls	r3, r3, #22
 800b492:	d4dd      	bmi.n	800b450 <_fflush_r+0xc>
 800b494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b496:	f000 f908 	bl	800b6aa <__retarget_lock_release_recursive>
 800b49a:	e7d9      	b.n	800b450 <_fflush_r+0xc>
 800b49c:	4b05      	ldr	r3, [pc, #20]	; (800b4b4 <_fflush_r+0x70>)
 800b49e:	429c      	cmp	r4, r3
 800b4a0:	d101      	bne.n	800b4a6 <_fflush_r+0x62>
 800b4a2:	68ac      	ldr	r4, [r5, #8]
 800b4a4:	e7df      	b.n	800b466 <_fflush_r+0x22>
 800b4a6:	4b04      	ldr	r3, [pc, #16]	; (800b4b8 <_fflush_r+0x74>)
 800b4a8:	429c      	cmp	r4, r3
 800b4aa:	bf08      	it	eq
 800b4ac:	68ec      	ldreq	r4, [r5, #12]
 800b4ae:	e7da      	b.n	800b466 <_fflush_r+0x22>
 800b4b0:	0800c2fc 	.word	0x0800c2fc
 800b4b4:	0800c31c 	.word	0x0800c31c
 800b4b8:	0800c2dc 	.word	0x0800c2dc

0800b4bc <std>:
 800b4bc:	2300      	movs	r3, #0
 800b4be:	b510      	push	{r4, lr}
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	e9c0 3300 	strd	r3, r3, [r0]
 800b4c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4ca:	6083      	str	r3, [r0, #8]
 800b4cc:	8181      	strh	r1, [r0, #12]
 800b4ce:	6643      	str	r3, [r0, #100]	; 0x64
 800b4d0:	81c2      	strh	r2, [r0, #14]
 800b4d2:	6183      	str	r3, [r0, #24]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	2208      	movs	r2, #8
 800b4d8:	305c      	adds	r0, #92	; 0x5c
 800b4da:	f7fd fbb3 	bl	8008c44 <memset>
 800b4de:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <std+0x38>)
 800b4e0:	6263      	str	r3, [r4, #36]	; 0x24
 800b4e2:	4b05      	ldr	r3, [pc, #20]	; (800b4f8 <std+0x3c>)
 800b4e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4e6:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <std+0x40>)
 800b4e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4ea:	4b05      	ldr	r3, [pc, #20]	; (800b500 <std+0x44>)
 800b4ec:	6224      	str	r4, [r4, #32]
 800b4ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b4f0:	bd10      	pop	{r4, pc}
 800b4f2:	bf00      	nop
 800b4f4:	0800b80d 	.word	0x0800b80d
 800b4f8:	0800b82f 	.word	0x0800b82f
 800b4fc:	0800b867 	.word	0x0800b867
 800b500:	0800b88b 	.word	0x0800b88b

0800b504 <_cleanup_r>:
 800b504:	4901      	ldr	r1, [pc, #4]	; (800b50c <_cleanup_r+0x8>)
 800b506:	f000 b8af 	b.w	800b668 <_fwalk_reent>
 800b50a:	bf00      	nop
 800b50c:	0800b445 	.word	0x0800b445

0800b510 <__sfmoreglue>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	1e4a      	subs	r2, r1, #1
 800b514:	2568      	movs	r5, #104	; 0x68
 800b516:	4355      	muls	r5, r2
 800b518:	460e      	mov	r6, r1
 800b51a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b51e:	f7ff fa87 	bl	800aa30 <_malloc_r>
 800b522:	4604      	mov	r4, r0
 800b524:	b140      	cbz	r0, 800b538 <__sfmoreglue+0x28>
 800b526:	2100      	movs	r1, #0
 800b528:	e9c0 1600 	strd	r1, r6, [r0]
 800b52c:	300c      	adds	r0, #12
 800b52e:	60a0      	str	r0, [r4, #8]
 800b530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b534:	f7fd fb86 	bl	8008c44 <memset>
 800b538:	4620      	mov	r0, r4
 800b53a:	bd70      	pop	{r4, r5, r6, pc}

0800b53c <__sfp_lock_acquire>:
 800b53c:	4801      	ldr	r0, [pc, #4]	; (800b544 <__sfp_lock_acquire+0x8>)
 800b53e:	f000 b8b3 	b.w	800b6a8 <__retarget_lock_acquire_recursive>
 800b542:	bf00      	nop
 800b544:	200138f0 	.word	0x200138f0

0800b548 <__sfp_lock_release>:
 800b548:	4801      	ldr	r0, [pc, #4]	; (800b550 <__sfp_lock_release+0x8>)
 800b54a:	f000 b8ae 	b.w	800b6aa <__retarget_lock_release_recursive>
 800b54e:	bf00      	nop
 800b550:	200138f0 	.word	0x200138f0

0800b554 <__sinit_lock_acquire>:
 800b554:	4801      	ldr	r0, [pc, #4]	; (800b55c <__sinit_lock_acquire+0x8>)
 800b556:	f000 b8a7 	b.w	800b6a8 <__retarget_lock_acquire_recursive>
 800b55a:	bf00      	nop
 800b55c:	200138eb 	.word	0x200138eb

0800b560 <__sinit_lock_release>:
 800b560:	4801      	ldr	r0, [pc, #4]	; (800b568 <__sinit_lock_release+0x8>)
 800b562:	f000 b8a2 	b.w	800b6aa <__retarget_lock_release_recursive>
 800b566:	bf00      	nop
 800b568:	200138eb 	.word	0x200138eb

0800b56c <__sinit>:
 800b56c:	b510      	push	{r4, lr}
 800b56e:	4604      	mov	r4, r0
 800b570:	f7ff fff0 	bl	800b554 <__sinit_lock_acquire>
 800b574:	69a3      	ldr	r3, [r4, #24]
 800b576:	b11b      	cbz	r3, 800b580 <__sinit+0x14>
 800b578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b57c:	f7ff bff0 	b.w	800b560 <__sinit_lock_release>
 800b580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b584:	6523      	str	r3, [r4, #80]	; 0x50
 800b586:	4b13      	ldr	r3, [pc, #76]	; (800b5d4 <__sinit+0x68>)
 800b588:	4a13      	ldr	r2, [pc, #76]	; (800b5d8 <__sinit+0x6c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b58e:	42a3      	cmp	r3, r4
 800b590:	bf04      	itt	eq
 800b592:	2301      	moveq	r3, #1
 800b594:	61a3      	streq	r3, [r4, #24]
 800b596:	4620      	mov	r0, r4
 800b598:	f000 f820 	bl	800b5dc <__sfp>
 800b59c:	6060      	str	r0, [r4, #4]
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 f81c 	bl	800b5dc <__sfp>
 800b5a4:	60a0      	str	r0, [r4, #8]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f000 f818 	bl	800b5dc <__sfp>
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	60e0      	str	r0, [r4, #12]
 800b5b0:	2104      	movs	r1, #4
 800b5b2:	6860      	ldr	r0, [r4, #4]
 800b5b4:	f7ff ff82 	bl	800b4bc <std>
 800b5b8:	68a0      	ldr	r0, [r4, #8]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	2109      	movs	r1, #9
 800b5be:	f7ff ff7d 	bl	800b4bc <std>
 800b5c2:	68e0      	ldr	r0, [r4, #12]
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	2112      	movs	r1, #18
 800b5c8:	f7ff ff78 	bl	800b4bc <std>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	61a3      	str	r3, [r4, #24]
 800b5d0:	e7d2      	b.n	800b578 <__sinit+0xc>
 800b5d2:	bf00      	nop
 800b5d4:	0800bf5c 	.word	0x0800bf5c
 800b5d8:	0800b505 	.word	0x0800b505

0800b5dc <__sfp>:
 800b5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5de:	4607      	mov	r7, r0
 800b5e0:	f7ff ffac 	bl	800b53c <__sfp_lock_acquire>
 800b5e4:	4b1e      	ldr	r3, [pc, #120]	; (800b660 <__sfp+0x84>)
 800b5e6:	681e      	ldr	r6, [r3, #0]
 800b5e8:	69b3      	ldr	r3, [r6, #24]
 800b5ea:	b913      	cbnz	r3, 800b5f2 <__sfp+0x16>
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7ff ffbd 	bl	800b56c <__sinit>
 800b5f2:	3648      	adds	r6, #72	; 0x48
 800b5f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	d503      	bpl.n	800b604 <__sfp+0x28>
 800b5fc:	6833      	ldr	r3, [r6, #0]
 800b5fe:	b30b      	cbz	r3, 800b644 <__sfp+0x68>
 800b600:	6836      	ldr	r6, [r6, #0]
 800b602:	e7f7      	b.n	800b5f4 <__sfp+0x18>
 800b604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b608:	b9d5      	cbnz	r5, 800b640 <__sfp+0x64>
 800b60a:	4b16      	ldr	r3, [pc, #88]	; (800b664 <__sfp+0x88>)
 800b60c:	60e3      	str	r3, [r4, #12]
 800b60e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b612:	6665      	str	r5, [r4, #100]	; 0x64
 800b614:	f000 f847 	bl	800b6a6 <__retarget_lock_init_recursive>
 800b618:	f7ff ff96 	bl	800b548 <__sfp_lock_release>
 800b61c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b624:	6025      	str	r5, [r4, #0]
 800b626:	61a5      	str	r5, [r4, #24]
 800b628:	2208      	movs	r2, #8
 800b62a:	4629      	mov	r1, r5
 800b62c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b630:	f7fd fb08 	bl	8008c44 <memset>
 800b634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b63c:	4620      	mov	r0, r4
 800b63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b640:	3468      	adds	r4, #104	; 0x68
 800b642:	e7d9      	b.n	800b5f8 <__sfp+0x1c>
 800b644:	2104      	movs	r1, #4
 800b646:	4638      	mov	r0, r7
 800b648:	f7ff ff62 	bl	800b510 <__sfmoreglue>
 800b64c:	4604      	mov	r4, r0
 800b64e:	6030      	str	r0, [r6, #0]
 800b650:	2800      	cmp	r0, #0
 800b652:	d1d5      	bne.n	800b600 <__sfp+0x24>
 800b654:	f7ff ff78 	bl	800b548 <__sfp_lock_release>
 800b658:	230c      	movs	r3, #12
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	e7ee      	b.n	800b63c <__sfp+0x60>
 800b65e:	bf00      	nop
 800b660:	0800bf5c 	.word	0x0800bf5c
 800b664:	ffff0001 	.word	0xffff0001

0800b668 <_fwalk_reent>:
 800b668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b66c:	4606      	mov	r6, r0
 800b66e:	4688      	mov	r8, r1
 800b670:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b674:	2700      	movs	r7, #0
 800b676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b67a:	f1b9 0901 	subs.w	r9, r9, #1
 800b67e:	d505      	bpl.n	800b68c <_fwalk_reent+0x24>
 800b680:	6824      	ldr	r4, [r4, #0]
 800b682:	2c00      	cmp	r4, #0
 800b684:	d1f7      	bne.n	800b676 <_fwalk_reent+0xe>
 800b686:	4638      	mov	r0, r7
 800b688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b68c:	89ab      	ldrh	r3, [r5, #12]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d907      	bls.n	800b6a2 <_fwalk_reent+0x3a>
 800b692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b696:	3301      	adds	r3, #1
 800b698:	d003      	beq.n	800b6a2 <_fwalk_reent+0x3a>
 800b69a:	4629      	mov	r1, r5
 800b69c:	4630      	mov	r0, r6
 800b69e:	47c0      	blx	r8
 800b6a0:	4307      	orrs	r7, r0
 800b6a2:	3568      	adds	r5, #104	; 0x68
 800b6a4:	e7e9      	b.n	800b67a <_fwalk_reent+0x12>

0800b6a6 <__retarget_lock_init_recursive>:
 800b6a6:	4770      	bx	lr

0800b6a8 <__retarget_lock_acquire_recursive>:
 800b6a8:	4770      	bx	lr

0800b6aa <__retarget_lock_release_recursive>:
 800b6aa:	4770      	bx	lr

0800b6ac <__swhatbuf_r>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	460e      	mov	r6, r1
 800b6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	b096      	sub	sp, #88	; 0x58
 800b6b8:	4614      	mov	r4, r2
 800b6ba:	461d      	mov	r5, r3
 800b6bc:	da07      	bge.n	800b6ce <__swhatbuf_r+0x22>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	89b3      	ldrh	r3, [r6, #12]
 800b6c4:	061a      	lsls	r2, r3, #24
 800b6c6:	d410      	bmi.n	800b6ea <__swhatbuf_r+0x3e>
 800b6c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6cc:	e00e      	b.n	800b6ec <__swhatbuf_r+0x40>
 800b6ce:	466a      	mov	r2, sp
 800b6d0:	f000 f8f0 	bl	800b8b4 <_fstat_r>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	dbf2      	blt.n	800b6be <__swhatbuf_r+0x12>
 800b6d8:	9a01      	ldr	r2, [sp, #4]
 800b6da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6e2:	425a      	negs	r2, r3
 800b6e4:	415a      	adcs	r2, r3
 800b6e6:	602a      	str	r2, [r5, #0]
 800b6e8:	e7ee      	b.n	800b6c8 <__swhatbuf_r+0x1c>
 800b6ea:	2340      	movs	r3, #64	; 0x40
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	b016      	add	sp, #88	; 0x58
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}

0800b6f4 <__smakebuf_r>:
 800b6f4:	898b      	ldrh	r3, [r1, #12]
 800b6f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6f8:	079d      	lsls	r5, r3, #30
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	d507      	bpl.n	800b710 <__smakebuf_r+0x1c>
 800b700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	6123      	str	r3, [r4, #16]
 800b708:	2301      	movs	r3, #1
 800b70a:	6163      	str	r3, [r4, #20]
 800b70c:	b002      	add	sp, #8
 800b70e:	bd70      	pop	{r4, r5, r6, pc}
 800b710:	ab01      	add	r3, sp, #4
 800b712:	466a      	mov	r2, sp
 800b714:	f7ff ffca 	bl	800b6ac <__swhatbuf_r>
 800b718:	9900      	ldr	r1, [sp, #0]
 800b71a:	4605      	mov	r5, r0
 800b71c:	4630      	mov	r0, r6
 800b71e:	f7ff f987 	bl	800aa30 <_malloc_r>
 800b722:	b948      	cbnz	r0, 800b738 <__smakebuf_r+0x44>
 800b724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b728:	059a      	lsls	r2, r3, #22
 800b72a:	d4ef      	bmi.n	800b70c <__smakebuf_r+0x18>
 800b72c:	f023 0303 	bic.w	r3, r3, #3
 800b730:	f043 0302 	orr.w	r3, r3, #2
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	e7e3      	b.n	800b700 <__smakebuf_r+0xc>
 800b738:	4b0d      	ldr	r3, [pc, #52]	; (800b770 <__smakebuf_r+0x7c>)
 800b73a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	6020      	str	r0, [r4, #0]
 800b740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b744:	81a3      	strh	r3, [r4, #12]
 800b746:	9b00      	ldr	r3, [sp, #0]
 800b748:	6163      	str	r3, [r4, #20]
 800b74a:	9b01      	ldr	r3, [sp, #4]
 800b74c:	6120      	str	r0, [r4, #16]
 800b74e:	b15b      	cbz	r3, 800b768 <__smakebuf_r+0x74>
 800b750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b754:	4630      	mov	r0, r6
 800b756:	f000 f8bf 	bl	800b8d8 <_isatty_r>
 800b75a:	b128      	cbz	r0, 800b768 <__smakebuf_r+0x74>
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	f023 0303 	bic.w	r3, r3, #3
 800b762:	f043 0301 	orr.w	r3, r3, #1
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	89a0      	ldrh	r0, [r4, #12]
 800b76a:	4305      	orrs	r5, r0
 800b76c:	81a5      	strh	r5, [r4, #12]
 800b76e:	e7cd      	b.n	800b70c <__smakebuf_r+0x18>
 800b770:	0800b505 	.word	0x0800b505

0800b774 <_malloc_usable_size_r>:
 800b774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b778:	1f18      	subs	r0, r3, #4
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	bfbc      	itt	lt
 800b77e:	580b      	ldrlt	r3, [r1, r0]
 800b780:	18c0      	addlt	r0, r0, r3
 800b782:	4770      	bx	lr

0800b784 <_raise_r>:
 800b784:	291f      	cmp	r1, #31
 800b786:	b538      	push	{r3, r4, r5, lr}
 800b788:	4604      	mov	r4, r0
 800b78a:	460d      	mov	r5, r1
 800b78c:	d904      	bls.n	800b798 <_raise_r+0x14>
 800b78e:	2316      	movs	r3, #22
 800b790:	6003      	str	r3, [r0, #0]
 800b792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b79a:	b112      	cbz	r2, 800b7a2 <_raise_r+0x1e>
 800b79c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7a0:	b94b      	cbnz	r3, 800b7b6 <_raise_r+0x32>
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 f830 	bl	800b808 <_getpid_r>
 800b7a8:	462a      	mov	r2, r5
 800b7aa:	4601      	mov	r1, r0
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7b2:	f000 b817 	b.w	800b7e4 <_kill_r>
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d00a      	beq.n	800b7d0 <_raise_r+0x4c>
 800b7ba:	1c59      	adds	r1, r3, #1
 800b7bc:	d103      	bne.n	800b7c6 <_raise_r+0x42>
 800b7be:	2316      	movs	r3, #22
 800b7c0:	6003      	str	r3, [r0, #0]
 800b7c2:	2001      	movs	r0, #1
 800b7c4:	e7e7      	b.n	800b796 <_raise_r+0x12>
 800b7c6:	2400      	movs	r4, #0
 800b7c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	4798      	blx	r3
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	e7e0      	b.n	800b796 <_raise_r+0x12>

0800b7d4 <raise>:
 800b7d4:	4b02      	ldr	r3, [pc, #8]	; (800b7e0 <raise+0xc>)
 800b7d6:	4601      	mov	r1, r0
 800b7d8:	6818      	ldr	r0, [r3, #0]
 800b7da:	f7ff bfd3 	b.w	800b784 <_raise_r>
 800b7de:	bf00      	nop
 800b7e0:	20000038 	.word	0x20000038

0800b7e4 <_kill_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d07      	ldr	r5, [pc, #28]	; (800b804 <_kill_r+0x20>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	4611      	mov	r1, r2
 800b7f0:	602b      	str	r3, [r5, #0]
 800b7f2:	f7fd f915 	bl	8008a20 <_kill>
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	d102      	bne.n	800b800 <_kill_r+0x1c>
 800b7fa:	682b      	ldr	r3, [r5, #0]
 800b7fc:	b103      	cbz	r3, 800b800 <_kill_r+0x1c>
 800b7fe:	6023      	str	r3, [r4, #0]
 800b800:	bd38      	pop	{r3, r4, r5, pc}
 800b802:	bf00      	nop
 800b804:	200138e4 	.word	0x200138e4

0800b808 <_getpid_r>:
 800b808:	f7fd b902 	b.w	8008a10 <_getpid>

0800b80c <__sread>:
 800b80c:	b510      	push	{r4, lr}
 800b80e:	460c      	mov	r4, r1
 800b810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b814:	f000 f882 	bl	800b91c <_read_r>
 800b818:	2800      	cmp	r0, #0
 800b81a:	bfab      	itete	ge
 800b81c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b81e:	89a3      	ldrhlt	r3, [r4, #12]
 800b820:	181b      	addge	r3, r3, r0
 800b822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b826:	bfac      	ite	ge
 800b828:	6563      	strge	r3, [r4, #84]	; 0x54
 800b82a:	81a3      	strhlt	r3, [r4, #12]
 800b82c:	bd10      	pop	{r4, pc}

0800b82e <__swrite>:
 800b82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b832:	461f      	mov	r7, r3
 800b834:	898b      	ldrh	r3, [r1, #12]
 800b836:	05db      	lsls	r3, r3, #23
 800b838:	4605      	mov	r5, r0
 800b83a:	460c      	mov	r4, r1
 800b83c:	4616      	mov	r6, r2
 800b83e:	d505      	bpl.n	800b84c <__swrite+0x1e>
 800b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b844:	2302      	movs	r3, #2
 800b846:	2200      	movs	r2, #0
 800b848:	f000 f856 	bl	800b8f8 <_lseek_r>
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b856:	81a3      	strh	r3, [r4, #12]
 800b858:	4632      	mov	r2, r6
 800b85a:	463b      	mov	r3, r7
 800b85c:	4628      	mov	r0, r5
 800b85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b862:	f7fb b96f 	b.w	8006b44 <_write_r>

0800b866 <__sseek>:
 800b866:	b510      	push	{r4, lr}
 800b868:	460c      	mov	r4, r1
 800b86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b86e:	f000 f843 	bl	800b8f8 <_lseek_r>
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	89a3      	ldrh	r3, [r4, #12]
 800b876:	bf15      	itete	ne
 800b878:	6560      	strne	r0, [r4, #84]	; 0x54
 800b87a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b87e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b882:	81a3      	strheq	r3, [r4, #12]
 800b884:	bf18      	it	ne
 800b886:	81a3      	strhne	r3, [r4, #12]
 800b888:	bd10      	pop	{r4, pc}

0800b88a <__sclose>:
 800b88a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88e:	f000 b801 	b.w	800b894 <_close_r>
	...

0800b894 <_close_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4d06      	ldr	r5, [pc, #24]	; (800b8b0 <_close_r+0x1c>)
 800b898:	2300      	movs	r3, #0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4608      	mov	r0, r1
 800b89e:	602b      	str	r3, [r5, #0]
 800b8a0:	f7fd f8f5 	bl	8008a8e <_close>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d102      	bne.n	800b8ae <_close_r+0x1a>
 800b8a8:	682b      	ldr	r3, [r5, #0]
 800b8aa:	b103      	cbz	r3, 800b8ae <_close_r+0x1a>
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}
 800b8b0:	200138e4 	.word	0x200138e4

0800b8b4 <_fstat_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4d07      	ldr	r5, [pc, #28]	; (800b8d4 <_fstat_r+0x20>)
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	4608      	mov	r0, r1
 800b8be:	4611      	mov	r1, r2
 800b8c0:	602b      	str	r3, [r5, #0]
 800b8c2:	f7fd f8f0 	bl	8008aa6 <_fstat>
 800b8c6:	1c43      	adds	r3, r0, #1
 800b8c8:	d102      	bne.n	800b8d0 <_fstat_r+0x1c>
 800b8ca:	682b      	ldr	r3, [r5, #0]
 800b8cc:	b103      	cbz	r3, 800b8d0 <_fstat_r+0x1c>
 800b8ce:	6023      	str	r3, [r4, #0]
 800b8d0:	bd38      	pop	{r3, r4, r5, pc}
 800b8d2:	bf00      	nop
 800b8d4:	200138e4 	.word	0x200138e4

0800b8d8 <_isatty_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	4d06      	ldr	r5, [pc, #24]	; (800b8f4 <_isatty_r+0x1c>)
 800b8dc:	2300      	movs	r3, #0
 800b8de:	4604      	mov	r4, r0
 800b8e0:	4608      	mov	r0, r1
 800b8e2:	602b      	str	r3, [r5, #0]
 800b8e4:	f7fd f8ef 	bl	8008ac6 <_isatty>
 800b8e8:	1c43      	adds	r3, r0, #1
 800b8ea:	d102      	bne.n	800b8f2 <_isatty_r+0x1a>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	b103      	cbz	r3, 800b8f2 <_isatty_r+0x1a>
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
 800b8f4:	200138e4 	.word	0x200138e4

0800b8f8 <_lseek_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4d07      	ldr	r5, [pc, #28]	; (800b918 <_lseek_r+0x20>)
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	4608      	mov	r0, r1
 800b900:	4611      	mov	r1, r2
 800b902:	2200      	movs	r2, #0
 800b904:	602a      	str	r2, [r5, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	f7fd f8e8 	bl	8008adc <_lseek>
 800b90c:	1c43      	adds	r3, r0, #1
 800b90e:	d102      	bne.n	800b916 <_lseek_r+0x1e>
 800b910:	682b      	ldr	r3, [r5, #0]
 800b912:	b103      	cbz	r3, 800b916 <_lseek_r+0x1e>
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	bd38      	pop	{r3, r4, r5, pc}
 800b918:	200138e4 	.word	0x200138e4

0800b91c <_read_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	4d07      	ldr	r5, [pc, #28]	; (800b93c <_read_r+0x20>)
 800b920:	4604      	mov	r4, r0
 800b922:	4608      	mov	r0, r1
 800b924:	4611      	mov	r1, r2
 800b926:	2200      	movs	r2, #0
 800b928:	602a      	str	r2, [r5, #0]
 800b92a:	461a      	mov	r2, r3
 800b92c:	f7fd f892 	bl	8008a54 <_read>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d102      	bne.n	800b93a <_read_r+0x1e>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	b103      	cbz	r3, 800b93a <_read_r+0x1e>
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	bd38      	pop	{r3, r4, r5, pc}
 800b93c:	200138e4 	.word	0x200138e4

0800b940 <sqrtf>:
 800b940:	b508      	push	{r3, lr}
 800b942:	ed2d 8b02 	vpush	{d8}
 800b946:	ee08 0a10 	vmov	s16, r0
 800b94a:	f000 f823 	bl	800b994 <__ieee754_sqrtf>
 800b94e:	4b0f      	ldr	r3, [pc, #60]	; (800b98c <sqrtf+0x4c>)
 800b950:	f993 3000 	ldrsb.w	r3, [r3]
 800b954:	3301      	adds	r3, #1
 800b956:	ee07 0a90 	vmov	s15, r0
 800b95a:	d011      	beq.n	800b980 <sqrtf+0x40>
 800b95c:	eeb4 8a48 	vcmp.f32	s16, s16
 800b960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b964:	d60c      	bvs.n	800b980 <sqrtf+0x40>
 800b966:	eddf 8a0a 	vldr	s17, [pc, #40]	; 800b990 <sqrtf+0x50>
 800b96a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b972:	d505      	bpl.n	800b980 <sqrtf+0x40>
 800b974:	f7fd f920 	bl	8008bb8 <__errno>
 800b978:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 800b97c:	2321      	movs	r3, #33	; 0x21
 800b97e:	6003      	str	r3, [r0, #0]
 800b980:	ecbd 8b02 	vpop	{d8}
 800b984:	ee17 0a90 	vmov	r0, s15
 800b988:	bd08      	pop	{r3, pc}
 800b98a:	bf00      	nop
 800b98c:	20000208 	.word	0x20000208
 800b990:	00000000 	.word	0x00000000

0800b994 <__ieee754_sqrtf>:
 800b994:	ee07 0a90 	vmov	s15, r0
 800b998:	eef1 7ae7 	vsqrt.f32	s15, s15
 800b99c:	ee17 0a90 	vmov	r0, s15
 800b9a0:	4770      	bx	lr
	...

0800b9a4 <_init>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	bf00      	nop
 800b9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9aa:	bc08      	pop	{r3}
 800b9ac:	469e      	mov	lr, r3
 800b9ae:	4770      	bx	lr

0800b9b0 <_fini>:
 800b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b2:	bf00      	nop
 800b9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b6:	bc08      	pop	{r3}
 800b9b8:	469e      	mov	lr, r3
 800b9ba:	4770      	bx	lr
