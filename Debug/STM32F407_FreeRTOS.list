
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000093c  0800aeb8  0800aeb8  0001aeb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7f4  0800b7f4  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800b7f4  0800b7f4  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b7f4  0800b7f4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f4  0800b7f4  0001b7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7f8  0800b7f8  0001b7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000136fc  20000204  0800ba00  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013900  0800ba00  00023900  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018374  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003548  00000000  00000000  000385a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0003baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  0003cae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d48  00000000  00000000  0003d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010aac  00000000  00000000  00043690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001e597  00000000  00000000  0005413c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000726d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005240  00000000  00000000  00072728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aea0 	.word	0x0800aea0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	0800aea0 	.word	0x0800aea0

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	200137d0 	.word	0x200137d0

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <ADE_Init>:
void ADE_SPI_Init();
void ZeroX_Init();
void SAG_Init();
void IRQ_Init();

void ADE_Init(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	ADE_SPI_Init();
 8000c6e:	f000 f893 	bl	8000d98 <ADE_SPI_Init>
//	ZeroX_Init();
//	SAG_Init();
//	IRQ_Init();

	//Reset
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2109      	movs	r1, #9
 8000c76:	4811      	ldr	r0, [pc, #68]	; (8000cbc <ADE_Init+0x54>)
 8000c78:	f003 fe6e 	bl	8004958 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	e002      	b.n	8000c88 <ADE_Init+0x20>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	ddf7      	ble.n	8000c82 <ADE_Init+0x1a>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2109      	movs	r1, #9
 8000c96:	4809      	ldr	r0, [pc, #36]	; (8000cbc <ADE_Init+0x54>)
 8000c98:	f003 fe5e 	bl	8004958 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e002      	b.n	8000ca8 <ADE_Init+0x40>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	ddf7      	ble.n	8000ca2 <ADE_Init+0x3a>
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <ADE_ReadData>:

uint32_t ADE_ReadData(uint8_t address, uint32_t bytes_to_read) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
	uint32_t data = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
	uint8_t dummy_write = 0xff;
 8000cd0:	23ff      	movs	r3, #255	; 0xff
 8000cd2:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4813      	ldr	r0, [pc, #76]	; (8000d24 <ADE_ReadData+0x64>)
 8000cd8:	f004 fa90 	bl	80051fc <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4810      	ldr	r0, [pc, #64]	; (8000d24 <ADE_ReadData+0x64>)
 8000ce2:	f004 fa60 	bl	80051a6 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	e00e      	b.n	8000d0a <ADE_ReadData+0x4a>
		data <<= 8;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	617b      	str	r3, [r7, #20]
		data |= SPI_Transfer(ADE_SPI_HOST, dummy_write);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <ADE_ReadData+0x64>)
 8000cf8:	f004 fa55 	bl	80051a6 <SPI_Transfer>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	3301      	adds	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3ec      	bcc.n	8000cec <ADE_ReadData+0x2c>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE); //SS pin pull to high
 8000d12:	2100      	movs	r1, #0
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <ADE_ReadData+0x64>)
 8000d16:	f004 fa71 	bl	80051fc <SPI_PeripheralControl>
	return data;
 8000d1a:	697b      	ldr	r3, [r7, #20]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40003800 	.word	0x40003800

08000d28 <ADE_WriteData>:

void ADE_WriteData(uint8_t address, uint32_t write_buffer, uint32_t bytes_to_write) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	74fb      	strb	r3, [r7, #19]
	address |= 0x80;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d40:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000d42:	2101      	movs	r1, #1
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <ADE_WriteData+0x6c>)
 8000d46:	f004 fa59 	bl	80051fc <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4811      	ldr	r0, [pc, #68]	; (8000d94 <ADE_WriteData+0x6c>)
 8000d50:	f004 fa29 	bl	80051a6 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++) {
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e010      	b.n	8000d7c <ADE_WriteData+0x54>
		data = (uint8_t)(write_buffer >> 8*(bytes_to_write - i - 1));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	3b01      	subs	r3, #1
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6a:	74fb      	strb	r3, [r7, #19]
		SPI_Transfer(ADE_SPI_HOST, data);
 8000d6c:	7cfb      	ldrb	r3, [r7, #19]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <ADE_WriteData+0x6c>)
 8000d72:	f004 fa18 	bl	80051a6 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_write; i++) {
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d3ea      	bcc.n	8000d5a <ADE_WriteData+0x32>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE);; //SS pin pull to high
 8000d84:	2100      	movs	r1, #0
 8000d86:	4803      	ldr	r0, [pc, #12]	; (8000d94 <ADE_WriteData+0x6c>)
 8000d88:	f004 fa38 	bl	80051fc <SPI_PeripheralControl>
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40003800 	.word	0x40003800

08000d98 <ADE_SPI_Init>:
			mode &= ~(1 << bit_flag);
		ADE_WriteData(MODE, mode, 2);
	}
}

void ADE_SPI_Init() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	; 0x30
 8000d9c:	af00      	add	r7, sp, #0
	 * PB13 -> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT function mode : 5
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000d9e:	4b34      	ldr	r3, [pc, #208]	; (8000e70 <ADE_SPI_Init+0xd8>)
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000da8:	2305      	movs	r3, #5
 8000daa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000dc0:	230d      	movs	r3, #13
 8000dc2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 fc12 	bl	80045f4 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fc0a 	bl	80045f4 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000de0:	230e      	movs	r3, #14
 8000de2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fc02 	bl	80045f4 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000df0:	230c      	movs	r3, #12
 8000df2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 fbfa 	bl	80045f4 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <ADE_SPI_Init+0xdc>)
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000e04:	2309      	movs	r3, #9
 8000e06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(&SPIPins);
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fbea 	bl	80045f4 <GPIO_Init>

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = ADE_SPI_HOST;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <ADE_SPI_Init+0xe0>)
 8000e22:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000e24:	2301      	movs	r3, #1
 8000e26:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;	// clock 1MHz
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000e30:	2300      	movs	r3, #0
 8000e32:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;				// CPOL 0
 8000e34:	2300      	movs	r3, #0
 8000e36:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;				// CPHA 1
 8000e38:	2301      	movs	r3, #1
 8000e3a:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 					// Hardware slave management enabled for NSS pin
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73bb      	strb	r3, [r7, #14]

	ADE_SPI_HOST->CR1 &= ~(1 << SPI_CR1_SPE);
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <ADE_SPI_Init+0xe0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <ADE_SPI_Init+0xe0>)
 8000e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e4a:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f004 f94e 	bl	80050f0 <SPI_Init>
	ADE_SPI_HOST->CR1 |= (1 << SPI_CR1_SPE);
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <ADE_SPI_Init+0xe0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <ADE_SPI_Init+0xe0>)
 8000e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5e:	6013      	str	r3, [r2, #0]

	SPI_SSOEConfig(ADE_SPI_HOST, ENABLE);
 8000e60:	2101      	movs	r1, #1
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <ADE_SPI_Init+0xe0>)
 8000e64:	f004 f9e6 	bl	8005234 <SPI_SSOEConfig>
}
 8000e68:	bf00      	nop
 8000e6a:	3730      	adds	r7, #48	; 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	40003800 	.word	0x40003800

08000e7c <ds1307_init>:
uint8_t bcd_to_binary(uint8_t value);
uint8_t binary_to_bcd(uint8_t value);

I2C_Handle_t g_ds1307I2cHandle;

void ds1307_init(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	ds1307_i2c_pin_config();
 8000e80:	f000 f93e 	bl	8001100 <ds1307_i2c_pin_config>
	ds1307_i2c_config();
 8000e84:	f000 f97a 	bl	800117c <ds1307_i2c_config>
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4802      	ldr	r0, [pc, #8]	; (8000e94 <ds1307_init+0x18>)
 8000e8c:	f003 fe0c 	bl	8004aa8 <I2C_PeripheralControl>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40005c00 	.word	0x40005c00

08000e98 <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_time_t *rtc_time) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f9b9 	bl	800121c <binary_to_bcd>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1 << 7);
 8000eae:	7bbb      	ldrb	r3, [r7, #14]
 8000eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eb4:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f974 	bl	80011a8 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f9a9 	bl	800121c <binary_to_bcd>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f96a 	bl	80011a8 <ds1307_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	789b      	ldrb	r3, [r3, #2]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f99f 	bl	800121c <binary_to_bcd>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73fb      	strb	r3, [r7, #15]

	if(rtc_time->time_format == TIME_FORMAT_24HRS) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	78db      	ldrb	r3, [r3, #3]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d104      	bne.n	8000ef4 <ds1307_set_current_time+0x5c>
		hrs &= ~(1 << 6);
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e011      	b.n	8000f18 <ds1307_set_current_time+0x80>
	} else {
		hrs |= (1 << 6);
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efa:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	78db      	ldrb	r3, [r3, #3]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <ds1307_set_current_time+0x76>
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0320 	orr.w	r3, r3, #32
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	e003      	b.n	8000f16 <ds1307_set_current_time+0x7e>
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f023 0320 	bic.w	r3, r3, #32
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs, DS1307_ADDR_HRS);
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f943 	bl	80011a8 <ds1307_write>
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date) {
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f970 	bl	800121c <binary_to_bcd>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2104      	movs	r1, #4
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f931 	bl	80011a8 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	785b      	ldrb	r3, [r3, #1]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f966 	bl	800121c <binary_to_bcd>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2105      	movs	r1, #5
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f927 	bl	80011a8 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	789b      	ldrb	r3, [r3, #2]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f95c 	bl	800121c <binary_to_bcd>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2106      	movs	r1, #6
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f91d 	bl	80011a8 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	78db      	ldrb	r3, [r3, #3]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f952 	bl	800121c <binary_to_bcd>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f913 	bl	80011a8 <ds1307_write>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time) {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 f924 	bl	80011e0 <ds1307_read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fa2:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f964 	bl	8001274 <bcd_to_binary>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f000 f913 	bl	80011e0 <ds1307_read>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f959 	bl	8001274 <bcd_to_binary>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f000 f908 	bl	80011e0 <ds1307_read>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)) {
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00f      	beq.n	8000ffe <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f003 0320 	and.w	r3, r3, #32
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf14      	ite	ne
 8000fe8:	2301      	movne	r3, #1
 8000fea:	2300      	moveq	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e002      	b.n	8001004 <ds1307_get_current_time+0x7a>
	} else {
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2202      	movs	r2, #2
 8001002:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f934 	bl	8001274 <bcd_to_binary>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	709a      	strb	r2, [r3, #2]

	rtc_time->time_validity = true;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	711a      	strb	r2, [r3, #4]

	if(rtc_time->hours > 23 && rtc_time->time_format == TIME_FORMAT_24HRS)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	789b      	ldrb	r3, [r3, #2]
 800101e:	2b17      	cmp	r3, #23
 8001020:	d906      	bls.n	8001030 <ds1307_get_current_time+0xa6>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	78db      	ldrb	r3, [r3, #3]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d102      	bne.n	8001030 <ds1307_get_current_time+0xa6>
		rtc_time->time_validity = false;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	711a      	strb	r2, [r3, #4]
	if(rtc_time->hours > 12 && (rtc_time->time_format == TIME_FORMAT_12HRS_AM || rtc_time->time_format == TIME_FORMAT_12HRS_PM))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	789b      	ldrb	r3, [r3, #2]
 8001034:	2b0c      	cmp	r3, #12
 8001036:	d90a      	bls.n	800104e <ds1307_get_current_time+0xc4>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	78db      	ldrb	r3, [r3, #3]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <ds1307_get_current_time+0xbe>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	78db      	ldrb	r3, [r3, #3]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d102      	bne.n	800104e <ds1307_get_current_time+0xc4>
		rtc_time->time_validity = false;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	711a      	strb	r2, [r3, #4]
	if(rtc_time->minutes > 59)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	785b      	ldrb	r3, [r3, #1]
 8001052:	2b3b      	cmp	r3, #59	; 0x3b
 8001054:	d902      	bls.n	800105c <ds1307_get_current_time+0xd2>
		rtc_time->time_validity = false;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	711a      	strb	r2, [r3, #4]
	if(rtc_time->seconds > 59)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b3b      	cmp	r3, #59	; 0x3b
 8001062:	d902      	bls.n	800106a <ds1307_get_current_time+0xe0>
		rtc_time->time_validity = false;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	711a      	strb	r2, [r3, #4]
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date) {
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 800107a:	2003      	movs	r0, #3
 800107c:	f000 f8b0 	bl	80011e0 <ds1307_read>
 8001080:	4603      	mov	r3, r0
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f8f6 	bl	8001274 <bcd_to_binary>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8001090:	2004      	movs	r0, #4
 8001092:	f000 f8a5 	bl	80011e0 <ds1307_read>
 8001096:	4603      	mov	r3, r0
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f8eb 	bl	8001274 <bcd_to_binary>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80010a6:	2005      	movs	r0, #5
 80010a8:	f000 f89a 	bl	80011e0 <ds1307_read>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f8e0 	bl	8001274 <bcd_to_binary>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80010bc:	2006      	movs	r0, #6
 80010be:	f000 f88f 	bl	80011e0 <ds1307_read>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f8d5 	bl	8001274 <bcd_to_binary>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	709a      	strb	r2, [r3, #2]

	rtc_date->date_validity = true;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	711a      	strb	r2, [r3, #4]
	if(rtc_date->day == 131 || rtc_date->month == 131 || rtc_date->year == 131)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	78db      	ldrb	r3, [r3, #3]
 80010dc:	2b83      	cmp	r3, #131	; 0x83
 80010de:	d007      	beq.n	80010f0 <ds1307_get_current_date+0x7e>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	785b      	ldrb	r3, [r3, #1]
 80010e4:	2b83      	cmp	r3, #131	; 0x83
 80010e6:	d003      	beq.n	80010f0 <ds1307_get_current_date+0x7e>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	789b      	ldrb	r3, [r3, #2]
 80010ec:	2b83      	cmp	r3, #131	; 0x83
 80010ee:	d102      	bne.n	80010f6 <ds1307_get_current_date+0x84>
		rtc_date->date_validity = false;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	711a      	strb	r2, [r3, #4]
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <ds1307_i2c_pin_config>:

void ds1307_i2c_pin_config(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	220c      	movs	r2, #12
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f007 f848 	bl	80081a4 <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 8001114:	463b      	mov	r3, r7
 8001116:	220c      	movs	r2, #12
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f007 f842 	bl	80081a4 <memset>

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT_SDA;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <ds1307_i2c_pin_config+0x74>)
 8001122:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001128:	2302      	movs	r3, #2
 800112a:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 800112c:	2309      	movs	r3, #9
 800112e:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8001130:	2301      	movs	r3, #1
 8001132:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8001134:	2301      	movs	r3, #1
 8001136:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001138:	2302      	movs	r3, #2
 800113a:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_sda);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4618      	mov	r0, r3
 8001142:	f003 fa57 	bl	80045f4 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT_SCL;
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <ds1307_i2c_pin_config+0x78>)
 8001148:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800114a:	2304      	movs	r3, #4
 800114c:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800114e:	2302      	movs	r3, #2
 8001150:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8001152:	2308      	movs	r3, #8
 8001154:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8001156:	2301      	movs	r3, #1
 8001158:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800115a:	2301      	movs	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800115e:	2302      	movs	r3, #2
 8001160:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 8001162:	463b      	mov	r3, r7
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fa45 	bl	80045f4 <GPIO_Init>

}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40020800 	.word	0x40020800
 8001178:	40020000 	.word	0x40020000

0800117c <ds1307_i2c_config>:

void ds1307_i2c_config(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <ds1307_i2c_config+0x20>)
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <ds1307_i2c_config+0x24>)
 8001184:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <ds1307_i2c_config+0x20>)
 8001188:	2201      	movs	r2, #1
 800118a:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <ds1307_i2c_config+0x20>)
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <ds1307_i2c_config+0x28>)
 8001190:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 8001192:	4802      	ldr	r0, [pc, #8]	; (800119c <ds1307_i2c_config+0x20>)
 8001194:	f003 fcdc 	bl	8004b50 <I2C_Init>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20013568 	.word	0x20013568
 80011a0:	40005c00 	.word	0x40005c00
 80011a4:	000186a0 	.word	0x000186a0

080011a8 <ds1307_write>:


void ds1307_write(uint8_t value,uint8_t reg_addr) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	4603      	mov	r3, r0
 80011b0:	460a      	mov	r2, r1
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80011c0:	f107 010c 	add.w	r1, r7, #12
 80011c4:	2300      	movs	r3, #0
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2368      	movs	r3, #104	; 0x68
 80011ca:	2202      	movs	r2, #2
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <ds1307_write+0x34>)
 80011ce:	f003 fd85 	bl	8004cdc <I2C_MasterSendData>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20013568 	.word	0x20013568

080011e0 <ds1307_read>:



uint8_t ds1307_read(uint8_t reg_addr) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 80011ea:	1df9      	adds	r1, r7, #7
 80011ec:	2300      	movs	r3, #0
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2368      	movs	r3, #104	; 0x68
 80011f2:	2201      	movs	r2, #1
 80011f4:	4808      	ldr	r0, [pc, #32]	; (8001218 <ds1307_read+0x38>)
 80011f6:	f003 fd71 	bl	8004cdc <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 80011fa:	f107 010f 	add.w	r1, r7, #15
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2368      	movs	r3, #104	; 0x68
 8001204:	2201      	movs	r2, #1
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <ds1307_read+0x38>)
 8001208:	f003 fe03 	bl	8004e12 <I2C_MasterReceiveData>
    return data;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20013568 	.word	0x20013568

0800121c <binary_to_bcd>:

uint8_t binary_to_bcd(uint8_t value) {
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	73fb      	strb	r3, [r7, #15]
	if(value >= 10) {
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b09      	cmp	r3, #9
 800122e:	d918      	bls.n	8001262 <binary_to_bcd+0x46>
		m = value /10;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <binary_to_bcd+0x54>)
 8001234:	fba2 2303 	umull	r2, r3, r2, r3
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <binary_to_bcd+0x54>)
 8001240:	fba3 1302 	umull	r1, r3, r3, r2
 8001244:	08d9      	lsrs	r1, r3, #3
 8001246:	460b      	mov	r3, r1
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	b25a      	sxtb	r2, r3
 8001258:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800125c:	4313      	orrs	r3, r2
 800125e:	b25b      	sxtb	r3, r3
 8001260:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	cccccccd 	.word	0xcccccccd

08001274 <bcd_to_binary>:

uint8_t bcd_to_binary(uint8_t value) {
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	4413      	add	r3, r2
 800129c:	b2db      	uxtb	r3, r3
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <KEYPAD_Init>:

/* Private variables */
KEYPAD_Type_t KEYPAD_INT_KeypadType;
static KEYPAD_Button_t KeypadStatus = KEYPAD_NOPRESSED;

void KEYPAD_Init(KEYPAD_Type_t type) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	KEYPAD_INT_KeypadType = type;
 80012b6:	4a32      	ldr	r2, [pc, #200]	; (8001380 <KEYPAD_Init+0xd4>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	7013      	strb	r3, [r2, #0]
	GPIO_Handle_t GpioR_Out, GpioC_In;

	/* Rows are output */
	/* Row 1 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_1_PORT;
 80012bc:	4b31      	ldr	r3, [pc, #196]	; (8001384 <KEYPAD_Init+0xd8>)
 80012be:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_1_PIN;
 80012c0:	230b      	movs	r3, #11
 80012c2:	763b      	strb	r3, [r7, #24]
	GpioR_Out.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80012c4:	2301      	movs	r3, #1
 80012c6:	767b      	strb	r3, [r7, #25]
	GpioR_Out.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80012c8:	2301      	movs	r3, #1
 80012ca:	76bb      	strb	r3, [r7, #26]
	GpioR_Out.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80012cc:	2300      	movs	r3, #0
 80012ce:	773b      	strb	r3, [r7, #28]
	GpioR_Out.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80012d0:	2300      	movs	r3, #0
 80012d2:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GpioR_Out);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 f98b 	bl	80045f4 <GPIO_Init>

	/* Row 2 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_2_PORT;
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <KEYPAD_Init+0xdc>)
 80012e0:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_2_PIN;
 80012e2:	2300      	movs	r3, #0
 80012e4:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f982 	bl	80045f4 <GPIO_Init>

	/* Row 3 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_3_PORT;
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <KEYPAD_Init+0xdc>)
 80012f2:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_3_PIN;
 80012f4:	2302      	movs	r3, #2
 80012f6:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 f979 	bl	80045f4 <GPIO_Init>

	/* Row 4 */
	if (type == KEYPAD_Type_Large) {
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d108      	bne.n	800131a <KEYPAD_Init+0x6e>
		GpioR_Out.pGPIOx = KEYPAD_ROW_4_PORT;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <KEYPAD_Init+0xdc>)
 800130a:	617b      	str	r3, [r7, #20]
		GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_4_PIN;
 800130c:	2304      	movs	r3, #4
 800130e:	763b      	strb	r3, [r7, #24]
		GPIO_Init(&GpioR_Out);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4618      	mov	r0, r3
 8001316:	f003 f96d 	bl	80045f4 <GPIO_Init>
	}


	/* Columns are inputs */
	/* Column 1 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_1_PORT;
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <KEYPAD_Init+0xdc>)
 800131c:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_1_PIN;
 800131e:	2306      	movs	r3, #6
 8001320:	733b      	strb	r3, [r7, #12]
	GpioC_In.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8001322:	2300      	movs	r3, #0
 8001324:	737b      	strb	r3, [r7, #13]
	GpioC_In.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8001326:	2301      	movs	r3, #1
 8001328:	73bb      	strb	r3, [r7, #14]
	GpioC_In.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800132a:	2300      	movs	r3, #0
 800132c:	743b      	strb	r3, [r7, #16]
	GpioC_In.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&GpioC_In);
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4618      	mov	r0, r3
 8001338:	f003 f95c 	bl	80045f4 <GPIO_Init>

	/* Column 2 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_2_PORT;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <KEYPAD_Init+0xe0>)
 800133e:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 8001340:	2303      	movs	r3, #3
 8001342:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4618      	mov	r0, r3
 800134a:	f003 f953 	bl	80045f4 <GPIO_Init>

	/* Column 3 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_3_PORT;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <KEYPAD_Init+0xe0>)
 8001350:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_3_PIN;
 8001352:	2305      	movs	r3, #5
 8001354:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4618      	mov	r0, r3
 800135c:	f003 f94a 	bl	80045f4 <GPIO_Init>

	/* Column 4 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_4_PORT;
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <KEYPAD_Init+0xe0>)
 8001362:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_4_PIN;
 8001364:	2307      	movs	r3, #7
 8001366:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4618      	mov	r0, r3
 800136e:	f003 f941 	bl	80045f4 <GPIO_Init>

	/* All rows high */
	KEYPAD_INT_SetRow(0);
 8001372:	2000      	movs	r0, #0
 8001374:	f000 f818 	bl	80013a8 <KEYPAD_INT_SetRow>
}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20013590 	.word	0x20013590
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40020400 	.word	0x40020400

08001390 <KEYPAD_Read>:

KEYPAD_Button_t KEYPAD_Read(void) {
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
	return KeypadStatus;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <KEYPAD_Read+0x14>)
 8001396:	781b      	ldrb	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000010 	.word	0x20000010

080013a8 <KEYPAD_INT_SetRow>:

/* Private */
void KEYPAD_INT_SetRow(uint8_t row) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_ROW_1_HIGH;
 80013b2:	2201      	movs	r2, #1
 80013b4:	210b      	movs	r1, #11
 80013b6:	481d      	ldr	r0, [pc, #116]	; (800142c <KEYPAD_INT_SetRow+0x84>)
 80013b8:	f003 face 	bl	8004958 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_2_HIGH;
 80013bc:	2201      	movs	r2, #1
 80013be:	2100      	movs	r1, #0
 80013c0:	481b      	ldr	r0, [pc, #108]	; (8001430 <KEYPAD_INT_SetRow+0x88>)
 80013c2:	f003 fac9 	bl	8004958 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_3_HIGH;
 80013c6:	2201      	movs	r2, #1
 80013c8:	2102      	movs	r1, #2
 80013ca:	4819      	ldr	r0, [pc, #100]	; (8001430 <KEYPAD_INT_SetRow+0x88>)
 80013cc:	f003 fac4 	bl	8004958 <GPIO_WriteToOutputPin>
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large)
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <KEYPAD_INT_SetRow+0x8c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d104      	bne.n	80013e2 <KEYPAD_INT_SetRow+0x3a>
		KEYPAD_ROW_4_HIGH;
 80013d8:	2201      	movs	r2, #1
 80013da:	2104      	movs	r1, #4
 80013dc:	4814      	ldr	r0, [pc, #80]	; (8001430 <KEYPAD_INT_SetRow+0x88>)
 80013de:	f003 fabb 	bl	8004958 <GPIO_WriteToOutputPin>

	/* Set row low */
	if (row == 1)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d104      	bne.n	80013f2 <KEYPAD_INT_SetRow+0x4a>
		KEYPAD_ROW_1_LOW;
 80013e8:	2200      	movs	r2, #0
 80013ea:	210b      	movs	r1, #11
 80013ec:	480f      	ldr	r0, [pc, #60]	; (800142c <KEYPAD_INT_SetRow+0x84>)
 80013ee:	f003 fab3 	bl	8004958 <GPIO_WriteToOutputPin>
	if (row == 2)
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d104      	bne.n	8001402 <KEYPAD_INT_SetRow+0x5a>
		KEYPAD_ROW_2_LOW;
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <KEYPAD_INT_SetRow+0x88>)
 80013fe:	f003 faab 	bl	8004958 <GPIO_WriteToOutputPin>
	if (row == 3)
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b03      	cmp	r3, #3
 8001406:	d104      	bne.n	8001412 <KEYPAD_INT_SetRow+0x6a>
		KEYPAD_ROW_3_LOW;
 8001408:	2200      	movs	r2, #0
 800140a:	2102      	movs	r1, #2
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <KEYPAD_INT_SetRow+0x88>)
 800140e:	f003 faa3 	bl	8004958 <GPIO_WriteToOutputPin>
	if (row == 4)
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b04      	cmp	r3, #4
 8001416:	d104      	bne.n	8001422 <KEYPAD_INT_SetRow+0x7a>
		KEYPAD_ROW_4_LOW;
 8001418:	2200      	movs	r2, #0
 800141a:	2104      	movs	r1, #4
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <KEYPAD_INT_SetRow+0x88>)
 800141e:	f003 fa9b 	bl	8004958 <GPIO_WriteToOutputPin>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	20013590 	.word	0x20013590

08001438 <KEYPAD_INT_CheckColumn>:

uint8_t KEYPAD_INT_CheckColumn(uint8_t row) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	/* Read columns */

	/* Scan column 1 */
	if (KEYPAD_COLUMN_1_CHECK) {
 8001442:	2106      	movs	r1, #6
 8001444:	481f      	ldr	r0, [pc, #124]	; (80014c4 <KEYPAD_INT_CheckColumn+0x8c>)
 8001446:	f003 fa71 	bl	800492c <GPIO_ReadFromInputPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <KEYPAD_INT_CheckColumn+0x24>
		return KEYPAD_INT_Buttons[row - 1][0];
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	3b01      	subs	r3, #1
 8001454:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <KEYPAD_INT_CheckColumn+0x90>)
 8001456:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800145a:	e02e      	b.n	80014ba <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 2 */
	if (KEYPAD_COLUMN_2_CHECK) {
 800145c:	2103      	movs	r1, #3
 800145e:	481b      	ldr	r0, [pc, #108]	; (80014cc <KEYPAD_INT_CheckColumn+0x94>)
 8001460:	f003 fa64 	bl	800492c <GPIO_ReadFromInputPin>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d106      	bne.n	8001478 <KEYPAD_INT_CheckColumn+0x40>
		return KEYPAD_INT_Buttons[row - 1][1];
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	3b01      	subs	r3, #1
 800146e:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <KEYPAD_INT_CheckColumn+0x90>)
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	e020      	b.n	80014ba <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 3 */
	if (KEYPAD_COLUMN_3_CHECK) {
 8001478:	2105      	movs	r1, #5
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <KEYPAD_INT_CheckColumn+0x94>)
 800147c:	f003 fa56 	bl	800492c <GPIO_ReadFromInputPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <KEYPAD_INT_CheckColumn+0x5c>
		return KEYPAD_INT_Buttons[row - 1][2];
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	3b01      	subs	r3, #1
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <KEYPAD_INT_CheckColumn+0x90>)
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	e012      	b.n	80014ba <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 4 */
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large && KEYPAD_COLUMN_4_CHECK) {
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <KEYPAD_INT_CheckColumn+0x98>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10d      	bne.n	80014b8 <KEYPAD_INT_CheckColumn+0x80>
 800149c:	2107      	movs	r1, #7
 800149e:	480b      	ldr	r0, [pc, #44]	; (80014cc <KEYPAD_INT_CheckColumn+0x94>)
 80014a0:	f003 fa44 	bl	800492c <GPIO_ReadFromInputPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <KEYPAD_INT_CheckColumn+0x80>
		return KEYPAD_INT_Buttons[row - 1][3];
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <KEYPAD_INT_CheckColumn+0x90>)
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	78db      	ldrb	r3, [r3, #3]
 80014b6:	e000      	b.n	80014ba <KEYPAD_INT_CheckColumn+0x82>
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 80014b8:	23ff      	movs	r3, #255	; 0xff
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	20000000 	.word	0x20000000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	20013590 	.word	0x20013590

080014d4 <KEYPAD_INT_Read>:

uint8_t KEYPAD_INT_Read(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	KEYPAD_INT_SetRow(1);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff ff64 	bl	80013a8 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(1);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff ffa9 	bl	8001438 <KEYPAD_INT_CheckColumn>
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2bff      	cmp	r3, #255	; 0xff
 80014ee:	d001      	beq.n	80014f4 <KEYPAD_INT_Read+0x20>
		return check;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	e02b      	b.n	800154c <KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	KEYPAD_INT_SetRow(2);
 80014f4:	2002      	movs	r0, #2
 80014f6:	f7ff ff57 	bl	80013a8 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(2);
 80014fa:	2002      	movs	r0, #2
 80014fc:	f7ff ff9c 	bl	8001438 <KEYPAD_INT_CheckColumn>
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2bff      	cmp	r3, #255	; 0xff
 8001508:	d001      	beq.n	800150e <KEYPAD_INT_Read+0x3a>
		return check;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	e01e      	b.n	800154c <KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	KEYPAD_INT_SetRow(3);
 800150e:	2003      	movs	r0, #3
 8001510:	f7ff ff4a 	bl	80013a8 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(3);
 8001514:	2003      	movs	r0, #3
 8001516:	f7ff ff8f 	bl	8001438 <KEYPAD_INT_CheckColumn>
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2bff      	cmp	r3, #255	; 0xff
 8001522:	d001      	beq.n	8001528 <KEYPAD_INT_Read+0x54>
		return check;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	e011      	b.n	800154c <KEYPAD_INT_Read+0x78>
	}

	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large) {
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <KEYPAD_INT_Read+0x80>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10c      	bne.n	800154a <KEYPAD_INT_Read+0x76>
		/* Set row 4 to LOW */
		KEYPAD_INT_SetRow(4);
 8001530:	2004      	movs	r0, #4
 8001532:	f7ff ff39 	bl	80013a8 <KEYPAD_INT_SetRow>
		/* Check columns */
		check = KEYPAD_INT_CheckColumn(4);
 8001536:	2004      	movs	r0, #4
 8001538:	f7ff ff7e 	bl	8001438 <KEYPAD_INT_CheckColumn>
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NOPRESSED) {
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d001      	beq.n	800154a <KEYPAD_INT_Read+0x76>
			return check;
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	e000      	b.n	800154c <KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 800154a:	23ff      	movs	r3, #255	; 0xff
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20013590 	.word	0x20013590

08001558 <KEYPAD_Hold_Button>:

KEYPAD_Button_t KEYPAD_Hold_Button(KEYPAD_Button_t button) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	return button | 0x80;
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001568:	b2db      	uxtb	r3, r3
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <KEYPAD_Update>:

void KEYPAD_Update(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	KeypadStatus = (KEYPAD_Button_t) KEYPAD_INT_Read();
 800157c:	f7ff ffaa 	bl	80014d4 <KEYPAD_INT_Read>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b01      	ldr	r3, [pc, #4]	; (800158c <KEYPAD_Update+0x14>)
 8001586:	701a      	strb	r2, [r3, #0]
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000010 	.word	0x20000010

08001590 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 800159a:	2101      	movs	r1, #1
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <LCD5110_send+0x40>)
 800159e:	f003 fe2d 	bl	80051fc <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2101      	movs	r1, #1
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <LCD5110_send+0x44>)
 80015a8:	f003 f9d6 	bl	8004958 <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <LCD5110_send+0x40>)
 80015b2:	f003 fdf8 	bl	80051a6 <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2101      	movs	r1, #1
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <LCD5110_send+0x44>)
 80015bc:	f003 f9cc 	bl	8004958 <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 80015c0:	2100      	movs	r1, #0
 80015c2:	4803      	ldr	r0, [pc, #12]	; (80015d0 <LCD5110_send+0x40>)
 80015c4:	f003 fe1a 	bl	80051fc <SPI_PeripheralControl>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40013000 	.word	0x40013000
 80015d4:	40020400 	.word	0x40020400

080015d8 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d002      	beq.n	80015f4 <LCD5110_Pin+0x1c>
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d00f      	beq.n	8001612 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 80015f2:	e01d      	b.n	8001630 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2105      	movs	r1, #5
 80015fe:	480e      	ldr	r0, [pc, #56]	; (8001638 <LCD5110_Pin+0x60>)
 8001600:	f003 f9aa 	bl	8004958 <GPIO_WriteToOutputPin>
			break;
 8001604:	e014      	b.n	8001630 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2105      	movs	r1, #5
 800160a:	480b      	ldr	r0, [pc, #44]	; (8001638 <LCD5110_Pin+0x60>)
 800160c:	f003 f9a4 	bl	8004958 <GPIO_WriteToOutputPin>
			break;
 8001610:	e00e      	b.n	8001630 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 8001618:	2201      	movs	r2, #1
 800161a:	2107      	movs	r1, #7
 800161c:	4807      	ldr	r0, [pc, #28]	; (800163c <LCD5110_Pin+0x64>)
 800161e:	f003 f99b 	bl	8004958 <GPIO_WriteToOutputPin>
			break;
 8001622:	e004      	b.n	800162e <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8001624:	2200      	movs	r2, #0
 8001626:	2107      	movs	r1, #7
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <LCD5110_Pin+0x64>)
 800162a:	f003 f995 	bl	8004958 <GPIO_WriteToOutputPin>
			break;
 800162e:	bf00      	nop
	}
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020800 	.word	0x40020800
 800163c:	40021000 	.word	0x40021000

08001640 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e002      	b.n	8001654 <LCD5110_Delay+0x14>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3301      	adds	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	d8f8      	bhi.n	800164e <LCD5110_Delay+0xe>
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b08e      	sub	sp, #56	; 0x38
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 8001676:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <LCD5110_Init+0x138>)
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800167a:	2302      	movs	r3, #2
 800167c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8001680:	2305      	movs	r3, #5
 8001682:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001692:	2302      	movs	r3, #2
 8001694:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8001698:	2305      	movs	r3, #5
 800169a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800169e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 ffa6 	bl	80045f4 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80016a8:	2307      	movs	r3, #7
 80016aa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80016ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 ff9e 	bl	80045f4 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 80016b8:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <LCD5110_Init+0x13c>)
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 80016d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 ff8b 	bl	80045f4 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 80016de:	4b33      	ldr	r3, [pc, #204]	; (80017ac <LCD5110_Init+0x140>)
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 80016e2:	2305      	movs	r3, #5
 80016e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80016e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 ff81 	bl	80045f4 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 80016f2:	4b2f      	ldr	r3, [pc, #188]	; (80017b0 <LCD5110_Init+0x144>)
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 80016f6:	2307      	movs	r3, #7
 80016f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80016fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001700:	4618      	mov	r0, r3
 8001702:	f002 ff77 	bl	80045f4 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <LCD5110_Init+0x148>)
 8001708:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800170a:	2301      	movs	r3, #1
 800170c:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 800170e:	2301      	movs	r3, #1
 8001710:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8001712:	2302      	movs	r3, #2
 8001714:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8001716:	2300      	movs	r3, #0
 8001718:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 800171a:	2300      	movs	r3, #0
 800171c:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 800171e:	2300      	movs	r3, #0
 8001720:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 8001722:	2300      	movs	r3, #0
 8001724:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fce0 	bl	80050f0 <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 8001730:	2101      	movs	r1, #1
 8001732:	4820      	ldr	r0, [pc, #128]	; (80017b4 <LCD5110_Init+0x148>)
 8001734:	f003 fd7e 	bl	8005234 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 8001738:	2100      	movs	r1, #0
 800173a:	2002      	movs	r0, #2
 800173c:	f7ff ff4c 	bl	80015d8 <LCD5110_Pin>
	LCD5110_Delay(10000);
 8001740:	f242 7010 	movw	r0, #10000	; 0x2710
 8001744:	f7ff ff7c 	bl	8001640 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 8001748:	2101      	movs	r1, #1
 800174a:	2002      	movs	r0, #2
 800174c:	f7ff ff44 	bl	80015d8 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 8001750:	2121      	movs	r1, #33	; 0x21
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f830 	bl	80017b8 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 8001758:	2114      	movs	r1, #20
 800175a:	2000      	movs	r0, #0
 800175c:	f000 f82c 	bl	80017b8 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da01      	bge.n	800176c <LCD5110_Init+0x100>
		contrast = 0x7F;
 8001768:	237f      	movs	r3, #127	; 0x7f
 800176a:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f81e 	bl	80017b8 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 800177c:	2120      	movs	r1, #32
 800177e:	2000      	movs	r0, #0
 8001780:	f000 f81a 	bl	80017b8 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001784:	210c      	movs	r1, #12
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f816 	bl	80017b8 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 800178c:	f000 f8b8 	bl	8001900 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001790:	210c      	movs	r1, #12
 8001792:	2000      	movs	r0, #0
 8001794:	f000 f810 	bl	80017b8 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 8001798:	f000 f88c 	bl	80018b4 <LCD5110_Clear>
}
 800179c:	bf00      	nop
 800179e:	3738      	adds	r7, #56	; 0x38
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40013000 	.word	0x40013000

080017b8 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <LCD5110_Write+0x24>
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d109      	bne.n	80017e6 <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 80017d2:	2101      	movs	r1, #1
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff feff 	bl	80015d8 <LCD5110_Pin>
			break;
 80017da:	e005      	b.n	80017e8 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 80017dc:	2100      	movs	r1, #0
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff fefa 	bl	80015d8 <LCD5110_Pin>
			break;
 80017e4:	e000      	b.n	80017e8 <LCD5110_Write+0x30>
		default: break;
 80017e6:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fed0 	bl	8001590 <LCD5110_send>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	460b      	mov	r3, r1
 8001804:	71bb      	strb	r3, [r7, #6]
 8001806:	4613      	mov	r3, r2
 8001808:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b53      	cmp	r3, #83	; 0x53
 800180e:	d849      	bhi.n	80018a4 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 8001810:	79bb      	ldrb	r3, [r7, #6]
 8001812:	2b2f      	cmp	r3, #47	; 0x2f
 8001814:	d848      	bhi.n	80018a8 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01d      	beq.n	8001858 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 800181c:	79fa      	ldrb	r2, [r7, #7]
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	b2d8      	uxtb	r0, r3
 8001824:	4601      	mov	r1, r0
 8001826:	2354      	movs	r3, #84	; 0x54
 8001828:	fb03 f301 	mul.w	r3, r3, r1
 800182c:	4413      	add	r3, r2
 800182e:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <LCD5110_DrawPixel+0xb8>)
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	b25a      	sxtb	r2, r3
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	b25b      	sxtb	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b259      	sxtb	r1, r3
 8001846:	79fa      	ldrb	r2, [r7, #7]
 8001848:	2354      	movs	r3, #84	; 0x54
 800184a:	fb03 f300 	mul.w	r3, r3, r0
 800184e:	4413      	add	r3, r2
 8001850:	b2c9      	uxtb	r1, r1
 8001852:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <LCD5110_DrawPixel+0xb8>)
 8001854:	54d1      	strb	r1, [r2, r3]
 8001856:	e01e      	b.n	8001896 <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	b2d8      	uxtb	r0, r3
 8001860:	4601      	mov	r1, r0
 8001862:	2354      	movs	r3, #84	; 0x54
 8001864:	fb03 f301 	mul.w	r3, r3, r1
 8001868:	4413      	add	r3, r2
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <LCD5110_DrawPixel+0xb8>)
 800186c:	5cd3      	ldrb	r3, [r2, r3]
 800186e:	b25a      	sxtb	r2, r3
 8001870:	79bb      	ldrb	r3, [r7, #6]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	b25b      	sxtb	r3, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	b25b      	sxtb	r3, r3
 8001882:	4013      	ands	r3, r2
 8001884:	b259      	sxtb	r1, r3
 8001886:	79fa      	ldrb	r2, [r7, #7]
 8001888:	2354      	movs	r3, #84	; 0x54
 800188a:	fb03 f300 	mul.w	r3, r3, r0
 800188e:	4413      	add	r3, r2
 8001890:	b2c9      	uxtb	r1, r1
 8001892:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <LCD5110_DrawPixel+0xb8>)
 8001894:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	79fa      	ldrb	r2, [r7, #7]
 800189a:	79b9      	ldrb	r1, [r7, #6]
 800189c:	79f8      	ldrb	r0, [r7, #7]
 800189e:	f000 f89d 	bl	80019dc <LCD5110_UpdateArea>
 80018a2:	e002      	b.n	80018aa <LCD5110_DrawPixel+0xb2>
		return;
 80018a4:	bf00      	nop
 80018a6:	e000      	b.n	80018aa <LCD5110_DrawPixel+0xb2>
		return;
 80018a8:	bf00      	nop
}
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20013598 	.word	0x20013598

080018b4 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 80018ba:	f000 f821 	bl	8001900 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	e007      	b.n	80018d4 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <LCD5110_Clear+0x48>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3301      	adds	r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80018da:	d3f3      	bcc.n	80018c4 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 80018dc:	2100      	movs	r1, #0
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 f8b8 	bl	8001a54 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 80018e4:	232f      	movs	r3, #47	; 0x2f
 80018e6:	2253      	movs	r2, #83	; 0x53
 80018e8:	2100      	movs	r1, #0
 80018ea:	2000      	movs	r0, #0
 80018ec:	f000 f876 	bl	80019dc <LCD5110_UpdateArea>
	LCD5110_Refresh();
 80018f0:	f000 f812 	bl	8001918 <LCD5110_Refresh>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20013598 	.word	0x20013598

08001900 <LCD5110_Home>:

void LCD5110_Home(void) {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff ff56 	bl	80017b8 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 800190c:	2140      	movs	r1, #64	; 0x40
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff ff52 	bl	80017b8 <LCD5110_Write>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 800191e:	2300      	movs	r3, #0
 8001920:	71fb      	strb	r3, [r7, #7]
 8001922:	e03b      	b.n	800199c <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <LCD5110_Refresh+0xb0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	3301      	adds	r3, #1
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	429a      	cmp	r2, r3
 8001932:	dc2f      	bgt.n	8001994 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4a24      	ldr	r2, [pc, #144]	; (80019cc <LCD5110_Refresh+0xb4>)
 800193a:	7812      	ldrb	r2, [r2, #0]
 800193c:	4293      	cmp	r3, r2
 800193e:	dc31      	bgt.n	80019a4 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4619      	mov	r1, r3
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff ff34 	bl	80017b8 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <LCD5110_Refresh+0xb8>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001958:	b2db      	uxtb	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff ff2b 	bl	80017b8 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <LCD5110_Refresh+0xb8>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	71bb      	strb	r3, [r7, #6]
 8001968:	e00e      	b.n	8001988 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2254      	movs	r2, #84	; 0x54
 800196e:	fb02 f203 	mul.w	r2, r2, r3
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	4413      	add	r3, r2
 8001976:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <LCD5110_Refresh+0xbc>)
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	4619      	mov	r1, r3
 800197c:	2001      	movs	r0, #1
 800197e:	f7ff ff1b 	bl	80017b8 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	3301      	adds	r3, #1
 8001986:	71bb      	strb	r3, [r7, #6]
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <LCD5110_Refresh+0xc0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	79ba      	ldrb	r2, [r7, #6]
 800198e:	429a      	cmp	r2, r3
 8001990:	d9eb      	bls.n	800196a <LCD5110_Refresh+0x52>
 8001992:	e000      	b.n	8001996 <LCD5110_Refresh+0x7e>
			continue;
 8001994:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	3301      	adds	r3, #1
 800199a:	71fb      	strb	r3, [r7, #7]
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d9c0      	bls.n	8001924 <LCD5110_Refresh+0xc>
 80019a2:	e000      	b.n	80019a6 <LCD5110_Refresh+0x8e>
			break;
 80019a4:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <LCD5110_Refresh+0xb8>)
 80019a8:	2253      	movs	r2, #83	; 0x53
 80019aa:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <LCD5110_Refresh+0xc0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <LCD5110_Refresh+0xb0>)
 80019b4:	222f      	movs	r2, #47	; 0x2f
 80019b6:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <LCD5110_Refresh+0xb4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000222 	.word	0x20000222
 80019cc:	20000223 	.word	0x20000223
 80019d0:	20000220 	.word	0x20000220
 80019d4:	20013598 	.word	0x20013598
 80019d8:	20000221 	.word	0x20000221

080019dc <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 80019dc:	b490      	push	{r4, r7}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4604      	mov	r4, r0
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4623      	mov	r3, r4
 80019ec:	71fb      	strb	r3, [r7, #7]
 80019ee:	4603      	mov	r3, r0
 80019f0:	71bb      	strb	r3, [r7, #6]
 80019f2:	460b      	mov	r3, r1
 80019f4:	717b      	strb	r3, [r7, #5]
 80019f6:	4613      	mov	r3, r2
 80019f8:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <LCD5110_UpdateArea+0x68>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	79fa      	ldrb	r2, [r7, #7]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d202      	bcs.n	8001a0a <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8001a04:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <LCD5110_UpdateArea+0x68>)
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <LCD5110_UpdateArea+0x6c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	797a      	ldrb	r2, [r7, #5]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d902      	bls.n	8001a1a <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8001a14:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <LCD5110_UpdateArea+0x6c>)
 8001a16:	797b      	ldrb	r3, [r7, #5]
 8001a18:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <LCD5110_UpdateArea+0x70>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	79ba      	ldrb	r2, [r7, #6]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d202      	bcs.n	8001a2a <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8001a24:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <LCD5110_UpdateArea+0x70>)
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <LCD5110_UpdateArea+0x74>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	793a      	ldrb	r2, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d902      	bls.n	8001a3a <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8001a34:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <LCD5110_UpdateArea+0x74>)
 8001a36:	793b      	ldrb	r3, [r7, #4]
 8001a38:	7013      	strb	r3, [r2, #0]
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc90      	pop	{r4, r7}
 8001a42:	4770      	bx	lr
 8001a44:	20000220 	.word	0x20000220
 8001a48:	20000221 	.word	0x20000221
 8001a4c:	20000222 	.word	0x20000222
 8001a50:	20000223 	.word	0x20000223

08001a54 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	4613      	mov	r3, r2
 8001a62:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <LCD5110_GotoXY+0x28>)
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <LCD5110_GotoXY+0x2c>)
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	7013      	strb	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	20013594 	.word	0x20013594
 8001a80:	20013595 	.word	0x20013595

08001a84 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	71bb      	strb	r3, [r7, #6]
 8001a92:	4613      	mov	r3, r2
 8001a94:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8001a96:	797b      	ldrb	r3, [r7, #5]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	e003      	b.n	8001aae <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 8001aaa:	2308      	movs	r3, #8
 8001aac:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <LCD5110_Putc+0x144>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	2b54      	cmp	r3, #84	; 0x54
 8001aba:	dd09      	ble.n	8001ad0 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8001abc:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <LCD5110_Putc+0x148>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <LCD5110_Putc+0x148>)
 8001ac8:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 8001aca:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <LCD5110_Putc+0x144>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	737b      	strb	r3, [r7, #13]
 8001ad4:	e068      	b.n	8001ba8 <LCD5110_Putc+0x124>
		if (c < 32) {
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b1f      	cmp	r3, #31
 8001ada:	d91c      	bls.n	8001b16 <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8001adc:	797b      	ldrb	r3, [r7, #5]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f1a3 0220 	sub.w	r2, r3, #32
 8001ae8:	7b79      	ldrb	r1, [r7, #13]
 8001aea:	4839      	ldr	r0, [pc, #228]	; (8001bd0 <LCD5110_Putc+0x14c>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	4403      	add	r3, r0
 8001af4:	440b      	add	r3, r1
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	733b      	strb	r3, [r7, #12]
 8001afa:	e00c      	b.n	8001b16 <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f1a3 0220 	sub.w	r2, r3, #32
 8001b02:	7b79      	ldrb	r1, [r7, #13]
 8001b04:	4833      	ldr	r0, [pc, #204]	; (8001bd4 <LCD5110_Putc+0x150>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4403      	add	r3, r0
 8001b10:	440b      	add	r3, r1
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8001b16:	7b3b      	ldrb	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <LCD5110_Putc+0xa4>
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <LCD5110_Putc+0xa4>
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d13b      	bne.n	8001ba0 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	72fb      	strb	r3, [r7, #11]
 8001b2c:	e02d      	b.n	8001b8a <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 8001b2e:	79bb      	ldrb	r3, [r7, #6]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d112      	bne.n	8001b5a <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <LCD5110_Putc+0x144>)
 8001b36:	7818      	ldrb	r0, [r3, #0]
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <LCD5110_Putc+0x148>)
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	7afb      	ldrb	r3, [r7, #11]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b2d9      	uxtb	r1, r3
 8001b42:	7b3a      	ldrb	r2, [r7, #12]
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	fa42 f303 	asr.w	r3, r2, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	f7ff fe50 	bl	80017f8 <LCD5110_DrawPixel>
 8001b58:	e014      	b.n	8001b84 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <LCD5110_Putc+0x144>)
 8001b5c:	7818      	ldrb	r0, [r3, #0]
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <LCD5110_Putc+0x148>)
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	7afb      	ldrb	r3, [r7, #11]
 8001b64:	4413      	add	r3, r2
 8001b66:	b2d9      	uxtb	r1, r3
 8001b68:	7b3a      	ldrb	r2, [r7, #12]
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
 8001b6c:	fa42 f303 	asr.w	r3, r2, r3
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f7ff fe3a 	bl	80017f8 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8001b84:	7afb      	ldrb	r3, [r7, #11]
 8001b86:	3301      	adds	r3, #1
 8001b88:	72fb      	strb	r3, [r7, #11]
 8001b8a:	7afa      	ldrb	r2, [r7, #11]
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3cd      	bcc.n	8001b2e <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <LCD5110_Putc+0x144>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <LCD5110_Putc+0x144>)
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e000      	b.n	8001ba2 <LCD5110_Putc+0x11e>
			continue;
 8001ba0:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8001ba2:	7b7b      	ldrb	r3, [r7, #13]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	737b      	strb	r3, [r7, #13]
 8001ba8:	7b7a      	ldrb	r2, [r7, #13]
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	db91      	blt.n	8001ad6 <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <LCD5110_Putc+0x144>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <LCD5110_Putc+0x144>)
 8001bbc:	701a      	strb	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20013594 	.word	0x20013594
 8001bcc:	20013595 	.word	0x20013595
 8001bd0:	0800b2c8 	.word	0x0800b2c8
 8001bd4:	0800b080 	.word	0x0800b080

08001bd8 <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
 8001be4:	4613      	mov	r3, r2
 8001be6:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8001be8:	e008      	b.n	8001bfc <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	78ba      	ldrb	r2, [r7, #2]
 8001bf4:	78f9      	ldrb	r1, [r7, #3]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff44 	bl	8001a84 <LCD5110_Putc>
	while (*c) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f2      	bne.n	8001bea <LCD5110_Puts+0x12>
	}
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f103 0208 	add.w	r2, r3, #8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c26:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f103 0208 	add.w	r2, r3, #8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f103 0208 	add.w	r2, r3, #8
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	601a      	str	r2, [r3, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cc6:	d103      	bne.n	8001cd0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e00c      	b.n	8001cea <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e002      	b.n	8001cde <vListInsert+0x2e>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d2f6      	bcs.n	8001cd8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6892      	ldr	r2, [r2, #8]
 8001d38:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6852      	ldr	r2, [r2, #4]
 8001d42:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d103      	bne.n	8001d56 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10a      	bne.n	8001da2 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d90:	f383 8811 	msr	BASEPRI, r3
 8001d94:	f3bf 8f6f 	isb	sy
 8001d98:	f3bf 8f4f 	dsb	sy
 8001d9c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001d9e:	bf00      	nop
 8001da0:	e7fe      	b.n	8001da0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001da2:	f002 f879 	bl	8003e98 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dae:	68f9      	ldr	r1, [r7, #12]
 8001db0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	441a      	add	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	441a      	add	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	22ff      	movs	r2, #255	; 0xff
 8001de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	22ff      	movs	r2, #255	; 0xff
 8001dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d114      	bne.n	8001e22 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01a      	beq.n	8001e36 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3310      	adds	r3, #16
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 f94d 	bl	80030a4 <xTaskRemoveFromEventList>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d012      	beq.n	8001e36 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <xQueueGenericReset+0xcc>)
 8001e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f3bf 8f4f 	dsb	sy
 8001e1c:	f3bf 8f6f 	isb	sy
 8001e20:	e009      	b.n	8001e36 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3310      	adds	r3, #16
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fef1 	bl	8001c0e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3324      	adds	r3, #36	; 0x24
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff feec 	bl	8001c0e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001e36:	f002 f85f 	bl	8003ef8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	e000ed04 	.word	0xe000ed04

08001e48 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	4613      	mov	r3, r2
 8001e54:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10a      	bne.n	8001e72 <xQueueGenericCreate+0x2a>
        __asm volatile
 8001e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e60:	f383 8811 	msr	BASEPRI, r3
 8001e64:	f3bf 8f6f 	isb	sy
 8001e68:	f3bf 8f4f 	dsb	sy
 8001e6c:	61bb      	str	r3, [r7, #24]
    }
 8001e6e:	bf00      	nop
 8001e70:	e7fe      	b.n	8001e70 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d006      	beq.n	8001e90 <xQueueGenericCreate+0x48>
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d101      	bne.n	8001e94 <xQueueGenericCreate+0x4c>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <xQueueGenericCreate+0x4e>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10a      	bne.n	8001eb0 <xQueueGenericCreate+0x68>
        __asm volatile
 8001e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	617b      	str	r3, [r7, #20]
    }
 8001eac:	bf00      	nop
 8001eae:	e7fe      	b.n	8001eae <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001eb6:	d90a      	bls.n	8001ece <xQueueGenericCreate+0x86>
        __asm volatile
 8001eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ebc:	f383 8811 	msr	BASEPRI, r3
 8001ec0:	f3bf 8f6f 	isb	sy
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	613b      	str	r3, [r7, #16]
    }
 8001eca:	bf00      	nop
 8001ecc:	e7fe      	b.n	8001ecc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	3350      	adds	r3, #80	; 0x50
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 f90a 	bl	80040ec <pvPortMalloc>
 8001ed8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00d      	beq.n	8001efc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	3350      	adds	r3, #80	; 0x50
 8001ee8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001eea:	79fa      	ldrb	r2, [r7, #7]
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f805 	bl	8001f06 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001efc:	6a3b      	ldr	r3, [r7, #32]
    }
 8001efe:	4618      	mov	r0, r3
 8001f00:	3728      	adds	r7, #40	; 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e002      	b.n	8001f28 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f34:	2101      	movs	r1, #1
 8001f36:	69b8      	ldr	r0, [r7, #24]
 8001f38:	f7ff ff1e 	bl	8001d78 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	2073      	movs	r0, #115	; 0x73
 8001f4c:	f003 ff12 	bl	8005d74 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b090      	sub	sp, #64	; 0x40
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10a      	bne.n	8001f8a <xQueueGenericSend+0x32>
        __asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001f86:	bf00      	nop
 8001f88:	e7fe      	b.n	8001f88 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d103      	bne.n	8001f98 <xQueueGenericSend+0x40>
 8001f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <xQueueGenericSend+0x44>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <xQueueGenericSend+0x46>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <xQueueGenericSend+0x60>
        __asm volatile
 8001fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001fb4:	bf00      	nop
 8001fb6:	e7fe      	b.n	8001fb6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d103      	bne.n	8001fc6 <xQueueGenericSend+0x6e>
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <xQueueGenericSend+0x72>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <xQueueGenericSend+0x74>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <xQueueGenericSend+0x8e>
        __asm volatile
 8001fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	623b      	str	r3, [r7, #32]
    }
 8001fe2:	bf00      	nop
 8001fe4:	e7fe      	b.n	8001fe4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001fe6:	f001 f9fd 	bl	80033e4 <xTaskGetSchedulerState>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <xQueueGenericSend+0x9e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <xQueueGenericSend+0xa2>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <xQueueGenericSend+0xa4>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10a      	bne.n	8002016 <xQueueGenericSend+0xbe>
        __asm volatile
 8002000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002004:	f383 8811 	msr	BASEPRI, r3
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	f3bf 8f4f 	dsb	sy
 8002010:	61fb      	str	r3, [r7, #28]
    }
 8002012:	bf00      	nop
 8002014:	e7fe      	b.n	8002014 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002016:	f001 ff3f 	bl	8003e98 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800201a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002022:	429a      	cmp	r2, r3
 8002024:	d302      	bcc.n	800202c <xQueueGenericSend+0xd4>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d136      	bne.n	800209a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202e:	4618      	mov	r0, r3
 8002030:	f004 fc0a 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	460b      	mov	r3, r1
 800203e:	4601      	mov	r1, r0
 8002040:	205a      	movs	r0, #90	; 0x5a
 8002042:	f003 ff0d 	bl	8005e60 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800204c:	f000 fa78 	bl	8002540 <prvCopyDataToQueue>
 8002050:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	2b00      	cmp	r3, #0
 8002058:	d010      	beq.n	800207c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205c:	3324      	adds	r3, #36	; 0x24
 800205e:	4618      	mov	r0, r3
 8002060:	f001 f820 	bl	80030a4 <xTaskRemoveFromEventList>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d013      	beq.n	8002092 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800206a:	4b4d      	ldr	r3, [pc, #308]	; (80021a0 <xQueueGenericSend+0x248>)
 800206c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f3bf 8f4f 	dsb	sy
 8002076:	f3bf 8f6f 	isb	sy
 800207a:	e00a      	b.n	8002092 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <xQueueGenericSend+0x248>)
 8002084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002092:	f001 ff31 	bl	8003ef8 <vPortExitCritical>
                return pdPASS;
 8002096:	2301      	movs	r3, #1
 8002098:	e07d      	b.n	8002196 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d110      	bne.n	80020c2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80020a0:	f001 ff2a 	bl	8003ef8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a6:	4618      	mov	r0, r3
 80020a8:	f004 fbce 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	460b      	mov	r3, r1
 80020b6:	4601      	mov	r1, r0
 80020b8:	205a      	movs	r0, #90	; 0x5a
 80020ba:	f003 fed1 	bl	8005e60 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	e069      	b.n	8002196 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80020c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d106      	bne.n	80020d6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4618      	mov	r0, r3
 80020ce:	f001 f84f 	bl	8003170 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80020d2:	2301      	movs	r3, #1
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80020d6:	f001 ff0f 	bl	8003ef8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80020da:	f000 fda9 	bl	8002c30 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80020de:	f001 fedb 	bl	8003e98 <vPortEnterCritical>
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ee:	d103      	bne.n	80020f8 <xQueueGenericSend+0x1a0>
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002104:	d103      	bne.n	800210e <xQueueGenericSend+0x1b6>
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800210e:	f001 fef3 	bl	8003ef8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002112:	1d3a      	adds	r2, r7, #4
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f83e 	bl	800319c <xTaskCheckForTimeOut>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d124      	bne.n	8002170 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002128:	f000 fb02 	bl	8002730 <prvIsQueueFull>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d018      	beq.n	8002164 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	3310      	adds	r3, #16
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f000 ff60 	bl	8003000 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002142:	f000 fa8d 	bl	8002660 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002146:	f000 fd81 	bl	8002c4c <xTaskResumeAll>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	f47f af62 	bne.w	8002016 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <xQueueGenericSend+0x248>)
 8002154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	f3bf 8f6f 	isb	sy
 8002162:	e758      	b.n	8002016 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002166:	f000 fa7b 	bl	8002660 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800216a:	f000 fd6f 	bl	8002c4c <xTaskResumeAll>
 800216e:	e752      	b.n	8002016 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002172:	f000 fa75 	bl	8002660 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002176:	f000 fd69 	bl	8002c4c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	4618      	mov	r0, r3
 800217e:	f004 fb63 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	460b      	mov	r3, r1
 800218c:	4601      	mov	r1, r0
 800218e:	205a      	movs	r0, #90	; 0x5a
 8002190:	f003 fe66 	bl	8005e60 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002194:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002196:	4618      	mov	r0, r3
 8002198:	3738      	adds	r7, #56	; 0x38
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000ed04 	.word	0xe000ed04

080021a4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b090      	sub	sp, #64	; 0x40
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80021bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c0:	f383 8811 	msr	BASEPRI, r3
 80021c4:	f3bf 8f6f 	isb	sy
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80021ce:	bf00      	nop
 80021d0:	e7fe      	b.n	80021d0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d103      	bne.n	80021e0 <xQueueGenericSendFromISR+0x3c>
 80021d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <xQueueGenericSendFromISR+0x40>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <xQueueGenericSendFromISR+0x42>
 80021e4:	2300      	movs	r3, #0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80021ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ee:	f383 8811 	msr	BASEPRI, r3
 80021f2:	f3bf 8f6f 	isb	sy
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80021fc:	bf00      	nop
 80021fe:	e7fe      	b.n	80021fe <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d103      	bne.n	800220e <xQueueGenericSendFromISR+0x6a>
 8002206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <xQueueGenericSendFromISR+0x6e>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <xQueueGenericSendFromISR+0x70>
 8002212:	2300      	movs	r3, #0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	623b      	str	r3, [r7, #32]
    }
 800222a:	bf00      	nop
 800222c:	e7fe      	b.n	800222c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800222e:	f001 ff1d 	bl	800406c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002232:	f3ef 8211 	mrs	r2, BASEPRI
 8002236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223a:	f383 8811 	msr	BASEPRI, r3
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	f3bf 8f4f 	dsb	sy
 8002246:	61fa      	str	r2, [r7, #28]
 8002248:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800224a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <xQueueGenericSendFromISR+0xbc>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d148      	bne.n	80022f2 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	4618      	mov	r0, r3
 8002274:	f004 fae8 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 8002278:	4601      	mov	r1, r0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	461a      	mov	r2, r3
 800227e:	2060      	movs	r0, #96	; 0x60
 8002280:	f003 fd1e 	bl	8005cc0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800228a:	f000 f959 	bl	8002540 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800228e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002296:	d112      	bne.n	80022be <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d025      	beq.n	80022ec <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a2:	3324      	adds	r3, #36	; 0x24
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fefd 	bl	80030a4 <xTaskRemoveFromEventList>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01d      	beq.n	80022ec <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01a      	beq.n	80022ec <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e016      	b.n	80022ec <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80022be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80022c2:	2b7f      	cmp	r3, #127	; 0x7f
 80022c4:	d10a      	bne.n	80022dc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80022c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	617b      	str	r3, [r7, #20]
    }
 80022d8:	bf00      	nop
 80022da:	e7fe      	b.n	80022da <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	b25a      	sxtb	r2, r3
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80022ec:	2301      	movs	r3, #1
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80022f0:	e00b      	b.n	800230a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80022f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 faa7 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 80022fa:	4601      	mov	r1, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	2060      	movs	r0, #96	; 0x60
 8002302:	f003 fcdd 	bl	8005cc0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002306:	2300      	movs	r3, #0
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002314:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002318:	4618      	mov	r0, r3
 800231a:	3740      	adds	r7, #64	; 0x40
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b08f      	sub	sp, #60	; 0x3c
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <xQueueReceive+0x30>
        __asm volatile
 800233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233e:	f383 8811 	msr	BASEPRI, r3
 8002342:	f3bf 8f6f 	isb	sy
 8002346:	f3bf 8f4f 	dsb	sy
 800234a:	623b      	str	r3, [r7, #32]
    }
 800234c:	bf00      	nop
 800234e:	e7fe      	b.n	800234e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d103      	bne.n	800235e <xQueueReceive+0x3e>
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <xQueueReceive+0x42>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <xQueueReceive+0x44>
 8002362:	2300      	movs	r3, #0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <xQueueReceive+0x5e>
        __asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	61fb      	str	r3, [r7, #28]
    }
 800237a:	bf00      	nop
 800237c:	e7fe      	b.n	800237c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800237e:	f001 f831 	bl	80033e4 <xTaskGetSchedulerState>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <xQueueReceive+0x6e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <xQueueReceive+0x72>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <xQueueReceive+0x74>
 8002392:	2300      	movs	r3, #0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <xQueueReceive+0x8e>
        __asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	61bb      	str	r3, [r7, #24]
    }
 80023aa:	bf00      	nop
 80023ac:	e7fe      	b.n	80023ac <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80023ae:	f001 fd73 	bl	8003e98 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d02f      	beq.n	800241e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023c2:	f000 f927 	bl	8002614 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	4618      	mov	r0, r3
 80023ca:	f004 fa3d 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 80023ce:	4604      	mov	r4, r0
 80023d0:	2000      	movs	r0, #0
 80023d2:	f004 fa39 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 80023d6:	4602      	mov	r2, r0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2101      	movs	r1, #1
 80023dc:	9100      	str	r1, [sp, #0]
 80023de:	4621      	mov	r1, r4
 80023e0:	205c      	movs	r0, #92	; 0x5c
 80023e2:	f003 fd3d 	bl	8005e60 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	1e5a      	subs	r2, r3, #1
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00f      	beq.n	8002416 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	3310      	adds	r3, #16
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fe52 	bl	80030a4 <xTaskRemoveFromEventList>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002406:	4b4d      	ldr	r3, [pc, #308]	; (800253c <xQueueReceive+0x21c>)
 8002408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002416:	f001 fd6f 	bl	8003ef8 <vPortExitCritical>
                return pdPASS;
 800241a:	2301      	movs	r3, #1
 800241c:	e08a      	b.n	8002534 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d113      	bne.n	800244c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002424:	f001 fd68 	bl	8003ef8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	4618      	mov	r0, r3
 800242c:	f004 fa0c 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 8002430:	4604      	mov	r4, r0
 8002432:	2000      	movs	r0, #0
 8002434:	f004 fa08 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 8002438:	4602      	mov	r2, r0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2101      	movs	r1, #1
 800243e:	9100      	str	r1, [sp, #0]
 8002440:	4621      	mov	r1, r4
 8002442:	205c      	movs	r0, #92	; 0x5c
 8002444:	f003 fd0c 	bl	8005e60 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002448:	2300      	movs	r3, #0
 800244a:	e073      	b.n	8002534 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fe8a 	bl	8003170 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800245c:	2301      	movs	r3, #1
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002460:	f001 fd4a 	bl	8003ef8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002464:	f000 fbe4 	bl	8002c30 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002468:	f001 fd16 	bl	8003e98 <vPortEnterCritical>
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002472:	b25b      	sxtb	r3, r3
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002478:	d103      	bne.n	8002482 <xQueueReceive+0x162>
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002488:	b25b      	sxtb	r3, r3
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800248e:	d103      	bne.n	8002498 <xQueueReceive+0x178>
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002498:	f001 fd2e 	bl	8003ef8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800249c:	1d3a      	adds	r2, r7, #4
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fe79 	bl	800319c <xTaskCheckForTimeOut>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d124      	bne.n	80024fa <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024b2:	f000 f927 	bl	8002704 <prvIsQueueEmpty>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d018      	beq.n	80024ee <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	3324      	adds	r3, #36	; 0x24
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fd9b 	bl	8003000 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80024ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024cc:	f000 f8c8 	bl	8002660 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80024d0:	f000 fbbc 	bl	8002c4c <xTaskResumeAll>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f47f af69 	bne.w	80023ae <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <xQueueReceive+0x21c>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	e75f      	b.n	80023ae <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80024ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024f0:	f000 f8b6 	bl	8002660 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80024f4:	f000 fbaa 	bl	8002c4c <xTaskResumeAll>
 80024f8:	e759      	b.n	80023ae <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80024fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024fc:	f000 f8b0 	bl	8002660 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002500:	f000 fba4 	bl	8002c4c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002506:	f000 f8fd 	bl	8002704 <prvIsQueueEmpty>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	f43f af4e 	beq.w	80023ae <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	4618      	mov	r0, r3
 8002516:	f004 f997 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 800251a:	4604      	mov	r4, r0
 800251c:	2000      	movs	r0, #0
 800251e:	f004 f993 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2101      	movs	r1, #1
 8002528:	9100      	str	r1, [sp, #0]
 800252a:	4621      	mov	r1, r4
 800252c:	205c      	movs	r0, #92	; 0x5c
 800252e:	f003 fc97 	bl	8005e60 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002532:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002534:	4618      	mov	r0, r3
 8002536:	3734      	adds	r7, #52	; 0x34
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	e000ed04 	.word	0xe000ed04

08002540 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10d      	bne.n	800257a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d14d      	bne.n	8002602 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 ff58 	bl	8003420 <xTaskPriorityDisinherit>
 8002570:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	e043      	b.n	8002602 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d119      	bne.n	80025b4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6858      	ldr	r0, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	461a      	mov	r2, r3
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	f005 fdfc 	bl	8008188 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	441a      	add	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d32b      	bcc.n	8002602 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	e026      	b.n	8002602 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	68d8      	ldr	r0, [r3, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	461a      	mov	r2, r3
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	f005 fde2 	bl	8008188 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	425b      	negs	r3, r3
 80025ce:	441a      	add	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d207      	bcs.n	80025f0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	425b      	negs	r3, r3
 80025ea:	441a      	add	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d105      	bne.n	8002602 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	3b01      	subs	r3, #1
 8002600:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800260a:	697b      	ldr	r3, [r7, #20]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d018      	beq.n	8002658 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	441a      	add	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	429a      	cmp	r2, r3
 800263e:	d303      	bcc.n	8002648 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68d9      	ldr	r1, [r3, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	461a      	mov	r2, r3
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	f005 fd98 	bl	8008188 <memcpy>
    }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002668:	f001 fc16 	bl	8003e98 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002672:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002674:	e011      	b.n	800269a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3324      	adds	r3, #36	; 0x24
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fd0e 	bl	80030a4 <xTaskRemoveFromEventList>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800268e:	f000 fdeb 	bl	8003268 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	3b01      	subs	r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	dce9      	bgt.n	8002676 <prvUnlockQueue+0x16>
 80026a2:	e000      	b.n	80026a6 <prvUnlockQueue+0x46>
                        break;
 80026a4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	22ff      	movs	r2, #255	; 0xff
 80026aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80026ae:	f001 fc23 	bl	8003ef8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026b2:	f001 fbf1 	bl	8003e98 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026bc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026be:	e011      	b.n	80026e4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d012      	beq.n	80026ee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3310      	adds	r3, #16
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fce9 	bl	80030a4 <xTaskRemoveFromEventList>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026d8:	f000 fdc6 	bl	8003268 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026dc:	7bbb      	ldrb	r3, [r7, #14]
 80026de:	3b01      	subs	r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	dce9      	bgt.n	80026c0 <prvUnlockQueue+0x60>
 80026ec:	e000      	b.n	80026f0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026ee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	22ff      	movs	r2, #255	; 0xff
 80026f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80026f8:	f001 fbfe 	bl	8003ef8 <vPortExitCritical>
}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800270c:	f001 fbc4 	bl	8003e98 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002718:	2301      	movs	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e001      	b.n	8002722 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002722:	f001 fbe9 	bl	8003ef8 <vPortExitCritical>

    return xReturn;
 8002726:	68fb      	ldr	r3, [r7, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002738:	f001 fbae 	bl	8003e98 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	429a      	cmp	r2, r3
 8002746:	d102      	bne.n	800274e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002748:	2301      	movs	r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e001      	b.n	8002752 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002752:	f001 fbd1 	bl	8003ef8 <vPortExitCritical>

    return xReturn;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e01e      	b.n	80027ae <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002770:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <vQueueAddToRegistry+0x60>)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d115      	bne.n	80027a8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800277c:	4910      	ldr	r1, [pc, #64]	; (80027c0 <vQueueAddToRegistry+0x60>)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <vQueueAddToRegistry+0x60>)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4618      	mov	r0, r3
 8002796:	f004 f857 	bl	8006848 <SEGGER_SYSVIEW_ShrinkId>
 800279a:	4601      	mov	r1, r0
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	2071      	movs	r0, #113	; 0x71
 80027a2:	f003 fa8d 	bl	8005cc0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80027a6:	e006      	b.n	80027b6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b07      	cmp	r3, #7
 80027b2:	d9dd      	bls.n	8002770 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20013790 	.word	0x20013790

080027c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027d4:	f001 fb60 	bl	8003e98 <vPortEnterCritical>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e4:	d103      	bne.n	80027ee <vQueueWaitForMessageRestricted+0x2a>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027fa:	d103      	bne.n	8002804 <vQueueWaitForMessageRestricted+0x40>
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002804:	f001 fb78 	bl	8003ef8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3324      	adds	r3, #36	; 0x24
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fc15 	bl	8003048 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ff1e 	bl	8002660 <prvUnlockQueue>
    }
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af04      	add	r7, sp, #16
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f001 fc53 	bl	80040ec <pvPortMalloc>
 8002846:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00e      	beq.n	800286c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800284e:	2058      	movs	r0, #88	; 0x58
 8002850:	f001 fc4c 	bl	80040ec <pvPortMalloc>
 8002854:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
 8002862:	e005      	b.n	8002870 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f001 fd21 	bl	80042ac <vPortFree>
 800286a:	e001      	b.n	8002870 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d013      	beq.n	800289e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	2300      	movs	r3, #0
 800287a:	9303      	str	r3, [sp, #12]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f80e 	bl	80028ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002892:	69f8      	ldr	r0, [r7, #28]
 8002894:	f000 f8a2 	bl	80029dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002898:	2301      	movs	r3, #1
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e002      	b.n	80028a4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80028a4:	69bb      	ldr	r3, [r7, #24]
    }
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b088      	sub	sp, #32
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	461a      	mov	r2, r3
 80028c6:	21a5      	movs	r1, #165	; 0xa5
 80028c8:	f005 fc6c 	bl	80081a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028d6:	3b01      	subs	r3, #1
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f023 0307 	bic.w	r3, r3, #7
 80028e4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <prvInitialiseNewTask+0x58>
        __asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	617b      	str	r3, [r7, #20]
    }
 8002902:	bf00      	nop
 8002904:	e7fe      	b.n	8002904 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01f      	beq.n	800294c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	e012      	b.n	8002938 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	7819      	ldrb	r1, [r3, #0]
 800291a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	3334      	adds	r3, #52	; 0x34
 8002922:	460a      	mov	r2, r1
 8002924:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3301      	adds	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	2b09      	cmp	r3, #9
 800293c:	d9e9      	bls.n	8002912 <prvInitialiseNewTask+0x64>
 800293e:	e000      	b.n	8002942 <prvInitialiseNewTask+0x94>
            {
                break;
 8002940:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800294a:	e003      	b.n	8002954 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	2b04      	cmp	r3, #4
 8002958:	d901      	bls.n	800295e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800295a:	2304      	movs	r3, #4
 800295c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002968:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	2200      	movs	r2, #0
 800296e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	3304      	adds	r3, #4
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff f96a 	bl	8001c4e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	3318      	adds	r3, #24
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f965 	bl	8001c4e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002988:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	f1c3 0205 	rsb	r2, r3, #5
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	3350      	adds	r3, #80	; 0x50
 800299e:	2204      	movs	r2, #4
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f005 fbfe 	bl	80081a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	3354      	adds	r3, #84	; 0x54
 80029ac:	2201      	movs	r2, #1
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f005 fbf7 	bl	80081a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	69b8      	ldr	r0, [r7, #24]
 80029bc:	f001 f93a 	bl	8003c34 <pxPortInitialiseStack>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029d2:	bf00      	nop
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029dc:	b5b0      	push	{r4, r5, r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029e4:	f001 fa58 	bl	8003e98 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029e8:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <prvAddNewTaskToReadyList+0xfc>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3301      	adds	r3, #1
 80029ee:	4a3a      	ldr	r2, [pc, #232]	; (8002ad8 <prvAddNewTaskToReadyList+0xfc>)
 80029f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029f2:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <prvAddNewTaskToReadyList+0x100>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029fa:	4a38      	ldr	r2, [pc, #224]	; (8002adc <prvAddNewTaskToReadyList+0x100>)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a00:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <prvAddNewTaskToReadyList+0xfc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d110      	bne.n	8002a2a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a08:	f000 fc52 	bl	80032b0 <prvInitialiseTaskLists>
 8002a0c:	e00d      	b.n	8002a2a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <prvAddNewTaskToReadyList+0x104>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a16:	4b31      	ldr	r3, [pc, #196]	; (8002adc <prvAddNewTaskToReadyList+0x100>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d802      	bhi.n	8002a2a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a24:	4a2d      	ldr	r2, [pc, #180]	; (8002adc <prvAddNewTaskToReadyList+0x100>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <prvAddNewTaskToReadyList+0x108>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <prvAddNewTaskToReadyList+0x108>)
 8002a32:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a34:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <prvAddNewTaskToReadyList+0x108>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d016      	beq.n	8002a70 <prvAddNewTaskToReadyList+0x94>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fdd9 	bl	80065fc <SEGGER_SYSVIEW_OnTaskCreate>
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	461d      	mov	r5, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461c      	mov	r4, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	1ae3      	subs	r3, r4, r3
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	462b      	mov	r3, r5
 8002a6c:	f002 fbfe 	bl	800526c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 fe46 	bl	8006704 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <prvAddNewTaskToReadyList+0x10c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <prvAddNewTaskToReadyList+0x10c>)
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4a15      	ldr	r2, [pc, #84]	; (8002aec <prvAddNewTaskToReadyList+0x110>)
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f7ff f8e1 	bl	8001c68 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002aa6:	f001 fa27 	bl	8003ef8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <prvAddNewTaskToReadyList+0x104>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00e      	beq.n	8002ad0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <prvAddNewTaskToReadyList+0x100>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d207      	bcs.n	8002ad0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <prvAddNewTaskToReadyList+0x114>)
 8002ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad8:	200002fc 	.word	0x200002fc
 8002adc:	20000224 	.word	0x20000224
 8002ae0:	20000308 	.word	0x20000308
 8002ae4:	20000318 	.word	0x20000318
 8002ae8:	20000304 	.word	0x20000304
 8002aec:	20000228 	.word	0x20000228
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d01b      	beq.n	8002b3e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <vTaskDelay+0x68>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <vTaskDelay+0x30>
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	60bb      	str	r3, [r7, #8]
    }
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002b24:	f000 f884 	bl	8002c30 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	2023      	movs	r0, #35	; 0x23
 8002b2c:	f003 f88c 	bl	8005c48 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b30:	2100      	movs	r1, #0
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fcf4 	bl	8003520 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002b38:	f000 f888 	bl	8002c4c <xTaskResumeAll>
 8002b3c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <vTaskDelay+0x6c>)
 8002b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000324 	.word	0x20000324
 8002b60:	e000ed04 	.word	0xe000ed04

08002b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002b6a:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <vTaskStartScheduler+0xac>)
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2300      	movs	r3, #0
 8002b74:	2282      	movs	r2, #130	; 0x82
 8002b76:	4927      	ldr	r1, [pc, #156]	; (8002c14 <vTaskStartScheduler+0xb0>)
 8002b78:	4827      	ldr	r0, [pc, #156]	; (8002c18 <vTaskStartScheduler+0xb4>)
 8002b7a:	f7ff fe57 	bl	800282c <xTaskCreate>
 8002b7e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d102      	bne.n	8002b8c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002b86:	f000 fd43 	bl	8003610 <xTimerCreateTimerTask>
 8002b8a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d129      	bne.n	8002be6 <vTaskStartScheduler+0x82>
        __asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	60bb      	str	r3, [r7, #8]
    }
 8002ba4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <vTaskStartScheduler+0xb8>)
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002bae:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <vTaskStartScheduler+0xbc>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <vTaskStartScheduler+0xc0>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <vTaskStartScheduler+0xc4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3334      	adds	r3, #52	; 0x34
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	4914      	ldr	r1, [pc, #80]	; (8002c14 <vTaskStartScheduler+0xb0>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f005 fad1 	bl	800816c <memcmp>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <vTaskStartScheduler+0x78>
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <vTaskStartScheduler+0xc4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 fd53 	bl	8006680 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002bda:	e001      	b.n	8002be0 <vTaskStartScheduler+0x7c>
 8002bdc:	f003 fcf2 	bl	80065c4 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002be0:	f001 f8b8 	bl	8003d54 <xPortStartScheduler>
 8002be4:	e00e      	b.n	8002c04 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bec:	d10a      	bne.n	8002c04 <vTaskStartScheduler+0xa0>
        __asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	607b      	str	r3, [r7, #4]
    }
 8002c00:	bf00      	nop
 8002c02:	e7fe      	b.n	8002c02 <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <vTaskStartScheduler+0xc8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000320 	.word	0x20000320
 8002c14:	0800aeb8 	.word	0x0800aeb8
 8002c18:	08003281 	.word	0x08003281
 8002c1c:	2000031c 	.word	0x2000031c
 8002c20:	20000308 	.word	0x20000308
 8002c24:	20000300 	.word	0x20000300
 8002c28:	20000224 	.word	0x20000224
 8002c2c:	20000014 	.word	0x20000014

08002c30 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <vTaskSuspendAll+0x18>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	4a03      	ldr	r2, [pc, #12]	; (8002c48 <vTaskSuspendAll+0x18>)
 8002c3c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	20000324 	.word	0x20000324

08002c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c5a:	4b43      	ldr	r3, [pc, #268]	; (8002d68 <xTaskResumeAll+0x11c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <xTaskResumeAll+0x2c>
        __asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	603b      	str	r3, [r7, #0]
    }
 8002c74:	bf00      	nop
 8002c76:	e7fe      	b.n	8002c76 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c78:	f001 f90e 	bl	8003e98 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c7c:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <xTaskResumeAll+0x11c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <xTaskResumeAll+0x11c>)
 8002c84:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c86:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <xTaskResumeAll+0x11c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d165      	bne.n	8002d5a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <xTaskResumeAll+0x120>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d061      	beq.n	8002d5a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c96:	e032      	b.n	8002cfe <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c98:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <xTaskResumeAll+0x124>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3318      	adds	r3, #24
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff f83c 	bl	8001d22 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff f837 	bl	8001d22 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fd24 	bl	8006704 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <xTaskResumeAll+0x128>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <xTaskResumeAll+0x128>)
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <xTaskResumeAll+0x12c>)
 8002cdc:	441a      	add	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f7fe ffbf 	bl	8001c68 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cee:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <xTaskResumeAll+0x130>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d302      	bcc.n	8002cfe <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <xTaskResumeAll+0x134>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <xTaskResumeAll+0x124>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1c8      	bne.n	8002c98 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d0c:	f000 fb4e 	bl	80033ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d10:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <xTaskResumeAll+0x138>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d010      	beq.n	8002d3e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d1c:	f000 f846 	bl	8002dac <xTaskIncrementTick>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <xTaskResumeAll+0x134>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f1      	bne.n	8002d1c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <xTaskResumeAll+0x138>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <xTaskResumeAll+0x134>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002d46:	2301      	movs	r3, #1
 8002d48:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <xTaskResumeAll+0x13c>)
 8002d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d5a:	f001 f8cd 	bl	8003ef8 <vPortExitCritical>

    return xAlreadyYielded;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000324 	.word	0x20000324
 8002d6c:	200002fc 	.word	0x200002fc
 8002d70:	200002bc 	.word	0x200002bc
 8002d74:	20000304 	.word	0x20000304
 8002d78:	20000228 	.word	0x20000228
 8002d7c:	20000224 	.word	0x20000224
 8002d80:	20000310 	.word	0x20000310
 8002d84:	2000030c 	.word	0x2000030c
 8002d88:	e000ed04 	.word	0xe000ed04

08002d8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <xTaskGetTickCount+0x1c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d98:	687b      	ldr	r3, [r7, #4]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000300 	.word	0x20000300

08002dac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002db6:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <xTaskIncrementTick+0x14c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 8092 	bne.w	8002ee4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002dc0:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <xTaskIncrementTick+0x150>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002dc8:	4a4c      	ldr	r2, [pc, #304]	; (8002efc <xTaskIncrementTick+0x150>)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d120      	bne.n	8002e16 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <xTaskIncrementTick+0x154>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <xTaskIncrementTick+0x48>
        __asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	603b      	str	r3, [r7, #0]
    }
 8002df0:	bf00      	nop
 8002df2:	e7fe      	b.n	8002df2 <xTaskIncrementTick+0x46>
 8002df4:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <xTaskIncrementTick+0x154>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <xTaskIncrementTick+0x158>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a40      	ldr	r2, [pc, #256]	; (8002f00 <xTaskIncrementTick+0x154>)
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4a40      	ldr	r2, [pc, #256]	; (8002f04 <xTaskIncrementTick+0x158>)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <xTaskIncrementTick+0x15c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	4a3e      	ldr	r2, [pc, #248]	; (8002f08 <xTaskIncrementTick+0x15c>)
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	f000 facb 	bl	80033ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <xTaskIncrementTick+0x160>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d34c      	bcc.n	8002eba <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e20:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <xTaskIncrementTick+0x154>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e2a:	4b38      	ldr	r3, [pc, #224]	; (8002f0c <xTaskIncrementTick+0x160>)
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e30:	601a      	str	r2, [r3, #0]
                    break;
 8002e32:	e042      	b.n	8002eba <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e34:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <xTaskIncrementTick+0x154>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d203      	bcs.n	8002e54 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e4c:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <xTaskIncrementTick+0x160>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e52:	e032      	b.n	8002eba <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe ff62 	bl	8001d22 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3318      	adds	r3, #24
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe ff59 	bl	8001d22 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 fc46 	bl	8006704 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <xTaskIncrementTick+0x164>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <xTaskIncrementTick+0x164>)
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <xTaskIncrementTick+0x168>)
 8002e98:	441a      	add	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f7fe fee1 	bl	8001c68 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <xTaskIncrementTick+0x16c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d3b5      	bcc.n	8002e20 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eb8:	e7b2      	b.n	8002e20 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002eba:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <xTaskIncrementTick+0x16c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	4914      	ldr	r1, [pc, #80]	; (8002f14 <xTaskIncrementTick+0x168>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d901      	bls.n	8002ed6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <xTaskIncrementTick+0x170>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e004      	b.n	8002eee <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <xTaskIncrementTick+0x174>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <xTaskIncrementTick+0x174>)
 8002eec:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002eee:	697b      	ldr	r3, [r7, #20]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000324 	.word	0x20000324
 8002efc:	20000300 	.word	0x20000300
 8002f00:	200002b4 	.word	0x200002b4
 8002f04:	200002b8 	.word	0x200002b8
 8002f08:	20000314 	.word	0x20000314
 8002f0c:	2000031c 	.word	0x2000031c
 8002f10:	20000304 	.word	0x20000304
 8002f14:	20000228 	.word	0x20000228
 8002f18:	20000224 	.word	0x20000224
 8002f1c:	20000310 	.word	0x20000310
 8002f20:	2000030c 	.word	0x2000030c

08002f24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <vTaskSwitchContext+0xc4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f32:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <vTaskSwitchContext+0xc8>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002f38:	e052      	b.n	8002fe0 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <vTaskSwitchContext+0xc8>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f40:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <vTaskSwitchContext+0xcc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f4e:	7afb      	ldrb	r3, [r7, #11]
 8002f50:	f1c3 031f 	rsb	r3, r3, #31
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	4927      	ldr	r1, [pc, #156]	; (8002ff4 <vTaskSwitchContext+0xd0>)
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	607b      	str	r3, [r7, #4]
    }
 8002f7c:	bf00      	nop
 8002f7e:	e7fe      	b.n	8002f7e <vTaskSwitchContext+0x5a>
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ff4 <vTaskSwitchContext+0xd0>)
 8002f8c:	4413      	add	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d104      	bne.n	8002fb0 <vTaskSwitchContext+0x8c>
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	4a10      	ldr	r2, [pc, #64]	; (8002ff8 <vTaskSwitchContext+0xd4>)
 8002fb8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002fba:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <vTaskSwitchContext+0xd4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3334      	adds	r3, #52	; 0x34
 8002fc0:	2205      	movs	r2, #5
 8002fc2:	490e      	ldr	r1, [pc, #56]	; (8002ffc <vTaskSwitchContext+0xd8>)
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f005 f8d1 	bl	800816c <memcmp>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <vTaskSwitchContext+0xb8>
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <vTaskSwitchContext+0xd4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fb53 	bl	8006680 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002fda:	e001      	b.n	8002fe0 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8002fdc:	f003 faf2 	bl	80065c4 <SEGGER_SYSVIEW_OnIdle>
}
 8002fe0:	bf00      	nop
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000324 	.word	0x20000324
 8002fec:	20000310 	.word	0x20000310
 8002ff0:	20000304 	.word	0x20000304
 8002ff4:	20000228 	.word	0x20000228
 8002ff8:	20000224 	.word	0x20000224
 8002ffc:	0800aeb8 	.word	0x0800aeb8

08003000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	60fb      	str	r3, [r7, #12]
    }
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <vTaskPlaceOnEventList+0x44>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3318      	adds	r3, #24
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe fe3e 	bl	8001cb0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003034:	2101      	movs	r1, #1
 8003036:	6838      	ldr	r0, [r7, #0]
 8003038:	f000 fa72 	bl	8003520 <prvAddCurrentTaskToDelayedList>
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000224 	.word	0x20000224

08003048 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	617b      	str	r3, [r7, #20]
    }
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <vTaskPlaceOnEventListRestricted+0x58>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3318      	adds	r3, #24
 8003076:	4619      	mov	r1, r3
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7fe fdf5 	bl	8001c68 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003088:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800308a:	2024      	movs	r0, #36	; 0x24
 800308c:	f002 fdbe 	bl	8005c0c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	68b8      	ldr	r0, [r7, #8]
 8003094:	f000 fa44 	bl	8003520 <prvAddCurrentTaskToDelayedList>
    }
 8003098:	bf00      	nop
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000224 	.word	0x20000224

080030a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	60fb      	str	r3, [r7, #12]
    }
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	3318      	adds	r3, #24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fe24 	bl	8001d22 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030da:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <xTaskRemoveFromEventList+0xb4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d120      	bne.n	8003124 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	3304      	adds	r3, #4
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fe1b 	bl	8001d22 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 fb08 	bl	8006704 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	2201      	movs	r2, #1
 80030fa:	409a      	lsls	r2, r3
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <xTaskRemoveFromEventList+0xb8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4313      	orrs	r3, r2
 8003102:	4a16      	ldr	r2, [pc, #88]	; (800315c <xTaskRemoveFromEventList+0xb8>)
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <xTaskRemoveFromEventList+0xbc>)
 8003114:	441a      	add	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	3304      	adds	r3, #4
 800311a:	4619      	mov	r1, r3
 800311c:	4610      	mov	r0, r2
 800311e:	f7fe fda3 	bl	8001c68 <vListInsertEnd>
 8003122:	e005      	b.n	8003130 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	3318      	adds	r3, #24
 8003128:	4619      	mov	r1, r3
 800312a:	480e      	ldr	r0, [pc, #56]	; (8003164 <xTaskRemoveFromEventList+0xc0>)
 800312c:	f7fe fd9c 	bl	8001c68 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <xTaskRemoveFromEventList+0xc4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	429a      	cmp	r2, r3
 800313c:	d905      	bls.n	800314a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800313e:	2301      	movs	r3, #1
 8003140:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <xTaskRemoveFromEventList+0xc8>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e001      	b.n	800314e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800314e:	697b      	ldr	r3, [r7, #20]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000324 	.word	0x20000324
 800315c:	20000304 	.word	0x20000304
 8003160:	20000228 	.word	0x20000228
 8003164:	200002bc 	.word	0x200002bc
 8003168:	20000224 	.word	0x20000224
 800316c:	20000310 	.word	0x20000310

08003170 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <vTaskInternalSetTimeOutState+0x24>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <vTaskInternalSetTimeOutState+0x28>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	605a      	str	r2, [r3, #4]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	20000314 	.word	0x20000314
 8003198:	20000300 	.word	0x20000300

0800319c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	613b      	str	r3, [r7, #16]
    }
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	60fb      	str	r3, [r7, #12]
    }
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80031de:	f000 fe5b 	bl	8003e98 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80031e2:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <xTaskCheckForTimeOut+0xc4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031fa:	d102      	bne.n	8003202 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	e026      	b.n	8003250 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <xTaskCheckForTimeOut+0xc8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d00a      	beq.n	8003224 <xTaskCheckForTimeOut+0x88>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	429a      	cmp	r2, r3
 8003216:	d305      	bcc.n	8003224 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003218:	2301      	movs	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e015      	b.n	8003250 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	429a      	cmp	r2, r3
 800322c:	d20b      	bcs.n	8003246 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	1ad2      	subs	r2, r2, r3
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ff98 	bl	8003170 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	e004      	b.n	8003250 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800324c:	2301      	movs	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003250:	f000 fe52 	bl	8003ef8 <vPortExitCritical>

    return xReturn;
 8003254:	69fb      	ldr	r3, [r7, #28]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000300 	.word	0x20000300
 8003264:	20000314 	.word	0x20000314

08003268 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <vTaskMissedYield+0x14>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	20000310 	.word	0x20000310

08003280 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003288:	f000 f852 	bl	8003330 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <prvIdleTask+0x28>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d9f9      	bls.n	8003288 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <prvIdleTask+0x2c>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80032a4:	e7f0      	b.n	8003288 <prvIdleTask+0x8>
 80032a6:	bf00      	nop
 80032a8:	20000228 	.word	0x20000228
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	e00c      	b.n	80032d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4a12      	ldr	r2, [pc, #72]	; (8003310 <prvInitialiseTaskLists+0x60>)
 80032c8:	4413      	add	r3, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fc9f 	bl	8001c0e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3301      	adds	r3, #1
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d9ef      	bls.n	80032bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80032dc:	480d      	ldr	r0, [pc, #52]	; (8003314 <prvInitialiseTaskLists+0x64>)
 80032de:	f7fe fc96 	bl	8001c0e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80032e2:	480d      	ldr	r0, [pc, #52]	; (8003318 <prvInitialiseTaskLists+0x68>)
 80032e4:	f7fe fc93 	bl	8001c0e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80032e8:	480c      	ldr	r0, [pc, #48]	; (800331c <prvInitialiseTaskLists+0x6c>)
 80032ea:	f7fe fc90 	bl	8001c0e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80032ee:	480c      	ldr	r0, [pc, #48]	; (8003320 <prvInitialiseTaskLists+0x70>)
 80032f0:	f7fe fc8d 	bl	8001c0e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80032f4:	480b      	ldr	r0, [pc, #44]	; (8003324 <prvInitialiseTaskLists+0x74>)
 80032f6:	f7fe fc8a 	bl	8001c0e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <prvInitialiseTaskLists+0x78>)
 80032fc:	4a05      	ldr	r2, [pc, #20]	; (8003314 <prvInitialiseTaskLists+0x64>)
 80032fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <prvInitialiseTaskLists+0x7c>)
 8003302:	4a05      	ldr	r2, [pc, #20]	; (8003318 <prvInitialiseTaskLists+0x68>)
 8003304:	601a      	str	r2, [r3, #0]
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000228 	.word	0x20000228
 8003314:	2000028c 	.word	0x2000028c
 8003318:	200002a0 	.word	0x200002a0
 800331c:	200002bc 	.word	0x200002bc
 8003320:	200002d0 	.word	0x200002d0
 8003324:	200002e8 	.word	0x200002e8
 8003328:	200002b4 	.word	0x200002b4
 800332c:	200002b8 	.word	0x200002b8

08003330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003336:	e019      	b.n	800336c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003338:	f000 fdae 	bl	8003e98 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <prvCheckTasksWaitingTermination+0x50>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe fcea 	bl	8001d22 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <prvCheckTasksWaitingTermination+0x54>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3b01      	subs	r3, #1
 8003354:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <prvCheckTasksWaitingTermination+0x54>)
 8003356:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <prvCheckTasksWaitingTermination+0x58>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3b01      	subs	r3, #1
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <prvCheckTasksWaitingTermination+0x58>)
 8003360:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003362:	f000 fdc9 	bl	8003ef8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f810 	bl	800338c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <prvCheckTasksWaitingTermination+0x58>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e1      	bne.n	8003338 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	200002d0 	.word	0x200002d0
 8003384:	200002fc 	.word	0x200002fc
 8003388:	200002e4 	.word	0x200002e4

0800338c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	4618      	mov	r0, r3
 800339a:	f000 ff87 	bl	80042ac <vPortFree>
                vPortFree( pxTCB );
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 ff84 	bl	80042ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <prvResetNextTaskUnblockTime+0x30>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d104      	bne.n	80033c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <prvResetNextTaskUnblockTime+0x34>)
 80033bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80033c2:	e005      	b.n	80033d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <prvResetNextTaskUnblockTime+0x30>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <prvResetNextTaskUnblockTime+0x34>)
 80033ce:	6013      	str	r3, [r2, #0]
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	200002b4 	.word	0x200002b4
 80033e0:	2000031c 	.word	0x2000031c

080033e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <xTaskGetSchedulerState+0x34>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80033f2:	2301      	movs	r3, #1
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	e008      	b.n	800340a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <xTaskGetSchedulerState+0x38>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003400:	2302      	movs	r3, #2
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	e001      	b.n	800340a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800340a:	687b      	ldr	r3, [r7, #4]
    }
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	20000308 	.word	0x20000308
 800341c:	20000324 	.word	0x20000324

08003420 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d068      	beq.n	8003508 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003436:	4b37      	ldr	r3, [pc, #220]	; (8003514 <xTaskPriorityDisinherit+0xf4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	429a      	cmp	r2, r3
 800343e:	d00a      	beq.n	8003456 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	60fb      	str	r3, [r7, #12]
    }
 8003452:	bf00      	nop
 8003454:	e7fe      	b.n	8003454 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	60bb      	str	r3, [r7, #8]
    }
 8003470:	bf00      	nop
 8003472:	e7fe      	b.n	8003472 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	1e5a      	subs	r2, r3, #1
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003486:	429a      	cmp	r2, r3
 8003488:	d03e      	beq.n	8003508 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d13a      	bne.n	8003508 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	3304      	adds	r3, #4
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fc43 	bl	8001d22 <uxListRemove>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	2201      	movs	r2, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43da      	mvns	r2, r3
 80034ae:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <xTaskPriorityDisinherit+0xf8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4013      	ands	r3, r2
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <xTaskPriorityDisinherit+0xf8>)
 80034b6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4619      	mov	r1, r3
 80034bc:	204a      	movs	r0, #74	; 0x4a
 80034be:	f002 fbc3 	bl	8005c48 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	f1c3 0205 	rsb	r2, r3, #5
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	2201      	movs	r2, #1
 80034dc:	409a      	lsls	r2, r3
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <xTaskPriorityDisinherit+0xf8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <xTaskPriorityDisinherit+0xf8>)
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4a09      	ldr	r2, [pc, #36]	; (800351c <xTaskPriorityDisinherit+0xfc>)
 80034f6:	441a      	add	r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f7fe fbb2 	bl	8001c68 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003504:	2301      	movs	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003508:	697b      	ldr	r3, [r7, #20]
    }
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000224 	.word	0x20000224
 8003518:	20000304 	.word	0x20000304
 800351c:	20000228 	.word	0x20000228

08003520 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800352a:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003530:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3304      	adds	r3, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fbf3 	bl	8001d22 <uxListRemove>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003542:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	2201      	movs	r2, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <prvAddCurrentTaskToDelayedList+0xdc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4013      	ands	r3, r2
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <prvAddCurrentTaskToDelayedList+0xdc>)
 8003558:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003560:	d110      	bne.n	8003584 <prvAddCurrentTaskToDelayedList+0x64>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003568:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	211b      	movs	r1, #27
 800356e:	4618      	mov	r0, r3
 8003570:	f003 f90a 	bl	8006788 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003574:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3304      	adds	r3, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4820      	ldr	r0, [pc, #128]	; (8003600 <prvAddCurrentTaskToDelayedList+0xe0>)
 800357e:	f7fe fb73 	bl	8001c68 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003582:	e032      	b.n	80035ea <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	429a      	cmp	r2, r3
 800359a:	d20f      	bcs.n	80035bc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800359c:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2104      	movs	r1, #4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f003 f8f0 	bl	8006788 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <prvAddCurrentTaskToDelayedList+0xe4>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f7fe fb7b 	bl	8001cb0 <vListInsert>
}
 80035ba:	e016      	b.n	80035ea <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2104      	movs	r1, #4
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 f8e0 	bl	8006788 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7fe fb6b 	bl	8001cb0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80035da:	4b0c      	ldr	r3, [pc, #48]	; (800360c <prvAddCurrentTaskToDelayedList+0xec>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d202      	bcs.n	80035ea <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80035e4:	4a09      	ldr	r2, [pc, #36]	; (800360c <prvAddCurrentTaskToDelayedList+0xec>)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6013      	str	r3, [r2, #0]
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000300 	.word	0x20000300
 80035f8:	20000224 	.word	0x20000224
 80035fc:	20000304 	.word	0x20000304
 8003600:	200002e8 	.word	0x200002e8
 8003604:	200002b8 	.word	0x200002b8
 8003608:	200002b4 	.word	0x200002b4
 800360c:	2000031c 	.word	0x2000031c

08003610 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800361a:	f000 fad5 	bl	8003bc8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <xTimerCreateTimerTask+0x54>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <xTimerCreateTimerTask+0x58>)
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2302      	movs	r3, #2
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2300      	movs	r3, #0
 8003630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003634:	490d      	ldr	r1, [pc, #52]	; (800366c <xTimerCreateTimerTask+0x5c>)
 8003636:	480e      	ldr	r0, [pc, #56]	; (8003670 <xTimerCreateTimerTask+0x60>)
 8003638:	f7ff f8f8 	bl	800282c <xTaskCreate>
 800363c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	603b      	str	r3, [r7, #0]
    }
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800365a:	687b      	ldr	r3, [r7, #4]
    }
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000358 	.word	0x20000358
 8003668:	2000035c 	.word	0x2000035c
 800366c:	0800aec0 	.word	0x0800aec0
 8003670:	080037a9 	.word	0x080037a9

08003674 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <xTimerGenericCommand+0x2e>
        __asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	623b      	str	r3, [r7, #32]
    }
 800369e:	bf00      	nop
 80036a0:	e7fe      	b.n	80036a0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <xTimerGenericCommand+0x98>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d02a      	beq.n	8003700 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b05      	cmp	r3, #5
 80036ba:	dc18      	bgt.n	80036ee <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80036bc:	f7ff fe92 	bl	80033e4 <xTaskGetSchedulerState>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d109      	bne.n	80036da <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <xTimerGenericCommand+0x98>)
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	f107 0114 	add.w	r1, r7, #20
 80036ce:	2300      	movs	r3, #0
 80036d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d2:	f7fe fc41 	bl	8001f58 <xQueueGenericSend>
 80036d6:	6278      	str	r0, [r7, #36]	; 0x24
 80036d8:	e012      	b.n	8003700 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <xTimerGenericCommand+0x98>)
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	f107 0114 	add.w	r1, r7, #20
 80036e2:	2300      	movs	r3, #0
 80036e4:	2200      	movs	r2, #0
 80036e6:	f7fe fc37 	bl	8001f58 <xQueueGenericSend>
 80036ea:	6278      	str	r0, [r7, #36]	; 0x24
 80036ec:	e008      	b.n	8003700 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80036ee:	4b07      	ldr	r3, [pc, #28]	; (800370c <xTimerGenericCommand+0x98>)
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	f107 0114 	add.w	r1, r7, #20
 80036f6:	2300      	movs	r3, #0
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	f7fe fd53 	bl	80021a4 <xQueueGenericSendFromISR>
 80036fe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003702:	4618      	mov	r0, r3
 8003704:	3728      	adds	r7, #40	; 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000358 	.word	0x20000358

08003710 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <prvProcessExpiredTimer+0x94>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	3304      	adds	r3, #4
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe fafa 	bl	8001d22 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d022      	beq.n	8003782 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	18d1      	adds	r1, r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	6978      	ldr	r0, [r7, #20]
 800374a:	f000 f8d1 	bl	80038f0 <prvInsertTimerInActiveList>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01f      	beq.n	8003794 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003754:	2300      	movs	r3, #0
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	2100      	movs	r1, #0
 800375e:	6978      	ldr	r0, [r7, #20]
 8003760:	f7ff ff88 	bl	8003674 <xTimerGenericCommand>
 8003764:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d113      	bne.n	8003794 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	60fb      	str	r3, [r7, #12]
    }
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	b2da      	uxtb	r2, r3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	6978      	ldr	r0, [r7, #20]
 800379a:	4798      	blx	r3
    }
 800379c:	bf00      	nop
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000350 	.word	0x20000350

080037a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037b0:	f107 0308 	add.w	r3, r7, #8
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f857 	bl	8003868 <prvGetNextExpireTime>
 80037ba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4619      	mov	r1, r3
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f803 	bl	80037cc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80037c6:	f000 f8d5 	bl	8003974 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037ca:	e7f1      	b.n	80037b0 <prvTimerTask+0x8>

080037cc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80037d6:	f7ff fa2b 	bl	8002c30 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037da:	f107 0308 	add.w	r3, r7, #8
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f866 	bl	80038b0 <prvSampleTimeNow>
 80037e4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d130      	bne.n	800384e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <prvProcessTimerOrBlockTask+0x3c>
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d806      	bhi.n	8003808 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80037fa:	f7ff fa27 	bl	8002c4c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff85 	bl	8003710 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003806:	e024      	b.n	8003852 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <prvProcessTimerOrBlockTask+0x90>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <prvProcessTimerOrBlockTask+0x50>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <prvProcessTimerOrBlockTask+0x52>
 800381c:	2300      	movs	r3, #0
 800381e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <prvProcessTimerOrBlockTask+0x94>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	f7fe ffc9 	bl	80027c4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003832:	f7ff fa0b 	bl	8002c4c <xTaskResumeAll>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <prvProcessTimerOrBlockTask+0x98>)
 800383e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	f3bf 8f6f 	isb	sy
    }
 800384c:	e001      	b.n	8003852 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800384e:	f7ff f9fd 	bl	8002c4c <xTaskResumeAll>
    }
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000354 	.word	0x20000354
 8003860:	20000358 	.word	0x20000358
 8003864:	e000ed04 	.word	0xe000ed04

08003868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <prvGetNextExpireTime+0x44>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <prvGetNextExpireTime+0x16>
 800387a:	2201      	movs	r2, #1
 800387c:	e000      	b.n	8003880 <prvGetNextExpireTime+0x18>
 800387e:	2200      	movs	r2, #0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <prvGetNextExpireTime+0x44>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	e001      	b.n	800389c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800389c:	68fb      	ldr	r3, [r7, #12]
    }
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000350 	.word	0x20000350

080038b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80038b8:	f7ff fa68 	bl	8002d8c <xTaskGetTickCount>
 80038bc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80038be:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <prvSampleTimeNow+0x3c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d205      	bcs.n	80038d4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80038c8:	f000 f91a 	bl	8003b00 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e002      	b.n	80038da <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80038da:	4a04      	ldr	r2, [pc, #16]	; (80038ec <prvSampleTimeNow+0x3c>)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80038e0:	68fb      	ldr	r3, [r7, #12]
    }
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000360 	.word	0x20000360

080038f0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d812      	bhi.n	800393c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	1ad2      	subs	r2, r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	429a      	cmp	r2, r3
 8003922:	d302      	bcc.n	800392a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003924:	2301      	movs	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	e01b      	b.n	8003962 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <prvInsertTimerInActiveList+0x7c>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3304      	adds	r3, #4
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7fe f9bb 	bl	8001cb0 <vListInsert>
 800393a:	e012      	b.n	8003962 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d206      	bcs.n	8003952 <prvInsertTimerInActiveList+0x62>
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e007      	b.n	8003962 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <prvInsertTimerInActiveList+0x80>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3304      	adds	r3, #4
 800395a:	4619      	mov	r1, r3
 800395c:	4610      	mov	r0, r2
 800395e:	f7fe f9a7 	bl	8001cb0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003962:	697b      	ldr	r3, [r7, #20]
    }
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000354 	.word	0x20000354
 8003970:	20000350 	.word	0x20000350

08003974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003974:	b580      	push	{r7, lr}
 8003976:	b08c      	sub	sp, #48	; 0x30
 8003978:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800397a:	e0ae      	b.n	8003ada <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f2c0 80aa 	blt.w	8003ad8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	3304      	adds	r3, #4
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe f9c4 	bl	8001d22 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff87 	bl	80038b0 <prvSampleTimeNow>
 80039a2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b09      	cmp	r3, #9
 80039a8:	f200 8097 	bhi.w	8003ada <prvProcessReceivedCommands+0x166>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <prvProcessReceivedCommands+0x40>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039dd 	.word	0x080039dd
 80039c0:	08003a51 	.word	0x08003a51
 80039c4:	08003a65 	.word	0x08003a65
 80039c8:	08003aaf 	.word	0x08003aaf
 80039cc:	080039dd 	.word	0x080039dd
 80039d0:	080039dd 	.word	0x080039dd
 80039d4:	08003a51 	.word	0x08003a51
 80039d8:	08003a65 	.word	0x08003a65
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	18d1      	adds	r1, r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a3a      	ldr	r2, [r7, #32]
 80039fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039fc:	f7ff ff78 	bl	80038f0 <prvInsertTimerInActiveList>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d069      	beq.n	8003ada <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a0c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d05e      	beq.n	8003ada <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	441a      	add	r2, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a2e:	f7ff fe21 	bl	8003674 <xTimerGenericCommand>
 8003a32:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d14f      	bne.n	8003ada <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	61bb      	str	r3, [r7, #24]
    }
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003a62:	e03a      	b.n	8003ada <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	617b      	str	r3, [r7, #20]
    }
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	18d1      	adds	r1, r2, r3
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aa8:	f7ff ff22 	bl	80038f0 <prvInsertTimerInActiveList>
                        break;
 8003aac:	e015      	b.n	8003ada <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003abe:	f000 fbf5 	bl	80042ac <vPortFree>
 8003ac2:	e00a      	b.n	8003ada <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ad6:	e000      	b.n	8003ada <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ad8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <prvProcessReceivedCommands+0x188>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f107 0108 	add.w	r1, r7, #8
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fc1b 	bl	8002320 <xQueueReceive>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f47f af45 	bne.w	800397c <prvProcessReceivedCommands+0x8>
        }
    }
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	3728      	adds	r7, #40	; 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000358 	.word	0x20000358

08003b00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b06:	e048      	b.n	8003b9a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b08:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <prvSwitchTimerLists+0xc0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b12:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <prvSwitchTimerLists+0xc0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe f8fe 	bl	8001d22 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d02e      	beq.n	8003b9a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d90e      	bls.n	8003b6c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b5a:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <prvSwitchTimerLists+0xc0>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3304      	adds	r3, #4
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7fe f8a3 	bl	8001cb0 <vListInsert>
 8003b6a:	e016      	b.n	8003b9a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	2300      	movs	r3, #0
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	2100      	movs	r1, #0
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff fd7c 	bl	8003674 <xTimerGenericCommand>
 8003b7c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	603b      	str	r3, [r7, #0]
    }
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <prvSwitchTimerLists+0xc0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1b1      	bne.n	8003b08 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <prvSwitchTimerLists+0xc0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <prvSwitchTimerLists+0xc4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a04      	ldr	r2, [pc, #16]	; (8003bc0 <prvSwitchTimerLists+0xc0>)
 8003bb0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003bb2:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <prvSwitchTimerLists+0xc4>)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	6013      	str	r3, [r2, #0]
    }
 8003bb8:	bf00      	nop
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000350 	.word	0x20000350
 8003bc4:	20000354 	.word	0x20000354

08003bc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003bcc:	f000 f964 	bl	8003e98 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003bd0:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <prvCheckForValidListAndQueue+0x54>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11d      	bne.n	8003c14 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003bd8:	4811      	ldr	r0, [pc, #68]	; (8003c20 <prvCheckForValidListAndQueue+0x58>)
 8003bda:	f7fe f818 	bl	8001c0e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003bde:	4811      	ldr	r0, [pc, #68]	; (8003c24 <prvCheckForValidListAndQueue+0x5c>)
 8003be0:	f7fe f815 	bl	8001c0e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003be4:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <prvCheckForValidListAndQueue+0x60>)
 8003be6:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <prvCheckForValidListAndQueue+0x58>)
 8003be8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <prvCheckForValidListAndQueue+0x64>)
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <prvCheckForValidListAndQueue+0x5c>)
 8003bee:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	210c      	movs	r1, #12
 8003bf4:	200a      	movs	r0, #10
 8003bf6:	f7fe f927 	bl	8001e48 <xQueueGenericCreate>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4a07      	ldr	r2, [pc, #28]	; (8003c1c <prvCheckForValidListAndQueue+0x54>)
 8003bfe:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <prvCheckForValidListAndQueue+0x54>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <prvCheckForValidListAndQueue+0x54>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4908      	ldr	r1, [pc, #32]	; (8003c30 <prvCheckForValidListAndQueue+0x68>)
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fda6 	bl	8002760 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c14:	f000 f970 	bl	8003ef8 <vPortExitCritical>
    }
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000358 	.word	0x20000358
 8003c20:	20000328 	.word	0x20000328
 8003c24:	2000033c 	.word	0x2000033c
 8003c28:	20000350 	.word	0x20000350
 8003c2c:	20000354 	.word	0x20000354
 8003c30:	0800aec8 	.word	0x0800aec8

08003c34 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3b04      	subs	r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3b04      	subs	r3, #4
 8003c52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f023 0201 	bic.w	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3b04      	subs	r3, #4
 8003c62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003c64:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <pxPortInitialiseStack+0x64>)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b14      	subs	r3, #20
 8003c6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3b04      	subs	r3, #4
 8003c7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f06f 0202 	mvn.w	r2, #2
 8003c82:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3b20      	subs	r3, #32
 8003c88:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	08003c9d 	.word	0x08003c9d

08003c9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <prvTaskExitError+0x54>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cae:	d00a      	beq.n	8003cc6 <prvTaskExitError+0x2a>
        __asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	60fb      	str	r3, [r7, #12]
    }
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <prvTaskExitError+0x28>
        __asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	60bb      	str	r3, [r7, #8]
    }
 8003cd8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003cda:	bf00      	nop
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0fc      	beq.n	8003cdc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003ce2:	bf00      	nop
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	20000018 	.word	0x20000018
	...

08003d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <pxCurrentTCBConst2>)
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	6808      	ldr	r0, [r1, #0]
 8003d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0a:	f380 8809 	msr	PSP, r0
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f380 8811 	msr	BASEPRI, r0
 8003d1a:	4770      	bx	lr
 8003d1c:	f3af 8000 	nop.w

08003d20 <pxCurrentTCBConst2>:
 8003d20:	20000224 	.word	0x20000224
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop

08003d28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003d28:	4808      	ldr	r0, [pc, #32]	; (8003d4c <prvPortStartFirstTask+0x24>)
 8003d2a:	6800      	ldr	r0, [r0, #0]
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	f380 8808 	msr	MSP, r0
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8814 	msr	CONTROL, r0
 8003d3a:	b662      	cpsie	i
 8003d3c:	b661      	cpsie	f
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	df00      	svc	0
 8003d48:	bf00      	nop
 8003d4a:	0000      	.short	0x0000
 8003d4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop

08003d54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d5a:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <xPortStartScheduler+0x120>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a46      	ldr	r2, [pc, #280]	; (8003e78 <xPortStartScheduler+0x124>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d10a      	bne.n	8003d7a <xPortStartScheduler+0x26>
        __asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	613b      	str	r3, [r7, #16]
    }
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d7a:	4b3e      	ldr	r3, [pc, #248]	; (8003e74 <xPortStartScheduler+0x120>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a3f      	ldr	r2, [pc, #252]	; (8003e7c <xPortStartScheduler+0x128>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d10a      	bne.n	8003d9a <xPortStartScheduler+0x46>
        __asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	60fb      	str	r3, [r7, #12]
    }
 8003d96:	bf00      	nop
 8003d98:	e7fe      	b.n	8003d98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d9a:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <xPortStartScheduler+0x12c>)
 8003d9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	22ff      	movs	r2, #255	; 0xff
 8003daa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <xPortStartScheduler+0x130>)
 8003dc0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <xPortStartScheduler+0x134>)
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dc8:	e009      	b.n	8003dde <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003dca:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <xPortStartScheduler+0x134>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	4a2d      	ldr	r2, [pc, #180]	; (8003e88 <xPortStartScheduler+0x134>)
 8003dd2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de6:	2b80      	cmp	r3, #128	; 0x80
 8003de8:	d0ef      	beq.n	8003dca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dea:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <xPortStartScheduler+0x134>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f1c3 0307 	rsb	r3, r3, #7
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d00a      	beq.n	8003e0c <xPortStartScheduler+0xb8>
        __asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	60bb      	str	r3, [r7, #8]
    }
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <xPortStartScheduler+0x134>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <xPortStartScheduler+0x134>)
 8003e14:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e16:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <xPortStartScheduler+0x134>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e1e:	4a1a      	ldr	r2, [pc, #104]	; (8003e88 <xPortStartScheduler+0x134>)
 8003e20:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003e2a:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <xPortStartScheduler+0x138>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <xPortStartScheduler+0x138>)
 8003e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e34:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <xPortStartScheduler+0x138>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <xPortStartScheduler+0x138>)
 8003e3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e40:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003e42:	f000 f8e3 	bl	800400c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003e46:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <xPortStartScheduler+0x13c>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003e4c:	f000 f902 	bl	8004054 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e50:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <xPortStartScheduler+0x140>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0f      	ldr	r2, [pc, #60]	; (8003e94 <xPortStartScheduler+0x140>)
 8003e56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e5a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e5c:	f7ff ff64 	bl	8003d28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e60:	f7ff f860 	bl	8002f24 <vTaskSwitchContext>
    prvTaskExitError();
 8003e64:	f7ff ff1a 	bl	8003c9c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	e000ed00 	.word	0xe000ed00
 8003e78:	410fc271 	.word	0x410fc271
 8003e7c:	410fc270 	.word	0x410fc270
 8003e80:	e000e400 	.word	0xe000e400
 8003e84:	20000364 	.word	0x20000364
 8003e88:	20000368 	.word	0x20000368
 8003e8c:	e000ed20 	.word	0xe000ed20
 8003e90:	20000018 	.word	0x20000018
 8003e94:	e000ef34 	.word	0xe000ef34

08003e98 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	607b      	str	r3, [r7, #4]
    }
 8003eb0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <vPortEnterCritical+0x58>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	4a0d      	ldr	r2, [pc, #52]	; (8003ef0 <vPortEnterCritical+0x58>)
 8003eba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <vPortEnterCritical+0x58>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d10f      	bne.n	8003ee4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <vPortEnterCritical+0x5c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <vPortEnterCritical+0x4c>
        __asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	603b      	str	r3, [r7, #0]
    }
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <vPortEnterCritical+0x4a>
    }
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	20000018 	.word	0x20000018
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <vPortExitCritical+0x50>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <vPortExitCritical+0x24>
        __asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	607b      	str	r3, [r7, #4]
    }
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <vPortExitCritical+0x50>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <vPortExitCritical+0x50>)
 8003f24:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <vPortExitCritical+0x50>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d105      	bne.n	8003f3a <vPortExitCritical+0x42>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	f383 8811 	msr	BASEPRI, r3
    }
 8003f38:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000018 	.word	0x20000018
 8003f4c:	00000000 	.word	0x00000000

08003f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003f50:	f3ef 8009 	mrs	r0, PSP
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <pxCurrentTCBConst>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f01e 0f10 	tst.w	lr, #16
 8003f60:	bf08      	it	eq
 8003f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6a:	6010      	str	r0, [r2, #0]
 8003f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f74:	f380 8811 	msr	BASEPRI, r0
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f7fe ffd0 	bl	8002f24 <vTaskSwitchContext>
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f380 8811 	msr	BASEPRI, r0
 8003f8c:	bc09      	pop	{r0, r3}
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	6808      	ldr	r0, [r1, #0]
 8003f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f96:	f01e 0f10 	tst.w	lr, #16
 8003f9a:	bf08      	it	eq
 8003f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fa0:	f380 8809 	msr	PSP, r0
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w

08003fb0 <pxCurrentTCBConst>:
 8003fb0:	20000224 	.word	0x20000224
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop

08003fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
        __asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	607b      	str	r3, [r7, #4]
    }
 8003fd0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003fd2:	f002 fa7d 	bl	80064d0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003fd6:	f7fe fee9 	bl	8002dac <xTaskIncrementTick>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003fe0:	f002 fad4 	bl	800658c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fe4:	4b08      	ldr	r3, [pc, #32]	; (8004008 <SysTick_Handler+0x50>)
 8003fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e001      	b.n	8003ff2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003fee:	f002 fab1 	bl	8006554 <SEGGER_SYSVIEW_RecordExitISR>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f383 8811 	msr	BASEPRI, r3
    }
 8003ffc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <vPortSetupTimerInterrupt+0x34>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <vPortSetupTimerInterrupt+0x38>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <vPortSetupTimerInterrupt+0x3c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <vPortSetupTimerInterrupt+0x40>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	4a09      	ldr	r2, [pc, #36]	; (8004050 <vPortSetupTimerInterrupt+0x44>)
 800402a:	3b01      	subs	r3, #1
 800402c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <vPortSetupTimerInterrupt+0x34>)
 8004030:	2207      	movs	r2, #7
 8004032:	601a      	str	r2, [r3, #0]
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	e000e010 	.word	0xe000e010
 8004044:	e000e018 	.word	0xe000e018
 8004048:	20000030 	.word	0x20000030
 800404c:	10624dd3 	.word	0x10624dd3
 8004050:	e000e014 	.word	0xe000e014

08004054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004064 <vPortEnableVFP+0x10>
 8004058:	6801      	ldr	r1, [r0, #0]
 800405a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800405e:	6001      	str	r1, [r0, #0]
 8004060:	4770      	bx	lr
 8004062:	0000      	.short	0x0000
 8004064:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop

0800406c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004072:	f3ef 8305 	mrs	r3, IPSR
 8004076:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b0f      	cmp	r3, #15
 800407c:	d914      	bls.n	80040a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <vPortValidateInterruptPriority+0x70>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <vPortValidateInterruptPriority+0x74>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	7afa      	ldrb	r2, [r7, #11]
 800408e:	429a      	cmp	r2, r3
 8004090:	d20a      	bcs.n	80040a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	607b      	str	r3, [r7, #4]
    }
 80040a4:	bf00      	nop
 80040a6:	e7fe      	b.n	80040a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <vPortValidateInterruptPriority+0x78>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <vPortValidateInterruptPriority+0x7c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d90a      	bls.n	80040ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	603b      	str	r3, [r7, #0]
    }
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <vPortValidateInterruptPriority+0x60>
    }
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	e000e3f0 	.word	0xe000e3f0
 80040e0:	20000364 	.word	0x20000364
 80040e4:	e000ed0c 	.word	0xe000ed0c
 80040e8:	20000368 	.word	0x20000368

080040ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80040f8:	f7fe fd9a 	bl	8002c30 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80040fc:	4b65      	ldr	r3, [pc, #404]	; (8004294 <pvPortMalloc+0x1a8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004104:	f000 f934 	bl	8004370 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004108:	4b63      	ldr	r3, [pc, #396]	; (8004298 <pvPortMalloc+0x1ac>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 80a7 	bne.w	8004264 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d02d      	beq.n	8004178 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800411c:	2208      	movs	r2, #8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d227      	bcs.n	8004178 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004128:	2208      	movs	r2, #8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	2b00      	cmp	r3, #0
 8004138:	d021      	beq.n	800417e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f023 0307 	bic.w	r3, r3, #7
 8004140:	3308      	adds	r3, #8
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	429a      	cmp	r2, r3
 8004146:	d214      	bcs.n	8004172 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	3308      	adds	r3, #8
 8004150:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	2b00      	cmp	r3, #0
 800415a:	d010      	beq.n	800417e <pvPortMalloc+0x92>
        __asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	617b      	str	r3, [r7, #20]
    }
 800416e:	bf00      	nop
 8004170:	e7fe      	b.n	8004170 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004176:	e002      	b.n	800417e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	e000      	b.n	8004180 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800417e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d06e      	beq.n	8004264 <pvPortMalloc+0x178>
 8004186:	4b45      	ldr	r3, [pc, #276]	; (800429c <pvPortMalloc+0x1b0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	d869      	bhi.n	8004264 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004190:	4b43      	ldr	r3, [pc, #268]	; (80042a0 <pvPortMalloc+0x1b4>)
 8004192:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004194:	4b42      	ldr	r3, [pc, #264]	; (80042a0 <pvPortMalloc+0x1b4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800419a:	e004      	b.n	80041a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d903      	bls.n	80041b8 <pvPortMalloc+0xcc>
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f1      	bne.n	800419c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80041b8:	4b36      	ldr	r3, [pc, #216]	; (8004294 <pvPortMalloc+0x1a8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	429a      	cmp	r2, r3
 80041c0:	d050      	beq.n	8004264 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2208      	movs	r2, #8
 80041c8:	4413      	add	r3, r2
 80041ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	2308      	movs	r3, #8
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d91f      	bls.n	8004224 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <pvPortMalloc+0x120>
        __asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	613b      	str	r3, [r7, #16]
    }
 8004208:	bf00      	nop
 800420a:	e7fe      	b.n	800420a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	1ad2      	subs	r2, r2, r3
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800421e:	69b8      	ldr	r0, [r7, #24]
 8004220:	f000 f908 	bl	8004434 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004224:	4b1d      	ldr	r3, [pc, #116]	; (800429c <pvPortMalloc+0x1b0>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	4a1b      	ldr	r2, [pc, #108]	; (800429c <pvPortMalloc+0x1b0>)
 8004230:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004232:	4b1a      	ldr	r3, [pc, #104]	; (800429c <pvPortMalloc+0x1b0>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <pvPortMalloc+0x1b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d203      	bcs.n	8004246 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800423e:	4b17      	ldr	r3, [pc, #92]	; (800429c <pvPortMalloc+0x1b0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <pvPortMalloc+0x1b8>)
 8004244:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	4b13      	ldr	r3, [pc, #76]	; (8004298 <pvPortMalloc+0x1ac>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	431a      	orrs	r2, r3
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <pvPortMalloc+0x1bc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <pvPortMalloc+0x1bc>)
 8004262:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004264:	f7fe fcf2 	bl	8002c4c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <pvPortMalloc+0x19c>
        __asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	60fb      	str	r3, [r7, #12]
    }
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <pvPortMalloc+0x19a>
    return pvReturn;
 8004288:	69fb      	ldr	r3, [r7, #28]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3728      	adds	r7, #40	; 0x28
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20012f74 	.word	0x20012f74
 8004298:	20012f88 	.word	0x20012f88
 800429c:	20012f78 	.word	0x20012f78
 80042a0:	20012f6c 	.word	0x20012f6c
 80042a4:	20012f7c 	.word	0x20012f7c
 80042a8:	20012f80 	.word	0x20012f80

080042ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d04d      	beq.n	800435a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80042be:	2308      	movs	r3, #8
 80042c0:	425b      	negs	r3, r3
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4413      	add	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	4b24      	ldr	r3, [pc, #144]	; (8004364 <vPortFree+0xb8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <vPortFree+0x44>
        __asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	60fb      	str	r3, [r7, #12]
    }
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <vPortFree+0x62>
        __asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	60bb      	str	r3, [r7, #8]
    }
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	4b14      	ldr	r3, [pc, #80]	; (8004364 <vPortFree+0xb8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01e      	beq.n	800435a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d11a      	bne.n	800435a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <vPortFree+0xb8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	43db      	mvns	r3, r3
 800432e:	401a      	ands	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004334:	f7fe fc7c 	bl	8002c30 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <vPortFree+0xbc>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4413      	add	r3, r2
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <vPortFree+0xbc>)
 8004344:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004346:	6938      	ldr	r0, [r7, #16]
 8004348:	f000 f874 	bl	8004434 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800434c:	4b07      	ldr	r3, [pc, #28]	; (800436c <vPortFree+0xc0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3301      	adds	r3, #1
 8004352:	4a06      	ldr	r2, [pc, #24]	; (800436c <vPortFree+0xc0>)
 8004354:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004356:	f7fe fc79 	bl	8002c4c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800435a:	bf00      	nop
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20012f88 	.word	0x20012f88
 8004368:	20012f78 	.word	0x20012f78
 800436c:	20012f84 	.word	0x20012f84

08004370 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004376:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800437a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800437c:	4b27      	ldr	r3, [pc, #156]	; (800441c <prvHeapInit+0xac>)
 800437e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3307      	adds	r3, #7
 800438e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0307 	bic.w	r3, r3, #7
 8004396:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	4a1f      	ldr	r2, [pc, #124]	; (800441c <prvHeapInit+0xac>)
 80043a0:	4413      	add	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043a8:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <prvHeapInit+0xb0>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80043ae:	4b1c      	ldr	r3, [pc, #112]	; (8004420 <prvHeapInit+0xb0>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	4413      	add	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80043bc:	2208      	movs	r2, #8
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0307 	bic.w	r3, r3, #7
 80043ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a15      	ldr	r2, [pc, #84]	; (8004424 <prvHeapInit+0xb4>)
 80043d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <prvHeapInit+0xb4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2200      	movs	r2, #0
 80043d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80043da:	4b12      	ldr	r3, [pc, #72]	; (8004424 <prvHeapInit+0xb4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	1ad2      	subs	r2, r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <prvHeapInit+0xb4>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <prvHeapInit+0xb8>)
 80043fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4a09      	ldr	r2, [pc, #36]	; (800442c <prvHeapInit+0xbc>)
 8004406:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <prvHeapInit+0xc0>)
 800440a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800440e:	601a      	str	r2, [r3, #0]
}
 8004410:	bf00      	nop
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	2000036c 	.word	0x2000036c
 8004420:	20012f6c 	.word	0x20012f6c
 8004424:	20012f74 	.word	0x20012f74
 8004428:	20012f7c 	.word	0x20012f7c
 800442c:	20012f78 	.word	0x20012f78
 8004430:	20012f88 	.word	0x20012f88

08004434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800443c:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <prvInsertBlockIntoFreeList+0xac>)
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e002      	b.n	8004448 <prvInsertBlockIntoFreeList+0x14>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	429a      	cmp	r2, r3
 8004450:	d8f7      	bhi.n	8004442 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4413      	add	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	429a      	cmp	r2, r3
 8004462:	d108      	bne.n	8004476 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	441a      	add	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	441a      	add	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d118      	bne.n	80044bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <prvInsertBlockIntoFreeList+0xb0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d00d      	beq.n	80044b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	441a      	add	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e008      	b.n	80044c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <prvInsertBlockIntoFreeList+0xb0>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	e003      	b.n	80044c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d002      	beq.n	80044d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20012f6c 	.word	0x20012f6c
 80044e4:	20012f74 	.word	0x20012f74

080044e8 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d161      	bne.n	80045be <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a33      	ldr	r2, [pc, #204]	; (80045cc <GPIO_PeriClockControl+0xe4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d106      	bne.n	8004510 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8004502:	4b33      	ldr	r3, [pc, #204]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	4a32      	ldr	r2, [pc, #200]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 800450e:	e056      	b.n	80045be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a30      	ldr	r2, [pc, #192]	; (80045d4 <GPIO_PeriClockControl+0xec>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d106      	bne.n	8004526 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8004518:	4b2d      	ldr	r3, [pc, #180]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	4a2c      	ldr	r2, [pc, #176]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004524:	e04b      	b.n	80045be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2b      	ldr	r2, [pc, #172]	; (80045d8 <GPIO_PeriClockControl+0xf0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d106      	bne.n	800453c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800452e:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	4a27      	ldr	r2, [pc, #156]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 8004534:	f043 0304 	orr.w	r3, r3, #4
 8004538:	6313      	str	r3, [r2, #48]	; 0x30
}
 800453a:	e040      	b.n	80045be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a27      	ldr	r2, [pc, #156]	; (80045dc <GPIO_PeriClockControl+0xf4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d106      	bne.n	8004552 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8004544:	4b22      	ldr	r3, [pc, #136]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	4a21      	ldr	r2, [pc, #132]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 800454a:	f043 0308 	orr.w	r3, r3, #8
 800454e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004550:	e035      	b.n	80045be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <GPIO_PeriClockControl+0xf8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d106      	bne.n	8004568 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800455a:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 8004560:	f043 0310 	orr.w	r3, r3, #16
 8004564:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004566:	e02a      	b.n	80045be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <GPIO_PeriClockControl+0xfc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d106      	bne.n	800457e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8004570:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 8004576:	f043 0320 	orr.w	r3, r3, #32
 800457a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800457c:	e01f      	b.n	80045be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <GPIO_PeriClockControl+0x100>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d106      	bne.n	8004594 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 800458c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004590:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004592:	e014      	b.n	80045be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a15      	ldr	r2, [pc, #84]	; (80045ec <GPIO_PeriClockControl+0x104>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d106      	bne.n	80045aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	4a0b      	ldr	r2, [pc, #44]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 80045a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80045a8:	e009      	b.n	80045be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <GPIO_PeriClockControl+0x108>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d105      	bne.n	80045be <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <GPIO_PeriClockControl+0xe8>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40020000 	.word	0x40020000
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40020400 	.word	0x40020400
 80045d8:	40020800 	.word	0x40020800
 80045dc:	40020c00 	.word	0x40020c00
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40021400 	.word	0x40021400
 80045e8:	40021800 	.word	0x40021800
 80045ec:	40021c00 	.word	0x40021c00
 80045f0:	40022000 	.word	0x40022000

080045f4 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff ff6e 	bl	80044e8 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	795b      	ldrb	r3, [r3, #5]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d820      	bhi.n	8004656 <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	795b      	ldrb	r3, [r3, #5]
 8004618:	461a      	mov	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	791b      	ldrb	r3, [r3, #4]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	791b      	ldrb	r3, [r3, #4]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	2103      	movs	r1, #3
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	4619      	mov	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	400a      	ands	r2, r1
 8004642:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6819      	ldr	r1, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e0cb      	b.n	80047ee <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	795b      	ldrb	r3, [r3, #5]
 800465a:	2b04      	cmp	r3, #4
 800465c:	d117      	bne.n	800468e <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800465e:	4b4b      	ldr	r3, [pc, #300]	; (800478c <GPIO_Init+0x198>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	7912      	ldrb	r2, [r2, #4]
 8004666:	4611      	mov	r1, r2
 8004668:	2201      	movs	r2, #1
 800466a:	408a      	lsls	r2, r1
 800466c:	4611      	mov	r1, r2
 800466e:	4a47      	ldr	r2, [pc, #284]	; (800478c <GPIO_Init+0x198>)
 8004670:	430b      	orrs	r3, r1
 8004672:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004674:	4b45      	ldr	r3, [pc, #276]	; (800478c <GPIO_Init+0x198>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	7912      	ldrb	r2, [r2, #4]
 800467c:	4611      	mov	r1, r2
 800467e:	2201      	movs	r2, #1
 8004680:	408a      	lsls	r2, r1
 8004682:	43d2      	mvns	r2, r2
 8004684:	4611      	mov	r1, r2
 8004686:	4a41      	ldr	r2, [pc, #260]	; (800478c <GPIO_Init+0x198>)
 8004688:	400b      	ands	r3, r1
 800468a:	6093      	str	r3, [r2, #8]
 800468c:	e035      	b.n	80046fa <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	795b      	ldrb	r3, [r3, #5]
 8004692:	2b05      	cmp	r3, #5
 8004694:	d117      	bne.n	80046c6 <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004696:	4b3d      	ldr	r3, [pc, #244]	; (800478c <GPIO_Init+0x198>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	7912      	ldrb	r2, [r2, #4]
 800469e:	4611      	mov	r1, r2
 80046a0:	2201      	movs	r2, #1
 80046a2:	408a      	lsls	r2, r1
 80046a4:	4611      	mov	r1, r2
 80046a6:	4a39      	ldr	r2, [pc, #228]	; (800478c <GPIO_Init+0x198>)
 80046a8:	430b      	orrs	r3, r1
 80046aa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80046ac:	4b37      	ldr	r3, [pc, #220]	; (800478c <GPIO_Init+0x198>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	7912      	ldrb	r2, [r2, #4]
 80046b4:	4611      	mov	r1, r2
 80046b6:	2201      	movs	r2, #1
 80046b8:	408a      	lsls	r2, r1
 80046ba:	43d2      	mvns	r2, r2
 80046bc:	4611      	mov	r1, r2
 80046be:	4a33      	ldr	r2, [pc, #204]	; (800478c <GPIO_Init+0x198>)
 80046c0:	400b      	ands	r3, r1
 80046c2:	60d3      	str	r3, [r2, #12]
 80046c4:	e019      	b.n	80046fa <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	795b      	ldrb	r3, [r3, #5]
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d115      	bne.n	80046fa <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80046ce:	4b2f      	ldr	r3, [pc, #188]	; (800478c <GPIO_Init+0x198>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	7912      	ldrb	r2, [r2, #4]
 80046d6:	4611      	mov	r1, r2
 80046d8:	2201      	movs	r2, #1
 80046da:	408a      	lsls	r2, r1
 80046dc:	4611      	mov	r1, r2
 80046de:	4a2b      	ldr	r2, [pc, #172]	; (800478c <GPIO_Init+0x198>)
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80046e4:	4b29      	ldr	r3, [pc, #164]	; (800478c <GPIO_Init+0x198>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	7912      	ldrb	r2, [r2, #4]
 80046ec:	4611      	mov	r1, r2
 80046ee:	2201      	movs	r2, #1
 80046f0:	408a      	lsls	r2, r1
 80046f2:	4611      	mov	r1, r2
 80046f4:	4a25      	ldr	r2, [pc, #148]	; (800478c <GPIO_Init+0x198>)
 80046f6:	430b      	orrs	r3, r1
 80046f8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	791b      	ldrb	r3, [r3, #4]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	791b      	ldrb	r3, [r3, #4]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <GPIO_Init+0x19c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d04e      	beq.n	80047b4 <GPIO_Init+0x1c0>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <GPIO_Init+0x1a0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d032      	beq.n	8004786 <GPIO_Init+0x192>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1c      	ldr	r2, [pc, #112]	; (8004798 <GPIO_Init+0x1a4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d02b      	beq.n	8004782 <GPIO_Init+0x18e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1b      	ldr	r2, [pc, #108]	; (800479c <GPIO_Init+0x1a8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d024      	beq.n	800477e <GPIO_Init+0x18a>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <GPIO_Init+0x1ac>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01d      	beq.n	800477a <GPIO_Init+0x186>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <GPIO_Init+0x1b0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d016      	beq.n	8004776 <GPIO_Init+0x182>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a16      	ldr	r2, [pc, #88]	; (80047a8 <GPIO_Init+0x1b4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00f      	beq.n	8004772 <GPIO_Init+0x17e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a15      	ldr	r2, [pc, #84]	; (80047ac <GPIO_Init+0x1b8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d008      	beq.n	800476e <GPIO_Init+0x17a>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <GPIO_Init+0x1bc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d101      	bne.n	800476a <GPIO_Init+0x176>
 8004766:	2308      	movs	r3, #8
 8004768:	e025      	b.n	80047b6 <GPIO_Init+0x1c2>
 800476a:	2300      	movs	r3, #0
 800476c:	e023      	b.n	80047b6 <GPIO_Init+0x1c2>
 800476e:	2307      	movs	r3, #7
 8004770:	e021      	b.n	80047b6 <GPIO_Init+0x1c2>
 8004772:	2306      	movs	r3, #6
 8004774:	e01f      	b.n	80047b6 <GPIO_Init+0x1c2>
 8004776:	2305      	movs	r3, #5
 8004778:	e01d      	b.n	80047b6 <GPIO_Init+0x1c2>
 800477a:	2304      	movs	r3, #4
 800477c:	e01b      	b.n	80047b6 <GPIO_Init+0x1c2>
 800477e:	2303      	movs	r3, #3
 8004780:	e019      	b.n	80047b6 <GPIO_Init+0x1c2>
 8004782:	2302      	movs	r3, #2
 8004784:	e017      	b.n	80047b6 <GPIO_Init+0x1c2>
 8004786:	2301      	movs	r3, #1
 8004788:	e015      	b.n	80047b6 <GPIO_Init+0x1c2>
 800478a:	bf00      	nop
 800478c:	40013c00 	.word	0x40013c00
 8004790:	40020000 	.word	0x40020000
 8004794:	40020400 	.word	0x40020400
 8004798:	40020800 	.word	0x40020800
 800479c:	40020c00 	.word	0x40020c00
 80047a0:	40021000 	.word	0x40021000
 80047a4:	40021400 	.word	0x40021400
 80047a8:	40021800 	.word	0x40021800
 80047ac:	40021c00 	.word	0x40021c00
 80047b0:	40022000 	.word	0x40022000
 80047b4:	2300      	movs	r3, #0
 80047b6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80047b8:	4b59      	ldr	r3, [pc, #356]	; (8004920 <GPIO_Init+0x32c>)
 80047ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047bc:	4a58      	ldr	r2, [pc, #352]	; (8004920 <GPIO_Init+0x32c>)
 80047be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80047c4:	7c7a      	ldrb	r2, [r7, #17]
 80047c6:	7cbb      	ldrb	r3, [r7, #18]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	fa02 f103 	lsl.w	r1, r2, r3
 80047ce:	4a55      	ldr	r2, [pc, #340]	; (8004924 <GPIO_Init+0x330>)
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	3302      	adds	r3, #2
 80047d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80047d8:	4b53      	ldr	r3, [pc, #332]	; (8004928 <GPIO_Init+0x334>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	7912      	ldrb	r2, [r2, #4]
 80047e0:	4611      	mov	r1, r2
 80047e2:	2201      	movs	r2, #1
 80047e4:	408a      	lsls	r2, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	4a4f      	ldr	r2, [pc, #316]	; (8004928 <GPIO_Init+0x334>)
 80047ea:	430b      	orrs	r3, r1
 80047ec:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	799b      	ldrb	r3, [r3, #6]
 80047f2:	461a      	mov	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	791b      	ldrb	r3, [r3, #4]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	791b      	ldrb	r3, [r3, #4]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	2103      	movs	r1, #3
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	400a      	ands	r2, r1
 800481c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6899      	ldr	r1, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	79db      	ldrb	r3, [r3, #7]
 8004832:	461a      	mov	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	791b      	ldrb	r3, [r3, #4]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	791b      	ldrb	r3, [r3, #4]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	2103      	movs	r1, #3
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	4619      	mov	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	400a      	ands	r2, r1
 800485c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68d9      	ldr	r1, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	430a      	orrs	r2, r1
 800486c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	7a1b      	ldrb	r3, [r3, #8]
 8004872:	461a      	mov	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	791b      	ldrb	r3, [r3, #4]
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	791b      	ldrb	r3, [r3, #4]
 8004888:	4619      	mov	r1, r3
 800488a:	2301      	movs	r3, #1
 800488c:	408b      	lsls	r3, r1
 800488e:	43db      	mvns	r3, r3
 8004890:	4619      	mov	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	400a      	ands	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6859      	ldr	r1, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	795b      	ldrb	r3, [r3, #5]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d131      	bne.n	8004916 <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	791b      	ldrb	r3, [r3, #4]
 80048b6:	08db      	lsrs	r3, r3, #3
 80048b8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	791b      	ldrb	r3, [r3, #4]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	7c3a      	ldrb	r2, [r7, #16]
 80048ca:	3208      	adds	r2, #8
 80048cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	220f      	movs	r2, #15
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	4618      	mov	r0, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	7c3a      	ldrb	r2, [r7, #16]
 80048e4:	4001      	ands	r1, r0
 80048e6:	3208      	adds	r2, #8
 80048e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	7c3a      	ldrb	r2, [r7, #16]
 80048f2:	3208      	adds	r2, #8
 80048f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	7a5b      	ldrb	r3, [r3, #9]
 80048fc:	461a      	mov	r2, r3
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	4618      	mov	r0, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	7c3a      	ldrb	r2, [r7, #16]
 800490e:	4301      	orrs	r1, r0
 8004910:	3208      	adds	r2, #8
 8004912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8004916:	bf00      	nop
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800
 8004924:	40013800 	.word	0x40013800
 8004928:	40013c00 	.word	0x40013c00

0800492c <GPIO_ReadFromInputPin>:
 *
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]

   return value;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
 8004964:	4613      	mov	r3, r2
 8004966:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8004968:	78bb      	ldrb	r3, [r7, #2]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d109      	bne.n	8004982 <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	2101      	movs	r1, #1
 8004976:	fa01 f202 	lsl.w	r2, r1, r2
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 8004980:	e009      	b.n	8004996 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	2101      	movs	r1, #1
 800498a:	fa01 f202 	lsl.w	r2, r1, r2
 800498e:	43d2      	mvns	r2, r2
 8004990:	401a      	ands	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	615a      	str	r2, [r3, #20]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	460b      	mov	r3, r1
 80049f8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8004a08:	78fa      	ldrb	r2, [r7, #3]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	611a      	str	r2, [r3, #16]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle ) {
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL)) {
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01f      	beq.n	8004a70 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	7f1b      	ldrb	r3, [r3, #28]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d112      	bne.n	8004a5e <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize  == 1) {
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d11f      	bne.n	8004a80 <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fa9e 	bl	8004f88 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8004a5c:	e010      	b.n	8004a80 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	60fb      	str	r3, [r7, #12]
}
 8004a6e:	e007      	b.n	8004a80 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	60fb      	str	r3, [r7, #12]
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <I2C_GenerateStopCondition>:


void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	601a      	str	r2, [r3, #0]
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <I2C_PeripheralControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi) {
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d106      	bne.n	8004ac8 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f043 0201 	orr.w	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	else
		pI2Cx->CR1 &= ~(1 << 0);
}
 8004ac6:	e005      	b.n	8004ad4 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f023 0201 	bic.w	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	601a      	str	r2, [r3, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <I2C_PeriClockControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d11f      	bne.n	8004b32 <I2C_PeriClockControl+0x52>
		if(pI2Cx == I2C1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a12      	ldr	r2, [pc, #72]	; (8004b40 <I2C_PeriClockControl+0x60>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d106      	bne.n	8004b08 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <I2C_PeriClockControl+0x64>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <I2C_PeriClockControl+0x64>)
 8004b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C3)
			I2C3_PCLK_EN();
	} else {
		//TODO
	}
}
 8004b06:	e014      	b.n	8004b32 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a0f      	ldr	r2, [pc, #60]	; (8004b48 <I2C_PeriClockControl+0x68>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d106      	bne.n	8004b1e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <I2C_PeriClockControl+0x64>)
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	4a0b      	ldr	r2, [pc, #44]	; (8004b44 <I2C_PeriClockControl+0x64>)
 8004b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b1a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004b1c:	e009      	b.n	8004b32 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <I2C_PeriClockControl+0x6c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d105      	bne.n	8004b32 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <I2C_PeriClockControl+0x64>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <I2C_PeriClockControl+0x64>)
 8004b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b30:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40005400 	.word	0x40005400
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40005800 	.word	0x40005800
 8004b4c:	40005c00 	.word	0x40005c00

08004b50 <I2C_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2101      	movs	r1, #1
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff ffbc 	bl	8004ae0 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7a5b      	ldrb	r3, [r3, #9]
 8004b6c:	029b      	lsls	r3, r3, #10
 8004b6e:	461a      	mov	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 8004b82:	f000 fa1d 	bl	8004fc0 <RCC_GetPCLK1Value>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4a47      	ldr	r2, [pc, #284]	; (8004ca8 <I2C_Init+0x158>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	0c9b      	lsrs	r3, r3, #18
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004ba0:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7a1b      	ldrb	r3, [r3, #8]
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	461a      	mov	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bba:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a36      	ldr	r2, [pc, #216]	; (8004cac <I2C_Init+0x15c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d80f      	bhi.n	8004bf6 <I2C_Init+0xa6>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004bd6:	f000 f9f3 	bl	8004fc0 <RCC_GetPCLK1Value>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004be8:	897b      	ldrh	r3, [r7, #10]
 8004bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e02d      	b.n	8004c52 <I2C_Init+0x102>
	} else {
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfc:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	7a9b      	ldrb	r3, [r3, #10]
 8004c02:	039b      	lsls	r3, r3, #14
 8004c04:	461a      	mov	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	7a9b      	ldrb	r3, [r3, #10]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004c14:	f000 f9d4 	bl	8004fc0 <RCC_GetPCLK1Value>
 8004c18:	4601      	mov	r1, r0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	4413      	add	r3, r2
 8004c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c28:	817b      	strh	r3, [r7, #10]
 8004c2a:	e00c      	b.n	8004c46 <I2C_Init+0xf6>
		else
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004c2c:	f000 f9c8 	bl	8004fc0 <RCC_GetPCLK1Value>
 8004c30:	4601      	mov	r1, r0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009a      	lsls	r2, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c44:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004c46:	897b      	ldrh	r3, [r7, #10]
 8004c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4a13      	ldr	r2, [pc, #76]	; (8004cac <I2C_Init+0x15c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d809      	bhi.n	8004c78 <I2C_Init+0x128>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8004c64:	f000 f9ac 	bl	8004fc0 <RCC_GetPCLK1Value>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <I2C_Init+0x158>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	0c9b      	lsrs	r3, r3, #18
 8004c72:	3301      	adds	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e00d      	b.n	8004c94 <I2C_Init+0x144>
	else
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8004c78:	f000 f9a2 	bl	8004fc0 <RCC_GetPCLK1Value>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	0a5b      	lsrs	r3, r3, #9
 8004c88:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <I2C_Init+0x160>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	09db      	lsrs	r3, r3, #7
 8004c90:	3301      	adds	r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004c9e:	621a      	str	r2, [r3, #32]

}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	431bde83 	.word	0x431bde83
 8004cac:	000186a0 	.word	0x000186a0
 8004cb0:	00044b83 	.word	0x00044b83

08004cb4 <I2C_GetFlagStatus>:
void I2C_DeInit(I2C_RegDef_t *pI2Cx) {

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName) {
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <I2C_GetFlagStatus+0x1c>
	return FLAG_RESET;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	70fb      	strb	r3, [r7, #3]
	uint32_t err_break;
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fe57 	bl	80049a2 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004cf8:	e006      	b.n	8004d08 <I2C_MasterSendData+0x2c>
		if(err_break++ > 10000) break;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	617a      	str	r2, [r7, #20]
 8004d00:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d809      	bhi.n	8004d1c <I2C_MasterSendData+0x40>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff ffd0 	bl	8004cb4 <I2C_GetFlagStatus>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0ef      	beq.n	8004cfa <I2C_MasterSendData+0x1e>
 8004d1a:	e000      	b.n	8004d1e <I2C_MasterSendData+0x42>
		if(err_break++ > 10000) break;
 8004d1c:	bf00      	nop
	}

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	4611      	mov	r1, r2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff fe4b 	bl	80049c2 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	err_break = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004d30:	e006      	b.n	8004d40 <I2C_MasterSendData+0x64>
		if(err_break++ > 10000) break;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	617a      	str	r2, [r7, #20]
 8004d38:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d809      	bhi.n	8004d54 <I2C_MasterSendData+0x78>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2102      	movs	r1, #2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ffb4 	bl	8004cb4 <I2C_GetFlagStatus>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0ef      	beq.n	8004d32 <I2C_MasterSendData+0x56>
 8004d52:	e000      	b.n	8004d56 <I2C_MasterSendData+0x7a>
		if(err_break++ > 10000) break;
 8004d54:	bf00      	nop
	}

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff fe5f 	bl	8004a1a <I2C_ClearADDRFlag>

	//6. send the data until length becomes 0

	while(Len > 0) {
 8004d5c:	e01f      	b.n	8004d9e <I2C_MasterSendData+0xc2>
		err_break = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { //Wait till TXE is set
 8004d62:	e006      	b.n	8004d72 <I2C_MasterSendData+0x96>
			if(err_break++ > 10000) break;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	617a      	str	r2, [r7, #20]
 8004d6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d809      	bhi.n	8004d86 <I2C_MasterSendData+0xaa>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { //Wait till TXE is set
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2180      	movs	r1, #128	; 0x80
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff9b 	bl	8004cb4 <I2C_GetFlagStatus>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ef      	beq.n	8004d64 <I2C_MasterSendData+0x88>
 8004d84:	e000      	b.n	8004d88 <I2C_MasterSendData+0xac>
			if(err_break++ > 10000) break;
 8004d86:	bf00      	nop
		}
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60bb      	str	r3, [r7, #8]
		Len--;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	607b      	str	r3, [r7, #4]
	while(Len > 0) {
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1dc      	bne.n	8004d5e <I2C_MasterSendData+0x82>
	}

	//7. when Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8004da8:	e006      	b.n	8004db8 <I2C_MasterSendData+0xdc>
		if(err_break++ > 10000) break;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	617a      	str	r2, [r7, #20]
 8004db0:	f242 7210 	movw	r2, #10000	; 0x2710
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d809      	bhi.n	8004dcc <I2C_MasterSendData+0xf0>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff ff78 	bl	8004cb4 <I2C_GetFlagStatus>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ef      	beq.n	8004daa <I2C_MasterSendData+0xce>
 8004dca:	e000      	b.n	8004dce <I2C_MasterSendData+0xf2>
		if(err_break++ > 10000) break;
 8004dcc:	bf00      	nop
	}

	err_break = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) {
 8004dd2:	e006      	b.n	8004de2 <I2C_MasterSendData+0x106>
		if(err_break++ > 10000) break;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	617a      	str	r2, [r7, #20]
 8004dda:	f242 7210 	movw	r2, #10000	; 0x2710
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d809      	bhi.n	8004df6 <I2C_MasterSendData+0x11a>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) {
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2104      	movs	r1, #4
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff63 	bl	8004cb4 <I2C_GetFlagStatus>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ef      	beq.n	8004dd4 <I2C_MasterSendData+0xf8>
 8004df4:	e000      	b.n	8004df8 <I2C_MasterSendData+0x11c>
		if(err_break++ > 10000) break;
 8004df6:	bf00      	nop
	}

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)
 8004df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <I2C_MasterSendData+0x12e>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fe3f 	bl	8004a88 <I2C_GenerateStopCondition>
}
 8004e0a:	bf00      	nop
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b086      	sub	sp, #24
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	461a      	mov	r2, r3
 8004e20:	460b      	mov	r3, r1
 8004e22:	71fb      	strb	r3, [r7, #7]
 8004e24:	4613      	mov	r3, r2
 8004e26:	71bb      	strb	r3, [r7, #6]
	uint32_t err_break;
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff fdb8 	bl	80049a2 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004e36:	e006      	b.n	8004e46 <I2C_MasterReceiveData+0x34>
		if(err_break++ > 10000) break;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	617a      	str	r2, [r7, #20]
 8004e3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d809      	bhi.n	8004e5a <I2C_MasterReceiveData+0x48>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff ff31 	bl	8004cb4 <I2C_GetFlagStatus>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0ef      	beq.n	8004e38 <I2C_MasterReceiveData+0x26>
 8004e58:	e000      	b.n	8004e5c <I2C_MasterReceiveData+0x4a>
		if(err_break++ > 10000) break;
 8004e5a:	bf00      	nop
	}

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	79ba      	ldrb	r2, [r7, #6]
 8004e62:	4611      	mov	r1, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fdc2 	bl	80049ee <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	err_break = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004e6e:	e006      	b.n	8004e7e <I2C_MasterReceiveData+0x6c>
		if(err_break++ > 10000) break;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	617a      	str	r2, [r7, #20]
 8004e76:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d809      	bhi.n	8004e92 <I2C_MasterReceiveData+0x80>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2102      	movs	r1, #2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ff15 	bl	8004cb4 <I2C_GetFlagStatus>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ef      	beq.n	8004e70 <I2C_MasterReceiveData+0x5e>
 8004e90:	e000      	b.n	8004e94 <I2C_MasterReceiveData+0x82>
		if(err_break++ > 10000) break;
 8004e92:	bf00      	nop
	}


	//procedure to read only 1 byte from slave
	if(Len == 1) {
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d12c      	bne.n	8004ef4 <I2C_MasterReceiveData+0xe2>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f871 	bl	8004f88 <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f7ff fdb7 	bl	8004a1a <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		err_break = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004eb0:	e006      	b.n	8004ec0 <I2C_MasterReceiveData+0xae>
			if(err_break++ > 10000) break;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	617a      	str	r2, [r7, #20]
 8004eb8:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d809      	bhi.n	8004ed4 <I2C_MasterReceiveData+0xc2>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2140      	movs	r1, #64	; 0x40
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fef4 	bl	8004cb4 <I2C_GetFlagStatus>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0ef      	beq.n	8004eb2 <I2C_MasterReceiveData+0xa0>
 8004ed2:	e000      	b.n	8004ed6 <I2C_MasterReceiveData+0xc4>
			if(err_break++ > 10000) break;
 8004ed4:	bf00      	nop
		}

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8004ed6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <I2C_MasterReceiveData+0xd6>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fdd0 	bl	8004a88 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1) {
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d938      	bls.n	8004f6c <I2C_MasterReceiveData+0x15a>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff fd8d 	bl	8004a1a <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--) {
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	e02f      	b.n	8004f66 <I2C_MasterReceiveData+0x154>
			//wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
				if(err_break++ > 10000) break;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	617a      	str	r2, [r7, #20]
 8004f0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d809      	bhi.n	8004f28 <I2C_MasterReceiveData+0x116>
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2140      	movs	r1, #64	; 0x40
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff feca 	bl	8004cb4 <I2C_GetFlagStatus>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0ef      	beq.n	8004f06 <I2C_MasterReceiveData+0xf4>
 8004f26:	e000      	b.n	8004f2a <I2C_MasterReceiveData+0x118>
				if(err_break++ > 10000) break;
 8004f28:	bf00      	nop
			}

			if(i == 2) { //if last 2 bytes are remaining
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d10e      	bne.n	8004f4e <I2C_MasterReceiveData+0x13c>
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f826 	bl	8004f88 <I2C_ManageAcking>
				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8004f3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d104      	bne.n	8004f4e <I2C_MasterReceiveData+0x13c>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fd9d 	bl	8004a88 <I2C_GenerateStopCondition>
			}
			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxBuffer++;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--) {
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1d3      	bne.n	8004f14 <I2C_MasterReceiveData+0x102>
		}
	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	7a5b      	ldrb	r3, [r3, #9]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d105      	bne.n	8004f80 <I2C_MasterReceiveData+0x16e>
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2101      	movs	r1, #1
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f804 	bl	8004f88 <I2C_ManageAcking>
}
 8004f80:	bf00      	nop
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d106      	bne.n	8004fa8 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
	else
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
}
 8004fa6:	e005      	b.n	8004fb4 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8004fc6:	4b25      	ldr	r3, [pc, #148]	; (800505c <RCC_GetPCLK1Value+0x9c>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8004fd4:	7a7b      	ldrb	r3, [r7, #9]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8004fda:	4b21      	ldr	r3, [pc, #132]	; (8005060 <RCC_GetPCLK1Value+0xa0>)
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e00b      	b.n	8004ff8 <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 1)
 8004fe0:	7a7b      	ldrb	r3, [r7, #9]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d102      	bne.n	8004fec <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8004fe6:	4b1f      	ldr	r3, [pc, #124]	; (8005064 <RCC_GetPCLK1Value+0xa4>)
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e005      	b.n	8004ff8 <RCC_GetPCLK1Value+0x38>
	else if (clksrc == 2)
 8004fec:	7a7b      	ldrb	r3, [r7, #9]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d102      	bne.n	8004ff8 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8004ff2:	f000 f83d 	bl	8005070 <RCC_GetPLLOutputClock>
 8004ff6:	60f8      	str	r0, [r7, #12]

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8004ff8:	4b18      	ldr	r3, [pc, #96]	; (800505c <RCC_GetPCLK1Value+0x9c>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8005006:	7a3b      	ldrb	r3, [r7, #8]
 8005008:	2b07      	cmp	r3, #7
 800500a:	d802      	bhi.n	8005012 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 800500c:	2301      	movs	r3, #1
 800500e:	72fb      	strb	r3, [r7, #11]
 8005010:	e005      	b.n	800501e <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_PreScaler[temp-8];
 8005012:	7a3b      	ldrb	r3, [r7, #8]
 8005014:	3b08      	subs	r3, #8
 8005016:	4a14      	ldr	r2, [pc, #80]	; (8005068 <RCC_GetPCLK1Value+0xa8>)
 8005018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800501c:	72fb      	strb	r3, [r7, #11]

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <RCC_GetPCLK1Value+0x9c>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	0a9b      	lsrs	r3, r3, #10
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 800502c:	7a3b      	ldrb	r3, [r7, #8]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d802      	bhi.n	8005038 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8005032:	2301      	movs	r3, #1
 8005034:	72bb      	strb	r3, [r7, #10]
 8005036:	e004      	b.n	8005042 <RCC_GetPCLK1Value+0x82>
	else
		apb1p = APB1_PreScaler[temp-4];
 8005038:	7a3b      	ldrb	r3, [r7, #8]
 800503a:	3b04      	subs	r3, #4
 800503c:	4a0b      	ldr	r2, [pc, #44]	; (800506c <RCC_GetPCLK1Value+0xac>)
 800503e:	5cd3      	ldrb	r3, [r2, r3]
 8005040:	72bb      	strb	r3, [r7, #10]

	pclk1 = (SystemClk / ahbp) /apb1p;
 8005042:	7afb      	ldrb	r3, [r7, #11]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	fbb2 f2f3 	udiv	r2, r2, r3
 800504a:	7abb      	ldrb	r3, [r7, #10]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	607b      	str	r3, [r7, #4]

	return pclk1;
 8005052:	687b      	ldr	r3, [r7, #4]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40023800 	.word	0x40023800
 8005060:	00f42400 	.word	0x00f42400
 8005064:	007a1200 	.word	0x007a1200
 8005068:	2000001c 	.word	0x2000001c
 800506c:	2000002c 	.word	0x2000002c

08005070 <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock() {
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
	return 0;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d11f      	bne.n	80050d2 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a12      	ldr	r2, [pc, #72]	; (80050e0 <SPI_PeriClockControl+0x60>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d106      	bne.n	80050a8 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <SPI_PeriClockControl+0x64>)
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <SPI_PeriClockControl+0x64>)
 80050a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050a4:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 80050a6:	e014      	b.n	80050d2 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a0f      	ldr	r2, [pc, #60]	; (80050e8 <SPI_PeriClockControl+0x68>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d106      	bne.n	80050be <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80050b0:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <SPI_PeriClockControl+0x64>)
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	4a0b      	ldr	r2, [pc, #44]	; (80050e4 <SPI_PeriClockControl+0x64>)
 80050b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80050bc:	e009      	b.n	80050d2 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <SPI_PeriClockControl+0x6c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d105      	bne.n	80050d2 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <SPI_PeriClockControl+0x64>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	4a06      	ldr	r2, [pc, #24]	; (80050e4 <SPI_PeriClockControl+0x64>)
 80050cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40013000 	.word	0x40013000
 80050e4:	40023800 	.word	0x40023800
 80050e8:	40003800 	.word	0x40003800
 80050ec:	40003c00 	.word	0x40003c00

080050f0 <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ffbe 	bl	8005080 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	791b      	ldrb	r3, [r3, #4]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	461a      	mov	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	795b      	ldrb	r3, [r3, #5]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d104      	bne.n	8005128 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	e014      	b.n	8005152 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	795b      	ldrb	r3, [r3, #5]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d104      	bne.n	800513a <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e00b      	b.n	8005152 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	795b      	ldrb	r3, [r3, #5]
 800513e:	2b03      	cmp	r3, #3
 8005140:	d107      	bne.n	8005152 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005148:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005150:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	799b      	ldrb	r3, [r3, #6]
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	461a      	mov	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	79db      	ldrb	r3, [r3, #7]
 8005164:	02db      	lsls	r3, r3, #11
 8005166:	461a      	mov	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	7a1b      	ldrb	r3, [r3, #8]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	461a      	mov	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	7a5b      	ldrb	r3, [r3, #9]
 8005180:	461a      	mov	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	7a9b      	ldrb	r3, [r3, #10]
 800518c:	025b      	lsls	r3, r3, #9
 800518e:	461a      	mov	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]

}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	460b      	mov	r3, r1
 80051b0:	70fb      	strb	r3, [r7, #3]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 80051b2:	bf00      	nop
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f9      	beq.n	80051b4 <SPI_Transfer+0xe>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f3      	bne.n	80051b4 <SPI_Transfer+0xe>
	pSPIx->DR = data;
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60da      	str	r2, [r3, #12]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 80051d2:	bf00      	nop
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f9      	beq.n	80051d4 <SPI_Transfer+0x2e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1f3      	bne.n	80051d4 <SPI_Transfer+0x2e>
	return pSPIx->DR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d106      	bne.n	800521c <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 800521a:	e005      	b.n	8005228 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	601a      	str	r2, [r3, #0]
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d106      	bne.n	8005254 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f043 0204 	orr.w	r2, r3, #4
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8005252:	e005      	b.n	8005260 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f023 0204 	bic.w	r2, r3, #4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	605a      	str	r2, [r3, #4]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800527a:	2205      	movs	r2, #5
 800527c:	492b      	ldr	r1, [pc, #172]	; (800532c <SYSVIEW_AddTask+0xc0>)
 800527e:	68b8      	ldr	r0, [r7, #8]
 8005280:	f002 ff74 	bl	800816c <memcmp>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d04b      	beq.n	8005322 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800528a:	4b29      	ldr	r3, [pc, #164]	; (8005330 <SYSVIEW_AddTask+0xc4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b07      	cmp	r3, #7
 8005290:	d903      	bls.n	800529a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005292:	4828      	ldr	r0, [pc, #160]	; (8005334 <SYSVIEW_AddTask+0xc8>)
 8005294:	f001 fbc4 	bl	8006a20 <SEGGER_SYSVIEW_Warn>
    return;
 8005298:	e044      	b.n	8005324 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800529a:	4b25      	ldr	r3, [pc, #148]	; (8005330 <SYSVIEW_AddTask+0xc4>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	4926      	ldr	r1, [pc, #152]	; (8005338 <SYSVIEW_AddTask+0xcc>)
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80052ae:	4b20      	ldr	r3, [pc, #128]	; (8005330 <SYSVIEW_AddTask+0xc4>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4921      	ldr	r1, [pc, #132]	; (8005338 <SYSVIEW_AddTask+0xcc>)
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	3304      	adds	r3, #4
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80052c4:	4b1a      	ldr	r3, [pc, #104]	; (8005330 <SYSVIEW_AddTask+0xc4>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	491b      	ldr	r1, [pc, #108]	; (8005338 <SYSVIEW_AddTask+0xcc>)
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	3308      	adds	r3, #8
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <SYSVIEW_AddTask+0xc4>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4916      	ldr	r1, [pc, #88]	; (8005338 <SYSVIEW_AddTask+0xcc>)
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	330c      	adds	r3, #12
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80052f0:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <SYSVIEW_AddTask+0xc4>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4910      	ldr	r1, [pc, #64]	; (8005338 <SYSVIEW_AddTask+0xcc>)
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	3310      	adds	r3, #16
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <SYSVIEW_AddTask+0xc4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3301      	adds	r3, #1
 800530c:	4a08      	ldr	r2, [pc, #32]	; (8005330 <SYSVIEW_AddTask+0xc4>)
 800530e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f80e 	bl	800533c <SYSVIEW_SendTaskInfo>
 8005320:	e000      	b.n	8005324 <SYSVIEW_AddTask+0xb8>
    return;
 8005322:	bf00      	nop

}
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	0800aed0 	.word	0x0800aed0
 8005330:	2001302c 	.word	0x2001302c
 8005334:	0800aed8 	.word	0x0800aed8
 8005338:	20012f8c 	.word	0x20012f8c

0800533c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b08a      	sub	sp, #40	; 0x28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800534a:	f107 0314 	add.w	r3, r7, #20
 800534e:	2214      	movs	r2, #20
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f002 ff26 	bl	80081a4 <memset>
  TaskInfo.TaskID     = TaskID;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800536c:	f107 0314 	add.w	r3, r7, #20
 8005370:	4618      	mov	r0, r3
 8005372:	f000 ff83 	bl	800627c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005376:	bf00      	nop
 8005378:	3728      	adds	r7, #40	; 0x28
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <_DoInit+0x98>)
 8005388:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2203      	movs	r2, #3
 800538e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2203      	movs	r2, #3
 8005394:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a20      	ldr	r2, [pc, #128]	; (800541c <_DoInit+0x9c>)
 800539a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a20      	ldr	r2, [pc, #128]	; (8005420 <_DoInit+0xa0>)
 80053a0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053a8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a17      	ldr	r2, [pc, #92]	; (800541c <_DoInit+0x9c>)
 80053c0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a17      	ldr	r2, [pc, #92]	; (8005424 <_DoInit+0xa4>)
 80053c6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2210      	movs	r2, #16
 80053cc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3307      	adds	r3, #7
 80053e4:	4a10      	ldr	r2, [pc, #64]	; (8005428 <_DoInit+0xa8>)
 80053e6:	6810      	ldr	r0, [r2, #0]
 80053e8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80053ea:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a0e      	ldr	r2, [pc, #56]	; (800542c <_DoInit+0xac>)
 80053f2:	6810      	ldr	r0, [r2, #0]
 80053f4:	6018      	str	r0, [r3, #0]
 80053f6:	8891      	ldrh	r1, [r2, #4]
 80053f8:	7992      	ldrb	r2, [r2, #6]
 80053fa:	8099      	strh	r1, [r3, #4]
 80053fc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80053fe:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005408:	f3bf 8f5f 	dmb	sy
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	200137d0 	.word	0x200137d0
 800541c:	0800af28 	.word	0x0800af28
 8005420:	20013030 	.word	0x20013030
 8005424:	20013430 	.word	0x20013430
 8005428:	0800af34 	.word	0x0800af34
 800542c:	0800af38 	.word	0x0800af38

08005430 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	; 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800543c:	2300      	movs	r3, #0
 800543e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	429a      	cmp	r2, r3
 8005452:	d905      	bls.n	8005460 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
 800545e:	e007      	b.n	8005470 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	69b9      	ldr	r1, [r7, #24]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	1acb      	subs	r3, r1, r3
 800546a:	4413      	add	r3, r2
 800546c:	3b01      	subs	r3, #1
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547a:	4293      	cmp	r3, r2
 800547c:	bf28      	it	cs
 800547e:	4613      	movcs	r3, r2
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4293      	cmp	r3, r2
 8005488:	bf28      	it	cs
 800548a:	4613      	movcs	r3, r2
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	6978      	ldr	r0, [r7, #20]
 800549e:	f002 fe73 	bl	8008188 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80054a2:	6a3a      	ldr	r2, [r7, #32]
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	4413      	add	r3, r2
 80054a8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	4413      	add	r3, r2
 80054b0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	4413      	add	r3, r2
 80054c0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d101      	bne.n	80054d0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1b2      	bne.n	8005446 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80054e0:	6a3b      	ldr	r3, [r7, #32]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3728      	adds	r7, #40	; 0x28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b088      	sub	sp, #32
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d911      	bls.n	8005532 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	6938      	ldr	r0, [r7, #16]
 800551e:	f002 fe33 	bl	8008188 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005522:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	441a      	add	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005530:	e01f      	b.n	8005572 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	6938      	ldr	r0, [r7, #16]
 8005546:	f002 fe1f 	bl	8008188 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4413      	add	r3, r2
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4619      	mov	r1, r3
 8005562:	6938      	ldr	r0, [r7, #16]
 8005564:	f002 fe10 	bl	8008188 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005568:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	60da      	str	r2, [r3, #12]
}
 8005572:	bf00      	nop
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800557a:	b480      	push	{r7}
 800557c:	b087      	sub	sp, #28
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	429a      	cmp	r2, r3
 8005594:	d808      	bhi.n	80055a8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad2      	subs	r2, r2, r3
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4413      	add	r3, r2
 80055a2:	3b01      	subs	r3, #1
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	e004      	b.n	80055b2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80055b2:	697b      	ldr	r3, [r7, #20]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08c      	sub	sp, #48	; 0x30
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80055cc:	4b3e      	ldr	r3, [pc, #248]	; (80056c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80055ce:	623b      	str	r3, [r7, #32]
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <SEGGER_RTT_ReadNoLock+0x1e>
 80055da:	f7ff fed1 	bl	8005380 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4613      	mov	r3, r2
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4413      	add	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	3360      	adds	r3, #96	; 0x60
 80055ea:	4a37      	ldr	r2, [pc, #220]	; (80056c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80055ec:	4413      	add	r3, r2
 80055ee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005600:	2300      	movs	r3, #0
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	429a      	cmp	r2, r3
 800560a:	d92b      	bls.n	8005664 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4293      	cmp	r3, r2
 800561c:	bf28      	it	cs
 800561e:	4613      	movcs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	4413      	add	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	6939      	ldr	r1, [r7, #16]
 8005630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005632:	f002 fda9 	bl	8008188 <memcpy>
    NumBytesRead += NumBytesRem;
 8005636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4413      	add	r3, r2
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800563e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	4413      	add	r3, r2
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800564e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	4413      	add	r3, r2
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800565c:	429a      	cmp	r2, r3
 800565e:	d101      	bne.n	8005664 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005660:	2300      	movs	r3, #0
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4293      	cmp	r3, r2
 8005672:	bf28      	it	cs
 8005674:	4613      	movcs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d019      	beq.n	80056b2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	4413      	add	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	6939      	ldr	r1, [r7, #16]
 800568c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800568e:	f002 fd7b 	bl	8008188 <memcpy>
    NumBytesRead += NumBytesRem;
 8005692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	4413      	add	r3, r2
 8005698:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800569a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	4413      	add	r3, r2
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4413      	add	r3, r2
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056bc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3730      	adds	r7, #48	; 0x30
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	200137d0 	.word	0x200137d0

080056cc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	4613      	mov	r3, r2
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	4413      	add	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4a1f      	ldr	r2, [pc, #124]	; (8005768 <SEGGER_RTT_WriteNoLock+0x9c>)
 80056ea:	4413      	add	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d029      	beq.n	800574a <SEGGER_RTT_WriteNoLock+0x7e>
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d82e      	bhi.n	8005758 <SEGGER_RTT_WriteNoLock+0x8c>
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <SEGGER_RTT_WriteNoLock+0x38>
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d013      	beq.n	800572a <SEGGER_RTT_WriteNoLock+0x5e>
 8005702:	e029      	b.n	8005758 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005704:	6978      	ldr	r0, [r7, #20]
 8005706:	f7ff ff38 	bl	800557a <_GetAvailWriteSpace>
 800570a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	429a      	cmp	r2, r3
 8005712:	d202      	bcs.n	800571a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005714:	2300      	movs	r3, #0
 8005716:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005718:	e021      	b.n	800575e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	69b9      	ldr	r1, [r7, #24]
 8005722:	6978      	ldr	r0, [r7, #20]
 8005724:	f7ff fee1 	bl	80054ea <_WriteNoCheck>
    break;
 8005728:	e019      	b.n	800575e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f7ff ff25 	bl	800557a <_GetAvailWriteSpace>
 8005730:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4293      	cmp	r3, r2
 8005738:	bf28      	it	cs
 800573a:	4613      	movcs	r3, r2
 800573c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	69b9      	ldr	r1, [r7, #24]
 8005742:	6978      	ldr	r0, [r7, #20]
 8005744:	f7ff fed1 	bl	80054ea <_WriteNoCheck>
    break;
 8005748:	e009      	b.n	800575e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	69b9      	ldr	r1, [r7, #24]
 800574e:	6978      	ldr	r0, [r7, #20]
 8005750:	f7ff fe6e 	bl	8005430 <_WriteBlocking>
 8005754:	61f8      	str	r0, [r7, #28]
    break;
 8005756:	e002      	b.n	800575e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005758:	2300      	movs	r3, #0
 800575a:	61fb      	str	r3, [r7, #28]
    break;
 800575c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800575e:	69fb      	ldr	r3, [r7, #28]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	200137d0 	.word	0x200137d0

0800576c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005778:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <SEGGER_RTT_Write+0x48>)
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <SEGGER_RTT_Write+0x1e>
 8005786:	f7ff fdfb 	bl	8005380 <_DoInit>
  SEGGER_RTT_LOCK();
 800578a:	f3ef 8311 	mrs	r3, BASEPRI
 800578e:	f04f 0120 	mov.w	r1, #32
 8005792:	f381 8811 	msr	BASEPRI, r1
 8005796:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff ff95 	bl	80056cc <SEGGER_RTT_WriteNoLock>
 80057a2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80057aa:	697b      	ldr	r3, [r7, #20]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	200137d0 	.word	0x200137d0

080057b8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00f      	beq.n	80057ee <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80057ce:	e002      	b.n	80057d6 <_EncodeStr+0x1e>
      Len++;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	3301      	adds	r3, #1
 80057d4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f6      	bne.n	80057d0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d901      	bls.n	80057ee <_EncodeStr+0x36>
      Len = Limit;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2bfe      	cmp	r3, #254	; 0xfe
 80057f2:	d806      	bhi.n	8005802 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	60fa      	str	r2, [r7, #12]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e011      	b.n	8005826 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	60fa      	str	r2, [r7, #12]
 8005808:	22ff      	movs	r2, #255	; 0xff
 800580a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	60fa      	str	r2, [r7, #12]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	0a19      	lsrs	r1, r3, #8
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	60fa      	str	r2, [r7, #12]
 8005822:	b2ca      	uxtb	r2, r1
 8005824:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800582a:	e00a      	b.n	8005842 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	1c53      	adds	r3, r2, #1
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	1c59      	adds	r1, r3, #1
 8005836:	60f9      	str	r1, [r7, #12]
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	701a      	strb	r2, [r3, #0]
    n++;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	3301      	adds	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	429a      	cmp	r2, r3
 8005848:	d3f0      	bcc.n	800582c <_EncodeStr+0x74>
  }
  return pPayload;
 800584a:	68fb      	ldr	r3, [r7, #12]
}
 800584c:	4618      	mov	r0, r3
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005876:	4b36      	ldr	r3, [pc, #216]	; (8005950 <_HandleIncomingPacket+0xe0>)
 8005878:	7e1b      	ldrb	r3, [r3, #24]
 800587a:	4618      	mov	r0, r3
 800587c:	1cfb      	adds	r3, r7, #3
 800587e:	2201      	movs	r2, #1
 8005880:	4619      	mov	r1, r3
 8005882:	f7ff fe9d 	bl	80055c0 <SEGGER_RTT_ReadNoLock>
 8005886:	4603      	mov	r3, r0
 8005888:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	dd54      	ble.n	800593a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d032      	beq.n	80058fc <_HandleIncomingPacket+0x8c>
 8005896:	2b80      	cmp	r3, #128	; 0x80
 8005898:	dc42      	bgt.n	8005920 <_HandleIncomingPacket+0xb0>
 800589a:	2b07      	cmp	r3, #7
 800589c:	dc16      	bgt.n	80058cc <_HandleIncomingPacket+0x5c>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	dd3e      	ble.n	8005920 <_HandleIncomingPacket+0xb0>
 80058a2:	3b01      	subs	r3, #1
 80058a4:	2b06      	cmp	r3, #6
 80058a6:	d83b      	bhi.n	8005920 <_HandleIncomingPacket+0xb0>
 80058a8:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <_HandleIncomingPacket+0x40>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080058d3 	.word	0x080058d3
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058df 	.word	0x080058df
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058eb 	.word	0x080058eb
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	080058f7 	.word	0x080058f7
 80058cc:	2b7f      	cmp	r3, #127	; 0x7f
 80058ce:	d036      	beq.n	800593e <_HandleIncomingPacket+0xce>
 80058d0:	e026      	b.n	8005920 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80058d2:	f000 fb57 	bl	8005f84 <SEGGER_SYSVIEW_Start>
      break;
 80058d6:	e037      	b.n	8005948 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80058d8:	f000 fc10 	bl	80060fc <SEGGER_SYSVIEW_Stop>
      break;
 80058dc:	e034      	b.n	8005948 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80058de:	f000 fdc5 	bl	800646c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80058e2:	e031      	b.n	8005948 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80058e4:	f000 fdae 	bl	8006444 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80058e8:	e02e      	b.n	8005948 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80058ea:	f000 fc2d 	bl	8006148 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80058ee:	e02b      	b.n	8005948 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80058f0:	f001 f858 	bl	80069a4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80058f4:	e028      	b.n	8005948 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80058f6:	f001 f837 	bl	8006968 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80058fa:	e025      	b.n	8005948 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058fc:	4b14      	ldr	r3, [pc, #80]	; (8005950 <_HandleIncomingPacket+0xe0>)
 80058fe:	7e1b      	ldrb	r3, [r3, #24]
 8005900:	4618      	mov	r0, r3
 8005902:	1cfb      	adds	r3, r7, #3
 8005904:	2201      	movs	r2, #1
 8005906:	4619      	mov	r1, r3
 8005908:	f7ff fe5a 	bl	80055c0 <SEGGER_RTT_ReadNoLock>
 800590c:	4603      	mov	r3, r0
 800590e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	dd15      	ble.n	8005942 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	4618      	mov	r0, r3
 800591a:	f000 ffa5 	bl	8006868 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800591e:	e010      	b.n	8005942 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	b25b      	sxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	da0e      	bge.n	8005946 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <_HandleIncomingPacket+0xe0>)
 800592a:	7e1b      	ldrb	r3, [r3, #24]
 800592c:	4618      	mov	r0, r3
 800592e:	1cfb      	adds	r3, r7, #3
 8005930:	2201      	movs	r2, #1
 8005932:	4619      	mov	r1, r3
 8005934:	f7ff fe44 	bl	80055c0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005938:	e005      	b.n	8005946 <_HandleIncomingPacket+0xd6>
    }
  }
 800593a:	bf00      	nop
 800593c:	e004      	b.n	8005948 <_HandleIncomingPacket+0xd8>
      break;
 800593e:	bf00      	nop
 8005940:	e002      	b.n	8005948 <_HandleIncomingPacket+0xd8>
      break;
 8005942:	bf00      	nop
 8005944:	e000      	b.n	8005948 <_HandleIncomingPacket+0xd8>
      break;
 8005946:	bf00      	nop
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20013440 	.word	0x20013440

08005954 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b08c      	sub	sp, #48	; 0x30
 8005958:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800595a:	2301      	movs	r3, #1
 800595c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	3301      	adds	r3, #1
 8005962:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005968:	4b32      	ldr	r3, [pc, #200]	; (8005a34 <_TrySendOverflowPacket+0xe0>)
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
 800596e:	e00b      	b.n	8005988 <_TrySendOverflowPacket+0x34>
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	b2da      	uxtb	r2, r3
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	1c59      	adds	r1, r3, #1
 8005978:	62f9      	str	r1, [r7, #44]	; 0x2c
 800597a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	09db      	lsrs	r3, r3, #7
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	2b7f      	cmp	r3, #127	; 0x7f
 800598c:	d8f0      	bhi.n	8005970 <_TrySendOverflowPacket+0x1c>
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800599e:	4b26      	ldr	r3, [pc, #152]	; (8005a38 <_TrySendOverflowPacket+0xe4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80059a4:	4b23      	ldr	r3, [pc, #140]	; (8005a34 <_TrySendOverflowPacket+0xe0>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	623b      	str	r3, [r7, #32]
 80059b6:	e00b      	b.n	80059d0 <_TrySendOverflowPacket+0x7c>
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	6279      	str	r1, [r7, #36]	; 0x24
 80059c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	09db      	lsrs	r3, r3, #7
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	2b7f      	cmp	r3, #127	; 0x7f
 80059d4:	d8f0      	bhi.n	80059b8 <_TrySendOverflowPacket+0x64>
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	627a      	str	r2, [r7, #36]	; 0x24
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80059e6:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <_TrySendOverflowPacket+0xe0>)
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	4618      	mov	r0, r3
 80059ec:	1d3b      	adds	r3, r7, #4
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	1d3b      	adds	r3, r7, #4
 80059f6:	4619      	mov	r1, r3
 80059f8:	f7fa fbfa 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80059fc:	4603      	mov	r3, r0
 80059fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005a00:	f001 f8c6 	bl	8006b90 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a0a:	4a0a      	ldr	r2, [pc, #40]	; (8005a34 <_TrySendOverflowPacket+0xe0>)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a10:	4b08      	ldr	r3, [pc, #32]	; (8005a34 <_TrySendOverflowPacket+0xe0>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <_TrySendOverflowPacket+0xe0>)
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	e004      	b.n	8005a28 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005a1e:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <_TrySendOverflowPacket+0xe0>)
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	3301      	adds	r3, #1
 8005a24:	4a03      	ldr	r2, [pc, #12]	; (8005a34 <_TrySendOverflowPacket+0xe0>)
 8005a26:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005a28:	693b      	ldr	r3, [r7, #16]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3730      	adds	r7, #48	; 0x30
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20013440 	.word	0x20013440
 8005a38:	e0001004 	.word	0xe0001004

08005a3c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	; 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005a48:	4b6d      	ldr	r3, [pc, #436]	; (8005c00 <_SendPacket+0x1c4>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d010      	beq.n	8005a72 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005a50:	4b6b      	ldr	r3, [pc, #428]	; (8005c00 <_SendPacket+0x1c4>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80a5 	beq.w	8005ba4 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005a5a:	4b69      	ldr	r3, [pc, #420]	; (8005c00 <_SendPacket+0x1c4>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d109      	bne.n	8005a76 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005a62:	f7ff ff77 	bl	8005954 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005a66:	4b66      	ldr	r3, [pc, #408]	; (8005c00 <_SendPacket+0x1c4>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	f040 809c 	bne.w	8005ba8 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005a70:	e001      	b.n	8005a76 <_SendPacket+0x3a>
    goto Send;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <_SendPacket+0x3c>
Send:
 8005a76:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b1f      	cmp	r3, #31
 8005a7c:	d809      	bhi.n	8005a92 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005a7e:	4b60      	ldr	r3, [pc, #384]	; (8005c00 <_SendPacket+0x1c4>)
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f040 808d 	bne.w	8005bac <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b17      	cmp	r3, #23
 8005a96:	d807      	bhi.n	8005aa8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e03d      	b.n	8005b24 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab4:	d912      	bls.n	8005adc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	09da      	lsrs	r2, r3, #7
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	3a01      	subs	r2, #1
 8005ace:	60fa      	str	r2, [r7, #12]
 8005ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	e006      	b.n	8005aea <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b7f      	cmp	r3, #127	; 0x7f
 8005aee:	d912      	bls.n	8005b16 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	09da      	lsrs	r2, r3, #7
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	3a01      	subs	r2, #1
 8005b08:	60fa      	str	r2, [r7, #12]
 8005b0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e006      	b.n	8005b24 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b24:	4b37      	ldr	r3, [pc, #220]	; (8005c04 <_SendPacket+0x1c8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b2a:	4b35      	ldr	r3, [pc, #212]	; (8005c00 <_SendPacket+0x1c4>)
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	623b      	str	r3, [r7, #32]
 8005b3c:	e00b      	b.n	8005b56 <_SendPacket+0x11a>
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	1c59      	adds	r1, r3, #1
 8005b46:	6279      	str	r1, [r7, #36]	; 0x24
 8005b48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	09db      	lsrs	r3, r3, #7
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	2b7f      	cmp	r3, #127	; 0x7f
 8005b5a:	d8f0      	bhi.n	8005b3e <_SendPacket+0x102>
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	627a      	str	r2, [r7, #36]	; 0x24
 8005b62:	6a3a      	ldr	r2, [r7, #32]
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005b6c:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <_SendPacket+0x1c4>)
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	4618      	mov	r0, r3
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	f7fa fb38 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005b80:	4603      	mov	r3, r0
 8005b82:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005b84:	f001 f804 	bl	8006b90 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b8e:	4a1c      	ldr	r2, [pc, #112]	; (8005c00 <_SendPacket+0x1c4>)
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	60d3      	str	r3, [r2, #12]
 8005b94:	e00b      	b.n	8005bae <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005b96:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <_SendPacket+0x1c4>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	4b18      	ldr	r3, [pc, #96]	; (8005c00 <_SendPacket+0x1c4>)
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	e004      	b.n	8005bae <_SendPacket+0x172>
    goto SendDone;
 8005ba4:	bf00      	nop
 8005ba6:	e002      	b.n	8005bae <_SendPacket+0x172>
      goto SendDone;
 8005ba8:	bf00      	nop
 8005baa:	e000      	b.n	8005bae <_SendPacket+0x172>
      goto SendDone;
 8005bac:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005bae:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <_SendPacket+0x1c4>)
 8005bb0:	7e1b      	ldrb	r3, [r3, #24]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <_SendPacket+0x1cc>)
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	440b      	add	r3, r1
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	336c      	adds	r3, #108	; 0x6c
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <_SendPacket+0x1c4>)
 8005bc6:	7e1b      	ldrb	r3, [r3, #24]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	490f      	ldr	r1, [pc, #60]	; (8005c08 <_SendPacket+0x1cc>)
 8005bcc:	4603      	mov	r3, r0
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	4403      	add	r3, r0
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	440b      	add	r3, r1
 8005bd6:	3370      	adds	r3, #112	; 0x70
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d00b      	beq.n	8005bf6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005bde:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <_SendPacket+0x1c4>)
 8005be0:	789b      	ldrb	r3, [r3, #2]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d107      	bne.n	8005bf6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <_SendPacket+0x1c4>)
 8005be8:	2201      	movs	r2, #1
 8005bea:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005bec:	f7ff fe40 	bl	8005870 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005bf0:	4b03      	ldr	r3, [pc, #12]	; (8005c00 <_SendPacket+0x1c4>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005bf6:	bf00      	nop
 8005bf8:	3728      	adds	r7, #40	; 0x28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20013440 	.word	0x20013440
 8005c04:	e0001004 	.word	0xe0001004
 8005c08:	200137d0 	.word	0x200137d0

08005c0c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c14:	f3ef 8311 	mrs	r3, BASEPRI
 8005c18:	f04f 0120 	mov.w	r1, #32
 8005c1c:	f381 8811 	msr	BASEPRI, r1
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	4808      	ldr	r0, [pc, #32]	; (8005c44 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005c24:	f7ff fe18 	bl	8005858 <_PreparePacket>
 8005c28:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	68b8      	ldr	r0, [r7, #8]
 8005c30:	f7ff ff04 	bl	8005a3c <_SendPacket>
  RECORD_END();
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f383 8811 	msr	BASEPRI, r3
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20013470 	.word	0x20013470

08005c48 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c52:	f3ef 8311 	mrs	r3, BASEPRI
 8005c56:	f04f 0120 	mov.w	r1, #32
 8005c5a:	f381 8811 	msr	BASEPRI, r1
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	4816      	ldr	r0, [pc, #88]	; (8005cbc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005c62:	f7ff fdf9 	bl	8005858 <_PreparePacket>
 8005c66:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	61bb      	str	r3, [r7, #24]
 8005c74:	e00b      	b.n	8005c8e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	1c59      	adds	r1, r3, #1
 8005c7e:	61f9      	str	r1, [r7, #28]
 8005c80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	09db      	lsrs	r3, r3, #7
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b7f      	cmp	r3, #127	; 0x7f
 8005c92:	d8f0      	bhi.n	8005c76 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	61fa      	str	r2, [r7, #28]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	68f9      	ldr	r1, [r7, #12]
 8005ca8:	6938      	ldr	r0, [r7, #16]
 8005caa:	f7ff fec7 	bl	8005a3c <_SendPacket>
  RECORD_END();
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f383 8811 	msr	BASEPRI, r3
}
 8005cb4:	bf00      	nop
 8005cb6:	3720      	adds	r7, #32
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20013470 	.word	0x20013470

08005cc0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08c      	sub	sp, #48	; 0x30
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd0:	f04f 0120 	mov.w	r1, #32
 8005cd4:	f381 8811 	msr	BASEPRI, r1
 8005cd8:	61fb      	str	r3, [r7, #28]
 8005cda:	4825      	ldr	r0, [pc, #148]	; (8005d70 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005cdc:	f7ff fdbc 	bl	8005858 <_PreparePacket>
 8005ce0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cee:	e00b      	b.n	8005d08 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	1c59      	adds	r1, r3, #1
 8005cf8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	09db      	lsrs	r3, r3, #7
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0c:	d8f0      	bhi.n	8005cf0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	623b      	str	r3, [r7, #32]
 8005d26:	e00b      	b.n	8005d40 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	1c59      	adds	r1, r3, #1
 8005d30:	6279      	str	r1, [r7, #36]	; 0x24
 8005d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	09db      	lsrs	r3, r3, #7
 8005d3e:	623b      	str	r3, [r7, #32]
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	2b7f      	cmp	r3, #127	; 0x7f
 8005d44:	d8f0      	bhi.n	8005d28 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d4c:	6a3a      	ldr	r2, [r7, #32]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	6979      	ldr	r1, [r7, #20]
 8005d5a:	69b8      	ldr	r0, [r7, #24]
 8005d5c:	f7ff fe6e 	bl	8005a3c <_SendPacket>
  RECORD_END();
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f383 8811 	msr	BASEPRI, r3
}
 8005d66:	bf00      	nop
 8005d68:	3730      	adds	r7, #48	; 0x30
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20013470 	.word	0x20013470

08005d74 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08e      	sub	sp, #56	; 0x38
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d82:	f3ef 8311 	mrs	r3, BASEPRI
 8005d86:	f04f 0120 	mov.w	r1, #32
 8005d8a:	f381 8811 	msr	BASEPRI, r1
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	4832      	ldr	r0, [pc, #200]	; (8005e5c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005d92:	f7ff fd61 	bl	8005858 <_PreparePacket>
 8005d96:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	633b      	str	r3, [r7, #48]	; 0x30
 8005da4:	e00b      	b.n	8005dbe <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	1c59      	adds	r1, r3, #1
 8005dae:	6379      	str	r1, [r7, #52]	; 0x34
 8005db0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	09db      	lsrs	r3, r3, #7
 8005dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc2:	d8f0      	bhi.n	8005da6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	637a      	str	r2, [r7, #52]	; 0x34
 8005dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ddc:	e00b      	b.n	8005df6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	1c59      	adds	r1, r3, #1
 8005de6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005de8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	701a      	strb	r2, [r3, #0]
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	09db      	lsrs	r3, r3, #7
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dfa:	d8f0      	bhi.n	8005dde <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	623b      	str	r3, [r7, #32]
 8005e14:	e00b      	b.n	8005e2e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	1c59      	adds	r1, r3, #1
 8005e1e:	6279      	str	r1, [r7, #36]	; 0x24
 8005e20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	09db      	lsrs	r3, r3, #7
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	2b7f      	cmp	r3, #127	; 0x7f
 8005e32:	d8f0      	bhi.n	8005e16 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	627a      	str	r2, [r7, #36]	; 0x24
 8005e3a:	6a3a      	ldr	r2, [r7, #32]
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	6979      	ldr	r1, [r7, #20]
 8005e48:	69b8      	ldr	r0, [r7, #24]
 8005e4a:	f7ff fdf7 	bl	8005a3c <_SendPacket>
  RECORD_END();
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f383 8811 	msr	BASEPRI, r3
}
 8005e54:	bf00      	nop
 8005e56:	3738      	adds	r7, #56	; 0x38
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20013470 	.word	0x20013470

08005e60 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b090      	sub	sp, #64	; 0x40
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e72:	f04f 0120 	mov.w	r1, #32
 8005e76:	f381 8811 	msr	BASEPRI, r1
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	4840      	ldr	r0, [pc, #256]	; (8005f80 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005e7e:	f7ff fceb 	bl	8005858 <_PreparePacket>
 8005e82:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e90:	e00b      	b.n	8005eaa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e98:	1c59      	adds	r1, r3, #1
 8005e9a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	09db      	lsrs	r3, r3, #7
 8005ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	2b7f      	cmp	r3, #127	; 0x7f
 8005eae:	d8f0      	bhi.n	8005e92 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec8:	e00b      	b.n	8005ee2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed0:	1c59      	adds	r1, r3, #1
 8005ed2:	6379      	str	r1, [r7, #52]	; 0x34
 8005ed4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	09db      	lsrs	r3, r3, #7
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee6:	d8f0      	bhi.n	8005eca <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	637a      	str	r2, [r7, #52]	; 0x34
 8005eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f00:	e00b      	b.n	8005f1a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	1c59      	adds	r1, r3, #1
 8005f0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	09db      	lsrs	r3, r3, #7
 8005f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f1e:	d8f0      	bhi.n	8005f02 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
 8005f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f36:	623b      	str	r3, [r7, #32]
 8005f38:	e00b      	b.n	8005f52 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	1c59      	adds	r1, r3, #1
 8005f42:	6279      	str	r1, [r7, #36]	; 0x24
 8005f44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	09db      	lsrs	r3, r3, #7
 8005f50:	623b      	str	r3, [r7, #32]
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	2b7f      	cmp	r3, #127	; 0x7f
 8005f56:	d8f0      	bhi.n	8005f3a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	1c5a      	adds	r2, r3, #1
 8005f5c:	627a      	str	r2, [r7, #36]	; 0x24
 8005f5e:	6a3a      	ldr	r2, [r7, #32]
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	6979      	ldr	r1, [r7, #20]
 8005f6c:	69b8      	ldr	r0, [r7, #24]
 8005f6e:	f7ff fd65 	bl	8005a3c <_SendPacket>
  RECORD_END();
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f383 8811 	msr	BASEPRI, r3
}
 8005f78:	bf00      	nop
 8005f7a:	3740      	adds	r7, #64	; 0x40
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20013470 	.word	0x20013470

08005f84 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	; 0x30
 8005f88:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005f8a:	4b59      	ldr	r3, [pc, #356]	; (80060f0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005f90:	f3ef 8311 	mrs	r3, BASEPRI
 8005f94:	f04f 0120 	mov.w	r1, #32
 8005f98:	f381 8811 	msr	BASEPRI, r1
 8005f9c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005f9e:	4b54      	ldr	r3, [pc, #336]	; (80060f0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	220a      	movs	r2, #10
 8005fa4:	4953      	ldr	r1, [pc, #332]	; (80060f4 <SEGGER_SYSVIEW_Start+0x170>)
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fa f922 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005fb2:	f000 fded 	bl	8006b90 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005fb6:	200a      	movs	r0, #10
 8005fb8:	f7ff fe28 	bl	8005c0c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc0:	f04f 0120 	mov.w	r1, #32
 8005fc4:	f381 8811 	msr	BASEPRI, r1
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	484b      	ldr	r0, [pc, #300]	; (80060f8 <SEGGER_SYSVIEW_Start+0x174>)
 8005fcc:	f7ff fc44 	bl	8005858 <_PreparePacket>
 8005fd0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fda:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe0:	e00b      	b.n	8005ffa <SEGGER_SYSVIEW_Start+0x76>
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	1c59      	adds	r1, r3, #1
 8005fea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	09db      	lsrs	r3, r3, #7
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffe:	d8f0      	bhi.n	8005fe2 <SEGGER_SYSVIEW_Start+0x5e>
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
 8006014:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	623b      	str	r3, [r7, #32]
 800601a:	e00b      	b.n	8006034 <SEGGER_SYSVIEW_Start+0xb0>
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	1c59      	adds	r1, r3, #1
 8006024:	6279      	str	r1, [r7, #36]	; 0x24
 8006026:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	09db      	lsrs	r3, r3, #7
 8006032:	623b      	str	r3, [r7, #32]
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	2b7f      	cmp	r3, #127	; 0x7f
 8006038:	d8f0      	bhi.n	800601c <SEGGER_SYSVIEW_Start+0x98>
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	627a      	str	r2, [r7, #36]	; 0x24
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	61fb      	str	r3, [r7, #28]
 800604e:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	e00b      	b.n	800606e <SEGGER_SYSVIEW_Start+0xea>
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	1c59      	adds	r1, r3, #1
 800605e:	61f9      	str	r1, [r7, #28]
 8006060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	09db      	lsrs	r3, r3, #7
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b7f      	cmp	r3, #127	; 0x7f
 8006072:	d8f0      	bhi.n	8006056 <SEGGER_SYSVIEW_Start+0xd2>
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	61fa      	str	r2, [r7, #28]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	2300      	movs	r3, #0
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	e00b      	b.n	80060a6 <SEGGER_SYSVIEW_Start+0x122>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	1c59      	adds	r1, r3, #1
 8006096:	6179      	str	r1, [r7, #20]
 8006098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	09db      	lsrs	r3, r3, #7
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b7f      	cmp	r3, #127	; 0x7f
 80060aa:	d8f0      	bhi.n	800608e <SEGGER_SYSVIEW_Start+0x10a>
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	617a      	str	r2, [r7, #20]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80060bc:	2218      	movs	r2, #24
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff fcbb 	bl	8005a3c <_SendPacket>
      RECORD_END();
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80060cc:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80060da:	f000 f9c7 	bl	800646c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80060de:	f000 f9b1 	bl	8006444 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80060e2:	f000 fc5f 	bl	80069a4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80060e6:	bf00      	nop
 80060e8:	3730      	adds	r7, #48	; 0x30
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20013440 	.word	0x20013440
 80060f4:	0800b408 	.word	0x0800b408
 80060f8:	20013470 	.word	0x20013470

080060fc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006102:	f3ef 8311 	mrs	r3, BASEPRI
 8006106:	f04f 0120 	mov.w	r1, #32
 800610a:	f381 8811 	msr	BASEPRI, r1
 800610e:	607b      	str	r3, [r7, #4]
 8006110:	480b      	ldr	r0, [pc, #44]	; (8006140 <SEGGER_SYSVIEW_Stop+0x44>)
 8006112:	f7ff fba1 	bl	8005858 <_PreparePacket>
 8006116:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006118:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <SEGGER_SYSVIEW_Stop+0x48>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006120:	220b      	movs	r2, #11
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6838      	ldr	r0, [r7, #0]
 8006126:	f7ff fc89 	bl	8005a3c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800612a:	4b06      	ldr	r3, [pc, #24]	; (8006144 <SEGGER_SYSVIEW_Stop+0x48>)
 800612c:	2200      	movs	r2, #0
 800612e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f383 8811 	msr	BASEPRI, r3
}
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20013470 	.word	0x20013470
 8006144:	20013440 	.word	0x20013440

08006148 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006148:	b580      	push	{r7, lr}
 800614a:	b08c      	sub	sp, #48	; 0x30
 800614c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800614e:	f3ef 8311 	mrs	r3, BASEPRI
 8006152:	f04f 0120 	mov.w	r1, #32
 8006156:	f381 8811 	msr	BASEPRI, r1
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	4845      	ldr	r0, [pc, #276]	; (8006274 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800615e:	f7ff fb7b 	bl	8005858 <_PreparePacket>
 8006162:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800616c:	4b42      	ldr	r3, [pc, #264]	; (8006278 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
 8006172:	e00b      	b.n	800618c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	b2da      	uxtb	r2, r3
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	1c59      	adds	r1, r3, #1
 800617c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800617e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	09db      	lsrs	r3, r3, #7
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	2b7f      	cmp	r3, #127	; 0x7f
 8006190:	d8f0      	bhi.n	8006174 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
 80061a6:	4b34      	ldr	r3, [pc, #208]	; (8006278 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	e00b      	b.n	80061c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	1c59      	adds	r1, r3, #1
 80061b6:	6279      	str	r1, [r7, #36]	; 0x24
 80061b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	09db      	lsrs	r3, r3, #7
 80061c4:	623b      	str	r3, [r7, #32]
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ca:	d8f0      	bhi.n	80061ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	627a      	str	r2, [r7, #36]	; 0x24
 80061d2:	6a3a      	ldr	r2, [r7, #32]
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	4b25      	ldr	r3, [pc, #148]	; (8006278 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e00b      	b.n	8006200 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	1c59      	adds	r1, r3, #1
 80061f0:	61f9      	str	r1, [r7, #28]
 80061f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	09db      	lsrs	r3, r3, #7
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2b7f      	cmp	r3, #127	; 0x7f
 8006204:	d8f0      	bhi.n	80061e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	61fa      	str	r2, [r7, #28]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	e00b      	b.n	8006238 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	b2da      	uxtb	r2, r3
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	1c59      	adds	r1, r3, #1
 8006228:	6179      	str	r1, [r7, #20]
 800622a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	09db      	lsrs	r3, r3, #7
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b7f      	cmp	r3, #127	; 0x7f
 800623c:	d8f0      	bhi.n	8006220 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	617a      	str	r2, [r7, #20]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800624e:	2218      	movs	r2, #24
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	68b8      	ldr	r0, [r7, #8]
 8006254:	f7ff fbf2 	bl	8005a3c <_SendPacket>
  RECORD_END();
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006266:	4b04      	ldr	r3, [pc, #16]	; (8006278 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	4798      	blx	r3
  }
}
 800626c:	bf00      	nop
 800626e:	3730      	adds	r7, #48	; 0x30
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20013470 	.word	0x20013470
 8006278:	20013440 	.word	0x20013440

0800627c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b092      	sub	sp, #72	; 0x48
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006284:	f3ef 8311 	mrs	r3, BASEPRI
 8006288:	f04f 0120 	mov.w	r1, #32
 800628c:	f381 8811 	msr	BASEPRI, r1
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	486a      	ldr	r0, [pc, #424]	; (800643c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006294:	f7ff fae0 	bl	8005858 <_PreparePacket>
 8006298:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	647b      	str	r3, [r7, #68]	; 0x44
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b66      	ldr	r3, [pc, #408]	; (8006440 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	643b      	str	r3, [r7, #64]	; 0x40
 80062ae:	e00b      	b.n	80062c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80062b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b6:	1c59      	adds	r1, r3, #1
 80062b8:	6479      	str	r1, [r7, #68]	; 0x44
 80062ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c4:	09db      	lsrs	r3, r3, #7
 80062c6:	643b      	str	r3, [r7, #64]	; 0x40
 80062c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ca:	2b7f      	cmp	r3, #127	; 0x7f
 80062cc:	d8f0      	bhi.n	80062b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80062ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	647a      	str	r2, [r7, #68]	; 0x44
 80062d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062e8:	e00b      	b.n	8006302 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f0:	1c59      	adds	r1, r3, #1
 80062f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80062f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	09db      	lsrs	r3, r3, #7
 8006300:	63bb      	str	r3, [r7, #56]	; 0x38
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	2b7f      	cmp	r3, #127	; 0x7f
 8006306:	d8f0      	bhi.n	80062ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800630e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006316:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	4619      	mov	r1, r3
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff fa49 	bl	80057b8 <_EncodeStr>
 8006326:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006328:	2209      	movs	r2, #9
 800632a:	68f9      	ldr	r1, [r7, #12]
 800632c:	6938      	ldr	r0, [r7, #16]
 800632e:	f7ff fb85 	bl	8005a3c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	637b      	str	r3, [r7, #52]	; 0x34
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4b40      	ldr	r3, [pc, #256]	; (8006440 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	633b      	str	r3, [r7, #48]	; 0x30
 8006346:	e00b      	b.n	8006360 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	b2da      	uxtb	r2, r3
 800634c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634e:	1c59      	adds	r1, r3, #1
 8006350:	6379      	str	r1, [r7, #52]	; 0x34
 8006352:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	09db      	lsrs	r3, r3, #7
 800635e:	633b      	str	r3, [r7, #48]	; 0x30
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	2b7f      	cmp	r3, #127	; 0x7f
 8006364:	d8f0      	bhi.n	8006348 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	637a      	str	r2, [r7, #52]	; 0x34
 800636c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006380:	e00b      	b.n	800639a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	b2da      	uxtb	r2, r3
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800638c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	09db      	lsrs	r3, r3, #7
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	2b7f      	cmp	r3, #127	; 0x7f
 800639e:	d8f0      	bhi.n	8006382 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	623b      	str	r3, [r7, #32]
 80063ba:	e00b      	b.n	80063d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	1c59      	adds	r1, r3, #1
 80063c4:	6279      	str	r1, [r7, #36]	; 0x24
 80063c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	09db      	lsrs	r3, r3, #7
 80063d2:	623b      	str	r3, [r7, #32]
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	2b7f      	cmp	r3, #127	; 0x7f
 80063d8:	d8f0      	bhi.n	80063bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	627a      	str	r2, [r7, #36]	; 0x24
 80063e0:	6a3a      	ldr	r2, [r7, #32]
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	2300      	movs	r3, #0
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	e00b      	b.n	800640c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	61f9      	str	r1, [r7, #28]
 80063fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	09db      	lsrs	r3, r3, #7
 800640a:	61bb      	str	r3, [r7, #24]
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b7f      	cmp	r3, #127	; 0x7f
 8006410:	d8f0      	bhi.n	80063f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	61fa      	str	r2, [r7, #28]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006422:	2215      	movs	r2, #21
 8006424:	68f9      	ldr	r1, [r7, #12]
 8006426:	6938      	ldr	r0, [r7, #16]
 8006428:	f7ff fb08 	bl	8005a3c <_SendPacket>
  RECORD_END();
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f383 8811 	msr	BASEPRI, r3
}
 8006432:	bf00      	nop
 8006434:	3748      	adds	r7, #72	; 0x48
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20013470 	.word	0x20013470
 8006440:	20013440 	.word	0x20013440

08006444 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006448:	4b07      	ldr	r3, [pc, #28]	; (8006468 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800645a:	4b03      	ldr	r3, [pc, #12]	; (8006468 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4798      	blx	r3
  }
}
 8006462:	bf00      	nop
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20013440 	.word	0x20013440

0800646c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01a      	beq.n	80064b0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800647a:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d015      	beq.n	80064b0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006484:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4798      	blx	r3
 800648c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006490:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006492:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	000a      	movs	r2, r1
 80064a0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80064a2:	4613      	mov	r3, r2
 80064a4:	461a      	mov	r2, r3
 80064a6:	4621      	mov	r1, r4
 80064a8:	200d      	movs	r0, #13
 80064aa:	f7ff fc09 	bl	8005cc0 <SEGGER_SYSVIEW_RecordU32x2>
 80064ae:	e006      	b.n	80064be <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80064b0:	4b06      	ldr	r3, [pc, #24]	; (80064cc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4619      	mov	r1, r3
 80064b6:	200c      	movs	r0, #12
 80064b8:	f7ff fbc6 	bl	8005c48 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd90      	pop	{r4, r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20013440 	.word	0x20013440
 80064cc:	e0001004 	.word	0xe0001004

080064d0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064d6:	f3ef 8311 	mrs	r3, BASEPRI
 80064da:	f04f 0120 	mov.w	r1, #32
 80064de:	f381 8811 	msr	BASEPRI, r1
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	4819      	ldr	r0, [pc, #100]	; (800654c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80064e6:	f7ff f9b7 	bl	8005858 <_PreparePacket>
 80064ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80064f0:	4b17      	ldr	r3, [pc, #92]	; (8006550 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	e00b      	b.n	800651c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	b2da      	uxtb	r2, r3
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	1c59      	adds	r1, r3, #1
 800650c:	6179      	str	r1, [r7, #20]
 800650e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	09db      	lsrs	r3, r3, #7
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b7f      	cmp	r3, #127	; 0x7f
 8006520:	d8f0      	bhi.n	8006504 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	617a      	str	r2, [r7, #20]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006532:	2202      	movs	r2, #2
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	68b8      	ldr	r0, [r7, #8]
 8006538:	f7ff fa80 	bl	8005a3c <_SendPacket>
  RECORD_END();
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f383 8811 	msr	BASEPRI, r3
}
 8006542:	bf00      	nop
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20013470 	.word	0x20013470
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800655a:	f3ef 8311 	mrs	r3, BASEPRI
 800655e:	f04f 0120 	mov.w	r1, #32
 8006562:	f381 8811 	msr	BASEPRI, r1
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	4807      	ldr	r0, [pc, #28]	; (8006588 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800656a:	f7ff f975 	bl	8005858 <_PreparePacket>
 800656e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006570:	2203      	movs	r2, #3
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6838      	ldr	r0, [r7, #0]
 8006576:	f7ff fa61 	bl	8005a3c <_SendPacket>
  RECORD_END();
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f383 8811 	msr	BASEPRI, r3
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20013470 	.word	0x20013470

0800658c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006592:	f3ef 8311 	mrs	r3, BASEPRI
 8006596:	f04f 0120 	mov.w	r1, #32
 800659a:	f381 8811 	msr	BASEPRI, r1
 800659e:	607b      	str	r3, [r7, #4]
 80065a0:	4807      	ldr	r0, [pc, #28]	; (80065c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80065a2:	f7ff f959 	bl	8005858 <_PreparePacket>
 80065a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80065a8:	2212      	movs	r2, #18
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6838      	ldr	r0, [r7, #0]
 80065ae:	f7ff fa45 	bl	8005a3c <_SendPacket>
  RECORD_END();
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f383 8811 	msr	BASEPRI, r3
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20013470 	.word	0x20013470

080065c4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065ca:	f3ef 8311 	mrs	r3, BASEPRI
 80065ce:	f04f 0120 	mov.w	r1, #32
 80065d2:	f381 8811 	msr	BASEPRI, r1
 80065d6:	607b      	str	r3, [r7, #4]
 80065d8:	4807      	ldr	r0, [pc, #28]	; (80065f8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80065da:	f7ff f93d 	bl	8005858 <_PreparePacket>
 80065de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80065e0:	2211      	movs	r2, #17
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6838      	ldr	r0, [r7, #0]
 80065e6:	f7ff fa29 	bl	8005a3c <_SendPacket>
  RECORD_END();
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f383 8811 	msr	BASEPRI, r3
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20013470 	.word	0x20013470

080065fc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006604:	f3ef 8311 	mrs	r3, BASEPRI
 8006608:	f04f 0120 	mov.w	r1, #32
 800660c:	f381 8811 	msr	BASEPRI, r1
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	4819      	ldr	r0, [pc, #100]	; (8006678 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006614:	f7ff f920 	bl	8005858 <_PreparePacket>
 8006618:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800661e:	4b17      	ldr	r3, [pc, #92]	; (800667c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	61fb      	str	r3, [r7, #28]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	e00b      	b.n	800664a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	b2da      	uxtb	r2, r3
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	1c59      	adds	r1, r3, #1
 800663a:	61f9      	str	r1, [r7, #28]
 800663c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	09db      	lsrs	r3, r3, #7
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b7f      	cmp	r3, #127	; 0x7f
 800664e:	d8f0      	bhi.n	8006632 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	61fa      	str	r2, [r7, #28]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006660:	2208      	movs	r2, #8
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	6938      	ldr	r0, [r7, #16]
 8006666:	f7ff f9e9 	bl	8005a3c <_SendPacket>
  RECORD_END();
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f383 8811 	msr	BASEPRI, r3
}
 8006670:	bf00      	nop
 8006672:	3720      	adds	r7, #32
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20013470 	.word	0x20013470
 800667c:	20013440 	.word	0x20013440

08006680 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006688:	f3ef 8311 	mrs	r3, BASEPRI
 800668c:	f04f 0120 	mov.w	r1, #32
 8006690:	f381 8811 	msr	BASEPRI, r1
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	4819      	ldr	r0, [pc, #100]	; (80066fc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006698:	f7ff f8de 	bl	8005858 <_PreparePacket>
 800669c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066a2:	4b17      	ldr	r3, [pc, #92]	; (8006700 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	61fb      	str	r3, [r7, #28]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	61bb      	str	r3, [r7, #24]
 80066b4:	e00b      	b.n	80066ce <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	1c59      	adds	r1, r3, #1
 80066be:	61f9      	str	r1, [r7, #28]
 80066c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	09db      	lsrs	r3, r3, #7
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b7f      	cmp	r3, #127	; 0x7f
 80066d2:	d8f0      	bhi.n	80066b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	61fa      	str	r2, [r7, #28]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	b2d2      	uxtb	r2, r2
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80066e4:	2204      	movs	r2, #4
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	6938      	ldr	r0, [r7, #16]
 80066ea:	f7ff f9a7 	bl	8005a3c <_SendPacket>
  RECORD_END();
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f383 8811 	msr	BASEPRI, r3
}
 80066f4:	bf00      	nop
 80066f6:	3720      	adds	r7, #32
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20013470 	.word	0x20013470
 8006700:	20013440 	.word	0x20013440

08006704 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800670c:	f3ef 8311 	mrs	r3, BASEPRI
 8006710:	f04f 0120 	mov.w	r1, #32
 8006714:	f381 8811 	msr	BASEPRI, r1
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	4819      	ldr	r0, [pc, #100]	; (8006780 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800671c:	f7ff f89c 	bl	8005858 <_PreparePacket>
 8006720:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006726:	4b17      	ldr	r3, [pc, #92]	; (8006784 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	61fb      	str	r3, [r7, #28]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	e00b      	b.n	8006752 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	b2da      	uxtb	r2, r3
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	1c59      	adds	r1, r3, #1
 8006742:	61f9      	str	r1, [r7, #28]
 8006744:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	09db      	lsrs	r3, r3, #7
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b7f      	cmp	r3, #127	; 0x7f
 8006756:	d8f0      	bhi.n	800673a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	61fa      	str	r2, [r7, #28]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006768:	2206      	movs	r2, #6
 800676a:	68f9      	ldr	r1, [r7, #12]
 800676c:	6938      	ldr	r0, [r7, #16]
 800676e:	f7ff f965 	bl	8005a3c <_SendPacket>
  RECORD_END();
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f383 8811 	msr	BASEPRI, r3
}
 8006778:	bf00      	nop
 800677a:	3720      	adds	r7, #32
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20013470 	.word	0x20013470
 8006784:	20013440 	.word	0x20013440

08006788 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006788:	b580      	push	{r7, lr}
 800678a:	b08a      	sub	sp, #40	; 0x28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006792:	f3ef 8311 	mrs	r3, BASEPRI
 8006796:	f04f 0120 	mov.w	r1, #32
 800679a:	f381 8811 	msr	BASEPRI, r1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	4827      	ldr	r0, [pc, #156]	; (8006840 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80067a2:	f7ff f859 	bl	8005858 <_PreparePacket>
 80067a6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067ac:	4b25      	ldr	r3, [pc, #148]	; (8006844 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	623b      	str	r3, [r7, #32]
 80067be:	e00b      	b.n	80067d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	1c59      	adds	r1, r3, #1
 80067c8:	6279      	str	r1, [r7, #36]	; 0x24
 80067ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	09db      	lsrs	r3, r3, #7
 80067d6:	623b      	str	r3, [r7, #32]
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	2b7f      	cmp	r3, #127	; 0x7f
 80067dc:	d8f0      	bhi.n	80067c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	627a      	str	r2, [r7, #36]	; 0x24
 80067e4:	6a3a      	ldr	r2, [r7, #32]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	e00b      	b.n	8006810 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	61f9      	str	r1, [r7, #28]
 8006802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	09db      	lsrs	r3, r3, #7
 800680e:	61bb      	str	r3, [r7, #24]
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	2b7f      	cmp	r3, #127	; 0x7f
 8006814:	d8f0      	bhi.n	80067f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	61fa      	str	r2, [r7, #28]
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006826:	2207      	movs	r2, #7
 8006828:	68f9      	ldr	r1, [r7, #12]
 800682a:	6938      	ldr	r0, [r7, #16]
 800682c:	f7ff f906 	bl	8005a3c <_SendPacket>
  RECORD_END();
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f383 8811 	msr	BASEPRI, r3
}
 8006836:	bf00      	nop
 8006838:	3728      	adds	r7, #40	; 0x28
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20013470 	.word	0x20013470
 8006844:	20013440 	.word	0x20013440

08006848 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006850:	4b04      	ldr	r3, [pc, #16]	; (8006864 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	1ad3      	subs	r3, r2, r3
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	20013440 	.word	0x20013440

08006868 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006868:	b580      	push	{r7, lr}
 800686a:	b08c      	sub	sp, #48	; 0x30
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006872:	4b3b      	ldr	r3, [pc, #236]	; (8006960 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d06d      	beq.n	8006956 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800687a:	4b39      	ldr	r3, [pc, #228]	; (8006960 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006880:	2300      	movs	r3, #0
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28
 8006884:	e008      	b.n	8006898 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d007      	beq.n	80068a2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	3301      	adds	r3, #1
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800689c:	429a      	cmp	r2, r3
 800689e:	d3f2      	bcc.n	8006886 <SEGGER_SYSVIEW_SendModule+0x1e>
 80068a0:	e000      	b.n	80068a4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80068a2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d055      	beq.n	8006956 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068aa:	f3ef 8311 	mrs	r3, BASEPRI
 80068ae:	f04f 0120 	mov.w	r1, #32
 80068b2:	f381 8811 	msr	BASEPRI, r1
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	482a      	ldr	r0, [pc, #168]	; (8006964 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80068ba:	f7fe ffcd 	bl	8005858 <_PreparePacket>
 80068be:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	623b      	str	r3, [r7, #32]
 80068cc:	e00b      	b.n	80068e6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	1c59      	adds	r1, r3, #1
 80068d6:	6279      	str	r1, [r7, #36]	; 0x24
 80068d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	09db      	lsrs	r3, r3, #7
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	2b7f      	cmp	r3, #127	; 0x7f
 80068ea:	d8f0      	bhi.n	80068ce <SEGGER_SYSVIEW_SendModule+0x66>
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	627a      	str	r2, [r7, #36]	; 0x24
 80068f2:	6a3a      	ldr	r2, [r7, #32]
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e00b      	b.n	8006920 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	b2da      	uxtb	r2, r3
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	1c59      	adds	r1, r3, #1
 8006910:	61f9      	str	r1, [r7, #28]
 8006912:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	09db      	lsrs	r3, r3, #7
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b7f      	cmp	r3, #127	; 0x7f
 8006924:	d8f0      	bhi.n	8006908 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	61fa      	str	r2, [r7, #28]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2280      	movs	r2, #128	; 0x80
 800693c:	4619      	mov	r1, r3
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7fe ff3a 	bl	80057b8 <_EncodeStr>
 8006944:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006946:	2216      	movs	r2, #22
 8006948:	68f9      	ldr	r1, [r7, #12]
 800694a:	6938      	ldr	r0, [r7, #16]
 800694c:	f7ff f876 	bl	8005a3c <_SendPacket>
      RECORD_END();
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006956:	bf00      	nop
 8006958:	3730      	adds	r7, #48	; 0x30
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20013468 	.word	0x20013468
 8006964:	20013470 	.word	0x20013470

08006968 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00f      	beq.n	8006996 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f2      	bne.n	800697c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20013468 	.word	0x20013468

080069a4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80069aa:	f3ef 8311 	mrs	r3, BASEPRI
 80069ae:	f04f 0120 	mov.w	r1, #32
 80069b2:	f381 8811 	msr	BASEPRI, r1
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	4817      	ldr	r0, [pc, #92]	; (8006a18 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80069ba:	f7fe ff4d 	bl	8005858 <_PreparePacket>
 80069be:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	e00b      	b.n	80069e8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	6179      	str	r1, [r7, #20]
 80069da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	09db      	lsrs	r3, r3, #7
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b7f      	cmp	r3, #127	; 0x7f
 80069ec:	d8f0      	bhi.n	80069d0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	617a      	str	r2, [r7, #20]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80069fe:	221b      	movs	r2, #27
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	68b8      	ldr	r0, [r7, #8]
 8006a04:	f7ff f81a 	bl	8005a3c <_SendPacket>
  RECORD_END();
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
}
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20013470 	.word	0x20013470
 8006a1c:	2001346c 	.word	0x2001346c

08006a20 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08a      	sub	sp, #40	; 0x28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a28:	f3ef 8311 	mrs	r3, BASEPRI
 8006a2c:	f04f 0120 	mov.w	r1, #32
 8006a30:	f381 8811 	msr	BASEPRI, r1
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	4827      	ldr	r0, [pc, #156]	; (8006ad4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006a38:	f7fe ff0e 	bl	8005858 <_PreparePacket>
 8006a3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a3e:	2280      	movs	r2, #128	; 0x80
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	6938      	ldr	r0, [r7, #16]
 8006a44:	f7fe feb8 	bl	80057b8 <_EncodeStr>
 8006a48:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4e:	2301      	movs	r3, #1
 8006a50:	623b      	str	r3, [r7, #32]
 8006a52:	e00b      	b.n	8006a6c <SEGGER_SYSVIEW_Warn+0x4c>
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	1c59      	adds	r1, r3, #1
 8006a5c:	6279      	str	r1, [r7, #36]	; 0x24
 8006a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	09db      	lsrs	r3, r3, #7
 8006a6a:	623b      	str	r3, [r7, #32]
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a70:	d8f0      	bhi.n	8006a54 <SEGGER_SYSVIEW_Warn+0x34>
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	627a      	str	r2, [r7, #36]	; 0x24
 8006a78:	6a3a      	ldr	r2, [r7, #32]
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	e00b      	b.n	8006aa4 <SEGGER_SYSVIEW_Warn+0x84>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	1c59      	adds	r1, r3, #1
 8006a94:	61f9      	str	r1, [r7, #28]
 8006a96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	09db      	lsrs	r3, r3, #7
 8006aa2:	61bb      	str	r3, [r7, #24]
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa8:	d8f0      	bhi.n	8006a8c <SEGGER_SYSVIEW_Warn+0x6c>
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	61fa      	str	r2, [r7, #28]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006aba:	221a      	movs	r2, #26
 8006abc:	68f9      	ldr	r1, [r7, #12]
 8006abe:	6938      	ldr	r0, [r7, #16]
 8006ac0:	f7fe ffbc 	bl	8005a3c <_SendPacket>
  RECORD_END();
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f383 8811 	msr	BASEPRI, r3
}
 8006aca:	bf00      	nop
 8006acc:	3728      	adds	r7, #40	; 0x28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20013470 	.word	0x20013470

08006ad8 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	2000      	movs	r0, #0
 8006aec:	f7fe fe3e 	bl	800576c <SEGGER_RTT_Write>
  return len;
 8006af0:	683b      	ldr	r3, [r7, #0]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
//void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
	int UsartStatus;
	uint8_t v;
	int r;

	UsartStatus = USART_SR;                              // Examine status register
 8006b02:	4b1e      	ldr	r3, [pc, #120]	; (8006b7c <USART2_IRQHandler+0x80>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]
	if(UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d011      	beq.n	8006b36 <USART2_IRQHandler+0x3a>
		v = USART_DR;                                      // Read data
 8006b12:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <USART2_IRQHandler+0x84>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	71fb      	strb	r3, [r7, #7]
		if((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f003 030b 	and.w	r3, r3, #11
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d108      	bne.n	8006b36 <USART2_IRQHandler+0x3a>
			(void)v;                                         // Avoid warning in BTL
			if(_cbOnRx) {
 8006b24:	4b17      	ldr	r3, [pc, #92]	; (8006b84 <USART2_IRQHandler+0x88>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <USART2_IRQHandler+0x3a>
				_cbOnRx(v);
 8006b2c:	4b15      	ldr	r3, [pc, #84]	; (8006b84 <USART2_IRQHandler+0x88>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	79fa      	ldrb	r2, [r7, #7]
 8006b32:	4610      	mov	r0, r2
 8006b34:	4798      	blx	r3
			}
		}
	}
	if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01a      	beq.n	8006b76 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 8006b40:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <USART2_IRQHandler+0x8c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d015      	beq.n	8006b74 <USART2_IRQHandler+0x78>
		r = _cbOnTx(&v);
 8006b48:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <USART2_IRQHandler+0x8c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	1dfa      	adds	r2, r7, #7
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4798      	blx	r3
 8006b52:	60b8      	str	r0, [r7, #8]
		if (r == 0) {                          // No more characters to send ?
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <USART2_IRQHandler+0x6c>
			USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <USART2_IRQHandler+0x90>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a0b      	ldr	r2, [pc, #44]	; (8006b8c <USART2_IRQHandler+0x90>)
 8006b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	e006      	b.n	8006b76 <USART2_IRQHandler+0x7a>
		} else {
			USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006b68:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <USART2_IRQHandler+0x80>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
			USART_DR = v;  // Start transmission by writing to data register
 8006b6c:	79fa      	ldrb	r2, [r7, #7]
 8006b6e:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <USART2_IRQHandler+0x84>)
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e000      	b.n	8006b76 <USART2_IRQHandler+0x7a>
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 8006b74:	bf00      	nop
		}
	}
}
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40004400 	.word	0x40004400
 8006b80:	40004404 	.word	0x40004404
 8006b84:	20013554 	.word	0x20013554
 8006b88:	20013558 	.word	0x20013558
 8006b8c:	4000440c 	.word	0x4000440c

08006b90 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
	USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a04      	ldr	r2, [pc, #16]	; (8006bac <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9e:	6013      	str	r3, [r2, #0]
}
 8006ba0:	bf00      	nop
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	4000440c 	.word	0x4000440c

08006bb0 <lcd_puts_xy>:
LCD_Data_Screen1_t screen1_data;
LCD_Data_Screen2_t screen2_data;
LCD_Data_Screen3_t screen3_data;
LCD_Data_Screen4_t screen4_data, screen4_data_config;

void lcd_puts_xy(unsigned char x, unsigned char y, char* c, LCD5110_Pixel_t color, LCD5110_FontSize_t font) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	603a      	str	r2, [r7, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4603      	mov	r3, r0
 8006bbc:	71fb      	strb	r3, [r7, #7]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	71bb      	strb	r3, [r7, #6]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	717b      	strb	r3, [r7, #5]
	LCD5110_GotoXY(x, y);
 8006bc6:	79ba      	ldrb	r2, [r7, #6]
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fa ff41 	bl	8001a54 <LCD5110_GotoXY>
	LCD5110_Puts(c, color, font);
 8006bd2:	7c3a      	ldrb	r2, [r7, #16]
 8006bd4:	797b      	ldrb	r3, [r7, #5]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6838      	ldr	r0, [r7, #0]
 8006bda:	f7fa fffd 	bl	8001bd8 <LCD5110_Puts>
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <range_scale>:

void range_scale(float value, char* value_buf, char* range) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
	if(value < 1000) {
 8006bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8006bf8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006ce8 <range_scale+0x100>
 8006bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c04:	d505      	bpl.n	8006c12 <range_scale+0x2a>
		sprintf(range, "%s", "m");
 8006c06:	4a39      	ldr	r2, [pc, #228]	; (8006cec <range_scale+0x104>)
 8006c08:	4939      	ldr	r1, [pc, #228]	; (8006cf0 <range_scale+0x108>)
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 ff3e 	bl	8008a8c <siprintf>
 8006c10:	e02c      	b.n	8006c6c <range_scale+0x84>
	} else if(value < 1000*1000) {
 8006c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c16:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8006cf4 <range_scale+0x10c>
 8006c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c22:	d50d      	bpl.n	8006c40 <range_scale+0x58>
		sprintf(range, "%s", " ");
 8006c24:	4a34      	ldr	r2, [pc, #208]	; (8006cf8 <range_scale+0x110>)
 8006c26:	4932      	ldr	r1, [pc, #200]	; (8006cf0 <range_scale+0x108>)
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 ff2f 	bl	8008a8c <siprintf>
		value /= 1000;
 8006c2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c32:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8006ce8 <range_scale+0x100>
 8006c36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c3a:	edc7 7a03 	vstr	s15, [r7, #12]
 8006c3e:	e015      	b.n	8006c6c <range_scale+0x84>
	} else if(value < 1000*1000*1000) {
 8006c40:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c44:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006cfc <range_scale+0x114>
 8006c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c50:	d50c      	bpl.n	8006c6c <range_scale+0x84>
		sprintf(range, "%s", "k");
 8006c52:	4a2b      	ldr	r2, [pc, #172]	; (8006d00 <range_scale+0x118>)
 8006c54:	4926      	ldr	r1, [pc, #152]	; (8006cf0 <range_scale+0x108>)
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 ff18 	bl	8008a8c <siprintf>
		value /= 1000*1000;
 8006c5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c60:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006cf4 <range_scale+0x10c>
 8006c64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c68:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	if(value < 10)
 8006c6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7c:	d509      	bpl.n	8006c92 <range_scale+0xaa>
		sprintf(value_buf, "%1.3f", value);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7f9 fcc2 	bl	8000608 <__aeabi_f2d>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	491e      	ldr	r1, [pc, #120]	; (8006d04 <range_scale+0x11c>)
 8006c8a:	68b8      	ldr	r0, [r7, #8]
 8006c8c:	f001 fefe 	bl	8008a8c <siprintf>
	else if(value < 100)
		sprintf(value_buf, "%2.2f", value);
	else if(value < 1000)
		sprintf(value_buf, "%3.1f", value);
}
 8006c90:	e025      	b.n	8006cde <range_scale+0xf6>
	else if(value < 100)
 8006c92:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c96:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006d08 <range_scale+0x120>
 8006c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca2:	d509      	bpl.n	8006cb8 <range_scale+0xd0>
		sprintf(value_buf, "%2.2f", value);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7f9 fcaf 	bl	8000608 <__aeabi_f2d>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4917      	ldr	r1, [pc, #92]	; (8006d0c <range_scale+0x124>)
 8006cb0:	68b8      	ldr	r0, [r7, #8]
 8006cb2:	f001 feeb 	bl	8008a8c <siprintf>
}
 8006cb6:	e012      	b.n	8006cde <range_scale+0xf6>
	else if(value < 1000)
 8006cb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cbc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006ce8 <range_scale+0x100>
 8006cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc8:	d400      	bmi.n	8006ccc <range_scale+0xe4>
}
 8006cca:	e008      	b.n	8006cde <range_scale+0xf6>
		sprintf(value_buf, "%3.1f", value);
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f7f9 fc9b 	bl	8000608 <__aeabi_f2d>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	490e      	ldr	r1, [pc, #56]	; (8006d10 <range_scale+0x128>)
 8006cd8:	68b8      	ldr	r0, [r7, #8]
 8006cda:	f001 fed7 	bl	8008a8c <siprintf>
}
 8006cde:	bf00      	nop
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	447a0000 	.word	0x447a0000
 8006cec:	0800af40 	.word	0x0800af40
 8006cf0:	0800af44 	.word	0x0800af44
 8006cf4:	49742400 	.word	0x49742400
 8006cf8:	0800af48 	.word	0x0800af48
 8006cfc:	4e6e6b28 	.word	0x4e6e6b28
 8006d00:	0800af4c 	.word	0x0800af4c
 8006d04:	0800af50 	.word	0x0800af50
 8006d08:	42c80000 	.word	0x42c80000
 8006d0c:	0800af58 	.word	0x0800af58
 8006d10:	0800af60 	.word	0x0800af60

08006d14 <lcd_screen_1_refresh>:

void lcd_screen_1_refresh() {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8006d1a:	f7fa fdcb 	bl	80018b4 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "Vrms", 1, 1);
 8006d1e:	2301      	movs	r3, #1
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	2301      	movs	r3, #1
 8006d24:	4a4f      	ldr	r2, [pc, #316]	; (8006e64 <lcd_screen_1_refresh+0x150>)
 8006d26:	2100      	movs	r1, #0
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f7ff ff41 	bl	8006bb0 <lcd_puts_xy>
	range_scale(screen1_data.Vrms, val_buf, range_buf);
 8006d2e:	4b4e      	ldr	r3, [pc, #312]	; (8006e68 <lcd_screen_1_refresh+0x154>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	463a      	mov	r2, r7
 8006d34:	1d39      	adds	r1, r7, #4
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff ff56 	bl	8006be8 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8006d3c:	1d3a      	adds	r2, r7, #4
 8006d3e:	2301      	movs	r3, #1
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	2301      	movs	r3, #1
 8006d44:	2100      	movs	r1, #0
 8006d46:	201c      	movs	r0, #28
 8006d48:	f7ff ff32 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 8006d4c:	463a      	mov	r2, r7
 8006d4e:	2301      	movs	r3, #1
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	2301      	movs	r3, #1
 8006d54:	2100      	movs	r1, #0
 8006d56:	203c      	movs	r0, #60	; 0x3c
 8006d58:	f7ff ff2a 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "V", 1, 1);
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	2301      	movs	r3, #1
 8006d62:	4a42      	ldr	r2, [pc, #264]	; (8006e6c <lcd_screen_1_refresh+0x158>)
 8006d64:	2100      	movs	r1, #0
 8006d66:	2042      	movs	r0, #66	; 0x42
 8006d68:	f7ff ff22 	bl	8006bb0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Vp", 1, 1);
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	2301      	movs	r3, #1
 8006d72:	4a3f      	ldr	r2, [pc, #252]	; (8006e70 <lcd_screen_1_refresh+0x15c>)
 8006d74:	210c      	movs	r1, #12
 8006d76:	2000      	movs	r0, #0
 8006d78:	f7ff ff1a 	bl	8006bb0 <lcd_puts_xy>
	range_scale(screen1_data.Vpeak, val_buf, range_buf);
 8006d7c:	4b3a      	ldr	r3, [pc, #232]	; (8006e68 <lcd_screen_1_refresh+0x154>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	463a      	mov	r2, r7
 8006d82:	1d39      	adds	r1, r7, #4
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff ff2f 	bl	8006be8 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 8006d8a:	1d3a      	adds	r2, r7, #4
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	2301      	movs	r3, #1
 8006d92:	210c      	movs	r1, #12
 8006d94:	201c      	movs	r0, #28
 8006d96:	f7ff ff0b 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	2301      	movs	r3, #1
 8006da2:	210c      	movs	r1, #12
 8006da4:	203c      	movs	r0, #60	; 0x3c
 8006da6:	f7ff ff03 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1, 1);
 8006daa:	2301      	movs	r3, #1
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	2301      	movs	r3, #1
 8006db0:	4a2e      	ldr	r2, [pc, #184]	; (8006e6c <lcd_screen_1_refresh+0x158>)
 8006db2:	210c      	movs	r1, #12
 8006db4:	2042      	movs	r0, #66	; 0x42
 8006db6:	f7ff fefb 	bl	8006bb0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_2, "Irms", 1, 1);
 8006dba:	2301      	movs	r3, #1
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4a2c      	ldr	r2, [pc, #176]	; (8006e74 <lcd_screen_1_refresh+0x160>)
 8006dc2:	211d      	movs	r1, #29
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	f7ff fef3 	bl	8006bb0 <lcd_puts_xy>
	range_scale(screen1_data.Irms, val_buf, range_buf);
 8006dca:	4b27      	ldr	r3, [pc, #156]	; (8006e68 <lcd_screen_1_refresh+0x154>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	463a      	mov	r2, r7
 8006dd0:	1d39      	adds	r1, r7, #4
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff ff08 	bl	8006be8 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_2, val_buf, 1, 1);
 8006dd8:	1d3a      	adds	r2, r7, #4
 8006dda:	2301      	movs	r3, #1
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	2301      	movs	r3, #1
 8006de0:	211d      	movs	r1, #29
 8006de2:	201c      	movs	r0, #28
 8006de4:	f7ff fee4 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_2, range_buf, 1, 1);
 8006de8:	463a      	mov	r2, r7
 8006dea:	2301      	movs	r3, #1
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	2301      	movs	r3, #1
 8006df0:	211d      	movs	r1, #29
 8006df2:	203c      	movs	r0, #60	; 0x3c
 8006df4:	f7ff fedc 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_2, "A", 1, 1);
 8006df8:	2301      	movs	r3, #1
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4a1e      	ldr	r2, [pc, #120]	; (8006e78 <lcd_screen_1_refresh+0x164>)
 8006e00:	211d      	movs	r1, #29
 8006e02:	2042      	movs	r0, #66	; 0x42
 8006e04:	f7ff fed4 	bl	8006bb0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "Ip", 1, 1);
 8006e08:	2301      	movs	r3, #1
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	4a1b      	ldr	r2, [pc, #108]	; (8006e7c <lcd_screen_1_refresh+0x168>)
 8006e10:	2129      	movs	r1, #41	; 0x29
 8006e12:	2000      	movs	r0, #0
 8006e14:	f7ff fecc 	bl	8006bb0 <lcd_puts_xy>
	range_scale(screen1_data.Ipeak, val_buf, range_buf);
 8006e18:	4b13      	ldr	r3, [pc, #76]	; (8006e68 <lcd_screen_1_refresh+0x154>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	463a      	mov	r2, r7
 8006e1e:	1d39      	adds	r1, r7, #4
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fee1 	bl	8006be8 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 8006e26:	1d3a      	adds	r2, r7, #4
 8006e28:	2301      	movs	r3, #1
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	2129      	movs	r1, #41	; 0x29
 8006e30:	201c      	movs	r0, #28
 8006e32:	f7ff febd 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1, 1);
 8006e36:	463a      	mov	r2, r7
 8006e38:	2301      	movs	r3, #1
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	2129      	movs	r1, #41	; 0x29
 8006e40:	203c      	movs	r0, #60	; 0x3c
 8006e42:	f7ff feb5 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "A", 1, 1);
 8006e46:	2301      	movs	r3, #1
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4a0a      	ldr	r2, [pc, #40]	; (8006e78 <lcd_screen_1_refresh+0x164>)
 8006e4e:	2129      	movs	r1, #41	; 0x29
 8006e50:	2042      	movs	r0, #66	; 0x42
 8006e52:	f7ff fead 	bl	8006bb0 <lcd_puts_xy>

	LCD5110_Refresh();
 8006e56:	f7fa fd5f 	bl	8001918 <LCD5110_Refresh>
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	0800af68 	.word	0x0800af68
 8006e68:	20013890 	.word	0x20013890
 8006e6c:	0800af70 	.word	0x0800af70
 8006e70:	0800af74 	.word	0x0800af74
 8006e74:	0800af78 	.word	0x0800af78
 8006e78:	0800af80 	.word	0x0800af80
 8006e7c:	0800af84 	.word	0x0800af84

08006e80 <lcd_screen_2_refresh>:

void lcd_screen_2_refresh() {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8006e86:	f7fa fd15 	bl	80018b4 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "P", 1, 1);
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4a49      	ldr	r2, [pc, #292]	; (8006fb8 <lcd_screen_2_refresh+0x138>)
 8006e92:	2100      	movs	r1, #0
 8006e94:	2000      	movs	r0, #0
 8006e96:	f7ff fe8b 	bl	8006bb0 <lcd_puts_xy>
	range_scale(screen2_data.ActivePower, val_buf, range_buf);
 8006e9a:	4b48      	ldr	r3, [pc, #288]	; (8006fbc <lcd_screen_2_refresh+0x13c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	1d39      	adds	r1, r7, #4
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fea0 	bl	8006be8 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8006ea8:	1d3a      	adds	r2, r7, #4
 8006eaa:	2301      	movs	r3, #1
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	2301      	movs	r3, #1
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	201c      	movs	r0, #28
 8006eb4:	f7ff fe7c 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 8006eb8:	463a      	mov	r2, r7
 8006eba:	2301      	movs	r3, #1
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	203c      	movs	r0, #60	; 0x3c
 8006ec4:	f7ff fe74 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "W", 1, 1);
 8006ec8:	2301      	movs	r3, #1
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4a3c      	ldr	r2, [pc, #240]	; (8006fc0 <lcd_screen_2_refresh+0x140>)
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	2042      	movs	r0, #66	; 0x42
 8006ed4:	f7ff fe6c 	bl	8006bb0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Q", 1, 1);
 8006ed8:	2301      	movs	r3, #1
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	2301      	movs	r3, #1
 8006ede:	4a39      	ldr	r2, [pc, #228]	; (8006fc4 <lcd_screen_2_refresh+0x144>)
 8006ee0:	210c      	movs	r1, #12
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	f7ff fe64 	bl	8006bb0 <lcd_puts_xy>
	range_scale(screen2_data.ReactivePower, val_buf, range_buf);
 8006ee8:	4b34      	ldr	r3, [pc, #208]	; (8006fbc <lcd_screen_2_refresh+0x13c>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	463a      	mov	r2, r7
 8006eee:	1d39      	adds	r1, r7, #4
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff fe79 	bl	8006be8 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 8006ef6:	1d3a      	adds	r2, r7, #4
 8006ef8:	2301      	movs	r3, #1
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	2301      	movs	r3, #1
 8006efe:	210c      	movs	r1, #12
 8006f00:	201c      	movs	r0, #28
 8006f02:	f7ff fe55 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8006f06:	463a      	mov	r2, r7
 8006f08:	2301      	movs	r3, #1
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	210c      	movs	r1, #12
 8006f10:	203c      	movs	r0, #60	; 0x3c
 8006f12:	f7ff fe4d 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAR", 1, 1);
 8006f16:	2301      	movs	r3, #1
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4a2a      	ldr	r2, [pc, #168]	; (8006fc8 <lcd_screen_2_refresh+0x148>)
 8006f1e:	210c      	movs	r1, #12
 8006f20:	2042      	movs	r0, #66	; 0x42
 8006f22:	f7ff fe45 	bl	8006bb0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_1, "S", 1, 1);
 8006f26:	2301      	movs	r3, #1
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	4a27      	ldr	r2, [pc, #156]	; (8006fcc <lcd_screen_2_refresh+0x14c>)
 8006f2e:	2118      	movs	r1, #24
 8006f30:	2000      	movs	r0, #0
 8006f32:	f7ff fe3d 	bl	8006bb0 <lcd_puts_xy>
	range_scale(screen2_data.ApparantPower, val_buf, range_buf);
 8006f36:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <lcd_screen_2_refresh+0x13c>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	463a      	mov	r2, r7
 8006f3c:	1d39      	adds	r1, r7, #4
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff fe52 	bl	8006be8 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1, 1);
 8006f44:	1d3a      	adds	r2, r7, #4
 8006f46:	2301      	movs	r3, #1
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	2118      	movs	r1, #24
 8006f4e:	201c      	movs	r0, #28
 8006f50:	f7ff fe2e 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1, 1);
 8006f54:	463a      	mov	r2, r7
 8006f56:	2301      	movs	r3, #1
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	2118      	movs	r1, #24
 8006f5e:	203c      	movs	r0, #60	; 0x3c
 8006f60:	f7ff fe26 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "VA", 1, 1);
 8006f64:	2301      	movs	r3, #1
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	2301      	movs	r3, #1
 8006f6a:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <lcd_screen_2_refresh+0x150>)
 8006f6c:	2118      	movs	r1, #24
 8006f6e:	2042      	movs	r0, #66	; 0x42
 8006f70:	f7ff fe1e 	bl	8006bb0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "PF", 1, 1);
 8006f74:	2301      	movs	r3, #1
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	2301      	movs	r3, #1
 8006f7a:	4a16      	ldr	r2, [pc, #88]	; (8006fd4 <lcd_screen_2_refresh+0x154>)
 8006f7c:	2129      	movs	r1, #41	; 0x29
 8006f7e:	2000      	movs	r0, #0
 8006f80:	f7ff fe16 	bl	8006bb0 <lcd_puts_xy>
	sprintf(val_buf, "%.2f", screen2_data.PowerFactor);
 8006f84:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <lcd_screen_2_refresh+0x13c>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7f9 fb3d 	bl	8000608 <__aeabi_f2d>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	1d38      	adds	r0, r7, #4
 8006f94:	4910      	ldr	r1, [pc, #64]	; (8006fd8 <lcd_screen_2_refresh+0x158>)
 8006f96:	f001 fd79 	bl	8008a8c <siprintf>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 8006f9a:	1d3a      	adds	r2, r7, #4
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	2129      	movs	r1, #41	; 0x29
 8006fa4:	201c      	movs	r0, #28
 8006fa6:	f7ff fe03 	bl	8006bb0 <lcd_puts_xy>

	LCD5110_Refresh();
 8006faa:	f7fa fcb5 	bl	8001918 <LCD5110_Refresh>
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	0800af88 	.word	0x0800af88
 8006fbc:	2001387c 	.word	0x2001387c
 8006fc0:	0800af8c 	.word	0x0800af8c
 8006fc4:	0800af90 	.word	0x0800af90
 8006fc8:	0800af94 	.word	0x0800af94
 8006fcc:	0800af98 	.word	0x0800af98
 8006fd0:	0800af9c 	.word	0x0800af9c
 8006fd4:	0800afa0 	.word	0x0800afa0
 8006fd8:	0800afa4 	.word	0x0800afa4

08006fdc <lcd_screen_3_refresh>:

void lcd_screen_3_refresh() {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08c      	sub	sp, #48	; 0x30
 8006fe0:	af02      	add	r7, sp, #8
	LCD5110_Clear();
 8006fe2:	f7fa fc67 	bl	80018b4 <LCD5110_Clear>

	char val_buf[10];
	char range_buf[2];

	lcd_puts_xy(0, ROW_LINE_1, "P.t", 1, 1);
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	2301      	movs	r3, #1
 8006fec:	4a4d      	ldr	r2, [pc, #308]	; (8007124 <lcd_screen_3_refresh+0x148>)
 8006fee:	2100      	movs	r1, #0
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	f7ff fddd 	bl	8006bb0 <lcd_puts_xy>
	range_scale(screen3_data.ActiveEnergy, val_buf, range_buf);
 8006ff6:	4b4c      	ldr	r3, [pc, #304]	; (8007128 <lcd_screen_3_refresh+0x14c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f107 0218 	add.w	r2, r7, #24
 8006ffe:	f107 011c 	add.w	r1, r7, #28
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fdf0 	bl	8006be8 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8007008:	f107 021c 	add.w	r2, r7, #28
 800700c:	2301      	movs	r3, #1
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	2301      	movs	r3, #1
 8007012:	2100      	movs	r1, #0
 8007014:	201c      	movs	r0, #28
 8007016:	f7ff fdcb 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 800701a:	f107 0218 	add.w	r2, r7, #24
 800701e:	2301      	movs	r3, #1
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	2301      	movs	r3, #1
 8007024:	2100      	movs	r1, #0
 8007026:	203c      	movs	r0, #60	; 0x3c
 8007028:	f7ff fdc2 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "Wh", 1, 1);
 800702c:	2301      	movs	r3, #1
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	2301      	movs	r3, #1
 8007032:	4a3e      	ldr	r2, [pc, #248]	; (800712c <lcd_screen_3_refresh+0x150>)
 8007034:	2100      	movs	r1, #0
 8007036:	2042      	movs	r0, #66	; 0x42
 8007038:	f7ff fdba 	bl	8006bb0 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "S.t", 1, 1);
 800703c:	2301      	movs	r3, #1
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	2301      	movs	r3, #1
 8007042:	4a3b      	ldr	r2, [pc, #236]	; (8007130 <lcd_screen_3_refresh+0x154>)
 8007044:	210c      	movs	r1, #12
 8007046:	2000      	movs	r0, #0
 8007048:	f7ff fdb2 	bl	8006bb0 <lcd_puts_xy>
	range_scale(screen3_data.ApparantEnergy, val_buf, range_buf);
 800704c:	4b36      	ldr	r3, [pc, #216]	; (8007128 <lcd_screen_3_refresh+0x14c>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f107 0218 	add.w	r2, r7, #24
 8007054:	f107 011c 	add.w	r1, r7, #28
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fdc5 	bl	8006be8 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 800705e:	f107 021c 	add.w	r2, r7, #28
 8007062:	2301      	movs	r3, #1
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	2301      	movs	r3, #1
 8007068:	210c      	movs	r1, #12
 800706a:	201c      	movs	r0, #28
 800706c:	f7ff fda0 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8007070:	f107 0218 	add.w	r2, r7, #24
 8007074:	2301      	movs	r3, #1
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2301      	movs	r3, #1
 800707a:	210c      	movs	r1, #12
 800707c:	203c      	movs	r0, #60	; 0x3c
 800707e:	f7ff fd97 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAh", 1, 1);
 8007082:	2301      	movs	r3, #1
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	2301      	movs	r3, #1
 8007088:	4a2a      	ldr	r2, [pc, #168]	; (8007134 <lcd_screen_3_refresh+0x158>)
 800708a:	210c      	movs	r1, #12
 800708c:	2042      	movs	r0, #66	; 0x42
 800708e:	f7ff fd8f 	bl	8006bb0 <lcd_puts_xy>

	if(screen3_mode == S3_RESET_CONFIRM) {
 8007092:	4b29      	ldr	r3, [pc, #164]	; (8007138 <lcd_screen_3_refresh+0x15c>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d10f      	bne.n	80070ba <lcd_screen_3_refresh+0xde>
		lcd_puts_xy(12, ROW_LINE_3_1, "Clear Data?", 1, 1);
 800709a:	2301      	movs	r3, #1
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	2301      	movs	r3, #1
 80070a0:	4a26      	ldr	r2, [pc, #152]	; (800713c <lcd_screen_3_refresh+0x160>)
 80070a2:	2118      	movs	r1, #24
 80070a4:	200c      	movs	r0, #12
 80070a6:	f7ff fd83 	bl	8006bb0 <lcd_puts_xy>
		lcd_puts_xy(12, ROW_LINE_3_1 + 8, "[#]Y / [*]N", 1, 1);
 80070aa:	2301      	movs	r3, #1
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2301      	movs	r3, #1
 80070b0:	4a23      	ldr	r2, [pc, #140]	; (8007140 <lcd_screen_3_refresh+0x164>)
 80070b2:	2120      	movs	r1, #32
 80070b4:	200c      	movs	r0, #12
 80070b6:	f7ff fd7b 	bl	8006bb0 <lcd_puts_xy>
	}

	char days_buf[5];
	sprintf(days_buf, "%04lu", Screen3_Timer.days);
 80070ba:	4b22      	ldr	r3, [pc, #136]	; (8007144 <lcd_screen_3_refresh+0x168>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	f107 0310 	add.w	r3, r7, #16
 80070c2:	4921      	ldr	r1, [pc, #132]	; (8007148 <lcd_screen_3_refresh+0x16c>)
 80070c4:	4618      	mov	r0, r3
 80070c6:	f001 fce1 	bl	8008a8c <siprintf>
	lcd_puts_xy(0, ROW_LINE_4, days_buf, 1, 1);
 80070ca:	f107 0210 	add.w	r2, r7, #16
 80070ce:	2301      	movs	r3, #1
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	2301      	movs	r3, #1
 80070d4:	2129      	movs	r1, #41	; 0x29
 80070d6:	2000      	movs	r0, #0
 80070d8:	f7ff fd6a 	bl	8006bb0 <lcd_puts_xy>
	lcd_puts_xy(26, ROW_LINE_4 + 2, "DAY(s)", 1, 0);
 80070dc:	2300      	movs	r3, #0
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	2301      	movs	r3, #1
 80070e2:	4a1a      	ldr	r2, [pc, #104]	; (800714c <lcd_screen_3_refresh+0x170>)
 80070e4:	212b      	movs	r1, #43	; 0x2b
 80070e6:	201a      	movs	r0, #26
 80070e8:	f7ff fd62 	bl	8006bb0 <lcd_puts_xy>

	char runtime_buf[9];
	sprintf(runtime_buf, "%02u:%02u:%02u", Screen3_Timer.hours, Screen3_Timer.minutes, Screen3_Timer.seconds);
 80070ec:	4b15      	ldr	r3, [pc, #84]	; (8007144 <lcd_screen_3_refresh+0x168>)
 80070ee:	791b      	ldrb	r3, [r3, #4]
 80070f0:	461a      	mov	r2, r3
 80070f2:	4b14      	ldr	r3, [pc, #80]	; (8007144 <lcd_screen_3_refresh+0x168>)
 80070f4:	795b      	ldrb	r3, [r3, #5]
 80070f6:	4619      	mov	r1, r3
 80070f8:	4b12      	ldr	r3, [pc, #72]	; (8007144 <lcd_screen_3_refresh+0x168>)
 80070fa:	799b      	ldrb	r3, [r3, #6]
 80070fc:	1d38      	adds	r0, r7, #4
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	460b      	mov	r3, r1
 8007102:	4913      	ldr	r1, [pc, #76]	; (8007150 <lcd_screen_3_refresh+0x174>)
 8007104:	f001 fcc2 	bl	8008a8c <siprintf>
	lcd_puts_xy(56, ROW_LINE_4 + 2, runtime_buf, 1, 0);
 8007108:	1d3a      	adds	r2, r7, #4
 800710a:	2300      	movs	r3, #0
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	2301      	movs	r3, #1
 8007110:	212b      	movs	r1, #43	; 0x2b
 8007112:	2038      	movs	r0, #56	; 0x38
 8007114:	f7ff fd4c 	bl	8006bb0 <lcd_puts_xy>

	LCD5110_Refresh();
 8007118:	f7fa fbfe 	bl	8001918 <LCD5110_Refresh>
}
 800711c:	bf00      	nop
 800711e:	3728      	adds	r7, #40	; 0x28
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	0800afac 	.word	0x0800afac
 8007128:	200138b8 	.word	0x200138b8
 800712c:	0800afb0 	.word	0x0800afb0
 8007130:	0800afb4 	.word	0x0800afb4
 8007134:	0800afb8 	.word	0x0800afb8
 8007138:	2001388c 	.word	0x2001388c
 800713c:	0800afbc 	.word	0x0800afbc
 8007140:	0800afc8 	.word	0x0800afc8
 8007144:	200138c0 	.word	0x200138c0
 8007148:	0800afd4 	.word	0x0800afd4
 800714c:	0800afdc 	.word	0x0800afdc
 8007150:	0800afe4 	.word	0x0800afe4

08007154 <lcd_screen_4_refresh>:

void lcd_screen_4_refresh() {
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	; 0x38
 8007158:	af02      	add	r7, sp, #8
	char time_buf[9];
	char val_buf[10];
	char range_buf[2];
	char interval_buf[7];

	LCD5110_Clear();
 800715a:	f7fa fbab 	bl	80018b4 <LCD5110_Clear>

	if(screen4_mode == S4_NORMAL_DISPLAY) {
 800715e:	4bbf      	ldr	r3, [pc, #764]	; (800745c <lcd_screen_4_refresh+0x308>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f040 80ca 	bne.w	80072fc <lcd_screen_4_refresh+0x1a8>

		lcd_puts_xy(0, 0, "PKV", 1, 1);
 8007168:	2301      	movs	r3, #1
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	2301      	movs	r3, #1
 800716e:	4abc      	ldr	r2, [pc, #752]	; (8007460 <lcd_screen_4_refresh+0x30c>)
 8007170:	2100      	movs	r1, #0
 8007172:	2000      	movs	r0, #0
 8007174:	f7ff fd1c 	bl	8006bb0 <lcd_puts_xy>
		range_scale(screen4_data.User_PKI, val_buf, range_buf);
 8007178:	4bba      	ldr	r3, [pc, #744]	; (8007464 <lcd_screen_4_refresh+0x310>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f107 0208 	add.w	r2, r7, #8
 8007180:	f107 010c 	add.w	r1, r7, #12
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff fd2f 	bl	8006be8 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 0, val_buf, 1, 1);
 800718a:	f107 020c 	add.w	r2, r7, #12
 800718e:	2301      	movs	r3, #1
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	2301      	movs	r3, #1
 8007194:	2100      	movs	r1, #0
 8007196:	201c      	movs	r0, #28
 8007198:	f7ff fd0a 	bl	8006bb0 <lcd_puts_xy>
		lcd_puts_xy(VALUE_RANGE_COLUMN, 0, range_buf, 1, 1);
 800719c:	f107 0208 	add.w	r2, r7, #8
 80071a0:	2301      	movs	r3, #1
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	2301      	movs	r3, #1
 80071a6:	2100      	movs	r1, #0
 80071a8:	203c      	movs	r0, #60	; 0x3c
 80071aa:	f7ff fd01 	bl	8006bb0 <lcd_puts_xy>
		lcd_puts_xy(UNITS_COLUMN, 0, "V", 1, 1);
 80071ae:	2301      	movs	r3, #1
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	2301      	movs	r3, #1
 80071b4:	4aac      	ldr	r2, [pc, #688]	; (8007468 <lcd_screen_4_refresh+0x314>)
 80071b6:	2100      	movs	r1, #0
 80071b8:	2042      	movs	r0, #66	; 0x42
 80071ba:	f7ff fcf9 	bl	8006bb0 <lcd_puts_xy>

		lcd_puts_xy(0, 10, "PKI", 1, 1);
 80071be:	2301      	movs	r3, #1
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	2301      	movs	r3, #1
 80071c4:	4aa9      	ldr	r2, [pc, #676]	; (800746c <lcd_screen_4_refresh+0x318>)
 80071c6:	210a      	movs	r1, #10
 80071c8:	2000      	movs	r0, #0
 80071ca:	f7ff fcf1 	bl	8006bb0 <lcd_puts_xy>
		range_scale(screen4_data.User_PKI, val_buf, range_buf);
 80071ce:	4ba5      	ldr	r3, [pc, #660]	; (8007464 <lcd_screen_4_refresh+0x310>)
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f107 0208 	add.w	r2, r7, #8
 80071d6:	f107 010c 	add.w	r1, r7, #12
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fd04 	bl	8006be8 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 10, val_buf, 1, 1);
 80071e0:	f107 020c 	add.w	r2, r7, #12
 80071e4:	2301      	movs	r3, #1
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	2301      	movs	r3, #1
 80071ea:	210a      	movs	r1, #10
 80071ec:	201c      	movs	r0, #28
 80071ee:	f7ff fcdf 	bl	8006bb0 <lcd_puts_xy>
		lcd_puts_xy(VALUE_RANGE_COLUMN, 10, range_buf, 1, 1);
 80071f2:	f107 0208 	add.w	r2, r7, #8
 80071f6:	2301      	movs	r3, #1
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	2301      	movs	r3, #1
 80071fc:	210a      	movs	r1, #10
 80071fe:	203c      	movs	r0, #60	; 0x3c
 8007200:	f7ff fcd6 	bl	8006bb0 <lcd_puts_xy>
		lcd_puts_xy(UNITS_COLUMN, 10, "A", 1, 1);
 8007204:	2301      	movs	r3, #1
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	2301      	movs	r3, #1
 800720a:	4a99      	ldr	r2, [pc, #612]	; (8007470 <lcd_screen_4_refresh+0x31c>)
 800720c:	210a      	movs	r1, #10
 800720e:	2042      	movs	r0, #66	; 0x42
 8007210:	f7ff fcce 	bl	8006bb0 <lcd_puts_xy>

		lcd_puts_xy(0, 20, "SAG", 1, 1);
 8007214:	2301      	movs	r3, #1
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2301      	movs	r3, #1
 800721a:	4a96      	ldr	r2, [pc, #600]	; (8007474 <lcd_screen_4_refresh+0x320>)
 800721c:	2114      	movs	r1, #20
 800721e:	2000      	movs	r0, #0
 8007220:	f7ff fcc6 	bl	8006bb0 <lcd_puts_xy>
		range_scale(screen4_data.User_SAG, val_buf, range_buf);
 8007224:	4b8f      	ldr	r3, [pc, #572]	; (8007464 <lcd_screen_4_refresh+0x310>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f107 0208 	add.w	r2, r7, #8
 800722c:	f107 010c 	add.w	r1, r7, #12
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff fcd9 	bl	8006be8 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 20, val_buf, 1, 1);
 8007236:	f107 020c 	add.w	r2, r7, #12
 800723a:	2301      	movs	r3, #1
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	2301      	movs	r3, #1
 8007240:	2114      	movs	r1, #20
 8007242:	201c      	movs	r0, #28
 8007244:	f7ff fcb4 	bl	8006bb0 <lcd_puts_xy>
		lcd_puts_xy(VALUE_RANGE_COLUMN, 20, range_buf, 1, 1);
 8007248:	f107 0208 	add.w	r2, r7, #8
 800724c:	2301      	movs	r3, #1
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	2301      	movs	r3, #1
 8007252:	2114      	movs	r1, #20
 8007254:	203c      	movs	r0, #60	; 0x3c
 8007256:	f7ff fcab 	bl	8006bb0 <lcd_puts_xy>
		lcd_puts_xy(UNITS_COLUMN, 20, "V", 1, 1);
 800725a:	2301      	movs	r3, #1
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	2301      	movs	r3, #1
 8007260:	4a81      	ldr	r2, [pc, #516]	; (8007468 <lcd_screen_4_refresh+0x314>)
 8007262:	2114      	movs	r1, #20
 8007264:	2042      	movs	r0, #66	; 0x42
 8007266:	f7ff fca3 	bl	8006bb0 <lcd_puts_xy>

		lcd_puts_xy(0, 30, "Intv", 1, 1);
 800726a:	2301      	movs	r3, #1
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	2301      	movs	r3, #1
 8007270:	4a81      	ldr	r2, [pc, #516]	; (8007478 <lcd_screen_4_refresh+0x324>)
 8007272:	211e      	movs	r1, #30
 8007274:	2000      	movs	r0, #0
 8007276:	f7ff fc9b 	bl	8006bb0 <lcd_puts_xy>
		sprintf(interval_buf, "%02dmins", screen4_data.User_Interval);
 800727a:	4b7a      	ldr	r3, [pc, #488]	; (8007464 <lcd_screen_4_refresh+0x310>)
 800727c:	7b1b      	ldrb	r3, [r3, #12]
 800727e:	461a      	mov	r2, r3
 8007280:	463b      	mov	r3, r7
 8007282:	497e      	ldr	r1, [pc, #504]	; (800747c <lcd_screen_4_refresh+0x328>)
 8007284:	4618      	mov	r0, r3
 8007286:	f001 fc01 	bl	8008a8c <siprintf>
		lcd_puts_xy(INTVL_COLUMN, 30, interval_buf, 1, 1);
 800728a:	463a      	mov	r2, r7
 800728c:	2301      	movs	r3, #1
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	2301      	movs	r3, #1
 8007292:	211e      	movs	r1, #30
 8007294:	2028      	movs	r0, #40	; 0x28
 8007296:	f7ff fc8b 	bl	8006bb0 <lcd_puts_xy>

		sprintf(date_buf, "%02u/%02u/20%02u",
				screen4_data.Device_RTC.date.date,
 800729a:	4b72      	ldr	r3, [pc, #456]	; (8007464 <lcd_screen_4_refresh+0x310>)
 800729c:	7b5b      	ldrb	r3, [r3, #13]
		sprintf(date_buf, "%02u/%02u/20%02u",
 800729e:	461a      	mov	r2, r3
				screen4_data.Device_RTC.date.month,
 80072a0:	4b70      	ldr	r3, [pc, #448]	; (8007464 <lcd_screen_4_refresh+0x310>)
 80072a2:	7b9b      	ldrb	r3, [r3, #14]
		sprintf(date_buf, "%02u/%02u/20%02u",
 80072a4:	4619      	mov	r1, r3
				screen4_data.Device_RTC.date.year);
 80072a6:	4b6f      	ldr	r3, [pc, #444]	; (8007464 <lcd_screen_4_refresh+0x310>)
 80072a8:	7bdb      	ldrb	r3, [r3, #15]
		sprintf(date_buf, "%02u/%02u/20%02u",
 80072aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	460b      	mov	r3, r1
 80072b2:	4973      	ldr	r1, [pc, #460]	; (8007480 <lcd_screen_4_refresh+0x32c>)
 80072b4:	f001 fbea 	bl	8008a8c <siprintf>
		lcd_puts_xy(0, ROW_LINE_4 + 2, date_buf, 1, 0);
 80072b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80072bc:	2300      	movs	r3, #0
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2301      	movs	r3, #1
 80072c2:	212b      	movs	r1, #43	; 0x2b
 80072c4:	2000      	movs	r0, #0
 80072c6:	f7ff fc73 	bl	8006bb0 <lcd_puts_xy>
		sprintf(time_buf, "%02u:%02u:%02u",
				screen4_data.Device_RTC.time.hours,
 80072ca:	4b66      	ldr	r3, [pc, #408]	; (8007464 <lcd_screen_4_refresh+0x310>)
 80072cc:	7d1b      	ldrb	r3, [r3, #20]
		sprintf(time_buf, "%02u:%02u:%02u",
 80072ce:	461a      	mov	r2, r3
				screen4_data.Device_RTC.time.minutes,
 80072d0:	4b64      	ldr	r3, [pc, #400]	; (8007464 <lcd_screen_4_refresh+0x310>)
 80072d2:	7cdb      	ldrb	r3, [r3, #19]
		sprintf(time_buf, "%02u:%02u:%02u",
 80072d4:	4619      	mov	r1, r3
				screen4_data.Device_RTC.time.seconds);
 80072d6:	4b63      	ldr	r3, [pc, #396]	; (8007464 <lcd_screen_4_refresh+0x310>)
 80072d8:	7c9b      	ldrb	r3, [r3, #18]
		sprintf(time_buf, "%02u:%02u:%02u",
 80072da:	f107 0018 	add.w	r0, r7, #24
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	460b      	mov	r3, r1
 80072e2:	4968      	ldr	r1, [pc, #416]	; (8007484 <lcd_screen_4_refresh+0x330>)
 80072e4:	f001 fbd2 	bl	8008a8c <siprintf>
		lcd_puts_xy(56, ROW_LINE_4 + 2, time_buf, 1, 0);
 80072e8:	f107 0218 	add.w	r2, r7, #24
 80072ec:	2300      	movs	r3, #0
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	2301      	movs	r3, #1
 80072f2:	212b      	movs	r1, #43	; 0x2b
 80072f4:	2038      	movs	r0, #56	; 0x38
 80072f6:	f7ff fc5b 	bl	8006bb0 <lcd_puts_xy>
 80072fa:	e1bb      	b.n	8007674 <lcd_screen_4_refresh+0x520>

	} else {
		lcd_puts_xy(5, ROW_LINE_1, "Configuration", 1, 1);
 80072fc:	2301      	movs	r3, #1
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	2301      	movs	r3, #1
 8007302:	4a61      	ldr	r2, [pc, #388]	; (8007488 <lcd_screen_4_refresh+0x334>)
 8007304:	2100      	movs	r1, #0
 8007306:	2005      	movs	r0, #5
 8007308:	f7ff fc52 	bl	8006bb0 <lcd_puts_xy>

		if(screen4_mode == S4_CONFIG_DISPLAY) {
 800730c:	4b53      	ldr	r3, [pc, #332]	; (800745c <lcd_screen_4_refresh+0x308>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	f040 8197 	bne.w	8007644 <lcd_screen_4_refresh+0x4f0>
			if(Screen4_Config_Target < Screen4_Config_interval) {
 8007316:	4b5d      	ldr	r3, [pc, #372]	; (800748c <lcd_screen_4_refresh+0x338>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b05      	cmp	r3, #5
 800731c:	f200 80ee 	bhi.w	80074fc <lcd_screen_4_refresh+0x3a8>

				lcd_puts_xy(0, ROW_LINE_2, "PKV", 1, 1);
 8007320:	2301      	movs	r3, #1
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	2301      	movs	r3, #1
 8007326:	4a4e      	ldr	r2, [pc, #312]	; (8007460 <lcd_screen_4_refresh+0x30c>)
 8007328:	210c      	movs	r1, #12
 800732a:	2000      	movs	r0, #0
 800732c:	f7ff fc40 	bl	8006bb0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_pkv)
 8007330:	4b56      	ldr	r3, [pc, #344]	; (800748c <lcd_screen_4_refresh+0x338>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d108      	bne.n	800734a <lcd_screen_4_refresh+0x1f6>
					lcd_puts_xy(20, ROW_LINE_2, "<", 1, 1);
 8007338:	2301      	movs	r3, #1
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	2301      	movs	r3, #1
 800733e:	4a54      	ldr	r2, [pc, #336]	; (8007490 <lcd_screen_4_refresh+0x33c>)
 8007340:	210c      	movs	r1, #12
 8007342:	2014      	movs	r0, #20
 8007344:	f7ff fc34 	bl	8006bb0 <lcd_puts_xy>
 8007348:	e00b      	b.n	8007362 <lcd_screen_4_refresh+0x20e>
				else if(Screen4_Config_Target == Screen4_Config_pkv_selected)
 800734a:	4b50      	ldr	r3, [pc, #320]	; (800748c <lcd_screen_4_refresh+0x338>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d107      	bne.n	8007362 <lcd_screen_4_refresh+0x20e>
					lcd_puts_xy(20, ROW_LINE_2, ">", 0, 1);
 8007352:	2301      	movs	r3, #1
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	4a4e      	ldr	r2, [pc, #312]	; (8007494 <lcd_screen_4_refresh+0x340>)
 800735a:	210c      	movs	r1, #12
 800735c:	2014      	movs	r0, #20
 800735e:	f7ff fc27 	bl	8006bb0 <lcd_puts_xy>
				range_scale(screen4_data_config.User_PKI, val_buf, range_buf);
 8007362:	4b4d      	ldr	r3, [pc, #308]	; (8007498 <lcd_screen_4_refresh+0x344>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f107 0208 	add.w	r2, r7, #8
 800736a:	f107 010c 	add.w	r1, r7, #12
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff fc3a 	bl	8006be8 <range_scale>
				lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 8007374:	f107 020c 	add.w	r2, r7, #12
 8007378:	2301      	movs	r3, #1
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	2301      	movs	r3, #1
 800737e:	210c      	movs	r1, #12
 8007380:	201c      	movs	r0, #28
 8007382:	f7ff fc15 	bl	8006bb0 <lcd_puts_xy>
				lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8007386:	f107 0208 	add.w	r2, r7, #8
 800738a:	2301      	movs	r3, #1
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	2301      	movs	r3, #1
 8007390:	210c      	movs	r1, #12
 8007392:	203c      	movs	r0, #60	; 0x3c
 8007394:	f7ff fc0c 	bl	8006bb0 <lcd_puts_xy>
				lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1, 1);
 8007398:	2301      	movs	r3, #1
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	2301      	movs	r3, #1
 800739e:	4a32      	ldr	r2, [pc, #200]	; (8007468 <lcd_screen_4_refresh+0x314>)
 80073a0:	210c      	movs	r1, #12
 80073a2:	2042      	movs	r0, #66	; 0x42
 80073a4:	f7ff fc04 	bl	8006bb0 <lcd_puts_xy>


				lcd_puts_xy(0, ROW_LINE_3_1, "PKI", 1, 1);
 80073a8:	2301      	movs	r3, #1
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	2301      	movs	r3, #1
 80073ae:	4a2f      	ldr	r2, [pc, #188]	; (800746c <lcd_screen_4_refresh+0x318>)
 80073b0:	2118      	movs	r1, #24
 80073b2:	2000      	movs	r0, #0
 80073b4:	f7ff fbfc 	bl	8006bb0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_pki)
 80073b8:	4b34      	ldr	r3, [pc, #208]	; (800748c <lcd_screen_4_refresh+0x338>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d108      	bne.n	80073d2 <lcd_screen_4_refresh+0x27e>
					lcd_puts_xy(20, ROW_LINE_3_1, "<", 1, 1);
 80073c0:	2301      	movs	r3, #1
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	2301      	movs	r3, #1
 80073c6:	4a32      	ldr	r2, [pc, #200]	; (8007490 <lcd_screen_4_refresh+0x33c>)
 80073c8:	2118      	movs	r1, #24
 80073ca:	2014      	movs	r0, #20
 80073cc:	f7ff fbf0 	bl	8006bb0 <lcd_puts_xy>
 80073d0:	e00b      	b.n	80073ea <lcd_screen_4_refresh+0x296>
				else if(Screen4_Config_Target == Screen4_Config_pki_selected)
 80073d2:	4b2e      	ldr	r3, [pc, #184]	; (800748c <lcd_screen_4_refresh+0x338>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d107      	bne.n	80073ea <lcd_screen_4_refresh+0x296>
					lcd_puts_xy(20, ROW_LINE_3_1, ">", 0, 1);
 80073da:	2301      	movs	r3, #1
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	2300      	movs	r3, #0
 80073e0:	4a2c      	ldr	r2, [pc, #176]	; (8007494 <lcd_screen_4_refresh+0x340>)
 80073e2:	2118      	movs	r1, #24
 80073e4:	2014      	movs	r0, #20
 80073e6:	f7ff fbe3 	bl	8006bb0 <lcd_puts_xy>
				range_scale(screen4_data_config.User_PKI, val_buf, range_buf);
 80073ea:	4b2b      	ldr	r3, [pc, #172]	; (8007498 <lcd_screen_4_refresh+0x344>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f107 0208 	add.w	r2, r7, #8
 80073f2:	f107 010c 	add.w	r1, r7, #12
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff fbf6 	bl	8006be8 <range_scale>
				lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1, 1);
 80073fc:	f107 020c 	add.w	r2, r7, #12
 8007400:	2301      	movs	r3, #1
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2301      	movs	r3, #1
 8007406:	2118      	movs	r1, #24
 8007408:	201c      	movs	r0, #28
 800740a:	f7ff fbd1 	bl	8006bb0 <lcd_puts_xy>
				lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1, 1);
 800740e:	f107 0208 	add.w	r2, r7, #8
 8007412:	2301      	movs	r3, #1
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	2301      	movs	r3, #1
 8007418:	2118      	movs	r1, #24
 800741a:	203c      	movs	r0, #60	; 0x3c
 800741c:	f7ff fbc8 	bl	8006bb0 <lcd_puts_xy>
				lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "A", 1, 1);
 8007420:	2301      	movs	r3, #1
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	2301      	movs	r3, #1
 8007426:	4a12      	ldr	r2, [pc, #72]	; (8007470 <lcd_screen_4_refresh+0x31c>)
 8007428:	2118      	movs	r1, #24
 800742a:	2042      	movs	r0, #66	; 0x42
 800742c:	f7ff fbc0 	bl	8006bb0 <lcd_puts_xy>



				lcd_puts_xy(0, ROW_LINE_4, "SAG", 1, 1);
 8007430:	2301      	movs	r3, #1
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	2301      	movs	r3, #1
 8007436:	4a0f      	ldr	r2, [pc, #60]	; (8007474 <lcd_screen_4_refresh+0x320>)
 8007438:	2129      	movs	r1, #41	; 0x29
 800743a:	2000      	movs	r0, #0
 800743c:	f7ff fbb8 	bl	8006bb0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_sag)
 8007440:	4b12      	ldr	r3, [pc, #72]	; (800748c <lcd_screen_4_refresh+0x338>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b04      	cmp	r3, #4
 8007446:	d129      	bne.n	800749c <lcd_screen_4_refresh+0x348>
					lcd_puts_xy(20, ROW_LINE_4, "<", 1, 1);
 8007448:	2301      	movs	r3, #1
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	2301      	movs	r3, #1
 800744e:	4a10      	ldr	r2, [pc, #64]	; (8007490 <lcd_screen_4_refresh+0x33c>)
 8007450:	2129      	movs	r1, #41	; 0x29
 8007452:	2014      	movs	r0, #20
 8007454:	f7ff fbac 	bl	8006bb0 <lcd_puts_xy>
 8007458:	e02c      	b.n	80074b4 <lcd_screen_4_refresh+0x360>
 800745a:	bf00      	nop
 800745c:	200138c8 	.word	0x200138c8
 8007460:	0800aff4 	.word	0x0800aff4
 8007464:	200138a0 	.word	0x200138a0
 8007468:	0800af70 	.word	0x0800af70
 800746c:	0800aff8 	.word	0x0800aff8
 8007470:	0800af80 	.word	0x0800af80
 8007474:	0800affc 	.word	0x0800affc
 8007478:	0800b000 	.word	0x0800b000
 800747c:	0800b008 	.word	0x0800b008
 8007480:	0800b014 	.word	0x0800b014
 8007484:	0800afe4 	.word	0x0800afe4
 8007488:	0800b028 	.word	0x0800b028
 800748c:	20013878 	.word	0x20013878
 8007490:	0800b038 	.word	0x0800b038
 8007494:	0800b03c 	.word	0x0800b03c
 8007498:	200138cc 	.word	0x200138cc
				else if(Screen4_Config_Target == Screen4_Config_sag_selected)
 800749c:	4b78      	ldr	r3, [pc, #480]	; (8007680 <lcd_screen_4_refresh+0x52c>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b05      	cmp	r3, #5
 80074a2:	d107      	bne.n	80074b4 <lcd_screen_4_refresh+0x360>
					lcd_puts_xy(20, ROW_LINE_4, ">", 0, 1);
 80074a4:	2301      	movs	r3, #1
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	2300      	movs	r3, #0
 80074aa:	4a76      	ldr	r2, [pc, #472]	; (8007684 <lcd_screen_4_refresh+0x530>)
 80074ac:	2129      	movs	r1, #41	; 0x29
 80074ae:	2014      	movs	r0, #20
 80074b0:	f7ff fb7e 	bl	8006bb0 <lcd_puts_xy>
				range_scale(screen4_data_config.User_SAG, val_buf, range_buf);
 80074b4:	4b74      	ldr	r3, [pc, #464]	; (8007688 <lcd_screen_4_refresh+0x534>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f107 0208 	add.w	r2, r7, #8
 80074bc:	f107 010c 	add.w	r1, r7, #12
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff fb91 	bl	8006be8 <range_scale>
				lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 80074c6:	f107 020c 	add.w	r2, r7, #12
 80074ca:	2301      	movs	r3, #1
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2301      	movs	r3, #1
 80074d0:	2129      	movs	r1, #41	; 0x29
 80074d2:	201c      	movs	r0, #28
 80074d4:	f7ff fb6c 	bl	8006bb0 <lcd_puts_xy>
				lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1, 1);
 80074d8:	f107 0208 	add.w	r2, r7, #8
 80074dc:	2301      	movs	r3, #1
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2301      	movs	r3, #1
 80074e2:	2129      	movs	r1, #41	; 0x29
 80074e4:	203c      	movs	r0, #60	; 0x3c
 80074e6:	f7ff fb63 	bl	8006bb0 <lcd_puts_xy>
				lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "V", 1, 1);
 80074ea:	2301      	movs	r3, #1
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	2301      	movs	r3, #1
 80074f0:	4a66      	ldr	r2, [pc, #408]	; (800768c <lcd_screen_4_refresh+0x538>)
 80074f2:	2129      	movs	r1, #41	; 0x29
 80074f4:	2042      	movs	r0, #66	; 0x42
 80074f6:	f7ff fb5b 	bl	8006bb0 <lcd_puts_xy>
 80074fa:	e0bb      	b.n	8007674 <lcd_screen_4_refresh+0x520>

			} else {
				lcd_puts_xy(0, ROW_LINE_2, "Intv", 1, 1);
 80074fc:	2301      	movs	r3, #1
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2301      	movs	r3, #1
 8007502:	4a63      	ldr	r2, [pc, #396]	; (8007690 <lcd_screen_4_refresh+0x53c>)
 8007504:	210c      	movs	r1, #12
 8007506:	2000      	movs	r0, #0
 8007508:	f7ff fb52 	bl	8006bb0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_interval)
 800750c:	4b5c      	ldr	r3, [pc, #368]	; (8007680 <lcd_screen_4_refresh+0x52c>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b06      	cmp	r3, #6
 8007512:	d108      	bne.n	8007526 <lcd_screen_4_refresh+0x3d2>
					lcd_puts_xy(24, ROW_LINE_2, "<", 1, 1);
 8007514:	2301      	movs	r3, #1
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	2301      	movs	r3, #1
 800751a:	4a5e      	ldr	r2, [pc, #376]	; (8007694 <lcd_screen_4_refresh+0x540>)
 800751c:	210c      	movs	r1, #12
 800751e:	2018      	movs	r0, #24
 8007520:	f7ff fb46 	bl	8006bb0 <lcd_puts_xy>
 8007524:	e00b      	b.n	800753e <lcd_screen_4_refresh+0x3ea>
				else if(Screen4_Config_Target == Screen4_Config_interval_selected)
 8007526:	4b56      	ldr	r3, [pc, #344]	; (8007680 <lcd_screen_4_refresh+0x52c>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b07      	cmp	r3, #7
 800752c:	d107      	bne.n	800753e <lcd_screen_4_refresh+0x3ea>
					lcd_puts_xy(24, ROW_LINE_2, ">", 0, 1);
 800752e:	2301      	movs	r3, #1
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	2300      	movs	r3, #0
 8007534:	4a53      	ldr	r2, [pc, #332]	; (8007684 <lcd_screen_4_refresh+0x530>)
 8007536:	210c      	movs	r1, #12
 8007538:	2018      	movs	r0, #24
 800753a:	f7ff fb39 	bl	8006bb0 <lcd_puts_xy>
				sprintf(interval_buf, "%02dmins", screen4_data_config.User_Interval);
 800753e:	4b52      	ldr	r3, [pc, #328]	; (8007688 <lcd_screen_4_refresh+0x534>)
 8007540:	7b1b      	ldrb	r3, [r3, #12]
 8007542:	461a      	mov	r2, r3
 8007544:	463b      	mov	r3, r7
 8007546:	4954      	ldr	r1, [pc, #336]	; (8007698 <lcd_screen_4_refresh+0x544>)
 8007548:	4618      	mov	r0, r3
 800754a:	f001 fa9f 	bl	8008a8c <siprintf>
				lcd_puts_xy(INTVL_COLUMN, ROW_LINE_2, interval_buf, 1, 1);
 800754e:	463a      	mov	r2, r7
 8007550:	2301      	movs	r3, #1
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	2301      	movs	r3, #1
 8007556:	210c      	movs	r1, #12
 8007558:	2028      	movs	r0, #40	; 0x28
 800755a:	f7ff fb29 	bl	8006bb0 <lcd_puts_xy>

				lcd_puts_xy(0, ROW_LINE_3_2, "DT", 1, 1);
 800755e:	2301      	movs	r3, #1
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	2301      	movs	r3, #1
 8007564:	4a4d      	ldr	r2, [pc, #308]	; (800769c <lcd_screen_4_refresh+0x548>)
 8007566:	211d      	movs	r1, #29
 8007568:	2000      	movs	r0, #0
 800756a:	f7ff fb21 	bl	8006bb0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_date)
 800756e:	4b44      	ldr	r3, [pc, #272]	; (8007680 <lcd_screen_4_refresh+0x52c>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b08      	cmp	r3, #8
 8007574:	d108      	bne.n	8007588 <lcd_screen_4_refresh+0x434>
					lcd_puts_xy(14, ROW_LINE_3_2, "<", 1, 1);
 8007576:	2301      	movs	r3, #1
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	2301      	movs	r3, #1
 800757c:	4a45      	ldr	r2, [pc, #276]	; (8007694 <lcd_screen_4_refresh+0x540>)
 800757e:	211d      	movs	r1, #29
 8007580:	200e      	movs	r0, #14
 8007582:	f7ff fb15 	bl	8006bb0 <lcd_puts_xy>
 8007586:	e00b      	b.n	80075a0 <lcd_screen_4_refresh+0x44c>
				else if(Screen4_Config_Target == Screen4_Config_date_selected)
 8007588:	4b3d      	ldr	r3, [pc, #244]	; (8007680 <lcd_screen_4_refresh+0x52c>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b09      	cmp	r3, #9
 800758e:	d107      	bne.n	80075a0 <lcd_screen_4_refresh+0x44c>
					lcd_puts_xy(14, ROW_LINE_3_2, ">", 0, 1);
 8007590:	2301      	movs	r3, #1
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	2300      	movs	r3, #0
 8007596:	4a3b      	ldr	r2, [pc, #236]	; (8007684 <lcd_screen_4_refresh+0x530>)
 8007598:	211d      	movs	r1, #29
 800759a:	200e      	movs	r0, #14
 800759c:	f7ff fb08 	bl	8006bb0 <lcd_puts_xy>
				sprintf(date_buf, "%02u/%02u/20%02u",
						screen4_data_config.Device_RTC.date.date,
 80075a0:	4b39      	ldr	r3, [pc, #228]	; (8007688 <lcd_screen_4_refresh+0x534>)
 80075a2:	7b5b      	ldrb	r3, [r3, #13]
				sprintf(date_buf, "%02u/%02u/20%02u",
 80075a4:	461a      	mov	r2, r3
						screen4_data_config.Device_RTC.date.month,
 80075a6:	4b38      	ldr	r3, [pc, #224]	; (8007688 <lcd_screen_4_refresh+0x534>)
 80075a8:	7b9b      	ldrb	r3, [r3, #14]
				sprintf(date_buf, "%02u/%02u/20%02u",
 80075aa:	4619      	mov	r1, r3
						screen4_data_config.Device_RTC.date.year);
 80075ac:	4b36      	ldr	r3, [pc, #216]	; (8007688 <lcd_screen_4_refresh+0x534>)
 80075ae:	7bdb      	ldrb	r3, [r3, #15]
				sprintf(date_buf, "%02u/%02u/20%02u",
 80075b0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	460b      	mov	r3, r1
 80075b8:	4939      	ldr	r1, [pc, #228]	; (80076a0 <lcd_screen_4_refresh+0x54c>)
 80075ba:	f001 fa67 	bl	8008a8c <siprintf>
				lcd_puts_xy(22, ROW_LINE_3_2, date_buf, 1, 1);
 80075be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80075c2:	2301      	movs	r3, #1
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	2301      	movs	r3, #1
 80075c8:	211d      	movs	r1, #29
 80075ca:	2016      	movs	r0, #22
 80075cc:	f7ff faf0 	bl	8006bb0 <lcd_puts_xy>

				lcd_puts_xy(0, ROW_LINE_4, "TM", 1, 1);
 80075d0:	2301      	movs	r3, #1
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	2301      	movs	r3, #1
 80075d6:	4a33      	ldr	r2, [pc, #204]	; (80076a4 <lcd_screen_4_refresh+0x550>)
 80075d8:	2129      	movs	r1, #41	; 0x29
 80075da:	2000      	movs	r0, #0
 80075dc:	f7ff fae8 	bl	8006bb0 <lcd_puts_xy>
				if(Screen4_Config_Target == Screen4_Config_time)
 80075e0:	4b27      	ldr	r3, [pc, #156]	; (8007680 <lcd_screen_4_refresh+0x52c>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b0a      	cmp	r3, #10
 80075e6:	d108      	bne.n	80075fa <lcd_screen_4_refresh+0x4a6>
					lcd_puts_xy(14, ROW_LINE_4, "<", 1, 1);
 80075e8:	2301      	movs	r3, #1
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2301      	movs	r3, #1
 80075ee:	4a29      	ldr	r2, [pc, #164]	; (8007694 <lcd_screen_4_refresh+0x540>)
 80075f0:	2129      	movs	r1, #41	; 0x29
 80075f2:	200e      	movs	r0, #14
 80075f4:	f7ff fadc 	bl	8006bb0 <lcd_puts_xy>
 80075f8:	e00b      	b.n	8007612 <lcd_screen_4_refresh+0x4be>
				else if(Screen4_Config_Target == Screen4_Config_time_selected)
 80075fa:	4b21      	ldr	r3, [pc, #132]	; (8007680 <lcd_screen_4_refresh+0x52c>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b0b      	cmp	r3, #11
 8007600:	d107      	bne.n	8007612 <lcd_screen_4_refresh+0x4be>
					lcd_puts_xy(14, ROW_LINE_4, ">", 0, 1);
 8007602:	2301      	movs	r3, #1
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	2300      	movs	r3, #0
 8007608:	4a1e      	ldr	r2, [pc, #120]	; (8007684 <lcd_screen_4_refresh+0x530>)
 800760a:	2129      	movs	r1, #41	; 0x29
 800760c:	200e      	movs	r0, #14
 800760e:	f7ff facf 	bl	8006bb0 <lcd_puts_xy>
				sprintf(time_buf, "%02u:%02u:%02u",
						screen4_data_config.Device_RTC.time.hours,
 8007612:	4b1d      	ldr	r3, [pc, #116]	; (8007688 <lcd_screen_4_refresh+0x534>)
 8007614:	7d1b      	ldrb	r3, [r3, #20]
				sprintf(time_buf, "%02u:%02u:%02u",
 8007616:	461a      	mov	r2, r3
						screen4_data_config.Device_RTC.time.minutes,
 8007618:	4b1b      	ldr	r3, [pc, #108]	; (8007688 <lcd_screen_4_refresh+0x534>)
 800761a:	7cdb      	ldrb	r3, [r3, #19]
				sprintf(time_buf, "%02u:%02u:%02u",
 800761c:	4619      	mov	r1, r3
						screen4_data_config.Device_RTC.time.seconds);
 800761e:	4b1a      	ldr	r3, [pc, #104]	; (8007688 <lcd_screen_4_refresh+0x534>)
 8007620:	7c9b      	ldrb	r3, [r3, #18]
				sprintf(time_buf, "%02u:%02u:%02u",
 8007622:	f107 0018 	add.w	r0, r7, #24
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	460b      	mov	r3, r1
 800762a:	491f      	ldr	r1, [pc, #124]	; (80076a8 <lcd_screen_4_refresh+0x554>)
 800762c:	f001 fa2e 	bl	8008a8c <siprintf>
				lcd_puts_xy(22, ROW_LINE_4, time_buf, 1, 1);
 8007630:	f107 0218 	add.w	r2, r7, #24
 8007634:	2301      	movs	r3, #1
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	2301      	movs	r3, #1
 800763a:	2129      	movs	r1, #41	; 0x29
 800763c:	2016      	movs	r0, #22
 800763e:	f7ff fab7 	bl	8006bb0 <lcd_puts_xy>
 8007642:	e017      	b.n	8007674 <lcd_screen_4_refresh+0x520>

			}

		} else {

			lcd_puts_xy(24, ROW_LINE_2, "Commit?", 1, 1);
 8007644:	2301      	movs	r3, #1
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	2301      	movs	r3, #1
 800764a:	4a18      	ldr	r2, [pc, #96]	; (80076ac <lcd_screen_4_refresh+0x558>)
 800764c:	210c      	movs	r1, #12
 800764e:	2018      	movs	r0, #24
 8007650:	f7ff faae 	bl	8006bb0 <lcd_puts_xy>
			lcd_puts_xy(12, ROW_LINE_3_1, "[#]Y / [*]N", 1, 1);
 8007654:	2301      	movs	r3, #1
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	2301      	movs	r3, #1
 800765a:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <lcd_screen_4_refresh+0x55c>)
 800765c:	2118      	movs	r1, #24
 800765e:	200c      	movs	r0, #12
 8007660:	f7ff faa6 	bl	8006bb0 <lcd_puts_xy>
			lcd_puts_xy(24, ROW_LINE_4, "[D]Back", 1, 1);
 8007664:	2301      	movs	r3, #1
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	2301      	movs	r3, #1
 800766a:	4a12      	ldr	r2, [pc, #72]	; (80076b4 <lcd_screen_4_refresh+0x560>)
 800766c:	2129      	movs	r1, #41	; 0x29
 800766e:	2018      	movs	r0, #24
 8007670:	f7ff fa9e 	bl	8006bb0 <lcd_puts_xy>

		}
	}

	LCD5110_Refresh();
 8007674:	f7fa f950 	bl	8001918 <LCD5110_Refresh>
}
 8007678:	bf00      	nop
 800767a:	3730      	adds	r7, #48	; 0x30
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20013878 	.word	0x20013878
 8007684:	0800b03c 	.word	0x0800b03c
 8007688:	200138cc 	.word	0x200138cc
 800768c:	0800af70 	.word	0x0800af70
 8007690:	0800b000 	.word	0x0800b000
 8007694:	0800b038 	.word	0x0800b038
 8007698:	0800b008 	.word	0x0800b008
 800769c:	0800b040 	.word	0x0800b040
 80076a0:	0800b014 	.word	0x0800b014
 80076a4:	0800b044 	.word	0x0800b044
 80076a8:	0800afe4 	.word	0x0800afe4
 80076ac:	0800b048 	.word	0x0800b048
 80076b0:	0800afc8 	.word	0x0800afc8
 80076b4:	0800b050 	.word	0x0800b050

080076b8 <lcd_screen_refresh>:

void lcd_screen_refresh(LCD_Screen_t screen) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	71fb      	strb	r3, [r7, #7]
	switch (screen) {
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d817      	bhi.n	80076f8 <lcd_screen_refresh+0x40>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <lcd_screen_refresh+0x18>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	080076e7 	.word	0x080076e7
 80076d8:	080076ed 	.word	0x080076ed
 80076dc:	080076f3 	.word	0x080076f3
		case LCD_Screen_1:
			lcd_screen_1_refresh();
 80076e0:	f7ff fb18 	bl	8006d14 <lcd_screen_1_refresh>
			break;
 80076e4:	e009      	b.n	80076fa <lcd_screen_refresh+0x42>
		case LCD_Screen_2:
			lcd_screen_2_refresh();
 80076e6:	f7ff fbcb 	bl	8006e80 <lcd_screen_2_refresh>
			break;
 80076ea:	e006      	b.n	80076fa <lcd_screen_refresh+0x42>
		case LCD_Screen_3:
			lcd_screen_3_refresh();
 80076ec:	f7ff fc76 	bl	8006fdc <lcd_screen_3_refresh>
			break;
 80076f0:	e003      	b.n	80076fa <lcd_screen_refresh+0x42>
		case LCD_Screen_4:
			lcd_screen_4_refresh();
 80076f2:	f7ff fd2f 	bl	8007154 <lcd_screen_4_refresh>
			break;
 80076f6:	e000      	b.n	80076fa <lcd_screen_refresh+0x42>
		default:
			break;
 80076f8:	bf00      	nop
	}
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop

08007704 <lcd_screen_1_clear>:

void lcd_screen_4_data_update(LCD_Data_Screen4_t data) {
	screen4_data = data;
}

void lcd_screen_1_clear() {
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
	memset(&screen1_data, 0, sizeof(screen1_data));
 8007708:	2210      	movs	r2, #16
 800770a:	2100      	movs	r1, #0
 800770c:	4802      	ldr	r0, [pc, #8]	; (8007718 <lcd_screen_1_clear+0x14>)
 800770e:	f000 fd49 	bl	80081a4 <memset>
}
 8007712:	bf00      	nop
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20013890 	.word	0x20013890

0800771c <lcd_screen_2_clear>:

void lcd_screen_2_clear() {
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
	memset(&screen2_data, 0, sizeof(screen2_data));
 8007720:	2210      	movs	r2, #16
 8007722:	2100      	movs	r1, #0
 8007724:	4802      	ldr	r0, [pc, #8]	; (8007730 <lcd_screen_2_clear+0x14>)
 8007726:	f000 fd3d 	bl	80081a4 <memset>
}
 800772a:	bf00      	nop
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	2001387c 	.word	0x2001387c

08007734 <lcd_screen_3_clear>:

void lcd_screen_3_clear() {
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
	memset(&screen3_data, 0, sizeof(screen3_data));
 8007738:	2208      	movs	r2, #8
 800773a:	2100      	movs	r1, #0
 800773c:	4806      	ldr	r0, [pc, #24]	; (8007758 <lcd_screen_3_clear+0x24>)
 800773e:	f000 fd31 	bl	80081a4 <memset>
	memset(&Screen3_Timer, 0, sizeof(Screen3_Timer));
 8007742:	2208      	movs	r2, #8
 8007744:	2100      	movs	r1, #0
 8007746:	4805      	ldr	r0, [pc, #20]	; (800775c <lcd_screen_3_clear+0x28>)
 8007748:	f000 fd2c 	bl	80081a4 <memset>
	screen3_mode = S3_NORMAL_DISPLAY;
 800774c:	4b04      	ldr	r3, [pc, #16]	; (8007760 <lcd_screen_3_clear+0x2c>)
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
}
 8007752:	bf00      	nop
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	200138b8 	.word	0x200138b8
 800775c:	200138c0 	.word	0x200138c0
 8007760:	2001388c 	.word	0x2001388c

08007764 <lcd_screen_4_clear>:

void lcd_screen_4_clear() {
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
	memset(&screen4_data, 0, sizeof(screen4_data));
 8007768:	2218      	movs	r2, #24
 800776a:	2100      	movs	r1, #0
 800776c:	4805      	ldr	r0, [pc, #20]	; (8007784 <lcd_screen_4_clear+0x20>)
 800776e:	f000 fd19 	bl	80081a4 <memset>
	screen4_data.User_Interval = Sample_Interval_60;
 8007772:	4b04      	ldr	r3, [pc, #16]	; (8007784 <lcd_screen_4_clear+0x20>)
 8007774:	223c      	movs	r2, #60	; 0x3c
 8007776:	731a      	strb	r2, [r3, #12]
	screen4_mode = S4_NORMAL_DISPLAY;
 8007778:	4b03      	ldr	r3, [pc, #12]	; (8007788 <lcd_screen_4_clear+0x24>)
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
}
 800777e:	bf00      	nop
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	200138a0 	.word	0x200138a0
 8007788:	200138c8 	.word	0x200138c8

0800778c <lcd_screen_3_timer_count_up>:

void lcd_screen_3_timer_count_up() {
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
	Screen3_Timer.seconds++;
 8007790:	4b1c      	ldr	r3, [pc, #112]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 8007792:	799b      	ldrb	r3, [r3, #6]
 8007794:	3301      	adds	r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	4b1a      	ldr	r3, [pc, #104]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 800779a:	719a      	strb	r2, [r3, #6]
	if(Screen3_Timer.seconds > 59) {
 800779c:	4b19      	ldr	r3, [pc, #100]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 800779e:	799b      	ldrb	r3, [r3, #6]
 80077a0:	2b3b      	cmp	r3, #59	; 0x3b
 80077a2:	d92a      	bls.n	80077fa <lcd_screen_3_timer_count_up+0x6e>
		Screen3_Timer.seconds -= 60;
 80077a4:	4b17      	ldr	r3, [pc, #92]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077a6:	799b      	ldrb	r3, [r3, #6]
 80077a8:	3b3c      	subs	r3, #60	; 0x3c
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	4b15      	ldr	r3, [pc, #84]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077ae:	719a      	strb	r2, [r3, #6]
		Screen3_Timer.minutes++;
 80077b0:	4b14      	ldr	r3, [pc, #80]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077b2:	795b      	ldrb	r3, [r3, #5]
 80077b4:	3301      	adds	r3, #1
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	4b12      	ldr	r3, [pc, #72]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077ba:	715a      	strb	r2, [r3, #5]
		if(Screen3_Timer.minutes > 59) {
 80077bc:	4b11      	ldr	r3, [pc, #68]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077be:	795b      	ldrb	r3, [r3, #5]
 80077c0:	2b3b      	cmp	r3, #59	; 0x3b
 80077c2:	d91a      	bls.n	80077fa <lcd_screen_3_timer_count_up+0x6e>
			Screen3_Timer.minutes -= 60;
 80077c4:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077c6:	795b      	ldrb	r3, [r3, #5]
 80077c8:	3b3c      	subs	r3, #60	; 0x3c
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077ce:	715a      	strb	r2, [r3, #5]
			Screen3_Timer.hours++;
 80077d0:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077d2:	791b      	ldrb	r3, [r3, #4]
 80077d4:	3301      	adds	r3, #1
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077da:	711a      	strb	r2, [r3, #4]
			if(Screen3_Timer.hours > 23) {
 80077dc:	4b09      	ldr	r3, [pc, #36]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077de:	791b      	ldrb	r3, [r3, #4]
 80077e0:	2b17      	cmp	r3, #23
 80077e2:	d90a      	bls.n	80077fa <lcd_screen_3_timer_count_up+0x6e>
				Screen3_Timer.hours -= 24;
 80077e4:	4b07      	ldr	r3, [pc, #28]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077e6:	791b      	ldrb	r3, [r3, #4]
 80077e8:	3b18      	subs	r3, #24
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	4b05      	ldr	r3, [pc, #20]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077ee:	711a      	strb	r2, [r3, #4]
				Screen3_Timer.days++;
 80077f0:	4b04      	ldr	r3, [pc, #16]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	4a03      	ldr	r2, [pc, #12]	; (8007804 <lcd_screen_3_timer_count_up+0x78>)
 80077f8:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 80077fa:	bf00      	nop
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	200138c0 	.word	0x200138c0

08007808 <lcd_screen_3_switch_mode>:

void lcd_screen_3_switch_mode() {
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
	screen3_mode ^= 1;
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <lcd_screen_3_switch_mode+0x1c>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f083 0301 	eor.w	r3, r3, #1
 8007814:	b2da      	uxtb	r2, r3
 8007816:	4b03      	ldr	r3, [pc, #12]	; (8007824 <lcd_screen_3_switch_mode+0x1c>)
 8007818:	701a      	strb	r2, [r3, #0]
}
 800781a:	bf00      	nop
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	2001388c 	.word	0x2001388c

08007828 <lcd_screen_4_rtc_update>:

LCD_Screen3_Mode lcd_screen_3_mode() {
	return screen3_mode;
}

void lcd_screen_4_rtc_update(Device_RTC_t datetime) {
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	1d3b      	adds	r3, r7, #4
 8007830:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	screen4_data.Device_RTC = datetime;
 8007834:	4b07      	ldr	r3, [pc, #28]	; (8007854 <lcd_screen_4_rtc_update+0x2c>)
 8007836:	f103 020d 	add.w	r2, r3, #13
 800783a:	1d3b      	adds	r3, r7, #4
 800783c:	cb03      	ldmia	r3!, {r0, r1}
 800783e:	6010      	str	r0, [r2, #0]
 8007840:	6051      	str	r1, [r2, #4]
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	8113      	strh	r3, [r2, #8]
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	200138a0 	.word	0x200138a0

08007858 <lcd_screen_4_switch_mode>:

void lcd_screen_4_switch_mode() {
 8007858:	b4b0      	push	{r4, r5, r7}
 800785a:	af00      	add	r7, sp, #0
	if(++screen4_mode == S4_No_of_Mode)
 800785c:	4b0f      	ldr	r3, [pc, #60]	; (800789c <lcd_screen_4_switch_mode+0x44>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	3301      	adds	r3, #1
 8007862:	b2da      	uxtb	r2, r3
 8007864:	4b0d      	ldr	r3, [pc, #52]	; (800789c <lcd_screen_4_switch_mode+0x44>)
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	4b0c      	ldr	r3, [pc, #48]	; (800789c <lcd_screen_4_switch_mode+0x44>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b03      	cmp	r3, #3
 800786e:	d102      	bne.n	8007876 <lcd_screen_4_switch_mode+0x1e>
		screen4_mode = 0;
 8007870:	4b0a      	ldr	r3, [pc, #40]	; (800789c <lcd_screen_4_switch_mode+0x44>)
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
	if(screen4_mode == S4_CONFIG_DISPLAY) screen4_data_config = screen4_data;
 8007876:	4b09      	ldr	r3, [pc, #36]	; (800789c <lcd_screen_4_switch_mode+0x44>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d109      	bne.n	8007892 <lcd_screen_4_switch_mode+0x3a>
 800787e:	4a08      	ldr	r2, [pc, #32]	; (80078a0 <lcd_screen_4_switch_mode+0x48>)
 8007880:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <lcd_screen_4_switch_mode+0x4c>)
 8007882:	4614      	mov	r4, r2
 8007884:	461d      	mov	r5, r3
 8007886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800788a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800788e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8007892:	bf00      	nop
 8007894:	46bd      	mov	sp, r7
 8007896:	bcb0      	pop	{r4, r5, r7}
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	200138c8 	.word	0x200138c8
 80078a0:	200138cc 	.word	0x200138cc
 80078a4:	200138a0 	.word	0x200138a0

080078a8 <lcd_screen_4_mode>:

LCD_Screen4_Mode lcd_screen_4_mode() {
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
	return screen4_mode;
 80078ac:	4b03      	ldr	r3, [pc, #12]	; (80078bc <lcd_screen_4_mode+0x14>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	200138c8 	.word	0x200138c8

080078c0 <lcd_screen_4_next_config_target>:

void lcd_screen_4_next_config_target() {
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
	if(!(Screen4_Config_Target % 2)) {
 80078c4:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <lcd_screen_4_next_config_target+0x38>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10c      	bne.n	80078ec <lcd_screen_4_next_config_target+0x2c>
		Screen4_Config_Target += 2;
 80078d2:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <lcd_screen_4_next_config_target+0x38>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	3302      	adds	r3, #2
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <lcd_screen_4_next_config_target+0x38>)
 80078dc:	701a      	strb	r2, [r3, #0]
		if(Screen4_Config_Target == Screen4_No_of_Config_items)
 80078de:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <lcd_screen_4_next_config_target+0x38>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b0c      	cmp	r3, #12
 80078e4:	d102      	bne.n	80078ec <lcd_screen_4_next_config_target+0x2c>
			Screen4_Config_Target = 0;
 80078e6:	4b04      	ldr	r3, [pc, #16]	; (80078f8 <lcd_screen_4_next_config_target+0x38>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
	}
}
 80078ec:	bf00      	nop
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	20013878 	.word	0x20013878

080078fc <lcd_screen_4_config_target>:

void lcd_screen_4_config_target(Config_Select_t select) {
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	71fb      	strb	r3, [r7, #7]
	if(select == CONFIG_SELECT) {
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d10d      	bne.n	8007928 <lcd_screen_4_config_target+0x2c>
		if(!(Screen4_Config_Target % 2))
 800790c:	4b10      	ldr	r3, [pc, #64]	; (8007950 <lcd_screen_4_config_target+0x54>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d113      	bne.n	8007942 <lcd_screen_4_config_target+0x46>
			Screen4_Config_Target++;
 800791a:	4b0d      	ldr	r3, [pc, #52]	; (8007950 <lcd_screen_4_config_target+0x54>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	b2da      	uxtb	r2, r3
 8007922:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <lcd_screen_4_config_target+0x54>)
 8007924:	701a      	strb	r2, [r3, #0]
	} else if(Screen4_Config_Target % 2)
		Screen4_Config_Target--;
}
 8007926:	e00c      	b.n	8007942 <lcd_screen_4_config_target+0x46>
	} else if(Screen4_Config_Target % 2)
 8007928:	4b09      	ldr	r3, [pc, #36]	; (8007950 <lcd_screen_4_config_target+0x54>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d005      	beq.n	8007942 <lcd_screen_4_config_target+0x46>
		Screen4_Config_Target--;
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <lcd_screen_4_config_target+0x54>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	3b01      	subs	r3, #1
 800793c:	b2da      	uxtb	r2, r3
 800793e:	4b04      	ldr	r3, [pc, #16]	; (8007950 <lcd_screen_4_config_target+0x54>)
 8007940:	701a      	strb	r2, [r3, #0]
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20013878 	.word	0x20013878

08007954 <lcd_screen_4_commit_config>:
			screen4_data.User_Interval = Sample_Interval_5;
			break;
	}
}

LCD_Data_Screen4_t lcd_screen_4_commit_config(Config_Commit_t commit) {
 8007954:	b5b0      	push	{r4, r5, r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
	if(commit == CONFIG_COMMIT) screen4_data = screen4_data_config;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d109      	bne.n	800797a <lcd_screen_4_commit_config+0x26>
 8007966:	4a0d      	ldr	r2, [pc, #52]	; (800799c <lcd_screen_4_commit_config+0x48>)
 8007968:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <lcd_screen_4_commit_config+0x4c>)
 800796a:	4614      	mov	r4, r2
 800796c:	461d      	mov	r5, r3
 800796e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007972:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007976:	e884 0003 	stmia.w	r4, {r0, r1}
	lcd_screen_4_switch_mode();
 800797a:	f7ff ff6d 	bl	8007858 <lcd_screen_4_switch_mode>
	return screen4_data;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a06      	ldr	r2, [pc, #24]	; (800799c <lcd_screen_4_commit_config+0x48>)
 8007982:	461c      	mov	r4, r3
 8007984:	4615      	mov	r5, r2
 8007986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800798a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800798e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bdb0      	pop	{r4, r5, r7, pc}
 800799a:	bf00      	nop
 800799c:	200138a0 	.word	0x200138a0
 80079a0:	200138cc 	.word	0x200138cc

080079a4 <lcd_is_busy>:

bool lcd_is_busy() {
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
	return screen3_mode || screen4_mode;
 80079a8:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <lcd_is_busy+0x2c>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <lcd_is_busy+0x14>
 80079b0:	4b08      	ldr	r3, [pc, #32]	; (80079d4 <lcd_is_busy+0x30>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <lcd_is_busy+0x18>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e000      	b.n	80079be <lcd_is_busy+0x1a>
 80079bc:	2300      	movs	r3, #0
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	b2db      	uxtb	r3, r3
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	2001388c 	.word	0x2001388c
 80079d4:	200138c8 	.word	0x200138c8

080079d8 <main>:
	(*(volatile uint32_t*) 0XE0001000) |= (1 << 0);
	SEGGER_UART_init(500000);
	SEGGER_SYSVIEW_Conf();
}

int main(void) {
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af02      	add	r7, sp, #8
//	SEGGER_setup();

	LED_Init();
 80079de:	f000 fa61 	bl	8007ea4 <LED_Init>

	xTaskCreate(lcd_handler, "LCD5110", 2048, NULL, 1, NULL);
 80079e2:	2300      	movs	r3, #0
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	2301      	movs	r3, #1
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	2300      	movs	r3, #0
 80079ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079f0:	4925      	ldr	r1, [pc, #148]	; (8007a88 <main+0xb0>)
 80079f2:	4826      	ldr	r0, [pc, #152]	; (8007a8c <main+0xb4>)
 80079f4:	f7fa ff1a 	bl	800282c <xTaskCreate>
	xTaskCreate(ade_handler, "ADE7753", 512, NULL, 1, NULL);
 80079f8:	2300      	movs	r3, #0
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	2301      	movs	r3, #1
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2300      	movs	r3, #0
 8007a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a06:	4922      	ldr	r1, [pc, #136]	; (8007a90 <main+0xb8>)
 8007a08:	4822      	ldr	r0, [pc, #136]	; (8007a94 <main+0xbc>)
 8007a0a:	f7fa ff0f 	bl	800282c <xTaskCreate>
	xTaskCreate(keypad_handler, "Keypad", 256, NULL, 1, NULL);
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9301      	str	r3, [sp, #4]
 8007a12:	2301      	movs	r3, #1
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	2300      	movs	r3, #0
 8007a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a1c:	491e      	ldr	r1, [pc, #120]	; (8007a98 <main+0xc0>)
 8007a1e:	481f      	ldr	r0, [pc, #124]	; (8007a9c <main+0xc4>)
 8007a20:	f7fa ff04 	bl	800282c <xTaskCreate>
	xTaskCreate(rtc_handler, "DS1307", 512, NULL, 1, NULL);
 8007a24:	2300      	movs	r3, #0
 8007a26:	9301      	str	r3, [sp, #4]
 8007a28:	2301      	movs	r3, #1
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a32:	491b      	ldr	r1, [pc, #108]	; (8007aa0 <main+0xc8>)
 8007a34:	481b      	ldr	r0, [pc, #108]	; (8007aa4 <main+0xcc>)
 8007a36:	f7fa fef9 	bl	800282c <xTaskCreate>
	xTaskCreate(usart_handler, "USART", 512, NULL, 1, NULL);
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	2301      	movs	r3, #1
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	2300      	movs	r3, #0
 8007a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a48:	4917      	ldr	r1, [pc, #92]	; (8007aa8 <main+0xd0>)
 8007a4a:	4818      	ldr	r0, [pc, #96]	; (8007aac <main+0xd4>)
 8007a4c:	f7fa feee 	bl	800282c <xTaskCreate>

	keypad_queue_handle = xQueueCreate(5, sizeof(KEYPAD_Button_t));
 8007a50:	2200      	movs	r2, #0
 8007a52:	2101      	movs	r1, #1
 8007a54:	2005      	movs	r0, #5
 8007a56:	f7fa f9f7 	bl	8001e48 <xQueueGenericCreate>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4a14      	ldr	r2, [pc, #80]	; (8007ab0 <main+0xd8>)
 8007a5e:	6013      	str	r3, [r2, #0]
	rtc_queue_handle = xQueueCreate(1, sizeof(Device_RTC_t));
 8007a60:	2200      	movs	r2, #0
 8007a62:	210a      	movs	r1, #10
 8007a64:	2001      	movs	r0, #1
 8007a66:	f7fa f9ef 	bl	8001e48 <xQueueGenericCreate>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4a11      	ldr	r2, [pc, #68]	; (8007ab4 <main+0xdc>)
 8007a6e:	6013      	str	r3, [r2, #0]
	ade_write_queue_handle = xQueueCreate(5, sizeof(ADE_Write_Data_t));
 8007a70:	2200      	movs	r2, #0
 8007a72:	210c      	movs	r1, #12
 8007a74:	2005      	movs	r0, #5
 8007a76:	f7fa f9e7 	bl	8001e48 <xQueueGenericCreate>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	4a0e      	ldr	r2, [pc, #56]	; (8007ab8 <main+0xe0>)
 8007a7e:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8007a80:	f7fb f870 	bl	8002b64 <vTaskStartScheduler>

	while(1);
 8007a84:	e7fe      	b.n	8007a84 <main+0xac>
 8007a86:	bf00      	nop
 8007a88:	0800b058 	.word	0x0800b058
 8007a8c:	08007abd 	.word	0x08007abd
 8007a90:	0800b060 	.word	0x0800b060
 8007a94:	08007c89 	.word	0x08007c89
 8007a98:	0800b068 	.word	0x0800b068
 8007a9c:	08007ce1 	.word	0x08007ce1
 8007aa0:	0800b070 	.word	0x0800b070
 8007aa4:	08007d99 	.word	0x08007d99
 8007aa8:	0800b078 	.word	0x0800b078
 8007aac:	08007e81 	.word	0x08007e81
 8007ab0:	200138e4 	.word	0x200138e4
 8007ab4:	200138ec 	.word	0x200138ec
 8007ab8:	200138e8 	.word	0x200138e8

08007abc <lcd_handler>:
	return 0;
}

void lcd_handler(void* parameters) {
 8007abc:	b5b0      	push	{r4, r5, r7, lr}
 8007abe:	b08c      	sub	sp, #48	; 0x30
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	61f8      	str	r0, [r7, #28]
	LCD5110_Init(0x37);
 8007ac4:	2037      	movs	r0, #55	; 0x37
 8007ac6:	f7f9 fdd1 	bl	800166c <LCD5110_Init>

	memset(&screen1_data, 0, sizeof(screen1_data));
 8007aca:	2210      	movs	r2, #16
 8007acc:	2100      	movs	r1, #0
 8007ace:	4868      	ldr	r0, [pc, #416]	; (8007c70 <lcd_handler+0x1b4>)
 8007ad0:	f000 fb68 	bl	80081a4 <memset>
	memset(&screen2_data, 0, sizeof(screen2_data));
 8007ad4:	2210      	movs	r2, #16
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4866      	ldr	r0, [pc, #408]	; (8007c74 <lcd_handler+0x1b8>)
 8007ada:	f000 fb63 	bl	80081a4 <memset>
	memset(&screen3_data, 0, sizeof(screen3_data));
 8007ade:	2208      	movs	r2, #8
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4865      	ldr	r0, [pc, #404]	; (8007c78 <lcd_handler+0x1bc>)
 8007ae4:	f000 fb5e 	bl	80081a4 <memset>
	memset(&screen4_data, 0, sizeof(screen4_data));
 8007ae8:	2218      	movs	r2, #24
 8007aea:	2100      	movs	r1, #0
 8007aec:	4863      	ldr	r0, [pc, #396]	; (8007c7c <lcd_handler+0x1c0>)
 8007aee:	f000 fb59 	bl	80081a4 <memset>

	lcd_screen_1_clear();
 8007af2:	f7ff fe07 	bl	8007704 <lcd_screen_1_clear>
	lcd_screen_2_clear();
 8007af6:	f7ff fe11 	bl	800771c <lcd_screen_2_clear>
	lcd_screen_3_clear();
 8007afa:	f7ff fe1b 	bl	8007734 <lcd_screen_3_clear>
	lcd_screen_4_clear();
 8007afe:	f7ff fe31 	bl	8007764 <lcd_screen_4_clear>

	KEYPAD_Button_t keypad;
	LCD_Screen_t screen = LCD_Screen_4;
 8007b02:	2303      	movs	r3, #3
 8007b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	ADE_Write_Data_t ade_write_data;

	while(1) {
		if(keypad_queue_handle != NULL) {
 8007b08:	4b5d      	ldr	r3, [pc, #372]	; (8007c80 <lcd_handler+0x1c4>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 809e 	beq.w	8007c4e <lcd_handler+0x192>
			if(xQueueReceive(keypad_queue_handle, &keypad, (TickType_t) 10) == pdPASS) {
 8007b12:	4b5b      	ldr	r3, [pc, #364]	; (8007c80 <lcd_handler+0x1c4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8007b1a:	220a      	movs	r2, #10
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fa fbff 	bl	8002320 <xQueueReceive>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	f040 8092 	bne.w	8007c4e <lcd_handler+0x192>
				if(lcd_is_busy()) {
 8007b2a:	f7ff ff3b 	bl	80079a4 <lcd_is_busy>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d05c      	beq.n	8007bee <lcd_handler+0x132>
					if(screen == LCD_Screen_3) {
 8007b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d10b      	bne.n	8007b54 <lcd_handler+0x98>
						if(keypad == KEYPAD_Button_HASH)
 8007b3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b40:	2b0b      	cmp	r3, #11
 8007b42:	d101      	bne.n	8007b48 <lcd_handler+0x8c>
							lcd_screen_3_clear();
 8007b44:	f7ff fdf6 	bl	8007734 <lcd_screen_3_clear>
						if(keypad == KEYPAD_Button_STAR)
 8007b48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b4c:	2b0a      	cmp	r3, #10
 8007b4e:	d101      	bne.n	8007b54 <lcd_handler+0x98>
							lcd_screen_3_switch_mode();
 8007b50:	f7ff fe5a 	bl	8007808 <lcd_screen_3_switch_mode>
					}
					if(screen == LCD_Screen_4) {
 8007b54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d178      	bne.n	8007c4e <lcd_handler+0x192>
						if(lcd_screen_4_mode() == S4_CONFIG_DISPLAY) {
 8007b5c:	f7ff fea4 	bl	80078a8 <lcd_screen_4_mode>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d11f      	bne.n	8007ba6 <lcd_handler+0xea>
							if(keypad == KEYPAD_Button_HOLD_D)
 8007b66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b6a:	2b8f      	cmp	r3, #143	; 0x8f
 8007b6c:	d101      	bne.n	8007b72 <lcd_handler+0xb6>
								lcd_screen_4_switch_mode();
 8007b6e:	f7ff fe73 	bl	8007858 <lcd_screen_4_switch_mode>
							if(keypad == KEYPAD_Button_D && lcd_screen_4_mode())
 8007b72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b76:	2b0f      	cmp	r3, #15
 8007b78:	d106      	bne.n	8007b88 <lcd_handler+0xcc>
 8007b7a:	f7ff fe95 	bl	80078a8 <lcd_screen_4_mode>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <lcd_handler+0xcc>
								lcd_screen_4_next_config_target();
 8007b84:	f7ff fe9c 	bl	80078c0 <lcd_screen_4_next_config_target>
							if(keypad == KEYPAD_Button_HASH)
 8007b88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b8c:	2b0b      	cmp	r3, #11
 8007b8e:	d102      	bne.n	8007b96 <lcd_handler+0xda>
								lcd_screen_4_config_target(CONFIG_SELECT);
 8007b90:	2001      	movs	r0, #1
 8007b92:	f7ff feb3 	bl	80078fc <lcd_screen_4_config_target>
							if(keypad == KEYPAD_Button_STAR)
 8007b96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007b9a:	2b0a      	cmp	r3, #10
 8007b9c:	d157      	bne.n	8007c4e <lcd_handler+0x192>
								lcd_screen_4_config_target(CONFIG_DESELECT);
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	f7ff feac 	bl	80078fc <lcd_screen_4_config_target>
 8007ba4:	e053      	b.n	8007c4e <lcd_handler+0x192>
						} else {
							if(keypad == KEYPAD_Button_HASH) {
 8007ba6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007baa:	2b0b      	cmp	r3, #11
 8007bac:	d10d      	bne.n	8007bca <lcd_handler+0x10e>
								screen4_data = lcd_screen_4_commit_config(CONFIG_COMMIT);
 8007bae:	4c33      	ldr	r4, [pc, #204]	; (8007c7c <lcd_handler+0x1c0>)
 8007bb0:	463b      	mov	r3, r7
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff fecd 	bl	8007954 <lcd_screen_4_commit_config>
 8007bba:	4625      	mov	r5, r4
 8007bbc:	463c      	mov	r4, r7
 8007bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007bc6:	e885 0003 	stmia.w	r5, {r0, r1}
//								xQueueSend(ade_write_queue_handle, (void) &ade_write_data, (TickType_t) 0);
//								ade_write_data.address = SAGLVL;
//								ade_write_data.data = (uint32_t) screen4_data.User_SAG;
//								xQueueSend(ade_write_queue_handle, (void) &ade_write_data, (TickType_t) 0);
							}
							if(keypad == KEYPAD_Button_STAR)
 8007bca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007bce:	2b0a      	cmp	r3, #10
 8007bd0:	d104      	bne.n	8007bdc <lcd_handler+0x120>
								lcd_screen_4_commit_config(CONFIG_CANCEL);
 8007bd2:	463b      	mov	r3, r7
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff febc 	bl	8007954 <lcd_screen_4_commit_config>
							if(keypad == KEYPAD_Button_D) {
 8007bdc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007be0:	2b0f      	cmp	r3, #15
 8007be2:	d134      	bne.n	8007c4e <lcd_handler+0x192>
								lcd_screen_4_switch_mode();
 8007be4:	f7ff fe38 	bl	8007858 <lcd_screen_4_switch_mode>
								lcd_screen_4_switch_mode();
 8007be8:	f7ff fe36 	bl	8007858 <lcd_screen_4_switch_mode>
 8007bec:	e02f      	b.n	8007c4e <lcd_handler+0x192>
							}
						}
					}

				} else {
					if(keypad == KEYPAD_Button_A)
 8007bee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007bf2:	2b0c      	cmp	r3, #12
 8007bf4:	d102      	bne.n	8007bfc <lcd_handler+0x140>
						screen = LCD_Screen_1;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					if(keypad == KEYPAD_Button_B)
 8007bfc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c00:	2b0d      	cmp	r3, #13
 8007c02:	d102      	bne.n	8007c0a <lcd_handler+0x14e>
						screen = LCD_Screen_2;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					if(keypad == KEYPAD_Button_C)
 8007c0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c0e:	2b0e      	cmp	r3, #14
 8007c10:	d102      	bne.n	8007c18 <lcd_handler+0x15c>
						screen = LCD_Screen_3;
 8007c12:	2302      	movs	r3, #2
 8007c14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					if(keypad == KEYPAD_Button_D)
 8007c18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c1c:	2b0f      	cmp	r3, #15
 8007c1e:	d102      	bne.n	8007c26 <lcd_handler+0x16a>
						screen = LCD_Screen_4;
 8007c20:	2303      	movs	r3, #3
 8007c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					if(keypad == KEYPAD_Button_HOLD_C && screen == LCD_Screen_3)
 8007c26:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c2a:	2b8e      	cmp	r3, #142	; 0x8e
 8007c2c:	d105      	bne.n	8007c3a <lcd_handler+0x17e>
 8007c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d101      	bne.n	8007c3a <lcd_handler+0x17e>
						lcd_screen_3_switch_mode();
 8007c36:	f7ff fde7 	bl	8007808 <lcd_screen_3_switch_mode>
					if(keypad == KEYPAD_Button_HOLD_D && screen == LCD_Screen_4)
 8007c3a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c3e:	2b8f      	cmp	r3, #143	; 0x8f
 8007c40:	d105      	bne.n	8007c4e <lcd_handler+0x192>
 8007c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d101      	bne.n	8007c4e <lcd_handler+0x192>
						lcd_screen_4_switch_mode();
 8007c4a:	f7ff fe05 	bl	8007858 <lcd_screen_4_switch_mode>
				}
			}
		}

		lcd_screen_refresh(screen);
 8007c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fd30 	bl	80076b8 <lcd_screen_refresh>
		vTaskDelay(100);
 8007c58:	2064      	movs	r0, #100	; 0x64
 8007c5a:	f7fa ff4b 	bl	8002af4 <vTaskDelay>
		taskYIELD();
 8007c5e:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <lcd_handler+0x1c8>)
 8007c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	f3bf 8f6f 	isb	sy
		if(keypad_queue_handle != NULL) {
 8007c6e:	e74b      	b.n	8007b08 <lcd_handler+0x4c>
 8007c70:	20013890 	.word	0x20013890
 8007c74:	2001387c 	.word	0x2001387c
 8007c78:	200138b8 	.word	0x200138b8
 8007c7c:	200138a0 	.word	0x200138a0
 8007c80:	200138e4 	.word	0x200138e4
 8007c84:	e000ed04 	.word	0xe000ed04

08007c88 <ade_handler>:
	}
}

void ade_handler(void* parameters) {
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	ADE_Write_Data_t write_data;

	ADE_Init();
 8007c90:	f7f8 ffea 	bl	8000c68 <ADE_Init>

	while(1) {
		if(ade_write_queue_handle != NULL)
 8007c94:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <ade_handler+0x50>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d010      	beq.n	8007cbe <ade_handler+0x36>
			if(xQueueReceive(ade_write_queue_handle, &write_data, (TickType_t) 10) == pdPASS)
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <ade_handler+0x50>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f107 010c 	add.w	r1, r7, #12
 8007ca4:	220a      	movs	r2, #10
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fa fb3a 	bl	8002320 <xQueueReceive>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d105      	bne.n	8007cbe <ade_handler+0x36>
				ADE_WriteData(write_data.address, write_data.data, write_data.bytes);
 8007cb2:	7b3b      	ldrb	r3, [r7, #12]
 8007cb4:	6939      	ldr	r1, [r7, #16]
 8007cb6:	7d3a      	ldrb	r2, [r7, #20]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7f9 f835 	bl	8000d28 <ADE_WriteData>

		vTaskDelay(100);
 8007cbe:	2064      	movs	r0, #100	; 0x64
 8007cc0:	f7fa ff18 	bl	8002af4 <vTaskDelay>
		taskYIELD();
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <ade_handler+0x54>)
 8007cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	f3bf 8f6f 	isb	sy
		if(ade_write_queue_handle != NULL)
 8007cd4:	e7de      	b.n	8007c94 <ade_handler+0xc>
 8007cd6:	bf00      	nop
 8007cd8:	200138e8 	.word	0x200138e8
 8007cdc:	e000ed04 	.word	0xe000ed04

08007ce0 <keypad_handler>:
	}
}

void keypad_handler(void* parameters) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	KEYPAD_Init(KEYPAD_Type_Large);
 8007ce8:	2000      	movs	r0, #0
 8007cea:	f7f9 fadf 	bl	80012ac <KEYPAD_Init>
	KEYPAD_Button_t Keypad_Hold_Button, Keypad_Button, Keypad_prev = KEYPAD_NOPRESSED;
 8007cee:	23ff      	movs	r3, #255	; 0xff
 8007cf0:	727b      	strb	r3, [r7, #9]
	int hold_timeout = 600;
 8007cf2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007cf6:	60fb      	str	r3, [r7, #12]

	while(1) {
		KEYPAD_Update();
 8007cf8:	f7f9 fc3e 	bl	8001578 <KEYPAD_Update>
		Keypad_Button = KEYPAD_Read();
 8007cfc:	f7f9 fb48 	bl	8001390 <KEYPAD_Read>
 8007d00:	4603      	mov	r3, r0
 8007d02:	72fb      	strb	r3, [r7, #11]

		if(Keypad_Button != KEYPAD_NOPRESSED && Keypad_Button == Keypad_prev) {
 8007d04:	7afb      	ldrb	r3, [r7, #11]
 8007d06:	2bff      	cmp	r3, #255	; 0xff
 8007d08:	d01f      	beq.n	8007d4a <keypad_handler+0x6a>
 8007d0a:	7a7b      	ldrb	r3, [r7, #9]
 8007d0c:	7afa      	ldrb	r2, [r7, #11]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d11b      	bne.n	8007d4a <keypad_handler+0x6a>
			if(hold_timeout > 0) hold_timeout--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dd03      	ble.n	8007d20 <keypad_handler+0x40>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	e027      	b.n	8007d70 <keypad_handler+0x90>
			else if (!hold_timeout) {
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d124      	bne.n	8007d70 <keypad_handler+0x90>
				hold_timeout--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]
				Keypad_Hold_Button = KEYPAD_Hold_Button(Keypad_Button);
 8007d2c:	7afb      	ldrb	r3, [r7, #11]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7f9 fc12 	bl	8001558 <KEYPAD_Hold_Button>
 8007d34:	4603      	mov	r3, r0
 8007d36:	72bb      	strb	r3, [r7, #10]
				xQueueSend(keypad_queue_handle, (void*) &Keypad_Hold_Button, (TickType_t) 0);
 8007d38:	4b15      	ldr	r3, [pc, #84]	; (8007d90 <keypad_handler+0xb0>)
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	f107 010a 	add.w	r1, r7, #10
 8007d40:	2300      	movs	r3, #0
 8007d42:	2200      	movs	r2, #0
 8007d44:	f7fa f908 	bl	8001f58 <xQueueGenericSend>
			if(hold_timeout > 0) hold_timeout--;
 8007d48:	e012      	b.n	8007d70 <keypad_handler+0x90>
			}
		} else if(Keypad_prev != KEYPAD_NOPRESSED && hold_timeout > 0)
 8007d4a:	7a7b      	ldrb	r3, [r7, #9]
 8007d4c:	2bff      	cmp	r3, #255	; 0xff
 8007d4e:	d00b      	beq.n	8007d68 <keypad_handler+0x88>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dd08      	ble.n	8007d68 <keypad_handler+0x88>
			xQueueSend(keypad_queue_handle, (void*) &Keypad_prev, (TickType_t) 0);
 8007d56:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <keypad_handler+0xb0>)
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	f107 0109 	add.w	r1, r7, #9
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2200      	movs	r2, #0
 8007d62:	f7fa f8f9 	bl	8001f58 <xQueueGenericSend>
 8007d66:	e004      	b.n	8007d72 <keypad_handler+0x92>
		else hold_timeout = 600;
 8007d68:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	e000      	b.n	8007d72 <keypad_handler+0x92>
			if(hold_timeout > 0) hold_timeout--;
 8007d70:	bf00      	nop

		Keypad_prev = Keypad_Button;
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	727b      	strb	r3, [r7, #9]
		vTaskDelay(5);
 8007d76:	2005      	movs	r0, #5
 8007d78:	f7fa febc 	bl	8002af4 <vTaskDelay>
		taskYIELD();
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <keypad_handler+0xb4>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	f3bf 8f6f 	isb	sy
		KEYPAD_Update();
 8007d8c:	e7b4      	b.n	8007cf8 <keypad_handler+0x18>
 8007d8e:	bf00      	nop
 8007d90:	200138e4 	.word	0x200138e4
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <rtc_handler>:
	}
}

void rtc_handler(void* parameters) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
	ds1307_init();
 8007da0:	f7f9 f86c 	bl	8000e7c <ds1307_init>
	RTC_time_t rtc_time_prev;
	Device_RTC_t screen4_rtc;

	while(1) {

		if(rtc_queue_handle != NULL) {
 8007da4:	4b34      	ldr	r3, [pc, #208]	; (8007e78 <rtc_handler+0xe0>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d015      	beq.n	8007dd8 <rtc_handler+0x40>
			if(xQueueReceive(rtc_queue_handle, &screen4_rtc, (TickType_t) 10) == pdPASS) {
 8007dac:	4b32      	ldr	r3, [pc, #200]	; (8007e78 <rtc_handler+0xe0>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f107 0108 	add.w	r1, r7, #8
 8007db4:	220a      	movs	r2, #10
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fa fab2 	bl	8002320 <xQueueReceive>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d10a      	bne.n	8007dd8 <rtc_handler+0x40>
				ds1307_set_current_time(&screen4_rtc.time);
 8007dc2:	f107 0308 	add.w	r3, r7, #8
 8007dc6:	3305      	adds	r3, #5
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7f9 f865 	bl	8000e98 <ds1307_set_current_time>
				ds1307_set_current_date(&screen4_rtc.date);
 8007dce:	f107 0308 	add.w	r3, r7, #8
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7f9 f8a9 	bl	8000f2a <ds1307_set_current_date>
			}
		}

		ds1307_get_current_time(&screen4_rtc.time);
 8007dd8:	f107 0308 	add.w	r3, r7, #8
 8007ddc:	3305      	adds	r3, #5
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7f9 f8d3 	bl	8000f8a <ds1307_get_current_time>
		ds1307_get_current_date(&screen4_rtc.date);
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7f9 f942 	bl	8001072 <ds1307_get_current_date>

		if(screen4_rtc.date.date_validity && screen4_rtc.time.time_validity) {
 8007dee:	7b3b      	ldrb	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d02d      	beq.n	8007e50 <rtc_handler+0xb8>
 8007df4:	7c7b      	ldrb	r3, [r7, #17]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d02a      	beq.n	8007e50 <rtc_handler+0xb8>
			time_in_sec = screen4_rtc.time.minutes*60 + screen4_rtc.time.seconds;
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	461a      	mov	r2, r3
 8007e00:	0112      	lsls	r2, r2, #4
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	7b7b      	ldrb	r3, [r7, #13]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	4413      	add	r3, r2
 8007e0e:	83fb      	strh	r3, [r7, #30]
			time_in_sec_prev = rtc_time_prev.minutes*60 + rtc_time_prev.seconds;
 8007e10:	7d7b      	ldrb	r3, [r7, #21]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	0112      	lsls	r2, r2, #4
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	7d3b      	ldrb	r3, [r7, #20]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	4413      	add	r3, r2
 8007e24:	83bb      	strh	r3, [r7, #28]

			if(time_in_sec < time_in_sec_prev) time_in_sec += 3600;
 8007e26:	8bfa      	ldrh	r2, [r7, #30]
 8007e28:	8bbb      	ldrh	r3, [r7, #28]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d203      	bcs.n	8007e36 <rtc_handler+0x9e>
 8007e2e:	8bfb      	ldrh	r3, [r7, #30]
 8007e30:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8007e34:	83fb      	strh	r3, [r7, #30]
			if(time_in_sec - time_in_sec_prev == 1) lcd_screen_3_timer_count_up();
 8007e36:	8bfa      	ldrh	r2, [r7, #30]
 8007e38:	8bbb      	ldrh	r3, [r7, #28]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <rtc_handler+0xac>
 8007e40:	f7ff fca4 	bl	800778c <lcd_screen_3_timer_count_up>
			lcd_screen_4_rtc_update(screen4_rtc);
 8007e44:	f107 0308 	add.w	r3, r7, #8
 8007e48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e4c:	f7ff fcec 	bl	8007828 <lcd_screen_4_rtc_update>
		}

		rtc_time_prev = screen4_rtc.time;
 8007e50:	f107 0314 	add.w	r3, r7, #20
 8007e54:	f107 020d 	add.w	r2, r7, #13
 8007e58:	6810      	ldr	r0, [r2, #0]
 8007e5a:	6018      	str	r0, [r3, #0]
 8007e5c:	7912      	ldrb	r2, [r2, #4]
 8007e5e:	711a      	strb	r2, [r3, #4]

		vTaskDelay(200);
 8007e60:	20c8      	movs	r0, #200	; 0xc8
 8007e62:	f7fa fe47 	bl	8002af4 <vTaskDelay>
		taskYIELD();
 8007e66:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <rtc_handler+0xe4>)
 8007e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	f3bf 8f6f 	isb	sy
		if(rtc_queue_handle != NULL) {
 8007e76:	e795      	b.n	8007da4 <rtc_handler+0xc>
 8007e78:	200138ec 	.word	0x200138ec
 8007e7c:	e000ed04 	.word	0xe000ed04

08007e80 <usart_handler>:
	}
}

void usart_handler(void* parameters) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]

	while(1) {
		vTaskDelay(100);
 8007e88:	2064      	movs	r0, #100	; 0x64
 8007e8a:	f7fa fe33 	bl	8002af4 <vTaskDelay>
		taskYIELD();
 8007e8e:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <usart_handler+0x20>)
 8007e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	f3bf 8f6f 	isb	sy
		vTaskDelay(100);
 8007e9e:	e7f3      	b.n	8007e88 <usart_handler+0x8>
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <LED_Init>:
	}
}

void LED_Init() {
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = PORT_LED;
 8007eaa:	4b17      	ldr	r3, [pc, #92]	; (8007f08 <LED_Init+0x64>)
 8007eac:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	72fb      	strb	r3, [r7, #11]

//	Red LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_R_LED;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8007ec2:	1d3b      	adds	r3, r7, #4
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fc fb95 	bl	80045f4 <GPIO_Init>

//	Green LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_G_LED;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fc fb8f 	bl	80045f4 <GPIO_Init>

//	Blue LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_B_LED;
 8007ed6:	2305      	movs	r3, #5
 8007ed8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8007eda:	1d3b      	adds	r3, r7, #4
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fc fb89 	bl	80045f4 <GPIO_Init>

	R_LED_OFF;
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	4808      	ldr	r0, [pc, #32]	; (8007f08 <LED_Init+0x64>)
 8007ee8:	f7fc fd36 	bl	8004958 <GPIO_WriteToOutputPin>
	G_LED_OFF;
 8007eec:	2201      	movs	r2, #1
 8007eee:	2103      	movs	r1, #3
 8007ef0:	4805      	ldr	r0, [pc, #20]	; (8007f08 <LED_Init+0x64>)
 8007ef2:	f7fc fd31 	bl	8004958 <GPIO_WriteToOutputPin>
	B_LED_OFF;
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	2105      	movs	r1, #5
 8007efa:	4803      	ldr	r0, [pc, #12]	; (8007f08 <LED_Init+0x64>)
 8007efc:	f7fc fd2c 	bl	8004958 <GPIO_WriteToOutputPin>

//	R_LED_ON;
//	G_LED_ON;
//	B_LED_ON;
}
 8007f00:	bf00      	nop
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	40021000 	.word	0x40021000

08007f0c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
    uint32_t pending = EXTI->PR;
 8007f12:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <EXTI15_10_IRQHandler+0x60>)
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	607b      	str	r3, [r7, #4]

    if(pending & (1 << PIN_SAG)) {
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <EXTI15_10_IRQHandler+0x22>
        EXTI->PR |= 1 << PIN_SAG;		// clear pending flag, otherwise we'd get endless interrupts
 8007f22:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <EXTI15_10_IRQHandler+0x60>)
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	4a11      	ldr	r2, [pc, #68]	; (8007f6c <EXTI15_10_IRQHandler+0x60>)
 8007f28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f2c:	6153      	str	r3, [r2, #20]
        // handle pin SAG here
    }

    if(pending & (1 << PIN_ZX_IT)) {
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <EXTI15_10_IRQHandler+0x38>
        EXTI->PR |= 1 << PIN_ZX_IT;		// clear pending flag, otherwise we'd get endless interrupts
 8007f38:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <EXTI15_10_IRQHandler+0x60>)
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	4a0b      	ldr	r2, [pc, #44]	; (8007f6c <EXTI15_10_IRQHandler+0x60>)
 8007f3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f42:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
    }

    if(pending & (1 << PIN_IRQ_IT)) {
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <EXTI15_10_IRQHandler+0x58>
        EXTI->PR |= 1 << PIN_IRQ_IT;	// clear pending flag, otherwise we'd get endless interrupts
 8007f4e:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <EXTI15_10_IRQHandler+0x60>)
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	4a06      	ldr	r2, [pc, #24]	; (8007f6c <EXTI15_10_IRQHandler+0x60>)
 8007f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f58:	6153      	str	r3, [r2, #20]
        // handle pin I here
        uint32_t rststatus = ADE_ReadData(RSTSTATUS, 2);
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	200c      	movs	r0, #12
 8007f5e:	f7f8 feaf 	bl	8000cc0 <ADE_ReadData>
 8007f62:	6038      	str	r0, [r7, #0]

        if(rststatus & (1 << IRQ_PKI)) {

		}
    }
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40013c00 	.word	0x40013c00

08007f70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
	return 1;
 8007f74:	2301      	movs	r3, #1
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <_kill>:

int _kill(int pid, int sig)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007f8a:	f000 f8c5 	bl	8008118 <__errno>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2216      	movs	r2, #22
 8007f92:	601a      	str	r2, [r3, #0]
	return -1;
 8007f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <_exit>:

void _exit (int status)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff ffe7 	bl	8007f80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007fb2:	e7fe      	b.n	8007fb2 <_exit+0x12>

08007fb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	e00a      	b.n	8007fdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007fc6:	f3af 8000 	nop.w
 8007fca:	4601      	mov	r1, r0
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	60ba      	str	r2, [r7, #8]
 8007fd2:	b2ca      	uxtb	r2, r1
 8007fd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	617b      	str	r3, [r7, #20]
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	dbf0      	blt.n	8007fc6 <_read+0x12>
	}

return len;
 8007fe4:	687b      	ldr	r3, [r7, #4]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <_close>:
	}
	return len;
}

int _close(int file)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
	return -1;
 8007ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008016:	605a      	str	r2, [r3, #4]
	return 0;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <_isatty>:

int _isatty(int file)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
	return 1;
 800802e:	2301      	movs	r3, #1
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
	return 0;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
	...

08008058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008060:	4a14      	ldr	r2, [pc, #80]	; (80080b4 <_sbrk+0x5c>)
 8008062:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <_sbrk+0x60>)
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800806c:	4b13      	ldr	r3, [pc, #76]	; (80080bc <_sbrk+0x64>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d102      	bne.n	800807a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008074:	4b11      	ldr	r3, [pc, #68]	; (80080bc <_sbrk+0x64>)
 8008076:	4a12      	ldr	r2, [pc, #72]	; (80080c0 <_sbrk+0x68>)
 8008078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800807a:	4b10      	ldr	r3, [pc, #64]	; (80080bc <_sbrk+0x64>)
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4413      	add	r3, r2
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	429a      	cmp	r2, r3
 8008086:	d207      	bcs.n	8008098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008088:	f000 f846 	bl	8008118 <__errno>
 800808c:	4603      	mov	r3, r0
 800808e:	220c      	movs	r2, #12
 8008090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008096:	e009      	b.n	80080ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008098:	4b08      	ldr	r3, [pc, #32]	; (80080bc <_sbrk+0x64>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800809e:	4b07      	ldr	r3, [pc, #28]	; (80080bc <_sbrk+0x64>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4413      	add	r3, r2
 80080a6:	4a05      	ldr	r2, [pc, #20]	; (80080bc <_sbrk+0x64>)
 80080a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80080aa:	68fb      	ldr	r3, [r7, #12]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20020000 	.word	0x20020000
 80080b8:	00000400 	.word	0x00000400
 80080bc:	2001355c 	.word	0x2001355c
 80080c0:	20013900 	.word	0x20013900

080080c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80080c4:	480d      	ldr	r0, [pc, #52]	; (80080fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80080c6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80080c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80080cc:	480c      	ldr	r0, [pc, #48]	; (8008100 <LoopForever+0x6>)
  ldr r1, =_edata
 80080ce:	490d      	ldr	r1, [pc, #52]	; (8008104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80080d0:	4a0d      	ldr	r2, [pc, #52]	; (8008108 <LoopForever+0xe>)
  movs r3, #0
 80080d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80080d4:	e002      	b.n	80080dc <LoopCopyDataInit>

080080d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80080d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80080d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80080da:	3304      	adds	r3, #4

080080dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80080dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80080de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80080e0:	d3f9      	bcc.n	80080d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80080e2:	4a0a      	ldr	r2, [pc, #40]	; (800810c <LoopForever+0x12>)
  ldr r4, =_ebss
 80080e4:	4c0a      	ldr	r4, [pc, #40]	; (8008110 <LoopForever+0x16>)
  movs r3, #0
 80080e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80080e8:	e001      	b.n	80080ee <LoopFillZerobss>

080080ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80080ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80080ec:	3204      	adds	r2, #4

080080ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80080ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80080f0:	d3fb      	bcc.n	80080ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80080f2:	f000 f817 	bl	8008124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80080f6:	f7ff fc6f 	bl	80079d8 <main>

080080fa <LoopForever>:

LoopForever:
    b LoopForever
 80080fa:	e7fe      	b.n	80080fa <LoopForever>
  ldr   r0, =_estack
 80080fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008104:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8008108:	0800b7fc 	.word	0x0800b7fc
  ldr r2, =_sbss
 800810c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8008110:	20013900 	.word	0x20013900

08008114 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008114:	e7fe      	b.n	8008114 <ADC_IRQHandler>
	...

08008118 <__errno>:
 8008118:	4b01      	ldr	r3, [pc, #4]	; (8008120 <__errno+0x8>)
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	20000034 	.word	0x20000034

08008124 <__libc_init_array>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	4d0d      	ldr	r5, [pc, #52]	; (800815c <__libc_init_array+0x38>)
 8008128:	4c0d      	ldr	r4, [pc, #52]	; (8008160 <__libc_init_array+0x3c>)
 800812a:	1b64      	subs	r4, r4, r5
 800812c:	10a4      	asrs	r4, r4, #2
 800812e:	2600      	movs	r6, #0
 8008130:	42a6      	cmp	r6, r4
 8008132:	d109      	bne.n	8008148 <__libc_init_array+0x24>
 8008134:	4d0b      	ldr	r5, [pc, #44]	; (8008164 <__libc_init_array+0x40>)
 8008136:	4c0c      	ldr	r4, [pc, #48]	; (8008168 <__libc_init_array+0x44>)
 8008138:	f002 feb2 	bl	800aea0 <_init>
 800813c:	1b64      	subs	r4, r4, r5
 800813e:	10a4      	asrs	r4, r4, #2
 8008140:	2600      	movs	r6, #0
 8008142:	42a6      	cmp	r6, r4
 8008144:	d105      	bne.n	8008152 <__libc_init_array+0x2e>
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	f855 3b04 	ldr.w	r3, [r5], #4
 800814c:	4798      	blx	r3
 800814e:	3601      	adds	r6, #1
 8008150:	e7ee      	b.n	8008130 <__libc_init_array+0xc>
 8008152:	f855 3b04 	ldr.w	r3, [r5], #4
 8008156:	4798      	blx	r3
 8008158:	3601      	adds	r6, #1
 800815a:	e7f2      	b.n	8008142 <__libc_init_array+0x1e>
 800815c:	0800b7f4 	.word	0x0800b7f4
 8008160:	0800b7f4 	.word	0x0800b7f4
 8008164:	0800b7f4 	.word	0x0800b7f4
 8008168:	0800b7f8 	.word	0x0800b7f8

0800816c <memcmp>:
 800816c:	b530      	push	{r4, r5, lr}
 800816e:	3901      	subs	r1, #1
 8008170:	2400      	movs	r4, #0
 8008172:	42a2      	cmp	r2, r4
 8008174:	d101      	bne.n	800817a <memcmp+0xe>
 8008176:	2000      	movs	r0, #0
 8008178:	e005      	b.n	8008186 <memcmp+0x1a>
 800817a:	5d03      	ldrb	r3, [r0, r4]
 800817c:	3401      	adds	r4, #1
 800817e:	5d0d      	ldrb	r5, [r1, r4]
 8008180:	42ab      	cmp	r3, r5
 8008182:	d0f6      	beq.n	8008172 <memcmp+0x6>
 8008184:	1b58      	subs	r0, r3, r5
 8008186:	bd30      	pop	{r4, r5, pc}

08008188 <memcpy>:
 8008188:	440a      	add	r2, r1
 800818a:	4291      	cmp	r1, r2
 800818c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008190:	d100      	bne.n	8008194 <memcpy+0xc>
 8008192:	4770      	bx	lr
 8008194:	b510      	push	{r4, lr}
 8008196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800819a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800819e:	4291      	cmp	r1, r2
 80081a0:	d1f9      	bne.n	8008196 <memcpy+0xe>
 80081a2:	bd10      	pop	{r4, pc}

080081a4 <memset>:
 80081a4:	4402      	add	r2, r0
 80081a6:	4603      	mov	r3, r0
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d100      	bne.n	80081ae <memset+0xa>
 80081ac:	4770      	bx	lr
 80081ae:	f803 1b01 	strb.w	r1, [r3], #1
 80081b2:	e7f9      	b.n	80081a8 <memset+0x4>

080081b4 <__cvt>:
 80081b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b8:	b088      	sub	sp, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	461d      	mov	r5, r3
 80081be:	4614      	mov	r4, r2
 80081c0:	bfbc      	itt	lt
 80081c2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80081c6:	4614      	movlt	r4, r2
 80081c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081ca:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80081cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80081d0:	bfb6      	itet	lt
 80081d2:	461d      	movlt	r5, r3
 80081d4:	2300      	movge	r3, #0
 80081d6:	232d      	movlt	r3, #45	; 0x2d
 80081d8:	7013      	strb	r3, [r2, #0]
 80081da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081dc:	f023 0820 	bic.w	r8, r3, #32
 80081e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081e4:	d005      	beq.n	80081f2 <__cvt+0x3e>
 80081e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081ea:	d100      	bne.n	80081ee <__cvt+0x3a>
 80081ec:	3601      	adds	r6, #1
 80081ee:	2302      	movs	r3, #2
 80081f0:	e000      	b.n	80081f4 <__cvt+0x40>
 80081f2:	2303      	movs	r3, #3
 80081f4:	aa07      	add	r2, sp, #28
 80081f6:	9204      	str	r2, [sp, #16]
 80081f8:	aa06      	add	r2, sp, #24
 80081fa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80081fe:	e9cd 3600 	strd	r3, r6, [sp]
 8008202:	4622      	mov	r2, r4
 8008204:	462b      	mov	r3, r5
 8008206:	f000 fcef 	bl	8008be8 <_dtoa_r>
 800820a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800820e:	4607      	mov	r7, r0
 8008210:	d102      	bne.n	8008218 <__cvt+0x64>
 8008212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008214:	07db      	lsls	r3, r3, #31
 8008216:	d522      	bpl.n	800825e <__cvt+0xaa>
 8008218:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800821c:	eb07 0906 	add.w	r9, r7, r6
 8008220:	d110      	bne.n	8008244 <__cvt+0x90>
 8008222:	783b      	ldrb	r3, [r7, #0]
 8008224:	2b30      	cmp	r3, #48	; 0x30
 8008226:	d10a      	bne.n	800823e <__cvt+0x8a>
 8008228:	2200      	movs	r2, #0
 800822a:	2300      	movs	r3, #0
 800822c:	4620      	mov	r0, r4
 800822e:	4629      	mov	r1, r5
 8008230:	f7f8 fcaa 	bl	8000b88 <__aeabi_dcmpeq>
 8008234:	b918      	cbnz	r0, 800823e <__cvt+0x8a>
 8008236:	f1c6 0601 	rsb	r6, r6, #1
 800823a:	f8ca 6000 	str.w	r6, [sl]
 800823e:	f8da 3000 	ldr.w	r3, [sl]
 8008242:	4499      	add	r9, r3
 8008244:	2200      	movs	r2, #0
 8008246:	2300      	movs	r3, #0
 8008248:	4620      	mov	r0, r4
 800824a:	4629      	mov	r1, r5
 800824c:	f7f8 fc9c 	bl	8000b88 <__aeabi_dcmpeq>
 8008250:	b108      	cbz	r0, 8008256 <__cvt+0xa2>
 8008252:	f8cd 901c 	str.w	r9, [sp, #28]
 8008256:	2230      	movs	r2, #48	; 0x30
 8008258:	9b07      	ldr	r3, [sp, #28]
 800825a:	454b      	cmp	r3, r9
 800825c:	d307      	bcc.n	800826e <__cvt+0xba>
 800825e:	9b07      	ldr	r3, [sp, #28]
 8008260:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008262:	1bdb      	subs	r3, r3, r7
 8008264:	4638      	mov	r0, r7
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	b008      	add	sp, #32
 800826a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800826e:	1c59      	adds	r1, r3, #1
 8008270:	9107      	str	r1, [sp, #28]
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	e7f0      	b.n	8008258 <__cvt+0xa4>

08008276 <__exponent>:
 8008276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008278:	4603      	mov	r3, r0
 800827a:	2900      	cmp	r1, #0
 800827c:	bfb8      	it	lt
 800827e:	4249      	neglt	r1, r1
 8008280:	f803 2b02 	strb.w	r2, [r3], #2
 8008284:	bfb4      	ite	lt
 8008286:	222d      	movlt	r2, #45	; 0x2d
 8008288:	222b      	movge	r2, #43	; 0x2b
 800828a:	2909      	cmp	r1, #9
 800828c:	7042      	strb	r2, [r0, #1]
 800828e:	dd2a      	ble.n	80082e6 <__exponent+0x70>
 8008290:	f10d 0407 	add.w	r4, sp, #7
 8008294:	46a4      	mov	ip, r4
 8008296:	270a      	movs	r7, #10
 8008298:	46a6      	mov	lr, r4
 800829a:	460a      	mov	r2, r1
 800829c:	fb91 f6f7 	sdiv	r6, r1, r7
 80082a0:	fb07 1516 	mls	r5, r7, r6, r1
 80082a4:	3530      	adds	r5, #48	; 0x30
 80082a6:	2a63      	cmp	r2, #99	; 0x63
 80082a8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80082ac:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082b0:	4631      	mov	r1, r6
 80082b2:	dcf1      	bgt.n	8008298 <__exponent+0x22>
 80082b4:	3130      	adds	r1, #48	; 0x30
 80082b6:	f1ae 0502 	sub.w	r5, lr, #2
 80082ba:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082be:	1c44      	adds	r4, r0, #1
 80082c0:	4629      	mov	r1, r5
 80082c2:	4561      	cmp	r1, ip
 80082c4:	d30a      	bcc.n	80082dc <__exponent+0x66>
 80082c6:	f10d 0209 	add.w	r2, sp, #9
 80082ca:	eba2 020e 	sub.w	r2, r2, lr
 80082ce:	4565      	cmp	r5, ip
 80082d0:	bf88      	it	hi
 80082d2:	2200      	movhi	r2, #0
 80082d4:	4413      	add	r3, r2
 80082d6:	1a18      	subs	r0, r3, r0
 80082d8:	b003      	add	sp, #12
 80082da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082e0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80082e4:	e7ed      	b.n	80082c2 <__exponent+0x4c>
 80082e6:	2330      	movs	r3, #48	; 0x30
 80082e8:	3130      	adds	r1, #48	; 0x30
 80082ea:	7083      	strb	r3, [r0, #2]
 80082ec:	70c1      	strb	r1, [r0, #3]
 80082ee:	1d03      	adds	r3, r0, #4
 80082f0:	e7f1      	b.n	80082d6 <__exponent+0x60>
	...

080082f4 <_printf_float>:
 80082f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f8:	ed2d 8b02 	vpush	{d8}
 80082fc:	b091      	sub	sp, #68	; 0x44
 80082fe:	460c      	mov	r4, r1
 8008300:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008304:	4616      	mov	r6, r2
 8008306:	461f      	mov	r7, r3
 8008308:	4605      	mov	r5, r0
 800830a:	f001 fa59 	bl	80097c0 <_localeconv_r>
 800830e:	f8d0 a000 	ldr.w	sl, [r0]
 8008312:	4650      	mov	r0, sl
 8008314:	f7f7 ffb6 	bl	8000284 <strlen>
 8008318:	2300      	movs	r3, #0
 800831a:	930e      	str	r3, [sp, #56]	; 0x38
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	9309      	str	r3, [sp, #36]	; 0x24
 8008320:	f8d8 3000 	ldr.w	r3, [r8]
 8008324:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008328:	3307      	adds	r3, #7
 800832a:	f023 0307 	bic.w	r3, r3, #7
 800832e:	f103 0208 	add.w	r2, r3, #8
 8008332:	f8c8 2000 	str.w	r2, [r8]
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800833e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008342:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008346:	930b      	str	r3, [sp, #44]	; 0x2c
 8008348:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800834c:	ee08 0a10 	vmov	s16, r0
 8008350:	4ba0      	ldr	r3, [pc, #640]	; (80085d4 <_printf_float+0x2e0>)
 8008352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800835a:	f7f8 fc47 	bl	8000bec <__aeabi_dcmpun>
 800835e:	bb88      	cbnz	r0, 80083c4 <_printf_float+0xd0>
 8008360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008364:	4b9b      	ldr	r3, [pc, #620]	; (80085d4 <_printf_float+0x2e0>)
 8008366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800836a:	f7f8 fc21 	bl	8000bb0 <__aeabi_dcmple>
 800836e:	bb48      	cbnz	r0, 80083c4 <_printf_float+0xd0>
 8008370:	2200      	movs	r2, #0
 8008372:	2300      	movs	r3, #0
 8008374:	4640      	mov	r0, r8
 8008376:	4649      	mov	r1, r9
 8008378:	f7f8 fc10 	bl	8000b9c <__aeabi_dcmplt>
 800837c:	b110      	cbz	r0, 8008384 <_printf_float+0x90>
 800837e:	232d      	movs	r3, #45	; 0x2d
 8008380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008384:	4b94      	ldr	r3, [pc, #592]	; (80085d8 <_printf_float+0x2e4>)
 8008386:	4895      	ldr	r0, [pc, #596]	; (80085dc <_printf_float+0x2e8>)
 8008388:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800838c:	bf94      	ite	ls
 800838e:	4698      	movls	r8, r3
 8008390:	4680      	movhi	r8, r0
 8008392:	2303      	movs	r3, #3
 8008394:	6123      	str	r3, [r4, #16]
 8008396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008398:	f023 0304 	bic.w	r3, r3, #4
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	f04f 0900 	mov.w	r9, #0
 80083a2:	9700      	str	r7, [sp, #0]
 80083a4:	4633      	mov	r3, r6
 80083a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80083a8:	4621      	mov	r1, r4
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 f9da 	bl	8008764 <_printf_common>
 80083b0:	3001      	adds	r0, #1
 80083b2:	f040 8092 	bne.w	80084da <_printf_float+0x1e6>
 80083b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083ba:	b011      	add	sp, #68	; 0x44
 80083bc:	ecbd 8b02 	vpop	{d8}
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	4642      	mov	r2, r8
 80083c6:	464b      	mov	r3, r9
 80083c8:	4640      	mov	r0, r8
 80083ca:	4649      	mov	r1, r9
 80083cc:	f7f8 fc0e 	bl	8000bec <__aeabi_dcmpun>
 80083d0:	b140      	cbz	r0, 80083e4 <_printf_float+0xf0>
 80083d2:	464b      	mov	r3, r9
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfbc      	itt	lt
 80083d8:	232d      	movlt	r3, #45	; 0x2d
 80083da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80083de:	4880      	ldr	r0, [pc, #512]	; (80085e0 <_printf_float+0x2ec>)
 80083e0:	4b80      	ldr	r3, [pc, #512]	; (80085e4 <_printf_float+0x2f0>)
 80083e2:	e7d1      	b.n	8008388 <_printf_float+0x94>
 80083e4:	6863      	ldr	r3, [r4, #4]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 80083ec:	d143      	bne.n	8008476 <_printf_float+0x182>
 80083ee:	2306      	movs	r3, #6
 80083f0:	6063      	str	r3, [r4, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f6:	9206      	str	r2, [sp, #24]
 80083f8:	aa0e      	add	r2, sp, #56	; 0x38
 80083fa:	e9cd b204 	strd	fp, r2, [sp, #16]
 80083fe:	aa0d      	add	r2, sp, #52	; 0x34
 8008400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008404:	9203      	str	r2, [sp, #12]
 8008406:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800840a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	4642      	mov	r2, r8
 8008416:	464b      	mov	r3, r9
 8008418:	4628      	mov	r0, r5
 800841a:	910a      	str	r1, [sp, #40]	; 0x28
 800841c:	f7ff feca 	bl	80081b4 <__cvt>
 8008420:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008422:	2947      	cmp	r1, #71	; 0x47
 8008424:	4680      	mov	r8, r0
 8008426:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008428:	d108      	bne.n	800843c <_printf_float+0x148>
 800842a:	1cc8      	adds	r0, r1, #3
 800842c:	db02      	blt.n	8008434 <_printf_float+0x140>
 800842e:	6863      	ldr	r3, [r4, #4]
 8008430:	4299      	cmp	r1, r3
 8008432:	dd40      	ble.n	80084b6 <_printf_float+0x1c2>
 8008434:	f1ab 0b02 	sub.w	fp, fp, #2
 8008438:	fa5f fb8b 	uxtb.w	fp, fp
 800843c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008440:	d81f      	bhi.n	8008482 <_printf_float+0x18e>
 8008442:	3901      	subs	r1, #1
 8008444:	465a      	mov	r2, fp
 8008446:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800844a:	910d      	str	r1, [sp, #52]	; 0x34
 800844c:	f7ff ff13 	bl	8008276 <__exponent>
 8008450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008452:	1813      	adds	r3, r2, r0
 8008454:	2a01      	cmp	r2, #1
 8008456:	4681      	mov	r9, r0
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	dc02      	bgt.n	8008462 <_printf_float+0x16e>
 800845c:	6822      	ldr	r2, [r4, #0]
 800845e:	07d2      	lsls	r2, r2, #31
 8008460:	d501      	bpl.n	8008466 <_printf_float+0x172>
 8008462:	3301      	adds	r3, #1
 8008464:	6123      	str	r3, [r4, #16]
 8008466:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800846a:	2b00      	cmp	r3, #0
 800846c:	d099      	beq.n	80083a2 <_printf_float+0xae>
 800846e:	232d      	movs	r3, #45	; 0x2d
 8008470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008474:	e795      	b.n	80083a2 <_printf_float+0xae>
 8008476:	2947      	cmp	r1, #71	; 0x47
 8008478:	d1bb      	bne.n	80083f2 <_printf_float+0xfe>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1b9      	bne.n	80083f2 <_printf_float+0xfe>
 800847e:	2301      	movs	r3, #1
 8008480:	e7b6      	b.n	80083f0 <_printf_float+0xfc>
 8008482:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008486:	d118      	bne.n	80084ba <_printf_float+0x1c6>
 8008488:	2900      	cmp	r1, #0
 800848a:	6863      	ldr	r3, [r4, #4]
 800848c:	dd0b      	ble.n	80084a6 <_printf_float+0x1b2>
 800848e:	6121      	str	r1, [r4, #16]
 8008490:	b913      	cbnz	r3, 8008498 <_printf_float+0x1a4>
 8008492:	6822      	ldr	r2, [r4, #0]
 8008494:	07d0      	lsls	r0, r2, #31
 8008496:	d502      	bpl.n	800849e <_printf_float+0x1aa>
 8008498:	3301      	adds	r3, #1
 800849a:	440b      	add	r3, r1
 800849c:	6123      	str	r3, [r4, #16]
 800849e:	65a1      	str	r1, [r4, #88]	; 0x58
 80084a0:	f04f 0900 	mov.w	r9, #0
 80084a4:	e7df      	b.n	8008466 <_printf_float+0x172>
 80084a6:	b913      	cbnz	r3, 80084ae <_printf_float+0x1ba>
 80084a8:	6822      	ldr	r2, [r4, #0]
 80084aa:	07d2      	lsls	r2, r2, #31
 80084ac:	d501      	bpl.n	80084b2 <_printf_float+0x1be>
 80084ae:	3302      	adds	r3, #2
 80084b0:	e7f4      	b.n	800849c <_printf_float+0x1a8>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e7f2      	b.n	800849c <_printf_float+0x1a8>
 80084b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084bc:	4299      	cmp	r1, r3
 80084be:	db05      	blt.n	80084cc <_printf_float+0x1d8>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	6121      	str	r1, [r4, #16]
 80084c4:	07d8      	lsls	r0, r3, #31
 80084c6:	d5ea      	bpl.n	800849e <_printf_float+0x1aa>
 80084c8:	1c4b      	adds	r3, r1, #1
 80084ca:	e7e7      	b.n	800849c <_printf_float+0x1a8>
 80084cc:	2900      	cmp	r1, #0
 80084ce:	bfd4      	ite	le
 80084d0:	f1c1 0202 	rsble	r2, r1, #2
 80084d4:	2201      	movgt	r2, #1
 80084d6:	4413      	add	r3, r2
 80084d8:	e7e0      	b.n	800849c <_printf_float+0x1a8>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	055a      	lsls	r2, r3, #21
 80084de:	d407      	bmi.n	80084f0 <_printf_float+0x1fc>
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	4642      	mov	r2, r8
 80084e4:	4631      	mov	r1, r6
 80084e6:	4628      	mov	r0, r5
 80084e8:	47b8      	blx	r7
 80084ea:	3001      	adds	r0, #1
 80084ec:	d12c      	bne.n	8008548 <_printf_float+0x254>
 80084ee:	e762      	b.n	80083b6 <_printf_float+0xc2>
 80084f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084f4:	f240 80e0 	bls.w	80086b8 <_printf_float+0x3c4>
 80084f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084fc:	2200      	movs	r2, #0
 80084fe:	2300      	movs	r3, #0
 8008500:	f7f8 fb42 	bl	8000b88 <__aeabi_dcmpeq>
 8008504:	2800      	cmp	r0, #0
 8008506:	d034      	beq.n	8008572 <_printf_float+0x27e>
 8008508:	4a37      	ldr	r2, [pc, #220]	; (80085e8 <_printf_float+0x2f4>)
 800850a:	2301      	movs	r3, #1
 800850c:	4631      	mov	r1, r6
 800850e:	4628      	mov	r0, r5
 8008510:	47b8      	blx	r7
 8008512:	3001      	adds	r0, #1
 8008514:	f43f af4f 	beq.w	80083b6 <_printf_float+0xc2>
 8008518:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800851c:	429a      	cmp	r2, r3
 800851e:	db02      	blt.n	8008526 <_printf_float+0x232>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	07d8      	lsls	r0, r3, #31
 8008524:	d510      	bpl.n	8008548 <_printf_float+0x254>
 8008526:	ee18 3a10 	vmov	r3, s16
 800852a:	4652      	mov	r2, sl
 800852c:	4631      	mov	r1, r6
 800852e:	4628      	mov	r0, r5
 8008530:	47b8      	blx	r7
 8008532:	3001      	adds	r0, #1
 8008534:	f43f af3f 	beq.w	80083b6 <_printf_float+0xc2>
 8008538:	f04f 0800 	mov.w	r8, #0
 800853c:	f104 091a 	add.w	r9, r4, #26
 8008540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008542:	3b01      	subs	r3, #1
 8008544:	4543      	cmp	r3, r8
 8008546:	dc09      	bgt.n	800855c <_printf_float+0x268>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	079b      	lsls	r3, r3, #30
 800854c:	f100 8105 	bmi.w	800875a <_printf_float+0x466>
 8008550:	68e0      	ldr	r0, [r4, #12]
 8008552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008554:	4298      	cmp	r0, r3
 8008556:	bfb8      	it	lt
 8008558:	4618      	movlt	r0, r3
 800855a:	e72e      	b.n	80083ba <_printf_float+0xc6>
 800855c:	2301      	movs	r3, #1
 800855e:	464a      	mov	r2, r9
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	f43f af25 	beq.w	80083b6 <_printf_float+0xc2>
 800856c:	f108 0801 	add.w	r8, r8, #1
 8008570:	e7e6      	b.n	8008540 <_printf_float+0x24c>
 8008572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008574:	2b00      	cmp	r3, #0
 8008576:	dc39      	bgt.n	80085ec <_printf_float+0x2f8>
 8008578:	4a1b      	ldr	r2, [pc, #108]	; (80085e8 <_printf_float+0x2f4>)
 800857a:	2301      	movs	r3, #1
 800857c:	4631      	mov	r1, r6
 800857e:	4628      	mov	r0, r5
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f af17 	beq.w	80083b6 <_printf_float+0xc2>
 8008588:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800858c:	4313      	orrs	r3, r2
 800858e:	d102      	bne.n	8008596 <_printf_float+0x2a2>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	07d9      	lsls	r1, r3, #31
 8008594:	d5d8      	bpl.n	8008548 <_printf_float+0x254>
 8008596:	ee18 3a10 	vmov	r3, s16
 800859a:	4652      	mov	r2, sl
 800859c:	4631      	mov	r1, r6
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	f43f af07 	beq.w	80083b6 <_printf_float+0xc2>
 80085a8:	f04f 0900 	mov.w	r9, #0
 80085ac:	f104 0a1a 	add.w	sl, r4, #26
 80085b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b2:	425b      	negs	r3, r3
 80085b4:	454b      	cmp	r3, r9
 80085b6:	dc01      	bgt.n	80085bc <_printf_float+0x2c8>
 80085b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ba:	e792      	b.n	80084e2 <_printf_float+0x1ee>
 80085bc:	2301      	movs	r3, #1
 80085be:	4652      	mov	r2, sl
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f aef5 	beq.w	80083b6 <_printf_float+0xc2>
 80085cc:	f109 0901 	add.w	r9, r9, #1
 80085d0:	e7ee      	b.n	80085b0 <_printf_float+0x2bc>
 80085d2:	bf00      	nop
 80085d4:	7fefffff 	.word	0x7fefffff
 80085d8:	0800b418 	.word	0x0800b418
 80085dc:	0800b41c 	.word	0x0800b41c
 80085e0:	0800b424 	.word	0x0800b424
 80085e4:	0800b420 	.word	0x0800b420
 80085e8:	0800b428 	.word	0x0800b428
 80085ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085f0:	429a      	cmp	r2, r3
 80085f2:	bfa8      	it	ge
 80085f4:	461a      	movge	r2, r3
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	4691      	mov	r9, r2
 80085fa:	dc37      	bgt.n	800866c <_printf_float+0x378>
 80085fc:	f04f 0b00 	mov.w	fp, #0
 8008600:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008604:	f104 021a 	add.w	r2, r4, #26
 8008608:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800860a:	9309      	str	r3, [sp, #36]	; 0x24
 800860c:	eba3 0309 	sub.w	r3, r3, r9
 8008610:	455b      	cmp	r3, fp
 8008612:	dc33      	bgt.n	800867c <_printf_float+0x388>
 8008614:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008618:	429a      	cmp	r2, r3
 800861a:	db3b      	blt.n	8008694 <_printf_float+0x3a0>
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	07da      	lsls	r2, r3, #31
 8008620:	d438      	bmi.n	8008694 <_printf_float+0x3a0>
 8008622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008626:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	eba2 0901 	sub.w	r9, r2, r1
 800862e:	4599      	cmp	r9, r3
 8008630:	bfa8      	it	ge
 8008632:	4699      	movge	r9, r3
 8008634:	f1b9 0f00 	cmp.w	r9, #0
 8008638:	dc35      	bgt.n	80086a6 <_printf_float+0x3b2>
 800863a:	f04f 0800 	mov.w	r8, #0
 800863e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008642:	f104 0a1a 	add.w	sl, r4, #26
 8008646:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800864a:	1a9b      	subs	r3, r3, r2
 800864c:	eba3 0309 	sub.w	r3, r3, r9
 8008650:	4543      	cmp	r3, r8
 8008652:	f77f af79 	ble.w	8008548 <_printf_float+0x254>
 8008656:	2301      	movs	r3, #1
 8008658:	4652      	mov	r2, sl
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	47b8      	blx	r7
 8008660:	3001      	adds	r0, #1
 8008662:	f43f aea8 	beq.w	80083b6 <_printf_float+0xc2>
 8008666:	f108 0801 	add.w	r8, r8, #1
 800866a:	e7ec      	b.n	8008646 <_printf_float+0x352>
 800866c:	4613      	mov	r3, r2
 800866e:	4631      	mov	r1, r6
 8008670:	4642      	mov	r2, r8
 8008672:	4628      	mov	r0, r5
 8008674:	47b8      	blx	r7
 8008676:	3001      	adds	r0, #1
 8008678:	d1c0      	bne.n	80085fc <_printf_float+0x308>
 800867a:	e69c      	b.n	80083b6 <_printf_float+0xc2>
 800867c:	2301      	movs	r3, #1
 800867e:	4631      	mov	r1, r6
 8008680:	4628      	mov	r0, r5
 8008682:	9209      	str	r2, [sp, #36]	; 0x24
 8008684:	47b8      	blx	r7
 8008686:	3001      	adds	r0, #1
 8008688:	f43f ae95 	beq.w	80083b6 <_printf_float+0xc2>
 800868c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800868e:	f10b 0b01 	add.w	fp, fp, #1
 8008692:	e7b9      	b.n	8008608 <_printf_float+0x314>
 8008694:	ee18 3a10 	vmov	r3, s16
 8008698:	4652      	mov	r2, sl
 800869a:	4631      	mov	r1, r6
 800869c:	4628      	mov	r0, r5
 800869e:	47b8      	blx	r7
 80086a0:	3001      	adds	r0, #1
 80086a2:	d1be      	bne.n	8008622 <_printf_float+0x32e>
 80086a4:	e687      	b.n	80083b6 <_printf_float+0xc2>
 80086a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086a8:	464b      	mov	r3, r9
 80086aa:	4442      	add	r2, r8
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	d1c1      	bne.n	800863a <_printf_float+0x346>
 80086b6:	e67e      	b.n	80083b6 <_printf_float+0xc2>
 80086b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ba:	2a01      	cmp	r2, #1
 80086bc:	dc01      	bgt.n	80086c2 <_printf_float+0x3ce>
 80086be:	07db      	lsls	r3, r3, #31
 80086c0:	d538      	bpl.n	8008734 <_printf_float+0x440>
 80086c2:	2301      	movs	r3, #1
 80086c4:	4642      	mov	r2, r8
 80086c6:	4631      	mov	r1, r6
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b8      	blx	r7
 80086cc:	3001      	adds	r0, #1
 80086ce:	f43f ae72 	beq.w	80083b6 <_printf_float+0xc2>
 80086d2:	ee18 3a10 	vmov	r3, s16
 80086d6:	4652      	mov	r2, sl
 80086d8:	4631      	mov	r1, r6
 80086da:	4628      	mov	r0, r5
 80086dc:	47b8      	blx	r7
 80086de:	3001      	adds	r0, #1
 80086e0:	f43f ae69 	beq.w	80083b6 <_printf_float+0xc2>
 80086e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086e8:	2200      	movs	r2, #0
 80086ea:	2300      	movs	r3, #0
 80086ec:	f7f8 fa4c 	bl	8000b88 <__aeabi_dcmpeq>
 80086f0:	b9d8      	cbnz	r0, 800872a <_printf_float+0x436>
 80086f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f4:	f108 0201 	add.w	r2, r8, #1
 80086f8:	3b01      	subs	r3, #1
 80086fa:	4631      	mov	r1, r6
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b8      	blx	r7
 8008700:	3001      	adds	r0, #1
 8008702:	d10e      	bne.n	8008722 <_printf_float+0x42e>
 8008704:	e657      	b.n	80083b6 <_printf_float+0xc2>
 8008706:	2301      	movs	r3, #1
 8008708:	4652      	mov	r2, sl
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	f43f ae50 	beq.w	80083b6 <_printf_float+0xc2>
 8008716:	f108 0801 	add.w	r8, r8, #1
 800871a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800871c:	3b01      	subs	r3, #1
 800871e:	4543      	cmp	r3, r8
 8008720:	dcf1      	bgt.n	8008706 <_printf_float+0x412>
 8008722:	464b      	mov	r3, r9
 8008724:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008728:	e6dc      	b.n	80084e4 <_printf_float+0x1f0>
 800872a:	f04f 0800 	mov.w	r8, #0
 800872e:	f104 0a1a 	add.w	sl, r4, #26
 8008732:	e7f2      	b.n	800871a <_printf_float+0x426>
 8008734:	2301      	movs	r3, #1
 8008736:	4642      	mov	r2, r8
 8008738:	e7df      	b.n	80086fa <_printf_float+0x406>
 800873a:	2301      	movs	r3, #1
 800873c:	464a      	mov	r2, r9
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	f43f ae36 	beq.w	80083b6 <_printf_float+0xc2>
 800874a:	f108 0801 	add.w	r8, r8, #1
 800874e:	68e3      	ldr	r3, [r4, #12]
 8008750:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008752:	1a5b      	subs	r3, r3, r1
 8008754:	4543      	cmp	r3, r8
 8008756:	dcf0      	bgt.n	800873a <_printf_float+0x446>
 8008758:	e6fa      	b.n	8008550 <_printf_float+0x25c>
 800875a:	f04f 0800 	mov.w	r8, #0
 800875e:	f104 0919 	add.w	r9, r4, #25
 8008762:	e7f4      	b.n	800874e <_printf_float+0x45a>

08008764 <_printf_common>:
 8008764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	4616      	mov	r6, r2
 800876a:	4699      	mov	r9, r3
 800876c:	688a      	ldr	r2, [r1, #8]
 800876e:	690b      	ldr	r3, [r1, #16]
 8008770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008774:	4293      	cmp	r3, r2
 8008776:	bfb8      	it	lt
 8008778:	4613      	movlt	r3, r2
 800877a:	6033      	str	r3, [r6, #0]
 800877c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008780:	4607      	mov	r7, r0
 8008782:	460c      	mov	r4, r1
 8008784:	b10a      	cbz	r2, 800878a <_printf_common+0x26>
 8008786:	3301      	adds	r3, #1
 8008788:	6033      	str	r3, [r6, #0]
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	0699      	lsls	r1, r3, #26
 800878e:	bf42      	ittt	mi
 8008790:	6833      	ldrmi	r3, [r6, #0]
 8008792:	3302      	addmi	r3, #2
 8008794:	6033      	strmi	r3, [r6, #0]
 8008796:	6825      	ldr	r5, [r4, #0]
 8008798:	f015 0506 	ands.w	r5, r5, #6
 800879c:	d106      	bne.n	80087ac <_printf_common+0x48>
 800879e:	f104 0a19 	add.w	sl, r4, #25
 80087a2:	68e3      	ldr	r3, [r4, #12]
 80087a4:	6832      	ldr	r2, [r6, #0]
 80087a6:	1a9b      	subs	r3, r3, r2
 80087a8:	42ab      	cmp	r3, r5
 80087aa:	dc26      	bgt.n	80087fa <_printf_common+0x96>
 80087ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087b0:	1e13      	subs	r3, r2, #0
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	bf18      	it	ne
 80087b6:	2301      	movne	r3, #1
 80087b8:	0692      	lsls	r2, r2, #26
 80087ba:	d42b      	bmi.n	8008814 <_printf_common+0xb0>
 80087bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087c0:	4649      	mov	r1, r9
 80087c2:	4638      	mov	r0, r7
 80087c4:	47c0      	blx	r8
 80087c6:	3001      	adds	r0, #1
 80087c8:	d01e      	beq.n	8008808 <_printf_common+0xa4>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	68e5      	ldr	r5, [r4, #12]
 80087ce:	6832      	ldr	r2, [r6, #0]
 80087d0:	f003 0306 	and.w	r3, r3, #6
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	bf08      	it	eq
 80087d8:	1aad      	subeq	r5, r5, r2
 80087da:	68a3      	ldr	r3, [r4, #8]
 80087dc:	6922      	ldr	r2, [r4, #16]
 80087de:	bf0c      	ite	eq
 80087e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087e4:	2500      	movne	r5, #0
 80087e6:	4293      	cmp	r3, r2
 80087e8:	bfc4      	itt	gt
 80087ea:	1a9b      	subgt	r3, r3, r2
 80087ec:	18ed      	addgt	r5, r5, r3
 80087ee:	2600      	movs	r6, #0
 80087f0:	341a      	adds	r4, #26
 80087f2:	42b5      	cmp	r5, r6
 80087f4:	d11a      	bne.n	800882c <_printf_common+0xc8>
 80087f6:	2000      	movs	r0, #0
 80087f8:	e008      	b.n	800880c <_printf_common+0xa8>
 80087fa:	2301      	movs	r3, #1
 80087fc:	4652      	mov	r2, sl
 80087fe:	4649      	mov	r1, r9
 8008800:	4638      	mov	r0, r7
 8008802:	47c0      	blx	r8
 8008804:	3001      	adds	r0, #1
 8008806:	d103      	bne.n	8008810 <_printf_common+0xac>
 8008808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800880c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008810:	3501      	adds	r5, #1
 8008812:	e7c6      	b.n	80087a2 <_printf_common+0x3e>
 8008814:	18e1      	adds	r1, r4, r3
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	2030      	movs	r0, #48	; 0x30
 800881a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800881e:	4422      	add	r2, r4
 8008820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008828:	3302      	adds	r3, #2
 800882a:	e7c7      	b.n	80087bc <_printf_common+0x58>
 800882c:	2301      	movs	r3, #1
 800882e:	4622      	mov	r2, r4
 8008830:	4649      	mov	r1, r9
 8008832:	4638      	mov	r0, r7
 8008834:	47c0      	blx	r8
 8008836:	3001      	adds	r0, #1
 8008838:	d0e6      	beq.n	8008808 <_printf_common+0xa4>
 800883a:	3601      	adds	r6, #1
 800883c:	e7d9      	b.n	80087f2 <_printf_common+0x8e>
	...

08008840 <_printf_i>:
 8008840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	460c      	mov	r4, r1
 8008846:	4691      	mov	r9, r2
 8008848:	7e27      	ldrb	r7, [r4, #24]
 800884a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800884c:	2f78      	cmp	r7, #120	; 0x78
 800884e:	4680      	mov	r8, r0
 8008850:	469a      	mov	sl, r3
 8008852:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008856:	d807      	bhi.n	8008868 <_printf_i+0x28>
 8008858:	2f62      	cmp	r7, #98	; 0x62
 800885a:	d80a      	bhi.n	8008872 <_printf_i+0x32>
 800885c:	2f00      	cmp	r7, #0
 800885e:	f000 80d8 	beq.w	8008a12 <_printf_i+0x1d2>
 8008862:	2f58      	cmp	r7, #88	; 0x58
 8008864:	f000 80a3 	beq.w	80089ae <_printf_i+0x16e>
 8008868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800886c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008870:	e03a      	b.n	80088e8 <_printf_i+0xa8>
 8008872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008876:	2b15      	cmp	r3, #21
 8008878:	d8f6      	bhi.n	8008868 <_printf_i+0x28>
 800887a:	a001      	add	r0, pc, #4	; (adr r0, 8008880 <_printf_i+0x40>)
 800887c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008880:	080088d9 	.word	0x080088d9
 8008884:	080088ed 	.word	0x080088ed
 8008888:	08008869 	.word	0x08008869
 800888c:	08008869 	.word	0x08008869
 8008890:	08008869 	.word	0x08008869
 8008894:	08008869 	.word	0x08008869
 8008898:	080088ed 	.word	0x080088ed
 800889c:	08008869 	.word	0x08008869
 80088a0:	08008869 	.word	0x08008869
 80088a4:	08008869 	.word	0x08008869
 80088a8:	08008869 	.word	0x08008869
 80088ac:	080089f9 	.word	0x080089f9
 80088b0:	0800891d 	.word	0x0800891d
 80088b4:	080089db 	.word	0x080089db
 80088b8:	08008869 	.word	0x08008869
 80088bc:	08008869 	.word	0x08008869
 80088c0:	08008a1b 	.word	0x08008a1b
 80088c4:	08008869 	.word	0x08008869
 80088c8:	0800891d 	.word	0x0800891d
 80088cc:	08008869 	.word	0x08008869
 80088d0:	08008869 	.word	0x08008869
 80088d4:	080089e3 	.word	0x080089e3
 80088d8:	680b      	ldr	r3, [r1, #0]
 80088da:	1d1a      	adds	r2, r3, #4
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	600a      	str	r2, [r1, #0]
 80088e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088e8:	2301      	movs	r3, #1
 80088ea:	e0a3      	b.n	8008a34 <_printf_i+0x1f4>
 80088ec:	6825      	ldr	r5, [r4, #0]
 80088ee:	6808      	ldr	r0, [r1, #0]
 80088f0:	062e      	lsls	r6, r5, #24
 80088f2:	f100 0304 	add.w	r3, r0, #4
 80088f6:	d50a      	bpl.n	800890e <_printf_i+0xce>
 80088f8:	6805      	ldr	r5, [r0, #0]
 80088fa:	600b      	str	r3, [r1, #0]
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	da03      	bge.n	8008908 <_printf_i+0xc8>
 8008900:	232d      	movs	r3, #45	; 0x2d
 8008902:	426d      	negs	r5, r5
 8008904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008908:	485e      	ldr	r0, [pc, #376]	; (8008a84 <_printf_i+0x244>)
 800890a:	230a      	movs	r3, #10
 800890c:	e019      	b.n	8008942 <_printf_i+0x102>
 800890e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008912:	6805      	ldr	r5, [r0, #0]
 8008914:	600b      	str	r3, [r1, #0]
 8008916:	bf18      	it	ne
 8008918:	b22d      	sxthne	r5, r5
 800891a:	e7ef      	b.n	80088fc <_printf_i+0xbc>
 800891c:	680b      	ldr	r3, [r1, #0]
 800891e:	6825      	ldr	r5, [r4, #0]
 8008920:	1d18      	adds	r0, r3, #4
 8008922:	6008      	str	r0, [r1, #0]
 8008924:	0628      	lsls	r0, r5, #24
 8008926:	d501      	bpl.n	800892c <_printf_i+0xec>
 8008928:	681d      	ldr	r5, [r3, #0]
 800892a:	e002      	b.n	8008932 <_printf_i+0xf2>
 800892c:	0669      	lsls	r1, r5, #25
 800892e:	d5fb      	bpl.n	8008928 <_printf_i+0xe8>
 8008930:	881d      	ldrh	r5, [r3, #0]
 8008932:	4854      	ldr	r0, [pc, #336]	; (8008a84 <_printf_i+0x244>)
 8008934:	2f6f      	cmp	r7, #111	; 0x6f
 8008936:	bf0c      	ite	eq
 8008938:	2308      	moveq	r3, #8
 800893a:	230a      	movne	r3, #10
 800893c:	2100      	movs	r1, #0
 800893e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008942:	6866      	ldr	r6, [r4, #4]
 8008944:	60a6      	str	r6, [r4, #8]
 8008946:	2e00      	cmp	r6, #0
 8008948:	bfa2      	ittt	ge
 800894a:	6821      	ldrge	r1, [r4, #0]
 800894c:	f021 0104 	bicge.w	r1, r1, #4
 8008950:	6021      	strge	r1, [r4, #0]
 8008952:	b90d      	cbnz	r5, 8008958 <_printf_i+0x118>
 8008954:	2e00      	cmp	r6, #0
 8008956:	d04d      	beq.n	80089f4 <_printf_i+0x1b4>
 8008958:	4616      	mov	r6, r2
 800895a:	fbb5 f1f3 	udiv	r1, r5, r3
 800895e:	fb03 5711 	mls	r7, r3, r1, r5
 8008962:	5dc7      	ldrb	r7, [r0, r7]
 8008964:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008968:	462f      	mov	r7, r5
 800896a:	42bb      	cmp	r3, r7
 800896c:	460d      	mov	r5, r1
 800896e:	d9f4      	bls.n	800895a <_printf_i+0x11a>
 8008970:	2b08      	cmp	r3, #8
 8008972:	d10b      	bne.n	800898c <_printf_i+0x14c>
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	07df      	lsls	r7, r3, #31
 8008978:	d508      	bpl.n	800898c <_printf_i+0x14c>
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	6861      	ldr	r1, [r4, #4]
 800897e:	4299      	cmp	r1, r3
 8008980:	bfde      	ittt	le
 8008982:	2330      	movle	r3, #48	; 0x30
 8008984:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008988:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800898c:	1b92      	subs	r2, r2, r6
 800898e:	6122      	str	r2, [r4, #16]
 8008990:	f8cd a000 	str.w	sl, [sp]
 8008994:	464b      	mov	r3, r9
 8008996:	aa03      	add	r2, sp, #12
 8008998:	4621      	mov	r1, r4
 800899a:	4640      	mov	r0, r8
 800899c:	f7ff fee2 	bl	8008764 <_printf_common>
 80089a0:	3001      	adds	r0, #1
 80089a2:	d14c      	bne.n	8008a3e <_printf_i+0x1fe>
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089a8:	b004      	add	sp, #16
 80089aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ae:	4835      	ldr	r0, [pc, #212]	; (8008a84 <_printf_i+0x244>)
 80089b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	680e      	ldr	r6, [r1, #0]
 80089b8:	061f      	lsls	r7, r3, #24
 80089ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80089be:	600e      	str	r6, [r1, #0]
 80089c0:	d514      	bpl.n	80089ec <_printf_i+0x1ac>
 80089c2:	07d9      	lsls	r1, r3, #31
 80089c4:	bf44      	itt	mi
 80089c6:	f043 0320 	orrmi.w	r3, r3, #32
 80089ca:	6023      	strmi	r3, [r4, #0]
 80089cc:	b91d      	cbnz	r5, 80089d6 <_printf_i+0x196>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	f023 0320 	bic.w	r3, r3, #32
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	2310      	movs	r3, #16
 80089d8:	e7b0      	b.n	800893c <_printf_i+0xfc>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	f043 0320 	orr.w	r3, r3, #32
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	2378      	movs	r3, #120	; 0x78
 80089e4:	4828      	ldr	r0, [pc, #160]	; (8008a88 <_printf_i+0x248>)
 80089e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089ea:	e7e3      	b.n	80089b4 <_printf_i+0x174>
 80089ec:	065e      	lsls	r6, r3, #25
 80089ee:	bf48      	it	mi
 80089f0:	b2ad      	uxthmi	r5, r5
 80089f2:	e7e6      	b.n	80089c2 <_printf_i+0x182>
 80089f4:	4616      	mov	r6, r2
 80089f6:	e7bb      	b.n	8008970 <_printf_i+0x130>
 80089f8:	680b      	ldr	r3, [r1, #0]
 80089fa:	6826      	ldr	r6, [r4, #0]
 80089fc:	6960      	ldr	r0, [r4, #20]
 80089fe:	1d1d      	adds	r5, r3, #4
 8008a00:	600d      	str	r5, [r1, #0]
 8008a02:	0635      	lsls	r5, r6, #24
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	d501      	bpl.n	8008a0c <_printf_i+0x1cc>
 8008a08:	6018      	str	r0, [r3, #0]
 8008a0a:	e002      	b.n	8008a12 <_printf_i+0x1d2>
 8008a0c:	0671      	lsls	r1, r6, #25
 8008a0e:	d5fb      	bpl.n	8008a08 <_printf_i+0x1c8>
 8008a10:	8018      	strh	r0, [r3, #0]
 8008a12:	2300      	movs	r3, #0
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	4616      	mov	r6, r2
 8008a18:	e7ba      	b.n	8008990 <_printf_i+0x150>
 8008a1a:	680b      	ldr	r3, [r1, #0]
 8008a1c:	1d1a      	adds	r2, r3, #4
 8008a1e:	600a      	str	r2, [r1, #0]
 8008a20:	681e      	ldr	r6, [r3, #0]
 8008a22:	6862      	ldr	r2, [r4, #4]
 8008a24:	2100      	movs	r1, #0
 8008a26:	4630      	mov	r0, r6
 8008a28:	f7f7 fc3a 	bl	80002a0 <memchr>
 8008a2c:	b108      	cbz	r0, 8008a32 <_printf_i+0x1f2>
 8008a2e:	1b80      	subs	r0, r0, r6
 8008a30:	6060      	str	r0, [r4, #4]
 8008a32:	6863      	ldr	r3, [r4, #4]
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	2300      	movs	r3, #0
 8008a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a3c:	e7a8      	b.n	8008990 <_printf_i+0x150>
 8008a3e:	6923      	ldr	r3, [r4, #16]
 8008a40:	4632      	mov	r2, r6
 8008a42:	4649      	mov	r1, r9
 8008a44:	4640      	mov	r0, r8
 8008a46:	47d0      	blx	sl
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d0ab      	beq.n	80089a4 <_printf_i+0x164>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	079b      	lsls	r3, r3, #30
 8008a50:	d413      	bmi.n	8008a7a <_printf_i+0x23a>
 8008a52:	68e0      	ldr	r0, [r4, #12]
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	4298      	cmp	r0, r3
 8008a58:	bfb8      	it	lt
 8008a5a:	4618      	movlt	r0, r3
 8008a5c:	e7a4      	b.n	80089a8 <_printf_i+0x168>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	4632      	mov	r2, r6
 8008a62:	4649      	mov	r1, r9
 8008a64:	4640      	mov	r0, r8
 8008a66:	47d0      	blx	sl
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d09b      	beq.n	80089a4 <_printf_i+0x164>
 8008a6c:	3501      	adds	r5, #1
 8008a6e:	68e3      	ldr	r3, [r4, #12]
 8008a70:	9903      	ldr	r1, [sp, #12]
 8008a72:	1a5b      	subs	r3, r3, r1
 8008a74:	42ab      	cmp	r3, r5
 8008a76:	dcf2      	bgt.n	8008a5e <_printf_i+0x21e>
 8008a78:	e7eb      	b.n	8008a52 <_printf_i+0x212>
 8008a7a:	2500      	movs	r5, #0
 8008a7c:	f104 0619 	add.w	r6, r4, #25
 8008a80:	e7f5      	b.n	8008a6e <_printf_i+0x22e>
 8008a82:	bf00      	nop
 8008a84:	0800b42a 	.word	0x0800b42a
 8008a88:	0800b43b 	.word	0x0800b43b

08008a8c <siprintf>:
 8008a8c:	b40e      	push	{r1, r2, r3}
 8008a8e:	b500      	push	{lr}
 8008a90:	b09c      	sub	sp, #112	; 0x70
 8008a92:	ab1d      	add	r3, sp, #116	; 0x74
 8008a94:	9002      	str	r0, [sp, #8]
 8008a96:	9006      	str	r0, [sp, #24]
 8008a98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a9c:	4809      	ldr	r0, [pc, #36]	; (8008ac4 <siprintf+0x38>)
 8008a9e:	9107      	str	r1, [sp, #28]
 8008aa0:	9104      	str	r1, [sp, #16]
 8008aa2:	4909      	ldr	r1, [pc, #36]	; (8008ac8 <siprintf+0x3c>)
 8008aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa8:	9105      	str	r1, [sp, #20]
 8008aaa:	6800      	ldr	r0, [r0, #0]
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	a902      	add	r1, sp, #8
 8008ab0:	f001 fb24 	bl	800a0fc <_svfiprintf_r>
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	701a      	strb	r2, [r3, #0]
 8008aba:	b01c      	add	sp, #112	; 0x70
 8008abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ac0:	b003      	add	sp, #12
 8008ac2:	4770      	bx	lr
 8008ac4:	20000034 	.word	0x20000034
 8008ac8:	ffff0208 	.word	0xffff0208

08008acc <quorem>:
 8008acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	6903      	ldr	r3, [r0, #16]
 8008ad2:	690c      	ldr	r4, [r1, #16]
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	f2c0 8081 	blt.w	8008bde <quorem+0x112>
 8008adc:	3c01      	subs	r4, #1
 8008ade:	f101 0814 	add.w	r8, r1, #20
 8008ae2:	f100 0514 	add.w	r5, r0, #20
 8008ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008af4:	3301      	adds	r3, #1
 8008af6:	429a      	cmp	r2, r3
 8008af8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008afc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b00:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b04:	d331      	bcc.n	8008b6a <quorem+0x9e>
 8008b06:	f04f 0e00 	mov.w	lr, #0
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	46ac      	mov	ip, r5
 8008b0e:	46f2      	mov	sl, lr
 8008b10:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b14:	b293      	uxth	r3, r2
 8008b16:	fb06 e303 	mla	r3, r6, r3, lr
 8008b1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ebaa 0303 	sub.w	r3, sl, r3
 8008b24:	0c12      	lsrs	r2, r2, #16
 8008b26:	f8dc a000 	ldr.w	sl, [ip]
 8008b2a:	fb06 e202 	mla	r2, r6, r2, lr
 8008b2e:	fa13 f38a 	uxtah	r3, r3, sl
 8008b32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b36:	fa1f fa82 	uxth.w	sl, r2
 8008b3a:	f8dc 2000 	ldr.w	r2, [ip]
 8008b3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008b42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b4c:	4581      	cmp	r9, r0
 8008b4e:	f84c 3b04 	str.w	r3, [ip], #4
 8008b52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b56:	d2db      	bcs.n	8008b10 <quorem+0x44>
 8008b58:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b5c:	b92b      	cbnz	r3, 8008b6a <quorem+0x9e>
 8008b5e:	9b01      	ldr	r3, [sp, #4]
 8008b60:	3b04      	subs	r3, #4
 8008b62:	429d      	cmp	r5, r3
 8008b64:	461a      	mov	r2, r3
 8008b66:	d32e      	bcc.n	8008bc6 <quorem+0xfa>
 8008b68:	613c      	str	r4, [r7, #16]
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	f001 f8b2 	bl	8009cd4 <__mcmp>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	db24      	blt.n	8008bbe <quorem+0xf2>
 8008b74:	3601      	adds	r6, #1
 8008b76:	4628      	mov	r0, r5
 8008b78:	f04f 0c00 	mov.w	ip, #0
 8008b7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b80:	f8d0 e000 	ldr.w	lr, [r0]
 8008b84:	b293      	uxth	r3, r2
 8008b86:	ebac 0303 	sub.w	r3, ip, r3
 8008b8a:	0c12      	lsrs	r2, r2, #16
 8008b8c:	fa13 f38e 	uxtah	r3, r3, lr
 8008b90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b9e:	45c1      	cmp	r9, r8
 8008ba0:	f840 3b04 	str.w	r3, [r0], #4
 8008ba4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ba8:	d2e8      	bcs.n	8008b7c <quorem+0xb0>
 8008baa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bb2:	b922      	cbnz	r2, 8008bbe <quorem+0xf2>
 8008bb4:	3b04      	subs	r3, #4
 8008bb6:	429d      	cmp	r5, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	d30a      	bcc.n	8008bd2 <quorem+0x106>
 8008bbc:	613c      	str	r4, [r7, #16]
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	b003      	add	sp, #12
 8008bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	3b04      	subs	r3, #4
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	d1cc      	bne.n	8008b68 <quorem+0x9c>
 8008bce:	3c01      	subs	r4, #1
 8008bd0:	e7c7      	b.n	8008b62 <quorem+0x96>
 8008bd2:	6812      	ldr	r2, [r2, #0]
 8008bd4:	3b04      	subs	r3, #4
 8008bd6:	2a00      	cmp	r2, #0
 8008bd8:	d1f0      	bne.n	8008bbc <quorem+0xf0>
 8008bda:	3c01      	subs	r4, #1
 8008bdc:	e7eb      	b.n	8008bb6 <quorem+0xea>
 8008bde:	2000      	movs	r0, #0
 8008be0:	e7ee      	b.n	8008bc0 <quorem+0xf4>
 8008be2:	0000      	movs	r0, r0
 8008be4:	0000      	movs	r0, r0
	...

08008be8 <_dtoa_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	ed2d 8b02 	vpush	{d8}
 8008bf0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bf2:	b095      	sub	sp, #84	; 0x54
 8008bf4:	4616      	mov	r6, r2
 8008bf6:	461f      	mov	r7, r3
 8008bf8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008bfc:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8008c00:	4604      	mov	r4, r0
 8008c02:	b975      	cbnz	r5, 8008c22 <_dtoa_r+0x3a>
 8008c04:	2010      	movs	r0, #16
 8008c06:	f000 fddf 	bl	80097c8 <malloc>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	6260      	str	r0, [r4, #36]	; 0x24
 8008c0e:	b920      	cbnz	r0, 8008c1a <_dtoa_r+0x32>
 8008c10:	4bb1      	ldr	r3, [pc, #708]	; (8008ed8 <_dtoa_r+0x2f0>)
 8008c12:	21ea      	movs	r1, #234	; 0xea
 8008c14:	48b1      	ldr	r0, [pc, #708]	; (8008edc <_dtoa_r+0x2f4>)
 8008c16:	f001 fb81 	bl	800a31c <__assert_func>
 8008c1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c1e:	6005      	str	r5, [r0, #0]
 8008c20:	60c5      	str	r5, [r0, #12]
 8008c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c24:	6819      	ldr	r1, [r3, #0]
 8008c26:	b151      	cbz	r1, 8008c3e <_dtoa_r+0x56>
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	604a      	str	r2, [r1, #4]
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	4093      	lsls	r3, r2
 8008c30:	608b      	str	r3, [r1, #8]
 8008c32:	4620      	mov	r0, r4
 8008c34:	f000 fe10 	bl	8009858 <_Bfree>
 8008c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	1e3b      	subs	r3, r7, #0
 8008c40:	bfb9      	ittee	lt
 8008c42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c46:	9305      	strlt	r3, [sp, #20]
 8008c48:	2300      	movge	r3, #0
 8008c4a:	f8c8 3000 	strge.w	r3, [r8]
 8008c4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008c52:	4ba3      	ldr	r3, [pc, #652]	; (8008ee0 <_dtoa_r+0x2f8>)
 8008c54:	bfbc      	itt	lt
 8008c56:	2201      	movlt	r2, #1
 8008c58:	f8c8 2000 	strlt.w	r2, [r8]
 8008c5c:	ea33 0309 	bics.w	r3, r3, r9
 8008c60:	d11b      	bne.n	8008c9a <_dtoa_r+0xb2>
 8008c62:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c64:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c6e:	4333      	orrs	r3, r6
 8008c70:	f000 857d 	beq.w	800976e <_dtoa_r+0xb86>
 8008c74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c76:	b963      	cbnz	r3, 8008c92 <_dtoa_r+0xaa>
 8008c78:	4b9a      	ldr	r3, [pc, #616]	; (8008ee4 <_dtoa_r+0x2fc>)
 8008c7a:	e024      	b.n	8008cc6 <_dtoa_r+0xde>
 8008c7c:	4b9a      	ldr	r3, [pc, #616]	; (8008ee8 <_dtoa_r+0x300>)
 8008c7e:	9303      	str	r3, [sp, #12]
 8008c80:	3308      	adds	r3, #8
 8008c82:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	9803      	ldr	r0, [sp, #12]
 8008c88:	b015      	add	sp, #84	; 0x54
 8008c8a:	ecbd 8b02 	vpop	{d8}
 8008c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c92:	4b94      	ldr	r3, [pc, #592]	; (8008ee4 <_dtoa_r+0x2fc>)
 8008c94:	9303      	str	r3, [sp, #12]
 8008c96:	3303      	adds	r3, #3
 8008c98:	e7f3      	b.n	8008c82 <_dtoa_r+0x9a>
 8008c9a:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	ec51 0b17 	vmov	r0, r1, d7
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008caa:	f7f7 ff6d 	bl	8000b88 <__aeabi_dcmpeq>
 8008cae:	4680      	mov	r8, r0
 8008cb0:	b158      	cbz	r0, 8008cca <_dtoa_r+0xe2>
 8008cb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 8554 	beq.w	8009768 <_dtoa_r+0xb80>
 8008cc0:	488a      	ldr	r0, [pc, #552]	; (8008eec <_dtoa_r+0x304>)
 8008cc2:	6018      	str	r0, [r3, #0]
 8008cc4:	1e43      	subs	r3, r0, #1
 8008cc6:	9303      	str	r3, [sp, #12]
 8008cc8:	e7dd      	b.n	8008c86 <_dtoa_r+0x9e>
 8008cca:	ab12      	add	r3, sp, #72	; 0x48
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	ab13      	add	r3, sp, #76	; 0x4c
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008cd8:	f001 f8a0 	bl	8009e1c <__d2b>
 8008cdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ce0:	4683      	mov	fp, r0
 8008ce2:	2d00      	cmp	r5, #0
 8008ce4:	d07c      	beq.n	8008de0 <_dtoa_r+0x1f8>
 8008ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ce8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cf0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008cf4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cf8:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cfc:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d00:	4b7b      	ldr	r3, [pc, #492]	; (8008ef0 <_dtoa_r+0x308>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	4630      	mov	r0, r6
 8008d06:	4639      	mov	r1, r7
 8008d08:	f7f7 fb1e 	bl	8000348 <__aeabi_dsub>
 8008d0c:	a36c      	add	r3, pc, #432	; (adr r3, 8008ec0 <_dtoa_r+0x2d8>)
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f7f7 fcd1 	bl	80006b8 <__aeabi_dmul>
 8008d16:	a36c      	add	r3, pc, #432	; (adr r3, 8008ec8 <_dtoa_r+0x2e0>)
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	f7f7 fb16 	bl	800034c <__adddf3>
 8008d20:	4606      	mov	r6, r0
 8008d22:	4628      	mov	r0, r5
 8008d24:	460f      	mov	r7, r1
 8008d26:	f7f7 fc5d 	bl	80005e4 <__aeabi_i2d>
 8008d2a:	a369      	add	r3, pc, #420	; (adr r3, 8008ed0 <_dtoa_r+0x2e8>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 fcc2 	bl	80006b8 <__aeabi_dmul>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	f7f7 fb06 	bl	800034c <__adddf3>
 8008d40:	4606      	mov	r6, r0
 8008d42:	460f      	mov	r7, r1
 8008d44:	f7f7 ff68 	bl	8000c18 <__aeabi_d2iz>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4682      	mov	sl, r0
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	f7f7 ff23 	bl	8000b9c <__aeabi_dcmplt>
 8008d56:	b148      	cbz	r0, 8008d6c <_dtoa_r+0x184>
 8008d58:	4650      	mov	r0, sl
 8008d5a:	f7f7 fc43 	bl	80005e4 <__aeabi_i2d>
 8008d5e:	4632      	mov	r2, r6
 8008d60:	463b      	mov	r3, r7
 8008d62:	f7f7 ff11 	bl	8000b88 <__aeabi_dcmpeq>
 8008d66:	b908      	cbnz	r0, 8008d6c <_dtoa_r+0x184>
 8008d68:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008d6c:	f1ba 0f16 	cmp.w	sl, #22
 8008d70:	d854      	bhi.n	8008e1c <_dtoa_r+0x234>
 8008d72:	4b60      	ldr	r3, [pc, #384]	; (8008ef4 <_dtoa_r+0x30c>)
 8008d74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d80:	f7f7 ff0c 	bl	8000b9c <__aeabi_dcmplt>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d04b      	beq.n	8008e20 <_dtoa_r+0x238>
 8008d88:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d92:	1b5d      	subs	r5, r3, r5
 8008d94:	1e6b      	subs	r3, r5, #1
 8008d96:	9307      	str	r3, [sp, #28]
 8008d98:	bf43      	ittte	mi
 8008d9a:	2300      	movmi	r3, #0
 8008d9c:	f1c5 0801 	rsbmi	r8, r5, #1
 8008da0:	9307      	strmi	r3, [sp, #28]
 8008da2:	f04f 0800 	movpl.w	r8, #0
 8008da6:	f1ba 0f00 	cmp.w	sl, #0
 8008daa:	db3b      	blt.n	8008e24 <_dtoa_r+0x23c>
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008db2:	4453      	add	r3, sl
 8008db4:	9307      	str	r3, [sp, #28]
 8008db6:	2300      	movs	r3, #0
 8008db8:	9308      	str	r3, [sp, #32]
 8008dba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008dbc:	2b09      	cmp	r3, #9
 8008dbe:	d869      	bhi.n	8008e94 <_dtoa_r+0x2ac>
 8008dc0:	2b05      	cmp	r3, #5
 8008dc2:	bfc4      	itt	gt
 8008dc4:	3b04      	subgt	r3, #4
 8008dc6:	9320      	strgt	r3, [sp, #128]	; 0x80
 8008dc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008dca:	f1a3 0302 	sub.w	r3, r3, #2
 8008dce:	bfcc      	ite	gt
 8008dd0:	2500      	movgt	r5, #0
 8008dd2:	2501      	movle	r5, #1
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d869      	bhi.n	8008eac <_dtoa_r+0x2c4>
 8008dd8:	e8df f003 	tbb	[pc, r3]
 8008ddc:	5a4c4e2c 	.word	0x5a4c4e2c
 8008de0:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008de4:	441d      	add	r5, r3
 8008de6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	bfc1      	itttt	gt
 8008dee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008df2:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008df6:	fa09 f303 	lslgt.w	r3, r9, r3
 8008dfa:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008dfe:	bfda      	itte	le
 8008e00:	f1c3 0320 	rsble	r3, r3, #32
 8008e04:	fa06 f003 	lslle.w	r0, r6, r3
 8008e08:	4318      	orrgt	r0, r3
 8008e0a:	f7f7 fbdb 	bl	80005c4 <__aeabi_ui2d>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4606      	mov	r6, r0
 8008e12:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e16:	3d01      	subs	r5, #1
 8008e18:	9310      	str	r3, [sp, #64]	; 0x40
 8008e1a:	e771      	b.n	8008d00 <_dtoa_r+0x118>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e7b6      	b.n	8008d8e <_dtoa_r+0x1a6>
 8008e20:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e22:	e7b5      	b.n	8008d90 <_dtoa_r+0x1a8>
 8008e24:	f1ca 0300 	rsb	r3, sl, #0
 8008e28:	9308      	str	r3, [sp, #32]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	eba8 080a 	sub.w	r8, r8, sl
 8008e30:	930e      	str	r3, [sp, #56]	; 0x38
 8008e32:	e7c2      	b.n	8008dba <_dtoa_r+0x1d2>
 8008e34:	2300      	movs	r3, #0
 8008e36:	930c      	str	r3, [sp, #48]	; 0x30
 8008e38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dc39      	bgt.n	8008eb2 <_dtoa_r+0x2ca>
 8008e3e:	f04f 0901 	mov.w	r9, #1
 8008e42:	f8cd 9018 	str.w	r9, [sp, #24]
 8008e46:	464b      	mov	r3, r9
 8008e48:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8008e4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e4e:	2200      	movs	r2, #0
 8008e50:	6042      	str	r2, [r0, #4]
 8008e52:	2204      	movs	r2, #4
 8008e54:	f102 0614 	add.w	r6, r2, #20
 8008e58:	429e      	cmp	r6, r3
 8008e5a:	6841      	ldr	r1, [r0, #4]
 8008e5c:	d94e      	bls.n	8008efc <_dtoa_r+0x314>
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 fcba 	bl	80097d8 <_Balloc>
 8008e64:	9003      	str	r0, [sp, #12]
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d14c      	bne.n	8008f04 <_dtoa_r+0x31c>
 8008e6a:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <_dtoa_r+0x310>)
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e72:	e6cf      	b.n	8008c14 <_dtoa_r+0x2c>
 8008e74:	2301      	movs	r3, #1
 8008e76:	e7de      	b.n	8008e36 <_dtoa_r+0x24e>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	930c      	str	r3, [sp, #48]	; 0x30
 8008e7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e7e:	eb0a 0903 	add.w	r9, sl, r3
 8008e82:	f109 0301 	add.w	r3, r9, #1
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	9306      	str	r3, [sp, #24]
 8008e8a:	bfb8      	it	lt
 8008e8c:	2301      	movlt	r3, #1
 8008e8e:	e7dd      	b.n	8008e4c <_dtoa_r+0x264>
 8008e90:	2301      	movs	r3, #1
 8008e92:	e7f2      	b.n	8008e7a <_dtoa_r+0x292>
 8008e94:	2501      	movs	r5, #1
 8008e96:	2300      	movs	r3, #0
 8008e98:	9320      	str	r3, [sp, #128]	; 0x80
 8008e9a:	950c      	str	r5, [sp, #48]	; 0x30
 8008e9c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8cd 9018 	str.w	r9, [sp, #24]
 8008ea6:	2312      	movs	r3, #18
 8008ea8:	9221      	str	r2, [sp, #132]	; 0x84
 8008eaa:	e7cf      	b.n	8008e4c <_dtoa_r+0x264>
 8008eac:	2301      	movs	r3, #1
 8008eae:	930c      	str	r3, [sp, #48]	; 0x30
 8008eb0:	e7f4      	b.n	8008e9c <_dtoa_r+0x2b4>
 8008eb2:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8008eb6:	f8cd 9018 	str.w	r9, [sp, #24]
 8008eba:	464b      	mov	r3, r9
 8008ebc:	e7c6      	b.n	8008e4c <_dtoa_r+0x264>
 8008ebe:	bf00      	nop
 8008ec0:	636f4361 	.word	0x636f4361
 8008ec4:	3fd287a7 	.word	0x3fd287a7
 8008ec8:	8b60c8b3 	.word	0x8b60c8b3
 8008ecc:	3fc68a28 	.word	0x3fc68a28
 8008ed0:	509f79fb 	.word	0x509f79fb
 8008ed4:	3fd34413 	.word	0x3fd34413
 8008ed8:	0800b459 	.word	0x0800b459
 8008edc:	0800b470 	.word	0x0800b470
 8008ee0:	7ff00000 	.word	0x7ff00000
 8008ee4:	0800b455 	.word	0x0800b455
 8008ee8:	0800b44c 	.word	0x0800b44c
 8008eec:	0800b429 	.word	0x0800b429
 8008ef0:	3ff80000 	.word	0x3ff80000
 8008ef4:	0800b568 	.word	0x0800b568
 8008ef8:	0800b4cf 	.word	0x0800b4cf
 8008efc:	3101      	adds	r1, #1
 8008efe:	6041      	str	r1, [r0, #4]
 8008f00:	0052      	lsls	r2, r2, #1
 8008f02:	e7a7      	b.n	8008e54 <_dtoa_r+0x26c>
 8008f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f06:	9a03      	ldr	r2, [sp, #12]
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	9b06      	ldr	r3, [sp, #24]
 8008f0c:	2b0e      	cmp	r3, #14
 8008f0e:	f200 80ad 	bhi.w	800906c <_dtoa_r+0x484>
 8008f12:	2d00      	cmp	r5, #0
 8008f14:	f000 80aa 	beq.w	800906c <_dtoa_r+0x484>
 8008f18:	f1ba 0f00 	cmp.w	sl, #0
 8008f1c:	dd36      	ble.n	8008f8c <_dtoa_r+0x3a4>
 8008f1e:	4ac3      	ldr	r2, [pc, #780]	; (800922c <_dtoa_r+0x644>)
 8008f20:	f00a 030f 	and.w	r3, sl, #15
 8008f24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f28:	ed93 7b00 	vldr	d7, [r3]
 8008f2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008f30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008f34:	eeb0 8a47 	vmov.f32	s16, s14
 8008f38:	eef0 8a67 	vmov.f32	s17, s15
 8008f3c:	d016      	beq.n	8008f6c <_dtoa_r+0x384>
 8008f3e:	4bbc      	ldr	r3, [pc, #752]	; (8009230 <_dtoa_r+0x648>)
 8008f40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f48:	f7f7 fce0 	bl	800090c <__aeabi_ddiv>
 8008f4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f50:	f007 070f 	and.w	r7, r7, #15
 8008f54:	2503      	movs	r5, #3
 8008f56:	4eb6      	ldr	r6, [pc, #728]	; (8009230 <_dtoa_r+0x648>)
 8008f58:	b957      	cbnz	r7, 8008f70 <_dtoa_r+0x388>
 8008f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f5e:	ec53 2b18 	vmov	r2, r3, d8
 8008f62:	f7f7 fcd3 	bl	800090c <__aeabi_ddiv>
 8008f66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f6a:	e029      	b.n	8008fc0 <_dtoa_r+0x3d8>
 8008f6c:	2502      	movs	r5, #2
 8008f6e:	e7f2      	b.n	8008f56 <_dtoa_r+0x36e>
 8008f70:	07f9      	lsls	r1, r7, #31
 8008f72:	d508      	bpl.n	8008f86 <_dtoa_r+0x39e>
 8008f74:	ec51 0b18 	vmov	r0, r1, d8
 8008f78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f7c:	f7f7 fb9c 	bl	80006b8 <__aeabi_dmul>
 8008f80:	ec41 0b18 	vmov	d8, r0, r1
 8008f84:	3501      	adds	r5, #1
 8008f86:	107f      	asrs	r7, r7, #1
 8008f88:	3608      	adds	r6, #8
 8008f8a:	e7e5      	b.n	8008f58 <_dtoa_r+0x370>
 8008f8c:	f000 80a6 	beq.w	80090dc <_dtoa_r+0x4f4>
 8008f90:	f1ca 0600 	rsb	r6, sl, #0
 8008f94:	4ba5      	ldr	r3, [pc, #660]	; (800922c <_dtoa_r+0x644>)
 8008f96:	4fa6      	ldr	r7, [pc, #664]	; (8009230 <_dtoa_r+0x648>)
 8008f98:	f006 020f 	and.w	r2, r6, #15
 8008f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008fa8:	f7f7 fb86 	bl	80006b8 <__aeabi_dmul>
 8008fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fb0:	1136      	asrs	r6, r6, #4
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2502      	movs	r5, #2
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	f040 8085 	bne.w	80090c6 <_dtoa_r+0x4de>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1d2      	bne.n	8008f66 <_dtoa_r+0x37e>
 8008fc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 808c 	beq.w	80090e0 <_dtoa_r+0x4f8>
 8008fc8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8008fcc:	4b99      	ldr	r3, [pc, #612]	; (8009234 <_dtoa_r+0x64c>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	f7f7 fde2 	bl	8000b9c <__aeabi_dcmplt>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	f000 8081 	beq.w	80090e0 <_dtoa_r+0x4f8>
 8008fde:	9b06      	ldr	r3, [sp, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d07d      	beq.n	80090e0 <_dtoa_r+0x4f8>
 8008fe4:	f1b9 0f00 	cmp.w	r9, #0
 8008fe8:	dd3c      	ble.n	8009064 <_dtoa_r+0x47c>
 8008fea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008fee:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	4b91      	ldr	r3, [pc, #580]	; (8009238 <_dtoa_r+0x650>)
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 fb5e 	bl	80006b8 <__aeabi_dmul>
 8008ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009000:	3501      	adds	r5, #1
 8009002:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8009006:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800900a:	4628      	mov	r0, r5
 800900c:	f7f7 faea 	bl	80005e4 <__aeabi_i2d>
 8009010:	4632      	mov	r2, r6
 8009012:	463b      	mov	r3, r7
 8009014:	f7f7 fb50 	bl	80006b8 <__aeabi_dmul>
 8009018:	4b88      	ldr	r3, [pc, #544]	; (800923c <_dtoa_r+0x654>)
 800901a:	2200      	movs	r2, #0
 800901c:	f7f7 f996 	bl	800034c <__adddf3>
 8009020:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800902c:	2b00      	cmp	r3, #0
 800902e:	d15c      	bne.n	80090ea <_dtoa_r+0x502>
 8009030:	4b83      	ldr	r3, [pc, #524]	; (8009240 <_dtoa_r+0x658>)
 8009032:	2200      	movs	r2, #0
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	f7f7 f986 	bl	8000348 <__aeabi_dsub>
 800903c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009040:	4606      	mov	r6, r0
 8009042:	460f      	mov	r7, r1
 8009044:	f7f7 fdc8 	bl	8000bd8 <__aeabi_dcmpgt>
 8009048:	2800      	cmp	r0, #0
 800904a:	f040 8296 	bne.w	800957a <_dtoa_r+0x992>
 800904e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009052:	4630      	mov	r0, r6
 8009054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009058:	4639      	mov	r1, r7
 800905a:	f7f7 fd9f 	bl	8000b9c <__aeabi_dcmplt>
 800905e:	2800      	cmp	r0, #0
 8009060:	f040 8288 	bne.w	8009574 <_dtoa_r+0x98c>
 8009064:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009068:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800906c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800906e:	2b00      	cmp	r3, #0
 8009070:	f2c0 8158 	blt.w	8009324 <_dtoa_r+0x73c>
 8009074:	f1ba 0f0e 	cmp.w	sl, #14
 8009078:	f300 8154 	bgt.w	8009324 <_dtoa_r+0x73c>
 800907c:	4b6b      	ldr	r3, [pc, #428]	; (800922c <_dtoa_r+0x644>)
 800907e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009082:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009088:	2b00      	cmp	r3, #0
 800908a:	f280 80e3 	bge.w	8009254 <_dtoa_r+0x66c>
 800908e:	9b06      	ldr	r3, [sp, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f300 80df 	bgt.w	8009254 <_dtoa_r+0x66c>
 8009096:	f040 826d 	bne.w	8009574 <_dtoa_r+0x98c>
 800909a:	4b69      	ldr	r3, [pc, #420]	; (8009240 <_dtoa_r+0x658>)
 800909c:	2200      	movs	r2, #0
 800909e:	4640      	mov	r0, r8
 80090a0:	4649      	mov	r1, r9
 80090a2:	f7f7 fb09 	bl	80006b8 <__aeabi_dmul>
 80090a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090aa:	f7f7 fd8b 	bl	8000bc4 <__aeabi_dcmpge>
 80090ae:	9e06      	ldr	r6, [sp, #24]
 80090b0:	4637      	mov	r7, r6
 80090b2:	2800      	cmp	r0, #0
 80090b4:	f040 8243 	bne.w	800953e <_dtoa_r+0x956>
 80090b8:	9d03      	ldr	r5, [sp, #12]
 80090ba:	2331      	movs	r3, #49	; 0x31
 80090bc:	f805 3b01 	strb.w	r3, [r5], #1
 80090c0:	f10a 0a01 	add.w	sl, sl, #1
 80090c4:	e23f      	b.n	8009546 <_dtoa_r+0x95e>
 80090c6:	07f2      	lsls	r2, r6, #31
 80090c8:	d505      	bpl.n	80090d6 <_dtoa_r+0x4ee>
 80090ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ce:	f7f7 faf3 	bl	80006b8 <__aeabi_dmul>
 80090d2:	3501      	adds	r5, #1
 80090d4:	2301      	movs	r3, #1
 80090d6:	1076      	asrs	r6, r6, #1
 80090d8:	3708      	adds	r7, #8
 80090da:	e76c      	b.n	8008fb6 <_dtoa_r+0x3ce>
 80090dc:	2502      	movs	r5, #2
 80090de:	e76f      	b.n	8008fc0 <_dtoa_r+0x3d8>
 80090e0:	9b06      	ldr	r3, [sp, #24]
 80090e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80090e6:	930d      	str	r3, [sp, #52]	; 0x34
 80090e8:	e78d      	b.n	8009006 <_dtoa_r+0x41e>
 80090ea:	9903      	ldr	r1, [sp, #12]
 80090ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80090ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090f0:	4b4e      	ldr	r3, [pc, #312]	; (800922c <_dtoa_r+0x644>)
 80090f2:	ed9d 7b04 	vldr	d7, [sp, #16]
 80090f6:	4401      	add	r1, r0
 80090f8:	9104      	str	r1, [sp, #16]
 80090fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090fc:	eeb0 8a47 	vmov.f32	s16, s14
 8009100:	eef0 8a67 	vmov.f32	s17, s15
 8009104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009108:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800910c:	2900      	cmp	r1, #0
 800910e:	d045      	beq.n	800919c <_dtoa_r+0x5b4>
 8009110:	494c      	ldr	r1, [pc, #304]	; (8009244 <_dtoa_r+0x65c>)
 8009112:	2000      	movs	r0, #0
 8009114:	f7f7 fbfa 	bl	800090c <__aeabi_ddiv>
 8009118:	ec53 2b18 	vmov	r2, r3, d8
 800911c:	f7f7 f914 	bl	8000348 <__aeabi_dsub>
 8009120:	9d03      	ldr	r5, [sp, #12]
 8009122:	ec41 0b18 	vmov	d8, r0, r1
 8009126:	4639      	mov	r1, r7
 8009128:	4630      	mov	r0, r6
 800912a:	f7f7 fd75 	bl	8000c18 <__aeabi_d2iz>
 800912e:	900d      	str	r0, [sp, #52]	; 0x34
 8009130:	f7f7 fa58 	bl	80005e4 <__aeabi_i2d>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4630      	mov	r0, r6
 800913a:	4639      	mov	r1, r7
 800913c:	f7f7 f904 	bl	8000348 <__aeabi_dsub>
 8009140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009142:	3330      	adds	r3, #48	; 0x30
 8009144:	f805 3b01 	strb.w	r3, [r5], #1
 8009148:	ec53 2b18 	vmov	r2, r3, d8
 800914c:	4606      	mov	r6, r0
 800914e:	460f      	mov	r7, r1
 8009150:	f7f7 fd24 	bl	8000b9c <__aeabi_dcmplt>
 8009154:	2800      	cmp	r0, #0
 8009156:	d165      	bne.n	8009224 <_dtoa_r+0x63c>
 8009158:	4632      	mov	r2, r6
 800915a:	463b      	mov	r3, r7
 800915c:	4935      	ldr	r1, [pc, #212]	; (8009234 <_dtoa_r+0x64c>)
 800915e:	2000      	movs	r0, #0
 8009160:	f7f7 f8f2 	bl	8000348 <__aeabi_dsub>
 8009164:	ec53 2b18 	vmov	r2, r3, d8
 8009168:	f7f7 fd18 	bl	8000b9c <__aeabi_dcmplt>
 800916c:	2800      	cmp	r0, #0
 800916e:	f040 80b9 	bne.w	80092e4 <_dtoa_r+0x6fc>
 8009172:	9b04      	ldr	r3, [sp, #16]
 8009174:	429d      	cmp	r5, r3
 8009176:	f43f af75 	beq.w	8009064 <_dtoa_r+0x47c>
 800917a:	4b2f      	ldr	r3, [pc, #188]	; (8009238 <_dtoa_r+0x650>)
 800917c:	ec51 0b18 	vmov	r0, r1, d8
 8009180:	2200      	movs	r2, #0
 8009182:	f7f7 fa99 	bl	80006b8 <__aeabi_dmul>
 8009186:	4b2c      	ldr	r3, [pc, #176]	; (8009238 <_dtoa_r+0x650>)
 8009188:	ec41 0b18 	vmov	d8, r0, r1
 800918c:	2200      	movs	r2, #0
 800918e:	4630      	mov	r0, r6
 8009190:	4639      	mov	r1, r7
 8009192:	f7f7 fa91 	bl	80006b8 <__aeabi_dmul>
 8009196:	4606      	mov	r6, r0
 8009198:	460f      	mov	r7, r1
 800919a:	e7c4      	b.n	8009126 <_dtoa_r+0x53e>
 800919c:	ec51 0b17 	vmov	r0, r1, d7
 80091a0:	f7f7 fa8a 	bl	80006b8 <__aeabi_dmul>
 80091a4:	9b04      	ldr	r3, [sp, #16]
 80091a6:	9d03      	ldr	r5, [sp, #12]
 80091a8:	930d      	str	r3, [sp, #52]	; 0x34
 80091aa:	ec41 0b18 	vmov	d8, r0, r1
 80091ae:	4639      	mov	r1, r7
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7f7 fd31 	bl	8000c18 <__aeabi_d2iz>
 80091b6:	9011      	str	r0, [sp, #68]	; 0x44
 80091b8:	f7f7 fa14 	bl	80005e4 <__aeabi_i2d>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 f8c0 	bl	8000348 <__aeabi_dsub>
 80091c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091ca:	3330      	adds	r3, #48	; 0x30
 80091cc:	f805 3b01 	strb.w	r3, [r5], #1
 80091d0:	9b04      	ldr	r3, [sp, #16]
 80091d2:	429d      	cmp	r5, r3
 80091d4:	4606      	mov	r6, r0
 80091d6:	460f      	mov	r7, r1
 80091d8:	f04f 0200 	mov.w	r2, #0
 80091dc:	d134      	bne.n	8009248 <_dtoa_r+0x660>
 80091de:	4b19      	ldr	r3, [pc, #100]	; (8009244 <_dtoa_r+0x65c>)
 80091e0:	ec51 0b18 	vmov	r0, r1, d8
 80091e4:	f7f7 f8b2 	bl	800034c <__adddf3>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4630      	mov	r0, r6
 80091ee:	4639      	mov	r1, r7
 80091f0:	f7f7 fcf2 	bl	8000bd8 <__aeabi_dcmpgt>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d175      	bne.n	80092e4 <_dtoa_r+0x6fc>
 80091f8:	ec53 2b18 	vmov	r2, r3, d8
 80091fc:	4911      	ldr	r1, [pc, #68]	; (8009244 <_dtoa_r+0x65c>)
 80091fe:	2000      	movs	r0, #0
 8009200:	f7f7 f8a2 	bl	8000348 <__aeabi_dsub>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4630      	mov	r0, r6
 800920a:	4639      	mov	r1, r7
 800920c:	f7f7 fcc6 	bl	8000b9c <__aeabi_dcmplt>
 8009210:	2800      	cmp	r0, #0
 8009212:	f43f af27 	beq.w	8009064 <_dtoa_r+0x47c>
 8009216:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009218:	1e6b      	subs	r3, r5, #1
 800921a:	930d      	str	r3, [sp, #52]	; 0x34
 800921c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009220:	2b30      	cmp	r3, #48	; 0x30
 8009222:	d0f8      	beq.n	8009216 <_dtoa_r+0x62e>
 8009224:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009228:	e04a      	b.n	80092c0 <_dtoa_r+0x6d8>
 800922a:	bf00      	nop
 800922c:	0800b568 	.word	0x0800b568
 8009230:	0800b540 	.word	0x0800b540
 8009234:	3ff00000 	.word	0x3ff00000
 8009238:	40240000 	.word	0x40240000
 800923c:	401c0000 	.word	0x401c0000
 8009240:	40140000 	.word	0x40140000
 8009244:	3fe00000 	.word	0x3fe00000
 8009248:	4baf      	ldr	r3, [pc, #700]	; (8009508 <_dtoa_r+0x920>)
 800924a:	f7f7 fa35 	bl	80006b8 <__aeabi_dmul>
 800924e:	4606      	mov	r6, r0
 8009250:	460f      	mov	r7, r1
 8009252:	e7ac      	b.n	80091ae <_dtoa_r+0x5c6>
 8009254:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009258:	9d03      	ldr	r5, [sp, #12]
 800925a:	4642      	mov	r2, r8
 800925c:	464b      	mov	r3, r9
 800925e:	4630      	mov	r0, r6
 8009260:	4639      	mov	r1, r7
 8009262:	f7f7 fb53 	bl	800090c <__aeabi_ddiv>
 8009266:	f7f7 fcd7 	bl	8000c18 <__aeabi_d2iz>
 800926a:	9004      	str	r0, [sp, #16]
 800926c:	f7f7 f9ba 	bl	80005e4 <__aeabi_i2d>
 8009270:	4642      	mov	r2, r8
 8009272:	464b      	mov	r3, r9
 8009274:	f7f7 fa20 	bl	80006b8 <__aeabi_dmul>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4630      	mov	r0, r6
 800927e:	4639      	mov	r1, r7
 8009280:	f7f7 f862 	bl	8000348 <__aeabi_dsub>
 8009284:	9e04      	ldr	r6, [sp, #16]
 8009286:	9f06      	ldr	r7, [sp, #24]
 8009288:	3630      	adds	r6, #48	; 0x30
 800928a:	f805 6b01 	strb.w	r6, [r5], #1
 800928e:	9e03      	ldr	r6, [sp, #12]
 8009290:	1bae      	subs	r6, r5, r6
 8009292:	42b7      	cmp	r7, r6
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	d137      	bne.n	800930a <_dtoa_r+0x722>
 800929a:	f7f7 f857 	bl	800034c <__adddf3>
 800929e:	4642      	mov	r2, r8
 80092a0:	464b      	mov	r3, r9
 80092a2:	4606      	mov	r6, r0
 80092a4:	460f      	mov	r7, r1
 80092a6:	f7f7 fc97 	bl	8000bd8 <__aeabi_dcmpgt>
 80092aa:	b9c8      	cbnz	r0, 80092e0 <_dtoa_r+0x6f8>
 80092ac:	4642      	mov	r2, r8
 80092ae:	464b      	mov	r3, r9
 80092b0:	4630      	mov	r0, r6
 80092b2:	4639      	mov	r1, r7
 80092b4:	f7f7 fc68 	bl	8000b88 <__aeabi_dcmpeq>
 80092b8:	b110      	cbz	r0, 80092c0 <_dtoa_r+0x6d8>
 80092ba:	9b04      	ldr	r3, [sp, #16]
 80092bc:	07d9      	lsls	r1, r3, #31
 80092be:	d40f      	bmi.n	80092e0 <_dtoa_r+0x6f8>
 80092c0:	4620      	mov	r0, r4
 80092c2:	4659      	mov	r1, fp
 80092c4:	f000 fac8 	bl	8009858 <_Bfree>
 80092c8:	2300      	movs	r3, #0
 80092ca:	702b      	strb	r3, [r5, #0]
 80092cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092ce:	f10a 0001 	add.w	r0, sl, #1
 80092d2:	6018      	str	r0, [r3, #0]
 80092d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f43f acd5 	beq.w	8008c86 <_dtoa_r+0x9e>
 80092dc:	601d      	str	r5, [r3, #0]
 80092de:	e4d2      	b.n	8008c86 <_dtoa_r+0x9e>
 80092e0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80092e4:	462b      	mov	r3, r5
 80092e6:	461d      	mov	r5, r3
 80092e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092ec:	2a39      	cmp	r2, #57	; 0x39
 80092ee:	d108      	bne.n	8009302 <_dtoa_r+0x71a>
 80092f0:	9a03      	ldr	r2, [sp, #12]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d1f7      	bne.n	80092e6 <_dtoa_r+0x6fe>
 80092f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f8:	9903      	ldr	r1, [sp, #12]
 80092fa:	3201      	adds	r2, #1
 80092fc:	9209      	str	r2, [sp, #36]	; 0x24
 80092fe:	2230      	movs	r2, #48	; 0x30
 8009300:	700a      	strb	r2, [r1, #0]
 8009302:	781a      	ldrb	r2, [r3, #0]
 8009304:	3201      	adds	r2, #1
 8009306:	701a      	strb	r2, [r3, #0]
 8009308:	e78c      	b.n	8009224 <_dtoa_r+0x63c>
 800930a:	4b7f      	ldr	r3, [pc, #508]	; (8009508 <_dtoa_r+0x920>)
 800930c:	2200      	movs	r2, #0
 800930e:	f7f7 f9d3 	bl	80006b8 <__aeabi_dmul>
 8009312:	2200      	movs	r2, #0
 8009314:	2300      	movs	r3, #0
 8009316:	4606      	mov	r6, r0
 8009318:	460f      	mov	r7, r1
 800931a:	f7f7 fc35 	bl	8000b88 <__aeabi_dcmpeq>
 800931e:	2800      	cmp	r0, #0
 8009320:	d09b      	beq.n	800925a <_dtoa_r+0x672>
 8009322:	e7cd      	b.n	80092c0 <_dtoa_r+0x6d8>
 8009324:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009326:	2a00      	cmp	r2, #0
 8009328:	f000 80c4 	beq.w	80094b4 <_dtoa_r+0x8cc>
 800932c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800932e:	2a01      	cmp	r2, #1
 8009330:	f300 80a8 	bgt.w	8009484 <_dtoa_r+0x89c>
 8009334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009336:	2a00      	cmp	r2, #0
 8009338:	f000 80a0 	beq.w	800947c <_dtoa_r+0x894>
 800933c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009340:	9e08      	ldr	r6, [sp, #32]
 8009342:	4645      	mov	r5, r8
 8009344:	9a07      	ldr	r2, [sp, #28]
 8009346:	2101      	movs	r1, #1
 8009348:	441a      	add	r2, r3
 800934a:	4620      	mov	r0, r4
 800934c:	4498      	add	r8, r3
 800934e:	9207      	str	r2, [sp, #28]
 8009350:	f000 fb3e 	bl	80099d0 <__i2b>
 8009354:	4607      	mov	r7, r0
 8009356:	2d00      	cmp	r5, #0
 8009358:	dd0b      	ble.n	8009372 <_dtoa_r+0x78a>
 800935a:	9b07      	ldr	r3, [sp, #28]
 800935c:	2b00      	cmp	r3, #0
 800935e:	dd08      	ble.n	8009372 <_dtoa_r+0x78a>
 8009360:	42ab      	cmp	r3, r5
 8009362:	9a07      	ldr	r2, [sp, #28]
 8009364:	bfa8      	it	ge
 8009366:	462b      	movge	r3, r5
 8009368:	eba8 0803 	sub.w	r8, r8, r3
 800936c:	1aed      	subs	r5, r5, r3
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	9307      	str	r3, [sp, #28]
 8009372:	9b08      	ldr	r3, [sp, #32]
 8009374:	b1fb      	cbz	r3, 80093b6 <_dtoa_r+0x7ce>
 8009376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 809f 	beq.w	80094bc <_dtoa_r+0x8d4>
 800937e:	2e00      	cmp	r6, #0
 8009380:	dd11      	ble.n	80093a6 <_dtoa_r+0x7be>
 8009382:	4639      	mov	r1, r7
 8009384:	4632      	mov	r2, r6
 8009386:	4620      	mov	r0, r4
 8009388:	f000 fbde 	bl	8009b48 <__pow5mult>
 800938c:	465a      	mov	r2, fp
 800938e:	4601      	mov	r1, r0
 8009390:	4607      	mov	r7, r0
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fb32 	bl	80099fc <__multiply>
 8009398:	4659      	mov	r1, fp
 800939a:	9009      	str	r0, [sp, #36]	; 0x24
 800939c:	4620      	mov	r0, r4
 800939e:	f000 fa5b 	bl	8009858 <_Bfree>
 80093a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a4:	469b      	mov	fp, r3
 80093a6:	9b08      	ldr	r3, [sp, #32]
 80093a8:	1b9a      	subs	r2, r3, r6
 80093aa:	d004      	beq.n	80093b6 <_dtoa_r+0x7ce>
 80093ac:	4659      	mov	r1, fp
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 fbca 	bl	8009b48 <__pow5mult>
 80093b4:	4683      	mov	fp, r0
 80093b6:	2101      	movs	r1, #1
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fb09 	bl	80099d0 <__i2b>
 80093be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	4606      	mov	r6, r0
 80093c4:	dd7c      	ble.n	80094c0 <_dtoa_r+0x8d8>
 80093c6:	461a      	mov	r2, r3
 80093c8:	4601      	mov	r1, r0
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 fbbc 	bl	8009b48 <__pow5mult>
 80093d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	4606      	mov	r6, r0
 80093d6:	dd76      	ble.n	80094c6 <_dtoa_r+0x8de>
 80093d8:	2300      	movs	r3, #0
 80093da:	9308      	str	r3, [sp, #32]
 80093dc:	6933      	ldr	r3, [r6, #16]
 80093de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093e2:	6918      	ldr	r0, [r3, #16]
 80093e4:	f000 faa4 	bl	8009930 <__hi0bits>
 80093e8:	f1c0 0020 	rsb	r0, r0, #32
 80093ec:	9b07      	ldr	r3, [sp, #28]
 80093ee:	4418      	add	r0, r3
 80093f0:	f010 001f 	ands.w	r0, r0, #31
 80093f4:	f000 8086 	beq.w	8009504 <_dtoa_r+0x91c>
 80093f8:	f1c0 0320 	rsb	r3, r0, #32
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	dd7f      	ble.n	8009500 <_dtoa_r+0x918>
 8009400:	f1c0 001c 	rsb	r0, r0, #28
 8009404:	9b07      	ldr	r3, [sp, #28]
 8009406:	4403      	add	r3, r0
 8009408:	4480      	add	r8, r0
 800940a:	4405      	add	r5, r0
 800940c:	9307      	str	r3, [sp, #28]
 800940e:	f1b8 0f00 	cmp.w	r8, #0
 8009412:	dd05      	ble.n	8009420 <_dtoa_r+0x838>
 8009414:	4659      	mov	r1, fp
 8009416:	4642      	mov	r2, r8
 8009418:	4620      	mov	r0, r4
 800941a:	f000 fbef 	bl	8009bfc <__lshift>
 800941e:	4683      	mov	fp, r0
 8009420:	9b07      	ldr	r3, [sp, #28]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dd05      	ble.n	8009432 <_dtoa_r+0x84a>
 8009426:	4631      	mov	r1, r6
 8009428:	461a      	mov	r2, r3
 800942a:	4620      	mov	r0, r4
 800942c:	f000 fbe6 	bl	8009bfc <__lshift>
 8009430:	4606      	mov	r6, r0
 8009432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d069      	beq.n	800950c <_dtoa_r+0x924>
 8009438:	4631      	mov	r1, r6
 800943a:	4658      	mov	r0, fp
 800943c:	f000 fc4a 	bl	8009cd4 <__mcmp>
 8009440:	2800      	cmp	r0, #0
 8009442:	da63      	bge.n	800950c <_dtoa_r+0x924>
 8009444:	2300      	movs	r3, #0
 8009446:	4659      	mov	r1, fp
 8009448:	220a      	movs	r2, #10
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fa26 	bl	800989c <__multadd>
 8009450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009452:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009456:	4683      	mov	fp, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 818f 	beq.w	800977c <_dtoa_r+0xb94>
 800945e:	4639      	mov	r1, r7
 8009460:	2300      	movs	r3, #0
 8009462:	220a      	movs	r2, #10
 8009464:	4620      	mov	r0, r4
 8009466:	f000 fa19 	bl	800989c <__multadd>
 800946a:	f1b9 0f00 	cmp.w	r9, #0
 800946e:	4607      	mov	r7, r0
 8009470:	f300 808e 	bgt.w	8009590 <_dtoa_r+0x9a8>
 8009474:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009476:	2b02      	cmp	r3, #2
 8009478:	dc50      	bgt.n	800951c <_dtoa_r+0x934>
 800947a:	e089      	b.n	8009590 <_dtoa_r+0x9a8>
 800947c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800947e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009482:	e75d      	b.n	8009340 <_dtoa_r+0x758>
 8009484:	9b06      	ldr	r3, [sp, #24]
 8009486:	1e5e      	subs	r6, r3, #1
 8009488:	9b08      	ldr	r3, [sp, #32]
 800948a:	42b3      	cmp	r3, r6
 800948c:	bfbf      	itttt	lt
 800948e:	9b08      	ldrlt	r3, [sp, #32]
 8009490:	9608      	strlt	r6, [sp, #32]
 8009492:	1af2      	sublt	r2, r6, r3
 8009494:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009496:	bfb6      	itet	lt
 8009498:	189b      	addlt	r3, r3, r2
 800949a:	1b9e      	subge	r6, r3, r6
 800949c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800949e:	9b06      	ldr	r3, [sp, #24]
 80094a0:	bfb8      	it	lt
 80094a2:	2600      	movlt	r6, #0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bfb5      	itete	lt
 80094a8:	eba8 0503 	sublt.w	r5, r8, r3
 80094ac:	9b06      	ldrge	r3, [sp, #24]
 80094ae:	2300      	movlt	r3, #0
 80094b0:	4645      	movge	r5, r8
 80094b2:	e747      	b.n	8009344 <_dtoa_r+0x75c>
 80094b4:	9e08      	ldr	r6, [sp, #32]
 80094b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80094b8:	4645      	mov	r5, r8
 80094ba:	e74c      	b.n	8009356 <_dtoa_r+0x76e>
 80094bc:	9a08      	ldr	r2, [sp, #32]
 80094be:	e775      	b.n	80093ac <_dtoa_r+0x7c4>
 80094c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	dc18      	bgt.n	80094f8 <_dtoa_r+0x910>
 80094c6:	9b04      	ldr	r3, [sp, #16]
 80094c8:	b9b3      	cbnz	r3, 80094f8 <_dtoa_r+0x910>
 80094ca:	9b05      	ldr	r3, [sp, #20]
 80094cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094d0:	b9a3      	cbnz	r3, 80094fc <_dtoa_r+0x914>
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094d8:	0d1b      	lsrs	r3, r3, #20
 80094da:	051b      	lsls	r3, r3, #20
 80094dc:	b12b      	cbz	r3, 80094ea <_dtoa_r+0x902>
 80094de:	9b07      	ldr	r3, [sp, #28]
 80094e0:	3301      	adds	r3, #1
 80094e2:	9307      	str	r3, [sp, #28]
 80094e4:	f108 0801 	add.w	r8, r8, #1
 80094e8:	2301      	movs	r3, #1
 80094ea:	9308      	str	r3, [sp, #32]
 80094ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f47f af74 	bne.w	80093dc <_dtoa_r+0x7f4>
 80094f4:	2001      	movs	r0, #1
 80094f6:	e779      	b.n	80093ec <_dtoa_r+0x804>
 80094f8:	2300      	movs	r3, #0
 80094fa:	e7f6      	b.n	80094ea <_dtoa_r+0x902>
 80094fc:	9b04      	ldr	r3, [sp, #16]
 80094fe:	e7f4      	b.n	80094ea <_dtoa_r+0x902>
 8009500:	d085      	beq.n	800940e <_dtoa_r+0x826>
 8009502:	4618      	mov	r0, r3
 8009504:	301c      	adds	r0, #28
 8009506:	e77d      	b.n	8009404 <_dtoa_r+0x81c>
 8009508:	40240000 	.word	0x40240000
 800950c:	9b06      	ldr	r3, [sp, #24]
 800950e:	2b00      	cmp	r3, #0
 8009510:	dc38      	bgt.n	8009584 <_dtoa_r+0x99c>
 8009512:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009514:	2b02      	cmp	r3, #2
 8009516:	dd35      	ble.n	8009584 <_dtoa_r+0x99c>
 8009518:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800951c:	f1b9 0f00 	cmp.w	r9, #0
 8009520:	d10d      	bne.n	800953e <_dtoa_r+0x956>
 8009522:	4631      	mov	r1, r6
 8009524:	464b      	mov	r3, r9
 8009526:	2205      	movs	r2, #5
 8009528:	4620      	mov	r0, r4
 800952a:	f000 f9b7 	bl	800989c <__multadd>
 800952e:	4601      	mov	r1, r0
 8009530:	4606      	mov	r6, r0
 8009532:	4658      	mov	r0, fp
 8009534:	f000 fbce 	bl	8009cd4 <__mcmp>
 8009538:	2800      	cmp	r0, #0
 800953a:	f73f adbd 	bgt.w	80090b8 <_dtoa_r+0x4d0>
 800953e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009540:	9d03      	ldr	r5, [sp, #12]
 8009542:	ea6f 0a03 	mvn.w	sl, r3
 8009546:	f04f 0800 	mov.w	r8, #0
 800954a:	4631      	mov	r1, r6
 800954c:	4620      	mov	r0, r4
 800954e:	f000 f983 	bl	8009858 <_Bfree>
 8009552:	2f00      	cmp	r7, #0
 8009554:	f43f aeb4 	beq.w	80092c0 <_dtoa_r+0x6d8>
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	d005      	beq.n	800956a <_dtoa_r+0x982>
 800955e:	45b8      	cmp	r8, r7
 8009560:	d003      	beq.n	800956a <_dtoa_r+0x982>
 8009562:	4641      	mov	r1, r8
 8009564:	4620      	mov	r0, r4
 8009566:	f000 f977 	bl	8009858 <_Bfree>
 800956a:	4639      	mov	r1, r7
 800956c:	4620      	mov	r0, r4
 800956e:	f000 f973 	bl	8009858 <_Bfree>
 8009572:	e6a5      	b.n	80092c0 <_dtoa_r+0x6d8>
 8009574:	2600      	movs	r6, #0
 8009576:	4637      	mov	r7, r6
 8009578:	e7e1      	b.n	800953e <_dtoa_r+0x956>
 800957a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800957c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009580:	4637      	mov	r7, r6
 8009582:	e599      	b.n	80090b8 <_dtoa_r+0x4d0>
 8009584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009586:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 80fd 	beq.w	800978a <_dtoa_r+0xba2>
 8009590:	2d00      	cmp	r5, #0
 8009592:	dd05      	ble.n	80095a0 <_dtoa_r+0x9b8>
 8009594:	4639      	mov	r1, r7
 8009596:	462a      	mov	r2, r5
 8009598:	4620      	mov	r0, r4
 800959a:	f000 fb2f 	bl	8009bfc <__lshift>
 800959e:	4607      	mov	r7, r0
 80095a0:	9b08      	ldr	r3, [sp, #32]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d05c      	beq.n	8009660 <_dtoa_r+0xa78>
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 f915 	bl	80097d8 <_Balloc>
 80095ae:	4605      	mov	r5, r0
 80095b0:	b928      	cbnz	r0, 80095be <_dtoa_r+0x9d6>
 80095b2:	4b80      	ldr	r3, [pc, #512]	; (80097b4 <_dtoa_r+0xbcc>)
 80095b4:	4602      	mov	r2, r0
 80095b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095ba:	f7ff bb2b 	b.w	8008c14 <_dtoa_r+0x2c>
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	3202      	adds	r2, #2
 80095c2:	0092      	lsls	r2, r2, #2
 80095c4:	f107 010c 	add.w	r1, r7, #12
 80095c8:	300c      	adds	r0, #12
 80095ca:	f7fe fddd 	bl	8008188 <memcpy>
 80095ce:	2201      	movs	r2, #1
 80095d0:	4629      	mov	r1, r5
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fb12 	bl	8009bfc <__lshift>
 80095d8:	9b03      	ldr	r3, [sp, #12]
 80095da:	3301      	adds	r3, #1
 80095dc:	9306      	str	r3, [sp, #24]
 80095de:	9b03      	ldr	r3, [sp, #12]
 80095e0:	444b      	add	r3, r9
 80095e2:	9309      	str	r3, [sp, #36]	; 0x24
 80095e4:	9b04      	ldr	r3, [sp, #16]
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	46b8      	mov	r8, r7
 80095ec:	9308      	str	r3, [sp, #32]
 80095ee:	4607      	mov	r7, r0
 80095f0:	9b06      	ldr	r3, [sp, #24]
 80095f2:	4631      	mov	r1, r6
 80095f4:	3b01      	subs	r3, #1
 80095f6:	4658      	mov	r0, fp
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	f7ff fa67 	bl	8008acc <quorem>
 80095fe:	4603      	mov	r3, r0
 8009600:	3330      	adds	r3, #48	; 0x30
 8009602:	9007      	str	r0, [sp, #28]
 8009604:	4641      	mov	r1, r8
 8009606:	4658      	mov	r0, fp
 8009608:	930c      	str	r3, [sp, #48]	; 0x30
 800960a:	f000 fb63 	bl	8009cd4 <__mcmp>
 800960e:	463a      	mov	r2, r7
 8009610:	4681      	mov	r9, r0
 8009612:	4631      	mov	r1, r6
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fb79 	bl	8009d0c <__mdiff>
 800961a:	68c2      	ldr	r2, [r0, #12]
 800961c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800961e:	4605      	mov	r5, r0
 8009620:	bb02      	cbnz	r2, 8009664 <_dtoa_r+0xa7c>
 8009622:	4601      	mov	r1, r0
 8009624:	4658      	mov	r0, fp
 8009626:	f000 fb55 	bl	8009cd4 <__mcmp>
 800962a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800962c:	4602      	mov	r2, r0
 800962e:	4629      	mov	r1, r5
 8009630:	4620      	mov	r0, r4
 8009632:	920a      	str	r2, [sp, #40]	; 0x28
 8009634:	930c      	str	r3, [sp, #48]	; 0x30
 8009636:	f000 f90f 	bl	8009858 <_Bfree>
 800963a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800963c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800963e:	9d06      	ldr	r5, [sp, #24]
 8009640:	ea43 0102 	orr.w	r1, r3, r2
 8009644:	9b08      	ldr	r3, [sp, #32]
 8009646:	430b      	orrs	r3, r1
 8009648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800964a:	d10d      	bne.n	8009668 <_dtoa_r+0xa80>
 800964c:	2b39      	cmp	r3, #57	; 0x39
 800964e:	d029      	beq.n	80096a4 <_dtoa_r+0xabc>
 8009650:	f1b9 0f00 	cmp.w	r9, #0
 8009654:	dd01      	ble.n	800965a <_dtoa_r+0xa72>
 8009656:	9b07      	ldr	r3, [sp, #28]
 8009658:	3331      	adds	r3, #49	; 0x31
 800965a:	9a04      	ldr	r2, [sp, #16]
 800965c:	7013      	strb	r3, [r2, #0]
 800965e:	e774      	b.n	800954a <_dtoa_r+0x962>
 8009660:	4638      	mov	r0, r7
 8009662:	e7b9      	b.n	80095d8 <_dtoa_r+0x9f0>
 8009664:	2201      	movs	r2, #1
 8009666:	e7e2      	b.n	800962e <_dtoa_r+0xa46>
 8009668:	f1b9 0f00 	cmp.w	r9, #0
 800966c:	db06      	blt.n	800967c <_dtoa_r+0xa94>
 800966e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009670:	ea41 0909 	orr.w	r9, r1, r9
 8009674:	9908      	ldr	r1, [sp, #32]
 8009676:	ea59 0101 	orrs.w	r1, r9, r1
 800967a:	d120      	bne.n	80096be <_dtoa_r+0xad6>
 800967c:	2a00      	cmp	r2, #0
 800967e:	ddec      	ble.n	800965a <_dtoa_r+0xa72>
 8009680:	4659      	mov	r1, fp
 8009682:	2201      	movs	r2, #1
 8009684:	4620      	mov	r0, r4
 8009686:	9306      	str	r3, [sp, #24]
 8009688:	f000 fab8 	bl	8009bfc <__lshift>
 800968c:	4631      	mov	r1, r6
 800968e:	4683      	mov	fp, r0
 8009690:	f000 fb20 	bl	8009cd4 <__mcmp>
 8009694:	2800      	cmp	r0, #0
 8009696:	9b06      	ldr	r3, [sp, #24]
 8009698:	dc02      	bgt.n	80096a0 <_dtoa_r+0xab8>
 800969a:	d1de      	bne.n	800965a <_dtoa_r+0xa72>
 800969c:	07da      	lsls	r2, r3, #31
 800969e:	d5dc      	bpl.n	800965a <_dtoa_r+0xa72>
 80096a0:	2b39      	cmp	r3, #57	; 0x39
 80096a2:	d1d8      	bne.n	8009656 <_dtoa_r+0xa6e>
 80096a4:	9a04      	ldr	r2, [sp, #16]
 80096a6:	2339      	movs	r3, #57	; 0x39
 80096a8:	7013      	strb	r3, [r2, #0]
 80096aa:	462b      	mov	r3, r5
 80096ac:	461d      	mov	r5, r3
 80096ae:	3b01      	subs	r3, #1
 80096b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096b4:	2a39      	cmp	r2, #57	; 0x39
 80096b6:	d050      	beq.n	800975a <_dtoa_r+0xb72>
 80096b8:	3201      	adds	r2, #1
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	e745      	b.n	800954a <_dtoa_r+0x962>
 80096be:	2a00      	cmp	r2, #0
 80096c0:	dd03      	ble.n	80096ca <_dtoa_r+0xae2>
 80096c2:	2b39      	cmp	r3, #57	; 0x39
 80096c4:	d0ee      	beq.n	80096a4 <_dtoa_r+0xabc>
 80096c6:	3301      	adds	r3, #1
 80096c8:	e7c7      	b.n	800965a <_dtoa_r+0xa72>
 80096ca:	9a06      	ldr	r2, [sp, #24]
 80096cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80096d2:	428a      	cmp	r2, r1
 80096d4:	d02a      	beq.n	800972c <_dtoa_r+0xb44>
 80096d6:	4659      	mov	r1, fp
 80096d8:	2300      	movs	r3, #0
 80096da:	220a      	movs	r2, #10
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 f8dd 	bl	800989c <__multadd>
 80096e2:	45b8      	cmp	r8, r7
 80096e4:	4683      	mov	fp, r0
 80096e6:	f04f 0300 	mov.w	r3, #0
 80096ea:	f04f 020a 	mov.w	r2, #10
 80096ee:	4641      	mov	r1, r8
 80096f0:	4620      	mov	r0, r4
 80096f2:	d107      	bne.n	8009704 <_dtoa_r+0xb1c>
 80096f4:	f000 f8d2 	bl	800989c <__multadd>
 80096f8:	4680      	mov	r8, r0
 80096fa:	4607      	mov	r7, r0
 80096fc:	9b06      	ldr	r3, [sp, #24]
 80096fe:	3301      	adds	r3, #1
 8009700:	9306      	str	r3, [sp, #24]
 8009702:	e775      	b.n	80095f0 <_dtoa_r+0xa08>
 8009704:	f000 f8ca 	bl	800989c <__multadd>
 8009708:	4639      	mov	r1, r7
 800970a:	4680      	mov	r8, r0
 800970c:	2300      	movs	r3, #0
 800970e:	220a      	movs	r2, #10
 8009710:	4620      	mov	r0, r4
 8009712:	f000 f8c3 	bl	800989c <__multadd>
 8009716:	4607      	mov	r7, r0
 8009718:	e7f0      	b.n	80096fc <_dtoa_r+0xb14>
 800971a:	f1b9 0f00 	cmp.w	r9, #0
 800971e:	9a03      	ldr	r2, [sp, #12]
 8009720:	bfcc      	ite	gt
 8009722:	464d      	movgt	r5, r9
 8009724:	2501      	movle	r5, #1
 8009726:	4415      	add	r5, r2
 8009728:	f04f 0800 	mov.w	r8, #0
 800972c:	4659      	mov	r1, fp
 800972e:	2201      	movs	r2, #1
 8009730:	4620      	mov	r0, r4
 8009732:	9306      	str	r3, [sp, #24]
 8009734:	f000 fa62 	bl	8009bfc <__lshift>
 8009738:	4631      	mov	r1, r6
 800973a:	4683      	mov	fp, r0
 800973c:	f000 faca 	bl	8009cd4 <__mcmp>
 8009740:	2800      	cmp	r0, #0
 8009742:	dcb2      	bgt.n	80096aa <_dtoa_r+0xac2>
 8009744:	d102      	bne.n	800974c <_dtoa_r+0xb64>
 8009746:	9b06      	ldr	r3, [sp, #24]
 8009748:	07db      	lsls	r3, r3, #31
 800974a:	d4ae      	bmi.n	80096aa <_dtoa_r+0xac2>
 800974c:	462b      	mov	r3, r5
 800974e:	461d      	mov	r5, r3
 8009750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009754:	2a30      	cmp	r2, #48	; 0x30
 8009756:	d0fa      	beq.n	800974e <_dtoa_r+0xb66>
 8009758:	e6f7      	b.n	800954a <_dtoa_r+0x962>
 800975a:	9a03      	ldr	r2, [sp, #12]
 800975c:	429a      	cmp	r2, r3
 800975e:	d1a5      	bne.n	80096ac <_dtoa_r+0xac4>
 8009760:	f10a 0a01 	add.w	sl, sl, #1
 8009764:	2331      	movs	r3, #49	; 0x31
 8009766:	e779      	b.n	800965c <_dtoa_r+0xa74>
 8009768:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <_dtoa_r+0xbd0>)
 800976a:	f7ff baac 	b.w	8008cc6 <_dtoa_r+0xde>
 800976e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009770:	2b00      	cmp	r3, #0
 8009772:	f47f aa83 	bne.w	8008c7c <_dtoa_r+0x94>
 8009776:	4b11      	ldr	r3, [pc, #68]	; (80097bc <_dtoa_r+0xbd4>)
 8009778:	f7ff baa5 	b.w	8008cc6 <_dtoa_r+0xde>
 800977c:	f1b9 0f00 	cmp.w	r9, #0
 8009780:	dc03      	bgt.n	800978a <_dtoa_r+0xba2>
 8009782:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009784:	2b02      	cmp	r3, #2
 8009786:	f73f aec9 	bgt.w	800951c <_dtoa_r+0x934>
 800978a:	9d03      	ldr	r5, [sp, #12]
 800978c:	4631      	mov	r1, r6
 800978e:	4658      	mov	r0, fp
 8009790:	f7ff f99c 	bl	8008acc <quorem>
 8009794:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009798:	f805 3b01 	strb.w	r3, [r5], #1
 800979c:	9a03      	ldr	r2, [sp, #12]
 800979e:	1aaa      	subs	r2, r5, r2
 80097a0:	4591      	cmp	r9, r2
 80097a2:	ddba      	ble.n	800971a <_dtoa_r+0xb32>
 80097a4:	4659      	mov	r1, fp
 80097a6:	2300      	movs	r3, #0
 80097a8:	220a      	movs	r2, #10
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 f876 	bl	800989c <__multadd>
 80097b0:	4683      	mov	fp, r0
 80097b2:	e7eb      	b.n	800978c <_dtoa_r+0xba4>
 80097b4:	0800b4cf 	.word	0x0800b4cf
 80097b8:	0800b428 	.word	0x0800b428
 80097bc:	0800b44c 	.word	0x0800b44c

080097c0 <_localeconv_r>:
 80097c0:	4800      	ldr	r0, [pc, #0]	; (80097c4 <_localeconv_r+0x4>)
 80097c2:	4770      	bx	lr
 80097c4:	20000188 	.word	0x20000188

080097c8 <malloc>:
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <malloc+0xc>)
 80097ca:	4601      	mov	r1, r0
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	f000 bbdf 	b.w	8009f90 <_malloc_r>
 80097d2:	bf00      	nop
 80097d4:	20000034 	.word	0x20000034

080097d8 <_Balloc>:
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097dc:	4604      	mov	r4, r0
 80097de:	460d      	mov	r5, r1
 80097e0:	b976      	cbnz	r6, 8009800 <_Balloc+0x28>
 80097e2:	2010      	movs	r0, #16
 80097e4:	f7ff fff0 	bl	80097c8 <malloc>
 80097e8:	4602      	mov	r2, r0
 80097ea:	6260      	str	r0, [r4, #36]	; 0x24
 80097ec:	b920      	cbnz	r0, 80097f8 <_Balloc+0x20>
 80097ee:	4b18      	ldr	r3, [pc, #96]	; (8009850 <_Balloc+0x78>)
 80097f0:	4818      	ldr	r0, [pc, #96]	; (8009854 <_Balloc+0x7c>)
 80097f2:	2166      	movs	r1, #102	; 0x66
 80097f4:	f000 fd92 	bl	800a31c <__assert_func>
 80097f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097fc:	6006      	str	r6, [r0, #0]
 80097fe:	60c6      	str	r6, [r0, #12]
 8009800:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009802:	68f3      	ldr	r3, [r6, #12]
 8009804:	b183      	cbz	r3, 8009828 <_Balloc+0x50>
 8009806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800980e:	b9b8      	cbnz	r0, 8009840 <_Balloc+0x68>
 8009810:	2101      	movs	r1, #1
 8009812:	fa01 f605 	lsl.w	r6, r1, r5
 8009816:	1d72      	adds	r2, r6, #5
 8009818:	0092      	lsls	r2, r2, #2
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fb58 	bl	8009ed0 <_calloc_r>
 8009820:	b160      	cbz	r0, 800983c <_Balloc+0x64>
 8009822:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009826:	e00e      	b.n	8009846 <_Balloc+0x6e>
 8009828:	2221      	movs	r2, #33	; 0x21
 800982a:	2104      	movs	r1, #4
 800982c:	4620      	mov	r0, r4
 800982e:	f000 fb4f 	bl	8009ed0 <_calloc_r>
 8009832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009834:	60f0      	str	r0, [r6, #12]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1e4      	bne.n	8009806 <_Balloc+0x2e>
 800983c:	2000      	movs	r0, #0
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	6802      	ldr	r2, [r0, #0]
 8009842:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009846:	2300      	movs	r3, #0
 8009848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800984c:	e7f7      	b.n	800983e <_Balloc+0x66>
 800984e:	bf00      	nop
 8009850:	0800b459 	.word	0x0800b459
 8009854:	0800b4e0 	.word	0x0800b4e0

08009858 <_Bfree>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800985c:	4605      	mov	r5, r0
 800985e:	460c      	mov	r4, r1
 8009860:	b976      	cbnz	r6, 8009880 <_Bfree+0x28>
 8009862:	2010      	movs	r0, #16
 8009864:	f7ff ffb0 	bl	80097c8 <malloc>
 8009868:	4602      	mov	r2, r0
 800986a:	6268      	str	r0, [r5, #36]	; 0x24
 800986c:	b920      	cbnz	r0, 8009878 <_Bfree+0x20>
 800986e:	4b09      	ldr	r3, [pc, #36]	; (8009894 <_Bfree+0x3c>)
 8009870:	4809      	ldr	r0, [pc, #36]	; (8009898 <_Bfree+0x40>)
 8009872:	218a      	movs	r1, #138	; 0x8a
 8009874:	f000 fd52 	bl	800a31c <__assert_func>
 8009878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800987c:	6006      	str	r6, [r0, #0]
 800987e:	60c6      	str	r6, [r0, #12]
 8009880:	b13c      	cbz	r4, 8009892 <_Bfree+0x3a>
 8009882:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009884:	6862      	ldr	r2, [r4, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800988c:	6021      	str	r1, [r4, #0]
 800988e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009892:	bd70      	pop	{r4, r5, r6, pc}
 8009894:	0800b459 	.word	0x0800b459
 8009898:	0800b4e0 	.word	0x0800b4e0

0800989c <__multadd>:
 800989c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a0:	690e      	ldr	r6, [r1, #16]
 80098a2:	4607      	mov	r7, r0
 80098a4:	4698      	mov	r8, r3
 80098a6:	460c      	mov	r4, r1
 80098a8:	f101 0014 	add.w	r0, r1, #20
 80098ac:	2300      	movs	r3, #0
 80098ae:	6805      	ldr	r5, [r0, #0]
 80098b0:	b2a9      	uxth	r1, r5
 80098b2:	fb02 8101 	mla	r1, r2, r1, r8
 80098b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80098ba:	0c2d      	lsrs	r5, r5, #16
 80098bc:	fb02 c505 	mla	r5, r2, r5, ip
 80098c0:	b289      	uxth	r1, r1
 80098c2:	3301      	adds	r3, #1
 80098c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80098c8:	429e      	cmp	r6, r3
 80098ca:	f840 1b04 	str.w	r1, [r0], #4
 80098ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80098d2:	dcec      	bgt.n	80098ae <__multadd+0x12>
 80098d4:	f1b8 0f00 	cmp.w	r8, #0
 80098d8:	d022      	beq.n	8009920 <__multadd+0x84>
 80098da:	68a3      	ldr	r3, [r4, #8]
 80098dc:	42b3      	cmp	r3, r6
 80098de:	dc19      	bgt.n	8009914 <__multadd+0x78>
 80098e0:	6861      	ldr	r1, [r4, #4]
 80098e2:	4638      	mov	r0, r7
 80098e4:	3101      	adds	r1, #1
 80098e6:	f7ff ff77 	bl	80097d8 <_Balloc>
 80098ea:	4605      	mov	r5, r0
 80098ec:	b928      	cbnz	r0, 80098fa <__multadd+0x5e>
 80098ee:	4602      	mov	r2, r0
 80098f0:	4b0d      	ldr	r3, [pc, #52]	; (8009928 <__multadd+0x8c>)
 80098f2:	480e      	ldr	r0, [pc, #56]	; (800992c <__multadd+0x90>)
 80098f4:	21b5      	movs	r1, #181	; 0xb5
 80098f6:	f000 fd11 	bl	800a31c <__assert_func>
 80098fa:	6922      	ldr	r2, [r4, #16]
 80098fc:	3202      	adds	r2, #2
 80098fe:	f104 010c 	add.w	r1, r4, #12
 8009902:	0092      	lsls	r2, r2, #2
 8009904:	300c      	adds	r0, #12
 8009906:	f7fe fc3f 	bl	8008188 <memcpy>
 800990a:	4621      	mov	r1, r4
 800990c:	4638      	mov	r0, r7
 800990e:	f7ff ffa3 	bl	8009858 <_Bfree>
 8009912:	462c      	mov	r4, r5
 8009914:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009918:	3601      	adds	r6, #1
 800991a:	f8c3 8014 	str.w	r8, [r3, #20]
 800991e:	6126      	str	r6, [r4, #16]
 8009920:	4620      	mov	r0, r4
 8009922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009926:	bf00      	nop
 8009928:	0800b4cf 	.word	0x0800b4cf
 800992c:	0800b4e0 	.word	0x0800b4e0

08009930 <__hi0bits>:
 8009930:	0c03      	lsrs	r3, r0, #16
 8009932:	041b      	lsls	r3, r3, #16
 8009934:	b9d3      	cbnz	r3, 800996c <__hi0bits+0x3c>
 8009936:	0400      	lsls	r0, r0, #16
 8009938:	2310      	movs	r3, #16
 800993a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800993e:	bf04      	itt	eq
 8009940:	0200      	lsleq	r0, r0, #8
 8009942:	3308      	addeq	r3, #8
 8009944:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009948:	bf04      	itt	eq
 800994a:	0100      	lsleq	r0, r0, #4
 800994c:	3304      	addeq	r3, #4
 800994e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009952:	bf04      	itt	eq
 8009954:	0080      	lsleq	r0, r0, #2
 8009956:	3302      	addeq	r3, #2
 8009958:	2800      	cmp	r0, #0
 800995a:	db05      	blt.n	8009968 <__hi0bits+0x38>
 800995c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009960:	f103 0301 	add.w	r3, r3, #1
 8009964:	bf08      	it	eq
 8009966:	2320      	moveq	r3, #32
 8009968:	4618      	mov	r0, r3
 800996a:	4770      	bx	lr
 800996c:	2300      	movs	r3, #0
 800996e:	e7e4      	b.n	800993a <__hi0bits+0xa>

08009970 <__lo0bits>:
 8009970:	6803      	ldr	r3, [r0, #0]
 8009972:	f013 0207 	ands.w	r2, r3, #7
 8009976:	4601      	mov	r1, r0
 8009978:	d00b      	beq.n	8009992 <__lo0bits+0x22>
 800997a:	07da      	lsls	r2, r3, #31
 800997c:	d424      	bmi.n	80099c8 <__lo0bits+0x58>
 800997e:	0798      	lsls	r0, r3, #30
 8009980:	bf49      	itett	mi
 8009982:	085b      	lsrmi	r3, r3, #1
 8009984:	089b      	lsrpl	r3, r3, #2
 8009986:	2001      	movmi	r0, #1
 8009988:	600b      	strmi	r3, [r1, #0]
 800998a:	bf5c      	itt	pl
 800998c:	600b      	strpl	r3, [r1, #0]
 800998e:	2002      	movpl	r0, #2
 8009990:	4770      	bx	lr
 8009992:	b298      	uxth	r0, r3
 8009994:	b9b0      	cbnz	r0, 80099c4 <__lo0bits+0x54>
 8009996:	0c1b      	lsrs	r3, r3, #16
 8009998:	2010      	movs	r0, #16
 800999a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800999e:	bf04      	itt	eq
 80099a0:	0a1b      	lsreq	r3, r3, #8
 80099a2:	3008      	addeq	r0, #8
 80099a4:	071a      	lsls	r2, r3, #28
 80099a6:	bf04      	itt	eq
 80099a8:	091b      	lsreq	r3, r3, #4
 80099aa:	3004      	addeq	r0, #4
 80099ac:	079a      	lsls	r2, r3, #30
 80099ae:	bf04      	itt	eq
 80099b0:	089b      	lsreq	r3, r3, #2
 80099b2:	3002      	addeq	r0, #2
 80099b4:	07da      	lsls	r2, r3, #31
 80099b6:	d403      	bmi.n	80099c0 <__lo0bits+0x50>
 80099b8:	085b      	lsrs	r3, r3, #1
 80099ba:	f100 0001 	add.w	r0, r0, #1
 80099be:	d005      	beq.n	80099cc <__lo0bits+0x5c>
 80099c0:	600b      	str	r3, [r1, #0]
 80099c2:	4770      	bx	lr
 80099c4:	4610      	mov	r0, r2
 80099c6:	e7e8      	b.n	800999a <__lo0bits+0x2a>
 80099c8:	2000      	movs	r0, #0
 80099ca:	4770      	bx	lr
 80099cc:	2020      	movs	r0, #32
 80099ce:	4770      	bx	lr

080099d0 <__i2b>:
 80099d0:	b510      	push	{r4, lr}
 80099d2:	460c      	mov	r4, r1
 80099d4:	2101      	movs	r1, #1
 80099d6:	f7ff feff 	bl	80097d8 <_Balloc>
 80099da:	4602      	mov	r2, r0
 80099dc:	b928      	cbnz	r0, 80099ea <__i2b+0x1a>
 80099de:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <__i2b+0x24>)
 80099e0:	4805      	ldr	r0, [pc, #20]	; (80099f8 <__i2b+0x28>)
 80099e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099e6:	f000 fc99 	bl	800a31c <__assert_func>
 80099ea:	2301      	movs	r3, #1
 80099ec:	6144      	str	r4, [r0, #20]
 80099ee:	6103      	str	r3, [r0, #16]
 80099f0:	bd10      	pop	{r4, pc}
 80099f2:	bf00      	nop
 80099f4:	0800b4cf 	.word	0x0800b4cf
 80099f8:	0800b4e0 	.word	0x0800b4e0

080099fc <__multiply>:
 80099fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a00:	4614      	mov	r4, r2
 8009a02:	690a      	ldr	r2, [r1, #16]
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	bfb8      	it	lt
 8009a0a:	460b      	movlt	r3, r1
 8009a0c:	460d      	mov	r5, r1
 8009a0e:	bfbc      	itt	lt
 8009a10:	4625      	movlt	r5, r4
 8009a12:	461c      	movlt	r4, r3
 8009a14:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a18:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a1c:	68ab      	ldr	r3, [r5, #8]
 8009a1e:	6869      	ldr	r1, [r5, #4]
 8009a20:	eb0a 0709 	add.w	r7, sl, r9
 8009a24:	42bb      	cmp	r3, r7
 8009a26:	b085      	sub	sp, #20
 8009a28:	bfb8      	it	lt
 8009a2a:	3101      	addlt	r1, #1
 8009a2c:	f7ff fed4 	bl	80097d8 <_Balloc>
 8009a30:	b930      	cbnz	r0, 8009a40 <__multiply+0x44>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4b42      	ldr	r3, [pc, #264]	; (8009b40 <__multiply+0x144>)
 8009a36:	4843      	ldr	r0, [pc, #268]	; (8009b44 <__multiply+0x148>)
 8009a38:	f240 115d 	movw	r1, #349	; 0x15d
 8009a3c:	f000 fc6e 	bl	800a31c <__assert_func>
 8009a40:	f100 0614 	add.w	r6, r0, #20
 8009a44:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a48:	4633      	mov	r3, r6
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	4543      	cmp	r3, r8
 8009a4e:	d31e      	bcc.n	8009a8e <__multiply+0x92>
 8009a50:	f105 0c14 	add.w	ip, r5, #20
 8009a54:	f104 0314 	add.w	r3, r4, #20
 8009a58:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a5c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a60:	9202      	str	r2, [sp, #8]
 8009a62:	ebac 0205 	sub.w	r2, ip, r5
 8009a66:	3a15      	subs	r2, #21
 8009a68:	f022 0203 	bic.w	r2, r2, #3
 8009a6c:	3204      	adds	r2, #4
 8009a6e:	f105 0115 	add.w	r1, r5, #21
 8009a72:	458c      	cmp	ip, r1
 8009a74:	bf38      	it	cc
 8009a76:	2204      	movcc	r2, #4
 8009a78:	9201      	str	r2, [sp, #4]
 8009a7a:	9a02      	ldr	r2, [sp, #8]
 8009a7c:	9303      	str	r3, [sp, #12]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d808      	bhi.n	8009a94 <__multiply+0x98>
 8009a82:	2f00      	cmp	r7, #0
 8009a84:	dc55      	bgt.n	8009b32 <__multiply+0x136>
 8009a86:	6107      	str	r7, [r0, #16]
 8009a88:	b005      	add	sp, #20
 8009a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8e:	f843 2b04 	str.w	r2, [r3], #4
 8009a92:	e7db      	b.n	8009a4c <__multiply+0x50>
 8009a94:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a98:	f1ba 0f00 	cmp.w	sl, #0
 8009a9c:	d020      	beq.n	8009ae0 <__multiply+0xe4>
 8009a9e:	f105 0e14 	add.w	lr, r5, #20
 8009aa2:	46b1      	mov	r9, r6
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009aaa:	f8d9 b000 	ldr.w	fp, [r9]
 8009aae:	b2a1      	uxth	r1, r4
 8009ab0:	fa1f fb8b 	uxth.w	fp, fp
 8009ab4:	fb0a b101 	mla	r1, sl, r1, fp
 8009ab8:	4411      	add	r1, r2
 8009aba:	f8d9 2000 	ldr.w	r2, [r9]
 8009abe:	0c24      	lsrs	r4, r4, #16
 8009ac0:	0c12      	lsrs	r2, r2, #16
 8009ac2:	fb0a 2404 	mla	r4, sl, r4, r2
 8009ac6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009aca:	b289      	uxth	r1, r1
 8009acc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ad0:	45f4      	cmp	ip, lr
 8009ad2:	f849 1b04 	str.w	r1, [r9], #4
 8009ad6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009ada:	d8e4      	bhi.n	8009aa6 <__multiply+0xaa>
 8009adc:	9901      	ldr	r1, [sp, #4]
 8009ade:	5072      	str	r2, [r6, r1]
 8009ae0:	9a03      	ldr	r2, [sp, #12]
 8009ae2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	f1b9 0f00 	cmp.w	r9, #0
 8009aec:	d01f      	beq.n	8009b2e <__multiply+0x132>
 8009aee:	6834      	ldr	r4, [r6, #0]
 8009af0:	f105 0114 	add.w	r1, r5, #20
 8009af4:	46b6      	mov	lr, r6
 8009af6:	f04f 0a00 	mov.w	sl, #0
 8009afa:	880a      	ldrh	r2, [r1, #0]
 8009afc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b00:	fb09 b202 	mla	r2, r9, r2, fp
 8009b04:	4492      	add	sl, r2
 8009b06:	b2a4      	uxth	r4, r4
 8009b08:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b0c:	f84e 4b04 	str.w	r4, [lr], #4
 8009b10:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b14:	f8be 2000 	ldrh.w	r2, [lr]
 8009b18:	0c24      	lsrs	r4, r4, #16
 8009b1a:	fb09 2404 	mla	r4, r9, r4, r2
 8009b1e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b22:	458c      	cmp	ip, r1
 8009b24:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b28:	d8e7      	bhi.n	8009afa <__multiply+0xfe>
 8009b2a:	9a01      	ldr	r2, [sp, #4]
 8009b2c:	50b4      	str	r4, [r6, r2]
 8009b2e:	3604      	adds	r6, #4
 8009b30:	e7a3      	b.n	8009a7a <__multiply+0x7e>
 8009b32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1a5      	bne.n	8009a86 <__multiply+0x8a>
 8009b3a:	3f01      	subs	r7, #1
 8009b3c:	e7a1      	b.n	8009a82 <__multiply+0x86>
 8009b3e:	bf00      	nop
 8009b40:	0800b4cf 	.word	0x0800b4cf
 8009b44:	0800b4e0 	.word	0x0800b4e0

08009b48 <__pow5mult>:
 8009b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b4c:	4615      	mov	r5, r2
 8009b4e:	f012 0203 	ands.w	r2, r2, #3
 8009b52:	4606      	mov	r6, r0
 8009b54:	460f      	mov	r7, r1
 8009b56:	d007      	beq.n	8009b68 <__pow5mult+0x20>
 8009b58:	4c25      	ldr	r4, [pc, #148]	; (8009bf0 <__pow5mult+0xa8>)
 8009b5a:	3a01      	subs	r2, #1
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b62:	f7ff fe9b 	bl	800989c <__multadd>
 8009b66:	4607      	mov	r7, r0
 8009b68:	10ad      	asrs	r5, r5, #2
 8009b6a:	d03d      	beq.n	8009be8 <__pow5mult+0xa0>
 8009b6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b6e:	b97c      	cbnz	r4, 8009b90 <__pow5mult+0x48>
 8009b70:	2010      	movs	r0, #16
 8009b72:	f7ff fe29 	bl	80097c8 <malloc>
 8009b76:	4602      	mov	r2, r0
 8009b78:	6270      	str	r0, [r6, #36]	; 0x24
 8009b7a:	b928      	cbnz	r0, 8009b88 <__pow5mult+0x40>
 8009b7c:	4b1d      	ldr	r3, [pc, #116]	; (8009bf4 <__pow5mult+0xac>)
 8009b7e:	481e      	ldr	r0, [pc, #120]	; (8009bf8 <__pow5mult+0xb0>)
 8009b80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b84:	f000 fbca 	bl	800a31c <__assert_func>
 8009b88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b8c:	6004      	str	r4, [r0, #0]
 8009b8e:	60c4      	str	r4, [r0, #12]
 8009b90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b98:	b94c      	cbnz	r4, 8009bae <__pow5mult+0x66>
 8009b9a:	f240 2171 	movw	r1, #625	; 0x271
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f7ff ff16 	bl	80099d0 <__i2b>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009baa:	4604      	mov	r4, r0
 8009bac:	6003      	str	r3, [r0, #0]
 8009bae:	f04f 0900 	mov.w	r9, #0
 8009bb2:	07eb      	lsls	r3, r5, #31
 8009bb4:	d50a      	bpl.n	8009bcc <__pow5mult+0x84>
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff ff1e 	bl	80099fc <__multiply>
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	4680      	mov	r8, r0
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff fe47 	bl	8009858 <_Bfree>
 8009bca:	4647      	mov	r7, r8
 8009bcc:	106d      	asrs	r5, r5, #1
 8009bce:	d00b      	beq.n	8009be8 <__pow5mult+0xa0>
 8009bd0:	6820      	ldr	r0, [r4, #0]
 8009bd2:	b938      	cbnz	r0, 8009be4 <__pow5mult+0x9c>
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f7ff ff0f 	bl	80099fc <__multiply>
 8009bde:	6020      	str	r0, [r4, #0]
 8009be0:	f8c0 9000 	str.w	r9, [r0]
 8009be4:	4604      	mov	r4, r0
 8009be6:	e7e4      	b.n	8009bb2 <__pow5mult+0x6a>
 8009be8:	4638      	mov	r0, r7
 8009bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bee:	bf00      	nop
 8009bf0:	0800b630 	.word	0x0800b630
 8009bf4:	0800b459 	.word	0x0800b459
 8009bf8:	0800b4e0 	.word	0x0800b4e0

08009bfc <__lshift>:
 8009bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c00:	460c      	mov	r4, r1
 8009c02:	6849      	ldr	r1, [r1, #4]
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c0a:	68a3      	ldr	r3, [r4, #8]
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	4691      	mov	r9, r2
 8009c10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c14:	f108 0601 	add.w	r6, r8, #1
 8009c18:	42b3      	cmp	r3, r6
 8009c1a:	db0b      	blt.n	8009c34 <__lshift+0x38>
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f7ff fddb 	bl	80097d8 <_Balloc>
 8009c22:	4605      	mov	r5, r0
 8009c24:	b948      	cbnz	r0, 8009c3a <__lshift+0x3e>
 8009c26:	4602      	mov	r2, r0
 8009c28:	4b28      	ldr	r3, [pc, #160]	; (8009ccc <__lshift+0xd0>)
 8009c2a:	4829      	ldr	r0, [pc, #164]	; (8009cd0 <__lshift+0xd4>)
 8009c2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c30:	f000 fb74 	bl	800a31c <__assert_func>
 8009c34:	3101      	adds	r1, #1
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	e7ee      	b.n	8009c18 <__lshift+0x1c>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f100 0114 	add.w	r1, r0, #20
 8009c40:	f100 0210 	add.w	r2, r0, #16
 8009c44:	4618      	mov	r0, r3
 8009c46:	4553      	cmp	r3, sl
 8009c48:	db33      	blt.n	8009cb2 <__lshift+0xb6>
 8009c4a:	6920      	ldr	r0, [r4, #16]
 8009c4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c50:	f104 0314 	add.w	r3, r4, #20
 8009c54:	f019 091f 	ands.w	r9, r9, #31
 8009c58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c60:	d02b      	beq.n	8009cba <__lshift+0xbe>
 8009c62:	f1c9 0e20 	rsb	lr, r9, #32
 8009c66:	468a      	mov	sl, r1
 8009c68:	2200      	movs	r2, #0
 8009c6a:	6818      	ldr	r0, [r3, #0]
 8009c6c:	fa00 f009 	lsl.w	r0, r0, r9
 8009c70:	4302      	orrs	r2, r0
 8009c72:	f84a 2b04 	str.w	r2, [sl], #4
 8009c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c7a:	459c      	cmp	ip, r3
 8009c7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c80:	d8f3      	bhi.n	8009c6a <__lshift+0x6e>
 8009c82:	ebac 0304 	sub.w	r3, ip, r4
 8009c86:	3b15      	subs	r3, #21
 8009c88:	f023 0303 	bic.w	r3, r3, #3
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	f104 0015 	add.w	r0, r4, #21
 8009c92:	4584      	cmp	ip, r0
 8009c94:	bf38      	it	cc
 8009c96:	2304      	movcc	r3, #4
 8009c98:	50ca      	str	r2, [r1, r3]
 8009c9a:	b10a      	cbz	r2, 8009ca0 <__lshift+0xa4>
 8009c9c:	f108 0602 	add.w	r6, r8, #2
 8009ca0:	3e01      	subs	r6, #1
 8009ca2:	4638      	mov	r0, r7
 8009ca4:	612e      	str	r6, [r5, #16]
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	f7ff fdd6 	bl	8009858 <_Bfree>
 8009cac:	4628      	mov	r0, r5
 8009cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	e7c5      	b.n	8009c46 <__lshift+0x4a>
 8009cba:	3904      	subs	r1, #4
 8009cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cc4:	459c      	cmp	ip, r3
 8009cc6:	d8f9      	bhi.n	8009cbc <__lshift+0xc0>
 8009cc8:	e7ea      	b.n	8009ca0 <__lshift+0xa4>
 8009cca:	bf00      	nop
 8009ccc:	0800b4cf 	.word	0x0800b4cf
 8009cd0:	0800b4e0 	.word	0x0800b4e0

08009cd4 <__mcmp>:
 8009cd4:	b530      	push	{r4, r5, lr}
 8009cd6:	6902      	ldr	r2, [r0, #16]
 8009cd8:	690c      	ldr	r4, [r1, #16]
 8009cda:	1b12      	subs	r2, r2, r4
 8009cdc:	d10e      	bne.n	8009cfc <__mcmp+0x28>
 8009cde:	f100 0314 	add.w	r3, r0, #20
 8009ce2:	3114      	adds	r1, #20
 8009ce4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ce8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009cec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009cf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009cf4:	42a5      	cmp	r5, r4
 8009cf6:	d003      	beq.n	8009d00 <__mcmp+0x2c>
 8009cf8:	d305      	bcc.n	8009d06 <__mcmp+0x32>
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	bd30      	pop	{r4, r5, pc}
 8009d00:	4283      	cmp	r3, r0
 8009d02:	d3f3      	bcc.n	8009cec <__mcmp+0x18>
 8009d04:	e7fa      	b.n	8009cfc <__mcmp+0x28>
 8009d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d0a:	e7f7      	b.n	8009cfc <__mcmp+0x28>

08009d0c <__mdiff>:
 8009d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d10:	460c      	mov	r4, r1
 8009d12:	4606      	mov	r6, r0
 8009d14:	4611      	mov	r1, r2
 8009d16:	4620      	mov	r0, r4
 8009d18:	4617      	mov	r7, r2
 8009d1a:	f7ff ffdb 	bl	8009cd4 <__mcmp>
 8009d1e:	1e05      	subs	r5, r0, #0
 8009d20:	d110      	bne.n	8009d44 <__mdiff+0x38>
 8009d22:	4629      	mov	r1, r5
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7ff fd57 	bl	80097d8 <_Balloc>
 8009d2a:	b930      	cbnz	r0, 8009d3a <__mdiff+0x2e>
 8009d2c:	4b39      	ldr	r3, [pc, #228]	; (8009e14 <__mdiff+0x108>)
 8009d2e:	4602      	mov	r2, r0
 8009d30:	f240 2132 	movw	r1, #562	; 0x232
 8009d34:	4838      	ldr	r0, [pc, #224]	; (8009e18 <__mdiff+0x10c>)
 8009d36:	f000 faf1 	bl	800a31c <__assert_func>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d44:	bfa4      	itt	ge
 8009d46:	463b      	movge	r3, r7
 8009d48:	4627      	movge	r7, r4
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	6879      	ldr	r1, [r7, #4]
 8009d4e:	bfa6      	itte	ge
 8009d50:	461c      	movge	r4, r3
 8009d52:	2500      	movge	r5, #0
 8009d54:	2501      	movlt	r5, #1
 8009d56:	f7ff fd3f 	bl	80097d8 <_Balloc>
 8009d5a:	b920      	cbnz	r0, 8009d66 <__mdiff+0x5a>
 8009d5c:	4b2d      	ldr	r3, [pc, #180]	; (8009e14 <__mdiff+0x108>)
 8009d5e:	4602      	mov	r2, r0
 8009d60:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d64:	e7e6      	b.n	8009d34 <__mdiff+0x28>
 8009d66:	693e      	ldr	r6, [r7, #16]
 8009d68:	60c5      	str	r5, [r0, #12]
 8009d6a:	6925      	ldr	r5, [r4, #16]
 8009d6c:	f107 0114 	add.w	r1, r7, #20
 8009d70:	f104 0914 	add.w	r9, r4, #20
 8009d74:	f100 0e14 	add.w	lr, r0, #20
 8009d78:	f107 0210 	add.w	r2, r7, #16
 8009d7c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d80:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d84:	46f2      	mov	sl, lr
 8009d86:	2700      	movs	r7, #0
 8009d88:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d90:	fa1f f883 	uxth.w	r8, r3
 8009d94:	fa17 f78b 	uxtah	r7, r7, fp
 8009d98:	0c1b      	lsrs	r3, r3, #16
 8009d9a:	eba7 0808 	sub.w	r8, r7, r8
 8009d9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009da2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009da6:	fa1f f888 	uxth.w	r8, r8
 8009daa:	141f      	asrs	r7, r3, #16
 8009dac:	454d      	cmp	r5, r9
 8009dae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009db2:	f84a 3b04 	str.w	r3, [sl], #4
 8009db6:	d8e7      	bhi.n	8009d88 <__mdiff+0x7c>
 8009db8:	1b2b      	subs	r3, r5, r4
 8009dba:	3b15      	subs	r3, #21
 8009dbc:	f023 0303 	bic.w	r3, r3, #3
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	3415      	adds	r4, #21
 8009dc4:	42a5      	cmp	r5, r4
 8009dc6:	bf38      	it	cc
 8009dc8:	2304      	movcc	r3, #4
 8009dca:	4419      	add	r1, r3
 8009dcc:	4473      	add	r3, lr
 8009dce:	469e      	mov	lr, r3
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	4565      	cmp	r5, ip
 8009dd4:	d30e      	bcc.n	8009df4 <__mdiff+0xe8>
 8009dd6:	f10c 0203 	add.w	r2, ip, #3
 8009dda:	1a52      	subs	r2, r2, r1
 8009ddc:	f022 0203 	bic.w	r2, r2, #3
 8009de0:	3903      	subs	r1, #3
 8009de2:	458c      	cmp	ip, r1
 8009de4:	bf38      	it	cc
 8009de6:	2200      	movcc	r2, #0
 8009de8:	441a      	add	r2, r3
 8009dea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009dee:	b17b      	cbz	r3, 8009e10 <__mdiff+0x104>
 8009df0:	6106      	str	r6, [r0, #16]
 8009df2:	e7a5      	b.n	8009d40 <__mdiff+0x34>
 8009df4:	f855 8b04 	ldr.w	r8, [r5], #4
 8009df8:	fa17 f488 	uxtah	r4, r7, r8
 8009dfc:	1422      	asrs	r2, r4, #16
 8009dfe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009e02:	b2a4      	uxth	r4, r4
 8009e04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e08:	f84e 4b04 	str.w	r4, [lr], #4
 8009e0c:	1417      	asrs	r7, r2, #16
 8009e0e:	e7e0      	b.n	8009dd2 <__mdiff+0xc6>
 8009e10:	3e01      	subs	r6, #1
 8009e12:	e7ea      	b.n	8009dea <__mdiff+0xde>
 8009e14:	0800b4cf 	.word	0x0800b4cf
 8009e18:	0800b4e0 	.word	0x0800b4e0

08009e1c <__d2b>:
 8009e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e20:	2101      	movs	r1, #1
 8009e22:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 8009e26:	4690      	mov	r8, r2
 8009e28:	4699      	mov	r9, r3
 8009e2a:	f7ff fcd5 	bl	80097d8 <_Balloc>
 8009e2e:	4604      	mov	r4, r0
 8009e30:	b930      	cbnz	r0, 8009e40 <__d2b+0x24>
 8009e32:	4602      	mov	r2, r0
 8009e34:	4b24      	ldr	r3, [pc, #144]	; (8009ec8 <__d2b+0xac>)
 8009e36:	4825      	ldr	r0, [pc, #148]	; (8009ecc <__d2b+0xb0>)
 8009e38:	f240 310a 	movw	r1, #778	; 0x30a
 8009e3c:	f000 fa6e 	bl	800a31c <__assert_func>
 8009e40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009e44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e48:	bb2d      	cbnz	r5, 8009e96 <__d2b+0x7a>
 8009e4a:	f1b8 0200 	subs.w	r2, r8, #0
 8009e4e:	9301      	str	r3, [sp, #4]
 8009e50:	d026      	beq.n	8009ea0 <__d2b+0x84>
 8009e52:	4668      	mov	r0, sp
 8009e54:	9200      	str	r2, [sp, #0]
 8009e56:	f7ff fd8b 	bl	8009970 <__lo0bits>
 8009e5a:	9900      	ldr	r1, [sp, #0]
 8009e5c:	b1f0      	cbz	r0, 8009e9c <__d2b+0x80>
 8009e5e:	9a01      	ldr	r2, [sp, #4]
 8009e60:	f1c0 0320 	rsb	r3, r0, #32
 8009e64:	fa02 f303 	lsl.w	r3, r2, r3
 8009e68:	430b      	orrs	r3, r1
 8009e6a:	40c2      	lsrs	r2, r0
 8009e6c:	6163      	str	r3, [r4, #20]
 8009e6e:	9201      	str	r2, [sp, #4]
 8009e70:	9b01      	ldr	r3, [sp, #4]
 8009e72:	61a3      	str	r3, [r4, #24]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bf14      	ite	ne
 8009e78:	2202      	movne	r2, #2
 8009e7a:	2201      	moveq	r2, #1
 8009e7c:	6122      	str	r2, [r4, #16]
 8009e7e:	b1c5      	cbz	r5, 8009eb2 <__d2b+0x96>
 8009e80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e84:	4405      	add	r5, r0
 8009e86:	603d      	str	r5, [r7, #0]
 8009e88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e8c:	6030      	str	r0, [r6, #0]
 8009e8e:	4620      	mov	r0, r4
 8009e90:	b003      	add	sp, #12
 8009e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e9a:	e7d6      	b.n	8009e4a <__d2b+0x2e>
 8009e9c:	6161      	str	r1, [r4, #20]
 8009e9e:	e7e7      	b.n	8009e70 <__d2b+0x54>
 8009ea0:	a801      	add	r0, sp, #4
 8009ea2:	f7ff fd65 	bl	8009970 <__lo0bits>
 8009ea6:	9b01      	ldr	r3, [sp, #4]
 8009ea8:	6163      	str	r3, [r4, #20]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	6122      	str	r2, [r4, #16]
 8009eae:	3020      	adds	r0, #32
 8009eb0:	e7e5      	b.n	8009e7e <__d2b+0x62>
 8009eb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009eb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009eba:	6038      	str	r0, [r7, #0]
 8009ebc:	6918      	ldr	r0, [r3, #16]
 8009ebe:	f7ff fd37 	bl	8009930 <__hi0bits>
 8009ec2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ec6:	e7e1      	b.n	8009e8c <__d2b+0x70>
 8009ec8:	0800b4cf 	.word	0x0800b4cf
 8009ecc:	0800b4e0 	.word	0x0800b4e0

08009ed0 <_calloc_r>:
 8009ed0:	b513      	push	{r0, r1, r4, lr}
 8009ed2:	434a      	muls	r2, r1
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	9201      	str	r2, [sp, #4]
 8009ed8:	f000 f85a 	bl	8009f90 <_malloc_r>
 8009edc:	4604      	mov	r4, r0
 8009ede:	b118      	cbz	r0, 8009ee8 <_calloc_r+0x18>
 8009ee0:	9a01      	ldr	r2, [sp, #4]
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	f7fe f95e 	bl	80081a4 <memset>
 8009ee8:	4620      	mov	r0, r4
 8009eea:	b002      	add	sp, #8
 8009eec:	bd10      	pop	{r4, pc}
	...

08009ef0 <_free_r>:
 8009ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ef2:	2900      	cmp	r1, #0
 8009ef4:	d048      	beq.n	8009f88 <_free_r+0x98>
 8009ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009efa:	9001      	str	r0, [sp, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f1a1 0404 	sub.w	r4, r1, #4
 8009f02:	bfb8      	it	lt
 8009f04:	18e4      	addlt	r4, r4, r3
 8009f06:	f000 fa65 	bl	800a3d4 <__malloc_lock>
 8009f0a:	4a20      	ldr	r2, [pc, #128]	; (8009f8c <_free_r+0x9c>)
 8009f0c:	9801      	ldr	r0, [sp, #4]
 8009f0e:	6813      	ldr	r3, [r2, #0]
 8009f10:	4615      	mov	r5, r2
 8009f12:	b933      	cbnz	r3, 8009f22 <_free_r+0x32>
 8009f14:	6063      	str	r3, [r4, #4]
 8009f16:	6014      	str	r4, [r2, #0]
 8009f18:	b003      	add	sp, #12
 8009f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f1e:	f000 ba5f 	b.w	800a3e0 <__malloc_unlock>
 8009f22:	42a3      	cmp	r3, r4
 8009f24:	d90b      	bls.n	8009f3e <_free_r+0x4e>
 8009f26:	6821      	ldr	r1, [r4, #0]
 8009f28:	1862      	adds	r2, r4, r1
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	bf04      	itt	eq
 8009f2e:	681a      	ldreq	r2, [r3, #0]
 8009f30:	685b      	ldreq	r3, [r3, #4]
 8009f32:	6063      	str	r3, [r4, #4]
 8009f34:	bf04      	itt	eq
 8009f36:	1852      	addeq	r2, r2, r1
 8009f38:	6022      	streq	r2, [r4, #0]
 8009f3a:	602c      	str	r4, [r5, #0]
 8009f3c:	e7ec      	b.n	8009f18 <_free_r+0x28>
 8009f3e:	461a      	mov	r2, r3
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	b10b      	cbz	r3, 8009f48 <_free_r+0x58>
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	d9fa      	bls.n	8009f3e <_free_r+0x4e>
 8009f48:	6811      	ldr	r1, [r2, #0]
 8009f4a:	1855      	adds	r5, r2, r1
 8009f4c:	42a5      	cmp	r5, r4
 8009f4e:	d10b      	bne.n	8009f68 <_free_r+0x78>
 8009f50:	6824      	ldr	r4, [r4, #0]
 8009f52:	4421      	add	r1, r4
 8009f54:	1854      	adds	r4, r2, r1
 8009f56:	42a3      	cmp	r3, r4
 8009f58:	6011      	str	r1, [r2, #0]
 8009f5a:	d1dd      	bne.n	8009f18 <_free_r+0x28>
 8009f5c:	681c      	ldr	r4, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	6053      	str	r3, [r2, #4]
 8009f62:	4421      	add	r1, r4
 8009f64:	6011      	str	r1, [r2, #0]
 8009f66:	e7d7      	b.n	8009f18 <_free_r+0x28>
 8009f68:	d902      	bls.n	8009f70 <_free_r+0x80>
 8009f6a:	230c      	movs	r3, #12
 8009f6c:	6003      	str	r3, [r0, #0]
 8009f6e:	e7d3      	b.n	8009f18 <_free_r+0x28>
 8009f70:	6825      	ldr	r5, [r4, #0]
 8009f72:	1961      	adds	r1, r4, r5
 8009f74:	428b      	cmp	r3, r1
 8009f76:	bf04      	itt	eq
 8009f78:	6819      	ldreq	r1, [r3, #0]
 8009f7a:	685b      	ldreq	r3, [r3, #4]
 8009f7c:	6063      	str	r3, [r4, #4]
 8009f7e:	bf04      	itt	eq
 8009f80:	1949      	addeq	r1, r1, r5
 8009f82:	6021      	streq	r1, [r4, #0]
 8009f84:	6054      	str	r4, [r2, #4]
 8009f86:	e7c7      	b.n	8009f18 <_free_r+0x28>
 8009f88:	b003      	add	sp, #12
 8009f8a:	bd30      	pop	{r4, r5, pc}
 8009f8c:	20013560 	.word	0x20013560

08009f90 <_malloc_r>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	1ccd      	adds	r5, r1, #3
 8009f94:	f025 0503 	bic.w	r5, r5, #3
 8009f98:	3508      	adds	r5, #8
 8009f9a:	2d0c      	cmp	r5, #12
 8009f9c:	bf38      	it	cc
 8009f9e:	250c      	movcc	r5, #12
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	db01      	blt.n	8009faa <_malloc_r+0x1a>
 8009fa6:	42a9      	cmp	r1, r5
 8009fa8:	d903      	bls.n	8009fb2 <_malloc_r+0x22>
 8009faa:	230c      	movs	r3, #12
 8009fac:	6033      	str	r3, [r6, #0]
 8009fae:	2000      	movs	r0, #0
 8009fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb2:	f000 fa0f 	bl	800a3d4 <__malloc_lock>
 8009fb6:	4921      	ldr	r1, [pc, #132]	; (800a03c <_malloc_r+0xac>)
 8009fb8:	680a      	ldr	r2, [r1, #0]
 8009fba:	4614      	mov	r4, r2
 8009fbc:	b99c      	cbnz	r4, 8009fe6 <_malloc_r+0x56>
 8009fbe:	4f20      	ldr	r7, [pc, #128]	; (800a040 <_malloc_r+0xb0>)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	b923      	cbnz	r3, 8009fce <_malloc_r+0x3e>
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f000 f998 	bl	800a2fc <_sbrk_r>
 8009fcc:	6038      	str	r0, [r7, #0]
 8009fce:	4629      	mov	r1, r5
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f000 f993 	bl	800a2fc <_sbrk_r>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d123      	bne.n	800a022 <_malloc_r+0x92>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f000 f9fe 	bl	800a3e0 <__malloc_unlock>
 8009fe4:	e7e3      	b.n	8009fae <_malloc_r+0x1e>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	1b5b      	subs	r3, r3, r5
 8009fea:	d417      	bmi.n	800a01c <_malloc_r+0x8c>
 8009fec:	2b0b      	cmp	r3, #11
 8009fee:	d903      	bls.n	8009ff8 <_malloc_r+0x68>
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	441c      	add	r4, r3
 8009ff4:	6025      	str	r5, [r4, #0]
 8009ff6:	e004      	b.n	800a002 <_malloc_r+0x72>
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	42a2      	cmp	r2, r4
 8009ffc:	bf0c      	ite	eq
 8009ffe:	600b      	streq	r3, [r1, #0]
 800a000:	6053      	strne	r3, [r2, #4]
 800a002:	4630      	mov	r0, r6
 800a004:	f000 f9ec 	bl	800a3e0 <__malloc_unlock>
 800a008:	f104 000b 	add.w	r0, r4, #11
 800a00c:	1d23      	adds	r3, r4, #4
 800a00e:	f020 0007 	bic.w	r0, r0, #7
 800a012:	1ac2      	subs	r2, r0, r3
 800a014:	d0cc      	beq.n	8009fb0 <_malloc_r+0x20>
 800a016:	1a1b      	subs	r3, r3, r0
 800a018:	50a3      	str	r3, [r4, r2]
 800a01a:	e7c9      	b.n	8009fb0 <_malloc_r+0x20>
 800a01c:	4622      	mov	r2, r4
 800a01e:	6864      	ldr	r4, [r4, #4]
 800a020:	e7cc      	b.n	8009fbc <_malloc_r+0x2c>
 800a022:	1cc4      	adds	r4, r0, #3
 800a024:	f024 0403 	bic.w	r4, r4, #3
 800a028:	42a0      	cmp	r0, r4
 800a02a:	d0e3      	beq.n	8009ff4 <_malloc_r+0x64>
 800a02c:	1a21      	subs	r1, r4, r0
 800a02e:	4630      	mov	r0, r6
 800a030:	f000 f964 	bl	800a2fc <_sbrk_r>
 800a034:	3001      	adds	r0, #1
 800a036:	d1dd      	bne.n	8009ff4 <_malloc_r+0x64>
 800a038:	e7cf      	b.n	8009fda <_malloc_r+0x4a>
 800a03a:	bf00      	nop
 800a03c:	20013560 	.word	0x20013560
 800a040:	20013564 	.word	0x20013564

0800a044 <__ssputs_r>:
 800a044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a048:	688e      	ldr	r6, [r1, #8]
 800a04a:	429e      	cmp	r6, r3
 800a04c:	4682      	mov	sl, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	4690      	mov	r8, r2
 800a052:	461f      	mov	r7, r3
 800a054:	d838      	bhi.n	800a0c8 <__ssputs_r+0x84>
 800a056:	898a      	ldrh	r2, [r1, #12]
 800a058:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a05c:	d032      	beq.n	800a0c4 <__ssputs_r+0x80>
 800a05e:	6825      	ldr	r5, [r4, #0]
 800a060:	6909      	ldr	r1, [r1, #16]
 800a062:	eba5 0901 	sub.w	r9, r5, r1
 800a066:	6965      	ldr	r5, [r4, #20]
 800a068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a06c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a070:	3301      	adds	r3, #1
 800a072:	444b      	add	r3, r9
 800a074:	106d      	asrs	r5, r5, #1
 800a076:	429d      	cmp	r5, r3
 800a078:	bf38      	it	cc
 800a07a:	461d      	movcc	r5, r3
 800a07c:	0553      	lsls	r3, r2, #21
 800a07e:	d531      	bpl.n	800a0e4 <__ssputs_r+0xa0>
 800a080:	4629      	mov	r1, r5
 800a082:	f7ff ff85 	bl	8009f90 <_malloc_r>
 800a086:	4606      	mov	r6, r0
 800a088:	b950      	cbnz	r0, 800a0a0 <__ssputs_r+0x5c>
 800a08a:	230c      	movs	r3, #12
 800a08c:	f8ca 3000 	str.w	r3, [sl]
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a096:	81a3      	strh	r3, [r4, #12]
 800a098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a0:	6921      	ldr	r1, [r4, #16]
 800a0a2:	464a      	mov	r2, r9
 800a0a4:	f7fe f870 	bl	8008188 <memcpy>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	6126      	str	r6, [r4, #16]
 800a0b6:	6165      	str	r5, [r4, #20]
 800a0b8:	444e      	add	r6, r9
 800a0ba:	eba5 0509 	sub.w	r5, r5, r9
 800a0be:	6026      	str	r6, [r4, #0]
 800a0c0:	60a5      	str	r5, [r4, #8]
 800a0c2:	463e      	mov	r6, r7
 800a0c4:	42be      	cmp	r6, r7
 800a0c6:	d900      	bls.n	800a0ca <__ssputs_r+0x86>
 800a0c8:	463e      	mov	r6, r7
 800a0ca:	4632      	mov	r2, r6
 800a0cc:	6820      	ldr	r0, [r4, #0]
 800a0ce:	4641      	mov	r1, r8
 800a0d0:	f000 f966 	bl	800a3a0 <memmove>
 800a0d4:	68a3      	ldr	r3, [r4, #8]
 800a0d6:	6822      	ldr	r2, [r4, #0]
 800a0d8:	1b9b      	subs	r3, r3, r6
 800a0da:	4432      	add	r2, r6
 800a0dc:	60a3      	str	r3, [r4, #8]
 800a0de:	6022      	str	r2, [r4, #0]
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e7db      	b.n	800a09c <__ssputs_r+0x58>
 800a0e4:	462a      	mov	r2, r5
 800a0e6:	f000 f981 	bl	800a3ec <_realloc_r>
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d1e1      	bne.n	800a0b4 <__ssputs_r+0x70>
 800a0f0:	6921      	ldr	r1, [r4, #16]
 800a0f2:	4650      	mov	r0, sl
 800a0f4:	f7ff fefc 	bl	8009ef0 <_free_r>
 800a0f8:	e7c7      	b.n	800a08a <__ssputs_r+0x46>
	...

0800a0fc <_svfiprintf_r>:
 800a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	4698      	mov	r8, r3
 800a102:	898b      	ldrh	r3, [r1, #12]
 800a104:	061b      	lsls	r3, r3, #24
 800a106:	b09d      	sub	sp, #116	; 0x74
 800a108:	4607      	mov	r7, r0
 800a10a:	460d      	mov	r5, r1
 800a10c:	4614      	mov	r4, r2
 800a10e:	d50e      	bpl.n	800a12e <_svfiprintf_r+0x32>
 800a110:	690b      	ldr	r3, [r1, #16]
 800a112:	b963      	cbnz	r3, 800a12e <_svfiprintf_r+0x32>
 800a114:	2140      	movs	r1, #64	; 0x40
 800a116:	f7ff ff3b 	bl	8009f90 <_malloc_r>
 800a11a:	6028      	str	r0, [r5, #0]
 800a11c:	6128      	str	r0, [r5, #16]
 800a11e:	b920      	cbnz	r0, 800a12a <_svfiprintf_r+0x2e>
 800a120:	230c      	movs	r3, #12
 800a122:	603b      	str	r3, [r7, #0]
 800a124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a128:	e0d1      	b.n	800a2ce <_svfiprintf_r+0x1d2>
 800a12a:	2340      	movs	r3, #64	; 0x40
 800a12c:	616b      	str	r3, [r5, #20]
 800a12e:	2300      	movs	r3, #0
 800a130:	9309      	str	r3, [sp, #36]	; 0x24
 800a132:	2320      	movs	r3, #32
 800a134:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a138:	f8cd 800c 	str.w	r8, [sp, #12]
 800a13c:	2330      	movs	r3, #48	; 0x30
 800a13e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a2e8 <_svfiprintf_r+0x1ec>
 800a142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a146:	f04f 0901 	mov.w	r9, #1
 800a14a:	4623      	mov	r3, r4
 800a14c:	469a      	mov	sl, r3
 800a14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a152:	b10a      	cbz	r2, 800a158 <_svfiprintf_r+0x5c>
 800a154:	2a25      	cmp	r2, #37	; 0x25
 800a156:	d1f9      	bne.n	800a14c <_svfiprintf_r+0x50>
 800a158:	ebba 0b04 	subs.w	fp, sl, r4
 800a15c:	d00b      	beq.n	800a176 <_svfiprintf_r+0x7a>
 800a15e:	465b      	mov	r3, fp
 800a160:	4622      	mov	r2, r4
 800a162:	4629      	mov	r1, r5
 800a164:	4638      	mov	r0, r7
 800a166:	f7ff ff6d 	bl	800a044 <__ssputs_r>
 800a16a:	3001      	adds	r0, #1
 800a16c:	f000 80aa 	beq.w	800a2c4 <_svfiprintf_r+0x1c8>
 800a170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a172:	445a      	add	r2, fp
 800a174:	9209      	str	r2, [sp, #36]	; 0x24
 800a176:	f89a 3000 	ldrb.w	r3, [sl]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 80a2 	beq.w	800a2c4 <_svfiprintf_r+0x1c8>
 800a180:	2300      	movs	r3, #0
 800a182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a18a:	f10a 0a01 	add.w	sl, sl, #1
 800a18e:	9304      	str	r3, [sp, #16]
 800a190:	9307      	str	r3, [sp, #28]
 800a192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a196:	931a      	str	r3, [sp, #104]	; 0x68
 800a198:	4654      	mov	r4, sl
 800a19a:	2205      	movs	r2, #5
 800a19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a0:	4851      	ldr	r0, [pc, #324]	; (800a2e8 <_svfiprintf_r+0x1ec>)
 800a1a2:	f7f6 f87d 	bl	80002a0 <memchr>
 800a1a6:	9a04      	ldr	r2, [sp, #16]
 800a1a8:	b9d8      	cbnz	r0, 800a1e2 <_svfiprintf_r+0xe6>
 800a1aa:	06d0      	lsls	r0, r2, #27
 800a1ac:	bf44      	itt	mi
 800a1ae:	2320      	movmi	r3, #32
 800a1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1b4:	0711      	lsls	r1, r2, #28
 800a1b6:	bf44      	itt	mi
 800a1b8:	232b      	movmi	r3, #43	; 0x2b
 800a1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1be:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c4:	d015      	beq.n	800a1f2 <_svfiprintf_r+0xf6>
 800a1c6:	9a07      	ldr	r2, [sp, #28]
 800a1c8:	4654      	mov	r4, sl
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	f04f 0c0a 	mov.w	ip, #10
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d6:	3b30      	subs	r3, #48	; 0x30
 800a1d8:	2b09      	cmp	r3, #9
 800a1da:	d94e      	bls.n	800a27a <_svfiprintf_r+0x17e>
 800a1dc:	b1b0      	cbz	r0, 800a20c <_svfiprintf_r+0x110>
 800a1de:	9207      	str	r2, [sp, #28]
 800a1e0:	e014      	b.n	800a20c <_svfiprintf_r+0x110>
 800a1e2:	eba0 0308 	sub.w	r3, r0, r8
 800a1e6:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	46a2      	mov	sl, r4
 800a1f0:	e7d2      	b.n	800a198 <_svfiprintf_r+0x9c>
 800a1f2:	9b03      	ldr	r3, [sp, #12]
 800a1f4:	1d19      	adds	r1, r3, #4
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	9103      	str	r1, [sp, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	bfbb      	ittet	lt
 800a1fe:	425b      	neglt	r3, r3
 800a200:	f042 0202 	orrlt.w	r2, r2, #2
 800a204:	9307      	strge	r3, [sp, #28]
 800a206:	9307      	strlt	r3, [sp, #28]
 800a208:	bfb8      	it	lt
 800a20a:	9204      	strlt	r2, [sp, #16]
 800a20c:	7823      	ldrb	r3, [r4, #0]
 800a20e:	2b2e      	cmp	r3, #46	; 0x2e
 800a210:	d10c      	bne.n	800a22c <_svfiprintf_r+0x130>
 800a212:	7863      	ldrb	r3, [r4, #1]
 800a214:	2b2a      	cmp	r3, #42	; 0x2a
 800a216:	d135      	bne.n	800a284 <_svfiprintf_r+0x188>
 800a218:	9b03      	ldr	r3, [sp, #12]
 800a21a:	1d1a      	adds	r2, r3, #4
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	9203      	str	r2, [sp, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	bfb8      	it	lt
 800a224:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a228:	3402      	adds	r4, #2
 800a22a:	9305      	str	r3, [sp, #20]
 800a22c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a2f8 <_svfiprintf_r+0x1fc>
 800a230:	7821      	ldrb	r1, [r4, #0]
 800a232:	2203      	movs	r2, #3
 800a234:	4650      	mov	r0, sl
 800a236:	f7f6 f833 	bl	80002a0 <memchr>
 800a23a:	b140      	cbz	r0, 800a24e <_svfiprintf_r+0x152>
 800a23c:	2340      	movs	r3, #64	; 0x40
 800a23e:	eba0 000a 	sub.w	r0, r0, sl
 800a242:	fa03 f000 	lsl.w	r0, r3, r0
 800a246:	9b04      	ldr	r3, [sp, #16]
 800a248:	4303      	orrs	r3, r0
 800a24a:	3401      	adds	r4, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a252:	4826      	ldr	r0, [pc, #152]	; (800a2ec <_svfiprintf_r+0x1f0>)
 800a254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a258:	2206      	movs	r2, #6
 800a25a:	f7f6 f821 	bl	80002a0 <memchr>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d038      	beq.n	800a2d4 <_svfiprintf_r+0x1d8>
 800a262:	4b23      	ldr	r3, [pc, #140]	; (800a2f0 <_svfiprintf_r+0x1f4>)
 800a264:	bb1b      	cbnz	r3, 800a2ae <_svfiprintf_r+0x1b2>
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	3307      	adds	r3, #7
 800a26a:	f023 0307 	bic.w	r3, r3, #7
 800a26e:	3308      	adds	r3, #8
 800a270:	9303      	str	r3, [sp, #12]
 800a272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a274:	4433      	add	r3, r6
 800a276:	9309      	str	r3, [sp, #36]	; 0x24
 800a278:	e767      	b.n	800a14a <_svfiprintf_r+0x4e>
 800a27a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a27e:	460c      	mov	r4, r1
 800a280:	2001      	movs	r0, #1
 800a282:	e7a5      	b.n	800a1d0 <_svfiprintf_r+0xd4>
 800a284:	2300      	movs	r3, #0
 800a286:	3401      	adds	r4, #1
 800a288:	9305      	str	r3, [sp, #20]
 800a28a:	4619      	mov	r1, r3
 800a28c:	f04f 0c0a 	mov.w	ip, #10
 800a290:	4620      	mov	r0, r4
 800a292:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a296:	3a30      	subs	r2, #48	; 0x30
 800a298:	2a09      	cmp	r2, #9
 800a29a:	d903      	bls.n	800a2a4 <_svfiprintf_r+0x1a8>
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0c5      	beq.n	800a22c <_svfiprintf_r+0x130>
 800a2a0:	9105      	str	r1, [sp, #20]
 800a2a2:	e7c3      	b.n	800a22c <_svfiprintf_r+0x130>
 800a2a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e7f0      	b.n	800a290 <_svfiprintf_r+0x194>
 800a2ae:	ab03      	add	r3, sp, #12
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	4b0f      	ldr	r3, [pc, #60]	; (800a2f4 <_svfiprintf_r+0x1f8>)
 800a2b6:	a904      	add	r1, sp, #16
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	f7fe f81b 	bl	80082f4 <_printf_float>
 800a2be:	1c42      	adds	r2, r0, #1
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	d1d6      	bne.n	800a272 <_svfiprintf_r+0x176>
 800a2c4:	89ab      	ldrh	r3, [r5, #12]
 800a2c6:	065b      	lsls	r3, r3, #25
 800a2c8:	f53f af2c 	bmi.w	800a124 <_svfiprintf_r+0x28>
 800a2cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ce:	b01d      	add	sp, #116	; 0x74
 800a2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d4:	ab03      	add	r3, sp, #12
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	462a      	mov	r2, r5
 800a2da:	4b06      	ldr	r3, [pc, #24]	; (800a2f4 <_svfiprintf_r+0x1f8>)
 800a2dc:	a904      	add	r1, sp, #16
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f7fe faae 	bl	8008840 <_printf_i>
 800a2e4:	e7eb      	b.n	800a2be <_svfiprintf_r+0x1c2>
 800a2e6:	bf00      	nop
 800a2e8:	0800b63c 	.word	0x0800b63c
 800a2ec:	0800b646 	.word	0x0800b646
 800a2f0:	080082f5 	.word	0x080082f5
 800a2f4:	0800a045 	.word	0x0800a045
 800a2f8:	0800b642 	.word	0x0800b642

0800a2fc <_sbrk_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d06      	ldr	r5, [pc, #24]	; (800a318 <_sbrk_r+0x1c>)
 800a300:	2300      	movs	r3, #0
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	602b      	str	r3, [r5, #0]
 800a308:	f7fd fea6 	bl	8008058 <_sbrk>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_sbrk_r+0x1a>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	b103      	cbz	r3, 800a316 <_sbrk_r+0x1a>
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	200138f0 	.word	0x200138f0

0800a31c <__assert_func>:
 800a31c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a31e:	4614      	mov	r4, r2
 800a320:	461a      	mov	r2, r3
 800a322:	4b09      	ldr	r3, [pc, #36]	; (800a348 <__assert_func+0x2c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4605      	mov	r5, r0
 800a328:	68d8      	ldr	r0, [r3, #12]
 800a32a:	b14c      	cbz	r4, 800a340 <__assert_func+0x24>
 800a32c:	4b07      	ldr	r3, [pc, #28]	; (800a34c <__assert_func+0x30>)
 800a32e:	9100      	str	r1, [sp, #0]
 800a330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a334:	4906      	ldr	r1, [pc, #24]	; (800a350 <__assert_func+0x34>)
 800a336:	462b      	mov	r3, r5
 800a338:	f000 f80e 	bl	800a358 <fiprintf>
 800a33c:	f000 faa4 	bl	800a888 <abort>
 800a340:	4b04      	ldr	r3, [pc, #16]	; (800a354 <__assert_func+0x38>)
 800a342:	461c      	mov	r4, r3
 800a344:	e7f3      	b.n	800a32e <__assert_func+0x12>
 800a346:	bf00      	nop
 800a348:	20000034 	.word	0x20000034
 800a34c:	0800b64d 	.word	0x0800b64d
 800a350:	0800b65a 	.word	0x0800b65a
 800a354:	0800b688 	.word	0x0800b688

0800a358 <fiprintf>:
 800a358:	b40e      	push	{r1, r2, r3}
 800a35a:	b503      	push	{r0, r1, lr}
 800a35c:	4601      	mov	r1, r0
 800a35e:	ab03      	add	r3, sp, #12
 800a360:	4805      	ldr	r0, [pc, #20]	; (800a378 <fiprintf+0x20>)
 800a362:	f853 2b04 	ldr.w	r2, [r3], #4
 800a366:	6800      	ldr	r0, [r0, #0]
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	f000 f88f 	bl	800a48c <_vfiprintf_r>
 800a36e:	b002      	add	sp, #8
 800a370:	f85d eb04 	ldr.w	lr, [sp], #4
 800a374:	b003      	add	sp, #12
 800a376:	4770      	bx	lr
 800a378:	20000034 	.word	0x20000034

0800a37c <__ascii_mbtowc>:
 800a37c:	b082      	sub	sp, #8
 800a37e:	b901      	cbnz	r1, 800a382 <__ascii_mbtowc+0x6>
 800a380:	a901      	add	r1, sp, #4
 800a382:	b142      	cbz	r2, 800a396 <__ascii_mbtowc+0x1a>
 800a384:	b14b      	cbz	r3, 800a39a <__ascii_mbtowc+0x1e>
 800a386:	7813      	ldrb	r3, [r2, #0]
 800a388:	600b      	str	r3, [r1, #0]
 800a38a:	7812      	ldrb	r2, [r2, #0]
 800a38c:	1e10      	subs	r0, r2, #0
 800a38e:	bf18      	it	ne
 800a390:	2001      	movne	r0, #1
 800a392:	b002      	add	sp, #8
 800a394:	4770      	bx	lr
 800a396:	4610      	mov	r0, r2
 800a398:	e7fb      	b.n	800a392 <__ascii_mbtowc+0x16>
 800a39a:	f06f 0001 	mvn.w	r0, #1
 800a39e:	e7f8      	b.n	800a392 <__ascii_mbtowc+0x16>

0800a3a0 <memmove>:
 800a3a0:	4288      	cmp	r0, r1
 800a3a2:	b510      	push	{r4, lr}
 800a3a4:	eb01 0402 	add.w	r4, r1, r2
 800a3a8:	d902      	bls.n	800a3b0 <memmove+0x10>
 800a3aa:	4284      	cmp	r4, r0
 800a3ac:	4623      	mov	r3, r4
 800a3ae:	d807      	bhi.n	800a3c0 <memmove+0x20>
 800a3b0:	1e43      	subs	r3, r0, #1
 800a3b2:	42a1      	cmp	r1, r4
 800a3b4:	d008      	beq.n	800a3c8 <memmove+0x28>
 800a3b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3be:	e7f8      	b.n	800a3b2 <memmove+0x12>
 800a3c0:	4402      	add	r2, r0
 800a3c2:	4601      	mov	r1, r0
 800a3c4:	428a      	cmp	r2, r1
 800a3c6:	d100      	bne.n	800a3ca <memmove+0x2a>
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3d2:	e7f7      	b.n	800a3c4 <memmove+0x24>

0800a3d4 <__malloc_lock>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	; (800a3dc <__malloc_lock+0x8>)
 800a3d6:	f000 bc17 	b.w	800ac08 <__retarget_lock_acquire_recursive>
 800a3da:	bf00      	nop
 800a3dc:	200138f8 	.word	0x200138f8

0800a3e0 <__malloc_unlock>:
 800a3e0:	4801      	ldr	r0, [pc, #4]	; (800a3e8 <__malloc_unlock+0x8>)
 800a3e2:	f000 bc12 	b.w	800ac0a <__retarget_lock_release_recursive>
 800a3e6:	bf00      	nop
 800a3e8:	200138f8 	.word	0x200138f8

0800a3ec <_realloc_r>:
 800a3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ee:	4607      	mov	r7, r0
 800a3f0:	4614      	mov	r4, r2
 800a3f2:	460e      	mov	r6, r1
 800a3f4:	b921      	cbnz	r1, 800a400 <_realloc_r+0x14>
 800a3f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	f7ff bdc8 	b.w	8009f90 <_malloc_r>
 800a400:	b922      	cbnz	r2, 800a40c <_realloc_r+0x20>
 800a402:	f7ff fd75 	bl	8009ef0 <_free_r>
 800a406:	4625      	mov	r5, r4
 800a408:	4628      	mov	r0, r5
 800a40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a40c:	f000 fc62 	bl	800acd4 <_malloc_usable_size_r>
 800a410:	42a0      	cmp	r0, r4
 800a412:	d20f      	bcs.n	800a434 <_realloc_r+0x48>
 800a414:	4621      	mov	r1, r4
 800a416:	4638      	mov	r0, r7
 800a418:	f7ff fdba 	bl	8009f90 <_malloc_r>
 800a41c:	4605      	mov	r5, r0
 800a41e:	2800      	cmp	r0, #0
 800a420:	d0f2      	beq.n	800a408 <_realloc_r+0x1c>
 800a422:	4631      	mov	r1, r6
 800a424:	4622      	mov	r2, r4
 800a426:	f7fd feaf 	bl	8008188 <memcpy>
 800a42a:	4631      	mov	r1, r6
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7ff fd5f 	bl	8009ef0 <_free_r>
 800a432:	e7e9      	b.n	800a408 <_realloc_r+0x1c>
 800a434:	4635      	mov	r5, r6
 800a436:	e7e7      	b.n	800a408 <_realloc_r+0x1c>

0800a438 <__sfputc_r>:
 800a438:	6893      	ldr	r3, [r2, #8]
 800a43a:	3b01      	subs	r3, #1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	b410      	push	{r4}
 800a440:	6093      	str	r3, [r2, #8]
 800a442:	da08      	bge.n	800a456 <__sfputc_r+0x1e>
 800a444:	6994      	ldr	r4, [r2, #24]
 800a446:	42a3      	cmp	r3, r4
 800a448:	db01      	blt.n	800a44e <__sfputc_r+0x16>
 800a44a:	290a      	cmp	r1, #10
 800a44c:	d103      	bne.n	800a456 <__sfputc_r+0x1e>
 800a44e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a452:	f000 b94b 	b.w	800a6ec <__swbuf_r>
 800a456:	6813      	ldr	r3, [r2, #0]
 800a458:	1c58      	adds	r0, r3, #1
 800a45a:	6010      	str	r0, [r2, #0]
 800a45c:	7019      	strb	r1, [r3, #0]
 800a45e:	4608      	mov	r0, r1
 800a460:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <__sfputs_r>:
 800a466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a468:	4606      	mov	r6, r0
 800a46a:	460f      	mov	r7, r1
 800a46c:	4614      	mov	r4, r2
 800a46e:	18d5      	adds	r5, r2, r3
 800a470:	42ac      	cmp	r4, r5
 800a472:	d101      	bne.n	800a478 <__sfputs_r+0x12>
 800a474:	2000      	movs	r0, #0
 800a476:	e007      	b.n	800a488 <__sfputs_r+0x22>
 800a478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a47c:	463a      	mov	r2, r7
 800a47e:	4630      	mov	r0, r6
 800a480:	f7ff ffda 	bl	800a438 <__sfputc_r>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d1f3      	bne.n	800a470 <__sfputs_r+0xa>
 800a488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a48c <_vfiprintf_r>:
 800a48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a490:	460d      	mov	r5, r1
 800a492:	b09d      	sub	sp, #116	; 0x74
 800a494:	4614      	mov	r4, r2
 800a496:	4698      	mov	r8, r3
 800a498:	4606      	mov	r6, r0
 800a49a:	b118      	cbz	r0, 800a4a4 <_vfiprintf_r+0x18>
 800a49c:	6983      	ldr	r3, [r0, #24]
 800a49e:	b90b      	cbnz	r3, 800a4a4 <_vfiprintf_r+0x18>
 800a4a0:	f000 fb14 	bl	800aacc <__sinit>
 800a4a4:	4b89      	ldr	r3, [pc, #548]	; (800a6cc <_vfiprintf_r+0x240>)
 800a4a6:	429d      	cmp	r5, r3
 800a4a8:	d11b      	bne.n	800a4e2 <_vfiprintf_r+0x56>
 800a4aa:	6875      	ldr	r5, [r6, #4]
 800a4ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4ae:	07d9      	lsls	r1, r3, #31
 800a4b0:	d405      	bmi.n	800a4be <_vfiprintf_r+0x32>
 800a4b2:	89ab      	ldrh	r3, [r5, #12]
 800a4b4:	059a      	lsls	r2, r3, #22
 800a4b6:	d402      	bmi.n	800a4be <_vfiprintf_r+0x32>
 800a4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4ba:	f000 fba5 	bl	800ac08 <__retarget_lock_acquire_recursive>
 800a4be:	89ab      	ldrh	r3, [r5, #12]
 800a4c0:	071b      	lsls	r3, r3, #28
 800a4c2:	d501      	bpl.n	800a4c8 <_vfiprintf_r+0x3c>
 800a4c4:	692b      	ldr	r3, [r5, #16]
 800a4c6:	b9eb      	cbnz	r3, 800a504 <_vfiprintf_r+0x78>
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f000 f96e 	bl	800a7ac <__swsetup_r>
 800a4d0:	b1c0      	cbz	r0, 800a504 <_vfiprintf_r+0x78>
 800a4d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4d4:	07dc      	lsls	r4, r3, #31
 800a4d6:	d50e      	bpl.n	800a4f6 <_vfiprintf_r+0x6a>
 800a4d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4dc:	b01d      	add	sp, #116	; 0x74
 800a4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e2:	4b7b      	ldr	r3, [pc, #492]	; (800a6d0 <_vfiprintf_r+0x244>)
 800a4e4:	429d      	cmp	r5, r3
 800a4e6:	d101      	bne.n	800a4ec <_vfiprintf_r+0x60>
 800a4e8:	68b5      	ldr	r5, [r6, #8]
 800a4ea:	e7df      	b.n	800a4ac <_vfiprintf_r+0x20>
 800a4ec:	4b79      	ldr	r3, [pc, #484]	; (800a6d4 <_vfiprintf_r+0x248>)
 800a4ee:	429d      	cmp	r5, r3
 800a4f0:	bf08      	it	eq
 800a4f2:	68f5      	ldreq	r5, [r6, #12]
 800a4f4:	e7da      	b.n	800a4ac <_vfiprintf_r+0x20>
 800a4f6:	89ab      	ldrh	r3, [r5, #12]
 800a4f8:	0598      	lsls	r0, r3, #22
 800a4fa:	d4ed      	bmi.n	800a4d8 <_vfiprintf_r+0x4c>
 800a4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4fe:	f000 fb84 	bl	800ac0a <__retarget_lock_release_recursive>
 800a502:	e7e9      	b.n	800a4d8 <_vfiprintf_r+0x4c>
 800a504:	2300      	movs	r3, #0
 800a506:	9309      	str	r3, [sp, #36]	; 0x24
 800a508:	2320      	movs	r3, #32
 800a50a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a50e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a512:	2330      	movs	r3, #48	; 0x30
 800a514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a6d8 <_vfiprintf_r+0x24c>
 800a518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a51c:	f04f 0901 	mov.w	r9, #1
 800a520:	4623      	mov	r3, r4
 800a522:	469a      	mov	sl, r3
 800a524:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a528:	b10a      	cbz	r2, 800a52e <_vfiprintf_r+0xa2>
 800a52a:	2a25      	cmp	r2, #37	; 0x25
 800a52c:	d1f9      	bne.n	800a522 <_vfiprintf_r+0x96>
 800a52e:	ebba 0b04 	subs.w	fp, sl, r4
 800a532:	d00b      	beq.n	800a54c <_vfiprintf_r+0xc0>
 800a534:	465b      	mov	r3, fp
 800a536:	4622      	mov	r2, r4
 800a538:	4629      	mov	r1, r5
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7ff ff93 	bl	800a466 <__sfputs_r>
 800a540:	3001      	adds	r0, #1
 800a542:	f000 80aa 	beq.w	800a69a <_vfiprintf_r+0x20e>
 800a546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a548:	445a      	add	r2, fp
 800a54a:	9209      	str	r2, [sp, #36]	; 0x24
 800a54c:	f89a 3000 	ldrb.w	r3, [sl]
 800a550:	2b00      	cmp	r3, #0
 800a552:	f000 80a2 	beq.w	800a69a <_vfiprintf_r+0x20e>
 800a556:	2300      	movs	r3, #0
 800a558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a55c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a560:	f10a 0a01 	add.w	sl, sl, #1
 800a564:	9304      	str	r3, [sp, #16]
 800a566:	9307      	str	r3, [sp, #28]
 800a568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a56c:	931a      	str	r3, [sp, #104]	; 0x68
 800a56e:	4654      	mov	r4, sl
 800a570:	2205      	movs	r2, #5
 800a572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a576:	4858      	ldr	r0, [pc, #352]	; (800a6d8 <_vfiprintf_r+0x24c>)
 800a578:	f7f5 fe92 	bl	80002a0 <memchr>
 800a57c:	9a04      	ldr	r2, [sp, #16]
 800a57e:	b9d8      	cbnz	r0, 800a5b8 <_vfiprintf_r+0x12c>
 800a580:	06d1      	lsls	r1, r2, #27
 800a582:	bf44      	itt	mi
 800a584:	2320      	movmi	r3, #32
 800a586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a58a:	0713      	lsls	r3, r2, #28
 800a58c:	bf44      	itt	mi
 800a58e:	232b      	movmi	r3, #43	; 0x2b
 800a590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a594:	f89a 3000 	ldrb.w	r3, [sl]
 800a598:	2b2a      	cmp	r3, #42	; 0x2a
 800a59a:	d015      	beq.n	800a5c8 <_vfiprintf_r+0x13c>
 800a59c:	9a07      	ldr	r2, [sp, #28]
 800a59e:	4654      	mov	r4, sl
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	f04f 0c0a 	mov.w	ip, #10
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5ac:	3b30      	subs	r3, #48	; 0x30
 800a5ae:	2b09      	cmp	r3, #9
 800a5b0:	d94e      	bls.n	800a650 <_vfiprintf_r+0x1c4>
 800a5b2:	b1b0      	cbz	r0, 800a5e2 <_vfiprintf_r+0x156>
 800a5b4:	9207      	str	r2, [sp, #28]
 800a5b6:	e014      	b.n	800a5e2 <_vfiprintf_r+0x156>
 800a5b8:	eba0 0308 	sub.w	r3, r0, r8
 800a5bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	9304      	str	r3, [sp, #16]
 800a5c4:	46a2      	mov	sl, r4
 800a5c6:	e7d2      	b.n	800a56e <_vfiprintf_r+0xe2>
 800a5c8:	9b03      	ldr	r3, [sp, #12]
 800a5ca:	1d19      	adds	r1, r3, #4
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	9103      	str	r1, [sp, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	bfbb      	ittet	lt
 800a5d4:	425b      	neglt	r3, r3
 800a5d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a5da:	9307      	strge	r3, [sp, #28]
 800a5dc:	9307      	strlt	r3, [sp, #28]
 800a5de:	bfb8      	it	lt
 800a5e0:	9204      	strlt	r2, [sp, #16]
 800a5e2:	7823      	ldrb	r3, [r4, #0]
 800a5e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a5e6:	d10c      	bne.n	800a602 <_vfiprintf_r+0x176>
 800a5e8:	7863      	ldrb	r3, [r4, #1]
 800a5ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ec:	d135      	bne.n	800a65a <_vfiprintf_r+0x1ce>
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	1d1a      	adds	r2, r3, #4
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	9203      	str	r2, [sp, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bfb8      	it	lt
 800a5fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5fe:	3402      	adds	r4, #2
 800a600:	9305      	str	r3, [sp, #20]
 800a602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a6e8 <_vfiprintf_r+0x25c>
 800a606:	7821      	ldrb	r1, [r4, #0]
 800a608:	2203      	movs	r2, #3
 800a60a:	4650      	mov	r0, sl
 800a60c:	f7f5 fe48 	bl	80002a0 <memchr>
 800a610:	b140      	cbz	r0, 800a624 <_vfiprintf_r+0x198>
 800a612:	2340      	movs	r3, #64	; 0x40
 800a614:	eba0 000a 	sub.w	r0, r0, sl
 800a618:	fa03 f000 	lsl.w	r0, r3, r0
 800a61c:	9b04      	ldr	r3, [sp, #16]
 800a61e:	4303      	orrs	r3, r0
 800a620:	3401      	adds	r4, #1
 800a622:	9304      	str	r3, [sp, #16]
 800a624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a628:	482c      	ldr	r0, [pc, #176]	; (800a6dc <_vfiprintf_r+0x250>)
 800a62a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a62e:	2206      	movs	r2, #6
 800a630:	f7f5 fe36 	bl	80002a0 <memchr>
 800a634:	2800      	cmp	r0, #0
 800a636:	d03f      	beq.n	800a6b8 <_vfiprintf_r+0x22c>
 800a638:	4b29      	ldr	r3, [pc, #164]	; (800a6e0 <_vfiprintf_r+0x254>)
 800a63a:	bb1b      	cbnz	r3, 800a684 <_vfiprintf_r+0x1f8>
 800a63c:	9b03      	ldr	r3, [sp, #12]
 800a63e:	3307      	adds	r3, #7
 800a640:	f023 0307 	bic.w	r3, r3, #7
 800a644:	3308      	adds	r3, #8
 800a646:	9303      	str	r3, [sp, #12]
 800a648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a64a:	443b      	add	r3, r7
 800a64c:	9309      	str	r3, [sp, #36]	; 0x24
 800a64e:	e767      	b.n	800a520 <_vfiprintf_r+0x94>
 800a650:	fb0c 3202 	mla	r2, ip, r2, r3
 800a654:	460c      	mov	r4, r1
 800a656:	2001      	movs	r0, #1
 800a658:	e7a5      	b.n	800a5a6 <_vfiprintf_r+0x11a>
 800a65a:	2300      	movs	r3, #0
 800a65c:	3401      	adds	r4, #1
 800a65e:	9305      	str	r3, [sp, #20]
 800a660:	4619      	mov	r1, r3
 800a662:	f04f 0c0a 	mov.w	ip, #10
 800a666:	4620      	mov	r0, r4
 800a668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a66c:	3a30      	subs	r2, #48	; 0x30
 800a66e:	2a09      	cmp	r2, #9
 800a670:	d903      	bls.n	800a67a <_vfiprintf_r+0x1ee>
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0c5      	beq.n	800a602 <_vfiprintf_r+0x176>
 800a676:	9105      	str	r1, [sp, #20]
 800a678:	e7c3      	b.n	800a602 <_vfiprintf_r+0x176>
 800a67a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a67e:	4604      	mov	r4, r0
 800a680:	2301      	movs	r3, #1
 800a682:	e7f0      	b.n	800a666 <_vfiprintf_r+0x1da>
 800a684:	ab03      	add	r3, sp, #12
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	462a      	mov	r2, r5
 800a68a:	4b16      	ldr	r3, [pc, #88]	; (800a6e4 <_vfiprintf_r+0x258>)
 800a68c:	a904      	add	r1, sp, #16
 800a68e:	4630      	mov	r0, r6
 800a690:	f7fd fe30 	bl	80082f4 <_printf_float>
 800a694:	4607      	mov	r7, r0
 800a696:	1c78      	adds	r0, r7, #1
 800a698:	d1d6      	bne.n	800a648 <_vfiprintf_r+0x1bc>
 800a69a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a69c:	07d9      	lsls	r1, r3, #31
 800a69e:	d405      	bmi.n	800a6ac <_vfiprintf_r+0x220>
 800a6a0:	89ab      	ldrh	r3, [r5, #12]
 800a6a2:	059a      	lsls	r2, r3, #22
 800a6a4:	d402      	bmi.n	800a6ac <_vfiprintf_r+0x220>
 800a6a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6a8:	f000 faaf 	bl	800ac0a <__retarget_lock_release_recursive>
 800a6ac:	89ab      	ldrh	r3, [r5, #12]
 800a6ae:	065b      	lsls	r3, r3, #25
 800a6b0:	f53f af12 	bmi.w	800a4d8 <_vfiprintf_r+0x4c>
 800a6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6b6:	e711      	b.n	800a4dc <_vfiprintf_r+0x50>
 800a6b8:	ab03      	add	r3, sp, #12
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	462a      	mov	r2, r5
 800a6be:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <_vfiprintf_r+0x258>)
 800a6c0:	a904      	add	r1, sp, #16
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7fe f8bc 	bl	8008840 <_printf_i>
 800a6c8:	e7e4      	b.n	800a694 <_vfiprintf_r+0x208>
 800a6ca:	bf00      	nop
 800a6cc:	0800b7b4 	.word	0x0800b7b4
 800a6d0:	0800b7d4 	.word	0x0800b7d4
 800a6d4:	0800b794 	.word	0x0800b794
 800a6d8:	0800b63c 	.word	0x0800b63c
 800a6dc:	0800b646 	.word	0x0800b646
 800a6e0:	080082f5 	.word	0x080082f5
 800a6e4:	0800a467 	.word	0x0800a467
 800a6e8:	0800b642 	.word	0x0800b642

0800a6ec <__swbuf_r>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	460e      	mov	r6, r1
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	b118      	cbz	r0, 800a6fe <__swbuf_r+0x12>
 800a6f6:	6983      	ldr	r3, [r0, #24]
 800a6f8:	b90b      	cbnz	r3, 800a6fe <__swbuf_r+0x12>
 800a6fa:	f000 f9e7 	bl	800aacc <__sinit>
 800a6fe:	4b21      	ldr	r3, [pc, #132]	; (800a784 <__swbuf_r+0x98>)
 800a700:	429c      	cmp	r4, r3
 800a702:	d12b      	bne.n	800a75c <__swbuf_r+0x70>
 800a704:	686c      	ldr	r4, [r5, #4]
 800a706:	69a3      	ldr	r3, [r4, #24]
 800a708:	60a3      	str	r3, [r4, #8]
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	071a      	lsls	r2, r3, #28
 800a70e:	d52f      	bpl.n	800a770 <__swbuf_r+0x84>
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	b36b      	cbz	r3, 800a770 <__swbuf_r+0x84>
 800a714:	6923      	ldr	r3, [r4, #16]
 800a716:	6820      	ldr	r0, [r4, #0]
 800a718:	1ac0      	subs	r0, r0, r3
 800a71a:	6963      	ldr	r3, [r4, #20]
 800a71c:	b2f6      	uxtb	r6, r6
 800a71e:	4283      	cmp	r3, r0
 800a720:	4637      	mov	r7, r6
 800a722:	dc04      	bgt.n	800a72e <__swbuf_r+0x42>
 800a724:	4621      	mov	r1, r4
 800a726:	4628      	mov	r0, r5
 800a728:	f000 f93c 	bl	800a9a4 <_fflush_r>
 800a72c:	bb30      	cbnz	r0, 800a77c <__swbuf_r+0x90>
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	3b01      	subs	r3, #1
 800a732:	60a3      	str	r3, [r4, #8]
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	6022      	str	r2, [r4, #0]
 800a73a:	701e      	strb	r6, [r3, #0]
 800a73c:	6963      	ldr	r3, [r4, #20]
 800a73e:	3001      	adds	r0, #1
 800a740:	4283      	cmp	r3, r0
 800a742:	d004      	beq.n	800a74e <__swbuf_r+0x62>
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	07db      	lsls	r3, r3, #31
 800a748:	d506      	bpl.n	800a758 <__swbuf_r+0x6c>
 800a74a:	2e0a      	cmp	r6, #10
 800a74c:	d104      	bne.n	800a758 <__swbuf_r+0x6c>
 800a74e:	4621      	mov	r1, r4
 800a750:	4628      	mov	r0, r5
 800a752:	f000 f927 	bl	800a9a4 <_fflush_r>
 800a756:	b988      	cbnz	r0, 800a77c <__swbuf_r+0x90>
 800a758:	4638      	mov	r0, r7
 800a75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a75c:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <__swbuf_r+0x9c>)
 800a75e:	429c      	cmp	r4, r3
 800a760:	d101      	bne.n	800a766 <__swbuf_r+0x7a>
 800a762:	68ac      	ldr	r4, [r5, #8]
 800a764:	e7cf      	b.n	800a706 <__swbuf_r+0x1a>
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <__swbuf_r+0xa0>)
 800a768:	429c      	cmp	r4, r3
 800a76a:	bf08      	it	eq
 800a76c:	68ec      	ldreq	r4, [r5, #12]
 800a76e:	e7ca      	b.n	800a706 <__swbuf_r+0x1a>
 800a770:	4621      	mov	r1, r4
 800a772:	4628      	mov	r0, r5
 800a774:	f000 f81a 	bl	800a7ac <__swsetup_r>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d0cb      	beq.n	800a714 <__swbuf_r+0x28>
 800a77c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a780:	e7ea      	b.n	800a758 <__swbuf_r+0x6c>
 800a782:	bf00      	nop
 800a784:	0800b7b4 	.word	0x0800b7b4
 800a788:	0800b7d4 	.word	0x0800b7d4
 800a78c:	0800b794 	.word	0x0800b794

0800a790 <__ascii_wctomb>:
 800a790:	b149      	cbz	r1, 800a7a6 <__ascii_wctomb+0x16>
 800a792:	2aff      	cmp	r2, #255	; 0xff
 800a794:	bf85      	ittet	hi
 800a796:	238a      	movhi	r3, #138	; 0x8a
 800a798:	6003      	strhi	r3, [r0, #0]
 800a79a:	700a      	strbls	r2, [r1, #0]
 800a79c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a7a0:	bf98      	it	ls
 800a7a2:	2001      	movls	r0, #1
 800a7a4:	4770      	bx	lr
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	4770      	bx	lr
	...

0800a7ac <__swsetup_r>:
 800a7ac:	4b32      	ldr	r3, [pc, #200]	; (800a878 <__swsetup_r+0xcc>)
 800a7ae:	b570      	push	{r4, r5, r6, lr}
 800a7b0:	681d      	ldr	r5, [r3, #0]
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	b125      	cbz	r5, 800a7c2 <__swsetup_r+0x16>
 800a7b8:	69ab      	ldr	r3, [r5, #24]
 800a7ba:	b913      	cbnz	r3, 800a7c2 <__swsetup_r+0x16>
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f000 f985 	bl	800aacc <__sinit>
 800a7c2:	4b2e      	ldr	r3, [pc, #184]	; (800a87c <__swsetup_r+0xd0>)
 800a7c4:	429c      	cmp	r4, r3
 800a7c6:	d10f      	bne.n	800a7e8 <__swsetup_r+0x3c>
 800a7c8:	686c      	ldr	r4, [r5, #4]
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7d0:	0719      	lsls	r1, r3, #28
 800a7d2:	d42c      	bmi.n	800a82e <__swsetup_r+0x82>
 800a7d4:	06dd      	lsls	r5, r3, #27
 800a7d6:	d411      	bmi.n	800a7fc <__swsetup_r+0x50>
 800a7d8:	2309      	movs	r3, #9
 800a7da:	6033      	str	r3, [r6, #0]
 800a7dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7e0:	81a3      	strh	r3, [r4, #12]
 800a7e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7e6:	e03e      	b.n	800a866 <__swsetup_r+0xba>
 800a7e8:	4b25      	ldr	r3, [pc, #148]	; (800a880 <__swsetup_r+0xd4>)
 800a7ea:	429c      	cmp	r4, r3
 800a7ec:	d101      	bne.n	800a7f2 <__swsetup_r+0x46>
 800a7ee:	68ac      	ldr	r4, [r5, #8]
 800a7f0:	e7eb      	b.n	800a7ca <__swsetup_r+0x1e>
 800a7f2:	4b24      	ldr	r3, [pc, #144]	; (800a884 <__swsetup_r+0xd8>)
 800a7f4:	429c      	cmp	r4, r3
 800a7f6:	bf08      	it	eq
 800a7f8:	68ec      	ldreq	r4, [r5, #12]
 800a7fa:	e7e6      	b.n	800a7ca <__swsetup_r+0x1e>
 800a7fc:	0758      	lsls	r0, r3, #29
 800a7fe:	d512      	bpl.n	800a826 <__swsetup_r+0x7a>
 800a800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a802:	b141      	cbz	r1, 800a816 <__swsetup_r+0x6a>
 800a804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a808:	4299      	cmp	r1, r3
 800a80a:	d002      	beq.n	800a812 <__swsetup_r+0x66>
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7ff fb6f 	bl	8009ef0 <_free_r>
 800a812:	2300      	movs	r3, #0
 800a814:	6363      	str	r3, [r4, #52]	; 0x34
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	2300      	movs	r3, #0
 800a820:	6063      	str	r3, [r4, #4]
 800a822:	6923      	ldr	r3, [r4, #16]
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	f043 0308 	orr.w	r3, r3, #8
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	6923      	ldr	r3, [r4, #16]
 800a830:	b94b      	cbnz	r3, 800a846 <__swsetup_r+0x9a>
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a83c:	d003      	beq.n	800a846 <__swsetup_r+0x9a>
 800a83e:	4621      	mov	r1, r4
 800a840:	4630      	mov	r0, r6
 800a842:	f000 fa07 	bl	800ac54 <__smakebuf_r>
 800a846:	89a0      	ldrh	r0, [r4, #12]
 800a848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a84c:	f010 0301 	ands.w	r3, r0, #1
 800a850:	d00a      	beq.n	800a868 <__swsetup_r+0xbc>
 800a852:	2300      	movs	r3, #0
 800a854:	60a3      	str	r3, [r4, #8]
 800a856:	6963      	ldr	r3, [r4, #20]
 800a858:	425b      	negs	r3, r3
 800a85a:	61a3      	str	r3, [r4, #24]
 800a85c:	6923      	ldr	r3, [r4, #16]
 800a85e:	b943      	cbnz	r3, 800a872 <__swsetup_r+0xc6>
 800a860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a864:	d1ba      	bne.n	800a7dc <__swsetup_r+0x30>
 800a866:	bd70      	pop	{r4, r5, r6, pc}
 800a868:	0781      	lsls	r1, r0, #30
 800a86a:	bf58      	it	pl
 800a86c:	6963      	ldrpl	r3, [r4, #20]
 800a86e:	60a3      	str	r3, [r4, #8]
 800a870:	e7f4      	b.n	800a85c <__swsetup_r+0xb0>
 800a872:	2000      	movs	r0, #0
 800a874:	e7f7      	b.n	800a866 <__swsetup_r+0xba>
 800a876:	bf00      	nop
 800a878:	20000034 	.word	0x20000034
 800a87c:	0800b7b4 	.word	0x0800b7b4
 800a880:	0800b7d4 	.word	0x0800b7d4
 800a884:	0800b794 	.word	0x0800b794

0800a888 <abort>:
 800a888:	b508      	push	{r3, lr}
 800a88a:	2006      	movs	r0, #6
 800a88c:	f000 fa52 	bl	800ad34 <raise>
 800a890:	2001      	movs	r0, #1
 800a892:	f7fd fb85 	bl	8007fa0 <_exit>
	...

0800a898 <__sflush_r>:
 800a898:	898a      	ldrh	r2, [r1, #12]
 800a89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89e:	4605      	mov	r5, r0
 800a8a0:	0710      	lsls	r0, r2, #28
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	d458      	bmi.n	800a958 <__sflush_r+0xc0>
 800a8a6:	684b      	ldr	r3, [r1, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	dc05      	bgt.n	800a8b8 <__sflush_r+0x20>
 800a8ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	dc02      	bgt.n	800a8b8 <__sflush_r+0x20>
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ba:	2e00      	cmp	r6, #0
 800a8bc:	d0f9      	beq.n	800a8b2 <__sflush_r+0x1a>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8c4:	682f      	ldr	r7, [r5, #0]
 800a8c6:	602b      	str	r3, [r5, #0]
 800a8c8:	d032      	beq.n	800a930 <__sflush_r+0x98>
 800a8ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	075a      	lsls	r2, r3, #29
 800a8d0:	d505      	bpl.n	800a8de <__sflush_r+0x46>
 800a8d2:	6863      	ldr	r3, [r4, #4]
 800a8d4:	1ac0      	subs	r0, r0, r3
 800a8d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8d8:	b10b      	cbz	r3, 800a8de <__sflush_r+0x46>
 800a8da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8dc:	1ac0      	subs	r0, r0, r3
 800a8de:	2300      	movs	r3, #0
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8e4:	6a21      	ldr	r1, [r4, #32]
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	47b0      	blx	r6
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	d106      	bne.n	800a8fe <__sflush_r+0x66>
 800a8f0:	6829      	ldr	r1, [r5, #0]
 800a8f2:	291d      	cmp	r1, #29
 800a8f4:	d82c      	bhi.n	800a950 <__sflush_r+0xb8>
 800a8f6:	4a2a      	ldr	r2, [pc, #168]	; (800a9a0 <__sflush_r+0x108>)
 800a8f8:	40ca      	lsrs	r2, r1
 800a8fa:	07d6      	lsls	r6, r2, #31
 800a8fc:	d528      	bpl.n	800a950 <__sflush_r+0xb8>
 800a8fe:	2200      	movs	r2, #0
 800a900:	6062      	str	r2, [r4, #4]
 800a902:	04d9      	lsls	r1, r3, #19
 800a904:	6922      	ldr	r2, [r4, #16]
 800a906:	6022      	str	r2, [r4, #0]
 800a908:	d504      	bpl.n	800a914 <__sflush_r+0x7c>
 800a90a:	1c42      	adds	r2, r0, #1
 800a90c:	d101      	bne.n	800a912 <__sflush_r+0x7a>
 800a90e:	682b      	ldr	r3, [r5, #0]
 800a910:	b903      	cbnz	r3, 800a914 <__sflush_r+0x7c>
 800a912:	6560      	str	r0, [r4, #84]	; 0x54
 800a914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a916:	602f      	str	r7, [r5, #0]
 800a918:	2900      	cmp	r1, #0
 800a91a:	d0ca      	beq.n	800a8b2 <__sflush_r+0x1a>
 800a91c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a920:	4299      	cmp	r1, r3
 800a922:	d002      	beq.n	800a92a <__sflush_r+0x92>
 800a924:	4628      	mov	r0, r5
 800a926:	f7ff fae3 	bl	8009ef0 <_free_r>
 800a92a:	2000      	movs	r0, #0
 800a92c:	6360      	str	r0, [r4, #52]	; 0x34
 800a92e:	e7c1      	b.n	800a8b4 <__sflush_r+0x1c>
 800a930:	6a21      	ldr	r1, [r4, #32]
 800a932:	2301      	movs	r3, #1
 800a934:	4628      	mov	r0, r5
 800a936:	47b0      	blx	r6
 800a938:	1c41      	adds	r1, r0, #1
 800a93a:	d1c7      	bne.n	800a8cc <__sflush_r+0x34>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0c4      	beq.n	800a8cc <__sflush_r+0x34>
 800a942:	2b1d      	cmp	r3, #29
 800a944:	d001      	beq.n	800a94a <__sflush_r+0xb2>
 800a946:	2b16      	cmp	r3, #22
 800a948:	d101      	bne.n	800a94e <__sflush_r+0xb6>
 800a94a:	602f      	str	r7, [r5, #0]
 800a94c:	e7b1      	b.n	800a8b2 <__sflush_r+0x1a>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	e7ad      	b.n	800a8b4 <__sflush_r+0x1c>
 800a958:	690f      	ldr	r7, [r1, #16]
 800a95a:	2f00      	cmp	r7, #0
 800a95c:	d0a9      	beq.n	800a8b2 <__sflush_r+0x1a>
 800a95e:	0793      	lsls	r3, r2, #30
 800a960:	680e      	ldr	r6, [r1, #0]
 800a962:	bf08      	it	eq
 800a964:	694b      	ldreq	r3, [r1, #20]
 800a966:	600f      	str	r7, [r1, #0]
 800a968:	bf18      	it	ne
 800a96a:	2300      	movne	r3, #0
 800a96c:	eba6 0807 	sub.w	r8, r6, r7
 800a970:	608b      	str	r3, [r1, #8]
 800a972:	f1b8 0f00 	cmp.w	r8, #0
 800a976:	dd9c      	ble.n	800a8b2 <__sflush_r+0x1a>
 800a978:	6a21      	ldr	r1, [r4, #32]
 800a97a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a97c:	4643      	mov	r3, r8
 800a97e:	463a      	mov	r2, r7
 800a980:	4628      	mov	r0, r5
 800a982:	47b0      	blx	r6
 800a984:	2800      	cmp	r0, #0
 800a986:	dc06      	bgt.n	800a996 <__sflush_r+0xfe>
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a994:	e78e      	b.n	800a8b4 <__sflush_r+0x1c>
 800a996:	4407      	add	r7, r0
 800a998:	eba8 0800 	sub.w	r8, r8, r0
 800a99c:	e7e9      	b.n	800a972 <__sflush_r+0xda>
 800a99e:	bf00      	nop
 800a9a0:	20400001 	.word	0x20400001

0800a9a4 <_fflush_r>:
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	690b      	ldr	r3, [r1, #16]
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	b913      	cbnz	r3, 800a9b4 <_fflush_r+0x10>
 800a9ae:	2500      	movs	r5, #0
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	bd38      	pop	{r3, r4, r5, pc}
 800a9b4:	b118      	cbz	r0, 800a9be <_fflush_r+0x1a>
 800a9b6:	6983      	ldr	r3, [r0, #24]
 800a9b8:	b90b      	cbnz	r3, 800a9be <_fflush_r+0x1a>
 800a9ba:	f000 f887 	bl	800aacc <__sinit>
 800a9be:	4b14      	ldr	r3, [pc, #80]	; (800aa10 <_fflush_r+0x6c>)
 800a9c0:	429c      	cmp	r4, r3
 800a9c2:	d11b      	bne.n	800a9fc <_fflush_r+0x58>
 800a9c4:	686c      	ldr	r4, [r5, #4]
 800a9c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d0ef      	beq.n	800a9ae <_fflush_r+0xa>
 800a9ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9d0:	07d0      	lsls	r0, r2, #31
 800a9d2:	d404      	bmi.n	800a9de <_fflush_r+0x3a>
 800a9d4:	0599      	lsls	r1, r3, #22
 800a9d6:	d402      	bmi.n	800a9de <_fflush_r+0x3a>
 800a9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9da:	f000 f915 	bl	800ac08 <__retarget_lock_acquire_recursive>
 800a9de:	4628      	mov	r0, r5
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	f7ff ff59 	bl	800a898 <__sflush_r>
 800a9e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9e8:	07da      	lsls	r2, r3, #31
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	d4e0      	bmi.n	800a9b0 <_fflush_r+0xc>
 800a9ee:	89a3      	ldrh	r3, [r4, #12]
 800a9f0:	059b      	lsls	r3, r3, #22
 800a9f2:	d4dd      	bmi.n	800a9b0 <_fflush_r+0xc>
 800a9f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9f6:	f000 f908 	bl	800ac0a <__retarget_lock_release_recursive>
 800a9fa:	e7d9      	b.n	800a9b0 <_fflush_r+0xc>
 800a9fc:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <_fflush_r+0x70>)
 800a9fe:	429c      	cmp	r4, r3
 800aa00:	d101      	bne.n	800aa06 <_fflush_r+0x62>
 800aa02:	68ac      	ldr	r4, [r5, #8]
 800aa04:	e7df      	b.n	800a9c6 <_fflush_r+0x22>
 800aa06:	4b04      	ldr	r3, [pc, #16]	; (800aa18 <_fflush_r+0x74>)
 800aa08:	429c      	cmp	r4, r3
 800aa0a:	bf08      	it	eq
 800aa0c:	68ec      	ldreq	r4, [r5, #12]
 800aa0e:	e7da      	b.n	800a9c6 <_fflush_r+0x22>
 800aa10:	0800b7b4 	.word	0x0800b7b4
 800aa14:	0800b7d4 	.word	0x0800b7d4
 800aa18:	0800b794 	.word	0x0800b794

0800aa1c <std>:
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	4604      	mov	r4, r0
 800aa22:	e9c0 3300 	strd	r3, r3, [r0]
 800aa26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa2a:	6083      	str	r3, [r0, #8]
 800aa2c:	8181      	strh	r1, [r0, #12]
 800aa2e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa30:	81c2      	strh	r2, [r0, #14]
 800aa32:	6183      	str	r3, [r0, #24]
 800aa34:	4619      	mov	r1, r3
 800aa36:	2208      	movs	r2, #8
 800aa38:	305c      	adds	r0, #92	; 0x5c
 800aa3a:	f7fd fbb3 	bl	80081a4 <memset>
 800aa3e:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <std+0x38>)
 800aa40:	6263      	str	r3, [r4, #36]	; 0x24
 800aa42:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <std+0x3c>)
 800aa44:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa46:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <std+0x40>)
 800aa48:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa4a:	4b05      	ldr	r3, [pc, #20]	; (800aa60 <std+0x44>)
 800aa4c:	6224      	str	r4, [r4, #32]
 800aa4e:	6323      	str	r3, [r4, #48]	; 0x30
 800aa50:	bd10      	pop	{r4, pc}
 800aa52:	bf00      	nop
 800aa54:	0800ad6d 	.word	0x0800ad6d
 800aa58:	0800ad8f 	.word	0x0800ad8f
 800aa5c:	0800adc7 	.word	0x0800adc7
 800aa60:	0800adeb 	.word	0x0800adeb

0800aa64 <_cleanup_r>:
 800aa64:	4901      	ldr	r1, [pc, #4]	; (800aa6c <_cleanup_r+0x8>)
 800aa66:	f000 b8af 	b.w	800abc8 <_fwalk_reent>
 800aa6a:	bf00      	nop
 800aa6c:	0800a9a5 	.word	0x0800a9a5

0800aa70 <__sfmoreglue>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	1e4a      	subs	r2, r1, #1
 800aa74:	2568      	movs	r5, #104	; 0x68
 800aa76:	4355      	muls	r5, r2
 800aa78:	460e      	mov	r6, r1
 800aa7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa7e:	f7ff fa87 	bl	8009f90 <_malloc_r>
 800aa82:	4604      	mov	r4, r0
 800aa84:	b140      	cbz	r0, 800aa98 <__sfmoreglue+0x28>
 800aa86:	2100      	movs	r1, #0
 800aa88:	e9c0 1600 	strd	r1, r6, [r0]
 800aa8c:	300c      	adds	r0, #12
 800aa8e:	60a0      	str	r0, [r4, #8]
 800aa90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa94:	f7fd fb86 	bl	80081a4 <memset>
 800aa98:	4620      	mov	r0, r4
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}

0800aa9c <__sfp_lock_acquire>:
 800aa9c:	4801      	ldr	r0, [pc, #4]	; (800aaa4 <__sfp_lock_acquire+0x8>)
 800aa9e:	f000 b8b3 	b.w	800ac08 <__retarget_lock_acquire_recursive>
 800aaa2:	bf00      	nop
 800aaa4:	200138fc 	.word	0x200138fc

0800aaa8 <__sfp_lock_release>:
 800aaa8:	4801      	ldr	r0, [pc, #4]	; (800aab0 <__sfp_lock_release+0x8>)
 800aaaa:	f000 b8ae 	b.w	800ac0a <__retarget_lock_release_recursive>
 800aaae:	bf00      	nop
 800aab0:	200138fc 	.word	0x200138fc

0800aab4 <__sinit_lock_acquire>:
 800aab4:	4801      	ldr	r0, [pc, #4]	; (800aabc <__sinit_lock_acquire+0x8>)
 800aab6:	f000 b8a7 	b.w	800ac08 <__retarget_lock_acquire_recursive>
 800aaba:	bf00      	nop
 800aabc:	200138f7 	.word	0x200138f7

0800aac0 <__sinit_lock_release>:
 800aac0:	4801      	ldr	r0, [pc, #4]	; (800aac8 <__sinit_lock_release+0x8>)
 800aac2:	f000 b8a2 	b.w	800ac0a <__retarget_lock_release_recursive>
 800aac6:	bf00      	nop
 800aac8:	200138f7 	.word	0x200138f7

0800aacc <__sinit>:
 800aacc:	b510      	push	{r4, lr}
 800aace:	4604      	mov	r4, r0
 800aad0:	f7ff fff0 	bl	800aab4 <__sinit_lock_acquire>
 800aad4:	69a3      	ldr	r3, [r4, #24]
 800aad6:	b11b      	cbz	r3, 800aae0 <__sinit+0x14>
 800aad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aadc:	f7ff bff0 	b.w	800aac0 <__sinit_lock_release>
 800aae0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aae4:	6523      	str	r3, [r4, #80]	; 0x50
 800aae6:	4b13      	ldr	r3, [pc, #76]	; (800ab34 <__sinit+0x68>)
 800aae8:	4a13      	ldr	r2, [pc, #76]	; (800ab38 <__sinit+0x6c>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	62a2      	str	r2, [r4, #40]	; 0x28
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	bf04      	itt	eq
 800aaf2:	2301      	moveq	r3, #1
 800aaf4:	61a3      	streq	r3, [r4, #24]
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f000 f820 	bl	800ab3c <__sfp>
 800aafc:	6060      	str	r0, [r4, #4]
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 f81c 	bl	800ab3c <__sfp>
 800ab04:	60a0      	str	r0, [r4, #8]
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 f818 	bl	800ab3c <__sfp>
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	60e0      	str	r0, [r4, #12]
 800ab10:	2104      	movs	r1, #4
 800ab12:	6860      	ldr	r0, [r4, #4]
 800ab14:	f7ff ff82 	bl	800aa1c <std>
 800ab18:	68a0      	ldr	r0, [r4, #8]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	2109      	movs	r1, #9
 800ab1e:	f7ff ff7d 	bl	800aa1c <std>
 800ab22:	68e0      	ldr	r0, [r4, #12]
 800ab24:	2202      	movs	r2, #2
 800ab26:	2112      	movs	r1, #18
 800ab28:	f7ff ff78 	bl	800aa1c <std>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	61a3      	str	r3, [r4, #24]
 800ab30:	e7d2      	b.n	800aad8 <__sinit+0xc>
 800ab32:	bf00      	nop
 800ab34:	0800b414 	.word	0x0800b414
 800ab38:	0800aa65 	.word	0x0800aa65

0800ab3c <__sfp>:
 800ab3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab3e:	4607      	mov	r7, r0
 800ab40:	f7ff ffac 	bl	800aa9c <__sfp_lock_acquire>
 800ab44:	4b1e      	ldr	r3, [pc, #120]	; (800abc0 <__sfp+0x84>)
 800ab46:	681e      	ldr	r6, [r3, #0]
 800ab48:	69b3      	ldr	r3, [r6, #24]
 800ab4a:	b913      	cbnz	r3, 800ab52 <__sfp+0x16>
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f7ff ffbd 	bl	800aacc <__sinit>
 800ab52:	3648      	adds	r6, #72	; 0x48
 800ab54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	d503      	bpl.n	800ab64 <__sfp+0x28>
 800ab5c:	6833      	ldr	r3, [r6, #0]
 800ab5e:	b30b      	cbz	r3, 800aba4 <__sfp+0x68>
 800ab60:	6836      	ldr	r6, [r6, #0]
 800ab62:	e7f7      	b.n	800ab54 <__sfp+0x18>
 800ab64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab68:	b9d5      	cbnz	r5, 800aba0 <__sfp+0x64>
 800ab6a:	4b16      	ldr	r3, [pc, #88]	; (800abc4 <__sfp+0x88>)
 800ab6c:	60e3      	str	r3, [r4, #12]
 800ab6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab72:	6665      	str	r5, [r4, #100]	; 0x64
 800ab74:	f000 f847 	bl	800ac06 <__retarget_lock_init_recursive>
 800ab78:	f7ff ff96 	bl	800aaa8 <__sfp_lock_release>
 800ab7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab84:	6025      	str	r5, [r4, #0]
 800ab86:	61a5      	str	r5, [r4, #24]
 800ab88:	2208      	movs	r2, #8
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab90:	f7fd fb08 	bl	80081a4 <memset>
 800ab94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aba0:	3468      	adds	r4, #104	; 0x68
 800aba2:	e7d9      	b.n	800ab58 <__sfp+0x1c>
 800aba4:	2104      	movs	r1, #4
 800aba6:	4638      	mov	r0, r7
 800aba8:	f7ff ff62 	bl	800aa70 <__sfmoreglue>
 800abac:	4604      	mov	r4, r0
 800abae:	6030      	str	r0, [r6, #0]
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d1d5      	bne.n	800ab60 <__sfp+0x24>
 800abb4:	f7ff ff78 	bl	800aaa8 <__sfp_lock_release>
 800abb8:	230c      	movs	r3, #12
 800abba:	603b      	str	r3, [r7, #0]
 800abbc:	e7ee      	b.n	800ab9c <__sfp+0x60>
 800abbe:	bf00      	nop
 800abc0:	0800b414 	.word	0x0800b414
 800abc4:	ffff0001 	.word	0xffff0001

0800abc8 <_fwalk_reent>:
 800abc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abcc:	4606      	mov	r6, r0
 800abce:	4688      	mov	r8, r1
 800abd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abd4:	2700      	movs	r7, #0
 800abd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abda:	f1b9 0901 	subs.w	r9, r9, #1
 800abde:	d505      	bpl.n	800abec <_fwalk_reent+0x24>
 800abe0:	6824      	ldr	r4, [r4, #0]
 800abe2:	2c00      	cmp	r4, #0
 800abe4:	d1f7      	bne.n	800abd6 <_fwalk_reent+0xe>
 800abe6:	4638      	mov	r0, r7
 800abe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abec:	89ab      	ldrh	r3, [r5, #12]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d907      	bls.n	800ac02 <_fwalk_reent+0x3a>
 800abf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abf6:	3301      	adds	r3, #1
 800abf8:	d003      	beq.n	800ac02 <_fwalk_reent+0x3a>
 800abfa:	4629      	mov	r1, r5
 800abfc:	4630      	mov	r0, r6
 800abfe:	47c0      	blx	r8
 800ac00:	4307      	orrs	r7, r0
 800ac02:	3568      	adds	r5, #104	; 0x68
 800ac04:	e7e9      	b.n	800abda <_fwalk_reent+0x12>

0800ac06 <__retarget_lock_init_recursive>:
 800ac06:	4770      	bx	lr

0800ac08 <__retarget_lock_acquire_recursive>:
 800ac08:	4770      	bx	lr

0800ac0a <__retarget_lock_release_recursive>:
 800ac0a:	4770      	bx	lr

0800ac0c <__swhatbuf_r>:
 800ac0c:	b570      	push	{r4, r5, r6, lr}
 800ac0e:	460e      	mov	r6, r1
 800ac10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac14:	2900      	cmp	r1, #0
 800ac16:	b096      	sub	sp, #88	; 0x58
 800ac18:	4614      	mov	r4, r2
 800ac1a:	461d      	mov	r5, r3
 800ac1c:	da07      	bge.n	800ac2e <__swhatbuf_r+0x22>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	602b      	str	r3, [r5, #0]
 800ac22:	89b3      	ldrh	r3, [r6, #12]
 800ac24:	061a      	lsls	r2, r3, #24
 800ac26:	d410      	bmi.n	800ac4a <__swhatbuf_r+0x3e>
 800ac28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac2c:	e00e      	b.n	800ac4c <__swhatbuf_r+0x40>
 800ac2e:	466a      	mov	r2, sp
 800ac30:	f000 f8f0 	bl	800ae14 <_fstat_r>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	dbf2      	blt.n	800ac1e <__swhatbuf_r+0x12>
 800ac38:	9a01      	ldr	r2, [sp, #4]
 800ac3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac42:	425a      	negs	r2, r3
 800ac44:	415a      	adcs	r2, r3
 800ac46:	602a      	str	r2, [r5, #0]
 800ac48:	e7ee      	b.n	800ac28 <__swhatbuf_r+0x1c>
 800ac4a:	2340      	movs	r3, #64	; 0x40
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	b016      	add	sp, #88	; 0x58
 800ac52:	bd70      	pop	{r4, r5, r6, pc}

0800ac54 <__smakebuf_r>:
 800ac54:	898b      	ldrh	r3, [r1, #12]
 800ac56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac58:	079d      	lsls	r5, r3, #30
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	d507      	bpl.n	800ac70 <__smakebuf_r+0x1c>
 800ac60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	6123      	str	r3, [r4, #16]
 800ac68:	2301      	movs	r3, #1
 800ac6a:	6163      	str	r3, [r4, #20]
 800ac6c:	b002      	add	sp, #8
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}
 800ac70:	ab01      	add	r3, sp, #4
 800ac72:	466a      	mov	r2, sp
 800ac74:	f7ff ffca 	bl	800ac0c <__swhatbuf_r>
 800ac78:	9900      	ldr	r1, [sp, #0]
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff f987 	bl	8009f90 <_malloc_r>
 800ac82:	b948      	cbnz	r0, 800ac98 <__smakebuf_r+0x44>
 800ac84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac88:	059a      	lsls	r2, r3, #22
 800ac8a:	d4ef      	bmi.n	800ac6c <__smakebuf_r+0x18>
 800ac8c:	f023 0303 	bic.w	r3, r3, #3
 800ac90:	f043 0302 	orr.w	r3, r3, #2
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	e7e3      	b.n	800ac60 <__smakebuf_r+0xc>
 800ac98:	4b0d      	ldr	r3, [pc, #52]	; (800acd0 <__smakebuf_r+0x7c>)
 800ac9a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	6020      	str	r0, [r4, #0]
 800aca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca4:	81a3      	strh	r3, [r4, #12]
 800aca6:	9b00      	ldr	r3, [sp, #0]
 800aca8:	6163      	str	r3, [r4, #20]
 800acaa:	9b01      	ldr	r3, [sp, #4]
 800acac:	6120      	str	r0, [r4, #16]
 800acae:	b15b      	cbz	r3, 800acc8 <__smakebuf_r+0x74>
 800acb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acb4:	4630      	mov	r0, r6
 800acb6:	f000 f8bf 	bl	800ae38 <_isatty_r>
 800acba:	b128      	cbz	r0, 800acc8 <__smakebuf_r+0x74>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f023 0303 	bic.w	r3, r3, #3
 800acc2:	f043 0301 	orr.w	r3, r3, #1
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	89a0      	ldrh	r0, [r4, #12]
 800acca:	4305      	orrs	r5, r0
 800accc:	81a5      	strh	r5, [r4, #12]
 800acce:	e7cd      	b.n	800ac6c <__smakebuf_r+0x18>
 800acd0:	0800aa65 	.word	0x0800aa65

0800acd4 <_malloc_usable_size_r>:
 800acd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd8:	1f18      	subs	r0, r3, #4
 800acda:	2b00      	cmp	r3, #0
 800acdc:	bfbc      	itt	lt
 800acde:	580b      	ldrlt	r3, [r1, r0]
 800ace0:	18c0      	addlt	r0, r0, r3
 800ace2:	4770      	bx	lr

0800ace4 <_raise_r>:
 800ace4:	291f      	cmp	r1, #31
 800ace6:	b538      	push	{r3, r4, r5, lr}
 800ace8:	4604      	mov	r4, r0
 800acea:	460d      	mov	r5, r1
 800acec:	d904      	bls.n	800acf8 <_raise_r+0x14>
 800acee:	2316      	movs	r3, #22
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acfa:	b112      	cbz	r2, 800ad02 <_raise_r+0x1e>
 800acfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad00:	b94b      	cbnz	r3, 800ad16 <_raise_r+0x32>
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 f830 	bl	800ad68 <_getpid_r>
 800ad08:	462a      	mov	r2, r5
 800ad0a:	4601      	mov	r1, r0
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad12:	f000 b817 	b.w	800ad44 <_kill_r>
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d00a      	beq.n	800ad30 <_raise_r+0x4c>
 800ad1a:	1c59      	adds	r1, r3, #1
 800ad1c:	d103      	bne.n	800ad26 <_raise_r+0x42>
 800ad1e:	2316      	movs	r3, #22
 800ad20:	6003      	str	r3, [r0, #0]
 800ad22:	2001      	movs	r0, #1
 800ad24:	e7e7      	b.n	800acf6 <_raise_r+0x12>
 800ad26:	2400      	movs	r4, #0
 800ad28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	4798      	blx	r3
 800ad30:	2000      	movs	r0, #0
 800ad32:	e7e0      	b.n	800acf6 <_raise_r+0x12>

0800ad34 <raise>:
 800ad34:	4b02      	ldr	r3, [pc, #8]	; (800ad40 <raise+0xc>)
 800ad36:	4601      	mov	r1, r0
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	f7ff bfd3 	b.w	800ace4 <_raise_r>
 800ad3e:	bf00      	nop
 800ad40:	20000034 	.word	0x20000034

0800ad44 <_kill_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d07      	ldr	r5, [pc, #28]	; (800ad64 <_kill_r+0x20>)
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	4611      	mov	r1, r2
 800ad50:	602b      	str	r3, [r5, #0]
 800ad52:	f7fd f915 	bl	8007f80 <_kill>
 800ad56:	1c43      	adds	r3, r0, #1
 800ad58:	d102      	bne.n	800ad60 <_kill_r+0x1c>
 800ad5a:	682b      	ldr	r3, [r5, #0]
 800ad5c:	b103      	cbz	r3, 800ad60 <_kill_r+0x1c>
 800ad5e:	6023      	str	r3, [r4, #0]
 800ad60:	bd38      	pop	{r3, r4, r5, pc}
 800ad62:	bf00      	nop
 800ad64:	200138f0 	.word	0x200138f0

0800ad68 <_getpid_r>:
 800ad68:	f7fd b902 	b.w	8007f70 <_getpid>

0800ad6c <__sread>:
 800ad6c:	b510      	push	{r4, lr}
 800ad6e:	460c      	mov	r4, r1
 800ad70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad74:	f000 f882 	bl	800ae7c <_read_r>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	bfab      	itete	ge
 800ad7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad80:	181b      	addge	r3, r3, r0
 800ad82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad86:	bfac      	ite	ge
 800ad88:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad8a:	81a3      	strhlt	r3, [r4, #12]
 800ad8c:	bd10      	pop	{r4, pc}

0800ad8e <__swrite>:
 800ad8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	461f      	mov	r7, r3
 800ad94:	898b      	ldrh	r3, [r1, #12]
 800ad96:	05db      	lsls	r3, r3, #23
 800ad98:	4605      	mov	r5, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	4616      	mov	r6, r2
 800ad9e:	d505      	bpl.n	800adac <__swrite+0x1e>
 800ada0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada4:	2302      	movs	r3, #2
 800ada6:	2200      	movs	r2, #0
 800ada8:	f000 f856 	bl	800ae58 <_lseek_r>
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adb6:	81a3      	strh	r3, [r4, #12]
 800adb8:	4632      	mov	r2, r6
 800adba:	463b      	mov	r3, r7
 800adbc:	4628      	mov	r0, r5
 800adbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adc2:	f7fb be89 	b.w	8006ad8 <_write_r>

0800adc6 <__sseek>:
 800adc6:	b510      	push	{r4, lr}
 800adc8:	460c      	mov	r4, r1
 800adca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adce:	f000 f843 	bl	800ae58 <_lseek_r>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	bf15      	itete	ne
 800add8:	6560      	strne	r0, [r4, #84]	; 0x54
 800adda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ade2:	81a3      	strheq	r3, [r4, #12]
 800ade4:	bf18      	it	ne
 800ade6:	81a3      	strhne	r3, [r4, #12]
 800ade8:	bd10      	pop	{r4, pc}

0800adea <__sclose>:
 800adea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adee:	f000 b801 	b.w	800adf4 <_close_r>
	...

0800adf4 <_close_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4d06      	ldr	r5, [pc, #24]	; (800ae10 <_close_r+0x1c>)
 800adf8:	2300      	movs	r3, #0
 800adfa:	4604      	mov	r4, r0
 800adfc:	4608      	mov	r0, r1
 800adfe:	602b      	str	r3, [r5, #0]
 800ae00:	f7fd f8f5 	bl	8007fee <_close>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_close_r+0x1a>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_close_r+0x1a>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	200138f0 	.word	0x200138f0

0800ae14 <_fstat_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4d07      	ldr	r5, [pc, #28]	; (800ae34 <_fstat_r+0x20>)
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	4611      	mov	r1, r2
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	f7fd f8f0 	bl	8008006 <_fstat>
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	d102      	bne.n	800ae30 <_fstat_r+0x1c>
 800ae2a:	682b      	ldr	r3, [r5, #0]
 800ae2c:	b103      	cbz	r3, 800ae30 <_fstat_r+0x1c>
 800ae2e:	6023      	str	r3, [r4, #0]
 800ae30:	bd38      	pop	{r3, r4, r5, pc}
 800ae32:	bf00      	nop
 800ae34:	200138f0 	.word	0x200138f0

0800ae38 <_isatty_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d06      	ldr	r5, [pc, #24]	; (800ae54 <_isatty_r+0x1c>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	602b      	str	r3, [r5, #0]
 800ae44:	f7fd f8ef 	bl	8008026 <_isatty>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_isatty_r+0x1a>
 800ae4c:	682b      	ldr	r3, [r5, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_isatty_r+0x1a>
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	200138f0 	.word	0x200138f0

0800ae58 <_lseek_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d07      	ldr	r5, [pc, #28]	; (800ae78 <_lseek_r+0x20>)
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	4608      	mov	r0, r1
 800ae60:	4611      	mov	r1, r2
 800ae62:	2200      	movs	r2, #0
 800ae64:	602a      	str	r2, [r5, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	f7fd f8e8 	bl	800803c <_lseek>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_lseek_r+0x1e>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_lseek_r+0x1e>
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	200138f0 	.word	0x200138f0

0800ae7c <_read_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d07      	ldr	r5, [pc, #28]	; (800ae9c <_read_r+0x20>)
 800ae80:	4604      	mov	r4, r0
 800ae82:	4608      	mov	r0, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	2200      	movs	r2, #0
 800ae88:	602a      	str	r2, [r5, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f7fd f892 	bl	8007fb4 <_read>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_read_r+0x1e>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_read_r+0x1e>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	200138f0 	.word	0x200138f0

0800aea0 <_init>:
 800aea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea2:	bf00      	nop
 800aea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aea6:	bc08      	pop	{r3}
 800aea8:	469e      	mov	lr, r3
 800aeaa:	4770      	bx	lr

0800aeac <_fini>:
 800aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeae:	bf00      	nop
 800aeb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeb2:	bc08      	pop	{r3}
 800aeb4:	469e      	mov	lr, r3
 800aeb6:	4770      	bx	lr
