
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006920  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08006ad0  08006ad0  00016ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800728c  0800728c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800728c  0800728c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800728c  0800728c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800728c  0800728c  0001728c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007290  08007290  00017290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c0  200001e4  08007478  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  08007478  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010da0  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237f  00000000  00000000  00030fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00033338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00033eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003182  00000000  00000000  00034910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b458  00000000  00000000  00037a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001ac2d  00000000  00000000  00042eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0005db17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000405c  00000000  00000000  0005db6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006ab8 	.word	0x08006ab8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	08006ab8 	.word	0x08006ab8

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	200009ec 	.word	0x200009ec

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <ds1307_init>:
uint8_t bcd_to_binary(uint8_t value);
uint8_t binary_to_bcd(uint8_t value);

I2C_Handle_t g_ds1307I2cHandle;

void ds1307_init(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	ds1307_i2c_pin_config();
 8000c6c:	f000 f8f4 	bl	8000e58 <ds1307_i2c_pin_config>
	ds1307_i2c_config();
 8000c70:	f000 f930 	bl	8000ed4 <ds1307_i2c_config>
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000c74:	2101      	movs	r1, #1
 8000c76:	4802      	ldr	r0, [pc, #8]	; (8000c80 <ds1307_init+0x18>)
 8000c78:	f001 f9da 	bl	8002030 <I2C_PeripheralControl>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40005c00 	.word	0x40005c00

08000c84 <ds1307_set_current_date>:
		hrs = (rtc_time->time_format  == TIME_FORMAT_12HRS_PM) ? hrs | ( 1 << 5) :  hrs & ~( 1 << 5) ;
	}
	ds1307_write(hrs, DS1307_ADDR_HRS);
}

void ds1307_set_current_date(RTC_date_t *rtc_date) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f96f 	bl	8000f74 <binary_to_bcd>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f930 	bl	8000f00 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	785b      	ldrb	r3, [r3, #1]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f965 	bl	8000f74 <binary_to_bcd>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2105      	movs	r1, #5
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f926 	bl	8000f00 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	789b      	ldrb	r3, [r3, #2]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f95b 	bl	8000f74 <binary_to_bcd>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2106      	movs	r1, #6
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f91c 	bl	8000f00 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	78db      	ldrb	r3, [r3, #3]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f951 	bl	8000f74 <binary_to_bcd>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f912 	bl	8000f00 <ds1307_write>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 f923 	bl	8000f38 <ds1307_read>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cfc:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000cfe:	7bbb      	ldrb	r3, [r7, #14]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f963 	bl	8000fcc <bcd_to_binary>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f000 f912 	bl	8000f38 <ds1307_read>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f958 	bl	8000fcc <bcd_to_binary>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f000 f907 	bl	8000f38 <ds1307_read>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)) {
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d00f      	beq.n	8000d58 <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bf14      	ite	ne
 8000d42:	2301      	movne	r3, #1
 8000d44:	2300      	moveq	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	e002      	b.n	8000d5e <ds1307_get_current_time+0x7a>
	} else {
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f933 	bl	8000fcc <bcd_to_binary>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	709a      	strb	r2, [r3, #2]

	rtc_time->time_validity = true;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	711a      	strb	r2, [r3, #4]

	if(rtc_time->hours > 23 && rtc_time->time_format == TIME_FORMAT_24HRS)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	789b      	ldrb	r3, [r3, #2]
 8000d78:	2b17      	cmp	r3, #23
 8000d7a:	d906      	bls.n	8000d8a <ds1307_get_current_time+0xa6>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	78db      	ldrb	r3, [r3, #3]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d102      	bne.n	8000d8a <ds1307_get_current_time+0xa6>
		rtc_time->time_validity = false;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	711a      	strb	r2, [r3, #4]
	if(rtc_time->hours > 12 && (rtc_time->time_format == TIME_FORMAT_12HRS_AM || rtc_time->time_format == TIME_FORMAT_12HRS_PM))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	789b      	ldrb	r3, [r3, #2]
 8000d8e:	2b0c      	cmp	r3, #12
 8000d90:	d90a      	bls.n	8000da8 <ds1307_get_current_time+0xc4>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	78db      	ldrb	r3, [r3, #3]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <ds1307_get_current_time+0xbe>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	78db      	ldrb	r3, [r3, #3]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d102      	bne.n	8000da8 <ds1307_get_current_time+0xc4>
		rtc_time->time_validity = false;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	711a      	strb	r2, [r3, #4]
	if(rtc_time->minutes > 59)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	785b      	ldrb	r3, [r3, #1]
 8000dac:	2b3b      	cmp	r3, #59	; 0x3b
 8000dae:	d902      	bls.n	8000db6 <ds1307_get_current_time+0xd2>
		rtc_time->time_validity = false;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	711a      	strb	r2, [r3, #4]
	if(rtc_time->seconds > 59)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b3b      	cmp	r3, #59	; 0x3b
 8000dbc:	d902      	bls.n	8000dc4 <ds1307_get_current_time+0xe0>
		rtc_time->time_validity = false;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	711a      	strb	r2, [r3, #4]
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f8af 	bl	8000f38 <ds1307_read>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f8f5 	bl	8000fcc <bcd_to_binary>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461a      	mov	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000dea:	2004      	movs	r0, #4
 8000dec:	f000 f8a4 	bl	8000f38 <ds1307_read>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f8ea 	bl	8000fcc <bcd_to_binary>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000e00:	2005      	movs	r0, #5
 8000e02:	f000 f899 	bl	8000f38 <ds1307_read>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f8df 	bl	8000fcc <bcd_to_binary>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000e16:	2006      	movs	r0, #6
 8000e18:	f000 f88e 	bl	8000f38 <ds1307_read>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f8d4 	bl	8000fcc <bcd_to_binary>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	709a      	strb	r2, [r3, #2]

	rtc_date->date_validity = true;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	711a      	strb	r2, [r3, #4]
	if(rtc_date->day == 131 || rtc_date->month == 131 || rtc_date->year == 131)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	78db      	ldrb	r3, [r3, #3]
 8000e36:	2b83      	cmp	r3, #131	; 0x83
 8000e38:	d007      	beq.n	8000e4a <ds1307_get_current_date+0x7e>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	785b      	ldrb	r3, [r3, #1]
 8000e3e:	2b83      	cmp	r3, #131	; 0x83
 8000e40:	d003      	beq.n	8000e4a <ds1307_get_current_date+0x7e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	789b      	ldrb	r3, [r3, #2]
 8000e46:	2b83      	cmp	r3, #131	; 0x83
 8000e48:	d102      	bne.n	8000e50 <ds1307_get_current_date+0x84>
		rtc_date->date_validity = false;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	711a      	strb	r2, [r3, #4]
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ds1307_i2c_pin_config>:

void ds1307_i2c_pin_config(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	220c      	movs	r2, #12
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 ffa8 	bl	8003dbc <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	220c      	movs	r2, #12
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 ffa2 	bl	8003dbc <memset>

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT_SDA;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <ds1307_i2c_pin_config+0x74>)
 8000e7a:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e80:	2302      	movs	r3, #2
 8000e82:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000e84:	2309      	movs	r3, #9
 8000e86:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e90:	2302      	movs	r3, #2
 8000e92:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_sda);
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fe85 	bl	8001ba8 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT_SCL;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <ds1307_i2c_pin_config+0x78>)
 8000ea0:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fe73 	bl	8001ba8 <GPIO_Init>

}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <ds1307_i2c_config>:

void ds1307_i2c_config(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <ds1307_i2c_config+0x20>)
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <ds1307_i2c_config+0x24>)
 8000edc:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <ds1307_i2c_config+0x20>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <ds1307_i2c_config+0x20>)
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <ds1307_i2c_config+0x28>)
 8000ee8:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 8000eea:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <ds1307_i2c_config+0x20>)
 8000eec:	f001 f8f4 	bl	80020d8 <I2C_Init>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200007c8 	.word	0x200007c8
 8000ef8:	40005c00 	.word	0x40005c00
 8000efc:	000186a0 	.word	0x000186a0

08000f00 <ds1307_write>:


void ds1307_write(uint8_t value,uint8_t reg_addr) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	4603      	mov	r3, r0
 8000f08:	460a      	mov	r2, r1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000f18:	f107 010c 	add.w	r1, r7, #12
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2368      	movs	r3, #104	; 0x68
 8000f22:	2202      	movs	r2, #2
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <ds1307_write+0x34>)
 8000f26:	f001 f99d 	bl	8002264 <I2C_MasterSendData>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200007c8 	.word	0x200007c8

08000f38 <ds1307_read>:



uint8_t ds1307_read(uint8_t reg_addr) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 8000f42:	1df9      	adds	r1, r7, #7
 8000f44:	2300      	movs	r3, #0
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2368      	movs	r3, #104	; 0x68
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <ds1307_read+0x38>)
 8000f4e:	f001 f989 	bl	8002264 <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000f52:	f107 010f 	add.w	r1, r7, #15
 8000f56:	2300      	movs	r3, #0
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2368      	movs	r3, #104	; 0x68
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <ds1307_read+0x38>)
 8000f60:	f001 fa1b 	bl	800239a <I2C_MasterReceiveData>
    return data;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200007c8 	.word	0x200007c8

08000f74 <binary_to_bcd>:

uint8_t binary_to_bcd(uint8_t value) {
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	73fb      	strb	r3, [r7, #15]
	if(value >= 10) {
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b09      	cmp	r3, #9
 8000f86:	d918      	bls.n	8000fba <binary_to_bcd+0x46>
		m = value /10;
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <binary_to_bcd+0x54>)
 8000f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <binary_to_bcd+0x54>)
 8000f98:	fba3 1302 	umull	r1, r3, r3, r2
 8000f9c:	08d9      	lsrs	r1, r3, #3
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	b25a      	sxtb	r2, r3
 8000fb0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	cccccccd 	.word	0xcccccccd

08000fcc <bcd_to_binary>:

uint8_t bcd_to_binary(uint8_t value) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 030f 	and.w	r3, r3, #15
 8000fec:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 800100e:	2101      	movs	r1, #1
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <LCD5110_send+0x40>)
 8001012:	f001 fbb7 	bl	8002784 <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2101      	movs	r1, #1
 800101a:	480b      	ldr	r0, [pc, #44]	; (8001048 <LCD5110_send+0x44>)
 800101c:	f000 ff60 	bl	8001ee0 <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <LCD5110_send+0x40>)
 8001026:	f001 fb82 	bl	800272e <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 800102a:	2201      	movs	r2, #1
 800102c:	2101      	movs	r1, #1
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <LCD5110_send+0x44>)
 8001030:	f000 ff56 	bl	8001ee0 <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 8001034:	2100      	movs	r1, #0
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <LCD5110_send+0x40>)
 8001038:	f001 fba4 	bl	8002784 <SPI_PeripheralControl>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40013000 	.word	0x40013000
 8001048:	40020400 	.word	0x40020400

0800104c <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d002      	beq.n	8001068 <LCD5110_Pin+0x1c>
 8001062:	2b02      	cmp	r3, #2
 8001064:	d00f      	beq.n	8001086 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 8001066:	e01d      	b.n	80010a4 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	2105      	movs	r1, #5
 8001072:	480e      	ldr	r0, [pc, #56]	; (80010ac <LCD5110_Pin+0x60>)
 8001074:	f000 ff34 	bl	8001ee0 <GPIO_WriteToOutputPin>
			break;
 8001078:	e014      	b.n	80010a4 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <LCD5110_Pin+0x60>)
 8001080:	f000 ff2e 	bl	8001ee0 <GPIO_WriteToOutputPin>
			break;
 8001084:	e00e      	b.n	80010a4 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 800108c:	2201      	movs	r2, #1
 800108e:	2107      	movs	r1, #7
 8001090:	4807      	ldr	r0, [pc, #28]	; (80010b0 <LCD5110_Pin+0x64>)
 8001092:	f000 ff25 	bl	8001ee0 <GPIO_WriteToOutputPin>
			break;
 8001096:	e004      	b.n	80010a2 <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8001098:	2200      	movs	r2, #0
 800109a:	2107      	movs	r1, #7
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <LCD5110_Pin+0x64>)
 800109e:	f000 ff1f 	bl	8001ee0 <GPIO_WriteToOutputPin>
			break;
 80010a2:	bf00      	nop
	}
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40021000 	.word	0x40021000

080010b4 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e002      	b.n	80010c8 <LCD5110_Delay+0x14>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f8      	bhi.n	80010c2 <LCD5110_Delay+0xe>
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 80010ea:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <LCD5110_Init+0x138>)
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80010ee:	2302      	movs	r3, #2
 80010f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80010f4:	2305      	movs	r3, #5
 80010f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001106:	2302      	movs	r3, #2
 8001108:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800110c:	2305      	movs	r3, #5
 800110e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fd46 	bl	8001ba8 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800111c:	2307      	movs	r3, #7
 800111e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fd3e 	bl	8001ba8 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 800112c:	4b3b      	ldr	r3, [pc, #236]	; (800121c <LCD5110_Init+0x13c>)
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 8001130:	2301      	movs	r3, #1
 8001132:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001136:	2301      	movs	r3, #1
 8001138:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001142:	2300      	movs	r3, #0
 8001144:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 8001148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fd2b 	bl	8001ba8 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <LCD5110_Init+0x140>)
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 8001156:	2305      	movs	r3, #5
 8001158:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800115c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fd21 	bl	8001ba8 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <LCD5110_Init+0x144>)
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 800116a:	2307      	movs	r3, #7
 800116c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fd17 	bl	8001ba8 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <LCD5110_Init+0x148>)
 800117c:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800117e:	2301      	movs	r3, #1
 8001180:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 8001182:	2301      	movs	r3, #1
 8001184:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8001186:	2302      	movs	r3, #2
 8001188:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 800118a:	2300      	movs	r3, #0
 800118c:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 800118e:	2300      	movs	r3, #0
 8001190:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 8001192:	2300      	movs	r3, #0
 8001194:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 8001196:	2300      	movs	r3, #0
 8001198:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fa6a 	bl	8002678 <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 80011a4:	2101      	movs	r1, #1
 80011a6:	4820      	ldr	r0, [pc, #128]	; (8001228 <LCD5110_Init+0x148>)
 80011a8:	f001 fb08 	bl	80027bc <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 80011ac:	2100      	movs	r1, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	f7ff ff4c 	bl	800104c <LCD5110_Pin>
	LCD5110_Delay(10000);
 80011b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80011b8:	f7ff ff7c 	bl	80010b4 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 80011bc:	2101      	movs	r1, #1
 80011be:	2002      	movs	r0, #2
 80011c0:	f7ff ff44 	bl	800104c <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 80011c4:	2121      	movs	r1, #33	; 0x21
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f830 	bl	800122c <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 80011cc:	2114      	movs	r1, #20
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 f82c 	bl	800122c <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da01      	bge.n	80011e0 <LCD5110_Init+0x100>
		contrast = 0x7F;
 80011dc:	237f      	movs	r3, #127	; 0x7f
 80011de:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f81e 	bl	800122c <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 80011f0:	2120      	movs	r1, #32
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f81a 	bl	800122c <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 80011f8:	210c      	movs	r1, #12
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 f816 	bl	800122c <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 8001200:	f000 f8b8 	bl	8001374 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001204:	210c      	movs	r1, #12
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f810 	bl	800122c <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 800120c:	f000 f88c 	bl	8001328 <LCD5110_Clear>
}
 8001210:	bf00      	nop
 8001212:	3738      	adds	r7, #56	; 0x38
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40021000 	.word	0x40021000
 8001228:	40013000 	.word	0x40013000

0800122c <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	460a      	mov	r2, r1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <LCD5110_Write+0x24>
 8001242:	2b01      	cmp	r3, #1
 8001244:	d109      	bne.n	800125a <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 8001246:	2101      	movs	r1, #1
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff feff 	bl	800104c <LCD5110_Pin>
			break;
 800124e:	e005      	b.n	800125c <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 8001250:	2100      	movs	r1, #0
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff fefa 	bl	800104c <LCD5110_Pin>
			break;
 8001258:	e000      	b.n	800125c <LCD5110_Write+0x30>
		default: break;
 800125a:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fed0 	bl	8001004 <LCD5110_send>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	460b      	mov	r3, r1
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	4613      	mov	r3, r2
 800127c:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b53      	cmp	r3, #83	; 0x53
 8001282:	d849      	bhi.n	8001318 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b2f      	cmp	r3, #47	; 0x2f
 8001288:	d848      	bhi.n	800131c <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01d      	beq.n	80012cc <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	08db      	lsrs	r3, r3, #3
 8001296:	b2d8      	uxtb	r0, r3
 8001298:	4601      	mov	r1, r0
 800129a:	2354      	movs	r3, #84	; 0x54
 800129c:	fb03 f301 	mul.w	r3, r3, r1
 80012a0:	4413      	add	r3, r2
 80012a2:	4a20      	ldr	r2, [pc, #128]	; (8001324 <LCD5110_DrawPixel+0xb8>)
 80012a4:	5cd3      	ldrb	r3, [r2, r3]
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	2101      	movs	r1, #1
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b259      	sxtb	r1, r3
 80012ba:	79fa      	ldrb	r2, [r7, #7]
 80012bc:	2354      	movs	r3, #84	; 0x54
 80012be:	fb03 f300 	mul.w	r3, r3, r0
 80012c2:	4413      	add	r3, r2
 80012c4:	b2c9      	uxtb	r1, r1
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <LCD5110_DrawPixel+0xb8>)
 80012c8:	54d1      	strb	r1, [r2, r3]
 80012ca:	e01e      	b.n	800130a <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 80012cc:	79fa      	ldrb	r2, [r7, #7]
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	b2d8      	uxtb	r0, r3
 80012d4:	4601      	mov	r1, r0
 80012d6:	2354      	movs	r3, #84	; 0x54
 80012d8:	fb03 f301 	mul.w	r3, r3, r1
 80012dc:	4413      	add	r3, r2
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <LCD5110_DrawPixel+0xb8>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
 80012e2:	b25a      	sxtb	r2, r3
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2101      	movs	r1, #1
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4013      	ands	r3, r2
 80012f8:	b259      	sxtb	r1, r3
 80012fa:	79fa      	ldrb	r2, [r7, #7]
 80012fc:	2354      	movs	r3, #84	; 0x54
 80012fe:	fb03 f300 	mul.w	r3, r3, r0
 8001302:	4413      	add	r3, r2
 8001304:	b2c9      	uxtb	r1, r1
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <LCD5110_DrawPixel+0xb8>)
 8001308:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	79b9      	ldrb	r1, [r7, #6]
 8001310:	79f8      	ldrb	r0, [r7, #7]
 8001312:	f000 f89d 	bl	8001450 <LCD5110_UpdateArea>
 8001316:	e002      	b.n	800131e <LCD5110_DrawPixel+0xb2>
		return;
 8001318:	bf00      	nop
 800131a:	e000      	b.n	800131e <LCD5110_DrawPixel+0xb2>
		return;
 800131c:	bf00      	nop
}
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200007f4 	.word	0x200007f4

08001328 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 800132e:	f000 f821 	bl	8001374 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	e007      	b.n	8001348 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <LCD5110_Clear+0x48>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3301      	adds	r3, #1
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800134e:	d3f3      	bcc.n	8001338 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f8b8 	bl	80014c8 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 8001358:	232f      	movs	r3, #47	; 0x2f
 800135a:	2253      	movs	r2, #83	; 0x53
 800135c:	2100      	movs	r1, #0
 800135e:	2000      	movs	r0, #0
 8001360:	f000 f876 	bl	8001450 <LCD5110_UpdateArea>
	LCD5110_Refresh();
 8001364:	f000 f812 	bl	800138c <LCD5110_Refresh>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200007f4 	.word	0x200007f4

08001374 <LCD5110_Home>:

void LCD5110_Home(void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ff56 	bl	800122c <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff ff52 	bl	800122c <LCD5110_Write>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	e03b      	b.n	8001410 <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <LCD5110_Refresh+0xb0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3301      	adds	r3, #1
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dc2f      	bgt.n	8001408 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4a24      	ldr	r2, [pc, #144]	; (8001440 <LCD5110_Refresh+0xb4>)
 80013ae:	7812      	ldrb	r2, [r2, #0]
 80013b0:	4293      	cmp	r3, r2
 80013b2:	dc31      	bgt.n	8001418 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff ff34 	bl	800122c <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <LCD5110_Refresh+0xb8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ff2b 	bl	800122c <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <LCD5110_Refresh+0xb8>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	71bb      	strb	r3, [r7, #6]
 80013dc:	e00e      	b.n	80013fc <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2254      	movs	r2, #84	; 0x54
 80013e2:	fb02 f203 	mul.w	r2, r2, r3
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <LCD5110_Refresh+0xbc>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	4619      	mov	r1, r3
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff ff1b 	bl	800122c <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 80013f6:	79bb      	ldrb	r3, [r7, #6]
 80013f8:	3301      	adds	r3, #1
 80013fa:	71bb      	strb	r3, [r7, #6]
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <LCD5110_Refresh+0xc0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	79ba      	ldrb	r2, [r7, #6]
 8001402:	429a      	cmp	r2, r3
 8001404:	d9eb      	bls.n	80013de <LCD5110_Refresh+0x52>
 8001406:	e000      	b.n	800140a <LCD5110_Refresh+0x7e>
			continue;
 8001408:	bf00      	nop
	for (i = 0; i < 6; i++) {
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	3301      	adds	r3, #1
 800140e:	71fb      	strb	r3, [r7, #7]
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d9c0      	bls.n	8001398 <LCD5110_Refresh+0xc>
 8001416:	e000      	b.n	800141a <LCD5110_Refresh+0x8e>
			break;
 8001418:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <LCD5110_Refresh+0xb8>)
 800141c:	2253      	movs	r2, #83	; 0x53
 800141e:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <LCD5110_Refresh+0xc0>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <LCD5110_Refresh+0xb0>)
 8001428:	222f      	movs	r2, #47	; 0x2f
 800142a:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <LCD5110_Refresh+0xb4>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000202 	.word	0x20000202
 8001440:	20000203 	.word	0x20000203
 8001444:	20000200 	.word	0x20000200
 8001448:	200007f4 	.word	0x200007f4
 800144c:	20000201 	.word	0x20000201

08001450 <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8001450:	b490      	push	{r4, r7}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4604      	mov	r4, r0
 8001458:	4608      	mov	r0, r1
 800145a:	4611      	mov	r1, r2
 800145c:	461a      	mov	r2, r3
 800145e:	4623      	mov	r3, r4
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	4603      	mov	r3, r0
 8001464:	71bb      	strb	r3, [r7, #6]
 8001466:	460b      	mov	r3, r1
 8001468:	717b      	strb	r3, [r7, #5]
 800146a:	4613      	mov	r3, r2
 800146c:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <LCD5110_UpdateArea+0x68>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	79fa      	ldrb	r2, [r7, #7]
 8001474:	429a      	cmp	r2, r3
 8001476:	d202      	bcs.n	800147e <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8001478:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <LCD5110_UpdateArea+0x68>)
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <LCD5110_UpdateArea+0x6c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	797a      	ldrb	r2, [r7, #5]
 8001484:	429a      	cmp	r2, r3
 8001486:	d902      	bls.n	800148e <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8001488:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <LCD5110_UpdateArea+0x6c>)
 800148a:	797b      	ldrb	r3, [r7, #5]
 800148c:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <LCD5110_UpdateArea+0x70>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	79ba      	ldrb	r2, [r7, #6]
 8001494:	429a      	cmp	r2, r3
 8001496:	d202      	bcs.n	800149e <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8001498:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <LCD5110_UpdateArea+0x70>)
 800149a:	79bb      	ldrb	r3, [r7, #6]
 800149c:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <LCD5110_UpdateArea+0x74>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	793a      	ldrb	r2, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d902      	bls.n	80014ae <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <LCD5110_UpdateArea+0x74>)
 80014aa:	793b      	ldrb	r3, [r7, #4]
 80014ac:	7013      	strb	r3, [r2, #0]
	}
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc90      	pop	{r4, r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000200 	.word	0x20000200
 80014bc:	20000201 	.word	0x20000201
 80014c0:	20000202 	.word	0x20000202
 80014c4:	20000203 	.word	0x20000203

080014c8 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	460a      	mov	r2, r1
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	4613      	mov	r3, r2
 80014d6:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <LCD5110_GotoXY+0x28>)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <LCD5110_GotoXY+0x2c>)
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	7013      	strb	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	200007f0 	.word	0x200007f0
 80014f4:	200007f1 	.word	0x200007f1

080014f8 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	460b      	mov	r3, r1
 8001504:	71bb      	strb	r3, [r7, #6]
 8001506:	4613      	mov	r3, r2
 8001508:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d104      	bne.n	800151a <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8001510:	2304      	movs	r3, #4
 8001512:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8001514:	2306      	movs	r3, #6
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e003      	b.n	8001522 <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 800151a:	2306      	movs	r3, #6
 800151c:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 800151e:	2308      	movs	r3, #8
 8001520:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8001522:	4b46      	ldr	r3, [pc, #280]	; (800163c <LCD5110_Putc+0x144>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	4413      	add	r3, r2
 800152c:	2b54      	cmp	r3, #84	; 0x54
 800152e:	dd09      	ble.n	8001544 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8001530:	4b43      	ldr	r3, [pc, #268]	; (8001640 <LCD5110_Putc+0x148>)
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	4413      	add	r3, r2
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <LCD5110_Putc+0x148>)
 800153c:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <LCD5110_Putc+0x144>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8001544:	2300      	movs	r3, #0
 8001546:	737b      	strb	r3, [r7, #13]
 8001548:	e068      	b.n	800161c <LCD5110_Putc+0x124>
		if (c < 32) {
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b1f      	cmp	r3, #31
 800154e:	d91c      	bls.n	800158a <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8001550:	797b      	ldrb	r3, [r7, #5]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10c      	bne.n	8001570 <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f1a3 0220 	sub.w	r2, r3, #32
 800155c:	7b79      	ldrb	r1, [r7, #13]
 800155e:	4839      	ldr	r0, [pc, #228]	; (8001644 <LCD5110_Putc+0x14c>)
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	4403      	add	r3, r0
 8001568:	440b      	add	r3, r1
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	733b      	strb	r3, [r7, #12]
 800156e:	e00c      	b.n	800158a <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f1a3 0220 	sub.w	r2, r3, #32
 8001576:	7b79      	ldrb	r1, [r7, #13]
 8001578:	4833      	ldr	r0, [pc, #204]	; (8001648 <LCD5110_Putc+0x150>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4403      	add	r3, r0
 8001584:	440b      	add	r3, r1
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 800158a:	7b3b      	ldrb	r3, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <LCD5110_Putc+0xa4>
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <LCD5110_Putc+0xa4>
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b20      	cmp	r3, #32
 800159a:	d13b      	bne.n	8001614 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 800159c:	2300      	movs	r3, #0
 800159e:	72fb      	strb	r3, [r7, #11]
 80015a0:	e02d      	b.n	80015fe <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d112      	bne.n	80015ce <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <LCD5110_Putc+0x144>)
 80015aa:	7818      	ldrb	r0, [r3, #0]
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <LCD5110_Putc+0x148>)
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	7afb      	ldrb	r3, [r7, #11]
 80015b2:	4413      	add	r3, r2
 80015b4:	b2d9      	uxtb	r1, r3
 80015b6:	7b3a      	ldrb	r2, [r7, #12]
 80015b8:	7afb      	ldrb	r3, [r7, #11]
 80015ba:	fa42 f303 	asr.w	r3, r2, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	f7ff fe50 	bl	800126c <LCD5110_DrawPixel>
 80015cc:	e014      	b.n	80015f8 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <LCD5110_Putc+0x144>)
 80015d0:	7818      	ldrb	r0, [r3, #0]
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <LCD5110_Putc+0x148>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	4413      	add	r3, r2
 80015da:	b2d9      	uxtb	r1, r3
 80015dc:	7b3a      	ldrb	r2, [r7, #12]
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	fa42 f303 	asr.w	r3, r2, r3
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf0c      	ite	eq
 80015ec:	2301      	moveq	r3, #1
 80015ee:	2300      	movne	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	f7ff fe3a 	bl	800126c <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	3301      	adds	r3, #1
 80015fc:	72fb      	strb	r3, [r7, #11]
 80015fe:	7afa      	ldrb	r2, [r7, #11]
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3cd      	bcc.n	80015a2 <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <LCD5110_Putc+0x144>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <LCD5110_Putc+0x144>)
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e000      	b.n	8001616 <LCD5110_Putc+0x11e>
			continue;
 8001614:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8001616:	7b7b      	ldrb	r3, [r7, #13]
 8001618:	3301      	adds	r3, #1
 800161a:	737b      	strb	r3, [r7, #13]
 800161c:	7b7a      	ldrb	r2, [r7, #13]
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	3b01      	subs	r3, #1
 8001622:	429a      	cmp	r2, r3
 8001624:	db91      	blt.n	800154a <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <LCD5110_Putc+0x144>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b03      	ldr	r3, [pc, #12]	; (800163c <LCD5110_Putc+0x144>)
 8001630:	701a      	strb	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200007f0 	.word	0x200007f0
 8001640:	200007f1 	.word	0x200007f1
 8001644:	08006d5c 	.word	0x08006d5c
 8001648:	08006b14 	.word	0x08006b14

0800164c <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
 8001658:	4613      	mov	r3, r2
 800165a:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 800165c:	e008      	b.n	8001670 <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	78ba      	ldrb	r2, [r7, #2]
 8001668:	78f9      	ldrb	r1, [r7, #3]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff44 	bl	80014f8 <LCD5110_Putc>
	while (*c) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f2      	bne.n	800165e <LCD5110_Puts+0x12>
	}
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	601a      	str	r2, [r3, #0]
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6892      	ldr	r2, [r2, #8]
 80016e0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6852      	ldr	r2, [r2, #4]
 80016ea:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d103      	bne.n	80016fe <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800172a:	4b50      	ldr	r3, [pc, #320]	; (800186c <xTaskIncrementTick+0x14c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 8092 	bne.w	8001858 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001734:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <xTaskIncrementTick+0x150>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800173c:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <xTaskIncrementTick+0x150>)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d120      	bne.n	800178a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001748:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <xTaskIncrementTick+0x154>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00a      	beq.n	8001768 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001756:	f383 8811 	msr	BASEPRI, r3
 800175a:	f3bf 8f6f 	isb	sy
 800175e:	f3bf 8f4f 	dsb	sy
 8001762:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001764:	bf00      	nop
 8001766:	e7fe      	b.n	8001766 <xTaskIncrementTick+0x46>
 8001768:	4b42      	ldr	r3, [pc, #264]	; (8001874 <xTaskIncrementTick+0x154>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b42      	ldr	r3, [pc, #264]	; (8001878 <xTaskIncrementTick+0x158>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a40      	ldr	r2, [pc, #256]	; (8001874 <xTaskIncrementTick+0x154>)
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4a40      	ldr	r2, [pc, #256]	; (8001878 <xTaskIncrementTick+0x158>)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b3f      	ldr	r3, [pc, #252]	; (800187c <xTaskIncrementTick+0x15c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	4a3e      	ldr	r2, [pc, #248]	; (800187c <xTaskIncrementTick+0x15c>)
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	f000 f8f5 	bl	8001974 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <xTaskIncrementTick+0x160>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d34c      	bcc.n	800182e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001794:	4b37      	ldr	r3, [pc, #220]	; (8001874 <xTaskIncrementTick+0x154>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d104      	bne.n	80017a8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <xTaskIncrementTick+0x160>)
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a4:	601a      	str	r2, [r3, #0]
                    break;
 80017a6:	e042      	b.n	800182e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <xTaskIncrementTick+0x154>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d203      	bcs.n	80017c8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80017c0:	4a2f      	ldr	r2, [pc, #188]	; (8001880 <xTaskIncrementTick+0x160>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80017c6:	e032      	b.n	800182e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3304      	adds	r3, #4
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff7c 	bl	80016ca <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d004      	beq.n	80017e4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3318      	adds	r3, #24
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff73 	bl	80016ca <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 ff98 	bl	800371c <SEGGER_SYSVIEW_OnTaskStartReady>
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	2201      	movs	r2, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <xTaskIncrementTick+0x164>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	4a22      	ldr	r2, [pc, #136]	; (8001884 <xTaskIncrementTick+0x164>)
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <xTaskIncrementTick+0x168>)
 800180c:	441a      	add	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3304      	adds	r3, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f7ff ff34 	bl	8001682 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <xTaskIncrementTick+0x16c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	429a      	cmp	r2, r3
 8001826:	d3b5      	bcc.n	8001794 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001828:	2301      	movs	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800182c:	e7b2      	b.n	8001794 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <xTaskIncrementTick+0x16c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001834:	4914      	ldr	r1, [pc, #80]	; (8001888 <xTaskIncrementTick+0x168>)
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d901      	bls.n	800184a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8001846:	2301      	movs	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <xTaskIncrementTick+0x170>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8001852:	2301      	movs	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e004      	b.n	8001862 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <xTaskIncrementTick+0x174>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <xTaskIncrementTick+0x174>)
 8001860:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001862:	697b      	ldr	r3, [r7, #20]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000028c 	.word	0x2000028c
 8001870:	20000274 	.word	0x20000274
 8001874:	2000026c 	.word	0x2000026c
 8001878:	20000270 	.word	0x20000270
 800187c:	20000284 	.word	0x20000284
 8001880:	20000288 	.word	0x20000288
 8001884:	20000278 	.word	0x20000278
 8001888:	20000208 	.word	0x20000208
 800188c:	20000204 	.word	0x20000204
 8001890:	20000280 	.word	0x20000280
 8001894:	2000027c 	.word	0x2000027c

08001898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800189e:	4b2f      	ldr	r3, [pc, #188]	; (800195c <vTaskSwitchContext+0xc4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <vTaskSwitchContext+0xc8>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80018ac:	e052      	b.n	8001954 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <vTaskSwitchContext+0xc8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <vTaskSwitchContext+0xcc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80018c2:	7afb      	ldrb	r3, [r7, #11]
 80018c4:	f1c3 031f 	rsb	r3, r3, #31
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	4927      	ldr	r1, [pc, #156]	; (8001968 <vTaskSwitchContext+0xd0>)
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80018de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e2:	f383 8811 	msr	BASEPRI, r3
 80018e6:	f3bf 8f6f 	isb	sy
 80018ea:	f3bf 8f4f 	dsb	sy
 80018ee:	607b      	str	r3, [r7, #4]
    }
 80018f0:	bf00      	nop
 80018f2:	e7fe      	b.n	80018f2 <vTaskSwitchContext+0x5a>
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <vTaskSwitchContext+0xd0>)
 8001900:	4413      	add	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	3308      	adds	r3, #8
 8001916:	429a      	cmp	r2, r3
 8001918:	d104      	bne.n	8001924 <vTaskSwitchContext+0x8c>
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <vTaskSwitchContext+0xd4>)
 800192c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <vTaskSwitchContext+0xd4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3334      	adds	r3, #52	; 0x34
 8001934:	2205      	movs	r2, #5
 8001936:	490e      	ldr	r1, [pc, #56]	; (8001970 <vTaskSwitchContext+0xd8>)
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fa23 	bl	8003d84 <memcmp>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <vTaskSwitchContext+0xb8>
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <vTaskSwitchContext+0xd4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f001 fea5 	bl	8003698 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800194e:	e001      	b.n	8001954 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8001950:	f001 fe86 	bl	8003660 <SEGGER_SYSVIEW_OnIdle>
}
 8001954:	bf00      	nop
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000028c 	.word	0x2000028c
 8001960:	20000280 	.word	0x20000280
 8001964:	20000278 	.word	0x20000278
 8001968:	20000208 	.word	0x20000208
 800196c:	20000204 	.word	0x20000204
 8001970:	08006ad0 	.word	0x08006ad0

08001974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <prvResetNextTaskUnblockTime+0x30>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d104      	bne.n	800198c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <prvResetNextTaskUnblockTime+0x34>)
 8001984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001988:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800198a:	e005      	b.n	8001998 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <prvResetNextTaskUnblockTime+0x30>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <prvResetNextTaskUnblockTime+0x34>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000026c 	.word	0x2000026c
 80019a8:	20000288 	.word	0x20000288
 80019ac:	00000000 	.word	0x00000000

080019b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <pxCurrentTCBConst2>)
 80019b2:	6819      	ldr	r1, [r3, #0]
 80019b4:	6808      	ldr	r0, [r1, #0]
 80019b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ba:	f380 8809 	msr	PSP, r0
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f380 8811 	msr	BASEPRI, r0
 80019ca:	4770      	bx	lr
 80019cc:	f3af 8000 	nop.w

080019d0 <pxCurrentTCBConst2>:
 80019d0:	20000204 	.word	0x20000204
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
	...

080019e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80019e0:	f3ef 8009 	mrs	r0, PSP
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <pxCurrentTCBConst>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	f01e 0f10 	tst.w	lr, #16
 80019f0:	bf08      	it	eq
 80019f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80019f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019fa:	6010      	str	r0, [r2, #0]
 80019fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a04:	f380 8811 	msr	BASEPRI, r0
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	f3bf 8f6f 	isb	sy
 8001a10:	f7ff ff42 	bl	8001898 <vTaskSwitchContext>
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f380 8811 	msr	BASEPRI, r0
 8001a1c:	bc09      	pop	{r0, r3}
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	6808      	ldr	r0, [r1, #0]
 8001a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a26:	f01e 0f10 	tst.w	lr, #16
 8001a2a:	bf08      	it	eq
 8001a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a30:	f380 8809 	msr	PSP, r0
 8001a34:	f3bf 8f6f 	isb	sy
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	f3af 8000 	nop.w

08001a40 <pxCurrentTCBConst>:
 8001a40:	20000204 	.word	0x20000204
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop

08001a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
        __asm volatile
 8001a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a52:	f383 8811 	msr	BASEPRI, r3
 8001a56:	f3bf 8f6f 	isb	sy
 8001a5a:	f3bf 8f4f 	dsb	sy
 8001a5e:	607b      	str	r3, [r7, #4]
    }
 8001a60:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001a62:	f001 fd83 	bl	800356c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001a66:	f7ff fe5b 	bl	8001720 <xTaskIncrementTick>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001a70:	f001 fdda 	bl	8003628 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <SysTick_Handler+0x50>)
 8001a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e001      	b.n	8001a82 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8001a7e:	f001 fdb7 	bl	80035f0 <SEGGER_SYSVIEW_RecordExitISR>
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001a8c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000ed04 	.word	0xe000ed04

08001a9c <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d161      	bne.n	8001b72 <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a33      	ldr	r2, [pc, #204]	; (8001b80 <GPIO_PeriClockControl+0xe4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d106      	bne.n	8001ac4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8001ab6:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 8001ac2:	e056      	b.n	8001b72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a30      	ldr	r2, [pc, #192]	; (8001b88 <GPIO_PeriClockControl+0xec>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d106      	bne.n	8001ada <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4a2c      	ldr	r2, [pc, #176]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001ad8:	e04b      	b.n	8001b72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a2b      	ldr	r2, [pc, #172]	; (8001b8c <GPIO_PeriClockControl+0xf0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d106      	bne.n	8001af0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001aee:	e040      	b.n	8001b72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <GPIO_PeriClockControl+0xf4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d106      	bne.n	8001b06 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a21      	ldr	r2, [pc, #132]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b04:	e035      	b.n	8001b72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <GPIO_PeriClockControl+0xf8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d106      	bne.n	8001b1c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b1a:	e02a      	b.n	8001b72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <GPIO_PeriClockControl+0xfc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d106      	bne.n	8001b32 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a16      	ldr	r2, [pc, #88]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001b2a:	f043 0320 	orr.w	r3, r3, #32
 8001b2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b30:	e01f      	b.n	8001b72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <GPIO_PeriClockControl+0x100>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d106      	bne.n	8001b48 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b46:	e014      	b.n	8001b72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <GPIO_PeriClockControl+0x104>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d106      	bne.n	8001b5e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b5c:	e009      	b.n	8001b72 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <GPIO_PeriClockControl+0x108>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d105      	bne.n	8001b72 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <GPIO_PeriClockControl+0xe8>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40021400 	.word	0x40021400
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40021c00 	.word	0x40021c00
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff6e 	bl	8001a9c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	795b      	ldrb	r3, [r3, #5]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d820      	bhi.n	8001c0a <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	795b      	ldrb	r3, [r3, #5]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	791b      	ldrb	r3, [r3, #4]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	791b      	ldrb	r3, [r3, #4]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2103      	movs	r1, #3
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4619      	mov	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e0cb      	b.n	8001da2 <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	795b      	ldrb	r3, [r3, #5]
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d117      	bne.n	8001c42 <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c12:	4b4b      	ldr	r3, [pc, #300]	; (8001d40 <GPIO_Init+0x198>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	7912      	ldrb	r2, [r2, #4]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	408a      	lsls	r2, r1
 8001c20:	4611      	mov	r1, r2
 8001c22:	4a47      	ldr	r2, [pc, #284]	; (8001d40 <GPIO_Init+0x198>)
 8001c24:	430b      	orrs	r3, r1
 8001c26:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c28:	4b45      	ldr	r3, [pc, #276]	; (8001d40 <GPIO_Init+0x198>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	7912      	ldrb	r2, [r2, #4]
 8001c30:	4611      	mov	r1, r2
 8001c32:	2201      	movs	r2, #1
 8001c34:	408a      	lsls	r2, r1
 8001c36:	43d2      	mvns	r2, r2
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4a41      	ldr	r2, [pc, #260]	; (8001d40 <GPIO_Init+0x198>)
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	6093      	str	r3, [r2, #8]
 8001c40:	e035      	b.n	8001cae <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	795b      	ldrb	r3, [r3, #5]
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	d117      	bne.n	8001c7a <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <GPIO_Init+0x198>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	7912      	ldrb	r2, [r2, #4]
 8001c52:	4611      	mov	r1, r2
 8001c54:	2201      	movs	r2, #1
 8001c56:	408a      	lsls	r2, r1
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4a39      	ldr	r2, [pc, #228]	; (8001d40 <GPIO_Init+0x198>)
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c60:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <GPIO_Init+0x198>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	7912      	ldrb	r2, [r2, #4]
 8001c68:	4611      	mov	r1, r2
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	408a      	lsls	r2, r1
 8001c6e:	43d2      	mvns	r2, r2
 8001c70:	4611      	mov	r1, r2
 8001c72:	4a33      	ldr	r2, [pc, #204]	; (8001d40 <GPIO_Init+0x198>)
 8001c74:	400b      	ands	r3, r1
 8001c76:	60d3      	str	r3, [r2, #12]
 8001c78:	e019      	b.n	8001cae <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	795b      	ldrb	r3, [r3, #5]
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d115      	bne.n	8001cae <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <GPIO_Init+0x198>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	7912      	ldrb	r2, [r2, #4]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	408a      	lsls	r2, r1
 8001c90:	4611      	mov	r1, r2
 8001c92:	4a2b      	ldr	r2, [pc, #172]	; (8001d40 <GPIO_Init+0x198>)
 8001c94:	430b      	orrs	r3, r1
 8001c96:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001c98:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <GPIO_Init+0x198>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	7912      	ldrb	r2, [r2, #4]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	408a      	lsls	r2, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4a25      	ldr	r2, [pc, #148]	; (8001d40 <GPIO_Init+0x198>)
 8001caa:	430b      	orrs	r3, r1
 8001cac:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	791b      	ldrb	r3, [r3, #4]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	791b      	ldrb	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <GPIO_Init+0x19c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d04e      	beq.n	8001d68 <GPIO_Init+0x1c0>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <GPIO_Init+0x1a0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d032      	beq.n	8001d3a <GPIO_Init+0x192>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <GPIO_Init+0x1a4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d02b      	beq.n	8001d36 <GPIO_Init+0x18e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <GPIO_Init+0x1a8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d024      	beq.n	8001d32 <GPIO_Init+0x18a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <GPIO_Init+0x1ac>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01d      	beq.n	8001d2e <GPIO_Init+0x186>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <GPIO_Init+0x1b0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d016      	beq.n	8001d2a <GPIO_Init+0x182>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <GPIO_Init+0x1b4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00f      	beq.n	8001d26 <GPIO_Init+0x17e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <GPIO_Init+0x1b8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d008      	beq.n	8001d22 <GPIO_Init+0x17a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <GPIO_Init+0x1bc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <GPIO_Init+0x176>
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	e025      	b.n	8001d6a <GPIO_Init+0x1c2>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e023      	b.n	8001d6a <GPIO_Init+0x1c2>
 8001d22:	2307      	movs	r3, #7
 8001d24:	e021      	b.n	8001d6a <GPIO_Init+0x1c2>
 8001d26:	2306      	movs	r3, #6
 8001d28:	e01f      	b.n	8001d6a <GPIO_Init+0x1c2>
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	e01d      	b.n	8001d6a <GPIO_Init+0x1c2>
 8001d2e:	2304      	movs	r3, #4
 8001d30:	e01b      	b.n	8001d6a <GPIO_Init+0x1c2>
 8001d32:	2303      	movs	r3, #3
 8001d34:	e019      	b.n	8001d6a <GPIO_Init+0x1c2>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e017      	b.n	8001d6a <GPIO_Init+0x1c2>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e015      	b.n	8001d6a <GPIO_Init+0x1c2>
 8001d3e:	bf00      	nop
 8001d40:	40013c00 	.word	0x40013c00
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40021400 	.word	0x40021400
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	40021c00 	.word	0x40021c00
 8001d64:	40022000 	.word	0x40022000
 8001d68:	2300      	movs	r3, #0
 8001d6a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8001d6c:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <GPIO_Init+0x32c>)
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d70:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <GPIO_Init+0x32c>)
 8001d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d76:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8001d78:	7c7a      	ldrb	r2, [r7, #17]
 8001d7a:	7cbb      	ldrb	r3, [r7, #18]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	fa02 f103 	lsl.w	r1, r2, r3
 8001d82:	4a55      	ldr	r2, [pc, #340]	; (8001ed8 <GPIO_Init+0x330>)
 8001d84:	7cfb      	ldrb	r3, [r7, #19]
 8001d86:	3302      	adds	r3, #2
 8001d88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <GPIO_Init+0x334>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	7912      	ldrb	r2, [r2, #4]
 8001d94:	4611      	mov	r1, r2
 8001d96:	2201      	movs	r2, #1
 8001d98:	408a      	lsls	r2, r1
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4a4f      	ldr	r2, [pc, #316]	; (8001edc <GPIO_Init+0x334>)
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	799b      	ldrb	r3, [r3, #6]
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	791b      	ldrb	r3, [r3, #4]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	791b      	ldrb	r3, [r3, #4]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	4619      	mov	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	400a      	ands	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	79db      	ldrb	r3, [r3, #7]
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	791b      	ldrb	r3, [r3, #4]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	791b      	ldrb	r3, [r3, #4]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2103      	movs	r1, #3
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	4619      	mov	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	400a      	ands	r2, r1
 8001e10:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68d9      	ldr	r1, [r3, #12]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7a1b      	ldrb	r3, [r3, #8]
 8001e26:	461a      	mov	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	791b      	ldrb	r3, [r3, #4]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	791b      	ldrb	r3, [r3, #4]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	2301      	movs	r3, #1
 8001e40:	408b      	lsls	r3, r1
 8001e42:	43db      	mvns	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	795b      	ldrb	r3, [r3, #5]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d131      	bne.n	8001eca <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	791b      	ldrb	r3, [r3, #4]
 8001e6a:	08db      	lsrs	r3, r3, #3
 8001e6c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791b      	ldrb	r3, [r3, #4]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	7c3a      	ldrb	r2, [r7, #16]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	7c3a      	ldrb	r2, [r7, #16]
 8001e98:	4001      	ands	r1, r0
 8001e9a:	3208      	adds	r2, #8
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	7c3a      	ldrb	r2, [r7, #16]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7a5b      	ldrb	r3, [r3, #9]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	7c3a      	ldrb	r2, [r7, #16]
 8001ec2:	4301      	orrs	r1, r0
 8001ec4:	3208      	adds	r2, #8
 8001ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40013800 	.word	0x40013800
 8001edc:	40013c00 	.word	0x40013c00

08001ee0 <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
 8001eec:	4613      	mov	r3, r2
 8001eee:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8001ef0:	78bb      	ldrb	r3, [r7, #2]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d109      	bne.n	8001f0a <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	2101      	movs	r1, #1
 8001efe:	fa01 f202 	lsl.w	r2, r1, r2
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 8001f08:	e009      	b.n	8001f1e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f202 	lsl.w	r2, r1, r2
 8001f16:	43d2      	mvns	r2, r2
 8001f18:	401a      	ands	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	615a      	str	r2, [r3, #20]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	601a      	str	r2, [r3, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	611a      	str	r2, [r3, #16]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	611a      	str	r2, [r3, #16]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle ) {
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL)) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01f      	beq.n	8001ff8 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7f1b      	ldrb	r3, [r3, #28]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d112      	bne.n	8001fe6 <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize  == 1) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d11f      	bne.n	8002008 <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fa9e 	bl	8002510 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8001fe4:	e010      	b.n	8002008 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	60fb      	str	r3, [r7, #12]
}
 8001ff6:	e007      	b.n	8002008 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	60fb      	str	r3, [r7, #12]
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_GenerateStopCondition>:


void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <I2C_PeripheralControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi) {
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d106      	bne.n	8002050 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	else
		pI2Cx->CR1 &= ~(1 << 0);
}
 800204e:	e005      	b.n	800205c <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 0201 	bic.w	r2, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	601a      	str	r2, [r3, #0]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <I2C_PeriClockControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d11f      	bne.n	80020ba <I2C_PeriClockControl+0x52>
		if(pI2Cx == I2C1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <I2C_PeriClockControl+0x60>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d106      	bne.n	8002090 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <I2C_PeriClockControl+0x64>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <I2C_PeriClockControl+0x64>)
 8002088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C3)
			I2C3_PCLK_EN();
	} else {
		//TODO
	}
}
 800208e:	e014      	b.n	80020ba <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <I2C_PeriClockControl+0x68>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d106      	bne.n	80020a6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <I2C_PeriClockControl+0x64>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <I2C_PeriClockControl+0x64>)
 800209e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80020a4:	e009      	b.n	80020ba <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <I2C_PeriClockControl+0x6c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d105      	bne.n	80020ba <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <I2C_PeriClockControl+0x64>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a06      	ldr	r2, [pc, #24]	; (80020cc <I2C_PeriClockControl+0x64>)
 80020b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40005400 	.word	0x40005400
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40005800 	.word	0x40005800
 80020d4:	40005c00 	.word	0x40005c00

080020d8 <I2C_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ffbc 	bl	8002068 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7a5b      	ldrb	r3, [r3, #9]
 80020f4:	029b      	lsls	r3, r3, #10
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 800210a:	f000 fa1d 	bl	8002548 <RCC_GetPCLK1Value>
 800210e:	4603      	mov	r3, r0
 8002110:	4a47      	ldr	r2, [pc, #284]	; (8002230 <I2C_Init+0x158>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9b      	lsrs	r3, r3, #18
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002128:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7a1b      	ldrb	r3, [r3, #8]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	461a      	mov	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002142:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a36      	ldr	r2, [pc, #216]	; (8002234 <I2C_Init+0x15c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d80f      	bhi.n	800217e <I2C_Init+0xa6>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800215e:	f000 f9f3 	bl	8002548 <RCC_GetPCLK1Value>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8002170:	897b      	ldrh	r3, [r7, #10]
 8002172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e02d      	b.n	80021da <I2C_Init+0x102>
	} else {
		//mode is fast mode
		tempreg |= ( 1 << 15);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002184:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7a9b      	ldrb	r3, [r3, #10]
 800218a:	039b      	lsls	r3, r3, #14
 800218c:	461a      	mov	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7a9b      	ldrb	r3, [r3, #10]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10b      	bne.n	80021b4 <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800219c:	f000 f9d4 	bl	8002548 <RCC_GetPCLK1Value>
 80021a0:	4601      	mov	r1, r0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b0:	817b      	strh	r3, [r7, #10]
 80021b2:	e00c      	b.n	80021ce <I2C_Init+0xf6>
		else
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80021b4:	f000 f9c8 	bl	8002548 <RCC_GetPCLK1Value>
 80021b8:	4601      	mov	r1, r0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	009a      	lsls	r2, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021cc:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80021ce:	897b      	ldrh	r3, [r7, #10]
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <I2C_Init+0x15c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d809      	bhi.n	8002200 <I2C_Init+0x128>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 80021ec:	f000 f9ac 	bl	8002548 <RCC_GetPCLK1Value>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <I2C_Init+0x158>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e00d      	b.n	800221c <I2C_Init+0x144>
	else
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8002200:	f000 f9a2 	bl	8002548 <RCC_GetPCLK1Value>
 8002204:	4603      	mov	r3, r0
 8002206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	4a09      	ldr	r2, [pc, #36]	; (8002238 <I2C_Init+0x160>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	09db      	lsrs	r3, r3, #7
 8002218:	3301      	adds	r3, #1
 800221a:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002226:	621a      	str	r2, [r3, #32]

}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	431bde83 	.word	0x431bde83
 8002234:	000186a0 	.word	0x000186a0
 8002238:	00044b83 	.word	0x00044b83

0800223c <I2C_GetFlagStatus>:
void I2C_DeInit(I2C_RegDef_t *pI2Cx) {

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName) {
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <I2C_GetFlagStatus+0x1c>
	return FLAG_RESET;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	70fb      	strb	r3, [r7, #3]
	uint32_t err_break;
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fe57 	bl	8001f2a <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	err_break = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8002280:	e006      	b.n	8002290 <I2C_MasterSendData+0x2c>
		if(err_break++ > 10000) break;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	617a      	str	r2, [r7, #20]
 8002288:	f242 7210 	movw	r2, #10000	; 0x2710
 800228c:	4293      	cmp	r3, r2
 800228e:	d809      	bhi.n	80022a4 <I2C_MasterSendData+0x40>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ffd0 	bl	800223c <I2C_GetFlagStatus>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0ef      	beq.n	8002282 <I2C_MasterSendData+0x1e>
 80022a2:	e000      	b.n	80022a6 <I2C_MasterSendData+0x42>
		if(err_break++ > 10000) break;
 80022a4:	bf00      	nop
	}

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fe4b 	bl	8001f4a <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	err_break = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 80022b8:	e006      	b.n	80022c8 <I2C_MasterSendData+0x64>
		if(err_break++ > 10000) break;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	617a      	str	r2, [r7, #20]
 80022c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d809      	bhi.n	80022dc <I2C_MasterSendData+0x78>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2102      	movs	r1, #2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ffb4 	bl	800223c <I2C_GetFlagStatus>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ef      	beq.n	80022ba <I2C_MasterSendData+0x56>
 80022da:	e000      	b.n	80022de <I2C_MasterSendData+0x7a>
		if(err_break++ > 10000) break;
 80022dc:	bf00      	nop
	}

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff fe5f 	bl	8001fa2 <I2C_ClearADDRFlag>

	//6. send the data until length becomes 0

	while(Len > 0) {
 80022e4:	e01f      	b.n	8002326 <I2C_MasterSendData+0xc2>
		err_break = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { //Wait till TXE is set
 80022ea:	e006      	b.n	80022fa <I2C_MasterSendData+0x96>
			if(err_break++ > 10000) break;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	617a      	str	r2, [r7, #20]
 80022f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d809      	bhi.n	800230e <I2C_MasterSendData+0xaa>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { //Wait till TXE is set
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff9b 	bl	800223c <I2C_GetFlagStatus>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ef      	beq.n	80022ec <I2C_MasterSendData+0x88>
 800230c:	e000      	b.n	8002310 <I2C_MasterSendData+0xac>
			if(err_break++ > 10000) break;
 800230e:	bf00      	nop
		}
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3301      	adds	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
		Len--;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	607b      	str	r3, [r7, #4]
	while(Len > 0) {
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1dc      	bne.n	80022e6 <I2C_MasterSendData+0x82>
	}

	//7. when Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	err_break = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8002330:	e006      	b.n	8002340 <I2C_MasterSendData+0xdc>
		if(err_break++ > 10000) break;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	617a      	str	r2, [r7, #20]
 8002338:	f242 7210 	movw	r2, #10000	; 0x2710
 800233c:	4293      	cmp	r3, r2
 800233e:	d809      	bhi.n	8002354 <I2C_MasterSendData+0xf0>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2180      	movs	r1, #128	; 0x80
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff78 	bl	800223c <I2C_GetFlagStatus>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0ef      	beq.n	8002332 <I2C_MasterSendData+0xce>
 8002352:	e000      	b.n	8002356 <I2C_MasterSendData+0xf2>
		if(err_break++ > 10000) break;
 8002354:	bf00      	nop
	}

	err_break = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) {
 800235a:	e006      	b.n	800236a <I2C_MasterSendData+0x106>
		if(err_break++ > 10000) break;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	617a      	str	r2, [r7, #20]
 8002362:	f242 7210 	movw	r2, #10000	; 0x2710
 8002366:	4293      	cmp	r3, r2
 8002368:	d809      	bhi.n	800237e <I2C_MasterSendData+0x11a>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) {
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2104      	movs	r1, #4
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff63 	bl	800223c <I2C_GetFlagStatus>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ef      	beq.n	800235c <I2C_MasterSendData+0xf8>
 800237c:	e000      	b.n	8002380 <I2C_MasterSendData+0x11c>
		if(err_break++ > 10000) break;
 800237e:	bf00      	nop
	}

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)
 8002380:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d104      	bne.n	8002392 <I2C_MasterSendData+0x12e>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fe3f 	bl	8002010 <I2C_GenerateStopCondition>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	4611      	mov	r1, r2
 80023a6:	461a      	mov	r2, r3
 80023a8:	460b      	mov	r3, r1
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	4613      	mov	r3, r2
 80023ae:	71bb      	strb	r3, [r7, #6]
	uint32_t err_break;
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fdb8 	bl	8001f2a <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	err_break = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 80023be:	e006      	b.n	80023ce <I2C_MasterReceiveData+0x34>
		if(err_break++ > 10000) break;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	617a      	str	r2, [r7, #20]
 80023c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d809      	bhi.n	80023e2 <I2C_MasterReceiveData+0x48>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff31 	bl	800223c <I2C_GetFlagStatus>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ef      	beq.n	80023c0 <I2C_MasterReceiveData+0x26>
 80023e0:	e000      	b.n	80023e4 <I2C_MasterReceiveData+0x4a>
		if(err_break++ > 10000) break;
 80023e2:	bf00      	nop
	}

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	79ba      	ldrb	r2, [r7, #6]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fdc2 	bl	8001f76 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	err_break = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 80023f6:	e006      	b.n	8002406 <I2C_MasterReceiveData+0x6c>
		if(err_break++ > 10000) break;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	617a      	str	r2, [r7, #20]
 80023fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002402:	4293      	cmp	r3, r2
 8002404:	d809      	bhi.n	800241a <I2C_MasterReceiveData+0x80>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2102      	movs	r1, #2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff15 	bl	800223c <I2C_GetFlagStatus>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ef      	beq.n	80023f8 <I2C_MasterReceiveData+0x5e>
 8002418:	e000      	b.n	800241c <I2C_MasterReceiveData+0x82>
		if(err_break++ > 10000) break;
 800241a:	bf00      	nop
	}


	//procedure to read only 1 byte from slave
	if(Len == 1) {
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d12c      	bne.n	800247c <I2C_MasterReceiveData+0xe2>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f871 	bl	8002510 <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f7ff fdb7 	bl	8001fa2 <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		err_break = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8002438:	e006      	b.n	8002448 <I2C_MasterReceiveData+0xae>
			if(err_break++ > 10000) break;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	617a      	str	r2, [r7, #20]
 8002440:	f242 7210 	movw	r2, #10000	; 0x2710
 8002444:	4293      	cmp	r3, r2
 8002446:	d809      	bhi.n	800245c <I2C_MasterReceiveData+0xc2>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2140      	movs	r1, #64	; 0x40
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fef4 	bl	800223c <I2C_GetFlagStatus>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0ef      	beq.n	800243a <I2C_MasterReceiveData+0xa0>
 800245a:	e000      	b.n	800245e <I2C_MasterReceiveData+0xc4>
			if(err_break++ > 10000) break;
 800245c:	bf00      	nop
		}

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 800245e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <I2C_MasterReceiveData+0xd6>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fdd0 	bl	8002010 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1) {
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d938      	bls.n	80024f4 <I2C_MasterReceiveData+0x15a>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f7ff fd8d 	bl	8001fa2 <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--) {
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	e02f      	b.n	80024ee <I2C_MasterReceiveData+0x154>
			//wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
				if(err_break++ > 10000) break;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	617a      	str	r2, [r7, #20]
 8002494:	f242 7210 	movw	r2, #10000	; 0x2710
 8002498:	4293      	cmp	r3, r2
 800249a:	d809      	bhi.n	80024b0 <I2C_MasterReceiveData+0x116>
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2140      	movs	r1, #64	; 0x40
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff feca 	bl	800223c <I2C_GetFlagStatus>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0ef      	beq.n	800248e <I2C_MasterReceiveData+0xf4>
 80024ae:	e000      	b.n	80024b2 <I2C_MasterReceiveData+0x118>
				if(err_break++ > 10000) break;
 80024b0:	bf00      	nop
			}

			if(i == 2) { //if last 2 bytes are remaining
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d10e      	bne.n	80024d6 <I2C_MasterReceiveData+0x13c>
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f826 	bl	8002510 <I2C_ManageAcking>
				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 80024c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <I2C_MasterReceiveData+0x13c>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fd9d 	bl	8002010 <I2C_GenerateStopCondition>
			}
			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxBuffer++;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3301      	adds	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--) {
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1d3      	bne.n	800249c <I2C_MasterReceiveData+0x102>
		}
	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	7a5b      	ldrb	r3, [r3, #9]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <I2C_MasterReceiveData+0x16e>
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f804 	bl	8002510 <I2C_ManageAcking>
}
 8002508:	bf00      	nop
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d106      	bne.n	8002530 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	601a      	str	r2, [r3, #0]
	else
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
}
 800252e:	e005      	b.n	800253c <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <RCC_GetPCLK1Value+0x9c>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 800255c:	7a7b      	ldrb	r3, [r7, #9]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <RCC_GetPCLK1Value+0xa0>)
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	e00b      	b.n	8002580 <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 1)
 8002568:	7a7b      	ldrb	r3, [r7, #9]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <RCC_GetPCLK1Value+0xa4>)
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	e005      	b.n	8002580 <RCC_GetPCLK1Value+0x38>
	else if (clksrc == 2)
 8002574:	7a7b      	ldrb	r3, [r7, #9]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d102      	bne.n	8002580 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 800257a:	f000 f83d 	bl	80025f8 <RCC_GetPLLOutputClock>
 800257e:	60f8      	str	r0, [r7, #12]

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <RCC_GetPCLK1Value+0x9c>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800258e:	7a3b      	ldrb	r3, [r7, #8]
 8002590:	2b07      	cmp	r3, #7
 8002592:	d802      	bhi.n	800259a <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8002594:	2301      	movs	r3, #1
 8002596:	72fb      	strb	r3, [r7, #11]
 8002598:	e005      	b.n	80025a6 <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_PreScaler[temp-8];
 800259a:	7a3b      	ldrb	r3, [r7, #8]
 800259c:	3b08      	subs	r3, #8
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <RCC_GetPCLK1Value+0xa8>)
 80025a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025a4:	72fb      	strb	r3, [r7, #11]

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <RCC_GetPCLK1Value+0x9c>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0a9b      	lsrs	r3, r3, #10
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80025b4:	7a3b      	ldrb	r3, [r7, #8]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d802      	bhi.n	80025c0 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	72bb      	strb	r3, [r7, #10]
 80025be:	e004      	b.n	80025ca <RCC_GetPCLK1Value+0x82>
	else
		apb1p = APB1_PreScaler[temp-4];
 80025c0:	7a3b      	ldrb	r3, [r7, #8]
 80025c2:	3b04      	subs	r3, #4
 80025c4:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <RCC_GetPCLK1Value+0xac>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	72bb      	strb	r3, [r7, #10]

	pclk1 = (SystemClk / ahbp) /apb1p;
 80025ca:	7afb      	ldrb	r3, [r7, #11]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80025d2:	7abb      	ldrb	r3, [r7, #10]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	607b      	str	r3, [r7, #4]

	return pclk1;
 80025da:	687b      	ldr	r3, [r7, #4]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	00f42400 	.word	0x00f42400
 80025ec:	007a1200 	.word	0x007a1200
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000010 	.word	0x20000010

080025f8 <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock() {
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
	return 0;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d11f      	bne.n	800265a <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a12      	ldr	r2, [pc, #72]	; (8002668 <SPI_PeriClockControl+0x60>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d106      	bne.n	8002630 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <SPI_PeriClockControl+0x64>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a11      	ldr	r2, [pc, #68]	; (800266c <SPI_PeriClockControl+0x64>)
 8002628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 800262e:	e014      	b.n	800265a <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a0f      	ldr	r2, [pc, #60]	; (8002670 <SPI_PeriClockControl+0x68>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d106      	bne.n	8002646 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <SPI_PeriClockControl+0x64>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a0b      	ldr	r2, [pc, #44]	; (800266c <SPI_PeriClockControl+0x64>)
 800263e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002644:	e009      	b.n	800265a <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <SPI_PeriClockControl+0x6c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d105      	bne.n	800265a <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <SPI_PeriClockControl+0x64>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	4a06      	ldr	r2, [pc, #24]	; (800266c <SPI_PeriClockControl+0x64>)
 8002654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002658:	6413      	str	r3, [r2, #64]	; 0x40
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40013000 	.word	0x40013000
 800266c:	40023800 	.word	0x40023800
 8002670:	40003800 	.word	0x40003800
 8002674:	40003c00 	.word	0x40003c00

08002678 <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ffbe 	bl	8002608 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	791b      	ldrb	r3, [r3, #4]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	795b      	ldrb	r3, [r3, #5]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d104      	bne.n	80026b0 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	e014      	b.n	80026da <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	795b      	ldrb	r3, [r3, #5]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d104      	bne.n	80026c2 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e00b      	b.n	80026da <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	795b      	ldrb	r3, [r3, #5]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d107      	bne.n	80026da <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026d0:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d8:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	799b      	ldrb	r3, [r3, #6]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	461a      	mov	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	79db      	ldrb	r3, [r3, #7]
 80026ec:	02db      	lsls	r3, r3, #11
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7a1b      	ldrb	r3, [r3, #8]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	461a      	mov	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7a5b      	ldrb	r3, [r3, #9]
 8002708:	461a      	mov	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7a9b      	ldrb	r3, [r3, #10]
 8002714:	025b      	lsls	r3, r3, #9
 8002716:	461a      	mov	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	601a      	str	r2, [r3, #0]

}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	70fb      	strb	r3, [r7, #3]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 800273a:	bf00      	nop
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f9      	beq.n	800273c <SPI_Transfer+0xe>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f3      	bne.n	800273c <SPI_Transfer+0xe>
	pSPIx->DR = data;
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60da      	str	r2, [r3, #12]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 800275a:	bf00      	nop
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f9      	beq.n	800275c <SPI_Transfer+0x2e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f3      	bne.n	800275c <SPI_Transfer+0x2e>
	return pSPIx->DR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d106      	bne.n	80027a4 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 80027a2:	e005      	b.n	80027b0 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d106      	bne.n	80027dc <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f043 0204 	orr.w	r2, r3, #4
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 80027da:	e005      	b.n	80027e8 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 0204 	bic.w	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	605a      	str	r2, [r3, #4]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <_DoInit+0x98>)
 80027fc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2203      	movs	r2, #3
 8002802:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2203      	movs	r2, #3
 8002808:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a20      	ldr	r2, [pc, #128]	; (8002890 <_DoInit+0x9c>)
 800280e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a20      	ldr	r2, [pc, #128]	; (8002894 <_DoInit+0xa0>)
 8002814:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800281c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a17      	ldr	r2, [pc, #92]	; (8002890 <_DoInit+0x9c>)
 8002834:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a17      	ldr	r2, [pc, #92]	; (8002898 <_DoInit+0xa4>)
 800283a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2210      	movs	r2, #16
 8002840:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3307      	adds	r3, #7
 8002858:	4a10      	ldr	r2, [pc, #64]	; (800289c <_DoInit+0xa8>)
 800285a:	6810      	ldr	r0, [r2, #0]
 800285c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800285e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <_DoInit+0xac>)
 8002866:	6810      	ldr	r0, [r2, #0]
 8002868:	6018      	str	r0, [r3, #0]
 800286a:	8891      	ldrh	r1, [r2, #4]
 800286c:	7992      	ldrb	r2, [r2, #6]
 800286e:	8099      	strh	r1, [r3, #4]
 8002870:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002872:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800287c:	f3bf 8f5f 	dmb	sy
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	200009ec 	.word	0x200009ec
 8002890:	08006ad8 	.word	0x08006ad8
 8002894:	20000290 	.word	0x20000290
 8002898:	20000690 	.word	0x20000690
 800289c:	08006ae4 	.word	0x08006ae4
 80028a0:	08006ae8 	.word	0x08006ae8

080028a4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d905      	bls.n	80028d4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	e007      	b.n	80028e4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	69b9      	ldr	r1, [r7, #24]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	1acb      	subs	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3b01      	subs	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	4293      	cmp	r3, r2
 80028f0:	bf28      	it	cs
 80028f2:	4613      	movcs	r3, r2
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4293      	cmp	r3, r2
 80028fc:	bf28      	it	cs
 80028fe:	4613      	movcs	r3, r2
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	4413      	add	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800290c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	6978      	ldr	r0, [r7, #20]
 8002912:	f001 fa45 	bl	8003da0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8002916:	6a3a      	ldr	r2, [r7, #32]
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	4413      	add	r3, r2
 800291c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	4413      	add	r3, r2
 8002924:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	4413      	add	r3, r2
 8002934:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	429a      	cmp	r2, r3
 800293e:	d101      	bne.n	8002944 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002944:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1b2      	bne.n	80028ba <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002954:	6a3b      	ldr	r3, [r7, #32]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3728      	adds	r7, #40	; 0x28
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800295e:	b580      	push	{r7, lr}
 8002960:	b088      	sub	sp, #32
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d911      	bls.n	80029a6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	6938      	ldr	r0, [r7, #16]
 8002992:	f001 fa05 	bl	8003da0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002996:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	441a      	add	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80029a4:	e01f      	b.n	80029e6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	4413      	add	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	6938      	ldr	r0, [r7, #16]
 80029ba:	f001 f9f1 	bl	8003da0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4413      	add	r3, r2
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4619      	mov	r1, r3
 80029d6:	6938      	ldr	r0, [r7, #16]
 80029d8:	f001 f9e2 	bl	8003da0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80029dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	60da      	str	r2, [r3, #12]
}
 80029e6:	bf00      	nop
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80029ee:	b480      	push	{r7}
 80029f0:	b087      	sub	sp, #28
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d808      	bhi.n	8002a1c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad2      	subs	r2, r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	3b01      	subs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e004      	b.n	8002a26 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002a26:	697b      	ldr	r3, [r7, #20]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002a40:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <SEGGER_RTT_ReadNoLock+0x108>)
 8002a42:	623b      	str	r3, [r7, #32]
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <SEGGER_RTT_ReadNoLock+0x1e>
 8002a4e:	f7ff fed1 	bl	80027f4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	3360      	adds	r3, #96	; 0x60
 8002a5e:	4a37      	ldr	r2, [pc, #220]	; (8002b3c <SEGGER_RTT_ReadNoLock+0x108>)
 8002a60:	4413      	add	r3, r2
 8002a62:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d92b      	bls.n	8002ad8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	bf28      	it	cs
 8002a92:	4613      	movcs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	4413      	add	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	6939      	ldr	r1, [r7, #16]
 8002aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002aa6:	f001 f97b 	bl	8003da0 <memcpy>
    NumBytesRead += NumBytesRem;
 8002aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	4413      	add	r3, r2
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d101      	bne.n	8002ad8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	bf28      	it	cs
 8002ae8:	4613      	movcs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d019      	beq.n	8002b26 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	4413      	add	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	6939      	ldr	r1, [r7, #16]
 8002b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b02:	f001 f94d 	bl	8003da0 <memcpy>
    NumBytesRead += NumBytesRem;
 8002b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	4413      	add	r3, r2
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	4413      	add	r3, r2
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b30:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3730      	adds	r7, #48	; 0x30
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200009ec 	.word	0x200009ec

08002b40 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <SEGGER_RTT_WriteNoLock+0x9c>)
 8002b5e:	4413      	add	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d029      	beq.n	8002bbe <SEGGER_RTT_WriteNoLock+0x7e>
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d82e      	bhi.n	8002bcc <SEGGER_RTT_WriteNoLock+0x8c>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <SEGGER_RTT_WriteNoLock+0x38>
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d013      	beq.n	8002b9e <SEGGER_RTT_WriteNoLock+0x5e>
 8002b76:	e029      	b.n	8002bcc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002b78:	6978      	ldr	r0, [r7, #20]
 8002b7a:	f7ff ff38 	bl	80029ee <_GetAvailWriteSpace>
 8002b7e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d202      	bcs.n	8002b8e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002b8c:	e021      	b.n	8002bd2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	69b9      	ldr	r1, [r7, #24]
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff fee1 	bl	800295e <_WriteNoCheck>
    break;
 8002b9c:	e019      	b.n	8002bd2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7ff ff25 	bl	80029ee <_GetAvailWriteSpace>
 8002ba4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4293      	cmp	r3, r2
 8002bac:	bf28      	it	cs
 8002bae:	4613      	movcs	r3, r2
 8002bb0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	69b9      	ldr	r1, [r7, #24]
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f7ff fed1 	bl	800295e <_WriteNoCheck>
    break;
 8002bbc:	e009      	b.n	8002bd2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	69b9      	ldr	r1, [r7, #24]
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f7ff fe6e 	bl	80028a4 <_WriteBlocking>
 8002bc8:	61f8      	str	r0, [r7, #28]
    break;
 8002bca:	e002      	b.n	8002bd2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
    break;
 8002bd0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	200009ec 	.word	0x200009ec

08002be0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <SEGGER_RTT_Write+0x48>)
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <SEGGER_RTT_Write+0x1e>
 8002bfa:	f7ff fdfb 	bl	80027f4 <_DoInit>
  SEGGER_RTT_LOCK();
 8002bfe:	f3ef 8311 	mrs	r3, BASEPRI
 8002c02:	f04f 0120 	mov.w	r1, #32
 8002c06:	f381 8811 	msr	BASEPRI, r1
 8002c0a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff ff95 	bl	8002b40 <SEGGER_RTT_WriteNoLock>
 8002c16:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8002c1e:	697b      	ldr	r3, [r7, #20]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3720      	adds	r7, #32
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200009ec 	.word	0x200009ec

08002c2c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00f      	beq.n	8002c62 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002c42:	e002      	b.n	8002c4a <_EncodeStr+0x1e>
      Len++;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	3301      	adds	r3, #1
 8002c48:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f6      	bne.n	8002c44 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d901      	bls.n	8002c62 <_EncodeStr+0x36>
      Len = Limit;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2bfe      	cmp	r3, #254	; 0xfe
 8002c66:	d806      	bhi.n	8002c76 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	60fa      	str	r2, [r7, #12]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e011      	b.n	8002c9a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	60fa      	str	r2, [r7, #12]
 8002c7c:	22ff      	movs	r2, #255	; 0xff
 8002c7e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	60fa      	str	r2, [r7, #12]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	0a19      	lsrs	r1, r3, #8
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	60fa      	str	r2, [r7, #12]
 8002c96:	b2ca      	uxtb	r2, r1
 8002c98:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002c9e:	e00a      	b.n	8002cb6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	1c53      	adds	r3, r2, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1c59      	adds	r1, r3, #1
 8002caa:	60f9      	str	r1, [r7, #12]
 8002cac:	7812      	ldrb	r2, [r2, #0]
 8002cae:	701a      	strb	r2, [r3, #0]
    n++;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3f0      	bcc.n	8002ca0 <_EncodeStr+0x74>
  }
  return pPayload;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002cea:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <_HandleIncomingPacket+0xe0>)
 8002cec:	7e1b      	ldrb	r3, [r3, #24]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	1cfb      	adds	r3, r7, #3
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7ff fe9d 	bl	8002a34 <SEGGER_RTT_ReadNoLock>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	dd54      	ble.n	8002dae <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	2b80      	cmp	r3, #128	; 0x80
 8002d08:	d032      	beq.n	8002d70 <_HandleIncomingPacket+0x8c>
 8002d0a:	2b80      	cmp	r3, #128	; 0x80
 8002d0c:	dc42      	bgt.n	8002d94 <_HandleIncomingPacket+0xb0>
 8002d0e:	2b07      	cmp	r3, #7
 8002d10:	dc16      	bgt.n	8002d40 <_HandleIncomingPacket+0x5c>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	dd3e      	ble.n	8002d94 <_HandleIncomingPacket+0xb0>
 8002d16:	3b01      	subs	r3, #1
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d83b      	bhi.n	8002d94 <_HandleIncomingPacket+0xb0>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <_HandleIncomingPacket+0x40>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d47 	.word	0x08002d47
 8002d28:	08002d4d 	.word	0x08002d4d
 8002d2c:	08002d53 	.word	0x08002d53
 8002d30:	08002d59 	.word	0x08002d59
 8002d34:	08002d5f 	.word	0x08002d5f
 8002d38:	08002d65 	.word	0x08002d65
 8002d3c:	08002d6b 	.word	0x08002d6b
 8002d40:	2b7f      	cmp	r3, #127	; 0x7f
 8002d42:	d036      	beq.n	8002db2 <_HandleIncomingPacket+0xce>
 8002d44:	e026      	b.n	8002d94 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002d46:	f000 fa4f 	bl	80031e8 <SEGGER_SYSVIEW_Start>
      break;
 8002d4a:	e037      	b.n	8002dbc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002d4c:	f000 fb08 	bl	8003360 <SEGGER_SYSVIEW_Stop>
      break;
 8002d50:	e034      	b.n	8002dbc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002d52:	f000 fbd9 	bl	8003508 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002d56:	e031      	b.n	8002dbc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002d58:	f000 fbc2 	bl	80034e0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002d5c:	e02e      	b.n	8002dbc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002d5e:	f000 fb25 	bl	80033ac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002d62:	e02b      	b.n	8002dbc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002d64:	f000 fdba 	bl	80038dc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002d68:	e028      	b.n	8002dbc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002d6a:	f000 fd99 	bl	80038a0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002d6e:	e025      	b.n	8002dbc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <_HandleIncomingPacket+0xe0>)
 8002d72:	7e1b      	ldrb	r3, [r3, #24]
 8002d74:	4618      	mov	r0, r3
 8002d76:	1cfb      	adds	r3, r7, #3
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7ff fe5a 	bl	8002a34 <SEGGER_RTT_ReadNoLock>
 8002d80:	4603      	mov	r3, r0
 8002d82:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	dd15      	ble.n	8002db6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fd07 	bl	80037a0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002d92:	e010      	b.n	8002db6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	da0e      	bge.n	8002dba <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <_HandleIncomingPacket+0xe0>)
 8002d9e:	7e1b      	ldrb	r3, [r3, #24]
 8002da0:	4618      	mov	r0, r3
 8002da2:	1cfb      	adds	r3, r7, #3
 8002da4:	2201      	movs	r2, #1
 8002da6:	4619      	mov	r1, r3
 8002da8:	f7ff fe44 	bl	8002a34 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002dac:	e005      	b.n	8002dba <_HandleIncomingPacket+0xd6>
    }
  }
 8002dae:	bf00      	nop
 8002db0:	e004      	b.n	8002dbc <_HandleIncomingPacket+0xd8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <_HandleIncomingPacket+0xd8>
      break;
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <_HandleIncomingPacket+0xd8>
      break;
 8002dba:	bf00      	nop
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200006a0 	.word	0x200006a0

08002dc8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08c      	sub	sp, #48	; 0x30
 8002dcc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002dce:	2301      	movs	r3, #1
 8002dd0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <_TrySendOverflowPacket+0xe0>)
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	e00b      	b.n	8002dfc <_TrySendOverflowPacket+0x34>
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	1c59      	adds	r1, r3, #1
 8002dec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	09db      	lsrs	r3, r3, #7
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8002e00:	d8f0      	bhi.n	8002de4 <_TrySendOverflowPacket+0x1c>
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002e12:	4b26      	ldr	r3, [pc, #152]	; (8002eac <_TrySendOverflowPacket+0xe4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002e18:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <_TrySendOverflowPacket+0xe0>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	623b      	str	r3, [r7, #32]
 8002e2a:	e00b      	b.n	8002e44 <_TrySendOverflowPacket+0x7c>
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	1c59      	adds	r1, r3, #1
 8002e34:	6279      	str	r1, [r7, #36]	; 0x24
 8002e36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	09db      	lsrs	r3, r3, #7
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2b7f      	cmp	r3, #127	; 0x7f
 8002e48:	d8f0      	bhi.n	8002e2c <_TrySendOverflowPacket+0x64>
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	627a      	str	r2, [r7, #36]	; 0x24
 8002e50:	6a3a      	ldr	r2, [r7, #32]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <_TrySendOverflowPacket+0xe0>)
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f7fd f9c0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002e70:	4603      	mov	r3, r0
 8002e72:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002e74:	f000 fdcc 	bl	8003a10 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <_TrySendOverflowPacket+0xe0>)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <_TrySendOverflowPacket+0xe0>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <_TrySendOverflowPacket+0xe0>)
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e004      	b.n	8002e9c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <_TrySendOverflowPacket+0xe0>)
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	3301      	adds	r3, #1
 8002e98:	4a03      	ldr	r2, [pc, #12]	; (8002ea8 <_TrySendOverflowPacket+0xe0>)
 8002e9a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002e9c:	693b      	ldr	r3, [r7, #16]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3730      	adds	r7, #48	; 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200006a0 	.word	0x200006a0
 8002eac:	e0001004 	.word	0xe0001004

08002eb0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002ebc:	4b6d      	ldr	r3, [pc, #436]	; (8003074 <_SendPacket+0x1c4>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d010      	beq.n	8002ee6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002ec4:	4b6b      	ldr	r3, [pc, #428]	; (8003074 <_SendPacket+0x1c4>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80a5 	beq.w	8003018 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002ece:	4b69      	ldr	r3, [pc, #420]	; (8003074 <_SendPacket+0x1c4>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d109      	bne.n	8002eea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002ed6:	f7ff ff77 	bl	8002dc8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002eda:	4b66      	ldr	r3, [pc, #408]	; (8003074 <_SendPacket+0x1c4>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	f040 809c 	bne.w	800301c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8002ee4:	e001      	b.n	8002eea <_SendPacket+0x3a>
    goto Send;
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <_SendPacket+0x3c>
Send:
 8002eea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b1f      	cmp	r3, #31
 8002ef0:	d809      	bhi.n	8002f06 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002ef2:	4b60      	ldr	r3, [pc, #384]	; (8003074 <_SendPacket+0x1c4>)
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 808d 	bne.w	8003020 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b17      	cmp	r3, #23
 8002f0a:	d807      	bhi.n	8002f1c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e03d      	b.n	8002f98 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b7f      	cmp	r3, #127	; 0x7f
 8002f28:	d912      	bls.n	8002f50 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	09da      	lsrs	r2, r3, #7
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	3a01      	subs	r2, #1
 8002f42:	60fa      	str	r2, [r7, #12]
 8002f44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e006      	b.n	8002f5e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b7f      	cmp	r3, #127	; 0x7f
 8002f62:	d912      	bls.n	8002f8a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	09da      	lsrs	r2, r3, #7
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	3a01      	subs	r2, #1
 8002f7c:	60fa      	str	r2, [r7, #12]
 8002f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e006      	b.n	8002f98 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002f98:	4b37      	ldr	r3, [pc, #220]	; (8003078 <_SendPacket+0x1c8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002f9e:	4b35      	ldr	r3, [pc, #212]	; (8003074 <_SendPacket+0x1c4>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	623b      	str	r3, [r7, #32]
 8002fb0:	e00b      	b.n	8002fca <_SendPacket+0x11a>
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1c59      	adds	r1, r3, #1
 8002fba:	6279      	str	r1, [r7, #36]	; 0x24
 8002fbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	09db      	lsrs	r3, r3, #7
 8002fc8:	623b      	str	r3, [r7, #32]
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8002fce:	d8f0      	bhi.n	8002fb2 <_SendPacket+0x102>
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	627a      	str	r2, [r7, #36]	; 0x24
 8002fd6:	6a3a      	ldr	r2, [r7, #32]
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002fe0:	4b24      	ldr	r3, [pc, #144]	; (8003074 <_SendPacket+0x1c4>)
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	f7fd f8fe 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8002ff8:	f000 fd0a 	bl	8003a10 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <_SendPacket+0x1c4>)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	60d3      	str	r3, [r2, #12]
 8003008:	e00b      	b.n	8003022 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <_SendPacket+0x1c4>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <_SendPacket+0x1c4>)
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e004      	b.n	8003022 <_SendPacket+0x172>
    goto SendDone;
 8003018:	bf00      	nop
 800301a:	e002      	b.n	8003022 <_SendPacket+0x172>
      goto SendDone;
 800301c:	bf00      	nop
 800301e:	e000      	b.n	8003022 <_SendPacket+0x172>
      goto SendDone;
 8003020:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <_SendPacket+0x1c4>)
 8003024:	7e1b      	ldrb	r3, [r3, #24]
 8003026:	4619      	mov	r1, r3
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <_SendPacket+0x1cc>)
 800302a:	460b      	mov	r3, r1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	440b      	add	r3, r1
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	336c      	adds	r3, #108	; 0x6c
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <_SendPacket+0x1c4>)
 800303a:	7e1b      	ldrb	r3, [r3, #24]
 800303c:	4618      	mov	r0, r3
 800303e:	490f      	ldr	r1, [pc, #60]	; (800307c <_SendPacket+0x1cc>)
 8003040:	4603      	mov	r3, r0
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4403      	add	r3, r0
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	3370      	adds	r3, #112	; 0x70
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d00b      	beq.n	800306a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <_SendPacket+0x1c4>)
 8003054:	789b      	ldrb	r3, [r3, #2]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d107      	bne.n	800306a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <_SendPacket+0x1c4>)
 800305c:	2201      	movs	r2, #1
 800305e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003060:	f7ff fe40 	bl	8002ce4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <_SendPacket+0x1c4>)
 8003066:	2200      	movs	r2, #0
 8003068:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800306a:	bf00      	nop
 800306c:	3728      	adds	r7, #40	; 0x28
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200006a0 	.word	0x200006a0
 8003078:	e0001004 	.word	0xe0001004
 800307c:	200009ec 	.word	0x200009ec

08003080 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003088:	f3ef 8311 	mrs	r3, BASEPRI
 800308c:	f04f 0120 	mov.w	r1, #32
 8003090:	f381 8811 	msr	BASEPRI, r1
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4808      	ldr	r0, [pc, #32]	; (80030b8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003098:	f7ff fe18 	bl	8002ccc <_PreparePacket>
 800309c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68b8      	ldr	r0, [r7, #8]
 80030a4:	f7ff ff04 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f383 8811 	msr	BASEPRI, r3
}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200006d0 	.word	0x200006d0

080030bc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80030c6:	f3ef 8311 	mrs	r3, BASEPRI
 80030ca:	f04f 0120 	mov.w	r1, #32
 80030ce:	f381 8811 	msr	BASEPRI, r1
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	4816      	ldr	r0, [pc, #88]	; (8003130 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80030d6:	f7ff fdf9 	bl	8002ccc <_PreparePacket>
 80030da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e00b      	b.n	8003102 <SEGGER_SYSVIEW_RecordU32+0x46>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	1c59      	adds	r1, r3, #1
 80030f2:	61f9      	str	r1, [r7, #28]
 80030f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	09db      	lsrs	r3, r3, #7
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b7f      	cmp	r3, #127	; 0x7f
 8003106:	d8f0      	bhi.n	80030ea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	61fa      	str	r2, [r7, #28]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68f9      	ldr	r1, [r7, #12]
 800311c:	6938      	ldr	r0, [r7, #16]
 800311e:	f7ff fec7 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f383 8811 	msr	BASEPRI, r3
}
 8003128:	bf00      	nop
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	200006d0 	.word	0x200006d0

08003134 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003140:	f3ef 8311 	mrs	r3, BASEPRI
 8003144:	f04f 0120 	mov.w	r1, #32
 8003148:	f381 8811 	msr	BASEPRI, r1
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	4825      	ldr	r0, [pc, #148]	; (80031e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003150:	f7ff fdbc 	bl	8002ccc <_PreparePacket>
 8003154:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
 8003162:	e00b      	b.n	800317c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	b2da      	uxtb	r2, r3
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	1c59      	adds	r1, r3, #1
 800316c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800316e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	09db      	lsrs	r3, r3, #7
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	2b7f      	cmp	r3, #127	; 0x7f
 8003180:	d8f0      	bhi.n	8003164 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	623b      	str	r3, [r7, #32]
 800319a:	e00b      	b.n	80031b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	1c59      	adds	r1, r3, #1
 80031a4:	6279      	str	r1, [r7, #36]	; 0x24
 80031a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	09db      	lsrs	r3, r3, #7
 80031b2:	623b      	str	r3, [r7, #32]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	2b7f      	cmp	r3, #127	; 0x7f
 80031b8:	d8f0      	bhi.n	800319c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	627a      	str	r2, [r7, #36]	; 0x24
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	69b8      	ldr	r0, [r7, #24]
 80031d0:	f7ff fe6e 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f383 8811 	msr	BASEPRI, r3
}
 80031da:	bf00      	nop
 80031dc:	3730      	adds	r7, #48	; 0x30
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200006d0 	.word	0x200006d0

080031e8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80031ee:	4b59      	ldr	r3, [pc, #356]	; (8003354 <SEGGER_SYSVIEW_Start+0x16c>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80031f4:	f3ef 8311 	mrs	r3, BASEPRI
 80031f8:	f04f 0120 	mov.w	r1, #32
 80031fc:	f381 8811 	msr	BASEPRI, r1
 8003200:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003202:	4b54      	ldr	r3, [pc, #336]	; (8003354 <SEGGER_SYSVIEW_Start+0x16c>)
 8003204:	785b      	ldrb	r3, [r3, #1]
 8003206:	220a      	movs	r2, #10
 8003208:	4953      	ldr	r1, [pc, #332]	; (8003358 <SEGGER_SYSVIEW_Start+0x170>)
 800320a:	4618      	mov	r0, r3
 800320c:	f7fc fff0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003216:	f000 fbfb 	bl	8003a10 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800321a:	200a      	movs	r0, #10
 800321c:	f7ff ff30 	bl	8003080 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003220:	f3ef 8311 	mrs	r3, BASEPRI
 8003224:	f04f 0120 	mov.w	r1, #32
 8003228:	f381 8811 	msr	BASEPRI, r1
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	484b      	ldr	r0, [pc, #300]	; (800335c <SEGGER_SYSVIEW_Start+0x174>)
 8003230:	f7ff fd4c 	bl	8002ccc <_PreparePacket>
 8003234:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323e:	4b45      	ldr	r3, [pc, #276]	; (8003354 <SEGGER_SYSVIEW_Start+0x16c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
 8003244:	e00b      	b.n	800325e <SEGGER_SYSVIEW_Start+0x76>
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	b2da      	uxtb	r2, r3
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	1c59      	adds	r1, r3, #1
 800324e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	09db      	lsrs	r3, r3, #7
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	2b7f      	cmp	r3, #127	; 0x7f
 8003262:	d8f0      	bhi.n	8003246 <SEGGER_SYSVIEW_Start+0x5e>
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800326a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <SEGGER_SYSVIEW_Start+0x16c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	623b      	str	r3, [r7, #32]
 800327e:	e00b      	b.n	8003298 <SEGGER_SYSVIEW_Start+0xb0>
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	1c59      	adds	r1, r3, #1
 8003288:	6279      	str	r1, [r7, #36]	; 0x24
 800328a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	09db      	lsrs	r3, r3, #7
 8003296:	623b      	str	r3, [r7, #32]
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2b7f      	cmp	r3, #127	; 0x7f
 800329c:	d8f0      	bhi.n	8003280 <SEGGER_SYSVIEW_Start+0x98>
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	627a      	str	r2, [r7, #36]	; 0x24
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <SEGGER_SYSVIEW_Start+0x16c>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e00b      	b.n	80032d2 <SEGGER_SYSVIEW_Start+0xea>
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	1c59      	adds	r1, r3, #1
 80032c2:	61f9      	str	r1, [r7, #28]
 80032c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	09db      	lsrs	r3, r3, #7
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b7f      	cmp	r3, #127	; 0x7f
 80032d6:	d8f0      	bhi.n	80032ba <SEGGER_SYSVIEW_Start+0xd2>
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	61fa      	str	r2, [r7, #28]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	e00b      	b.n	800330a <SEGGER_SYSVIEW_Start+0x122>
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	1c59      	adds	r1, r3, #1
 80032fa:	6179      	str	r1, [r7, #20]
 80032fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	09db      	lsrs	r3, r3, #7
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b7f      	cmp	r3, #127	; 0x7f
 800330e:	d8f0      	bhi.n	80032f2 <SEGGER_SYSVIEW_Start+0x10a>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	617a      	str	r2, [r7, #20]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003320:	2218      	movs	r2, #24
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff fdc3 	bl	8002eb0 <_SendPacket>
      RECORD_END();
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <SEGGER_SYSVIEW_Start+0x16c>)
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <SEGGER_SYSVIEW_Start+0x16c>)
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800333e:	f000 f8e3 	bl	8003508 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003342:	f000 f8cd 	bl	80034e0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003346:	f000 fac9 	bl	80038dc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800334a:	bf00      	nop
 800334c:	3730      	adds	r7, #48	; 0x30
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200006a0 	.word	0x200006a0
 8003358:	08006e9c 	.word	0x08006e9c
 800335c:	200006d0 	.word	0x200006d0

08003360 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003366:	f3ef 8311 	mrs	r3, BASEPRI
 800336a:	f04f 0120 	mov.w	r1, #32
 800336e:	f381 8811 	msr	BASEPRI, r1
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	480b      	ldr	r0, [pc, #44]	; (80033a4 <SEGGER_SYSVIEW_Stop+0x44>)
 8003376:	f7ff fca9 	bl	8002ccc <_PreparePacket>
 800337a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <SEGGER_SYSVIEW_Stop+0x48>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003384:	220b      	movs	r2, #11
 8003386:	6839      	ldr	r1, [r7, #0]
 8003388:	6838      	ldr	r0, [r7, #0]
 800338a:	f7ff fd91 	bl	8002eb0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <SEGGER_SYSVIEW_Stop+0x48>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f383 8811 	msr	BASEPRI, r3
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200006d0 	.word	0x200006d0
 80033a8:	200006a0 	.word	0x200006a0

080033ac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08c      	sub	sp, #48	; 0x30
 80033b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80033b2:	f3ef 8311 	mrs	r3, BASEPRI
 80033b6:	f04f 0120 	mov.w	r1, #32
 80033ba:	f381 8811 	msr	BASEPRI, r1
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	4845      	ldr	r0, [pc, #276]	; (80034d8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80033c2:	f7ff fc83 	bl	8002ccc <_PreparePacket>
 80033c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d0:	4b42      	ldr	r3, [pc, #264]	; (80034dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d6:	e00b      	b.n	80033f0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	1c59      	adds	r1, r3, #1
 80033e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80033e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	09db      	lsrs	r3, r3, #7
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	2b7f      	cmp	r3, #127	; 0x7f
 80033f4:	d8f0      	bhi.n	80033d8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	4b34      	ldr	r3, [pc, #208]	; (80034dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	623b      	str	r3, [r7, #32]
 8003410:	e00b      	b.n	800342a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	1c59      	adds	r1, r3, #1
 800341a:	6279      	str	r1, [r7, #36]	; 0x24
 800341c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	09db      	lsrs	r3, r3, #7
 8003428:	623b      	str	r3, [r7, #32]
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	2b7f      	cmp	r3, #127	; 0x7f
 800342e:	d8f0      	bhi.n	8003412 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	627a      	str	r2, [r7, #36]	; 0x24
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e00b      	b.n	8003464 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	1c59      	adds	r1, r3, #1
 8003454:	61f9      	str	r1, [r7, #28]
 8003456:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	09db      	lsrs	r3, r3, #7
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b7f      	cmp	r3, #127	; 0x7f
 8003468:	d8f0      	bhi.n	800344c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	61fa      	str	r2, [r7, #28]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	e00b      	b.n	800349c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1c59      	adds	r1, r3, #1
 800348c:	6179      	str	r1, [r7, #20]
 800348e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	09db      	lsrs	r3, r3, #7
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b7f      	cmp	r3, #127	; 0x7f
 80034a0:	d8f0      	bhi.n	8003484 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	617a      	str	r2, [r7, #20]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80034b2:	2218      	movs	r2, #24
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68b8      	ldr	r0, [r7, #8]
 80034b8:	f7ff fcfa 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	4798      	blx	r3
  }
}
 80034d0:	bf00      	nop
 80034d2:	3730      	adds	r7, #48	; 0x30
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	200006d0 	.word	0x200006d0
 80034dc:	200006a0 	.word	0x200006a0

080034e0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80034f6:	4b03      	ldr	r3, [pc, #12]	; (8003504 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4798      	blx	r3
  }
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200006a0 	.word	0x200006a0

08003508 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01a      	beq.n	800354c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d015      	beq.n	800354c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003520:	4b10      	ldr	r3, [pc, #64]	; (8003564 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4798      	blx	r3
 8003528:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800352c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800352e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	000a      	movs	r2, r1
 800353c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800353e:	4613      	mov	r3, r2
 8003540:	461a      	mov	r2, r3
 8003542:	4621      	mov	r1, r4
 8003544:	200d      	movs	r0, #13
 8003546:	f7ff fdf5 	bl	8003134 <SEGGER_SYSVIEW_RecordU32x2>
 800354a:	e006      	b.n	800355a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4619      	mov	r1, r3
 8003552:	200c      	movs	r0, #12
 8003554:	f7ff fdb2 	bl	80030bc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bd90      	pop	{r4, r7, pc}
 8003562:	bf00      	nop
 8003564:	200006a0 	.word	0x200006a0
 8003568:	e0001004 	.word	0xe0001004

0800356c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003572:	f3ef 8311 	mrs	r3, BASEPRI
 8003576:	f04f 0120 	mov.w	r1, #32
 800357a:	f381 8811 	msr	BASEPRI, r1
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	4819      	ldr	r0, [pc, #100]	; (80035e8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003582:	f7ff fba3 	bl	8002ccc <_PreparePacket>
 8003586:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800358c:	4b17      	ldr	r3, [pc, #92]	; (80035ec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003594:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	e00b      	b.n	80035b8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	1c59      	adds	r1, r3, #1
 80035a8:	6179      	str	r1, [r7, #20]
 80035aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	09db      	lsrs	r3, r3, #7
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b7f      	cmp	r3, #127	; 0x7f
 80035bc:	d8f0      	bhi.n	80035a0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	617a      	str	r2, [r7, #20]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80035ce:	2202      	movs	r2, #2
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	68b8      	ldr	r0, [r7, #8]
 80035d4:	f7ff fc6c 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f383 8811 	msr	BASEPRI, r3
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200006d0 	.word	0x200006d0
 80035ec:	e000ed04 	.word	0xe000ed04

080035f0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80035f6:	f3ef 8311 	mrs	r3, BASEPRI
 80035fa:	f04f 0120 	mov.w	r1, #32
 80035fe:	f381 8811 	msr	BASEPRI, r1
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	4807      	ldr	r0, [pc, #28]	; (8003624 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003606:	f7ff fb61 	bl	8002ccc <_PreparePacket>
 800360a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800360c:	2203      	movs	r2, #3
 800360e:	6839      	ldr	r1, [r7, #0]
 8003610:	6838      	ldr	r0, [r7, #0]
 8003612:	f7ff fc4d 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f383 8811 	msr	BASEPRI, r3
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200006d0 	.word	0x200006d0

08003628 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800362e:	f3ef 8311 	mrs	r3, BASEPRI
 8003632:	f04f 0120 	mov.w	r1, #32
 8003636:	f381 8811 	msr	BASEPRI, r1
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	4807      	ldr	r0, [pc, #28]	; (800365c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800363e:	f7ff fb45 	bl	8002ccc <_PreparePacket>
 8003642:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003644:	2212      	movs	r2, #18
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	6838      	ldr	r0, [r7, #0]
 800364a:	f7ff fc31 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f383 8811 	msr	BASEPRI, r3
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	200006d0 	.word	0x200006d0

08003660 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003666:	f3ef 8311 	mrs	r3, BASEPRI
 800366a:	f04f 0120 	mov.w	r1, #32
 800366e:	f381 8811 	msr	BASEPRI, r1
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	4807      	ldr	r0, [pc, #28]	; (8003694 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003676:	f7ff fb29 	bl	8002ccc <_PreparePacket>
 800367a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800367c:	2211      	movs	r2, #17
 800367e:	6839      	ldr	r1, [r7, #0]
 8003680:	6838      	ldr	r0, [r7, #0]
 8003682:	f7ff fc15 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f383 8811 	msr	BASEPRI, r3
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	200006d0 	.word	0x200006d0

08003698 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80036a0:	f3ef 8311 	mrs	r3, BASEPRI
 80036a4:	f04f 0120 	mov.w	r1, #32
 80036a8:	f381 8811 	msr	BASEPRI, r1
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	4819      	ldr	r0, [pc, #100]	; (8003714 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80036b0:	f7ff fb0c 	bl	8002ccc <_PreparePacket>
 80036b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	e00b      	b.n	80036e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	1c59      	adds	r1, r3, #1
 80036d6:	61f9      	str	r1, [r7, #28]
 80036d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	09db      	lsrs	r3, r3, #7
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b7f      	cmp	r3, #127	; 0x7f
 80036ea:	d8f0      	bhi.n	80036ce <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	61fa      	str	r2, [r7, #28]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80036fc:	2204      	movs	r2, #4
 80036fe:	68f9      	ldr	r1, [r7, #12]
 8003700:	6938      	ldr	r0, [r7, #16]
 8003702:	f7ff fbd5 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f383 8811 	msr	BASEPRI, r3
}
 800370c:	bf00      	nop
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	200006d0 	.word	0x200006d0
 8003718:	200006a0 	.word	0x200006a0

0800371c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003724:	f3ef 8311 	mrs	r3, BASEPRI
 8003728:	f04f 0120 	mov.w	r1, #32
 800372c:	f381 8811 	msr	BASEPRI, r1
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	4819      	ldr	r0, [pc, #100]	; (8003798 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003734:	f7ff faca 	bl	8002ccc <_PreparePacket>
 8003738:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	e00b      	b.n	800376a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	1c59      	adds	r1, r3, #1
 800375a:	61f9      	str	r1, [r7, #28]
 800375c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	09db      	lsrs	r3, r3, #7
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b7f      	cmp	r3, #127	; 0x7f
 800376e:	d8f0      	bhi.n	8003752 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	61fa      	str	r2, [r7, #28]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003780:	2206      	movs	r2, #6
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	6938      	ldr	r0, [r7, #16]
 8003786:	f7ff fb93 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f383 8811 	msr	BASEPRI, r3
}
 8003790:	bf00      	nop
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	200006d0 	.word	0x200006d0
 800379c:	200006a0 	.word	0x200006a0

080037a0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08c      	sub	sp, #48	; 0x30
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80037aa:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d06d      	beq.n	800388e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80037b2:	4b39      	ldr	r3, [pc, #228]	; (8003898 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80037b8:	2300      	movs	r3, #0
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80037bc:	e008      	b.n	80037d0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	3301      	adds	r3, #1
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d3f2      	bcc.n	80037be <SEGGER_SYSVIEW_SendModule+0x1e>
 80037d8:	e000      	b.n	80037dc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80037da:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d055      	beq.n	800388e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80037e2:	f3ef 8311 	mrs	r3, BASEPRI
 80037e6:	f04f 0120 	mov.w	r1, #32
 80037ea:	f381 8811 	msr	BASEPRI, r1
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	482a      	ldr	r0, [pc, #168]	; (800389c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80037f2:	f7ff fa6b 	bl	8002ccc <_PreparePacket>
 80037f6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	e00b      	b.n	800381e <SEGGER_SYSVIEW_SendModule+0x7e>
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	1c59      	adds	r1, r3, #1
 800380e:	6279      	str	r1, [r7, #36]	; 0x24
 8003810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	09db      	lsrs	r3, r3, #7
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	2b7f      	cmp	r3, #127	; 0x7f
 8003822:	d8f0      	bhi.n	8003806 <SEGGER_SYSVIEW_SendModule+0x66>
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	627a      	str	r2, [r7, #36]	; 0x24
 800382a:	6a3a      	ldr	r2, [r7, #32]
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	e00b      	b.n	8003858 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	61f9      	str	r1, [r7, #28]
 800384a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	09db      	lsrs	r3, r3, #7
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b7f      	cmp	r3, #127	; 0x7f
 800385c:	d8f0      	bhi.n	8003840 <SEGGER_SYSVIEW_SendModule+0xa0>
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	61fa      	str	r2, [r7, #28]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	4619      	mov	r1, r3
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7ff f9d8 	bl	8002c2c <_EncodeStr>
 800387c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800387e:	2216      	movs	r2, #22
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	6938      	ldr	r0, [r7, #16]
 8003884:	f7ff fb14 	bl	8002eb0 <_SendPacket>
      RECORD_END();
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800388e:	bf00      	nop
 8003890:	3730      	adds	r7, #48	; 0x30
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200006c8 	.word	0x200006c8
 800389c:	200006d0 	.word	0x200006d0

080038a0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00f      	beq.n	80038ce <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80038ae:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f2      	bne.n	80038b4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200006c8 	.word	0x200006c8

080038dc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80038e2:	f3ef 8311 	mrs	r3, BASEPRI
 80038e6:	f04f 0120 	mov.w	r1, #32
 80038ea:	f381 8811 	msr	BASEPRI, r1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	4817      	ldr	r0, [pc, #92]	; (8003950 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80038f2:	f7ff f9eb 	bl	8002ccc <_PreparePacket>
 80038f6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	4b14      	ldr	r3, [pc, #80]	; (8003954 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	e00b      	b.n	8003920 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	6179      	str	r1, [r7, #20]
 8003912:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	09db      	lsrs	r3, r3, #7
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b7f      	cmp	r3, #127	; 0x7f
 8003924:	d8f0      	bhi.n	8003908 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	617a      	str	r2, [r7, #20]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003936:	221b      	movs	r2, #27
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	68b8      	ldr	r0, [r7, #8]
 800393c:	f7ff fab8 	bl	8002eb0 <_SendPacket>
  RECORD_END();
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f383 8811 	msr	BASEPRI, r3
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200006d0 	.word	0x200006d0
 8003954:	200006cc 	.word	0x200006cc

08003958 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	2000      	movs	r0, #0
 800396c:	f7ff f938 	bl	8002be0 <SEGGER_RTT_Write>
  return len;
 8003970:	683b      	ldr	r3, [r7, #0]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
//void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
	int UsartStatus;
	uint8_t v;
	int r;

	UsartStatus = USART_SR;                              // Examine status register
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <USART2_IRQHandler+0x80>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]
	if(UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d011      	beq.n	80039b6 <USART2_IRQHandler+0x3a>
		v = USART_DR;                                      // Read data
 8003992:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <USART2_IRQHandler+0x84>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	71fb      	strb	r3, [r7, #7]
		if((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 030b 	and.w	r3, r3, #11
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d108      	bne.n	80039b6 <USART2_IRQHandler+0x3a>
			(void)v;                                         // Avoid warning in BTL
			if(_cbOnRx) {
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <USART2_IRQHandler+0x88>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <USART2_IRQHandler+0x3a>
				_cbOnRx(v);
 80039ac:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <USART2_IRQHandler+0x88>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	79fa      	ldrb	r2, [r7, #7]
 80039b2:	4610      	mov	r0, r2
 80039b4:	4798      	blx	r3
			}
		}
	}
	if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01a      	beq.n	80039f6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <USART2_IRQHandler+0x8c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <USART2_IRQHandler+0x78>
		r = _cbOnTx(&v);
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <USART2_IRQHandler+0x8c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	1dfa      	adds	r2, r7, #7
 80039ce:	4610      	mov	r0, r2
 80039d0:	4798      	blx	r3
 80039d2:	60b8      	str	r0, [r7, #8]
		if (r == 0) {                          // No more characters to send ?
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <USART2_IRQHandler+0x6c>
			USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <USART2_IRQHandler+0x90>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <USART2_IRQHandler+0x90>)
 80039e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e006      	b.n	80039f6 <USART2_IRQHandler+0x7a>
		} else {
			USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <USART2_IRQHandler+0x80>)
 80039ea:	681b      	ldr	r3, [r3, #0]
			USART_DR = v;  // Start transmission by writing to data register
 80039ec:	79fa      	ldrb	r2, [r7, #7]
 80039ee:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <USART2_IRQHandler+0x84>)
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e000      	b.n	80039f6 <USART2_IRQHandler+0x7a>
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 80039f4:	bf00      	nop
		}
	}
}
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40004400 	.word	0x40004400
 8003a00:	40004404 	.word	0x40004404
 8003a04:	200007b4 	.word	0x200007b4
 8003a08:	200007b8 	.word	0x200007b8
 8003a0c:	4000440c 	.word	0x4000440c

08003a10 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
	USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	4000440c 	.word	0x4000440c

08003a30 <main>:
#include <stdint.h>
#include <string.h>
#include "ds1307.h"
#include "lcd5110.h"

int main() {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b090      	sub	sp, #64	; 0x40
 8003a34:	af02      	add	r7, sp, #8
	uint32_t date_value = 130721;
 8003a36:	4b4d      	ldr	r3, [pc, #308]	; (8003b6c <main+0x13c>)
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t time_value = 124900;
 8003a3a:	4b4d      	ldr	r3, [pc, #308]	; (8003b70 <main+0x140>)
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c

	RTC_date_t date;
	RTC_time_t time;

	date.date = date_value / 10000;
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	4a4c      	ldr	r2, [pc, #304]	; (8003b74 <main+0x144>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	0b5b      	lsrs	r3, r3, #13
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	date.month = (date_value % 10000) / 100;
 8003a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a50:	4b48      	ldr	r3, [pc, #288]	; (8003b74 <main+0x144>)
 8003a52:	fba3 1302 	umull	r1, r3, r3, r2
 8003a56:	0b5b      	lsrs	r3, r3, #13
 8003a58:	f242 7110 	movw	r1, #10000	; 0x2710
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	4a45      	ldr	r2, [pc, #276]	; (8003b78 <main+0x148>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	date.year = date_value % 100;
 8003a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a72:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <main+0x148>)
 8003a74:	fba3 1302 	umull	r1, r3, r3, r2
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	2164      	movs	r1, #100	; 0x64
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	time.hours = time_value / 10000;
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	4a3a      	ldr	r2, [pc, #232]	; (8003b74 <main+0x144>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	0b5b      	lsrs	r3, r3, #13
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	77bb      	strb	r3, [r7, #30]
	time.minutes = (time_value % 10000) / 100;
 8003a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a98:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <main+0x144>)
 8003a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a9e:	0b5b      	lsrs	r3, r3, #13
 8003aa0:	f242 7110 	movw	r1, #10000	; 0x2710
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	4a33      	ldr	r2, [pc, #204]	; (8003b78 <main+0x148>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	777b      	strb	r3, [r7, #29]
	time.seconds = time_value % 100;
 8003ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab8:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <main+0x148>)
 8003aba:	fba3 1302 	umull	r1, r3, r3, r2
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2164      	movs	r1, #100	; 0x64
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	773b      	strb	r3, [r7, #28]
	time.time_format = TIME_FORMAT_24HRS;
 8003acc:	2302      	movs	r3, #2
 8003ace:	77fb      	strb	r3, [r7, #31]
	ds1307_init();
 8003ad0:	f7fd f8ca 	bl	8000c68 <ds1307_init>
//	ds1307_set_current_time(&time);
	ds1307_set_current_date(&date);
 8003ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fd f8d3 	bl	8000c84 <ds1307_set_current_date>

	char date_buf[11];
	char time_buf[9];

	LCD5110_Init(0x37);
 8003ade:	2037      	movs	r0, #55	; 0x37
 8003ae0:	f7fd fafe 	bl	80010e0 <LCD5110_Init>

	while(1) {
		ds1307_get_current_time(&time);
 8003ae4:	f107 031c 	add.w	r3, r7, #28
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd f8fb 	bl	8000ce4 <ds1307_get_current_time>
		ds1307_get_current_date(&date);
 8003aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd f96a 	bl	8000dcc <ds1307_get_current_date>
		LCD5110_Clear();
 8003af8:	f7fd fc16 	bl	8001328 <LCD5110_Clear>
		sprintf(date_buf, "%02d/%02d/20%02d",
				date.date,
 8003afc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
		sprintf(date_buf, "%02d/%02d/20%02d",
 8003b00:	461a      	mov	r2, r3
				date.month,
 8003b02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
		sprintf(date_buf, "%02d/%02d/20%02d",
 8003b06:	4619      	mov	r1, r3
				date.year);
 8003b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		sprintf(date_buf, "%02d/%02d/20%02d",
 8003b0c:	f107 0010 	add.w	r0, r7, #16
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	460b      	mov	r3, r1
 8003b14:	4919      	ldr	r1, [pc, #100]	; (8003b7c <main+0x14c>)
 8003b16:	f000 fdc5 	bl	80046a4 <siprintf>
		LCD5110_Puts(date_buf, 1, 1);
 8003b1a:	f107 0310 	add.w	r3, r7, #16
 8003b1e:	2201      	movs	r2, #1
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd fd92 	bl	800164c <LCD5110_Puts>

		LCD5110_GotoXY(0, 12);
 8003b28:	210c      	movs	r1, #12
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	f7fd fccc 	bl	80014c8 <LCD5110_GotoXY>
		sprintf(time_buf, "%02d:%02d:%02d",
				time.hours,
 8003b30:	7fbb      	ldrb	r3, [r7, #30]
		sprintf(time_buf, "%02d:%02d:%02d",
 8003b32:	461a      	mov	r2, r3
				time.minutes,
 8003b34:	7f7b      	ldrb	r3, [r7, #29]
		sprintf(time_buf, "%02d:%02d:%02d",
 8003b36:	4619      	mov	r1, r3
				time.seconds);
 8003b38:	7f3b      	ldrb	r3, [r7, #28]
		sprintf(time_buf, "%02d:%02d:%02d",
 8003b3a:	1d38      	adds	r0, r7, #4
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	490f      	ldr	r1, [pc, #60]	; (8003b80 <main+0x150>)
 8003b42:	f000 fdaf 	bl	80046a4 <siprintf>
		LCD5110_Puts(time_buf, 1, 1);
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	2201      	movs	r2, #1
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd fd7d 	bl	800164c <LCD5110_Puts>
		LCD5110_Refresh();
 8003b52:	f7fd fc1b 	bl	800138c <LCD5110_Refresh>
		for(int i = 0; i < 100000; i++);
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5a:	e002      	b.n	8003b62 <main+0x132>
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5e:	3301      	adds	r3, #1
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b64:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <main+0x154>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	ddf8      	ble.n	8003b5c <main+0x12c>
		ds1307_get_current_time(&time);
 8003b6a:	e7bb      	b.n	8003ae4 <main+0xb4>
 8003b6c:	0001fea1 	.word	0x0001fea1
 8003b70:	0001e7e4 	.word	0x0001e7e4
 8003b74:	d1b71759 	.word	0xd1b71759
 8003b78:	51eb851f 	.word	0x51eb851f
 8003b7c:	08006af0 	.word	0x08006af0
 8003b80:	08006b04 	.word	0x08006b04
 8003b84:	0001869f 	.word	0x0001869f

08003b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
	return 1;
 8003b8c:	2301      	movs	r3, #1
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <_kill>:

int _kill(int pid, int sig)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ba2:	f000 f8c5 	bl	8003d30 <__errno>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2216      	movs	r2, #22
 8003baa:	601a      	str	r2, [r3, #0]
	return -1;
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_exit>:

void _exit (int status)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ffe7 	bl	8003b98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003bca:	e7fe      	b.n	8003bca <_exit+0x12>

08003bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e00a      	b.n	8003bf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bde:	f3af 8000 	nop.w
 8003be2:	4601      	mov	r1, r0
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	60ba      	str	r2, [r7, #8]
 8003bea:	b2ca      	uxtb	r2, r1
 8003bec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	dbf0      	blt.n	8003bde <_read+0x12>
	}

return len;
 8003bfc:	687b      	ldr	r3, [r7, #4]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
	return -1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c2e:	605a      	str	r2, [r3, #4]
	return 0;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <_isatty>:

int _isatty(int file)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
	return 1;
 8003c46:	2301      	movs	r3, #1
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
	return 0;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <_sbrk+0x5c>)
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <_sbrk+0x60>)
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <_sbrk+0x64>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <_sbrk+0x64>)
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <_sbrk+0x68>)
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d207      	bcs.n	8003cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca0:	f000 f846 	bl	8003d30 <__errno>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	220c      	movs	r2, #12
 8003ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cae:	e009      	b.n	8003cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <_sbrk+0x64>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <_sbrk+0x64>)
 8003cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20020000 	.word	0x20020000
 8003cd0:	00000400 	.word	0x00000400
 8003cd4:	200007bc 	.word	0x200007bc
 8003cd8:	20000aa8 	.word	0x20000aa8

08003cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cdc:	480d      	ldr	r0, [pc, #52]	; (8003d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cde:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ce0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ce4:	480c      	ldr	r0, [pc, #48]	; (8003d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ce6:	490d      	ldr	r1, [pc, #52]	; (8003d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <LoopForever+0xe>)
  movs r3, #0
 8003cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cec:	e002      	b.n	8003cf4 <LoopCopyDataInit>

08003cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cf2:	3304      	adds	r3, #4

08003cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf8:	d3f9      	bcc.n	8003cee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cfc:	4c0a      	ldr	r4, [pc, #40]	; (8003d28 <LoopForever+0x16>)
  movs r3, #0
 8003cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d00:	e001      	b.n	8003d06 <LoopFillZerobss>

08003d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d04:	3204      	adds	r2, #4

08003d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d08:	d3fb      	bcc.n	8003d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d0a:	f000 f817 	bl	8003d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d0e:	f7ff fe8f 	bl	8003a30 <main>

08003d12 <LoopForever>:

LoopForever:
    b LoopForever
 8003d12:	e7fe      	b.n	8003d12 <LoopForever>
  ldr   r0, =_estack
 8003d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d1c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003d20:	08007294 	.word	0x08007294
  ldr r2, =_sbss
 8003d24:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003d28:	20000aa4 	.word	0x20000aa4

08003d2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d2c:	e7fe      	b.n	8003d2c <ADC_IRQHandler>
	...

08003d30 <__errno>:
 8003d30:	4b01      	ldr	r3, [pc, #4]	; (8003d38 <__errno+0x8>)
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000014 	.word	0x20000014

08003d3c <__libc_init_array>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	4d0d      	ldr	r5, [pc, #52]	; (8003d74 <__libc_init_array+0x38>)
 8003d40:	4c0d      	ldr	r4, [pc, #52]	; (8003d78 <__libc_init_array+0x3c>)
 8003d42:	1b64      	subs	r4, r4, r5
 8003d44:	10a4      	asrs	r4, r4, #2
 8003d46:	2600      	movs	r6, #0
 8003d48:	42a6      	cmp	r6, r4
 8003d4a:	d109      	bne.n	8003d60 <__libc_init_array+0x24>
 8003d4c:	4d0b      	ldr	r5, [pc, #44]	; (8003d7c <__libc_init_array+0x40>)
 8003d4e:	4c0c      	ldr	r4, [pc, #48]	; (8003d80 <__libc_init_array+0x44>)
 8003d50:	f002 feb2 	bl	8006ab8 <_init>
 8003d54:	1b64      	subs	r4, r4, r5
 8003d56:	10a4      	asrs	r4, r4, #2
 8003d58:	2600      	movs	r6, #0
 8003d5a:	42a6      	cmp	r6, r4
 8003d5c:	d105      	bne.n	8003d6a <__libc_init_array+0x2e>
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
 8003d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d64:	4798      	blx	r3
 8003d66:	3601      	adds	r6, #1
 8003d68:	e7ee      	b.n	8003d48 <__libc_init_array+0xc>
 8003d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6e:	4798      	blx	r3
 8003d70:	3601      	adds	r6, #1
 8003d72:	e7f2      	b.n	8003d5a <__libc_init_array+0x1e>
 8003d74:	0800728c 	.word	0x0800728c
 8003d78:	0800728c 	.word	0x0800728c
 8003d7c:	0800728c 	.word	0x0800728c
 8003d80:	08007290 	.word	0x08007290

08003d84 <memcmp>:
 8003d84:	b530      	push	{r4, r5, lr}
 8003d86:	3901      	subs	r1, #1
 8003d88:	2400      	movs	r4, #0
 8003d8a:	42a2      	cmp	r2, r4
 8003d8c:	d101      	bne.n	8003d92 <memcmp+0xe>
 8003d8e:	2000      	movs	r0, #0
 8003d90:	e005      	b.n	8003d9e <memcmp+0x1a>
 8003d92:	5d03      	ldrb	r3, [r0, r4]
 8003d94:	3401      	adds	r4, #1
 8003d96:	5d0d      	ldrb	r5, [r1, r4]
 8003d98:	42ab      	cmp	r3, r5
 8003d9a:	d0f6      	beq.n	8003d8a <memcmp+0x6>
 8003d9c:	1b58      	subs	r0, r3, r5
 8003d9e:	bd30      	pop	{r4, r5, pc}

08003da0 <memcpy>:
 8003da0:	440a      	add	r2, r1
 8003da2:	4291      	cmp	r1, r2
 8003da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003da8:	d100      	bne.n	8003dac <memcpy+0xc>
 8003daa:	4770      	bx	lr
 8003dac:	b510      	push	{r4, lr}
 8003dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003db6:	4291      	cmp	r1, r2
 8003db8:	d1f9      	bne.n	8003dae <memcpy+0xe>
 8003dba:	bd10      	pop	{r4, pc}

08003dbc <memset>:
 8003dbc:	4402      	add	r2, r0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d100      	bne.n	8003dc6 <memset+0xa>
 8003dc4:	4770      	bx	lr
 8003dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dca:	e7f9      	b.n	8003dc0 <memset+0x4>

08003dcc <__cvt>:
 8003dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	b088      	sub	sp, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	461d      	mov	r5, r3
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	bfbc      	itt	lt
 8003dda:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003dde:	4614      	movlt	r4, r2
 8003de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003de2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8003de4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003de8:	bfb6      	itet	lt
 8003dea:	461d      	movlt	r5, r3
 8003dec:	2300      	movge	r3, #0
 8003dee:	232d      	movlt	r3, #45	; 0x2d
 8003df0:	7013      	strb	r3, [r2, #0]
 8003df2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003df4:	f023 0820 	bic.w	r8, r3, #32
 8003df8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dfc:	d005      	beq.n	8003e0a <__cvt+0x3e>
 8003dfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e02:	d100      	bne.n	8003e06 <__cvt+0x3a>
 8003e04:	3601      	adds	r6, #1
 8003e06:	2302      	movs	r3, #2
 8003e08:	e000      	b.n	8003e0c <__cvt+0x40>
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	aa07      	add	r2, sp, #28
 8003e0e:	9204      	str	r2, [sp, #16]
 8003e10:	aa06      	add	r2, sp, #24
 8003e12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e16:	e9cd 3600 	strd	r3, r6, [sp]
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	f000 fcef 	bl	8004800 <_dtoa_r>
 8003e22:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e26:	4607      	mov	r7, r0
 8003e28:	d102      	bne.n	8003e30 <__cvt+0x64>
 8003e2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e2c:	07db      	lsls	r3, r3, #31
 8003e2e:	d522      	bpl.n	8003e76 <__cvt+0xaa>
 8003e30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e34:	eb07 0906 	add.w	r9, r7, r6
 8003e38:	d110      	bne.n	8003e5c <__cvt+0x90>
 8003e3a:	783b      	ldrb	r3, [r7, #0]
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	d10a      	bne.n	8003e56 <__cvt+0x8a>
 8003e40:	2200      	movs	r2, #0
 8003e42:	2300      	movs	r3, #0
 8003e44:	4620      	mov	r0, r4
 8003e46:	4629      	mov	r1, r5
 8003e48:	f7fc fe9e 	bl	8000b88 <__aeabi_dcmpeq>
 8003e4c:	b918      	cbnz	r0, 8003e56 <__cvt+0x8a>
 8003e4e:	f1c6 0601 	rsb	r6, r6, #1
 8003e52:	f8ca 6000 	str.w	r6, [sl]
 8003e56:	f8da 3000 	ldr.w	r3, [sl]
 8003e5a:	4499      	add	r9, r3
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2300      	movs	r3, #0
 8003e60:	4620      	mov	r0, r4
 8003e62:	4629      	mov	r1, r5
 8003e64:	f7fc fe90 	bl	8000b88 <__aeabi_dcmpeq>
 8003e68:	b108      	cbz	r0, 8003e6e <__cvt+0xa2>
 8003e6a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e6e:	2230      	movs	r2, #48	; 0x30
 8003e70:	9b07      	ldr	r3, [sp, #28]
 8003e72:	454b      	cmp	r3, r9
 8003e74:	d307      	bcc.n	8003e86 <__cvt+0xba>
 8003e76:	9b07      	ldr	r3, [sp, #28]
 8003e78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e7a:	1bdb      	subs	r3, r3, r7
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	b008      	add	sp, #32
 8003e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e86:	1c59      	adds	r1, r3, #1
 8003e88:	9107      	str	r1, [sp, #28]
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	e7f0      	b.n	8003e70 <__cvt+0xa4>

08003e8e <__exponent>:
 8003e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e90:	4603      	mov	r3, r0
 8003e92:	2900      	cmp	r1, #0
 8003e94:	bfb8      	it	lt
 8003e96:	4249      	neglt	r1, r1
 8003e98:	f803 2b02 	strb.w	r2, [r3], #2
 8003e9c:	bfb4      	ite	lt
 8003e9e:	222d      	movlt	r2, #45	; 0x2d
 8003ea0:	222b      	movge	r2, #43	; 0x2b
 8003ea2:	2909      	cmp	r1, #9
 8003ea4:	7042      	strb	r2, [r0, #1]
 8003ea6:	dd2a      	ble.n	8003efe <__exponent+0x70>
 8003ea8:	f10d 0407 	add.w	r4, sp, #7
 8003eac:	46a4      	mov	ip, r4
 8003eae:	270a      	movs	r7, #10
 8003eb0:	46a6      	mov	lr, r4
 8003eb2:	460a      	mov	r2, r1
 8003eb4:	fb91 f6f7 	sdiv	r6, r1, r7
 8003eb8:	fb07 1516 	mls	r5, r7, r6, r1
 8003ebc:	3530      	adds	r5, #48	; 0x30
 8003ebe:	2a63      	cmp	r2, #99	; 0x63
 8003ec0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003ec4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003ec8:	4631      	mov	r1, r6
 8003eca:	dcf1      	bgt.n	8003eb0 <__exponent+0x22>
 8003ecc:	3130      	adds	r1, #48	; 0x30
 8003ece:	f1ae 0502 	sub.w	r5, lr, #2
 8003ed2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ed6:	1c44      	adds	r4, r0, #1
 8003ed8:	4629      	mov	r1, r5
 8003eda:	4561      	cmp	r1, ip
 8003edc:	d30a      	bcc.n	8003ef4 <__exponent+0x66>
 8003ede:	f10d 0209 	add.w	r2, sp, #9
 8003ee2:	eba2 020e 	sub.w	r2, r2, lr
 8003ee6:	4565      	cmp	r5, ip
 8003ee8:	bf88      	it	hi
 8003eea:	2200      	movhi	r2, #0
 8003eec:	4413      	add	r3, r2
 8003eee:	1a18      	subs	r0, r3, r0
 8003ef0:	b003      	add	sp, #12
 8003ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ef8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003efc:	e7ed      	b.n	8003eda <__exponent+0x4c>
 8003efe:	2330      	movs	r3, #48	; 0x30
 8003f00:	3130      	adds	r1, #48	; 0x30
 8003f02:	7083      	strb	r3, [r0, #2]
 8003f04:	70c1      	strb	r1, [r0, #3]
 8003f06:	1d03      	adds	r3, r0, #4
 8003f08:	e7f1      	b.n	8003eee <__exponent+0x60>
	...

08003f0c <_printf_float>:
 8003f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f10:	ed2d 8b02 	vpush	{d8}
 8003f14:	b091      	sub	sp, #68	; 0x44
 8003f16:	460c      	mov	r4, r1
 8003f18:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003f1c:	4616      	mov	r6, r2
 8003f1e:	461f      	mov	r7, r3
 8003f20:	4605      	mov	r5, r0
 8003f22:	f001 fa59 	bl	80053d8 <_localeconv_r>
 8003f26:	f8d0 a000 	ldr.w	sl, [r0]
 8003f2a:	4650      	mov	r0, sl
 8003f2c:	f7fc f9aa 	bl	8000284 <strlen>
 8003f30:	2300      	movs	r3, #0
 8003f32:	930e      	str	r3, [sp, #56]	; 0x38
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	9309      	str	r3, [sp, #36]	; 0x24
 8003f38:	f8d8 3000 	ldr.w	r3, [r8]
 8003f3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003f40:	3307      	adds	r3, #7
 8003f42:	f023 0307 	bic.w	r3, r3, #7
 8003f46:	f103 0208 	add.w	r2, r3, #8
 8003f4a:	f8c8 2000 	str.w	r2, [r8]
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003f5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f60:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003f64:	ee08 0a10 	vmov	s16, r0
 8003f68:	4ba0      	ldr	r3, [pc, #640]	; (80041ec <_printf_float+0x2e0>)
 8003f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f72:	f7fc fe3b 	bl	8000bec <__aeabi_dcmpun>
 8003f76:	bb88      	cbnz	r0, 8003fdc <_printf_float+0xd0>
 8003f78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f7c:	4b9b      	ldr	r3, [pc, #620]	; (80041ec <_printf_float+0x2e0>)
 8003f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f82:	f7fc fe15 	bl	8000bb0 <__aeabi_dcmple>
 8003f86:	bb48      	cbnz	r0, 8003fdc <_printf_float+0xd0>
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	4649      	mov	r1, r9
 8003f90:	f7fc fe04 	bl	8000b9c <__aeabi_dcmplt>
 8003f94:	b110      	cbz	r0, 8003f9c <_printf_float+0x90>
 8003f96:	232d      	movs	r3, #45	; 0x2d
 8003f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f9c:	4b94      	ldr	r3, [pc, #592]	; (80041f0 <_printf_float+0x2e4>)
 8003f9e:	4895      	ldr	r0, [pc, #596]	; (80041f4 <_printf_float+0x2e8>)
 8003fa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003fa4:	bf94      	ite	ls
 8003fa6:	4698      	movls	r8, r3
 8003fa8:	4680      	movhi	r8, r0
 8003faa:	2303      	movs	r3, #3
 8003fac:	6123      	str	r3, [r4, #16]
 8003fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb0:	f023 0304 	bic.w	r3, r3, #4
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	f04f 0900 	mov.w	r9, #0
 8003fba:	9700      	str	r7, [sp, #0]
 8003fbc:	4633      	mov	r3, r6
 8003fbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f000 f9da 	bl	800437c <_printf_common>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	f040 8092 	bne.w	80040f2 <_printf_float+0x1e6>
 8003fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd2:	b011      	add	sp, #68	; 0x44
 8003fd4:	ecbd 8b02 	vpop	{d8}
 8003fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fdc:	4642      	mov	r2, r8
 8003fde:	464b      	mov	r3, r9
 8003fe0:	4640      	mov	r0, r8
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	f7fc fe02 	bl	8000bec <__aeabi_dcmpun>
 8003fe8:	b140      	cbz	r0, 8003ffc <_printf_float+0xf0>
 8003fea:	464b      	mov	r3, r9
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bfbc      	itt	lt
 8003ff0:	232d      	movlt	r3, #45	; 0x2d
 8003ff2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ff6:	4880      	ldr	r0, [pc, #512]	; (80041f8 <_printf_float+0x2ec>)
 8003ff8:	4b80      	ldr	r3, [pc, #512]	; (80041fc <_printf_float+0x2f0>)
 8003ffa:	e7d1      	b.n	8003fa0 <_printf_float+0x94>
 8003ffc:	6863      	ldr	r3, [r4, #4]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 8004004:	d143      	bne.n	800408e <_printf_float+0x182>
 8004006:	2306      	movs	r3, #6
 8004008:	6063      	str	r3, [r4, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800400e:	9206      	str	r2, [sp, #24]
 8004010:	aa0e      	add	r2, sp, #56	; 0x38
 8004012:	e9cd b204 	strd	fp, r2, [sp, #16]
 8004016:	aa0d      	add	r2, sp, #52	; 0x34
 8004018:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800401c:	9203      	str	r2, [sp, #12]
 800401e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004022:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	6863      	ldr	r3, [r4, #4]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4642      	mov	r2, r8
 800402e:	464b      	mov	r3, r9
 8004030:	4628      	mov	r0, r5
 8004032:	910a      	str	r1, [sp, #40]	; 0x28
 8004034:	f7ff feca 	bl	8003dcc <__cvt>
 8004038:	990a      	ldr	r1, [sp, #40]	; 0x28
 800403a:	2947      	cmp	r1, #71	; 0x47
 800403c:	4680      	mov	r8, r0
 800403e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004040:	d108      	bne.n	8004054 <_printf_float+0x148>
 8004042:	1cc8      	adds	r0, r1, #3
 8004044:	db02      	blt.n	800404c <_printf_float+0x140>
 8004046:	6863      	ldr	r3, [r4, #4]
 8004048:	4299      	cmp	r1, r3
 800404a:	dd40      	ble.n	80040ce <_printf_float+0x1c2>
 800404c:	f1ab 0b02 	sub.w	fp, fp, #2
 8004050:	fa5f fb8b 	uxtb.w	fp, fp
 8004054:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004058:	d81f      	bhi.n	800409a <_printf_float+0x18e>
 800405a:	3901      	subs	r1, #1
 800405c:	465a      	mov	r2, fp
 800405e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004062:	910d      	str	r1, [sp, #52]	; 0x34
 8004064:	f7ff ff13 	bl	8003e8e <__exponent>
 8004068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800406a:	1813      	adds	r3, r2, r0
 800406c:	2a01      	cmp	r2, #1
 800406e:	4681      	mov	r9, r0
 8004070:	6123      	str	r3, [r4, #16]
 8004072:	dc02      	bgt.n	800407a <_printf_float+0x16e>
 8004074:	6822      	ldr	r2, [r4, #0]
 8004076:	07d2      	lsls	r2, r2, #31
 8004078:	d501      	bpl.n	800407e <_printf_float+0x172>
 800407a:	3301      	adds	r3, #1
 800407c:	6123      	str	r3, [r4, #16]
 800407e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004082:	2b00      	cmp	r3, #0
 8004084:	d099      	beq.n	8003fba <_printf_float+0xae>
 8004086:	232d      	movs	r3, #45	; 0x2d
 8004088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800408c:	e795      	b.n	8003fba <_printf_float+0xae>
 800408e:	2947      	cmp	r1, #71	; 0x47
 8004090:	d1bb      	bne.n	800400a <_printf_float+0xfe>
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1b9      	bne.n	800400a <_printf_float+0xfe>
 8004096:	2301      	movs	r3, #1
 8004098:	e7b6      	b.n	8004008 <_printf_float+0xfc>
 800409a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800409e:	d118      	bne.n	80040d2 <_printf_float+0x1c6>
 80040a0:	2900      	cmp	r1, #0
 80040a2:	6863      	ldr	r3, [r4, #4]
 80040a4:	dd0b      	ble.n	80040be <_printf_float+0x1b2>
 80040a6:	6121      	str	r1, [r4, #16]
 80040a8:	b913      	cbnz	r3, 80040b0 <_printf_float+0x1a4>
 80040aa:	6822      	ldr	r2, [r4, #0]
 80040ac:	07d0      	lsls	r0, r2, #31
 80040ae:	d502      	bpl.n	80040b6 <_printf_float+0x1aa>
 80040b0:	3301      	adds	r3, #1
 80040b2:	440b      	add	r3, r1
 80040b4:	6123      	str	r3, [r4, #16]
 80040b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80040b8:	f04f 0900 	mov.w	r9, #0
 80040bc:	e7df      	b.n	800407e <_printf_float+0x172>
 80040be:	b913      	cbnz	r3, 80040c6 <_printf_float+0x1ba>
 80040c0:	6822      	ldr	r2, [r4, #0]
 80040c2:	07d2      	lsls	r2, r2, #31
 80040c4:	d501      	bpl.n	80040ca <_printf_float+0x1be>
 80040c6:	3302      	adds	r3, #2
 80040c8:	e7f4      	b.n	80040b4 <_printf_float+0x1a8>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e7f2      	b.n	80040b4 <_printf_float+0x1a8>
 80040ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80040d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040d4:	4299      	cmp	r1, r3
 80040d6:	db05      	blt.n	80040e4 <_printf_float+0x1d8>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	6121      	str	r1, [r4, #16]
 80040dc:	07d8      	lsls	r0, r3, #31
 80040de:	d5ea      	bpl.n	80040b6 <_printf_float+0x1aa>
 80040e0:	1c4b      	adds	r3, r1, #1
 80040e2:	e7e7      	b.n	80040b4 <_printf_float+0x1a8>
 80040e4:	2900      	cmp	r1, #0
 80040e6:	bfd4      	ite	le
 80040e8:	f1c1 0202 	rsble	r2, r1, #2
 80040ec:	2201      	movgt	r2, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	e7e0      	b.n	80040b4 <_printf_float+0x1a8>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	055a      	lsls	r2, r3, #21
 80040f6:	d407      	bmi.n	8004108 <_printf_float+0x1fc>
 80040f8:	6923      	ldr	r3, [r4, #16]
 80040fa:	4642      	mov	r2, r8
 80040fc:	4631      	mov	r1, r6
 80040fe:	4628      	mov	r0, r5
 8004100:	47b8      	blx	r7
 8004102:	3001      	adds	r0, #1
 8004104:	d12c      	bne.n	8004160 <_printf_float+0x254>
 8004106:	e762      	b.n	8003fce <_printf_float+0xc2>
 8004108:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800410c:	f240 80e0 	bls.w	80042d0 <_printf_float+0x3c4>
 8004110:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004114:	2200      	movs	r2, #0
 8004116:	2300      	movs	r3, #0
 8004118:	f7fc fd36 	bl	8000b88 <__aeabi_dcmpeq>
 800411c:	2800      	cmp	r0, #0
 800411e:	d034      	beq.n	800418a <_printf_float+0x27e>
 8004120:	4a37      	ldr	r2, [pc, #220]	; (8004200 <_printf_float+0x2f4>)
 8004122:	2301      	movs	r3, #1
 8004124:	4631      	mov	r1, r6
 8004126:	4628      	mov	r0, r5
 8004128:	47b8      	blx	r7
 800412a:	3001      	adds	r0, #1
 800412c:	f43f af4f 	beq.w	8003fce <_printf_float+0xc2>
 8004130:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004134:	429a      	cmp	r2, r3
 8004136:	db02      	blt.n	800413e <_printf_float+0x232>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	07d8      	lsls	r0, r3, #31
 800413c:	d510      	bpl.n	8004160 <_printf_float+0x254>
 800413e:	ee18 3a10 	vmov	r3, s16
 8004142:	4652      	mov	r2, sl
 8004144:	4631      	mov	r1, r6
 8004146:	4628      	mov	r0, r5
 8004148:	47b8      	blx	r7
 800414a:	3001      	adds	r0, #1
 800414c:	f43f af3f 	beq.w	8003fce <_printf_float+0xc2>
 8004150:	f04f 0800 	mov.w	r8, #0
 8004154:	f104 091a 	add.w	r9, r4, #26
 8004158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800415a:	3b01      	subs	r3, #1
 800415c:	4543      	cmp	r3, r8
 800415e:	dc09      	bgt.n	8004174 <_printf_float+0x268>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	079b      	lsls	r3, r3, #30
 8004164:	f100 8105 	bmi.w	8004372 <_printf_float+0x466>
 8004168:	68e0      	ldr	r0, [r4, #12]
 800416a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800416c:	4298      	cmp	r0, r3
 800416e:	bfb8      	it	lt
 8004170:	4618      	movlt	r0, r3
 8004172:	e72e      	b.n	8003fd2 <_printf_float+0xc6>
 8004174:	2301      	movs	r3, #1
 8004176:	464a      	mov	r2, r9
 8004178:	4631      	mov	r1, r6
 800417a:	4628      	mov	r0, r5
 800417c:	47b8      	blx	r7
 800417e:	3001      	adds	r0, #1
 8004180:	f43f af25 	beq.w	8003fce <_printf_float+0xc2>
 8004184:	f108 0801 	add.w	r8, r8, #1
 8004188:	e7e6      	b.n	8004158 <_printf_float+0x24c>
 800418a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800418c:	2b00      	cmp	r3, #0
 800418e:	dc39      	bgt.n	8004204 <_printf_float+0x2f8>
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <_printf_float+0x2f4>)
 8004192:	2301      	movs	r3, #1
 8004194:	4631      	mov	r1, r6
 8004196:	4628      	mov	r0, r5
 8004198:	47b8      	blx	r7
 800419a:	3001      	adds	r0, #1
 800419c:	f43f af17 	beq.w	8003fce <_printf_float+0xc2>
 80041a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041a4:	4313      	orrs	r3, r2
 80041a6:	d102      	bne.n	80041ae <_printf_float+0x2a2>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	07d9      	lsls	r1, r3, #31
 80041ac:	d5d8      	bpl.n	8004160 <_printf_float+0x254>
 80041ae:	ee18 3a10 	vmov	r3, s16
 80041b2:	4652      	mov	r2, sl
 80041b4:	4631      	mov	r1, r6
 80041b6:	4628      	mov	r0, r5
 80041b8:	47b8      	blx	r7
 80041ba:	3001      	adds	r0, #1
 80041bc:	f43f af07 	beq.w	8003fce <_printf_float+0xc2>
 80041c0:	f04f 0900 	mov.w	r9, #0
 80041c4:	f104 0a1a 	add.w	sl, r4, #26
 80041c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041ca:	425b      	negs	r3, r3
 80041cc:	454b      	cmp	r3, r9
 80041ce:	dc01      	bgt.n	80041d4 <_printf_float+0x2c8>
 80041d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041d2:	e792      	b.n	80040fa <_printf_float+0x1ee>
 80041d4:	2301      	movs	r3, #1
 80041d6:	4652      	mov	r2, sl
 80041d8:	4631      	mov	r1, r6
 80041da:	4628      	mov	r0, r5
 80041dc:	47b8      	blx	r7
 80041de:	3001      	adds	r0, #1
 80041e0:	f43f aef5 	beq.w	8003fce <_printf_float+0xc2>
 80041e4:	f109 0901 	add.w	r9, r9, #1
 80041e8:	e7ee      	b.n	80041c8 <_printf_float+0x2bc>
 80041ea:	bf00      	nop
 80041ec:	7fefffff 	.word	0x7fefffff
 80041f0:	08006eac 	.word	0x08006eac
 80041f4:	08006eb0 	.word	0x08006eb0
 80041f8:	08006eb8 	.word	0x08006eb8
 80041fc:	08006eb4 	.word	0x08006eb4
 8004200:	08006ebc 	.word	0x08006ebc
 8004204:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004208:	429a      	cmp	r2, r3
 800420a:	bfa8      	it	ge
 800420c:	461a      	movge	r2, r3
 800420e:	2a00      	cmp	r2, #0
 8004210:	4691      	mov	r9, r2
 8004212:	dc37      	bgt.n	8004284 <_printf_float+0x378>
 8004214:	f04f 0b00 	mov.w	fp, #0
 8004218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800421c:	f104 021a 	add.w	r2, r4, #26
 8004220:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004222:	9309      	str	r3, [sp, #36]	; 0x24
 8004224:	eba3 0309 	sub.w	r3, r3, r9
 8004228:	455b      	cmp	r3, fp
 800422a:	dc33      	bgt.n	8004294 <_printf_float+0x388>
 800422c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004230:	429a      	cmp	r2, r3
 8004232:	db3b      	blt.n	80042ac <_printf_float+0x3a0>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	07da      	lsls	r2, r3, #31
 8004238:	d438      	bmi.n	80042ac <_printf_float+0x3a0>
 800423a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800423c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800423e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	eba2 0901 	sub.w	r9, r2, r1
 8004246:	4599      	cmp	r9, r3
 8004248:	bfa8      	it	ge
 800424a:	4699      	movge	r9, r3
 800424c:	f1b9 0f00 	cmp.w	r9, #0
 8004250:	dc35      	bgt.n	80042be <_printf_float+0x3b2>
 8004252:	f04f 0800 	mov.w	r8, #0
 8004256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800425a:	f104 0a1a 	add.w	sl, r4, #26
 800425e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	eba3 0309 	sub.w	r3, r3, r9
 8004268:	4543      	cmp	r3, r8
 800426a:	f77f af79 	ble.w	8004160 <_printf_float+0x254>
 800426e:	2301      	movs	r3, #1
 8004270:	4652      	mov	r2, sl
 8004272:	4631      	mov	r1, r6
 8004274:	4628      	mov	r0, r5
 8004276:	47b8      	blx	r7
 8004278:	3001      	adds	r0, #1
 800427a:	f43f aea8 	beq.w	8003fce <_printf_float+0xc2>
 800427e:	f108 0801 	add.w	r8, r8, #1
 8004282:	e7ec      	b.n	800425e <_printf_float+0x352>
 8004284:	4613      	mov	r3, r2
 8004286:	4631      	mov	r1, r6
 8004288:	4642      	mov	r2, r8
 800428a:	4628      	mov	r0, r5
 800428c:	47b8      	blx	r7
 800428e:	3001      	adds	r0, #1
 8004290:	d1c0      	bne.n	8004214 <_printf_float+0x308>
 8004292:	e69c      	b.n	8003fce <_printf_float+0xc2>
 8004294:	2301      	movs	r3, #1
 8004296:	4631      	mov	r1, r6
 8004298:	4628      	mov	r0, r5
 800429a:	9209      	str	r2, [sp, #36]	; 0x24
 800429c:	47b8      	blx	r7
 800429e:	3001      	adds	r0, #1
 80042a0:	f43f ae95 	beq.w	8003fce <_printf_float+0xc2>
 80042a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042a6:	f10b 0b01 	add.w	fp, fp, #1
 80042aa:	e7b9      	b.n	8004220 <_printf_float+0x314>
 80042ac:	ee18 3a10 	vmov	r3, s16
 80042b0:	4652      	mov	r2, sl
 80042b2:	4631      	mov	r1, r6
 80042b4:	4628      	mov	r0, r5
 80042b6:	47b8      	blx	r7
 80042b8:	3001      	adds	r0, #1
 80042ba:	d1be      	bne.n	800423a <_printf_float+0x32e>
 80042bc:	e687      	b.n	8003fce <_printf_float+0xc2>
 80042be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042c0:	464b      	mov	r3, r9
 80042c2:	4442      	add	r2, r8
 80042c4:	4631      	mov	r1, r6
 80042c6:	4628      	mov	r0, r5
 80042c8:	47b8      	blx	r7
 80042ca:	3001      	adds	r0, #1
 80042cc:	d1c1      	bne.n	8004252 <_printf_float+0x346>
 80042ce:	e67e      	b.n	8003fce <_printf_float+0xc2>
 80042d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042d2:	2a01      	cmp	r2, #1
 80042d4:	dc01      	bgt.n	80042da <_printf_float+0x3ce>
 80042d6:	07db      	lsls	r3, r3, #31
 80042d8:	d538      	bpl.n	800434c <_printf_float+0x440>
 80042da:	2301      	movs	r3, #1
 80042dc:	4642      	mov	r2, r8
 80042de:	4631      	mov	r1, r6
 80042e0:	4628      	mov	r0, r5
 80042e2:	47b8      	blx	r7
 80042e4:	3001      	adds	r0, #1
 80042e6:	f43f ae72 	beq.w	8003fce <_printf_float+0xc2>
 80042ea:	ee18 3a10 	vmov	r3, s16
 80042ee:	4652      	mov	r2, sl
 80042f0:	4631      	mov	r1, r6
 80042f2:	4628      	mov	r0, r5
 80042f4:	47b8      	blx	r7
 80042f6:	3001      	adds	r0, #1
 80042f8:	f43f ae69 	beq.w	8003fce <_printf_float+0xc2>
 80042fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004300:	2200      	movs	r2, #0
 8004302:	2300      	movs	r3, #0
 8004304:	f7fc fc40 	bl	8000b88 <__aeabi_dcmpeq>
 8004308:	b9d8      	cbnz	r0, 8004342 <_printf_float+0x436>
 800430a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800430c:	f108 0201 	add.w	r2, r8, #1
 8004310:	3b01      	subs	r3, #1
 8004312:	4631      	mov	r1, r6
 8004314:	4628      	mov	r0, r5
 8004316:	47b8      	blx	r7
 8004318:	3001      	adds	r0, #1
 800431a:	d10e      	bne.n	800433a <_printf_float+0x42e>
 800431c:	e657      	b.n	8003fce <_printf_float+0xc2>
 800431e:	2301      	movs	r3, #1
 8004320:	4652      	mov	r2, sl
 8004322:	4631      	mov	r1, r6
 8004324:	4628      	mov	r0, r5
 8004326:	47b8      	blx	r7
 8004328:	3001      	adds	r0, #1
 800432a:	f43f ae50 	beq.w	8003fce <_printf_float+0xc2>
 800432e:	f108 0801 	add.w	r8, r8, #1
 8004332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004334:	3b01      	subs	r3, #1
 8004336:	4543      	cmp	r3, r8
 8004338:	dcf1      	bgt.n	800431e <_printf_float+0x412>
 800433a:	464b      	mov	r3, r9
 800433c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004340:	e6dc      	b.n	80040fc <_printf_float+0x1f0>
 8004342:	f04f 0800 	mov.w	r8, #0
 8004346:	f104 0a1a 	add.w	sl, r4, #26
 800434a:	e7f2      	b.n	8004332 <_printf_float+0x426>
 800434c:	2301      	movs	r3, #1
 800434e:	4642      	mov	r2, r8
 8004350:	e7df      	b.n	8004312 <_printf_float+0x406>
 8004352:	2301      	movs	r3, #1
 8004354:	464a      	mov	r2, r9
 8004356:	4631      	mov	r1, r6
 8004358:	4628      	mov	r0, r5
 800435a:	47b8      	blx	r7
 800435c:	3001      	adds	r0, #1
 800435e:	f43f ae36 	beq.w	8003fce <_printf_float+0xc2>
 8004362:	f108 0801 	add.w	r8, r8, #1
 8004366:	68e3      	ldr	r3, [r4, #12]
 8004368:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800436a:	1a5b      	subs	r3, r3, r1
 800436c:	4543      	cmp	r3, r8
 800436e:	dcf0      	bgt.n	8004352 <_printf_float+0x446>
 8004370:	e6fa      	b.n	8004168 <_printf_float+0x25c>
 8004372:	f04f 0800 	mov.w	r8, #0
 8004376:	f104 0919 	add.w	r9, r4, #25
 800437a:	e7f4      	b.n	8004366 <_printf_float+0x45a>

0800437c <_printf_common>:
 800437c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004380:	4616      	mov	r6, r2
 8004382:	4699      	mov	r9, r3
 8004384:	688a      	ldr	r2, [r1, #8]
 8004386:	690b      	ldr	r3, [r1, #16]
 8004388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800438c:	4293      	cmp	r3, r2
 800438e:	bfb8      	it	lt
 8004390:	4613      	movlt	r3, r2
 8004392:	6033      	str	r3, [r6, #0]
 8004394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004398:	4607      	mov	r7, r0
 800439a:	460c      	mov	r4, r1
 800439c:	b10a      	cbz	r2, 80043a2 <_printf_common+0x26>
 800439e:	3301      	adds	r3, #1
 80043a0:	6033      	str	r3, [r6, #0]
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	0699      	lsls	r1, r3, #26
 80043a6:	bf42      	ittt	mi
 80043a8:	6833      	ldrmi	r3, [r6, #0]
 80043aa:	3302      	addmi	r3, #2
 80043ac:	6033      	strmi	r3, [r6, #0]
 80043ae:	6825      	ldr	r5, [r4, #0]
 80043b0:	f015 0506 	ands.w	r5, r5, #6
 80043b4:	d106      	bne.n	80043c4 <_printf_common+0x48>
 80043b6:	f104 0a19 	add.w	sl, r4, #25
 80043ba:	68e3      	ldr	r3, [r4, #12]
 80043bc:	6832      	ldr	r2, [r6, #0]
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	42ab      	cmp	r3, r5
 80043c2:	dc26      	bgt.n	8004412 <_printf_common+0x96>
 80043c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043c8:	1e13      	subs	r3, r2, #0
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	bf18      	it	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	0692      	lsls	r2, r2, #26
 80043d2:	d42b      	bmi.n	800442c <_printf_common+0xb0>
 80043d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043d8:	4649      	mov	r1, r9
 80043da:	4638      	mov	r0, r7
 80043dc:	47c0      	blx	r8
 80043de:	3001      	adds	r0, #1
 80043e0:	d01e      	beq.n	8004420 <_printf_common+0xa4>
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	68e5      	ldr	r5, [r4, #12]
 80043e6:	6832      	ldr	r2, [r6, #0]
 80043e8:	f003 0306 	and.w	r3, r3, #6
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	bf08      	it	eq
 80043f0:	1aad      	subeq	r5, r5, r2
 80043f2:	68a3      	ldr	r3, [r4, #8]
 80043f4:	6922      	ldr	r2, [r4, #16]
 80043f6:	bf0c      	ite	eq
 80043f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043fc:	2500      	movne	r5, #0
 80043fe:	4293      	cmp	r3, r2
 8004400:	bfc4      	itt	gt
 8004402:	1a9b      	subgt	r3, r3, r2
 8004404:	18ed      	addgt	r5, r5, r3
 8004406:	2600      	movs	r6, #0
 8004408:	341a      	adds	r4, #26
 800440a:	42b5      	cmp	r5, r6
 800440c:	d11a      	bne.n	8004444 <_printf_common+0xc8>
 800440e:	2000      	movs	r0, #0
 8004410:	e008      	b.n	8004424 <_printf_common+0xa8>
 8004412:	2301      	movs	r3, #1
 8004414:	4652      	mov	r2, sl
 8004416:	4649      	mov	r1, r9
 8004418:	4638      	mov	r0, r7
 800441a:	47c0      	blx	r8
 800441c:	3001      	adds	r0, #1
 800441e:	d103      	bne.n	8004428 <_printf_common+0xac>
 8004420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004428:	3501      	adds	r5, #1
 800442a:	e7c6      	b.n	80043ba <_printf_common+0x3e>
 800442c:	18e1      	adds	r1, r4, r3
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	2030      	movs	r0, #48	; 0x30
 8004432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004436:	4422      	add	r2, r4
 8004438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800443c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004440:	3302      	adds	r3, #2
 8004442:	e7c7      	b.n	80043d4 <_printf_common+0x58>
 8004444:	2301      	movs	r3, #1
 8004446:	4622      	mov	r2, r4
 8004448:	4649      	mov	r1, r9
 800444a:	4638      	mov	r0, r7
 800444c:	47c0      	blx	r8
 800444e:	3001      	adds	r0, #1
 8004450:	d0e6      	beq.n	8004420 <_printf_common+0xa4>
 8004452:	3601      	adds	r6, #1
 8004454:	e7d9      	b.n	800440a <_printf_common+0x8e>
	...

08004458 <_printf_i>:
 8004458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800445c:	460c      	mov	r4, r1
 800445e:	4691      	mov	r9, r2
 8004460:	7e27      	ldrb	r7, [r4, #24]
 8004462:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004464:	2f78      	cmp	r7, #120	; 0x78
 8004466:	4680      	mov	r8, r0
 8004468:	469a      	mov	sl, r3
 800446a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800446e:	d807      	bhi.n	8004480 <_printf_i+0x28>
 8004470:	2f62      	cmp	r7, #98	; 0x62
 8004472:	d80a      	bhi.n	800448a <_printf_i+0x32>
 8004474:	2f00      	cmp	r7, #0
 8004476:	f000 80d8 	beq.w	800462a <_printf_i+0x1d2>
 800447a:	2f58      	cmp	r7, #88	; 0x58
 800447c:	f000 80a3 	beq.w	80045c6 <_printf_i+0x16e>
 8004480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004488:	e03a      	b.n	8004500 <_printf_i+0xa8>
 800448a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800448e:	2b15      	cmp	r3, #21
 8004490:	d8f6      	bhi.n	8004480 <_printf_i+0x28>
 8004492:	a001      	add	r0, pc, #4	; (adr r0, 8004498 <_printf_i+0x40>)
 8004494:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004498:	080044f1 	.word	0x080044f1
 800449c:	08004505 	.word	0x08004505
 80044a0:	08004481 	.word	0x08004481
 80044a4:	08004481 	.word	0x08004481
 80044a8:	08004481 	.word	0x08004481
 80044ac:	08004481 	.word	0x08004481
 80044b0:	08004505 	.word	0x08004505
 80044b4:	08004481 	.word	0x08004481
 80044b8:	08004481 	.word	0x08004481
 80044bc:	08004481 	.word	0x08004481
 80044c0:	08004481 	.word	0x08004481
 80044c4:	08004611 	.word	0x08004611
 80044c8:	08004535 	.word	0x08004535
 80044cc:	080045f3 	.word	0x080045f3
 80044d0:	08004481 	.word	0x08004481
 80044d4:	08004481 	.word	0x08004481
 80044d8:	08004633 	.word	0x08004633
 80044dc:	08004481 	.word	0x08004481
 80044e0:	08004535 	.word	0x08004535
 80044e4:	08004481 	.word	0x08004481
 80044e8:	08004481 	.word	0x08004481
 80044ec:	080045fb 	.word	0x080045fb
 80044f0:	680b      	ldr	r3, [r1, #0]
 80044f2:	1d1a      	adds	r2, r3, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	600a      	str	r2, [r1, #0]
 80044f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004500:	2301      	movs	r3, #1
 8004502:	e0a3      	b.n	800464c <_printf_i+0x1f4>
 8004504:	6825      	ldr	r5, [r4, #0]
 8004506:	6808      	ldr	r0, [r1, #0]
 8004508:	062e      	lsls	r6, r5, #24
 800450a:	f100 0304 	add.w	r3, r0, #4
 800450e:	d50a      	bpl.n	8004526 <_printf_i+0xce>
 8004510:	6805      	ldr	r5, [r0, #0]
 8004512:	600b      	str	r3, [r1, #0]
 8004514:	2d00      	cmp	r5, #0
 8004516:	da03      	bge.n	8004520 <_printf_i+0xc8>
 8004518:	232d      	movs	r3, #45	; 0x2d
 800451a:	426d      	negs	r5, r5
 800451c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004520:	485e      	ldr	r0, [pc, #376]	; (800469c <_printf_i+0x244>)
 8004522:	230a      	movs	r3, #10
 8004524:	e019      	b.n	800455a <_printf_i+0x102>
 8004526:	f015 0f40 	tst.w	r5, #64	; 0x40
 800452a:	6805      	ldr	r5, [r0, #0]
 800452c:	600b      	str	r3, [r1, #0]
 800452e:	bf18      	it	ne
 8004530:	b22d      	sxthne	r5, r5
 8004532:	e7ef      	b.n	8004514 <_printf_i+0xbc>
 8004534:	680b      	ldr	r3, [r1, #0]
 8004536:	6825      	ldr	r5, [r4, #0]
 8004538:	1d18      	adds	r0, r3, #4
 800453a:	6008      	str	r0, [r1, #0]
 800453c:	0628      	lsls	r0, r5, #24
 800453e:	d501      	bpl.n	8004544 <_printf_i+0xec>
 8004540:	681d      	ldr	r5, [r3, #0]
 8004542:	e002      	b.n	800454a <_printf_i+0xf2>
 8004544:	0669      	lsls	r1, r5, #25
 8004546:	d5fb      	bpl.n	8004540 <_printf_i+0xe8>
 8004548:	881d      	ldrh	r5, [r3, #0]
 800454a:	4854      	ldr	r0, [pc, #336]	; (800469c <_printf_i+0x244>)
 800454c:	2f6f      	cmp	r7, #111	; 0x6f
 800454e:	bf0c      	ite	eq
 8004550:	2308      	moveq	r3, #8
 8004552:	230a      	movne	r3, #10
 8004554:	2100      	movs	r1, #0
 8004556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800455a:	6866      	ldr	r6, [r4, #4]
 800455c:	60a6      	str	r6, [r4, #8]
 800455e:	2e00      	cmp	r6, #0
 8004560:	bfa2      	ittt	ge
 8004562:	6821      	ldrge	r1, [r4, #0]
 8004564:	f021 0104 	bicge.w	r1, r1, #4
 8004568:	6021      	strge	r1, [r4, #0]
 800456a:	b90d      	cbnz	r5, 8004570 <_printf_i+0x118>
 800456c:	2e00      	cmp	r6, #0
 800456e:	d04d      	beq.n	800460c <_printf_i+0x1b4>
 8004570:	4616      	mov	r6, r2
 8004572:	fbb5 f1f3 	udiv	r1, r5, r3
 8004576:	fb03 5711 	mls	r7, r3, r1, r5
 800457a:	5dc7      	ldrb	r7, [r0, r7]
 800457c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004580:	462f      	mov	r7, r5
 8004582:	42bb      	cmp	r3, r7
 8004584:	460d      	mov	r5, r1
 8004586:	d9f4      	bls.n	8004572 <_printf_i+0x11a>
 8004588:	2b08      	cmp	r3, #8
 800458a:	d10b      	bne.n	80045a4 <_printf_i+0x14c>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	07df      	lsls	r7, r3, #31
 8004590:	d508      	bpl.n	80045a4 <_printf_i+0x14c>
 8004592:	6923      	ldr	r3, [r4, #16]
 8004594:	6861      	ldr	r1, [r4, #4]
 8004596:	4299      	cmp	r1, r3
 8004598:	bfde      	ittt	le
 800459a:	2330      	movle	r3, #48	; 0x30
 800459c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045a0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80045a4:	1b92      	subs	r2, r2, r6
 80045a6:	6122      	str	r2, [r4, #16]
 80045a8:	f8cd a000 	str.w	sl, [sp]
 80045ac:	464b      	mov	r3, r9
 80045ae:	aa03      	add	r2, sp, #12
 80045b0:	4621      	mov	r1, r4
 80045b2:	4640      	mov	r0, r8
 80045b4:	f7ff fee2 	bl	800437c <_printf_common>
 80045b8:	3001      	adds	r0, #1
 80045ba:	d14c      	bne.n	8004656 <_printf_i+0x1fe>
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045c0:	b004      	add	sp, #16
 80045c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c6:	4835      	ldr	r0, [pc, #212]	; (800469c <_printf_i+0x244>)
 80045c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	680e      	ldr	r6, [r1, #0]
 80045d0:	061f      	lsls	r7, r3, #24
 80045d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80045d6:	600e      	str	r6, [r1, #0]
 80045d8:	d514      	bpl.n	8004604 <_printf_i+0x1ac>
 80045da:	07d9      	lsls	r1, r3, #31
 80045dc:	bf44      	itt	mi
 80045de:	f043 0320 	orrmi.w	r3, r3, #32
 80045e2:	6023      	strmi	r3, [r4, #0]
 80045e4:	b91d      	cbnz	r5, 80045ee <_printf_i+0x196>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	f023 0320 	bic.w	r3, r3, #32
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	2310      	movs	r3, #16
 80045f0:	e7b0      	b.n	8004554 <_printf_i+0xfc>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	f043 0320 	orr.w	r3, r3, #32
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	2378      	movs	r3, #120	; 0x78
 80045fc:	4828      	ldr	r0, [pc, #160]	; (80046a0 <_printf_i+0x248>)
 80045fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004602:	e7e3      	b.n	80045cc <_printf_i+0x174>
 8004604:	065e      	lsls	r6, r3, #25
 8004606:	bf48      	it	mi
 8004608:	b2ad      	uxthmi	r5, r5
 800460a:	e7e6      	b.n	80045da <_printf_i+0x182>
 800460c:	4616      	mov	r6, r2
 800460e:	e7bb      	b.n	8004588 <_printf_i+0x130>
 8004610:	680b      	ldr	r3, [r1, #0]
 8004612:	6826      	ldr	r6, [r4, #0]
 8004614:	6960      	ldr	r0, [r4, #20]
 8004616:	1d1d      	adds	r5, r3, #4
 8004618:	600d      	str	r5, [r1, #0]
 800461a:	0635      	lsls	r5, r6, #24
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	d501      	bpl.n	8004624 <_printf_i+0x1cc>
 8004620:	6018      	str	r0, [r3, #0]
 8004622:	e002      	b.n	800462a <_printf_i+0x1d2>
 8004624:	0671      	lsls	r1, r6, #25
 8004626:	d5fb      	bpl.n	8004620 <_printf_i+0x1c8>
 8004628:	8018      	strh	r0, [r3, #0]
 800462a:	2300      	movs	r3, #0
 800462c:	6123      	str	r3, [r4, #16]
 800462e:	4616      	mov	r6, r2
 8004630:	e7ba      	b.n	80045a8 <_printf_i+0x150>
 8004632:	680b      	ldr	r3, [r1, #0]
 8004634:	1d1a      	adds	r2, r3, #4
 8004636:	600a      	str	r2, [r1, #0]
 8004638:	681e      	ldr	r6, [r3, #0]
 800463a:	6862      	ldr	r2, [r4, #4]
 800463c:	2100      	movs	r1, #0
 800463e:	4630      	mov	r0, r6
 8004640:	f7fb fe2e 	bl	80002a0 <memchr>
 8004644:	b108      	cbz	r0, 800464a <_printf_i+0x1f2>
 8004646:	1b80      	subs	r0, r0, r6
 8004648:	6060      	str	r0, [r4, #4]
 800464a:	6863      	ldr	r3, [r4, #4]
 800464c:	6123      	str	r3, [r4, #16]
 800464e:	2300      	movs	r3, #0
 8004650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004654:	e7a8      	b.n	80045a8 <_printf_i+0x150>
 8004656:	6923      	ldr	r3, [r4, #16]
 8004658:	4632      	mov	r2, r6
 800465a:	4649      	mov	r1, r9
 800465c:	4640      	mov	r0, r8
 800465e:	47d0      	blx	sl
 8004660:	3001      	adds	r0, #1
 8004662:	d0ab      	beq.n	80045bc <_printf_i+0x164>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	079b      	lsls	r3, r3, #30
 8004668:	d413      	bmi.n	8004692 <_printf_i+0x23a>
 800466a:	68e0      	ldr	r0, [r4, #12]
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	4298      	cmp	r0, r3
 8004670:	bfb8      	it	lt
 8004672:	4618      	movlt	r0, r3
 8004674:	e7a4      	b.n	80045c0 <_printf_i+0x168>
 8004676:	2301      	movs	r3, #1
 8004678:	4632      	mov	r2, r6
 800467a:	4649      	mov	r1, r9
 800467c:	4640      	mov	r0, r8
 800467e:	47d0      	blx	sl
 8004680:	3001      	adds	r0, #1
 8004682:	d09b      	beq.n	80045bc <_printf_i+0x164>
 8004684:	3501      	adds	r5, #1
 8004686:	68e3      	ldr	r3, [r4, #12]
 8004688:	9903      	ldr	r1, [sp, #12]
 800468a:	1a5b      	subs	r3, r3, r1
 800468c:	42ab      	cmp	r3, r5
 800468e:	dcf2      	bgt.n	8004676 <_printf_i+0x21e>
 8004690:	e7eb      	b.n	800466a <_printf_i+0x212>
 8004692:	2500      	movs	r5, #0
 8004694:	f104 0619 	add.w	r6, r4, #25
 8004698:	e7f5      	b.n	8004686 <_printf_i+0x22e>
 800469a:	bf00      	nop
 800469c:	08006ebe 	.word	0x08006ebe
 80046a0:	08006ecf 	.word	0x08006ecf

080046a4 <siprintf>:
 80046a4:	b40e      	push	{r1, r2, r3}
 80046a6:	b500      	push	{lr}
 80046a8:	b09c      	sub	sp, #112	; 0x70
 80046aa:	ab1d      	add	r3, sp, #116	; 0x74
 80046ac:	9002      	str	r0, [sp, #8]
 80046ae:	9006      	str	r0, [sp, #24]
 80046b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046b4:	4809      	ldr	r0, [pc, #36]	; (80046dc <siprintf+0x38>)
 80046b6:	9107      	str	r1, [sp, #28]
 80046b8:	9104      	str	r1, [sp, #16]
 80046ba:	4909      	ldr	r1, [pc, #36]	; (80046e0 <siprintf+0x3c>)
 80046bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80046c0:	9105      	str	r1, [sp, #20]
 80046c2:	6800      	ldr	r0, [r0, #0]
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	a902      	add	r1, sp, #8
 80046c8:	f001 fb24 	bl	8005d14 <_svfiprintf_r>
 80046cc:	9b02      	ldr	r3, [sp, #8]
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	b01c      	add	sp, #112	; 0x70
 80046d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046d8:	b003      	add	sp, #12
 80046da:	4770      	bx	lr
 80046dc:	20000014 	.word	0x20000014
 80046e0:	ffff0208 	.word	0xffff0208

080046e4 <quorem>:
 80046e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e8:	6903      	ldr	r3, [r0, #16]
 80046ea:	690c      	ldr	r4, [r1, #16]
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	4607      	mov	r7, r0
 80046f0:	f2c0 8081 	blt.w	80047f6 <quorem+0x112>
 80046f4:	3c01      	subs	r4, #1
 80046f6:	f101 0814 	add.w	r8, r1, #20
 80046fa:	f100 0514 	add.w	r5, r0, #20
 80046fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800470c:	3301      	adds	r3, #1
 800470e:	429a      	cmp	r2, r3
 8004710:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004714:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004718:	fbb2 f6f3 	udiv	r6, r2, r3
 800471c:	d331      	bcc.n	8004782 <quorem+0x9e>
 800471e:	f04f 0e00 	mov.w	lr, #0
 8004722:	4640      	mov	r0, r8
 8004724:	46ac      	mov	ip, r5
 8004726:	46f2      	mov	sl, lr
 8004728:	f850 2b04 	ldr.w	r2, [r0], #4
 800472c:	b293      	uxth	r3, r2
 800472e:	fb06 e303 	mla	r3, r6, r3, lr
 8004732:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004736:	b29b      	uxth	r3, r3
 8004738:	ebaa 0303 	sub.w	r3, sl, r3
 800473c:	0c12      	lsrs	r2, r2, #16
 800473e:	f8dc a000 	ldr.w	sl, [ip]
 8004742:	fb06 e202 	mla	r2, r6, r2, lr
 8004746:	fa13 f38a 	uxtah	r3, r3, sl
 800474a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800474e:	fa1f fa82 	uxth.w	sl, r2
 8004752:	f8dc 2000 	ldr.w	r2, [ip]
 8004756:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800475a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800475e:	b29b      	uxth	r3, r3
 8004760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004764:	4581      	cmp	r9, r0
 8004766:	f84c 3b04 	str.w	r3, [ip], #4
 800476a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800476e:	d2db      	bcs.n	8004728 <quorem+0x44>
 8004770:	f855 300b 	ldr.w	r3, [r5, fp]
 8004774:	b92b      	cbnz	r3, 8004782 <quorem+0x9e>
 8004776:	9b01      	ldr	r3, [sp, #4]
 8004778:	3b04      	subs	r3, #4
 800477a:	429d      	cmp	r5, r3
 800477c:	461a      	mov	r2, r3
 800477e:	d32e      	bcc.n	80047de <quorem+0xfa>
 8004780:	613c      	str	r4, [r7, #16]
 8004782:	4638      	mov	r0, r7
 8004784:	f001 f8b2 	bl	80058ec <__mcmp>
 8004788:	2800      	cmp	r0, #0
 800478a:	db24      	blt.n	80047d6 <quorem+0xf2>
 800478c:	3601      	adds	r6, #1
 800478e:	4628      	mov	r0, r5
 8004790:	f04f 0c00 	mov.w	ip, #0
 8004794:	f858 2b04 	ldr.w	r2, [r8], #4
 8004798:	f8d0 e000 	ldr.w	lr, [r0]
 800479c:	b293      	uxth	r3, r2
 800479e:	ebac 0303 	sub.w	r3, ip, r3
 80047a2:	0c12      	lsrs	r2, r2, #16
 80047a4:	fa13 f38e 	uxtah	r3, r3, lr
 80047a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047b6:	45c1      	cmp	r9, r8
 80047b8:	f840 3b04 	str.w	r3, [r0], #4
 80047bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047c0:	d2e8      	bcs.n	8004794 <quorem+0xb0>
 80047c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047ca:	b922      	cbnz	r2, 80047d6 <quorem+0xf2>
 80047cc:	3b04      	subs	r3, #4
 80047ce:	429d      	cmp	r5, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	d30a      	bcc.n	80047ea <quorem+0x106>
 80047d4:	613c      	str	r4, [r7, #16]
 80047d6:	4630      	mov	r0, r6
 80047d8:	b003      	add	sp, #12
 80047da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	3b04      	subs	r3, #4
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	d1cc      	bne.n	8004780 <quorem+0x9c>
 80047e6:	3c01      	subs	r4, #1
 80047e8:	e7c7      	b.n	800477a <quorem+0x96>
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	3b04      	subs	r3, #4
 80047ee:	2a00      	cmp	r2, #0
 80047f0:	d1f0      	bne.n	80047d4 <quorem+0xf0>
 80047f2:	3c01      	subs	r4, #1
 80047f4:	e7eb      	b.n	80047ce <quorem+0xea>
 80047f6:	2000      	movs	r0, #0
 80047f8:	e7ee      	b.n	80047d8 <quorem+0xf4>
 80047fa:	0000      	movs	r0, r0
 80047fc:	0000      	movs	r0, r0
	...

08004800 <_dtoa_r>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	ed2d 8b02 	vpush	{d8}
 8004808:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800480a:	b095      	sub	sp, #84	; 0x54
 800480c:	4616      	mov	r6, r2
 800480e:	461f      	mov	r7, r3
 8004810:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004814:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8004818:	4604      	mov	r4, r0
 800481a:	b975      	cbnz	r5, 800483a <_dtoa_r+0x3a>
 800481c:	2010      	movs	r0, #16
 800481e:	f000 fddf 	bl	80053e0 <malloc>
 8004822:	4602      	mov	r2, r0
 8004824:	6260      	str	r0, [r4, #36]	; 0x24
 8004826:	b920      	cbnz	r0, 8004832 <_dtoa_r+0x32>
 8004828:	4bb1      	ldr	r3, [pc, #708]	; (8004af0 <_dtoa_r+0x2f0>)
 800482a:	21ea      	movs	r1, #234	; 0xea
 800482c:	48b1      	ldr	r0, [pc, #708]	; (8004af4 <_dtoa_r+0x2f4>)
 800482e:	f001 fb81 	bl	8005f34 <__assert_func>
 8004832:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004836:	6005      	str	r5, [r0, #0]
 8004838:	60c5      	str	r5, [r0, #12]
 800483a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	b151      	cbz	r1, 8004856 <_dtoa_r+0x56>
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	604a      	str	r2, [r1, #4]
 8004844:	2301      	movs	r3, #1
 8004846:	4093      	lsls	r3, r2
 8004848:	608b      	str	r3, [r1, #8]
 800484a:	4620      	mov	r0, r4
 800484c:	f000 fe10 	bl	8005470 <_Bfree>
 8004850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	1e3b      	subs	r3, r7, #0
 8004858:	bfb9      	ittee	lt
 800485a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800485e:	9305      	strlt	r3, [sp, #20]
 8004860:	2300      	movge	r3, #0
 8004862:	f8c8 3000 	strge.w	r3, [r8]
 8004866:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800486a:	4ba3      	ldr	r3, [pc, #652]	; (8004af8 <_dtoa_r+0x2f8>)
 800486c:	bfbc      	itt	lt
 800486e:	2201      	movlt	r2, #1
 8004870:	f8c8 2000 	strlt.w	r2, [r8]
 8004874:	ea33 0309 	bics.w	r3, r3, r9
 8004878:	d11b      	bne.n	80048b2 <_dtoa_r+0xb2>
 800487a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800487c:	f242 730f 	movw	r3, #9999	; 0x270f
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004886:	4333      	orrs	r3, r6
 8004888:	f000 857d 	beq.w	8005386 <_dtoa_r+0xb86>
 800488c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800488e:	b963      	cbnz	r3, 80048aa <_dtoa_r+0xaa>
 8004890:	4b9a      	ldr	r3, [pc, #616]	; (8004afc <_dtoa_r+0x2fc>)
 8004892:	e024      	b.n	80048de <_dtoa_r+0xde>
 8004894:	4b9a      	ldr	r3, [pc, #616]	; (8004b00 <_dtoa_r+0x300>)
 8004896:	9303      	str	r3, [sp, #12]
 8004898:	3308      	adds	r3, #8
 800489a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	9803      	ldr	r0, [sp, #12]
 80048a0:	b015      	add	sp, #84	; 0x54
 80048a2:	ecbd 8b02 	vpop	{d8}
 80048a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048aa:	4b94      	ldr	r3, [pc, #592]	; (8004afc <_dtoa_r+0x2fc>)
 80048ac:	9303      	str	r3, [sp, #12]
 80048ae:	3303      	adds	r3, #3
 80048b0:	e7f3      	b.n	800489a <_dtoa_r+0x9a>
 80048b2:	ed9d 7b04 	vldr	d7, [sp, #16]
 80048b6:	2200      	movs	r2, #0
 80048b8:	ec51 0b17 	vmov	r0, r1, d7
 80048bc:	2300      	movs	r3, #0
 80048be:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80048c2:	f7fc f961 	bl	8000b88 <__aeabi_dcmpeq>
 80048c6:	4680      	mov	r8, r0
 80048c8:	b158      	cbz	r0, 80048e2 <_dtoa_r+0xe2>
 80048ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80048cc:	2301      	movs	r3, #1
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8554 	beq.w	8005380 <_dtoa_r+0xb80>
 80048d8:	488a      	ldr	r0, [pc, #552]	; (8004b04 <_dtoa_r+0x304>)
 80048da:	6018      	str	r0, [r3, #0]
 80048dc:	1e43      	subs	r3, r0, #1
 80048de:	9303      	str	r3, [sp, #12]
 80048e0:	e7dd      	b.n	800489e <_dtoa_r+0x9e>
 80048e2:	ab12      	add	r3, sp, #72	; 0x48
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	ab13      	add	r3, sp, #76	; 0x4c
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	4620      	mov	r0, r4
 80048ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048f0:	f001 f8a0 	bl	8005a34 <__d2b>
 80048f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80048f8:	4683      	mov	fp, r0
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	d07c      	beq.n	80049f8 <_dtoa_r+0x1f8>
 80048fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004900:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004908:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800490c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004910:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004914:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004918:	4b7b      	ldr	r3, [pc, #492]	; (8004b08 <_dtoa_r+0x308>)
 800491a:	2200      	movs	r2, #0
 800491c:	4630      	mov	r0, r6
 800491e:	4639      	mov	r1, r7
 8004920:	f7fb fd12 	bl	8000348 <__aeabi_dsub>
 8004924:	a36c      	add	r3, pc, #432	; (adr r3, 8004ad8 <_dtoa_r+0x2d8>)
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	f7fb fec5 	bl	80006b8 <__aeabi_dmul>
 800492e:	a36c      	add	r3, pc, #432	; (adr r3, 8004ae0 <_dtoa_r+0x2e0>)
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f7fb fd0a 	bl	800034c <__adddf3>
 8004938:	4606      	mov	r6, r0
 800493a:	4628      	mov	r0, r5
 800493c:	460f      	mov	r7, r1
 800493e:	f7fb fe51 	bl	80005e4 <__aeabi_i2d>
 8004942:	a369      	add	r3, pc, #420	; (adr r3, 8004ae8 <_dtoa_r+0x2e8>)
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f7fb feb6 	bl	80006b8 <__aeabi_dmul>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4630      	mov	r0, r6
 8004952:	4639      	mov	r1, r7
 8004954:	f7fb fcfa 	bl	800034c <__adddf3>
 8004958:	4606      	mov	r6, r0
 800495a:	460f      	mov	r7, r1
 800495c:	f7fc f95c 	bl	8000c18 <__aeabi_d2iz>
 8004960:	2200      	movs	r2, #0
 8004962:	4682      	mov	sl, r0
 8004964:	2300      	movs	r3, #0
 8004966:	4630      	mov	r0, r6
 8004968:	4639      	mov	r1, r7
 800496a:	f7fc f917 	bl	8000b9c <__aeabi_dcmplt>
 800496e:	b148      	cbz	r0, 8004984 <_dtoa_r+0x184>
 8004970:	4650      	mov	r0, sl
 8004972:	f7fb fe37 	bl	80005e4 <__aeabi_i2d>
 8004976:	4632      	mov	r2, r6
 8004978:	463b      	mov	r3, r7
 800497a:	f7fc f905 	bl	8000b88 <__aeabi_dcmpeq>
 800497e:	b908      	cbnz	r0, 8004984 <_dtoa_r+0x184>
 8004980:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004984:	f1ba 0f16 	cmp.w	sl, #22
 8004988:	d854      	bhi.n	8004a34 <_dtoa_r+0x234>
 800498a:	4b60      	ldr	r3, [pc, #384]	; (8004b0c <_dtoa_r+0x30c>)
 800498c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004998:	f7fc f900 	bl	8000b9c <__aeabi_dcmplt>
 800499c:	2800      	cmp	r0, #0
 800499e:	d04b      	beq.n	8004a38 <_dtoa_r+0x238>
 80049a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80049a4:	2300      	movs	r3, #0
 80049a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80049a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049aa:	1b5d      	subs	r5, r3, r5
 80049ac:	1e6b      	subs	r3, r5, #1
 80049ae:	9307      	str	r3, [sp, #28]
 80049b0:	bf43      	ittte	mi
 80049b2:	2300      	movmi	r3, #0
 80049b4:	f1c5 0801 	rsbmi	r8, r5, #1
 80049b8:	9307      	strmi	r3, [sp, #28]
 80049ba:	f04f 0800 	movpl.w	r8, #0
 80049be:	f1ba 0f00 	cmp.w	sl, #0
 80049c2:	db3b      	blt.n	8004a3c <_dtoa_r+0x23c>
 80049c4:	9b07      	ldr	r3, [sp, #28]
 80049c6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80049ca:	4453      	add	r3, sl
 80049cc:	9307      	str	r3, [sp, #28]
 80049ce:	2300      	movs	r3, #0
 80049d0:	9308      	str	r3, [sp, #32]
 80049d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049d4:	2b09      	cmp	r3, #9
 80049d6:	d869      	bhi.n	8004aac <_dtoa_r+0x2ac>
 80049d8:	2b05      	cmp	r3, #5
 80049da:	bfc4      	itt	gt
 80049dc:	3b04      	subgt	r3, #4
 80049de:	9320      	strgt	r3, [sp, #128]	; 0x80
 80049e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049e2:	f1a3 0302 	sub.w	r3, r3, #2
 80049e6:	bfcc      	ite	gt
 80049e8:	2500      	movgt	r5, #0
 80049ea:	2501      	movle	r5, #1
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d869      	bhi.n	8004ac4 <_dtoa_r+0x2c4>
 80049f0:	e8df f003 	tbb	[pc, r3]
 80049f4:	5a4c4e2c 	.word	0x5a4c4e2c
 80049f8:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80049fc:	441d      	add	r5, r3
 80049fe:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	bfc1      	itttt	gt
 8004a06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a0a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004a0e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004a12:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a16:	bfda      	itte	le
 8004a18:	f1c3 0320 	rsble	r3, r3, #32
 8004a1c:	fa06 f003 	lslle.w	r0, r6, r3
 8004a20:	4318      	orrgt	r0, r3
 8004a22:	f7fb fdcf 	bl	80005c4 <__aeabi_ui2d>
 8004a26:	2301      	movs	r3, #1
 8004a28:	4606      	mov	r6, r0
 8004a2a:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004a2e:	3d01      	subs	r5, #1
 8004a30:	9310      	str	r3, [sp, #64]	; 0x40
 8004a32:	e771      	b.n	8004918 <_dtoa_r+0x118>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e7b6      	b.n	80049a6 <_dtoa_r+0x1a6>
 8004a38:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a3a:	e7b5      	b.n	80049a8 <_dtoa_r+0x1a8>
 8004a3c:	f1ca 0300 	rsb	r3, sl, #0
 8004a40:	9308      	str	r3, [sp, #32]
 8004a42:	2300      	movs	r3, #0
 8004a44:	eba8 080a 	sub.w	r8, r8, sl
 8004a48:	930e      	str	r3, [sp, #56]	; 0x38
 8004a4a:	e7c2      	b.n	80049d2 <_dtoa_r+0x1d2>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8004a50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	dc39      	bgt.n	8004aca <_dtoa_r+0x2ca>
 8004a56:	f04f 0901 	mov.w	r9, #1
 8004a5a:	f8cd 9018 	str.w	r9, [sp, #24]
 8004a5e:	464b      	mov	r3, r9
 8004a60:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 8004a64:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004a66:	2200      	movs	r2, #0
 8004a68:	6042      	str	r2, [r0, #4]
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	f102 0614 	add.w	r6, r2, #20
 8004a70:	429e      	cmp	r6, r3
 8004a72:	6841      	ldr	r1, [r0, #4]
 8004a74:	d94e      	bls.n	8004b14 <_dtoa_r+0x314>
 8004a76:	4620      	mov	r0, r4
 8004a78:	f000 fcba 	bl	80053f0 <_Balloc>
 8004a7c:	9003      	str	r0, [sp, #12]
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d14c      	bne.n	8004b1c <_dtoa_r+0x31c>
 8004a82:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <_dtoa_r+0x310>)
 8004a84:	4602      	mov	r2, r0
 8004a86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a8a:	e6cf      	b.n	800482c <_dtoa_r+0x2c>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e7de      	b.n	8004a4e <_dtoa_r+0x24e>
 8004a90:	2300      	movs	r3, #0
 8004a92:	930c      	str	r3, [sp, #48]	; 0x30
 8004a94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a96:	eb0a 0903 	add.w	r9, sl, r3
 8004a9a:	f109 0301 	add.w	r3, r9, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	9306      	str	r3, [sp, #24]
 8004aa2:	bfb8      	it	lt
 8004aa4:	2301      	movlt	r3, #1
 8004aa6:	e7dd      	b.n	8004a64 <_dtoa_r+0x264>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e7f2      	b.n	8004a92 <_dtoa_r+0x292>
 8004aac:	2501      	movs	r5, #1
 8004aae:	2300      	movs	r3, #0
 8004ab0:	9320      	str	r3, [sp, #128]	; 0x80
 8004ab2:	950c      	str	r5, [sp, #48]	; 0x30
 8004ab4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8cd 9018 	str.w	r9, [sp, #24]
 8004abe:	2312      	movs	r3, #18
 8004ac0:	9221      	str	r2, [sp, #132]	; 0x84
 8004ac2:	e7cf      	b.n	8004a64 <_dtoa_r+0x264>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ac8:	e7f4      	b.n	8004ab4 <_dtoa_r+0x2b4>
 8004aca:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8004ace:	f8cd 9018 	str.w	r9, [sp, #24]
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	e7c6      	b.n	8004a64 <_dtoa_r+0x264>
 8004ad6:	bf00      	nop
 8004ad8:	636f4361 	.word	0x636f4361
 8004adc:	3fd287a7 	.word	0x3fd287a7
 8004ae0:	8b60c8b3 	.word	0x8b60c8b3
 8004ae4:	3fc68a28 	.word	0x3fc68a28
 8004ae8:	509f79fb 	.word	0x509f79fb
 8004aec:	3fd34413 	.word	0x3fd34413
 8004af0:	08006eed 	.word	0x08006eed
 8004af4:	08006f04 	.word	0x08006f04
 8004af8:	7ff00000 	.word	0x7ff00000
 8004afc:	08006ee9 	.word	0x08006ee9
 8004b00:	08006ee0 	.word	0x08006ee0
 8004b04:	08006ebd 	.word	0x08006ebd
 8004b08:	3ff80000 	.word	0x3ff80000
 8004b0c:	08007000 	.word	0x08007000
 8004b10:	08006f63 	.word	0x08006f63
 8004b14:	3101      	adds	r1, #1
 8004b16:	6041      	str	r1, [r0, #4]
 8004b18:	0052      	lsls	r2, r2, #1
 8004b1a:	e7a7      	b.n	8004a6c <_dtoa_r+0x26c>
 8004b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b1e:	9a03      	ldr	r2, [sp, #12]
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	9b06      	ldr	r3, [sp, #24]
 8004b24:	2b0e      	cmp	r3, #14
 8004b26:	f200 80ad 	bhi.w	8004c84 <_dtoa_r+0x484>
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	f000 80aa 	beq.w	8004c84 <_dtoa_r+0x484>
 8004b30:	f1ba 0f00 	cmp.w	sl, #0
 8004b34:	dd36      	ble.n	8004ba4 <_dtoa_r+0x3a4>
 8004b36:	4ac3      	ldr	r2, [pc, #780]	; (8004e44 <_dtoa_r+0x644>)
 8004b38:	f00a 030f 	and.w	r3, sl, #15
 8004b3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b40:	ed93 7b00 	vldr	d7, [r3]
 8004b44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004b48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004b4c:	eeb0 8a47 	vmov.f32	s16, s14
 8004b50:	eef0 8a67 	vmov.f32	s17, s15
 8004b54:	d016      	beq.n	8004b84 <_dtoa_r+0x384>
 8004b56:	4bbc      	ldr	r3, [pc, #752]	; (8004e48 <_dtoa_r+0x648>)
 8004b58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b60:	f7fb fed4 	bl	800090c <__aeabi_ddiv>
 8004b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b68:	f007 070f 	and.w	r7, r7, #15
 8004b6c:	2503      	movs	r5, #3
 8004b6e:	4eb6      	ldr	r6, [pc, #728]	; (8004e48 <_dtoa_r+0x648>)
 8004b70:	b957      	cbnz	r7, 8004b88 <_dtoa_r+0x388>
 8004b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b76:	ec53 2b18 	vmov	r2, r3, d8
 8004b7a:	f7fb fec7 	bl	800090c <__aeabi_ddiv>
 8004b7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b82:	e029      	b.n	8004bd8 <_dtoa_r+0x3d8>
 8004b84:	2502      	movs	r5, #2
 8004b86:	e7f2      	b.n	8004b6e <_dtoa_r+0x36e>
 8004b88:	07f9      	lsls	r1, r7, #31
 8004b8a:	d508      	bpl.n	8004b9e <_dtoa_r+0x39e>
 8004b8c:	ec51 0b18 	vmov	r0, r1, d8
 8004b90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b94:	f7fb fd90 	bl	80006b8 <__aeabi_dmul>
 8004b98:	ec41 0b18 	vmov	d8, r0, r1
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	107f      	asrs	r7, r7, #1
 8004ba0:	3608      	adds	r6, #8
 8004ba2:	e7e5      	b.n	8004b70 <_dtoa_r+0x370>
 8004ba4:	f000 80a6 	beq.w	8004cf4 <_dtoa_r+0x4f4>
 8004ba8:	f1ca 0600 	rsb	r6, sl, #0
 8004bac:	4ba5      	ldr	r3, [pc, #660]	; (8004e44 <_dtoa_r+0x644>)
 8004bae:	4fa6      	ldr	r7, [pc, #664]	; (8004e48 <_dtoa_r+0x648>)
 8004bb0:	f006 020f 	and.w	r2, r6, #15
 8004bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bc0:	f7fb fd7a 	bl	80006b8 <__aeabi_dmul>
 8004bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bc8:	1136      	asrs	r6, r6, #4
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2502      	movs	r5, #2
 8004bce:	2e00      	cmp	r6, #0
 8004bd0:	f040 8085 	bne.w	8004cde <_dtoa_r+0x4de>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1d2      	bne.n	8004b7e <_dtoa_r+0x37e>
 8004bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 808c 	beq.w	8004cf8 <_dtoa_r+0x4f8>
 8004be0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8004be4:	4b99      	ldr	r3, [pc, #612]	; (8004e4c <_dtoa_r+0x64c>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	4630      	mov	r0, r6
 8004bea:	4639      	mov	r1, r7
 8004bec:	f7fb ffd6 	bl	8000b9c <__aeabi_dcmplt>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	f000 8081 	beq.w	8004cf8 <_dtoa_r+0x4f8>
 8004bf6:	9b06      	ldr	r3, [sp, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d07d      	beq.n	8004cf8 <_dtoa_r+0x4f8>
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	dd3c      	ble.n	8004c7c <_dtoa_r+0x47c>
 8004c02:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004c06:	9309      	str	r3, [sp, #36]	; 0x24
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4b91      	ldr	r3, [pc, #580]	; (8004e50 <_dtoa_r+0x650>)
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	4639      	mov	r1, r7
 8004c10:	f7fb fd52 	bl	80006b8 <__aeabi_dmul>
 8004c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c18:	3501      	adds	r5, #1
 8004c1a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8004c1e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8004c22:	4628      	mov	r0, r5
 8004c24:	f7fb fcde 	bl	80005e4 <__aeabi_i2d>
 8004c28:	4632      	mov	r2, r6
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	f7fb fd44 	bl	80006b8 <__aeabi_dmul>
 8004c30:	4b88      	ldr	r3, [pc, #544]	; (8004e54 <_dtoa_r+0x654>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	f7fb fb8a 	bl	800034c <__adddf3>
 8004c38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004c3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c40:	9305      	str	r3, [sp, #20]
 8004c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d15c      	bne.n	8004d02 <_dtoa_r+0x502>
 8004c48:	4b83      	ldr	r3, [pc, #524]	; (8004e58 <_dtoa_r+0x658>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	4639      	mov	r1, r7
 8004c50:	f7fb fb7a 	bl	8000348 <__aeabi_dsub>
 8004c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c58:	4606      	mov	r6, r0
 8004c5a:	460f      	mov	r7, r1
 8004c5c:	f7fb ffbc 	bl	8000bd8 <__aeabi_dcmpgt>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	f040 8296 	bne.w	8005192 <_dtoa_r+0x992>
 8004c66:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c70:	4639      	mov	r1, r7
 8004c72:	f7fb ff93 	bl	8000b9c <__aeabi_dcmplt>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f040 8288 	bne.w	800518c <_dtoa_r+0x98c>
 8004c7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f2c0 8158 	blt.w	8004f3c <_dtoa_r+0x73c>
 8004c8c:	f1ba 0f0e 	cmp.w	sl, #14
 8004c90:	f300 8154 	bgt.w	8004f3c <_dtoa_r+0x73c>
 8004c94:	4b6b      	ldr	r3, [pc, #428]	; (8004e44 <_dtoa_r+0x644>)
 8004c96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f280 80e3 	bge.w	8004e6c <_dtoa_r+0x66c>
 8004ca6:	9b06      	ldr	r3, [sp, #24]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f300 80df 	bgt.w	8004e6c <_dtoa_r+0x66c>
 8004cae:	f040 826d 	bne.w	800518c <_dtoa_r+0x98c>
 8004cb2:	4b69      	ldr	r3, [pc, #420]	; (8004e58 <_dtoa_r+0x658>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	4649      	mov	r1, r9
 8004cba:	f7fb fcfd 	bl	80006b8 <__aeabi_dmul>
 8004cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cc2:	f7fb ff7f 	bl	8000bc4 <__aeabi_dcmpge>
 8004cc6:	9e06      	ldr	r6, [sp, #24]
 8004cc8:	4637      	mov	r7, r6
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f040 8243 	bne.w	8005156 <_dtoa_r+0x956>
 8004cd0:	9d03      	ldr	r5, [sp, #12]
 8004cd2:	2331      	movs	r3, #49	; 0x31
 8004cd4:	f805 3b01 	strb.w	r3, [r5], #1
 8004cd8:	f10a 0a01 	add.w	sl, sl, #1
 8004cdc:	e23f      	b.n	800515e <_dtoa_r+0x95e>
 8004cde:	07f2      	lsls	r2, r6, #31
 8004ce0:	d505      	bpl.n	8004cee <_dtoa_r+0x4ee>
 8004ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce6:	f7fb fce7 	bl	80006b8 <__aeabi_dmul>
 8004cea:	3501      	adds	r5, #1
 8004cec:	2301      	movs	r3, #1
 8004cee:	1076      	asrs	r6, r6, #1
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	e76c      	b.n	8004bce <_dtoa_r+0x3ce>
 8004cf4:	2502      	movs	r5, #2
 8004cf6:	e76f      	b.n	8004bd8 <_dtoa_r+0x3d8>
 8004cf8:	9b06      	ldr	r3, [sp, #24]
 8004cfa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004cfe:	930d      	str	r3, [sp, #52]	; 0x34
 8004d00:	e78d      	b.n	8004c1e <_dtoa_r+0x41e>
 8004d02:	9903      	ldr	r1, [sp, #12]
 8004d04:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d08:	4b4e      	ldr	r3, [pc, #312]	; (8004e44 <_dtoa_r+0x644>)
 8004d0a:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004d0e:	4401      	add	r1, r0
 8004d10:	9104      	str	r1, [sp, #16]
 8004d12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d14:	eeb0 8a47 	vmov.f32	s16, s14
 8004d18:	eef0 8a67 	vmov.f32	s17, s15
 8004d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d24:	2900      	cmp	r1, #0
 8004d26:	d045      	beq.n	8004db4 <_dtoa_r+0x5b4>
 8004d28:	494c      	ldr	r1, [pc, #304]	; (8004e5c <_dtoa_r+0x65c>)
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f7fb fdee 	bl	800090c <__aeabi_ddiv>
 8004d30:	ec53 2b18 	vmov	r2, r3, d8
 8004d34:	f7fb fb08 	bl	8000348 <__aeabi_dsub>
 8004d38:	9d03      	ldr	r5, [sp, #12]
 8004d3a:	ec41 0b18 	vmov	d8, r0, r1
 8004d3e:	4639      	mov	r1, r7
 8004d40:	4630      	mov	r0, r6
 8004d42:	f7fb ff69 	bl	8000c18 <__aeabi_d2iz>
 8004d46:	900d      	str	r0, [sp, #52]	; 0x34
 8004d48:	f7fb fc4c 	bl	80005e4 <__aeabi_i2d>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4630      	mov	r0, r6
 8004d52:	4639      	mov	r1, r7
 8004d54:	f7fb faf8 	bl	8000348 <__aeabi_dsub>
 8004d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d5a:	3330      	adds	r3, #48	; 0x30
 8004d5c:	f805 3b01 	strb.w	r3, [r5], #1
 8004d60:	ec53 2b18 	vmov	r2, r3, d8
 8004d64:	4606      	mov	r6, r0
 8004d66:	460f      	mov	r7, r1
 8004d68:	f7fb ff18 	bl	8000b9c <__aeabi_dcmplt>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d165      	bne.n	8004e3c <_dtoa_r+0x63c>
 8004d70:	4632      	mov	r2, r6
 8004d72:	463b      	mov	r3, r7
 8004d74:	4935      	ldr	r1, [pc, #212]	; (8004e4c <_dtoa_r+0x64c>)
 8004d76:	2000      	movs	r0, #0
 8004d78:	f7fb fae6 	bl	8000348 <__aeabi_dsub>
 8004d7c:	ec53 2b18 	vmov	r2, r3, d8
 8004d80:	f7fb ff0c 	bl	8000b9c <__aeabi_dcmplt>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	f040 80b9 	bne.w	8004efc <_dtoa_r+0x6fc>
 8004d8a:	9b04      	ldr	r3, [sp, #16]
 8004d8c:	429d      	cmp	r5, r3
 8004d8e:	f43f af75 	beq.w	8004c7c <_dtoa_r+0x47c>
 8004d92:	4b2f      	ldr	r3, [pc, #188]	; (8004e50 <_dtoa_r+0x650>)
 8004d94:	ec51 0b18 	vmov	r0, r1, d8
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f7fb fc8d 	bl	80006b8 <__aeabi_dmul>
 8004d9e:	4b2c      	ldr	r3, [pc, #176]	; (8004e50 <_dtoa_r+0x650>)
 8004da0:	ec41 0b18 	vmov	d8, r0, r1
 8004da4:	2200      	movs	r2, #0
 8004da6:	4630      	mov	r0, r6
 8004da8:	4639      	mov	r1, r7
 8004daa:	f7fb fc85 	bl	80006b8 <__aeabi_dmul>
 8004dae:	4606      	mov	r6, r0
 8004db0:	460f      	mov	r7, r1
 8004db2:	e7c4      	b.n	8004d3e <_dtoa_r+0x53e>
 8004db4:	ec51 0b17 	vmov	r0, r1, d7
 8004db8:	f7fb fc7e 	bl	80006b8 <__aeabi_dmul>
 8004dbc:	9b04      	ldr	r3, [sp, #16]
 8004dbe:	9d03      	ldr	r5, [sp, #12]
 8004dc0:	930d      	str	r3, [sp, #52]	; 0x34
 8004dc2:	ec41 0b18 	vmov	d8, r0, r1
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f7fb ff25 	bl	8000c18 <__aeabi_d2iz>
 8004dce:	9011      	str	r0, [sp, #68]	; 0x44
 8004dd0:	f7fb fc08 	bl	80005e4 <__aeabi_i2d>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4630      	mov	r0, r6
 8004dda:	4639      	mov	r1, r7
 8004ddc:	f7fb fab4 	bl	8000348 <__aeabi_dsub>
 8004de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004de2:	3330      	adds	r3, #48	; 0x30
 8004de4:	f805 3b01 	strb.w	r3, [r5], #1
 8004de8:	9b04      	ldr	r3, [sp, #16]
 8004dea:	429d      	cmp	r5, r3
 8004dec:	4606      	mov	r6, r0
 8004dee:	460f      	mov	r7, r1
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	d134      	bne.n	8004e60 <_dtoa_r+0x660>
 8004df6:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <_dtoa_r+0x65c>)
 8004df8:	ec51 0b18 	vmov	r0, r1, d8
 8004dfc:	f7fb faa6 	bl	800034c <__adddf3>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4630      	mov	r0, r6
 8004e06:	4639      	mov	r1, r7
 8004e08:	f7fb fee6 	bl	8000bd8 <__aeabi_dcmpgt>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d175      	bne.n	8004efc <_dtoa_r+0x6fc>
 8004e10:	ec53 2b18 	vmov	r2, r3, d8
 8004e14:	4911      	ldr	r1, [pc, #68]	; (8004e5c <_dtoa_r+0x65c>)
 8004e16:	2000      	movs	r0, #0
 8004e18:	f7fb fa96 	bl	8000348 <__aeabi_dsub>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4630      	mov	r0, r6
 8004e22:	4639      	mov	r1, r7
 8004e24:	f7fb feba 	bl	8000b9c <__aeabi_dcmplt>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	f43f af27 	beq.w	8004c7c <_dtoa_r+0x47c>
 8004e2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004e30:	1e6b      	subs	r3, r5, #1
 8004e32:	930d      	str	r3, [sp, #52]	; 0x34
 8004e34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e38:	2b30      	cmp	r3, #48	; 0x30
 8004e3a:	d0f8      	beq.n	8004e2e <_dtoa_r+0x62e>
 8004e3c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8004e40:	e04a      	b.n	8004ed8 <_dtoa_r+0x6d8>
 8004e42:	bf00      	nop
 8004e44:	08007000 	.word	0x08007000
 8004e48:	08006fd8 	.word	0x08006fd8
 8004e4c:	3ff00000 	.word	0x3ff00000
 8004e50:	40240000 	.word	0x40240000
 8004e54:	401c0000 	.word	0x401c0000
 8004e58:	40140000 	.word	0x40140000
 8004e5c:	3fe00000 	.word	0x3fe00000
 8004e60:	4baf      	ldr	r3, [pc, #700]	; (8005120 <_dtoa_r+0x920>)
 8004e62:	f7fb fc29 	bl	80006b8 <__aeabi_dmul>
 8004e66:	4606      	mov	r6, r0
 8004e68:	460f      	mov	r7, r1
 8004e6a:	e7ac      	b.n	8004dc6 <_dtoa_r+0x5c6>
 8004e6c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8004e70:	9d03      	ldr	r5, [sp, #12]
 8004e72:	4642      	mov	r2, r8
 8004e74:	464b      	mov	r3, r9
 8004e76:	4630      	mov	r0, r6
 8004e78:	4639      	mov	r1, r7
 8004e7a:	f7fb fd47 	bl	800090c <__aeabi_ddiv>
 8004e7e:	f7fb fecb 	bl	8000c18 <__aeabi_d2iz>
 8004e82:	9004      	str	r0, [sp, #16]
 8004e84:	f7fb fbae 	bl	80005e4 <__aeabi_i2d>
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	f7fb fc14 	bl	80006b8 <__aeabi_dmul>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4630      	mov	r0, r6
 8004e96:	4639      	mov	r1, r7
 8004e98:	f7fb fa56 	bl	8000348 <__aeabi_dsub>
 8004e9c:	9e04      	ldr	r6, [sp, #16]
 8004e9e:	9f06      	ldr	r7, [sp, #24]
 8004ea0:	3630      	adds	r6, #48	; 0x30
 8004ea2:	f805 6b01 	strb.w	r6, [r5], #1
 8004ea6:	9e03      	ldr	r6, [sp, #12]
 8004ea8:	1bae      	subs	r6, r5, r6
 8004eaa:	42b7      	cmp	r7, r6
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	d137      	bne.n	8004f22 <_dtoa_r+0x722>
 8004eb2:	f7fb fa4b 	bl	800034c <__adddf3>
 8004eb6:	4642      	mov	r2, r8
 8004eb8:	464b      	mov	r3, r9
 8004eba:	4606      	mov	r6, r0
 8004ebc:	460f      	mov	r7, r1
 8004ebe:	f7fb fe8b 	bl	8000bd8 <__aeabi_dcmpgt>
 8004ec2:	b9c8      	cbnz	r0, 8004ef8 <_dtoa_r+0x6f8>
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	4630      	mov	r0, r6
 8004eca:	4639      	mov	r1, r7
 8004ecc:	f7fb fe5c 	bl	8000b88 <__aeabi_dcmpeq>
 8004ed0:	b110      	cbz	r0, 8004ed8 <_dtoa_r+0x6d8>
 8004ed2:	9b04      	ldr	r3, [sp, #16]
 8004ed4:	07d9      	lsls	r1, r3, #31
 8004ed6:	d40f      	bmi.n	8004ef8 <_dtoa_r+0x6f8>
 8004ed8:	4620      	mov	r0, r4
 8004eda:	4659      	mov	r1, fp
 8004edc:	f000 fac8 	bl	8005470 <_Bfree>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	702b      	strb	r3, [r5, #0]
 8004ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ee6:	f10a 0001 	add.w	r0, sl, #1
 8004eea:	6018      	str	r0, [r3, #0]
 8004eec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f43f acd5 	beq.w	800489e <_dtoa_r+0x9e>
 8004ef4:	601d      	str	r5, [r3, #0]
 8004ef6:	e4d2      	b.n	800489e <_dtoa_r+0x9e>
 8004ef8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004efc:	462b      	mov	r3, r5
 8004efe:	461d      	mov	r5, r3
 8004f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f04:	2a39      	cmp	r2, #57	; 0x39
 8004f06:	d108      	bne.n	8004f1a <_dtoa_r+0x71a>
 8004f08:	9a03      	ldr	r2, [sp, #12]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d1f7      	bne.n	8004efe <_dtoa_r+0x6fe>
 8004f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f10:	9903      	ldr	r1, [sp, #12]
 8004f12:	3201      	adds	r2, #1
 8004f14:	9209      	str	r2, [sp, #36]	; 0x24
 8004f16:	2230      	movs	r2, #48	; 0x30
 8004f18:	700a      	strb	r2, [r1, #0]
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	3201      	adds	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	e78c      	b.n	8004e3c <_dtoa_r+0x63c>
 8004f22:	4b7f      	ldr	r3, [pc, #508]	; (8005120 <_dtoa_r+0x920>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	f7fb fbc7 	bl	80006b8 <__aeabi_dmul>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	4606      	mov	r6, r0
 8004f30:	460f      	mov	r7, r1
 8004f32:	f7fb fe29 	bl	8000b88 <__aeabi_dcmpeq>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d09b      	beq.n	8004e72 <_dtoa_r+0x672>
 8004f3a:	e7cd      	b.n	8004ed8 <_dtoa_r+0x6d8>
 8004f3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f3e:	2a00      	cmp	r2, #0
 8004f40:	f000 80c4 	beq.w	80050cc <_dtoa_r+0x8cc>
 8004f44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f46:	2a01      	cmp	r2, #1
 8004f48:	f300 80a8 	bgt.w	800509c <_dtoa_r+0x89c>
 8004f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f4e:	2a00      	cmp	r2, #0
 8004f50:	f000 80a0 	beq.w	8005094 <_dtoa_r+0x894>
 8004f54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f58:	9e08      	ldr	r6, [sp, #32]
 8004f5a:	4645      	mov	r5, r8
 8004f5c:	9a07      	ldr	r2, [sp, #28]
 8004f5e:	2101      	movs	r1, #1
 8004f60:	441a      	add	r2, r3
 8004f62:	4620      	mov	r0, r4
 8004f64:	4498      	add	r8, r3
 8004f66:	9207      	str	r2, [sp, #28]
 8004f68:	f000 fb3e 	bl	80055e8 <__i2b>
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	2d00      	cmp	r5, #0
 8004f70:	dd0b      	ble.n	8004f8a <_dtoa_r+0x78a>
 8004f72:	9b07      	ldr	r3, [sp, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	dd08      	ble.n	8004f8a <_dtoa_r+0x78a>
 8004f78:	42ab      	cmp	r3, r5
 8004f7a:	9a07      	ldr	r2, [sp, #28]
 8004f7c:	bfa8      	it	ge
 8004f7e:	462b      	movge	r3, r5
 8004f80:	eba8 0803 	sub.w	r8, r8, r3
 8004f84:	1aed      	subs	r5, r5, r3
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	9307      	str	r3, [sp, #28]
 8004f8a:	9b08      	ldr	r3, [sp, #32]
 8004f8c:	b1fb      	cbz	r3, 8004fce <_dtoa_r+0x7ce>
 8004f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 809f 	beq.w	80050d4 <_dtoa_r+0x8d4>
 8004f96:	2e00      	cmp	r6, #0
 8004f98:	dd11      	ble.n	8004fbe <_dtoa_r+0x7be>
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f000 fbde 	bl	8005760 <__pow5mult>
 8004fa4:	465a      	mov	r2, fp
 8004fa6:	4601      	mov	r1, r0
 8004fa8:	4607      	mov	r7, r0
 8004faa:	4620      	mov	r0, r4
 8004fac:	f000 fb32 	bl	8005614 <__multiply>
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	9009      	str	r0, [sp, #36]	; 0x24
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f000 fa5b 	bl	8005470 <_Bfree>
 8004fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fbc:	469b      	mov	fp, r3
 8004fbe:	9b08      	ldr	r3, [sp, #32]
 8004fc0:	1b9a      	subs	r2, r3, r6
 8004fc2:	d004      	beq.n	8004fce <_dtoa_r+0x7ce>
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f000 fbca 	bl	8005760 <__pow5mult>
 8004fcc:	4683      	mov	fp, r0
 8004fce:	2101      	movs	r1, #1
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f000 fb09 	bl	80055e8 <__i2b>
 8004fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	4606      	mov	r6, r0
 8004fdc:	dd7c      	ble.n	80050d8 <_dtoa_r+0x8d8>
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4601      	mov	r1, r0
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f000 fbbc 	bl	8005760 <__pow5mult>
 8004fe8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	4606      	mov	r6, r0
 8004fee:	dd76      	ble.n	80050de <_dtoa_r+0x8de>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9308      	str	r3, [sp, #32]
 8004ff4:	6933      	ldr	r3, [r6, #16]
 8004ff6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ffa:	6918      	ldr	r0, [r3, #16]
 8004ffc:	f000 faa4 	bl	8005548 <__hi0bits>
 8005000:	f1c0 0020 	rsb	r0, r0, #32
 8005004:	9b07      	ldr	r3, [sp, #28]
 8005006:	4418      	add	r0, r3
 8005008:	f010 001f 	ands.w	r0, r0, #31
 800500c:	f000 8086 	beq.w	800511c <_dtoa_r+0x91c>
 8005010:	f1c0 0320 	rsb	r3, r0, #32
 8005014:	2b04      	cmp	r3, #4
 8005016:	dd7f      	ble.n	8005118 <_dtoa_r+0x918>
 8005018:	f1c0 001c 	rsb	r0, r0, #28
 800501c:	9b07      	ldr	r3, [sp, #28]
 800501e:	4403      	add	r3, r0
 8005020:	4480      	add	r8, r0
 8005022:	4405      	add	r5, r0
 8005024:	9307      	str	r3, [sp, #28]
 8005026:	f1b8 0f00 	cmp.w	r8, #0
 800502a:	dd05      	ble.n	8005038 <_dtoa_r+0x838>
 800502c:	4659      	mov	r1, fp
 800502e:	4642      	mov	r2, r8
 8005030:	4620      	mov	r0, r4
 8005032:	f000 fbef 	bl	8005814 <__lshift>
 8005036:	4683      	mov	fp, r0
 8005038:	9b07      	ldr	r3, [sp, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	dd05      	ble.n	800504a <_dtoa_r+0x84a>
 800503e:	4631      	mov	r1, r6
 8005040:	461a      	mov	r2, r3
 8005042:	4620      	mov	r0, r4
 8005044:	f000 fbe6 	bl	8005814 <__lshift>
 8005048:	4606      	mov	r6, r0
 800504a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d069      	beq.n	8005124 <_dtoa_r+0x924>
 8005050:	4631      	mov	r1, r6
 8005052:	4658      	mov	r0, fp
 8005054:	f000 fc4a 	bl	80058ec <__mcmp>
 8005058:	2800      	cmp	r0, #0
 800505a:	da63      	bge.n	8005124 <_dtoa_r+0x924>
 800505c:	2300      	movs	r3, #0
 800505e:	4659      	mov	r1, fp
 8005060:	220a      	movs	r2, #10
 8005062:	4620      	mov	r0, r4
 8005064:	f000 fa26 	bl	80054b4 <__multadd>
 8005068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800506a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800506e:	4683      	mov	fp, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 818f 	beq.w	8005394 <_dtoa_r+0xb94>
 8005076:	4639      	mov	r1, r7
 8005078:	2300      	movs	r3, #0
 800507a:	220a      	movs	r2, #10
 800507c:	4620      	mov	r0, r4
 800507e:	f000 fa19 	bl	80054b4 <__multadd>
 8005082:	f1b9 0f00 	cmp.w	r9, #0
 8005086:	4607      	mov	r7, r0
 8005088:	f300 808e 	bgt.w	80051a8 <_dtoa_r+0x9a8>
 800508c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800508e:	2b02      	cmp	r3, #2
 8005090:	dc50      	bgt.n	8005134 <_dtoa_r+0x934>
 8005092:	e089      	b.n	80051a8 <_dtoa_r+0x9a8>
 8005094:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005096:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800509a:	e75d      	b.n	8004f58 <_dtoa_r+0x758>
 800509c:	9b06      	ldr	r3, [sp, #24]
 800509e:	1e5e      	subs	r6, r3, #1
 80050a0:	9b08      	ldr	r3, [sp, #32]
 80050a2:	42b3      	cmp	r3, r6
 80050a4:	bfbf      	itttt	lt
 80050a6:	9b08      	ldrlt	r3, [sp, #32]
 80050a8:	9608      	strlt	r6, [sp, #32]
 80050aa:	1af2      	sublt	r2, r6, r3
 80050ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80050ae:	bfb6      	itet	lt
 80050b0:	189b      	addlt	r3, r3, r2
 80050b2:	1b9e      	subge	r6, r3, r6
 80050b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80050b6:	9b06      	ldr	r3, [sp, #24]
 80050b8:	bfb8      	it	lt
 80050ba:	2600      	movlt	r6, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bfb5      	itete	lt
 80050c0:	eba8 0503 	sublt.w	r5, r8, r3
 80050c4:	9b06      	ldrge	r3, [sp, #24]
 80050c6:	2300      	movlt	r3, #0
 80050c8:	4645      	movge	r5, r8
 80050ca:	e747      	b.n	8004f5c <_dtoa_r+0x75c>
 80050cc:	9e08      	ldr	r6, [sp, #32]
 80050ce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80050d0:	4645      	mov	r5, r8
 80050d2:	e74c      	b.n	8004f6e <_dtoa_r+0x76e>
 80050d4:	9a08      	ldr	r2, [sp, #32]
 80050d6:	e775      	b.n	8004fc4 <_dtoa_r+0x7c4>
 80050d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050da:	2b01      	cmp	r3, #1
 80050dc:	dc18      	bgt.n	8005110 <_dtoa_r+0x910>
 80050de:	9b04      	ldr	r3, [sp, #16]
 80050e0:	b9b3      	cbnz	r3, 8005110 <_dtoa_r+0x910>
 80050e2:	9b05      	ldr	r3, [sp, #20]
 80050e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e8:	b9a3      	cbnz	r3, 8005114 <_dtoa_r+0x914>
 80050ea:	9b05      	ldr	r3, [sp, #20]
 80050ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050f0:	0d1b      	lsrs	r3, r3, #20
 80050f2:	051b      	lsls	r3, r3, #20
 80050f4:	b12b      	cbz	r3, 8005102 <_dtoa_r+0x902>
 80050f6:	9b07      	ldr	r3, [sp, #28]
 80050f8:	3301      	adds	r3, #1
 80050fa:	9307      	str	r3, [sp, #28]
 80050fc:	f108 0801 	add.w	r8, r8, #1
 8005100:	2301      	movs	r3, #1
 8005102:	9308      	str	r3, [sp, #32]
 8005104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005106:	2b00      	cmp	r3, #0
 8005108:	f47f af74 	bne.w	8004ff4 <_dtoa_r+0x7f4>
 800510c:	2001      	movs	r0, #1
 800510e:	e779      	b.n	8005004 <_dtoa_r+0x804>
 8005110:	2300      	movs	r3, #0
 8005112:	e7f6      	b.n	8005102 <_dtoa_r+0x902>
 8005114:	9b04      	ldr	r3, [sp, #16]
 8005116:	e7f4      	b.n	8005102 <_dtoa_r+0x902>
 8005118:	d085      	beq.n	8005026 <_dtoa_r+0x826>
 800511a:	4618      	mov	r0, r3
 800511c:	301c      	adds	r0, #28
 800511e:	e77d      	b.n	800501c <_dtoa_r+0x81c>
 8005120:	40240000 	.word	0x40240000
 8005124:	9b06      	ldr	r3, [sp, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	dc38      	bgt.n	800519c <_dtoa_r+0x99c>
 800512a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800512c:	2b02      	cmp	r3, #2
 800512e:	dd35      	ble.n	800519c <_dtoa_r+0x99c>
 8005130:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005134:	f1b9 0f00 	cmp.w	r9, #0
 8005138:	d10d      	bne.n	8005156 <_dtoa_r+0x956>
 800513a:	4631      	mov	r1, r6
 800513c:	464b      	mov	r3, r9
 800513e:	2205      	movs	r2, #5
 8005140:	4620      	mov	r0, r4
 8005142:	f000 f9b7 	bl	80054b4 <__multadd>
 8005146:	4601      	mov	r1, r0
 8005148:	4606      	mov	r6, r0
 800514a:	4658      	mov	r0, fp
 800514c:	f000 fbce 	bl	80058ec <__mcmp>
 8005150:	2800      	cmp	r0, #0
 8005152:	f73f adbd 	bgt.w	8004cd0 <_dtoa_r+0x4d0>
 8005156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005158:	9d03      	ldr	r5, [sp, #12]
 800515a:	ea6f 0a03 	mvn.w	sl, r3
 800515e:	f04f 0800 	mov.w	r8, #0
 8005162:	4631      	mov	r1, r6
 8005164:	4620      	mov	r0, r4
 8005166:	f000 f983 	bl	8005470 <_Bfree>
 800516a:	2f00      	cmp	r7, #0
 800516c:	f43f aeb4 	beq.w	8004ed8 <_dtoa_r+0x6d8>
 8005170:	f1b8 0f00 	cmp.w	r8, #0
 8005174:	d005      	beq.n	8005182 <_dtoa_r+0x982>
 8005176:	45b8      	cmp	r8, r7
 8005178:	d003      	beq.n	8005182 <_dtoa_r+0x982>
 800517a:	4641      	mov	r1, r8
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f977 	bl	8005470 <_Bfree>
 8005182:	4639      	mov	r1, r7
 8005184:	4620      	mov	r0, r4
 8005186:	f000 f973 	bl	8005470 <_Bfree>
 800518a:	e6a5      	b.n	8004ed8 <_dtoa_r+0x6d8>
 800518c:	2600      	movs	r6, #0
 800518e:	4637      	mov	r7, r6
 8005190:	e7e1      	b.n	8005156 <_dtoa_r+0x956>
 8005192:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005194:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005198:	4637      	mov	r7, r6
 800519a:	e599      	b.n	8004cd0 <_dtoa_r+0x4d0>
 800519c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800519e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 80fd 	beq.w	80053a2 <_dtoa_r+0xba2>
 80051a8:	2d00      	cmp	r5, #0
 80051aa:	dd05      	ble.n	80051b8 <_dtoa_r+0x9b8>
 80051ac:	4639      	mov	r1, r7
 80051ae:	462a      	mov	r2, r5
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 fb2f 	bl	8005814 <__lshift>
 80051b6:	4607      	mov	r7, r0
 80051b8:	9b08      	ldr	r3, [sp, #32]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d05c      	beq.n	8005278 <_dtoa_r+0xa78>
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 f915 	bl	80053f0 <_Balloc>
 80051c6:	4605      	mov	r5, r0
 80051c8:	b928      	cbnz	r0, 80051d6 <_dtoa_r+0x9d6>
 80051ca:	4b80      	ldr	r3, [pc, #512]	; (80053cc <_dtoa_r+0xbcc>)
 80051cc:	4602      	mov	r2, r0
 80051ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80051d2:	f7ff bb2b 	b.w	800482c <_dtoa_r+0x2c>
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	3202      	adds	r2, #2
 80051da:	0092      	lsls	r2, r2, #2
 80051dc:	f107 010c 	add.w	r1, r7, #12
 80051e0:	300c      	adds	r0, #12
 80051e2:	f7fe fddd 	bl	8003da0 <memcpy>
 80051e6:	2201      	movs	r2, #1
 80051e8:	4629      	mov	r1, r5
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 fb12 	bl	8005814 <__lshift>
 80051f0:	9b03      	ldr	r3, [sp, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	9306      	str	r3, [sp, #24]
 80051f6:	9b03      	ldr	r3, [sp, #12]
 80051f8:	444b      	add	r3, r9
 80051fa:	9309      	str	r3, [sp, #36]	; 0x24
 80051fc:	9b04      	ldr	r3, [sp, #16]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	46b8      	mov	r8, r7
 8005204:	9308      	str	r3, [sp, #32]
 8005206:	4607      	mov	r7, r0
 8005208:	9b06      	ldr	r3, [sp, #24]
 800520a:	4631      	mov	r1, r6
 800520c:	3b01      	subs	r3, #1
 800520e:	4658      	mov	r0, fp
 8005210:	9304      	str	r3, [sp, #16]
 8005212:	f7ff fa67 	bl	80046e4 <quorem>
 8005216:	4603      	mov	r3, r0
 8005218:	3330      	adds	r3, #48	; 0x30
 800521a:	9007      	str	r0, [sp, #28]
 800521c:	4641      	mov	r1, r8
 800521e:	4658      	mov	r0, fp
 8005220:	930c      	str	r3, [sp, #48]	; 0x30
 8005222:	f000 fb63 	bl	80058ec <__mcmp>
 8005226:	463a      	mov	r2, r7
 8005228:	4681      	mov	r9, r0
 800522a:	4631      	mov	r1, r6
 800522c:	4620      	mov	r0, r4
 800522e:	f000 fb79 	bl	8005924 <__mdiff>
 8005232:	68c2      	ldr	r2, [r0, #12]
 8005234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005236:	4605      	mov	r5, r0
 8005238:	bb02      	cbnz	r2, 800527c <_dtoa_r+0xa7c>
 800523a:	4601      	mov	r1, r0
 800523c:	4658      	mov	r0, fp
 800523e:	f000 fb55 	bl	80058ec <__mcmp>
 8005242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005244:	4602      	mov	r2, r0
 8005246:	4629      	mov	r1, r5
 8005248:	4620      	mov	r0, r4
 800524a:	920a      	str	r2, [sp, #40]	; 0x28
 800524c:	930c      	str	r3, [sp, #48]	; 0x30
 800524e:	f000 f90f 	bl	8005470 <_Bfree>
 8005252:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005256:	9d06      	ldr	r5, [sp, #24]
 8005258:	ea43 0102 	orr.w	r1, r3, r2
 800525c:	9b08      	ldr	r3, [sp, #32]
 800525e:	430b      	orrs	r3, r1
 8005260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005262:	d10d      	bne.n	8005280 <_dtoa_r+0xa80>
 8005264:	2b39      	cmp	r3, #57	; 0x39
 8005266:	d029      	beq.n	80052bc <_dtoa_r+0xabc>
 8005268:	f1b9 0f00 	cmp.w	r9, #0
 800526c:	dd01      	ble.n	8005272 <_dtoa_r+0xa72>
 800526e:	9b07      	ldr	r3, [sp, #28]
 8005270:	3331      	adds	r3, #49	; 0x31
 8005272:	9a04      	ldr	r2, [sp, #16]
 8005274:	7013      	strb	r3, [r2, #0]
 8005276:	e774      	b.n	8005162 <_dtoa_r+0x962>
 8005278:	4638      	mov	r0, r7
 800527a:	e7b9      	b.n	80051f0 <_dtoa_r+0x9f0>
 800527c:	2201      	movs	r2, #1
 800527e:	e7e2      	b.n	8005246 <_dtoa_r+0xa46>
 8005280:	f1b9 0f00 	cmp.w	r9, #0
 8005284:	db06      	blt.n	8005294 <_dtoa_r+0xa94>
 8005286:	9920      	ldr	r1, [sp, #128]	; 0x80
 8005288:	ea41 0909 	orr.w	r9, r1, r9
 800528c:	9908      	ldr	r1, [sp, #32]
 800528e:	ea59 0101 	orrs.w	r1, r9, r1
 8005292:	d120      	bne.n	80052d6 <_dtoa_r+0xad6>
 8005294:	2a00      	cmp	r2, #0
 8005296:	ddec      	ble.n	8005272 <_dtoa_r+0xa72>
 8005298:	4659      	mov	r1, fp
 800529a:	2201      	movs	r2, #1
 800529c:	4620      	mov	r0, r4
 800529e:	9306      	str	r3, [sp, #24]
 80052a0:	f000 fab8 	bl	8005814 <__lshift>
 80052a4:	4631      	mov	r1, r6
 80052a6:	4683      	mov	fp, r0
 80052a8:	f000 fb20 	bl	80058ec <__mcmp>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	9b06      	ldr	r3, [sp, #24]
 80052b0:	dc02      	bgt.n	80052b8 <_dtoa_r+0xab8>
 80052b2:	d1de      	bne.n	8005272 <_dtoa_r+0xa72>
 80052b4:	07da      	lsls	r2, r3, #31
 80052b6:	d5dc      	bpl.n	8005272 <_dtoa_r+0xa72>
 80052b8:	2b39      	cmp	r3, #57	; 0x39
 80052ba:	d1d8      	bne.n	800526e <_dtoa_r+0xa6e>
 80052bc:	9a04      	ldr	r2, [sp, #16]
 80052be:	2339      	movs	r3, #57	; 0x39
 80052c0:	7013      	strb	r3, [r2, #0]
 80052c2:	462b      	mov	r3, r5
 80052c4:	461d      	mov	r5, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052cc:	2a39      	cmp	r2, #57	; 0x39
 80052ce:	d050      	beq.n	8005372 <_dtoa_r+0xb72>
 80052d0:	3201      	adds	r2, #1
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e745      	b.n	8005162 <_dtoa_r+0x962>
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	dd03      	ble.n	80052e2 <_dtoa_r+0xae2>
 80052da:	2b39      	cmp	r3, #57	; 0x39
 80052dc:	d0ee      	beq.n	80052bc <_dtoa_r+0xabc>
 80052de:	3301      	adds	r3, #1
 80052e0:	e7c7      	b.n	8005272 <_dtoa_r+0xa72>
 80052e2:	9a06      	ldr	r2, [sp, #24]
 80052e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80052ea:	428a      	cmp	r2, r1
 80052ec:	d02a      	beq.n	8005344 <_dtoa_r+0xb44>
 80052ee:	4659      	mov	r1, fp
 80052f0:	2300      	movs	r3, #0
 80052f2:	220a      	movs	r2, #10
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 f8dd 	bl	80054b4 <__multadd>
 80052fa:	45b8      	cmp	r8, r7
 80052fc:	4683      	mov	fp, r0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	f04f 020a 	mov.w	r2, #10
 8005306:	4641      	mov	r1, r8
 8005308:	4620      	mov	r0, r4
 800530a:	d107      	bne.n	800531c <_dtoa_r+0xb1c>
 800530c:	f000 f8d2 	bl	80054b4 <__multadd>
 8005310:	4680      	mov	r8, r0
 8005312:	4607      	mov	r7, r0
 8005314:	9b06      	ldr	r3, [sp, #24]
 8005316:	3301      	adds	r3, #1
 8005318:	9306      	str	r3, [sp, #24]
 800531a:	e775      	b.n	8005208 <_dtoa_r+0xa08>
 800531c:	f000 f8ca 	bl	80054b4 <__multadd>
 8005320:	4639      	mov	r1, r7
 8005322:	4680      	mov	r8, r0
 8005324:	2300      	movs	r3, #0
 8005326:	220a      	movs	r2, #10
 8005328:	4620      	mov	r0, r4
 800532a:	f000 f8c3 	bl	80054b4 <__multadd>
 800532e:	4607      	mov	r7, r0
 8005330:	e7f0      	b.n	8005314 <_dtoa_r+0xb14>
 8005332:	f1b9 0f00 	cmp.w	r9, #0
 8005336:	9a03      	ldr	r2, [sp, #12]
 8005338:	bfcc      	ite	gt
 800533a:	464d      	movgt	r5, r9
 800533c:	2501      	movle	r5, #1
 800533e:	4415      	add	r5, r2
 8005340:	f04f 0800 	mov.w	r8, #0
 8005344:	4659      	mov	r1, fp
 8005346:	2201      	movs	r2, #1
 8005348:	4620      	mov	r0, r4
 800534a:	9306      	str	r3, [sp, #24]
 800534c:	f000 fa62 	bl	8005814 <__lshift>
 8005350:	4631      	mov	r1, r6
 8005352:	4683      	mov	fp, r0
 8005354:	f000 faca 	bl	80058ec <__mcmp>
 8005358:	2800      	cmp	r0, #0
 800535a:	dcb2      	bgt.n	80052c2 <_dtoa_r+0xac2>
 800535c:	d102      	bne.n	8005364 <_dtoa_r+0xb64>
 800535e:	9b06      	ldr	r3, [sp, #24]
 8005360:	07db      	lsls	r3, r3, #31
 8005362:	d4ae      	bmi.n	80052c2 <_dtoa_r+0xac2>
 8005364:	462b      	mov	r3, r5
 8005366:	461d      	mov	r5, r3
 8005368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800536c:	2a30      	cmp	r2, #48	; 0x30
 800536e:	d0fa      	beq.n	8005366 <_dtoa_r+0xb66>
 8005370:	e6f7      	b.n	8005162 <_dtoa_r+0x962>
 8005372:	9a03      	ldr	r2, [sp, #12]
 8005374:	429a      	cmp	r2, r3
 8005376:	d1a5      	bne.n	80052c4 <_dtoa_r+0xac4>
 8005378:	f10a 0a01 	add.w	sl, sl, #1
 800537c:	2331      	movs	r3, #49	; 0x31
 800537e:	e779      	b.n	8005274 <_dtoa_r+0xa74>
 8005380:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <_dtoa_r+0xbd0>)
 8005382:	f7ff baac 	b.w	80048de <_dtoa_r+0xde>
 8005386:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005388:	2b00      	cmp	r3, #0
 800538a:	f47f aa83 	bne.w	8004894 <_dtoa_r+0x94>
 800538e:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <_dtoa_r+0xbd4>)
 8005390:	f7ff baa5 	b.w	80048de <_dtoa_r+0xde>
 8005394:	f1b9 0f00 	cmp.w	r9, #0
 8005398:	dc03      	bgt.n	80053a2 <_dtoa_r+0xba2>
 800539a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800539c:	2b02      	cmp	r3, #2
 800539e:	f73f aec9 	bgt.w	8005134 <_dtoa_r+0x934>
 80053a2:	9d03      	ldr	r5, [sp, #12]
 80053a4:	4631      	mov	r1, r6
 80053a6:	4658      	mov	r0, fp
 80053a8:	f7ff f99c 	bl	80046e4 <quorem>
 80053ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80053b0:	f805 3b01 	strb.w	r3, [r5], #1
 80053b4:	9a03      	ldr	r2, [sp, #12]
 80053b6:	1aaa      	subs	r2, r5, r2
 80053b8:	4591      	cmp	r9, r2
 80053ba:	ddba      	ble.n	8005332 <_dtoa_r+0xb32>
 80053bc:	4659      	mov	r1, fp
 80053be:	2300      	movs	r3, #0
 80053c0:	220a      	movs	r2, #10
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 f876 	bl	80054b4 <__multadd>
 80053c8:	4683      	mov	fp, r0
 80053ca:	e7eb      	b.n	80053a4 <_dtoa_r+0xba4>
 80053cc:	08006f63 	.word	0x08006f63
 80053d0:	08006ebc 	.word	0x08006ebc
 80053d4:	08006ee0 	.word	0x08006ee0

080053d8 <_localeconv_r>:
 80053d8:	4800      	ldr	r0, [pc, #0]	; (80053dc <_localeconv_r+0x4>)
 80053da:	4770      	bx	lr
 80053dc:	20000168 	.word	0x20000168

080053e0 <malloc>:
 80053e0:	4b02      	ldr	r3, [pc, #8]	; (80053ec <malloc+0xc>)
 80053e2:	4601      	mov	r1, r0
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	f000 bbdf 	b.w	8005ba8 <_malloc_r>
 80053ea:	bf00      	nop
 80053ec:	20000014 	.word	0x20000014

080053f0 <_Balloc>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80053f4:	4604      	mov	r4, r0
 80053f6:	460d      	mov	r5, r1
 80053f8:	b976      	cbnz	r6, 8005418 <_Balloc+0x28>
 80053fa:	2010      	movs	r0, #16
 80053fc:	f7ff fff0 	bl	80053e0 <malloc>
 8005400:	4602      	mov	r2, r0
 8005402:	6260      	str	r0, [r4, #36]	; 0x24
 8005404:	b920      	cbnz	r0, 8005410 <_Balloc+0x20>
 8005406:	4b18      	ldr	r3, [pc, #96]	; (8005468 <_Balloc+0x78>)
 8005408:	4818      	ldr	r0, [pc, #96]	; (800546c <_Balloc+0x7c>)
 800540a:	2166      	movs	r1, #102	; 0x66
 800540c:	f000 fd92 	bl	8005f34 <__assert_func>
 8005410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005414:	6006      	str	r6, [r0, #0]
 8005416:	60c6      	str	r6, [r0, #12]
 8005418:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800541a:	68f3      	ldr	r3, [r6, #12]
 800541c:	b183      	cbz	r3, 8005440 <_Balloc+0x50>
 800541e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005426:	b9b8      	cbnz	r0, 8005458 <_Balloc+0x68>
 8005428:	2101      	movs	r1, #1
 800542a:	fa01 f605 	lsl.w	r6, r1, r5
 800542e:	1d72      	adds	r2, r6, #5
 8005430:	0092      	lsls	r2, r2, #2
 8005432:	4620      	mov	r0, r4
 8005434:	f000 fb58 	bl	8005ae8 <_calloc_r>
 8005438:	b160      	cbz	r0, 8005454 <_Balloc+0x64>
 800543a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800543e:	e00e      	b.n	800545e <_Balloc+0x6e>
 8005440:	2221      	movs	r2, #33	; 0x21
 8005442:	2104      	movs	r1, #4
 8005444:	4620      	mov	r0, r4
 8005446:	f000 fb4f 	bl	8005ae8 <_calloc_r>
 800544a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800544c:	60f0      	str	r0, [r6, #12]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e4      	bne.n	800541e <_Balloc+0x2e>
 8005454:	2000      	movs	r0, #0
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	6802      	ldr	r2, [r0, #0]
 800545a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800545e:	2300      	movs	r3, #0
 8005460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005464:	e7f7      	b.n	8005456 <_Balloc+0x66>
 8005466:	bf00      	nop
 8005468:	08006eed 	.word	0x08006eed
 800546c:	08006f74 	.word	0x08006f74

08005470 <_Bfree>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005474:	4605      	mov	r5, r0
 8005476:	460c      	mov	r4, r1
 8005478:	b976      	cbnz	r6, 8005498 <_Bfree+0x28>
 800547a:	2010      	movs	r0, #16
 800547c:	f7ff ffb0 	bl	80053e0 <malloc>
 8005480:	4602      	mov	r2, r0
 8005482:	6268      	str	r0, [r5, #36]	; 0x24
 8005484:	b920      	cbnz	r0, 8005490 <_Bfree+0x20>
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <_Bfree+0x3c>)
 8005488:	4809      	ldr	r0, [pc, #36]	; (80054b0 <_Bfree+0x40>)
 800548a:	218a      	movs	r1, #138	; 0x8a
 800548c:	f000 fd52 	bl	8005f34 <__assert_func>
 8005490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005494:	6006      	str	r6, [r0, #0]
 8005496:	60c6      	str	r6, [r0, #12]
 8005498:	b13c      	cbz	r4, 80054aa <_Bfree+0x3a>
 800549a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800549c:	6862      	ldr	r2, [r4, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054a4:	6021      	str	r1, [r4, #0]
 80054a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	08006eed 	.word	0x08006eed
 80054b0:	08006f74 	.word	0x08006f74

080054b4 <__multadd>:
 80054b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b8:	690e      	ldr	r6, [r1, #16]
 80054ba:	4607      	mov	r7, r0
 80054bc:	4698      	mov	r8, r3
 80054be:	460c      	mov	r4, r1
 80054c0:	f101 0014 	add.w	r0, r1, #20
 80054c4:	2300      	movs	r3, #0
 80054c6:	6805      	ldr	r5, [r0, #0]
 80054c8:	b2a9      	uxth	r1, r5
 80054ca:	fb02 8101 	mla	r1, r2, r1, r8
 80054ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80054d2:	0c2d      	lsrs	r5, r5, #16
 80054d4:	fb02 c505 	mla	r5, r2, r5, ip
 80054d8:	b289      	uxth	r1, r1
 80054da:	3301      	adds	r3, #1
 80054dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80054e0:	429e      	cmp	r6, r3
 80054e2:	f840 1b04 	str.w	r1, [r0], #4
 80054e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80054ea:	dcec      	bgt.n	80054c6 <__multadd+0x12>
 80054ec:	f1b8 0f00 	cmp.w	r8, #0
 80054f0:	d022      	beq.n	8005538 <__multadd+0x84>
 80054f2:	68a3      	ldr	r3, [r4, #8]
 80054f4:	42b3      	cmp	r3, r6
 80054f6:	dc19      	bgt.n	800552c <__multadd+0x78>
 80054f8:	6861      	ldr	r1, [r4, #4]
 80054fa:	4638      	mov	r0, r7
 80054fc:	3101      	adds	r1, #1
 80054fe:	f7ff ff77 	bl	80053f0 <_Balloc>
 8005502:	4605      	mov	r5, r0
 8005504:	b928      	cbnz	r0, 8005512 <__multadd+0x5e>
 8005506:	4602      	mov	r2, r0
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <__multadd+0x8c>)
 800550a:	480e      	ldr	r0, [pc, #56]	; (8005544 <__multadd+0x90>)
 800550c:	21b5      	movs	r1, #181	; 0xb5
 800550e:	f000 fd11 	bl	8005f34 <__assert_func>
 8005512:	6922      	ldr	r2, [r4, #16]
 8005514:	3202      	adds	r2, #2
 8005516:	f104 010c 	add.w	r1, r4, #12
 800551a:	0092      	lsls	r2, r2, #2
 800551c:	300c      	adds	r0, #12
 800551e:	f7fe fc3f 	bl	8003da0 <memcpy>
 8005522:	4621      	mov	r1, r4
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff ffa3 	bl	8005470 <_Bfree>
 800552a:	462c      	mov	r4, r5
 800552c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005530:	3601      	adds	r6, #1
 8005532:	f8c3 8014 	str.w	r8, [r3, #20]
 8005536:	6126      	str	r6, [r4, #16]
 8005538:	4620      	mov	r0, r4
 800553a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800553e:	bf00      	nop
 8005540:	08006f63 	.word	0x08006f63
 8005544:	08006f74 	.word	0x08006f74

08005548 <__hi0bits>:
 8005548:	0c03      	lsrs	r3, r0, #16
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	b9d3      	cbnz	r3, 8005584 <__hi0bits+0x3c>
 800554e:	0400      	lsls	r0, r0, #16
 8005550:	2310      	movs	r3, #16
 8005552:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005556:	bf04      	itt	eq
 8005558:	0200      	lsleq	r0, r0, #8
 800555a:	3308      	addeq	r3, #8
 800555c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005560:	bf04      	itt	eq
 8005562:	0100      	lsleq	r0, r0, #4
 8005564:	3304      	addeq	r3, #4
 8005566:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800556a:	bf04      	itt	eq
 800556c:	0080      	lsleq	r0, r0, #2
 800556e:	3302      	addeq	r3, #2
 8005570:	2800      	cmp	r0, #0
 8005572:	db05      	blt.n	8005580 <__hi0bits+0x38>
 8005574:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005578:	f103 0301 	add.w	r3, r3, #1
 800557c:	bf08      	it	eq
 800557e:	2320      	moveq	r3, #32
 8005580:	4618      	mov	r0, r3
 8005582:	4770      	bx	lr
 8005584:	2300      	movs	r3, #0
 8005586:	e7e4      	b.n	8005552 <__hi0bits+0xa>

08005588 <__lo0bits>:
 8005588:	6803      	ldr	r3, [r0, #0]
 800558a:	f013 0207 	ands.w	r2, r3, #7
 800558e:	4601      	mov	r1, r0
 8005590:	d00b      	beq.n	80055aa <__lo0bits+0x22>
 8005592:	07da      	lsls	r2, r3, #31
 8005594:	d424      	bmi.n	80055e0 <__lo0bits+0x58>
 8005596:	0798      	lsls	r0, r3, #30
 8005598:	bf49      	itett	mi
 800559a:	085b      	lsrmi	r3, r3, #1
 800559c:	089b      	lsrpl	r3, r3, #2
 800559e:	2001      	movmi	r0, #1
 80055a0:	600b      	strmi	r3, [r1, #0]
 80055a2:	bf5c      	itt	pl
 80055a4:	600b      	strpl	r3, [r1, #0]
 80055a6:	2002      	movpl	r0, #2
 80055a8:	4770      	bx	lr
 80055aa:	b298      	uxth	r0, r3
 80055ac:	b9b0      	cbnz	r0, 80055dc <__lo0bits+0x54>
 80055ae:	0c1b      	lsrs	r3, r3, #16
 80055b0:	2010      	movs	r0, #16
 80055b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80055b6:	bf04      	itt	eq
 80055b8:	0a1b      	lsreq	r3, r3, #8
 80055ba:	3008      	addeq	r0, #8
 80055bc:	071a      	lsls	r2, r3, #28
 80055be:	bf04      	itt	eq
 80055c0:	091b      	lsreq	r3, r3, #4
 80055c2:	3004      	addeq	r0, #4
 80055c4:	079a      	lsls	r2, r3, #30
 80055c6:	bf04      	itt	eq
 80055c8:	089b      	lsreq	r3, r3, #2
 80055ca:	3002      	addeq	r0, #2
 80055cc:	07da      	lsls	r2, r3, #31
 80055ce:	d403      	bmi.n	80055d8 <__lo0bits+0x50>
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	f100 0001 	add.w	r0, r0, #1
 80055d6:	d005      	beq.n	80055e4 <__lo0bits+0x5c>
 80055d8:	600b      	str	r3, [r1, #0]
 80055da:	4770      	bx	lr
 80055dc:	4610      	mov	r0, r2
 80055de:	e7e8      	b.n	80055b2 <__lo0bits+0x2a>
 80055e0:	2000      	movs	r0, #0
 80055e2:	4770      	bx	lr
 80055e4:	2020      	movs	r0, #32
 80055e6:	4770      	bx	lr

080055e8 <__i2b>:
 80055e8:	b510      	push	{r4, lr}
 80055ea:	460c      	mov	r4, r1
 80055ec:	2101      	movs	r1, #1
 80055ee:	f7ff feff 	bl	80053f0 <_Balloc>
 80055f2:	4602      	mov	r2, r0
 80055f4:	b928      	cbnz	r0, 8005602 <__i2b+0x1a>
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <__i2b+0x24>)
 80055f8:	4805      	ldr	r0, [pc, #20]	; (8005610 <__i2b+0x28>)
 80055fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80055fe:	f000 fc99 	bl	8005f34 <__assert_func>
 8005602:	2301      	movs	r3, #1
 8005604:	6144      	str	r4, [r0, #20]
 8005606:	6103      	str	r3, [r0, #16]
 8005608:	bd10      	pop	{r4, pc}
 800560a:	bf00      	nop
 800560c:	08006f63 	.word	0x08006f63
 8005610:	08006f74 	.word	0x08006f74

08005614 <__multiply>:
 8005614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005618:	4614      	mov	r4, r2
 800561a:	690a      	ldr	r2, [r1, #16]
 800561c:	6923      	ldr	r3, [r4, #16]
 800561e:	429a      	cmp	r2, r3
 8005620:	bfb8      	it	lt
 8005622:	460b      	movlt	r3, r1
 8005624:	460d      	mov	r5, r1
 8005626:	bfbc      	itt	lt
 8005628:	4625      	movlt	r5, r4
 800562a:	461c      	movlt	r4, r3
 800562c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005630:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005634:	68ab      	ldr	r3, [r5, #8]
 8005636:	6869      	ldr	r1, [r5, #4]
 8005638:	eb0a 0709 	add.w	r7, sl, r9
 800563c:	42bb      	cmp	r3, r7
 800563e:	b085      	sub	sp, #20
 8005640:	bfb8      	it	lt
 8005642:	3101      	addlt	r1, #1
 8005644:	f7ff fed4 	bl	80053f0 <_Balloc>
 8005648:	b930      	cbnz	r0, 8005658 <__multiply+0x44>
 800564a:	4602      	mov	r2, r0
 800564c:	4b42      	ldr	r3, [pc, #264]	; (8005758 <__multiply+0x144>)
 800564e:	4843      	ldr	r0, [pc, #268]	; (800575c <__multiply+0x148>)
 8005650:	f240 115d 	movw	r1, #349	; 0x15d
 8005654:	f000 fc6e 	bl	8005f34 <__assert_func>
 8005658:	f100 0614 	add.w	r6, r0, #20
 800565c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005660:	4633      	mov	r3, r6
 8005662:	2200      	movs	r2, #0
 8005664:	4543      	cmp	r3, r8
 8005666:	d31e      	bcc.n	80056a6 <__multiply+0x92>
 8005668:	f105 0c14 	add.w	ip, r5, #20
 800566c:	f104 0314 	add.w	r3, r4, #20
 8005670:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005674:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005678:	9202      	str	r2, [sp, #8]
 800567a:	ebac 0205 	sub.w	r2, ip, r5
 800567e:	3a15      	subs	r2, #21
 8005680:	f022 0203 	bic.w	r2, r2, #3
 8005684:	3204      	adds	r2, #4
 8005686:	f105 0115 	add.w	r1, r5, #21
 800568a:	458c      	cmp	ip, r1
 800568c:	bf38      	it	cc
 800568e:	2204      	movcc	r2, #4
 8005690:	9201      	str	r2, [sp, #4]
 8005692:	9a02      	ldr	r2, [sp, #8]
 8005694:	9303      	str	r3, [sp, #12]
 8005696:	429a      	cmp	r2, r3
 8005698:	d808      	bhi.n	80056ac <__multiply+0x98>
 800569a:	2f00      	cmp	r7, #0
 800569c:	dc55      	bgt.n	800574a <__multiply+0x136>
 800569e:	6107      	str	r7, [r0, #16]
 80056a0:	b005      	add	sp, #20
 80056a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a6:	f843 2b04 	str.w	r2, [r3], #4
 80056aa:	e7db      	b.n	8005664 <__multiply+0x50>
 80056ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80056b0:	f1ba 0f00 	cmp.w	sl, #0
 80056b4:	d020      	beq.n	80056f8 <__multiply+0xe4>
 80056b6:	f105 0e14 	add.w	lr, r5, #20
 80056ba:	46b1      	mov	r9, r6
 80056bc:	2200      	movs	r2, #0
 80056be:	f85e 4b04 	ldr.w	r4, [lr], #4
 80056c2:	f8d9 b000 	ldr.w	fp, [r9]
 80056c6:	b2a1      	uxth	r1, r4
 80056c8:	fa1f fb8b 	uxth.w	fp, fp
 80056cc:	fb0a b101 	mla	r1, sl, r1, fp
 80056d0:	4411      	add	r1, r2
 80056d2:	f8d9 2000 	ldr.w	r2, [r9]
 80056d6:	0c24      	lsrs	r4, r4, #16
 80056d8:	0c12      	lsrs	r2, r2, #16
 80056da:	fb0a 2404 	mla	r4, sl, r4, r2
 80056de:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80056e2:	b289      	uxth	r1, r1
 80056e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80056e8:	45f4      	cmp	ip, lr
 80056ea:	f849 1b04 	str.w	r1, [r9], #4
 80056ee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80056f2:	d8e4      	bhi.n	80056be <__multiply+0xaa>
 80056f4:	9901      	ldr	r1, [sp, #4]
 80056f6:	5072      	str	r2, [r6, r1]
 80056f8:	9a03      	ldr	r2, [sp, #12]
 80056fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80056fe:	3304      	adds	r3, #4
 8005700:	f1b9 0f00 	cmp.w	r9, #0
 8005704:	d01f      	beq.n	8005746 <__multiply+0x132>
 8005706:	6834      	ldr	r4, [r6, #0]
 8005708:	f105 0114 	add.w	r1, r5, #20
 800570c:	46b6      	mov	lr, r6
 800570e:	f04f 0a00 	mov.w	sl, #0
 8005712:	880a      	ldrh	r2, [r1, #0]
 8005714:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005718:	fb09 b202 	mla	r2, r9, r2, fp
 800571c:	4492      	add	sl, r2
 800571e:	b2a4      	uxth	r4, r4
 8005720:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005724:	f84e 4b04 	str.w	r4, [lr], #4
 8005728:	f851 4b04 	ldr.w	r4, [r1], #4
 800572c:	f8be 2000 	ldrh.w	r2, [lr]
 8005730:	0c24      	lsrs	r4, r4, #16
 8005732:	fb09 2404 	mla	r4, r9, r4, r2
 8005736:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800573a:	458c      	cmp	ip, r1
 800573c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005740:	d8e7      	bhi.n	8005712 <__multiply+0xfe>
 8005742:	9a01      	ldr	r2, [sp, #4]
 8005744:	50b4      	str	r4, [r6, r2]
 8005746:	3604      	adds	r6, #4
 8005748:	e7a3      	b.n	8005692 <__multiply+0x7e>
 800574a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1a5      	bne.n	800569e <__multiply+0x8a>
 8005752:	3f01      	subs	r7, #1
 8005754:	e7a1      	b.n	800569a <__multiply+0x86>
 8005756:	bf00      	nop
 8005758:	08006f63 	.word	0x08006f63
 800575c:	08006f74 	.word	0x08006f74

08005760 <__pow5mult>:
 8005760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005764:	4615      	mov	r5, r2
 8005766:	f012 0203 	ands.w	r2, r2, #3
 800576a:	4606      	mov	r6, r0
 800576c:	460f      	mov	r7, r1
 800576e:	d007      	beq.n	8005780 <__pow5mult+0x20>
 8005770:	4c25      	ldr	r4, [pc, #148]	; (8005808 <__pow5mult+0xa8>)
 8005772:	3a01      	subs	r2, #1
 8005774:	2300      	movs	r3, #0
 8005776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800577a:	f7ff fe9b 	bl	80054b4 <__multadd>
 800577e:	4607      	mov	r7, r0
 8005780:	10ad      	asrs	r5, r5, #2
 8005782:	d03d      	beq.n	8005800 <__pow5mult+0xa0>
 8005784:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005786:	b97c      	cbnz	r4, 80057a8 <__pow5mult+0x48>
 8005788:	2010      	movs	r0, #16
 800578a:	f7ff fe29 	bl	80053e0 <malloc>
 800578e:	4602      	mov	r2, r0
 8005790:	6270      	str	r0, [r6, #36]	; 0x24
 8005792:	b928      	cbnz	r0, 80057a0 <__pow5mult+0x40>
 8005794:	4b1d      	ldr	r3, [pc, #116]	; (800580c <__pow5mult+0xac>)
 8005796:	481e      	ldr	r0, [pc, #120]	; (8005810 <__pow5mult+0xb0>)
 8005798:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800579c:	f000 fbca 	bl	8005f34 <__assert_func>
 80057a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057a4:	6004      	str	r4, [r0, #0]
 80057a6:	60c4      	str	r4, [r0, #12]
 80057a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057b0:	b94c      	cbnz	r4, 80057c6 <__pow5mult+0x66>
 80057b2:	f240 2171 	movw	r1, #625	; 0x271
 80057b6:	4630      	mov	r0, r6
 80057b8:	f7ff ff16 	bl	80055e8 <__i2b>
 80057bc:	2300      	movs	r3, #0
 80057be:	f8c8 0008 	str.w	r0, [r8, #8]
 80057c2:	4604      	mov	r4, r0
 80057c4:	6003      	str	r3, [r0, #0]
 80057c6:	f04f 0900 	mov.w	r9, #0
 80057ca:	07eb      	lsls	r3, r5, #31
 80057cc:	d50a      	bpl.n	80057e4 <__pow5mult+0x84>
 80057ce:	4639      	mov	r1, r7
 80057d0:	4622      	mov	r2, r4
 80057d2:	4630      	mov	r0, r6
 80057d4:	f7ff ff1e 	bl	8005614 <__multiply>
 80057d8:	4639      	mov	r1, r7
 80057da:	4680      	mov	r8, r0
 80057dc:	4630      	mov	r0, r6
 80057de:	f7ff fe47 	bl	8005470 <_Bfree>
 80057e2:	4647      	mov	r7, r8
 80057e4:	106d      	asrs	r5, r5, #1
 80057e6:	d00b      	beq.n	8005800 <__pow5mult+0xa0>
 80057e8:	6820      	ldr	r0, [r4, #0]
 80057ea:	b938      	cbnz	r0, 80057fc <__pow5mult+0x9c>
 80057ec:	4622      	mov	r2, r4
 80057ee:	4621      	mov	r1, r4
 80057f0:	4630      	mov	r0, r6
 80057f2:	f7ff ff0f 	bl	8005614 <__multiply>
 80057f6:	6020      	str	r0, [r4, #0]
 80057f8:	f8c0 9000 	str.w	r9, [r0]
 80057fc:	4604      	mov	r4, r0
 80057fe:	e7e4      	b.n	80057ca <__pow5mult+0x6a>
 8005800:	4638      	mov	r0, r7
 8005802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005806:	bf00      	nop
 8005808:	080070c8 	.word	0x080070c8
 800580c:	08006eed 	.word	0x08006eed
 8005810:	08006f74 	.word	0x08006f74

08005814 <__lshift>:
 8005814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005818:	460c      	mov	r4, r1
 800581a:	6849      	ldr	r1, [r1, #4]
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005822:	68a3      	ldr	r3, [r4, #8]
 8005824:	4607      	mov	r7, r0
 8005826:	4691      	mov	r9, r2
 8005828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800582c:	f108 0601 	add.w	r6, r8, #1
 8005830:	42b3      	cmp	r3, r6
 8005832:	db0b      	blt.n	800584c <__lshift+0x38>
 8005834:	4638      	mov	r0, r7
 8005836:	f7ff fddb 	bl	80053f0 <_Balloc>
 800583a:	4605      	mov	r5, r0
 800583c:	b948      	cbnz	r0, 8005852 <__lshift+0x3e>
 800583e:	4602      	mov	r2, r0
 8005840:	4b28      	ldr	r3, [pc, #160]	; (80058e4 <__lshift+0xd0>)
 8005842:	4829      	ldr	r0, [pc, #164]	; (80058e8 <__lshift+0xd4>)
 8005844:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005848:	f000 fb74 	bl	8005f34 <__assert_func>
 800584c:	3101      	adds	r1, #1
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	e7ee      	b.n	8005830 <__lshift+0x1c>
 8005852:	2300      	movs	r3, #0
 8005854:	f100 0114 	add.w	r1, r0, #20
 8005858:	f100 0210 	add.w	r2, r0, #16
 800585c:	4618      	mov	r0, r3
 800585e:	4553      	cmp	r3, sl
 8005860:	db33      	blt.n	80058ca <__lshift+0xb6>
 8005862:	6920      	ldr	r0, [r4, #16]
 8005864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005868:	f104 0314 	add.w	r3, r4, #20
 800586c:	f019 091f 	ands.w	r9, r9, #31
 8005870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005874:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005878:	d02b      	beq.n	80058d2 <__lshift+0xbe>
 800587a:	f1c9 0e20 	rsb	lr, r9, #32
 800587e:	468a      	mov	sl, r1
 8005880:	2200      	movs	r2, #0
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	fa00 f009 	lsl.w	r0, r0, r9
 8005888:	4302      	orrs	r2, r0
 800588a:	f84a 2b04 	str.w	r2, [sl], #4
 800588e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005892:	459c      	cmp	ip, r3
 8005894:	fa22 f20e 	lsr.w	r2, r2, lr
 8005898:	d8f3      	bhi.n	8005882 <__lshift+0x6e>
 800589a:	ebac 0304 	sub.w	r3, ip, r4
 800589e:	3b15      	subs	r3, #21
 80058a0:	f023 0303 	bic.w	r3, r3, #3
 80058a4:	3304      	adds	r3, #4
 80058a6:	f104 0015 	add.w	r0, r4, #21
 80058aa:	4584      	cmp	ip, r0
 80058ac:	bf38      	it	cc
 80058ae:	2304      	movcc	r3, #4
 80058b0:	50ca      	str	r2, [r1, r3]
 80058b2:	b10a      	cbz	r2, 80058b8 <__lshift+0xa4>
 80058b4:	f108 0602 	add.w	r6, r8, #2
 80058b8:	3e01      	subs	r6, #1
 80058ba:	4638      	mov	r0, r7
 80058bc:	612e      	str	r6, [r5, #16]
 80058be:	4621      	mov	r1, r4
 80058c0:	f7ff fdd6 	bl	8005470 <_Bfree>
 80058c4:	4628      	mov	r0, r5
 80058c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80058ce:	3301      	adds	r3, #1
 80058d0:	e7c5      	b.n	800585e <__lshift+0x4a>
 80058d2:	3904      	subs	r1, #4
 80058d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80058dc:	459c      	cmp	ip, r3
 80058de:	d8f9      	bhi.n	80058d4 <__lshift+0xc0>
 80058e0:	e7ea      	b.n	80058b8 <__lshift+0xa4>
 80058e2:	bf00      	nop
 80058e4:	08006f63 	.word	0x08006f63
 80058e8:	08006f74 	.word	0x08006f74

080058ec <__mcmp>:
 80058ec:	b530      	push	{r4, r5, lr}
 80058ee:	6902      	ldr	r2, [r0, #16]
 80058f0:	690c      	ldr	r4, [r1, #16]
 80058f2:	1b12      	subs	r2, r2, r4
 80058f4:	d10e      	bne.n	8005914 <__mcmp+0x28>
 80058f6:	f100 0314 	add.w	r3, r0, #20
 80058fa:	3114      	adds	r1, #20
 80058fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005900:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005904:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005908:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800590c:	42a5      	cmp	r5, r4
 800590e:	d003      	beq.n	8005918 <__mcmp+0x2c>
 8005910:	d305      	bcc.n	800591e <__mcmp+0x32>
 8005912:	2201      	movs	r2, #1
 8005914:	4610      	mov	r0, r2
 8005916:	bd30      	pop	{r4, r5, pc}
 8005918:	4283      	cmp	r3, r0
 800591a:	d3f3      	bcc.n	8005904 <__mcmp+0x18>
 800591c:	e7fa      	b.n	8005914 <__mcmp+0x28>
 800591e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005922:	e7f7      	b.n	8005914 <__mcmp+0x28>

08005924 <__mdiff>:
 8005924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	460c      	mov	r4, r1
 800592a:	4606      	mov	r6, r0
 800592c:	4611      	mov	r1, r2
 800592e:	4620      	mov	r0, r4
 8005930:	4617      	mov	r7, r2
 8005932:	f7ff ffdb 	bl	80058ec <__mcmp>
 8005936:	1e05      	subs	r5, r0, #0
 8005938:	d110      	bne.n	800595c <__mdiff+0x38>
 800593a:	4629      	mov	r1, r5
 800593c:	4630      	mov	r0, r6
 800593e:	f7ff fd57 	bl	80053f0 <_Balloc>
 8005942:	b930      	cbnz	r0, 8005952 <__mdiff+0x2e>
 8005944:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <__mdiff+0x108>)
 8005946:	4602      	mov	r2, r0
 8005948:	f240 2132 	movw	r1, #562	; 0x232
 800594c:	4838      	ldr	r0, [pc, #224]	; (8005a30 <__mdiff+0x10c>)
 800594e:	f000 faf1 	bl	8005f34 <__assert_func>
 8005952:	2301      	movs	r3, #1
 8005954:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595c:	bfa4      	itt	ge
 800595e:	463b      	movge	r3, r7
 8005960:	4627      	movge	r7, r4
 8005962:	4630      	mov	r0, r6
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	bfa6      	itte	ge
 8005968:	461c      	movge	r4, r3
 800596a:	2500      	movge	r5, #0
 800596c:	2501      	movlt	r5, #1
 800596e:	f7ff fd3f 	bl	80053f0 <_Balloc>
 8005972:	b920      	cbnz	r0, 800597e <__mdiff+0x5a>
 8005974:	4b2d      	ldr	r3, [pc, #180]	; (8005a2c <__mdiff+0x108>)
 8005976:	4602      	mov	r2, r0
 8005978:	f44f 7110 	mov.w	r1, #576	; 0x240
 800597c:	e7e6      	b.n	800594c <__mdiff+0x28>
 800597e:	693e      	ldr	r6, [r7, #16]
 8005980:	60c5      	str	r5, [r0, #12]
 8005982:	6925      	ldr	r5, [r4, #16]
 8005984:	f107 0114 	add.w	r1, r7, #20
 8005988:	f104 0914 	add.w	r9, r4, #20
 800598c:	f100 0e14 	add.w	lr, r0, #20
 8005990:	f107 0210 	add.w	r2, r7, #16
 8005994:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005998:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800599c:	46f2      	mov	sl, lr
 800599e:	2700      	movs	r7, #0
 80059a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80059a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80059a8:	fa1f f883 	uxth.w	r8, r3
 80059ac:	fa17 f78b 	uxtah	r7, r7, fp
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	eba7 0808 	sub.w	r8, r7, r8
 80059b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80059ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80059be:	fa1f f888 	uxth.w	r8, r8
 80059c2:	141f      	asrs	r7, r3, #16
 80059c4:	454d      	cmp	r5, r9
 80059c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80059ca:	f84a 3b04 	str.w	r3, [sl], #4
 80059ce:	d8e7      	bhi.n	80059a0 <__mdiff+0x7c>
 80059d0:	1b2b      	subs	r3, r5, r4
 80059d2:	3b15      	subs	r3, #21
 80059d4:	f023 0303 	bic.w	r3, r3, #3
 80059d8:	3304      	adds	r3, #4
 80059da:	3415      	adds	r4, #21
 80059dc:	42a5      	cmp	r5, r4
 80059de:	bf38      	it	cc
 80059e0:	2304      	movcc	r3, #4
 80059e2:	4419      	add	r1, r3
 80059e4:	4473      	add	r3, lr
 80059e6:	469e      	mov	lr, r3
 80059e8:	460d      	mov	r5, r1
 80059ea:	4565      	cmp	r5, ip
 80059ec:	d30e      	bcc.n	8005a0c <__mdiff+0xe8>
 80059ee:	f10c 0203 	add.w	r2, ip, #3
 80059f2:	1a52      	subs	r2, r2, r1
 80059f4:	f022 0203 	bic.w	r2, r2, #3
 80059f8:	3903      	subs	r1, #3
 80059fa:	458c      	cmp	ip, r1
 80059fc:	bf38      	it	cc
 80059fe:	2200      	movcc	r2, #0
 8005a00:	441a      	add	r2, r3
 8005a02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005a06:	b17b      	cbz	r3, 8005a28 <__mdiff+0x104>
 8005a08:	6106      	str	r6, [r0, #16]
 8005a0a:	e7a5      	b.n	8005958 <__mdiff+0x34>
 8005a0c:	f855 8b04 	ldr.w	r8, [r5], #4
 8005a10:	fa17 f488 	uxtah	r4, r7, r8
 8005a14:	1422      	asrs	r2, r4, #16
 8005a16:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005a1a:	b2a4      	uxth	r4, r4
 8005a1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005a20:	f84e 4b04 	str.w	r4, [lr], #4
 8005a24:	1417      	asrs	r7, r2, #16
 8005a26:	e7e0      	b.n	80059ea <__mdiff+0xc6>
 8005a28:	3e01      	subs	r6, #1
 8005a2a:	e7ea      	b.n	8005a02 <__mdiff+0xde>
 8005a2c:	08006f63 	.word	0x08006f63
 8005a30:	08006f74 	.word	0x08006f74

08005a34 <__d2b>:
 8005a34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a38:	2101      	movs	r1, #1
 8005a3a:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 8005a3e:	4690      	mov	r8, r2
 8005a40:	4699      	mov	r9, r3
 8005a42:	f7ff fcd5 	bl	80053f0 <_Balloc>
 8005a46:	4604      	mov	r4, r0
 8005a48:	b930      	cbnz	r0, 8005a58 <__d2b+0x24>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <__d2b+0xac>)
 8005a4e:	4825      	ldr	r0, [pc, #148]	; (8005ae4 <__d2b+0xb0>)
 8005a50:	f240 310a 	movw	r1, #778	; 0x30a
 8005a54:	f000 fa6e 	bl	8005f34 <__assert_func>
 8005a58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a60:	bb2d      	cbnz	r5, 8005aae <__d2b+0x7a>
 8005a62:	f1b8 0200 	subs.w	r2, r8, #0
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	d026      	beq.n	8005ab8 <__d2b+0x84>
 8005a6a:	4668      	mov	r0, sp
 8005a6c:	9200      	str	r2, [sp, #0]
 8005a6e:	f7ff fd8b 	bl	8005588 <__lo0bits>
 8005a72:	9900      	ldr	r1, [sp, #0]
 8005a74:	b1f0      	cbz	r0, 8005ab4 <__d2b+0x80>
 8005a76:	9a01      	ldr	r2, [sp, #4]
 8005a78:	f1c0 0320 	rsb	r3, r0, #32
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	430b      	orrs	r3, r1
 8005a82:	40c2      	lsrs	r2, r0
 8005a84:	6163      	str	r3, [r4, #20]
 8005a86:	9201      	str	r2, [sp, #4]
 8005a88:	9b01      	ldr	r3, [sp, #4]
 8005a8a:	61a3      	str	r3, [r4, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf14      	ite	ne
 8005a90:	2202      	movne	r2, #2
 8005a92:	2201      	moveq	r2, #1
 8005a94:	6122      	str	r2, [r4, #16]
 8005a96:	b1c5      	cbz	r5, 8005aca <__d2b+0x96>
 8005a98:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005a9c:	4405      	add	r5, r0
 8005a9e:	603d      	str	r5, [r7, #0]
 8005aa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005aa4:	6030      	str	r0, [r6, #0]
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	b003      	add	sp, #12
 8005aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ab2:	e7d6      	b.n	8005a62 <__d2b+0x2e>
 8005ab4:	6161      	str	r1, [r4, #20]
 8005ab6:	e7e7      	b.n	8005a88 <__d2b+0x54>
 8005ab8:	a801      	add	r0, sp, #4
 8005aba:	f7ff fd65 	bl	8005588 <__lo0bits>
 8005abe:	9b01      	ldr	r3, [sp, #4]
 8005ac0:	6163      	str	r3, [r4, #20]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	6122      	str	r2, [r4, #16]
 8005ac6:	3020      	adds	r0, #32
 8005ac8:	e7e5      	b.n	8005a96 <__d2b+0x62>
 8005aca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ace:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ad2:	6038      	str	r0, [r7, #0]
 8005ad4:	6918      	ldr	r0, [r3, #16]
 8005ad6:	f7ff fd37 	bl	8005548 <__hi0bits>
 8005ada:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ade:	e7e1      	b.n	8005aa4 <__d2b+0x70>
 8005ae0:	08006f63 	.word	0x08006f63
 8005ae4:	08006f74 	.word	0x08006f74

08005ae8 <_calloc_r>:
 8005ae8:	b513      	push	{r0, r1, r4, lr}
 8005aea:	434a      	muls	r2, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	9201      	str	r2, [sp, #4]
 8005af0:	f000 f85a 	bl	8005ba8 <_malloc_r>
 8005af4:	4604      	mov	r4, r0
 8005af6:	b118      	cbz	r0, 8005b00 <_calloc_r+0x18>
 8005af8:	9a01      	ldr	r2, [sp, #4]
 8005afa:	2100      	movs	r1, #0
 8005afc:	f7fe f95e 	bl	8003dbc <memset>
 8005b00:	4620      	mov	r0, r4
 8005b02:	b002      	add	sp, #8
 8005b04:	bd10      	pop	{r4, pc}
	...

08005b08 <_free_r>:
 8005b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b0a:	2900      	cmp	r1, #0
 8005b0c:	d048      	beq.n	8005ba0 <_free_r+0x98>
 8005b0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b12:	9001      	str	r0, [sp, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f1a1 0404 	sub.w	r4, r1, #4
 8005b1a:	bfb8      	it	lt
 8005b1c:	18e4      	addlt	r4, r4, r3
 8005b1e:	f000 fa65 	bl	8005fec <__malloc_lock>
 8005b22:	4a20      	ldr	r2, [pc, #128]	; (8005ba4 <_free_r+0x9c>)
 8005b24:	9801      	ldr	r0, [sp, #4]
 8005b26:	6813      	ldr	r3, [r2, #0]
 8005b28:	4615      	mov	r5, r2
 8005b2a:	b933      	cbnz	r3, 8005b3a <_free_r+0x32>
 8005b2c:	6063      	str	r3, [r4, #4]
 8005b2e:	6014      	str	r4, [r2, #0]
 8005b30:	b003      	add	sp, #12
 8005b32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b36:	f000 ba5f 	b.w	8005ff8 <__malloc_unlock>
 8005b3a:	42a3      	cmp	r3, r4
 8005b3c:	d90b      	bls.n	8005b56 <_free_r+0x4e>
 8005b3e:	6821      	ldr	r1, [r4, #0]
 8005b40:	1862      	adds	r2, r4, r1
 8005b42:	4293      	cmp	r3, r2
 8005b44:	bf04      	itt	eq
 8005b46:	681a      	ldreq	r2, [r3, #0]
 8005b48:	685b      	ldreq	r3, [r3, #4]
 8005b4a:	6063      	str	r3, [r4, #4]
 8005b4c:	bf04      	itt	eq
 8005b4e:	1852      	addeq	r2, r2, r1
 8005b50:	6022      	streq	r2, [r4, #0]
 8005b52:	602c      	str	r4, [r5, #0]
 8005b54:	e7ec      	b.n	8005b30 <_free_r+0x28>
 8005b56:	461a      	mov	r2, r3
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b10b      	cbz	r3, 8005b60 <_free_r+0x58>
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	d9fa      	bls.n	8005b56 <_free_r+0x4e>
 8005b60:	6811      	ldr	r1, [r2, #0]
 8005b62:	1855      	adds	r5, r2, r1
 8005b64:	42a5      	cmp	r5, r4
 8005b66:	d10b      	bne.n	8005b80 <_free_r+0x78>
 8005b68:	6824      	ldr	r4, [r4, #0]
 8005b6a:	4421      	add	r1, r4
 8005b6c:	1854      	adds	r4, r2, r1
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	6011      	str	r1, [r2, #0]
 8005b72:	d1dd      	bne.n	8005b30 <_free_r+0x28>
 8005b74:	681c      	ldr	r4, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	6053      	str	r3, [r2, #4]
 8005b7a:	4421      	add	r1, r4
 8005b7c:	6011      	str	r1, [r2, #0]
 8005b7e:	e7d7      	b.n	8005b30 <_free_r+0x28>
 8005b80:	d902      	bls.n	8005b88 <_free_r+0x80>
 8005b82:	230c      	movs	r3, #12
 8005b84:	6003      	str	r3, [r0, #0]
 8005b86:	e7d3      	b.n	8005b30 <_free_r+0x28>
 8005b88:	6825      	ldr	r5, [r4, #0]
 8005b8a:	1961      	adds	r1, r4, r5
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	bf04      	itt	eq
 8005b90:	6819      	ldreq	r1, [r3, #0]
 8005b92:	685b      	ldreq	r3, [r3, #4]
 8005b94:	6063      	str	r3, [r4, #4]
 8005b96:	bf04      	itt	eq
 8005b98:	1949      	addeq	r1, r1, r5
 8005b9a:	6021      	streq	r1, [r4, #0]
 8005b9c:	6054      	str	r4, [r2, #4]
 8005b9e:	e7c7      	b.n	8005b30 <_free_r+0x28>
 8005ba0:	b003      	add	sp, #12
 8005ba2:	bd30      	pop	{r4, r5, pc}
 8005ba4:	200007c0 	.word	0x200007c0

08005ba8 <_malloc_r>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	1ccd      	adds	r5, r1, #3
 8005bac:	f025 0503 	bic.w	r5, r5, #3
 8005bb0:	3508      	adds	r5, #8
 8005bb2:	2d0c      	cmp	r5, #12
 8005bb4:	bf38      	it	cc
 8005bb6:	250c      	movcc	r5, #12
 8005bb8:	2d00      	cmp	r5, #0
 8005bba:	4606      	mov	r6, r0
 8005bbc:	db01      	blt.n	8005bc2 <_malloc_r+0x1a>
 8005bbe:	42a9      	cmp	r1, r5
 8005bc0:	d903      	bls.n	8005bca <_malloc_r+0x22>
 8005bc2:	230c      	movs	r3, #12
 8005bc4:	6033      	str	r3, [r6, #0]
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bca:	f000 fa0f 	bl	8005fec <__malloc_lock>
 8005bce:	4921      	ldr	r1, [pc, #132]	; (8005c54 <_malloc_r+0xac>)
 8005bd0:	680a      	ldr	r2, [r1, #0]
 8005bd2:	4614      	mov	r4, r2
 8005bd4:	b99c      	cbnz	r4, 8005bfe <_malloc_r+0x56>
 8005bd6:	4f20      	ldr	r7, [pc, #128]	; (8005c58 <_malloc_r+0xb0>)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	b923      	cbnz	r3, 8005be6 <_malloc_r+0x3e>
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4630      	mov	r0, r6
 8005be0:	f000 f998 	bl	8005f14 <_sbrk_r>
 8005be4:	6038      	str	r0, [r7, #0]
 8005be6:	4629      	mov	r1, r5
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 f993 	bl	8005f14 <_sbrk_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d123      	bne.n	8005c3a <_malloc_r+0x92>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	6033      	str	r3, [r6, #0]
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	f000 f9fe 	bl	8005ff8 <__malloc_unlock>
 8005bfc:	e7e3      	b.n	8005bc6 <_malloc_r+0x1e>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	1b5b      	subs	r3, r3, r5
 8005c02:	d417      	bmi.n	8005c34 <_malloc_r+0x8c>
 8005c04:	2b0b      	cmp	r3, #11
 8005c06:	d903      	bls.n	8005c10 <_malloc_r+0x68>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	441c      	add	r4, r3
 8005c0c:	6025      	str	r5, [r4, #0]
 8005c0e:	e004      	b.n	8005c1a <_malloc_r+0x72>
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	42a2      	cmp	r2, r4
 8005c14:	bf0c      	ite	eq
 8005c16:	600b      	streq	r3, [r1, #0]
 8005c18:	6053      	strne	r3, [r2, #4]
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f000 f9ec 	bl	8005ff8 <__malloc_unlock>
 8005c20:	f104 000b 	add.w	r0, r4, #11
 8005c24:	1d23      	adds	r3, r4, #4
 8005c26:	f020 0007 	bic.w	r0, r0, #7
 8005c2a:	1ac2      	subs	r2, r0, r3
 8005c2c:	d0cc      	beq.n	8005bc8 <_malloc_r+0x20>
 8005c2e:	1a1b      	subs	r3, r3, r0
 8005c30:	50a3      	str	r3, [r4, r2]
 8005c32:	e7c9      	b.n	8005bc8 <_malloc_r+0x20>
 8005c34:	4622      	mov	r2, r4
 8005c36:	6864      	ldr	r4, [r4, #4]
 8005c38:	e7cc      	b.n	8005bd4 <_malloc_r+0x2c>
 8005c3a:	1cc4      	adds	r4, r0, #3
 8005c3c:	f024 0403 	bic.w	r4, r4, #3
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d0e3      	beq.n	8005c0c <_malloc_r+0x64>
 8005c44:	1a21      	subs	r1, r4, r0
 8005c46:	4630      	mov	r0, r6
 8005c48:	f000 f964 	bl	8005f14 <_sbrk_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d1dd      	bne.n	8005c0c <_malloc_r+0x64>
 8005c50:	e7cf      	b.n	8005bf2 <_malloc_r+0x4a>
 8005c52:	bf00      	nop
 8005c54:	200007c0 	.word	0x200007c0
 8005c58:	200007c4 	.word	0x200007c4

08005c5c <__ssputs_r>:
 8005c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	688e      	ldr	r6, [r1, #8]
 8005c62:	429e      	cmp	r6, r3
 8005c64:	4682      	mov	sl, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	4690      	mov	r8, r2
 8005c6a:	461f      	mov	r7, r3
 8005c6c:	d838      	bhi.n	8005ce0 <__ssputs_r+0x84>
 8005c6e:	898a      	ldrh	r2, [r1, #12]
 8005c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c74:	d032      	beq.n	8005cdc <__ssputs_r+0x80>
 8005c76:	6825      	ldr	r5, [r4, #0]
 8005c78:	6909      	ldr	r1, [r1, #16]
 8005c7a:	eba5 0901 	sub.w	r9, r5, r1
 8005c7e:	6965      	ldr	r5, [r4, #20]
 8005c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c88:	3301      	adds	r3, #1
 8005c8a:	444b      	add	r3, r9
 8005c8c:	106d      	asrs	r5, r5, #1
 8005c8e:	429d      	cmp	r5, r3
 8005c90:	bf38      	it	cc
 8005c92:	461d      	movcc	r5, r3
 8005c94:	0553      	lsls	r3, r2, #21
 8005c96:	d531      	bpl.n	8005cfc <__ssputs_r+0xa0>
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7ff ff85 	bl	8005ba8 <_malloc_r>
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	b950      	cbnz	r0, 8005cb8 <__ssputs_r+0x5c>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	f8ca 3000 	str.w	r3, [sl]
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb8:	6921      	ldr	r1, [r4, #16]
 8005cba:	464a      	mov	r2, r9
 8005cbc:	f7fe f870 	bl	8003da0 <memcpy>
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	6126      	str	r6, [r4, #16]
 8005cce:	6165      	str	r5, [r4, #20]
 8005cd0:	444e      	add	r6, r9
 8005cd2:	eba5 0509 	sub.w	r5, r5, r9
 8005cd6:	6026      	str	r6, [r4, #0]
 8005cd8:	60a5      	str	r5, [r4, #8]
 8005cda:	463e      	mov	r6, r7
 8005cdc:	42be      	cmp	r6, r7
 8005cde:	d900      	bls.n	8005ce2 <__ssputs_r+0x86>
 8005ce0:	463e      	mov	r6, r7
 8005ce2:	4632      	mov	r2, r6
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	4641      	mov	r1, r8
 8005ce8:	f000 f966 	bl	8005fb8 <memmove>
 8005cec:	68a3      	ldr	r3, [r4, #8]
 8005cee:	6822      	ldr	r2, [r4, #0]
 8005cf0:	1b9b      	subs	r3, r3, r6
 8005cf2:	4432      	add	r2, r6
 8005cf4:	60a3      	str	r3, [r4, #8]
 8005cf6:	6022      	str	r2, [r4, #0]
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e7db      	b.n	8005cb4 <__ssputs_r+0x58>
 8005cfc:	462a      	mov	r2, r5
 8005cfe:	f000 f981 	bl	8006004 <_realloc_r>
 8005d02:	4606      	mov	r6, r0
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d1e1      	bne.n	8005ccc <__ssputs_r+0x70>
 8005d08:	6921      	ldr	r1, [r4, #16]
 8005d0a:	4650      	mov	r0, sl
 8005d0c:	f7ff fefc 	bl	8005b08 <_free_r>
 8005d10:	e7c7      	b.n	8005ca2 <__ssputs_r+0x46>
	...

08005d14 <_svfiprintf_r>:
 8005d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d18:	4698      	mov	r8, r3
 8005d1a:	898b      	ldrh	r3, [r1, #12]
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	b09d      	sub	sp, #116	; 0x74
 8005d20:	4607      	mov	r7, r0
 8005d22:	460d      	mov	r5, r1
 8005d24:	4614      	mov	r4, r2
 8005d26:	d50e      	bpl.n	8005d46 <_svfiprintf_r+0x32>
 8005d28:	690b      	ldr	r3, [r1, #16]
 8005d2a:	b963      	cbnz	r3, 8005d46 <_svfiprintf_r+0x32>
 8005d2c:	2140      	movs	r1, #64	; 0x40
 8005d2e:	f7ff ff3b 	bl	8005ba8 <_malloc_r>
 8005d32:	6028      	str	r0, [r5, #0]
 8005d34:	6128      	str	r0, [r5, #16]
 8005d36:	b920      	cbnz	r0, 8005d42 <_svfiprintf_r+0x2e>
 8005d38:	230c      	movs	r3, #12
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d40:	e0d1      	b.n	8005ee6 <_svfiprintf_r+0x1d2>
 8005d42:	2340      	movs	r3, #64	; 0x40
 8005d44:	616b      	str	r3, [r5, #20]
 8005d46:	2300      	movs	r3, #0
 8005d48:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4a:	2320      	movs	r3, #32
 8005d4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d54:	2330      	movs	r3, #48	; 0x30
 8005d56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f00 <_svfiprintf_r+0x1ec>
 8005d5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d5e:	f04f 0901 	mov.w	r9, #1
 8005d62:	4623      	mov	r3, r4
 8005d64:	469a      	mov	sl, r3
 8005d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d6a:	b10a      	cbz	r2, 8005d70 <_svfiprintf_r+0x5c>
 8005d6c:	2a25      	cmp	r2, #37	; 0x25
 8005d6e:	d1f9      	bne.n	8005d64 <_svfiprintf_r+0x50>
 8005d70:	ebba 0b04 	subs.w	fp, sl, r4
 8005d74:	d00b      	beq.n	8005d8e <_svfiprintf_r+0x7a>
 8005d76:	465b      	mov	r3, fp
 8005d78:	4622      	mov	r2, r4
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	f7ff ff6d 	bl	8005c5c <__ssputs_r>
 8005d82:	3001      	adds	r0, #1
 8005d84:	f000 80aa 	beq.w	8005edc <_svfiprintf_r+0x1c8>
 8005d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d8a:	445a      	add	r2, fp
 8005d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 80a2 	beq.w	8005edc <_svfiprintf_r+0x1c8>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005da2:	f10a 0a01 	add.w	sl, sl, #1
 8005da6:	9304      	str	r3, [sp, #16]
 8005da8:	9307      	str	r3, [sp, #28]
 8005daa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dae:	931a      	str	r3, [sp, #104]	; 0x68
 8005db0:	4654      	mov	r4, sl
 8005db2:	2205      	movs	r2, #5
 8005db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db8:	4851      	ldr	r0, [pc, #324]	; (8005f00 <_svfiprintf_r+0x1ec>)
 8005dba:	f7fa fa71 	bl	80002a0 <memchr>
 8005dbe:	9a04      	ldr	r2, [sp, #16]
 8005dc0:	b9d8      	cbnz	r0, 8005dfa <_svfiprintf_r+0xe6>
 8005dc2:	06d0      	lsls	r0, r2, #27
 8005dc4:	bf44      	itt	mi
 8005dc6:	2320      	movmi	r3, #32
 8005dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dcc:	0711      	lsls	r1, r2, #28
 8005dce:	bf44      	itt	mi
 8005dd0:	232b      	movmi	r3, #43	; 0x2b
 8005dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dda:	2b2a      	cmp	r3, #42	; 0x2a
 8005ddc:	d015      	beq.n	8005e0a <_svfiprintf_r+0xf6>
 8005dde:	9a07      	ldr	r2, [sp, #28]
 8005de0:	4654      	mov	r4, sl
 8005de2:	2000      	movs	r0, #0
 8005de4:	f04f 0c0a 	mov.w	ip, #10
 8005de8:	4621      	mov	r1, r4
 8005dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dee:	3b30      	subs	r3, #48	; 0x30
 8005df0:	2b09      	cmp	r3, #9
 8005df2:	d94e      	bls.n	8005e92 <_svfiprintf_r+0x17e>
 8005df4:	b1b0      	cbz	r0, 8005e24 <_svfiprintf_r+0x110>
 8005df6:	9207      	str	r2, [sp, #28]
 8005df8:	e014      	b.n	8005e24 <_svfiprintf_r+0x110>
 8005dfa:	eba0 0308 	sub.w	r3, r0, r8
 8005dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8005e02:	4313      	orrs	r3, r2
 8005e04:	9304      	str	r3, [sp, #16]
 8005e06:	46a2      	mov	sl, r4
 8005e08:	e7d2      	b.n	8005db0 <_svfiprintf_r+0x9c>
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	1d19      	adds	r1, r3, #4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	9103      	str	r1, [sp, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bfbb      	ittet	lt
 8005e16:	425b      	neglt	r3, r3
 8005e18:	f042 0202 	orrlt.w	r2, r2, #2
 8005e1c:	9307      	strge	r3, [sp, #28]
 8005e1e:	9307      	strlt	r3, [sp, #28]
 8005e20:	bfb8      	it	lt
 8005e22:	9204      	strlt	r2, [sp, #16]
 8005e24:	7823      	ldrb	r3, [r4, #0]
 8005e26:	2b2e      	cmp	r3, #46	; 0x2e
 8005e28:	d10c      	bne.n	8005e44 <_svfiprintf_r+0x130>
 8005e2a:	7863      	ldrb	r3, [r4, #1]
 8005e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e2e:	d135      	bne.n	8005e9c <_svfiprintf_r+0x188>
 8005e30:	9b03      	ldr	r3, [sp, #12]
 8005e32:	1d1a      	adds	r2, r3, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	9203      	str	r2, [sp, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	bfb8      	it	lt
 8005e3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e40:	3402      	adds	r4, #2
 8005e42:	9305      	str	r3, [sp, #20]
 8005e44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f10 <_svfiprintf_r+0x1fc>
 8005e48:	7821      	ldrb	r1, [r4, #0]
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	4650      	mov	r0, sl
 8005e4e:	f7fa fa27 	bl	80002a0 <memchr>
 8005e52:	b140      	cbz	r0, 8005e66 <_svfiprintf_r+0x152>
 8005e54:	2340      	movs	r3, #64	; 0x40
 8005e56:	eba0 000a 	sub.w	r0, r0, sl
 8005e5a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e5e:	9b04      	ldr	r3, [sp, #16]
 8005e60:	4303      	orrs	r3, r0
 8005e62:	3401      	adds	r4, #1
 8005e64:	9304      	str	r3, [sp, #16]
 8005e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e6a:	4826      	ldr	r0, [pc, #152]	; (8005f04 <_svfiprintf_r+0x1f0>)
 8005e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e70:	2206      	movs	r2, #6
 8005e72:	f7fa fa15 	bl	80002a0 <memchr>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d038      	beq.n	8005eec <_svfiprintf_r+0x1d8>
 8005e7a:	4b23      	ldr	r3, [pc, #140]	; (8005f08 <_svfiprintf_r+0x1f4>)
 8005e7c:	bb1b      	cbnz	r3, 8005ec6 <_svfiprintf_r+0x1b2>
 8005e7e:	9b03      	ldr	r3, [sp, #12]
 8005e80:	3307      	adds	r3, #7
 8005e82:	f023 0307 	bic.w	r3, r3, #7
 8005e86:	3308      	adds	r3, #8
 8005e88:	9303      	str	r3, [sp, #12]
 8005e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e8c:	4433      	add	r3, r6
 8005e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e90:	e767      	b.n	8005d62 <_svfiprintf_r+0x4e>
 8005e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e96:	460c      	mov	r4, r1
 8005e98:	2001      	movs	r0, #1
 8005e9a:	e7a5      	b.n	8005de8 <_svfiprintf_r+0xd4>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	3401      	adds	r4, #1
 8005ea0:	9305      	str	r3, [sp, #20]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	f04f 0c0a 	mov.w	ip, #10
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eae:	3a30      	subs	r2, #48	; 0x30
 8005eb0:	2a09      	cmp	r2, #9
 8005eb2:	d903      	bls.n	8005ebc <_svfiprintf_r+0x1a8>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0c5      	beq.n	8005e44 <_svfiprintf_r+0x130>
 8005eb8:	9105      	str	r1, [sp, #20]
 8005eba:	e7c3      	b.n	8005e44 <_svfiprintf_r+0x130>
 8005ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e7f0      	b.n	8005ea8 <_svfiprintf_r+0x194>
 8005ec6:	ab03      	add	r3, sp, #12
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	462a      	mov	r2, r5
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <_svfiprintf_r+0x1f8>)
 8005ece:	a904      	add	r1, sp, #16
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f7fe f81b 	bl	8003f0c <_printf_float>
 8005ed6:	1c42      	adds	r2, r0, #1
 8005ed8:	4606      	mov	r6, r0
 8005eda:	d1d6      	bne.n	8005e8a <_svfiprintf_r+0x176>
 8005edc:	89ab      	ldrh	r3, [r5, #12]
 8005ede:	065b      	lsls	r3, r3, #25
 8005ee0:	f53f af2c 	bmi.w	8005d3c <_svfiprintf_r+0x28>
 8005ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ee6:	b01d      	add	sp, #116	; 0x74
 8005ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eec:	ab03      	add	r3, sp, #12
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	462a      	mov	r2, r5
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <_svfiprintf_r+0x1f8>)
 8005ef4:	a904      	add	r1, sp, #16
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f7fe faae 	bl	8004458 <_printf_i>
 8005efc:	e7eb      	b.n	8005ed6 <_svfiprintf_r+0x1c2>
 8005efe:	bf00      	nop
 8005f00:	080070d4 	.word	0x080070d4
 8005f04:	080070de 	.word	0x080070de
 8005f08:	08003f0d 	.word	0x08003f0d
 8005f0c:	08005c5d 	.word	0x08005c5d
 8005f10:	080070da 	.word	0x080070da

08005f14 <_sbrk_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d06      	ldr	r5, [pc, #24]	; (8005f30 <_sbrk_r+0x1c>)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	f7fd fea6 	bl	8003c70 <_sbrk>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_sbrk_r+0x1a>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_sbrk_r+0x1a>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	20000a94 	.word	0x20000a94

08005f34 <__assert_func>:
 8005f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f36:	4614      	mov	r4, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4b09      	ldr	r3, [pc, #36]	; (8005f60 <__assert_func+0x2c>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4605      	mov	r5, r0
 8005f40:	68d8      	ldr	r0, [r3, #12]
 8005f42:	b14c      	cbz	r4, 8005f58 <__assert_func+0x24>
 8005f44:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <__assert_func+0x30>)
 8005f46:	9100      	str	r1, [sp, #0]
 8005f48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f4c:	4906      	ldr	r1, [pc, #24]	; (8005f68 <__assert_func+0x34>)
 8005f4e:	462b      	mov	r3, r5
 8005f50:	f000 f80e 	bl	8005f70 <fiprintf>
 8005f54:	f000 faa4 	bl	80064a0 <abort>
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <__assert_func+0x38>)
 8005f5a:	461c      	mov	r4, r3
 8005f5c:	e7f3      	b.n	8005f46 <__assert_func+0x12>
 8005f5e:	bf00      	nop
 8005f60:	20000014 	.word	0x20000014
 8005f64:	080070e5 	.word	0x080070e5
 8005f68:	080070f2 	.word	0x080070f2
 8005f6c:	08007120 	.word	0x08007120

08005f70 <fiprintf>:
 8005f70:	b40e      	push	{r1, r2, r3}
 8005f72:	b503      	push	{r0, r1, lr}
 8005f74:	4601      	mov	r1, r0
 8005f76:	ab03      	add	r3, sp, #12
 8005f78:	4805      	ldr	r0, [pc, #20]	; (8005f90 <fiprintf+0x20>)
 8005f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f7e:	6800      	ldr	r0, [r0, #0]
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	f000 f88f 	bl	80060a4 <_vfiprintf_r>
 8005f86:	b002      	add	sp, #8
 8005f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f8c:	b003      	add	sp, #12
 8005f8e:	4770      	bx	lr
 8005f90:	20000014 	.word	0x20000014

08005f94 <__ascii_mbtowc>:
 8005f94:	b082      	sub	sp, #8
 8005f96:	b901      	cbnz	r1, 8005f9a <__ascii_mbtowc+0x6>
 8005f98:	a901      	add	r1, sp, #4
 8005f9a:	b142      	cbz	r2, 8005fae <__ascii_mbtowc+0x1a>
 8005f9c:	b14b      	cbz	r3, 8005fb2 <__ascii_mbtowc+0x1e>
 8005f9e:	7813      	ldrb	r3, [r2, #0]
 8005fa0:	600b      	str	r3, [r1, #0]
 8005fa2:	7812      	ldrb	r2, [r2, #0]
 8005fa4:	1e10      	subs	r0, r2, #0
 8005fa6:	bf18      	it	ne
 8005fa8:	2001      	movne	r0, #1
 8005faa:	b002      	add	sp, #8
 8005fac:	4770      	bx	lr
 8005fae:	4610      	mov	r0, r2
 8005fb0:	e7fb      	b.n	8005faa <__ascii_mbtowc+0x16>
 8005fb2:	f06f 0001 	mvn.w	r0, #1
 8005fb6:	e7f8      	b.n	8005faa <__ascii_mbtowc+0x16>

08005fb8 <memmove>:
 8005fb8:	4288      	cmp	r0, r1
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	eb01 0402 	add.w	r4, r1, r2
 8005fc0:	d902      	bls.n	8005fc8 <memmove+0x10>
 8005fc2:	4284      	cmp	r4, r0
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	d807      	bhi.n	8005fd8 <memmove+0x20>
 8005fc8:	1e43      	subs	r3, r0, #1
 8005fca:	42a1      	cmp	r1, r4
 8005fcc:	d008      	beq.n	8005fe0 <memmove+0x28>
 8005fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fd6:	e7f8      	b.n	8005fca <memmove+0x12>
 8005fd8:	4402      	add	r2, r0
 8005fda:	4601      	mov	r1, r0
 8005fdc:	428a      	cmp	r2, r1
 8005fde:	d100      	bne.n	8005fe2 <memmove+0x2a>
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fea:	e7f7      	b.n	8005fdc <memmove+0x24>

08005fec <__malloc_lock>:
 8005fec:	4801      	ldr	r0, [pc, #4]	; (8005ff4 <__malloc_lock+0x8>)
 8005fee:	f000 bc17 	b.w	8006820 <__retarget_lock_acquire_recursive>
 8005ff2:	bf00      	nop
 8005ff4:	20000a9c 	.word	0x20000a9c

08005ff8 <__malloc_unlock>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	; (8006000 <__malloc_unlock+0x8>)
 8005ffa:	f000 bc12 	b.w	8006822 <__retarget_lock_release_recursive>
 8005ffe:	bf00      	nop
 8006000:	20000a9c 	.word	0x20000a9c

08006004 <_realloc_r>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	4607      	mov	r7, r0
 8006008:	4614      	mov	r4, r2
 800600a:	460e      	mov	r6, r1
 800600c:	b921      	cbnz	r1, 8006018 <_realloc_r+0x14>
 800600e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006012:	4611      	mov	r1, r2
 8006014:	f7ff bdc8 	b.w	8005ba8 <_malloc_r>
 8006018:	b922      	cbnz	r2, 8006024 <_realloc_r+0x20>
 800601a:	f7ff fd75 	bl	8005b08 <_free_r>
 800601e:	4625      	mov	r5, r4
 8006020:	4628      	mov	r0, r5
 8006022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006024:	f000 fc62 	bl	80068ec <_malloc_usable_size_r>
 8006028:	42a0      	cmp	r0, r4
 800602a:	d20f      	bcs.n	800604c <_realloc_r+0x48>
 800602c:	4621      	mov	r1, r4
 800602e:	4638      	mov	r0, r7
 8006030:	f7ff fdba 	bl	8005ba8 <_malloc_r>
 8006034:	4605      	mov	r5, r0
 8006036:	2800      	cmp	r0, #0
 8006038:	d0f2      	beq.n	8006020 <_realloc_r+0x1c>
 800603a:	4631      	mov	r1, r6
 800603c:	4622      	mov	r2, r4
 800603e:	f7fd feaf 	bl	8003da0 <memcpy>
 8006042:	4631      	mov	r1, r6
 8006044:	4638      	mov	r0, r7
 8006046:	f7ff fd5f 	bl	8005b08 <_free_r>
 800604a:	e7e9      	b.n	8006020 <_realloc_r+0x1c>
 800604c:	4635      	mov	r5, r6
 800604e:	e7e7      	b.n	8006020 <_realloc_r+0x1c>

08006050 <__sfputc_r>:
 8006050:	6893      	ldr	r3, [r2, #8]
 8006052:	3b01      	subs	r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	b410      	push	{r4}
 8006058:	6093      	str	r3, [r2, #8]
 800605a:	da08      	bge.n	800606e <__sfputc_r+0x1e>
 800605c:	6994      	ldr	r4, [r2, #24]
 800605e:	42a3      	cmp	r3, r4
 8006060:	db01      	blt.n	8006066 <__sfputc_r+0x16>
 8006062:	290a      	cmp	r1, #10
 8006064:	d103      	bne.n	800606e <__sfputc_r+0x1e>
 8006066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800606a:	f000 b94b 	b.w	8006304 <__swbuf_r>
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	1c58      	adds	r0, r3, #1
 8006072:	6010      	str	r0, [r2, #0]
 8006074:	7019      	strb	r1, [r3, #0]
 8006076:	4608      	mov	r0, r1
 8006078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800607c:	4770      	bx	lr

0800607e <__sfputs_r>:
 800607e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006080:	4606      	mov	r6, r0
 8006082:	460f      	mov	r7, r1
 8006084:	4614      	mov	r4, r2
 8006086:	18d5      	adds	r5, r2, r3
 8006088:	42ac      	cmp	r4, r5
 800608a:	d101      	bne.n	8006090 <__sfputs_r+0x12>
 800608c:	2000      	movs	r0, #0
 800608e:	e007      	b.n	80060a0 <__sfputs_r+0x22>
 8006090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006094:	463a      	mov	r2, r7
 8006096:	4630      	mov	r0, r6
 8006098:	f7ff ffda 	bl	8006050 <__sfputc_r>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d1f3      	bne.n	8006088 <__sfputs_r+0xa>
 80060a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060a4 <_vfiprintf_r>:
 80060a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a8:	460d      	mov	r5, r1
 80060aa:	b09d      	sub	sp, #116	; 0x74
 80060ac:	4614      	mov	r4, r2
 80060ae:	4698      	mov	r8, r3
 80060b0:	4606      	mov	r6, r0
 80060b2:	b118      	cbz	r0, 80060bc <_vfiprintf_r+0x18>
 80060b4:	6983      	ldr	r3, [r0, #24]
 80060b6:	b90b      	cbnz	r3, 80060bc <_vfiprintf_r+0x18>
 80060b8:	f000 fb14 	bl	80066e4 <__sinit>
 80060bc:	4b89      	ldr	r3, [pc, #548]	; (80062e4 <_vfiprintf_r+0x240>)
 80060be:	429d      	cmp	r5, r3
 80060c0:	d11b      	bne.n	80060fa <_vfiprintf_r+0x56>
 80060c2:	6875      	ldr	r5, [r6, #4]
 80060c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060c6:	07d9      	lsls	r1, r3, #31
 80060c8:	d405      	bmi.n	80060d6 <_vfiprintf_r+0x32>
 80060ca:	89ab      	ldrh	r3, [r5, #12]
 80060cc:	059a      	lsls	r2, r3, #22
 80060ce:	d402      	bmi.n	80060d6 <_vfiprintf_r+0x32>
 80060d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060d2:	f000 fba5 	bl	8006820 <__retarget_lock_acquire_recursive>
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	071b      	lsls	r3, r3, #28
 80060da:	d501      	bpl.n	80060e0 <_vfiprintf_r+0x3c>
 80060dc:	692b      	ldr	r3, [r5, #16]
 80060de:	b9eb      	cbnz	r3, 800611c <_vfiprintf_r+0x78>
 80060e0:	4629      	mov	r1, r5
 80060e2:	4630      	mov	r0, r6
 80060e4:	f000 f96e 	bl	80063c4 <__swsetup_r>
 80060e8:	b1c0      	cbz	r0, 800611c <_vfiprintf_r+0x78>
 80060ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060ec:	07dc      	lsls	r4, r3, #31
 80060ee:	d50e      	bpl.n	800610e <_vfiprintf_r+0x6a>
 80060f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060f4:	b01d      	add	sp, #116	; 0x74
 80060f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fa:	4b7b      	ldr	r3, [pc, #492]	; (80062e8 <_vfiprintf_r+0x244>)
 80060fc:	429d      	cmp	r5, r3
 80060fe:	d101      	bne.n	8006104 <_vfiprintf_r+0x60>
 8006100:	68b5      	ldr	r5, [r6, #8]
 8006102:	e7df      	b.n	80060c4 <_vfiprintf_r+0x20>
 8006104:	4b79      	ldr	r3, [pc, #484]	; (80062ec <_vfiprintf_r+0x248>)
 8006106:	429d      	cmp	r5, r3
 8006108:	bf08      	it	eq
 800610a:	68f5      	ldreq	r5, [r6, #12]
 800610c:	e7da      	b.n	80060c4 <_vfiprintf_r+0x20>
 800610e:	89ab      	ldrh	r3, [r5, #12]
 8006110:	0598      	lsls	r0, r3, #22
 8006112:	d4ed      	bmi.n	80060f0 <_vfiprintf_r+0x4c>
 8006114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006116:	f000 fb84 	bl	8006822 <__retarget_lock_release_recursive>
 800611a:	e7e9      	b.n	80060f0 <_vfiprintf_r+0x4c>
 800611c:	2300      	movs	r3, #0
 800611e:	9309      	str	r3, [sp, #36]	; 0x24
 8006120:	2320      	movs	r3, #32
 8006122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006126:	f8cd 800c 	str.w	r8, [sp, #12]
 800612a:	2330      	movs	r3, #48	; 0x30
 800612c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062f0 <_vfiprintf_r+0x24c>
 8006130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006134:	f04f 0901 	mov.w	r9, #1
 8006138:	4623      	mov	r3, r4
 800613a:	469a      	mov	sl, r3
 800613c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006140:	b10a      	cbz	r2, 8006146 <_vfiprintf_r+0xa2>
 8006142:	2a25      	cmp	r2, #37	; 0x25
 8006144:	d1f9      	bne.n	800613a <_vfiprintf_r+0x96>
 8006146:	ebba 0b04 	subs.w	fp, sl, r4
 800614a:	d00b      	beq.n	8006164 <_vfiprintf_r+0xc0>
 800614c:	465b      	mov	r3, fp
 800614e:	4622      	mov	r2, r4
 8006150:	4629      	mov	r1, r5
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff ff93 	bl	800607e <__sfputs_r>
 8006158:	3001      	adds	r0, #1
 800615a:	f000 80aa 	beq.w	80062b2 <_vfiprintf_r+0x20e>
 800615e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006160:	445a      	add	r2, fp
 8006162:	9209      	str	r2, [sp, #36]	; 0x24
 8006164:	f89a 3000 	ldrb.w	r3, [sl]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80a2 	beq.w	80062b2 <_vfiprintf_r+0x20e>
 800616e:	2300      	movs	r3, #0
 8006170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006178:	f10a 0a01 	add.w	sl, sl, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	9307      	str	r3, [sp, #28]
 8006180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006184:	931a      	str	r3, [sp, #104]	; 0x68
 8006186:	4654      	mov	r4, sl
 8006188:	2205      	movs	r2, #5
 800618a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800618e:	4858      	ldr	r0, [pc, #352]	; (80062f0 <_vfiprintf_r+0x24c>)
 8006190:	f7fa f886 	bl	80002a0 <memchr>
 8006194:	9a04      	ldr	r2, [sp, #16]
 8006196:	b9d8      	cbnz	r0, 80061d0 <_vfiprintf_r+0x12c>
 8006198:	06d1      	lsls	r1, r2, #27
 800619a:	bf44      	itt	mi
 800619c:	2320      	movmi	r3, #32
 800619e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061a2:	0713      	lsls	r3, r2, #28
 80061a4:	bf44      	itt	mi
 80061a6:	232b      	movmi	r3, #43	; 0x2b
 80061a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ac:	f89a 3000 	ldrb.w	r3, [sl]
 80061b0:	2b2a      	cmp	r3, #42	; 0x2a
 80061b2:	d015      	beq.n	80061e0 <_vfiprintf_r+0x13c>
 80061b4:	9a07      	ldr	r2, [sp, #28]
 80061b6:	4654      	mov	r4, sl
 80061b8:	2000      	movs	r0, #0
 80061ba:	f04f 0c0a 	mov.w	ip, #10
 80061be:	4621      	mov	r1, r4
 80061c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061c4:	3b30      	subs	r3, #48	; 0x30
 80061c6:	2b09      	cmp	r3, #9
 80061c8:	d94e      	bls.n	8006268 <_vfiprintf_r+0x1c4>
 80061ca:	b1b0      	cbz	r0, 80061fa <_vfiprintf_r+0x156>
 80061cc:	9207      	str	r2, [sp, #28]
 80061ce:	e014      	b.n	80061fa <_vfiprintf_r+0x156>
 80061d0:	eba0 0308 	sub.w	r3, r0, r8
 80061d4:	fa09 f303 	lsl.w	r3, r9, r3
 80061d8:	4313      	orrs	r3, r2
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	46a2      	mov	sl, r4
 80061de:	e7d2      	b.n	8006186 <_vfiprintf_r+0xe2>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	1d19      	adds	r1, r3, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	9103      	str	r1, [sp, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bfbb      	ittet	lt
 80061ec:	425b      	neglt	r3, r3
 80061ee:	f042 0202 	orrlt.w	r2, r2, #2
 80061f2:	9307      	strge	r3, [sp, #28]
 80061f4:	9307      	strlt	r3, [sp, #28]
 80061f6:	bfb8      	it	lt
 80061f8:	9204      	strlt	r2, [sp, #16]
 80061fa:	7823      	ldrb	r3, [r4, #0]
 80061fc:	2b2e      	cmp	r3, #46	; 0x2e
 80061fe:	d10c      	bne.n	800621a <_vfiprintf_r+0x176>
 8006200:	7863      	ldrb	r3, [r4, #1]
 8006202:	2b2a      	cmp	r3, #42	; 0x2a
 8006204:	d135      	bne.n	8006272 <_vfiprintf_r+0x1ce>
 8006206:	9b03      	ldr	r3, [sp, #12]
 8006208:	1d1a      	adds	r2, r3, #4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	9203      	str	r2, [sp, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	bfb8      	it	lt
 8006212:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006216:	3402      	adds	r4, #2
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006300 <_vfiprintf_r+0x25c>
 800621e:	7821      	ldrb	r1, [r4, #0]
 8006220:	2203      	movs	r2, #3
 8006222:	4650      	mov	r0, sl
 8006224:	f7fa f83c 	bl	80002a0 <memchr>
 8006228:	b140      	cbz	r0, 800623c <_vfiprintf_r+0x198>
 800622a:	2340      	movs	r3, #64	; 0x40
 800622c:	eba0 000a 	sub.w	r0, r0, sl
 8006230:	fa03 f000 	lsl.w	r0, r3, r0
 8006234:	9b04      	ldr	r3, [sp, #16]
 8006236:	4303      	orrs	r3, r0
 8006238:	3401      	adds	r4, #1
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006240:	482c      	ldr	r0, [pc, #176]	; (80062f4 <_vfiprintf_r+0x250>)
 8006242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006246:	2206      	movs	r2, #6
 8006248:	f7fa f82a 	bl	80002a0 <memchr>
 800624c:	2800      	cmp	r0, #0
 800624e:	d03f      	beq.n	80062d0 <_vfiprintf_r+0x22c>
 8006250:	4b29      	ldr	r3, [pc, #164]	; (80062f8 <_vfiprintf_r+0x254>)
 8006252:	bb1b      	cbnz	r3, 800629c <_vfiprintf_r+0x1f8>
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	3307      	adds	r3, #7
 8006258:	f023 0307 	bic.w	r3, r3, #7
 800625c:	3308      	adds	r3, #8
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006262:	443b      	add	r3, r7
 8006264:	9309      	str	r3, [sp, #36]	; 0x24
 8006266:	e767      	b.n	8006138 <_vfiprintf_r+0x94>
 8006268:	fb0c 3202 	mla	r2, ip, r2, r3
 800626c:	460c      	mov	r4, r1
 800626e:	2001      	movs	r0, #1
 8006270:	e7a5      	b.n	80061be <_vfiprintf_r+0x11a>
 8006272:	2300      	movs	r3, #0
 8006274:	3401      	adds	r4, #1
 8006276:	9305      	str	r3, [sp, #20]
 8006278:	4619      	mov	r1, r3
 800627a:	f04f 0c0a 	mov.w	ip, #10
 800627e:	4620      	mov	r0, r4
 8006280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006284:	3a30      	subs	r2, #48	; 0x30
 8006286:	2a09      	cmp	r2, #9
 8006288:	d903      	bls.n	8006292 <_vfiprintf_r+0x1ee>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0c5      	beq.n	800621a <_vfiprintf_r+0x176>
 800628e:	9105      	str	r1, [sp, #20]
 8006290:	e7c3      	b.n	800621a <_vfiprintf_r+0x176>
 8006292:	fb0c 2101 	mla	r1, ip, r1, r2
 8006296:	4604      	mov	r4, r0
 8006298:	2301      	movs	r3, #1
 800629a:	e7f0      	b.n	800627e <_vfiprintf_r+0x1da>
 800629c:	ab03      	add	r3, sp, #12
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	462a      	mov	r2, r5
 80062a2:	4b16      	ldr	r3, [pc, #88]	; (80062fc <_vfiprintf_r+0x258>)
 80062a4:	a904      	add	r1, sp, #16
 80062a6:	4630      	mov	r0, r6
 80062a8:	f7fd fe30 	bl	8003f0c <_printf_float>
 80062ac:	4607      	mov	r7, r0
 80062ae:	1c78      	adds	r0, r7, #1
 80062b0:	d1d6      	bne.n	8006260 <_vfiprintf_r+0x1bc>
 80062b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062b4:	07d9      	lsls	r1, r3, #31
 80062b6:	d405      	bmi.n	80062c4 <_vfiprintf_r+0x220>
 80062b8:	89ab      	ldrh	r3, [r5, #12]
 80062ba:	059a      	lsls	r2, r3, #22
 80062bc:	d402      	bmi.n	80062c4 <_vfiprintf_r+0x220>
 80062be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062c0:	f000 faaf 	bl	8006822 <__retarget_lock_release_recursive>
 80062c4:	89ab      	ldrh	r3, [r5, #12]
 80062c6:	065b      	lsls	r3, r3, #25
 80062c8:	f53f af12 	bmi.w	80060f0 <_vfiprintf_r+0x4c>
 80062cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ce:	e711      	b.n	80060f4 <_vfiprintf_r+0x50>
 80062d0:	ab03      	add	r3, sp, #12
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	462a      	mov	r2, r5
 80062d6:	4b09      	ldr	r3, [pc, #36]	; (80062fc <_vfiprintf_r+0x258>)
 80062d8:	a904      	add	r1, sp, #16
 80062da:	4630      	mov	r0, r6
 80062dc:	f7fe f8bc 	bl	8004458 <_printf_i>
 80062e0:	e7e4      	b.n	80062ac <_vfiprintf_r+0x208>
 80062e2:	bf00      	nop
 80062e4:	0800724c 	.word	0x0800724c
 80062e8:	0800726c 	.word	0x0800726c
 80062ec:	0800722c 	.word	0x0800722c
 80062f0:	080070d4 	.word	0x080070d4
 80062f4:	080070de 	.word	0x080070de
 80062f8:	08003f0d 	.word	0x08003f0d
 80062fc:	0800607f 	.word	0x0800607f
 8006300:	080070da 	.word	0x080070da

08006304 <__swbuf_r>:
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	460e      	mov	r6, r1
 8006308:	4614      	mov	r4, r2
 800630a:	4605      	mov	r5, r0
 800630c:	b118      	cbz	r0, 8006316 <__swbuf_r+0x12>
 800630e:	6983      	ldr	r3, [r0, #24]
 8006310:	b90b      	cbnz	r3, 8006316 <__swbuf_r+0x12>
 8006312:	f000 f9e7 	bl	80066e4 <__sinit>
 8006316:	4b21      	ldr	r3, [pc, #132]	; (800639c <__swbuf_r+0x98>)
 8006318:	429c      	cmp	r4, r3
 800631a:	d12b      	bne.n	8006374 <__swbuf_r+0x70>
 800631c:	686c      	ldr	r4, [r5, #4]
 800631e:	69a3      	ldr	r3, [r4, #24]
 8006320:	60a3      	str	r3, [r4, #8]
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	071a      	lsls	r2, r3, #28
 8006326:	d52f      	bpl.n	8006388 <__swbuf_r+0x84>
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	b36b      	cbz	r3, 8006388 <__swbuf_r+0x84>
 800632c:	6923      	ldr	r3, [r4, #16]
 800632e:	6820      	ldr	r0, [r4, #0]
 8006330:	1ac0      	subs	r0, r0, r3
 8006332:	6963      	ldr	r3, [r4, #20]
 8006334:	b2f6      	uxtb	r6, r6
 8006336:	4283      	cmp	r3, r0
 8006338:	4637      	mov	r7, r6
 800633a:	dc04      	bgt.n	8006346 <__swbuf_r+0x42>
 800633c:	4621      	mov	r1, r4
 800633e:	4628      	mov	r0, r5
 8006340:	f000 f93c 	bl	80065bc <_fflush_r>
 8006344:	bb30      	cbnz	r0, 8006394 <__swbuf_r+0x90>
 8006346:	68a3      	ldr	r3, [r4, #8]
 8006348:	3b01      	subs	r3, #1
 800634a:	60a3      	str	r3, [r4, #8]
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	6022      	str	r2, [r4, #0]
 8006352:	701e      	strb	r6, [r3, #0]
 8006354:	6963      	ldr	r3, [r4, #20]
 8006356:	3001      	adds	r0, #1
 8006358:	4283      	cmp	r3, r0
 800635a:	d004      	beq.n	8006366 <__swbuf_r+0x62>
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	07db      	lsls	r3, r3, #31
 8006360:	d506      	bpl.n	8006370 <__swbuf_r+0x6c>
 8006362:	2e0a      	cmp	r6, #10
 8006364:	d104      	bne.n	8006370 <__swbuf_r+0x6c>
 8006366:	4621      	mov	r1, r4
 8006368:	4628      	mov	r0, r5
 800636a:	f000 f927 	bl	80065bc <_fflush_r>
 800636e:	b988      	cbnz	r0, 8006394 <__swbuf_r+0x90>
 8006370:	4638      	mov	r0, r7
 8006372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006374:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <__swbuf_r+0x9c>)
 8006376:	429c      	cmp	r4, r3
 8006378:	d101      	bne.n	800637e <__swbuf_r+0x7a>
 800637a:	68ac      	ldr	r4, [r5, #8]
 800637c:	e7cf      	b.n	800631e <__swbuf_r+0x1a>
 800637e:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <__swbuf_r+0xa0>)
 8006380:	429c      	cmp	r4, r3
 8006382:	bf08      	it	eq
 8006384:	68ec      	ldreq	r4, [r5, #12]
 8006386:	e7ca      	b.n	800631e <__swbuf_r+0x1a>
 8006388:	4621      	mov	r1, r4
 800638a:	4628      	mov	r0, r5
 800638c:	f000 f81a 	bl	80063c4 <__swsetup_r>
 8006390:	2800      	cmp	r0, #0
 8006392:	d0cb      	beq.n	800632c <__swbuf_r+0x28>
 8006394:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006398:	e7ea      	b.n	8006370 <__swbuf_r+0x6c>
 800639a:	bf00      	nop
 800639c:	0800724c 	.word	0x0800724c
 80063a0:	0800726c 	.word	0x0800726c
 80063a4:	0800722c 	.word	0x0800722c

080063a8 <__ascii_wctomb>:
 80063a8:	b149      	cbz	r1, 80063be <__ascii_wctomb+0x16>
 80063aa:	2aff      	cmp	r2, #255	; 0xff
 80063ac:	bf85      	ittet	hi
 80063ae:	238a      	movhi	r3, #138	; 0x8a
 80063b0:	6003      	strhi	r3, [r0, #0]
 80063b2:	700a      	strbls	r2, [r1, #0]
 80063b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80063b8:	bf98      	it	ls
 80063ba:	2001      	movls	r0, #1
 80063bc:	4770      	bx	lr
 80063be:	4608      	mov	r0, r1
 80063c0:	4770      	bx	lr
	...

080063c4 <__swsetup_r>:
 80063c4:	4b32      	ldr	r3, [pc, #200]	; (8006490 <__swsetup_r+0xcc>)
 80063c6:	b570      	push	{r4, r5, r6, lr}
 80063c8:	681d      	ldr	r5, [r3, #0]
 80063ca:	4606      	mov	r6, r0
 80063cc:	460c      	mov	r4, r1
 80063ce:	b125      	cbz	r5, 80063da <__swsetup_r+0x16>
 80063d0:	69ab      	ldr	r3, [r5, #24]
 80063d2:	b913      	cbnz	r3, 80063da <__swsetup_r+0x16>
 80063d4:	4628      	mov	r0, r5
 80063d6:	f000 f985 	bl	80066e4 <__sinit>
 80063da:	4b2e      	ldr	r3, [pc, #184]	; (8006494 <__swsetup_r+0xd0>)
 80063dc:	429c      	cmp	r4, r3
 80063de:	d10f      	bne.n	8006400 <__swsetup_r+0x3c>
 80063e0:	686c      	ldr	r4, [r5, #4]
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063e8:	0719      	lsls	r1, r3, #28
 80063ea:	d42c      	bmi.n	8006446 <__swsetup_r+0x82>
 80063ec:	06dd      	lsls	r5, r3, #27
 80063ee:	d411      	bmi.n	8006414 <__swsetup_r+0x50>
 80063f0:	2309      	movs	r3, #9
 80063f2:	6033      	str	r3, [r6, #0]
 80063f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063f8:	81a3      	strh	r3, [r4, #12]
 80063fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063fe:	e03e      	b.n	800647e <__swsetup_r+0xba>
 8006400:	4b25      	ldr	r3, [pc, #148]	; (8006498 <__swsetup_r+0xd4>)
 8006402:	429c      	cmp	r4, r3
 8006404:	d101      	bne.n	800640a <__swsetup_r+0x46>
 8006406:	68ac      	ldr	r4, [r5, #8]
 8006408:	e7eb      	b.n	80063e2 <__swsetup_r+0x1e>
 800640a:	4b24      	ldr	r3, [pc, #144]	; (800649c <__swsetup_r+0xd8>)
 800640c:	429c      	cmp	r4, r3
 800640e:	bf08      	it	eq
 8006410:	68ec      	ldreq	r4, [r5, #12]
 8006412:	e7e6      	b.n	80063e2 <__swsetup_r+0x1e>
 8006414:	0758      	lsls	r0, r3, #29
 8006416:	d512      	bpl.n	800643e <__swsetup_r+0x7a>
 8006418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800641a:	b141      	cbz	r1, 800642e <__swsetup_r+0x6a>
 800641c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006420:	4299      	cmp	r1, r3
 8006422:	d002      	beq.n	800642a <__swsetup_r+0x66>
 8006424:	4630      	mov	r0, r6
 8006426:	f7ff fb6f 	bl	8005b08 <_free_r>
 800642a:	2300      	movs	r3, #0
 800642c:	6363      	str	r3, [r4, #52]	; 0x34
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006434:	81a3      	strh	r3, [r4, #12]
 8006436:	2300      	movs	r3, #0
 8006438:	6063      	str	r3, [r4, #4]
 800643a:	6923      	ldr	r3, [r4, #16]
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	f043 0308 	orr.w	r3, r3, #8
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	b94b      	cbnz	r3, 800645e <__swsetup_r+0x9a>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006454:	d003      	beq.n	800645e <__swsetup_r+0x9a>
 8006456:	4621      	mov	r1, r4
 8006458:	4630      	mov	r0, r6
 800645a:	f000 fa07 	bl	800686c <__smakebuf_r>
 800645e:	89a0      	ldrh	r0, [r4, #12]
 8006460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006464:	f010 0301 	ands.w	r3, r0, #1
 8006468:	d00a      	beq.n	8006480 <__swsetup_r+0xbc>
 800646a:	2300      	movs	r3, #0
 800646c:	60a3      	str	r3, [r4, #8]
 800646e:	6963      	ldr	r3, [r4, #20]
 8006470:	425b      	negs	r3, r3
 8006472:	61a3      	str	r3, [r4, #24]
 8006474:	6923      	ldr	r3, [r4, #16]
 8006476:	b943      	cbnz	r3, 800648a <__swsetup_r+0xc6>
 8006478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800647c:	d1ba      	bne.n	80063f4 <__swsetup_r+0x30>
 800647e:	bd70      	pop	{r4, r5, r6, pc}
 8006480:	0781      	lsls	r1, r0, #30
 8006482:	bf58      	it	pl
 8006484:	6963      	ldrpl	r3, [r4, #20]
 8006486:	60a3      	str	r3, [r4, #8]
 8006488:	e7f4      	b.n	8006474 <__swsetup_r+0xb0>
 800648a:	2000      	movs	r0, #0
 800648c:	e7f7      	b.n	800647e <__swsetup_r+0xba>
 800648e:	bf00      	nop
 8006490:	20000014 	.word	0x20000014
 8006494:	0800724c 	.word	0x0800724c
 8006498:	0800726c 	.word	0x0800726c
 800649c:	0800722c 	.word	0x0800722c

080064a0 <abort>:
 80064a0:	b508      	push	{r3, lr}
 80064a2:	2006      	movs	r0, #6
 80064a4:	f000 fa52 	bl	800694c <raise>
 80064a8:	2001      	movs	r0, #1
 80064aa:	f7fd fb85 	bl	8003bb8 <_exit>
	...

080064b0 <__sflush_r>:
 80064b0:	898a      	ldrh	r2, [r1, #12]
 80064b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b6:	4605      	mov	r5, r0
 80064b8:	0710      	lsls	r0, r2, #28
 80064ba:	460c      	mov	r4, r1
 80064bc:	d458      	bmi.n	8006570 <__sflush_r+0xc0>
 80064be:	684b      	ldr	r3, [r1, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc05      	bgt.n	80064d0 <__sflush_r+0x20>
 80064c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	dc02      	bgt.n	80064d0 <__sflush_r+0x20>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	d0f9      	beq.n	80064ca <__sflush_r+0x1a>
 80064d6:	2300      	movs	r3, #0
 80064d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064dc:	682f      	ldr	r7, [r5, #0]
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	d032      	beq.n	8006548 <__sflush_r+0x98>
 80064e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	075a      	lsls	r2, r3, #29
 80064e8:	d505      	bpl.n	80064f6 <__sflush_r+0x46>
 80064ea:	6863      	ldr	r3, [r4, #4]
 80064ec:	1ac0      	subs	r0, r0, r3
 80064ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064f0:	b10b      	cbz	r3, 80064f6 <__sflush_r+0x46>
 80064f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064f4:	1ac0      	subs	r0, r0, r3
 80064f6:	2300      	movs	r3, #0
 80064f8:	4602      	mov	r2, r0
 80064fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064fc:	6a21      	ldr	r1, [r4, #32]
 80064fe:	4628      	mov	r0, r5
 8006500:	47b0      	blx	r6
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	d106      	bne.n	8006516 <__sflush_r+0x66>
 8006508:	6829      	ldr	r1, [r5, #0]
 800650a:	291d      	cmp	r1, #29
 800650c:	d82c      	bhi.n	8006568 <__sflush_r+0xb8>
 800650e:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <__sflush_r+0x108>)
 8006510:	40ca      	lsrs	r2, r1
 8006512:	07d6      	lsls	r6, r2, #31
 8006514:	d528      	bpl.n	8006568 <__sflush_r+0xb8>
 8006516:	2200      	movs	r2, #0
 8006518:	6062      	str	r2, [r4, #4]
 800651a:	04d9      	lsls	r1, r3, #19
 800651c:	6922      	ldr	r2, [r4, #16]
 800651e:	6022      	str	r2, [r4, #0]
 8006520:	d504      	bpl.n	800652c <__sflush_r+0x7c>
 8006522:	1c42      	adds	r2, r0, #1
 8006524:	d101      	bne.n	800652a <__sflush_r+0x7a>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	b903      	cbnz	r3, 800652c <__sflush_r+0x7c>
 800652a:	6560      	str	r0, [r4, #84]	; 0x54
 800652c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652e:	602f      	str	r7, [r5, #0]
 8006530:	2900      	cmp	r1, #0
 8006532:	d0ca      	beq.n	80064ca <__sflush_r+0x1a>
 8006534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006538:	4299      	cmp	r1, r3
 800653a:	d002      	beq.n	8006542 <__sflush_r+0x92>
 800653c:	4628      	mov	r0, r5
 800653e:	f7ff fae3 	bl	8005b08 <_free_r>
 8006542:	2000      	movs	r0, #0
 8006544:	6360      	str	r0, [r4, #52]	; 0x34
 8006546:	e7c1      	b.n	80064cc <__sflush_r+0x1c>
 8006548:	6a21      	ldr	r1, [r4, #32]
 800654a:	2301      	movs	r3, #1
 800654c:	4628      	mov	r0, r5
 800654e:	47b0      	blx	r6
 8006550:	1c41      	adds	r1, r0, #1
 8006552:	d1c7      	bne.n	80064e4 <__sflush_r+0x34>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0c4      	beq.n	80064e4 <__sflush_r+0x34>
 800655a:	2b1d      	cmp	r3, #29
 800655c:	d001      	beq.n	8006562 <__sflush_r+0xb2>
 800655e:	2b16      	cmp	r3, #22
 8006560:	d101      	bne.n	8006566 <__sflush_r+0xb6>
 8006562:	602f      	str	r7, [r5, #0]
 8006564:	e7b1      	b.n	80064ca <__sflush_r+0x1a>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	e7ad      	b.n	80064cc <__sflush_r+0x1c>
 8006570:	690f      	ldr	r7, [r1, #16]
 8006572:	2f00      	cmp	r7, #0
 8006574:	d0a9      	beq.n	80064ca <__sflush_r+0x1a>
 8006576:	0793      	lsls	r3, r2, #30
 8006578:	680e      	ldr	r6, [r1, #0]
 800657a:	bf08      	it	eq
 800657c:	694b      	ldreq	r3, [r1, #20]
 800657e:	600f      	str	r7, [r1, #0]
 8006580:	bf18      	it	ne
 8006582:	2300      	movne	r3, #0
 8006584:	eba6 0807 	sub.w	r8, r6, r7
 8006588:	608b      	str	r3, [r1, #8]
 800658a:	f1b8 0f00 	cmp.w	r8, #0
 800658e:	dd9c      	ble.n	80064ca <__sflush_r+0x1a>
 8006590:	6a21      	ldr	r1, [r4, #32]
 8006592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006594:	4643      	mov	r3, r8
 8006596:	463a      	mov	r2, r7
 8006598:	4628      	mov	r0, r5
 800659a:	47b0      	blx	r6
 800659c:	2800      	cmp	r0, #0
 800659e:	dc06      	bgt.n	80065ae <__sflush_r+0xfe>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065ac:	e78e      	b.n	80064cc <__sflush_r+0x1c>
 80065ae:	4407      	add	r7, r0
 80065b0:	eba8 0800 	sub.w	r8, r8, r0
 80065b4:	e7e9      	b.n	800658a <__sflush_r+0xda>
 80065b6:	bf00      	nop
 80065b8:	20400001 	.word	0x20400001

080065bc <_fflush_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	690b      	ldr	r3, [r1, #16]
 80065c0:	4605      	mov	r5, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	b913      	cbnz	r3, 80065cc <_fflush_r+0x10>
 80065c6:	2500      	movs	r5, #0
 80065c8:	4628      	mov	r0, r5
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	b118      	cbz	r0, 80065d6 <_fflush_r+0x1a>
 80065ce:	6983      	ldr	r3, [r0, #24]
 80065d0:	b90b      	cbnz	r3, 80065d6 <_fflush_r+0x1a>
 80065d2:	f000 f887 	bl	80066e4 <__sinit>
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <_fflush_r+0x6c>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	d11b      	bne.n	8006614 <_fflush_r+0x58>
 80065dc:	686c      	ldr	r4, [r5, #4]
 80065de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0ef      	beq.n	80065c6 <_fflush_r+0xa>
 80065e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065e8:	07d0      	lsls	r0, r2, #31
 80065ea:	d404      	bmi.n	80065f6 <_fflush_r+0x3a>
 80065ec:	0599      	lsls	r1, r3, #22
 80065ee:	d402      	bmi.n	80065f6 <_fflush_r+0x3a>
 80065f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065f2:	f000 f915 	bl	8006820 <__retarget_lock_acquire_recursive>
 80065f6:	4628      	mov	r0, r5
 80065f8:	4621      	mov	r1, r4
 80065fa:	f7ff ff59 	bl	80064b0 <__sflush_r>
 80065fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006600:	07da      	lsls	r2, r3, #31
 8006602:	4605      	mov	r5, r0
 8006604:	d4e0      	bmi.n	80065c8 <_fflush_r+0xc>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	059b      	lsls	r3, r3, #22
 800660a:	d4dd      	bmi.n	80065c8 <_fflush_r+0xc>
 800660c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800660e:	f000 f908 	bl	8006822 <__retarget_lock_release_recursive>
 8006612:	e7d9      	b.n	80065c8 <_fflush_r+0xc>
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <_fflush_r+0x70>)
 8006616:	429c      	cmp	r4, r3
 8006618:	d101      	bne.n	800661e <_fflush_r+0x62>
 800661a:	68ac      	ldr	r4, [r5, #8]
 800661c:	e7df      	b.n	80065de <_fflush_r+0x22>
 800661e:	4b04      	ldr	r3, [pc, #16]	; (8006630 <_fflush_r+0x74>)
 8006620:	429c      	cmp	r4, r3
 8006622:	bf08      	it	eq
 8006624:	68ec      	ldreq	r4, [r5, #12]
 8006626:	e7da      	b.n	80065de <_fflush_r+0x22>
 8006628:	0800724c 	.word	0x0800724c
 800662c:	0800726c 	.word	0x0800726c
 8006630:	0800722c 	.word	0x0800722c

08006634 <std>:
 8006634:	2300      	movs	r3, #0
 8006636:	b510      	push	{r4, lr}
 8006638:	4604      	mov	r4, r0
 800663a:	e9c0 3300 	strd	r3, r3, [r0]
 800663e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006642:	6083      	str	r3, [r0, #8]
 8006644:	8181      	strh	r1, [r0, #12]
 8006646:	6643      	str	r3, [r0, #100]	; 0x64
 8006648:	81c2      	strh	r2, [r0, #14]
 800664a:	6183      	str	r3, [r0, #24]
 800664c:	4619      	mov	r1, r3
 800664e:	2208      	movs	r2, #8
 8006650:	305c      	adds	r0, #92	; 0x5c
 8006652:	f7fd fbb3 	bl	8003dbc <memset>
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <std+0x38>)
 8006658:	6263      	str	r3, [r4, #36]	; 0x24
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <std+0x3c>)
 800665c:	62a3      	str	r3, [r4, #40]	; 0x28
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <std+0x40>)
 8006660:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <std+0x44>)
 8006664:	6224      	str	r4, [r4, #32]
 8006666:	6323      	str	r3, [r4, #48]	; 0x30
 8006668:	bd10      	pop	{r4, pc}
 800666a:	bf00      	nop
 800666c:	08006985 	.word	0x08006985
 8006670:	080069a7 	.word	0x080069a7
 8006674:	080069df 	.word	0x080069df
 8006678:	08006a03 	.word	0x08006a03

0800667c <_cleanup_r>:
 800667c:	4901      	ldr	r1, [pc, #4]	; (8006684 <_cleanup_r+0x8>)
 800667e:	f000 b8af 	b.w	80067e0 <_fwalk_reent>
 8006682:	bf00      	nop
 8006684:	080065bd 	.word	0x080065bd

08006688 <__sfmoreglue>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	1e4a      	subs	r2, r1, #1
 800668c:	2568      	movs	r5, #104	; 0x68
 800668e:	4355      	muls	r5, r2
 8006690:	460e      	mov	r6, r1
 8006692:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006696:	f7ff fa87 	bl	8005ba8 <_malloc_r>
 800669a:	4604      	mov	r4, r0
 800669c:	b140      	cbz	r0, 80066b0 <__sfmoreglue+0x28>
 800669e:	2100      	movs	r1, #0
 80066a0:	e9c0 1600 	strd	r1, r6, [r0]
 80066a4:	300c      	adds	r0, #12
 80066a6:	60a0      	str	r0, [r4, #8]
 80066a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066ac:	f7fd fb86 	bl	8003dbc <memset>
 80066b0:	4620      	mov	r0, r4
 80066b2:	bd70      	pop	{r4, r5, r6, pc}

080066b4 <__sfp_lock_acquire>:
 80066b4:	4801      	ldr	r0, [pc, #4]	; (80066bc <__sfp_lock_acquire+0x8>)
 80066b6:	f000 b8b3 	b.w	8006820 <__retarget_lock_acquire_recursive>
 80066ba:	bf00      	nop
 80066bc:	20000aa0 	.word	0x20000aa0

080066c0 <__sfp_lock_release>:
 80066c0:	4801      	ldr	r0, [pc, #4]	; (80066c8 <__sfp_lock_release+0x8>)
 80066c2:	f000 b8ae 	b.w	8006822 <__retarget_lock_release_recursive>
 80066c6:	bf00      	nop
 80066c8:	20000aa0 	.word	0x20000aa0

080066cc <__sinit_lock_acquire>:
 80066cc:	4801      	ldr	r0, [pc, #4]	; (80066d4 <__sinit_lock_acquire+0x8>)
 80066ce:	f000 b8a7 	b.w	8006820 <__retarget_lock_acquire_recursive>
 80066d2:	bf00      	nop
 80066d4:	20000a9b 	.word	0x20000a9b

080066d8 <__sinit_lock_release>:
 80066d8:	4801      	ldr	r0, [pc, #4]	; (80066e0 <__sinit_lock_release+0x8>)
 80066da:	f000 b8a2 	b.w	8006822 <__retarget_lock_release_recursive>
 80066de:	bf00      	nop
 80066e0:	20000a9b 	.word	0x20000a9b

080066e4 <__sinit>:
 80066e4:	b510      	push	{r4, lr}
 80066e6:	4604      	mov	r4, r0
 80066e8:	f7ff fff0 	bl	80066cc <__sinit_lock_acquire>
 80066ec:	69a3      	ldr	r3, [r4, #24]
 80066ee:	b11b      	cbz	r3, 80066f8 <__sinit+0x14>
 80066f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f4:	f7ff bff0 	b.w	80066d8 <__sinit_lock_release>
 80066f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066fc:	6523      	str	r3, [r4, #80]	; 0x50
 80066fe:	4b13      	ldr	r3, [pc, #76]	; (800674c <__sinit+0x68>)
 8006700:	4a13      	ldr	r2, [pc, #76]	; (8006750 <__sinit+0x6c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	62a2      	str	r2, [r4, #40]	; 0x28
 8006706:	42a3      	cmp	r3, r4
 8006708:	bf04      	itt	eq
 800670a:	2301      	moveq	r3, #1
 800670c:	61a3      	streq	r3, [r4, #24]
 800670e:	4620      	mov	r0, r4
 8006710:	f000 f820 	bl	8006754 <__sfp>
 8006714:	6060      	str	r0, [r4, #4]
 8006716:	4620      	mov	r0, r4
 8006718:	f000 f81c 	bl	8006754 <__sfp>
 800671c:	60a0      	str	r0, [r4, #8]
 800671e:	4620      	mov	r0, r4
 8006720:	f000 f818 	bl	8006754 <__sfp>
 8006724:	2200      	movs	r2, #0
 8006726:	60e0      	str	r0, [r4, #12]
 8006728:	2104      	movs	r1, #4
 800672a:	6860      	ldr	r0, [r4, #4]
 800672c:	f7ff ff82 	bl	8006634 <std>
 8006730:	68a0      	ldr	r0, [r4, #8]
 8006732:	2201      	movs	r2, #1
 8006734:	2109      	movs	r1, #9
 8006736:	f7ff ff7d 	bl	8006634 <std>
 800673a:	68e0      	ldr	r0, [r4, #12]
 800673c:	2202      	movs	r2, #2
 800673e:	2112      	movs	r1, #18
 8006740:	f7ff ff78 	bl	8006634 <std>
 8006744:	2301      	movs	r3, #1
 8006746:	61a3      	str	r3, [r4, #24]
 8006748:	e7d2      	b.n	80066f0 <__sinit+0xc>
 800674a:	bf00      	nop
 800674c:	08006ea8 	.word	0x08006ea8
 8006750:	0800667d 	.word	0x0800667d

08006754 <__sfp>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	4607      	mov	r7, r0
 8006758:	f7ff ffac 	bl	80066b4 <__sfp_lock_acquire>
 800675c:	4b1e      	ldr	r3, [pc, #120]	; (80067d8 <__sfp+0x84>)
 800675e:	681e      	ldr	r6, [r3, #0]
 8006760:	69b3      	ldr	r3, [r6, #24]
 8006762:	b913      	cbnz	r3, 800676a <__sfp+0x16>
 8006764:	4630      	mov	r0, r6
 8006766:	f7ff ffbd 	bl	80066e4 <__sinit>
 800676a:	3648      	adds	r6, #72	; 0x48
 800676c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006770:	3b01      	subs	r3, #1
 8006772:	d503      	bpl.n	800677c <__sfp+0x28>
 8006774:	6833      	ldr	r3, [r6, #0]
 8006776:	b30b      	cbz	r3, 80067bc <__sfp+0x68>
 8006778:	6836      	ldr	r6, [r6, #0]
 800677a:	e7f7      	b.n	800676c <__sfp+0x18>
 800677c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006780:	b9d5      	cbnz	r5, 80067b8 <__sfp+0x64>
 8006782:	4b16      	ldr	r3, [pc, #88]	; (80067dc <__sfp+0x88>)
 8006784:	60e3      	str	r3, [r4, #12]
 8006786:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800678a:	6665      	str	r5, [r4, #100]	; 0x64
 800678c:	f000 f847 	bl	800681e <__retarget_lock_init_recursive>
 8006790:	f7ff ff96 	bl	80066c0 <__sfp_lock_release>
 8006794:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006798:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800679c:	6025      	str	r5, [r4, #0]
 800679e:	61a5      	str	r5, [r4, #24]
 80067a0:	2208      	movs	r2, #8
 80067a2:	4629      	mov	r1, r5
 80067a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067a8:	f7fd fb08 	bl	8003dbc <memset>
 80067ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067b4:	4620      	mov	r0, r4
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	3468      	adds	r4, #104	; 0x68
 80067ba:	e7d9      	b.n	8006770 <__sfp+0x1c>
 80067bc:	2104      	movs	r1, #4
 80067be:	4638      	mov	r0, r7
 80067c0:	f7ff ff62 	bl	8006688 <__sfmoreglue>
 80067c4:	4604      	mov	r4, r0
 80067c6:	6030      	str	r0, [r6, #0]
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d1d5      	bne.n	8006778 <__sfp+0x24>
 80067cc:	f7ff ff78 	bl	80066c0 <__sfp_lock_release>
 80067d0:	230c      	movs	r3, #12
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	e7ee      	b.n	80067b4 <__sfp+0x60>
 80067d6:	bf00      	nop
 80067d8:	08006ea8 	.word	0x08006ea8
 80067dc:	ffff0001 	.word	0xffff0001

080067e0 <_fwalk_reent>:
 80067e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e4:	4606      	mov	r6, r0
 80067e6:	4688      	mov	r8, r1
 80067e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067ec:	2700      	movs	r7, #0
 80067ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067f2:	f1b9 0901 	subs.w	r9, r9, #1
 80067f6:	d505      	bpl.n	8006804 <_fwalk_reent+0x24>
 80067f8:	6824      	ldr	r4, [r4, #0]
 80067fa:	2c00      	cmp	r4, #0
 80067fc:	d1f7      	bne.n	80067ee <_fwalk_reent+0xe>
 80067fe:	4638      	mov	r0, r7
 8006800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006804:	89ab      	ldrh	r3, [r5, #12]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d907      	bls.n	800681a <_fwalk_reent+0x3a>
 800680a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800680e:	3301      	adds	r3, #1
 8006810:	d003      	beq.n	800681a <_fwalk_reent+0x3a>
 8006812:	4629      	mov	r1, r5
 8006814:	4630      	mov	r0, r6
 8006816:	47c0      	blx	r8
 8006818:	4307      	orrs	r7, r0
 800681a:	3568      	adds	r5, #104	; 0x68
 800681c:	e7e9      	b.n	80067f2 <_fwalk_reent+0x12>

0800681e <__retarget_lock_init_recursive>:
 800681e:	4770      	bx	lr

08006820 <__retarget_lock_acquire_recursive>:
 8006820:	4770      	bx	lr

08006822 <__retarget_lock_release_recursive>:
 8006822:	4770      	bx	lr

08006824 <__swhatbuf_r>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	460e      	mov	r6, r1
 8006828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682c:	2900      	cmp	r1, #0
 800682e:	b096      	sub	sp, #88	; 0x58
 8006830:	4614      	mov	r4, r2
 8006832:	461d      	mov	r5, r3
 8006834:	da07      	bge.n	8006846 <__swhatbuf_r+0x22>
 8006836:	2300      	movs	r3, #0
 8006838:	602b      	str	r3, [r5, #0]
 800683a:	89b3      	ldrh	r3, [r6, #12]
 800683c:	061a      	lsls	r2, r3, #24
 800683e:	d410      	bmi.n	8006862 <__swhatbuf_r+0x3e>
 8006840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006844:	e00e      	b.n	8006864 <__swhatbuf_r+0x40>
 8006846:	466a      	mov	r2, sp
 8006848:	f000 f8f0 	bl	8006a2c <_fstat_r>
 800684c:	2800      	cmp	r0, #0
 800684e:	dbf2      	blt.n	8006836 <__swhatbuf_r+0x12>
 8006850:	9a01      	ldr	r2, [sp, #4]
 8006852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006856:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800685a:	425a      	negs	r2, r3
 800685c:	415a      	adcs	r2, r3
 800685e:	602a      	str	r2, [r5, #0]
 8006860:	e7ee      	b.n	8006840 <__swhatbuf_r+0x1c>
 8006862:	2340      	movs	r3, #64	; 0x40
 8006864:	2000      	movs	r0, #0
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	b016      	add	sp, #88	; 0x58
 800686a:	bd70      	pop	{r4, r5, r6, pc}

0800686c <__smakebuf_r>:
 800686c:	898b      	ldrh	r3, [r1, #12]
 800686e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006870:	079d      	lsls	r5, r3, #30
 8006872:	4606      	mov	r6, r0
 8006874:	460c      	mov	r4, r1
 8006876:	d507      	bpl.n	8006888 <__smakebuf_r+0x1c>
 8006878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	6123      	str	r3, [r4, #16]
 8006880:	2301      	movs	r3, #1
 8006882:	6163      	str	r3, [r4, #20]
 8006884:	b002      	add	sp, #8
 8006886:	bd70      	pop	{r4, r5, r6, pc}
 8006888:	ab01      	add	r3, sp, #4
 800688a:	466a      	mov	r2, sp
 800688c:	f7ff ffca 	bl	8006824 <__swhatbuf_r>
 8006890:	9900      	ldr	r1, [sp, #0]
 8006892:	4605      	mov	r5, r0
 8006894:	4630      	mov	r0, r6
 8006896:	f7ff f987 	bl	8005ba8 <_malloc_r>
 800689a:	b948      	cbnz	r0, 80068b0 <__smakebuf_r+0x44>
 800689c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a0:	059a      	lsls	r2, r3, #22
 80068a2:	d4ef      	bmi.n	8006884 <__smakebuf_r+0x18>
 80068a4:	f023 0303 	bic.w	r3, r3, #3
 80068a8:	f043 0302 	orr.w	r3, r3, #2
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	e7e3      	b.n	8006878 <__smakebuf_r+0xc>
 80068b0:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <__smakebuf_r+0x7c>)
 80068b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	6020      	str	r0, [r4, #0]
 80068b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	9b00      	ldr	r3, [sp, #0]
 80068c0:	6163      	str	r3, [r4, #20]
 80068c2:	9b01      	ldr	r3, [sp, #4]
 80068c4:	6120      	str	r0, [r4, #16]
 80068c6:	b15b      	cbz	r3, 80068e0 <__smakebuf_r+0x74>
 80068c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068cc:	4630      	mov	r0, r6
 80068ce:	f000 f8bf 	bl	8006a50 <_isatty_r>
 80068d2:	b128      	cbz	r0, 80068e0 <__smakebuf_r+0x74>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	89a0      	ldrh	r0, [r4, #12]
 80068e2:	4305      	orrs	r5, r0
 80068e4:	81a5      	strh	r5, [r4, #12]
 80068e6:	e7cd      	b.n	8006884 <__smakebuf_r+0x18>
 80068e8:	0800667d 	.word	0x0800667d

080068ec <_malloc_usable_size_r>:
 80068ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f0:	1f18      	subs	r0, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bfbc      	itt	lt
 80068f6:	580b      	ldrlt	r3, [r1, r0]
 80068f8:	18c0      	addlt	r0, r0, r3
 80068fa:	4770      	bx	lr

080068fc <_raise_r>:
 80068fc:	291f      	cmp	r1, #31
 80068fe:	b538      	push	{r3, r4, r5, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	d904      	bls.n	8006910 <_raise_r+0x14>
 8006906:	2316      	movs	r3, #22
 8006908:	6003      	str	r3, [r0, #0]
 800690a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006912:	b112      	cbz	r2, 800691a <_raise_r+0x1e>
 8006914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006918:	b94b      	cbnz	r3, 800692e <_raise_r+0x32>
 800691a:	4620      	mov	r0, r4
 800691c:	f000 f830 	bl	8006980 <_getpid_r>
 8006920:	462a      	mov	r2, r5
 8006922:	4601      	mov	r1, r0
 8006924:	4620      	mov	r0, r4
 8006926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692a:	f000 b817 	b.w	800695c <_kill_r>
 800692e:	2b01      	cmp	r3, #1
 8006930:	d00a      	beq.n	8006948 <_raise_r+0x4c>
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	d103      	bne.n	800693e <_raise_r+0x42>
 8006936:	2316      	movs	r3, #22
 8006938:	6003      	str	r3, [r0, #0]
 800693a:	2001      	movs	r0, #1
 800693c:	e7e7      	b.n	800690e <_raise_r+0x12>
 800693e:	2400      	movs	r4, #0
 8006940:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006944:	4628      	mov	r0, r5
 8006946:	4798      	blx	r3
 8006948:	2000      	movs	r0, #0
 800694a:	e7e0      	b.n	800690e <_raise_r+0x12>

0800694c <raise>:
 800694c:	4b02      	ldr	r3, [pc, #8]	; (8006958 <raise+0xc>)
 800694e:	4601      	mov	r1, r0
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f7ff bfd3 	b.w	80068fc <_raise_r>
 8006956:	bf00      	nop
 8006958:	20000014 	.word	0x20000014

0800695c <_kill_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d07      	ldr	r5, [pc, #28]	; (800697c <_kill_r+0x20>)
 8006960:	2300      	movs	r3, #0
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	602b      	str	r3, [r5, #0]
 800696a:	f7fd f915 	bl	8003b98 <_kill>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d102      	bne.n	8006978 <_kill_r+0x1c>
 8006972:	682b      	ldr	r3, [r5, #0]
 8006974:	b103      	cbz	r3, 8006978 <_kill_r+0x1c>
 8006976:	6023      	str	r3, [r4, #0]
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	bf00      	nop
 800697c:	20000a94 	.word	0x20000a94

08006980 <_getpid_r>:
 8006980:	f7fd b902 	b.w	8003b88 <_getpid>

08006984 <__sread>:
 8006984:	b510      	push	{r4, lr}
 8006986:	460c      	mov	r4, r1
 8006988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698c:	f000 f882 	bl	8006a94 <_read_r>
 8006990:	2800      	cmp	r0, #0
 8006992:	bfab      	itete	ge
 8006994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006996:	89a3      	ldrhlt	r3, [r4, #12]
 8006998:	181b      	addge	r3, r3, r0
 800699a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800699e:	bfac      	ite	ge
 80069a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80069a2:	81a3      	strhlt	r3, [r4, #12]
 80069a4:	bd10      	pop	{r4, pc}

080069a6 <__swrite>:
 80069a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069aa:	461f      	mov	r7, r3
 80069ac:	898b      	ldrh	r3, [r1, #12]
 80069ae:	05db      	lsls	r3, r3, #23
 80069b0:	4605      	mov	r5, r0
 80069b2:	460c      	mov	r4, r1
 80069b4:	4616      	mov	r6, r2
 80069b6:	d505      	bpl.n	80069c4 <__swrite+0x1e>
 80069b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069bc:	2302      	movs	r3, #2
 80069be:	2200      	movs	r2, #0
 80069c0:	f000 f856 	bl	8006a70 <_lseek_r>
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069ce:	81a3      	strh	r3, [r4, #12]
 80069d0:	4632      	mov	r2, r6
 80069d2:	463b      	mov	r3, r7
 80069d4:	4628      	mov	r0, r5
 80069d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069da:	f7fc bfbd 	b.w	8003958 <_write_r>

080069de <__sseek>:
 80069de:	b510      	push	{r4, lr}
 80069e0:	460c      	mov	r4, r1
 80069e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e6:	f000 f843 	bl	8006a70 <_lseek_r>
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	bf15      	itete	ne
 80069f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80069f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069fa:	81a3      	strheq	r3, [r4, #12]
 80069fc:	bf18      	it	ne
 80069fe:	81a3      	strhne	r3, [r4, #12]
 8006a00:	bd10      	pop	{r4, pc}

08006a02 <__sclose>:
 8006a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a06:	f000 b801 	b.w	8006a0c <_close_r>
	...

08006a0c <_close_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d06      	ldr	r5, [pc, #24]	; (8006a28 <_close_r+0x1c>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4604      	mov	r4, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	602b      	str	r3, [r5, #0]
 8006a18:	f7fd f8f5 	bl	8003c06 <_close>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d102      	bne.n	8006a26 <_close_r+0x1a>
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	b103      	cbz	r3, 8006a26 <_close_r+0x1a>
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	20000a94 	.word	0x20000a94

08006a2c <_fstat_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4d07      	ldr	r5, [pc, #28]	; (8006a4c <_fstat_r+0x20>)
 8006a30:	2300      	movs	r3, #0
 8006a32:	4604      	mov	r4, r0
 8006a34:	4608      	mov	r0, r1
 8006a36:	4611      	mov	r1, r2
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	f7fd f8f0 	bl	8003c1e <_fstat>
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	d102      	bne.n	8006a48 <_fstat_r+0x1c>
 8006a42:	682b      	ldr	r3, [r5, #0]
 8006a44:	b103      	cbz	r3, 8006a48 <_fstat_r+0x1c>
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	bd38      	pop	{r3, r4, r5, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20000a94 	.word	0x20000a94

08006a50 <_isatty_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d06      	ldr	r5, [pc, #24]	; (8006a6c <_isatty_r+0x1c>)
 8006a54:	2300      	movs	r3, #0
 8006a56:	4604      	mov	r4, r0
 8006a58:	4608      	mov	r0, r1
 8006a5a:	602b      	str	r3, [r5, #0]
 8006a5c:	f7fd f8ef 	bl	8003c3e <_isatty>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_isatty_r+0x1a>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_isatty_r+0x1a>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	20000a94 	.word	0x20000a94

08006a70 <_lseek_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d07      	ldr	r5, [pc, #28]	; (8006a90 <_lseek_r+0x20>)
 8006a74:	4604      	mov	r4, r0
 8006a76:	4608      	mov	r0, r1
 8006a78:	4611      	mov	r1, r2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	602a      	str	r2, [r5, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f7fd f8e8 	bl	8003c54 <_lseek>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_lseek_r+0x1e>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_lseek_r+0x1e>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20000a94 	.word	0x20000a94

08006a94 <_read_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d07      	ldr	r5, [pc, #28]	; (8006ab4 <_read_r+0x20>)
 8006a98:	4604      	mov	r4, r0
 8006a9a:	4608      	mov	r0, r1
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	602a      	str	r2, [r5, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f7fd f892 	bl	8003bcc <_read>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_read_r+0x1e>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_read_r+0x1e>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20000a94 	.word	0x20000a94

08006ab8 <_init>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	bf00      	nop
 8006abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006abe:	bc08      	pop	{r3}
 8006ac0:	469e      	mov	lr, r3
 8006ac2:	4770      	bx	lr

08006ac4 <_fini>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	bf00      	nop
 8006ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aca:	bc08      	pop	{r3}
 8006acc:	469e      	mov	lr, r3
 8006ace:	4770      	bx	lr
