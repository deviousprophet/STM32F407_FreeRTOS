
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004490  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a38  08004a38  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004a38  08004a38  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a38  08004a38  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012fe8  20000084  08004ac4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001306c  08004ac4  0002306c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b72a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ceb  00000000  00000000  0002b7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003502  00000000  00000000  0002e408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089ee  00000000  00000000  0003190a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00014f05  00000000  00000000  0003a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0004f1fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002388  00000000  00000000  0004f250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004628 	.word	0x08004628

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08004628 	.word	0x08004628

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ADE_Init>:
void ADE_SPI_Init();
void ZeroX_Init();
void SAG_Init();
void IRQ_Init();

void ADE_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	ADE_SPI_Init();
 8000296:	f000 f827 	bl	80002e8 <ADE_SPI_Init>
//	ZeroX_Init();
//	SAG_Init();
//	IRQ_Init();

	//Reset
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	2109      	movs	r1, #9
 800029e:	4811      	ldr	r0, [pc, #68]	; (80002e4 <ADE_Init+0x54>)
 80002a0:	f003 fafa 	bl	8003898 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 80002a4:	2300      	movs	r3, #0
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	e002      	b.n	80002b0 <ADE_Init+0x20>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3301      	adds	r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80002b6:	4293      	cmp	r3, r2
 80002b8:	ddf7      	ble.n	80002aa <ADE_Init+0x1a>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2109      	movs	r1, #9
 80002be:	4809      	ldr	r0, [pc, #36]	; (80002e4 <ADE_Init+0x54>)
 80002c0:	f003 faea 	bl	8003898 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 80002c4:	2300      	movs	r3, #0
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	e002      	b.n	80002d0 <ADE_Init+0x40>
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	603b      	str	r3, [r7, #0]
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80002d6:	4293      	cmp	r3, r2
 80002d8:	ddf7      	ble.n	80002ca <ADE_Init+0x3a>

//	CYCEND, PKV, PKI
//	ADE_WriteData(IRQEN, 0x0344, 2);
//	ADE_WriteData(VPKLVL, 0x29, 1);
//	ADE_WriteData(IPKLVL, 0x2D, 1);
}
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40020c00 	.word	0x40020c00

080002e8 <ADE_SPI_Init>:
			mode &= ~(1 << bit_flag);
		ADE_WriteData(MODE, mode, 2);
	}
}

void ADE_SPI_Init() {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08c      	sub	sp, #48	; 0x30
 80002ec:	af00      	add	r7, sp, #0
	 * PB13 -> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT function mode : 5
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 80002ee:	4b34      	ldr	r3, [pc, #208]	; (80003c0 <ADE_SPI_Init+0xd8>)
 80002f0:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002f2:	2302      	movs	r3, #2
 80002f4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002f8:	2305      	movs	r3, #5
 80002fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002fe:	2300      	movs	r3, #0
 8000300:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000304:	2300      	movs	r3, #0
 8000306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800030a:	2302      	movs	r3, #2
 800030c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000310:	230d      	movs	r3, #13
 8000312:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800031a:	4618      	mov	r0, r3
 800031c:	f003 f90a 	bl	8003534 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000320:	230f      	movs	r3, #15
 8000322:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800032a:	4618      	mov	r0, r3
 800032c:	f003 f902 	bl	8003534 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000330:	230e      	movs	r3, #14
 8000332:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800033a:	4618      	mov	r0, r3
 800033c:	f003 f8fa 	bl	8003534 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000340:	230c      	movs	r3, #12
 8000342:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800034a:	4618      	mov	r0, r3
 800034c:	f003 f8f2 	bl	8003534 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000350:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <ADE_SPI_Init+0xdc>)
 8000352:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000354:	2309      	movs	r3, #9
 8000356:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800035a:	2301      	movs	r3, #1
 800035c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(&SPIPins);
 8000366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800036a:	4618      	mov	r0, r3
 800036c:	f003 f8e2 	bl	8003534 <GPIO_Init>

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = ADE_SPI_HOST;
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <ADE_SPI_Init+0xe0>)
 8000372:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000374:	2301      	movs	r3, #1
 8000376:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000378:	2301      	movs	r3, #1
 800037a:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;	// clock 1MHz
 800037c:	2303      	movs	r3, #3
 800037e:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000380:	2300      	movs	r3, #0
 8000382:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;				// CPOL 0
 8000384:	2300      	movs	r3, #0
 8000386:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;				// CPHA 1
 8000388:	2301      	movs	r3, #1
 800038a:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 					// Hardware slave management enabled for NSS pin
 800038c:	2300      	movs	r3, #0
 800038e:	73bb      	strb	r3, [r7, #14]

	ADE_SPI_HOST->CR1 &= ~(1 << SPI_CR1_SPE);
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <ADE_SPI_Init+0xe0>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <ADE_SPI_Init+0xe0>)
 8000396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800039a:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4618      	mov	r0, r3
 80003a0:	f003 fad8 	bl	8003954 <SPI_Init>
	ADE_SPI_HOST->CR1 |= (1 << SPI_CR1_SPE);
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <ADE_SPI_Init+0xe0>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <ADE_SPI_Init+0xe0>)
 80003aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ae:	6013      	str	r3, [r2, #0]

	SPI_SSOEConfig(ADE_SPI_HOST, ENABLE);
 80003b0:	2101      	movs	r1, #1
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <ADE_SPI_Init+0xe0>)
 80003b4:	f003 fb70 	bl	8003a98 <SPI_SSOEConfig>
}
 80003b8:	bf00      	nop
 80003ba:	3730      	adds	r7, #48	; 0x30
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40020400 	.word	0x40020400
 80003c4:	40020c00 	.word	0x40020c00
 80003c8:	40003800 	.word	0x40003800

080003cc <KEYPAD_Init>:

/* Private variables */
KEYPAD_Type_t KEYPAD_INT_KeypadType;
static KEYPAD_Button_t KeypadStatus = KEYPAD_NOPRESSED;

void KEYPAD_Init(KEYPAD_Type_t type) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	KEYPAD_INT_KeypadType = type;
 80003d6:	4a32      	ldr	r2, [pc, #200]	; (80004a0 <KEYPAD_Init+0xd4>)
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	7013      	strb	r3, [r2, #0]
	GPIO_Handle_t GpioR_Out, GpioC_In;

	/* Rows are output */
	/* Row 1 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_1_PORT;
 80003dc:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <KEYPAD_Init+0xd8>)
 80003de:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_1_PIN;
 80003e0:	230b      	movs	r3, #11
 80003e2:	763b      	strb	r3, [r7, #24]
	GpioR_Out.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80003e4:	2301      	movs	r3, #1
 80003e6:	767b      	strb	r3, [r7, #25]
	GpioR_Out.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80003e8:	2301      	movs	r3, #1
 80003ea:	76bb      	strb	r3, [r7, #26]
	GpioR_Out.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80003ec:	2300      	movs	r3, #0
 80003ee:	773b      	strb	r3, [r7, #28]
	GpioR_Out.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80003f0:	2300      	movs	r3, #0
 80003f2:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GpioR_Out);
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	4618      	mov	r0, r3
 80003fa:	f003 f89b 	bl	8003534 <GPIO_Init>

	/* Row 2 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_2_PORT;
 80003fe:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <KEYPAD_Init+0xdc>)
 8000400:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_2_PIN;
 8000402:	2300      	movs	r3, #0
 8000404:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	4618      	mov	r0, r3
 800040c:	f003 f892 	bl	8003534 <GPIO_Init>

	/* Row 3 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_3_PORT;
 8000410:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <KEYPAD_Init+0xdc>)
 8000412:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_3_PIN;
 8000414:	2302      	movs	r3, #2
 8000416:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4618      	mov	r0, r3
 800041e:	f003 f889 	bl	8003534 <GPIO_Init>

	/* Row 4 */
	if (type == KEYPAD_Type_Large) {
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d108      	bne.n	800043a <KEYPAD_Init+0x6e>
		GpioR_Out.pGPIOx = KEYPAD_ROW_4_PORT;
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <KEYPAD_Init+0xdc>)
 800042a:	617b      	str	r3, [r7, #20]
		GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_4_PIN;
 800042c:	2304      	movs	r3, #4
 800042e:	763b      	strb	r3, [r7, #24]
		GPIO_Init(&GpioR_Out);
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	4618      	mov	r0, r3
 8000436:	f003 f87d 	bl	8003534 <GPIO_Init>
	}


	/* Columns are inputs */
	/* Column 1 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_1_PORT;
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <KEYPAD_Init+0xdc>)
 800043c:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_1_PIN;
 800043e:	2306      	movs	r3, #6
 8000440:	733b      	strb	r3, [r7, #12]
	GpioC_In.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000442:	2300      	movs	r3, #0
 8000444:	737b      	strb	r3, [r7, #13]
	GpioC_In.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8000446:	2301      	movs	r3, #1
 8000448:	73bb      	strb	r3, [r7, #14]
	GpioC_In.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800044a:	2300      	movs	r3, #0
 800044c:	743b      	strb	r3, [r7, #16]
	GpioC_In.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800044e:	2301      	movs	r3, #1
 8000450:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&GpioC_In);
 8000452:	f107 0308 	add.w	r3, r7, #8
 8000456:	4618      	mov	r0, r3
 8000458:	f003 f86c 	bl	8003534 <GPIO_Init>

	/* Column 2 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_2_PORT;
 800045c:	4b13      	ldr	r3, [pc, #76]	; (80004ac <KEYPAD_Init+0xe0>)
 800045e:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 8000460:	2303      	movs	r3, #3
 8000462:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8000464:	f107 0308 	add.w	r3, r7, #8
 8000468:	4618      	mov	r0, r3
 800046a:	f003 f863 	bl	8003534 <GPIO_Init>

	/* Column 3 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_3_PORT;
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <KEYPAD_Init+0xe0>)
 8000470:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_3_PIN;
 8000472:	2305      	movs	r3, #5
 8000474:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	4618      	mov	r0, r3
 800047c:	f003 f85a 	bl	8003534 <GPIO_Init>

	/* Column 4 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_4_PORT;
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <KEYPAD_Init+0xe0>)
 8000482:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_4_PIN;
 8000484:	2307      	movs	r3, #7
 8000486:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8000488:	f107 0308 	add.w	r3, r7, #8
 800048c:	4618      	mov	r0, r3
 800048e:	f003 f851 	bl	8003534 <GPIO_Init>

	/* All rows high */
	KEYPAD_INT_SetRow(0);
 8000492:	2000      	movs	r0, #0
 8000494:	f000 f818 	bl	80004c8 <KEYPAD_INT_SetRow>
}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20012e1c 	.word	0x20012e1c
 80004a4:	40020800 	.word	0x40020800
 80004a8:	40020c00 	.word	0x40020c00
 80004ac:	40020400 	.word	0x40020400

080004b0 <KEYPAD_Read>:

KEYPAD_Button_t KEYPAD_Read(void) {
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	return KeypadStatus;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <KEYPAD_Read+0x14>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	20000010 	.word	0x20000010

080004c8 <KEYPAD_INT_SetRow>:

/* Private */
void KEYPAD_INT_SetRow(uint8_t row) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_ROW_1_HIGH;
 80004d2:	2201      	movs	r2, #1
 80004d4:	210b      	movs	r1, #11
 80004d6:	481d      	ldr	r0, [pc, #116]	; (800054c <KEYPAD_INT_SetRow+0x84>)
 80004d8:	f003 f9de 	bl	8003898 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_2_HIGH;
 80004dc:	2201      	movs	r2, #1
 80004de:	2100      	movs	r1, #0
 80004e0:	481b      	ldr	r0, [pc, #108]	; (8000550 <KEYPAD_INT_SetRow+0x88>)
 80004e2:	f003 f9d9 	bl	8003898 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_3_HIGH;
 80004e6:	2201      	movs	r2, #1
 80004e8:	2102      	movs	r1, #2
 80004ea:	4819      	ldr	r0, [pc, #100]	; (8000550 <KEYPAD_INT_SetRow+0x88>)
 80004ec:	f003 f9d4 	bl	8003898 <GPIO_WriteToOutputPin>
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large)
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <KEYPAD_INT_SetRow+0x8c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d104      	bne.n	8000502 <KEYPAD_INT_SetRow+0x3a>
		KEYPAD_ROW_4_HIGH;
 80004f8:	2201      	movs	r2, #1
 80004fa:	2104      	movs	r1, #4
 80004fc:	4814      	ldr	r0, [pc, #80]	; (8000550 <KEYPAD_INT_SetRow+0x88>)
 80004fe:	f003 f9cb 	bl	8003898 <GPIO_WriteToOutputPin>

	/* Set row low */
	if (row == 1)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d104      	bne.n	8000512 <KEYPAD_INT_SetRow+0x4a>
		KEYPAD_ROW_1_LOW;
 8000508:	2200      	movs	r2, #0
 800050a:	210b      	movs	r1, #11
 800050c:	480f      	ldr	r0, [pc, #60]	; (800054c <KEYPAD_INT_SetRow+0x84>)
 800050e:	f003 f9c3 	bl	8003898 <GPIO_WriteToOutputPin>
	if (row == 2)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b02      	cmp	r3, #2
 8000516:	d104      	bne.n	8000522 <KEYPAD_INT_SetRow+0x5a>
		KEYPAD_ROW_2_LOW;
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <KEYPAD_INT_SetRow+0x88>)
 800051e:	f003 f9bb 	bl	8003898 <GPIO_WriteToOutputPin>
	if (row == 3)
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2b03      	cmp	r3, #3
 8000526:	d104      	bne.n	8000532 <KEYPAD_INT_SetRow+0x6a>
		KEYPAD_ROW_3_LOW;
 8000528:	2200      	movs	r2, #0
 800052a:	2102      	movs	r1, #2
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <KEYPAD_INT_SetRow+0x88>)
 800052e:	f003 f9b3 	bl	8003898 <GPIO_WriteToOutputPin>
	if (row == 4)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b04      	cmp	r3, #4
 8000536:	d104      	bne.n	8000542 <KEYPAD_INT_SetRow+0x7a>
		KEYPAD_ROW_4_LOW;
 8000538:	2200      	movs	r2, #0
 800053a:	2104      	movs	r1, #4
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <KEYPAD_INT_SetRow+0x88>)
 800053e:	f003 f9ab 	bl	8003898 <GPIO_WriteToOutputPin>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40020800 	.word	0x40020800
 8000550:	40020c00 	.word	0x40020c00
 8000554:	20012e1c 	.word	0x20012e1c

08000558 <KEYPAD_INT_CheckColumn>:

uint8_t KEYPAD_INT_CheckColumn(uint8_t row) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	/* Read columns */

	/* Scan column 1 */
	if (KEYPAD_COLUMN_1_CHECK) {
 8000562:	2106      	movs	r1, #6
 8000564:	481f      	ldr	r0, [pc, #124]	; (80005e4 <KEYPAD_INT_CheckColumn+0x8c>)
 8000566:	f003 f981 	bl	800386c <GPIO_ReadFromInputPin>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d105      	bne.n	800057c <KEYPAD_INT_CheckColumn+0x24>
		return KEYPAD_INT_Buttons[row - 1][0];
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	3b01      	subs	r3, #1
 8000574:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <KEYPAD_INT_CheckColumn+0x90>)
 8000576:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800057a:	e02e      	b.n	80005da <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 2 */
	if (KEYPAD_COLUMN_2_CHECK) {
 800057c:	2103      	movs	r1, #3
 800057e:	481b      	ldr	r0, [pc, #108]	; (80005ec <KEYPAD_INT_CheckColumn+0x94>)
 8000580:	f003 f974 	bl	800386c <GPIO_ReadFromInputPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d106      	bne.n	8000598 <KEYPAD_INT_CheckColumn+0x40>
		return KEYPAD_INT_Buttons[row - 1][1];
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <KEYPAD_INT_CheckColumn+0x90>)
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4413      	add	r3, r2
 8000594:	785b      	ldrb	r3, [r3, #1]
 8000596:	e020      	b.n	80005da <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 3 */
	if (KEYPAD_COLUMN_3_CHECK) {
 8000598:	2105      	movs	r1, #5
 800059a:	4814      	ldr	r0, [pc, #80]	; (80005ec <KEYPAD_INT_CheckColumn+0x94>)
 800059c:	f003 f966 	bl	800386c <GPIO_ReadFromInputPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d106      	bne.n	80005b4 <KEYPAD_INT_CheckColumn+0x5c>
		return KEYPAD_INT_Buttons[row - 1][2];
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <KEYPAD_INT_CheckColumn+0x90>)
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	4413      	add	r3, r2
 80005b0:	789b      	ldrb	r3, [r3, #2]
 80005b2:	e012      	b.n	80005da <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 4 */
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large && KEYPAD_COLUMN_4_CHECK) {
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <KEYPAD_INT_CheckColumn+0x98>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10d      	bne.n	80005d8 <KEYPAD_INT_CheckColumn+0x80>
 80005bc:	2107      	movs	r1, #7
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <KEYPAD_INT_CheckColumn+0x94>)
 80005c0:	f003 f954 	bl	800386c <GPIO_ReadFromInputPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d106      	bne.n	80005d8 <KEYPAD_INT_CheckColumn+0x80>
		return KEYPAD_INT_Buttons[row - 1][3];
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	3b01      	subs	r3, #1
 80005ce:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <KEYPAD_INT_CheckColumn+0x90>)
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4413      	add	r3, r2
 80005d4:	78db      	ldrb	r3, [r3, #3]
 80005d6:	e000      	b.n	80005da <KEYPAD_INT_CheckColumn+0x82>
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 80005d8:	23ff      	movs	r3, #255	; 0xff
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020c00 	.word	0x40020c00
 80005e8:	20000000 	.word	0x20000000
 80005ec:	40020400 	.word	0x40020400
 80005f0:	20012e1c 	.word	0x20012e1c

080005f4 <KEYPAD_INT_Read>:

uint8_t KEYPAD_INT_Read(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	KEYPAD_INT_SetRow(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f7ff ff64 	bl	80004c8 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ffa9 	bl	8000558 <KEYPAD_INT_CheckColumn>
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2bff      	cmp	r3, #255	; 0xff
 800060e:	d001      	beq.n	8000614 <KEYPAD_INT_Read+0x20>
		return check;
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	e02b      	b.n	800066c <KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	KEYPAD_INT_SetRow(2);
 8000614:	2002      	movs	r0, #2
 8000616:	f7ff ff57 	bl	80004c8 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(2);
 800061a:	2002      	movs	r0, #2
 800061c:	f7ff ff9c 	bl	8000558 <KEYPAD_INT_CheckColumn>
 8000620:	4603      	mov	r3, r0
 8000622:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2bff      	cmp	r3, #255	; 0xff
 8000628:	d001      	beq.n	800062e <KEYPAD_INT_Read+0x3a>
		return check;
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	e01e      	b.n	800066c <KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	KEYPAD_INT_SetRow(3);
 800062e:	2003      	movs	r0, #3
 8000630:	f7ff ff4a 	bl	80004c8 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(3);
 8000634:	2003      	movs	r0, #3
 8000636:	f7ff ff8f 	bl	8000558 <KEYPAD_INT_CheckColumn>
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2bff      	cmp	r3, #255	; 0xff
 8000642:	d001      	beq.n	8000648 <KEYPAD_INT_Read+0x54>
		return check;
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	e011      	b.n	800066c <KEYPAD_INT_Read+0x78>
	}

	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large) {
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <KEYPAD_INT_Read+0x80>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d10c      	bne.n	800066a <KEYPAD_INT_Read+0x76>
		/* Set row 4 to LOW */
		KEYPAD_INT_SetRow(4);
 8000650:	2004      	movs	r0, #4
 8000652:	f7ff ff39 	bl	80004c8 <KEYPAD_INT_SetRow>
		/* Check columns */
		check = KEYPAD_INT_CheckColumn(4);
 8000656:	2004      	movs	r0, #4
 8000658:	f7ff ff7e 	bl	8000558 <KEYPAD_INT_CheckColumn>
 800065c:	4603      	mov	r3, r0
 800065e:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NOPRESSED) {
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2bff      	cmp	r3, #255	; 0xff
 8000664:	d001      	beq.n	800066a <KEYPAD_INT_Read+0x76>
			return check;
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	e000      	b.n	800066c <KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 800066a:	23ff      	movs	r3, #255	; 0xff
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20012e1c 	.word	0x20012e1c

08000678 <KEYPAD_Update>:

void KEYPAD_Update(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	static uint16_t millis = 0;
	if (++millis >= KEYPAD_READ_INTERVAL) {
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <KEYPAD_Update+0x30>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <KEYPAD_Update+0x30>)
 8000686:	801a      	strh	r2, [r3, #0]
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <KEYPAD_Update+0x30>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2b31      	cmp	r3, #49	; 0x31
 800068e:	d908      	bls.n	80006a2 <KEYPAD_Update+0x2a>
		millis = 0;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <KEYPAD_Update+0x30>)
 8000692:	2200      	movs	r2, #0
 8000694:	801a      	strh	r2, [r3, #0]
		KeypadStatus = (KEYPAD_Button_t) KEYPAD_INT_Read();
 8000696:	f7ff ffad 	bl	80005f4 <KEYPAD_INT_Read>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	4b03      	ldr	r3, [pc, #12]	; (80006ac <KEYPAD_Update+0x34>)
 80006a0:	701a      	strb	r2, [r3, #0]
	}
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000a0 	.word	0x200000a0
 80006ac:	20000010 	.word	0x20000010

080006b0 <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 80006ba:	2101      	movs	r1, #1
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <LCD5110_send+0x40>)
 80006be:	f003 f9cf 	bl	8003a60 <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <LCD5110_send+0x44>)
 80006c8:	f003 f8e6 	bl	8003898 <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <LCD5110_send+0x40>)
 80006d2:	f003 f99a 	bl	8003a0a <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2101      	movs	r1, #1
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <LCD5110_send+0x44>)
 80006dc:	f003 f8dc 	bl	8003898 <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 80006e0:	2100      	movs	r1, #0
 80006e2:	4803      	ldr	r0, [pc, #12]	; (80006f0 <LCD5110_send+0x40>)
 80006e4:	f003 f9bc 	bl	8003a60 <SPI_PeripheralControl>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40013000 	.word	0x40013000
 80006f4:	40020400 	.word	0x40020400

080006f8 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d002      	beq.n	8000714 <LCD5110_Pin+0x1c>
 800070e:	2b02      	cmp	r3, #2
 8000710:	d00f      	beq.n	8000732 <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 8000712:	e01d      	b.n	8000750 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d005      	beq.n	8000726 <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	2105      	movs	r1, #5
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <LCD5110_Pin+0x60>)
 8000720:	f003 f8ba 	bl	8003898 <GPIO_WriteToOutputPin>
			break;
 8000724:	e014      	b.n	8000750 <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2105      	movs	r1, #5
 800072a:	480b      	ldr	r0, [pc, #44]	; (8000758 <LCD5110_Pin+0x60>)
 800072c:	f003 f8b4 	bl	8003898 <GPIO_WriteToOutputPin>
			break;
 8000730:	e00e      	b.n	8000750 <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d005      	beq.n	8000744 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 8000738:	2201      	movs	r2, #1
 800073a:	2107      	movs	r1, #7
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <LCD5110_Pin+0x64>)
 800073e:	f003 f8ab 	bl	8003898 <GPIO_WriteToOutputPin>
			break;
 8000742:	e004      	b.n	800074e <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8000744:	2200      	movs	r2, #0
 8000746:	2107      	movs	r1, #7
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <LCD5110_Pin+0x64>)
 800074a:	f003 f8a5 	bl	8003898 <GPIO_WriteToOutputPin>
			break;
 800074e:	bf00      	nop
	}
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40020800 	.word	0x40020800
 800075c:	40021000 	.word	0x40021000

08000760 <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e002      	b.n	8000774 <LCD5110_Delay+0x14>
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	429a      	cmp	r2, r3
 800077a:	d8f8      	bhi.n	800076e <LCD5110_Delay+0xe>
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b08e      	sub	sp, #56	; 0x38
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 8000796:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <LCD5110_Init+0x138>)
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800079a:	2302      	movs	r3, #2
 800079c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80007a0:	2305      	movs	r3, #5
 80007a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80007b8:	2305      	movs	r3, #5
 80007ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80007be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 feb6 	bl	8003534 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80007c8:	2307      	movs	r3, #7
 80007ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80007ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 feae 	bl	8003534 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 80007d8:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <LCD5110_Init+0x13c>)
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 80007dc:	2301      	movs	r3, #1
 80007de:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 80007f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fe9b 	bl	8003534 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 80007fe:	4b33      	ldr	r3, [pc, #204]	; (80008cc <LCD5110_Init+0x140>)
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 8000802:	2305      	movs	r3, #5
 8000804:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8000808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fe91 	bl	8003534 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 8000812:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <LCD5110_Init+0x144>)
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 8000816:	2307      	movs	r3, #7
 8000818:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 800081c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fe87 	bl	8003534 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <LCD5110_Init+0x148>)
 8000828:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 800082a:	2301      	movs	r3, #1
 800082c:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 800082e:	2301      	movs	r3, #1
 8000830:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 8000832:	2302      	movs	r3, #2
 8000834:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8000836:	2300      	movs	r3, #0
 8000838:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 800083a:	2300      	movs	r3, #0
 800083c:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 800083e:	2300      	movs	r3, #0
 8000840:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 8000842:	2300      	movs	r3, #0
 8000844:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4618      	mov	r0, r3
 800084c:	f003 f882 	bl	8003954 <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 8000850:	2101      	movs	r1, #1
 8000852:	4820      	ldr	r0, [pc, #128]	; (80008d4 <LCD5110_Init+0x148>)
 8000854:	f003 f920 	bl	8003a98 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 8000858:	2100      	movs	r1, #0
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff ff4c 	bl	80006f8 <LCD5110_Pin>
	LCD5110_Delay(10000);
 8000860:	f242 7010 	movw	r0, #10000	; 0x2710
 8000864:	f7ff ff7c 	bl	8000760 <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 8000868:	2101      	movs	r1, #1
 800086a:	2002      	movs	r0, #2
 800086c:	f7ff ff44 	bl	80006f8 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 8000870:	2121      	movs	r1, #33	; 0x21
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f830 	bl	80008d8 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 8000878:	2114      	movs	r1, #20
 800087a:	2000      	movs	r0, #0
 800087c:	f000 f82c 	bl	80008d8 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	da01      	bge.n	800088c <LCD5110_Init+0x100>
		contrast = 0x7F;
 8000888:	237f      	movs	r3, #127	; 0x7f
 800088a:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4619      	mov	r1, r3
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f81e 	bl	80008d8 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 800089c:	2120      	movs	r1, #32
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 f81a 	bl	80008d8 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 80008a4:	210c      	movs	r1, #12
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 f816 	bl	80008d8 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 80008ac:	f000 f8b8 	bl	8000a20 <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 80008b0:	210c      	movs	r1, #12
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 f810 	bl	80008d8 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 80008b8:	f000 f88c 	bl	80009d4 <LCD5110_Clear>
}
 80008bc:	bf00      	nop
 80008be:	3738      	adds	r7, #56	; 0x38
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40013000 	.word	0x40013000

080008d8 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	460a      	mov	r2, r1
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	4613      	mov	r3, r2
 80008e6:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d006      	beq.n	80008fc <LCD5110_Write+0x24>
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d109      	bne.n	8000906 <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 80008f2:	2101      	movs	r1, #1
 80008f4:	2001      	movs	r0, #1
 80008f6:	f7ff feff 	bl	80006f8 <LCD5110_Pin>
			break;
 80008fa:	e005      	b.n	8000908 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 80008fc:	2100      	movs	r1, #0
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff fefa 	bl	80006f8 <LCD5110_Pin>
			break;
 8000904:	e000      	b.n	8000908 <LCD5110_Write+0x30>
		default: break;
 8000906:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fed0 	bl	80006b0 <LCD5110_send>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	460b      	mov	r3, r1
 8000924:	71bb      	strb	r3, [r7, #6]
 8000926:	4613      	mov	r3, r2
 8000928:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b53      	cmp	r3, #83	; 0x53
 800092e:	d849      	bhi.n	80009c4 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	2b2f      	cmp	r3, #47	; 0x2f
 8000934:	d848      	bhi.n	80009c8 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 8000936:	797b      	ldrb	r3, [r7, #5]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d01d      	beq.n	8000978 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	79bb      	ldrb	r3, [r7, #6]
 8000940:	08db      	lsrs	r3, r3, #3
 8000942:	b2d8      	uxtb	r0, r3
 8000944:	4601      	mov	r1, r0
 8000946:	2354      	movs	r3, #84	; 0x54
 8000948:	fb03 f301 	mul.w	r3, r3, r1
 800094c:	4413      	add	r3, r2
 800094e:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <LCD5110_DrawPixel+0xb8>)
 8000950:	5cd3      	ldrb	r3, [r2, r3]
 8000952:	b25a      	sxtb	r2, r3
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	2101      	movs	r1, #1
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	b25b      	sxtb	r3, r3
 8000962:	4313      	orrs	r3, r2
 8000964:	b259      	sxtb	r1, r3
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	2354      	movs	r3, #84	; 0x54
 800096a:	fb03 f300 	mul.w	r3, r3, r0
 800096e:	4413      	add	r3, r2
 8000970:	b2c9      	uxtb	r1, r1
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <LCD5110_DrawPixel+0xb8>)
 8000974:	54d1      	strb	r1, [r2, r3]
 8000976:	e01e      	b.n	80009b6 <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	b2d8      	uxtb	r0, r3
 8000980:	4601      	mov	r1, r0
 8000982:	2354      	movs	r3, #84	; 0x54
 8000984:	fb03 f301 	mul.w	r3, r3, r1
 8000988:	4413      	add	r3, r2
 800098a:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <LCD5110_DrawPixel+0xb8>)
 800098c:	5cd3      	ldrb	r3, [r2, r3]
 800098e:	b25a      	sxtb	r2, r3
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	2101      	movs	r1, #1
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	b25b      	sxtb	r3, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	4013      	ands	r3, r2
 80009a4:	b259      	sxtb	r1, r3
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	2354      	movs	r3, #84	; 0x54
 80009aa:	fb03 f300 	mul.w	r3, r3, r0
 80009ae:	4413      	add	r3, r2
 80009b0:	b2c9      	uxtb	r1, r1
 80009b2:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <LCD5110_DrawPixel+0xb8>)
 80009b4:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 80009b6:	79bb      	ldrb	r3, [r7, #6]
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	79b9      	ldrb	r1, [r7, #6]
 80009bc:	79f8      	ldrb	r0, [r7, #7]
 80009be:	f000 f89d 	bl	8000afc <LCD5110_UpdateArea>
 80009c2:	e002      	b.n	80009ca <LCD5110_DrawPixel+0xb2>
		return;
 80009c4:	bf00      	nop
 80009c6:	e000      	b.n	80009ca <LCD5110_DrawPixel+0xb2>
		return;
 80009c8:	bf00      	nop
}
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20012e24 	.word	0x20012e24

080009d4 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 80009da:	f000 f821 	bl	8000a20 <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	e007      	b.n	80009f4 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <LCD5110_Clear+0x48>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3301      	adds	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80009fa:	d3f3      	bcc.n	80009e4 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 80009fc:	2100      	movs	r1, #0
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f8b8 	bl	8000b74 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 8000a04:	232f      	movs	r3, #47	; 0x2f
 8000a06:	2253      	movs	r2, #83	; 0x53
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 f876 	bl	8000afc <LCD5110_UpdateArea>
	LCD5110_Refresh();
 8000a10:	f000 f812 	bl	8000a38 <LCD5110_Refresh>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20012e24 	.word	0x20012e24

08000a20 <LCD5110_Home>:

void LCD5110_Home(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff ff56 	bl	80008d8 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff ff52 	bl	80008d8 <LCD5110_Write>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	e03b      	b.n	8000abc <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <LCD5110_Refresh+0xb0>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dc2f      	bgt.n	8000ab4 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	4a24      	ldr	r2, [pc, #144]	; (8000aec <LCD5110_Refresh+0xb4>)
 8000a5a:	7812      	ldrb	r2, [r2, #0]
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	dc31      	bgt.n	8000ac4 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	4619      	mov	r1, r3
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ff34 	bl	80008d8 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <LCD5110_Refresh+0xb8>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff ff2b 	bl	80008d8 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <LCD5110_Refresh+0xb8>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	71bb      	strb	r3, [r7, #6]
 8000a88:	e00e      	b.n	8000aa8 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2254      	movs	r2, #84	; 0x54
 8000a8e:	fb02 f203 	mul.w	r2, r2, r3
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <LCD5110_Refresh+0xbc>)
 8000a98:	5cd3      	ldrb	r3, [r2, r3]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff ff1b 	bl	80008d8 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	71bb      	strb	r3, [r7, #6]
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <LCD5110_Refresh+0xc0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	79ba      	ldrb	r2, [r7, #6]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d9eb      	bls.n	8000a8a <LCD5110_Refresh+0x52>
 8000ab2:	e000      	b.n	8000ab6 <LCD5110_Refresh+0x7e>
			continue;
 8000ab4:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b05      	cmp	r3, #5
 8000ac0:	d9c0      	bls.n	8000a44 <LCD5110_Refresh+0xc>
 8000ac2:	e000      	b.n	8000ac6 <LCD5110_Refresh+0x8e>
			break;
 8000ac4:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <LCD5110_Refresh+0xb8>)
 8000ac8:	2253      	movs	r2, #83	; 0x53
 8000aca:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <LCD5110_Refresh+0xc0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <LCD5110_Refresh+0xb0>)
 8000ad4:	222f      	movs	r2, #47	; 0x2f
 8000ad6:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <LCD5110_Refresh+0xb4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000a4 	.word	0x200000a4
 8000aec:	200000a5 	.word	0x200000a5
 8000af0:	200000a2 	.word	0x200000a2
 8000af4:	20012e24 	.word	0x20012e24
 8000af8:	200000a3 	.word	0x200000a3

08000afc <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8000afc:	b490      	push	{r4, r7}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4604      	mov	r4, r0
 8000b04:	4608      	mov	r0, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4623      	mov	r3, r4
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71bb      	strb	r3, [r7, #6]
 8000b12:	460b      	mov	r3, r1
 8000b14:	717b      	strb	r3, [r7, #5]
 8000b16:	4613      	mov	r3, r2
 8000b18:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <LCD5110_UpdateArea+0x68>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d202      	bcs.n	8000b2a <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <LCD5110_UpdateArea+0x68>)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <LCD5110_UpdateArea+0x6c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	797a      	ldrb	r2, [r7, #5]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d902      	bls.n	8000b3a <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8000b34:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <LCD5110_UpdateArea+0x6c>)
 8000b36:	797b      	ldrb	r3, [r7, #5]
 8000b38:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <LCD5110_UpdateArea+0x70>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	79ba      	ldrb	r2, [r7, #6]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d202      	bcs.n	8000b4a <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8000b44:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <LCD5110_UpdateArea+0x70>)
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <LCD5110_UpdateArea+0x74>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	793a      	ldrb	r2, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d902      	bls.n	8000b5a <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <LCD5110_UpdateArea+0x74>)
 8000b56:	793b      	ldrb	r3, [r7, #4]
 8000b58:	7013      	strb	r3, [r2, #0]
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc90      	pop	{r4, r7}
 8000b62:	4770      	bx	lr
 8000b64:	200000a2 	.word	0x200000a2
 8000b68:	200000a3 	.word	0x200000a3
 8000b6c:	200000a4 	.word	0x200000a4
 8000b70:	200000a5 	.word	0x200000a5

08000b74 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <LCD5110_GotoXY+0x28>)
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <LCD5110_GotoXY+0x2c>)
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	7013      	strb	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	20012e20 	.word	0x20012e20
 8000ba0:	20012e21 	.word	0x20012e21

08000ba4 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	71bb      	strb	r3, [r7, #6]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 8000bb6:	797b      	ldrb	r3, [r7, #5]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d104      	bne.n	8000bc6 <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e003      	b.n	8000bce <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 8000bca:	2308      	movs	r3, #8
 8000bcc:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 8000bce:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <LCD5110_Putc+0x144>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	2b54      	cmp	r3, #84	; 0x54
 8000bda:	dd09      	ble.n	8000bf0 <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 8000bdc:	4b43      	ldr	r3, [pc, #268]	; (8000cec <LCD5110_Putc+0x148>)
 8000bde:	781a      	ldrb	r2, [r3, #0]
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	4413      	add	r3, r2
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b41      	ldr	r3, [pc, #260]	; (8000cec <LCD5110_Putc+0x148>)
 8000be8:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 8000bea:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <LCD5110_Putc+0x144>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	737b      	strb	r3, [r7, #13]
 8000bf4:	e068      	b.n	8000cc8 <LCD5110_Putc+0x124>
		if (c < 32) {
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b1f      	cmp	r3, #31
 8000bfa:	d91c      	bls.n	8000c36 <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 8000bfc:	797b      	ldrb	r3, [r7, #5]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d10c      	bne.n	8000c1c <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f1a3 0220 	sub.w	r2, r3, #32
 8000c08:	7b79      	ldrb	r1, [r7, #13]
 8000c0a:	4839      	ldr	r0, [pc, #228]	; (8000cf0 <LCD5110_Putc+0x14c>)
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	4403      	add	r3, r0
 8000c14:	440b      	add	r3, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	733b      	strb	r3, [r7, #12]
 8000c1a:	e00c      	b.n	8000c36 <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f1a3 0220 	sub.w	r2, r3, #32
 8000c22:	7b79      	ldrb	r1, [r7, #13]
 8000c24:	4833      	ldr	r0, [pc, #204]	; (8000cf4 <LCD5110_Putc+0x150>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4403      	add	r3, r0
 8000c30:	440b      	add	r3, r1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8000c36:	7b3b      	ldrb	r3, [r7, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d105      	bne.n	8000c48 <LCD5110_Putc+0xa4>
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <LCD5110_Putc+0xa4>
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b20      	cmp	r3, #32
 8000c46:	d13b      	bne.n	8000cc0 <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	72fb      	strb	r3, [r7, #11]
 8000c4c:	e02d      	b.n	8000caa <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d112      	bne.n	8000c7a <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <LCD5110_Putc+0x144>)
 8000c56:	7818      	ldrb	r0, [r3, #0]
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <LCD5110_Putc+0x148>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	7afb      	ldrb	r3, [r7, #11]
 8000c5e:	4413      	add	r3, r2
 8000c60:	b2d9      	uxtb	r1, r3
 8000c62:	7b3a      	ldrb	r2, [r7, #12]
 8000c64:	7afb      	ldrb	r3, [r7, #11]
 8000c66:	fa42 f303 	asr.w	r3, r2, r3
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	461a      	mov	r2, r3
 8000c74:	f7ff fe50 	bl	8000918 <LCD5110_DrawPixel>
 8000c78:	e014      	b.n	8000ca4 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <LCD5110_Putc+0x144>)
 8000c7c:	7818      	ldrb	r0, [r3, #0]
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <LCD5110_Putc+0x148>)
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	7afb      	ldrb	r3, [r7, #11]
 8000c84:	4413      	add	r3, r2
 8000c86:	b2d9      	uxtb	r1, r3
 8000c88:	7b3a      	ldrb	r2, [r7, #12]
 8000c8a:	7afb      	ldrb	r3, [r7, #11]
 8000c8c:	fa42 f303 	asr.w	r3, r2, r3
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	bf0c      	ite	eq
 8000c98:	2301      	moveq	r3, #1
 8000c9a:	2300      	movne	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f7ff fe3a 	bl	8000918 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8000ca4:	7afb      	ldrb	r3, [r7, #11]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	72fb      	strb	r3, [r7, #11]
 8000caa:	7afa      	ldrb	r2, [r7, #11]
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3cd      	bcc.n	8000c4e <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <LCD5110_Putc+0x144>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <LCD5110_Putc+0x144>)
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e000      	b.n	8000cc2 <LCD5110_Putc+0x11e>
			continue;
 8000cc0:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8000cc2:	7b7b      	ldrb	r3, [r7, #13]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	737b      	strb	r3, [r7, #13]
 8000cc8:	7b7a      	ldrb	r2, [r7, #13]
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	db91      	blt.n	8000bf6 <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <LCD5110_Putc+0x144>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <LCD5110_Putc+0x144>)
 8000cdc:	701a      	strb	r2, [r3, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20012e20 	.word	0x20012e20
 8000cec:	20012e21 	.word	0x20012e21
 8000cf0:	080048c4 	.word	0x080048c4
 8000cf4:	0800467c 	.word	0x0800467c

08000cf8 <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	70fb      	strb	r3, [r7, #3]
 8000d04:	4613      	mov	r3, r2
 8000d06:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8000d08:	e008      	b.n	8000d1c <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	1c5a      	adds	r2, r3, #1
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	78ba      	ldrb	r2, [r7, #2]
 8000d14:	78f9      	ldrb	r1, [r7, #3]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff44 	bl	8000ba4 <LCD5110_Putc>
	while (*c) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f2      	bne.n	8000d0a <LCD5110_Puts+0x12>
	}
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f103 0208 	add.w	r2, r3, #8
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d46:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f103 0208 	add.w	r2, r3, #8
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f103 0208 	add.w	r2, r3, #8
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000de6:	d103      	bne.n	8000df0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	e00c      	b.n	8000e0a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3308      	adds	r3, #8
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	e002      	b.n	8000dfe <vListInsert+0x2e>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d2f6      	bcs.n	8000df8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	1c5a      	adds	r2, r3, #1
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6892      	ldr	r2, [r2, #8]
 8000e58:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	6852      	ldr	r2, [r2, #4]
 8000e62:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d103      	bne.n	8000e76 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	1e5a      	subs	r2, r3, #1
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10a      	bne.n	8000ec2 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb0:	f383 8811 	msr	BASEPRI, r3
 8000eb4:	f3bf 8f6f 	isb	sy
 8000eb8:	f3bf 8f4f 	dsb	sy
 8000ebc:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000ebe:	bf00      	nop
 8000ec0:	e7fe      	b.n	8000ec0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000ec2:	f001 ff91 	bl	8002de8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ece:	68f9      	ldr	r1, [r7, #12]
 8000ed0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ed2:	fb01 f303 	mul.w	r3, r1, r3
 8000ed6:	441a      	add	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	68f9      	ldr	r1, [r7, #12]
 8000ef6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000ef8:	fb01 f303 	mul.w	r3, r1, r3
 8000efc:	441a      	add	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	22ff      	movs	r2, #255	; 0xff
 8000f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	22ff      	movs	r2, #255	; 0xff
 8000f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d114      	bne.n	8000f42 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d01a      	beq.n	8000f56 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3310      	adds	r3, #16
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 f881 	bl	800202c <xTaskRemoveFromEventList>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d012      	beq.n	8000f56 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <xQueueGenericReset+0xcc>)
 8000f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	f3bf 8f4f 	dsb	sy
 8000f3c:	f3bf 8f6f 	isb	sy
 8000f40:	e009      	b.n	8000f56 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3310      	adds	r3, #16
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fef1 	bl	8000d2e <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3324      	adds	r3, #36	; 0x24
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff feec 	bl	8000d2e <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000f56:	f001 ff77 	bl	8002e48 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	e000ed04 	.word	0xe000ed04

08000f68 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	4613      	mov	r3, r2
 8000f74:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10a      	bne.n	8000f92 <xQueueGenericCreate+0x2a>
        __asm volatile
 8000f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f80:	f383 8811 	msr	BASEPRI, r3
 8000f84:	f3bf 8f6f 	isb	sy
 8000f88:	f3bf 8f4f 	dsb	sy
 8000f8c:	61bb      	str	r3, [r7, #24]
    }
 8000f8e:	bf00      	nop
 8000f90:	e7fe      	b.n	8000f90 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <xQueueGenericCreate+0x48>
 8000fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d101      	bne.n	8000fb4 <xQueueGenericCreate+0x4c>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <xQueueGenericCreate+0x4e>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10a      	bne.n	8000fd0 <xQueueGenericCreate+0x68>
        __asm volatile
 8000fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbe:	f383 8811 	msr	BASEPRI, r3
 8000fc2:	f3bf 8f6f 	isb	sy
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	617b      	str	r3, [r7, #20]
    }
 8000fcc:	bf00      	nop
 8000fce:	e7fe      	b.n	8000fce <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000fd6:	d90a      	bls.n	8000fee <xQueueGenericCreate+0x86>
        __asm volatile
 8000fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fdc:	f383 8811 	msr	BASEPRI, r3
 8000fe0:	f3bf 8f6f 	isb	sy
 8000fe4:	f3bf 8f4f 	dsb	sy
 8000fe8:	613b      	str	r3, [r7, #16]
    }
 8000fea:	bf00      	nop
 8000fec:	e7fe      	b.n	8000fec <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	3350      	adds	r3, #80	; 0x50
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 f81a 	bl	800302c <pvPortMalloc>
 8000ff8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00d      	beq.n	800101c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	3350      	adds	r3, #80	; 0x50
 8001008:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f805 	bl	8001026 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800101c:	6a3b      	ldr	r3, [r7, #32]
    }
 800101e:	4618      	mov	r0, r3
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d103      	bne.n	8001042 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	e002      	b.n	8001048 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001054:	2101      	movs	r1, #1
 8001056:	69b8      	ldr	r0, [r7, #24]
 8001058:	f7ff ff1e 	bl	8000e98 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	78fa      	ldrb	r2, [r7, #3]
 8001060:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10a      	bne.n	800109e <xQueueGenericSend+0x32>
        __asm volatile
 8001088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800108c:	f383 8811 	msr	BASEPRI, r3
 8001090:	f3bf 8f6f 	isb	sy
 8001094:	f3bf 8f4f 	dsb	sy
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800109a:	bf00      	nop
 800109c:	e7fe      	b.n	800109c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <xQueueGenericSend+0x40>
 80010a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <xQueueGenericSend+0x44>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <xQueueGenericSend+0x46>
 80010b0:	2300      	movs	r3, #0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10a      	bne.n	80010cc <xQueueGenericSend+0x60>
        __asm volatile
 80010b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ba:	f383 8811 	msr	BASEPRI, r3
 80010be:	f3bf 8f6f 	isb	sy
 80010c2:	f3bf 8f4f 	dsb	sy
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80010c8:	bf00      	nop
 80010ca:	e7fe      	b.n	80010ca <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d103      	bne.n	80010da <xQueueGenericSend+0x6e>
 80010d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <xQueueGenericSend+0x72>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <xQueueGenericSend+0x74>
 80010de:	2300      	movs	r3, #0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10a      	bne.n	80010fa <xQueueGenericSend+0x8e>
        __asm volatile
 80010e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e8:	f383 8811 	msr	BASEPRI, r3
 80010ec:	f3bf 8f6f 	isb	sy
 80010f0:	f3bf 8f4f 	dsb	sy
 80010f4:	623b      	str	r3, [r7, #32]
    }
 80010f6:	bf00      	nop
 80010f8:	e7fe      	b.n	80010f8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80010fa:	f001 f933 	bl	8002364 <xTaskGetSchedulerState>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <xQueueGenericSend+0x9e>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <xQueueGenericSend+0xa2>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <xQueueGenericSend+0xa4>
 800110e:	2300      	movs	r3, #0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10a      	bne.n	800112a <xQueueGenericSend+0xbe>
        __asm volatile
 8001114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001118:	f383 8811 	msr	BASEPRI, r3
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	f3bf 8f4f 	dsb	sy
 8001124:	61fb      	str	r3, [r7, #28]
    }
 8001126:	bf00      	nop
 8001128:	e7fe      	b.n	8001128 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800112a:	f001 fe5d 	bl	8002de8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800112e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001136:	429a      	cmp	r2, r3
 8001138:	d302      	bcc.n	8001140 <xQueueGenericSend+0xd4>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d129      	bne.n	8001194 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001146:	f000 fa19 	bl	800157c <prvCopyDataToQueue>
 800114a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	2b00      	cmp	r3, #0
 8001152:	d010      	beq.n	8001176 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001156:	3324      	adds	r3, #36	; 0x24
 8001158:	4618      	mov	r0, r3
 800115a:	f000 ff67 	bl	800202c <xTaskRemoveFromEventList>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001164:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <xQueueGenericSend+0x1f8>)
 8001166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	f3bf 8f4f 	dsb	sy
 8001170:	f3bf 8f6f 	isb	sy
 8001174:	e00a      	b.n	800118c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800117c:	4b39      	ldr	r3, [pc, #228]	; (8001264 <xQueueGenericSend+0x1f8>)
 800117e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	f3bf 8f4f 	dsb	sy
 8001188:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800118c:	f001 fe5c 	bl	8002e48 <vPortExitCritical>
                return pdPASS;
 8001190:	2301      	movs	r3, #1
 8001192:	e063      	b.n	800125c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d103      	bne.n	80011a2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800119a:	f001 fe55 	bl	8002e48 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	e05c      	b.n	800125c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80011a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d106      	bne.n	80011b6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 ff9f 	bl	80020f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80011b2:	2301      	movs	r3, #1
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80011b6:	f001 fe47 	bl	8002e48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80011ba:	f000 fd19 	bl	8001bf0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80011be:	f001 fe13 	bl	8002de8 <vPortEnterCritical>
 80011c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011ce:	d103      	bne.n	80011d8 <xQueueGenericSend+0x16c>
 80011d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011e4:	d103      	bne.n	80011ee <xQueueGenericSend+0x182>
 80011e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011ee:	f001 fe2b 	bl	8002e48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011f2:	1d3a      	adds	r2, r7, #4
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 ff8e 	bl	800211c <xTaskCheckForTimeOut>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d124      	bne.n	8001250 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001208:	f000 fab0 	bl	800176c <prvIsQueueFull>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d018      	beq.n	8001244 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001214:	3310      	adds	r3, #16
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 feb6 	bl	8001f8c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001222:	f000 fa3b 	bl	800169c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001226:	f000 fcf1 	bl	8001c0c <xTaskResumeAll>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	f47f af7c 	bne.w	800112a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <xQueueGenericSend+0x1f8>)
 8001234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	f3bf 8f4f 	dsb	sy
 800123e:	f3bf 8f6f 	isb	sy
 8001242:	e772      	b.n	800112a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001246:	f000 fa29 	bl	800169c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800124a:	f000 fcdf 	bl	8001c0c <xTaskResumeAll>
 800124e:	e76c      	b.n	800112a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001252:	f000 fa23 	bl	800169c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001256:	f000 fcd9 	bl	8001c0c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800125a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800125c:	4618      	mov	r0, r3
 800125e:	3738      	adds	r7, #56	; 0x38
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	e000ed04 	.word	0xe000ed04

08001268 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b090      	sub	sp, #64	; 0x40
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800127a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10a      	bne.n	8001296 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001284:	f383 8811 	msr	BASEPRI, r3
 8001288:	f3bf 8f6f 	isb	sy
 800128c:	f3bf 8f4f 	dsb	sy
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001292:	bf00      	nop
 8001294:	e7fe      	b.n	8001294 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d103      	bne.n	80012a4 <xQueueGenericSendFromISR+0x3c>
 800129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <xQueueGenericSendFromISR+0x40>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <xQueueGenericSendFromISR+0x42>
 80012a8:	2300      	movs	r3, #0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10a      	bne.n	80012c4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80012ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b2:	f383 8811 	msr	BASEPRI, r3
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	f3bf 8f4f 	dsb	sy
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80012c0:	bf00      	nop
 80012c2:	e7fe      	b.n	80012c2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d103      	bne.n	80012d2 <xQueueGenericSendFromISR+0x6a>
 80012ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <xQueueGenericSendFromISR+0x6e>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <xQueueGenericSendFromISR+0x70>
 80012d6:	2300      	movs	r3, #0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10a      	bne.n	80012f2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80012dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012e0:	f383 8811 	msr	BASEPRI, r3
 80012e4:	f3bf 8f6f 	isb	sy
 80012e8:	f3bf 8f4f 	dsb	sy
 80012ec:	623b      	str	r3, [r7, #32]
    }
 80012ee:	bf00      	nop
 80012f0:	e7fe      	b.n	80012f0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80012f2:	f001 fe5b 	bl	8002fac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80012f6:	f3ef 8211 	mrs	r2, BASEPRI
 80012fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012fe:	f383 8811 	msr	BASEPRI, r3
 8001302:	f3bf 8f6f 	isb	sy
 8001306:	f3bf 8f4f 	dsb	sy
 800130a:	61fa      	str	r2, [r7, #28]
 800130c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800130e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001310:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131a:	429a      	cmp	r2, r3
 800131c:	d302      	bcc.n	8001324 <xQueueGenericSendFromISR+0xbc>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d13e      	bne.n	80013a2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800132a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800133a:	f000 f91f 	bl	800157c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800133e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001346:	d112      	bne.n	800136e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	2b00      	cmp	r3, #0
 800134e:	d025      	beq.n	800139c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001352:	3324      	adds	r3, #36	; 0x24
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fe69 	bl	800202c <xTaskRemoveFromEventList>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01d      	beq.n	800139c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d01a      	beq.n	800139c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	e016      	b.n	800139c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800136e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001372:	2b7f      	cmp	r3, #127	; 0x7f
 8001374:	d10a      	bne.n	800138c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8001376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137a:	f383 8811 	msr	BASEPRI, r3
 800137e:	f3bf 8f6f 	isb	sy
 8001382:	f3bf 8f4f 	dsb	sy
 8001386:	617b      	str	r3, [r7, #20]
    }
 8001388:	bf00      	nop
 800138a:	e7fe      	b.n	800138a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800138c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001390:	3301      	adds	r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	b25a      	sxtb	r2, r3
 8001396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800139c:	2301      	movs	r3, #1
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80013a0:	e001      	b.n	80013a6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80013b0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80013b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3740      	adds	r7, #64	; 0x40
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10a      	bne.n	80013ec <xQueueReceive+0x30>
        __asm volatile
 80013d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013da:	f383 8811 	msr	BASEPRI, r3
 80013de:	f3bf 8f6f 	isb	sy
 80013e2:	f3bf 8f4f 	dsb	sy
 80013e6:	623b      	str	r3, [r7, #32]
    }
 80013e8:	bf00      	nop
 80013ea:	e7fe      	b.n	80013ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <xQueueReceive+0x3e>
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <xQueueReceive+0x42>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <xQueueReceive+0x44>
 80013fe:	2300      	movs	r3, #0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10a      	bne.n	800141a <xQueueReceive+0x5e>
        __asm volatile
 8001404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001408:	f383 8811 	msr	BASEPRI, r3
 800140c:	f3bf 8f6f 	isb	sy
 8001410:	f3bf 8f4f 	dsb	sy
 8001414:	61fb      	str	r3, [r7, #28]
    }
 8001416:	bf00      	nop
 8001418:	e7fe      	b.n	8001418 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800141a:	f000 ffa3 	bl	8002364 <xTaskGetSchedulerState>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <xQueueReceive+0x6e>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <xQueueReceive+0x72>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <xQueueReceive+0x74>
 800142e:	2300      	movs	r3, #0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10a      	bne.n	800144a <xQueueReceive+0x8e>
        __asm volatile
 8001434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001438:	f383 8811 	msr	BASEPRI, r3
 800143c:	f3bf 8f6f 	isb	sy
 8001440:	f3bf 8f4f 	dsb	sy
 8001444:	61bb      	str	r3, [r7, #24]
    }
 8001446:	bf00      	nop
 8001448:	e7fe      	b.n	8001448 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800144a:	f001 fccd 	bl	8002de8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	2b00      	cmp	r3, #0
 8001458:	d01f      	beq.n	800149a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800145e:	f000 f8f7 	bl	8001650 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001468:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800146a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00f      	beq.n	8001492 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	3310      	adds	r3, #16
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fdd8 	bl	800202c <xTaskRemoveFromEventList>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <xQueueReceive+0x1bc>)
 8001484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001492:	f001 fcd9 	bl	8002e48 <vPortExitCritical>
                return pdPASS;
 8001496:	2301      	movs	r3, #1
 8001498:	e069      	b.n	800156e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80014a0:	f001 fcd2 	bl	8002e48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e062      	b.n	800156e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80014a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fe1c 	bl	80020f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80014bc:	f001 fcc4 	bl	8002e48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80014c0:	f000 fb96 	bl	8001bf0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80014c4:	f001 fc90 	bl	8002de8 <vPortEnterCritical>
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014d4:	d103      	bne.n	80014de <xQueueReceive+0x122>
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ea:	d103      	bne.n	80014f4 <xQueueReceive+0x138>
 80014ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014f4:	f001 fca8 	bl	8002e48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80014f8:	1d3a      	adds	r2, r7, #4
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fe0b 	bl	800211c <xTaskCheckForTimeOut>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d123      	bne.n	8001554 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800150c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800150e:	f000 f917 	bl	8001740 <prvIsQueueEmpty>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d017      	beq.n	8001548 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151a:	3324      	adds	r3, #36	; 0x24
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fd33 	bl	8001f8c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001528:	f000 f8b8 	bl	800169c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800152c:	f000 fb6e 	bl	8001c0c <xTaskResumeAll>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d189      	bne.n	800144a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <xQueueReceive+0x1bc>)
 8001538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	f3bf 8f4f 	dsb	sy
 8001542:	f3bf 8f6f 	isb	sy
 8001546:	e780      	b.n	800144a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800154a:	f000 f8a7 	bl	800169c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800154e:	f000 fb5d 	bl	8001c0c <xTaskResumeAll>
 8001552:	e77a      	b.n	800144a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001556:	f000 f8a1 	bl	800169c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800155a:	f000 fb57 	bl	8001c0c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800155e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001560:	f000 f8ee 	bl	8001740 <prvIsQueueEmpty>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	f43f af6f 	beq.w	800144a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800156c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800156e:	4618      	mov	r0, r3
 8001570:	3730      	adds	r7, #48	; 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000ed04 	.word	0xe000ed04

0800157c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001590:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10d      	bne.n	80015b6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d14d      	bne.n	800163e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fefa 	bl	80023a0 <xTaskPriorityDisinherit>
 80015ac:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e043      	b.n	800163e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d119      	bne.n	80015f0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6858      	ldr	r0, [r3, #4]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	461a      	mov	r2, r3
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	f002 fbf8 	bl	8003dbc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	441a      	add	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d32b      	bcc.n	800163e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	e026      	b.n	800163e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	68d8      	ldr	r0, [r3, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	461a      	mov	r2, r3
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	f002 fbde 	bl	8003dbc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	425b      	negs	r3, r3
 800160a:	441a      	add	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	425b      	negs	r3, r3
 8001626:	441a      	add	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d105      	bne.n	800163e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	3b01      	subs	r3, #1
 800163c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001646:	697b      	ldr	r3, [r7, #20]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	d018      	beq.n	8001694 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	441a      	add	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	429a      	cmp	r2, r3
 800167a:	d303      	bcc.n	8001684 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68d9      	ldr	r1, [r3, #12]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	461a      	mov	r2, r3
 800168e:	6838      	ldr	r0, [r7, #0]
 8001690:	f002 fb94 	bl	8003dbc <memcpy>
    }
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80016a4:	f001 fba0 	bl	8002de8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80016b0:	e011      	b.n	80016d6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d012      	beq.n	80016e0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3324      	adds	r3, #36	; 0x24
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fcb4 	bl	800202c <xTaskRemoveFromEventList>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80016ca:	f000 fd8d 	bl	80021e8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	dce9      	bgt.n	80016b2 <prvUnlockQueue+0x16>
 80016de:	e000      	b.n	80016e2 <prvUnlockQueue+0x46>
                        break;
 80016e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	22ff      	movs	r2, #255	; 0xff
 80016e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80016ea:	f001 fbad 	bl	8002e48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80016ee:	f001 fb7b 	bl	8002de8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80016fa:	e011      	b.n	8001720 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d012      	beq.n	800172a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3310      	adds	r3, #16
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fc8f 	bl	800202c <xTaskRemoveFromEventList>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001714:	f000 fd68 	bl	80021e8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001718:	7bbb      	ldrb	r3, [r7, #14]
 800171a:	3b01      	subs	r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001724:	2b00      	cmp	r3, #0
 8001726:	dce9      	bgt.n	80016fc <prvUnlockQueue+0x60>
 8001728:	e000      	b.n	800172c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800172a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	22ff      	movs	r2, #255	; 0xff
 8001730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001734:	f001 fb88 	bl	8002e48 <vPortExitCritical>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001748:	f001 fb4e 	bl	8002de8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001754:	2301      	movs	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e001      	b.n	800175e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800175e:	f001 fb73 	bl	8002e48 <vPortExitCritical>

    return xReturn;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001774:	f001 fb38 	bl	8002de8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	429a      	cmp	r2, r3
 8001782:	d102      	bne.n	800178a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001784:	2301      	movs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	e001      	b.n	800178e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800178e:	f001 fb5b 	bl	8002e48 <vPortExitCritical>

    return xReturn;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e014      	b.n	80017d6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80017ac:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <vQueueAddToRegistry+0x50>)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10b      	bne.n	80017d0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <vQueueAddToRegistry+0x50>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <vQueueAddToRegistry+0x50>)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80017ce:	e006      	b.n	80017de <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b07      	cmp	r3, #7
 80017da:	d9e7      	bls.n	80017ac <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2001301c 	.word	0x2001301c

080017f0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001800:	f001 faf2 	bl	8002de8 <vPortEnterCritical>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001810:	d103      	bne.n	800181a <vQueueWaitForMessageRestricted+0x2a>
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001820:	b25b      	sxtb	r3, r3
 8001822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001826:	d103      	bne.n	8001830 <vQueueWaitForMessageRestricted+0x40>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001830:	f001 fb0a 	bl	8002e48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3324      	adds	r3, #36	; 0x24
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fbc5 	bl	8001fd4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff26 	bl	800169c <prvUnlockQueue>
    }
 8001850:	bf00      	nop
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	; 0x30
 800185c:	af04      	add	r7, sp, #16
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	4613      	mov	r3, r2
 8001866:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4618      	mov	r0, r3
 800186e:	f001 fbdd 	bl	800302c <pvPortMalloc>
 8001872:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00e      	beq.n	8001898 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800187a:	2058      	movs	r0, #88	; 0x58
 800187c:	f001 fbd6 	bl	800302c <pvPortMalloc>
 8001880:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
 800188e:	e005      	b.n	800189c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001890:	6978      	ldr	r0, [r7, #20]
 8001892:	f001 fcab 	bl	80031ec <vPortFree>
 8001896:	e001      	b.n	800189c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d013      	beq.n	80018ca <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80018a2:	88fa      	ldrh	r2, [r7, #6]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9303      	str	r3, [sp, #12]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 f80e 	bl	80018da <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80018be:	69f8      	ldr	r0, [r7, #28]
 80018c0:	f000 f8a2 	bl	8001a08 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	e002      	b.n	80018d0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ce:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80018d0:	69bb      	ldr	r3, [r7, #24]
    }
 80018d2:	4618      	mov	r0, r3
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b088      	sub	sp, #32
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80018e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	461a      	mov	r2, r3
 80018f2:	21a5      	movs	r1, #165	; 0xa5
 80018f4:	f002 fa70 	bl	8003dd8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80018f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001902:	3b01      	subs	r3, #1
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f023 0307 	bic.w	r3, r3, #7
 8001910:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00a      	beq.n	8001932 <prvInitialiseNewTask+0x58>
        __asm volatile
 800191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001920:	f383 8811 	msr	BASEPRI, r3
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	617b      	str	r3, [r7, #20]
    }
 800192e:	bf00      	nop
 8001930:	e7fe      	b.n	8001930 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01f      	beq.n	8001978 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	e012      	b.n	8001964 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4413      	add	r3, r2
 8001944:	7819      	ldrb	r1, [r3, #0]
 8001946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	3334      	adds	r3, #52	; 0x34
 800194e:	460a      	mov	r2, r1
 8001950:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3301      	adds	r3, #1
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b09      	cmp	r3, #9
 8001968:	d9e9      	bls.n	800193e <prvInitialiseNewTask+0x64>
 800196a:	e000      	b.n	800196e <prvInitialiseNewTask+0x94>
            {
                break;
 800196c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001976:	e003      	b.n	8001980 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	2b04      	cmp	r3, #4
 8001984:	d901      	bls.n	800198a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001986:	2304      	movs	r3, #4
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800198a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001994:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	2200      	movs	r2, #0
 800199a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199e:	3304      	adds	r3, #4
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff f9e4 	bl	8000d6e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80019a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a8:	3318      	adds	r3, #24
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f9df 	bl	8000d6e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80019b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019b4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b8:	f1c3 0205 	rsb	r2, r3, #5
 80019bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019be:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80019c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80019c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c8:	3350      	adds	r3, #80	; 0x50
 80019ca:	2204      	movs	r2, #4
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fa02 	bl	8003dd8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80019d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d6:	3354      	adds	r3, #84	; 0x54
 80019d8:	2201      	movs	r2, #1
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 f9fb 	bl	8003dd8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	68f9      	ldr	r1, [r7, #12]
 80019e6:	69b8      	ldr	r0, [r7, #24]
 80019e8:	f001 f8cc 	bl	8002b84 <pxPortInitialiseStack>
 80019ec:	4602      	mov	r2, r0
 80019ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80019f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80019f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80019fe:	bf00      	nop
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001a10:	f001 f9ea 	bl	8002de8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001a14:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <prvAddNewTaskToReadyList+0xc0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	4a2b      	ldr	r2, [pc, #172]	; (8001ac8 <prvAddNewTaskToReadyList+0xc0>)
 8001a1c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <prvAddNewTaskToReadyList+0xc4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d109      	bne.n	8001a3a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001a26:	4a29      	ldr	r2, [pc, #164]	; (8001acc <prvAddNewTaskToReadyList+0xc4>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a2c:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <prvAddNewTaskToReadyList+0xc0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d110      	bne.n	8001a56 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001a34:	f000 fbfc 	bl	8002230 <prvInitialiseTaskLists>
 8001a38:	e00d      	b.n	8001a56 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <prvAddNewTaskToReadyList+0xc8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <prvAddNewTaskToReadyList+0xc4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d802      	bhi.n	8001a56 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001a50:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <prvAddNewTaskToReadyList+0xc4>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <prvAddNewTaskToReadyList+0xcc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <prvAddNewTaskToReadyList+0xcc>)
 8001a5e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <prvAddNewTaskToReadyList+0xcc>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <prvAddNewTaskToReadyList+0xd0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <prvAddNewTaskToReadyList+0xd0>)
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4a15      	ldr	r2, [pc, #84]	; (8001adc <prvAddNewTaskToReadyList+0xd4>)
 8001a88:	441a      	add	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4610      	mov	r0, r2
 8001a92:	f7ff f979 	bl	8000d88 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001a96:	f001 f9d7 	bl	8002e48 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <prvAddNewTaskToReadyList+0xc8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00e      	beq.n	8001ac0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <prvAddNewTaskToReadyList+0xc4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d207      	bcs.n	8001ac0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <prvAddNewTaskToReadyList+0xd8>)
 8001ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	f3bf 8f4f 	dsb	sy
 8001abc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000180 	.word	0x20000180
 8001acc:	200000a8 	.word	0x200000a8
 8001ad0:	2000018c 	.word	0x2000018c
 8001ad4:	2000019c 	.word	0x2000019c
 8001ad8:	20000188 	.word	0x20000188
 8001adc:	200000ac 	.word	0x200000ac
 8001ae0:	e000ed04 	.word	0xe000ed04

08001ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d017      	beq.n	8001b26 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <vTaskDelay+0x60>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00a      	beq.n	8001b14 <vTaskDelay+0x30>
        __asm volatile
 8001afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b02:	f383 8811 	msr	BASEPRI, r3
 8001b06:	f3bf 8f6f 	isb	sy
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	60bb      	str	r3, [r7, #8]
    }
 8001b10:	bf00      	nop
 8001b12:	e7fe      	b.n	8001b12 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001b14:	f000 f86c 	bl	8001bf0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001b18:	2100      	movs	r1, #0
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fcba 	bl	8002494 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001b20:	f000 f874 	bl	8001c0c <xTaskResumeAll>
 8001b24:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <vTaskDelay+0x64>)
 8001b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f3bf 8f4f 	dsb	sy
 8001b38:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200001a8 	.word	0x200001a8
 8001b48:	e000ed04 	.word	0xe000ed04

08001b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <vTaskStartScheduler+0x88>)
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	2300      	movs	r3, #0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2282      	movs	r2, #130	; 0x82
 8001b5e:	491e      	ldr	r1, [pc, #120]	; (8001bd8 <vTaskStartScheduler+0x8c>)
 8001b60:	481e      	ldr	r0, [pc, #120]	; (8001bdc <vTaskStartScheduler+0x90>)
 8001b62:	f7ff fe79 	bl	8001858 <xTaskCreate>
 8001b66:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d102      	bne.n	8001b74 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001b6e:	f000 fcf7 	bl	8002560 <xTimerCreateTimerTask>
 8001b72:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d116      	bne.n	8001ba8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7e:	f383 8811 	msr	BASEPRI, r3
 8001b82:	f3bf 8f6f 	isb	sy
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	60bb      	str	r3, [r7, #8]
    }
 8001b8c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <vTaskStartScheduler+0x94>)
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b94:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <vTaskStartScheduler+0x98>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <vTaskStartScheduler+0x9c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001ba2:	f001 f87f 	bl	8002ca4 <xPortStartScheduler>
 8001ba6:	e00e      	b.n	8001bc6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bae:	d10a      	bne.n	8001bc6 <vTaskStartScheduler+0x7a>
        __asm volatile
 8001bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb4:	f383 8811 	msr	BASEPRI, r3
 8001bb8:	f3bf 8f6f 	isb	sy
 8001bbc:	f3bf 8f4f 	dsb	sy
 8001bc0:	607b      	str	r3, [r7, #4]
    }
 8001bc2:	bf00      	nop
 8001bc4:	e7fe      	b.n	8001bc4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <vTaskStartScheduler+0xa0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200001a4 	.word	0x200001a4
 8001bd8:	08004640 	.word	0x08004640
 8001bdc:	08002201 	.word	0x08002201
 8001be0:	200001a0 	.word	0x200001a0
 8001be4:	2000018c 	.word	0x2000018c
 8001be8:	20000184 	.word	0x20000184
 8001bec:	20000014 	.word	0x20000014

08001bf0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <vTaskSuspendAll+0x18>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <vTaskSuspendAll+0x18>)
 8001bfc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	200001a8 	.word	0x200001a8

08001c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <xTaskResumeAll+0x114>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10a      	bne.n	8001c38 <xTaskResumeAll+0x2c>
        __asm volatile
 8001c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c26:	f383 8811 	msr	BASEPRI, r3
 8001c2a:	f3bf 8f6f 	isb	sy
 8001c2e:	f3bf 8f4f 	dsb	sy
 8001c32:	603b      	str	r3, [r7, #0]
    }
 8001c34:	bf00      	nop
 8001c36:	e7fe      	b.n	8001c36 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001c38:	f001 f8d6 	bl	8002de8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001c3c:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <xTaskResumeAll+0x114>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	4a37      	ldr	r2, [pc, #220]	; (8001d20 <xTaskResumeAll+0x114>)
 8001c44:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c46:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <xTaskResumeAll+0x114>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d161      	bne.n	8001d12 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c4e:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <xTaskResumeAll+0x118>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d05d      	beq.n	8001d12 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c56:	e02e      	b.n	8001cb6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c58:	4b33      	ldr	r3, [pc, #204]	; (8001d28 <xTaskResumeAll+0x11c>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3318      	adds	r3, #24
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f8ec 	bl	8000e42 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f8e7 	bl	8000e42 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	2201      	movs	r2, #1
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <xTaskResumeAll+0x120>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	4a2a      	ldr	r2, [pc, #168]	; (8001d2c <xTaskResumeAll+0x120>)
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <xTaskResumeAll+0x124>)
 8001c94:	441a      	add	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7ff f873 	bl	8000d88 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <xTaskResumeAll+0x128>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d302      	bcc.n	8001cb6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <xTaskResumeAll+0x12c>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <xTaskResumeAll+0x11c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1cc      	bne.n	8001c58 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001cc4:	f000 fb32 	bl	800232c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <xTaskResumeAll+0x130>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d010      	beq.n	8001cf6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001cd4:	f000 f846 	bl	8001d64 <xTaskIncrementTick>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <xTaskResumeAll+0x12c>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f1      	bne.n	8001cd4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <xTaskResumeAll+0x130>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <xTaskResumeAll+0x12c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <xTaskResumeAll+0x134>)
 8001d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001d12:	f001 f899 	bl	8002e48 <vPortExitCritical>

    return xAlreadyYielded;
 8001d16:	68bb      	ldr	r3, [r7, #8]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200001a8 	.word	0x200001a8
 8001d24:	20000180 	.word	0x20000180
 8001d28:	20000140 	.word	0x20000140
 8001d2c:	20000188 	.word	0x20000188
 8001d30:	200000ac 	.word	0x200000ac
 8001d34:	200000a8 	.word	0x200000a8
 8001d38:	20000194 	.word	0x20000194
 8001d3c:	20000190 	.word	0x20000190
 8001d40:	e000ed04 	.word	0xe000ed04

08001d44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <xTaskGetTickCount+0x1c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000184 	.word	0x20000184

08001d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <xTaskIncrementTick+0x144>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 808e 	bne.w	8001e94 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d78:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <xTaskIncrementTick+0x148>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001d80:	4a4a      	ldr	r2, [pc, #296]	; (8001eac <xTaskIncrementTick+0x148>)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d120      	bne.n	8001dce <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <xTaskIncrementTick+0x14c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <xTaskIncrementTick+0x48>
        __asm volatile
 8001d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9a:	f383 8811 	msr	BASEPRI, r3
 8001d9e:	f3bf 8f6f 	isb	sy
 8001da2:	f3bf 8f4f 	dsb	sy
 8001da6:	603b      	str	r3, [r7, #0]
    }
 8001da8:	bf00      	nop
 8001daa:	e7fe      	b.n	8001daa <xTaskIncrementTick+0x46>
 8001dac:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <xTaskIncrementTick+0x14c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <xTaskIncrementTick+0x150>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a3e      	ldr	r2, [pc, #248]	; (8001eb0 <xTaskIncrementTick+0x14c>)
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4a3e      	ldr	r2, [pc, #248]	; (8001eb4 <xTaskIncrementTick+0x150>)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <xTaskIncrementTick+0x154>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	4a3c      	ldr	r2, [pc, #240]	; (8001eb8 <xTaskIncrementTick+0x154>)
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	f000 faaf 	bl	800232c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <xTaskIncrementTick+0x158>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d348      	bcc.n	8001e6a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dd8:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <xTaskIncrementTick+0x14c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d104      	bne.n	8001dec <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001de2:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <xTaskIncrementTick+0x158>)
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de8:	601a      	str	r2, [r3, #0]
                    break;
 8001dea:	e03e      	b.n	8001e6a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <xTaskIncrementTick+0x14c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d203      	bcs.n	8001e0c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001e04:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <xTaskIncrementTick+0x158>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001e0a:	e02e      	b.n	8001e6a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f816 	bl	8000e42 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3318      	adds	r3, #24
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f80d 	bl	8000e42 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <xTaskIncrementTick+0x15c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <xTaskIncrementTick+0x15c>)
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <xTaskIncrementTick+0x160>)
 8001e48:	441a      	add	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f7fe ff99 	bl	8000d88 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <xTaskIncrementTick+0x164>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d3b9      	bcc.n	8001dd8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e68:	e7b6      	b.n	8001dd8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <xTaskIncrementTick+0x164>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e70:	4914      	ldr	r1, [pc, #80]	; (8001ec4 <xTaskIncrementTick+0x160>)
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d901      	bls.n	8001e86 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8001e82:	2301      	movs	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <xTaskIncrementTick+0x168>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e004      	b.n	8001e9e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <xTaskIncrementTick+0x16c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <xTaskIncrementTick+0x16c>)
 8001e9c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001e9e:	697b      	ldr	r3, [r7, #20]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200001a8 	.word	0x200001a8
 8001eac:	20000184 	.word	0x20000184
 8001eb0:	20000138 	.word	0x20000138
 8001eb4:	2000013c 	.word	0x2000013c
 8001eb8:	20000198 	.word	0x20000198
 8001ebc:	200001a0 	.word	0x200001a0
 8001ec0:	20000188 	.word	0x20000188
 8001ec4:	200000ac 	.word	0x200000ac
 8001ec8:	200000a8 	.word	0x200000a8
 8001ecc:	20000194 	.word	0x20000194
 8001ed0:	20000190 	.word	0x20000190

08001ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001eda:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <vTaskSwitchContext+0xa4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <vTaskSwitchContext+0xa8>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001ee8:	e03f      	b.n	8001f6a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001eea:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <vTaskSwitchContext+0xa8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <vTaskSwitchContext+0xac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	f1c3 031f 	rsb	r3, r3, #31
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	491f      	ldr	r1, [pc, #124]	; (8001f84 <vTaskSwitchContext+0xb0>)
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10a      	bne.n	8001f30 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1e:	f383 8811 	msr	BASEPRI, r3
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	f3bf 8f4f 	dsb	sy
 8001f2a:	607b      	str	r3, [r7, #4]
    }
 8001f2c:	bf00      	nop
 8001f2e:	e7fe      	b.n	8001f2e <vTaskSwitchContext+0x5a>
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <vTaskSwitchContext+0xb0>)
 8001f3c:	4413      	add	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	3308      	adds	r3, #8
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d104      	bne.n	8001f60 <vTaskSwitchContext+0x8c>
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <vTaskSwitchContext+0xb4>)
 8001f68:	6013      	str	r3, [r2, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200001a8 	.word	0x200001a8
 8001f7c:	20000194 	.word	0x20000194
 8001f80:	20000188 	.word	0x20000188
 8001f84:	200000ac 	.word	0x200000ac
 8001f88:	200000a8 	.word	0x200000a8

08001f8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa0:	f383 8811 	msr	BASEPRI, r3
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	60fb      	str	r3, [r7, #12]
    }
 8001fae:	bf00      	nop
 8001fb0:	e7fe      	b.n	8001fb0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <vTaskPlaceOnEventList+0x44>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3318      	adds	r3, #24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe ff08 	bl	8000dd0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	6838      	ldr	r0, [r7, #0]
 8001fc4:	f000 fa66 	bl	8002494 <prvAddCurrentTaskToDelayedList>
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200000a8 	.word	0x200000a8

08001fd4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10a      	bne.n	8001ffc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fea:	f383 8811 	msr	BASEPRI, r3
 8001fee:	f3bf 8f6f 	isb	sy
 8001ff2:	f3bf 8f4f 	dsb	sy
 8001ff6:	617b      	str	r3, [r7, #20]
    }
 8001ff8:	bf00      	nop
 8001ffa:	e7fe      	b.n	8001ffa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <vTaskPlaceOnEventListRestricted+0x54>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3318      	adds	r3, #24
 8002002:	4619      	mov	r1, r3
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7fe febf 	bl	8000d88 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002014:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	68b8      	ldr	r0, [r7, #8]
 800201a:	f000 fa3b 	bl	8002494 <prvAddCurrentTaskToDelayedList>
    }
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200000a8 	.word	0x200000a8

0800202c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10a      	bne.n	8002058 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002046:	f383 8811 	msr	BASEPRI, r3
 800204a:	f3bf 8f6f 	isb	sy
 800204e:	f3bf 8f4f 	dsb	sy
 8002052:	60fb      	str	r3, [r7, #12]
    }
 8002054:	bf00      	nop
 8002056:	e7fe      	b.n	8002056 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	3318      	adds	r3, #24
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fef0 	bl	8000e42 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002062:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <xTaskRemoveFromEventList+0xac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11c      	bne.n	80020a4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	3304      	adds	r3, #4
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fee7 	bl	8000e42 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	2201      	movs	r2, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <xTaskRemoveFromEventList+0xb0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	4a16      	ldr	r2, [pc, #88]	; (80020dc <xTaskRemoveFromEventList+0xb0>)
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <xTaskRemoveFromEventList+0xb4>)
 8002094:	441a      	add	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	3304      	adds	r3, #4
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f7fe fe73 	bl	8000d88 <vListInsertEnd>
 80020a2:	e005      	b.n	80020b0 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	3318      	adds	r3, #24
 80020a8:	4619      	mov	r1, r3
 80020aa:	480e      	ldr	r0, [pc, #56]	; (80020e4 <xTaskRemoveFromEventList+0xb8>)
 80020ac:	f7fe fe6c 	bl	8000d88 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <xTaskRemoveFromEventList+0xbc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d905      	bls.n	80020ca <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80020be:	2301      	movs	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <xTaskRemoveFromEventList+0xc0>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e001      	b.n	80020ce <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80020ce:	697b      	ldr	r3, [r7, #20]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200001a8 	.word	0x200001a8
 80020dc:	20000188 	.word	0x20000188
 80020e0:	200000ac 	.word	0x200000ac
 80020e4:	20000140 	.word	0x20000140
 80020e8:	200000a8 	.word	0x200000a8
 80020ec:	20000194 	.word	0x20000194

080020f0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <vTaskInternalSetTimeOutState+0x24>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <vTaskInternalSetTimeOutState+0x28>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	20000198 	.word	0x20000198
 8002118:	20000184 	.word	0x20000184

0800211c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10a      	bne.n	8002142 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002130:	f383 8811 	msr	BASEPRI, r3
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	613b      	str	r3, [r7, #16]
    }
 800213e:	bf00      	nop
 8002140:	e7fe      	b.n	8002140 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	60fb      	str	r3, [r7, #12]
    }
 800215a:	bf00      	nop
 800215c:	e7fe      	b.n	800215c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800215e:	f000 fe43 	bl	8002de8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <xTaskCheckForTimeOut+0xc4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800217a:	d102      	bne.n	8002182 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	e026      	b.n	80021d0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <xTaskCheckForTimeOut+0xc8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d00a      	beq.n	80021a4 <xTaskCheckForTimeOut+0x88>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	429a      	cmp	r2, r3
 8002196:	d305      	bcc.n	80021a4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002198:	2301      	movs	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e015      	b.n	80021d0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d20b      	bcs.n	80021c6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	1ad2      	subs	r2, r2, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ff98 	bl	80020f0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	e004      	b.n	80021d0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80021cc:	2301      	movs	r3, #1
 80021ce:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80021d0:	f000 fe3a 	bl	8002e48 <vPortExitCritical>

    return xReturn;
 80021d4:	69fb      	ldr	r3, [r7, #28]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000184 	.word	0x20000184
 80021e4:	20000198 	.word	0x20000198

080021e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <vTaskMissedYield+0x14>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	20000194 	.word	0x20000194

08002200 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002208:	f000 f852 	bl	80022b0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <prvIdleTask+0x28>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d9f9      	bls.n	8002208 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <prvIdleTask+0x2c>)
 8002216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f3bf 8f4f 	dsb	sy
 8002220:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002224:	e7f0      	b.n	8002208 <prvIdleTask+0x8>
 8002226:	bf00      	nop
 8002228:	200000ac 	.word	0x200000ac
 800222c:	e000ed04 	.word	0xe000ed04

08002230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	e00c      	b.n	8002256 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <prvInitialiseTaskLists+0x60>)
 8002248:	4413      	add	r3, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fd6f 	bl	8000d2e <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3301      	adds	r3, #1
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b04      	cmp	r3, #4
 800225a:	d9ef      	bls.n	800223c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <prvInitialiseTaskLists+0x64>)
 800225e:	f7fe fd66 	bl	8000d2e <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002262:	480d      	ldr	r0, [pc, #52]	; (8002298 <prvInitialiseTaskLists+0x68>)
 8002264:	f7fe fd63 	bl	8000d2e <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <prvInitialiseTaskLists+0x6c>)
 800226a:	f7fe fd60 	bl	8000d2e <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800226e:	480c      	ldr	r0, [pc, #48]	; (80022a0 <prvInitialiseTaskLists+0x70>)
 8002270:	f7fe fd5d 	bl	8000d2e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002274:	480b      	ldr	r0, [pc, #44]	; (80022a4 <prvInitialiseTaskLists+0x74>)
 8002276:	f7fe fd5a 	bl	8000d2e <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <prvInitialiseTaskLists+0x78>)
 800227c:	4a05      	ldr	r2, [pc, #20]	; (8002294 <prvInitialiseTaskLists+0x64>)
 800227e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <prvInitialiseTaskLists+0x7c>)
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <prvInitialiseTaskLists+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200000ac 	.word	0x200000ac
 8002294:	20000110 	.word	0x20000110
 8002298:	20000124 	.word	0x20000124
 800229c:	20000140 	.word	0x20000140
 80022a0:	20000154 	.word	0x20000154
 80022a4:	2000016c 	.word	0x2000016c
 80022a8:	20000138 	.word	0x20000138
 80022ac:	2000013c 	.word	0x2000013c

080022b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022b6:	e019      	b.n	80022ec <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80022b8:	f000 fd96 	bl	8002de8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022bc:	4b10      	ldr	r3, [pc, #64]	; (8002300 <prvCheckTasksWaitingTermination+0x50>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fdba 	bl	8000e42 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <prvCheckTasksWaitingTermination+0x54>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <prvCheckTasksWaitingTermination+0x54>)
 80022d6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <prvCheckTasksWaitingTermination+0x58>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3b01      	subs	r3, #1
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <prvCheckTasksWaitingTermination+0x58>)
 80022e0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80022e2:	f000 fdb1 	bl	8002e48 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f810 	bl	800230c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <prvCheckTasksWaitingTermination+0x58>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e1      	bne.n	80022b8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000154 	.word	0x20000154
 8002304:	20000180 	.word	0x20000180
 8002308:	20000168 	.word	0x20000168

0800230c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4618      	mov	r0, r3
 800231a:	f000 ff67 	bl	80031ec <vPortFree>
                vPortFree( pxTCB );
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 ff64 	bl	80031ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <prvResetNextTaskUnblockTime+0x30>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <prvResetNextTaskUnblockTime+0x34>)
 800233c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002340:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002342:	e005      	b.n	8002350 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <prvResetNextTaskUnblockTime+0x30>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <prvResetNextTaskUnblockTime+0x34>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000138 	.word	0x20000138
 8002360:	200001a0 	.word	0x200001a0

08002364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <xTaskGetSchedulerState+0x34>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002372:	2301      	movs	r3, #1
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	e008      	b.n	800238a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <xTaskGetSchedulerState+0x38>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002380:	2302      	movs	r3, #2
 8002382:	607b      	str	r3, [r7, #4]
 8002384:	e001      	b.n	800238a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800238a:	687b      	ldr	r3, [r7, #4]
    }
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	2000018c 	.word	0x2000018c
 800239c:	200001a8 	.word	0x200001a8

080023a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d063      	beq.n	800247e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <xTaskPriorityDisinherit+0xe8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d00a      	beq.n	80023d6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	60fb      	str	r3, [r7, #12]
    }
 80023d2:	bf00      	nop
 80023d4:	e7fe      	b.n	80023d4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80023de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e2:	f383 8811 	msr	BASEPRI, r3
 80023e6:	f3bf 8f6f 	isb	sy
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	60bb      	str	r3, [r7, #8]
    }
 80023f0:	bf00      	nop
 80023f2:	e7fe      	b.n	80023f2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002406:	429a      	cmp	r2, r3
 8002408:	d039      	beq.n	800247e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d135      	bne.n	800247e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	3304      	adds	r3, #4
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fd13 	bl	8000e42 <uxListRemove>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10a      	bne.n	8002438 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	2201      	movs	r2, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43da      	mvns	r2, r3
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <xTaskPriorityDisinherit+0xec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4013      	ands	r3, r2
 8002434:	4a15      	ldr	r2, [pc, #84]	; (800248c <xTaskPriorityDisinherit+0xec>)
 8002436:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f1c3 0205 	rsb	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	2201      	movs	r2, #1
 8002452:	409a      	lsls	r2, r3
 8002454:	4b0d      	ldr	r3, [pc, #52]	; (800248c <xTaskPriorityDisinherit+0xec>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4313      	orrs	r3, r2
 800245a:	4a0c      	ldr	r2, [pc, #48]	; (800248c <xTaskPriorityDisinherit+0xec>)
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <xTaskPriorityDisinherit+0xf0>)
 800246c:	441a      	add	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	3304      	adds	r3, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f7fe fc87 	bl	8000d88 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800247a:	2301      	movs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800247e:	697b      	ldr	r3, [r7, #20]
    }
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	200000a8 	.word	0x200000a8
 800248c:	20000188 	.word	0x20000188
 8002490:	200000ac 	.word	0x200000ac

08002494 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800249e:	4b29      	ldr	r3, [pc, #164]	; (8002544 <prvAddCurrentTaskToDelayedList+0xb0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024a4:	4b28      	ldr	r3, [pc, #160]	; (8002548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3304      	adds	r3, #4
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fcc9 	bl	8000e42 <uxListRemove>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10b      	bne.n	80024ce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	2201      	movs	r2, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <prvAddCurrentTaskToDelayedList+0xb8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4013      	ands	r3, r2
 80024ca:	4a20      	ldr	r2, [pc, #128]	; (800254c <prvAddCurrentTaskToDelayedList+0xb8>)
 80024cc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d4:	d10a      	bne.n	80024ec <prvAddCurrentTaskToDelayedList+0x58>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3304      	adds	r3, #4
 80024e2:	4619      	mov	r1, r3
 80024e4:	481a      	ldr	r0, [pc, #104]	; (8002550 <prvAddCurrentTaskToDelayedList+0xbc>)
 80024e6:	f7fe fc4f 	bl	8000d88 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80024ea:	e026      	b.n	800253a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d209      	bcs.n	8002518 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3304      	adds	r3, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4610      	mov	r0, r2
 8002512:	f7fe fc5d 	bl	8000dd0 <vListInsert>
}
 8002516:	e010      	b.n	800253a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <prvAddCurrentTaskToDelayedList+0xc4>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <prvAddCurrentTaskToDelayedList+0xb4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3304      	adds	r3, #4
 8002522:	4619      	mov	r1, r3
 8002524:	4610      	mov	r0, r2
 8002526:	f7fe fc53 	bl	8000dd0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <prvAddCurrentTaskToDelayedList+0xc8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	429a      	cmp	r2, r3
 8002532:	d202      	bcs.n	800253a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002534:	4a09      	ldr	r2, [pc, #36]	; (800255c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6013      	str	r3, [r2, #0]
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000184 	.word	0x20000184
 8002548:	200000a8 	.word	0x200000a8
 800254c:	20000188 	.word	0x20000188
 8002550:	2000016c 	.word	0x2000016c
 8002554:	2000013c 	.word	0x2000013c
 8002558:	20000138 	.word	0x20000138
 800255c:	200001a0 	.word	0x200001a0

08002560 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800256a:	f000 fad5 	bl	8002b18 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <xTimerCreateTimerTask+0x54>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <xTimerCreateTimerTask+0x58>)
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	2302      	movs	r3, #2
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2300      	movs	r3, #0
 8002580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002584:	490d      	ldr	r1, [pc, #52]	; (80025bc <xTimerCreateTimerTask+0x5c>)
 8002586:	480e      	ldr	r0, [pc, #56]	; (80025c0 <xTimerCreateTimerTask+0x60>)
 8002588:	f7ff f966 	bl	8001858 <xTaskCreate>
 800258c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	603b      	str	r3, [r7, #0]
    }
 80025a6:	bf00      	nop
 80025a8:	e7fe      	b.n	80025a8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80025aa:	687b      	ldr	r3, [r7, #4]
    }
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200001dc 	.word	0x200001dc
 80025b8:	200001e0 	.word	0x200001e0
 80025bc:	08004648 	.word	0x08004648
 80025c0:	080026f9 	.word	0x080026f9

080025c4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <xTimerGenericCommand+0x2e>
        __asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	623b      	str	r3, [r7, #32]
    }
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <xTimerGenericCommand+0x98>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d02a      	beq.n	8002650 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b05      	cmp	r3, #5
 800260a:	dc18      	bgt.n	800263e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800260c:	f7ff feaa 	bl	8002364 <xTaskGetSchedulerState>
 8002610:	4603      	mov	r3, r0
 8002612:	2b02      	cmp	r3, #2
 8002614:	d109      	bne.n	800262a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <xTimerGenericCommand+0x98>)
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	f107 0114 	add.w	r1, r7, #20
 800261e:	2300      	movs	r3, #0
 8002620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002622:	f7fe fd23 	bl	800106c <xQueueGenericSend>
 8002626:	6278      	str	r0, [r7, #36]	; 0x24
 8002628:	e012      	b.n	8002650 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <xTimerGenericCommand+0x98>)
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	f107 0114 	add.w	r1, r7, #20
 8002632:	2300      	movs	r3, #0
 8002634:	2200      	movs	r2, #0
 8002636:	f7fe fd19 	bl	800106c <xQueueGenericSend>
 800263a:	6278      	str	r0, [r7, #36]	; 0x24
 800263c:	e008      	b.n	8002650 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <xTimerGenericCommand+0x98>)
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	f107 0114 	add.w	r1, r7, #20
 8002646:	2300      	movs	r3, #0
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	f7fe fe0d 	bl	8001268 <xQueueGenericSendFromISR>
 800264e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002652:	4618      	mov	r0, r3
 8002654:	3728      	adds	r7, #40	; 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200001dc 	.word	0x200001dc

08002660 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <prvProcessExpiredTimer+0x94>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3304      	adds	r3, #4
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fbe2 	bl	8000e42 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d022      	beq.n	80026d2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	18d1      	adds	r1, r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	6978      	ldr	r0, [r7, #20]
 800269a:	f000 f8d1 	bl	8002840 <prvInsertTimerInActiveList>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01f      	beq.n	80026e4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80026a4:	2300      	movs	r3, #0
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2300      	movs	r3, #0
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	2100      	movs	r1, #0
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff ff88 	bl	80025c4 <xTimerGenericCommand>
 80026b4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d113      	bne.n	80026e4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	60fb      	str	r3, [r7, #12]
    }
 80026ce:	bf00      	nop
 80026d0:	e7fe      	b.n	80026d0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	6978      	ldr	r0, [r7, #20]
 80026ea:	4798      	blx	r3
    }
 80026ec:	bf00      	nop
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200001d4 	.word	0x200001d4

080026f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002700:	f107 0308 	add.w	r3, r7, #8
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f857 	bl	80027b8 <prvGetNextExpireTime>
 800270a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4619      	mov	r1, r3
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f803 	bl	800271c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002716:	f000 f8d5 	bl	80028c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800271a:	e7f1      	b.n	8002700 <prvTimerTask+0x8>

0800271c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002726:	f7ff fa63 	bl	8001bf0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f866 	bl	8002800 <prvSampleTimeNow>
 8002734:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d130      	bne.n	800279e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <prvProcessTimerOrBlockTask+0x3c>
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	429a      	cmp	r2, r3
 8002748:	d806      	bhi.n	8002758 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800274a:	f7ff fa5f 	bl	8001c0c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800274e:	68f9      	ldr	r1, [r7, #12]
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ff85 	bl	8002660 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002756:	e024      	b.n	80027a2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <prvProcessTimerOrBlockTask+0x90>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <prvProcessTimerOrBlockTask+0x50>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <prvProcessTimerOrBlockTask+0x52>
 800276c:	2300      	movs	r3, #0
 800276e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <prvProcessTimerOrBlockTask+0x94>)
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	f7ff f837 	bl	80017f0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002782:	f7ff fa43 	bl	8001c0c <xTaskResumeAll>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <prvProcessTimerOrBlockTask+0x98>)
 800278e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	f3bf 8f6f 	isb	sy
    }
 800279c:	e001      	b.n	80027a2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800279e:	f7ff fa35 	bl	8001c0c <xTaskResumeAll>
    }
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200001d8 	.word	0x200001d8
 80027b0:	200001dc 	.word	0x200001dc
 80027b4:	e000ed04 	.word	0xe000ed04

080027b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80027c0:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <prvGetNextExpireTime+0x44>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <prvGetNextExpireTime+0x16>
 80027ca:	2201      	movs	r2, #1
 80027cc:	e000      	b.n	80027d0 <prvGetNextExpireTime+0x18>
 80027ce:	2200      	movs	r2, #0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027dc:	4b07      	ldr	r3, [pc, #28]	; (80027fc <prvGetNextExpireTime+0x44>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e001      	b.n	80027ec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80027ec:	68fb      	ldr	r3, [r7, #12]
    }
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	200001d4 	.word	0x200001d4

08002800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002808:	f7ff fa9c 	bl	8001d44 <xTaskGetTickCount>
 800280c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <prvSampleTimeNow+0x3c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	429a      	cmp	r2, r3
 8002816:	d205      	bcs.n	8002824 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002818:	f000 f91a 	bl	8002a50 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e002      	b.n	800282a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800282a:	4a04      	ldr	r2, [pc, #16]	; (800283c <prvSampleTimeNow+0x3c>)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002830:	68fb      	ldr	r3, [r7, #12]
    }
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200001e4 	.word	0x200001e4

08002840 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d812      	bhi.n	800288c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	1ad2      	subs	r2, r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	429a      	cmp	r2, r3
 8002872:	d302      	bcc.n	800287a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002874:	2301      	movs	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e01b      	b.n	80028b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <prvInsertTimerInActiveList+0x7c>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3304      	adds	r3, #4
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f7fe faa3 	bl	8000dd0 <vListInsert>
 800288a:	e012      	b.n	80028b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d206      	bcs.n	80028a2 <prvInsertTimerInActiveList+0x62>
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d302      	bcc.n	80028a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800289c:	2301      	movs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	e007      	b.n	80028b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <prvInsertTimerInActiveList+0x80>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3304      	adds	r3, #4
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	f7fe fa8f 	bl	8000dd0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80028b2:	697b      	ldr	r3, [r7, #20]
    }
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	200001d8 	.word	0x200001d8
 80028c0:	200001d4 	.word	0x200001d4

080028c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	; 0x30
 80028c8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80028ca:	e0ae      	b.n	8002a2a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f2c0 80aa 	blt.w	8002a28 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	3304      	adds	r3, #4
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe faac 	bl	8000e42 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff87 	bl	8002800 <prvSampleTimeNow>
 80028f2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	f200 8097 	bhi.w	8002a2a <prvProcessReceivedCommands+0x166>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <prvProcessReceivedCommands+0x40>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	0800292d 	.word	0x0800292d
 8002908:	0800292d 	.word	0x0800292d
 800290c:	0800292d 	.word	0x0800292d
 8002910:	080029a1 	.word	0x080029a1
 8002914:	080029b5 	.word	0x080029b5
 8002918:	080029ff 	.word	0x080029ff
 800291c:	0800292d 	.word	0x0800292d
 8002920:	0800292d 	.word	0x0800292d
 8002924:	080029a1 	.word	0x080029a1
 8002928:	080029b5 	.word	0x080029b5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	b2da      	uxtb	r2, r3
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	18d1      	adds	r1, r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800294c:	f7ff ff78 	bl	8002840 <prvInsertTimerInActiveList>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d069      	beq.n	8002a2a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800295c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05e      	beq.n	8002a2a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	441a      	add	r2, r3
 8002974:	2300      	movs	r3, #0
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2300      	movs	r3, #0
 800297a:	2100      	movs	r1, #0
 800297c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800297e:	f7ff fe21 	bl	80025c4 <xTimerGenericCommand>
 8002982:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d14f      	bne.n	8002a2a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	61bb      	str	r3, [r7, #24]
    }
 800299c:	bf00      	nop
 800299e:	e7fe      	b.n	800299e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80029b2:	e03a      	b.n	8002a2a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <prvProcessReceivedCommands+0x126>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	617b      	str	r3, [r7, #20]
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	18d1      	adds	r1, r2, r3
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029f8:	f7ff ff22 	bl	8002840 <prvInsertTimerInActiveList>
                        break;
 80029fc:	e015      	b.n	8002a2a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a0e:	f000 fbed 	bl	80031ec <vPortFree>
 8002a12:	e00a      	b.n	8002a2a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002a26:	e000      	b.n	8002a2a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002a28:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <prvProcessReceivedCommands+0x188>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f107 0108 	add.w	r1, r7, #8
 8002a32:	2200      	movs	r2, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fcc1 	bl	80013bc <xQueueReceive>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f47f af45 	bne.w	80028cc <prvProcessReceivedCommands+0x8>
        }
    }
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200001dc 	.word	0x200001dc

08002a50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a56:	e048      	b.n	8002aea <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a58:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <prvSwitchTimerLists+0xc0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a62:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <prvSwitchTimerLists+0xc0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f9e6 	bl	8000e42 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d02e      	beq.n	8002aea <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d90e      	bls.n	8002abc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <prvSwitchTimerLists+0xc0>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f7fe f98b 	bl	8000dd0 <vListInsert>
 8002aba:	e016      	b.n	8002aea <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002abc:	2300      	movs	r3, #0
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7ff fd7c 	bl	80025c4 <xTimerGenericCommand>
 8002acc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	603b      	str	r3, [r7, #0]
    }
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <prvSwitchTimerLists+0xc0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1b1      	bne.n	8002a58 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <prvSwitchTimerLists+0xc0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <prvSwitchTimerLists+0xc4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <prvSwitchTimerLists+0xc0>)
 8002b00:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002b02:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <prvSwitchTimerLists+0xc4>)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	6013      	str	r3, [r2, #0]
    }
 8002b08:	bf00      	nop
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200001d4 	.word	0x200001d4
 8002b14:	200001d8 	.word	0x200001d8

08002b18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002b1c:	f000 f964 	bl	8002de8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <prvCheckForValidListAndQueue+0x54>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11d      	bne.n	8002b64 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002b28:	4811      	ldr	r0, [pc, #68]	; (8002b70 <prvCheckForValidListAndQueue+0x58>)
 8002b2a:	f7fe f900 	bl	8000d2e <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002b2e:	4811      	ldr	r0, [pc, #68]	; (8002b74 <prvCheckForValidListAndQueue+0x5c>)
 8002b30:	f7fe f8fd 	bl	8000d2e <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002b34:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <prvCheckForValidListAndQueue+0x60>)
 8002b36:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <prvCheckForValidListAndQueue+0x58>)
 8002b38:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <prvCheckForValidListAndQueue+0x64>)
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	; (8002b74 <prvCheckForValidListAndQueue+0x5c>)
 8002b3e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002b40:	2200      	movs	r2, #0
 8002b42:	210c      	movs	r1, #12
 8002b44:	200a      	movs	r0, #10
 8002b46:	f7fe fa0f 	bl	8000f68 <xQueueGenericCreate>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <prvCheckForValidListAndQueue+0x54>)
 8002b4e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <prvCheckForValidListAndQueue+0x54>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <prvCheckForValidListAndQueue+0x54>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4908      	ldr	r1, [pc, #32]	; (8002b80 <prvCheckForValidListAndQueue+0x68>)
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fe1c 	bl	800179c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b64:	f000 f970 	bl	8002e48 <vPortExitCritical>
    }
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200001dc 	.word	0x200001dc
 8002b70:	200001ac 	.word	0x200001ac
 8002b74:	200001c0 	.word	0x200001c0
 8002b78:	200001d4 	.word	0x200001d4
 8002b7c:	200001d8 	.word	0x200001d8
 8002b80:	08004650 	.word	0x08004650

08002b84 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3b04      	subs	r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3b04      	subs	r3, #4
 8002ba2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f023 0201 	bic.w	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b04      	subs	r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002bb4:	4a0c      	ldr	r2, [pc, #48]	; (8002be8 <pxPortInitialiseStack+0x64>)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3b14      	subs	r3, #20
 8002bbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3b04      	subs	r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f06f 0202 	mvn.w	r2, #2
 8002bd2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3b20      	subs	r3, #32
 8002bd8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002bda:	68fb      	ldr	r3, [r7, #12]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	08002bed 	.word	0x08002bed

08002bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <prvTaskExitError+0x54>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfe:	d00a      	beq.n	8002c16 <prvTaskExitError+0x2a>
        __asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	60fb      	str	r3, [r7, #12]
    }
 8002c12:	bf00      	nop
 8002c14:	e7fe      	b.n	8002c14 <prvTaskExitError+0x28>
        __asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	60bb      	str	r3, [r7, #8]
    }
 8002c28:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c2a:	bf00      	nop
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0fc      	beq.n	8002c2c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	20000018 	.word	0x20000018
	...

08002c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <pxCurrentTCBConst2>)
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	6808      	ldr	r0, [r1, #0]
 8002c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5a:	f380 8809 	msr	PSP, r0
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f380 8811 	msr	BASEPRI, r0
 8002c6a:	4770      	bx	lr
 8002c6c:	f3af 8000 	nop.w

08002c70 <pxCurrentTCBConst2>:
 8002c70:	200000a8 	.word	0x200000a8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop

08002c78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c78:	4808      	ldr	r0, [pc, #32]	; (8002c9c <prvPortStartFirstTask+0x24>)
 8002c7a:	6800      	ldr	r0, [r0, #0]
 8002c7c:	6800      	ldr	r0, [r0, #0]
 8002c7e:	f380 8808 	msr	MSP, r0
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f380 8814 	msr	CONTROL, r0
 8002c8a:	b662      	cpsie	i
 8002c8c:	b661      	cpsie	f
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	df00      	svc	0
 8002c98:	bf00      	nop
 8002c9a:	0000      	.short	0x0000
 8002c9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop

08002ca4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002caa:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <xPortStartScheduler+0x120>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a46      	ldr	r2, [pc, #280]	; (8002dc8 <xPortStartScheduler+0x124>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10a      	bne.n	8002cca <xPortStartScheduler+0x26>
        __asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	613b      	str	r3, [r7, #16]
    }
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002cca:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <xPortStartScheduler+0x120>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a3f      	ldr	r2, [pc, #252]	; (8002dcc <xPortStartScheduler+0x128>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d10a      	bne.n	8002cea <xPortStartScheduler+0x46>
        __asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	60fb      	str	r3, [r7, #12]
    }
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cea:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <xPortStartScheduler+0x12c>)
 8002cec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	22ff      	movs	r2, #255	; 0xff
 8002cfa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <xPortStartScheduler+0x130>)
 8002d10:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d12:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d14:	2207      	movs	r2, #7
 8002d16:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d18:	e009      	b.n	8002d2e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	4a2d      	ldr	r2, [pc, #180]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d22:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d0ef      	beq.n	8002d1a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d3a:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d00a      	beq.n	8002d5c <xPortStartScheduler+0xb8>
        __asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	60bb      	str	r3, [r7, #8]
    }
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d64:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d6e:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <xPortStartScheduler+0x134>)
 8002d70:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <xPortStartScheduler+0x138>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <xPortStartScheduler+0x138>)
 8002d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <xPortStartScheduler+0x138>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <xPortStartScheduler+0x138>)
 8002d8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d92:	f000 f8db 	bl	8002f4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <xPortStartScheduler+0x13c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d9c:	f000 f8fa 	bl	8002f94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <xPortStartScheduler+0x140>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <xPortStartScheduler+0x140>)
 8002da6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002daa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002dac:	f7ff ff64 	bl	8002c78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002db0:	f7ff f890 	bl	8001ed4 <vTaskSwitchContext>
    prvTaskExitError();
 8002db4:	f7ff ff1a 	bl	8002bec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	e000ed00 	.word	0xe000ed00
 8002dc8:	410fc271 	.word	0x410fc271
 8002dcc:	410fc270 	.word	0x410fc270
 8002dd0:	e000e400 	.word	0xe000e400
 8002dd4:	200001e8 	.word	0x200001e8
 8002dd8:	200001ec 	.word	0x200001ec
 8002ddc:	e000ed20 	.word	0xe000ed20
 8002de0:	20000018 	.word	0x20000018
 8002de4:	e000ef34 	.word	0xe000ef34

08002de8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
        __asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	607b      	str	r3, [r7, #4]
    }
 8002e00:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <vPortEnterCritical+0x58>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <vPortEnterCritical+0x58>)
 8002e0a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <vPortEnterCritical+0x58>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10f      	bne.n	8002e34 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <vPortEnterCritical+0x5c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <vPortEnterCritical+0x4c>
        __asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	603b      	str	r3, [r7, #0]
    }
 8002e30:	bf00      	nop
 8002e32:	e7fe      	b.n	8002e32 <vPortEnterCritical+0x4a>
    }
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	20000018 	.word	0x20000018
 8002e44:	e000ed04 	.word	0xe000ed04

08002e48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <vPortExitCritical+0x50>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <vPortExitCritical+0x24>
        __asm volatile
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	607b      	str	r3, [r7, #4]
    }
 8002e68:	bf00      	nop
 8002e6a:	e7fe      	b.n	8002e6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <vPortExitCritical+0x50>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <vPortExitCritical+0x50>)
 8002e74:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <vPortExitCritical+0x50>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <vPortExitCritical+0x42>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f383 8811 	msr	BASEPRI, r3
    }
 8002e88:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000018 	.word	0x20000018
 8002e9c:	00000000 	.word	0x00000000

08002ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002ea0:	f3ef 8009 	mrs	r0, PSP
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <pxCurrentTCBConst>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	f01e 0f10 	tst.w	lr, #16
 8002eb0:	bf08      	it	eq
 8002eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eba:	6010      	str	r0, [r2, #0]
 8002ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ec4:	f380 8811 	msr	BASEPRI, r0
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f7ff f800 	bl	8001ed4 <vTaskSwitchContext>
 8002ed4:	f04f 0000 	mov.w	r0, #0
 8002ed8:	f380 8811 	msr	BASEPRI, r0
 8002edc:	bc09      	pop	{r0, r3}
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	6808      	ldr	r0, [r1, #0]
 8002ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee6:	f01e 0f10 	tst.w	lr, #16
 8002eea:	bf08      	it	eq
 8002eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ef0:	f380 8809 	msr	PSP, r0
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	f3af 8000 	nop.w

08002f00 <pxCurrentTCBConst>:
 8002f00:	200000a8 	.word	0x200000a8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop

08002f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	607b      	str	r3, [r7, #4]
    }
 8002f20:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f22:	f7fe ff1f 	bl	8001d64 <xTaskIncrementTick>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <SysTick_Handler+0x40>)
 8002f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	f383 8811 	msr	BASEPRI, r3
    }
 8002f3e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	e000ed04 	.word	0xe000ed04

08002f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <vPortSetupTimerInterrupt+0x34>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <vPortSetupTimerInterrupt+0x38>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <vPortSetupTimerInterrupt+0x3c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <vPortSetupTimerInterrupt+0x40>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	099b      	lsrs	r3, r3, #6
 8002f68:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <vPortSetupTimerInterrupt+0x44>)
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <vPortSetupTimerInterrupt+0x34>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010
 8002f84:	e000e018 	.word	0xe000e018
 8002f88:	2000001c 	.word	0x2000001c
 8002f8c:	10624dd3 	.word	0x10624dd3
 8002f90:	e000e014 	.word	0xe000e014

08002f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002fa4 <vPortEnableVFP+0x10>
 8002f98:	6801      	ldr	r1, [r0, #0]
 8002f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f9e:	6001      	str	r1, [r0, #0]
 8002fa0:	4770      	bx	lr
 8002fa2:	0000      	.short	0x0000
 8002fa4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop

08002fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002fb2:	f3ef 8305 	mrs	r3, IPSR
 8002fb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b0f      	cmp	r3, #15
 8002fbc:	d914      	bls.n	8002fe8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002fbe:	4a17      	ldr	r2, [pc, #92]	; (800301c <vPortValidateInterruptPriority+0x70>)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002fc8:	4b15      	ldr	r3, [pc, #84]	; (8003020 <vPortValidateInterruptPriority+0x74>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	7afa      	ldrb	r2, [r7, #11]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d20a      	bcs.n	8002fe8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	607b      	str	r3, [r7, #4]
    }
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <vPortValidateInterruptPriority+0x78>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <vPortValidateInterruptPriority+0x7c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d90a      	bls.n	800300e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	603b      	str	r3, [r7, #0]
    }
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <vPortValidateInterruptPriority+0x60>
    }
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000e3f0 	.word	0xe000e3f0
 8003020:	200001e8 	.word	0x200001e8
 8003024:	e000ed0c 	.word	0xe000ed0c
 8003028:	200001ec 	.word	0x200001ec

0800302c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003038:	f7fe fdda 	bl	8001bf0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800303c:	4b65      	ldr	r3, [pc, #404]	; (80031d4 <pvPortMalloc+0x1a8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003044:	f000 f934 	bl	80032b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003048:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <pvPortMalloc+0x1ac>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	f040 80a7 	bne.w	80031a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d02d      	beq.n	80030b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800305c:	2208      	movs	r2, #8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d227      	bcs.n	80030b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003068:	2208      	movs	r2, #8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	2b00      	cmp	r3, #0
 8003078:	d021      	beq.n	80030be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f023 0307 	bic.w	r3, r3, #7
 8003080:	3308      	adds	r3, #8
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d214      	bcs.n	80030b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f023 0307 	bic.w	r3, r3, #7
 800308e:	3308      	adds	r3, #8
 8003090:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <pvPortMalloc+0x92>
        __asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	617b      	str	r3, [r7, #20]
    }
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030b6:	e002      	b.n	80030be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	e000      	b.n	80030c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d06e      	beq.n	80031a4 <pvPortMalloc+0x178>
 80030c6:	4b45      	ldr	r3, [pc, #276]	; (80031dc <pvPortMalloc+0x1b0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d869      	bhi.n	80031a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80030d0:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <pvPortMalloc+0x1b4>)
 80030d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <pvPortMalloc+0x1b4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030da:	e004      	b.n	80030e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d903      	bls.n	80030f8 <pvPortMalloc+0xcc>
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f1      	bne.n	80030dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80030f8:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <pvPortMalloc+0x1a8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fe:	429a      	cmp	r2, r3
 8003100:	d050      	beq.n	80031a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2208      	movs	r2, #8
 8003108:	4413      	add	r3, r2
 800310a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	1ad2      	subs	r2, r2, r3
 800311c:	2308      	movs	r3, #8
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	429a      	cmp	r2, r3
 8003122:	d91f      	bls.n	8003164 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <pvPortMalloc+0x120>
        __asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	613b      	str	r3, [r7, #16]
    }
 8003148:	bf00      	nop
 800314a:	e7fe      	b.n	800314a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800315e:	69b8      	ldr	r0, [r7, #24]
 8003160:	f000 f908 	bl	8003374 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <pvPortMalloc+0x1b0>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	4a1b      	ldr	r2, [pc, #108]	; (80031dc <pvPortMalloc+0x1b0>)
 8003170:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <pvPortMalloc+0x1b0>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <pvPortMalloc+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d203      	bcs.n	8003186 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <pvPortMalloc+0x1b0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <pvPortMalloc+0x1b8>)
 8003184:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <pvPortMalloc+0x1ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	431a      	orrs	r2, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <pvPortMalloc+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <pvPortMalloc+0x1bc>)
 80031a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80031a4:	f7fe fd32 	bl	8001c0c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <pvPortMalloc+0x19c>
        __asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	60fb      	str	r3, [r7, #12]
    }
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80031c8:	69fb      	ldr	r3, [r7, #28]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3728      	adds	r7, #40	; 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20012df8 	.word	0x20012df8
 80031d8:	20012e0c 	.word	0x20012e0c
 80031dc:	20012dfc 	.word	0x20012dfc
 80031e0:	20012df0 	.word	0x20012df0
 80031e4:	20012e00 	.word	0x20012e00
 80031e8:	20012e04 	.word	0x20012e04

080031ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d04d      	beq.n	800329a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80031fe:	2308      	movs	r3, #8
 8003200:	425b      	negs	r3, r3
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4413      	add	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <vPortFree+0xb8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <vPortFree+0x44>
        __asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	60fb      	str	r3, [r7, #12]
    }
 800322c:	bf00      	nop
 800322e:	e7fe      	b.n	800322e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <vPortFree+0x62>
        __asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	60bb      	str	r3, [r7, #8]
    }
 800324a:	bf00      	nop
 800324c:	e7fe      	b.n	800324c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <vPortFree+0xb8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01e      	beq.n	800329a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d11a      	bne.n	800329a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <vPortFree+0xb8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003274:	f7fe fcbc 	bl	8001bf0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <vPortFree+0xbc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4413      	add	r3, r2
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <vPortFree+0xbc>)
 8003284:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003286:	6938      	ldr	r0, [r7, #16]
 8003288:	f000 f874 	bl	8003374 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800328c:	4b07      	ldr	r3, [pc, #28]	; (80032ac <vPortFree+0xc0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	4a06      	ldr	r2, [pc, #24]	; (80032ac <vPortFree+0xc0>)
 8003294:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003296:	f7fe fcb9 	bl	8001c0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20012e0c 	.word	0x20012e0c
 80032a8:	20012dfc 	.word	0x20012dfc
 80032ac:	20012e08 	.word	0x20012e08

080032b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80032ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <prvHeapInit+0xac>)
 80032be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3307      	adds	r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0307 	bic.w	r3, r3, #7
 80032d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	4a1f      	ldr	r2, [pc, #124]	; (800335c <prvHeapInit+0xac>)
 80032e0:	4413      	add	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <prvHeapInit+0xb0>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <prvHeapInit+0xb0>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4413      	add	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80032fc:	2208      	movs	r2, #8
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0307 	bic.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a15      	ldr	r2, [pc, #84]	; (8003364 <prvHeapInit+0xb4>)
 8003310:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <prvHeapInit+0xb4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2200      	movs	r2, #0
 8003318:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <prvHeapInit+0xb4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	1ad2      	subs	r2, r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <prvHeapInit+0xb4>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <prvHeapInit+0xb8>)
 800333e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a09      	ldr	r2, [pc, #36]	; (800336c <prvHeapInit+0xbc>)
 8003346:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <prvHeapInit+0xc0>)
 800334a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800334e:	601a      	str	r2, [r3, #0]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	200001f0 	.word	0x200001f0
 8003360:	20012df0 	.word	0x20012df0
 8003364:	20012df8 	.word	0x20012df8
 8003368:	20012e00 	.word	0x20012e00
 800336c:	20012dfc 	.word	0x20012dfc
 8003370:	20012e0c 	.word	0x20012e0c

08003374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800337c:	4b28      	ldr	r3, [pc, #160]	; (8003420 <prvInsertBlockIntoFreeList+0xac>)
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	e002      	b.n	8003388 <prvInsertBlockIntoFreeList+0x14>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d8f7      	bhi.n	8003382 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4413      	add	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d108      	bne.n	80033b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	441a      	add	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	441a      	add	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d118      	bne.n	80033fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <prvInsertBlockIntoFreeList+0xb0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d00d      	beq.n	80033f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e008      	b.n	8003404 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <prvInsertBlockIntoFreeList+0xb0>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e003      	b.n	8003404 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d002      	beq.n	8003412 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20012df0 	.word	0x20012df0
 8003424:	20012df8 	.word	0x20012df8

08003428 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d161      	bne.n	80034fe <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a33      	ldr	r2, [pc, #204]	; (800350c <GPIO_PeriClockControl+0xe4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d106      	bne.n	8003450 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8003442:	4b33      	ldr	r3, [pc, #204]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a32      	ldr	r2, [pc, #200]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 800344e:	e056      	b.n	80034fe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a30      	ldr	r2, [pc, #192]	; (8003514 <GPIO_PeriClockControl+0xec>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d106      	bne.n	8003466 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8003458:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 800345e:	f043 0302 	orr.w	r3, r3, #2
 8003462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003464:	e04b      	b.n	80034fe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <GPIO_PeriClockControl+0xf0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d106      	bne.n	800347c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a27      	ldr	r2, [pc, #156]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800347a:	e040      	b.n	80034fe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a27      	ldr	r2, [pc, #156]	; (800351c <GPIO_PeriClockControl+0xf4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d106      	bne.n	8003492 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 800348a:	f043 0308 	orr.w	r3, r3, #8
 800348e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003490:	e035      	b.n	80034fe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a22      	ldr	r2, [pc, #136]	; (8003520 <GPIO_PeriClockControl+0xf8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d106      	bne.n	80034a8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800349a:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 80034a0:	f043 0310 	orr.w	r3, r3, #16
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80034a6:	e02a      	b.n	80034fe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <GPIO_PeriClockControl+0xfc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d106      	bne.n	80034be <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	4a16      	ldr	r2, [pc, #88]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 80034b6:	f043 0320 	orr.w	r3, r3, #32
 80034ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80034bc:	e01f      	b.n	80034fe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <GPIO_PeriClockControl+0x100>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d106      	bne.n	80034d4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a11      	ldr	r2, [pc, #68]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 80034cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80034d2:	e014      	b.n	80034fe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <GPIO_PeriClockControl+0x104>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d106      	bne.n	80034ea <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	4a0b      	ldr	r2, [pc, #44]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 80034e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80034e8:	e009      	b.n	80034fe <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a10      	ldr	r2, [pc, #64]	; (8003530 <GPIO_PeriClockControl+0x108>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d105      	bne.n	80034fe <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a06      	ldr	r2, [pc, #24]	; (8003510 <GPIO_PeriClockControl+0xe8>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40020000 	.word	0x40020000
 8003510:	40023800 	.word	0x40023800
 8003514:	40020400 	.word	0x40020400
 8003518:	40020800 	.word	0x40020800
 800351c:	40020c00 	.word	0x40020c00
 8003520:	40021000 	.word	0x40021000
 8003524:	40021400 	.word	0x40021400
 8003528:	40021800 	.word	0x40021800
 800352c:	40021c00 	.word	0x40021c00
 8003530:	40022000 	.word	0x40022000

08003534 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff6e 	bl	8003428 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	795b      	ldrb	r3, [r3, #5]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d820      	bhi.n	8003596 <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	795b      	ldrb	r3, [r3, #5]
 8003558:	461a      	mov	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	791b      	ldrb	r3, [r3, #4]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	791b      	ldrb	r3, [r3, #4]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2103      	movs	r1, #3
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	4619      	mov	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	400a      	ands	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6819      	ldr	r1, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e0cb      	b.n	800372e <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	795b      	ldrb	r3, [r3, #5]
 800359a:	2b04      	cmp	r3, #4
 800359c:	d117      	bne.n	80035ce <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800359e:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <GPIO_Init+0x198>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	7912      	ldrb	r2, [r2, #4]
 80035a6:	4611      	mov	r1, r2
 80035a8:	2201      	movs	r2, #1
 80035aa:	408a      	lsls	r2, r1
 80035ac:	4611      	mov	r1, r2
 80035ae:	4a47      	ldr	r2, [pc, #284]	; (80036cc <GPIO_Init+0x198>)
 80035b0:	430b      	orrs	r3, r1
 80035b2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80035b4:	4b45      	ldr	r3, [pc, #276]	; (80036cc <GPIO_Init+0x198>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	7912      	ldrb	r2, [r2, #4]
 80035bc:	4611      	mov	r1, r2
 80035be:	2201      	movs	r2, #1
 80035c0:	408a      	lsls	r2, r1
 80035c2:	43d2      	mvns	r2, r2
 80035c4:	4611      	mov	r1, r2
 80035c6:	4a41      	ldr	r2, [pc, #260]	; (80036cc <GPIO_Init+0x198>)
 80035c8:	400b      	ands	r3, r1
 80035ca:	6093      	str	r3, [r2, #8]
 80035cc:	e035      	b.n	800363a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	795b      	ldrb	r3, [r3, #5]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d117      	bne.n	8003606 <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80035d6:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <GPIO_Init+0x198>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	7912      	ldrb	r2, [r2, #4]
 80035de:	4611      	mov	r1, r2
 80035e0:	2201      	movs	r2, #1
 80035e2:	408a      	lsls	r2, r1
 80035e4:	4611      	mov	r1, r2
 80035e6:	4a39      	ldr	r2, [pc, #228]	; (80036cc <GPIO_Init+0x198>)
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80035ec:	4b37      	ldr	r3, [pc, #220]	; (80036cc <GPIO_Init+0x198>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	7912      	ldrb	r2, [r2, #4]
 80035f4:	4611      	mov	r1, r2
 80035f6:	2201      	movs	r2, #1
 80035f8:	408a      	lsls	r2, r1
 80035fa:	43d2      	mvns	r2, r2
 80035fc:	4611      	mov	r1, r2
 80035fe:	4a33      	ldr	r2, [pc, #204]	; (80036cc <GPIO_Init+0x198>)
 8003600:	400b      	ands	r3, r1
 8003602:	60d3      	str	r3, [r2, #12]
 8003604:	e019      	b.n	800363a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	795b      	ldrb	r3, [r3, #5]
 800360a:	2b06      	cmp	r3, #6
 800360c:	d115      	bne.n	800363a <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <GPIO_Init+0x198>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	7912      	ldrb	r2, [r2, #4]
 8003616:	4611      	mov	r1, r2
 8003618:	2201      	movs	r2, #1
 800361a:	408a      	lsls	r2, r1
 800361c:	4611      	mov	r1, r2
 800361e:	4a2b      	ldr	r2, [pc, #172]	; (80036cc <GPIO_Init+0x198>)
 8003620:	430b      	orrs	r3, r1
 8003622:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8003624:	4b29      	ldr	r3, [pc, #164]	; (80036cc <GPIO_Init+0x198>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	7912      	ldrb	r2, [r2, #4]
 800362c:	4611      	mov	r1, r2
 800362e:	2201      	movs	r2, #1
 8003630:	408a      	lsls	r2, r1
 8003632:	4611      	mov	r1, r2
 8003634:	4a25      	ldr	r2, [pc, #148]	; (80036cc <GPIO_Init+0x198>)
 8003636:	430b      	orrs	r3, r1
 8003638:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	791b      	ldrb	r3, [r3, #4]
 800363e:	089b      	lsrs	r3, r3, #2
 8003640:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	791b      	ldrb	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <GPIO_Init+0x19c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04e      	beq.n	80036f4 <GPIO_Init+0x1c0>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1e      	ldr	r2, [pc, #120]	; (80036d4 <GPIO_Init+0x1a0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d032      	beq.n	80036c6 <GPIO_Init+0x192>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <GPIO_Init+0x1a4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d02b      	beq.n	80036c2 <GPIO_Init+0x18e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1b      	ldr	r2, [pc, #108]	; (80036dc <GPIO_Init+0x1a8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d024      	beq.n	80036be <GPIO_Init+0x18a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <GPIO_Init+0x1ac>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01d      	beq.n	80036ba <GPIO_Init+0x186>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <GPIO_Init+0x1b0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d016      	beq.n	80036b6 <GPIO_Init+0x182>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <GPIO_Init+0x1b4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00f      	beq.n	80036b2 <GPIO_Init+0x17e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a15      	ldr	r2, [pc, #84]	; (80036ec <GPIO_Init+0x1b8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d008      	beq.n	80036ae <GPIO_Init+0x17a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <GPIO_Init+0x1bc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <GPIO_Init+0x176>
 80036a6:	2308      	movs	r3, #8
 80036a8:	e025      	b.n	80036f6 <GPIO_Init+0x1c2>
 80036aa:	2300      	movs	r3, #0
 80036ac:	e023      	b.n	80036f6 <GPIO_Init+0x1c2>
 80036ae:	2307      	movs	r3, #7
 80036b0:	e021      	b.n	80036f6 <GPIO_Init+0x1c2>
 80036b2:	2306      	movs	r3, #6
 80036b4:	e01f      	b.n	80036f6 <GPIO_Init+0x1c2>
 80036b6:	2305      	movs	r3, #5
 80036b8:	e01d      	b.n	80036f6 <GPIO_Init+0x1c2>
 80036ba:	2304      	movs	r3, #4
 80036bc:	e01b      	b.n	80036f6 <GPIO_Init+0x1c2>
 80036be:	2303      	movs	r3, #3
 80036c0:	e019      	b.n	80036f6 <GPIO_Init+0x1c2>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e017      	b.n	80036f6 <GPIO_Init+0x1c2>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e015      	b.n	80036f6 <GPIO_Init+0x1c2>
 80036ca:	bf00      	nop
 80036cc:	40013c00 	.word	0x40013c00
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40021400 	.word	0x40021400
 80036e8:	40021800 	.word	0x40021800
 80036ec:	40021c00 	.word	0x40021c00
 80036f0:	40022000 	.word	0x40022000
 80036f4:	2300      	movs	r3, #0
 80036f6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <GPIO_Init+0x32c>)
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <GPIO_Init+0x32c>)
 80036fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003702:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8003704:	7c7a      	ldrb	r2, [r7, #17]
 8003706:	7cbb      	ldrb	r3, [r7, #18]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	fa02 f103 	lsl.w	r1, r2, r3
 800370e:	4a55      	ldr	r2, [pc, #340]	; (8003864 <GPIO_Init+0x330>)
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	3302      	adds	r3, #2
 8003714:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <GPIO_Init+0x334>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	7912      	ldrb	r2, [r2, #4]
 8003720:	4611      	mov	r1, r2
 8003722:	2201      	movs	r2, #1
 8003724:	408a      	lsls	r2, r1
 8003726:	4611      	mov	r1, r2
 8003728:	4a4f      	ldr	r2, [pc, #316]	; (8003868 <GPIO_Init+0x334>)
 800372a:	430b      	orrs	r3, r1
 800372c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	799b      	ldrb	r3, [r3, #6]
 8003732:	461a      	mov	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	791b      	ldrb	r3, [r3, #4]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	791b      	ldrb	r3, [r3, #4]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2103      	movs	r1, #3
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	4619      	mov	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	400a      	ands	r2, r1
 800375c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	430a      	orrs	r2, r1
 800376c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	79db      	ldrb	r3, [r3, #7]
 8003772:	461a      	mov	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	791b      	ldrb	r3, [r3, #4]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	791b      	ldrb	r3, [r3, #4]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2103      	movs	r1, #3
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	4619      	mov	r1, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	400a      	ands	r2, r1
 800379c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68d9      	ldr	r1, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	7a1b      	ldrb	r3, [r3, #8]
 80037b2:	461a      	mov	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	791b      	ldrb	r3, [r3, #4]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	791b      	ldrb	r3, [r3, #4]
 80037c8:	4619      	mov	r1, r3
 80037ca:	2301      	movs	r3, #1
 80037cc:	408b      	lsls	r3, r1
 80037ce:	43db      	mvns	r3, r3
 80037d0:	4619      	mov	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	400a      	ands	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	795b      	ldrb	r3, [r3, #5]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d131      	bne.n	8003856 <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	791b      	ldrb	r3, [r3, #4]
 80037f6:	08db      	lsrs	r3, r3, #3
 80037f8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	791b      	ldrb	r3, [r3, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	7c3a      	ldrb	r2, [r7, #16]
 800380a:	3208      	adds	r2, #8
 800380c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	220f      	movs	r2, #15
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	4618      	mov	r0, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	7c3a      	ldrb	r2, [r7, #16]
 8003824:	4001      	ands	r1, r0
 8003826:	3208      	adds	r2, #8
 8003828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	7c3a      	ldrb	r2, [r7, #16]
 8003832:	3208      	adds	r2, #8
 8003834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7a5b      	ldrb	r3, [r3, #9]
 800383c:	461a      	mov	r2, r3
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	4618      	mov	r0, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	7c3a      	ldrb	r2, [r7, #16]
 800384e:	4301      	orrs	r1, r0
 8003850:	3208      	adds	r2, #8
 8003852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8003856:	bf00      	nop
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800
 8003864:	40013800 	.word	0x40013800
 8003868:	40013c00 	.word	0x40013c00

0800386c <GPIO_ReadFromInputPin>:
 *
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]

   return value;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	70fb      	strb	r3, [r7, #3]
 80038a4:	4613      	mov	r3, r2
 80038a6:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80038a8:	78bb      	ldrb	r3, [r7, #2]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d109      	bne.n	80038c2 <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 80038c0:	e009      	b.n	80038d6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	43d2      	mvns	r2, r2
 80038d0:	401a      	ands	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	615a      	str	r2, [r3, #20]
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d11f      	bne.n	8003936 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a12      	ldr	r2, [pc, #72]	; (8003944 <SPI_PeriClockControl+0x60>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d106      	bne.n	800390c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <SPI_PeriClockControl+0x64>)
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	4a11      	ldr	r2, [pc, #68]	; (8003948 <SPI_PeriClockControl+0x64>)
 8003904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003908:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 800390a:	e014      	b.n	8003936 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0f      	ldr	r2, [pc, #60]	; (800394c <SPI_PeriClockControl+0x68>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d106      	bne.n	8003922 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <SPI_PeriClockControl+0x64>)
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <SPI_PeriClockControl+0x64>)
 800391a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800391e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003920:	e009      	b.n	8003936 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <SPI_PeriClockControl+0x6c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d105      	bne.n	8003936 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <SPI_PeriClockControl+0x64>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	4a06      	ldr	r2, [pc, #24]	; (8003948 <SPI_PeriClockControl+0x64>)
 8003930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003934:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40013000 	.word	0x40013000
 8003948:	40023800 	.word	0x40023800
 800394c:	40003800 	.word	0x40003800
 8003950:	40003c00 	.word	0x40003c00

08003954 <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2101      	movs	r1, #1
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ffbe 	bl	80038e4 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	791b      	ldrb	r3, [r3, #4]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	795b      	ldrb	r3, [r3, #5]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d104      	bne.n	800398c <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	e014      	b.n	80039b6 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	795b      	ldrb	r3, [r3, #5]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d104      	bne.n	800399e <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e00b      	b.n	80039b6 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	795b      	ldrb	r3, [r3, #5]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d107      	bne.n	80039b6 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039ac:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039b4:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	799b      	ldrb	r3, [r3, #6]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	461a      	mov	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	79db      	ldrb	r3, [r3, #7]
 80039c8:	02db      	lsls	r3, r3, #11
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	7a1b      	ldrb	r3, [r3, #8]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	461a      	mov	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7a5b      	ldrb	r3, [r3, #9]
 80039e4:	461a      	mov	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	7a9b      	ldrb	r3, [r3, #10]
 80039f0:	025b      	lsls	r3, r3, #9
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	601a      	str	r2, [r3, #0]

}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	70fb      	strb	r3, [r7, #3]
	SPI_WAIT(pSPIx);
 8003a16:	bf00      	nop
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f9      	beq.n	8003a18 <SPI_Transfer+0xe>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f3      	bne.n	8003a18 <SPI_Transfer+0xe>
//	while((((pSPIx)->SR & ((uint8_t)0x02 | (uint8_t)0x01)) == 0 || ((pSPIx)->SR & (uint8_t)0x80)));
	pSPIx->DR = data;
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60da      	str	r2, [r3, #12]
	SPI_WAIT(pSPIx);
 8003a36:	bf00      	nop
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f9      	beq.n	8003a38 <SPI_Transfer+0x2e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f3      	bne.n	8003a38 <SPI_Transfer+0x2e>
//	while((((pSPIx)->SR & ((uint8_t)0x02 | (uint8_t)0x01)) == 0 || ((pSPIx)->SR & (uint8_t)0x80)));
	return pSPIx->DR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d106      	bne.n	8003a80 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8003a7e:	e005      	b.n	8003a8c <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d106      	bne.n	8003ab8 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f043 0204 	orr.w	r2, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8003ab6:	e005      	b.n	8003ac4 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f023 0204 	bic.w	r2, r3, #4
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	605a      	str	r2, [r3, #4]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <main>:
static void ade_handler(void* parameters);
static void rtc_handler(void* parameters);

void LED_Init();

int main(void) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af02      	add	r7, sp, #8
	LED_Init();
 8003ad6:	f000 f8ab 	bl	8003c30 <LED_Init>
	TaskHandle_t keypad_handle;
	TaskHandle_t lcd_handle;
	TaskHandle_t ade_handle;
	TaskHandle_t rtc_handle;

	xTaskCreate(keypad_handler, "Keypad", 200, NULL, 2, &keypad_handle);
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	22c8      	movs	r2, #200	; 0xc8
 8003ae8:	4912      	ldr	r1, [pc, #72]	; (8003b34 <main+0x64>)
 8003aea:	4813      	ldr	r0, [pc, #76]	; (8003b38 <main+0x68>)
 8003aec:	f7fd feb4 	bl	8001858 <xTaskCreate>
	xTaskCreate(lcd_handler, "LCD5110", 200, NULL, 2, &lcd_handle);
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	2302      	movs	r3, #2
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	2300      	movs	r3, #0
 8003afc:	22c8      	movs	r2, #200	; 0xc8
 8003afe:	490f      	ldr	r1, [pc, #60]	; (8003b3c <main+0x6c>)
 8003b00:	480f      	ldr	r0, [pc, #60]	; (8003b40 <main+0x70>)
 8003b02:	f7fd fea9 	bl	8001858 <xTaskCreate>
	xTaskCreate(ade_handler, "ADE7753", 200, NULL, 2, &ade_handle);
 8003b06:	1d3b      	adds	r3, r7, #4
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	22c8      	movs	r2, #200	; 0xc8
 8003b12:	490c      	ldr	r1, [pc, #48]	; (8003b44 <main+0x74>)
 8003b14:	480c      	ldr	r0, [pc, #48]	; (8003b48 <main+0x78>)
 8003b16:	f7fd fe9f 	bl	8001858 <xTaskCreate>
	xTaskCreate(rtc_handler, "DS1307", 200, NULL, 2, &rtc_handle);
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	2302      	movs	r3, #2
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	22c8      	movs	r2, #200	; 0xc8
 8003b26:	4909      	ldr	r1, [pc, #36]	; (8003b4c <main+0x7c>)
 8003b28:	4809      	ldr	r0, [pc, #36]	; (8003b50 <main+0x80>)
 8003b2a:	f7fd fe95 	bl	8001858 <xTaskCreate>
	vTaskStartScheduler();
 8003b2e:	f7fe f80d 	bl	8001b4c <vTaskStartScheduler>

	while(1);
 8003b32:	e7fe      	b.n	8003b32 <main+0x62>
 8003b34:	08004658 	.word	0x08004658
 8003b38:	08003b55 	.word	0x08003b55
 8003b3c:	08004660 	.word	0x08004660
 8003b40:	08003b7d 	.word	0x08003b7d
 8003b44:	08004668 	.word	0x08004668
 8003b48:	08003bed 	.word	0x08003bed
 8003b4c:	08004670 	.word	0x08004670
 8003b50:	08003c11 	.word	0x08003c11

08003b54 <keypad_handler>:
	return 0;
}

static void keypad_handler(void* parameters) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	KEYPAD_Init(KEYPAD_Type_Large);
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7fc fc35 	bl	80003cc <KEYPAD_Init>
	while(1) {
		KEYPAD_Update();
 8003b62:	f7fc fd89 	bl	8000678 <KEYPAD_Update>
		taskYIELD();
 8003b66:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <keypad_handler+0x24>)
 8003b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
		KEYPAD_Update();
 8003b76:	e7f4      	b.n	8003b62 <keypad_handler+0xe>
 8003b78:	e000ed04 	.word	0xe000ed04

08003b7c <lcd_handler>:
	}
}

static void lcd_handler(void* parameters) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	LCD5110_Init(0x37);
 8003b84:	2037      	movs	r0, #55	; 0x37
 8003b86:	f7fc fe01 	bl	800078c <LCD5110_Init>
	KEYPAD_Button_t Keypad_Button, Keypad_prev = KEYPAD_NOPRESSED;
 8003b8a:	23ff      	movs	r3, #255	; 0xff
 8003b8c:	77fb      	strb	r3, [r7, #31]
	char buffer[20];

	while(1) {
		Keypad_Button = KEYPAD_Read();
 8003b8e:	f7fc fc8f 	bl	80004b0 <KEYPAD_Read>
 8003b92:	4603      	mov	r3, r0
 8003b94:	77bb      	strb	r3, [r7, #30]
		if(Keypad_Button != KEYPAD_NOPRESSED && Keypad_prev == KEYPAD_NOPRESSED) {
 8003b96:	7fbb      	ldrb	r3, [r7, #30]
 8003b98:	2bff      	cmp	r3, #255	; 0xff
 8003b9a:	d014      	beq.n	8003bc6 <lcd_handler+0x4a>
 8003b9c:	7ffb      	ldrb	r3, [r7, #31]
 8003b9e:	2bff      	cmp	r3, #255	; 0xff
 8003ba0:	d111      	bne.n	8003bc6 <lcd_handler+0x4a>
			LCD5110_Clear();
 8003ba2:	f7fc ff17 	bl	80009d4 <LCD5110_Clear>
			sprintf(buffer, "%u", Keypad_Button);
 8003ba6:	7fba      	ldrb	r2, [r7, #30]
 8003ba8:	f107 0308 	add.w	r3, r7, #8
 8003bac:	490d      	ldr	r1, [pc, #52]	; (8003be4 <lcd_handler+0x68>)
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f91a 	bl	8003de8 <siprintf>
			LCD5110_Puts(buffer, LCD5110_Pixel_Set, LCD5110_FontSize_5x7);
 8003bb4:	f107 0308 	add.w	r3, r7, #8
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd f89b 	bl	8000cf8 <LCD5110_Puts>
			LCD5110_Refresh();
 8003bc2:	f7fc ff39 	bl	8000a38 <LCD5110_Refresh>
		}
		Keypad_prev = Keypad_Button;
 8003bc6:	7fbb      	ldrb	r3, [r7, #30]
 8003bc8:	77fb      	strb	r3, [r7, #31]
		vTaskDelay(10);
 8003bca:	200a      	movs	r0, #10
 8003bcc:	f7fd ff8a 	bl	8001ae4 <vTaskDelay>
		taskYIELD();
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <lcd_handler+0x6c>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
		Keypad_Button = KEYPAD_Read();
 8003be0:	e7d5      	b.n	8003b8e <lcd_handler+0x12>
 8003be2:	bf00      	nop
 8003be4:	08004678 	.word	0x08004678
 8003be8:	e000ed04 	.word	0xe000ed04

08003bec <ade_handler>:
	}
}

static void ade_handler(void* parameters) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	ADE_Init();
 8003bf4:	f7fc fb4c 	bl	8000290 <ADE_Init>

	while(1) {
		taskYIELD();
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <ade_handler+0x20>)
 8003bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	e7f6      	b.n	8003bf8 <ade_handler+0xc>
 8003c0a:	bf00      	nop
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <rtc_handler>:
	}
}

static void rtc_handler(void* parameters) {
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	while(1) {
		taskYIELD();
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <rtc_handler+0x1c>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	e7f6      	b.n	8003c18 <rtc_handler+0x8>
 8003c2a:	bf00      	nop
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <LED_Init>:
	}
}

void LED_Init() {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = PORT_LED;
 8003c36:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <LED_Init+0x64>)
 8003c38:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8003c42:	2300      	movs	r3, #0
 8003c44:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8003c46:	2300      	movs	r3, #0
 8003c48:	72fb      	strb	r3, [r7, #11]

//	SAG
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_SAG_LED;
 8003c4a:	2305      	movs	r3, #5
 8003c4c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fc6f 	bl	8003534 <GPIO_Init>

//	VPKL
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_VPKL_LED;
 8003c56:	2303      	movs	r3, #3
 8003c58:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fc69 	bl	8003534 <GPIO_Init>

//	IPKL
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_IPKL_LED;
 8003c62:	2301      	movs	r3, #1
 8003c64:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fc63 	bl	8003534 <GPIO_Init>

	SAG_LED_OFF;
 8003c6e:	2201      	movs	r2, #1
 8003c70:	2105      	movs	r1, #5
 8003c72:	4808      	ldr	r0, [pc, #32]	; (8003c94 <LED_Init+0x64>)
 8003c74:	f7ff fe10 	bl	8003898 <GPIO_WriteToOutputPin>
	VPKL_LED_OFF;
 8003c78:	2201      	movs	r2, #1
 8003c7a:	2103      	movs	r1, #3
 8003c7c:	4805      	ldr	r0, [pc, #20]	; (8003c94 <LED_Init+0x64>)
 8003c7e:	f7ff fe0b 	bl	8003898 <GPIO_WriteToOutputPin>
	IPKL_LED_OFF;
 8003c82:	2201      	movs	r2, #1
 8003c84:	2101      	movs	r1, #1
 8003c86:	4803      	ldr	r0, [pc, #12]	; (8003c94 <LED_Init+0x64>)
 8003c88:	f7ff fe06 	bl	8003898 <GPIO_WriteToOutputPin>
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000

08003c98 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
//        EXTI->PR |= 1 << PIN_IRQ_IT;	// clear pending flag, otherwise we'd get endless interrupts
//        // handle pin I here
//        for(int i = 0; i < 5000; i++);
//        ADE_ReadData(RSTSTATUS, 2);
//    }
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <_sbrk+0x5c>)
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <_sbrk+0x60>)
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cbc:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <_sbrk+0x64>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <_sbrk+0x64>)
 8003cc6:	4a12      	ldr	r2, [pc, #72]	; (8003d10 <_sbrk+0x68>)
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <_sbrk+0x64>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d207      	bcs.n	8003ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cd8:	f000 f846 	bl	8003d68 <__errno>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	220c      	movs	r2, #12
 8003ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ce6:	e009      	b.n	8003cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <_sbrk+0x64>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cee:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <_sbrk+0x64>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4a05      	ldr	r2, [pc, #20]	; (8003d0c <_sbrk+0x64>)
 8003cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20020000 	.word	0x20020000
 8003d08:	00000400 	.word	0x00000400
 8003d0c:	20012e10 	.word	0x20012e10
 8003d10:	20013070 	.word	0x20013070

08003d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d14:	480d      	ldr	r0, [pc, #52]	; (8003d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d16:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d1c:	480c      	ldr	r0, [pc, #48]	; (8003d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d1e:	490d      	ldr	r1, [pc, #52]	; (8003d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d20:	4a0d      	ldr	r2, [pc, #52]	; (8003d58 <LoopForever+0xe>)
  movs r3, #0
 8003d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d24:	e002      	b.n	8003d2c <LoopCopyDataInit>

08003d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d2a:	3304      	adds	r3, #4

08003d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d30:	d3f9      	bcc.n	8003d26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d34:	4c0a      	ldr	r4, [pc, #40]	; (8003d60 <LoopForever+0x16>)
  movs r3, #0
 8003d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d38:	e001      	b.n	8003d3e <LoopFillZerobss>

08003d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d3c:	3204      	adds	r2, #4

08003d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d40:	d3fb      	bcc.n	8003d3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d42:	f000 f817 	bl	8003d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d46:	f7ff fec3 	bl	8003ad0 <main>

08003d4a <LoopForever>:

LoopForever:
    b LoopForever
 8003d4a:	e7fe      	b.n	8003d4a <LoopForever>
  ldr   r0, =_estack
 8003d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d54:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003d58:	08004a40 	.word	0x08004a40
  ldr r2, =_sbss
 8003d5c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003d60:	2001306c 	.word	0x2001306c

08003d64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d64:	e7fe      	b.n	8003d64 <ADC_IRQHandler>
	...

08003d68 <__errno>:
 8003d68:	4b01      	ldr	r3, [pc, #4]	; (8003d70 <__errno+0x8>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000020 	.word	0x20000020

08003d74 <__libc_init_array>:
 8003d74:	b570      	push	{r4, r5, r6, lr}
 8003d76:	4d0d      	ldr	r5, [pc, #52]	; (8003dac <__libc_init_array+0x38>)
 8003d78:	4c0d      	ldr	r4, [pc, #52]	; (8003db0 <__libc_init_array+0x3c>)
 8003d7a:	1b64      	subs	r4, r4, r5
 8003d7c:	10a4      	asrs	r4, r4, #2
 8003d7e:	2600      	movs	r6, #0
 8003d80:	42a6      	cmp	r6, r4
 8003d82:	d109      	bne.n	8003d98 <__libc_init_array+0x24>
 8003d84:	4d0b      	ldr	r5, [pc, #44]	; (8003db4 <__libc_init_array+0x40>)
 8003d86:	4c0c      	ldr	r4, [pc, #48]	; (8003db8 <__libc_init_array+0x44>)
 8003d88:	f000 fc4e 	bl	8004628 <_init>
 8003d8c:	1b64      	subs	r4, r4, r5
 8003d8e:	10a4      	asrs	r4, r4, #2
 8003d90:	2600      	movs	r6, #0
 8003d92:	42a6      	cmp	r6, r4
 8003d94:	d105      	bne.n	8003da2 <__libc_init_array+0x2e>
 8003d96:	bd70      	pop	{r4, r5, r6, pc}
 8003d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9c:	4798      	blx	r3
 8003d9e:	3601      	adds	r6, #1
 8003da0:	e7ee      	b.n	8003d80 <__libc_init_array+0xc>
 8003da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da6:	4798      	blx	r3
 8003da8:	3601      	adds	r6, #1
 8003daa:	e7f2      	b.n	8003d92 <__libc_init_array+0x1e>
 8003dac:	08004a38 	.word	0x08004a38
 8003db0:	08004a38 	.word	0x08004a38
 8003db4:	08004a38 	.word	0x08004a38
 8003db8:	08004a3c 	.word	0x08004a3c

08003dbc <memcpy>:
 8003dbc:	440a      	add	r2, r1
 8003dbe:	4291      	cmp	r1, r2
 8003dc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003dc4:	d100      	bne.n	8003dc8 <memcpy+0xc>
 8003dc6:	4770      	bx	lr
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dd2:	4291      	cmp	r1, r2
 8003dd4:	d1f9      	bne.n	8003dca <memcpy+0xe>
 8003dd6:	bd10      	pop	{r4, pc}

08003dd8 <memset>:
 8003dd8:	4402      	add	r2, r0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d100      	bne.n	8003de2 <memset+0xa>
 8003de0:	4770      	bx	lr
 8003de2:	f803 1b01 	strb.w	r1, [r3], #1
 8003de6:	e7f9      	b.n	8003ddc <memset+0x4>

08003de8 <siprintf>:
 8003de8:	b40e      	push	{r1, r2, r3}
 8003dea:	b500      	push	{lr}
 8003dec:	b09c      	sub	sp, #112	; 0x70
 8003dee:	ab1d      	add	r3, sp, #116	; 0x74
 8003df0:	9002      	str	r0, [sp, #8]
 8003df2:	9006      	str	r0, [sp, #24]
 8003df4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003df8:	4809      	ldr	r0, [pc, #36]	; (8003e20 <siprintf+0x38>)
 8003dfa:	9107      	str	r1, [sp, #28]
 8003dfc:	9104      	str	r1, [sp, #16]
 8003dfe:	4909      	ldr	r1, [pc, #36]	; (8003e24 <siprintf+0x3c>)
 8003e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e04:	9105      	str	r1, [sp, #20]
 8003e06:	6800      	ldr	r0, [r0, #0]
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	a902      	add	r1, sp, #8
 8003e0c:	f000 f868 	bl	8003ee0 <_svfiprintf_r>
 8003e10:	9b02      	ldr	r3, [sp, #8]
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	b01c      	add	sp, #112	; 0x70
 8003e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e1c:	b003      	add	sp, #12
 8003e1e:	4770      	bx	lr
 8003e20:	20000020 	.word	0x20000020
 8003e24:	ffff0208 	.word	0xffff0208

08003e28 <__ssputs_r>:
 8003e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2c:	688e      	ldr	r6, [r1, #8]
 8003e2e:	429e      	cmp	r6, r3
 8003e30:	4682      	mov	sl, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	4690      	mov	r8, r2
 8003e36:	461f      	mov	r7, r3
 8003e38:	d838      	bhi.n	8003eac <__ssputs_r+0x84>
 8003e3a:	898a      	ldrh	r2, [r1, #12]
 8003e3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e40:	d032      	beq.n	8003ea8 <__ssputs_r+0x80>
 8003e42:	6825      	ldr	r5, [r4, #0]
 8003e44:	6909      	ldr	r1, [r1, #16]
 8003e46:	eba5 0901 	sub.w	r9, r5, r1
 8003e4a:	6965      	ldr	r5, [r4, #20]
 8003e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e54:	3301      	adds	r3, #1
 8003e56:	444b      	add	r3, r9
 8003e58:	106d      	asrs	r5, r5, #1
 8003e5a:	429d      	cmp	r5, r3
 8003e5c:	bf38      	it	cc
 8003e5e:	461d      	movcc	r5, r3
 8003e60:	0553      	lsls	r3, r2, #21
 8003e62:	d531      	bpl.n	8003ec8 <__ssputs_r+0xa0>
 8003e64:	4629      	mov	r1, r5
 8003e66:	f000 fb39 	bl	80044dc <_malloc_r>
 8003e6a:	4606      	mov	r6, r0
 8003e6c:	b950      	cbnz	r0, 8003e84 <__ssputs_r+0x5c>
 8003e6e:	230c      	movs	r3, #12
 8003e70:	f8ca 3000 	str.w	r3, [sl]
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e84:	6921      	ldr	r1, [r4, #16]
 8003e86:	464a      	mov	r2, r9
 8003e88:	f7ff ff98 	bl	8003dbc <memcpy>
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e96:	81a3      	strh	r3, [r4, #12]
 8003e98:	6126      	str	r6, [r4, #16]
 8003e9a:	6165      	str	r5, [r4, #20]
 8003e9c:	444e      	add	r6, r9
 8003e9e:	eba5 0509 	sub.w	r5, r5, r9
 8003ea2:	6026      	str	r6, [r4, #0]
 8003ea4:	60a5      	str	r5, [r4, #8]
 8003ea6:	463e      	mov	r6, r7
 8003ea8:	42be      	cmp	r6, r7
 8003eaa:	d900      	bls.n	8003eae <__ssputs_r+0x86>
 8003eac:	463e      	mov	r6, r7
 8003eae:	4632      	mov	r2, r6
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	f000 faa8 	bl	8004408 <memmove>
 8003eb8:	68a3      	ldr	r3, [r4, #8]
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	1b9b      	subs	r3, r3, r6
 8003ebe:	4432      	add	r2, r6
 8003ec0:	60a3      	str	r3, [r4, #8]
 8003ec2:	6022      	str	r2, [r4, #0]
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	e7db      	b.n	8003e80 <__ssputs_r+0x58>
 8003ec8:	462a      	mov	r2, r5
 8003eca:	f000 fb61 	bl	8004590 <_realloc_r>
 8003ece:	4606      	mov	r6, r0
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d1e1      	bne.n	8003e98 <__ssputs_r+0x70>
 8003ed4:	6921      	ldr	r1, [r4, #16]
 8003ed6:	4650      	mov	r0, sl
 8003ed8:	f000 fab0 	bl	800443c <_free_r>
 8003edc:	e7c7      	b.n	8003e6e <__ssputs_r+0x46>
	...

08003ee0 <_svfiprintf_r>:
 8003ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee4:	4698      	mov	r8, r3
 8003ee6:	898b      	ldrh	r3, [r1, #12]
 8003ee8:	061b      	lsls	r3, r3, #24
 8003eea:	b09d      	sub	sp, #116	; 0x74
 8003eec:	4607      	mov	r7, r0
 8003eee:	460d      	mov	r5, r1
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	d50e      	bpl.n	8003f12 <_svfiprintf_r+0x32>
 8003ef4:	690b      	ldr	r3, [r1, #16]
 8003ef6:	b963      	cbnz	r3, 8003f12 <_svfiprintf_r+0x32>
 8003ef8:	2140      	movs	r1, #64	; 0x40
 8003efa:	f000 faef 	bl	80044dc <_malloc_r>
 8003efe:	6028      	str	r0, [r5, #0]
 8003f00:	6128      	str	r0, [r5, #16]
 8003f02:	b920      	cbnz	r0, 8003f0e <_svfiprintf_r+0x2e>
 8003f04:	230c      	movs	r3, #12
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f0c:	e0d1      	b.n	80040b2 <_svfiprintf_r+0x1d2>
 8003f0e:	2340      	movs	r3, #64	; 0x40
 8003f10:	616b      	str	r3, [r5, #20]
 8003f12:	2300      	movs	r3, #0
 8003f14:	9309      	str	r3, [sp, #36]	; 0x24
 8003f16:	2320      	movs	r3, #32
 8003f18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f20:	2330      	movs	r3, #48	; 0x30
 8003f22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040cc <_svfiprintf_r+0x1ec>
 8003f26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f2a:	f04f 0901 	mov.w	r9, #1
 8003f2e:	4623      	mov	r3, r4
 8003f30:	469a      	mov	sl, r3
 8003f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f36:	b10a      	cbz	r2, 8003f3c <_svfiprintf_r+0x5c>
 8003f38:	2a25      	cmp	r2, #37	; 0x25
 8003f3a:	d1f9      	bne.n	8003f30 <_svfiprintf_r+0x50>
 8003f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f40:	d00b      	beq.n	8003f5a <_svfiprintf_r+0x7a>
 8003f42:	465b      	mov	r3, fp
 8003f44:	4622      	mov	r2, r4
 8003f46:	4629      	mov	r1, r5
 8003f48:	4638      	mov	r0, r7
 8003f4a:	f7ff ff6d 	bl	8003e28 <__ssputs_r>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	f000 80aa 	beq.w	80040a8 <_svfiprintf_r+0x1c8>
 8003f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f56:	445a      	add	r2, fp
 8003f58:	9209      	str	r2, [sp, #36]	; 0x24
 8003f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80a2 	beq.w	80040a8 <_svfiprintf_r+0x1c8>
 8003f64:	2300      	movs	r3, #0
 8003f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f6e:	f10a 0a01 	add.w	sl, sl, #1
 8003f72:	9304      	str	r3, [sp, #16]
 8003f74:	9307      	str	r3, [sp, #28]
 8003f76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f7a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f7c:	4654      	mov	r4, sl
 8003f7e:	2205      	movs	r2, #5
 8003f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f84:	4851      	ldr	r0, [pc, #324]	; (80040cc <_svfiprintf_r+0x1ec>)
 8003f86:	f7fc f933 	bl	80001f0 <memchr>
 8003f8a:	9a04      	ldr	r2, [sp, #16]
 8003f8c:	b9d8      	cbnz	r0, 8003fc6 <_svfiprintf_r+0xe6>
 8003f8e:	06d0      	lsls	r0, r2, #27
 8003f90:	bf44      	itt	mi
 8003f92:	2320      	movmi	r3, #32
 8003f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f98:	0711      	lsls	r1, r2, #28
 8003f9a:	bf44      	itt	mi
 8003f9c:	232b      	movmi	r3, #43	; 0x2b
 8003f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa8:	d015      	beq.n	8003fd6 <_svfiprintf_r+0xf6>
 8003faa:	9a07      	ldr	r2, [sp, #28]
 8003fac:	4654      	mov	r4, sl
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f04f 0c0a 	mov.w	ip, #10
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fba:	3b30      	subs	r3, #48	; 0x30
 8003fbc:	2b09      	cmp	r3, #9
 8003fbe:	d94e      	bls.n	800405e <_svfiprintf_r+0x17e>
 8003fc0:	b1b0      	cbz	r0, 8003ff0 <_svfiprintf_r+0x110>
 8003fc2:	9207      	str	r2, [sp, #28]
 8003fc4:	e014      	b.n	8003ff0 <_svfiprintf_r+0x110>
 8003fc6:	eba0 0308 	sub.w	r3, r0, r8
 8003fca:	fa09 f303 	lsl.w	r3, r9, r3
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	9304      	str	r3, [sp, #16]
 8003fd2:	46a2      	mov	sl, r4
 8003fd4:	e7d2      	b.n	8003f7c <_svfiprintf_r+0x9c>
 8003fd6:	9b03      	ldr	r3, [sp, #12]
 8003fd8:	1d19      	adds	r1, r3, #4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	9103      	str	r1, [sp, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bfbb      	ittet	lt
 8003fe2:	425b      	neglt	r3, r3
 8003fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe8:	9307      	strge	r3, [sp, #28]
 8003fea:	9307      	strlt	r3, [sp, #28]
 8003fec:	bfb8      	it	lt
 8003fee:	9204      	strlt	r2, [sp, #16]
 8003ff0:	7823      	ldrb	r3, [r4, #0]
 8003ff2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ff4:	d10c      	bne.n	8004010 <_svfiprintf_r+0x130>
 8003ff6:	7863      	ldrb	r3, [r4, #1]
 8003ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8003ffa:	d135      	bne.n	8004068 <_svfiprintf_r+0x188>
 8003ffc:	9b03      	ldr	r3, [sp, #12]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	9203      	str	r2, [sp, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	bfb8      	it	lt
 8004008:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800400c:	3402      	adds	r4, #2
 800400e:	9305      	str	r3, [sp, #20]
 8004010:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040dc <_svfiprintf_r+0x1fc>
 8004014:	7821      	ldrb	r1, [r4, #0]
 8004016:	2203      	movs	r2, #3
 8004018:	4650      	mov	r0, sl
 800401a:	f7fc f8e9 	bl	80001f0 <memchr>
 800401e:	b140      	cbz	r0, 8004032 <_svfiprintf_r+0x152>
 8004020:	2340      	movs	r3, #64	; 0x40
 8004022:	eba0 000a 	sub.w	r0, r0, sl
 8004026:	fa03 f000 	lsl.w	r0, r3, r0
 800402a:	9b04      	ldr	r3, [sp, #16]
 800402c:	4303      	orrs	r3, r0
 800402e:	3401      	adds	r4, #1
 8004030:	9304      	str	r3, [sp, #16]
 8004032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004036:	4826      	ldr	r0, [pc, #152]	; (80040d0 <_svfiprintf_r+0x1f0>)
 8004038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800403c:	2206      	movs	r2, #6
 800403e:	f7fc f8d7 	bl	80001f0 <memchr>
 8004042:	2800      	cmp	r0, #0
 8004044:	d038      	beq.n	80040b8 <_svfiprintf_r+0x1d8>
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <_svfiprintf_r+0x1f4>)
 8004048:	bb1b      	cbnz	r3, 8004092 <_svfiprintf_r+0x1b2>
 800404a:	9b03      	ldr	r3, [sp, #12]
 800404c:	3307      	adds	r3, #7
 800404e:	f023 0307 	bic.w	r3, r3, #7
 8004052:	3308      	adds	r3, #8
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004058:	4433      	add	r3, r6
 800405a:	9309      	str	r3, [sp, #36]	; 0x24
 800405c:	e767      	b.n	8003f2e <_svfiprintf_r+0x4e>
 800405e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004062:	460c      	mov	r4, r1
 8004064:	2001      	movs	r0, #1
 8004066:	e7a5      	b.n	8003fb4 <_svfiprintf_r+0xd4>
 8004068:	2300      	movs	r3, #0
 800406a:	3401      	adds	r4, #1
 800406c:	9305      	str	r3, [sp, #20]
 800406e:	4619      	mov	r1, r3
 8004070:	f04f 0c0a 	mov.w	ip, #10
 8004074:	4620      	mov	r0, r4
 8004076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800407a:	3a30      	subs	r2, #48	; 0x30
 800407c:	2a09      	cmp	r2, #9
 800407e:	d903      	bls.n	8004088 <_svfiprintf_r+0x1a8>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0c5      	beq.n	8004010 <_svfiprintf_r+0x130>
 8004084:	9105      	str	r1, [sp, #20]
 8004086:	e7c3      	b.n	8004010 <_svfiprintf_r+0x130>
 8004088:	fb0c 2101 	mla	r1, ip, r1, r2
 800408c:	4604      	mov	r4, r0
 800408e:	2301      	movs	r3, #1
 8004090:	e7f0      	b.n	8004074 <_svfiprintf_r+0x194>
 8004092:	ab03      	add	r3, sp, #12
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	462a      	mov	r2, r5
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <_svfiprintf_r+0x1f8>)
 800409a:	a904      	add	r1, sp, #16
 800409c:	4638      	mov	r0, r7
 800409e:	f3af 8000 	nop.w
 80040a2:	1c42      	adds	r2, r0, #1
 80040a4:	4606      	mov	r6, r0
 80040a6:	d1d6      	bne.n	8004056 <_svfiprintf_r+0x176>
 80040a8:	89ab      	ldrh	r3, [r5, #12]
 80040aa:	065b      	lsls	r3, r3, #25
 80040ac:	f53f af2c 	bmi.w	8003f08 <_svfiprintf_r+0x28>
 80040b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040b2:	b01d      	add	sp, #116	; 0x74
 80040b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b8:	ab03      	add	r3, sp, #12
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	462a      	mov	r2, r5
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <_svfiprintf_r+0x1f8>)
 80040c0:	a904      	add	r1, sp, #16
 80040c2:	4638      	mov	r0, r7
 80040c4:	f000 f87a 	bl	80041bc <_printf_i>
 80040c8:	e7eb      	b.n	80040a2 <_svfiprintf_r+0x1c2>
 80040ca:	bf00      	nop
 80040cc:	08004a02 	.word	0x08004a02
 80040d0:	08004a0c 	.word	0x08004a0c
 80040d4:	00000000 	.word	0x00000000
 80040d8:	08003e29 	.word	0x08003e29
 80040dc:	08004a08 	.word	0x08004a08

080040e0 <_printf_common>:
 80040e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e4:	4616      	mov	r6, r2
 80040e6:	4699      	mov	r9, r3
 80040e8:	688a      	ldr	r2, [r1, #8]
 80040ea:	690b      	ldr	r3, [r1, #16]
 80040ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040f0:	4293      	cmp	r3, r2
 80040f2:	bfb8      	it	lt
 80040f4:	4613      	movlt	r3, r2
 80040f6:	6033      	str	r3, [r6, #0]
 80040f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040fc:	4607      	mov	r7, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	b10a      	cbz	r2, 8004106 <_printf_common+0x26>
 8004102:	3301      	adds	r3, #1
 8004104:	6033      	str	r3, [r6, #0]
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	0699      	lsls	r1, r3, #26
 800410a:	bf42      	ittt	mi
 800410c:	6833      	ldrmi	r3, [r6, #0]
 800410e:	3302      	addmi	r3, #2
 8004110:	6033      	strmi	r3, [r6, #0]
 8004112:	6825      	ldr	r5, [r4, #0]
 8004114:	f015 0506 	ands.w	r5, r5, #6
 8004118:	d106      	bne.n	8004128 <_printf_common+0x48>
 800411a:	f104 0a19 	add.w	sl, r4, #25
 800411e:	68e3      	ldr	r3, [r4, #12]
 8004120:	6832      	ldr	r2, [r6, #0]
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	42ab      	cmp	r3, r5
 8004126:	dc26      	bgt.n	8004176 <_printf_common+0x96>
 8004128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800412c:	1e13      	subs	r3, r2, #0
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	bf18      	it	ne
 8004132:	2301      	movne	r3, #1
 8004134:	0692      	lsls	r2, r2, #26
 8004136:	d42b      	bmi.n	8004190 <_printf_common+0xb0>
 8004138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800413c:	4649      	mov	r1, r9
 800413e:	4638      	mov	r0, r7
 8004140:	47c0      	blx	r8
 8004142:	3001      	adds	r0, #1
 8004144:	d01e      	beq.n	8004184 <_printf_common+0xa4>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	68e5      	ldr	r5, [r4, #12]
 800414a:	6832      	ldr	r2, [r6, #0]
 800414c:	f003 0306 	and.w	r3, r3, #6
 8004150:	2b04      	cmp	r3, #4
 8004152:	bf08      	it	eq
 8004154:	1aad      	subeq	r5, r5, r2
 8004156:	68a3      	ldr	r3, [r4, #8]
 8004158:	6922      	ldr	r2, [r4, #16]
 800415a:	bf0c      	ite	eq
 800415c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004160:	2500      	movne	r5, #0
 8004162:	4293      	cmp	r3, r2
 8004164:	bfc4      	itt	gt
 8004166:	1a9b      	subgt	r3, r3, r2
 8004168:	18ed      	addgt	r5, r5, r3
 800416a:	2600      	movs	r6, #0
 800416c:	341a      	adds	r4, #26
 800416e:	42b5      	cmp	r5, r6
 8004170:	d11a      	bne.n	80041a8 <_printf_common+0xc8>
 8004172:	2000      	movs	r0, #0
 8004174:	e008      	b.n	8004188 <_printf_common+0xa8>
 8004176:	2301      	movs	r3, #1
 8004178:	4652      	mov	r2, sl
 800417a:	4649      	mov	r1, r9
 800417c:	4638      	mov	r0, r7
 800417e:	47c0      	blx	r8
 8004180:	3001      	adds	r0, #1
 8004182:	d103      	bne.n	800418c <_printf_common+0xac>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418c:	3501      	adds	r5, #1
 800418e:	e7c6      	b.n	800411e <_printf_common+0x3e>
 8004190:	18e1      	adds	r1, r4, r3
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	2030      	movs	r0, #48	; 0x30
 8004196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800419a:	4422      	add	r2, r4
 800419c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a4:	3302      	adds	r3, #2
 80041a6:	e7c7      	b.n	8004138 <_printf_common+0x58>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4622      	mov	r2, r4
 80041ac:	4649      	mov	r1, r9
 80041ae:	4638      	mov	r0, r7
 80041b0:	47c0      	blx	r8
 80041b2:	3001      	adds	r0, #1
 80041b4:	d0e6      	beq.n	8004184 <_printf_common+0xa4>
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7d9      	b.n	800416e <_printf_common+0x8e>
	...

080041bc <_printf_i>:
 80041bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	460c      	mov	r4, r1
 80041c2:	4691      	mov	r9, r2
 80041c4:	7e27      	ldrb	r7, [r4, #24]
 80041c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041c8:	2f78      	cmp	r7, #120	; 0x78
 80041ca:	4680      	mov	r8, r0
 80041cc:	469a      	mov	sl, r3
 80041ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041d2:	d807      	bhi.n	80041e4 <_printf_i+0x28>
 80041d4:	2f62      	cmp	r7, #98	; 0x62
 80041d6:	d80a      	bhi.n	80041ee <_printf_i+0x32>
 80041d8:	2f00      	cmp	r7, #0
 80041da:	f000 80d8 	beq.w	800438e <_printf_i+0x1d2>
 80041de:	2f58      	cmp	r7, #88	; 0x58
 80041e0:	f000 80a3 	beq.w	800432a <_printf_i+0x16e>
 80041e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041ec:	e03a      	b.n	8004264 <_printf_i+0xa8>
 80041ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041f2:	2b15      	cmp	r3, #21
 80041f4:	d8f6      	bhi.n	80041e4 <_printf_i+0x28>
 80041f6:	a001      	add	r0, pc, #4	; (adr r0, 80041fc <_printf_i+0x40>)
 80041f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041fc:	08004255 	.word	0x08004255
 8004200:	08004269 	.word	0x08004269
 8004204:	080041e5 	.word	0x080041e5
 8004208:	080041e5 	.word	0x080041e5
 800420c:	080041e5 	.word	0x080041e5
 8004210:	080041e5 	.word	0x080041e5
 8004214:	08004269 	.word	0x08004269
 8004218:	080041e5 	.word	0x080041e5
 800421c:	080041e5 	.word	0x080041e5
 8004220:	080041e5 	.word	0x080041e5
 8004224:	080041e5 	.word	0x080041e5
 8004228:	08004375 	.word	0x08004375
 800422c:	08004299 	.word	0x08004299
 8004230:	08004357 	.word	0x08004357
 8004234:	080041e5 	.word	0x080041e5
 8004238:	080041e5 	.word	0x080041e5
 800423c:	08004397 	.word	0x08004397
 8004240:	080041e5 	.word	0x080041e5
 8004244:	08004299 	.word	0x08004299
 8004248:	080041e5 	.word	0x080041e5
 800424c:	080041e5 	.word	0x080041e5
 8004250:	0800435f 	.word	0x0800435f
 8004254:	680b      	ldr	r3, [r1, #0]
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	600a      	str	r2, [r1, #0]
 800425c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004264:	2301      	movs	r3, #1
 8004266:	e0a3      	b.n	80043b0 <_printf_i+0x1f4>
 8004268:	6825      	ldr	r5, [r4, #0]
 800426a:	6808      	ldr	r0, [r1, #0]
 800426c:	062e      	lsls	r6, r5, #24
 800426e:	f100 0304 	add.w	r3, r0, #4
 8004272:	d50a      	bpl.n	800428a <_printf_i+0xce>
 8004274:	6805      	ldr	r5, [r0, #0]
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	2d00      	cmp	r5, #0
 800427a:	da03      	bge.n	8004284 <_printf_i+0xc8>
 800427c:	232d      	movs	r3, #45	; 0x2d
 800427e:	426d      	negs	r5, r5
 8004280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004284:	485e      	ldr	r0, [pc, #376]	; (8004400 <_printf_i+0x244>)
 8004286:	230a      	movs	r3, #10
 8004288:	e019      	b.n	80042be <_printf_i+0x102>
 800428a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800428e:	6805      	ldr	r5, [r0, #0]
 8004290:	600b      	str	r3, [r1, #0]
 8004292:	bf18      	it	ne
 8004294:	b22d      	sxthne	r5, r5
 8004296:	e7ef      	b.n	8004278 <_printf_i+0xbc>
 8004298:	680b      	ldr	r3, [r1, #0]
 800429a:	6825      	ldr	r5, [r4, #0]
 800429c:	1d18      	adds	r0, r3, #4
 800429e:	6008      	str	r0, [r1, #0]
 80042a0:	0628      	lsls	r0, r5, #24
 80042a2:	d501      	bpl.n	80042a8 <_printf_i+0xec>
 80042a4:	681d      	ldr	r5, [r3, #0]
 80042a6:	e002      	b.n	80042ae <_printf_i+0xf2>
 80042a8:	0669      	lsls	r1, r5, #25
 80042aa:	d5fb      	bpl.n	80042a4 <_printf_i+0xe8>
 80042ac:	881d      	ldrh	r5, [r3, #0]
 80042ae:	4854      	ldr	r0, [pc, #336]	; (8004400 <_printf_i+0x244>)
 80042b0:	2f6f      	cmp	r7, #111	; 0x6f
 80042b2:	bf0c      	ite	eq
 80042b4:	2308      	moveq	r3, #8
 80042b6:	230a      	movne	r3, #10
 80042b8:	2100      	movs	r1, #0
 80042ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042be:	6866      	ldr	r6, [r4, #4]
 80042c0:	60a6      	str	r6, [r4, #8]
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	bfa2      	ittt	ge
 80042c6:	6821      	ldrge	r1, [r4, #0]
 80042c8:	f021 0104 	bicge.w	r1, r1, #4
 80042cc:	6021      	strge	r1, [r4, #0]
 80042ce:	b90d      	cbnz	r5, 80042d4 <_printf_i+0x118>
 80042d0:	2e00      	cmp	r6, #0
 80042d2:	d04d      	beq.n	8004370 <_printf_i+0x1b4>
 80042d4:	4616      	mov	r6, r2
 80042d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80042da:	fb03 5711 	mls	r7, r3, r1, r5
 80042de:	5dc7      	ldrb	r7, [r0, r7]
 80042e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042e4:	462f      	mov	r7, r5
 80042e6:	42bb      	cmp	r3, r7
 80042e8:	460d      	mov	r5, r1
 80042ea:	d9f4      	bls.n	80042d6 <_printf_i+0x11a>
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d10b      	bne.n	8004308 <_printf_i+0x14c>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	07df      	lsls	r7, r3, #31
 80042f4:	d508      	bpl.n	8004308 <_printf_i+0x14c>
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	6861      	ldr	r1, [r4, #4]
 80042fa:	4299      	cmp	r1, r3
 80042fc:	bfde      	ittt	le
 80042fe:	2330      	movle	r3, #48	; 0x30
 8004300:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004304:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004308:	1b92      	subs	r2, r2, r6
 800430a:	6122      	str	r2, [r4, #16]
 800430c:	f8cd a000 	str.w	sl, [sp]
 8004310:	464b      	mov	r3, r9
 8004312:	aa03      	add	r2, sp, #12
 8004314:	4621      	mov	r1, r4
 8004316:	4640      	mov	r0, r8
 8004318:	f7ff fee2 	bl	80040e0 <_printf_common>
 800431c:	3001      	adds	r0, #1
 800431e:	d14c      	bne.n	80043ba <_printf_i+0x1fe>
 8004320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004324:	b004      	add	sp, #16
 8004326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432a:	4835      	ldr	r0, [pc, #212]	; (8004400 <_printf_i+0x244>)
 800432c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	680e      	ldr	r6, [r1, #0]
 8004334:	061f      	lsls	r7, r3, #24
 8004336:	f856 5b04 	ldr.w	r5, [r6], #4
 800433a:	600e      	str	r6, [r1, #0]
 800433c:	d514      	bpl.n	8004368 <_printf_i+0x1ac>
 800433e:	07d9      	lsls	r1, r3, #31
 8004340:	bf44      	itt	mi
 8004342:	f043 0320 	orrmi.w	r3, r3, #32
 8004346:	6023      	strmi	r3, [r4, #0]
 8004348:	b91d      	cbnz	r5, 8004352 <_printf_i+0x196>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	f023 0320 	bic.w	r3, r3, #32
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	2310      	movs	r3, #16
 8004354:	e7b0      	b.n	80042b8 <_printf_i+0xfc>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	f043 0320 	orr.w	r3, r3, #32
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	2378      	movs	r3, #120	; 0x78
 8004360:	4828      	ldr	r0, [pc, #160]	; (8004404 <_printf_i+0x248>)
 8004362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004366:	e7e3      	b.n	8004330 <_printf_i+0x174>
 8004368:	065e      	lsls	r6, r3, #25
 800436a:	bf48      	it	mi
 800436c:	b2ad      	uxthmi	r5, r5
 800436e:	e7e6      	b.n	800433e <_printf_i+0x182>
 8004370:	4616      	mov	r6, r2
 8004372:	e7bb      	b.n	80042ec <_printf_i+0x130>
 8004374:	680b      	ldr	r3, [r1, #0]
 8004376:	6826      	ldr	r6, [r4, #0]
 8004378:	6960      	ldr	r0, [r4, #20]
 800437a:	1d1d      	adds	r5, r3, #4
 800437c:	600d      	str	r5, [r1, #0]
 800437e:	0635      	lsls	r5, r6, #24
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	d501      	bpl.n	8004388 <_printf_i+0x1cc>
 8004384:	6018      	str	r0, [r3, #0]
 8004386:	e002      	b.n	800438e <_printf_i+0x1d2>
 8004388:	0671      	lsls	r1, r6, #25
 800438a:	d5fb      	bpl.n	8004384 <_printf_i+0x1c8>
 800438c:	8018      	strh	r0, [r3, #0]
 800438e:	2300      	movs	r3, #0
 8004390:	6123      	str	r3, [r4, #16]
 8004392:	4616      	mov	r6, r2
 8004394:	e7ba      	b.n	800430c <_printf_i+0x150>
 8004396:	680b      	ldr	r3, [r1, #0]
 8004398:	1d1a      	adds	r2, r3, #4
 800439a:	600a      	str	r2, [r1, #0]
 800439c:	681e      	ldr	r6, [r3, #0]
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	2100      	movs	r1, #0
 80043a2:	4630      	mov	r0, r6
 80043a4:	f7fb ff24 	bl	80001f0 <memchr>
 80043a8:	b108      	cbz	r0, 80043ae <_printf_i+0x1f2>
 80043aa:	1b80      	subs	r0, r0, r6
 80043ac:	6060      	str	r0, [r4, #4]
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	6123      	str	r3, [r4, #16]
 80043b2:	2300      	movs	r3, #0
 80043b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b8:	e7a8      	b.n	800430c <_printf_i+0x150>
 80043ba:	6923      	ldr	r3, [r4, #16]
 80043bc:	4632      	mov	r2, r6
 80043be:	4649      	mov	r1, r9
 80043c0:	4640      	mov	r0, r8
 80043c2:	47d0      	blx	sl
 80043c4:	3001      	adds	r0, #1
 80043c6:	d0ab      	beq.n	8004320 <_printf_i+0x164>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	079b      	lsls	r3, r3, #30
 80043cc:	d413      	bmi.n	80043f6 <_printf_i+0x23a>
 80043ce:	68e0      	ldr	r0, [r4, #12]
 80043d0:	9b03      	ldr	r3, [sp, #12]
 80043d2:	4298      	cmp	r0, r3
 80043d4:	bfb8      	it	lt
 80043d6:	4618      	movlt	r0, r3
 80043d8:	e7a4      	b.n	8004324 <_printf_i+0x168>
 80043da:	2301      	movs	r3, #1
 80043dc:	4632      	mov	r2, r6
 80043de:	4649      	mov	r1, r9
 80043e0:	4640      	mov	r0, r8
 80043e2:	47d0      	blx	sl
 80043e4:	3001      	adds	r0, #1
 80043e6:	d09b      	beq.n	8004320 <_printf_i+0x164>
 80043e8:	3501      	adds	r5, #1
 80043ea:	68e3      	ldr	r3, [r4, #12]
 80043ec:	9903      	ldr	r1, [sp, #12]
 80043ee:	1a5b      	subs	r3, r3, r1
 80043f0:	42ab      	cmp	r3, r5
 80043f2:	dcf2      	bgt.n	80043da <_printf_i+0x21e>
 80043f4:	e7eb      	b.n	80043ce <_printf_i+0x212>
 80043f6:	2500      	movs	r5, #0
 80043f8:	f104 0619 	add.w	r6, r4, #25
 80043fc:	e7f5      	b.n	80043ea <_printf_i+0x22e>
 80043fe:	bf00      	nop
 8004400:	08004a13 	.word	0x08004a13
 8004404:	08004a24 	.word	0x08004a24

08004408 <memmove>:
 8004408:	4288      	cmp	r0, r1
 800440a:	b510      	push	{r4, lr}
 800440c:	eb01 0402 	add.w	r4, r1, r2
 8004410:	d902      	bls.n	8004418 <memmove+0x10>
 8004412:	4284      	cmp	r4, r0
 8004414:	4623      	mov	r3, r4
 8004416:	d807      	bhi.n	8004428 <memmove+0x20>
 8004418:	1e43      	subs	r3, r0, #1
 800441a:	42a1      	cmp	r1, r4
 800441c:	d008      	beq.n	8004430 <memmove+0x28>
 800441e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004422:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004426:	e7f8      	b.n	800441a <memmove+0x12>
 8004428:	4402      	add	r2, r0
 800442a:	4601      	mov	r1, r0
 800442c:	428a      	cmp	r2, r1
 800442e:	d100      	bne.n	8004432 <memmove+0x2a>
 8004430:	bd10      	pop	{r4, pc}
 8004432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800443a:	e7f7      	b.n	800442c <memmove+0x24>

0800443c <_free_r>:
 800443c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800443e:	2900      	cmp	r1, #0
 8004440:	d048      	beq.n	80044d4 <_free_r+0x98>
 8004442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004446:	9001      	str	r0, [sp, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f1a1 0404 	sub.w	r4, r1, #4
 800444e:	bfb8      	it	lt
 8004450:	18e4      	addlt	r4, r4, r3
 8004452:	f000 f8d3 	bl	80045fc <__malloc_lock>
 8004456:	4a20      	ldr	r2, [pc, #128]	; (80044d8 <_free_r+0x9c>)
 8004458:	9801      	ldr	r0, [sp, #4]
 800445a:	6813      	ldr	r3, [r2, #0]
 800445c:	4615      	mov	r5, r2
 800445e:	b933      	cbnz	r3, 800446e <_free_r+0x32>
 8004460:	6063      	str	r3, [r4, #4]
 8004462:	6014      	str	r4, [r2, #0]
 8004464:	b003      	add	sp, #12
 8004466:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800446a:	f000 b8cd 	b.w	8004608 <__malloc_unlock>
 800446e:	42a3      	cmp	r3, r4
 8004470:	d90b      	bls.n	800448a <_free_r+0x4e>
 8004472:	6821      	ldr	r1, [r4, #0]
 8004474:	1862      	adds	r2, r4, r1
 8004476:	4293      	cmp	r3, r2
 8004478:	bf04      	itt	eq
 800447a:	681a      	ldreq	r2, [r3, #0]
 800447c:	685b      	ldreq	r3, [r3, #4]
 800447e:	6063      	str	r3, [r4, #4]
 8004480:	bf04      	itt	eq
 8004482:	1852      	addeq	r2, r2, r1
 8004484:	6022      	streq	r2, [r4, #0]
 8004486:	602c      	str	r4, [r5, #0]
 8004488:	e7ec      	b.n	8004464 <_free_r+0x28>
 800448a:	461a      	mov	r2, r3
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	b10b      	cbz	r3, 8004494 <_free_r+0x58>
 8004490:	42a3      	cmp	r3, r4
 8004492:	d9fa      	bls.n	800448a <_free_r+0x4e>
 8004494:	6811      	ldr	r1, [r2, #0]
 8004496:	1855      	adds	r5, r2, r1
 8004498:	42a5      	cmp	r5, r4
 800449a:	d10b      	bne.n	80044b4 <_free_r+0x78>
 800449c:	6824      	ldr	r4, [r4, #0]
 800449e:	4421      	add	r1, r4
 80044a0:	1854      	adds	r4, r2, r1
 80044a2:	42a3      	cmp	r3, r4
 80044a4:	6011      	str	r1, [r2, #0]
 80044a6:	d1dd      	bne.n	8004464 <_free_r+0x28>
 80044a8:	681c      	ldr	r4, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	6053      	str	r3, [r2, #4]
 80044ae:	4421      	add	r1, r4
 80044b0:	6011      	str	r1, [r2, #0]
 80044b2:	e7d7      	b.n	8004464 <_free_r+0x28>
 80044b4:	d902      	bls.n	80044bc <_free_r+0x80>
 80044b6:	230c      	movs	r3, #12
 80044b8:	6003      	str	r3, [r0, #0]
 80044ba:	e7d3      	b.n	8004464 <_free_r+0x28>
 80044bc:	6825      	ldr	r5, [r4, #0]
 80044be:	1961      	adds	r1, r4, r5
 80044c0:	428b      	cmp	r3, r1
 80044c2:	bf04      	itt	eq
 80044c4:	6819      	ldreq	r1, [r3, #0]
 80044c6:	685b      	ldreq	r3, [r3, #4]
 80044c8:	6063      	str	r3, [r4, #4]
 80044ca:	bf04      	itt	eq
 80044cc:	1949      	addeq	r1, r1, r5
 80044ce:	6021      	streq	r1, [r4, #0]
 80044d0:	6054      	str	r4, [r2, #4]
 80044d2:	e7c7      	b.n	8004464 <_free_r+0x28>
 80044d4:	b003      	add	sp, #12
 80044d6:	bd30      	pop	{r4, r5, pc}
 80044d8:	20012e14 	.word	0x20012e14

080044dc <_malloc_r>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	1ccd      	adds	r5, r1, #3
 80044e0:	f025 0503 	bic.w	r5, r5, #3
 80044e4:	3508      	adds	r5, #8
 80044e6:	2d0c      	cmp	r5, #12
 80044e8:	bf38      	it	cc
 80044ea:	250c      	movcc	r5, #12
 80044ec:	2d00      	cmp	r5, #0
 80044ee:	4606      	mov	r6, r0
 80044f0:	db01      	blt.n	80044f6 <_malloc_r+0x1a>
 80044f2:	42a9      	cmp	r1, r5
 80044f4:	d903      	bls.n	80044fe <_malloc_r+0x22>
 80044f6:	230c      	movs	r3, #12
 80044f8:	6033      	str	r3, [r6, #0]
 80044fa:	2000      	movs	r0, #0
 80044fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044fe:	f000 f87d 	bl	80045fc <__malloc_lock>
 8004502:	4921      	ldr	r1, [pc, #132]	; (8004588 <_malloc_r+0xac>)
 8004504:	680a      	ldr	r2, [r1, #0]
 8004506:	4614      	mov	r4, r2
 8004508:	b99c      	cbnz	r4, 8004532 <_malloc_r+0x56>
 800450a:	4f20      	ldr	r7, [pc, #128]	; (800458c <_malloc_r+0xb0>)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	b923      	cbnz	r3, 800451a <_malloc_r+0x3e>
 8004510:	4621      	mov	r1, r4
 8004512:	4630      	mov	r0, r6
 8004514:	f000 f862 	bl	80045dc <_sbrk_r>
 8004518:	6038      	str	r0, [r7, #0]
 800451a:	4629      	mov	r1, r5
 800451c:	4630      	mov	r0, r6
 800451e:	f000 f85d 	bl	80045dc <_sbrk_r>
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	d123      	bne.n	800456e <_malloc_r+0x92>
 8004526:	230c      	movs	r3, #12
 8004528:	6033      	str	r3, [r6, #0]
 800452a:	4630      	mov	r0, r6
 800452c:	f000 f86c 	bl	8004608 <__malloc_unlock>
 8004530:	e7e3      	b.n	80044fa <_malloc_r+0x1e>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	1b5b      	subs	r3, r3, r5
 8004536:	d417      	bmi.n	8004568 <_malloc_r+0x8c>
 8004538:	2b0b      	cmp	r3, #11
 800453a:	d903      	bls.n	8004544 <_malloc_r+0x68>
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	441c      	add	r4, r3
 8004540:	6025      	str	r5, [r4, #0]
 8004542:	e004      	b.n	800454e <_malloc_r+0x72>
 8004544:	6863      	ldr	r3, [r4, #4]
 8004546:	42a2      	cmp	r2, r4
 8004548:	bf0c      	ite	eq
 800454a:	600b      	streq	r3, [r1, #0]
 800454c:	6053      	strne	r3, [r2, #4]
 800454e:	4630      	mov	r0, r6
 8004550:	f000 f85a 	bl	8004608 <__malloc_unlock>
 8004554:	f104 000b 	add.w	r0, r4, #11
 8004558:	1d23      	adds	r3, r4, #4
 800455a:	f020 0007 	bic.w	r0, r0, #7
 800455e:	1ac2      	subs	r2, r0, r3
 8004560:	d0cc      	beq.n	80044fc <_malloc_r+0x20>
 8004562:	1a1b      	subs	r3, r3, r0
 8004564:	50a3      	str	r3, [r4, r2]
 8004566:	e7c9      	b.n	80044fc <_malloc_r+0x20>
 8004568:	4622      	mov	r2, r4
 800456a:	6864      	ldr	r4, [r4, #4]
 800456c:	e7cc      	b.n	8004508 <_malloc_r+0x2c>
 800456e:	1cc4      	adds	r4, r0, #3
 8004570:	f024 0403 	bic.w	r4, r4, #3
 8004574:	42a0      	cmp	r0, r4
 8004576:	d0e3      	beq.n	8004540 <_malloc_r+0x64>
 8004578:	1a21      	subs	r1, r4, r0
 800457a:	4630      	mov	r0, r6
 800457c:	f000 f82e 	bl	80045dc <_sbrk_r>
 8004580:	3001      	adds	r0, #1
 8004582:	d1dd      	bne.n	8004540 <_malloc_r+0x64>
 8004584:	e7cf      	b.n	8004526 <_malloc_r+0x4a>
 8004586:	bf00      	nop
 8004588:	20012e14 	.word	0x20012e14
 800458c:	20012e18 	.word	0x20012e18

08004590 <_realloc_r>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	4607      	mov	r7, r0
 8004594:	4614      	mov	r4, r2
 8004596:	460e      	mov	r6, r1
 8004598:	b921      	cbnz	r1, 80045a4 <_realloc_r+0x14>
 800459a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800459e:	4611      	mov	r1, r2
 80045a0:	f7ff bf9c 	b.w	80044dc <_malloc_r>
 80045a4:	b922      	cbnz	r2, 80045b0 <_realloc_r+0x20>
 80045a6:	f7ff ff49 	bl	800443c <_free_r>
 80045aa:	4625      	mov	r5, r4
 80045ac:	4628      	mov	r0, r5
 80045ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b0:	f000 f830 	bl	8004614 <_malloc_usable_size_r>
 80045b4:	42a0      	cmp	r0, r4
 80045b6:	d20f      	bcs.n	80045d8 <_realloc_r+0x48>
 80045b8:	4621      	mov	r1, r4
 80045ba:	4638      	mov	r0, r7
 80045bc:	f7ff ff8e 	bl	80044dc <_malloc_r>
 80045c0:	4605      	mov	r5, r0
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d0f2      	beq.n	80045ac <_realloc_r+0x1c>
 80045c6:	4631      	mov	r1, r6
 80045c8:	4622      	mov	r2, r4
 80045ca:	f7ff fbf7 	bl	8003dbc <memcpy>
 80045ce:	4631      	mov	r1, r6
 80045d0:	4638      	mov	r0, r7
 80045d2:	f7ff ff33 	bl	800443c <_free_r>
 80045d6:	e7e9      	b.n	80045ac <_realloc_r+0x1c>
 80045d8:	4635      	mov	r5, r6
 80045da:	e7e7      	b.n	80045ac <_realloc_r+0x1c>

080045dc <_sbrk_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	4d06      	ldr	r5, [pc, #24]	; (80045f8 <_sbrk_r+0x1c>)
 80045e0:	2300      	movs	r3, #0
 80045e2:	4604      	mov	r4, r0
 80045e4:	4608      	mov	r0, r1
 80045e6:	602b      	str	r3, [r5, #0]
 80045e8:	f7ff fb5e 	bl	8003ca8 <_sbrk>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <_sbrk_r+0x1a>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	b103      	cbz	r3, 80045f6 <_sbrk_r+0x1a>
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	2001305c 	.word	0x2001305c

080045fc <__malloc_lock>:
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <__malloc_lock+0x8>)
 80045fe:	f000 b811 	b.w	8004624 <__retarget_lock_acquire_recursive>
 8004602:	bf00      	nop
 8004604:	20013064 	.word	0x20013064

08004608 <__malloc_unlock>:
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <__malloc_unlock+0x8>)
 800460a:	f000 b80c 	b.w	8004626 <__retarget_lock_release_recursive>
 800460e:	bf00      	nop
 8004610:	20013064 	.word	0x20013064

08004614 <_malloc_usable_size_r>:
 8004614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004618:	1f18      	subs	r0, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	bfbc      	itt	lt
 800461e:	580b      	ldrlt	r3, [r1, r0]
 8004620:	18c0      	addlt	r0, r0, r3
 8004622:	4770      	bx	lr

08004624 <__retarget_lock_acquire_recursive>:
 8004624:	4770      	bx	lr

08004626 <__retarget_lock_release_recursive>:
 8004626:	4770      	bx	lr

08004628 <_init>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr

08004634 <_fini>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr
