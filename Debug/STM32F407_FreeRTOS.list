
STM32F407_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  0800b3a8  0800b3a8  0001b3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd24  0800bd24  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd24  0800bd24  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd24  0800bd24  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd24  0800bd24  0001bd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd28  0800bd28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800bd2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014734  2000020c  0800bf38  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014940  0800bf38  00024940  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bc3  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003775  00000000  00000000  00038dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0003c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  0003d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006012  00000000  00000000  0003e500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a44  00000000  00000000  00044512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001e80d  00000000  00000000  00055f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00074763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000547c  00000000  00000000  000747b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b390 	.word	0x0800b390

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000210 	.word	0x20000210
 80001ec:	0800b390 	.word	0x0800b390

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	200147e0 	.word	0x200147e0

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <ADE_Init>:
void ADE_SPI_Init();
void ZeroX_Init();
void SAG_Init();
void IRQ_Init();

void ADE_Init(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	ADE_SPI_Init();
 8000c6e:	f000 f85b 	bl	8000d28 <ADE_SPI_Init>
//	ZeroX_Init();
//	SAG_Init();
//	IRQ_Init();

	//Reset
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2109      	movs	r1, #9
 8000c76:	4811      	ldr	r0, [pc, #68]	; (8000cbc <ADE_Init+0x54>)
 8000c78:	f003 fd86 	bl	8004788 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	e002      	b.n	8000c88 <ADE_Init+0x20>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	ddf7      	ble.n	8000c82 <ADE_Init+0x1a>
	GPIO_WriteToOutputPin(PORT_RST, PIN_RST, 1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2109      	movs	r1, #9
 8000c96:	4809      	ldr	r0, [pc, #36]	; (8000cbc <ADE_Init+0x54>)
 8000c98:	f003 fd76 	bl	8004788 <GPIO_WriteToOutputPin>
	for(int i = 0; i < 50000; i++);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e002      	b.n	8000ca8 <ADE_Init+0x40>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	ddf7      	ble.n	8000ca2 <ADE_Init+0x3a>
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <ADE_ReadData>:

uint32_t ADE_ReadData(uint8_t address, uint32_t bytes_to_read) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
	uint32_t data = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
	uint8_t dummy_write = 0xff;
 8000cd0:	23ff      	movs	r3, #255	; 0xff
 8000cd2:	73fb      	strb	r3, [r7, #15]
	SPI_PeripheralControl(ADE_SPI_HOST, ENABLE); //SS pin pull to low
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4813      	ldr	r0, [pc, #76]	; (8000d24 <ADE_ReadData+0x64>)
 8000cd8:	f004 f9a8 	bl	800502c <SPI_PeripheralControl>
	SPI_Transfer(ADE_SPI_HOST, address);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4810      	ldr	r0, [pc, #64]	; (8000d24 <ADE_ReadData+0x64>)
 8000ce2:	f004 f978 	bl	8004fd6 <SPI_Transfer>
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	e00e      	b.n	8000d0a <ADE_ReadData+0x4a>
		data <<= 8;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	617b      	str	r3, [r7, #20]
		data |= SPI_Transfer(ADE_SPI_HOST, dummy_write);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <ADE_ReadData+0x64>)
 8000cf8:	f004 f96d 	bl	8004fd6 <SPI_Transfer>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < bytes_to_read; i++) {
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	3301      	adds	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3ec      	bcc.n	8000cec <ADE_ReadData+0x2c>
	}
	SPI_PeripheralControl(ADE_SPI_HOST, DISABLE); //SS pin pull to high
 8000d12:	2100      	movs	r1, #0
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <ADE_ReadData+0x64>)
 8000d16:	f004 f989 	bl	800502c <SPI_PeripheralControl>
	return data;
 8000d1a:	697b      	ldr	r3, [r7, #20]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40003800 	.word	0x40003800

08000d28 <ADE_SPI_Init>:
			mode &= ~(1 << bit_flag);
		ADE_WriteData(MODE, mode, 2);
	}
}

void ADE_SPI_Init() {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
	 * PB13 -> SPI2_SCLK
	 * PB12 --> SPI2_NSS
	 * ALT function mode : 5
	 */
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000d2e:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <ADE_SPI_Init+0xd8>)
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 13;
 8000d50:	230d      	movs	r3, #13
 8000d52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fb62 	bl	8004424 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 8000d60:	230f      	movs	r3, #15
 8000d62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fb5a 	bl	8004424 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000d70:	230e      	movs	r3, #14
 8000d72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 fb52 	bl	8004424 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 12;
 8000d80:	230c      	movs	r3, #12
 8000d82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&SPIPins);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fb4a 	bl	8004424 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = PORT_RST;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <ADE_SPI_Init+0xdc>)
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = PIN_RST;
 8000d94:	2309      	movs	r3, #9
 8000d96:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_Init(&SPIPins);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 fb3a 	bl	8004424 <GPIO_Init>

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = ADE_SPI_HOST;
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000db2:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000db4:	2301      	movs	r3, #1
 8000db6:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000db8:	2301      	movs	r3, #1
 8000dba:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;	// clock 1MHz
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;				// CPOL 0
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_HIGH;				// CPHA 1
 8000dc8:	2301      	movs	r3, #1
 8000dca:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 					// Hardware slave management enabled for NSS pin
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73bb      	strb	r3, [r7, #14]

	ADE_SPI_HOST->CR1 &= ~(1 << SPI_CR1_SPE);
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dda:	6013      	str	r3, [r2, #0]
	SPI_Init(&SPI2handle);
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4618      	mov	r0, r3
 8000de0:	f004 f89e 	bl	8004f20 <SPI_Init>
	ADE_SPI_HOST->CR1 |= (1 << SPI_CR1_SPE);
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dee:	6013      	str	r3, [r2, #0]

	SPI_SSOEConfig(ADE_SPI_HOST, ENABLE);
 8000df0:	2101      	movs	r1, #1
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <ADE_SPI_Init+0xe0>)
 8000df4:	f004 f936 	bl	8005064 <SPI_SSOEConfig>
}
 8000df8:	bf00      	nop
 8000dfa:	3730      	adds	r7, #48	; 0x30
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40020c00 	.word	0x40020c00
 8000e08:	40003800 	.word	0x40003800

08000e0c <ds1307_init>:
uint8_t bcd_to_binary(uint8_t value);
uint8_t binary_to_bcd(uint8_t value);

I2C_Handle_t g_ds1307I2cHandle;

void ds1307_init(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	ds1307_i2c_pin_config();
 8000e10:	f000 f8c4 	bl	8000f9c <ds1307_i2c_pin_config>
	ds1307_i2c_config();
 8000e14:	f000 f900 	bl	8001018 <ds1307_i2c_config>
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4802      	ldr	r0, [pc, #8]	; (8000e24 <ds1307_init+0x18>)
 8000e1c:	f003 fd5c 	bl	80048d8 <I2C_PeripheralControl>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40005c00 	.word	0x40005c00

08000e28 <ds1307_get_current_time>:
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
}

void ds1307_get_current_time(RTC_time_t *rtc_time) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f000 f907 	bl	8001044 <ds1307_read>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73bb      	strb	r3, [r7, #14]

	seconds &= ~( 1 << 7);
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e40:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000e42:	7bbb      	ldrb	r3, [r7, #14]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f91b 	bl	8001080 <bcd_to_binary>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000e52:	2001      	movs	r0, #1
 8000e54:	f000 f8f6 	bl	8001044 <ds1307_read>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f910 	bl	8001080 <bcd_to_binary>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f000 f8eb 	bl	8001044 <ds1307_read>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
	if(hrs & ( 1 << 6)) {
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00f      	beq.n	8000e9c <ds1307_get_current_time+0x74>
		//12 hr format
		rtc_time->time_format =  !((hrs & ( 1 << 5)) == 0) ;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	f003 0320 	and.w	r3, r3, #32
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bf14      	ite	ne
 8000e86:	2301      	movne	r3, #1
 8000e88:	2300      	moveq	r3, #0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);//Clear 6 and 5
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e002      	b.n	8000ea2 <ds1307_get_current_time+0x7a>
	} else {
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f8eb 	bl	8001080 <bcd_to_binary>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	709a      	strb	r2, [r3, #2]

	rtc_time->time_validity = true;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	711a      	strb	r2, [r3, #4]

	if(rtc_time->hours > 23 && rtc_time->time_format == TIME_FORMAT_24HRS)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	789b      	ldrb	r3, [r3, #2]
 8000ebc:	2b17      	cmp	r3, #23
 8000ebe:	d906      	bls.n	8000ece <ds1307_get_current_time+0xa6>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	78db      	ldrb	r3, [r3, #3]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d102      	bne.n	8000ece <ds1307_get_current_time+0xa6>
		rtc_time->time_validity = false;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	711a      	strb	r2, [r3, #4]
	if(rtc_time->hours > 12 && (rtc_time->time_format == TIME_FORMAT_12HRS_AM || rtc_time->time_format == TIME_FORMAT_12HRS_PM))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	789b      	ldrb	r3, [r3, #2]
 8000ed2:	2b0c      	cmp	r3, #12
 8000ed4:	d90a      	bls.n	8000eec <ds1307_get_current_time+0xc4>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	78db      	ldrb	r3, [r3, #3]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <ds1307_get_current_time+0xbe>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	78db      	ldrb	r3, [r3, #3]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d102      	bne.n	8000eec <ds1307_get_current_time+0xc4>
		rtc_time->time_validity = false;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	711a      	strb	r2, [r3, #4]
	if(rtc_time->minutes > 59)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	785b      	ldrb	r3, [r3, #1]
 8000ef0:	2b3b      	cmp	r3, #59	; 0x3b
 8000ef2:	d902      	bls.n	8000efa <ds1307_get_current_time+0xd2>
		rtc_time->time_validity = false;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	711a      	strb	r2, [r3, #4]
	if(rtc_time->seconds > 59)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b3b      	cmp	r3, #59	; 0x3b
 8000f00:	d902      	bls.n	8000f08 <ds1307_get_current_time+0xe0>
		rtc_time->time_validity = false;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	711a      	strb	r2, [r3, #4]
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f893 	bl	8001044 <ds1307_read>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f8ad 	bl	8001080 <bcd_to_binary>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f000 f888 	bl	8001044 <ds1307_read>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f8a2 	bl	8001080 <bcd_to_binary>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000f44:	2005      	movs	r0, #5
 8000f46:	f000 f87d 	bl	8001044 <ds1307_read>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f897 	bl	8001080 <bcd_to_binary>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000f5a:	2006      	movs	r0, #6
 8000f5c:	f000 f872 	bl	8001044 <ds1307_read>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f88c 	bl	8001080 <bcd_to_binary>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	709a      	strb	r2, [r3, #2]

	rtc_date->date_validity = true;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	711a      	strb	r2, [r3, #4]
	if(rtc_date->day == 131 || rtc_date->month == 131 || rtc_date->year == 131)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	78db      	ldrb	r3, [r3, #3]
 8000f7a:	2b83      	cmp	r3, #131	; 0x83
 8000f7c:	d007      	beq.n	8000f8e <ds1307_get_current_date+0x7e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	785b      	ldrb	r3, [r3, #1]
 8000f82:	2b83      	cmp	r3, #131	; 0x83
 8000f84:	d003      	beq.n	8000f8e <ds1307_get_current_date+0x7e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	789b      	ldrb	r3, [r3, #2]
 8000f8a:	2b83      	cmp	r3, #131	; 0x83
 8000f8c:	d102      	bne.n	8000f94 <ds1307_get_current_date+0x84>
		rtc_date->date_validity = false;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	711a      	strb	r2, [r3, #4]
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <ds1307_i2c_pin_config>:

void ds1307_i2c_pin_config(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f007 fb72 	bl	8008694 <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 fb6c 	bl	8008694 <memset>

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT_SDA;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <ds1307_i2c_pin_config+0x74>)
 8000fbe:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000fc8:	2309      	movs	r3, #9
 8000fca:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_sda);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 fa21 	bl	8004424 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT_SCL;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <ds1307_i2c_pin_config+0x78>)
 8000fe4:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000fea:	2302      	movs	r3, #2
 8000fec:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 8000ffe:	463b      	mov	r3, r7
 8001000:	4618      	mov	r0, r3
 8001002:	f003 fa0f 	bl	8004424 <GPIO_Init>

}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020800 	.word	0x40020800
 8001014:	40020000 	.word	0x40020000

08001018 <ds1307_i2c_config>:

void ds1307_i2c_config(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <ds1307_i2c_config+0x20>)
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <ds1307_i2c_config+0x24>)
 8001020:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <ds1307_i2c_config+0x20>)
 8001024:	2201      	movs	r2, #1
 8001026:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <ds1307_i2c_config+0x20>)
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <ds1307_i2c_config+0x28>)
 800102c:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 800102e:	4802      	ldr	r0, [pc, #8]	; (8001038 <ds1307_i2c_config+0x20>)
 8001030:	f003 fca6 	bl	8004980 <I2C_Init>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20014578 	.word	0x20014578
 800103c:	40005c00 	.word	0x40005c00
 8001040:	000186a0 	.word	0x000186a0

08001044 <ds1307_read>:
	I2C_MasterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
}



uint8_t ds1307_read(uint8_t reg_addr) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2cHandle, &reg_addr, 1, DS1307_I2C_ADDRESS, 0);
 800104e:	1df9      	adds	r1, r7, #7
 8001050:	2300      	movs	r3, #0
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2368      	movs	r3, #104	; 0x68
 8001056:	2201      	movs	r2, #1
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <ds1307_read+0x38>)
 800105a:	f003 fd57 	bl	8004b0c <I2C_MasterSendData>
    I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 800105e:	f107 010f 	add.w	r1, r7, #15
 8001062:	2300      	movs	r3, #0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2368      	movs	r3, #104	; 0x68
 8001068:	2201      	movs	r2, #1
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <ds1307_read+0x38>)
 800106c:	f003 fde9 	bl	8004c42 <I2C_MasterReceiveData>
    return data;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20014578 	.word	0x20014578

08001080 <bcd_to_binary>:
		bcd = (m << 4) | n ;
	}
	return bcd;
}

uint8_t bcd_to_binary(uint8_t value) {
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	b2db      	uxtb	r3, r3
 8001090:	461a      	mov	r2, r3
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4413      	add	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	7bbb      	ldrb	r3, [r7, #14]
 80010a6:	4413      	add	r3, r2
 80010a8:	b2db      	uxtb	r3, r3
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <KEYPAD_Init>:

/* Private variables */
KEYPAD_Type_t KEYPAD_INT_KeypadType;
static KEYPAD_Button_t KeypadStatus = KEYPAD_NOPRESSED;

void KEYPAD_Init(KEYPAD_Type_t type) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	KEYPAD_INT_KeypadType = type;
 80010c2:	4a32      	ldr	r2, [pc, #200]	; (800118c <KEYPAD_Init+0xd4>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	7013      	strb	r3, [r2, #0]
	GPIO_Handle_t GpioR_Out, GpioC_In;

	/* Rows are output */
	/* Row 1 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_1_PORT;
 80010c8:	4b31      	ldr	r3, [pc, #196]	; (8001190 <KEYPAD_Init+0xd8>)
 80010ca:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_1_PIN;
 80010cc:	230b      	movs	r3, #11
 80010ce:	763b      	strb	r3, [r7, #24]
	GpioR_Out.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010d0:	2301      	movs	r3, #1
 80010d2:	767b      	strb	r3, [r7, #25]
	GpioR_Out.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 80010d4:	2301      	movs	r3, #1
 80010d6:	76bb      	strb	r3, [r7, #26]
	GpioR_Out.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80010d8:	2300      	movs	r3, #0
 80010da:	773b      	strb	r3, [r7, #28]
	GpioR_Out.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80010dc:	2300      	movs	r3, #0
 80010de:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(&GpioR_Out);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 f99d 	bl	8004424 <GPIO_Init>

	/* Row 2 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_2_PORT;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <KEYPAD_Init+0xdc>)
 80010ec:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_2_PIN;
 80010ee:	2300      	movs	r3, #0
 80010f0:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 f994 	bl	8004424 <GPIO_Init>

	/* Row 3 */
	GpioR_Out.pGPIOx = KEYPAD_ROW_3_PORT;
 80010fc:	4b25      	ldr	r3, [pc, #148]	; (8001194 <KEYPAD_Init+0xdc>)
 80010fe:	617b      	str	r3, [r7, #20]
	GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_3_PIN;
 8001100:	2302      	movs	r3, #2
 8001102:	763b      	strb	r3, [r7, #24]
	GPIO_Init(&GpioR_Out);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4618      	mov	r0, r3
 800110a:	f003 f98b 	bl	8004424 <GPIO_Init>

	/* Row 4 */
	if (type == KEYPAD_Type_Large) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d108      	bne.n	8001126 <KEYPAD_Init+0x6e>
		GpioR_Out.pGPIOx = KEYPAD_ROW_4_PORT;
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <KEYPAD_Init+0xdc>)
 8001116:	617b      	str	r3, [r7, #20]
		GpioR_Out.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_ROW_4_PIN;
 8001118:	2304      	movs	r3, #4
 800111a:	763b      	strb	r3, [r7, #24]
		GPIO_Init(&GpioR_Out);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4618      	mov	r0, r3
 8001122:	f003 f97f 	bl	8004424 <GPIO_Init>
	}


	/* Columns are inputs */
	/* Column 1 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_1_PORT;
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <KEYPAD_Init+0xdc>)
 8001128:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_1_PIN;
 800112a:	2306      	movs	r3, #6
 800112c:	733b      	strb	r3, [r7, #12]
	GpioC_In.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800112e:	2300      	movs	r3, #0
 8001130:	737b      	strb	r3, [r7, #13]
	GpioC_In.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MEDIUM;
 8001132:	2301      	movs	r3, #1
 8001134:	73bb      	strb	r3, [r7, #14]
	GpioC_In.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001136:	2300      	movs	r3, #0
 8001138:	743b      	strb	r3, [r7, #16]
	GpioC_In.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(&GpioC_In);
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	4618      	mov	r0, r3
 8001144:	f003 f96e 	bl	8004424 <GPIO_Init>

	/* Column 2 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_2_PORT;
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <KEYPAD_Init+0xe0>)
 800114a:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_2_PIN;
 800114c:	2303      	movs	r3, #3
 800114e:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	4618      	mov	r0, r3
 8001156:	f003 f965 	bl	8004424 <GPIO_Init>

	/* Column 3 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_3_PORT;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <KEYPAD_Init+0xe0>)
 800115c:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_3_PIN;
 800115e:	2305      	movs	r3, #5
 8001160:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4618      	mov	r0, r3
 8001168:	f003 f95c 	bl	8004424 <GPIO_Init>

	/* Column 4 */
	GpioC_In.pGPIOx = KEYPAD_COLUMN_4_PORT;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <KEYPAD_Init+0xe0>)
 800116e:	60bb      	str	r3, [r7, #8]
	GpioC_In.GPIO_PinConfig.GPIO_PinNumber = KEYPAD_COLUMN_4_PIN;
 8001170:	2307      	movs	r3, #7
 8001172:	733b      	strb	r3, [r7, #12]
	GPIO_Init(&GpioC_In);
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	4618      	mov	r0, r3
 800117a:	f003 f953 	bl	8004424 <GPIO_Init>

	/* All rows high */
	KEYPAD_INT_SetRow(0);
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f818 	bl	80011b4 <KEYPAD_INT_SetRow>
}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200145a0 	.word	0x200145a0
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40020400 	.word	0x40020400

0800119c <KEYPAD_Read>:

KEYPAD_Button_t KEYPAD_Read(void) {
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	return KeypadStatus;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <KEYPAD_Read+0x14>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000010 	.word	0x20000010

080011b4 <KEYPAD_INT_SetRow>:

/* Private */
void KEYPAD_INT_SetRow(uint8_t row) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_ROW_1_HIGH;
 80011be:	2201      	movs	r2, #1
 80011c0:	210b      	movs	r1, #11
 80011c2:	481d      	ldr	r0, [pc, #116]	; (8001238 <KEYPAD_INT_SetRow+0x84>)
 80011c4:	f003 fae0 	bl	8004788 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_2_HIGH;
 80011c8:	2201      	movs	r2, #1
 80011ca:	2100      	movs	r1, #0
 80011cc:	481b      	ldr	r0, [pc, #108]	; (800123c <KEYPAD_INT_SetRow+0x88>)
 80011ce:	f003 fadb 	bl	8004788 <GPIO_WriteToOutputPin>
	KEYPAD_ROW_3_HIGH;
 80011d2:	2201      	movs	r2, #1
 80011d4:	2102      	movs	r1, #2
 80011d6:	4819      	ldr	r0, [pc, #100]	; (800123c <KEYPAD_INT_SetRow+0x88>)
 80011d8:	f003 fad6 	bl	8004788 <GPIO_WriteToOutputPin>
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large)
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <KEYPAD_INT_SetRow+0x8c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <KEYPAD_INT_SetRow+0x3a>
		KEYPAD_ROW_4_HIGH;
 80011e4:	2201      	movs	r2, #1
 80011e6:	2104      	movs	r1, #4
 80011e8:	4814      	ldr	r0, [pc, #80]	; (800123c <KEYPAD_INT_SetRow+0x88>)
 80011ea:	f003 facd 	bl	8004788 <GPIO_WriteToOutputPin>

	/* Set row low */
	if (row == 1)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d104      	bne.n	80011fe <KEYPAD_INT_SetRow+0x4a>
		KEYPAD_ROW_1_LOW;
 80011f4:	2200      	movs	r2, #0
 80011f6:	210b      	movs	r1, #11
 80011f8:	480f      	ldr	r0, [pc, #60]	; (8001238 <KEYPAD_INT_SetRow+0x84>)
 80011fa:	f003 fac5 	bl	8004788 <GPIO_WriteToOutputPin>
	if (row == 2)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d104      	bne.n	800120e <KEYPAD_INT_SetRow+0x5a>
		KEYPAD_ROW_2_LOW;
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <KEYPAD_INT_SetRow+0x88>)
 800120a:	f003 fabd 	bl	8004788 <GPIO_WriteToOutputPin>
	if (row == 3)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d104      	bne.n	800121e <KEYPAD_INT_SetRow+0x6a>
		KEYPAD_ROW_3_LOW;
 8001214:	2200      	movs	r2, #0
 8001216:	2102      	movs	r1, #2
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <KEYPAD_INT_SetRow+0x88>)
 800121a:	f003 fab5 	bl	8004788 <GPIO_WriteToOutputPin>
	if (row == 4)
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d104      	bne.n	800122e <KEYPAD_INT_SetRow+0x7a>
		KEYPAD_ROW_4_LOW;
 8001224:	2200      	movs	r2, #0
 8001226:	2104      	movs	r1, #4
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <KEYPAD_INT_SetRow+0x88>)
 800122a:	f003 faad 	bl	8004788 <GPIO_WriteToOutputPin>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	200145a0 	.word	0x200145a0

08001244 <KEYPAD_INT_CheckColumn>:

uint8_t KEYPAD_INT_CheckColumn(uint8_t row) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	/* Read columns */

	/* Scan column 1 */
	if (KEYPAD_COLUMN_1_CHECK) {
 800124e:	2106      	movs	r1, #6
 8001250:	481f      	ldr	r0, [pc, #124]	; (80012d0 <KEYPAD_INT_CheckColumn+0x8c>)
 8001252:	f003 fa83 	bl	800475c <GPIO_ReadFromInputPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <KEYPAD_INT_CheckColumn+0x24>
		return KEYPAD_INT_Buttons[row - 1][0];
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	3b01      	subs	r3, #1
 8001260:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <KEYPAD_INT_CheckColumn+0x90>)
 8001262:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001266:	e02e      	b.n	80012c6 <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 2 */
	if (KEYPAD_COLUMN_2_CHECK) {
 8001268:	2103      	movs	r1, #3
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <KEYPAD_INT_CheckColumn+0x94>)
 800126c:	f003 fa76 	bl	800475c <GPIO_ReadFromInputPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d106      	bne.n	8001284 <KEYPAD_INT_CheckColumn+0x40>
		return KEYPAD_INT_Buttons[row - 1][1];
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	3b01      	subs	r3, #1
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <KEYPAD_INT_CheckColumn+0x90>)
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	e020      	b.n	80012c6 <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 3 */
	if (KEYPAD_COLUMN_3_CHECK) {
 8001284:	2105      	movs	r1, #5
 8001286:	4814      	ldr	r0, [pc, #80]	; (80012d8 <KEYPAD_INT_CheckColumn+0x94>)
 8001288:	f003 fa68 	bl	800475c <GPIO_ReadFromInputPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d106      	bne.n	80012a0 <KEYPAD_INT_CheckColumn+0x5c>
		return KEYPAD_INT_Buttons[row - 1][2];
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	3b01      	subs	r3, #1
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <KEYPAD_INT_CheckColumn+0x90>)
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	789b      	ldrb	r3, [r3, #2]
 800129e:	e012      	b.n	80012c6 <KEYPAD_INT_CheckColumn+0x82>
	}
	/* Scan column 4 */
	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large && KEYPAD_COLUMN_4_CHECK) {
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <KEYPAD_INT_CheckColumn+0x98>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10d      	bne.n	80012c4 <KEYPAD_INT_CheckColumn+0x80>
 80012a8:	2107      	movs	r1, #7
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <KEYPAD_INT_CheckColumn+0x94>)
 80012ac:	f003 fa56 	bl	800475c <GPIO_ReadFromInputPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d106      	bne.n	80012c4 <KEYPAD_INT_CheckColumn+0x80>
		return KEYPAD_INT_Buttons[row - 1][3];
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <KEYPAD_INT_CheckColumn+0x90>)
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	78db      	ldrb	r3, [r3, #3]
 80012c2:	e000      	b.n	80012c6 <KEYPAD_INT_CheckColumn+0x82>
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 80012c4:	23ff      	movs	r3, #255	; 0xff
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	20000000 	.word	0x20000000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	200145a0 	.word	0x200145a0

080012e0 <KEYPAD_INT_Read>:

uint8_t KEYPAD_INT_Read(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
	uint8_t check;
	/* Set row 1 to LOW */
	KEYPAD_INT_SetRow(1);
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff ff64 	bl	80011b4 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(1);
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff ffa9 	bl	8001244 <KEYPAD_INT_CheckColumn>
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2bff      	cmp	r3, #255	; 0xff
 80012fa:	d001      	beq.n	8001300 <KEYPAD_INT_Read+0x20>
		return check;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	e02b      	b.n	8001358 <KEYPAD_INT_Read+0x78>
	}

	/* Set row 2 to LOW */
	KEYPAD_INT_SetRow(2);
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff ff57 	bl	80011b4 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(2);
 8001306:	2002      	movs	r0, #2
 8001308:	f7ff ff9c 	bl	8001244 <KEYPAD_INT_CheckColumn>
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2bff      	cmp	r3, #255	; 0xff
 8001314:	d001      	beq.n	800131a <KEYPAD_INT_Read+0x3a>
		return check;
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	e01e      	b.n	8001358 <KEYPAD_INT_Read+0x78>
	}

	/* Set row 3 to LOW */
	KEYPAD_INT_SetRow(3);
 800131a:	2003      	movs	r0, #3
 800131c:	f7ff ff4a 	bl	80011b4 <KEYPAD_INT_SetRow>
	/* Check columns */
	check = KEYPAD_INT_CheckColumn(3);
 8001320:	2003      	movs	r0, #3
 8001322:	f7ff ff8f 	bl	8001244 <KEYPAD_INT_CheckColumn>
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	if (check != KEYPAD_NOPRESSED) {
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2bff      	cmp	r3, #255	; 0xff
 800132e:	d001      	beq.n	8001334 <KEYPAD_INT_Read+0x54>
		return check;
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	e011      	b.n	8001358 <KEYPAD_INT_Read+0x78>
	}

	if (KEYPAD_INT_KeypadType == KEYPAD_Type_Large) {
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <KEYPAD_INT_Read+0x80>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10c      	bne.n	8001356 <KEYPAD_INT_Read+0x76>
		/* Set row 4 to LOW */
		KEYPAD_INT_SetRow(4);
 800133c:	2004      	movs	r0, #4
 800133e:	f7ff ff39 	bl	80011b4 <KEYPAD_INT_SetRow>
		/* Check columns */
		check = KEYPAD_INT_CheckColumn(4);
 8001342:	2004      	movs	r0, #4
 8001344:	f7ff ff7e 	bl	8001244 <KEYPAD_INT_CheckColumn>
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
		if (check != KEYPAD_NOPRESSED) {
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2bff      	cmp	r3, #255	; 0xff
 8001350:	d001      	beq.n	8001356 <KEYPAD_INT_Read+0x76>
			return check;
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	e000      	b.n	8001358 <KEYPAD_INT_Read+0x78>
		}
	}

	/* Not pressed */
	return KEYPAD_NOPRESSED;
 8001356:	23ff      	movs	r3, #255	; 0xff
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200145a0 	.word	0x200145a0

08001364 <KEYPAD_Hold_Button>:

KEYPAD_Button_t KEYPAD_Hold_Button(KEYPAD_Button_t button) {
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	return button | 0x80;
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001374:	b2db      	uxtb	r3, r3
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <KEYPAD_Update>:

void KEYPAD_Update(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	KeypadStatus = (KEYPAD_Button_t) KEYPAD_INT_Read();
 8001388:	f7ff ffaa 	bl	80012e0 <KEYPAD_INT_Read>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b01      	ldr	r3, [pc, #4]	; (8001398 <KEYPAD_Update+0x14>)
 8001392:	701a      	strb	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000010 	.word	0x20000010

0800139c <LCD5110_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void LCD5110_send(unsigned char data) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]

	SPI_PeripheralControl(LCD5110_SPI, ENABLE); //SS pin pull to LOW
 80013a6:	2101      	movs	r1, #1
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <LCD5110_send+0x40>)
 80013aa:	f003 fe3f 	bl	800502c <SPI_PeripheralControl>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2101      	movs	r1, #1
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <LCD5110_send+0x44>)
 80013b4:	f003 f9e8 	bl	8004788 <GPIO_WriteToOutputPin>
	SPI_Transfer(LCD5110_SPI, data);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <LCD5110_send+0x40>)
 80013be:	f003 fe0a 	bl	8004fd6 <SPI_Transfer>
	GPIO_WriteToOutputPin(LCD5110_CE_PORT, LCD5110_CE_PIN, 1);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2101      	movs	r1, #1
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <LCD5110_send+0x44>)
 80013c8:	f003 f9de 	bl	8004788 <GPIO_WriteToOutputPin>
	SPI_PeripheralControl(LCD5110_SPI, DISABLE); //SS pin pull to HIGH
 80013cc:	2100      	movs	r1, #0
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <LCD5110_send+0x40>)
 80013d0:	f003 fe2c 	bl	800502c <SPI_PeripheralControl>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40013000 	.word	0x40013000
 80013e0:	40020400 	.word	0x40020400

080013e4 <LCD5110_Pin>:

void LCD5110_Pin(LCD5110_Pin_t pin, LCD5110_State_t state) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d002      	beq.n	8001400 <LCD5110_Pin+0x1c>
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d00f      	beq.n	800141e <LCD5110_Pin+0x3a>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
			} else {
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
			}
			break;
		default: break;
 80013fe:	e01d      	b.n	800143c <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <LCD5110_Pin+0x2e>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 1);
 8001406:	2201      	movs	r2, #1
 8001408:	2105      	movs	r1, #5
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <LCD5110_Pin+0x60>)
 800140c:	f003 f9bc 	bl	8004788 <GPIO_WriteToOutputPin>
			break;
 8001410:	e014      	b.n	800143c <LCD5110_Pin+0x58>
				GPIO_WriteToOutputPin(LCD5110_DC_PORT, LCD5110_DC_PIN, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2105      	movs	r1, #5
 8001416:	480b      	ldr	r0, [pc, #44]	; (8001444 <LCD5110_Pin+0x60>)
 8001418:	f003 f9b6 	bl	8004788 <GPIO_WriteToOutputPin>
			break;
 800141c:	e00e      	b.n	800143c <LCD5110_Pin+0x58>
			if (state != LCD5110_State_Low) {
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <LCD5110_Pin+0x4c>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,1);
 8001424:	2201      	movs	r2, #1
 8001426:	2107      	movs	r1, #7
 8001428:	4807      	ldr	r0, [pc, #28]	; (8001448 <LCD5110_Pin+0x64>)
 800142a:	f003 f9ad 	bl	8004788 <GPIO_WriteToOutputPin>
			break;
 800142e:	e004      	b.n	800143a <LCD5110_Pin+0x56>
				GPIO_WriteToOutputPin(LCD5110_RST_PORT, LCD5110_RST_PIN,0);
 8001430:	2200      	movs	r2, #0
 8001432:	2107      	movs	r1, #7
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <LCD5110_Pin+0x64>)
 8001436:	f003 f9a7 	bl	8004788 <GPIO_WriteToOutputPin>
			break;
 800143a:	bf00      	nop
	}
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40020800 	.word	0x40020800
 8001448:	40021000 	.word	0x40021000

0800144c <LCD5110_Delay>:

void LCD5110_Delay(unsigned long micros) {
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	volatile unsigned long i;
	for (i = 0; i < micros; i++);
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e002      	b.n	8001460 <LCD5110_Delay+0x14>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3301      	adds	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f8      	bhi.n	800145a <LCD5110_Delay+0xe>
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <LCD5110_Init>:

void LCD5110_Init(unsigned char contrast) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	; 0x38
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 8001482:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <LCD5110_Init+0x138>)
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001486:	2302      	movs	r3, #2
 8001488:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800148c:	2305      	movs	r3, #5
 800148e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001492:	2300      	movs	r3, #0
 8001494:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800149e:	2302      	movs	r3, #2
 80014a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80014a4:	2305      	movs	r3, #5
 80014a6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80014aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 ffb8 	bl	8004424 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80014b4:	2307      	movs	r3, #7
 80014b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80014ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 ffb0 	bl	8004424 <GPIO_Init>

	//CE
	SPIPins.pGPIOx = LCD5110_CE_PORT;
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <LCD5110_Init+0x13c>)
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_CE_PIN;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80014ce:	2301      	movs	r3, #1
 80014d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GPIO_Init(&SPIPins);
 80014e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 ff9d 	bl	8004424 <GPIO_Init>

	//DC Pin GPIO
	SPIPins.pGPIOx = LCD5110_DC_PORT;
 80014ea:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <LCD5110_Init+0x140>)
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_DC_PIN;
 80014ee:	2305      	movs	r3, #5
 80014f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 80014f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 ff93 	bl	8004424 <GPIO_Init>

	//RESET Pin GPIO
	SPIPins.pGPIOx = LCD5110_RST_PORT;
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <LCD5110_Init+0x144>)
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = LCD5110_RST_PIN;
 8001502:	2307      	movs	r3, #7
 8001504:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_Init(&SPIPins);
 8001508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150c:	4618      	mov	r0, r3
 800150e:	f002 ff89 	bl	8004424 <GPIO_Init>

	SPI_Handle_t LCD_handle;
	LCD_handle.pSPIx = LCD5110_SPI;
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <LCD5110_Init+0x148>)
 8001514:	60fb      	str	r3, [r7, #12]
	LCD_handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;			//full duplex
 8001516:	2301      	movs	r3, #1
 8001518:	747b      	strb	r3, [r7, #17]
	LCD_handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;	//STM as master
 800151a:	2301      	movs	r3, #1
 800151c:	743b      	strb	r3, [r7, #16]
	LCD_handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;		// clock 2MHz
 800151e:	2302      	movs	r3, #2
 8001520:	74bb      	strb	r3, [r7, #18]
	LCD_handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;					// mỗi lần truyền 1 byte
 8001522:	2300      	movs	r3, #0
 8001524:	74fb      	strb	r3, [r7, #19]
	LCD_handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;					//CPOL 0
 8001526:	2300      	movs	r3, #0
 8001528:	753b      	strb	r3, [r7, #20]
	LCD_handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;					//CPHA 0
 800152a:	2300      	movs	r3, #0
 800152c:	757b      	strb	r3, [r7, #21]
	LCD_handle.SPIConfig.SPI_SSM = SPI_SSM_DI; 						//Hardware slave management enabled for NSS pin
 800152e:	2300      	movs	r3, #0
 8001530:	75bb      	strb	r3, [r7, #22]
	SPI_Init(&LCD_handle);
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fcf2 	bl	8004f20 <SPI_Init>
	SPI_SSOEConfig(LCD5110_SPI, ENABLE);
 800153c:	2101      	movs	r1, #1
 800153e:	4820      	ldr	r0, [pc, #128]	; (80015c0 <LCD5110_Init+0x148>)
 8001540:	f003 fd90 	bl	8005064 <SPI_SSOEConfig>

	//Reset
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_Low);
 8001544:	2100      	movs	r1, #0
 8001546:	2002      	movs	r0, #2
 8001548:	f7ff ff4c 	bl	80013e4 <LCD5110_Pin>
	LCD5110_Delay(10000);
 800154c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001550:	f7ff ff7c 	bl	800144c <LCD5110_Delay>
	LCD5110_Pin(LCD5110_Pin_RST, LCD5110_State_High);
 8001554:	2101      	movs	r1, #1
 8001556:	2002      	movs	r0, #2
 8001558:	f7ff ff44 	bl	80013e4 <LCD5110_Pin>

	// Go in extended mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET | LCD5110_EXTENDEDINSTRUCTION);
 800155c:	2121      	movs	r1, #33	; 0x21
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f830 	bl	80015c4 <LCD5110_Write>

	// LCD bias select
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETBIAS | 0x4);
 8001564:	2114      	movs	r1, #20
 8001566:	2000      	movs	r0, #0
 8001568:	f000 f82c 	bl	80015c4 <LCD5110_Write>

	// set VOP
	if (contrast > 0x7F) {
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	da01      	bge.n	8001578 <LCD5110_Init+0x100>
		contrast = 0x7F;
 8001574:	237f      	movs	r3, #127	; 0x7f
 8001576:	71fb      	strb	r3, [r7, #7]
	}
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETVOP | contrast);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4619      	mov	r1, r3
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f81e 	bl	80015c4 <LCD5110_Write>

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
 8001588:	2120      	movs	r1, #32
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f81a 	bl	80015c4 <LCD5110_Write>

	// Set display to Normal
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 8001590:	210c      	movs	r1, #12
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f816 	bl	80015c4 <LCD5110_Write>

	//Set cursor to home position
	LCD5110_Home();
 8001598:	f000 f8b8 	bl	800170c <LCD5110_Home>

	//Normal display
	LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
 800159c:	210c      	movs	r1, #12
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f810 	bl	80015c4 <LCD5110_Write>

	//Clear display
	LCD5110_Clear();
 80015a4:	f000 f88c 	bl	80016c0 <LCD5110_Clear>
}
 80015a8:	bf00      	nop
 80015aa:	3738      	adds	r7, #56	; 0x38
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40013000 	.word	0x40013000

080015c4 <LCD5110_Write>:

void LCD5110_Write(LCD5110_WriteType_t cd, unsigned char data) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <LCD5110_Write+0x24>
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d109      	bne.n	80015f2 <LCD5110_Write+0x2e>
		//Send data to lcd's ram
		case LCD5110_DATA:
			//Set DC pin HIGH
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_High);
 80015de:	2101      	movs	r1, #1
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff feff 	bl	80013e4 <LCD5110_Pin>
			break;
 80015e6:	e005      	b.n	80015f4 <LCD5110_Write+0x30>
		//Send command to lcd
		case LCD5110_COMMAND:
			//Set DC pin LOW
			LCD5110_Pin(LCD5110_Pin_DC, LCD5110_State_Low);
 80015e8:	2100      	movs	r1, #0
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fefa 	bl	80013e4 <LCD5110_Pin>
			break;
 80015f0:	e000      	b.n	80015f4 <LCD5110_Write+0x30>
		default: break;
 80015f2:	bf00      	nop
	}
	//Send data
	LCD5110_send(data);
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fed0 	bl	800139c <LCD5110_send>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <LCD5110_DrawPixel>:

	// normal mode
	LCD5110_Write(LCD5110_COMMAND, LCD5110_FUNCTIONSET);
}

void LCD5110_DrawPixel(unsigned char x, unsigned char y, LCD5110_Pixel_t pixel) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	460b      	mov	r3, r1
 8001610:	71bb      	strb	r3, [r7, #6]
 8001612:	4613      	mov	r3, r2
 8001614:	717b      	strb	r3, [r7, #5]
	if (x >= LCD5110_WIDTH) {
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2b53      	cmp	r3, #83	; 0x53
 800161a:	d849      	bhi.n	80016b0 <LCD5110_DrawPixel+0xac>
		return;
	}
	if (y >= LCD5110_HEIGHT) {
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	2b2f      	cmp	r3, #47	; 0x2f
 8001620:	d848      	bhi.n	80016b4 <LCD5110_DrawPixel+0xb0>
		return;
	}

	if (pixel != LCD5110_Pixel_Clear) {
 8001622:	797b      	ldrb	r3, [r7, #5]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01d      	beq.n	8001664 <LCD5110_DrawPixel+0x60>
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] |= 1 << (y % 8);
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	08db      	lsrs	r3, r3, #3
 800162e:	b2d8      	uxtb	r0, r3
 8001630:	4601      	mov	r1, r0
 8001632:	2354      	movs	r3, #84	; 0x54
 8001634:	fb03 f301 	mul.w	r3, r3, r1
 8001638:	4413      	add	r3, r2
 800163a:	4a20      	ldr	r2, [pc, #128]	; (80016bc <LCD5110_DrawPixel+0xb8>)
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	b25a      	sxtb	r2, r3
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	b25b      	sxtb	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b259      	sxtb	r1, r3
 8001652:	79fa      	ldrb	r2, [r7, #7]
 8001654:	2354      	movs	r3, #84	; 0x54
 8001656:	fb03 f300 	mul.w	r3, r3, r0
 800165a:	4413      	add	r3, r2
 800165c:	b2c9      	uxtb	r1, r1
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <LCD5110_DrawPixel+0xb8>)
 8001660:	54d1      	strb	r1, [r2, r3]
 8001662:	e01e      	b.n	80016a2 <LCD5110_DrawPixel+0x9e>
	} else {
		LCD5110_Buffer[x + (y / 8) * LCD5110_WIDTH] &= ~(1 << (y % 8));
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	08db      	lsrs	r3, r3, #3
 800166a:	b2d8      	uxtb	r0, r3
 800166c:	4601      	mov	r1, r0
 800166e:	2354      	movs	r3, #84	; 0x54
 8001670:	fb03 f301 	mul.w	r3, r3, r1
 8001674:	4413      	add	r3, r2
 8001676:	4a11      	ldr	r2, [pc, #68]	; (80016bc <LCD5110_DrawPixel+0xb8>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	b25a      	sxtb	r2, r3
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	2101      	movs	r1, #1
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	b25b      	sxtb	r3, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4013      	ands	r3, r2
 8001690:	b259      	sxtb	r1, r3
 8001692:	79fa      	ldrb	r2, [r7, #7]
 8001694:	2354      	movs	r3, #84	; 0x54
 8001696:	fb03 f300 	mul.w	r3, r3, r0
 800169a:	4413      	add	r3, r2
 800169c:	b2c9      	uxtb	r1, r1
 800169e:	4a07      	ldr	r2, [pc, #28]	; (80016bc <LCD5110_DrawPixel+0xb8>)
 80016a0:	54d1      	strb	r1, [r2, r3]
	}
	LCD5110_UpdateArea(x, y, x, y);
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	79b9      	ldrb	r1, [r7, #6]
 80016a8:	79f8      	ldrb	r0, [r7, #7]
 80016aa:	f000 f89d 	bl	80017e8 <LCD5110_UpdateArea>
 80016ae:	e002      	b.n	80016b6 <LCD5110_DrawPixel+0xb2>
		return;
 80016b0:	bf00      	nop
 80016b2:	e000      	b.n	80016b6 <LCD5110_DrawPixel+0xb2>
		return;
 80016b4:	bf00      	nop
}
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200145a8 	.word	0x200145a8

080016c0 <LCD5110_Clear>:
	} else {
		LCD5110_Write(LCD5110_COMMAND, LCD5110_DISPLAYCONTROL | LCD5110_DISPLAYNORMAL);
	}
}

void LCD5110_Clear(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
	unsigned int i;
	LCD5110_Home();
 80016c6:	f000 f821 	bl	800170c <LCD5110_Home>
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	e007      	b.n	80016e0 <LCD5110_Clear+0x20>
		LCD5110_Buffer[i] = 0x00;
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <LCD5110_Clear+0x48>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < LCD5110_BUFFER_SIZE; i++) {
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3301      	adds	r3, #1
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80016e6:	d3f3      	bcc.n	80016d0 <LCD5110_Clear+0x10>
		//LCD5110_Write(LCD5110_DATA, 0x00);
	}
	LCD5110_GotoXY(0, 0);
 80016e8:	2100      	movs	r1, #0
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f8b8 	bl	8001860 <LCD5110_GotoXY>
	LCD5110_UpdateArea(0, 0, LCD5110_WIDTH - 1, LCD5110_HEIGHT - 1);
 80016f0:	232f      	movs	r3, #47	; 0x2f
 80016f2:	2253      	movs	r2, #83	; 0x53
 80016f4:	2100      	movs	r1, #0
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 f876 	bl	80017e8 <LCD5110_UpdateArea>
	LCD5110_Refresh();
 80016fc:	f000 f812 	bl	8001724 <LCD5110_Refresh>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200145a8 	.word	0x200145a8

0800170c <LCD5110_Home>:

void LCD5110_Home(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | 0);
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff ff56 	bl	80015c4 <LCD5110_Write>
	LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | 0);
 8001718:	2140      	movs	r1, #64	; 0x40
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ff52 	bl	80015c4 <LCD5110_Write>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <LCD5110_Refresh>:

void LCD5110_Refresh(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 800172a:	2300      	movs	r3, #0
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e03b      	b.n	80017a8 <LCD5110_Refresh+0x84>
		//Not in range yet
		if (LCD5110_UpdateYmin > ((i + 1) * 8)) {
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <LCD5110_Refresh+0xb0>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	3301      	adds	r3, #1
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	429a      	cmp	r2, r3
 800173e:	dc2f      	bgt.n	80017a0 <LCD5110_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > LCD5110_UpdateYmax) {
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <LCD5110_Refresh+0xb4>)
 8001746:	7812      	ldrb	r2, [r2, #0]
 8001748:	4293      	cmp	r3, r2
 800174a:	dc31      	bgt.n	80017b0 <LCD5110_Refresh+0x8c>
			break;
		}

		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETYADDR | i);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001752:	b2db      	uxtb	r3, r3
 8001754:	4619      	mov	r1, r3
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff ff34 	bl	80015c4 <LCD5110_Write>
		LCD5110_Write(LCD5110_COMMAND, LCD5110_SETXADDR | LCD5110_UpdateXmin);
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <LCD5110_Refresh+0xb8>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff ff2b 	bl	80015c4 <LCD5110_Write>

		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <LCD5110_Refresh+0xb8>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	71bb      	strb	r3, [r7, #6]
 8001774:	e00e      	b.n	8001794 <LCD5110_Refresh+0x70>
			LCD5110_Write(LCD5110_DATA, LCD5110_Buffer[(i * LCD5110_WIDTH) + j]);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2254      	movs	r2, #84	; 0x54
 800177a:	fb02 f203 	mul.w	r2, r2, r3
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	4413      	add	r3, r2
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <LCD5110_Refresh+0xbc>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	4619      	mov	r1, r3
 8001788:	2001      	movs	r0, #1
 800178a:	f7ff ff1b 	bl	80015c4 <LCD5110_Write>
		for (j = LCD5110_UpdateXmin; j <= LCD5110_UpdateXmax; j++) {
 800178e:	79bb      	ldrb	r3, [r7, #6]
 8001790:	3301      	adds	r3, #1
 8001792:	71bb      	strb	r3, [r7, #6]
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <LCD5110_Refresh+0xc0>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	79ba      	ldrb	r2, [r7, #6]
 800179a:	429a      	cmp	r2, r3
 800179c:	d9eb      	bls.n	8001776 <LCD5110_Refresh+0x52>
 800179e:	e000      	b.n	80017a2 <LCD5110_Refresh+0x7e>
			continue;
 80017a0:	bf00      	nop
	for (i = 0; i < 6; i++) {
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	3301      	adds	r3, #1
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d9c0      	bls.n	8001730 <LCD5110_Refresh+0xc>
 80017ae:	e000      	b.n	80017b2 <LCD5110_Refresh+0x8e>
			break;
 80017b0:	bf00      	nop
		}
	}

	LCD5110_UpdateXmin = LCD5110_WIDTH - 1;
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <LCD5110_Refresh+0xb8>)
 80017b4:	2253      	movs	r2, #83	; 0x53
 80017b6:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateXmax = 0;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <LCD5110_Refresh+0xc0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmin = LCD5110_HEIGHT - 1;
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <LCD5110_Refresh+0xb0>)
 80017c0:	222f      	movs	r2, #47	; 0x2f
 80017c2:	701a      	strb	r2, [r3, #0]
	LCD5110_UpdateYmax = 0;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <LCD5110_Refresh+0xb4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000022a 	.word	0x2000022a
 80017d8:	2000022b 	.word	0x2000022b
 80017dc:	20000228 	.word	0x20000228
 80017e0:	200145a8 	.word	0x200145a8
 80017e4:	20000229 	.word	0x20000229

080017e8 <LCD5110_UpdateArea>:

void LCD5110_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 80017e8:	b490      	push	{r4, r7}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4604      	mov	r4, r0
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4623      	mov	r3, r4
 80017f8:	71fb      	strb	r3, [r7, #7]
 80017fa:	4603      	mov	r3, r0
 80017fc:	71bb      	strb	r3, [r7, #6]
 80017fe:	460b      	mov	r3, r1
 8001800:	717b      	strb	r3, [r7, #5]
 8001802:	4613      	mov	r3, r2
 8001804:	713b      	strb	r3, [r7, #4]
	if (xMin < LCD5110_UpdateXmin) {
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <LCD5110_UpdateArea+0x68>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	429a      	cmp	r2, r3
 800180e:	d202      	bcs.n	8001816 <LCD5110_UpdateArea+0x2e>
		LCD5110_UpdateXmin = xMin;
 8001810:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <LCD5110_UpdateArea+0x68>)
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > LCD5110_UpdateXmax) {
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <LCD5110_UpdateArea+0x6c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	797a      	ldrb	r2, [r7, #5]
 800181c:	429a      	cmp	r2, r3
 800181e:	d902      	bls.n	8001826 <LCD5110_UpdateArea+0x3e>
		LCD5110_UpdateXmax = xMax;
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <LCD5110_UpdateArea+0x6c>)
 8001822:	797b      	ldrb	r3, [r7, #5]
 8001824:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < LCD5110_UpdateYmin) {
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <LCD5110_UpdateArea+0x70>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	79ba      	ldrb	r2, [r7, #6]
 800182c:	429a      	cmp	r2, r3
 800182e:	d202      	bcs.n	8001836 <LCD5110_UpdateArea+0x4e>
		LCD5110_UpdateYmin = yMin;
 8001830:	4a09      	ldr	r2, [pc, #36]	; (8001858 <LCD5110_UpdateArea+0x70>)
 8001832:	79bb      	ldrb	r3, [r7, #6]
 8001834:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > LCD5110_UpdateYmax) {
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <LCD5110_UpdateArea+0x74>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	793a      	ldrb	r2, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d902      	bls.n	8001846 <LCD5110_UpdateArea+0x5e>
		LCD5110_UpdateYmax = yMax;
 8001840:	4a06      	ldr	r2, [pc, #24]	; (800185c <LCD5110_UpdateArea+0x74>)
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	7013      	strb	r3, [r2, #0]
	}
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bc90      	pop	{r4, r7}
 800184e:	4770      	bx	lr
 8001850:	20000228 	.word	0x20000228
 8001854:	20000229 	.word	0x20000229
 8001858:	2000022a 	.word	0x2000022a
 800185c:	2000022b 	.word	0x2000022b

08001860 <LCD5110_GotoXY>:

void LCD5110_GotoXY(unsigned char x, unsigned char y) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	71bb      	strb	r3, [r7, #6]
	LCD5110_x = x;
 8001870:	4a05      	ldr	r2, [pc, #20]	; (8001888 <LCD5110_GotoXY+0x28>)
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	7013      	strb	r3, [r2, #0]
	LCD5110_y = y;
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <LCD5110_GotoXY+0x2c>)
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	7013      	strb	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	200145a4 	.word	0x200145a4
 800188c:	200145a5 	.word	0x200145a5

08001890 <LCD5110_Putc>:

void LCD5110_Putc(char c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	460b      	mov	r3, r1
 800189c:	71bb      	strb	r3, [r7, #6]
 800189e:	4613      	mov	r3, r2
 80018a0:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == LCD5110_FontSize_3x5) {
 80018a2:	797b      	ldrb	r3, [r7, #5]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d104      	bne.n	80018b2 <LCD5110_Putc+0x22>
		c_width = LCD5110_CHAR3x5_WIDTH;
 80018a8:	2304      	movs	r3, #4
 80018aa:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR3x5_HEIGHT;
 80018ac:	2306      	movs	r3, #6
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e003      	b.n	80018ba <LCD5110_Putc+0x2a>
	} else {
		c_width = LCD5110_CHAR5x7_WIDTH;
 80018b2:	2306      	movs	r3, #6
 80018b4:	73bb      	strb	r3, [r7, #14]
		c_height = LCD5110_CHAR5x7_HEIGHT;
 80018b6:	2308      	movs	r3, #8
 80018b8:	73fb      	strb	r3, [r7, #15]
	}
	if ((LCD5110_x + c_width) > LCD5110_WIDTH) {
 80018ba:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <LCD5110_Putc+0x144>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	7bbb      	ldrb	r3, [r7, #14]
 80018c2:	4413      	add	r3, r2
 80018c4:	2b54      	cmp	r3, #84	; 0x54
 80018c6:	dd09      	ble.n	80018dc <LCD5110_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		LCD5110_y += c_height;
 80018c8:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <LCD5110_Putc+0x148>)
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	4413      	add	r3, r2
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <LCD5110_Putc+0x148>)
 80018d4:	701a      	strb	r2, [r3, #0]
		LCD5110_x = 0;
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <LCD5110_Putc+0x144>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 80018dc:	2300      	movs	r3, #0
 80018de:	737b      	strb	r3, [r7, #13]
 80018e0:	e068      	b.n	80019b4 <LCD5110_Putc+0x124>
		if (c < 32) {
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b1f      	cmp	r3, #31
 80018e6:	d91c      	bls.n	8001922 <LCD5110_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == LCD5110_FontSize_3x5) {
 80018e8:	797b      	ldrb	r3, [r7, #5]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10c      	bne.n	8001908 <LCD5110_Putc+0x78>
			b = LCD5110_Font3x5[c - 32][i];
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f1a3 0220 	sub.w	r2, r3, #32
 80018f4:	7b79      	ldrb	r1, [r7, #13]
 80018f6:	4839      	ldr	r0, [pc, #228]	; (80019dc <LCD5110_Putc+0x14c>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	4403      	add	r3, r0
 8001900:	440b      	add	r3, r1
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	733b      	strb	r3, [r7, #12]
 8001906:	e00c      	b.n	8001922 <LCD5110_Putc+0x92>
		} else {
			b = LCD5110_Font5x7[c - 32][i];
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f1a3 0220 	sub.w	r2, r3, #32
 800190e:	7b79      	ldrb	r1, [r7, #13]
 8001910:	4833      	ldr	r0, [pc, #204]	; (80019e0 <LCD5110_Putc+0x150>)
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4403      	add	r3, r0
 800191c:	440b      	add	r3, r1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8001922:	7b3b      	ldrb	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <LCD5110_Putc+0xa4>
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <LCD5110_Putc+0xa4>
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b20      	cmp	r3, #32
 8001932:	d13b      	bne.n	80019ac <LCD5110_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8001934:	2300      	movs	r3, #0
 8001936:	72fb      	strb	r3, [r7, #11]
 8001938:	e02d      	b.n	8001996 <LCD5110_Putc+0x106>
			if (color == LCD5110_Pixel_Set) {
 800193a:	79bb      	ldrb	r3, [r7, #6]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d112      	bne.n	8001966 <LCD5110_Putc+0xd6>
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Set : LCD5110_Pixel_Clear);
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <LCD5110_Putc+0x144>)
 8001942:	7818      	ldrb	r0, [r3, #0]
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <LCD5110_Putc+0x148>)
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	4413      	add	r3, r2
 800194c:	b2d9      	uxtb	r1, r3
 800194e:	7b3a      	ldrb	r2, [r7, #12]
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	fa42 f303 	asr.w	r3, r2, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	f7ff fe50 	bl	8001604 <LCD5110_DrawPixel>
 8001964:	e014      	b.n	8001990 <LCD5110_Putc+0x100>
			} else {
				LCD5110_DrawPixel(LCD5110_x, (LCD5110_y + j), ((b >> j) & 1) ? LCD5110_Pixel_Clear : LCD5110_Pixel_Set);
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <LCD5110_Putc+0x144>)
 8001968:	7818      	ldrb	r0, [r3, #0]
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <LCD5110_Putc+0x148>)
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	4413      	add	r3, r2
 8001972:	b2d9      	uxtb	r1, r3
 8001974:	7b3a      	ldrb	r2, [r7, #12]
 8001976:	7afb      	ldrb	r3, [r7, #11]
 8001978:	fa42 f303 	asr.w	r3, r2, r3
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	f7ff fe3a 	bl	8001604 <LCD5110_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8001990:	7afb      	ldrb	r3, [r7, #11]
 8001992:	3301      	adds	r3, #1
 8001994:	72fb      	strb	r3, [r7, #11]
 8001996:	7afa      	ldrb	r2, [r7, #11]
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	429a      	cmp	r2, r3
 800199c:	d3cd      	bcc.n	800193a <LCD5110_Putc+0xaa>
			}
		}
		LCD5110_x++;
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <LCD5110_Putc+0x144>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <LCD5110_Putc+0x144>)
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e000      	b.n	80019ae <LCD5110_Putc+0x11e>
			continue;
 80019ac:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 80019ae:	7b7b      	ldrb	r3, [r7, #13]
 80019b0:	3301      	adds	r3, #1
 80019b2:	737b      	strb	r3, [r7, #13]
 80019b4:	7b7a      	ldrb	r2, [r7, #13]
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	429a      	cmp	r2, r3
 80019bc:	db91      	blt.n	80018e2 <LCD5110_Putc+0x52>
	}
	LCD5110_x++;
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <LCD5110_Putc+0x144>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <LCD5110_Putc+0x144>)
 80019c8:	701a      	strb	r2, [r3, #0]
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200145a4 	.word	0x200145a4
 80019d8:	200145a5 	.word	0x200145a5
 80019dc:	0800b7e8 	.word	0x0800b7e8
 80019e0:	0800b5a0 	.word	0x0800b5a0

080019e4 <LCD5110_Puts>:

void LCD5110_Puts(char *c, LCD5110_Pixel_t color, LCD5110_FontSize_t size) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
 80019f0:	4613      	mov	r3, r2
 80019f2:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 80019f4:	e008      	b.n	8001a08 <LCD5110_Puts+0x24>
		LCD5110_Putc(*c++, color, size);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	78ba      	ldrb	r2, [r7, #2]
 8001a00:	78f9      	ldrb	r1, [r7, #3]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff44 	bl	8001890 <LCD5110_Putc>
	while (*c) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f2      	bne.n	80019f6 <LCD5110_Puts+0x12>
	}
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f103 0208 	add.w	r2, r3, #8
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a32:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f103 0208 	add.w	r2, r3, #8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f103 0208 	add.w	r2, r3, #8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	601a      	str	r2, [r3, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ad2:	d103      	bne.n	8001adc <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e00c      	b.n	8001af6 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3308      	adds	r3, #8
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e002      	b.n	8001aea <vListInsert+0x2e>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d2f6      	bcs.n	8001ae4 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	601a      	str	r2, [r3, #0]
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6892      	ldr	r2, [r2, #8]
 8001b44:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6852      	ldr	r2, [r2, #4]
 8001b4e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d103      	bne.n	8001b62 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10a      	bne.n	8001bae <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9c:	f383 8811 	msr	BASEPRI, r3
 8001ba0:	f3bf 8f6f 	isb	sy
 8001ba4:	f3bf 8f4f 	dsb	sy
 8001ba8:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001baa:	bf00      	nop
 8001bac:	e7fe      	b.n	8001bac <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001bae:	f002 f88b 	bl	8003cc8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bba:	68f9      	ldr	r1, [r7, #12]
 8001bbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	441a      	add	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bde:	3b01      	subs	r3, #1
 8001be0:	68f9      	ldr	r1, [r7, #12]
 8001be2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	441a      	add	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	22ff      	movs	r2, #255	; 0xff
 8001bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	22ff      	movs	r2, #255	; 0xff
 8001bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d114      	bne.n	8001c2e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01a      	beq.n	8001c42 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3310      	adds	r3, #16
 8001c10:	4618      	mov	r0, r3
 8001c12:	f001 f95f 	bl	8002ed4 <xTaskRemoveFromEventList>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d012      	beq.n	8001c42 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <xQueueGenericReset+0xcc>)
 8001c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	f3bf 8f6f 	isb	sy
 8001c2c:	e009      	b.n	8001c42 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3310      	adds	r3, #16
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fef1 	bl	8001a1a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3324      	adds	r3, #36	; 0x24
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff feec 	bl	8001a1a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001c42:	f002 f871 	bl	8003d28 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	e000ed04 	.word	0xe000ed04

08001c54 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10a      	bne.n	8001c7e <xQueueGenericCreate+0x2a>
        __asm volatile
 8001c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	61bb      	str	r3, [r7, #24]
    }
 8001c7a:	bf00      	nop
 8001c7c:	e7fe      	b.n	8001c7c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <xQueueGenericCreate+0x48>
 8001c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d101      	bne.n	8001ca0 <xQueueGenericCreate+0x4c>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <xQueueGenericCreate+0x4e>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10a      	bne.n	8001cbc <xQueueGenericCreate+0x68>
        __asm volatile
 8001ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001caa:	f383 8811 	msr	BASEPRI, r3
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	617b      	str	r3, [r7, #20]
    }
 8001cb8:	bf00      	nop
 8001cba:	e7fe      	b.n	8001cba <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001cc2:	d90a      	bls.n	8001cda <xQueueGenericCreate+0x86>
        __asm volatile
 8001cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc8:	f383 8811 	msr	BASEPRI, r3
 8001ccc:	f3bf 8f6f 	isb	sy
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	613b      	str	r3, [r7, #16]
    }
 8001cd6:	bf00      	nop
 8001cd8:	e7fe      	b.n	8001cd8 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	3350      	adds	r3, #80	; 0x50
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 f91c 	bl	8003f1c <pvPortMalloc>
 8001ce4:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00d      	beq.n	8001d08 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3350      	adds	r3, #80	; 0x50
 8001cf4:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cf6:	79fa      	ldrb	r2, [r7, #7]
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f805 	bl	8001d12 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001d08:	6a3b      	ldr	r3, [r7, #32]
    }
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e002      	b.n	8001d34 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d40:	2101      	movs	r1, #1
 8001d42:	69b8      	ldr	r0, [r7, #24]
 8001d44:	f7ff ff1e 	bl	8001b84 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	78fa      	ldrb	r2, [r7, #3]
 8001d4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	2073      	movs	r0, #115	; 0x73
 8001d58:	f004 fa9c 	bl	8006294 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b090      	sub	sp, #64	; 0x40
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <xQueueGenericSend+0x32>
        __asm volatile
 8001d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001d92:	bf00      	nop
 8001d94:	e7fe      	b.n	8001d94 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d103      	bne.n	8001da4 <xQueueGenericSend+0x40>
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <xQueueGenericSend+0x44>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <xQueueGenericSend+0x46>
 8001da8:	2300      	movs	r3, #0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10a      	bne.n	8001dc4 <xQueueGenericSend+0x60>
        __asm volatile
 8001dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001dc0:	bf00      	nop
 8001dc2:	e7fe      	b.n	8001dc2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d103      	bne.n	8001dd2 <xQueueGenericSend+0x6e>
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <xQueueGenericSend+0x72>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <xQueueGenericSend+0x74>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <xQueueGenericSend+0x8e>
        __asm volatile
 8001ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	623b      	str	r3, [r7, #32]
    }
 8001dee:	bf00      	nop
 8001df0:	e7fe      	b.n	8001df0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001df2:	f001 fa0f 	bl	8003214 <xTaskGetSchedulerState>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <xQueueGenericSend+0x9e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <xQueueGenericSend+0xa2>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <xQueueGenericSend+0xa4>
 8001e06:	2300      	movs	r3, #0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <xQueueGenericSend+0xbe>
        __asm volatile
 8001e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e10:	f383 8811 	msr	BASEPRI, r3
 8001e14:	f3bf 8f6f 	isb	sy
 8001e18:	f3bf 8f4f 	dsb	sy
 8001e1c:	61fb      	str	r3, [r7, #28]
    }
 8001e1e:	bf00      	nop
 8001e20:	e7fe      	b.n	8001e20 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001e22:	f001 ff51 	bl	8003cc8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d302      	bcc.n	8001e38 <xQueueGenericSend+0xd4>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d136      	bne.n	8001ea6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8001e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 ffb8 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	205a      	movs	r0, #90	; 0x5a
 8001e4e:	f004 fa97 	bl	8006380 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e58:	f000 fa78 	bl	800234c <prvCopyDataToQueue>
 8001e5c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d010      	beq.n	8001e88 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e68:	3324      	adds	r3, #36	; 0x24
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 f832 	bl	8002ed4 <xTaskRemoveFromEventList>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d013      	beq.n	8001e9e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001e76:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <xQueueGenericSend+0x248>)
 8001e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	e00a      	b.n	8001e9e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001e8e:	4b47      	ldr	r3, [pc, #284]	; (8001fac <xQueueGenericSend+0x248>)
 8001e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001e9e:	f001 ff43 	bl	8003d28 <vPortExitCritical>
                return pdPASS;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e07d      	b.n	8001fa2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d110      	bne.n	8001ece <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001eac:	f001 ff3c 	bl	8003d28 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 ff7c 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4601      	mov	r1, r0
 8001ec4:	205a      	movs	r0, #90	; 0x5a
 8001ec6:	f004 fa5b 	bl	8006380 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e069      	b.n	8001fa2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d106      	bne.n	8001ee2 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 f861 	bl	8002fa0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001ee2:	f001 ff21 	bl	8003d28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001ee6:	f000 fda9 	bl	8002a3c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001eea:	f001 feed 	bl	8003cc8 <vPortEnterCritical>
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001efa:	d103      	bne.n	8001f04 <xQueueGenericSend+0x1a0>
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f10:	d103      	bne.n	8001f1a <xQueueGenericSend+0x1b6>
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f1a:	f001 ff05 	bl	8003d28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f1e:	1d3a      	adds	r2, r7, #4
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 f850 	bl	8002fcc <xTaskCheckForTimeOut>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d124      	bne.n	8001f7c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f34:	f000 fb02 	bl	800253c <prvIsQueueFull>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d018      	beq.n	8001f70 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f40:	3310      	adds	r3, #16
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 ff72 	bl	8002e30 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f4e:	f000 fa8d 	bl	800246c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001f52:	f000 fd81 	bl	8002a58 <xTaskResumeAll>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f47f af62 	bne.w	8001e22 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <xQueueGenericSend+0x248>)
 8001f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f3bf 8f4f 	dsb	sy
 8001f6a:	f3bf 8f6f 	isb	sy
 8001f6e:	e758      	b.n	8001e22 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f72:	f000 fa7b 	bl	800246c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f76:	f000 fd6f 	bl	8002a58 <xTaskResumeAll>
 8001f7a:	e752      	b.n	8001e22 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f7e:	f000 fa75 	bl	800246c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f82:	f000 fd69 	bl	8002a58 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 ff11 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	460b      	mov	r3, r1
 8001f98:	4601      	mov	r1, r0
 8001f9a:	205a      	movs	r0, #90	; 0x5a
 8001f9c:	f004 f9f0 	bl	8006380 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8001fa0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3738      	adds	r7, #56	; 0x38
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	e000ed04 	.word	0xe000ed04

08001fb0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b090      	sub	sp, #64	; 0x40
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001fda:	bf00      	nop
 8001fdc:	e7fe      	b.n	8001fdc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <xQueueGenericSendFromISR+0x3c>
 8001fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <xQueueGenericSendFromISR+0x40>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <xQueueGenericSendFromISR+0x42>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10a      	bne.n	800200c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8001ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffa:	f383 8811 	msr	BASEPRI, r3
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002008:	bf00      	nop
 800200a:	e7fe      	b.n	800200a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d103      	bne.n	800201a <xQueueGenericSendFromISR+0x6a>
 8002012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <xQueueGenericSendFromISR+0x6e>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <xQueueGenericSendFromISR+0x70>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	623b      	str	r3, [r7, #32]
    }
 8002036:	bf00      	nop
 8002038:	e7fe      	b.n	8002038 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800203a:	f001 ff2f 	bl	8003e9c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800203e:	f3ef 8211 	mrs	r2, BASEPRI
 8002042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002046:	f383 8811 	msr	BASEPRI, r3
 800204a:	f3bf 8f6f 	isb	sy
 800204e:	f3bf 8f4f 	dsb	sy
 8002052:	61fa      	str	r2, [r7, #28]
 8002054:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002056:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	429a      	cmp	r2, r3
 8002064:	d302      	bcc.n	800206c <xQueueGenericSendFromISR+0xbc>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d148      	bne.n	80020fe <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800207c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207e:	4618      	mov	r0, r3
 8002080:	f004 fe96 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8002084:	4601      	mov	r1, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	461a      	mov	r2, r3
 800208a:	2060      	movs	r0, #96	; 0x60
 800208c:	f004 f8a8 	bl	80061e0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002096:	f000 f959 	bl	800234c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800209a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800209e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a2:	d112      	bne.n	80020ca <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d025      	beq.n	80020f8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ae:	3324      	adds	r3, #36	; 0x24
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 ff0f 	bl	8002ed4 <xTaskRemoveFromEventList>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01d      	beq.n	80020f8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01a      	beq.n	80020f8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e016      	b.n	80020f8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80020ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020ce:	2b7f      	cmp	r3, #127	; 0x7f
 80020d0:	d10a      	bne.n	80020e8 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80020d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d6:	f383 8811 	msr	BASEPRI, r3
 80020da:	f3bf 8f6f 	isb	sy
 80020de:	f3bf 8f4f 	dsb	sy
 80020e2:	617b      	str	r3, [r7, #20]
    }
 80020e4:	bf00      	nop
 80020e6:	e7fe      	b.n	80020e6 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80020e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020ec:	3301      	adds	r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	b25a      	sxtb	r2, r3
 80020f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80020f8:	2301      	movs	r3, #1
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80020fc:	e00b      	b.n	8002116 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80020fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002100:	4618      	mov	r0, r3
 8002102:	f004 fe55 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8002106:	4601      	mov	r1, r0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	461a      	mov	r2, r3
 800210c:	2060      	movs	r0, #96	; 0x60
 800210e:	f004 f867 	bl	80061e0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002112:	2300      	movs	r3, #0
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002118:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002120:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002124:	4618      	mov	r0, r3
 8002126:	3740      	adds	r7, #64	; 0x40
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b08f      	sub	sp, #60	; 0x3c
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10a      	bne.n	800215c <xQueueReceive+0x30>
        __asm volatile
 8002146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214a:	f383 8811 	msr	BASEPRI, r3
 800214e:	f3bf 8f6f 	isb	sy
 8002152:	f3bf 8f4f 	dsb	sy
 8002156:	623b      	str	r3, [r7, #32]
    }
 8002158:	bf00      	nop
 800215a:	e7fe      	b.n	800215a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d103      	bne.n	800216a <xQueueReceive+0x3e>
 8002162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <xQueueReceive+0x42>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <xQueueReceive+0x44>
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <xQueueReceive+0x5e>
        __asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	61fb      	str	r3, [r7, #28]
    }
 8002186:	bf00      	nop
 8002188:	e7fe      	b.n	8002188 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800218a:	f001 f843 	bl	8003214 <xTaskGetSchedulerState>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <xQueueReceive+0x6e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <xQueueReceive+0x72>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <xQueueReceive+0x74>
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <xQueueReceive+0x8e>
        __asm volatile
 80021a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	61bb      	str	r3, [r7, #24]
    }
 80021b6:	bf00      	nop
 80021b8:	e7fe      	b.n	80021b8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021ba:	f001 fd85 	bl	8003cc8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d02f      	beq.n	800222a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ce:	f000 f927 	bl	8002420 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	4618      	mov	r0, r3
 80021d6:	f004 fdeb 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 80021da:	4604      	mov	r4, r0
 80021dc:	2000      	movs	r0, #0
 80021de:	f004 fde7 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 80021e2:	4602      	mov	r2, r0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2101      	movs	r1, #1
 80021e8:	9100      	str	r1, [sp, #0]
 80021ea:	4621      	mov	r1, r4
 80021ec:	205c      	movs	r0, #92	; 0x5c
 80021ee:	f004 f8c7 	bl	8006380 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	1e5a      	subs	r2, r3, #1
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00f      	beq.n	8002222 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	3310      	adds	r3, #16
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fe64 	bl	8002ed4 <xTaskRemoveFromEventList>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002212:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <xQueueReceive+0x21c>)
 8002214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002222:	f001 fd81 	bl	8003d28 <vPortExitCritical>
                return pdPASS;
 8002226:	2301      	movs	r3, #1
 8002228:	e08a      	b.n	8002340 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d113      	bne.n	8002258 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002230:	f001 fd7a 	bl	8003d28 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	4618      	mov	r0, r3
 8002238:	f004 fdba 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 800223c:	4604      	mov	r4, r0
 800223e:	2000      	movs	r0, #0
 8002240:	f004 fdb6 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8002244:	4602      	mov	r2, r0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2101      	movs	r1, #1
 800224a:	9100      	str	r1, [sp, #0]
 800224c:	4621      	mov	r1, r4
 800224e:	205c      	movs	r0, #92	; 0x5c
 8002250:	f004 f896 	bl	8006380 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002254:	2300      	movs	r3, #0
 8002256:	e073      	b.n	8002340 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fe9c 	bl	8002fa0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002268:	2301      	movs	r3, #1
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800226c:	f001 fd5c 	bl	8003d28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002270:	f000 fbe4 	bl	8002a3c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002274:	f001 fd28 	bl	8003cc8 <vPortEnterCritical>
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800227e:	b25b      	sxtb	r3, r3
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002284:	d103      	bne.n	800228e <xQueueReceive+0x162>
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002294:	b25b      	sxtb	r3, r3
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800229a:	d103      	bne.n	80022a4 <xQueueReceive+0x178>
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022a4:	f001 fd40 	bl	8003d28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022a8:	1d3a      	adds	r2, r7, #4
 80022aa:	f107 0310 	add.w	r3, r7, #16
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fe8b 	bl	8002fcc <xTaskCheckForTimeOut>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d124      	bne.n	8002306 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022be:	f000 f927 	bl	8002510 <prvIsQueueEmpty>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d018      	beq.n	80022fa <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	3324      	adds	r3, #36	; 0x24
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fdad 	bl	8002e30 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80022d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d8:	f000 f8c8 	bl	800246c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80022dc:	f000 fbbc 	bl	8002a58 <xTaskResumeAll>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f47f af69 	bne.w	80021ba <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <xQueueReceive+0x21c>)
 80022ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	f3bf 8f6f 	isb	sy
 80022f8:	e75f      	b.n	80021ba <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80022fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022fc:	f000 f8b6 	bl	800246c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002300:	f000 fbaa 	bl	8002a58 <xTaskResumeAll>
 8002304:	e759      	b.n	80021ba <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002308:	f000 f8b0 	bl	800246c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800230c:	f000 fba4 	bl	8002a58 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002312:	f000 f8fd 	bl	8002510 <prvIsQueueEmpty>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	f43f af4e 	beq.w	80021ba <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	4618      	mov	r0, r3
 8002322:	f004 fd45 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 8002326:	4604      	mov	r4, r0
 8002328:	2000      	movs	r0, #0
 800232a:	f004 fd41 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 800232e:	4602      	mov	r2, r0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2101      	movs	r1, #1
 8002334:	9100      	str	r1, [sp, #0]
 8002336:	4621      	mov	r1, r4
 8002338:	205c      	movs	r0, #92	; 0x5c
 800233a:	f004 f821 	bl	8006380 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800233e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002340:	4618      	mov	r0, r3
 8002342:	3734      	adds	r7, #52	; 0x34
 8002344:	46bd      	mov	sp, r7
 8002346:	bd90      	pop	{r4, r7, pc}
 8002348:	e000ed04 	.word	0xe000ed04

0800234c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d14d      	bne.n	800240e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 ff6a 	bl	8003250 <xTaskPriorityDisinherit>
 800237c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	e043      	b.n	800240e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d119      	bne.n	80023c0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6858      	ldr	r0, [r3, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	461a      	mov	r2, r3
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	f006 f96e 	bl	8008678 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	441a      	add	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d32b      	bcc.n	800240e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	e026      	b.n	800240e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	68d8      	ldr	r0, [r3, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	461a      	mov	r2, r3
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	f006 f954 	bl	8008678 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	425b      	negs	r3, r3
 80023da:	441a      	add	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d207      	bcs.n	80023fc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	425b      	negs	r3, r3
 80023f6:	441a      	add	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d105      	bne.n	800240e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	3b01      	subs	r3, #1
 800240c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002416:	697b      	ldr	r3, [r7, #20]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d018      	beq.n	8002464 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	441a      	add	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	d303      	bcc.n	8002454 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68d9      	ldr	r1, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	461a      	mov	r2, r3
 800245e:	6838      	ldr	r0, [r7, #0]
 8002460:	f006 f90a 	bl	8008678 <memcpy>
    }
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002474:	f001 fc28 	bl	8003cc8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800247e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002480:	e011      	b.n	80024a6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3324      	adds	r3, #36	; 0x24
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fd20 	bl	8002ed4 <xTaskRemoveFromEventList>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800249a:	f000 fdfd 	bl	8003098 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	dce9      	bgt.n	8002482 <prvUnlockQueue+0x16>
 80024ae:	e000      	b.n	80024b2 <prvUnlockQueue+0x46>
                        break;
 80024b0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80024ba:	f001 fc35 	bl	8003d28 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80024be:	f001 fc03 	bl	8003cc8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024ca:	e011      	b.n	80024f0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d012      	beq.n	80024fa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3310      	adds	r3, #16
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fcfb 	bl	8002ed4 <xTaskRemoveFromEventList>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80024e4:	f000 fdd8 	bl	8003098 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80024e8:	7bbb      	ldrb	r3, [r7, #14]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	dce9      	bgt.n	80024cc <prvUnlockQueue+0x60>
 80024f8:	e000      	b.n	80024fc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80024fa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	22ff      	movs	r2, #255	; 0xff
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002504:	f001 fc10 	bl	8003d28 <vPortExitCritical>
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002518:	f001 fbd6 	bl	8003cc8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002524:	2301      	movs	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e001      	b.n	800252e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800252e:	f001 fbfb 	bl	8003d28 <vPortExitCritical>

    return xReturn;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002544:	f001 fbc0 	bl	8003cc8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	429a      	cmp	r2, r3
 8002552:	d102      	bne.n	800255a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002554:	2301      	movs	r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e001      	b.n	800255e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800255e:	f001 fbe3 	bl	8003d28 <vPortExitCritical>

    return xReturn;
 8002562:	68fb      	ldr	r3, [r7, #12]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e01e      	b.n	80025ba <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800257c:	4a13      	ldr	r2, [pc, #76]	; (80025cc <vQueueAddToRegistry+0x60>)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d115      	bne.n	80025b4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002588:	4910      	ldr	r1, [pc, #64]	; (80025cc <vQueueAddToRegistry+0x60>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002592:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <vQueueAddToRegistry+0x60>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f004 fc05 	bl	8006db0 <SEGGER_SYSVIEW_ShrinkId>
 80025a6:	4601      	mov	r1, r0
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	2071      	movs	r0, #113	; 0x71
 80025ae:	f003 fe17 	bl	80061e0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80025b2:	e006      	b.n	80025c2 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3301      	adds	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b07      	cmp	r3, #7
 80025be:	d9dd      	bls.n	800257c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200147a0 	.word	0x200147a0

080025d0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80025e0:	f001 fb72 	bl	8003cc8 <vPortEnterCritical>
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025ea:	b25b      	sxtb	r3, r3
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f0:	d103      	bne.n	80025fa <vQueueWaitForMessageRestricted+0x2a>
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002600:	b25b      	sxtb	r3, r3
 8002602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002606:	d103      	bne.n	8002610 <vQueueWaitForMessageRestricted+0x40>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002610:	f001 fb8a 	bl	8003d28 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	2b00      	cmp	r3, #0
 800261a:	d106      	bne.n	800262a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3324      	adds	r3, #36	; 0x24
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fc27 	bl	8002e78 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff1e 	bl	800246c <prvUnlockQueue>
    }
 8002630:	bf00      	nop
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af04      	add	r7, sp, #16
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4618      	mov	r0, r3
 800264e:	f001 fc65 	bl	8003f1c <pvPortMalloc>
 8002652:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00e      	beq.n	8002678 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800265a:	2058      	movs	r0, #88	; 0x58
 800265c:	f001 fc5e 	bl	8003f1c <pvPortMalloc>
 8002660:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
 800266e:	e005      	b.n	800267c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002670:	6978      	ldr	r0, [r7, #20]
 8002672:	f001 fd33 	bl	80040dc <vPortFree>
 8002676:	e001      	b.n	800267c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d013      	beq.n	80026aa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	2300      	movs	r3, #0
 8002686:	9303      	str	r3, [sp, #12]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	9302      	str	r3, [sp, #8]
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f80e 	bl	80026ba <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800269e:	69f8      	ldr	r0, [r7, #28]
 80026a0:	f000 f8a2 	bl	80027e8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80026a4:	2301      	movs	r3, #1
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e002      	b.n	80026b0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ae:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80026b0:	69bb      	ldr	r3, [r7, #24]
    }
 80026b2:	4618      	mov	r0, r3
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b088      	sub	sp, #32
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	461a      	mov	r2, r3
 80026d2:	21a5      	movs	r1, #165	; 0xa5
 80026d4:	f005 ffde 	bl	8008694 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026e2:	3b01      	subs	r3, #1
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f023 0307 	bic.w	r3, r3, #7
 80026f0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <prvInitialiseNewTask+0x58>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	617b      	str	r3, [r7, #20]
    }
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01f      	beq.n	8002758 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	e012      	b.n	8002744 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	7819      	ldrb	r1, [r3, #0]
 8002726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	3334      	adds	r3, #52	; 0x34
 800272e:	460a      	mov	r2, r1
 8002730:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3301      	adds	r3, #1
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b09      	cmp	r3, #9
 8002748:	d9e9      	bls.n	800271e <prvInitialiseNewTask+0x64>
 800274a:	e000      	b.n	800274e <prvInitialiseNewTask+0x94>
            {
                break;
 800274c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002756:	e003      	b.n	8002760 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	2b04      	cmp	r3, #4
 8002764:	d901      	bls.n	800276a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002766:	2304      	movs	r3, #4
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800276e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002774:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	2200      	movs	r2, #0
 800277a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	3304      	adds	r3, #4
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f96a 	bl	8001a5a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	3318      	adds	r3, #24
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff f965 	bl	8001a5a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002794:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	f1c3 0205 	rsb	r2, r3, #5
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	3350      	adds	r3, #80	; 0x50
 80027aa:	2204      	movs	r2, #4
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f005 ff70 	bl	8008694 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	3354      	adds	r3, #84	; 0x54
 80027b8:	2201      	movs	r2, #1
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 ff69 	bl	8008694 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	69b8      	ldr	r0, [r7, #24]
 80027c8:	f001 f94c 	bl	8003a64 <pxPortInitialiseStack>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027dc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027de:	bf00      	nop
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80027f0:	f001 fa6a 	bl	8003cc8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80027f4:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <prvAddNewTaskToReadyList+0xfc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3301      	adds	r3, #1
 80027fa:	4a3a      	ldr	r2, [pc, #232]	; (80028e4 <prvAddNewTaskToReadyList+0xfc>)
 80027fc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80027fe:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <prvAddNewTaskToReadyList+0x100>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002806:	4a38      	ldr	r2, [pc, #224]	; (80028e8 <prvAddNewTaskToReadyList+0x100>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <prvAddNewTaskToReadyList+0xfc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d110      	bne.n	8002836 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002814:	f000 fc64 	bl	80030e0 <prvInitialiseTaskLists>
 8002818:	e00d      	b.n	8002836 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800281a:	4b34      	ldr	r3, [pc, #208]	; (80028ec <prvAddNewTaskToReadyList+0x104>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002822:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <prvAddNewTaskToReadyList+0x100>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	429a      	cmp	r2, r3
 800282e:	d802      	bhi.n	8002836 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002830:	4a2d      	ldr	r2, [pc, #180]	; (80028e8 <prvAddNewTaskToReadyList+0x100>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002836:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <prvAddNewTaskToReadyList+0x108>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3301      	adds	r3, #1
 800283c:	4a2c      	ldr	r2, [pc, #176]	; (80028f0 <prvAddNewTaskToReadyList+0x108>)
 800283e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <prvAddNewTaskToReadyList+0x108>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <prvAddNewTaskToReadyList+0x94>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	f004 f987 	bl	8006b64 <SEGGER_SYSVIEW_OnTaskCreate>
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	461d      	mov	r5, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461c      	mov	r4, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	1ae3      	subs	r3, r4, r3
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	462b      	mov	r3, r5
 8002878:	f002 fd68 	bl	800534c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4618      	mov	r0, r3
 8002880:	f004 f9f4 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	2201      	movs	r2, #1
 800288a:	409a      	lsls	r2, r3
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <prvAddNewTaskToReadyList+0x10c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <prvAddNewTaskToReadyList+0x10c>)
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <prvAddNewTaskToReadyList+0x110>)
 80028a4:	441a      	add	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3304      	adds	r3, #4
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	f7ff f8e1 	bl	8001a74 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80028b2:	f001 fa39 	bl	8003d28 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <prvAddNewTaskToReadyList+0x104>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00e      	beq.n	80028dc <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <prvAddNewTaskToReadyList+0x100>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <prvAddNewTaskToReadyList+0x114>)
 80028ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bdb0      	pop	{r4, r5, r7, pc}
 80028e4:	20000304 	.word	0x20000304
 80028e8:	2000022c 	.word	0x2000022c
 80028ec:	20000310 	.word	0x20000310
 80028f0:	20000320 	.word	0x20000320
 80028f4:	2000030c 	.word	0x2000030c
 80028f8:	20000230 	.word	0x20000230
 80028fc:	e000ed04 	.word	0xe000ed04

08002900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01b      	beq.n	800294a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <vTaskDelay+0x68>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <vTaskDelay+0x30>
        __asm volatile
 800291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	60bb      	str	r3, [r7, #8]
    }
 800292c:	bf00      	nop
 800292e:	e7fe      	b.n	800292e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002930:	f000 f884 	bl	8002a3c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	2023      	movs	r0, #35	; 0x23
 8002938:	f003 fc16 	bl	8006168 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800293c:	2100      	movs	r1, #0
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fd06 	bl	8003350 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002944:	f000 f888 	bl	8002a58 <xTaskResumeAll>
 8002948:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d107      	bne.n	8002960 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <vTaskDelay+0x6c>)
 8002952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	2000032c 	.word	0x2000032c
 800296c:	e000ed04 	.word	0xe000ed04

08002970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <vTaskStartScheduler+0xac>)
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2300      	movs	r3, #0
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	2282      	movs	r2, #130	; 0x82
 8002982:	4927      	ldr	r1, [pc, #156]	; (8002a20 <vTaskStartScheduler+0xb0>)
 8002984:	4827      	ldr	r0, [pc, #156]	; (8002a24 <vTaskStartScheduler+0xb4>)
 8002986:	f7ff fe57 	bl	8002638 <xTaskCreate>
 800298a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d102      	bne.n	8002998 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002992:	f000 fd55 	bl	8003440 <xTimerCreateTimerTask>
 8002996:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d129      	bne.n	80029f2 <vTaskStartScheduler+0x82>
        __asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	60bb      	str	r3, [r7, #8]
    }
 80029b0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <vTaskStartScheduler+0xb8>)
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029b8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80029ba:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <vTaskStartScheduler+0xbc>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <vTaskStartScheduler+0xc0>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <vTaskStartScheduler+0xc4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3334      	adds	r3, #52	; 0x34
 80029cc:	2205      	movs	r2, #5
 80029ce:	4914      	ldr	r1, [pc, #80]	; (8002a20 <vTaskStartScheduler+0xb0>)
 80029d0:	4618      	mov	r0, r3
 80029d2:	f005 fe43 	bl	800865c <memcmp>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <vTaskStartScheduler+0x78>
 80029dc:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <vTaskStartScheduler+0xc4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f004 f901 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartExec>
 80029e6:	e001      	b.n	80029ec <vTaskStartScheduler+0x7c>
 80029e8:	f004 f8a0 	bl	8006b2c <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80029ec:	f001 f8ca 	bl	8003b84 <xPortStartScheduler>
 80029f0:	e00e      	b.n	8002a10 <vTaskStartScheduler+0xa0>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f8:	d10a      	bne.n	8002a10 <vTaskStartScheduler+0xa0>
        __asm volatile
 80029fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	607b      	str	r3, [r7, #4]
    }
 8002a0c:	bf00      	nop
 8002a0e:	e7fe      	b.n	8002a0e <vTaskStartScheduler+0x9e>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <vTaskStartScheduler+0xc8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000328 	.word	0x20000328
 8002a20:	0800b3a8 	.word	0x0800b3a8
 8002a24:	080030b1 	.word	0x080030b1
 8002a28:	20000324 	.word	0x20000324
 8002a2c:	20000310 	.word	0x20000310
 8002a30:	20000308 	.word	0x20000308
 8002a34:	2000022c 	.word	0x2000022c
 8002a38:	20000014 	.word	0x20000014

08002a3c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <vTaskSuspendAll+0x18>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	4a03      	ldr	r2, [pc, #12]	; (8002a54 <vTaskSuspendAll+0x18>)
 8002a48:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	2000032c 	.word	0x2000032c

08002a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <xTaskResumeAll+0x11c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10a      	bne.n	8002a84 <xTaskResumeAll+0x2c>
        __asm volatile
 8002a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	603b      	str	r3, [r7, #0]
    }
 8002a80:	bf00      	nop
 8002a82:	e7fe      	b.n	8002a82 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a84:	f001 f920 	bl	8003cc8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a88:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <xTaskResumeAll+0x11c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	4a39      	ldr	r2, [pc, #228]	; (8002b74 <xTaskResumeAll+0x11c>)
 8002a90:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a92:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <xTaskResumeAll+0x11c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d165      	bne.n	8002b66 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <xTaskResumeAll+0x120>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d061      	beq.n	8002b66 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002aa2:	e032      	b.n	8002b0a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aa4:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <xTaskResumeAll+0x124>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3318      	adds	r3, #24
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f83c 	bl	8001b2e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f837 	bl	8001b2e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 f8d2 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	2201      	movs	r2, #1
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <xTaskResumeAll+0x128>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <xTaskResumeAll+0x128>)
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <xTaskResumeAll+0x12c>)
 8002ae8:	441a      	add	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3304      	adds	r3, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f7fe ffbf 	bl	8001a74 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <xTaskResumeAll+0x130>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d302      	bcc.n	8002b0a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002b04:	4b21      	ldr	r3, [pc, #132]	; (8002b8c <xTaskResumeAll+0x134>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <xTaskResumeAll+0x124>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1c8      	bne.n	8002aa4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002b18:	f000 fb60 	bl	80031dc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <xTaskResumeAll+0x138>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d010      	beq.n	8002b4a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b28:	f000 f858 	bl	8002bdc <xTaskIncrementTick>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002b32:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <xTaskResumeAll+0x134>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f1      	bne.n	8002b28 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <xTaskResumeAll+0x138>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <xTaskResumeAll+0x134>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002b52:	2301      	movs	r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <xTaskResumeAll+0x13c>)
 8002b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b66:	f001 f8df 	bl	8003d28 <vPortExitCritical>

    return xAlreadyYielded;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000032c 	.word	0x2000032c
 8002b78:	20000304 	.word	0x20000304
 8002b7c:	200002c4 	.word	0x200002c4
 8002b80:	2000030c 	.word	0x2000030c
 8002b84:	20000230 	.word	0x20000230
 8002b88:	2000022c 	.word	0x2000022c
 8002b8c:	20000318 	.word	0x20000318
 8002b90:	20000314 	.word	0x20000314
 8002b94:	e000ed04 	.word	0xe000ed04

08002b98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <xTaskGetTickCount+0x1c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002ba4:	687b      	ldr	r3, [r7, #4]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000308 	.word	0x20000308

08002bb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bbe:	f001 f96d 	bl	8003e9c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <xTaskGetTickCountFromISR+0x20>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002bcc:	683b      	ldr	r3, [r7, #0]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000308 	.word	0x20000308

08002bdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002be6:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <xTaskIncrementTick+0x14c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 8092 	bne.w	8002d14 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bf0:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <xTaskIncrementTick+0x150>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002bf8:	4a4c      	ldr	r2, [pc, #304]	; (8002d2c <xTaskIncrementTick+0x150>)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d120      	bne.n	8002c46 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c04:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <xTaskIncrementTick+0x154>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <xTaskIncrementTick+0x48>
        __asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	603b      	str	r3, [r7, #0]
    }
 8002c20:	bf00      	nop
 8002c22:	e7fe      	b.n	8002c22 <xTaskIncrementTick+0x46>
 8002c24:	4b42      	ldr	r3, [pc, #264]	; (8002d30 <xTaskIncrementTick+0x154>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b42      	ldr	r3, [pc, #264]	; (8002d34 <xTaskIncrementTick+0x158>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a40      	ldr	r2, [pc, #256]	; (8002d30 <xTaskIncrementTick+0x154>)
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <xTaskIncrementTick+0x158>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <xTaskIncrementTick+0x15c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	4a3e      	ldr	r2, [pc, #248]	; (8002d38 <xTaskIncrementTick+0x15c>)
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	f000 facb 	bl	80031dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c46:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <xTaskIncrementTick+0x160>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d34c      	bcc.n	8002cea <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c50:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <xTaskIncrementTick+0x154>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c5a:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <xTaskIncrementTick+0x160>)
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c60:	601a      	str	r2, [r3, #0]
                    break;
 8002c62:	e042      	b.n	8002cea <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c64:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <xTaskIncrementTick+0x154>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d203      	bcs.n	8002c84 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c7c:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <xTaskIncrementTick+0x160>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c82:	e032      	b.n	8002cea <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	3304      	adds	r3, #4
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe ff50 	bl	8001b2e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3318      	adds	r3, #24
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe ff47 	bl	8001b2e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f003 ffe2 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	2201      	movs	r2, #1
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <xTaskIncrementTick+0x164>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <xTaskIncrementTick+0x164>)
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <xTaskIncrementTick+0x168>)
 8002cc8:	441a      	add	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f7fe fecf 	bl	8001a74 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <xTaskIncrementTick+0x16c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d3b5      	bcc.n	8002c50 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ce8:	e7b2      	b.n	8002c50 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cea:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <xTaskIncrementTick+0x16c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf0:	4914      	ldr	r1, [pc, #80]	; (8002d44 <xTaskIncrementTick+0x168>)
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d901      	bls.n	8002d06 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002d02:	2301      	movs	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <xTaskIncrementTick+0x170>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e004      	b.n	8002d1e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <xTaskIncrementTick+0x174>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <xTaskIncrementTick+0x174>)
 8002d1c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d1e:	697b      	ldr	r3, [r7, #20]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	2000032c 	.word	0x2000032c
 8002d2c:	20000308 	.word	0x20000308
 8002d30:	200002bc 	.word	0x200002bc
 8002d34:	200002c0 	.word	0x200002c0
 8002d38:	2000031c 	.word	0x2000031c
 8002d3c:	20000324 	.word	0x20000324
 8002d40:	2000030c 	.word	0x2000030c
 8002d44:	20000230 	.word	0x20000230
 8002d48:	2000022c 	.word	0x2000022c
 8002d4c:	20000318 	.word	0x20000318
 8002d50:	20000314 	.word	0x20000314

08002d54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d5a:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <vTaskSwitchContext+0xc4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d62:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <vTaskSwitchContext+0xc8>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002d68:	e052      	b.n	8002e10 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 8002d6a:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <vTaskSwitchContext+0xc8>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <vTaskSwitchContext+0xcc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d7e:	7afb      	ldrb	r3, [r7, #11]
 8002d80:	f1c3 031f 	rsb	r3, r3, #31
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	4927      	ldr	r1, [pc, #156]	; (8002e24 <vTaskSwitchContext+0xd0>)
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	607b      	str	r3, [r7, #4]
    }
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <vTaskSwitchContext+0x5a>
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4a1a      	ldr	r2, [pc, #104]	; (8002e24 <vTaskSwitchContext+0xd0>)
 8002dbc:	4413      	add	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d104      	bne.n	8002de0 <vTaskSwitchContext+0x8c>
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <vTaskSwitchContext+0xd4>)
 8002de8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <vTaskSwitchContext+0xd4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3334      	adds	r3, #52	; 0x34
 8002df0:	2205      	movs	r2, #5
 8002df2:	490e      	ldr	r1, [pc, #56]	; (8002e2c <vTaskSwitchContext+0xd8>)
 8002df4:	4618      	mov	r0, r3
 8002df6:	f005 fc31 	bl	800865c <memcmp>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <vTaskSwitchContext+0xb8>
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <vTaskSwitchContext+0xd4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 feef 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002e0a:	e001      	b.n	8002e10 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8002e0c:	f003 fe8e 	bl	8006b2c <SEGGER_SYSVIEW_OnIdle>
}
 8002e10:	bf00      	nop
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000032c 	.word	0x2000032c
 8002e1c:	20000318 	.word	0x20000318
 8002e20:	2000030c 	.word	0x2000030c
 8002e24:	20000230 	.word	0x20000230
 8002e28:	2000022c 	.word	0x2000022c
 8002e2c:	0800b3a8 	.word	0x0800b3a8

08002e30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	60fb      	str	r3, [r7, #12]
    }
 8002e52:	bf00      	nop
 8002e54:	e7fe      	b.n	8002e54 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e56:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <vTaskPlaceOnEventList+0x44>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3318      	adds	r3, #24
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fe2c 	bl	8001abc <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e64:	2101      	movs	r1, #1
 8002e66:	6838      	ldr	r0, [r7, #0]
 8002e68:	f000 fa72 	bl	8003350 <prvAddCurrentTaskToDelayedList>
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	2000022c 	.word	0x2000022c

08002e78 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	617b      	str	r3, [r7, #20]
    }
 8002e9c:	bf00      	nop
 8002e9e:	e7fe      	b.n	8002e9e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <vTaskPlaceOnEventListRestricted+0x58>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3318      	adds	r3, #24
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7fe fde3 	bl	8001a74 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eb8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002eba:	2024      	movs	r0, #36	; 0x24
 8002ebc:	f003 f936 	bl	800612c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	68b8      	ldr	r0, [r7, #8]
 8002ec4:	f000 fa44 	bl	8003350 <prvAddCurrentTaskToDelayedList>
    }
 8002ec8:	bf00      	nop
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	2000022c 	.word	0x2000022c

08002ed4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	60fb      	str	r3, [r7, #12]
    }
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	3318      	adds	r3, #24
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fe12 	bl	8001b2e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f0a:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <xTaskRemoveFromEventList+0xb4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d120      	bne.n	8002f54 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fe09 	bl	8001b2e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f003 fea4 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <xTaskRemoveFromEventList+0xb8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <xTaskRemoveFromEventList+0xb8>)
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <xTaskRemoveFromEventList+0xbc>)
 8002f44:	441a      	add	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f7fe fd91 	bl	8001a74 <vListInsertEnd>
 8002f52:	e005      	b.n	8002f60 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	3318      	adds	r3, #24
 8002f58:	4619      	mov	r1, r3
 8002f5a:	480e      	ldr	r0, [pc, #56]	; (8002f94 <xTaskRemoveFromEventList+0xc0>)
 8002f5c:	f7fe fd8a 	bl	8001a74 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <xTaskRemoveFromEventList+0xc4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d905      	bls.n	8002f7a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <xTaskRemoveFromEventList+0xc8>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e001      	b.n	8002f7e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002f7e:	697b      	ldr	r3, [r7, #20]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	2000032c 	.word	0x2000032c
 8002f8c:	2000030c 	.word	0x2000030c
 8002f90:	20000230 	.word	0x20000230
 8002f94:	200002c4 	.word	0x200002c4
 8002f98:	2000022c 	.word	0x2000022c
 8002f9c:	20000318 	.word	0x20000318

08002fa0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <vTaskInternalSetTimeOutState+0x24>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <vTaskInternalSetTimeOutState+0x28>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	605a      	str	r2, [r3, #4]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	2000031c 	.word	0x2000031c
 8002fc8:	20000308 	.word	0x20000308

08002fcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	613b      	str	r3, [r7, #16]
    }
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	60fb      	str	r3, [r7, #12]
    }
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800300e:	f000 fe5b 	bl	8003cc8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003012:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <xTaskCheckForTimeOut+0xc4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302a:	d102      	bne.n	8003032 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	e026      	b.n	8003080 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <xTaskCheckForTimeOut+0xc8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d00a      	beq.n	8003054 <xTaskCheckForTimeOut+0x88>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	429a      	cmp	r2, r3
 8003046:	d305      	bcc.n	8003054 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003048:	2301      	movs	r3, #1
 800304a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e015      	b.n	8003080 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	429a      	cmp	r2, r3
 800305c:	d20b      	bcs.n	8003076 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff98 	bl	8002fa0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	e004      	b.n	8003080 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800307c:	2301      	movs	r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003080:	f000 fe52 	bl	8003d28 <vPortExitCritical>

    return xReturn;
 8003084:	69fb      	ldr	r3, [r7, #28]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000308 	.word	0x20000308
 8003094:	2000031c 	.word	0x2000031c

08003098 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <vTaskMissedYield+0x14>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	20000318 	.word	0x20000318

080030b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80030b8:	f000 f852 	bl	8003160 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <prvIdleTask+0x28>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d9f9      	bls.n	80030b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <prvIdleTask+0x2c>)
 80030c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80030d4:	e7f0      	b.n	80030b8 <prvIdleTask+0x8>
 80030d6:	bf00      	nop
 80030d8:	20000230 	.word	0x20000230
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	e00c      	b.n	8003106 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4a12      	ldr	r2, [pc, #72]	; (8003140 <prvInitialiseTaskLists+0x60>)
 80030f8:	4413      	add	r3, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fc8d 	bl	8001a1a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3301      	adds	r3, #1
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b04      	cmp	r3, #4
 800310a:	d9ef      	bls.n	80030ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800310c:	480d      	ldr	r0, [pc, #52]	; (8003144 <prvInitialiseTaskLists+0x64>)
 800310e:	f7fe fc84 	bl	8001a1a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003112:	480d      	ldr	r0, [pc, #52]	; (8003148 <prvInitialiseTaskLists+0x68>)
 8003114:	f7fe fc81 	bl	8001a1a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003118:	480c      	ldr	r0, [pc, #48]	; (800314c <prvInitialiseTaskLists+0x6c>)
 800311a:	f7fe fc7e 	bl	8001a1a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800311e:	480c      	ldr	r0, [pc, #48]	; (8003150 <prvInitialiseTaskLists+0x70>)
 8003120:	f7fe fc7b 	bl	8001a1a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003124:	480b      	ldr	r0, [pc, #44]	; (8003154 <prvInitialiseTaskLists+0x74>)
 8003126:	f7fe fc78 	bl	8001a1a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <prvInitialiseTaskLists+0x78>)
 800312c:	4a05      	ldr	r2, [pc, #20]	; (8003144 <prvInitialiseTaskLists+0x64>)
 800312e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <prvInitialiseTaskLists+0x7c>)
 8003132:	4a05      	ldr	r2, [pc, #20]	; (8003148 <prvInitialiseTaskLists+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000230 	.word	0x20000230
 8003144:	20000294 	.word	0x20000294
 8003148:	200002a8 	.word	0x200002a8
 800314c:	200002c4 	.word	0x200002c4
 8003150:	200002d8 	.word	0x200002d8
 8003154:	200002f0 	.word	0x200002f0
 8003158:	200002bc 	.word	0x200002bc
 800315c:	200002c0 	.word	0x200002c0

08003160 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003166:	e019      	b.n	800319c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003168:	f000 fdae 	bl	8003cc8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800316c:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <prvCheckTasksWaitingTermination+0x50>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fcd8 	bl	8001b2e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <prvCheckTasksWaitingTermination+0x54>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3b01      	subs	r3, #1
 8003184:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <prvCheckTasksWaitingTermination+0x54>)
 8003186:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <prvCheckTasksWaitingTermination+0x58>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3b01      	subs	r3, #1
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <prvCheckTasksWaitingTermination+0x58>)
 8003190:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003192:	f000 fdc9 	bl	8003d28 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f810 	bl	80031bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <prvCheckTasksWaitingTermination+0x58>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e1      	bne.n	8003168 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	200002d8 	.word	0x200002d8
 80031b4:	20000304 	.word	0x20000304
 80031b8:	200002ec 	.word	0x200002ec

080031bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 ff87 	bl	80040dc <vPortFree>
                vPortFree( pxTCB );
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 ff84 	bl	80040dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <prvResetNextTaskUnblockTime+0x30>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <prvResetNextTaskUnblockTime+0x34>)
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031f2:	e005      	b.n	8003200 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <prvResetNextTaskUnblockTime+0x30>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <prvResetNextTaskUnblockTime+0x34>)
 80031fe:	6013      	str	r3, [r2, #0]
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	200002bc 	.word	0x200002bc
 8003210:	20000324 	.word	0x20000324

08003214 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <xTaskGetSchedulerState+0x34>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003222:	2301      	movs	r3, #1
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	e008      	b.n	800323a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <xTaskGetSchedulerState+0x38>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003230:	2302      	movs	r3, #2
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	e001      	b.n	800323a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800323a:	687b      	ldr	r3, [r7, #4]
    }
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	20000310 	.word	0x20000310
 800324c:	2000032c 	.word	0x2000032c

08003250 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d068      	beq.n	8003338 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <xTaskPriorityDisinherit+0xf4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d00a      	beq.n	8003286 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	60fb      	str	r3, [r7, #12]
    }
 8003282:	bf00      	nop
 8003284:	e7fe      	b.n	8003284 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	60bb      	str	r3, [r7, #8]
    }
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a8:	1e5a      	subs	r2, r3, #1
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d03e      	beq.n	8003338 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d13a      	bne.n	8003338 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fc31 	bl	8001b2e <uxListRemove>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	2201      	movs	r2, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43da      	mvns	r2, r3
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <xTaskPriorityDisinherit+0xf8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4013      	ands	r3, r2
 80032e4:	4a18      	ldr	r2, [pc, #96]	; (8003348 <xTaskPriorityDisinherit+0xf8>)
 80032e6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4619      	mov	r1, r3
 80032ec:	204a      	movs	r0, #74	; 0x4a
 80032ee:	f002 ff3b 	bl	8006168 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	f1c3 0205 	rsb	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	2201      	movs	r2, #1
 800330c:	409a      	lsls	r2, r3
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <xTaskPriorityDisinherit+0xf8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <xTaskPriorityDisinherit+0xf8>)
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4a09      	ldr	r2, [pc, #36]	; (800334c <xTaskPriorityDisinherit+0xfc>)
 8003326:	441a      	add	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	3304      	adds	r3, #4
 800332c:	4619      	mov	r1, r3
 800332e:	4610      	mov	r0, r2
 8003330:	f7fe fba0 	bl	8001a74 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003334:	2301      	movs	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003338:	697b      	ldr	r3, [r7, #20]
    }
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	2000022c 	.word	0x2000022c
 8003348:	2000030c 	.word	0x2000030c
 800334c:	20000230 	.word	0x20000230

08003350 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800335a:	4b32      	ldr	r3, [pc, #200]	; (8003424 <prvAddCurrentTaskToDelayedList+0xd4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003360:	4b31      	ldr	r3, [pc, #196]	; (8003428 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3304      	adds	r3, #4
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fbe1 	bl	8001b2e <uxListRemove>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10b      	bne.n	800338a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003372:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	2201      	movs	r2, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	4b2a      	ldr	r3, [pc, #168]	; (800342c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4013      	ands	r3, r2
 8003386:	4a29      	ldr	r2, [pc, #164]	; (800342c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003388:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003390:	d110      	bne.n	80033b4 <prvAddCurrentTaskToDelayedList+0x64>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00d      	beq.n	80033b4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003398:	4b23      	ldr	r3, [pc, #140]	; (8003428 <prvAddCurrentTaskToDelayedList+0xd8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	211b      	movs	r1, #27
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fca6 	bl	8006cf0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a4:	4b20      	ldr	r3, [pc, #128]	; (8003428 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4619      	mov	r1, r3
 80033ac:	4820      	ldr	r0, [pc, #128]	; (8003430 <prvAddCurrentTaskToDelayedList+0xe0>)
 80033ae:	f7fe fb61 	bl	8001a74 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80033b2:	e032      	b.n	800341a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033bc:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d20f      	bcs.n	80033ec <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80033cc:	4b16      	ldr	r3, [pc, #88]	; (8003428 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2104      	movs	r1, #4
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 fc8c 	bl	8006cf0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <prvAddCurrentTaskToDelayedList+0xe4>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4619      	mov	r1, r3
 80033e4:	4610      	mov	r0, r2
 80033e6:	f7fe fb69 	bl	8001abc <vListInsert>
}
 80033ea:	e016      	b.n	800341a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2104      	movs	r1, #4
 80033f2:	4618      	mov	r0, r3
 80033f4:	f003 fc7c 	bl	8006cf0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <prvAddCurrentTaskToDelayedList+0xe8>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3304      	adds	r3, #4
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f7fe fb59 	bl	8001abc <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <prvAddCurrentTaskToDelayedList+0xec>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	d202      	bcs.n	800341a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003414:	4a09      	ldr	r2, [pc, #36]	; (800343c <prvAddCurrentTaskToDelayedList+0xec>)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6013      	str	r3, [r2, #0]
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000308 	.word	0x20000308
 8003428:	2000022c 	.word	0x2000022c
 800342c:	2000030c 	.word	0x2000030c
 8003430:	200002f0 	.word	0x200002f0
 8003434:	200002c0 	.word	0x200002c0
 8003438:	200002bc 	.word	0x200002bc
 800343c:	20000324 	.word	0x20000324

08003440 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800344a:	f000 fad5 	bl	80039f8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <xTimerCreateTimerTask+0x54>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <xTimerCreateTimerTask+0x58>)
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	2302      	movs	r3, #2
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2300      	movs	r3, #0
 8003460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003464:	490d      	ldr	r1, [pc, #52]	; (800349c <xTimerCreateTimerTask+0x5c>)
 8003466:	480e      	ldr	r0, [pc, #56]	; (80034a0 <xTimerCreateTimerTask+0x60>)
 8003468:	f7ff f8e6 	bl	8002638 <xTaskCreate>
 800346c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	603b      	str	r3, [r7, #0]
    }
 8003486:	bf00      	nop
 8003488:	e7fe      	b.n	8003488 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800348a:	687b      	ldr	r3, [r7, #4]
    }
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000360 	.word	0x20000360
 8003498:	20000364 	.word	0x20000364
 800349c:	0800b3b0 	.word	0x0800b3b0
 80034a0:	080035d9 	.word	0x080035d9

080034a4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	; 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <xTimerGenericCommand+0x2e>
        __asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	623b      	str	r3, [r7, #32]
    }
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <xTimerGenericCommand+0x98>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d02a      	beq.n	8003530 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	dc18      	bgt.n	800351e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034ec:	f7ff fe92 	bl	8003214 <xTaskGetSchedulerState>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d109      	bne.n	800350a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034f6:	4b11      	ldr	r3, [pc, #68]	; (800353c <xTimerGenericCommand+0x98>)
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	f107 0114 	add.w	r1, r7, #20
 80034fe:	2300      	movs	r3, #0
 8003500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003502:	f7fe fc2f 	bl	8001d64 <xQueueGenericSend>
 8003506:	6278      	str	r0, [r7, #36]	; 0x24
 8003508:	e012      	b.n	8003530 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <xTimerGenericCommand+0x98>)
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	f107 0114 	add.w	r1, r7, #20
 8003512:	2300      	movs	r3, #0
 8003514:	2200      	movs	r2, #0
 8003516:	f7fe fc25 	bl	8001d64 <xQueueGenericSend>
 800351a:	6278      	str	r0, [r7, #36]	; 0x24
 800351c:	e008      	b.n	8003530 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <xTimerGenericCommand+0x98>)
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	f107 0114 	add.w	r1, r7, #20
 8003526:	2300      	movs	r3, #0
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	f7fe fd41 	bl	8001fb0 <xQueueGenericSendFromISR>
 800352e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003532:	4618      	mov	r0, r3
 8003534:	3728      	adds	r7, #40	; 0x28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000360 	.word	0x20000360

08003540 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af02      	add	r7, sp, #8
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <prvProcessExpiredTimer+0x94>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3304      	adds	r3, #4
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fae8 	bl	8001b2e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d022      	beq.n	80035b2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	18d1      	adds	r1, r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	6978      	ldr	r0, [r7, #20]
 800357a:	f000 f8d1 	bl	8003720 <prvInsertTimerInActiveList>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01f      	beq.n	80035c4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003584:	2300      	movs	r3, #0
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	2100      	movs	r1, #0
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7ff ff88 	bl	80034a4 <xTimerGenericCommand>
 8003594:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d113      	bne.n	80035c4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	60fb      	str	r3, [r7, #12]
    }
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	6978      	ldr	r0, [r7, #20]
 80035ca:	4798      	blx	r3
    }
 80035cc:	bf00      	nop
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000358 	.word	0x20000358

080035d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035e0:	f107 0308 	add.w	r3, r7, #8
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f857 	bl	8003698 <prvGetNextExpireTime>
 80035ea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4619      	mov	r1, r3
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f803 	bl	80035fc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80035f6:	f000 f8d5 	bl	80037a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035fa:	e7f1      	b.n	80035e0 <prvTimerTask+0x8>

080035fc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003606:	f7ff fa19 	bl	8002a3c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800360a:	f107 0308 	add.w	r3, r7, #8
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f866 	bl	80036e0 <prvSampleTimeNow>
 8003614:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d130      	bne.n	800367e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10a      	bne.n	8003638 <prvProcessTimerOrBlockTask+0x3c>
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	429a      	cmp	r2, r3
 8003628:	d806      	bhi.n	8003638 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800362a:	f7ff fa15 	bl	8002a58 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800362e:	68f9      	ldr	r1, [r7, #12]
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff85 	bl	8003540 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003636:	e024      	b.n	8003682 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <prvProcessTimerOrBlockTask+0x90>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <prvProcessTimerOrBlockTask+0x50>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <prvProcessTimerOrBlockTask+0x52>
 800364c:	2300      	movs	r3, #0
 800364e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <prvProcessTimerOrBlockTask+0x94>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	4619      	mov	r1, r3
 800365e:	f7fe ffb7 	bl	80025d0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003662:	f7ff f9f9 	bl	8002a58 <xTaskResumeAll>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <prvProcessTimerOrBlockTask+0x98>)
 800366e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	f3bf 8f6f 	isb	sy
    }
 800367c:	e001      	b.n	8003682 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800367e:	f7ff f9eb 	bl	8002a58 <xTaskResumeAll>
    }
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	2000035c 	.word	0x2000035c
 8003690:	20000360 	.word	0x20000360
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036a0:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <prvGetNextExpireTime+0x44>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <prvGetNextExpireTime+0x16>
 80036aa:	2201      	movs	r2, #1
 80036ac:	e000      	b.n	80036b0 <prvGetNextExpireTime+0x18>
 80036ae:	2200      	movs	r2, #0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <prvGetNextExpireTime+0x44>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e001      	b.n	80036cc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80036cc:	68fb      	ldr	r3, [r7, #12]
    }
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000358 	.word	0x20000358

080036e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80036e8:	f7ff fa56 	bl	8002b98 <xTaskGetTickCount>
 80036ec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <prvSampleTimeNow+0x3c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d205      	bcs.n	8003704 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80036f8:	f000 f91a 	bl	8003930 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e002      	b.n	800370a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800370a:	4a04      	ldr	r2, [pc, #16]	; (800371c <prvSampleTimeNow+0x3c>)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003710:	68fb      	ldr	r3, [r7, #12]
    }
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000368 	.word	0x20000368

08003720 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d812      	bhi.n	800376c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	1ad2      	subs	r2, r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003754:	2301      	movs	r3, #1
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e01b      	b.n	8003792 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <prvInsertTimerInActiveList+0x7c>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3304      	adds	r3, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f7fe f9a9 	bl	8001abc <vListInsert>
 800376a:	e012      	b.n	8003792 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d206      	bcs.n	8003782 <prvInsertTimerInActiveList+0x62>
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d302      	bcc.n	8003782 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800377c:	2301      	movs	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e007      	b.n	8003792 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <prvInsertTimerInActiveList+0x80>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7fe f995 	bl	8001abc <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003792:	697b      	ldr	r3, [r7, #20]
    }
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	2000035c 	.word	0x2000035c
 80037a0:	20000358 	.word	0x20000358

080037a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037aa:	e0ae      	b.n	800390a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f2c0 80aa 	blt.w	8003908 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	3304      	adds	r3, #4
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe f9b2 	bl	8001b2e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff87 	bl	80036e0 <prvSampleTimeNow>
 80037d2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b09      	cmp	r3, #9
 80037d8:	f200 8097 	bhi.w	800390a <prvProcessReceivedCommands+0x166>
 80037dc:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <prvProcessReceivedCommands+0x40>)
 80037de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e2:	bf00      	nop
 80037e4:	0800380d 	.word	0x0800380d
 80037e8:	0800380d 	.word	0x0800380d
 80037ec:	0800380d 	.word	0x0800380d
 80037f0:	08003881 	.word	0x08003881
 80037f4:	08003895 	.word	0x08003895
 80037f8:	080038df 	.word	0x080038df
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	0800380d 	.word	0x0800380d
 8003804:	08003881 	.word	0x08003881
 8003808:	08003895 	.word	0x08003895
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	b2da      	uxtb	r2, r3
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	18d1      	adds	r1, r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800382c:	f7ff ff78 	bl	8003720 <prvInsertTimerInActiveList>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d069      	beq.n	800390a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800383c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d05e      	beq.n	800390a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	441a      	add	r2, r3
 8003854:	2300      	movs	r3, #0
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2300      	movs	r3, #0
 800385a:	2100      	movs	r1, #0
 800385c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800385e:	f7ff fe21 	bl	80034a4 <xTimerGenericCommand>
 8003862:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d14f      	bne.n	800390a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	61bb      	str	r3, [r7, #24]
    }
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	b2da      	uxtb	r2, r3
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003892:	e03a      	b.n	800390a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <prvProcessReceivedCommands+0x126>
        __asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	617b      	str	r3, [r7, #20]
    }
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	18d1      	adds	r1, r2, r3
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	6a3a      	ldr	r2, [r7, #32]
 80038d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038d8:	f7ff ff22 	bl	8003720 <prvInsertTimerInActiveList>
                        break;
 80038dc:	e015      	b.n	800390a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d103      	bne.n	80038f4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80038ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ee:	f000 fbf5 	bl	80040dc <vPortFree>
 80038f2:	e00a      	b.n	800390a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003906:	e000      	b.n	800390a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003908:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <prvProcessReceivedCommands+0x188>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f107 0108 	add.w	r1, r7, #8
 8003912:	2200      	movs	r2, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe fc09 	bl	800212c <xQueueReceive>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	f47f af45 	bne.w	80037ac <prvProcessReceivedCommands+0x8>
        }
    }
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000360 	.word	0x20000360

08003930 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003936:	e048      	b.n	80039ca <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <prvSwitchTimerLists+0xc0>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003942:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <prvSwitchTimerLists+0xc0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3304      	adds	r3, #4
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe f8ec 	bl	8001b2e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02e      	beq.n	80039ca <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	429a      	cmp	r2, r3
 800397c:	d90e      	bls.n	800399c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <prvSwitchTimerLists+0xc0>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3304      	adds	r3, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fe f891 	bl	8001abc <vListInsert>
 800399a:	e016      	b.n	80039ca <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2300      	movs	r3, #0
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	2100      	movs	r1, #0
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f7ff fd7c 	bl	80034a4 <xTimerGenericCommand>
 80039ac:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <prvSwitchTimerLists+0x9a>
        __asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	603b      	str	r3, [r7, #0]
    }
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039ca:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <prvSwitchTimerLists+0xc0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1b1      	bne.n	8003938 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <prvSwitchTimerLists+0xc0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <prvSwitchTimerLists+0xc4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <prvSwitchTimerLists+0xc0>)
 80039e0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <prvSwitchTimerLists+0xc4>)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	6013      	str	r3, [r2, #0]
    }
 80039e8:	bf00      	nop
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000358 	.word	0x20000358
 80039f4:	2000035c 	.word	0x2000035c

080039f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80039fc:	f000 f964 	bl	8003cc8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <prvCheckForValidListAndQueue+0x54>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d11d      	bne.n	8003a44 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a08:	4811      	ldr	r0, [pc, #68]	; (8003a50 <prvCheckForValidListAndQueue+0x58>)
 8003a0a:	f7fe f806 	bl	8001a1a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a0e:	4811      	ldr	r0, [pc, #68]	; (8003a54 <prvCheckForValidListAndQueue+0x5c>)
 8003a10:	f7fe f803 	bl	8001a1a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <prvCheckForValidListAndQueue+0x60>)
 8003a16:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <prvCheckForValidListAndQueue+0x58>)
 8003a18:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <prvCheckForValidListAndQueue+0x64>)
 8003a1c:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <prvCheckForValidListAndQueue+0x5c>)
 8003a1e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a20:	2200      	movs	r2, #0
 8003a22:	210c      	movs	r1, #12
 8003a24:	200a      	movs	r0, #10
 8003a26:	f7fe f915 	bl	8001c54 <xQueueGenericCreate>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <prvCheckForValidListAndQueue+0x54>)
 8003a2e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <prvCheckForValidListAndQueue+0x54>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <prvCheckForValidListAndQueue+0x54>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4908      	ldr	r1, [pc, #32]	; (8003a60 <prvCheckForValidListAndQueue+0x68>)
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fd94 	bl	800256c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a44:	f000 f970 	bl	8003d28 <vPortExitCritical>
    }
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000360 	.word	0x20000360
 8003a50:	20000330 	.word	0x20000330
 8003a54:	20000344 	.word	0x20000344
 8003a58:	20000358 	.word	0x20000358
 8003a5c:	2000035c 	.word	0x2000035c
 8003a60:	0800b3b8 	.word	0x0800b3b8

08003a64 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3b04      	subs	r3, #4
 8003a74:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3b04      	subs	r3, #4
 8003a82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f023 0201 	bic.w	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3b04      	subs	r3, #4
 8003a92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003a94:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <pxPortInitialiseStack+0x64>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3b14      	subs	r3, #20
 8003a9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3b04      	subs	r3, #4
 8003aaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f06f 0202 	mvn.w	r2, #2
 8003ab2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3b20      	subs	r3, #32
 8003ab8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003aba:	68fb      	ldr	r3, [r7, #12]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	08003acd 	.word	0x08003acd

08003acc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <prvTaskExitError+0x54>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ade:	d00a      	beq.n	8003af6 <prvTaskExitError+0x2a>
        __asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	60fb      	str	r3, [r7, #12]
    }
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <prvTaskExitError+0x28>
        __asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	60bb      	str	r3, [r7, #8]
    }
 8003b08:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b0a:	bf00      	nop
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0fc      	beq.n	8003b0c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b12:	bf00      	nop
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	20000018 	.word	0x20000018
	...

08003b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b30:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <pxCurrentTCBConst2>)
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	6808      	ldr	r0, [r1, #0]
 8003b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3a:	f380 8809 	msr	PSP, r0
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f380 8811 	msr	BASEPRI, r0
 8003b4a:	4770      	bx	lr
 8003b4c:	f3af 8000 	nop.w

08003b50 <pxCurrentTCBConst2>:
 8003b50:	2000022c 	.word	0x2000022c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop

08003b58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003b58:	4808      	ldr	r0, [pc, #32]	; (8003b7c <prvPortStartFirstTask+0x24>)
 8003b5a:	6800      	ldr	r0, [r0, #0]
 8003b5c:	6800      	ldr	r0, [r0, #0]
 8003b5e:	f380 8808 	msr	MSP, r0
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f380 8814 	msr	CONTROL, r0
 8003b6a:	b662      	cpsie	i
 8003b6c:	b661      	cpsie	f
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	df00      	svc	0
 8003b78:	bf00      	nop
 8003b7a:	0000      	.short	0x0000
 8003b7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop

08003b84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b8a:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <xPortStartScheduler+0x120>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a46      	ldr	r2, [pc, #280]	; (8003ca8 <xPortStartScheduler+0x124>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d10a      	bne.n	8003baa <xPortStartScheduler+0x26>
        __asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	613b      	str	r3, [r7, #16]
    }
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003baa:	4b3e      	ldr	r3, [pc, #248]	; (8003ca4 <xPortStartScheduler+0x120>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a3f      	ldr	r2, [pc, #252]	; (8003cac <xPortStartScheduler+0x128>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10a      	bne.n	8003bca <xPortStartScheduler+0x46>
        __asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	60fb      	str	r3, [r7, #12]
    }
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bca:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <xPortStartScheduler+0x12c>)
 8003bcc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	22ff      	movs	r2, #255	; 0xff
 8003bda:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <xPortStartScheduler+0x130>)
 8003bf0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bf2:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <xPortStartScheduler+0x134>)
 8003bf4:	2207      	movs	r2, #7
 8003bf6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bf8:	e009      	b.n	8003c0e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003bfa:	4b2f      	ldr	r3, [pc, #188]	; (8003cb8 <xPortStartScheduler+0x134>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	4a2d      	ldr	r2, [pc, #180]	; (8003cb8 <xPortStartScheduler+0x134>)
 8003c02:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d0ef      	beq.n	8003bfa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <xPortStartScheduler+0x134>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f1c3 0307 	rsb	r3, r3, #7
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d00a      	beq.n	8003c3c <xPortStartScheduler+0xb8>
        __asm volatile
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	60bb      	str	r3, [r7, #8]
    }
 8003c38:	bf00      	nop
 8003c3a:	e7fe      	b.n	8003c3a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c3c:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <xPortStartScheduler+0x134>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <xPortStartScheduler+0x134>)
 8003c44:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c46:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <xPortStartScheduler+0x134>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c4e:	4a1a      	ldr	r2, [pc, #104]	; (8003cb8 <xPortStartScheduler+0x134>)
 8003c50:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003c5a:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <xPortStartScheduler+0x138>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a17      	ldr	r2, [pc, #92]	; (8003cbc <xPortStartScheduler+0x138>)
 8003c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c64:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c66:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <xPortStartScheduler+0x138>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <xPortStartScheduler+0x138>)
 8003c6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c70:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003c72:	f000 f8e3 	bl	8003e3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <xPortStartScheduler+0x13c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003c7c:	f000 f902 	bl	8003e84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c80:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <xPortStartScheduler+0x140>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0f      	ldr	r2, [pc, #60]	; (8003cc4 <xPortStartScheduler+0x140>)
 8003c86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c8a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003c8c:	f7ff ff64 	bl	8003b58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003c90:	f7ff f860 	bl	8002d54 <vTaskSwitchContext>
    prvTaskExitError();
 8003c94:	f7ff ff1a 	bl	8003acc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	e000ed00 	.word	0xe000ed00
 8003ca8:	410fc271 	.word	0x410fc271
 8003cac:	410fc270 	.word	0x410fc270
 8003cb0:	e000e400 	.word	0xe000e400
 8003cb4:	2000036c 	.word	0x2000036c
 8003cb8:	20000370 	.word	0x20000370
 8003cbc:	e000ed20 	.word	0xe000ed20
 8003cc0:	20000018 	.word	0x20000018
 8003cc4:	e000ef34 	.word	0xe000ef34

08003cc8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
        __asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	607b      	str	r3, [r7, #4]
    }
 8003ce0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <vPortEnterCritical+0x58>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <vPortEnterCritical+0x58>)
 8003cea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003cec:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <vPortEnterCritical+0x58>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d10f      	bne.n	8003d14 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <vPortEnterCritical+0x5c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <vPortEnterCritical+0x4c>
        __asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	603b      	str	r3, [r7, #0]
    }
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <vPortEnterCritical+0x4a>
    }
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	20000018 	.word	0x20000018
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d2e:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <vPortExitCritical+0x50>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <vPortExitCritical+0x24>
        __asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	607b      	str	r3, [r7, #4]
    }
 8003d48:	bf00      	nop
 8003d4a:	e7fe      	b.n	8003d4a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <vPortExitCritical+0x50>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <vPortExitCritical+0x50>)
 8003d54:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <vPortExitCritical+0x50>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d105      	bne.n	8003d6a <vPortExitCritical+0x42>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f383 8811 	msr	BASEPRI, r3
    }
 8003d68:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000018 	.word	0x20000018
 8003d7c:	00000000 	.word	0x00000000

08003d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003d80:	f3ef 8009 	mrs	r0, PSP
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <pxCurrentTCBConst>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f01e 0f10 	tst.w	lr, #16
 8003d90:	bf08      	it	eq
 8003d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9a:	6010      	str	r0, [r2, #0]
 8003d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003da4:	f380 8811 	msr	BASEPRI, r0
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f7fe ffd0 	bl	8002d54 <vTaskSwitchContext>
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f380 8811 	msr	BASEPRI, r0
 8003dbc:	bc09      	pop	{r0, r3}
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	6808      	ldr	r0, [r1, #0]
 8003dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc6:	f01e 0f10 	tst.w	lr, #16
 8003dca:	bf08      	it	eq
 8003dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003dd0:	f380 8809 	msr	PSP, r0
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w

08003de0 <pxCurrentTCBConst>:
 8003de0:	2000022c 	.word	0x2000022c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
        __asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	607b      	str	r3, [r7, #4]
    }
 8003e00:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003e02:	f002 fe19 	bl	8006a38 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e06:	f7fe fee9 	bl	8002bdc <xTaskIncrementTick>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d006      	beq.n	8003e1e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003e10:	f002 fe70 	bl	8006af4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <SysTick_Handler+0x50>)
 8003e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e001      	b.n	8003e22 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003e1e:	f002 fe4d 	bl	8006abc <SEGGER_SYSVIEW_RecordExitISR>
 8003e22:	2300      	movs	r3, #0
 8003e24:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f383 8811 	msr	BASEPRI, r3
    }
 8003e2c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <vPortSetupTimerInterrupt+0x34>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <vPortSetupTimerInterrupt+0x38>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <vPortSetupTimerInterrupt+0x3c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <vPortSetupTimerInterrupt+0x40>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	099b      	lsrs	r3, r3, #6
 8003e58:	4a09      	ldr	r2, [pc, #36]	; (8003e80 <vPortSetupTimerInterrupt+0x44>)
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e5e:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <vPortSetupTimerInterrupt+0x34>)
 8003e60:	2207      	movs	r2, #7
 8003e62:	601a      	str	r2, [r3, #0]
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000e010 	.word	0xe000e010
 8003e74:	e000e018 	.word	0xe000e018
 8003e78:	20000038 	.word	0x20000038
 8003e7c:	10624dd3 	.word	0x10624dd3
 8003e80:	e000e014 	.word	0xe000e014

08003e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003e84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e94 <vPortEnableVFP+0x10>
 8003e88:	6801      	ldr	r1, [r0, #0]
 8003e8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e8e:	6001      	str	r1, [r0, #0]
 8003e90:	4770      	bx	lr
 8003e92:	0000      	.short	0x0000
 8003e94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop

08003e9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003ea2:	f3ef 8305 	mrs	r3, IPSR
 8003ea6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	d914      	bls.n	8003ed8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003eae:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <vPortValidateInterruptPriority+0x70>)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003eb8:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <vPortValidateInterruptPriority+0x74>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	7afa      	ldrb	r2, [r7, #11]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d20a      	bcs.n	8003ed8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	607b      	str	r3, [r7, #4]
    }
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ed8:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <vPortValidateInterruptPriority+0x78>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <vPortValidateInterruptPriority+0x7c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d90a      	bls.n	8003efe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	603b      	str	r3, [r7, #0]
    }
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <vPortValidateInterruptPriority+0x60>
    }
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	e000e3f0 	.word	0xe000e3f0
 8003f10:	2000036c 	.word	0x2000036c
 8003f14:	e000ed0c 	.word	0xe000ed0c
 8003f18:	20000370 	.word	0x20000370

08003f1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003f28:	f7fe fd88 	bl	8002a3c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f2c:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <pvPortMalloc+0x1a8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003f34:	f000 f934 	bl	80041a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f38:	4b63      	ldr	r3, [pc, #396]	; (80040c8 <pvPortMalloc+0x1ac>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f040 80a7 	bne.w	8004094 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02d      	beq.n	8003fa8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d227      	bcs.n	8003fa8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003f58:	2208      	movs	r2, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d021      	beq.n	8003fae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f023 0307 	bic.w	r3, r3, #7
 8003f70:	3308      	adds	r3, #8
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d214      	bcs.n	8003fa2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f023 0307 	bic.w	r3, r3, #7
 8003f7e:	3308      	adds	r3, #8
 8003f80:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d010      	beq.n	8003fae <pvPortMalloc+0x92>
        __asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	617b      	str	r3, [r7, #20]
    }
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fa6:	e002      	b.n	8003fae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	e000      	b.n	8003fb0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d06e      	beq.n	8004094 <pvPortMalloc+0x178>
 8003fb6:	4b45      	ldr	r3, [pc, #276]	; (80040cc <pvPortMalloc+0x1b0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d869      	bhi.n	8004094 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003fc0:	4b43      	ldr	r3, [pc, #268]	; (80040d0 <pvPortMalloc+0x1b4>)
 8003fc2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003fc4:	4b42      	ldr	r3, [pc, #264]	; (80040d0 <pvPortMalloc+0x1b4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fca:	e004      	b.n	8003fd6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d903      	bls.n	8003fe8 <pvPortMalloc+0xcc>
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f1      	bne.n	8003fcc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003fe8:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <pvPortMalloc+0x1a8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d050      	beq.n	8004094 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2208      	movs	r2, #8
 8003ff8:	4413      	add	r3, r2
 8003ffa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1ad2      	subs	r2, r2, r3
 800400c:	2308      	movs	r3, #8
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	429a      	cmp	r2, r3
 8004012:	d91f      	bls.n	8004054 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <pvPortMalloc+0x120>
        __asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	613b      	str	r3, [r7, #16]
    }
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800404e:	69b8      	ldr	r0, [r7, #24]
 8004050:	f000 f908 	bl	8004264 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004054:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <pvPortMalloc+0x1b0>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <pvPortMalloc+0x1b0>)
 8004060:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <pvPortMalloc+0x1b0>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <pvPortMalloc+0x1b8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d203      	bcs.n	8004076 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <pvPortMalloc+0x1b0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <pvPortMalloc+0x1b8>)
 8004074:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <pvPortMalloc+0x1ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	431a      	orrs	r2, r3
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800408a:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <pvPortMalloc+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3301      	adds	r3, #1
 8004090:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <pvPortMalloc+0x1bc>)
 8004092:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004094:	f7fe fce0 	bl	8002a58 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <pvPortMalloc+0x19c>
        __asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60fb      	str	r3, [r7, #12]
    }
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80040b8:	69fb      	ldr	r3, [r7, #28]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3728      	adds	r7, #40	; 0x28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20012f7c 	.word	0x20012f7c
 80040c8:	20012f90 	.word	0x20012f90
 80040cc:	20012f80 	.word	0x20012f80
 80040d0:	20012f74 	.word	0x20012f74
 80040d4:	20012f84 	.word	0x20012f84
 80040d8:	20012f88 	.word	0x20012f88

080040dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d04d      	beq.n	800418a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80040ee:	2308      	movs	r3, #8
 80040f0:	425b      	negs	r3, r3
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4413      	add	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	4b24      	ldr	r3, [pc, #144]	; (8004194 <vPortFree+0xb8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <vPortFree+0x44>
        __asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60fb      	str	r3, [r7, #12]
    }
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <vPortFree+0x62>
        __asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60bb      	str	r3, [r7, #8]
    }
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	4b14      	ldr	r3, [pc, #80]	; (8004194 <vPortFree+0xb8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01e      	beq.n	800418a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11a      	bne.n	800418a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <vPortFree+0xb8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	43db      	mvns	r3, r3
 800415e:	401a      	ands	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004164:	f7fe fc6a 	bl	8002a3c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <vPortFree+0xbc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4413      	add	r3, r2
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <vPortFree+0xbc>)
 8004174:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004176:	6938      	ldr	r0, [r7, #16]
 8004178:	f000 f874 	bl	8004264 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <vPortFree+0xc0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	4a06      	ldr	r2, [pc, #24]	; (800419c <vPortFree+0xc0>)
 8004184:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004186:	f7fe fc67 	bl	8002a58 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800418a:	bf00      	nop
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20012f90 	.word	0x20012f90
 8004198:	20012f80 	.word	0x20012f80
 800419c:	20012f8c 	.word	0x20012f8c

080041a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80041aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <prvHeapInit+0xac>)
 80041ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00c      	beq.n	80041d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3307      	adds	r3, #7
 80041be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0307 	bic.w	r3, r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	4a1f      	ldr	r2, [pc, #124]	; (800424c <prvHeapInit+0xac>)
 80041d0:	4413      	add	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041d8:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <prvHeapInit+0xb0>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80041de:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <prvHeapInit+0xb0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4413      	add	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80041ec:	2208      	movs	r2, #8
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0307 	bic.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4a15      	ldr	r2, [pc, #84]	; (8004254 <prvHeapInit+0xb4>)
 8004200:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <prvHeapInit+0xb4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800420a:	4b12      	ldr	r3, [pc, #72]	; (8004254 <prvHeapInit+0xb4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	1ad2      	subs	r2, r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <prvHeapInit+0xb4>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <prvHeapInit+0xb8>)
 800422e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a09      	ldr	r2, [pc, #36]	; (800425c <prvHeapInit+0xbc>)
 8004236:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <prvHeapInit+0xc0>)
 800423a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	20000374 	.word	0x20000374
 8004250:	20012f74 	.word	0x20012f74
 8004254:	20012f7c 	.word	0x20012f7c
 8004258:	20012f84 	.word	0x20012f84
 800425c:	20012f80 	.word	0x20012f80
 8004260:	20012f90 	.word	0x20012f90

08004264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <prvInsertBlockIntoFreeList+0xac>)
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e002      	b.n	8004278 <prvInsertBlockIntoFreeList+0x14>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	d8f7      	bhi.n	8004272 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	4413      	add	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d108      	bne.n	80042a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	441a      	add	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	441a      	add	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d118      	bne.n	80042ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <prvInsertBlockIntoFreeList+0xb0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d00d      	beq.n	80042e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e008      	b.n	80042f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <prvInsertBlockIntoFreeList+0xb0>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e003      	b.n	80042f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d002      	beq.n	8004302 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20012f74 	.word	0x20012f74
 8004314:	20012f7c 	.word	0x20012f7c

08004318 <GPIO_PeriClockControl>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d161      	bne.n	80043ee <GPIO_PeriClockControl+0xd6>
		if(pGPIOx == GPIOA)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a33      	ldr	r2, [pc, #204]	; (80043fc <GPIO_PeriClockControl+0xe4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d106      	bne.n	8004340 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8004332:	4b33      	ldr	r3, [pc, #204]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	4a32      	ldr	r2, [pc, #200]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_EN();
		}
	} else {
		//TODO
	}
}
 800433e:	e056      	b.n	80043ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a30      	ldr	r2, [pc, #192]	; (8004404 <GPIO_PeriClockControl+0xec>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d106      	bne.n	8004356 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8004348:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	4a2c      	ldr	r2, [pc, #176]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 800434e:	f043 0302 	orr.w	r3, r3, #2
 8004352:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004354:	e04b      	b.n	80043ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <GPIO_PeriClockControl+0xf0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d106      	bne.n	800436c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800435e:	4b28      	ldr	r3, [pc, #160]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4a27      	ldr	r2, [pc, #156]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	6313      	str	r3, [r2, #48]	; 0x30
}
 800436a:	e040      	b.n	80043ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a27      	ldr	r2, [pc, #156]	; (800440c <GPIO_PeriClockControl+0xf4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d106      	bne.n	8004382 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8004374:	4b22      	ldr	r3, [pc, #136]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	4a21      	ldr	r2, [pc, #132]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 800437a:	f043 0308 	orr.w	r3, r3, #8
 800437e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004380:	e035      	b.n	80043ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a22      	ldr	r2, [pc, #136]	; (8004410 <GPIO_PeriClockControl+0xf8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d106      	bne.n	8004398 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 8004390:	f043 0310 	orr.w	r3, r3, #16
 8004394:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004396:	e02a      	b.n	80043ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <GPIO_PeriClockControl+0xfc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d106      	bne.n	80043ae <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80043a0:	4b17      	ldr	r3, [pc, #92]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	4a16      	ldr	r2, [pc, #88]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 80043a6:	f043 0320 	orr.w	r3, r3, #32
 80043aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80043ac:	e01f      	b.n	80043ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a19      	ldr	r2, [pc, #100]	; (8004418 <GPIO_PeriClockControl+0x100>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d106      	bne.n	80043c4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	4a11      	ldr	r2, [pc, #68]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 80043bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80043c2:	e014      	b.n	80043ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a15      	ldr	r2, [pc, #84]	; (800441c <GPIO_PeriClockControl+0x104>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d106      	bne.n	80043da <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	4a0b      	ldr	r2, [pc, #44]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 80043d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80043d8:	e009      	b.n	80043ee <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a10      	ldr	r2, [pc, #64]	; (8004420 <GPIO_PeriClockControl+0x108>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d105      	bne.n	80043ee <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	4a06      	ldr	r2, [pc, #24]	; (8004400 <GPIO_PeriClockControl+0xe8>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40020000 	.word	0x40020000
 8004400:	40023800 	.word	0x40023800
 8004404:	40020400 	.word	0x40020400
 8004408:	40020800 	.word	0x40020800
 800440c:	40020c00 	.word	0x40020c00
 8004410:	40021000 	.word	0x40021000
 8004414:	40021400 	.word	0x40021400
 8004418:	40021800 	.word	0x40021800
 800441c:	40021c00 	.word	0x40021c00
 8004420:	40022000 	.word	0x40022000

08004424 <GPIO_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp. register
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff ff6e 	bl	8004318 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	795b      	ldrb	r3, [r3, #5]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d820      	bhi.n	8004486 <GPIO_Init+0x62>
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	795b      	ldrb	r3, [r3, #5]
 8004448:	461a      	mov	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	791b      	ldrb	r3, [r3, #4]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	791b      	ldrb	r3, [r3, #4]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	2103      	movs	r1, #3
 8004464:	fa01 f303 	lsl.w	r3, r1, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	4619      	mov	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	400a      	ands	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	430a      	orrs	r2, r1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	e0cb      	b.n	800461e <GPIO_Init+0x1fa>

	} else {
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT ) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	795b      	ldrb	r3, [r3, #5]
 800448a:	2b04      	cmp	r3, #4
 800448c:	d117      	bne.n	80044be <GPIO_Init+0x9a>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800448e:	4b4b      	ldr	r3, [pc, #300]	; (80045bc <GPIO_Init+0x198>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	7912      	ldrb	r2, [r2, #4]
 8004496:	4611      	mov	r1, r2
 8004498:	2201      	movs	r2, #1
 800449a:	408a      	lsls	r2, r1
 800449c:	4611      	mov	r1, r2
 800449e:	4a47      	ldr	r2, [pc, #284]	; (80045bc <GPIO_Init+0x198>)
 80044a0:	430b      	orrs	r3, r1
 80044a2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80044a4:	4b45      	ldr	r3, [pc, #276]	; (80045bc <GPIO_Init+0x198>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	7912      	ldrb	r2, [r2, #4]
 80044ac:	4611      	mov	r1, r2
 80044ae:	2201      	movs	r2, #1
 80044b0:	408a      	lsls	r2, r1
 80044b2:	43d2      	mvns	r2, r2
 80044b4:	4611      	mov	r1, r2
 80044b6:	4a41      	ldr	r2, [pc, #260]	; (80045bc <GPIO_Init+0x198>)
 80044b8:	400b      	ands	r3, r1
 80044ba:	6093      	str	r3, [r2, #8]
 80044bc:	e035      	b.n	800452a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT ) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	795b      	ldrb	r3, [r3, #5]
 80044c2:	2b05      	cmp	r3, #5
 80044c4:	d117      	bne.n	80044f6 <GPIO_Init+0xd2>
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80044c6:	4b3d      	ldr	r3, [pc, #244]	; (80045bc <GPIO_Init+0x198>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	7912      	ldrb	r2, [r2, #4]
 80044ce:	4611      	mov	r1, r2
 80044d0:	2201      	movs	r2, #1
 80044d2:	408a      	lsls	r2, r1
 80044d4:	4611      	mov	r1, r2
 80044d6:	4a39      	ldr	r2, [pc, #228]	; (80045bc <GPIO_Init+0x198>)
 80044d8:	430b      	orrs	r3, r1
 80044da:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80044dc:	4b37      	ldr	r3, [pc, #220]	; (80045bc <GPIO_Init+0x198>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	7912      	ldrb	r2, [r2, #4]
 80044e4:	4611      	mov	r1, r2
 80044e6:	2201      	movs	r2, #1
 80044e8:	408a      	lsls	r2, r1
 80044ea:	43d2      	mvns	r2, r2
 80044ec:	4611      	mov	r1, r2
 80044ee:	4a33      	ldr	r2, [pc, #204]	; (80045bc <GPIO_Init+0x198>)
 80044f0:	400b      	ands	r3, r1
 80044f2:	60d3      	str	r3, [r2, #12]
 80044f4:	e019      	b.n	800452a <GPIO_Init+0x106>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT ) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	795b      	ldrb	r3, [r3, #5]
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d115      	bne.n	800452a <GPIO_Init+0x106>
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80044fe:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <GPIO_Init+0x198>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	7912      	ldrb	r2, [r2, #4]
 8004506:	4611      	mov	r1, r2
 8004508:	2201      	movs	r2, #1
 800450a:	408a      	lsls	r2, r1
 800450c:	4611      	mov	r1, r2
 800450e:	4a2b      	ldr	r2, [pc, #172]	; (80045bc <GPIO_Init+0x198>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8004514:	4b29      	ldr	r3, [pc, #164]	; (80045bc <GPIO_Init+0x198>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	7912      	ldrb	r2, [r2, #4]
 800451c:	4611      	mov	r1, r2
 800451e:	2201      	movs	r2, #1
 8004520:	408a      	lsls	r2, r1
 8004522:	4611      	mov	r1, r2
 8004524:	4a25      	ldr	r2, [pc, #148]	; (80045bc <GPIO_Init+0x198>)
 8004526:	430b      	orrs	r3, r1
 8004528:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	791b      	ldrb	r3, [r3, #4]
 800452e:	089b      	lsrs	r3, r3, #2
 8004530:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	791b      	ldrb	r3, [r3, #4]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1f      	ldr	r2, [pc, #124]	; (80045c0 <GPIO_Init+0x19c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d04e      	beq.n	80045e4 <GPIO_Init+0x1c0>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <GPIO_Init+0x1a0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d032      	beq.n	80045b6 <GPIO_Init+0x192>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <GPIO_Init+0x1a4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d02b      	beq.n	80045b2 <GPIO_Init+0x18e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <GPIO_Init+0x1a8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d024      	beq.n	80045ae <GPIO_Init+0x18a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a19      	ldr	r2, [pc, #100]	; (80045d0 <GPIO_Init+0x1ac>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01d      	beq.n	80045aa <GPIO_Init+0x186>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <GPIO_Init+0x1b0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d016      	beq.n	80045a6 <GPIO_Init+0x182>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <GPIO_Init+0x1b4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00f      	beq.n	80045a2 <GPIO_Init+0x17e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <GPIO_Init+0x1b8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d008      	beq.n	800459e <GPIO_Init+0x17a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <GPIO_Init+0x1bc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d101      	bne.n	800459a <GPIO_Init+0x176>
 8004596:	2308      	movs	r3, #8
 8004598:	e025      	b.n	80045e6 <GPIO_Init+0x1c2>
 800459a:	2300      	movs	r3, #0
 800459c:	e023      	b.n	80045e6 <GPIO_Init+0x1c2>
 800459e:	2307      	movs	r3, #7
 80045a0:	e021      	b.n	80045e6 <GPIO_Init+0x1c2>
 80045a2:	2306      	movs	r3, #6
 80045a4:	e01f      	b.n	80045e6 <GPIO_Init+0x1c2>
 80045a6:	2305      	movs	r3, #5
 80045a8:	e01d      	b.n	80045e6 <GPIO_Init+0x1c2>
 80045aa:	2304      	movs	r3, #4
 80045ac:	e01b      	b.n	80045e6 <GPIO_Init+0x1c2>
 80045ae:	2303      	movs	r3, #3
 80045b0:	e019      	b.n	80045e6 <GPIO_Init+0x1c2>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e017      	b.n	80045e6 <GPIO_Init+0x1c2>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e015      	b.n	80045e6 <GPIO_Init+0x1c2>
 80045ba:	bf00      	nop
 80045bc:	40013c00 	.word	0x40013c00
 80045c0:	40020000 	.word	0x40020000
 80045c4:	40020400 	.word	0x40020400
 80045c8:	40020800 	.word	0x40020800
 80045cc:	40020c00 	.word	0x40020c00
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40021400 	.word	0x40021400
 80045d8:	40021800 	.word	0x40021800
 80045dc:	40021c00 	.word	0x40021c00
 80045e0:	40022000 	.word	0x40022000
 80045e4:	2300      	movs	r3, #0
 80045e6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80045e8:	4b59      	ldr	r3, [pc, #356]	; (8004750 <GPIO_Init+0x32c>)
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	4a58      	ldr	r2, [pc, #352]	; (8004750 <GPIO_Init+0x32c>)
 80045ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80045f4:	7c7a      	ldrb	r2, [r7, #17]
 80045f6:	7cbb      	ldrb	r3, [r7, #18]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	fa02 f103 	lsl.w	r1, r2, r3
 80045fe:	4a55      	ldr	r2, [pc, #340]	; (8004754 <GPIO_Init+0x330>)
 8004600:	7cfb      	ldrb	r3, [r7, #19]
 8004602:	3302      	adds	r3, #2
 8004604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8004608:	4b53      	ldr	r3, [pc, #332]	; (8004758 <GPIO_Init+0x334>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	7912      	ldrb	r2, [r2, #4]
 8004610:	4611      	mov	r1, r2
 8004612:	2201      	movs	r2, #1
 8004614:	408a      	lsls	r2, r1
 8004616:	4611      	mov	r1, r2
 8004618:	4a4f      	ldr	r2, [pc, #316]	; (8004758 <GPIO_Init+0x334>)
 800461a:	430b      	orrs	r3, r1
 800461c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	799b      	ldrb	r3, [r3, #6]
 8004622:	461a      	mov	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	791b      	ldrb	r3, [r3, #4]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	791b      	ldrb	r3, [r3, #4]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2103      	movs	r1, #3
 800463e:	fa01 f303 	lsl.w	r3, r1, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	4619      	mov	r1, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	400a      	ands	r2, r1
 800464c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6899      	ldr	r1, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	430a      	orrs	r2, r1
 800465c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	79db      	ldrb	r3, [r3, #7]
 8004662:	461a      	mov	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	791b      	ldrb	r3, [r3, #4]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	791b      	ldrb	r3, [r3, #4]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	2103      	movs	r1, #3
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	4619      	mov	r1, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	400a      	ands	r2, r1
 800468c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68d9      	ldr	r1, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	430a      	orrs	r2, r1
 800469c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7a1b      	ldrb	r3, [r3, #8]
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	791b      	ldrb	r3, [r3, #4]
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	791b      	ldrb	r3, [r3, #4]
 80046b8:	4619      	mov	r1, r3
 80046ba:	2301      	movs	r3, #1
 80046bc:	408b      	lsls	r3, r1
 80046be:	43db      	mvns	r3, r3
 80046c0:	4619      	mov	r1, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	400a      	ands	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6859      	ldr	r1, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	795b      	ldrb	r3, [r3, #5]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d131      	bne.n	8004746 <GPIO_Init+0x322>
		//configure the alt function registers.
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	791b      	ldrb	r3, [r3, #4]
 80046e6:	08db      	lsrs	r3, r3, #3
 80046e8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	791b      	ldrb	r3, [r3, #4]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	7c3a      	ldrb	r2, [r7, #16]
 80046fa:	3208      	adds	r2, #8
 80046fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	220f      	movs	r2, #15
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	4618      	mov	r0, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	7c3a      	ldrb	r2, [r7, #16]
 8004714:	4001      	ands	r1, r0
 8004716:	3208      	adds	r2, #8
 8004718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	7c3a      	ldrb	r2, [r7, #16]
 8004722:	3208      	adds	r2, #8
 8004724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7a5b      	ldrb	r3, [r3, #9]
 800472c:	461a      	mov	r2, r3
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	4618      	mov	r0, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	7c3a      	ldrb	r2, [r7, #16]
 800473e:	4301      	orrs	r1, r0
 8004740:	3208      	adds	r2, #8
 8004742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8004746:	bf00      	nop
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	40013800 	.word	0x40013800
 8004758:	40013c00 	.word	0x40013c00

0800475c <GPIO_ReadFromInputPin>:
 *
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	fa22 f303 	lsr.w	r3, r2, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]

   return value;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <GPIO_WriteToOutputPin>:
 *
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	70fb      	strb	r3, [r7, #3]
 8004794:	4613      	mov	r3, r2
 8004796:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8004798:	78bb      	ldrb	r3, [r7, #2]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d109      	bne.n	80047b2 <GPIO_WriteToOutputPin+0x2a>
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	2101      	movs	r1, #1
 80047a6:	fa01 f202 	lsl.w	r2, r1, r2
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	615a      	str	r2, [r3, #20]
	else
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
}
 80047b0:	e009      	b.n	80047c6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f202 	lsl.w	r2, r1, r2
 80047be:	43d2      	mvns	r2, r2
 80047c0:	401a      	ands	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	615a      	str	r2, [r3, #20]
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <I2C_ExecuteAddressPhaseRead>:


static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	460b      	mov	r3, r1
 8004828:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	611a      	str	r2, [r3, #16]
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <I2C_ClearADDRFlag>:


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle ) {
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL)) {
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01f      	beq.n	80048a0 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX) {
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	7f1b      	ldrb	r3, [r3, #28]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d112      	bne.n	800488e <I2C_ClearADDRFlag+0x44>
			if(pI2CHandle->RxSize  == 1) {
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d11f      	bne.n	80048b0 <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fa9e 	bl	8004db8 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 800488c:	e010      	b.n	80048b0 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	60fb      	str	r3, [r7, #12]
}
 800489e:	e007      	b.n	80048b0 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	60fb      	str	r3, [r7, #12]
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <I2C_GenerateStopCondition>:


void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <I2C_PeripheralControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi) {
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d106      	bne.n	80048f8 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	else
		pI2Cx->CR1 &= ~(1 << 0);
}
 80048f6:	e005      	b.n	8004904 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f023 0201 	bic.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	601a      	str	r2, [r3, #0]
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <I2C_PeriClockControl>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE) {
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d11f      	bne.n	8004962 <I2C_PeriClockControl+0x52>
		if(pI2Cx == I2C1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a12      	ldr	r2, [pc, #72]	; (8004970 <I2C_PeriClockControl+0x60>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d106      	bne.n	8004938 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 800492a:	4b12      	ldr	r3, [pc, #72]	; (8004974 <I2C_PeriClockControl+0x64>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	4a11      	ldr	r2, [pc, #68]	; (8004974 <I2C_PeriClockControl+0x64>)
 8004930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004934:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C3)
			I2C3_PCLK_EN();
	} else {
		//TODO
	}
}
 8004936:	e014      	b.n	8004962 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <I2C_PeriClockControl+0x68>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d106      	bne.n	800494e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <I2C_PeriClockControl+0x64>)
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	4a0b      	ldr	r2, [pc, #44]	; (8004974 <I2C_PeriClockControl+0x64>)
 8004946:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800494a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800494c:	e009      	b.n	8004962 <I2C_PeriClockControl+0x52>
		else if (pI2Cx == I2C3)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a0a      	ldr	r2, [pc, #40]	; (800497c <I2C_PeriClockControl+0x6c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d105      	bne.n	8004962 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8004956:	4b07      	ldr	r3, [pc, #28]	; (8004974 <I2C_PeriClockControl+0x64>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	4a06      	ldr	r2, [pc, #24]	; (8004974 <I2C_PeriClockControl+0x64>)
 800495c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004960:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40005400 	.word	0x40005400
 8004974:	40023800 	.word	0x40023800
 8004978:	40005800 	.word	0x40005800
 800497c:	40005c00 	.word	0x40005c00

08004980 <I2C_Init>:
 *
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2101      	movs	r1, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff ffbc 	bl	8004910 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7a5b      	ldrb	r3, [r3, #9]
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U;
 80049b2:	f000 fa1d 	bl	8004df0 <RCC_GetPCLK1Value>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4a47      	ldr	r2, [pc, #284]	; (8004ad8 <I2C_Init+0x158>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	0c9b      	lsrs	r3, r3, #18
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80049d0:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	7a1b      	ldrb	r3, [r3, #8]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	461a      	mov	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049ea:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a36      	ldr	r2, [pc, #216]	; (8004adc <I2C_Init+0x15c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d80f      	bhi.n	8004a26 <I2C_Init+0xa6>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004a06:	f000 f9f3 	bl	8004df0 <RCC_GetPCLK1Value>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004a18:	897b      	ldrh	r3, [r7, #10]
 8004a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e02d      	b.n	8004a82 <I2C_Init+0x102>
	} else {
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7a9b      	ldrb	r3, [r3, #10]
 8004a32:	039b      	lsls	r3, r3, #14
 8004a34:	461a      	mov	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	7a9b      	ldrb	r3, [r3, #10]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004a44:	f000 f9d4 	bl	8004df0 <RCC_GetPCLK1Value>
 8004a48:	4601      	mov	r1, r0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a58:	817b      	strh	r3, [r7, #10]
 8004a5a:	e00c      	b.n	8004a76 <I2C_Init+0xf6>
		else
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8004a5c:	f000 f9c8 	bl	8004df0 <RCC_GetPCLK1Value>
 8004a60:	4601      	mov	r1, r0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009a      	lsls	r2, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a74:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8004a76:	897b      	ldrh	r3, [r7, #10]
 8004a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <I2C_Init+0x15c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d809      	bhi.n	8004aa8 <I2C_Init+0x128>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8004a94:	f000 f9ac 	bl	8004df0 <RCC_GetPCLK1Value>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4a0f      	ldr	r2, [pc, #60]	; (8004ad8 <I2C_Init+0x158>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	0c9b      	lsrs	r3, r3, #18
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e00d      	b.n	8004ac4 <I2C_Init+0x144>
	else
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8004aa8:	f000 f9a2 	bl	8004df0 <RCC_GetPCLK1Value>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	0a5b      	lsrs	r3, r3, #9
 8004ab8:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <I2C_Init+0x160>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	09db      	lsrs	r3, r3, #7
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004ace:	621a      	str	r2, [r3, #32]

}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	431bde83 	.word	0x431bde83
 8004adc:	000186a0 	.word	0x000186a0
 8004ae0:	00044b83 	.word	0x00044b83

08004ae4 <I2C_GetFlagStatus>:
void I2C_DeInit(I2C_RegDef_t *pI2Cx) {

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName) {
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <I2C_GetFlagStatus+0x1c>
	return FLAG_RESET;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	70fb      	strb	r3, [r7, #3]
	uint32_t err_break;
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fe57 	bl	80047d2 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004b28:	e006      	b.n	8004b38 <I2C_MasterSendData+0x2c>
		if(err_break++ > 10000) break;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	617a      	str	r2, [r7, #20]
 8004b30:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d809      	bhi.n	8004b4c <I2C_MasterSendData+0x40>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ffd0 	bl	8004ae4 <I2C_GetFlagStatus>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ef      	beq.n	8004b2a <I2C_MasterSendData+0x1e>
 8004b4a:	e000      	b.n	8004b4e <I2C_MasterSendData+0x42>
		if(err_break++ > 10000) break;
 8004b4c:	bf00      	nop
	}

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fe4b 	bl	80047f2 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	err_break = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004b60:	e006      	b.n	8004b70 <I2C_MasterSendData+0x64>
		if(err_break++ > 10000) break;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	617a      	str	r2, [r7, #20]
 8004b68:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d809      	bhi.n	8004b84 <I2C_MasterSendData+0x78>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2102      	movs	r1, #2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ffb4 	bl	8004ae4 <I2C_GetFlagStatus>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0ef      	beq.n	8004b62 <I2C_MasterSendData+0x56>
 8004b82:	e000      	b.n	8004b86 <I2C_MasterSendData+0x7a>
		if(err_break++ > 10000) break;
 8004b84:	bf00      	nop
	}

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff fe5f 	bl	800484a <I2C_ClearADDRFlag>

	//6. send the data until length becomes 0

	while(Len > 0) {
 8004b8c:	e01f      	b.n	8004bce <I2C_MasterSendData+0xc2>
		err_break = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { //Wait till TXE is set
 8004b92:	e006      	b.n	8004ba2 <I2C_MasterSendData+0x96>
			if(err_break++ > 10000) break;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	617a      	str	r2, [r7, #20]
 8004b9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d809      	bhi.n	8004bb6 <I2C_MasterSendData+0xaa>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) { //Wait till TXE is set
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff ff9b 	bl	8004ae4 <I2C_GetFlagStatus>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ef      	beq.n	8004b94 <I2C_MasterSendData+0x88>
 8004bb4:	e000      	b.n	8004bb8 <I2C_MasterSendData+0xac>
			if(err_break++ > 10000) break;
 8004bb6:	bf00      	nop
		}
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	781a      	ldrb	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
		Len--;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	607b      	str	r3, [r7, #4]
	while(Len > 0) {
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1dc      	bne.n	8004b8e <I2C_MasterSendData+0x82>
	}

	//7. when Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8004bd8:	e006      	b.n	8004be8 <I2C_MasterSendData+0xdc>
		if(err_break++ > 10000) break;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	617a      	str	r2, [r7, #20]
 8004be0:	f242 7210 	movw	r2, #10000	; 0x2710
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d809      	bhi.n	8004bfc <I2C_MasterSendData+0xf0>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)) {
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2180      	movs	r1, #128	; 0x80
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff ff78 	bl	8004ae4 <I2C_GetFlagStatus>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0ef      	beq.n	8004bda <I2C_MasterSendData+0xce>
 8004bfa:	e000      	b.n	8004bfe <I2C_MasterSendData+0xf2>
		if(err_break++ > 10000) break;
 8004bfc:	bf00      	nop
	}

	err_break = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) {
 8004c02:	e006      	b.n	8004c12 <I2C_MasterSendData+0x106>
		if(err_break++ > 10000) break;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	617a      	str	r2, [r7, #20]
 8004c0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d809      	bhi.n	8004c26 <I2C_MasterSendData+0x11a>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)) {
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2104      	movs	r1, #4
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ff63 	bl	8004ae4 <I2C_GetFlagStatus>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0ef      	beq.n	8004c04 <I2C_MasterSendData+0xf8>
 8004c24:	e000      	b.n	8004c28 <I2C_MasterSendData+0x11c>
		if(err_break++ > 10000) break;
 8004c26:	bf00      	nop
	}

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)
 8004c28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d104      	bne.n	8004c3a <I2C_MasterSendData+0x12e>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fe3f 	bl	80048b8 <I2C_GenerateStopCondition>
}
 8004c3a:	bf00      	nop
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <I2C_MasterReceiveData>:


void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	461a      	mov	r2, r3
 8004c50:	460b      	mov	r3, r1
 8004c52:	71fb      	strb	r3, [r7, #7]
 8004c54:	4613      	mov	r3, r2
 8004c56:	71bb      	strb	r3, [r7, #6]
	uint32_t err_break;
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fdb8 	bl	80047d2 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	err_break = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004c66:	e006      	b.n	8004c76 <I2C_MasterReceiveData+0x34>
		if(err_break++ > 10000) break;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	617a      	str	r2, [r7, #20]
 8004c6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d809      	bhi.n	8004c8a <I2C_MasterReceiveData+0x48>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)) {
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ff31 	bl	8004ae4 <I2C_GetFlagStatus>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0ef      	beq.n	8004c68 <I2C_MasterReceiveData+0x26>
 8004c88:	e000      	b.n	8004c8c <I2C_MasterReceiveData+0x4a>
		if(err_break++ > 10000) break;
 8004c8a:	bf00      	nop
	}

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddr);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	79ba      	ldrb	r2, [r7, #6]
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fdc2 	bl	800481e <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	err_break = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004c9e:	e006      	b.n	8004cae <I2C_MasterReceiveData+0x6c>
		if(err_break++ > 10000) break;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	617a      	str	r2, [r7, #20]
 8004ca6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d809      	bhi.n	8004cc2 <I2C_MasterReceiveData+0x80>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)) {
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff ff15 	bl	8004ae4 <I2C_GetFlagStatus>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0ef      	beq.n	8004ca0 <I2C_MasterReceiveData+0x5e>
 8004cc0:	e000      	b.n	8004cc4 <I2C_MasterReceiveData+0x82>
		if(err_break++ > 10000) break;
 8004cc2:	bf00      	nop
	}


	//procedure to read only 1 byte from slave
	if(Len == 1) {
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d12c      	bne.n	8004d24 <I2C_MasterReceiveData+0xe2>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2100      	movs	r1, #0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 f871 	bl	8004db8 <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff fdb7 	bl	800484a <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		err_break = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004ce0:	e006      	b.n	8004cf0 <I2C_MasterReceiveData+0xae>
			if(err_break++ > 10000) break;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	617a      	str	r2, [r7, #20]
 8004ce8:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d809      	bhi.n	8004d04 <I2C_MasterReceiveData+0xc2>
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2140      	movs	r1, #64	; 0x40
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fef4 	bl	8004ae4 <I2C_GetFlagStatus>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ef      	beq.n	8004ce2 <I2C_MasterReceiveData+0xa0>
 8004d02:	e000      	b.n	8004d06 <I2C_MasterReceiveData+0xc4>
			if(err_break++ > 10000) break;
 8004d04:	bf00      	nop
		}

		//generate STOP condition
		if(Sr == I2C_DISABLE_SR )
 8004d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <I2C_MasterReceiveData+0xd6>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fdd0 	bl	80048b8 <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	701a      	strb	r2, [r3, #0]

	}


    //procedure to read data from slave when Len > 1
	if(Len > 1) {
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d938      	bls.n	8004d9c <I2C_MasterReceiveData+0x15a>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7ff fd8d 	bl	800484a <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for ( uint32_t i = Len ; i > 0 ; i--) {
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	e02f      	b.n	8004d96 <I2C_MasterReceiveData+0x154>
			//wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
				if(err_break++ > 10000) break;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	617a      	str	r2, [r7, #20]
 8004d3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d809      	bhi.n	8004d58 <I2C_MasterReceiveData+0x116>
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)) {
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2140      	movs	r1, #64	; 0x40
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff feca 	bl	8004ae4 <I2C_GetFlagStatus>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ef      	beq.n	8004d36 <I2C_MasterReceiveData+0xf4>
 8004d56:	e000      	b.n	8004d5a <I2C_MasterReceiveData+0x118>
				if(err_break++ > 10000) break;
 8004d58:	bf00      	nop
			}

			if(i == 2) { //if last 2 bytes are remaining
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d10e      	bne.n	8004d7e <I2C_MasterReceiveData+0x13c>
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_DISABLE);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f826 	bl	8004db8 <I2C_ManageAcking>
				//generate STOP condition
				if(Sr == I2C_DISABLE_SR )
 8004d6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d104      	bne.n	8004d7e <I2C_MasterReceiveData+0x13c>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fd9d 	bl	80048b8 <I2C_GenerateStopCondition>
			}
			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxBuffer++;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i = Len ; i > 0 ; i--) {
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1d3      	bne.n	8004d44 <I2C_MasterReceiveData+0x102>
		}
	}

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	7a5b      	ldrb	r3, [r3, #9]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d105      	bne.n	8004db0 <I2C_MasterReceiveData+0x16e>
		I2C_ManageAcking(pI2CHandle->pI2Cx,I2C_ACK_ENABLE);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2101      	movs	r1, #1
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f804 	bl	8004db8 <I2C_ManageAcking>
}
 8004db0:	bf00      	nop
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d106      	bne.n	8004dd8 <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]
	else
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
}
 8004dd6:	e005      	b.n	8004de4 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8004df6:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <RCC_GetPCLK1Value+0x9c>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	089b      	lsrs	r3, r3, #2
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8004e04:	7a7b      	ldrb	r3, [r7, #9]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8004e0a:	4b21      	ldr	r3, [pc, #132]	; (8004e90 <RCC_GetPCLK1Value+0xa0>)
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	e00b      	b.n	8004e28 <RCC_GetPCLK1Value+0x38>
	else if(clksrc == 1)
 8004e10:	7a7b      	ldrb	r3, [r7, #9]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d102      	bne.n	8004e1c <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8004e16:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <RCC_GetPCLK1Value+0xa4>)
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	e005      	b.n	8004e28 <RCC_GetPCLK1Value+0x38>
	else if (clksrc == 2)
 8004e1c:	7a7b      	ldrb	r3, [r7, #9]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d102      	bne.n	8004e28 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8004e22:	f000 f83d 	bl	8004ea0 <RCC_GetPLLOutputClock>
 8004e26:	60f8      	str	r0, [r7, #12]

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8004e28:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <RCC_GetPCLK1Value+0x9c>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8004e36:	7a3b      	ldrb	r3, [r7, #8]
 8004e38:	2b07      	cmp	r3, #7
 8004e3a:	d802      	bhi.n	8004e42 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	72fb      	strb	r3, [r7, #11]
 8004e40:	e005      	b.n	8004e4e <RCC_GetPCLK1Value+0x5e>
	else
		ahbp = AHB_PreScaler[temp-8];
 8004e42:	7a3b      	ldrb	r3, [r7, #8]
 8004e44:	3b08      	subs	r3, #8
 8004e46:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <RCC_GetPCLK1Value+0xa8>)
 8004e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e4c:	72fb      	strb	r3, [r7, #11]

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <RCC_GetPCLK1Value+0x9c>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8004e5c:	7a3b      	ldrb	r3, [r7, #8]
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d802      	bhi.n	8004e68 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	72bb      	strb	r3, [r7, #10]
 8004e66:	e004      	b.n	8004e72 <RCC_GetPCLK1Value+0x82>
	else
		apb1p = APB1_PreScaler[temp-4];
 8004e68:	7a3b      	ldrb	r3, [r7, #8]
 8004e6a:	3b04      	subs	r3, #4
 8004e6c:	4a0b      	ldr	r2, [pc, #44]	; (8004e9c <RCC_GetPCLK1Value+0xac>)
 8004e6e:	5cd3      	ldrb	r3, [r2, r3]
 8004e70:	72bb      	strb	r3, [r7, #10]

	pclk1 = (SystemClk / ahbp) /apb1p;
 8004e72:	7afb      	ldrb	r3, [r7, #11]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e7a:	7abb      	ldrb	r3, [r7, #10]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	607b      	str	r3, [r7, #4]

	return pclk1;
 8004e82:	687b      	ldr	r3, [r7, #4]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	007a1200 	.word	0x007a1200
 8004e98:	2000001c 	.word	0x2000001c
 8004e9c:	2000002c 	.word	0x2000002c

08004ea0 <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp )/ apb2p;

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock() {
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
	return 0;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <SPI_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d11f      	bne.n	8004f02 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <SPI_PeriClockControl+0x60>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d106      	bne.n	8004ed8 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <SPI_PeriClockControl+0x64>)
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	4a11      	ldr	r2, [pc, #68]	; (8004f14 <SPI_PeriClockControl+0x64>)
 8004ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ed4:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8004ed6:	e014      	b.n	8004f02 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a0f      	ldr	r2, [pc, #60]	; (8004f18 <SPI_PeriClockControl+0x68>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d106      	bne.n	8004eee <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <SPI_PeriClockControl+0x64>)
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	4a0b      	ldr	r2, [pc, #44]	; (8004f14 <SPI_PeriClockControl+0x64>)
 8004ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eea:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004eec:	e009      	b.n	8004f02 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <SPI_PeriClockControl+0x6c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d105      	bne.n	8004f02 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <SPI_PeriClockControl+0x64>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	4a06      	ldr	r2, [pc, #24]	; (8004f14 <SPI_PeriClockControl+0x64>)
 8004efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f00:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40013000 	.word	0x40013000
 8004f14:	40023800 	.word	0x40023800
 8004f18:	40003800 	.word	0x40003800
 8004f1c:	40003c00 	.word	0x40003c00

08004f20 <SPI_Init>:
 * @return            -
 *
 * @Note              -
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff ffbe 	bl	8004eb0 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	791b      	ldrb	r3, [r3, #4]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	795b      	ldrb	r3, [r3, #5]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d104      	bne.n	8004f58 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e014      	b.n	8004f82 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	795b      	ldrb	r3, [r3, #5]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d104      	bne.n	8004f6a <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e00b      	b.n	8004f82 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	795b      	ldrb	r3, [r3, #5]
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d107      	bne.n	8004f82 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f78:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f80:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	799b      	ldrb	r3, [r3, #6]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	79db      	ldrb	r3, [r3, #7]
 8004f94:	02db      	lsls	r3, r3, #11
 8004f96:	461a      	mov	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	7a1b      	ldrb	r3, [r3, #8]
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	7a5b      	ldrb	r3, [r3, #9]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	7a9b      	ldrb	r3, [r3, #10]
 8004fbc:	025b      	lsls	r3, r3, #9
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	601a      	str	r2, [r3, #0]

}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <SPI_Transfer>:
//			pRxBuffer++;
//		}
//	}
//}

uint32_t SPI_Transfer(SPI_RegDef_t *pSPIx, uint8_t data) {
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 8004fe2:	bf00      	nop
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f9      	beq.n	8004fe4 <SPI_Transfer+0xe>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f3      	bne.n	8004fe4 <SPI_Transfer+0xe>
	pSPIx->DR = data;
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]
	while(((pSPIx->SR & (SPI_TXE_FLAG | SPI_RXNE_FLAG)) == 0 || (pSPIx->SR & SPI_BUSY_FLAG)));
 8005002:	bf00      	nop
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f9      	beq.n	8005004 <SPI_Transfer+0x2e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f3      	bne.n	8005004 <SPI_Transfer+0x2e>
	return pSPIx->DR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <SPI_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d106      	bne.n	800504c <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 800504a:	e005      	b.n	8005058 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	601a      	str	r2, [r3, #0]
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <SPI_SSOEConfig>:
 * @return            -
 *
 * @Note              -
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d106      	bne.n	8005084 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f043 0204 	orr.w	r2, r3, #4
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8005082:	e005      	b.n	8005090 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f023 0204 	bic.w	r2, r3, #4
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	605a      	str	r2, [r3, #4]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <USART_IRQInterruptConfig>:
 * @return            -
 *
 * @Note              -
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	460a      	mov	r2, r1
 80050a6:	71fb      	strb	r3, [r7, #7]
 80050a8:	4613      	mov	r3, r2
 80050aa:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 80050ac:	79bb      	ldrb	r3, [r7, #6]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d133      	bne.n	800511a <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	2b1f      	cmp	r3, #31
 80050b6:	d80a      	bhi.n	80050ce <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80050b8:	4b35      	ldr	r3, [pc, #212]	; (8005190 <USART_IRQInterruptConfig+0xf4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	79fa      	ldrb	r2, [r7, #7]
 80050be:	2101      	movs	r1, #1
 80050c0:	fa01 f202 	lsl.w	r2, r1, r2
 80050c4:	4611      	mov	r1, r2
 80050c6:	4a32      	ldr	r2, [pc, #200]	; (8005190 <USART_IRQInterruptConfig+0xf4>)
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 80050cc:	e059      	b.n	8005182 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	2b1f      	cmp	r3, #31
 80050d2:	d90f      	bls.n	80050f4 <USART_IRQInterruptConfig+0x58>
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	2b3f      	cmp	r3, #63	; 0x3f
 80050d8:	d80c      	bhi.n	80050f4 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 80050da:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <USART_IRQInterruptConfig+0xf8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	79fa      	ldrb	r2, [r7, #7]
 80050e0:	f002 021f 	and.w	r2, r2, #31
 80050e4:	2101      	movs	r1, #1
 80050e6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ea:	4611      	mov	r1, r2
 80050ec:	4a29      	ldr	r2, [pc, #164]	; (8005194 <USART_IRQInterruptConfig+0xf8>)
 80050ee:	430b      	orrs	r3, r1
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e046      	b.n	8005182 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	2b3f      	cmp	r3, #63	; 0x3f
 80050f8:	d943      	bls.n	8005182 <USART_IRQInterruptConfig+0xe6>
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	2b5f      	cmp	r3, #95	; 0x5f
 80050fe:	d840      	bhi.n	8005182 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8005100:	4b25      	ldr	r3, [pc, #148]	; (8005198 <USART_IRQInterruptConfig+0xfc>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	79fa      	ldrb	r2, [r7, #7]
 8005106:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800510a:	2101      	movs	r1, #1
 800510c:	fa01 f202 	lsl.w	r2, r1, r2
 8005110:	4611      	mov	r1, r2
 8005112:	4a21      	ldr	r2, [pc, #132]	; (8005198 <USART_IRQInterruptConfig+0xfc>)
 8005114:	430b      	orrs	r3, r1
 8005116:	6013      	str	r3, [r2, #0]
}
 8005118:	e033      	b.n	8005182 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	2b1f      	cmp	r3, #31
 800511e:	d80a      	bhi.n	8005136 <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8005120:	4b1e      	ldr	r3, [pc, #120]	; (800519c <USART_IRQInterruptConfig+0x100>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	79fa      	ldrb	r2, [r7, #7]
 8005126:	2101      	movs	r1, #1
 8005128:	fa01 f202 	lsl.w	r2, r1, r2
 800512c:	4611      	mov	r1, r2
 800512e:	4a1b      	ldr	r2, [pc, #108]	; (800519c <USART_IRQInterruptConfig+0x100>)
 8005130:	430b      	orrs	r3, r1
 8005132:	6013      	str	r3, [r2, #0]
}
 8005134:	e025      	b.n	8005182 <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	2b1f      	cmp	r3, #31
 800513a:	d90f      	bls.n	800515c <USART_IRQInterruptConfig+0xc0>
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	2b3f      	cmp	r3, #63	; 0x3f
 8005140:	d80c      	bhi.n	800515c <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8005142:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <USART_IRQInterruptConfig+0x104>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	79fa      	ldrb	r2, [r7, #7]
 8005148:	f002 021f 	and.w	r2, r2, #31
 800514c:	2101      	movs	r1, #1
 800514e:	fa01 f202 	lsl.w	r2, r1, r2
 8005152:	4611      	mov	r1, r2
 8005154:	4a12      	ldr	r2, [pc, #72]	; (80051a0 <USART_IRQInterruptConfig+0x104>)
 8005156:	430b      	orrs	r3, r1
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e012      	b.n	8005182 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	2b05      	cmp	r3, #5
 8005160:	d90f      	bls.n	8005182 <USART_IRQInterruptConfig+0xe6>
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	2b5f      	cmp	r3, #95	; 0x5f
 8005166:	d80c      	bhi.n	8005182 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8005168:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <USART_IRQInterruptConfig+0x108>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	79fa      	ldrb	r2, [r7, #7]
 800516e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005172:	2101      	movs	r1, #1
 8005174:	fa01 f202 	lsl.w	r2, r1, r2
 8005178:	4611      	mov	r1, r2
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <USART_IRQInterruptConfig+0x108>)
 800517c:	430b      	orrs	r3, r1
 800517e:	6013      	str	r3, [r2, #0]
}
 8005180:	e7ff      	b.n	8005182 <USART_IRQInterruptConfig+0xe6>
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	e000e100 	.word	0xe000e100
 8005194:	e000e104 	.word	0xe000e104
 8005198:	e000e10c 	.word	0xe000e10c
 800519c:	e000e180 	.word	0xe000e180
 80051a0:	e000e184 	.word	0xe000e184
 80051a4:	e000e18c 	.word	0xe000e18c

080051a8 <USART_IRQPriorityConfig>:
 * @return            -
 *
 * @Note              -
 */
void USART_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	6039      	str	r1, [r7, #0]
 80051b2:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 80051c2:	7bbb      	ldrb	r3, [r7, #14]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	3304      	adds	r3, #4
 80051ca:	737b      	strb	r3, [r7, #13]

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80051d4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80051d8:	6819      	ldr	r1, [r3, #0]
 80051da:	7b7b      	ldrb	r3, [r7, #13]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	409a      	lsls	r2, r3
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80051e8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80051ec:	430a      	orrs	r2, r1
 80051ee:	601a      	str	r2, [r3, #0]

}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005200:	4803      	ldr	r0, [pc, #12]	; (8005210 <_cbSendSystemDesc+0x14>)
 8005202:	f001 fbc3 	bl	800698c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005206:	4803      	ldr	r0, [pc, #12]	; (8005214 <_cbSendSystemDesc+0x18>)
 8005208:	f001 fbc0 	bl	800698c <SEGGER_SYSVIEW_SendSysDesc>
}
 800520c:	bf00      	nop
 800520e:	bd80      	pop	{r7, pc}
 8005210:	0800b3c0 	.word	0x0800b3c0
 8005214:	0800b3f4 	.word	0x0800b3f4

08005218 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <SEGGER_SYSVIEW_Conf+0x20>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	4b05      	ldr	r3, [pc, #20]	; (8005238 <SEGGER_SYSVIEW_Conf+0x20>)
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <SEGGER_SYSVIEW_Conf+0x24>)
 8005226:	4a06      	ldr	r2, [pc, #24]	; (8005240 <SEGGER_SYSVIEW_Conf+0x28>)
 8005228:	f000 ff2c 	bl	8006084 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800522c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005230:	f000 ff6c 	bl	800610c <SEGGER_SYSVIEW_SetRAMBase>
}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000038 	.word	0x20000038
 800523c:	080051fd 	.word	0x080051fd
 8005240:	0800b928 	.word	0x0800b928

08005244 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005246:	b085      	sub	sp, #20
 8005248:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800524a:	2300      	movs	r3, #0
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	e033      	b.n	80052b8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005250:	491e      	ldr	r1, [pc, #120]	; (80052cc <_cbSendTaskList+0x88>)
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	491a      	ldr	r1, [pc, #104]	; (80052cc <_cbSendTaskList+0x88>)
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	3304      	adds	r3, #4
 8005270:	6819      	ldr	r1, [r3, #0]
 8005272:	4c16      	ldr	r4, [pc, #88]	; (80052cc <_cbSendTaskList+0x88>)
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4423      	add	r3, r4
 8005280:	3308      	adds	r3, #8
 8005282:	681c      	ldr	r4, [r3, #0]
 8005284:	4d11      	ldr	r5, [pc, #68]	; (80052cc <_cbSendTaskList+0x88>)
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	442b      	add	r3, r5
 8005292:	330c      	adds	r3, #12
 8005294:	681d      	ldr	r5, [r3, #0]
 8005296:	4e0d      	ldr	r6, [pc, #52]	; (80052cc <_cbSendTaskList+0x88>)
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4433      	add	r3, r6
 80052a4:	3310      	adds	r3, #16
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	462b      	mov	r3, r5
 80052ac:	4622      	mov	r2, r4
 80052ae:	f000 f8b5 	bl	800541c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3301      	adds	r3, #1
 80052b6:	607b      	str	r3, [r7, #4]
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <_cbSendTaskList+0x8c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d3c6      	bcc.n	8005250 <_cbSendTaskList+0xc>
  }
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052cc:	20012f94 	.word	0x20012f94
 80052d0:	20013034 	.word	0x20013034

080052d4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80052d4:	b5b0      	push	{r4, r5, r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80052da:	f7fd fc6d 	bl	8002bb8 <xTaskGetTickCountFromISR>
 80052de:	4603      	mov	r3, r0
 80052e0:	461a      	mov	r2, r3
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80052ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	f04f 0400 	mov.w	r4, #0
 80052f6:	f04f 0500 	mov.w	r5, #0
 80052fa:	015d      	lsls	r5, r3, #5
 80052fc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8005300:	0154      	lsls	r4, r2, #5
 8005302:	4622      	mov	r2, r4
 8005304:	462b      	mov	r3, r5
 8005306:	1a12      	subs	r2, r2, r0
 8005308:	eb63 0301 	sbc.w	r3, r3, r1
 800530c:	f04f 0400 	mov.w	r4, #0
 8005310:	f04f 0500 	mov.w	r5, #0
 8005314:	009d      	lsls	r5, r3, #2
 8005316:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800531a:	0094      	lsls	r4, r2, #2
 800531c:	4622      	mov	r2, r4
 800531e:	462b      	mov	r3, r5
 8005320:	1812      	adds	r2, r2, r0
 8005322:	eb41 0303 	adc.w	r3, r1, r3
 8005326:	f04f 0000 	mov.w	r0, #0
 800532a:	f04f 0100 	mov.w	r1, #0
 800532e:	00d9      	lsls	r1, r3, #3
 8005330:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005334:	00d0      	lsls	r0, r2, #3
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800533e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005342:	4610      	mov	r0, r2
 8005344:	4619      	mov	r1, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bdb0      	pop	{r4, r5, r7, pc}

0800534c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800535a:	2205      	movs	r2, #5
 800535c:	492b      	ldr	r1, [pc, #172]	; (800540c <SYSVIEW_AddTask+0xc0>)
 800535e:	68b8      	ldr	r0, [r7, #8]
 8005360:	f003 f97c 	bl	800865c <memcmp>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d04b      	beq.n	8005402 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800536a:	4b29      	ldr	r3, [pc, #164]	; (8005410 <SYSVIEW_AddTask+0xc4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b07      	cmp	r3, #7
 8005370:	d903      	bls.n	800537a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005372:	4828      	ldr	r0, [pc, #160]	; (8005414 <SYSVIEW_AddTask+0xc8>)
 8005374:	f001 fe08 	bl	8006f88 <SEGGER_SYSVIEW_Warn>
    return;
 8005378:	e044      	b.n	8005404 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800537a:	4b25      	ldr	r3, [pc, #148]	; (8005410 <SYSVIEW_AddTask+0xc4>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4926      	ldr	r1, [pc, #152]	; (8005418 <SYSVIEW_AddTask+0xcc>)
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800538e:	4b20      	ldr	r3, [pc, #128]	; (8005410 <SYSVIEW_AddTask+0xc4>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4921      	ldr	r1, [pc, #132]	; (8005418 <SYSVIEW_AddTask+0xcc>)
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	3304      	adds	r3, #4
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80053a4:	4b1a      	ldr	r3, [pc, #104]	; (8005410 <SYSVIEW_AddTask+0xc4>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	491b      	ldr	r1, [pc, #108]	; (8005418 <SYSVIEW_AddTask+0xcc>)
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	3308      	adds	r3, #8
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <SYSVIEW_AddTask+0xc4>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4916      	ldr	r1, [pc, #88]	; (8005418 <SYSVIEW_AddTask+0xcc>)
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	330c      	adds	r3, #12
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80053d0:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <SYSVIEW_AddTask+0xc4>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4910      	ldr	r1, [pc, #64]	; (8005418 <SYSVIEW_AddTask+0xcc>)
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3310      	adds	r3, #16
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <SYSVIEW_AddTask+0xc4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3301      	adds	r3, #1
 80053ec:	4a08      	ldr	r2, [pc, #32]	; (8005410 <SYSVIEW_AddTask+0xc4>)
 80053ee:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f80e 	bl	800541c <SYSVIEW_SendTaskInfo>
 8005400:	e000      	b.n	8005404 <SYSVIEW_AddTask+0xb8>
    return;
 8005402:	bf00      	nop

}
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	0800b404 	.word	0x0800b404
 8005410:	20013034 	.word	0x20013034
 8005414:	0800b40c 	.word	0x0800b40c
 8005418:	20012f94 	.word	0x20012f94

0800541c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800542a:	f107 0314 	add.w	r3, r7, #20
 800542e:	2214      	movs	r2, #20
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f003 f92e 	bl	8008694 <memset>
  TaskInfo.TaskID     = TaskID;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800544c:	f107 0314 	add.w	r3, r7, #20
 8005450:	4618      	mov	r0, r3
 8005452:	f001 f9a3 	bl	800679c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005456:	bf00      	nop
 8005458:	3728      	adds	r7, #40	; 0x28
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005466:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <_DoInit+0x98>)
 8005468:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2203      	movs	r2, #3
 800546e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2203      	movs	r2, #3
 8005474:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a20      	ldr	r2, [pc, #128]	; (80054fc <_DoInit+0x9c>)
 800547a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a20      	ldr	r2, [pc, #128]	; (8005500 <_DoInit+0xa0>)
 8005480:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005488:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a17      	ldr	r2, [pc, #92]	; (80054fc <_DoInit+0x9c>)
 80054a0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a17      	ldr	r2, [pc, #92]	; (8005504 <_DoInit+0xa4>)
 80054a6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2210      	movs	r2, #16
 80054ac:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3307      	adds	r3, #7
 80054c4:	4a10      	ldr	r2, [pc, #64]	; (8005508 <_DoInit+0xa8>)
 80054c6:	6810      	ldr	r0, [r2, #0]
 80054c8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054ca:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a0e      	ldr	r2, [pc, #56]	; (800550c <_DoInit+0xac>)
 80054d2:	6810      	ldr	r0, [r2, #0]
 80054d4:	6018      	str	r0, [r3, #0]
 80054d6:	8891      	ldrh	r1, [r2, #4]
 80054d8:	7992      	ldrb	r2, [r2, #6]
 80054da:	8099      	strh	r1, [r3, #4]
 80054dc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054de:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054e8:	f3bf 8f5f 	dmb	sy
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	200147e0 	.word	0x200147e0
 80054fc:	0800b45c 	.word	0x0800b45c
 8005500:	20013038 	.word	0x20013038
 8005504:	20013438 	.word	0x20013438
 8005508:	0800b468 	.word	0x0800b468
 800550c:	0800b46c 	.word	0x0800b46c

08005510 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800551c:	2300      	movs	r3, #0
 800551e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	429a      	cmp	r2, r3
 8005532:	d905      	bls.n	8005540 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
 800553e:	e007      	b.n	8005550 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	1acb      	subs	r3, r1, r3
 800554a:	4413      	add	r3, r2
 800554c:	3b01      	subs	r3, #1
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555a:	4293      	cmp	r3, r2
 800555c:	bf28      	it	cs
 800555e:	4613      	movcs	r3, r2
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4293      	cmp	r3, r2
 8005568:	bf28      	it	cs
 800556a:	4613      	movcs	r3, r2
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	6978      	ldr	r0, [r7, #20]
 800557e:	f003 f87b 	bl	8008678 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005582:	6a3a      	ldr	r2, [r7, #32]
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	4413      	add	r3, r2
 8005588:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	4413      	add	r3, r2
 8005590:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	4413      	add	r3, r2
 80055a0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d101      	bne.n	80055b0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055b0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1b2      	bne.n	8005526 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80055c0:	6a3b      	ldr	r3, [r7, #32]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3728      	adds	r7, #40	; 0x28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b088      	sub	sp, #32
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d911      	bls.n	8005612 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	6938      	ldr	r0, [r7, #16]
 80055fe:	f003 f83b 	bl	8008678 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005602:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	441a      	add	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005610:	e01f      	b.n	8005652 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	6938      	ldr	r0, [r7, #16]
 8005626:	f003 f827 	bl	8008678 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	4413      	add	r3, r2
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4619      	mov	r1, r3
 8005642:	6938      	ldr	r0, [r7, #16]
 8005644:	f003 f818 	bl	8008678 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005648:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	60da      	str	r2, [r3, #12]
}
 8005652:	bf00      	nop
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800565a:	b480      	push	{r7}
 800565c:	b087      	sub	sp, #28
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	429a      	cmp	r2, r3
 8005674:	d808      	bhi.n	8005688 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad2      	subs	r2, r2, r3
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4413      	add	r3, r2
 8005682:	3b01      	subs	r3, #1
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	e004      	b.n	8005692 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005692:	697b      	ldr	r3, [r7, #20]
}
 8005694:	4618      	mov	r0, r3
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08c      	sub	sp, #48	; 0x30
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80056ac:	4b3e      	ldr	r3, [pc, #248]	; (80057a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056ae:	623b      	str	r3, [r7, #32]
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80056ba:	f7ff fed1 	bl	8005460 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	4613      	mov	r3, r2
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4413      	add	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4a37      	ldr	r2, [pc, #220]	; (80057a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056cc:	4413      	add	r3, r2
 80056ce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80056e0:	2300      	movs	r3, #0
 80056e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d92b      	bls.n	8005744 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4293      	cmp	r3, r2
 80056fc:	bf28      	it	cs
 80056fe:	4613      	movcs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	4413      	add	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	6939      	ldr	r1, [r7, #16]
 8005710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005712:	f002 ffb1 	bl	8008678 <memcpy>
    NumBytesRead += NumBytesRem;
 8005716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4413      	add	r3, r2
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800571e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	4413      	add	r3, r2
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800572e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	4413      	add	r3, r2
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573c:	429a      	cmp	r2, r3
 800573e:	d101      	bne.n	8005744 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005740:	2300      	movs	r3, #0
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4293      	cmp	r3, r2
 8005752:	bf28      	it	cs
 8005754:	4613      	movcs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d019      	beq.n	8005792 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	4413      	add	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	6939      	ldr	r1, [r7, #16]
 800576c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800576e:	f002 ff83 	bl	8008678 <memcpy>
    NumBytesRead += NumBytesRem;
 8005772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	4413      	add	r3, r2
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800577a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800578a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3730      	adds	r7, #48	; 0x30
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	200147e0 	.word	0x200147e0

080057ac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08c      	sub	sp, #48	; 0x30
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80057b8:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80057ba:	623b      	str	r3, [r7, #32]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <SEGGER_RTT_ReadNoLock+0x1e>
 80057c6:	f7ff fe4b 	bl	8005460 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4413      	add	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	3360      	adds	r3, #96	; 0x60
 80057d6:	4a37      	ldr	r2, [pc, #220]	; (80058b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80057d8:	4413      	add	r3, r2
 80057da:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80057ec:	2300      	movs	r3, #0
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80057f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d92b      	bls.n	8005850 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4293      	cmp	r3, r2
 8005808:	bf28      	it	cs
 800580a:	4613      	movcs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	4413      	add	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	6939      	ldr	r1, [r7, #16]
 800581c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800581e:	f002 ff2b 	bl	8008678 <memcpy>
    NumBytesRead += NumBytesRem;
 8005822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800582a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	4413      	add	r3, r2
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800583a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	4413      	add	r3, r2
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005848:	429a      	cmp	r2, r3
 800584a:	d101      	bne.n	8005850 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800584c:	2300      	movs	r3, #0
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4293      	cmp	r3, r2
 800585e:	bf28      	it	cs
 8005860:	4613      	movcs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d019      	beq.n	800589e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	4413      	add	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	6939      	ldr	r1, [r7, #16]
 8005878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800587a:	f002 fefd 	bl	8008678 <memcpy>
    NumBytesRead += NumBytesRem;
 800587e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	4413      	add	r3, r2
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4413      	add	r3, r2
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3730      	adds	r7, #48	; 0x30
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200147e0 	.word	0x200147e0

080058b8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4613      	mov	r3, r2
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	4413      	add	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	3360      	adds	r3, #96	; 0x60
 80058d4:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80058d6:	4413      	add	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d029      	beq.n	8005936 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d82e      	bhi.n	8005944 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d013      	beq.n	8005916 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80058ee:	e029      	b.n	8005944 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058f0:	6978      	ldr	r0, [r7, #20]
 80058f2:	f7ff feb2 	bl	800565a <_GetAvailWriteSpace>
 80058f6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d202      	bcs.n	8005906 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005900:	2300      	movs	r3, #0
 8005902:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005904:	e021      	b.n	800594a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	69b9      	ldr	r1, [r7, #24]
 800590e:	6978      	ldr	r0, [r7, #20]
 8005910:	f7ff fe5b 	bl	80055ca <_WriteNoCheck>
    break;
 8005914:	e019      	b.n	800594a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f7ff fe9f 	bl	800565a <_GetAvailWriteSpace>
 800591c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4293      	cmp	r3, r2
 8005924:	bf28      	it	cs
 8005926:	4613      	movcs	r3, r2
 8005928:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	6978      	ldr	r0, [r7, #20]
 8005930:	f7ff fe4b 	bl	80055ca <_WriteNoCheck>
    break;
 8005934:	e009      	b.n	800594a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	69b9      	ldr	r1, [r7, #24]
 800593a:	6978      	ldr	r0, [r7, #20]
 800593c:	f7ff fde8 	bl	8005510 <_WriteBlocking>
 8005940:	61f8      	str	r0, [r7, #28]
    break;
 8005942:	e002      	b.n	800594a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]
    break;
 8005948:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800594a:	69fb      	ldr	r3, [r7, #28]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	200147e0 	.word	0x200147e0

08005958 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4a1f      	ldr	r2, [pc, #124]	; (80059f4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005976:	4413      	add	r3, r2
 8005978:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d029      	beq.n	80059d6 <SEGGER_RTT_WriteNoLock+0x7e>
 8005982:	2b02      	cmp	r3, #2
 8005984:	d82e      	bhi.n	80059e4 <SEGGER_RTT_WriteNoLock+0x8c>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <SEGGER_RTT_WriteNoLock+0x38>
 800598a:	2b01      	cmp	r3, #1
 800598c:	d013      	beq.n	80059b6 <SEGGER_RTT_WriteNoLock+0x5e>
 800598e:	e029      	b.n	80059e4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005990:	6978      	ldr	r0, [r7, #20]
 8005992:	f7ff fe62 	bl	800565a <_GetAvailWriteSpace>
 8005996:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d202      	bcs.n	80059a6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80059a4:	e021      	b.n	80059ea <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f7ff fe0b 	bl	80055ca <_WriteNoCheck>
    break;
 80059b4:	e019      	b.n	80059ea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80059b6:	6978      	ldr	r0, [r7, #20]
 80059b8:	f7ff fe4f 	bl	800565a <_GetAvailWriteSpace>
 80059bc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4293      	cmp	r3, r2
 80059c4:	bf28      	it	cs
 80059c6:	4613      	movcs	r3, r2
 80059c8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	6978      	ldr	r0, [r7, #20]
 80059d0:	f7ff fdfb 	bl	80055ca <_WriteNoCheck>
    break;
 80059d4:	e009      	b.n	80059ea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	69b9      	ldr	r1, [r7, #24]
 80059da:	6978      	ldr	r0, [r7, #20]
 80059dc:	f7ff fd98 	bl	8005510 <_WriteBlocking>
 80059e0:	61f8      	str	r0, [r7, #28]
    break;
 80059e2:	e002      	b.n	80059ea <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
    break;
 80059e8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80059ea:	69fb      	ldr	r3, [r7, #28]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	200147e0 	.word	0x200147e0

080059f8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005a04:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005a12:	f7ff fd25 	bl	8005460 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a16:	f3ef 8311 	mrs	r3, BASEPRI
 8005a1a:	f04f 0120 	mov.w	r1, #32
 8005a1e:	f381 8811 	msr	BASEPRI, r1
 8005a22:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff ff45 	bl	80058b8 <SEGGER_RTT_WriteDownBufferNoLock>
 8005a2e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005a36:	697b      	ldr	r3, [r7, #20]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3720      	adds	r7, #32
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	200147e0 	.word	0x200147e0

08005a44 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005a50:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <SEGGER_RTT_Write+0x48>)
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <SEGGER_RTT_Write+0x1e>
 8005a5e:	f7ff fcff 	bl	8005460 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a62:	f3ef 8311 	mrs	r3, BASEPRI
 8005a66:	f04f 0120 	mov.w	r1, #32
 8005a6a:	f381 8811 	msr	BASEPRI, r1
 8005a6e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff ff6f 	bl	8005958 <SEGGER_RTT_WriteNoLock>
 8005a7a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005a82:	697b      	ldr	r3, [r7, #20]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	200147e0 	.word	0x200147e0

08005a90 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a9e:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005aac:	f7ff fcd8 	bl	8005460 <_DoInit>
  SEGGER_RTT_LOCK();
 8005ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ab4:	f04f 0120 	mov.w	r1, #32
 8005ab8:	f381 8811 	msr	BASEPRI, r1
 8005abc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005abe:	4b35      	ldr	r3, [pc, #212]	; (8005b94 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005ac0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005ac6:	6939      	ldr	r1, [r7, #16]
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	4613      	mov	r3, r2
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	dbeb      	blt.n	8005ac6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005aee:	e000      	b.n	8005af2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005af0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	da3f      	bge.n	8005b7c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005afc:	6939      	ldr	r1, [r7, #16]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	4613      	mov	r3, r2
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	440b      	add	r3, r1
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005b10:	6939      	ldr	r1, [r7, #16]
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	4613      	mov	r3, r2
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	4413      	add	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	440b      	add	r3, r1
 8005b20:	3304      	adds	r3, #4
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005b26:	6939      	ldr	r1, [r7, #16]
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4413      	add	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	440b      	add	r3, r1
 8005b34:	3320      	adds	r3, #32
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005b3a:	6939      	ldr	r1, [r7, #16]
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4413      	add	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	440b      	add	r3, r1
 8005b48:	3328      	adds	r3, #40	; 0x28
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005b4e:	6939      	ldr	r1, [r7, #16]
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	4613      	mov	r3, r2
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	4413      	add	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	440b      	add	r3, r1
 8005b5c:	3324      	adds	r3, #36	; 0x24
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005b62:	6939      	ldr	r1, [r7, #16]
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	4613      	mov	r3, r2
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	4413      	add	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	440b      	add	r3, r1
 8005b70:	332c      	adds	r3, #44	; 0x2c
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b76:	f3bf 8f5f 	dmb	sy
 8005b7a:	e002      	b.n	8005b82 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b80:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005b88:	69fb      	ldr	r3, [r7, #28]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	200147e0 	.word	0x200147e0

08005b98 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	; 0x28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005ba6:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ba8:	623b      	str	r3, [r7, #32]
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005bb4:	f7ff fc54 	bl	8005460 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005bba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d82c      	bhi.n	8005c1c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc6:	f04f 0120 	mov.w	r1, #32
 8005bca:	f381 8811 	msr	BASEPRI, r1
 8005bce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	4413      	add	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	3360      	adds	r3, #96	; 0x60
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00e      	beq.n	8005c06 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2200      	movs	r2, #0
 8005c04:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c0a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005c0c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1a:	e002      	b.n	8005c22 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3728      	adds	r7, #40	; 0x28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	200147e0 	.word	0x200147e0

08005c30 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00f      	beq.n	8005c66 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005c46:	e002      	b.n	8005c4e <_EncodeStr+0x1e>
      Len++;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f6      	bne.n	8005c48 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d901      	bls.n	8005c66 <_EncodeStr+0x36>
      Len = Limit;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2bfe      	cmp	r3, #254	; 0xfe
 8005c6a:	d806      	bhi.n	8005c7a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	60fa      	str	r2, [r7, #12]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e011      	b.n	8005c9e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	60fa      	str	r2, [r7, #12]
 8005c80:	22ff      	movs	r2, #255	; 0xff
 8005c82:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	60fa      	str	r2, [r7, #12]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	0a19      	lsrs	r1, r3, #8
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	60fa      	str	r2, [r7, #12]
 8005c9a:	b2ca      	uxtb	r2, r1
 8005c9c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005ca2:	e00a      	b.n	8005cba <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	1c53      	adds	r3, r2, #1
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1c59      	adds	r1, r3, #1
 8005cae:	60f9      	str	r1, [r7, #12]
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	701a      	strb	r2, [r3, #0]
    n++;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d3f0      	bcc.n	8005ca4 <_EncodeStr+0x74>
  }
  return pPayload;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cee:	4b36      	ldr	r3, [pc, #216]	; (8005dc8 <_HandleIncomingPacket+0xe0>)
 8005cf0:	7e1b      	ldrb	r3, [r3, #24]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	1cfb      	adds	r3, r7, #3
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f7ff fd57 	bl	80057ac <SEGGER_RTT_ReadNoLock>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	dd54      	ble.n	8005db2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	d032      	beq.n	8005d74 <_HandleIncomingPacket+0x8c>
 8005d0e:	2b80      	cmp	r3, #128	; 0x80
 8005d10:	dc42      	bgt.n	8005d98 <_HandleIncomingPacket+0xb0>
 8005d12:	2b07      	cmp	r3, #7
 8005d14:	dc16      	bgt.n	8005d44 <_HandleIncomingPacket+0x5c>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	dd3e      	ble.n	8005d98 <_HandleIncomingPacket+0xb0>
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	2b06      	cmp	r3, #6
 8005d1e:	d83b      	bhi.n	8005d98 <_HandleIncomingPacket+0xb0>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <_HandleIncomingPacket+0x40>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d4b 	.word	0x08005d4b
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d57 	.word	0x08005d57
 8005d34:	08005d5d 	.word	0x08005d5d
 8005d38:	08005d63 	.word	0x08005d63
 8005d3c:	08005d69 	.word	0x08005d69
 8005d40:	08005d6f 	.word	0x08005d6f
 8005d44:	2b7f      	cmp	r3, #127	; 0x7f
 8005d46:	d036      	beq.n	8005db6 <_HandleIncomingPacket+0xce>
 8005d48:	e026      	b.n	8005d98 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005d4a:	f000 fbab 	bl	80064a4 <SEGGER_SYSVIEW_Start>
      break;
 8005d4e:	e037      	b.n	8005dc0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005d50:	f000 fc64 	bl	800661c <SEGGER_SYSVIEW_Stop>
      break;
 8005d54:	e034      	b.n	8005dc0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005d56:	f000 fe3d 	bl	80069d4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005d5a:	e031      	b.n	8005dc0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005d5c:	f000 fe02 	bl	8006964 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005d60:	e02e      	b.n	8005dc0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005d62:	f000 fc81 	bl	8006668 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005d66:	e02b      	b.n	8005dc0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005d68:	f001 f8d0 	bl	8006f0c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005d6c:	e028      	b.n	8005dc0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005d6e:	f001 f8af 	bl	8006ed0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005d72:	e025      	b.n	8005dc0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d74:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <_HandleIncomingPacket+0xe0>)
 8005d76:	7e1b      	ldrb	r3, [r3, #24]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	1cfb      	adds	r3, r7, #3
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f7ff fd14 	bl	80057ac <SEGGER_RTT_ReadNoLock>
 8005d84:	4603      	mov	r3, r0
 8005d86:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	dd15      	ble.n	8005dba <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 f81d 	bl	8006dd0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d96:	e010      	b.n	8005dba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	b25b      	sxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	da0e      	bge.n	8005dbe <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005da0:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <_HandleIncomingPacket+0xe0>)
 8005da2:	7e1b      	ldrb	r3, [r3, #24]
 8005da4:	4618      	mov	r0, r3
 8005da6:	1cfb      	adds	r3, r7, #3
 8005da8:	2201      	movs	r2, #1
 8005daa:	4619      	mov	r1, r3
 8005dac:	f7ff fcfe 	bl	80057ac <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005db0:	e005      	b.n	8005dbe <_HandleIncomingPacket+0xd6>
    }
  }
 8005db2:	bf00      	nop
 8005db4:	e004      	b.n	8005dc0 <_HandleIncomingPacket+0xd8>
      break;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <_HandleIncomingPacket+0xd8>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <_HandleIncomingPacket+0xd8>
      break;
 8005dbe:	bf00      	nop
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20014450 	.word	0x20014450

08005dcc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08c      	sub	sp, #48	; 0x30
 8005dd0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005dd6:	1d3b      	adds	r3, r7, #4
 8005dd8:	3301      	adds	r3, #1
 8005dda:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de0:	4b32      	ldr	r3, [pc, #200]	; (8005eac <_TrySendOverflowPacket+0xe0>)
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de6:	e00b      	b.n	8005e00 <_TrySendOverflowPacket+0x34>
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	1c59      	adds	r1, r3, #1
 8005df0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005df2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	09db      	lsrs	r3, r3, #7
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	2b7f      	cmp	r3, #127	; 0x7f
 8005e04:	d8f0      	bhi.n	8005de8 <_TrySendOverflowPacket+0x1c>
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e16:	4b26      	ldr	r3, [pc, #152]	; (8005eb0 <_TrySendOverflowPacket+0xe4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005e1c:	4b23      	ldr	r3, [pc, #140]	; (8005eac <_TrySendOverflowPacket+0xe0>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	e00b      	b.n	8005e48 <_TrySendOverflowPacket+0x7c>
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	1c59      	adds	r1, r3, #1
 8005e38:	6279      	str	r1, [r7, #36]	; 0x24
 8005e3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	09db      	lsrs	r3, r3, #7
 8005e46:	623b      	str	r3, [r7, #32]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e4c:	d8f0      	bhi.n	8005e30 <_TrySendOverflowPacket+0x64>
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	627a      	str	r2, [r7, #36]	; 0x24
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005e5e:	4b13      	ldr	r3, [pc, #76]	; (8005eac <_TrySendOverflowPacket+0xe0>)
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	4618      	mov	r0, r3
 8005e64:	1d3b      	adds	r3, r7, #4
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	1d3b      	adds	r3, r7, #4
 8005e6e:	4619      	mov	r1, r3
 8005e70:	f7fa f9be 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e74:	4603      	mov	r3, r0
 8005e76:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005e78:	f001 f9de 	bl	8007238 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <_TrySendOverflowPacket+0xe0>)
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005e88:	4b08      	ldr	r3, [pc, #32]	; (8005eac <_TrySendOverflowPacket+0xe0>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <_TrySendOverflowPacket+0xe0>)
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	e004      	b.n	8005ea0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <_TrySendOverflowPacket+0xe0>)
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	4a03      	ldr	r2, [pc, #12]	; (8005eac <_TrySendOverflowPacket+0xe0>)
 8005e9e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005ea0:	693b      	ldr	r3, [r7, #16]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3730      	adds	r7, #48	; 0x30
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20014450 	.word	0x20014450
 8005eb0:	e0001004 	.word	0xe0001004

08005eb4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08a      	sub	sp, #40	; 0x28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005ec0:	4b6d      	ldr	r3, [pc, #436]	; (8006078 <_SendPacket+0x1c4>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d010      	beq.n	8005eea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005ec8:	4b6b      	ldr	r3, [pc, #428]	; (8006078 <_SendPacket+0x1c4>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80a5 	beq.w	800601c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005ed2:	4b69      	ldr	r3, [pc, #420]	; (8006078 <_SendPacket+0x1c4>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d109      	bne.n	8005eee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005eda:	f7ff ff77 	bl	8005dcc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005ede:	4b66      	ldr	r3, [pc, #408]	; (8006078 <_SendPacket+0x1c4>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	f040 809c 	bne.w	8006020 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005ee8:	e001      	b.n	8005eee <_SendPacket+0x3a>
    goto Send;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <_SendPacket+0x3c>
Send:
 8005eee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b1f      	cmp	r3, #31
 8005ef4:	d809      	bhi.n	8005f0a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005ef6:	4b60      	ldr	r3, [pc, #384]	; (8006078 <_SendPacket+0x1c4>)
 8005ef8:	69da      	ldr	r2, [r3, #28]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f040 808d 	bne.w	8006024 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b17      	cmp	r3, #23
 8005f0e:	d807      	bhi.n	8005f20 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e03d      	b.n	8005f9c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2c:	d912      	bls.n	8005f54 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	09da      	lsrs	r2, r3, #7
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	3a01      	subs	r2, #1
 8005f46:	60fa      	str	r2, [r7, #12]
 8005f48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	e006      	b.n	8005f62 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b7f      	cmp	r3, #127	; 0x7f
 8005f66:	d912      	bls.n	8005f8e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	09da      	lsrs	r2, r3, #7
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	3a01      	subs	r2, #1
 8005f80:	60fa      	str	r2, [r7, #12]
 8005f82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	e006      	b.n	8005f9c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f9c:	4b37      	ldr	r3, [pc, #220]	; (800607c <_SendPacket+0x1c8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005fa2:	4b35      	ldr	r3, [pc, #212]	; (8006078 <_SendPacket+0x1c4>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	623b      	str	r3, [r7, #32]
 8005fb4:	e00b      	b.n	8005fce <_SendPacket+0x11a>
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	1c59      	adds	r1, r3, #1
 8005fbe:	6279      	str	r1, [r7, #36]	; 0x24
 8005fc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	09db      	lsrs	r3, r3, #7
 8005fcc:	623b      	str	r3, [r7, #32]
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd2:	d8f0      	bhi.n	8005fb6 <_SendPacket+0x102>
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8005fda:	6a3a      	ldr	r2, [r7, #32]
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <_SendPacket+0x1c4>)
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	f7fa f8fc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005ffc:	f001 f91c 	bl	8007238 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006006:	4a1c      	ldr	r2, [pc, #112]	; (8006078 <_SendPacket+0x1c4>)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	60d3      	str	r3, [r2, #12]
 800600c:	e00b      	b.n	8006026 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800600e:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <_SendPacket+0x1c4>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	3301      	adds	r3, #1
 8006014:	b2da      	uxtb	r2, r3
 8006016:	4b18      	ldr	r3, [pc, #96]	; (8006078 <_SendPacket+0x1c4>)
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	e004      	b.n	8006026 <_SendPacket+0x172>
    goto SendDone;
 800601c:	bf00      	nop
 800601e:	e002      	b.n	8006026 <_SendPacket+0x172>
      goto SendDone;
 8006020:	bf00      	nop
 8006022:	e000      	b.n	8006026 <_SendPacket+0x172>
      goto SendDone;
 8006024:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <_SendPacket+0x1c4>)
 8006028:	7e1b      	ldrb	r3, [r3, #24]
 800602a:	4619      	mov	r1, r3
 800602c:	4a14      	ldr	r2, [pc, #80]	; (8006080 <_SendPacket+0x1cc>)
 800602e:	460b      	mov	r3, r1
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	440b      	add	r3, r1
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	336c      	adds	r3, #108	; 0x6c
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <_SendPacket+0x1c4>)
 800603e:	7e1b      	ldrb	r3, [r3, #24]
 8006040:	4618      	mov	r0, r3
 8006042:	490f      	ldr	r1, [pc, #60]	; (8006080 <_SendPacket+0x1cc>)
 8006044:	4603      	mov	r3, r0
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	4403      	add	r3, r0
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	440b      	add	r3, r1
 800604e:	3370      	adds	r3, #112	; 0x70
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d00b      	beq.n	800606e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006056:	4b08      	ldr	r3, [pc, #32]	; (8006078 <_SendPacket+0x1c4>)
 8006058:	789b      	ldrb	r3, [r3, #2]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d107      	bne.n	800606e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <_SendPacket+0x1c4>)
 8006060:	2201      	movs	r2, #1
 8006062:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006064:	f7ff fe40 	bl	8005ce8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006068:	4b03      	ldr	r3, [pc, #12]	; (8006078 <_SendPacket+0x1c4>)
 800606a:	2200      	movs	r2, #0
 800606c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800606e:	bf00      	nop
 8006070:	3728      	adds	r7, #40	; 0x28
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20014450 	.word	0x20014450
 800607c:	e0001004 	.word	0xe0001004
 8006080:	200147e0 	.word	0x200147e0

08006084 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006092:	2300      	movs	r3, #0
 8006094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006098:	4917      	ldr	r1, [pc, #92]	; (80060f8 <SEGGER_SYSVIEW_Init+0x74>)
 800609a:	4818      	ldr	r0, [pc, #96]	; (80060fc <SEGGER_SYSVIEW_Init+0x78>)
 800609c:	f7ff fcf8 	bl	8005a90 <SEGGER_RTT_AllocUpBuffer>
 80060a0:	4603      	mov	r3, r0
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	4b16      	ldr	r3, [pc, #88]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060a6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80060a8:	4b15      	ldr	r3, [pc, #84]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060aa:	785a      	ldrb	r2, [r3, #1]
 80060ac:	4b14      	ldr	r3, [pc, #80]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060ae:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060b0:	4b13      	ldr	r3, [pc, #76]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060b2:	7e1b      	ldrb	r3, [r3, #24]
 80060b4:	4618      	mov	r0, r3
 80060b6:	2300      	movs	r3, #0
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	2308      	movs	r3, #8
 80060bc:	4a11      	ldr	r2, [pc, #68]	; (8006104 <SEGGER_SYSVIEW_Init+0x80>)
 80060be:	490f      	ldr	r1, [pc, #60]	; (80060fc <SEGGER_SYSVIEW_Init+0x78>)
 80060c0:	f7ff fd6a 	bl	8005b98 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <SEGGER_SYSVIEW_Init+0x84>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a0c      	ldr	r2, [pc, #48]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060d0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80060d2:	4a0b      	ldr	r2, [pc, #44]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80060d8:	4a09      	ldr	r2, [pc, #36]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80060de:	4a08      	ldr	r2, [pc, #32]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80060e4:	4a06      	ldr	r2, [pc, #24]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80060ea:	4b05      	ldr	r3, [pc, #20]	; (8006100 <SEGGER_SYSVIEW_Init+0x7c>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80060f0:	bf00      	nop
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20013448 	.word	0x20013448
 80060fc:	0800b474 	.word	0x0800b474
 8006100:	20014450 	.word	0x20014450
 8006104:	20014448 	.word	0x20014448
 8006108:	e0001004 	.word	0xe0001004

0800610c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006114:	4a04      	ldr	r2, [pc, #16]	; (8006128 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6113      	str	r3, [r2, #16]
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20014450 	.word	0x20014450

0800612c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006134:	f3ef 8311 	mrs	r3, BASEPRI
 8006138:	f04f 0120 	mov.w	r1, #32
 800613c:	f381 8811 	msr	BASEPRI, r1
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	4808      	ldr	r0, [pc, #32]	; (8006164 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006144:	f7ff fdc4 	bl	8005cd0 <_PreparePacket>
 8006148:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	68b8      	ldr	r0, [r7, #8]
 8006150:	f7ff feb0 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f383 8811 	msr	BASEPRI, r3
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20014480 	.word	0x20014480

08006168 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006172:	f3ef 8311 	mrs	r3, BASEPRI
 8006176:	f04f 0120 	mov.w	r1, #32
 800617a:	f381 8811 	msr	BASEPRI, r1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	4816      	ldr	r0, [pc, #88]	; (80061dc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006182:	f7ff fda5 	bl	8005cd0 <_PreparePacket>
 8006186:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	e00b      	b.n	80061ae <SEGGER_SYSVIEW_RecordU32+0x46>
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	1c59      	adds	r1, r3, #1
 800619e:	61f9      	str	r1, [r7, #28]
 80061a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	09db      	lsrs	r3, r3, #7
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2b7f      	cmp	r3, #127	; 0x7f
 80061b2:	d8f0      	bhi.n	8006196 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	61fa      	str	r2, [r7, #28]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	68f9      	ldr	r1, [r7, #12]
 80061c8:	6938      	ldr	r0, [r7, #16]
 80061ca:	f7ff fe73 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f383 8811 	msr	BASEPRI, r3
}
 80061d4:	bf00      	nop
 80061d6:	3720      	adds	r7, #32
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	20014480 	.word	0x20014480

080061e0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08c      	sub	sp, #48	; 0x30
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061ec:	f3ef 8311 	mrs	r3, BASEPRI
 80061f0:	f04f 0120 	mov.w	r1, #32
 80061f4:	f381 8811 	msr	BASEPRI, r1
 80061f8:	61fb      	str	r3, [r7, #28]
 80061fa:	4825      	ldr	r0, [pc, #148]	; (8006290 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80061fc:	f7ff fd68 	bl	8005cd0 <_PreparePacket>
 8006200:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
 800620e:	e00b      	b.n	8006228 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	b2da      	uxtb	r2, r3
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	1c59      	adds	r1, r3, #1
 8006218:	62f9      	str	r1, [r7, #44]	; 0x2c
 800621a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	09db      	lsrs	r3, r3, #7
 8006226:	62bb      	str	r3, [r7, #40]	; 0x28
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	2b7f      	cmp	r3, #127	; 0x7f
 800622c:	d8f0      	bhi.n	8006210 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	623b      	str	r3, [r7, #32]
 8006246:	e00b      	b.n	8006260 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	6279      	str	r1, [r7, #36]	; 0x24
 8006252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	09db      	lsrs	r3, r3, #7
 800625e:	623b      	str	r3, [r7, #32]
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	2b7f      	cmp	r3, #127	; 0x7f
 8006264:	d8f0      	bhi.n	8006248 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	627a      	str	r2, [r7, #36]	; 0x24
 800626c:	6a3a      	ldr	r2, [r7, #32]
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	6979      	ldr	r1, [r7, #20]
 800627a:	69b8      	ldr	r0, [r7, #24]
 800627c:	f7ff fe1a 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f383 8811 	msr	BASEPRI, r3
}
 8006286:	bf00      	nop
 8006288:	3730      	adds	r7, #48	; 0x30
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20014480 	.word	0x20014480

08006294 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b08e      	sub	sp, #56	; 0x38
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80062a2:	f3ef 8311 	mrs	r3, BASEPRI
 80062a6:	f04f 0120 	mov.w	r1, #32
 80062aa:	f381 8811 	msr	BASEPRI, r1
 80062ae:	61fb      	str	r3, [r7, #28]
 80062b0:	4832      	ldr	r0, [pc, #200]	; (800637c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80062b2:	f7ff fd0d 	bl	8005cd0 <_PreparePacket>
 80062b6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	633b      	str	r3, [r7, #48]	; 0x30
 80062c4:	e00b      	b.n	80062de <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062cc:	1c59      	adds	r1, r3, #1
 80062ce:	6379      	str	r1, [r7, #52]	; 0x34
 80062d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	09db      	lsrs	r3, r3, #7
 80062dc:	633b      	str	r3, [r7, #48]	; 0x30
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	2b7f      	cmp	r3, #127	; 0x7f
 80062e2:	d8f0      	bhi.n	80062c6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80062e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	637a      	str	r2, [r7, #52]	; 0x34
 80062ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80062fc:	e00b      	b.n	8006316 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	b2da      	uxtb	r2, r3
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	1c59      	adds	r1, r3, #1
 8006306:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006308:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	09db      	lsrs	r3, r3, #7
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2b7f      	cmp	r3, #127	; 0x7f
 800631a:	d8f0      	bhi.n	80062fe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	623b      	str	r3, [r7, #32]
 8006334:	e00b      	b.n	800634e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	1c59      	adds	r1, r3, #1
 800633e:	6279      	str	r1, [r7, #36]	; 0x24
 8006340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	09db      	lsrs	r3, r3, #7
 800634c:	623b      	str	r3, [r7, #32]
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	2b7f      	cmp	r3, #127	; 0x7f
 8006352:	d8f0      	bhi.n	8006336 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	627a      	str	r2, [r7, #36]	; 0x24
 800635a:	6a3a      	ldr	r2, [r7, #32]
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	6979      	ldr	r1, [r7, #20]
 8006368:	69b8      	ldr	r0, [r7, #24]
 800636a:	f7ff fda3 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f383 8811 	msr	BASEPRI, r3
}
 8006374:	bf00      	nop
 8006376:	3738      	adds	r7, #56	; 0x38
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20014480 	.word	0x20014480

08006380 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b090      	sub	sp, #64	; 0x40
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800638e:	f3ef 8311 	mrs	r3, BASEPRI
 8006392:	f04f 0120 	mov.w	r1, #32
 8006396:	f381 8811 	msr	BASEPRI, r1
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	4840      	ldr	r0, [pc, #256]	; (80064a0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800639e:	f7ff fc97 	bl	8005cd0 <_PreparePacket>
 80063a2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80063b0:	e00b      	b.n	80063ca <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b8:	1c59      	adds	r1, r3, #1
 80063ba:	63f9      	str	r1, [r7, #60]	; 0x3c
 80063bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	09db      	lsrs	r3, r3, #7
 80063c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b7f      	cmp	r3, #127	; 0x7f
 80063ce:	d8f0      	bhi.n	80063b2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80063d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	633b      	str	r3, [r7, #48]	; 0x30
 80063e8:	e00b      	b.n	8006402 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f0:	1c59      	adds	r1, r3, #1
 80063f2:	6379      	str	r1, [r7, #52]	; 0x34
 80063f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	09db      	lsrs	r3, r3, #7
 8006400:	633b      	str	r3, [r7, #48]	; 0x30
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	2b7f      	cmp	r3, #127	; 0x7f
 8006406:	d8f0      	bhi.n	80063ea <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	637a      	str	r2, [r7, #52]	; 0x34
 800640e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006416:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006420:	e00b      	b.n	800643a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	b2da      	uxtb	r2, r3
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	1c59      	adds	r1, r3, #1
 800642a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800642c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	09db      	lsrs	r3, r3, #7
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	2b7f      	cmp	r3, #127	; 0x7f
 800643e:	d8f0      	bhi.n	8006422 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
 8006454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006456:	623b      	str	r3, [r7, #32]
 8006458:	e00b      	b.n	8006472 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	1c59      	adds	r1, r3, #1
 8006462:	6279      	str	r1, [r7, #36]	; 0x24
 8006464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	09db      	lsrs	r3, r3, #7
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	2b7f      	cmp	r3, #127	; 0x7f
 8006476:	d8f0      	bhi.n	800645a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	627a      	str	r2, [r7, #36]	; 0x24
 800647e:	6a3a      	ldr	r2, [r7, #32]
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	6979      	ldr	r1, [r7, #20]
 800648c:	69b8      	ldr	r0, [r7, #24]
 800648e:	f7ff fd11 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f383 8811 	msr	BASEPRI, r3
}
 8006498:	bf00      	nop
 800649a:	3740      	adds	r7, #64	; 0x40
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20014480 	.word	0x20014480

080064a4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08c      	sub	sp, #48	; 0x30
 80064a8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80064aa:	4b59      	ldr	r3, [pc, #356]	; (8006610 <SEGGER_SYSVIEW_Start+0x16c>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80064b0:	f3ef 8311 	mrs	r3, BASEPRI
 80064b4:	f04f 0120 	mov.w	r1, #32
 80064b8:	f381 8811 	msr	BASEPRI, r1
 80064bc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80064be:	4b54      	ldr	r3, [pc, #336]	; (8006610 <SEGGER_SYSVIEW_Start+0x16c>)
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	220a      	movs	r2, #10
 80064c4:	4953      	ldr	r1, [pc, #332]	; (8006614 <SEGGER_SYSVIEW_Start+0x170>)
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7f9 fe92 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80064d2:	f000 feb1 	bl	8007238 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80064d6:	200a      	movs	r0, #10
 80064d8:	f7ff fe28 	bl	800612c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064dc:	f3ef 8311 	mrs	r3, BASEPRI
 80064e0:	f04f 0120 	mov.w	r1, #32
 80064e4:	f381 8811 	msr	BASEPRI, r1
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	484b      	ldr	r0, [pc, #300]	; (8006618 <SEGGER_SYSVIEW_Start+0x174>)
 80064ec:	f7ff fbf0 	bl	8005cd0 <_PreparePacket>
 80064f0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064fa:	4b45      	ldr	r3, [pc, #276]	; (8006610 <SEGGER_SYSVIEW_Start+0x16c>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006500:	e00b      	b.n	800651a <SEGGER_SYSVIEW_Start+0x76>
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	b2da      	uxtb	r2, r3
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	1c59      	adds	r1, r3, #1
 800650a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800650c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	09db      	lsrs	r3, r3, #7
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	2b7f      	cmp	r3, #127	; 0x7f
 800651e:	d8f0      	bhi.n	8006502 <SEGGER_SYSVIEW_Start+0x5e>
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
 8006534:	4b36      	ldr	r3, [pc, #216]	; (8006610 <SEGGER_SYSVIEW_Start+0x16c>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	e00b      	b.n	8006554 <SEGGER_SYSVIEW_Start+0xb0>
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	6279      	str	r1, [r7, #36]	; 0x24
 8006546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	09db      	lsrs	r3, r3, #7
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	2b7f      	cmp	r3, #127	; 0x7f
 8006558:	d8f0      	bhi.n	800653c <SEGGER_SYSVIEW_Start+0x98>
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	627a      	str	r2, [r7, #36]	; 0x24
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	4b28      	ldr	r3, [pc, #160]	; (8006610 <SEGGER_SYSVIEW_Start+0x16c>)
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	e00b      	b.n	800658e <SEGGER_SYSVIEW_Start+0xea>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	b2da      	uxtb	r2, r3
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	1c59      	adds	r1, r3, #1
 800657e:	61f9      	str	r1, [r7, #28]
 8006580:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	09db      	lsrs	r3, r3, #7
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b7f      	cmp	r3, #127	; 0x7f
 8006592:	d8f0      	bhi.n	8006576 <SEGGER_SYSVIEW_Start+0xd2>
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	61fa      	str	r2, [r7, #28]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	e00b      	b.n	80065c6 <SEGGER_SYSVIEW_Start+0x122>
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	1c59      	adds	r1, r3, #1
 80065b6:	6179      	str	r1, [r7, #20]
 80065b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	09db      	lsrs	r3, r3, #7
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ca:	d8f0      	bhi.n	80065ae <SEGGER_SYSVIEW_Start+0x10a>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	617a      	str	r2, [r7, #20]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065dc:	2218      	movs	r2, #24
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff fc67 	bl	8005eb4 <_SendPacket>
      RECORD_END();
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065ec:	4b08      	ldr	r3, [pc, #32]	; (8006610 <SEGGER_SYSVIEW_Start+0x16c>)
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80065f4:	4b06      	ldr	r3, [pc, #24]	; (8006610 <SEGGER_SYSVIEW_Start+0x16c>)
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80065fa:	f000 f9eb 	bl	80069d4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80065fe:	f000 f9b1 	bl	8006964 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006602:	f000 fc83 	bl	8006f0c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006606:	bf00      	nop
 8006608:	3730      	adds	r7, #48	; 0x30
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20014450 	.word	0x20014450
 8006614:	0800b930 	.word	0x0800b930
 8006618:	20014480 	.word	0x20014480

0800661c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006622:	f3ef 8311 	mrs	r3, BASEPRI
 8006626:	f04f 0120 	mov.w	r1, #32
 800662a:	f381 8811 	msr	BASEPRI, r1
 800662e:	607b      	str	r3, [r7, #4]
 8006630:	480b      	ldr	r0, [pc, #44]	; (8006660 <SEGGER_SYSVIEW_Stop+0x44>)
 8006632:	f7ff fb4d 	bl	8005cd0 <_PreparePacket>
 8006636:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <SEGGER_SYSVIEW_Stop+0x48>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006640:	220b      	movs	r2, #11
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6838      	ldr	r0, [r7, #0]
 8006646:	f7ff fc35 	bl	8005eb4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800664a:	4b06      	ldr	r3, [pc, #24]	; (8006664 <SEGGER_SYSVIEW_Stop+0x48>)
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f383 8811 	msr	BASEPRI, r3
}
 8006656:	bf00      	nop
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20014480 	.word	0x20014480
 8006664:	20014450 	.word	0x20014450

08006668 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	; 0x30
 800666c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800666e:	f3ef 8311 	mrs	r3, BASEPRI
 8006672:	f04f 0120 	mov.w	r1, #32
 8006676:	f381 8811 	msr	BASEPRI, r1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	4845      	ldr	r0, [pc, #276]	; (8006794 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800667e:	f7ff fb27 	bl	8005cd0 <_PreparePacket>
 8006682:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800668c:	4b42      	ldr	r3, [pc, #264]	; (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
 8006692:	e00b      	b.n	80066ac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	b2da      	uxtb	r2, r3
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800669e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a8:	09db      	lsrs	r3, r3, #7
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	2b7f      	cmp	r3, #127	; 0x7f
 80066b0:	d8f0      	bhi.n	8006694 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
 80066c6:	4b34      	ldr	r3, [pc, #208]	; (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	623b      	str	r3, [r7, #32]
 80066cc:	e00b      	b.n	80066e6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	1c59      	adds	r1, r3, #1
 80066d6:	6279      	str	r1, [r7, #36]	; 0x24
 80066d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066dc:	b2d2      	uxtb	r2, r2
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	09db      	lsrs	r3, r3, #7
 80066e4:	623b      	str	r3, [r7, #32]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	2b7f      	cmp	r3, #127	; 0x7f
 80066ea:	d8f0      	bhi.n	80066ce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	627a      	str	r2, [r7, #36]	; 0x24
 80066f2:	6a3a      	ldr	r2, [r7, #32]
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	4b25      	ldr	r3, [pc, #148]	; (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	e00b      	b.n	8006720 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	1c59      	adds	r1, r3, #1
 8006710:	61f9      	str	r1, [r7, #28]
 8006712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	09db      	lsrs	r3, r3, #7
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b7f      	cmp	r3, #127	; 0x7f
 8006724:	d8f0      	bhi.n	8006708 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	61fa      	str	r2, [r7, #28]
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	2300      	movs	r3, #0
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	e00b      	b.n	8006758 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	6179      	str	r1, [r7, #20]
 800674a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	09db      	lsrs	r3, r3, #7
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b7f      	cmp	r3, #127	; 0x7f
 800675c:	d8f0      	bhi.n	8006740 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	617a      	str	r2, [r7, #20]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800676e:	2218      	movs	r2, #24
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	68b8      	ldr	r0, [r7, #8]
 8006774:	f7ff fb9e 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800677e:	4b06      	ldr	r3, [pc, #24]	; (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006786:	4b04      	ldr	r3, [pc, #16]	; (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	4798      	blx	r3
  }
}
 800678c:	bf00      	nop
 800678e:	3730      	adds	r7, #48	; 0x30
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20014480 	.word	0x20014480
 8006798:	20014450 	.word	0x20014450

0800679c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b092      	sub	sp, #72	; 0x48
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80067a4:	f3ef 8311 	mrs	r3, BASEPRI
 80067a8:	f04f 0120 	mov.w	r1, #32
 80067ac:	f381 8811 	msr	BASEPRI, r1
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	486a      	ldr	r0, [pc, #424]	; (800695c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80067b4:	f7ff fa8c 	bl	8005cd0 <_PreparePacket>
 80067b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	647b      	str	r3, [r7, #68]	; 0x44
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b66      	ldr	r3, [pc, #408]	; (8006960 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	643b      	str	r3, [r7, #64]	; 0x40
 80067ce:	e00b      	b.n	80067e8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80067d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d6:	1c59      	adds	r1, r3, #1
 80067d8:	6479      	str	r1, [r7, #68]	; 0x44
 80067da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e4:	09db      	lsrs	r3, r3, #7
 80067e6:	643b      	str	r3, [r7, #64]	; 0x40
 80067e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ea:	2b7f      	cmp	r3, #127	; 0x7f
 80067ec:	d8f0      	bhi.n	80067d0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80067ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	647a      	str	r2, [r7, #68]	; 0x44
 80067f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	63bb      	str	r3, [r7, #56]	; 0x38
 8006808:	e00b      	b.n	8006822 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006814:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681e:	09db      	lsrs	r3, r3, #7
 8006820:	63bb      	str	r3, [r7, #56]	; 0x38
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	2b7f      	cmp	r3, #127	; 0x7f
 8006826:	d8f0      	bhi.n	800680a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800682e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006836:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	4619      	mov	r1, r3
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7ff f9f5 	bl	8005c30 <_EncodeStr>
 8006846:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006848:	2209      	movs	r2, #9
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	6938      	ldr	r0, [r7, #16]
 800684e:	f7ff fb31 	bl	8005eb4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b40      	ldr	r3, [pc, #256]	; (8006960 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	633b      	str	r3, [r7, #48]	; 0x30
 8006866:	e00b      	b.n	8006880 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	b2da      	uxtb	r2, r3
 800686c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686e:	1c59      	adds	r1, r3, #1
 8006870:	6379      	str	r1, [r7, #52]	; 0x34
 8006872:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	09db      	lsrs	r3, r3, #7
 800687e:	633b      	str	r3, [r7, #48]	; 0x30
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	2b7f      	cmp	r3, #127	; 0x7f
 8006884:	d8f0      	bhi.n	8006868 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	637a      	str	r2, [r7, #52]	; 0x34
 800688c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a0:	e00b      	b.n	80068ba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	1c59      	adds	r1, r3, #1
 80068aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	09db      	lsrs	r3, r3, #7
 80068b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	2b7f      	cmp	r3, #127	; 0x7f
 80068be:	d8f0      	bhi.n	80068a2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80068c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	701a      	strb	r2, [r3, #0]
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	e00b      	b.n	80068f4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	1c59      	adds	r1, r3, #1
 80068e4:	6279      	str	r1, [r7, #36]	; 0x24
 80068e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	09db      	lsrs	r3, r3, #7
 80068f2:	623b      	str	r3, [r7, #32]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	2b7f      	cmp	r3, #127	; 0x7f
 80068f8:	d8f0      	bhi.n	80068dc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006900:	6a3a      	ldr	r2, [r7, #32]
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	2300      	movs	r3, #0
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	e00b      	b.n	800692c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	1c59      	adds	r1, r3, #1
 800691c:	61f9      	str	r1, [r7, #28]
 800691e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	09db      	lsrs	r3, r3, #7
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b7f      	cmp	r3, #127	; 0x7f
 8006930:	d8f0      	bhi.n	8006914 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	61fa      	str	r2, [r7, #28]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006942:	2215      	movs	r2, #21
 8006944:	68f9      	ldr	r1, [r7, #12]
 8006946:	6938      	ldr	r0, [r7, #16]
 8006948:	f7ff fab4 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f383 8811 	msr	BASEPRI, r3
}
 8006952:	bf00      	nop
 8006954:	3748      	adds	r7, #72	; 0x48
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20014480 	.word	0x20014480
 8006960:	20014450 	.word	0x20014450

08006964 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006968:	4b07      	ldr	r3, [pc, #28]	; (8006988 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006970:	4b05      	ldr	r3, [pc, #20]	; (8006988 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800697a:	4b03      	ldr	r3, [pc, #12]	; (8006988 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4798      	blx	r3
  }
}
 8006982:	bf00      	nop
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20014450 	.word	0x20014450

0800698c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006994:	f3ef 8311 	mrs	r3, BASEPRI
 8006998:	f04f 0120 	mov.w	r1, #32
 800699c:	f381 8811 	msr	BASEPRI, r1
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	480b      	ldr	r0, [pc, #44]	; (80069d0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80069a4:	f7ff f994 	bl	8005cd0 <_PreparePacket>
 80069a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069aa:	2280      	movs	r2, #128	; 0x80
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	6938      	ldr	r0, [r7, #16]
 80069b0:	f7ff f93e 	bl	8005c30 <_EncodeStr>
 80069b4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80069b6:	220e      	movs	r2, #14
 80069b8:	68f9      	ldr	r1, [r7, #12]
 80069ba:	6938      	ldr	r0, [r7, #16]
 80069bc:	f7ff fa7a 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f383 8811 	msr	BASEPRI, r3
}
 80069c6:	bf00      	nop
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20014480 	.word	0x20014480

080069d4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80069d4:	b590      	push	{r4, r7, lr}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80069da:	4b15      	ldr	r3, [pc, #84]	; (8006a30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01a      	beq.n	8006a18 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80069e2:	4b13      	ldr	r3, [pc, #76]	; (8006a30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80069ec:	4b10      	ldr	r3, [pc, #64]	; (8006a30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4798      	blx	r3
 80069f4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069f8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80069fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	000a      	movs	r2, r1
 8006a08:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4621      	mov	r1, r4
 8006a10:	200d      	movs	r0, #13
 8006a12:	f7ff fbe5 	bl	80061e0 <SEGGER_SYSVIEW_RecordU32x2>
 8006a16:	e006      	b.n	8006a26 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	200c      	movs	r0, #12
 8006a20:	f7ff fba2 	bl	8006168 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd90      	pop	{r4, r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20014450 	.word	0x20014450
 8006a34:	e0001004 	.word	0xe0001004

08006a38 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a42:	f04f 0120 	mov.w	r1, #32
 8006a46:	f381 8811 	msr	BASEPRI, r1
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	4819      	ldr	r0, [pc, #100]	; (8006ab4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006a4e:	f7ff f93f 	bl	8005cd0 <_PreparePacket>
 8006a52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006a58:	4b17      	ldr	r3, [pc, #92]	; (8006ab8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a60:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	e00b      	b.n	8006a84 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	1c59      	adds	r1, r3, #1
 8006a74:	6179      	str	r1, [r7, #20]
 8006a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	09db      	lsrs	r3, r3, #7
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b7f      	cmp	r3, #127	; 0x7f
 8006a88:	d8f0      	bhi.n	8006a6c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	617a      	str	r2, [r7, #20]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	68b8      	ldr	r0, [r7, #8]
 8006aa0:	f7ff fa08 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f383 8811 	msr	BASEPRI, r3
}
 8006aaa:	bf00      	nop
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20014480 	.word	0x20014480
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac6:	f04f 0120 	mov.w	r1, #32
 8006aca:	f381 8811 	msr	BASEPRI, r1
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	4807      	ldr	r0, [pc, #28]	; (8006af0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006ad2:	f7ff f8fd 	bl	8005cd0 <_PreparePacket>
 8006ad6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006ad8:	2203      	movs	r2, #3
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6838      	ldr	r0, [r7, #0]
 8006ade:	f7ff f9e9 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f383 8811 	msr	BASEPRI, r3
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20014480 	.word	0x20014480

08006af4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006afa:	f3ef 8311 	mrs	r3, BASEPRI
 8006afe:	f04f 0120 	mov.w	r1, #32
 8006b02:	f381 8811 	msr	BASEPRI, r1
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	4807      	ldr	r0, [pc, #28]	; (8006b28 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b0a:	f7ff f8e1 	bl	8005cd0 <_PreparePacket>
 8006b0e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b10:	2212      	movs	r2, #18
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6838      	ldr	r0, [r7, #0]
 8006b16:	f7ff f9cd 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f383 8811 	msr	BASEPRI, r3
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20014480 	.word	0x20014480

08006b2c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b32:	f3ef 8311 	mrs	r3, BASEPRI
 8006b36:	f04f 0120 	mov.w	r1, #32
 8006b3a:	f381 8811 	msr	BASEPRI, r1
 8006b3e:	607b      	str	r3, [r7, #4]
 8006b40:	4807      	ldr	r0, [pc, #28]	; (8006b60 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006b42:	f7ff f8c5 	bl	8005cd0 <_PreparePacket>
 8006b46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006b48:	2211      	movs	r2, #17
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6838      	ldr	r0, [r7, #0]
 8006b4e:	f7ff f9b1 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f383 8811 	msr	BASEPRI, r3
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20014480 	.word	0x20014480

08006b64 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b70:	f04f 0120 	mov.w	r1, #32
 8006b74:	f381 8811 	msr	BASEPRI, r1
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	4819      	ldr	r0, [pc, #100]	; (8006be0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006b7c:	f7ff f8a8 	bl	8005cd0 <_PreparePacket>
 8006b80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b86:	4b17      	ldr	r3, [pc, #92]	; (8006be4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	e00b      	b.n	8006bb2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	61f9      	str	r1, [r7, #28]
 8006ba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	09db      	lsrs	r3, r3, #7
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb6:	d8f0      	bhi.n	8006b9a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	61fa      	str	r2, [r7, #28]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006bc8:	2208      	movs	r2, #8
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	6938      	ldr	r0, [r7, #16]
 8006bce:	f7ff f971 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f383 8811 	msr	BASEPRI, r3
}
 8006bd8:	bf00      	nop
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20014480 	.word	0x20014480
 8006be4:	20014450 	.word	0x20014450

08006be8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf4:	f04f 0120 	mov.w	r1, #32
 8006bf8:	f381 8811 	msr	BASEPRI, r1
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	4819      	ldr	r0, [pc, #100]	; (8006c64 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c00:	f7ff f866 	bl	8005cd0 <_PreparePacket>
 8006c04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c0a:	4b17      	ldr	r3, [pc, #92]	; (8006c68 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	e00b      	b.n	8006c36 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	61f9      	str	r1, [r7, #28]
 8006c28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	09db      	lsrs	r3, r3, #7
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3a:	d8f0      	bhi.n	8006c1e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	61fa      	str	r2, [r7, #28]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	6938      	ldr	r0, [r7, #16]
 8006c52:	f7ff f92f 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f383 8811 	msr	BASEPRI, r3
}
 8006c5c:	bf00      	nop
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20014480 	.word	0x20014480
 8006c68:	20014450 	.word	0x20014450

08006c6c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c74:	f3ef 8311 	mrs	r3, BASEPRI
 8006c78:	f04f 0120 	mov.w	r1, #32
 8006c7c:	f381 8811 	msr	BASEPRI, r1
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	4819      	ldr	r0, [pc, #100]	; (8006ce8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006c84:	f7ff f824 	bl	8005cd0 <_PreparePacket>
 8006c88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c8e:	4b17      	ldr	r3, [pc, #92]	; (8006cec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	e00b      	b.n	8006cba <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	1c59      	adds	r1, r3, #1
 8006caa:	61f9      	str	r1, [r7, #28]
 8006cac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	09db      	lsrs	r3, r3, #7
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8006cbe:	d8f0      	bhi.n	8006ca2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	61fa      	str	r2, [r7, #28]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006cd0:	2206      	movs	r2, #6
 8006cd2:	68f9      	ldr	r1, [r7, #12]
 8006cd4:	6938      	ldr	r0, [r7, #16]
 8006cd6:	f7ff f8ed 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f383 8811 	msr	BASEPRI, r3
}
 8006ce0:	bf00      	nop
 8006ce2:	3720      	adds	r7, #32
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20014480 	.word	0x20014480
 8006cec:	20014450 	.word	0x20014450

08006cf0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08a      	sub	sp, #40	; 0x28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8006cfe:	f04f 0120 	mov.w	r1, #32
 8006d02:	f381 8811 	msr	BASEPRI, r1
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	4827      	ldr	r0, [pc, #156]	; (8006da8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006d0a:	f7fe ffe1 	bl	8005cd0 <_PreparePacket>
 8006d0e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d14:	4b25      	ldr	r3, [pc, #148]	; (8006dac <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	e00b      	b.n	8006d40 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	1c59      	adds	r1, r3, #1
 8006d30:	6279      	str	r1, [r7, #36]	; 0x24
 8006d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	09db      	lsrs	r3, r3, #7
 8006d3e:	623b      	str	r3, [r7, #32]
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	2b7f      	cmp	r3, #127	; 0x7f
 8006d44:	d8f0      	bhi.n	8006d28 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	627a      	str	r2, [r7, #36]	; 0x24
 8006d4c:	6a3a      	ldr	r2, [r7, #32]
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	e00b      	b.n	8006d78 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	1c59      	adds	r1, r3, #1
 8006d68:	61f9      	str	r1, [r7, #28]
 8006d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	09db      	lsrs	r3, r3, #7
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d7c:	d8f0      	bhi.n	8006d60 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	61fa      	str	r2, [r7, #28]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006d8e:	2207      	movs	r2, #7
 8006d90:	68f9      	ldr	r1, [r7, #12]
 8006d92:	6938      	ldr	r0, [r7, #16]
 8006d94:	f7ff f88e 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f383 8811 	msr	BASEPRI, r3
}
 8006d9e:	bf00      	nop
 8006da0:	3728      	adds	r7, #40	; 0x28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20014480 	.word	0x20014480
 8006dac:	20014450 	.word	0x20014450

08006db0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006db8:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	1ad3      	subs	r3, r2, r3
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	20014450 	.word	0x20014450

08006dd0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	; 0x30
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006dda:	4b3b      	ldr	r3, [pc, #236]	; (8006ec8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d06d      	beq.n	8006ebe <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006de2:	4b39      	ldr	r3, [pc, #228]	; (8006ec8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006de8:	2300      	movs	r3, #0
 8006dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dec:	e008      	b.n	8006e00 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d3f2      	bcc.n	8006dee <SEGGER_SYSVIEW_SendModule+0x1e>
 8006e08:	e000      	b.n	8006e0c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006e0a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d055      	beq.n	8006ebe <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e12:	f3ef 8311 	mrs	r3, BASEPRI
 8006e16:	f04f 0120 	mov.w	r1, #32
 8006e1a:	f381 8811 	msr	BASEPRI, r1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	482a      	ldr	r0, [pc, #168]	; (8006ecc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006e22:	f7fe ff55 	bl	8005cd0 <_PreparePacket>
 8006e26:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	623b      	str	r3, [r7, #32]
 8006e34:	e00b      	b.n	8006e4e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	1c59      	adds	r1, r3, #1
 8006e3e:	6279      	str	r1, [r7, #36]	; 0x24
 8006e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	09db      	lsrs	r3, r3, #7
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	2b7f      	cmp	r3, #127	; 0x7f
 8006e52:	d8f0      	bhi.n	8006e36 <SEGGER_SYSVIEW_SendModule+0x66>
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	627a      	str	r2, [r7, #36]	; 0x24
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	61fb      	str	r3, [r7, #28]
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	e00b      	b.n	8006e88 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	1c59      	adds	r1, r3, #1
 8006e78:	61f9      	str	r1, [r7, #28]
 8006e7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	09db      	lsrs	r3, r3, #7
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8c:	d8f0      	bhi.n	8006e70 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	61fa      	str	r2, [r7, #28]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2280      	movs	r2, #128	; 0x80
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f7fe fec2 	bl	8005c30 <_EncodeStr>
 8006eac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006eae:	2216      	movs	r2, #22
 8006eb0:	68f9      	ldr	r1, [r7, #12]
 8006eb2:	6938      	ldr	r0, [r7, #16]
 8006eb4:	f7fe fffe 	bl	8005eb4 <_SendPacket>
      RECORD_END();
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006ebe:	bf00      	nop
 8006ec0:	3730      	adds	r7, #48	; 0x30
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20014478 	.word	0x20014478
 8006ecc:	20014480 	.word	0x20014480

08006ed0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006ed6:	4b0c      	ldr	r3, [pc, #48]	; (8006f08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00f      	beq.n	8006efe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006ede:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1f2      	bne.n	8006ee4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20014478 	.word	0x20014478

08006f0c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006f12:	f3ef 8311 	mrs	r3, BASEPRI
 8006f16:	f04f 0120 	mov.w	r1, #32
 8006f1a:	f381 8811 	msr	BASEPRI, r1
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	4817      	ldr	r0, [pc, #92]	; (8006f80 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006f22:	f7fe fed5 	bl	8005cd0 <_PreparePacket>
 8006f26:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	4b14      	ldr	r3, [pc, #80]	; (8006f84 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	e00b      	b.n	8006f50 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	1c59      	adds	r1, r3, #1
 8006f40:	6179      	str	r1, [r7, #20]
 8006f42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f46:	b2d2      	uxtb	r2, r2
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	09db      	lsrs	r3, r3, #7
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b7f      	cmp	r3, #127	; 0x7f
 8006f54:	d8f0      	bhi.n	8006f38 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	617a      	str	r2, [r7, #20]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f66:	221b      	movs	r2, #27
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	68b8      	ldr	r0, [r7, #8]
 8006f6c:	f7fe ffa2 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f383 8811 	msr	BASEPRI, r3
}
 8006f76:	bf00      	nop
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20014480 	.word	0x20014480
 8006f84:	2001447c 	.word	0x2001447c

08006f88 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	; 0x28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f90:	f3ef 8311 	mrs	r3, BASEPRI
 8006f94:	f04f 0120 	mov.w	r1, #32
 8006f98:	f381 8811 	msr	BASEPRI, r1
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	4827      	ldr	r0, [pc, #156]	; (800703c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006fa0:	f7fe fe96 	bl	8005cd0 <_PreparePacket>
 8006fa4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fa6:	2280      	movs	r2, #128	; 0x80
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	6938      	ldr	r0, [r7, #16]
 8006fac:	f7fe fe40 	bl	8005c30 <_EncodeStr>
 8006fb0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	623b      	str	r3, [r7, #32]
 8006fba:	e00b      	b.n	8006fd4 <SEGGER_SYSVIEW_Warn+0x4c>
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	1c59      	adds	r1, r3, #1
 8006fc4:	6279      	str	r1, [r7, #36]	; 0x24
 8006fc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	09db      	lsrs	r3, r3, #7
 8006fd2:	623b      	str	r3, [r7, #32]
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fd8:	d8f0      	bhi.n	8006fbc <SEGGER_SYSVIEW_Warn+0x34>
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	627a      	str	r2, [r7, #36]	; 0x24
 8006fe0:	6a3a      	ldr	r2, [r7, #32]
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e00b      	b.n	800700c <SEGGER_SYSVIEW_Warn+0x84>
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	1c59      	adds	r1, r3, #1
 8006ffc:	61f9      	str	r1, [r7, #28]
 8006ffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	09db      	lsrs	r3, r3, #7
 800700a:	61bb      	str	r3, [r7, #24]
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	2b7f      	cmp	r3, #127	; 0x7f
 8007010:	d8f0      	bhi.n	8006ff4 <SEGGER_SYSVIEW_Warn+0x6c>
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	61fa      	str	r2, [r7, #28]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007022:	221a      	movs	r2, #26
 8007024:	68f9      	ldr	r1, [r7, #12]
 8007026:	6938      	ldr	r0, [r7, #16]
 8007028:	f7fe ff44 	bl	8005eb4 <_SendPacket>
  RECORD_END();
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f383 8811 	msr	BASEPRI, r3
}
 8007032:	bf00      	nop
 8007034:	3728      	adds	r7, #40	; 0x28
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20014480 	.word	0x20014480

08007040 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007044:	4b13      	ldr	r3, [pc, #76]	; (8007094 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007046:	7e1b      	ldrb	r3, [r3, #24]
 8007048:	4619      	mov	r1, r3
 800704a:	4a13      	ldr	r2, [pc, #76]	; (8007098 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800704c:	460b      	mov	r3, r1
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	440b      	add	r3, r1
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	4413      	add	r3, r2
 8007056:	336c      	adds	r3, #108	; 0x6c
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800705c:	7e1b      	ldrb	r3, [r3, #24]
 800705e:	4618      	mov	r0, r3
 8007060:	490d      	ldr	r1, [pc, #52]	; (8007098 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007062:	4603      	mov	r3, r0
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	4403      	add	r3, r0
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	440b      	add	r3, r1
 800706c:	3370      	adds	r3, #112	; 0x70
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d00b      	beq.n	800708c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007074:	4b07      	ldr	r3, [pc, #28]	; (8007094 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007076:	789b      	ldrb	r3, [r3, #2]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d107      	bne.n	800708c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800707e:	2201      	movs	r2, #1
 8007080:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007082:	f7fe fe31 	bl	8005ce8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007086:	4b03      	ldr	r3, [pc, #12]	; (8007094 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007088:	2200      	movs	r2, #0
 800708a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800708c:	4b01      	ldr	r3, [pc, #4]	; (8007094 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800708e:	781b      	ldrb	r3, [r3, #0]
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20014450 	.word	0x20014450
 8007098:	200147e0 	.word	0x200147e0

0800709c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	2000      	movs	r0, #0
 80070b0:	f7fe fcc8 	bl	8005a44 <SEGGER_RTT_Write>
  return len;
 80070b4:	683b      	ldr	r3, [r7, #0]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <_StartSysView>:
	U8         NumBytesHelloRcvd;
	U8         NumBytesHelloSent;
	int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
	int r;
	r = SEGGER_SYSVIEW_IsStarted();
 80070c4:	f7ff ffbc 	bl	8007040 <SEGGER_SYSVIEW_IsStarted>
 80070c8:	6078      	str	r0, [r7, #4]
	if (r == 0) SEGGER_SYSVIEW_Start();
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <_StartSysView+0x16>
 80070d0:	f7ff f9e8 	bl	80064a4 <SEGGER_SYSVIEW_Start>
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	71fb      	strb	r3, [r7, #7]
	if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80070e6:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <_cbOnUARTRx+0x3c>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d806      	bhi.n	80070fc <_cbOnUARTRx+0x20>
		_SVInfo.NumBytesHelloRcvd++;
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <_cbOnUARTRx+0x3c>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	3301      	adds	r3, #1
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	4b08      	ldr	r3, [pc, #32]	; (8007118 <_cbOnUARTRx+0x3c>)
 80070f8:	701a      	strb	r2, [r3, #0]
		goto Done;
 80070fa:	e009      	b.n	8007110 <_cbOnUARTRx+0x34>
	}
	_StartSysView();
 80070fc:	f7ff ffdf 	bl	80070be <_StartSysView>
	SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8007100:	4b05      	ldr	r3, [pc, #20]	; (8007118 <_cbOnUARTRx+0x3c>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	4618      	mov	r0, r3
 8007106:	1dfb      	adds	r3, r7, #7
 8007108:	2201      	movs	r2, #1
 800710a:	4619      	mov	r1, r3
 800710c:	f7fe fc74 	bl	80059f8 <SEGGER_RTT_WriteDownBuffer>
Done:
	return;
 8007110:	bf00      	nop
}
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20000030 	.word	0x20000030

0800711c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	int r;

	if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8007124:	4b14      	ldr	r3, [pc, #80]	; (8007178 <_cbOnUARTTx+0x5c>)
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b03      	cmp	r3, #3
 800712a:	d80f      	bhi.n	800714c <_cbOnUARTTx+0x30>
		*pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800712c:	4b12      	ldr	r3, [pc, #72]	; (8007178 <_cbOnUARTTx+0x5c>)
 800712e:	785b      	ldrb	r3, [r3, #1]
 8007130:	461a      	mov	r2, r3
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <_cbOnUARTTx+0x60>)
 8007134:	5c9a      	ldrb	r2, [r3, r2]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	701a      	strb	r2, [r3, #0]
		_SVInfo.NumBytesHelloSent++;
 800713a:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <_cbOnUARTTx+0x5c>)
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	3301      	adds	r3, #1
 8007140:	b2da      	uxtb	r2, r3
 8007142:	4b0d      	ldr	r3, [pc, #52]	; (8007178 <_cbOnUARTTx+0x5c>)
 8007144:	705a      	strb	r2, [r3, #1]
		r = 1;
 8007146:	2301      	movs	r3, #1
 8007148:	60fb      	str	r3, [r7, #12]
		goto Done;
 800714a:	e00f      	b.n	800716c <_cbOnUARTTx+0x50>
	}
	r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <_cbOnUARTTx+0x5c>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe faa3 	bl	80056a0 <SEGGER_RTT_ReadUpBufferNoLock>
 800715a:	4603      	mov	r3, r0
 800715c:	60fb      	str	r3, [r7, #12]
	if (r < 0) {  // Failed to read from up buffer?
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	da02      	bge.n	800716a <_cbOnUARTTx+0x4e>
		r = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e000      	b.n	800716c <_cbOnUARTTx+0x50>
	}
Done:
 800716a:	bf00      	nop
	return r;
 800716c:	68fb      	ldr	r3, [r7, #12]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000030 	.word	0x20000030
 800717c:	0800b93c 	.word	0x0800b93c

08007180 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8007188:	4a04      	ldr	r2, [pc, #16]	; (800719c <SEGGER_UART_init+0x1c>)
 800718a:	4905      	ldr	r1, [pc, #20]	; (80071a0 <SEGGER_UART_init+0x20>)
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f863 	bl	8007258 <HIF_UART_Init>
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	080070dd 	.word	0x080070dd
 80071a0:	0800711d 	.word	0x0800711d

080071a4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
//void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
	int UsartStatus;
	uint8_t v;
	int r;

	UsartStatus = USART_SR;                              // Examine status register
 80071aa:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <USART2_IRQHandler+0x80>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
	if(UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d011      	beq.n	80071de <USART2_IRQHandler+0x3a>
		v = USART_DR;                                      // Read data
 80071ba:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <USART2_IRQHandler+0x84>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	71fb      	strb	r3, [r7, #7]
		if((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f003 030b 	and.w	r3, r3, #11
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d108      	bne.n	80071de <USART2_IRQHandler+0x3a>
			(void)v;                                         // Avoid warning in BTL
			if(_cbOnRx) {
 80071cc:	4b17      	ldr	r3, [pc, #92]	; (800722c <USART2_IRQHandler+0x88>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <USART2_IRQHandler+0x3a>
				_cbOnRx(v);
 80071d4:	4b15      	ldr	r3, [pc, #84]	; (800722c <USART2_IRQHandler+0x88>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	79fa      	ldrb	r2, [r7, #7]
 80071da:	4610      	mov	r0, r2
 80071dc:	4798      	blx	r3
			}
		}
	}
	if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d01a      	beq.n	800721e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 80071e8:	4b11      	ldr	r3, [pc, #68]	; (8007230 <USART2_IRQHandler+0x8c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d015      	beq.n	800721c <USART2_IRQHandler+0x78>
		r = _cbOnTx(&v);
 80071f0:	4b0f      	ldr	r3, [pc, #60]	; (8007230 <USART2_IRQHandler+0x8c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	1dfa      	adds	r2, r7, #7
 80071f6:	4610      	mov	r0, r2
 80071f8:	4798      	blx	r3
 80071fa:	60b8      	str	r0, [r7, #8]
		if (r == 0) {                          // No more characters to send ?
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <USART2_IRQHandler+0x6c>
			USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8007202:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <USART2_IRQHandler+0x90>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a0b      	ldr	r2, [pc, #44]	; (8007234 <USART2_IRQHandler+0x90>)
 8007208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	e006      	b.n	800721e <USART2_IRQHandler+0x7a>
		} else {
			USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8007210:	4b04      	ldr	r3, [pc, #16]	; (8007224 <USART2_IRQHandler+0x80>)
 8007212:	681b      	ldr	r3, [r3, #0]
			USART_DR = v;  // Start transmission by writing to data register
 8007214:	79fa      	ldrb	r2, [r7, #7]
 8007216:	4b04      	ldr	r3, [pc, #16]	; (8007228 <USART2_IRQHandler+0x84>)
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e000      	b.n	800721e <USART2_IRQHandler+0x7a>
		if (_cbOnTx == NULL) return;  // No callback set? => Nothing to do...
 800721c:	bf00      	nop
		}
	}
}
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40004400 	.word	0x40004400
 8007228:	40004404 	.word	0x40004404
 800722c:	20014564 	.word	0x20014564
 8007230:	20014568 	.word	0x20014568
 8007234:	4000440c 	.word	0x4000440c

08007238 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
	USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800723c:	4b05      	ldr	r3, [pc, #20]	; (8007254 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a04      	ldr	r2, [pc, #16]	; (8007254 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007246:	6013      	str	r3, [r2, #0]
}
 8007248:	bf00      	nop
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	4000440c 	.word	0x4000440c

08007258 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
	uint32_t v;
	uint32_t Div;
	//
	// Configure USART RX/TX pins for alternate function AF7
	//
	RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8007264:	4b2f      	ldr	r3, [pc, #188]	; (8007324 <HIF_UART_Init+0xcc>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a2e      	ldr	r2, [pc, #184]	; (8007324 <HIF_UART_Init+0xcc>)
 800726a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800726e:	6013      	str	r3, [r2, #0]
	RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8007270:	4b2d      	ldr	r3, [pc, #180]	; (8007328 <HIF_UART_Init+0xd0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a2c      	ldr	r2, [pc, #176]	; (8007328 <HIF_UART_Init+0xd0>)
 8007276:	f043 0301 	orr.w	r3, r3, #1
 800727a:	6013      	str	r3, [r2, #0]
	v  = GPIO_AFRL;
 800727c:	4b2b      	ldr	r3, [pc, #172]	; (800732c <HIF_UART_Init+0xd4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	613b      	str	r3, [r7, #16]
	v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007288:	613b      	str	r3, [r7, #16]
	v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8007290:	613b      	str	r3, [r7, #16]
	GPIO_AFRL = v;
 8007292:	4a26      	ldr	r2, [pc, #152]	; (800732c <HIF_UART_Init+0xd4>)
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	6013      	str	r3, [r2, #0]
	//
	// Configure USART RX/TX pins for alternate function usage
	//
	v  = GPIO_MODER;
 8007298:	4b25      	ldr	r3, [pc, #148]	; (8007330 <HIF_UART_Init+0xd8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	613b      	str	r3, [r7, #16]
	v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072a4:	613b      	str	r3, [r7, #16]
	v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80072ac:	613b      	str	r3, [r7, #16]
	GPIO_MODER = v;
 80072ae:	4a20      	ldr	r2, [pc, #128]	; (8007330 <HIF_UART_Init+0xd8>)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6013      	str	r3, [r2, #0]
	//
	// Initialize USART
	//
	USART_CR1 = 0
 80072b4:	4b1f      	ldr	r3, [pc, #124]	; (8007334 <HIF_UART_Init+0xdc>)
 80072b6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80072ba:	601a      	str	r2, [r3, #0]
			| (0 << 10)                         // PCE    = 0; No parity control
			| (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
			| (1 <<  3)                         // TE     = 1; Transmitter enabled
			| (1 <<  2)                         // RE     = 1; Receiver enabled
			;
	USART_CR2 = 0
 80072bc:	4b1e      	ldr	r3, [pc, #120]	; (8007338 <HIF_UART_Init+0xe0>)
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
			| (0 << 12)                         // STOP = 00b; 1 stop bit
			;
	USART_CR3 = 0
 80072c2:	4b1e      	ldr	r3, [pc, #120]	; (800733c <HIF_UART_Init+0xe4>)
 80072c4:	2280      	movs	r2, #128	; 0x80
 80072c6:	601a      	str	r2, [r3, #0]
			| (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
			;
	//
	// Set baudrate
	//
	Div = Baudrate * 8;                       // We use 8x oversampling.
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	617b      	str	r3, [r7, #20]
	Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80072ce:	4a1c      	ldr	r2, [pc, #112]	; (8007340 <HIF_UART_Init+0xe8>)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d6:	3301      	adds	r3, #1
 80072d8:	617b      	str	r3, [r7, #20]
	Div = Div / 2;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	085b      	lsrs	r3, r3, #1
 80072de:	617b      	str	r3, [r7, #20]
	if (Div > 0xFFF) {
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e6:	d302      	bcc.n	80072ee <HIF_UART_Init+0x96>
		Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80072e8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80072ec:	617b      	str	r3, [r7, #20]
	}
	if (Div >= 1) {
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d004      	beq.n	80072fe <HIF_UART_Init+0xa6>
		USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	4a12      	ldr	r2, [pc, #72]	; (8007344 <HIF_UART_Init+0xec>)
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	6013      	str	r3, [r2, #0]
	}
	//
	// Setup callbacks which are called by ISR handler and enable interrupt in NVIC
	//
	_cbOnRx = cbOnRx;
 80072fe:	4a12      	ldr	r2, [pc, #72]	; (8007348 <HIF_UART_Init+0xf0>)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6013      	str	r3, [r2, #0]
	_cbOnTx = cbOnTx;
 8007304:	4a11      	ldr	r2, [pc, #68]	; (800734c <HIF_UART_Init+0xf4>)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6013      	str	r3, [r2, #0]
	USART_IRQPriorityConfig(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800730a:	2106      	movs	r1, #6
 800730c:	2026      	movs	r0, #38	; 0x26
 800730e:	f7fd ff4b 	bl	80051a8 <USART_IRQPriorityConfig>
	USART_IRQInterruptConfig(USART_IRQn, ENABLE);
 8007312:	2101      	movs	r1, #1
 8007314:	2026      	movs	r0, #38	; 0x26
 8007316:	f7fd fec1 	bl	800509c <USART_IRQInterruptConfig>
}
 800731a:	bf00      	nop
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	40023840 	.word	0x40023840
 8007328:	40023830 	.word	0x40023830
 800732c:	40020020 	.word	0x40020020
 8007330:	40020000 	.word	0x40020000
 8007334:	4000440c 	.word	0x4000440c
 8007338:	40004410 	.word	0x40004410
 800733c:	40004414 	.word	0x40004414
 8007340:	0501bd00 	.word	0x0501bd00
 8007344:	40004408 	.word	0x40004408
 8007348:	20014564 	.word	0x20014564
 800734c:	20014568 	.word	0x20014568

08007350 <lcd_puts_xy>:
LCD_Data_Screen1_t screen1_data;
LCD_Data_Screen2_t screen2_data;
LCD_Data_Screen3_t screen3_data;
LCD_Data_Screen4_t screen4_data, screen4_data_config;

void lcd_puts_xy(unsigned char x, unsigned char y, char* c, LCD5110_Pixel_t color, LCD5110_FontSize_t font) {
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	603a      	str	r2, [r7, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	4603      	mov	r3, r0
 800735c:	71fb      	strb	r3, [r7, #7]
 800735e:	460b      	mov	r3, r1
 8007360:	71bb      	strb	r3, [r7, #6]
 8007362:	4613      	mov	r3, r2
 8007364:	717b      	strb	r3, [r7, #5]
	LCD5110_GotoXY(x, y);
 8007366:	79ba      	ldrb	r2, [r7, #6]
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	4611      	mov	r1, r2
 800736c:	4618      	mov	r0, r3
 800736e:	f7fa fa77 	bl	8001860 <LCD5110_GotoXY>
	LCD5110_Puts(c, color, font);
 8007372:	7c3a      	ldrb	r2, [r7, #16]
 8007374:	797b      	ldrb	r3, [r7, #5]
 8007376:	4619      	mov	r1, r3
 8007378:	6838      	ldr	r0, [r7, #0]
 800737a:	f7fa fb33 	bl	80019e4 <LCD5110_Puts>
}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <range_scale>:

void range_scale(float value, char* value_buf, char* range) {
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
	if(value < 1000) {
 8007394:	edd7 7a03 	vldr	s15, [r7, #12]
 8007398:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007488 <range_scale+0x100>
 800739c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a4:	d505      	bpl.n	80073b2 <range_scale+0x2a>
		sprintf(range, "%s", "m");
 80073a6:	4a39      	ldr	r2, [pc, #228]	; (800748c <range_scale+0x104>)
 80073a8:	4939      	ldr	r1, [pc, #228]	; (8007490 <range_scale+0x108>)
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fde6 	bl	8008f7c <siprintf>
 80073b0:	e02c      	b.n	800740c <range_scale+0x84>
	} else if(value < 1000*1000) {
 80073b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80073b6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8007494 <range_scale+0x10c>
 80073ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c2:	d50d      	bpl.n	80073e0 <range_scale+0x58>
		sprintf(range, "%s", " ");
 80073c4:	4a34      	ldr	r2, [pc, #208]	; (8007498 <range_scale+0x110>)
 80073c6:	4932      	ldr	r1, [pc, #200]	; (8007490 <range_scale+0x108>)
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 fdd7 	bl	8008f7c <siprintf>
		value /= 1000;
 80073ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80073d2:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007488 <range_scale+0x100>
 80073d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073da:	edc7 7a03 	vstr	s15, [r7, #12]
 80073de:	e015      	b.n	800740c <range_scale+0x84>
	} else if(value < 1000*1000*1000) {
 80073e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80073e4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800749c <range_scale+0x114>
 80073e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f0:	d50c      	bpl.n	800740c <range_scale+0x84>
		sprintf(range, "%s", "k");
 80073f2:	4a2b      	ldr	r2, [pc, #172]	; (80074a0 <range_scale+0x118>)
 80073f4:	4926      	ldr	r1, [pc, #152]	; (8007490 <range_scale+0x108>)
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fdc0 	bl	8008f7c <siprintf>
		value /= 1000*1000;
 80073fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8007400:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007494 <range_scale+0x10c>
 8007404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007408:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	if(value < 10)
 800740c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007410:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741c:	d509      	bpl.n	8007432 <range_scale+0xaa>
		sprintf(value_buf, "%1.3f", value);
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7f9 f8f2 	bl	8000608 <__aeabi_f2d>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	491e      	ldr	r1, [pc, #120]	; (80074a4 <range_scale+0x11c>)
 800742a:	68b8      	ldr	r0, [r7, #8]
 800742c:	f001 fda6 	bl	8008f7c <siprintf>
	else if(value < 100)
		sprintf(value_buf, "%2.2f", value);
	else if(value < 1000)
		sprintf(value_buf, "%3.1f", value);
}
 8007430:	e025      	b.n	800747e <range_scale+0xf6>
	else if(value < 100)
 8007432:	edd7 7a03 	vldr	s15, [r7, #12]
 8007436:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80074a8 <range_scale+0x120>
 800743a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800743e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007442:	d509      	bpl.n	8007458 <range_scale+0xd0>
		sprintf(value_buf, "%2.2f", value);
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7f9 f8df 	bl	8000608 <__aeabi_f2d>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4917      	ldr	r1, [pc, #92]	; (80074ac <range_scale+0x124>)
 8007450:	68b8      	ldr	r0, [r7, #8]
 8007452:	f001 fd93 	bl	8008f7c <siprintf>
}
 8007456:	e012      	b.n	800747e <range_scale+0xf6>
	else if(value < 1000)
 8007458:	edd7 7a03 	vldr	s15, [r7, #12]
 800745c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007488 <range_scale+0x100>
 8007460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007468:	d400      	bmi.n	800746c <range_scale+0xe4>
}
 800746a:	e008      	b.n	800747e <range_scale+0xf6>
		sprintf(value_buf, "%3.1f", value);
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f7f9 f8cb 	bl	8000608 <__aeabi_f2d>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	490e      	ldr	r1, [pc, #56]	; (80074b0 <range_scale+0x128>)
 8007478:	68b8      	ldr	r0, [r7, #8]
 800747a:	f001 fd7f 	bl	8008f7c <siprintf>
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	447a0000 	.word	0x447a0000
 800748c:	0800b47c 	.word	0x0800b47c
 8007490:	0800b480 	.word	0x0800b480
 8007494:	49742400 	.word	0x49742400
 8007498:	0800b484 	.word	0x0800b484
 800749c:	4e6e6b28 	.word	0x4e6e6b28
 80074a0:	0800b488 	.word	0x0800b488
 80074a4:	0800b48c 	.word	0x0800b48c
 80074a8:	42c80000 	.word	0x42c80000
 80074ac:	0800b494 	.word	0x0800b494
 80074b0:	0800b49c 	.word	0x0800b49c

080074b4 <lcd_screen_1_refresh>:

void lcd_screen_1_refresh() {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 80074ba:	f7fa f901 	bl	80016c0 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "Vrms", 1, 1);
 80074be:	2301      	movs	r3, #1
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	2301      	movs	r3, #1
 80074c4:	4a4f      	ldr	r2, [pc, #316]	; (8007604 <lcd_screen_1_refresh+0x150>)
 80074c6:	2100      	movs	r1, #0
 80074c8:	2000      	movs	r0, #0
 80074ca:	f7ff ff41 	bl	8007350 <lcd_puts_xy>
	range_scale(screen1_data.Vrms, val_buf, range_buf);
 80074ce:	4b4e      	ldr	r3, [pc, #312]	; (8007608 <lcd_screen_1_refresh+0x154>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	463a      	mov	r2, r7
 80074d4:	1d39      	adds	r1, r7, #4
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7ff ff56 	bl	8007388 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 80074dc:	1d3a      	adds	r2, r7, #4
 80074de:	2301      	movs	r3, #1
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	2301      	movs	r3, #1
 80074e4:	2100      	movs	r1, #0
 80074e6:	201c      	movs	r0, #28
 80074e8:	f7ff ff32 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 80074ec:	463a      	mov	r2, r7
 80074ee:	2301      	movs	r3, #1
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	2301      	movs	r3, #1
 80074f4:	2100      	movs	r1, #0
 80074f6:	203c      	movs	r0, #60	; 0x3c
 80074f8:	f7ff ff2a 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "V", 1, 1);
 80074fc:	2301      	movs	r3, #1
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2301      	movs	r3, #1
 8007502:	4a42      	ldr	r2, [pc, #264]	; (800760c <lcd_screen_1_refresh+0x158>)
 8007504:	2100      	movs	r1, #0
 8007506:	2042      	movs	r0, #66	; 0x42
 8007508:	f7ff ff22 	bl	8007350 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Vp", 1, 1);
 800750c:	2301      	movs	r3, #1
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	2301      	movs	r3, #1
 8007512:	4a3f      	ldr	r2, [pc, #252]	; (8007610 <lcd_screen_1_refresh+0x15c>)
 8007514:	210c      	movs	r1, #12
 8007516:	2000      	movs	r0, #0
 8007518:	f7ff ff1a 	bl	8007350 <lcd_puts_xy>
	range_scale(screen1_data.Vpeak, val_buf, range_buf);
 800751c:	4b3a      	ldr	r3, [pc, #232]	; (8007608 <lcd_screen_1_refresh+0x154>)
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	463a      	mov	r2, r7
 8007522:	1d39      	adds	r1, r7, #4
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff ff2f 	bl	8007388 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 800752a:	1d3a      	adds	r2, r7, #4
 800752c:	2301      	movs	r3, #1
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	2301      	movs	r3, #1
 8007532:	210c      	movs	r1, #12
 8007534:	201c      	movs	r0, #28
 8007536:	f7ff ff0b 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 800753a:	463a      	mov	r2, r7
 800753c:	2301      	movs	r3, #1
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	2301      	movs	r3, #1
 8007542:	210c      	movs	r1, #12
 8007544:	203c      	movs	r0, #60	; 0x3c
 8007546:	f7ff ff03 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1, 1);
 800754a:	2301      	movs	r3, #1
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	2301      	movs	r3, #1
 8007550:	4a2e      	ldr	r2, [pc, #184]	; (800760c <lcd_screen_1_refresh+0x158>)
 8007552:	210c      	movs	r1, #12
 8007554:	2042      	movs	r0, #66	; 0x42
 8007556:	f7ff fefb 	bl	8007350 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_2, "Irms", 1, 1);
 800755a:	2301      	movs	r3, #1
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	2301      	movs	r3, #1
 8007560:	4a2c      	ldr	r2, [pc, #176]	; (8007614 <lcd_screen_1_refresh+0x160>)
 8007562:	211d      	movs	r1, #29
 8007564:	2000      	movs	r0, #0
 8007566:	f7ff fef3 	bl	8007350 <lcd_puts_xy>
	range_scale(screen1_data.Irms, val_buf, range_buf);
 800756a:	4b27      	ldr	r3, [pc, #156]	; (8007608 <lcd_screen_1_refresh+0x154>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	463a      	mov	r2, r7
 8007570:	1d39      	adds	r1, r7, #4
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff ff08 	bl	8007388 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_2, val_buf, 1, 1);
 8007578:	1d3a      	adds	r2, r7, #4
 800757a:	2301      	movs	r3, #1
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	2301      	movs	r3, #1
 8007580:	211d      	movs	r1, #29
 8007582:	201c      	movs	r0, #28
 8007584:	f7ff fee4 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_2, range_buf, 1, 1);
 8007588:	463a      	mov	r2, r7
 800758a:	2301      	movs	r3, #1
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	2301      	movs	r3, #1
 8007590:	211d      	movs	r1, #29
 8007592:	203c      	movs	r0, #60	; 0x3c
 8007594:	f7ff fedc 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_2, "A", 1, 1);
 8007598:	2301      	movs	r3, #1
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	2301      	movs	r3, #1
 800759e:	4a1e      	ldr	r2, [pc, #120]	; (8007618 <lcd_screen_1_refresh+0x164>)
 80075a0:	211d      	movs	r1, #29
 80075a2:	2042      	movs	r0, #66	; 0x42
 80075a4:	f7ff fed4 	bl	8007350 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "Ip", 1, 1);
 80075a8:	2301      	movs	r3, #1
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	2301      	movs	r3, #1
 80075ae:	4a1b      	ldr	r2, [pc, #108]	; (800761c <lcd_screen_1_refresh+0x168>)
 80075b0:	2129      	movs	r1, #41	; 0x29
 80075b2:	2000      	movs	r0, #0
 80075b4:	f7ff fecc 	bl	8007350 <lcd_puts_xy>
	range_scale(screen1_data.Ipeak, val_buf, range_buf);
 80075b8:	4b13      	ldr	r3, [pc, #76]	; (8007608 <lcd_screen_1_refresh+0x154>)
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	463a      	mov	r2, r7
 80075be:	1d39      	adds	r1, r7, #4
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fee1 	bl	8007388 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 80075c6:	1d3a      	adds	r2, r7, #4
 80075c8:	2301      	movs	r3, #1
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	2301      	movs	r3, #1
 80075ce:	2129      	movs	r1, #41	; 0x29
 80075d0:	201c      	movs	r0, #28
 80075d2:	f7ff febd 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1, 1);
 80075d6:	463a      	mov	r2, r7
 80075d8:	2301      	movs	r3, #1
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	2301      	movs	r3, #1
 80075de:	2129      	movs	r1, #41	; 0x29
 80075e0:	203c      	movs	r0, #60	; 0x3c
 80075e2:	f7ff feb5 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "A", 1, 1);
 80075e6:	2301      	movs	r3, #1
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	2301      	movs	r3, #1
 80075ec:	4a0a      	ldr	r2, [pc, #40]	; (8007618 <lcd_screen_1_refresh+0x164>)
 80075ee:	2129      	movs	r1, #41	; 0x29
 80075f0:	2042      	movs	r0, #66	; 0x42
 80075f2:	f7ff fead 	bl	8007350 <lcd_puts_xy>

	LCD5110_Refresh();
 80075f6:	f7fa f895 	bl	8001724 <LCD5110_Refresh>
}
 80075fa:	bf00      	nop
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	0800b4a4 	.word	0x0800b4a4
 8007608:	200148ac 	.word	0x200148ac
 800760c:	0800b4ac 	.word	0x0800b4ac
 8007610:	0800b4b0 	.word	0x0800b4b0
 8007614:	0800b4b4 	.word	0x0800b4b4
 8007618:	0800b4bc 	.word	0x0800b4bc
 800761c:	0800b4c0 	.word	0x0800b4c0

08007620 <lcd_screen_2_refresh>:

void lcd_screen_2_refresh() {
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af02      	add	r7, sp, #8
	char val_buf[10];
	char range_buf[2];
	LCD5110_Clear();
 8007626:	f7fa f84b 	bl	80016c0 <LCD5110_Clear>

	lcd_puts_xy(0, ROW_LINE_1, "P", 1, 1);
 800762a:	2301      	movs	r3, #1
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	2301      	movs	r3, #1
 8007630:	4a49      	ldr	r2, [pc, #292]	; (8007758 <lcd_screen_2_refresh+0x138>)
 8007632:	2100      	movs	r1, #0
 8007634:	2000      	movs	r0, #0
 8007636:	f7ff fe8b 	bl	8007350 <lcd_puts_xy>
	range_scale(screen2_data.ActivePower, val_buf, range_buf);
 800763a:	4b48      	ldr	r3, [pc, #288]	; (800775c <lcd_screen_2_refresh+0x13c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	463a      	mov	r2, r7
 8007640:	1d39      	adds	r1, r7, #4
 8007642:	4618      	mov	r0, r3
 8007644:	f7ff fea0 	bl	8007388 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 8007648:	1d3a      	adds	r2, r7, #4
 800764a:	2301      	movs	r3, #1
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	2301      	movs	r3, #1
 8007650:	2100      	movs	r1, #0
 8007652:	201c      	movs	r0, #28
 8007654:	f7ff fe7c 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 8007658:	463a      	mov	r2, r7
 800765a:	2301      	movs	r3, #1
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	2301      	movs	r3, #1
 8007660:	2100      	movs	r1, #0
 8007662:	203c      	movs	r0, #60	; 0x3c
 8007664:	f7ff fe74 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "W", 1, 1);
 8007668:	2301      	movs	r3, #1
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2301      	movs	r3, #1
 800766e:	4a3c      	ldr	r2, [pc, #240]	; (8007760 <lcd_screen_2_refresh+0x140>)
 8007670:	2100      	movs	r1, #0
 8007672:	2042      	movs	r0, #66	; 0x42
 8007674:	f7ff fe6c 	bl	8007350 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "Q", 1, 1);
 8007678:	2301      	movs	r3, #1
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	2301      	movs	r3, #1
 800767e:	4a39      	ldr	r2, [pc, #228]	; (8007764 <lcd_screen_2_refresh+0x144>)
 8007680:	210c      	movs	r1, #12
 8007682:	2000      	movs	r0, #0
 8007684:	f7ff fe64 	bl	8007350 <lcd_puts_xy>
	range_scale(screen2_data.ReactivePower, val_buf, range_buf);
 8007688:	4b34      	ldr	r3, [pc, #208]	; (800775c <lcd_screen_2_refresh+0x13c>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	463a      	mov	r2, r7
 800768e:	1d39      	adds	r1, r7, #4
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff fe79 	bl	8007388 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 8007696:	1d3a      	adds	r2, r7, #4
 8007698:	2301      	movs	r3, #1
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	2301      	movs	r3, #1
 800769e:	210c      	movs	r1, #12
 80076a0:	201c      	movs	r0, #28
 80076a2:	f7ff fe55 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 80076a6:	463a      	mov	r2, r7
 80076a8:	2301      	movs	r3, #1
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	2301      	movs	r3, #1
 80076ae:	210c      	movs	r1, #12
 80076b0:	203c      	movs	r0, #60	; 0x3c
 80076b2:	f7ff fe4d 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAR", 1, 1);
 80076b6:	2301      	movs	r3, #1
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	2301      	movs	r3, #1
 80076bc:	4a2a      	ldr	r2, [pc, #168]	; (8007768 <lcd_screen_2_refresh+0x148>)
 80076be:	210c      	movs	r1, #12
 80076c0:	2042      	movs	r0, #66	; 0x42
 80076c2:	f7ff fe45 	bl	8007350 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_3_1, "S", 1, 1);
 80076c6:	2301      	movs	r3, #1
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	2301      	movs	r3, #1
 80076cc:	4a27      	ldr	r2, [pc, #156]	; (800776c <lcd_screen_2_refresh+0x14c>)
 80076ce:	2118      	movs	r1, #24
 80076d0:	2000      	movs	r0, #0
 80076d2:	f7ff fe3d 	bl	8007350 <lcd_puts_xy>
	range_scale(screen2_data.ApparantPower, val_buf, range_buf);
 80076d6:	4b21      	ldr	r3, [pc, #132]	; (800775c <lcd_screen_2_refresh+0x13c>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	463a      	mov	r2, r7
 80076dc:	1d39      	adds	r1, r7, #4
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff fe52 	bl	8007388 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1, 1);
 80076e4:	1d3a      	adds	r2, r7, #4
 80076e6:	2301      	movs	r3, #1
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	2301      	movs	r3, #1
 80076ec:	2118      	movs	r1, #24
 80076ee:	201c      	movs	r0, #28
 80076f0:	f7ff fe2e 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1, 1);
 80076f4:	463a      	mov	r2, r7
 80076f6:	2301      	movs	r3, #1
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	2301      	movs	r3, #1
 80076fc:	2118      	movs	r1, #24
 80076fe:	203c      	movs	r0, #60	; 0x3c
 8007700:	f7ff fe26 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "VA", 1, 1);
 8007704:	2301      	movs	r3, #1
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	2301      	movs	r3, #1
 800770a:	4a19      	ldr	r2, [pc, #100]	; (8007770 <lcd_screen_2_refresh+0x150>)
 800770c:	2118      	movs	r1, #24
 800770e:	2042      	movs	r0, #66	; 0x42
 8007710:	f7ff fe1e 	bl	8007350 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_4, "PF", 1, 1);
 8007714:	2301      	movs	r3, #1
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	2301      	movs	r3, #1
 800771a:	4a16      	ldr	r2, [pc, #88]	; (8007774 <lcd_screen_2_refresh+0x154>)
 800771c:	2129      	movs	r1, #41	; 0x29
 800771e:	2000      	movs	r0, #0
 8007720:	f7ff fe16 	bl	8007350 <lcd_puts_xy>
	sprintf(val_buf, "%.2f", screen2_data.PowerFactor);
 8007724:	4b0d      	ldr	r3, [pc, #52]	; (800775c <lcd_screen_2_refresh+0x13c>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	4618      	mov	r0, r3
 800772a:	f7f8 ff6d 	bl	8000608 <__aeabi_f2d>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	1d38      	adds	r0, r7, #4
 8007734:	4910      	ldr	r1, [pc, #64]	; (8007778 <lcd_screen_2_refresh+0x158>)
 8007736:	f001 fc21 	bl	8008f7c <siprintf>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 800773a:	1d3a      	adds	r2, r7, #4
 800773c:	2301      	movs	r3, #1
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	2301      	movs	r3, #1
 8007742:	2129      	movs	r1, #41	; 0x29
 8007744:	201c      	movs	r0, #28
 8007746:	f7ff fe03 	bl	8007350 <lcd_puts_xy>

	LCD5110_Refresh();
 800774a:	f7f9 ffeb 	bl	8001724 <LCD5110_Refresh>
}
 800774e:	bf00      	nop
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	0800b4c4 	.word	0x0800b4c4
 800775c:	2001488c 	.word	0x2001488c
 8007760:	0800b4c8 	.word	0x0800b4c8
 8007764:	0800b4cc 	.word	0x0800b4cc
 8007768:	0800b4d0 	.word	0x0800b4d0
 800776c:	0800b4d4 	.word	0x0800b4d4
 8007770:	0800b4d8 	.word	0x0800b4d8
 8007774:	0800b4dc 	.word	0x0800b4dc
 8007778:	0800b4e0 	.word	0x0800b4e0

0800777c <lcd_screen_3_refresh>:

void lcd_screen_3_refresh() {
 800777c:	b580      	push	{r7, lr}
 800777e:	b08c      	sub	sp, #48	; 0x30
 8007780:	af02      	add	r7, sp, #8
	LCD5110_Clear();
 8007782:	f7f9 ff9d 	bl	80016c0 <LCD5110_Clear>

	char val_buf[10];
	char range_buf[2];

	lcd_puts_xy(0, ROW_LINE_1, "P.t", 1, 1);
 8007786:	2301      	movs	r3, #1
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	2301      	movs	r3, #1
 800778c:	4a4d      	ldr	r2, [pc, #308]	; (80078c4 <lcd_screen_3_refresh+0x148>)
 800778e:	2100      	movs	r1, #0
 8007790:	2000      	movs	r0, #0
 8007792:	f7ff fddd 	bl	8007350 <lcd_puts_xy>
	range_scale(screen3_data.ActiveEnergy, val_buf, range_buf);
 8007796:	4b4c      	ldr	r3, [pc, #304]	; (80078c8 <lcd_screen_3_refresh+0x14c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f107 0218 	add.w	r2, r7, #24
 800779e:	f107 011c 	add.w	r1, r7, #28
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff fdf0 	bl	8007388 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_1, val_buf, 1, 1);
 80077a8:	f107 021c 	add.w	r2, r7, #28
 80077ac:	2301      	movs	r3, #1
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	2301      	movs	r3, #1
 80077b2:	2100      	movs	r1, #0
 80077b4:	201c      	movs	r0, #28
 80077b6:	f7ff fdcb 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_1, range_buf, 1, 1);
 80077ba:	f107 0218 	add.w	r2, r7, #24
 80077be:	2301      	movs	r3, #1
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	2301      	movs	r3, #1
 80077c4:	2100      	movs	r1, #0
 80077c6:	203c      	movs	r0, #60	; 0x3c
 80077c8:	f7ff fdc2 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_1, "Wh", 1, 1);
 80077cc:	2301      	movs	r3, #1
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	2301      	movs	r3, #1
 80077d2:	4a3e      	ldr	r2, [pc, #248]	; (80078cc <lcd_screen_3_refresh+0x150>)
 80077d4:	2100      	movs	r1, #0
 80077d6:	2042      	movs	r0, #66	; 0x42
 80077d8:	f7ff fdba 	bl	8007350 <lcd_puts_xy>

	lcd_puts_xy(0, ROW_LINE_2, "S.t", 1, 1);
 80077dc:	2301      	movs	r3, #1
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	2301      	movs	r3, #1
 80077e2:	4a3b      	ldr	r2, [pc, #236]	; (80078d0 <lcd_screen_3_refresh+0x154>)
 80077e4:	210c      	movs	r1, #12
 80077e6:	2000      	movs	r0, #0
 80077e8:	f7ff fdb2 	bl	8007350 <lcd_puts_xy>
	range_scale(screen3_data.ApparantEnergy, val_buf, range_buf);
 80077ec:	4b36      	ldr	r3, [pc, #216]	; (80078c8 <lcd_screen_3_refresh+0x14c>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f107 0218 	add.w	r2, r7, #24
 80077f4:	f107 011c 	add.w	r1, r7, #28
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff fdc5 	bl	8007388 <range_scale>
	lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 80077fe:	f107 021c 	add.w	r2, r7, #28
 8007802:	2301      	movs	r3, #1
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	2301      	movs	r3, #1
 8007808:	210c      	movs	r1, #12
 800780a:	201c      	movs	r0, #28
 800780c:	f7ff fda0 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8007810:	f107 0218 	add.w	r2, r7, #24
 8007814:	2301      	movs	r3, #1
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	2301      	movs	r3, #1
 800781a:	210c      	movs	r1, #12
 800781c:	203c      	movs	r0, #60	; 0x3c
 800781e:	f7ff fd97 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "VAh", 1, 1);
 8007822:	2301      	movs	r3, #1
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	2301      	movs	r3, #1
 8007828:	4a2a      	ldr	r2, [pc, #168]	; (80078d4 <lcd_screen_3_refresh+0x158>)
 800782a:	210c      	movs	r1, #12
 800782c:	2042      	movs	r0, #66	; 0x42
 800782e:	f7ff fd8f 	bl	8007350 <lcd_puts_xy>

	if(screen3_mode == S3_RESET_CONFIRM) {
 8007832:	4b29      	ldr	r3, [pc, #164]	; (80078d8 <lcd_screen_3_refresh+0x15c>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d10f      	bne.n	800785a <lcd_screen_3_refresh+0xde>
		lcd_puts_xy(12, ROW_LINE_3_1, "Clear Data?", 1, 1);
 800783a:	2301      	movs	r3, #1
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	2301      	movs	r3, #1
 8007840:	4a26      	ldr	r2, [pc, #152]	; (80078dc <lcd_screen_3_refresh+0x160>)
 8007842:	2118      	movs	r1, #24
 8007844:	200c      	movs	r0, #12
 8007846:	f7ff fd83 	bl	8007350 <lcd_puts_xy>
		lcd_puts_xy(12, ROW_LINE_3_1 + 8, "[#]Y / [*]N", 1, 1);
 800784a:	2301      	movs	r3, #1
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	2301      	movs	r3, #1
 8007850:	4a23      	ldr	r2, [pc, #140]	; (80078e0 <lcd_screen_3_refresh+0x164>)
 8007852:	2120      	movs	r1, #32
 8007854:	200c      	movs	r0, #12
 8007856:	f7ff fd7b 	bl	8007350 <lcd_puts_xy>
	}

	char days_buf[5];
	sprintf(days_buf, "%04lu", Screen3_Timer.days);
 800785a:	4b22      	ldr	r3, [pc, #136]	; (80078e4 <lcd_screen_3_refresh+0x168>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	f107 0310 	add.w	r3, r7, #16
 8007862:	4921      	ldr	r1, [pc, #132]	; (80078e8 <lcd_screen_3_refresh+0x16c>)
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fb89 	bl	8008f7c <siprintf>
	lcd_puts_xy(0, ROW_LINE_4, days_buf, 1, 1);
 800786a:	f107 0210 	add.w	r2, r7, #16
 800786e:	2301      	movs	r3, #1
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	2301      	movs	r3, #1
 8007874:	2129      	movs	r1, #41	; 0x29
 8007876:	2000      	movs	r0, #0
 8007878:	f7ff fd6a 	bl	8007350 <lcd_puts_xy>
	lcd_puts_xy(26, ROW_LINE_4 + 2, "DAY(s)", 1, 0);
 800787c:	2300      	movs	r3, #0
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	2301      	movs	r3, #1
 8007882:	4a1a      	ldr	r2, [pc, #104]	; (80078ec <lcd_screen_3_refresh+0x170>)
 8007884:	212b      	movs	r1, #43	; 0x2b
 8007886:	201a      	movs	r0, #26
 8007888:	f7ff fd62 	bl	8007350 <lcd_puts_xy>

	char runtime_buf[9];
	sprintf(runtime_buf, "%02u:%02u:%02u", Screen3_Timer.hours, Screen3_Timer.minutes, Screen3_Timer.seconds);
 800788c:	4b15      	ldr	r3, [pc, #84]	; (80078e4 <lcd_screen_3_refresh+0x168>)
 800788e:	791b      	ldrb	r3, [r3, #4]
 8007890:	461a      	mov	r2, r3
 8007892:	4b14      	ldr	r3, [pc, #80]	; (80078e4 <lcd_screen_3_refresh+0x168>)
 8007894:	795b      	ldrb	r3, [r3, #5]
 8007896:	4619      	mov	r1, r3
 8007898:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <lcd_screen_3_refresh+0x168>)
 800789a:	799b      	ldrb	r3, [r3, #6]
 800789c:	1d38      	adds	r0, r7, #4
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	460b      	mov	r3, r1
 80078a2:	4913      	ldr	r1, [pc, #76]	; (80078f0 <lcd_screen_3_refresh+0x174>)
 80078a4:	f001 fb6a 	bl	8008f7c <siprintf>
	lcd_puts_xy(56, ROW_LINE_4 + 2, runtime_buf, 1, 0);
 80078a8:	1d3a      	adds	r2, r7, #4
 80078aa:	2300      	movs	r3, #0
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	2301      	movs	r3, #1
 80078b0:	212b      	movs	r1, #43	; 0x2b
 80078b2:	2038      	movs	r0, #56	; 0x38
 80078b4:	f7ff fd4c 	bl	8007350 <lcd_puts_xy>

	LCD5110_Refresh();
 80078b8:	f7f9 ff34 	bl	8001724 <LCD5110_Refresh>
}
 80078bc:	bf00      	nop
 80078be:	3728      	adds	r7, #40	; 0x28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	0800b4e8 	.word	0x0800b4e8
 80078c8:	200148c8 	.word	0x200148c8
 80078cc:	0800b4ec 	.word	0x0800b4ec
 80078d0:	0800b4f0 	.word	0x0800b4f0
 80078d4:	0800b4f4 	.word	0x0800b4f4
 80078d8:	2001489c 	.word	0x2001489c
 80078dc:	0800b4f8 	.word	0x0800b4f8
 80078e0:	0800b504 	.word	0x0800b504
 80078e4:	200148d0 	.word	0x200148d0
 80078e8:	0800b510 	.word	0x0800b510
 80078ec:	0800b518 	.word	0x0800b518
 80078f0:	0800b520 	.word	0x0800b520

080078f4 <lcd_screen_4_refresh>:

void lcd_screen_4_refresh() {
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b090      	sub	sp, #64	; 0x40
 80078f8:	af02      	add	r7, sp, #8
	char time_buf[9];
	char val_buf[10];
	char range_buf[2];
	char interval_buf[16];

	LCD5110_Clear();
 80078fa:	f7f9 fee1 	bl	80016c0 <LCD5110_Clear>

	if(screen4_mode == S4_NORMAL_DISPLAY) {
 80078fe:	4bb1      	ldr	r3, [pc, #708]	; (8007bc4 <lcd_screen_4_refresh+0x2d0>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 80c2 	bne.w	8007a8c <lcd_screen_4_refresh+0x198>

		lcd_puts_xy(0, 0, "PKV", 1, 1);
 8007908:	2301      	movs	r3, #1
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	2301      	movs	r3, #1
 800790e:	4aae      	ldr	r2, [pc, #696]	; (8007bc8 <lcd_screen_4_refresh+0x2d4>)
 8007910:	2100      	movs	r1, #0
 8007912:	2000      	movs	r0, #0
 8007914:	f7ff fd1c 	bl	8007350 <lcd_puts_xy>
		range_scale(screen4_data.User_PKI, val_buf, range_buf);
 8007918:	4bac      	ldr	r3, [pc, #688]	; (8007bcc <lcd_screen_4_refresh+0x2d8>)
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f107 0210 	add.w	r2, r7, #16
 8007920:	f107 0114 	add.w	r1, r7, #20
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fd2f 	bl	8007388 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 0, val_buf, 1, 1);
 800792a:	f107 0214 	add.w	r2, r7, #20
 800792e:	2301      	movs	r3, #1
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	2301      	movs	r3, #1
 8007934:	2100      	movs	r1, #0
 8007936:	201c      	movs	r0, #28
 8007938:	f7ff fd0a 	bl	8007350 <lcd_puts_xy>
		lcd_puts_xy(VALUE_RANGE_COLUMN, 0, range_buf, 1, 1);
 800793c:	f107 0210 	add.w	r2, r7, #16
 8007940:	2301      	movs	r3, #1
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	2301      	movs	r3, #1
 8007946:	2100      	movs	r1, #0
 8007948:	203c      	movs	r0, #60	; 0x3c
 800794a:	f7ff fd01 	bl	8007350 <lcd_puts_xy>
		lcd_puts_xy(UNITS_COLUMN, 0, "V", 1, 1);
 800794e:	2301      	movs	r3, #1
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	2301      	movs	r3, #1
 8007954:	4a9e      	ldr	r2, [pc, #632]	; (8007bd0 <lcd_screen_4_refresh+0x2dc>)
 8007956:	2100      	movs	r1, #0
 8007958:	2042      	movs	r0, #66	; 0x42
 800795a:	f7ff fcf9 	bl	8007350 <lcd_puts_xy>

		lcd_puts_xy(0, 10, "PKI", 1, 1);
 800795e:	2301      	movs	r3, #1
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	2301      	movs	r3, #1
 8007964:	4a9b      	ldr	r2, [pc, #620]	; (8007bd4 <lcd_screen_4_refresh+0x2e0>)
 8007966:	210a      	movs	r1, #10
 8007968:	2000      	movs	r0, #0
 800796a:	f7ff fcf1 	bl	8007350 <lcd_puts_xy>
		range_scale(screen4_data.User_PKI, val_buf, range_buf);
 800796e:	4b97      	ldr	r3, [pc, #604]	; (8007bcc <lcd_screen_4_refresh+0x2d8>)
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f107 0210 	add.w	r2, r7, #16
 8007976:	f107 0114 	add.w	r1, r7, #20
 800797a:	4618      	mov	r0, r3
 800797c:	f7ff fd04 	bl	8007388 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 10, val_buf, 1, 1);
 8007980:	f107 0214 	add.w	r2, r7, #20
 8007984:	2301      	movs	r3, #1
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	2301      	movs	r3, #1
 800798a:	210a      	movs	r1, #10
 800798c:	201c      	movs	r0, #28
 800798e:	f7ff fcdf 	bl	8007350 <lcd_puts_xy>
		lcd_puts_xy(VALUE_RANGE_COLUMN, 10, range_buf, 1, 1);
 8007992:	f107 0210 	add.w	r2, r7, #16
 8007996:	2301      	movs	r3, #1
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	2301      	movs	r3, #1
 800799c:	210a      	movs	r1, #10
 800799e:	203c      	movs	r0, #60	; 0x3c
 80079a0:	f7ff fcd6 	bl	8007350 <lcd_puts_xy>
		lcd_puts_xy(UNITS_COLUMN, 10, "A", 1, 1);
 80079a4:	2301      	movs	r3, #1
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	2301      	movs	r3, #1
 80079aa:	4a8b      	ldr	r2, [pc, #556]	; (8007bd8 <lcd_screen_4_refresh+0x2e4>)
 80079ac:	210a      	movs	r1, #10
 80079ae:	2042      	movs	r0, #66	; 0x42
 80079b0:	f7ff fcce 	bl	8007350 <lcd_puts_xy>

		lcd_puts_xy(0, 20, "SAG", 1, 1);
 80079b4:	2301      	movs	r3, #1
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	2301      	movs	r3, #1
 80079ba:	4a88      	ldr	r2, [pc, #544]	; (8007bdc <lcd_screen_4_refresh+0x2e8>)
 80079bc:	2114      	movs	r1, #20
 80079be:	2000      	movs	r0, #0
 80079c0:	f7ff fcc6 	bl	8007350 <lcd_puts_xy>
		range_scale(screen4_data.User_SAG, val_buf, range_buf);
 80079c4:	4b81      	ldr	r3, [pc, #516]	; (8007bcc <lcd_screen_4_refresh+0x2d8>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f107 0210 	add.w	r2, r7, #16
 80079cc:	f107 0114 	add.w	r1, r7, #20
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff fcd9 	bl	8007388 <range_scale>
		lcd_puts_xy(VALUE_COLUMN, 20, val_buf, 1, 1);
 80079d6:	f107 0214 	add.w	r2, r7, #20
 80079da:	2301      	movs	r3, #1
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	2301      	movs	r3, #1
 80079e0:	2114      	movs	r1, #20
 80079e2:	201c      	movs	r0, #28
 80079e4:	f7ff fcb4 	bl	8007350 <lcd_puts_xy>
		lcd_puts_xy(VALUE_RANGE_COLUMN, 20, range_buf, 1, 1);
 80079e8:	f107 0210 	add.w	r2, r7, #16
 80079ec:	2301      	movs	r3, #1
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	2301      	movs	r3, #1
 80079f2:	2114      	movs	r1, #20
 80079f4:	203c      	movs	r0, #60	; 0x3c
 80079f6:	f7ff fcab 	bl	8007350 <lcd_puts_xy>
		lcd_puts_xy(UNITS_COLUMN, 20, "V", 1, 1);
 80079fa:	2301      	movs	r3, #1
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2301      	movs	r3, #1
 8007a00:	4a73      	ldr	r2, [pc, #460]	; (8007bd0 <lcd_screen_4_refresh+0x2dc>)
 8007a02:	2114      	movs	r1, #20
 8007a04:	2042      	movs	r0, #66	; 0x42
 8007a06:	f7ff fca3 	bl	8007350 <lcd_puts_xy>

		sprintf(interval_buf, "Interval %dmins", Sample_Interval);
 8007a0a:	4b75      	ldr	r3, [pc, #468]	; (8007be0 <lcd_screen_4_refresh+0x2ec>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	463b      	mov	r3, r7
 8007a12:	4974      	ldr	r1, [pc, #464]	; (8007be4 <lcd_screen_4_refresh+0x2f0>)
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 fab1 	bl	8008f7c <siprintf>
		lcd_puts_xy(0, 30, interval_buf, 1, 1);
 8007a1a:	463a      	mov	r2, r7
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	2301      	movs	r3, #1
 8007a22:	211e      	movs	r1, #30
 8007a24:	2000      	movs	r0, #0
 8007a26:	f7ff fc93 	bl	8007350 <lcd_puts_xy>

		sprintf(date_buf, "%02u/%02u/20%02u", Screen4_RTC.date.date, Screen4_RTC.date.month, Screen4_RTC.date.year);
 8007a2a:	4b6f      	ldr	r3, [pc, #444]	; (8007be8 <lcd_screen_4_refresh+0x2f4>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4b6d      	ldr	r3, [pc, #436]	; (8007be8 <lcd_screen_4_refresh+0x2f4>)
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	4619      	mov	r1, r3
 8007a36:	4b6c      	ldr	r3, [pc, #432]	; (8007be8 <lcd_screen_4_refresh+0x2f4>)
 8007a38:	789b      	ldrb	r3, [r3, #2]
 8007a3a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	460b      	mov	r3, r1
 8007a42:	496a      	ldr	r1, [pc, #424]	; (8007bec <lcd_screen_4_refresh+0x2f8>)
 8007a44:	f001 fa9a 	bl	8008f7c <siprintf>
		lcd_puts_xy(0, ROW_LINE_4 + 2, date_buf, 1, 0);
 8007a48:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	2301      	movs	r3, #1
 8007a52:	212b      	movs	r1, #43	; 0x2b
 8007a54:	2000      	movs	r0, #0
 8007a56:	f7ff fc7b 	bl	8007350 <lcd_puts_xy>
		sprintf(time_buf, "%02u:%02u:%02u", Screen4_RTC.time.hours, Screen4_RTC.time.minutes, Screen4_RTC.time.seconds);
 8007a5a:	4b63      	ldr	r3, [pc, #396]	; (8007be8 <lcd_screen_4_refresh+0x2f4>)
 8007a5c:	79db      	ldrb	r3, [r3, #7]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	4b61      	ldr	r3, [pc, #388]	; (8007be8 <lcd_screen_4_refresh+0x2f4>)
 8007a62:	799b      	ldrb	r3, [r3, #6]
 8007a64:	4619      	mov	r1, r3
 8007a66:	4b60      	ldr	r3, [pc, #384]	; (8007be8 <lcd_screen_4_refresh+0x2f4>)
 8007a68:	795b      	ldrb	r3, [r3, #5]
 8007a6a:	f107 0020 	add.w	r0, r7, #32
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	460b      	mov	r3, r1
 8007a72:	495f      	ldr	r1, [pc, #380]	; (8007bf0 <lcd_screen_4_refresh+0x2fc>)
 8007a74:	f001 fa82 	bl	8008f7c <siprintf>
		lcd_puts_xy(56, ROW_LINE_4 + 2, time_buf, 1, 0);
 8007a78:	f107 0220 	add.w	r2, r7, #32
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	2301      	movs	r3, #1
 8007a82:	212b      	movs	r1, #43	; 0x2b
 8007a84:	2038      	movs	r0, #56	; 0x38
 8007a86:	f7ff fc63 	bl	8007350 <lcd_puts_xy>
 8007a8a:	e10a      	b.n	8007ca2 <lcd_screen_4_refresh+0x3ae>

	} else {
		lcd_puts_xy(0, ROW_LINE_1, "Configuration", 1, 1);
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	2301      	movs	r3, #1
 8007a92:	4a58      	ldr	r2, [pc, #352]	; (8007bf4 <lcd_screen_4_refresh+0x300>)
 8007a94:	2100      	movs	r1, #0
 8007a96:	2000      	movs	r0, #0
 8007a98:	f7ff fc5a 	bl	8007350 <lcd_puts_xy>

		if(screen4_mode == S4_CONFIG_DISPLAY) {
 8007a9c:	4b49      	ldr	r3, [pc, #292]	; (8007bc4 <lcd_screen_4_refresh+0x2d0>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	f040 80ee 	bne.w	8007c82 <lcd_screen_4_refresh+0x38e>

			lcd_puts_xy(0, ROW_LINE_1, "Configuration", 1, 1);
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4a51      	ldr	r2, [pc, #324]	; (8007bf4 <lcd_screen_4_refresh+0x300>)
 8007aae:	2100      	movs	r1, #0
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f7ff fc4d 	bl	8007350 <lcd_puts_xy>

			if(Screen4_Config_Target <= Screen4_Config_sag) {
 8007ab6:	4b50      	ldr	r3, [pc, #320]	; (8007bf8 <lcd_screen_4_refresh+0x304>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	f200 80a0 	bhi.w	8007c00 <lcd_screen_4_refresh+0x30c>

				lcd_puts_xy(0, ROW_LINE_2, "PKV", 1, 1);
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	4a40      	ldr	r2, [pc, #256]	; (8007bc8 <lcd_screen_4_refresh+0x2d4>)
 8007ac8:	210c      	movs	r1, #12
 8007aca:	2000      	movs	r0, #0
 8007acc:	f7ff fc40 	bl	8007350 <lcd_puts_xy>
				range_scale(screen4_data_config.User_PKI, val_buf, range_buf);
 8007ad0:	4b4a      	ldr	r3, [pc, #296]	; (8007bfc <lcd_screen_4_refresh+0x308>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f107 0210 	add.w	r2, r7, #16
 8007ad8:	f107 0114 	add.w	r1, r7, #20
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff fc53 	bl	8007388 <range_scale>
				lcd_puts_xy(VALUE_COLUMN, ROW_LINE_2, val_buf, 1, 1);
 8007ae2:	f107 0214 	add.w	r2, r7, #20
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	2301      	movs	r3, #1
 8007aec:	210c      	movs	r1, #12
 8007aee:	201c      	movs	r0, #28
 8007af0:	f7ff fc2e 	bl	8007350 <lcd_puts_xy>
				lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_2, range_buf, 1, 1);
 8007af4:	f107 0210 	add.w	r2, r7, #16
 8007af8:	2301      	movs	r3, #1
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2301      	movs	r3, #1
 8007afe:	210c      	movs	r1, #12
 8007b00:	203c      	movs	r0, #60	; 0x3c
 8007b02:	f7ff fc25 	bl	8007350 <lcd_puts_xy>
				lcd_puts_xy(UNITS_COLUMN, ROW_LINE_2, "V", 1, 1);
 8007b06:	2301      	movs	r3, #1
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4a30      	ldr	r2, [pc, #192]	; (8007bd0 <lcd_screen_4_refresh+0x2dc>)
 8007b0e:	210c      	movs	r1, #12
 8007b10:	2042      	movs	r0, #66	; 0x42
 8007b12:	f7ff fc1d 	bl	8007350 <lcd_puts_xy>

				lcd_puts_xy(0, ROW_LINE_3_1, "PKI", 1, 1);
 8007b16:	2301      	movs	r3, #1
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	4a2d      	ldr	r2, [pc, #180]	; (8007bd4 <lcd_screen_4_refresh+0x2e0>)
 8007b1e:	2118      	movs	r1, #24
 8007b20:	2000      	movs	r0, #0
 8007b22:	f7ff fc15 	bl	8007350 <lcd_puts_xy>
				range_scale(screen4_data_config.User_PKI, val_buf, range_buf);
 8007b26:	4b35      	ldr	r3, [pc, #212]	; (8007bfc <lcd_screen_4_refresh+0x308>)
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f107 0210 	add.w	r2, r7, #16
 8007b2e:	f107 0114 	add.w	r1, r7, #20
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fc28 	bl	8007388 <range_scale>
				lcd_puts_xy(VALUE_COLUMN, ROW_LINE_3_1, val_buf, 1, 1);
 8007b38:	f107 0214 	add.w	r2, r7, #20
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	2301      	movs	r3, #1
 8007b42:	2118      	movs	r1, #24
 8007b44:	201c      	movs	r0, #28
 8007b46:	f7ff fc03 	bl	8007350 <lcd_puts_xy>
				lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_3_1, range_buf, 1, 1);
 8007b4a:	f107 0210 	add.w	r2, r7, #16
 8007b4e:	2301      	movs	r3, #1
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	2301      	movs	r3, #1
 8007b54:	2118      	movs	r1, #24
 8007b56:	203c      	movs	r0, #60	; 0x3c
 8007b58:	f7ff fbfa 	bl	8007350 <lcd_puts_xy>
				lcd_puts_xy(UNITS_COLUMN, ROW_LINE_3_1, "A", 1, 1);
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	2301      	movs	r3, #1
 8007b62:	4a1d      	ldr	r2, [pc, #116]	; (8007bd8 <lcd_screen_4_refresh+0x2e4>)
 8007b64:	2118      	movs	r1, #24
 8007b66:	2042      	movs	r0, #66	; 0x42
 8007b68:	f7ff fbf2 	bl	8007350 <lcd_puts_xy>

				lcd_puts_xy(0, ROW_LINE_4, "SAG", 1, 1);
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	2301      	movs	r3, #1
 8007b72:	4a1a      	ldr	r2, [pc, #104]	; (8007bdc <lcd_screen_4_refresh+0x2e8>)
 8007b74:	2129      	movs	r1, #41	; 0x29
 8007b76:	2000      	movs	r0, #0
 8007b78:	f7ff fbea 	bl	8007350 <lcd_puts_xy>
				range_scale(screen4_data_config.User_SAG, val_buf, range_buf);
 8007b7c:	4b1f      	ldr	r3, [pc, #124]	; (8007bfc <lcd_screen_4_refresh+0x308>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f107 0210 	add.w	r2, r7, #16
 8007b84:	f107 0114 	add.w	r1, r7, #20
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fbfd 	bl	8007388 <range_scale>
				lcd_puts_xy(VALUE_COLUMN, ROW_LINE_4, val_buf, 1, 1);
 8007b8e:	f107 0214 	add.w	r2, r7, #20
 8007b92:	2301      	movs	r3, #1
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	2301      	movs	r3, #1
 8007b98:	2129      	movs	r1, #41	; 0x29
 8007b9a:	201c      	movs	r0, #28
 8007b9c:	f7ff fbd8 	bl	8007350 <lcd_puts_xy>
				lcd_puts_xy(VALUE_RANGE_COLUMN, ROW_LINE_4, range_buf, 1, 1);
 8007ba0:	f107 0210 	add.w	r2, r7, #16
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	2301      	movs	r3, #1
 8007baa:	2129      	movs	r1, #41	; 0x29
 8007bac:	203c      	movs	r0, #60	; 0x3c
 8007bae:	f7ff fbcf 	bl	8007350 <lcd_puts_xy>
				lcd_puts_xy(UNITS_COLUMN, ROW_LINE_4, "V", 1, 1);
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4a05      	ldr	r2, [pc, #20]	; (8007bd0 <lcd_screen_4_refresh+0x2dc>)
 8007bba:	2129      	movs	r1, #41	; 0x29
 8007bbc:	2042      	movs	r0, #66	; 0x42
 8007bbe:	f7ff fbc7 	bl	8007350 <lcd_puts_xy>
 8007bc2:	e06e      	b.n	8007ca2 <lcd_screen_4_refresh+0x3ae>
 8007bc4:	200148d9 	.word	0x200148d9
 8007bc8:	0800b530 	.word	0x0800b530
 8007bcc:	200148bc 	.word	0x200148bc
 8007bd0:	0800b4ac 	.word	0x0800b4ac
 8007bd4:	0800b534 	.word	0x0800b534
 8007bd8:	0800b4bc 	.word	0x0800b4bc
 8007bdc:	0800b538 	.word	0x0800b538
 8007be0:	200148d8 	.word	0x200148d8
 8007be4:	0800b53c 	.word	0x0800b53c
 8007be8:	200148a0 	.word	0x200148a0
 8007bec:	0800b54c 	.word	0x0800b54c
 8007bf0:	0800b520 	.word	0x0800b520
 8007bf4:	0800b560 	.word	0x0800b560
 8007bf8:	20014888 	.word	0x20014888
 8007bfc:	200148e8 	.word	0x200148e8

			} else {

				sprintf(interval_buf, "Interval %dmins", Sample_Interval_Config);
 8007c00:	4b2b      	ldr	r3, [pc, #172]	; (8007cb0 <lcd_screen_4_refresh+0x3bc>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	463b      	mov	r3, r7
 8007c08:	492a      	ldr	r1, [pc, #168]	; (8007cb4 <lcd_screen_4_refresh+0x3c0>)
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 f9b6 	bl	8008f7c <siprintf>
				lcd_puts_xy(0, ROW_LINE_2, interval_buf, 1, 1);
 8007c10:	463a      	mov	r2, r7
 8007c12:	2301      	movs	r3, #1
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	2301      	movs	r3, #1
 8007c18:	210c      	movs	r1, #12
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	f7ff fb98 	bl	8007350 <lcd_puts_xy>

				sprintf(date_buf, "%02u/%02u/20%02u", Screen4_RTC_Config.date.date, Screen4_RTC_Config.date.month, Screen4_RTC_Config.date.year);
 8007c20:	4b25      	ldr	r3, [pc, #148]	; (8007cb8 <lcd_screen_4_refresh+0x3c4>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	461a      	mov	r2, r3
 8007c26:	4b24      	ldr	r3, [pc, #144]	; (8007cb8 <lcd_screen_4_refresh+0x3c4>)
 8007c28:	785b      	ldrb	r3, [r3, #1]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4b22      	ldr	r3, [pc, #136]	; (8007cb8 <lcd_screen_4_refresh+0x3c4>)
 8007c2e:	789b      	ldrb	r3, [r3, #2]
 8007c30:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	460b      	mov	r3, r1
 8007c38:	4920      	ldr	r1, [pc, #128]	; (8007cbc <lcd_screen_4_refresh+0x3c8>)
 8007c3a:	f001 f99f 	bl	8008f7c <siprintf>
				lcd_puts_xy(0, ROW_LINE_3_2, date_buf, 1, 1);
 8007c3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007c42:	2301      	movs	r3, #1
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	2301      	movs	r3, #1
 8007c48:	211d      	movs	r1, #29
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	f7ff fb80 	bl	8007350 <lcd_puts_xy>
				sprintf(time_buf, "%02u:%02u:%02u", Screen4_RTC_Config.time.hours, Screen4_RTC_Config.time.minutes, Screen4_RTC_Config.time.seconds);
 8007c50:	4b19      	ldr	r3, [pc, #100]	; (8007cb8 <lcd_screen_4_refresh+0x3c4>)
 8007c52:	79db      	ldrb	r3, [r3, #7]
 8007c54:	461a      	mov	r2, r3
 8007c56:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <lcd_screen_4_refresh+0x3c4>)
 8007c58:	799b      	ldrb	r3, [r3, #6]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <lcd_screen_4_refresh+0x3c4>)
 8007c5e:	795b      	ldrb	r3, [r3, #5]
 8007c60:	f107 0020 	add.w	r0, r7, #32
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	460b      	mov	r3, r1
 8007c68:	4915      	ldr	r1, [pc, #84]	; (8007cc0 <lcd_screen_4_refresh+0x3cc>)
 8007c6a:	f001 f987 	bl	8008f7c <siprintf>
				lcd_puts_xy(0, ROW_LINE_4, time_buf, 1, 1);
 8007c6e:	f107 0220 	add.w	r2, r7, #32
 8007c72:	2301      	movs	r3, #1
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	2301      	movs	r3, #1
 8007c78:	2129      	movs	r1, #41	; 0x29
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7ff fb68 	bl	8007350 <lcd_puts_xy>
 8007c80:	e00f      	b.n	8007ca2 <lcd_screen_4_refresh+0x3ae>

			}

		} else {

			lcd_puts_xy(24, ROW_LINE_2, "Commit?", 1, 1);
 8007c82:	2301      	movs	r3, #1
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	2301      	movs	r3, #1
 8007c88:	4a0e      	ldr	r2, [pc, #56]	; (8007cc4 <lcd_screen_4_refresh+0x3d0>)
 8007c8a:	210c      	movs	r1, #12
 8007c8c:	2018      	movs	r0, #24
 8007c8e:	f7ff fb5f 	bl	8007350 <lcd_puts_xy>
			lcd_puts_xy(12, ROW_LINE_3_1, "[#]Y / [*]N", 1, 1);
 8007c92:	2301      	movs	r3, #1
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	2301      	movs	r3, #1
 8007c98:	4a0b      	ldr	r2, [pc, #44]	; (8007cc8 <lcd_screen_4_refresh+0x3d4>)
 8007c9a:	2118      	movs	r1, #24
 8007c9c:	200c      	movs	r0, #12
 8007c9e:	f7ff fb57 	bl	8007350 <lcd_puts_xy>

		}
	}

	LCD5110_Refresh();
 8007ca2:	f7f9 fd3f 	bl	8001724 <LCD5110_Refresh>
}
 8007ca6:	bf00      	nop
 8007ca8:	3738      	adds	r7, #56	; 0x38
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200148f4 	.word	0x200148f4
 8007cb4:	0800b53c 	.word	0x0800b53c
 8007cb8:	200148dc 	.word	0x200148dc
 8007cbc:	0800b54c 	.word	0x0800b54c
 8007cc0:	0800b520 	.word	0x0800b520
 8007cc4:	0800b570 	.word	0x0800b570
 8007cc8:	0800b504 	.word	0x0800b504

08007ccc <lcd_screen_refresh>:

void lcd_screen_refresh(LCD_Screen_t screen) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
	switch (screen) {
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d817      	bhi.n	8007d0c <lcd_screen_refresh+0x40>
 8007cdc:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <lcd_screen_refresh+0x18>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007cf5 	.word	0x08007cf5
 8007ce8:	08007cfb 	.word	0x08007cfb
 8007cec:	08007d01 	.word	0x08007d01
 8007cf0:	08007d07 	.word	0x08007d07
		case LCD_Screen_1:
			lcd_screen_1_refresh();
 8007cf4:	f7ff fbde 	bl	80074b4 <lcd_screen_1_refresh>
			break;
 8007cf8:	e009      	b.n	8007d0e <lcd_screen_refresh+0x42>
		case LCD_Screen_2:
			lcd_screen_2_refresh();
 8007cfa:	f7ff fc91 	bl	8007620 <lcd_screen_2_refresh>
			break;
 8007cfe:	e006      	b.n	8007d0e <lcd_screen_refresh+0x42>
		case LCD_Screen_3:
			lcd_screen_3_refresh();
 8007d00:	f7ff fd3c 	bl	800777c <lcd_screen_3_refresh>
			break;
 8007d04:	e003      	b.n	8007d0e <lcd_screen_refresh+0x42>
		case LCD_Screen_4:
			lcd_screen_4_refresh();
 8007d06:	f7ff fdf5 	bl	80078f4 <lcd_screen_4_refresh>
			break;
 8007d0a:	e000      	b.n	8007d0e <lcd_screen_refresh+0x42>
		default:
			break;
 8007d0c:	bf00      	nop
	}
}
 8007d0e:	bf00      	nop
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop

08007d18 <lcd_screen_1_clear>:

void lcd_screen_4_data_update(LCD_Data_Screen4_t data) {
	screen4_data = data;
}

void lcd_screen_1_clear() {
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
	memset(&screen1_data, 0, sizeof(screen1_data));
 8007d1c:	2210      	movs	r2, #16
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4802      	ldr	r0, [pc, #8]	; (8007d2c <lcd_screen_1_clear+0x14>)
 8007d22:	f000 fcb7 	bl	8008694 <memset>
}
 8007d26:	bf00      	nop
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200148ac 	.word	0x200148ac

08007d30 <lcd_screen_2_clear>:

void lcd_screen_2_clear() {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
	memset(&screen2_data, 0, sizeof(screen2_data));
 8007d34:	2210      	movs	r2, #16
 8007d36:	2100      	movs	r1, #0
 8007d38:	4802      	ldr	r0, [pc, #8]	; (8007d44 <lcd_screen_2_clear+0x14>)
 8007d3a:	f000 fcab 	bl	8008694 <memset>
}
 8007d3e:	bf00      	nop
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	2001488c 	.word	0x2001488c

08007d48 <lcd_screen_3_clear>:

void lcd_screen_3_clear() {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
	screen3_mode = S3_NORMAL_DISPLAY;
 8007d4c:	4b07      	ldr	r3, [pc, #28]	; (8007d6c <lcd_screen_3_clear+0x24>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	701a      	strb	r2, [r3, #0]
	memset(&screen3_data, 0, sizeof(screen3_data));
 8007d52:	2208      	movs	r2, #8
 8007d54:	2100      	movs	r1, #0
 8007d56:	4806      	ldr	r0, [pc, #24]	; (8007d70 <lcd_screen_3_clear+0x28>)
 8007d58:	f000 fc9c 	bl	8008694 <memset>
	memset(&Screen3_Timer, 0, sizeof(Screen3_Timer));
 8007d5c:	2208      	movs	r2, #8
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4804      	ldr	r0, [pc, #16]	; (8007d74 <lcd_screen_3_clear+0x2c>)
 8007d62:	f000 fc97 	bl	8008694 <memset>
}
 8007d66:	bf00      	nop
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	2001489c 	.word	0x2001489c
 8007d70:	200148c8 	.word	0x200148c8
 8007d74:	200148d0 	.word	0x200148d0

08007d78 <lcd_screen_4_clear>:

void lcd_screen_4_clear() {
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
	Sample_Interval = Sample_Interval_60;
 8007d7c:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <lcd_screen_4_clear+0x28>)
 8007d7e:	223c      	movs	r2, #60	; 0x3c
 8007d80:	701a      	strb	r2, [r3, #0]
	screen4_mode = S4_NORMAL_DISPLAY;
 8007d82:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <lcd_screen_4_clear+0x2c>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
	memset(&screen4_data, 0, sizeof(screen4_data));
 8007d88:	220c      	movs	r2, #12
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4806      	ldr	r0, [pc, #24]	; (8007da8 <lcd_screen_4_clear+0x30>)
 8007d8e:	f000 fc81 	bl	8008694 <memset>
	memset(&Screen4_RTC, 0, sizeof(Screen4_RTC));
 8007d92:	220a      	movs	r2, #10
 8007d94:	2100      	movs	r1, #0
 8007d96:	4805      	ldr	r0, [pc, #20]	; (8007dac <lcd_screen_4_clear+0x34>)
 8007d98:	f000 fc7c 	bl	8008694 <memset>
}
 8007d9c:	bf00      	nop
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	200148d8 	.word	0x200148d8
 8007da4:	200148d9 	.word	0x200148d9
 8007da8:	200148bc 	.word	0x200148bc
 8007dac:	200148a0 	.word	0x200148a0

08007db0 <lcd_screen_3_timer_count_up>:

void lcd_screen_3_timer_count_up() {
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
	Screen3_Timer.seconds++;
 8007db4:	4b1c      	ldr	r3, [pc, #112]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007db6:	799b      	ldrb	r3, [r3, #6]
 8007db8:	3301      	adds	r3, #1
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	4b1a      	ldr	r3, [pc, #104]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007dbe:	719a      	strb	r2, [r3, #6]
	if(Screen3_Timer.seconds > 59) {
 8007dc0:	4b19      	ldr	r3, [pc, #100]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007dc2:	799b      	ldrb	r3, [r3, #6]
 8007dc4:	2b3b      	cmp	r3, #59	; 0x3b
 8007dc6:	d92a      	bls.n	8007e1e <lcd_screen_3_timer_count_up+0x6e>
		Screen3_Timer.seconds -= 60;
 8007dc8:	4b17      	ldr	r3, [pc, #92]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007dca:	799b      	ldrb	r3, [r3, #6]
 8007dcc:	3b3c      	subs	r3, #60	; 0x3c
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	4b15      	ldr	r3, [pc, #84]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007dd2:	719a      	strb	r2, [r3, #6]
		Screen3_Timer.minutes++;
 8007dd4:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007dd6:	795b      	ldrb	r3, [r3, #5]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	4b12      	ldr	r3, [pc, #72]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007dde:	715a      	strb	r2, [r3, #5]
		if(Screen3_Timer.minutes > 59) {
 8007de0:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007de2:	795b      	ldrb	r3, [r3, #5]
 8007de4:	2b3b      	cmp	r3, #59	; 0x3b
 8007de6:	d91a      	bls.n	8007e1e <lcd_screen_3_timer_count_up+0x6e>
			Screen3_Timer.minutes -= 60;
 8007de8:	4b0f      	ldr	r3, [pc, #60]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007dea:	795b      	ldrb	r3, [r3, #5]
 8007dec:	3b3c      	subs	r3, #60	; 0x3c
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	4b0d      	ldr	r3, [pc, #52]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007df2:	715a      	strb	r2, [r3, #5]
			Screen3_Timer.hours++;
 8007df4:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007df6:	791b      	ldrb	r3, [r3, #4]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007dfe:	711a      	strb	r2, [r3, #4]
			if(Screen3_Timer.hours > 23) {
 8007e00:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007e02:	791b      	ldrb	r3, [r3, #4]
 8007e04:	2b17      	cmp	r3, #23
 8007e06:	d90a      	bls.n	8007e1e <lcd_screen_3_timer_count_up+0x6e>
				Screen3_Timer.hours -= 24;
 8007e08:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007e0a:	791b      	ldrb	r3, [r3, #4]
 8007e0c:	3b18      	subs	r3, #24
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007e12:	711a      	strb	r2, [r3, #4]
				Screen3_Timer.days++;
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	4a03      	ldr	r2, [pc, #12]	; (8007e28 <lcd_screen_3_timer_count_up+0x78>)
 8007e1c:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 8007e1e:	bf00      	nop
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	200148d0 	.word	0x200148d0

08007e2c <lcd_screen_3_switch_mode>:

void lcd_screen_3_switch_mode() {
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
	screen3_mode ^= 1;
 8007e30:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <lcd_screen_3_switch_mode+0x1c>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	f083 0301 	eor.w	r3, r3, #1
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <lcd_screen_3_switch_mode+0x1c>)
 8007e3c:	701a      	strb	r2, [r3, #0]
}
 8007e3e:	bf00      	nop
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	2001489c 	.word	0x2001489c

08007e4c <lcd_screen_4_rtc_update>:

LCD_Screen3_Mode lcd_screen_3_mode() {
	return screen3_mode;
}

void lcd_screen_4_rtc_update(LCD_Screen4_RTC_t datetime) {
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	1d3b      	adds	r3, r7, #4
 8007e54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Screen4_RTC = datetime;
 8007e58:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <lcd_screen_4_rtc_update+0x40>)
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	1d3b      	adds	r3, r7, #4
 8007e5e:	cb03      	ldmia	r3!, {r0, r1}
 8007e60:	6010      	str	r0, [r2, #0]
 8007e62:	6051      	str	r1, [r2, #4]
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	8113      	strh	r3, [r2, #8]
	if(screen4_mode == S4_NORMAL_DISPLAY) Screen4_RTC_Config = datetime;
 8007e68:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <lcd_screen_4_rtc_update+0x44>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d107      	bne.n	8007e80 <lcd_screen_4_rtc_update+0x34>
 8007e70:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <lcd_screen_4_rtc_update+0x48>)
 8007e72:	461a      	mov	r2, r3
 8007e74:	1d3b      	adds	r3, r7, #4
 8007e76:	cb03      	ldmia	r3!, {r0, r1}
 8007e78:	6010      	str	r0, [r2, #0]
 8007e7a:	6051      	str	r1, [r2, #4]
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	8113      	strh	r3, [r2, #8]
}
 8007e80:	bf00      	nop
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	200148a0 	.word	0x200148a0
 8007e90:	200148d9 	.word	0x200148d9
 8007e94:	200148dc 	.word	0x200148dc

08007e98 <lcd_screen_4_switch_mode>:

void lcd_screen_4_switch_mode() {
 8007e98:	b480      	push	{r7}
 8007e9a:	af00      	add	r7, sp, #0
	if(++screen4_mode == S4_No_of_Mode)
 8007e9c:	4b08      	ldr	r3, [pc, #32]	; (8007ec0 <lcd_screen_4_switch_mode+0x28>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	4b06      	ldr	r3, [pc, #24]	; (8007ec0 <lcd_screen_4_switch_mode+0x28>)
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <lcd_screen_4_switch_mode+0x28>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d102      	bne.n	8007eb6 <lcd_screen_4_switch_mode+0x1e>
		screen4_mode = 0;
 8007eb0:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <lcd_screen_4_switch_mode+0x28>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]
}
 8007eb6:	bf00      	nop
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	200148d9 	.word	0x200148d9

08007ec4 <lcd_screen_4_mode>:

LCD_Screen4_Mode lcd_screen_4_mode() {
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
	return screen4_mode;
 8007ec8:	4b03      	ldr	r3, [pc, #12]	; (8007ed8 <lcd_screen_4_mode+0x14>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	200148d9 	.word	0x200148d9

08007edc <lcd_screen_4_next_config_target>:

void lcd_screen_4_next_config_target() {
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
	if(++Screen4_Config_Target == Screen4_No_of_Config_items)
 8007ee0:	4b08      	ldr	r3, [pc, #32]	; (8007f04 <lcd_screen_4_next_config_target+0x28>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <lcd_screen_4_next_config_target+0x28>)
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <lcd_screen_4_next_config_target+0x28>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b06      	cmp	r3, #6
 8007ef2:	d102      	bne.n	8007efa <lcd_screen_4_next_config_target+0x1e>
		Screen4_Config_Target = 0;
 8007ef4:	4b03      	ldr	r3, [pc, #12]	; (8007f04 <lcd_screen_4_next_config_target+0x28>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	701a      	strb	r2, [r3, #0]
}
 8007efa:	bf00      	nop
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	20014888 	.word	0x20014888

08007f08 <lcd_screen_4_commit_config>:
			Sample_Interval = Sample_Interval_5;
			break;
	}
}

void lcd_screen_4_commit_config(Config_Commit_t commit) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	71fb      	strb	r3, [r7, #7]
	if(commit == CONFIG_COMMIT) {
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d110      	bne.n	8007f3a <lcd_screen_4_commit_config+0x32>
		screen4_data = screen4_data_config;
 8007f18:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <lcd_screen_4_commit_config+0x40>)
 8007f1a:	4a0c      	ldr	r2, [pc, #48]	; (8007f4c <lcd_screen_4_commit_config+0x44>)
 8007f1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Sample_Interval = Sample_Interval_Config;
 8007f22:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <lcd_screen_4_commit_config+0x48>)
 8007f24:	781a      	ldrb	r2, [r3, #0]
 8007f26:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <lcd_screen_4_commit_config+0x4c>)
 8007f28:	701a      	strb	r2, [r3, #0]
		Screen4_RTC = Screen4_RTC_Config;
 8007f2a:	4b0b      	ldr	r3, [pc, #44]	; (8007f58 <lcd_screen_4_commit_config+0x50>)
 8007f2c:	4a0b      	ldr	r2, [pc, #44]	; (8007f5c <lcd_screen_4_commit_config+0x54>)
 8007f2e:	6810      	ldr	r0, [r2, #0]
 8007f30:	6851      	ldr	r1, [r2, #4]
 8007f32:	6018      	str	r0, [r3, #0]
 8007f34:	6059      	str	r1, [r3, #4]
 8007f36:	8912      	ldrh	r2, [r2, #8]
 8007f38:	811a      	strh	r2, [r3, #8]
	}
	lcd_screen_4_switch_mode();
 8007f3a:	f7ff ffad 	bl	8007e98 <lcd_screen_4_switch_mode>
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	200148bc 	.word	0x200148bc
 8007f4c:	200148e8 	.word	0x200148e8
 8007f50:	200148f4 	.word	0x200148f4
 8007f54:	200148d8 	.word	0x200148d8
 8007f58:	200148a0 	.word	0x200148a0
 8007f5c:	200148dc 	.word	0x200148dc

08007f60 <lcd_is_busy>:

bool lcd_is_busy() {
 8007f60:	b480      	push	{r7}
 8007f62:	af00      	add	r7, sp, #0
	return screen3_mode || screen4_mode;
 8007f64:	4b09      	ldr	r3, [pc, #36]	; (8007f8c <lcd_is_busy+0x2c>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <lcd_is_busy+0x14>
 8007f6c:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <lcd_is_busy+0x30>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <lcd_is_busy+0x18>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e000      	b.n	8007f7a <lcd_is_busy+0x1a>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	b2db      	uxtb	r3, r3
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	2001489c 	.word	0x2001489c
 8007f90:	200148d9 	.word	0x200148d9

08007f94 <SEGGER_setup>:
void rtc_handler(void* parameters);
void usart_handler(void* parameters);

void LED_Init();

void SEGGER_setup() {
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
	RCC->CFGR = 0
 8007f98:	4b08      	ldr	r3, [pc, #32]	; (8007fbc <SEGGER_setup+0x28>)
 8007f9a:	f44f 4214 	mov.w	r2, #37888	; 0x9400
 8007f9e:	609a      	str	r2, [r3, #8]
			| (1 << 10)
			| (1 << 12)
			| (1 << 15);
	(*(volatile uint32_t*) 0XE0001000) |= (1 << 0);
 8007fa0:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <SEGGER_setup+0x2c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a06      	ldr	r2, [pc, #24]	; (8007fc0 <SEGGER_setup+0x2c>)
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	6013      	str	r3, [r2, #0]
	SEGGER_UART_init(500000);
 8007fac:	4805      	ldr	r0, [pc, #20]	; (8007fc4 <SEGGER_setup+0x30>)
 8007fae:	f7ff f8e7 	bl	8007180 <SEGGER_UART_init>
	SEGGER_SYSVIEW_Conf();
 8007fb2:	f7fd f931 	bl	8005218 <SEGGER_SYSVIEW_Conf>
}
 8007fb6:	bf00      	nop
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	e0001000 	.word	0xe0001000
 8007fc4:	0007a120 	.word	0x0007a120

08007fc8 <main>:

int main(void) {
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af02      	add	r7, sp, #8
	SEGGER_setup();
 8007fce:	f7ff ffe1 	bl	8007f94 <SEGGER_setup>

	LED_Init();
 8007fd2:	f000 f9df 	bl	8008394 <LED_Init>

	xTaskCreate(lcd_handler, "LCD5110", 2048, NULL, 1, NULL);
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	2301      	movs	r3, #1
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fe4:	491d      	ldr	r1, [pc, #116]	; (800805c <main+0x94>)
 8007fe6:	481e      	ldr	r0, [pc, #120]	; (8008060 <main+0x98>)
 8007fe8:	f7fa fb26 	bl	8002638 <xTaskCreate>
	xTaskCreate(ade_handler, "ADE7753", 512, NULL, 1, NULL);
 8007fec:	2300      	movs	r3, #0
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ffa:	491a      	ldr	r1, [pc, #104]	; (8008064 <main+0x9c>)
 8007ffc:	481a      	ldr	r0, [pc, #104]	; (8008068 <main+0xa0>)
 8007ffe:	f7fa fb1b 	bl	8002638 <xTaskCreate>
	xTaskCreate(keypad_handler, "Keypad", 256, NULL, 1, NULL);
 8008002:	2300      	movs	r3, #0
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	2301      	movs	r3, #1
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	2300      	movs	r3, #0
 800800c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008010:	4916      	ldr	r1, [pc, #88]	; (800806c <main+0xa4>)
 8008012:	4817      	ldr	r0, [pc, #92]	; (8008070 <main+0xa8>)
 8008014:	f7fa fb10 	bl	8002638 <xTaskCreate>
	xTaskCreate(rtc_handler, "DS1307", 512, NULL, 1, NULL);
 8008018:	2300      	movs	r3, #0
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	2301      	movs	r3, #1
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2300      	movs	r3, #0
 8008022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008026:	4913      	ldr	r1, [pc, #76]	; (8008074 <main+0xac>)
 8008028:	4813      	ldr	r0, [pc, #76]	; (8008078 <main+0xb0>)
 800802a:	f7fa fb05 	bl	8002638 <xTaskCreate>
	xTaskCreate(usart_handler, "USART", 512, NULL, 1, NULL);
 800802e:	2300      	movs	r3, #0
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	2301      	movs	r3, #1
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	2300      	movs	r3, #0
 8008038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800803c:	490f      	ldr	r1, [pc, #60]	; (800807c <main+0xb4>)
 800803e:	4810      	ldr	r0, [pc, #64]	; (8008080 <main+0xb8>)
 8008040:	f7fa fafa 	bl	8002638 <xTaskCreate>

	keypad_queue_handle = xQueueCreate(5, sizeof(KEYPAD_Button_t));
 8008044:	2200      	movs	r2, #0
 8008046:	2101      	movs	r1, #1
 8008048:	2005      	movs	r0, #5
 800804a:	f7f9 fe03 	bl	8001c54 <xQueueGenericCreate>
 800804e:	4603      	mov	r3, r0
 8008050:	4a0c      	ldr	r2, [pc, #48]	; (8008084 <main+0xbc>)
 8008052:	6013      	str	r3, [r2, #0]

	vTaskStartScheduler();
 8008054:	f7fa fc8c 	bl	8002970 <vTaskStartScheduler>

	while(1);
 8008058:	e7fe      	b.n	8008058 <main+0x90>
 800805a:	bf00      	nop
 800805c:	0800b578 	.word	0x0800b578
 8008060:	08008089 	.word	0x08008089
 8008064:	0800b580 	.word	0x0800b580
 8008068:	080081e1 	.word	0x080081e1
 800806c:	0800b588 	.word	0x0800b588
 8008070:	08008209 	.word	0x08008209
 8008074:	0800b590 	.word	0x0800b590
 8008078:	080082c1 	.word	0x080082c1
 800807c:	0800b598 	.word	0x0800b598
 8008080:	08008371 	.word	0x08008371
 8008084:	200148f8 	.word	0x200148f8

08008088 <lcd_handler>:
	return 0;
}

void lcd_handler(void* parameters) {
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
	LCD5110_Init(0x37);
 8008090:	2037      	movs	r0, #55	; 0x37
 8008092:	f7f9 f9f1 	bl	8001478 <LCD5110_Init>

	memset(&screen1_ade_data, 0, sizeof(screen1_ade_data));
 8008096:	2210      	movs	r2, #16
 8008098:	2100      	movs	r1, #0
 800809a:	484b      	ldr	r0, [pc, #300]	; (80081c8 <lcd_handler+0x140>)
 800809c:	f000 fafa 	bl	8008694 <memset>
	memset(&screen2_ade_data, 0, sizeof(screen2_ade_data));
 80080a0:	2210      	movs	r2, #16
 80080a2:	2100      	movs	r1, #0
 80080a4:	4849      	ldr	r0, [pc, #292]	; (80081cc <lcd_handler+0x144>)
 80080a6:	f000 faf5 	bl	8008694 <memset>
	memset(&screen3_ade_data, 0, sizeof(screen3_ade_data));
 80080aa:	2208      	movs	r2, #8
 80080ac:	2100      	movs	r1, #0
 80080ae:	4848      	ldr	r0, [pc, #288]	; (80081d0 <lcd_handler+0x148>)
 80080b0:	f000 faf0 	bl	8008694 <memset>
	memset(&screen4_ade_data, 0, sizeof(screen4_ade_data));
 80080b4:	220c      	movs	r2, #12
 80080b6:	2100      	movs	r1, #0
 80080b8:	4846      	ldr	r0, [pc, #280]	; (80081d4 <lcd_handler+0x14c>)
 80080ba:	f000 faeb 	bl	8008694 <memset>

	lcd_screen_1_clear();
 80080be:	f7ff fe2b 	bl	8007d18 <lcd_screen_1_clear>
	lcd_screen_2_clear();
 80080c2:	f7ff fe35 	bl	8007d30 <lcd_screen_2_clear>
	lcd_screen_3_clear();
 80080c6:	f7ff fe3f 	bl	8007d48 <lcd_screen_3_clear>
	lcd_screen_4_clear();
 80080ca:	f7ff fe55 	bl	8007d78 <lcd_screen_4_clear>

	KEYPAD_Button_t keypad;
	LCD_Screen_t screen = LCD_Screen_3;
 80080ce:	2302      	movs	r3, #2
 80080d0:	73fb      	strb	r3, [r7, #15]

	while(1) {
		if(keypad_queue_handle != NULL) {
 80080d2:	4b41      	ldr	r3, [pc, #260]	; (80081d8 <lcd_handler+0x150>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d065      	beq.n	80081a6 <lcd_handler+0x11e>
			if(xQueueReceive(keypad_queue_handle, &keypad, (TickType_t) 10) == pdPASS) {
 80080da:	4b3f      	ldr	r3, [pc, #252]	; (80081d8 <lcd_handler+0x150>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f107 010e 	add.w	r1, r7, #14
 80080e2:	220a      	movs	r2, #10
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fa f821 	bl	800212c <xQueueReceive>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d15a      	bne.n	80081a6 <lcd_handler+0x11e>
				if(lcd_is_busy()) {
 80080f0:	f7ff ff36 	bl	8007f60 <lcd_is_busy>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d031      	beq.n	800815e <lcd_handler+0xd6>
					if(screen == LCD_Screen_3) {
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d109      	bne.n	8008114 <lcd_handler+0x8c>
						if(keypad == KEYPAD_Button_HASH)
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	2b0b      	cmp	r3, #11
 8008104:	d101      	bne.n	800810a <lcd_handler+0x82>
							lcd_screen_3_clear();
 8008106:	f7ff fe1f 	bl	8007d48 <lcd_screen_3_clear>
						if(keypad == KEYPAD_Button_STAR)
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b0a      	cmp	r3, #10
 800810e:	d101      	bne.n	8008114 <lcd_handler+0x8c>
							lcd_screen_3_switch_mode();
 8008110:	f7ff fe8c 	bl	8007e2c <lcd_screen_3_switch_mode>
					}
					if(screen == LCD_Screen_4)
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	2b03      	cmp	r3, #3
 8008118:	d145      	bne.n	80081a6 <lcd_handler+0x11e>
						if(lcd_screen_4_mode() == S4_CONFIG_DISPLAY) {
 800811a:	f7ff fed3 	bl	8007ec4 <lcd_screen_4_mode>
 800811e:	4603      	mov	r3, r0
 8008120:	2b01      	cmp	r3, #1
 8008122:	d10f      	bne.n	8008144 <lcd_handler+0xbc>
							if(keypad == KEYPAD_Button_HOLD_D)
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b8f      	cmp	r3, #143	; 0x8f
 8008128:	d101      	bne.n	800812e <lcd_handler+0xa6>
								lcd_screen_4_switch_mode();
 800812a:	f7ff feb5 	bl	8007e98 <lcd_screen_4_switch_mode>
							if(keypad == KEYPAD_Button_D && lcd_screen_4_mode())
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b0f      	cmp	r3, #15
 8008132:	d138      	bne.n	80081a6 <lcd_handler+0x11e>
 8008134:	f7ff fec6 	bl	8007ec4 <lcd_screen_4_mode>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d033      	beq.n	80081a6 <lcd_handler+0x11e>
								lcd_screen_4_next_config_target();
 800813e:	f7ff fecd 	bl	8007edc <lcd_screen_4_next_config_target>
 8008142:	e030      	b.n	80081a6 <lcd_handler+0x11e>
						} else {
							if(keypad == KEYPAD_Button_HASH)
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	2b0b      	cmp	r3, #11
 8008148:	d102      	bne.n	8008150 <lcd_handler+0xc8>
								lcd_screen_4_commit_config(CONFIG_COMMIT);
 800814a:	2001      	movs	r0, #1
 800814c:	f7ff fedc 	bl	8007f08 <lcd_screen_4_commit_config>
							if(keypad == KEYPAD_Button_STAR)
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	2b0a      	cmp	r3, #10
 8008154:	d127      	bne.n	80081a6 <lcd_handler+0x11e>
								lcd_screen_4_commit_config(CONFIG_CANCEL);
 8008156:	2000      	movs	r0, #0
 8008158:	f7ff fed6 	bl	8007f08 <lcd_screen_4_commit_config>
 800815c:	e023      	b.n	80081a6 <lcd_handler+0x11e>
						}
				} else {
					if(keypad == KEYPAD_Button_A)
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	2b0c      	cmp	r3, #12
 8008162:	d101      	bne.n	8008168 <lcd_handler+0xe0>
						screen = LCD_Screen_1;
 8008164:	2300      	movs	r3, #0
 8008166:	73fb      	strb	r3, [r7, #15]
					if(keypad == KEYPAD_Button_B)
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	2b0d      	cmp	r3, #13
 800816c:	d101      	bne.n	8008172 <lcd_handler+0xea>
						screen = LCD_Screen_2;
 800816e:	2301      	movs	r3, #1
 8008170:	73fb      	strb	r3, [r7, #15]
					if(keypad == KEYPAD_Button_C)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b0e      	cmp	r3, #14
 8008176:	d101      	bne.n	800817c <lcd_handler+0xf4>
						screen = LCD_Screen_3;
 8008178:	2302      	movs	r3, #2
 800817a:	73fb      	strb	r3, [r7, #15]
					if(keypad == KEYPAD_Button_D)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b0f      	cmp	r3, #15
 8008180:	d101      	bne.n	8008186 <lcd_handler+0xfe>
						screen = LCD_Screen_4;
 8008182:	2303      	movs	r3, #3
 8008184:	73fb      	strb	r3, [r7, #15]
					if(keypad == KEYPAD_Button_HOLD_C && screen == LCD_Screen_3)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b8e      	cmp	r3, #142	; 0x8e
 800818a:	d104      	bne.n	8008196 <lcd_handler+0x10e>
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d101      	bne.n	8008196 <lcd_handler+0x10e>
						lcd_screen_3_switch_mode();
 8008192:	f7ff fe4b 	bl	8007e2c <lcd_screen_3_switch_mode>
					if(keypad == KEYPAD_Button_HOLD_D && screen == LCD_Screen_4)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	2b8f      	cmp	r3, #143	; 0x8f
 800819a:	d104      	bne.n	80081a6 <lcd_handler+0x11e>
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d101      	bne.n	80081a6 <lcd_handler+0x11e>
						lcd_screen_4_switch_mode();
 80081a2:	f7ff fe79 	bl	8007e98 <lcd_screen_4_switch_mode>
				}
			}
		}

		lcd_screen_refresh(screen);
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff fd8f 	bl	8007ccc <lcd_screen_refresh>
		vTaskDelay(100);
 80081ae:	2064      	movs	r0, #100	; 0x64
 80081b0:	f7fa fba6 	bl	8002900 <vTaskDelay>
		taskYIELD();
 80081b4:	4b09      	ldr	r3, [pc, #36]	; (80081dc <lcd_handler+0x154>)
 80081b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	f3bf 8f6f 	isb	sy
		if(keypad_queue_handle != NULL) {
 80081c4:	e785      	b.n	80080d2 <lcd_handler+0x4a>
 80081c6:	bf00      	nop
 80081c8:	20014920 	.word	0x20014920
 80081cc:	20014910 	.word	0x20014910
 80081d0:	20014908 	.word	0x20014908
 80081d4:	200148fc 	.word	0x200148fc
 80081d8:	200148f8 	.word	0x200148f8
 80081dc:	e000ed04 	.word	0xe000ed04

080081e0 <ade_handler>:
	}
}

void ade_handler(void* parameters) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	ADE_Init();
 80081e8:	f7f8 fd3e 	bl	8000c68 <ADE_Init>

	while(1) {
		vTaskDelay(100);
 80081ec:	2064      	movs	r0, #100	; 0x64
 80081ee:	f7fa fb87 	bl	8002900 <vTaskDelay>
		taskYIELD();
 80081f2:	4b04      	ldr	r3, [pc, #16]	; (8008204 <ade_handler+0x24>)
 80081f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	f3bf 8f6f 	isb	sy
		vTaskDelay(100);
 8008202:	e7f3      	b.n	80081ec <ade_handler+0xc>
 8008204:	e000ed04 	.word	0xe000ed04

08008208 <keypad_handler>:
	}
}

void keypad_handler(void* parameters) {
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	KEYPAD_Init(KEYPAD_Type_Large);
 8008210:	2000      	movs	r0, #0
 8008212:	f7f8 ff51 	bl	80010b8 <KEYPAD_Init>
	KEYPAD_Button_t Keypad_Hold_Button, Keypad_Button, Keypad_prev = KEYPAD_NOPRESSED;
 8008216:	23ff      	movs	r3, #255	; 0xff
 8008218:	727b      	strb	r3, [r7, #9]
	int hold_timeout = 600;
 800821a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800821e:	60fb      	str	r3, [r7, #12]

	while(1) {
		KEYPAD_Update();
 8008220:	f7f9 f8b0 	bl	8001384 <KEYPAD_Update>
		Keypad_Button = KEYPAD_Read();
 8008224:	f7f8 ffba 	bl	800119c <KEYPAD_Read>
 8008228:	4603      	mov	r3, r0
 800822a:	72fb      	strb	r3, [r7, #11]

		if(Keypad_Button != KEYPAD_NOPRESSED && Keypad_Button == Keypad_prev) {
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	2bff      	cmp	r3, #255	; 0xff
 8008230:	d01f      	beq.n	8008272 <keypad_handler+0x6a>
 8008232:	7a7b      	ldrb	r3, [r7, #9]
 8008234:	7afa      	ldrb	r2, [r7, #11]
 8008236:	429a      	cmp	r2, r3
 8008238:	d11b      	bne.n	8008272 <keypad_handler+0x6a>
			if(hold_timeout > 0) hold_timeout--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	dd03      	ble.n	8008248 <keypad_handler+0x40>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3b01      	subs	r3, #1
 8008244:	60fb      	str	r3, [r7, #12]
 8008246:	e027      	b.n	8008298 <keypad_handler+0x90>
			else if (!hold_timeout) {
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d124      	bne.n	8008298 <keypad_handler+0x90>
				hold_timeout--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3b01      	subs	r3, #1
 8008252:	60fb      	str	r3, [r7, #12]
				Keypad_Hold_Button = KEYPAD_Hold_Button(Keypad_Button);
 8008254:	7afb      	ldrb	r3, [r7, #11]
 8008256:	4618      	mov	r0, r3
 8008258:	f7f9 f884 	bl	8001364 <KEYPAD_Hold_Button>
 800825c:	4603      	mov	r3, r0
 800825e:	72bb      	strb	r3, [r7, #10]
				xQueueSend(keypad_queue_handle, (void*) &Keypad_Hold_Button, (TickType_t) 0);
 8008260:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <keypad_handler+0xb0>)
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	f107 010a 	add.w	r1, r7, #10
 8008268:	2300      	movs	r3, #0
 800826a:	2200      	movs	r2, #0
 800826c:	f7f9 fd7a 	bl	8001d64 <xQueueGenericSend>
			if(hold_timeout > 0) hold_timeout--;
 8008270:	e012      	b.n	8008298 <keypad_handler+0x90>
			}
		} else if(Keypad_prev != KEYPAD_NOPRESSED && hold_timeout > 0)
 8008272:	7a7b      	ldrb	r3, [r7, #9]
 8008274:	2bff      	cmp	r3, #255	; 0xff
 8008276:	d00b      	beq.n	8008290 <keypad_handler+0x88>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd08      	ble.n	8008290 <keypad_handler+0x88>
			xQueueSend(keypad_queue_handle, (void*) &Keypad_prev, (TickType_t) 0);
 800827e:	4b0e      	ldr	r3, [pc, #56]	; (80082b8 <keypad_handler+0xb0>)
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	f107 0109 	add.w	r1, r7, #9
 8008286:	2300      	movs	r3, #0
 8008288:	2200      	movs	r2, #0
 800828a:	f7f9 fd6b 	bl	8001d64 <xQueueGenericSend>
 800828e:	e004      	b.n	800829a <keypad_handler+0x92>
		else hold_timeout = 600;
 8008290:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	e000      	b.n	800829a <keypad_handler+0x92>
			if(hold_timeout > 0) hold_timeout--;
 8008298:	bf00      	nop

		Keypad_prev = Keypad_Button;
 800829a:	7afb      	ldrb	r3, [r7, #11]
 800829c:	727b      	strb	r3, [r7, #9]
		vTaskDelay(5);
 800829e:	2005      	movs	r0, #5
 80082a0:	f7fa fb2e 	bl	8002900 <vTaskDelay>
		taskYIELD();
 80082a4:	4b05      	ldr	r3, [pc, #20]	; (80082bc <keypad_handler+0xb4>)
 80082a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	f3bf 8f6f 	isb	sy
		KEYPAD_Update();
 80082b4:	e7b4      	b.n	8008220 <keypad_handler+0x18>
 80082b6:	bf00      	nop
 80082b8:	200148f8 	.word	0x200148f8
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <rtc_handler>:
	}
}

void rtc_handler(void* parameters) {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	ds1307_init();
 80082c8:	f7f8 fda0 	bl	8000e0c <ds1307_init>

	RTC_time_t rtc_time_prev;
	LCD_Screen4_RTC_t screen4_rtc;

	while(1) {
		ds1307_get_current_time(&screen4_rtc.time);
 80082cc:	f107 0308 	add.w	r3, r7, #8
 80082d0:	3305      	adds	r3, #5
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7f8 fda8 	bl	8000e28 <ds1307_get_current_time>
		ds1307_get_current_date(&screen4_rtc.date);
 80082d8:	f107 0308 	add.w	r3, r7, #8
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f8 fe17 	bl	8000f10 <ds1307_get_current_date>

		if(screen4_rtc.date.date_validity && screen4_rtc.time.time_validity) {
 80082e2:	7b3b      	ldrb	r3, [r7, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d02d      	beq.n	8008344 <rtc_handler+0x84>
 80082e8:	7c7b      	ldrb	r3, [r7, #17]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d02a      	beq.n	8008344 <rtc_handler+0x84>
			time_in_sec = screen4_rtc.time.minutes*60 + screen4_rtc.time.seconds;
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	0112      	lsls	r2, r2, #4
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	7b7b      	ldrb	r3, [r7, #13]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	4413      	add	r3, r2
 8008302:	83fb      	strh	r3, [r7, #30]
			time_in_sec_prev = rtc_time_prev.minutes*60 + rtc_time_prev.seconds;
 8008304:	7d7b      	ldrb	r3, [r7, #21]
 8008306:	b29b      	uxth	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	0112      	lsls	r2, r2, #4
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	b29a      	uxth	r2, r3
 8008312:	7d3b      	ldrb	r3, [r7, #20]
 8008314:	b29b      	uxth	r3, r3
 8008316:	4413      	add	r3, r2
 8008318:	83bb      	strh	r3, [r7, #28]

			if(time_in_sec < time_in_sec_prev) time_in_sec += 3600;
 800831a:	8bfa      	ldrh	r2, [r7, #30]
 800831c:	8bbb      	ldrh	r3, [r7, #28]
 800831e:	429a      	cmp	r2, r3
 8008320:	d203      	bcs.n	800832a <rtc_handler+0x6a>
 8008322:	8bfb      	ldrh	r3, [r7, #30]
 8008324:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8008328:	83fb      	strh	r3, [r7, #30]
			if(time_in_sec - time_in_sec_prev == 1) lcd_screen_3_timer_count_up();
 800832a:	8bfa      	ldrh	r2, [r7, #30]
 800832c:	8bbb      	ldrh	r3, [r7, #28]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <rtc_handler+0x78>
 8008334:	f7ff fd3c 	bl	8007db0 <lcd_screen_3_timer_count_up>
			lcd_screen_4_rtc_update(screen4_rtc);
 8008338:	f107 0308 	add.w	r3, r7, #8
 800833c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008340:	f7ff fd84 	bl	8007e4c <lcd_screen_4_rtc_update>
		}

		rtc_time_prev = screen4_rtc.time;
 8008344:	f107 0314 	add.w	r3, r7, #20
 8008348:	f107 020d 	add.w	r2, r7, #13
 800834c:	6810      	ldr	r0, [r2, #0]
 800834e:	6018      	str	r0, [r3, #0]
 8008350:	7912      	ldrb	r2, [r2, #4]
 8008352:	711a      	strb	r2, [r3, #4]

		vTaskDelay(200);
 8008354:	20c8      	movs	r0, #200	; 0xc8
 8008356:	f7fa fad3 	bl	8002900 <vTaskDelay>
		taskYIELD();
 800835a:	4b04      	ldr	r3, [pc, #16]	; (800836c <rtc_handler+0xac>)
 800835c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	f3bf 8f6f 	isb	sy
		ds1307_get_current_time(&screen4_rtc.time);
 800836a:	e7af      	b.n	80082cc <rtc_handler+0xc>
 800836c:	e000ed04 	.word	0xe000ed04

08008370 <usart_handler>:
	}
}

void usart_handler(void* parameters) {
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]

	while(1) {
		vTaskDelay(100);
 8008378:	2064      	movs	r0, #100	; 0x64
 800837a:	f7fa fac1 	bl	8002900 <vTaskDelay>
		taskYIELD();
 800837e:	4b04      	ldr	r3, [pc, #16]	; (8008390 <usart_handler+0x20>)
 8008380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	f3bf 8f6f 	isb	sy
		vTaskDelay(100);
 800838e:	e7f3      	b.n	8008378 <usart_handler+0x8>
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <LED_Init>:
	}
}

void LED_Init() {
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = PORT_LED;
 800839a:	4b17      	ldr	r3, [pc, #92]	; (80083f8 <LED_Init+0x64>)
 800839c:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800839e:	2301      	movs	r3, #1
 80083a0:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80083a2:	2302      	movs	r3, #2
 80083a4:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80083a6:	2300      	movs	r3, #0
 80083a8:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80083aa:	2300      	movs	r3, #0
 80083ac:	72fb      	strb	r3, [r7, #11]

//	Red LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_R_LED;
 80083ae:	2301      	movs	r3, #1
 80083b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 80083b2:	1d3b      	adds	r3, r7, #4
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fc f835 	bl	8004424 <GPIO_Init>

//	Green LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_G_LED;
 80083ba:	2303      	movs	r3, #3
 80083bc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fc f82f 	bl	8004424 <GPIO_Init>

//	Blue LED
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = PIN_B_LED;
 80083c6:	2305      	movs	r3, #5
 80083c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioLed);
 80083ca:	1d3b      	adds	r3, r7, #4
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fc f829 	bl	8004424 <GPIO_Init>

	R_LED_OFF;
 80083d2:	2201      	movs	r2, #1
 80083d4:	2101      	movs	r1, #1
 80083d6:	4808      	ldr	r0, [pc, #32]	; (80083f8 <LED_Init+0x64>)
 80083d8:	f7fc f9d6 	bl	8004788 <GPIO_WriteToOutputPin>
	G_LED_OFF;
 80083dc:	2201      	movs	r2, #1
 80083de:	2103      	movs	r1, #3
 80083e0:	4805      	ldr	r0, [pc, #20]	; (80083f8 <LED_Init+0x64>)
 80083e2:	f7fc f9d1 	bl	8004788 <GPIO_WriteToOutputPin>
	B_LED_OFF;
 80083e6:	2201      	movs	r2, #1
 80083e8:	2105      	movs	r1, #5
 80083ea:	4803      	ldr	r0, [pc, #12]	; (80083f8 <LED_Init+0x64>)
 80083ec:	f7fc f9cc 	bl	8004788 <GPIO_WriteToOutputPin>

//	R_LED_ON;
//	G_LED_ON;
//	B_LED_ON;
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	40021000 	.word	0x40021000

080083fc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
    uint32_t pending = EXTI->PR;
 8008402:	4b16      	ldr	r3, [pc, #88]	; (800845c <EXTI15_10_IRQHandler+0x60>)
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	607b      	str	r3, [r7, #4]

    if(pending & (1 << PIN_SAG)) {
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <EXTI15_10_IRQHandler+0x22>
        EXTI->PR |= 1 << PIN_SAG;		// clear pending flag, otherwise we'd get endless interrupts
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <EXTI15_10_IRQHandler+0x60>)
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	4a11      	ldr	r2, [pc, #68]	; (800845c <EXTI15_10_IRQHandler+0x60>)
 8008418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800841c:	6153      	str	r3, [r2, #20]
        // handle pin SAG here
    }

    if(pending & (1 << PIN_ZX_IT)) {
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <EXTI15_10_IRQHandler+0x38>
        EXTI->PR |= 1 << PIN_ZX_IT;		// clear pending flag, otherwise we'd get endless interrupts
 8008428:	4b0c      	ldr	r3, [pc, #48]	; (800845c <EXTI15_10_IRQHandler+0x60>)
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	4a0b      	ldr	r2, [pc, #44]	; (800845c <EXTI15_10_IRQHandler+0x60>)
 800842e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008432:	6153      	str	r3, [r2, #20]
        // handle pin ZX here
    }

    if(pending & (1 << PIN_IRQ_IT)) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <EXTI15_10_IRQHandler+0x58>
        EXTI->PR |= 1 << PIN_IRQ_IT;	// clear pending flag, otherwise we'd get endless interrupts
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <EXTI15_10_IRQHandler+0x60>)
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	4a06      	ldr	r2, [pc, #24]	; (800845c <EXTI15_10_IRQHandler+0x60>)
 8008444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008448:	6153      	str	r3, [r2, #20]
        // handle pin I here
        uint32_t rststatus = ADE_ReadData(RSTSTATUS, 2);
 800844a:	2102      	movs	r1, #2
 800844c:	200c      	movs	r0, #12
 800844e:	f7f8 fc37 	bl	8000cc0 <ADE_ReadData>
 8008452:	6038      	str	r0, [r7, #0]

        if(rststatus & (1 << IRQ_PKI)) {

		}
    }
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	40013c00 	.word	0x40013c00

08008460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008460:	b480      	push	{r7}
 8008462:	af00      	add	r7, sp, #0
	return 1;
 8008464:	2301      	movs	r3, #1
}
 8008466:	4618      	mov	r0, r3
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <_kill>:

int _kill(int pid, int sig)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800847a:	f000 f8c5 	bl	8008608 <__errno>
 800847e:	4603      	mov	r3, r0
 8008480:	2216      	movs	r2, #22
 8008482:	601a      	str	r2, [r3, #0]
	return -1;
 8008484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <_exit>:

void _exit (int status)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff ffe7 	bl	8008470 <_kill>
	while (1) {}		/* Make sure we hang here */
 80084a2:	e7fe      	b.n	80084a2 <_exit+0x12>

080084a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]
 80084b4:	e00a      	b.n	80084cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80084b6:	f3af 8000 	nop.w
 80084ba:	4601      	mov	r1, r0
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	60ba      	str	r2, [r7, #8]
 80084c2:	b2ca      	uxtb	r2, r1
 80084c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	3301      	adds	r3, #1
 80084ca:	617b      	str	r3, [r7, #20]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	dbf0      	blt.n	80084b6 <_read+0x12>
	}

return len;
 80084d4:	687b      	ldr	r3, [r7, #4]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <_close>:
	}
	return len;
}

int _close(int file)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
	return -1;
 80084e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008506:	605a      	str	r2, [r3, #4]
	return 0;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <_isatty>:

int _isatty(int file)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
	return 1;
 800851e:	2301      	movs	r3, #1
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
	return 0;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008550:	4a14      	ldr	r2, [pc, #80]	; (80085a4 <_sbrk+0x5c>)
 8008552:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <_sbrk+0x60>)
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800855c:	4b13      	ldr	r3, [pc, #76]	; (80085ac <_sbrk+0x64>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008564:	4b11      	ldr	r3, [pc, #68]	; (80085ac <_sbrk+0x64>)
 8008566:	4a12      	ldr	r2, [pc, #72]	; (80085b0 <_sbrk+0x68>)
 8008568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800856a:	4b10      	ldr	r3, [pc, #64]	; (80085ac <_sbrk+0x64>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4413      	add	r3, r2
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	429a      	cmp	r2, r3
 8008576:	d207      	bcs.n	8008588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008578:	f000 f846 	bl	8008608 <__errno>
 800857c:	4603      	mov	r3, r0
 800857e:	220c      	movs	r2, #12
 8008580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008586:	e009      	b.n	800859c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008588:	4b08      	ldr	r3, [pc, #32]	; (80085ac <_sbrk+0x64>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800858e:	4b07      	ldr	r3, [pc, #28]	; (80085ac <_sbrk+0x64>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4413      	add	r3, r2
 8008596:	4a05      	ldr	r2, [pc, #20]	; (80085ac <_sbrk+0x64>)
 8008598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800859a:	68fb      	ldr	r3, [r7, #12]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	20020000 	.word	0x20020000
 80085a8:	00000400 	.word	0x00000400
 80085ac:	2001456c 	.word	0x2001456c
 80085b0:	20014940 	.word	0x20014940

080085b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80085b4:	480d      	ldr	r0, [pc, #52]	; (80085ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80085b6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80085b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80085bc:	480c      	ldr	r0, [pc, #48]	; (80085f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80085be:	490d      	ldr	r1, [pc, #52]	; (80085f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80085c0:	4a0d      	ldr	r2, [pc, #52]	; (80085f8 <LoopForever+0xe>)
  movs r3, #0
 80085c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80085c4:	e002      	b.n	80085cc <LoopCopyDataInit>

080085c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80085c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80085c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80085ca:	3304      	adds	r3, #4

080085cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80085cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80085ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80085d0:	d3f9      	bcc.n	80085c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80085d2:	4a0a      	ldr	r2, [pc, #40]	; (80085fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80085d4:	4c0a      	ldr	r4, [pc, #40]	; (8008600 <LoopForever+0x16>)
  movs r3, #0
 80085d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80085d8:	e001      	b.n	80085de <LoopFillZerobss>

080085da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80085da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80085dc:	3204      	adds	r2, #4

080085de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80085de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80085e0:	d3fb      	bcc.n	80085da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80085e2:	f000 f817 	bl	8008614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80085e6:	f7ff fcef 	bl	8007fc8 <main>

080085ea <LoopForever>:

LoopForever:
    b LoopForever
 80085ea:	e7fe      	b.n	80085ea <LoopForever>
  ldr   r0, =_estack
 80085ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80085f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80085f4:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80085f8:	0800bd2c 	.word	0x0800bd2c
  ldr r2, =_sbss
 80085fc:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8008600:	20014940 	.word	0x20014940

08008604 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008604:	e7fe      	b.n	8008604 <ADC_IRQHandler>
	...

08008608 <__errno>:
 8008608:	4b01      	ldr	r3, [pc, #4]	; (8008610 <__errno+0x8>)
 800860a:	6818      	ldr	r0, [r3, #0]
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	2000003c 	.word	0x2000003c

08008614 <__libc_init_array>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	4d0d      	ldr	r5, [pc, #52]	; (800864c <__libc_init_array+0x38>)
 8008618:	4c0d      	ldr	r4, [pc, #52]	; (8008650 <__libc_init_array+0x3c>)
 800861a:	1b64      	subs	r4, r4, r5
 800861c:	10a4      	asrs	r4, r4, #2
 800861e:	2600      	movs	r6, #0
 8008620:	42a6      	cmp	r6, r4
 8008622:	d109      	bne.n	8008638 <__libc_init_array+0x24>
 8008624:	4d0b      	ldr	r5, [pc, #44]	; (8008654 <__libc_init_array+0x40>)
 8008626:	4c0c      	ldr	r4, [pc, #48]	; (8008658 <__libc_init_array+0x44>)
 8008628:	f002 feb2 	bl	800b390 <_init>
 800862c:	1b64      	subs	r4, r4, r5
 800862e:	10a4      	asrs	r4, r4, #2
 8008630:	2600      	movs	r6, #0
 8008632:	42a6      	cmp	r6, r4
 8008634:	d105      	bne.n	8008642 <__libc_init_array+0x2e>
 8008636:	bd70      	pop	{r4, r5, r6, pc}
 8008638:	f855 3b04 	ldr.w	r3, [r5], #4
 800863c:	4798      	blx	r3
 800863e:	3601      	adds	r6, #1
 8008640:	e7ee      	b.n	8008620 <__libc_init_array+0xc>
 8008642:	f855 3b04 	ldr.w	r3, [r5], #4
 8008646:	4798      	blx	r3
 8008648:	3601      	adds	r6, #1
 800864a:	e7f2      	b.n	8008632 <__libc_init_array+0x1e>
 800864c:	0800bd24 	.word	0x0800bd24
 8008650:	0800bd24 	.word	0x0800bd24
 8008654:	0800bd24 	.word	0x0800bd24
 8008658:	0800bd28 	.word	0x0800bd28

0800865c <memcmp>:
 800865c:	b530      	push	{r4, r5, lr}
 800865e:	3901      	subs	r1, #1
 8008660:	2400      	movs	r4, #0
 8008662:	42a2      	cmp	r2, r4
 8008664:	d101      	bne.n	800866a <memcmp+0xe>
 8008666:	2000      	movs	r0, #0
 8008668:	e005      	b.n	8008676 <memcmp+0x1a>
 800866a:	5d03      	ldrb	r3, [r0, r4]
 800866c:	3401      	adds	r4, #1
 800866e:	5d0d      	ldrb	r5, [r1, r4]
 8008670:	42ab      	cmp	r3, r5
 8008672:	d0f6      	beq.n	8008662 <memcmp+0x6>
 8008674:	1b58      	subs	r0, r3, r5
 8008676:	bd30      	pop	{r4, r5, pc}

08008678 <memcpy>:
 8008678:	440a      	add	r2, r1
 800867a:	4291      	cmp	r1, r2
 800867c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008680:	d100      	bne.n	8008684 <memcpy+0xc>
 8008682:	4770      	bx	lr
 8008684:	b510      	push	{r4, lr}
 8008686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800868a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800868e:	4291      	cmp	r1, r2
 8008690:	d1f9      	bne.n	8008686 <memcpy+0xe>
 8008692:	bd10      	pop	{r4, pc}

08008694 <memset>:
 8008694:	4402      	add	r2, r0
 8008696:	4603      	mov	r3, r0
 8008698:	4293      	cmp	r3, r2
 800869a:	d100      	bne.n	800869e <memset+0xa>
 800869c:	4770      	bx	lr
 800869e:	f803 1b01 	strb.w	r1, [r3], #1
 80086a2:	e7f9      	b.n	8008698 <memset+0x4>

080086a4 <__cvt>:
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	b088      	sub	sp, #32
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	461d      	mov	r5, r3
 80086ae:	4614      	mov	r4, r2
 80086b0:	bfbc      	itt	lt
 80086b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80086b6:	4614      	movlt	r4, r2
 80086b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80086bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80086c0:	bfb6      	itet	lt
 80086c2:	461d      	movlt	r5, r3
 80086c4:	2300      	movge	r3, #0
 80086c6:	232d      	movlt	r3, #45	; 0x2d
 80086c8:	7013      	strb	r3, [r2, #0]
 80086ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086cc:	f023 0820 	bic.w	r8, r3, #32
 80086d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086d4:	d005      	beq.n	80086e2 <__cvt+0x3e>
 80086d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086da:	d100      	bne.n	80086de <__cvt+0x3a>
 80086dc:	3601      	adds	r6, #1
 80086de:	2302      	movs	r3, #2
 80086e0:	e000      	b.n	80086e4 <__cvt+0x40>
 80086e2:	2303      	movs	r3, #3
 80086e4:	aa07      	add	r2, sp, #28
 80086e6:	9204      	str	r2, [sp, #16]
 80086e8:	aa06      	add	r2, sp, #24
 80086ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80086ee:	e9cd 3600 	strd	r3, r6, [sp]
 80086f2:	4622      	mov	r2, r4
 80086f4:	462b      	mov	r3, r5
 80086f6:	f000 fcef 	bl	80090d8 <_dtoa_r>
 80086fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086fe:	4607      	mov	r7, r0
 8008700:	d102      	bne.n	8008708 <__cvt+0x64>
 8008702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008704:	07db      	lsls	r3, r3, #31
 8008706:	d522      	bpl.n	800874e <__cvt+0xaa>
 8008708:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800870c:	eb07 0906 	add.w	r9, r7, r6
 8008710:	d110      	bne.n	8008734 <__cvt+0x90>
 8008712:	783b      	ldrb	r3, [r7, #0]
 8008714:	2b30      	cmp	r3, #48	; 0x30
 8008716:	d10a      	bne.n	800872e <__cvt+0x8a>
 8008718:	2200      	movs	r2, #0
 800871a:	2300      	movs	r3, #0
 800871c:	4620      	mov	r0, r4
 800871e:	4629      	mov	r1, r5
 8008720:	f7f8 fa32 	bl	8000b88 <__aeabi_dcmpeq>
 8008724:	b918      	cbnz	r0, 800872e <__cvt+0x8a>
 8008726:	f1c6 0601 	rsb	r6, r6, #1
 800872a:	f8ca 6000 	str.w	r6, [sl]
 800872e:	f8da 3000 	ldr.w	r3, [sl]
 8008732:	4499      	add	r9, r3
 8008734:	2200      	movs	r2, #0
 8008736:	2300      	movs	r3, #0
 8008738:	4620      	mov	r0, r4
 800873a:	4629      	mov	r1, r5
 800873c:	f7f8 fa24 	bl	8000b88 <__aeabi_dcmpeq>
 8008740:	b108      	cbz	r0, 8008746 <__cvt+0xa2>
 8008742:	f8cd 901c 	str.w	r9, [sp, #28]
 8008746:	2230      	movs	r2, #48	; 0x30
 8008748:	9b07      	ldr	r3, [sp, #28]
 800874a:	454b      	cmp	r3, r9
 800874c:	d307      	bcc.n	800875e <__cvt+0xba>
 800874e:	9b07      	ldr	r3, [sp, #28]
 8008750:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008752:	1bdb      	subs	r3, r3, r7
 8008754:	4638      	mov	r0, r7
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	b008      	add	sp, #32
 800875a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875e:	1c59      	adds	r1, r3, #1
 8008760:	9107      	str	r1, [sp, #28]
 8008762:	701a      	strb	r2, [r3, #0]
 8008764:	e7f0      	b.n	8008748 <__cvt+0xa4>

08008766 <__exponent>:
 8008766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008768:	4603      	mov	r3, r0
 800876a:	2900      	cmp	r1, #0
 800876c:	bfb8      	it	lt
 800876e:	4249      	neglt	r1, r1
 8008770:	f803 2b02 	strb.w	r2, [r3], #2
 8008774:	bfb4      	ite	lt
 8008776:	222d      	movlt	r2, #45	; 0x2d
 8008778:	222b      	movge	r2, #43	; 0x2b
 800877a:	2909      	cmp	r1, #9
 800877c:	7042      	strb	r2, [r0, #1]
 800877e:	dd2a      	ble.n	80087d6 <__exponent+0x70>
 8008780:	f10d 0407 	add.w	r4, sp, #7
 8008784:	46a4      	mov	ip, r4
 8008786:	270a      	movs	r7, #10
 8008788:	46a6      	mov	lr, r4
 800878a:	460a      	mov	r2, r1
 800878c:	fb91 f6f7 	sdiv	r6, r1, r7
 8008790:	fb07 1516 	mls	r5, r7, r6, r1
 8008794:	3530      	adds	r5, #48	; 0x30
 8008796:	2a63      	cmp	r2, #99	; 0x63
 8008798:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800879c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80087a0:	4631      	mov	r1, r6
 80087a2:	dcf1      	bgt.n	8008788 <__exponent+0x22>
 80087a4:	3130      	adds	r1, #48	; 0x30
 80087a6:	f1ae 0502 	sub.w	r5, lr, #2
 80087aa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80087ae:	1c44      	adds	r4, r0, #1
 80087b0:	4629      	mov	r1, r5
 80087b2:	4561      	cmp	r1, ip
 80087b4:	d30a      	bcc.n	80087cc <__exponent+0x66>
 80087b6:	f10d 0209 	add.w	r2, sp, #9
 80087ba:	eba2 020e 	sub.w	r2, r2, lr
 80087be:	4565      	cmp	r5, ip
 80087c0:	bf88      	it	hi
 80087c2:	2200      	movhi	r2, #0
 80087c4:	4413      	add	r3, r2
 80087c6:	1a18      	subs	r0, r3, r0
 80087c8:	b003      	add	sp, #12
 80087ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087d0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80087d4:	e7ed      	b.n	80087b2 <__exponent+0x4c>
 80087d6:	2330      	movs	r3, #48	; 0x30
 80087d8:	3130      	adds	r1, #48	; 0x30
 80087da:	7083      	strb	r3, [r0, #2]
 80087dc:	70c1      	strb	r1, [r0, #3]
 80087de:	1d03      	adds	r3, r0, #4
 80087e0:	e7f1      	b.n	80087c6 <__exponent+0x60>
	...

080087e4 <_printf_float>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	ed2d 8b02 	vpush	{d8}
 80087ec:	b091      	sub	sp, #68	; 0x44
 80087ee:	460c      	mov	r4, r1
 80087f0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80087f4:	4616      	mov	r6, r2
 80087f6:	461f      	mov	r7, r3
 80087f8:	4605      	mov	r5, r0
 80087fa:	f001 fa59 	bl	8009cb0 <_localeconv_r>
 80087fe:	f8d0 a000 	ldr.w	sl, [r0]
 8008802:	4650      	mov	r0, sl
 8008804:	f7f7 fd3e 	bl	8000284 <strlen>
 8008808:	2300      	movs	r3, #0
 800880a:	930e      	str	r3, [sp, #56]	; 0x38
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	9309      	str	r3, [sp, #36]	; 0x24
 8008810:	f8d8 3000 	ldr.w	r3, [r8]
 8008814:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008818:	3307      	adds	r3, #7
 800881a:	f023 0307 	bic.w	r3, r3, #7
 800881e:	f103 0208 	add.w	r2, r3, #8
 8008822:	f8c8 2000 	str.w	r2, [r8]
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800882e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008832:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008836:	930b      	str	r3, [sp, #44]	; 0x2c
 8008838:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800883c:	ee08 0a10 	vmov	s16, r0
 8008840:	4ba0      	ldr	r3, [pc, #640]	; (8008ac4 <_printf_float+0x2e0>)
 8008842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800884a:	f7f8 f9cf 	bl	8000bec <__aeabi_dcmpun>
 800884e:	bb88      	cbnz	r0, 80088b4 <_printf_float+0xd0>
 8008850:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008854:	4b9b      	ldr	r3, [pc, #620]	; (8008ac4 <_printf_float+0x2e0>)
 8008856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800885a:	f7f8 f9a9 	bl	8000bb0 <__aeabi_dcmple>
 800885e:	bb48      	cbnz	r0, 80088b4 <_printf_float+0xd0>
 8008860:	2200      	movs	r2, #0
 8008862:	2300      	movs	r3, #0
 8008864:	4640      	mov	r0, r8
 8008866:	4649      	mov	r1, r9
 8008868:	f7f8 f998 	bl	8000b9c <__aeabi_dcmplt>
 800886c:	b110      	cbz	r0, 8008874 <_printf_float+0x90>
 800886e:	232d      	movs	r3, #45	; 0x2d
 8008870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008874:	4b94      	ldr	r3, [pc, #592]	; (8008ac8 <_printf_float+0x2e4>)
 8008876:	4895      	ldr	r0, [pc, #596]	; (8008acc <_printf_float+0x2e8>)
 8008878:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800887c:	bf94      	ite	ls
 800887e:	4698      	movls	r8, r3
 8008880:	4680      	movhi	r8, r0
 8008882:	2303      	movs	r3, #3
 8008884:	6123      	str	r3, [r4, #16]
 8008886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008888:	f023 0304 	bic.w	r3, r3, #4
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	f04f 0900 	mov.w	r9, #0
 8008892:	9700      	str	r7, [sp, #0]
 8008894:	4633      	mov	r3, r6
 8008896:	aa0f      	add	r2, sp, #60	; 0x3c
 8008898:	4621      	mov	r1, r4
 800889a:	4628      	mov	r0, r5
 800889c:	f000 f9da 	bl	8008c54 <_printf_common>
 80088a0:	3001      	adds	r0, #1
 80088a2:	f040 8092 	bne.w	80089ca <_printf_float+0x1e6>
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088aa:	b011      	add	sp, #68	; 0x44
 80088ac:	ecbd 8b02 	vpop	{d8}
 80088b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b4:	4642      	mov	r2, r8
 80088b6:	464b      	mov	r3, r9
 80088b8:	4640      	mov	r0, r8
 80088ba:	4649      	mov	r1, r9
 80088bc:	f7f8 f996 	bl	8000bec <__aeabi_dcmpun>
 80088c0:	b140      	cbz	r0, 80088d4 <_printf_float+0xf0>
 80088c2:	464b      	mov	r3, r9
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bfbc      	itt	lt
 80088c8:	232d      	movlt	r3, #45	; 0x2d
 80088ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088ce:	4880      	ldr	r0, [pc, #512]	; (8008ad0 <_printf_float+0x2ec>)
 80088d0:	4b80      	ldr	r3, [pc, #512]	; (8008ad4 <_printf_float+0x2f0>)
 80088d2:	e7d1      	b.n	8008878 <_printf_float+0x94>
 80088d4:	6863      	ldr	r3, [r4, #4]
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 80088dc:	d143      	bne.n	8008966 <_printf_float+0x182>
 80088de:	2306      	movs	r3, #6
 80088e0:	6063      	str	r3, [r4, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e6:	9206      	str	r2, [sp, #24]
 80088e8:	aa0e      	add	r2, sp, #56	; 0x38
 80088ea:	e9cd b204 	strd	fp, r2, [sp, #16]
 80088ee:	aa0d      	add	r2, sp, #52	; 0x34
 80088f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088f4:	9203      	str	r2, [sp, #12]
 80088f6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80088fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	6863      	ldr	r3, [r4, #4]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	4628      	mov	r0, r5
 800890a:	910a      	str	r1, [sp, #40]	; 0x28
 800890c:	f7ff feca 	bl	80086a4 <__cvt>
 8008910:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008912:	2947      	cmp	r1, #71	; 0x47
 8008914:	4680      	mov	r8, r0
 8008916:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008918:	d108      	bne.n	800892c <_printf_float+0x148>
 800891a:	1cc8      	adds	r0, r1, #3
 800891c:	db02      	blt.n	8008924 <_printf_float+0x140>
 800891e:	6863      	ldr	r3, [r4, #4]
 8008920:	4299      	cmp	r1, r3
 8008922:	dd40      	ble.n	80089a6 <_printf_float+0x1c2>
 8008924:	f1ab 0b02 	sub.w	fp, fp, #2
 8008928:	fa5f fb8b 	uxtb.w	fp, fp
 800892c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008930:	d81f      	bhi.n	8008972 <_printf_float+0x18e>
 8008932:	3901      	subs	r1, #1
 8008934:	465a      	mov	r2, fp
 8008936:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800893a:	910d      	str	r1, [sp, #52]	; 0x34
 800893c:	f7ff ff13 	bl	8008766 <__exponent>
 8008940:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008942:	1813      	adds	r3, r2, r0
 8008944:	2a01      	cmp	r2, #1
 8008946:	4681      	mov	r9, r0
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	dc02      	bgt.n	8008952 <_printf_float+0x16e>
 800894c:	6822      	ldr	r2, [r4, #0]
 800894e:	07d2      	lsls	r2, r2, #31
 8008950:	d501      	bpl.n	8008956 <_printf_float+0x172>
 8008952:	3301      	adds	r3, #1
 8008954:	6123      	str	r3, [r4, #16]
 8008956:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800895a:	2b00      	cmp	r3, #0
 800895c:	d099      	beq.n	8008892 <_printf_float+0xae>
 800895e:	232d      	movs	r3, #45	; 0x2d
 8008960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008964:	e795      	b.n	8008892 <_printf_float+0xae>
 8008966:	2947      	cmp	r1, #71	; 0x47
 8008968:	d1bb      	bne.n	80088e2 <_printf_float+0xfe>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1b9      	bne.n	80088e2 <_printf_float+0xfe>
 800896e:	2301      	movs	r3, #1
 8008970:	e7b6      	b.n	80088e0 <_printf_float+0xfc>
 8008972:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008976:	d118      	bne.n	80089aa <_printf_float+0x1c6>
 8008978:	2900      	cmp	r1, #0
 800897a:	6863      	ldr	r3, [r4, #4]
 800897c:	dd0b      	ble.n	8008996 <_printf_float+0x1b2>
 800897e:	6121      	str	r1, [r4, #16]
 8008980:	b913      	cbnz	r3, 8008988 <_printf_float+0x1a4>
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	07d0      	lsls	r0, r2, #31
 8008986:	d502      	bpl.n	800898e <_printf_float+0x1aa>
 8008988:	3301      	adds	r3, #1
 800898a:	440b      	add	r3, r1
 800898c:	6123      	str	r3, [r4, #16]
 800898e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008990:	f04f 0900 	mov.w	r9, #0
 8008994:	e7df      	b.n	8008956 <_printf_float+0x172>
 8008996:	b913      	cbnz	r3, 800899e <_printf_float+0x1ba>
 8008998:	6822      	ldr	r2, [r4, #0]
 800899a:	07d2      	lsls	r2, r2, #31
 800899c:	d501      	bpl.n	80089a2 <_printf_float+0x1be>
 800899e:	3302      	adds	r3, #2
 80089a0:	e7f4      	b.n	800898c <_printf_float+0x1a8>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e7f2      	b.n	800898c <_printf_float+0x1a8>
 80089a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80089aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ac:	4299      	cmp	r1, r3
 80089ae:	db05      	blt.n	80089bc <_printf_float+0x1d8>
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	6121      	str	r1, [r4, #16]
 80089b4:	07d8      	lsls	r0, r3, #31
 80089b6:	d5ea      	bpl.n	800898e <_printf_float+0x1aa>
 80089b8:	1c4b      	adds	r3, r1, #1
 80089ba:	e7e7      	b.n	800898c <_printf_float+0x1a8>
 80089bc:	2900      	cmp	r1, #0
 80089be:	bfd4      	ite	le
 80089c0:	f1c1 0202 	rsble	r2, r1, #2
 80089c4:	2201      	movgt	r2, #1
 80089c6:	4413      	add	r3, r2
 80089c8:	e7e0      	b.n	800898c <_printf_float+0x1a8>
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	055a      	lsls	r2, r3, #21
 80089ce:	d407      	bmi.n	80089e0 <_printf_float+0x1fc>
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	4642      	mov	r2, r8
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	d12c      	bne.n	8008a38 <_printf_float+0x254>
 80089de:	e762      	b.n	80088a6 <_printf_float+0xc2>
 80089e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089e4:	f240 80e0 	bls.w	8008ba8 <_printf_float+0x3c4>
 80089e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089ec:	2200      	movs	r2, #0
 80089ee:	2300      	movs	r3, #0
 80089f0:	f7f8 f8ca 	bl	8000b88 <__aeabi_dcmpeq>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d034      	beq.n	8008a62 <_printf_float+0x27e>
 80089f8:	4a37      	ldr	r2, [pc, #220]	; (8008ad8 <_printf_float+0x2f4>)
 80089fa:	2301      	movs	r3, #1
 80089fc:	4631      	mov	r1, r6
 80089fe:	4628      	mov	r0, r5
 8008a00:	47b8      	blx	r7
 8008a02:	3001      	adds	r0, #1
 8008a04:	f43f af4f 	beq.w	80088a6 <_printf_float+0xc2>
 8008a08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	db02      	blt.n	8008a16 <_printf_float+0x232>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	07d8      	lsls	r0, r3, #31
 8008a14:	d510      	bpl.n	8008a38 <_printf_float+0x254>
 8008a16:	ee18 3a10 	vmov	r3, s16
 8008a1a:	4652      	mov	r2, sl
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	f43f af3f 	beq.w	80088a6 <_printf_float+0xc2>
 8008a28:	f04f 0800 	mov.w	r8, #0
 8008a2c:	f104 091a 	add.w	r9, r4, #26
 8008a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a32:	3b01      	subs	r3, #1
 8008a34:	4543      	cmp	r3, r8
 8008a36:	dc09      	bgt.n	8008a4c <_printf_float+0x268>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	079b      	lsls	r3, r3, #30
 8008a3c:	f100 8105 	bmi.w	8008c4a <_printf_float+0x466>
 8008a40:	68e0      	ldr	r0, [r4, #12]
 8008a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a44:	4298      	cmp	r0, r3
 8008a46:	bfb8      	it	lt
 8008a48:	4618      	movlt	r0, r3
 8008a4a:	e72e      	b.n	80088aa <_printf_float+0xc6>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	464a      	mov	r2, r9
 8008a50:	4631      	mov	r1, r6
 8008a52:	4628      	mov	r0, r5
 8008a54:	47b8      	blx	r7
 8008a56:	3001      	adds	r0, #1
 8008a58:	f43f af25 	beq.w	80088a6 <_printf_float+0xc2>
 8008a5c:	f108 0801 	add.w	r8, r8, #1
 8008a60:	e7e6      	b.n	8008a30 <_printf_float+0x24c>
 8008a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dc39      	bgt.n	8008adc <_printf_float+0x2f8>
 8008a68:	4a1b      	ldr	r2, [pc, #108]	; (8008ad8 <_printf_float+0x2f4>)
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b8      	blx	r7
 8008a72:	3001      	adds	r0, #1
 8008a74:	f43f af17 	beq.w	80088a6 <_printf_float+0xc2>
 8008a78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	d102      	bne.n	8008a86 <_printf_float+0x2a2>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	07d9      	lsls	r1, r3, #31
 8008a84:	d5d8      	bpl.n	8008a38 <_printf_float+0x254>
 8008a86:	ee18 3a10 	vmov	r3, s16
 8008a8a:	4652      	mov	r2, sl
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4628      	mov	r0, r5
 8008a90:	47b8      	blx	r7
 8008a92:	3001      	adds	r0, #1
 8008a94:	f43f af07 	beq.w	80088a6 <_printf_float+0xc2>
 8008a98:	f04f 0900 	mov.w	r9, #0
 8008a9c:	f104 0a1a 	add.w	sl, r4, #26
 8008aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aa2:	425b      	negs	r3, r3
 8008aa4:	454b      	cmp	r3, r9
 8008aa6:	dc01      	bgt.n	8008aac <_printf_float+0x2c8>
 8008aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aaa:	e792      	b.n	80089d2 <_printf_float+0x1ee>
 8008aac:	2301      	movs	r3, #1
 8008aae:	4652      	mov	r2, sl
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	47b8      	blx	r7
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	f43f aef5 	beq.w	80088a6 <_printf_float+0xc2>
 8008abc:	f109 0901 	add.w	r9, r9, #1
 8008ac0:	e7ee      	b.n	8008aa0 <_printf_float+0x2bc>
 8008ac2:	bf00      	nop
 8008ac4:	7fefffff 	.word	0x7fefffff
 8008ac8:	0800b944 	.word	0x0800b944
 8008acc:	0800b948 	.word	0x0800b948
 8008ad0:	0800b950 	.word	0x0800b950
 8008ad4:	0800b94c 	.word	0x0800b94c
 8008ad8:	0800b954 	.word	0x0800b954
 8008adc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	bfa8      	it	ge
 8008ae4:	461a      	movge	r2, r3
 8008ae6:	2a00      	cmp	r2, #0
 8008ae8:	4691      	mov	r9, r2
 8008aea:	dc37      	bgt.n	8008b5c <_printf_float+0x378>
 8008aec:	f04f 0b00 	mov.w	fp, #0
 8008af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008af4:	f104 021a 	add.w	r2, r4, #26
 8008af8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008afa:	9309      	str	r3, [sp, #36]	; 0x24
 8008afc:	eba3 0309 	sub.w	r3, r3, r9
 8008b00:	455b      	cmp	r3, fp
 8008b02:	dc33      	bgt.n	8008b6c <_printf_float+0x388>
 8008b04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	db3b      	blt.n	8008b84 <_printf_float+0x3a0>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	07da      	lsls	r2, r3, #31
 8008b10:	d438      	bmi.n	8008b84 <_printf_float+0x3a0>
 8008b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	eba2 0901 	sub.w	r9, r2, r1
 8008b1e:	4599      	cmp	r9, r3
 8008b20:	bfa8      	it	ge
 8008b22:	4699      	movge	r9, r3
 8008b24:	f1b9 0f00 	cmp.w	r9, #0
 8008b28:	dc35      	bgt.n	8008b96 <_printf_float+0x3b2>
 8008b2a:	f04f 0800 	mov.w	r8, #0
 8008b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b32:	f104 0a1a 	add.w	sl, r4, #26
 8008b36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b3a:	1a9b      	subs	r3, r3, r2
 8008b3c:	eba3 0309 	sub.w	r3, r3, r9
 8008b40:	4543      	cmp	r3, r8
 8008b42:	f77f af79 	ble.w	8008a38 <_printf_float+0x254>
 8008b46:	2301      	movs	r3, #1
 8008b48:	4652      	mov	r2, sl
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b8      	blx	r7
 8008b50:	3001      	adds	r0, #1
 8008b52:	f43f aea8 	beq.w	80088a6 <_printf_float+0xc2>
 8008b56:	f108 0801 	add.w	r8, r8, #1
 8008b5a:	e7ec      	b.n	8008b36 <_printf_float+0x352>
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4642      	mov	r2, r8
 8008b62:	4628      	mov	r0, r5
 8008b64:	47b8      	blx	r7
 8008b66:	3001      	adds	r0, #1
 8008b68:	d1c0      	bne.n	8008aec <_printf_float+0x308>
 8008b6a:	e69c      	b.n	80088a6 <_printf_float+0xc2>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	9209      	str	r2, [sp, #36]	; 0x24
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f ae95 	beq.w	80088a6 <_printf_float+0xc2>
 8008b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b7e:	f10b 0b01 	add.w	fp, fp, #1
 8008b82:	e7b9      	b.n	8008af8 <_printf_float+0x314>
 8008b84:	ee18 3a10 	vmov	r3, s16
 8008b88:	4652      	mov	r2, sl
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b8      	blx	r7
 8008b90:	3001      	adds	r0, #1
 8008b92:	d1be      	bne.n	8008b12 <_printf_float+0x32e>
 8008b94:	e687      	b.n	80088a6 <_printf_float+0xc2>
 8008b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b98:	464b      	mov	r3, r9
 8008b9a:	4442      	add	r2, r8
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d1c1      	bne.n	8008b2a <_printf_float+0x346>
 8008ba6:	e67e      	b.n	80088a6 <_printf_float+0xc2>
 8008ba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008baa:	2a01      	cmp	r2, #1
 8008bac:	dc01      	bgt.n	8008bb2 <_printf_float+0x3ce>
 8008bae:	07db      	lsls	r3, r3, #31
 8008bb0:	d538      	bpl.n	8008c24 <_printf_float+0x440>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4642      	mov	r2, r8
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f43f ae72 	beq.w	80088a6 <_printf_float+0xc2>
 8008bc2:	ee18 3a10 	vmov	r3, s16
 8008bc6:	4652      	mov	r2, sl
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	f43f ae69 	beq.w	80088a6 <_printf_float+0xc2>
 8008bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f7f7 ffd4 	bl	8000b88 <__aeabi_dcmpeq>
 8008be0:	b9d8      	cbnz	r0, 8008c1a <_printf_float+0x436>
 8008be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008be4:	f108 0201 	add.w	r2, r8, #1
 8008be8:	3b01      	subs	r3, #1
 8008bea:	4631      	mov	r1, r6
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b8      	blx	r7
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d10e      	bne.n	8008c12 <_printf_float+0x42e>
 8008bf4:	e657      	b.n	80088a6 <_printf_float+0xc2>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4652      	mov	r2, sl
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	f43f ae50 	beq.w	80088a6 <_printf_float+0xc2>
 8008c06:	f108 0801 	add.w	r8, r8, #1
 8008c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	4543      	cmp	r3, r8
 8008c10:	dcf1      	bgt.n	8008bf6 <_printf_float+0x412>
 8008c12:	464b      	mov	r3, r9
 8008c14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c18:	e6dc      	b.n	80089d4 <_printf_float+0x1f0>
 8008c1a:	f04f 0800 	mov.w	r8, #0
 8008c1e:	f104 0a1a 	add.w	sl, r4, #26
 8008c22:	e7f2      	b.n	8008c0a <_printf_float+0x426>
 8008c24:	2301      	movs	r3, #1
 8008c26:	4642      	mov	r2, r8
 8008c28:	e7df      	b.n	8008bea <_printf_float+0x406>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	464a      	mov	r2, r9
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	f43f ae36 	beq.w	80088a6 <_printf_float+0xc2>
 8008c3a:	f108 0801 	add.w	r8, r8, #1
 8008c3e:	68e3      	ldr	r3, [r4, #12]
 8008c40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c42:	1a5b      	subs	r3, r3, r1
 8008c44:	4543      	cmp	r3, r8
 8008c46:	dcf0      	bgt.n	8008c2a <_printf_float+0x446>
 8008c48:	e6fa      	b.n	8008a40 <_printf_float+0x25c>
 8008c4a:	f04f 0800 	mov.w	r8, #0
 8008c4e:	f104 0919 	add.w	r9, r4, #25
 8008c52:	e7f4      	b.n	8008c3e <_printf_float+0x45a>

08008c54 <_printf_common>:
 8008c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c58:	4616      	mov	r6, r2
 8008c5a:	4699      	mov	r9, r3
 8008c5c:	688a      	ldr	r2, [r1, #8]
 8008c5e:	690b      	ldr	r3, [r1, #16]
 8008c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c64:	4293      	cmp	r3, r2
 8008c66:	bfb8      	it	lt
 8008c68:	4613      	movlt	r3, r2
 8008c6a:	6033      	str	r3, [r6, #0]
 8008c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c70:	4607      	mov	r7, r0
 8008c72:	460c      	mov	r4, r1
 8008c74:	b10a      	cbz	r2, 8008c7a <_printf_common+0x26>
 8008c76:	3301      	adds	r3, #1
 8008c78:	6033      	str	r3, [r6, #0]
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	0699      	lsls	r1, r3, #26
 8008c7e:	bf42      	ittt	mi
 8008c80:	6833      	ldrmi	r3, [r6, #0]
 8008c82:	3302      	addmi	r3, #2
 8008c84:	6033      	strmi	r3, [r6, #0]
 8008c86:	6825      	ldr	r5, [r4, #0]
 8008c88:	f015 0506 	ands.w	r5, r5, #6
 8008c8c:	d106      	bne.n	8008c9c <_printf_common+0x48>
 8008c8e:	f104 0a19 	add.w	sl, r4, #25
 8008c92:	68e3      	ldr	r3, [r4, #12]
 8008c94:	6832      	ldr	r2, [r6, #0]
 8008c96:	1a9b      	subs	r3, r3, r2
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	dc26      	bgt.n	8008cea <_printf_common+0x96>
 8008c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ca0:	1e13      	subs	r3, r2, #0
 8008ca2:	6822      	ldr	r2, [r4, #0]
 8008ca4:	bf18      	it	ne
 8008ca6:	2301      	movne	r3, #1
 8008ca8:	0692      	lsls	r2, r2, #26
 8008caa:	d42b      	bmi.n	8008d04 <_printf_common+0xb0>
 8008cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	47c0      	blx	r8
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d01e      	beq.n	8008cf8 <_printf_common+0xa4>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	68e5      	ldr	r5, [r4, #12]
 8008cbe:	6832      	ldr	r2, [r6, #0]
 8008cc0:	f003 0306 	and.w	r3, r3, #6
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	bf08      	it	eq
 8008cc8:	1aad      	subeq	r5, r5, r2
 8008cca:	68a3      	ldr	r3, [r4, #8]
 8008ccc:	6922      	ldr	r2, [r4, #16]
 8008cce:	bf0c      	ite	eq
 8008cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cd4:	2500      	movne	r5, #0
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	bfc4      	itt	gt
 8008cda:	1a9b      	subgt	r3, r3, r2
 8008cdc:	18ed      	addgt	r5, r5, r3
 8008cde:	2600      	movs	r6, #0
 8008ce0:	341a      	adds	r4, #26
 8008ce2:	42b5      	cmp	r5, r6
 8008ce4:	d11a      	bne.n	8008d1c <_printf_common+0xc8>
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	e008      	b.n	8008cfc <_printf_common+0xa8>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4652      	mov	r2, sl
 8008cee:	4649      	mov	r1, r9
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	47c0      	blx	r8
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d103      	bne.n	8008d00 <_printf_common+0xac>
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d00:	3501      	adds	r5, #1
 8008d02:	e7c6      	b.n	8008c92 <_printf_common+0x3e>
 8008d04:	18e1      	adds	r1, r4, r3
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	2030      	movs	r0, #48	; 0x30
 8008d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d0e:	4422      	add	r2, r4
 8008d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d18:	3302      	adds	r3, #2
 8008d1a:	e7c7      	b.n	8008cac <_printf_common+0x58>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	4622      	mov	r2, r4
 8008d20:	4649      	mov	r1, r9
 8008d22:	4638      	mov	r0, r7
 8008d24:	47c0      	blx	r8
 8008d26:	3001      	adds	r0, #1
 8008d28:	d0e6      	beq.n	8008cf8 <_printf_common+0xa4>
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	e7d9      	b.n	8008ce2 <_printf_common+0x8e>
	...

08008d30 <_printf_i>:
 8008d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d34:	460c      	mov	r4, r1
 8008d36:	4691      	mov	r9, r2
 8008d38:	7e27      	ldrb	r7, [r4, #24]
 8008d3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d3c:	2f78      	cmp	r7, #120	; 0x78
 8008d3e:	4680      	mov	r8, r0
 8008d40:	469a      	mov	sl, r3
 8008d42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d46:	d807      	bhi.n	8008d58 <_printf_i+0x28>
 8008d48:	2f62      	cmp	r7, #98	; 0x62
 8008d4a:	d80a      	bhi.n	8008d62 <_printf_i+0x32>
 8008d4c:	2f00      	cmp	r7, #0
 8008d4e:	f000 80d8 	beq.w	8008f02 <_printf_i+0x1d2>
 8008d52:	2f58      	cmp	r7, #88	; 0x58
 8008d54:	f000 80a3 	beq.w	8008e9e <_printf_i+0x16e>
 8008d58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d60:	e03a      	b.n	8008dd8 <_printf_i+0xa8>
 8008d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d66:	2b15      	cmp	r3, #21
 8008d68:	d8f6      	bhi.n	8008d58 <_printf_i+0x28>
 8008d6a:	a001      	add	r0, pc, #4	; (adr r0, 8008d70 <_printf_i+0x40>)
 8008d6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d70:	08008dc9 	.word	0x08008dc9
 8008d74:	08008ddd 	.word	0x08008ddd
 8008d78:	08008d59 	.word	0x08008d59
 8008d7c:	08008d59 	.word	0x08008d59
 8008d80:	08008d59 	.word	0x08008d59
 8008d84:	08008d59 	.word	0x08008d59
 8008d88:	08008ddd 	.word	0x08008ddd
 8008d8c:	08008d59 	.word	0x08008d59
 8008d90:	08008d59 	.word	0x08008d59
 8008d94:	08008d59 	.word	0x08008d59
 8008d98:	08008d59 	.word	0x08008d59
 8008d9c:	08008ee9 	.word	0x08008ee9
 8008da0:	08008e0d 	.word	0x08008e0d
 8008da4:	08008ecb 	.word	0x08008ecb
 8008da8:	08008d59 	.word	0x08008d59
 8008dac:	08008d59 	.word	0x08008d59
 8008db0:	08008f0b 	.word	0x08008f0b
 8008db4:	08008d59 	.word	0x08008d59
 8008db8:	08008e0d 	.word	0x08008e0d
 8008dbc:	08008d59 	.word	0x08008d59
 8008dc0:	08008d59 	.word	0x08008d59
 8008dc4:	08008ed3 	.word	0x08008ed3
 8008dc8:	680b      	ldr	r3, [r1, #0]
 8008dca:	1d1a      	adds	r2, r3, #4
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	600a      	str	r2, [r1, #0]
 8008dd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e0a3      	b.n	8008f24 <_printf_i+0x1f4>
 8008ddc:	6825      	ldr	r5, [r4, #0]
 8008dde:	6808      	ldr	r0, [r1, #0]
 8008de0:	062e      	lsls	r6, r5, #24
 8008de2:	f100 0304 	add.w	r3, r0, #4
 8008de6:	d50a      	bpl.n	8008dfe <_printf_i+0xce>
 8008de8:	6805      	ldr	r5, [r0, #0]
 8008dea:	600b      	str	r3, [r1, #0]
 8008dec:	2d00      	cmp	r5, #0
 8008dee:	da03      	bge.n	8008df8 <_printf_i+0xc8>
 8008df0:	232d      	movs	r3, #45	; 0x2d
 8008df2:	426d      	negs	r5, r5
 8008df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df8:	485e      	ldr	r0, [pc, #376]	; (8008f74 <_printf_i+0x244>)
 8008dfa:	230a      	movs	r3, #10
 8008dfc:	e019      	b.n	8008e32 <_printf_i+0x102>
 8008dfe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008e02:	6805      	ldr	r5, [r0, #0]
 8008e04:	600b      	str	r3, [r1, #0]
 8008e06:	bf18      	it	ne
 8008e08:	b22d      	sxthne	r5, r5
 8008e0a:	e7ef      	b.n	8008dec <_printf_i+0xbc>
 8008e0c:	680b      	ldr	r3, [r1, #0]
 8008e0e:	6825      	ldr	r5, [r4, #0]
 8008e10:	1d18      	adds	r0, r3, #4
 8008e12:	6008      	str	r0, [r1, #0]
 8008e14:	0628      	lsls	r0, r5, #24
 8008e16:	d501      	bpl.n	8008e1c <_printf_i+0xec>
 8008e18:	681d      	ldr	r5, [r3, #0]
 8008e1a:	e002      	b.n	8008e22 <_printf_i+0xf2>
 8008e1c:	0669      	lsls	r1, r5, #25
 8008e1e:	d5fb      	bpl.n	8008e18 <_printf_i+0xe8>
 8008e20:	881d      	ldrh	r5, [r3, #0]
 8008e22:	4854      	ldr	r0, [pc, #336]	; (8008f74 <_printf_i+0x244>)
 8008e24:	2f6f      	cmp	r7, #111	; 0x6f
 8008e26:	bf0c      	ite	eq
 8008e28:	2308      	moveq	r3, #8
 8008e2a:	230a      	movne	r3, #10
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e32:	6866      	ldr	r6, [r4, #4]
 8008e34:	60a6      	str	r6, [r4, #8]
 8008e36:	2e00      	cmp	r6, #0
 8008e38:	bfa2      	ittt	ge
 8008e3a:	6821      	ldrge	r1, [r4, #0]
 8008e3c:	f021 0104 	bicge.w	r1, r1, #4
 8008e40:	6021      	strge	r1, [r4, #0]
 8008e42:	b90d      	cbnz	r5, 8008e48 <_printf_i+0x118>
 8008e44:	2e00      	cmp	r6, #0
 8008e46:	d04d      	beq.n	8008ee4 <_printf_i+0x1b4>
 8008e48:	4616      	mov	r6, r2
 8008e4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e4e:	fb03 5711 	mls	r7, r3, r1, r5
 8008e52:	5dc7      	ldrb	r7, [r0, r7]
 8008e54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e58:	462f      	mov	r7, r5
 8008e5a:	42bb      	cmp	r3, r7
 8008e5c:	460d      	mov	r5, r1
 8008e5e:	d9f4      	bls.n	8008e4a <_printf_i+0x11a>
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d10b      	bne.n	8008e7c <_printf_i+0x14c>
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	07df      	lsls	r7, r3, #31
 8008e68:	d508      	bpl.n	8008e7c <_printf_i+0x14c>
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	6861      	ldr	r1, [r4, #4]
 8008e6e:	4299      	cmp	r1, r3
 8008e70:	bfde      	ittt	le
 8008e72:	2330      	movle	r3, #48	; 0x30
 8008e74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e78:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008e7c:	1b92      	subs	r2, r2, r6
 8008e7e:	6122      	str	r2, [r4, #16]
 8008e80:	f8cd a000 	str.w	sl, [sp]
 8008e84:	464b      	mov	r3, r9
 8008e86:	aa03      	add	r2, sp, #12
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	f7ff fee2 	bl	8008c54 <_printf_common>
 8008e90:	3001      	adds	r0, #1
 8008e92:	d14c      	bne.n	8008f2e <_printf_i+0x1fe>
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e98:	b004      	add	sp, #16
 8008e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9e:	4835      	ldr	r0, [pc, #212]	; (8008f74 <_printf_i+0x244>)
 8008ea0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	680e      	ldr	r6, [r1, #0]
 8008ea8:	061f      	lsls	r7, r3, #24
 8008eaa:	f856 5b04 	ldr.w	r5, [r6], #4
 8008eae:	600e      	str	r6, [r1, #0]
 8008eb0:	d514      	bpl.n	8008edc <_printf_i+0x1ac>
 8008eb2:	07d9      	lsls	r1, r3, #31
 8008eb4:	bf44      	itt	mi
 8008eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8008eba:	6023      	strmi	r3, [r4, #0]
 8008ebc:	b91d      	cbnz	r5, 8008ec6 <_printf_i+0x196>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	f023 0320 	bic.w	r3, r3, #32
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	2310      	movs	r3, #16
 8008ec8:	e7b0      	b.n	8008e2c <_printf_i+0xfc>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	f043 0320 	orr.w	r3, r3, #32
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	2378      	movs	r3, #120	; 0x78
 8008ed4:	4828      	ldr	r0, [pc, #160]	; (8008f78 <_printf_i+0x248>)
 8008ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008eda:	e7e3      	b.n	8008ea4 <_printf_i+0x174>
 8008edc:	065e      	lsls	r6, r3, #25
 8008ede:	bf48      	it	mi
 8008ee0:	b2ad      	uxthmi	r5, r5
 8008ee2:	e7e6      	b.n	8008eb2 <_printf_i+0x182>
 8008ee4:	4616      	mov	r6, r2
 8008ee6:	e7bb      	b.n	8008e60 <_printf_i+0x130>
 8008ee8:	680b      	ldr	r3, [r1, #0]
 8008eea:	6826      	ldr	r6, [r4, #0]
 8008eec:	6960      	ldr	r0, [r4, #20]
 8008eee:	1d1d      	adds	r5, r3, #4
 8008ef0:	600d      	str	r5, [r1, #0]
 8008ef2:	0635      	lsls	r5, r6, #24
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	d501      	bpl.n	8008efc <_printf_i+0x1cc>
 8008ef8:	6018      	str	r0, [r3, #0]
 8008efa:	e002      	b.n	8008f02 <_printf_i+0x1d2>
 8008efc:	0671      	lsls	r1, r6, #25
 8008efe:	d5fb      	bpl.n	8008ef8 <_printf_i+0x1c8>
 8008f00:	8018      	strh	r0, [r3, #0]
 8008f02:	2300      	movs	r3, #0
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	4616      	mov	r6, r2
 8008f08:	e7ba      	b.n	8008e80 <_printf_i+0x150>
 8008f0a:	680b      	ldr	r3, [r1, #0]
 8008f0c:	1d1a      	adds	r2, r3, #4
 8008f0e:	600a      	str	r2, [r1, #0]
 8008f10:	681e      	ldr	r6, [r3, #0]
 8008f12:	6862      	ldr	r2, [r4, #4]
 8008f14:	2100      	movs	r1, #0
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7f7 f9c2 	bl	80002a0 <memchr>
 8008f1c:	b108      	cbz	r0, 8008f22 <_printf_i+0x1f2>
 8008f1e:	1b80      	subs	r0, r0, r6
 8008f20:	6060      	str	r0, [r4, #4]
 8008f22:	6863      	ldr	r3, [r4, #4]
 8008f24:	6123      	str	r3, [r4, #16]
 8008f26:	2300      	movs	r3, #0
 8008f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f2c:	e7a8      	b.n	8008e80 <_printf_i+0x150>
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	4632      	mov	r2, r6
 8008f32:	4649      	mov	r1, r9
 8008f34:	4640      	mov	r0, r8
 8008f36:	47d0      	blx	sl
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d0ab      	beq.n	8008e94 <_printf_i+0x164>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	079b      	lsls	r3, r3, #30
 8008f40:	d413      	bmi.n	8008f6a <_printf_i+0x23a>
 8008f42:	68e0      	ldr	r0, [r4, #12]
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	4298      	cmp	r0, r3
 8008f48:	bfb8      	it	lt
 8008f4a:	4618      	movlt	r0, r3
 8008f4c:	e7a4      	b.n	8008e98 <_printf_i+0x168>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4632      	mov	r2, r6
 8008f52:	4649      	mov	r1, r9
 8008f54:	4640      	mov	r0, r8
 8008f56:	47d0      	blx	sl
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d09b      	beq.n	8008e94 <_printf_i+0x164>
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	9903      	ldr	r1, [sp, #12]
 8008f62:	1a5b      	subs	r3, r3, r1
 8008f64:	42ab      	cmp	r3, r5
 8008f66:	dcf2      	bgt.n	8008f4e <_printf_i+0x21e>
 8008f68:	e7eb      	b.n	8008f42 <_printf_i+0x212>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	f104 0619 	add.w	r6, r4, #25
 8008f70:	e7f5      	b.n	8008f5e <_printf_i+0x22e>
 8008f72:	bf00      	nop
 8008f74:	0800b956 	.word	0x0800b956
 8008f78:	0800b967 	.word	0x0800b967

08008f7c <siprintf>:
 8008f7c:	b40e      	push	{r1, r2, r3}
 8008f7e:	b500      	push	{lr}
 8008f80:	b09c      	sub	sp, #112	; 0x70
 8008f82:	ab1d      	add	r3, sp, #116	; 0x74
 8008f84:	9002      	str	r0, [sp, #8]
 8008f86:	9006      	str	r0, [sp, #24]
 8008f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f8c:	4809      	ldr	r0, [pc, #36]	; (8008fb4 <siprintf+0x38>)
 8008f8e:	9107      	str	r1, [sp, #28]
 8008f90:	9104      	str	r1, [sp, #16]
 8008f92:	4909      	ldr	r1, [pc, #36]	; (8008fb8 <siprintf+0x3c>)
 8008f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f98:	9105      	str	r1, [sp, #20]
 8008f9a:	6800      	ldr	r0, [r0, #0]
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	a902      	add	r1, sp, #8
 8008fa0:	f001 fb24 	bl	800a5ec <_svfiprintf_r>
 8008fa4:	9b02      	ldr	r3, [sp, #8]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	701a      	strb	r2, [r3, #0]
 8008faa:	b01c      	add	sp, #112	; 0x70
 8008fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fb0:	b003      	add	sp, #12
 8008fb2:	4770      	bx	lr
 8008fb4:	2000003c 	.word	0x2000003c
 8008fb8:	ffff0208 	.word	0xffff0208

08008fbc <quorem>:
 8008fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	6903      	ldr	r3, [r0, #16]
 8008fc2:	690c      	ldr	r4, [r1, #16]
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	f2c0 8081 	blt.w	80090ce <quorem+0x112>
 8008fcc:	3c01      	subs	r4, #1
 8008fce:	f101 0814 	add.w	r8, r1, #20
 8008fd2:	f100 0514 	add.w	r5, r0, #20
 8008fd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ff0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ff4:	d331      	bcc.n	800905a <quorem+0x9e>
 8008ff6:	f04f 0e00 	mov.w	lr, #0
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	46ac      	mov	ip, r5
 8008ffe:	46f2      	mov	sl, lr
 8009000:	f850 2b04 	ldr.w	r2, [r0], #4
 8009004:	b293      	uxth	r3, r2
 8009006:	fb06 e303 	mla	r3, r6, r3, lr
 800900a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800900e:	b29b      	uxth	r3, r3
 8009010:	ebaa 0303 	sub.w	r3, sl, r3
 8009014:	0c12      	lsrs	r2, r2, #16
 8009016:	f8dc a000 	ldr.w	sl, [ip]
 800901a:	fb06 e202 	mla	r2, r6, r2, lr
 800901e:	fa13 f38a 	uxtah	r3, r3, sl
 8009022:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009026:	fa1f fa82 	uxth.w	sl, r2
 800902a:	f8dc 2000 	ldr.w	r2, [ip]
 800902e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009032:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009036:	b29b      	uxth	r3, r3
 8009038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800903c:	4581      	cmp	r9, r0
 800903e:	f84c 3b04 	str.w	r3, [ip], #4
 8009042:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009046:	d2db      	bcs.n	8009000 <quorem+0x44>
 8009048:	f855 300b 	ldr.w	r3, [r5, fp]
 800904c:	b92b      	cbnz	r3, 800905a <quorem+0x9e>
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	3b04      	subs	r3, #4
 8009052:	429d      	cmp	r5, r3
 8009054:	461a      	mov	r2, r3
 8009056:	d32e      	bcc.n	80090b6 <quorem+0xfa>
 8009058:	613c      	str	r4, [r7, #16]
 800905a:	4638      	mov	r0, r7
 800905c:	f001 f8b2 	bl	800a1c4 <__mcmp>
 8009060:	2800      	cmp	r0, #0
 8009062:	db24      	blt.n	80090ae <quorem+0xf2>
 8009064:	3601      	adds	r6, #1
 8009066:	4628      	mov	r0, r5
 8009068:	f04f 0c00 	mov.w	ip, #0
 800906c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009070:	f8d0 e000 	ldr.w	lr, [r0]
 8009074:	b293      	uxth	r3, r2
 8009076:	ebac 0303 	sub.w	r3, ip, r3
 800907a:	0c12      	lsrs	r2, r2, #16
 800907c:	fa13 f38e 	uxtah	r3, r3, lr
 8009080:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009088:	b29b      	uxth	r3, r3
 800908a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800908e:	45c1      	cmp	r9, r8
 8009090:	f840 3b04 	str.w	r3, [r0], #4
 8009094:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009098:	d2e8      	bcs.n	800906c <quorem+0xb0>
 800909a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800909e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090a2:	b922      	cbnz	r2, 80090ae <quorem+0xf2>
 80090a4:	3b04      	subs	r3, #4
 80090a6:	429d      	cmp	r5, r3
 80090a8:	461a      	mov	r2, r3
 80090aa:	d30a      	bcc.n	80090c2 <quorem+0x106>
 80090ac:	613c      	str	r4, [r7, #16]
 80090ae:	4630      	mov	r0, r6
 80090b0:	b003      	add	sp, #12
 80090b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b6:	6812      	ldr	r2, [r2, #0]
 80090b8:	3b04      	subs	r3, #4
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	d1cc      	bne.n	8009058 <quorem+0x9c>
 80090be:	3c01      	subs	r4, #1
 80090c0:	e7c7      	b.n	8009052 <quorem+0x96>
 80090c2:	6812      	ldr	r2, [r2, #0]
 80090c4:	3b04      	subs	r3, #4
 80090c6:	2a00      	cmp	r2, #0
 80090c8:	d1f0      	bne.n	80090ac <quorem+0xf0>
 80090ca:	3c01      	subs	r4, #1
 80090cc:	e7eb      	b.n	80090a6 <quorem+0xea>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e7ee      	b.n	80090b0 <quorem+0xf4>
 80090d2:	0000      	movs	r0, r0
 80090d4:	0000      	movs	r0, r0
	...

080090d8 <_dtoa_r>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	ed2d 8b02 	vpush	{d8}
 80090e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090e2:	b095      	sub	sp, #84	; 0x54
 80090e4:	4616      	mov	r6, r2
 80090e6:	461f      	mov	r7, r3
 80090e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80090ec:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 80090f0:	4604      	mov	r4, r0
 80090f2:	b975      	cbnz	r5, 8009112 <_dtoa_r+0x3a>
 80090f4:	2010      	movs	r0, #16
 80090f6:	f000 fddf 	bl	8009cb8 <malloc>
 80090fa:	4602      	mov	r2, r0
 80090fc:	6260      	str	r0, [r4, #36]	; 0x24
 80090fe:	b920      	cbnz	r0, 800910a <_dtoa_r+0x32>
 8009100:	4bb1      	ldr	r3, [pc, #708]	; (80093c8 <_dtoa_r+0x2f0>)
 8009102:	21ea      	movs	r1, #234	; 0xea
 8009104:	48b1      	ldr	r0, [pc, #708]	; (80093cc <_dtoa_r+0x2f4>)
 8009106:	f001 fb81 	bl	800a80c <__assert_func>
 800910a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800910e:	6005      	str	r5, [r0, #0]
 8009110:	60c5      	str	r5, [r0, #12]
 8009112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009114:	6819      	ldr	r1, [r3, #0]
 8009116:	b151      	cbz	r1, 800912e <_dtoa_r+0x56>
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	604a      	str	r2, [r1, #4]
 800911c:	2301      	movs	r3, #1
 800911e:	4093      	lsls	r3, r2
 8009120:	608b      	str	r3, [r1, #8]
 8009122:	4620      	mov	r0, r4
 8009124:	f000 fe10 	bl	8009d48 <_Bfree>
 8009128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800912a:	2200      	movs	r2, #0
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	1e3b      	subs	r3, r7, #0
 8009130:	bfb9      	ittee	lt
 8009132:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009136:	9305      	strlt	r3, [sp, #20]
 8009138:	2300      	movge	r3, #0
 800913a:	f8c8 3000 	strge.w	r3, [r8]
 800913e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009142:	4ba3      	ldr	r3, [pc, #652]	; (80093d0 <_dtoa_r+0x2f8>)
 8009144:	bfbc      	itt	lt
 8009146:	2201      	movlt	r2, #1
 8009148:	f8c8 2000 	strlt.w	r2, [r8]
 800914c:	ea33 0309 	bics.w	r3, r3, r9
 8009150:	d11b      	bne.n	800918a <_dtoa_r+0xb2>
 8009152:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009154:	f242 730f 	movw	r3, #9999	; 0x270f
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800915e:	4333      	orrs	r3, r6
 8009160:	f000 857d 	beq.w	8009c5e <_dtoa_r+0xb86>
 8009164:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009166:	b963      	cbnz	r3, 8009182 <_dtoa_r+0xaa>
 8009168:	4b9a      	ldr	r3, [pc, #616]	; (80093d4 <_dtoa_r+0x2fc>)
 800916a:	e024      	b.n	80091b6 <_dtoa_r+0xde>
 800916c:	4b9a      	ldr	r3, [pc, #616]	; (80093d8 <_dtoa_r+0x300>)
 800916e:	9303      	str	r3, [sp, #12]
 8009170:	3308      	adds	r3, #8
 8009172:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	9803      	ldr	r0, [sp, #12]
 8009178:	b015      	add	sp, #84	; 0x54
 800917a:	ecbd 8b02 	vpop	{d8}
 800917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009182:	4b94      	ldr	r3, [pc, #592]	; (80093d4 <_dtoa_r+0x2fc>)
 8009184:	9303      	str	r3, [sp, #12]
 8009186:	3303      	adds	r3, #3
 8009188:	e7f3      	b.n	8009172 <_dtoa_r+0x9a>
 800918a:	ed9d 7b04 	vldr	d7, [sp, #16]
 800918e:	2200      	movs	r2, #0
 8009190:	ec51 0b17 	vmov	r0, r1, d7
 8009194:	2300      	movs	r3, #0
 8009196:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800919a:	f7f7 fcf5 	bl	8000b88 <__aeabi_dcmpeq>
 800919e:	4680      	mov	r8, r0
 80091a0:	b158      	cbz	r0, 80091ba <_dtoa_r+0xe2>
 80091a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80091a4:	2301      	movs	r3, #1
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 8554 	beq.w	8009c58 <_dtoa_r+0xb80>
 80091b0:	488a      	ldr	r0, [pc, #552]	; (80093dc <_dtoa_r+0x304>)
 80091b2:	6018      	str	r0, [r3, #0]
 80091b4:	1e43      	subs	r3, r0, #1
 80091b6:	9303      	str	r3, [sp, #12]
 80091b8:	e7dd      	b.n	8009176 <_dtoa_r+0x9e>
 80091ba:	ab12      	add	r3, sp, #72	; 0x48
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	ab13      	add	r3, sp, #76	; 0x4c
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	4620      	mov	r0, r4
 80091c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091c8:	f001 f8a0 	bl	800a30c <__d2b>
 80091cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091d0:	4683      	mov	fp, r0
 80091d2:	2d00      	cmp	r5, #0
 80091d4:	d07c      	beq.n	80092d0 <_dtoa_r+0x1f8>
 80091d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091d8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80091dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091e0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80091e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80091e8:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80091ec:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091f0:	4b7b      	ldr	r3, [pc, #492]	; (80093e0 <_dtoa_r+0x308>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f7 f8a6 	bl	8000348 <__aeabi_dsub>
 80091fc:	a36c      	add	r3, pc, #432	; (adr r3, 80093b0 <_dtoa_r+0x2d8>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	f7f7 fa59 	bl	80006b8 <__aeabi_dmul>
 8009206:	a36c      	add	r3, pc, #432	; (adr r3, 80093b8 <_dtoa_r+0x2e0>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	f7f7 f89e 	bl	800034c <__adddf3>
 8009210:	4606      	mov	r6, r0
 8009212:	4628      	mov	r0, r5
 8009214:	460f      	mov	r7, r1
 8009216:	f7f7 f9e5 	bl	80005e4 <__aeabi_i2d>
 800921a:	a369      	add	r3, pc, #420	; (adr r3, 80093c0 <_dtoa_r+0x2e8>)
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	f7f7 fa4a 	bl	80006b8 <__aeabi_dmul>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	4630      	mov	r0, r6
 800922a:	4639      	mov	r1, r7
 800922c:	f7f7 f88e 	bl	800034c <__adddf3>
 8009230:	4606      	mov	r6, r0
 8009232:	460f      	mov	r7, r1
 8009234:	f7f7 fcf0 	bl	8000c18 <__aeabi_d2iz>
 8009238:	2200      	movs	r2, #0
 800923a:	4682      	mov	sl, r0
 800923c:	2300      	movs	r3, #0
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	f7f7 fcab 	bl	8000b9c <__aeabi_dcmplt>
 8009246:	b148      	cbz	r0, 800925c <_dtoa_r+0x184>
 8009248:	4650      	mov	r0, sl
 800924a:	f7f7 f9cb 	bl	80005e4 <__aeabi_i2d>
 800924e:	4632      	mov	r2, r6
 8009250:	463b      	mov	r3, r7
 8009252:	f7f7 fc99 	bl	8000b88 <__aeabi_dcmpeq>
 8009256:	b908      	cbnz	r0, 800925c <_dtoa_r+0x184>
 8009258:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800925c:	f1ba 0f16 	cmp.w	sl, #22
 8009260:	d854      	bhi.n	800930c <_dtoa_r+0x234>
 8009262:	4b60      	ldr	r3, [pc, #384]	; (80093e4 <_dtoa_r+0x30c>)
 8009264:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009270:	f7f7 fc94 	bl	8000b9c <__aeabi_dcmplt>
 8009274:	2800      	cmp	r0, #0
 8009276:	d04b      	beq.n	8009310 <_dtoa_r+0x238>
 8009278:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800927c:	2300      	movs	r3, #0
 800927e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009280:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009282:	1b5d      	subs	r5, r3, r5
 8009284:	1e6b      	subs	r3, r5, #1
 8009286:	9307      	str	r3, [sp, #28]
 8009288:	bf43      	ittte	mi
 800928a:	2300      	movmi	r3, #0
 800928c:	f1c5 0801 	rsbmi	r8, r5, #1
 8009290:	9307      	strmi	r3, [sp, #28]
 8009292:	f04f 0800 	movpl.w	r8, #0
 8009296:	f1ba 0f00 	cmp.w	sl, #0
 800929a:	db3b      	blt.n	8009314 <_dtoa_r+0x23c>
 800929c:	9b07      	ldr	r3, [sp, #28]
 800929e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80092a2:	4453      	add	r3, sl
 80092a4:	9307      	str	r3, [sp, #28]
 80092a6:	2300      	movs	r3, #0
 80092a8:	9308      	str	r3, [sp, #32]
 80092aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80092ac:	2b09      	cmp	r3, #9
 80092ae:	d869      	bhi.n	8009384 <_dtoa_r+0x2ac>
 80092b0:	2b05      	cmp	r3, #5
 80092b2:	bfc4      	itt	gt
 80092b4:	3b04      	subgt	r3, #4
 80092b6:	9320      	strgt	r3, [sp, #128]	; 0x80
 80092b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80092ba:	f1a3 0302 	sub.w	r3, r3, #2
 80092be:	bfcc      	ite	gt
 80092c0:	2500      	movgt	r5, #0
 80092c2:	2501      	movle	r5, #1
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d869      	bhi.n	800939c <_dtoa_r+0x2c4>
 80092c8:	e8df f003 	tbb	[pc, r3]
 80092cc:	5a4c4e2c 	.word	0x5a4c4e2c
 80092d0:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80092d4:	441d      	add	r5, r3
 80092d6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092da:	2b20      	cmp	r3, #32
 80092dc:	bfc1      	itttt	gt
 80092de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092e2:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80092e6:	fa09 f303 	lslgt.w	r3, r9, r3
 80092ea:	fa26 f000 	lsrgt.w	r0, r6, r0
 80092ee:	bfda      	itte	le
 80092f0:	f1c3 0320 	rsble	r3, r3, #32
 80092f4:	fa06 f003 	lslle.w	r0, r6, r3
 80092f8:	4318      	orrgt	r0, r3
 80092fa:	f7f7 f963 	bl	80005c4 <__aeabi_ui2d>
 80092fe:	2301      	movs	r3, #1
 8009300:	4606      	mov	r6, r0
 8009302:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009306:	3d01      	subs	r5, #1
 8009308:	9310      	str	r3, [sp, #64]	; 0x40
 800930a:	e771      	b.n	80091f0 <_dtoa_r+0x118>
 800930c:	2301      	movs	r3, #1
 800930e:	e7b6      	b.n	800927e <_dtoa_r+0x1a6>
 8009310:	900f      	str	r0, [sp, #60]	; 0x3c
 8009312:	e7b5      	b.n	8009280 <_dtoa_r+0x1a8>
 8009314:	f1ca 0300 	rsb	r3, sl, #0
 8009318:	9308      	str	r3, [sp, #32]
 800931a:	2300      	movs	r3, #0
 800931c:	eba8 080a 	sub.w	r8, r8, sl
 8009320:	930e      	str	r3, [sp, #56]	; 0x38
 8009322:	e7c2      	b.n	80092aa <_dtoa_r+0x1d2>
 8009324:	2300      	movs	r3, #0
 8009326:	930c      	str	r3, [sp, #48]	; 0x30
 8009328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800932a:	2b00      	cmp	r3, #0
 800932c:	dc39      	bgt.n	80093a2 <_dtoa_r+0x2ca>
 800932e:	f04f 0901 	mov.w	r9, #1
 8009332:	f8cd 9018 	str.w	r9, [sp, #24]
 8009336:	464b      	mov	r3, r9
 8009338:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
 800933c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800933e:	2200      	movs	r2, #0
 8009340:	6042      	str	r2, [r0, #4]
 8009342:	2204      	movs	r2, #4
 8009344:	f102 0614 	add.w	r6, r2, #20
 8009348:	429e      	cmp	r6, r3
 800934a:	6841      	ldr	r1, [r0, #4]
 800934c:	d94e      	bls.n	80093ec <_dtoa_r+0x314>
 800934e:	4620      	mov	r0, r4
 8009350:	f000 fcba 	bl	8009cc8 <_Balloc>
 8009354:	9003      	str	r0, [sp, #12]
 8009356:	2800      	cmp	r0, #0
 8009358:	d14c      	bne.n	80093f4 <_dtoa_r+0x31c>
 800935a:	4b23      	ldr	r3, [pc, #140]	; (80093e8 <_dtoa_r+0x310>)
 800935c:	4602      	mov	r2, r0
 800935e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009362:	e6cf      	b.n	8009104 <_dtoa_r+0x2c>
 8009364:	2301      	movs	r3, #1
 8009366:	e7de      	b.n	8009326 <_dtoa_r+0x24e>
 8009368:	2300      	movs	r3, #0
 800936a:	930c      	str	r3, [sp, #48]	; 0x30
 800936c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800936e:	eb0a 0903 	add.w	r9, sl, r3
 8009372:	f109 0301 	add.w	r3, r9, #1
 8009376:	2b01      	cmp	r3, #1
 8009378:	9306      	str	r3, [sp, #24]
 800937a:	bfb8      	it	lt
 800937c:	2301      	movlt	r3, #1
 800937e:	e7dd      	b.n	800933c <_dtoa_r+0x264>
 8009380:	2301      	movs	r3, #1
 8009382:	e7f2      	b.n	800936a <_dtoa_r+0x292>
 8009384:	2501      	movs	r5, #1
 8009386:	2300      	movs	r3, #0
 8009388:	9320      	str	r3, [sp, #128]	; 0x80
 800938a:	950c      	str	r5, [sp, #48]	; 0x30
 800938c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009390:	2200      	movs	r2, #0
 8009392:	f8cd 9018 	str.w	r9, [sp, #24]
 8009396:	2312      	movs	r3, #18
 8009398:	9221      	str	r2, [sp, #132]	; 0x84
 800939a:	e7cf      	b.n	800933c <_dtoa_r+0x264>
 800939c:	2301      	movs	r3, #1
 800939e:	930c      	str	r3, [sp, #48]	; 0x30
 80093a0:	e7f4      	b.n	800938c <_dtoa_r+0x2b4>
 80093a2:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 80093a6:	f8cd 9018 	str.w	r9, [sp, #24]
 80093aa:	464b      	mov	r3, r9
 80093ac:	e7c6      	b.n	800933c <_dtoa_r+0x264>
 80093ae:	bf00      	nop
 80093b0:	636f4361 	.word	0x636f4361
 80093b4:	3fd287a7 	.word	0x3fd287a7
 80093b8:	8b60c8b3 	.word	0x8b60c8b3
 80093bc:	3fc68a28 	.word	0x3fc68a28
 80093c0:	509f79fb 	.word	0x509f79fb
 80093c4:	3fd34413 	.word	0x3fd34413
 80093c8:	0800b985 	.word	0x0800b985
 80093cc:	0800b99c 	.word	0x0800b99c
 80093d0:	7ff00000 	.word	0x7ff00000
 80093d4:	0800b981 	.word	0x0800b981
 80093d8:	0800b978 	.word	0x0800b978
 80093dc:	0800b955 	.word	0x0800b955
 80093e0:	3ff80000 	.word	0x3ff80000
 80093e4:	0800ba98 	.word	0x0800ba98
 80093e8:	0800b9fb 	.word	0x0800b9fb
 80093ec:	3101      	adds	r1, #1
 80093ee:	6041      	str	r1, [r0, #4]
 80093f0:	0052      	lsls	r2, r2, #1
 80093f2:	e7a7      	b.n	8009344 <_dtoa_r+0x26c>
 80093f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093f6:	9a03      	ldr	r2, [sp, #12]
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	9b06      	ldr	r3, [sp, #24]
 80093fc:	2b0e      	cmp	r3, #14
 80093fe:	f200 80ad 	bhi.w	800955c <_dtoa_r+0x484>
 8009402:	2d00      	cmp	r5, #0
 8009404:	f000 80aa 	beq.w	800955c <_dtoa_r+0x484>
 8009408:	f1ba 0f00 	cmp.w	sl, #0
 800940c:	dd36      	ble.n	800947c <_dtoa_r+0x3a4>
 800940e:	4ac3      	ldr	r2, [pc, #780]	; (800971c <_dtoa_r+0x644>)
 8009410:	f00a 030f 	and.w	r3, sl, #15
 8009414:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009418:	ed93 7b00 	vldr	d7, [r3]
 800941c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009420:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009424:	eeb0 8a47 	vmov.f32	s16, s14
 8009428:	eef0 8a67 	vmov.f32	s17, s15
 800942c:	d016      	beq.n	800945c <_dtoa_r+0x384>
 800942e:	4bbc      	ldr	r3, [pc, #752]	; (8009720 <_dtoa_r+0x648>)
 8009430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009438:	f7f7 fa68 	bl	800090c <__aeabi_ddiv>
 800943c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009440:	f007 070f 	and.w	r7, r7, #15
 8009444:	2503      	movs	r5, #3
 8009446:	4eb6      	ldr	r6, [pc, #728]	; (8009720 <_dtoa_r+0x648>)
 8009448:	b957      	cbnz	r7, 8009460 <_dtoa_r+0x388>
 800944a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800944e:	ec53 2b18 	vmov	r2, r3, d8
 8009452:	f7f7 fa5b 	bl	800090c <__aeabi_ddiv>
 8009456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800945a:	e029      	b.n	80094b0 <_dtoa_r+0x3d8>
 800945c:	2502      	movs	r5, #2
 800945e:	e7f2      	b.n	8009446 <_dtoa_r+0x36e>
 8009460:	07f9      	lsls	r1, r7, #31
 8009462:	d508      	bpl.n	8009476 <_dtoa_r+0x39e>
 8009464:	ec51 0b18 	vmov	r0, r1, d8
 8009468:	e9d6 2300 	ldrd	r2, r3, [r6]
 800946c:	f7f7 f924 	bl	80006b8 <__aeabi_dmul>
 8009470:	ec41 0b18 	vmov	d8, r0, r1
 8009474:	3501      	adds	r5, #1
 8009476:	107f      	asrs	r7, r7, #1
 8009478:	3608      	adds	r6, #8
 800947a:	e7e5      	b.n	8009448 <_dtoa_r+0x370>
 800947c:	f000 80a6 	beq.w	80095cc <_dtoa_r+0x4f4>
 8009480:	f1ca 0600 	rsb	r6, sl, #0
 8009484:	4ba5      	ldr	r3, [pc, #660]	; (800971c <_dtoa_r+0x644>)
 8009486:	4fa6      	ldr	r7, [pc, #664]	; (8009720 <_dtoa_r+0x648>)
 8009488:	f006 020f 	and.w	r2, r6, #15
 800948c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009498:	f7f7 f90e 	bl	80006b8 <__aeabi_dmul>
 800949c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094a0:	1136      	asrs	r6, r6, #4
 80094a2:	2300      	movs	r3, #0
 80094a4:	2502      	movs	r5, #2
 80094a6:	2e00      	cmp	r6, #0
 80094a8:	f040 8085 	bne.w	80095b6 <_dtoa_r+0x4de>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1d2      	bne.n	8009456 <_dtoa_r+0x37e>
 80094b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 808c 	beq.w	80095d0 <_dtoa_r+0x4f8>
 80094b8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80094bc:	4b99      	ldr	r3, [pc, #612]	; (8009724 <_dtoa_r+0x64c>)
 80094be:	2200      	movs	r2, #0
 80094c0:	4630      	mov	r0, r6
 80094c2:	4639      	mov	r1, r7
 80094c4:	f7f7 fb6a 	bl	8000b9c <__aeabi_dcmplt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f000 8081 	beq.w	80095d0 <_dtoa_r+0x4f8>
 80094ce:	9b06      	ldr	r3, [sp, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d07d      	beq.n	80095d0 <_dtoa_r+0x4f8>
 80094d4:	f1b9 0f00 	cmp.w	r9, #0
 80094d8:	dd3c      	ble.n	8009554 <_dtoa_r+0x47c>
 80094da:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80094de:	9309      	str	r3, [sp, #36]	; 0x24
 80094e0:	2200      	movs	r2, #0
 80094e2:	4b91      	ldr	r3, [pc, #580]	; (8009728 <_dtoa_r+0x650>)
 80094e4:	4630      	mov	r0, r6
 80094e6:	4639      	mov	r1, r7
 80094e8:	f7f7 f8e6 	bl	80006b8 <__aeabi_dmul>
 80094ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094f0:	3501      	adds	r5, #1
 80094f2:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80094f6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80094fa:	4628      	mov	r0, r5
 80094fc:	f7f7 f872 	bl	80005e4 <__aeabi_i2d>
 8009500:	4632      	mov	r2, r6
 8009502:	463b      	mov	r3, r7
 8009504:	f7f7 f8d8 	bl	80006b8 <__aeabi_dmul>
 8009508:	4b88      	ldr	r3, [pc, #544]	; (800972c <_dtoa_r+0x654>)
 800950a:	2200      	movs	r2, #0
 800950c:	f7f6 ff1e 	bl	800034c <__adddf3>
 8009510:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009518:	9305      	str	r3, [sp, #20]
 800951a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800951c:	2b00      	cmp	r3, #0
 800951e:	d15c      	bne.n	80095da <_dtoa_r+0x502>
 8009520:	4b83      	ldr	r3, [pc, #524]	; (8009730 <_dtoa_r+0x658>)
 8009522:	2200      	movs	r2, #0
 8009524:	4630      	mov	r0, r6
 8009526:	4639      	mov	r1, r7
 8009528:	f7f6 ff0e 	bl	8000348 <__aeabi_dsub>
 800952c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009530:	4606      	mov	r6, r0
 8009532:	460f      	mov	r7, r1
 8009534:	f7f7 fb50 	bl	8000bd8 <__aeabi_dcmpgt>
 8009538:	2800      	cmp	r0, #0
 800953a:	f040 8296 	bne.w	8009a6a <_dtoa_r+0x992>
 800953e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009542:	4630      	mov	r0, r6
 8009544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009548:	4639      	mov	r1, r7
 800954a:	f7f7 fb27 	bl	8000b9c <__aeabi_dcmplt>
 800954e:	2800      	cmp	r0, #0
 8009550:	f040 8288 	bne.w	8009a64 <_dtoa_r+0x98c>
 8009554:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009558:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800955c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800955e:	2b00      	cmp	r3, #0
 8009560:	f2c0 8158 	blt.w	8009814 <_dtoa_r+0x73c>
 8009564:	f1ba 0f0e 	cmp.w	sl, #14
 8009568:	f300 8154 	bgt.w	8009814 <_dtoa_r+0x73c>
 800956c:	4b6b      	ldr	r3, [pc, #428]	; (800971c <_dtoa_r+0x644>)
 800956e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009572:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009578:	2b00      	cmp	r3, #0
 800957a:	f280 80e3 	bge.w	8009744 <_dtoa_r+0x66c>
 800957e:	9b06      	ldr	r3, [sp, #24]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f300 80df 	bgt.w	8009744 <_dtoa_r+0x66c>
 8009586:	f040 826d 	bne.w	8009a64 <_dtoa_r+0x98c>
 800958a:	4b69      	ldr	r3, [pc, #420]	; (8009730 <_dtoa_r+0x658>)
 800958c:	2200      	movs	r2, #0
 800958e:	4640      	mov	r0, r8
 8009590:	4649      	mov	r1, r9
 8009592:	f7f7 f891 	bl	80006b8 <__aeabi_dmul>
 8009596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800959a:	f7f7 fb13 	bl	8000bc4 <__aeabi_dcmpge>
 800959e:	9e06      	ldr	r6, [sp, #24]
 80095a0:	4637      	mov	r7, r6
 80095a2:	2800      	cmp	r0, #0
 80095a4:	f040 8243 	bne.w	8009a2e <_dtoa_r+0x956>
 80095a8:	9d03      	ldr	r5, [sp, #12]
 80095aa:	2331      	movs	r3, #49	; 0x31
 80095ac:	f805 3b01 	strb.w	r3, [r5], #1
 80095b0:	f10a 0a01 	add.w	sl, sl, #1
 80095b4:	e23f      	b.n	8009a36 <_dtoa_r+0x95e>
 80095b6:	07f2      	lsls	r2, r6, #31
 80095b8:	d505      	bpl.n	80095c6 <_dtoa_r+0x4ee>
 80095ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095be:	f7f7 f87b 	bl	80006b8 <__aeabi_dmul>
 80095c2:	3501      	adds	r5, #1
 80095c4:	2301      	movs	r3, #1
 80095c6:	1076      	asrs	r6, r6, #1
 80095c8:	3708      	adds	r7, #8
 80095ca:	e76c      	b.n	80094a6 <_dtoa_r+0x3ce>
 80095cc:	2502      	movs	r5, #2
 80095ce:	e76f      	b.n	80094b0 <_dtoa_r+0x3d8>
 80095d0:	9b06      	ldr	r3, [sp, #24]
 80095d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80095d6:	930d      	str	r3, [sp, #52]	; 0x34
 80095d8:	e78d      	b.n	80094f6 <_dtoa_r+0x41e>
 80095da:	9903      	ldr	r1, [sp, #12]
 80095dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80095de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095e0:	4b4e      	ldr	r3, [pc, #312]	; (800971c <_dtoa_r+0x644>)
 80095e2:	ed9d 7b04 	vldr	d7, [sp, #16]
 80095e6:	4401      	add	r1, r0
 80095e8:	9104      	str	r1, [sp, #16]
 80095ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80095ec:	eeb0 8a47 	vmov.f32	s16, s14
 80095f0:	eef0 8a67 	vmov.f32	s17, s15
 80095f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095fc:	2900      	cmp	r1, #0
 80095fe:	d045      	beq.n	800968c <_dtoa_r+0x5b4>
 8009600:	494c      	ldr	r1, [pc, #304]	; (8009734 <_dtoa_r+0x65c>)
 8009602:	2000      	movs	r0, #0
 8009604:	f7f7 f982 	bl	800090c <__aeabi_ddiv>
 8009608:	ec53 2b18 	vmov	r2, r3, d8
 800960c:	f7f6 fe9c 	bl	8000348 <__aeabi_dsub>
 8009610:	9d03      	ldr	r5, [sp, #12]
 8009612:	ec41 0b18 	vmov	d8, r0, r1
 8009616:	4639      	mov	r1, r7
 8009618:	4630      	mov	r0, r6
 800961a:	f7f7 fafd 	bl	8000c18 <__aeabi_d2iz>
 800961e:	900d      	str	r0, [sp, #52]	; 0x34
 8009620:	f7f6 ffe0 	bl	80005e4 <__aeabi_i2d>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4630      	mov	r0, r6
 800962a:	4639      	mov	r1, r7
 800962c:	f7f6 fe8c 	bl	8000348 <__aeabi_dsub>
 8009630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009632:	3330      	adds	r3, #48	; 0x30
 8009634:	f805 3b01 	strb.w	r3, [r5], #1
 8009638:	ec53 2b18 	vmov	r2, r3, d8
 800963c:	4606      	mov	r6, r0
 800963e:	460f      	mov	r7, r1
 8009640:	f7f7 faac 	bl	8000b9c <__aeabi_dcmplt>
 8009644:	2800      	cmp	r0, #0
 8009646:	d165      	bne.n	8009714 <_dtoa_r+0x63c>
 8009648:	4632      	mov	r2, r6
 800964a:	463b      	mov	r3, r7
 800964c:	4935      	ldr	r1, [pc, #212]	; (8009724 <_dtoa_r+0x64c>)
 800964e:	2000      	movs	r0, #0
 8009650:	f7f6 fe7a 	bl	8000348 <__aeabi_dsub>
 8009654:	ec53 2b18 	vmov	r2, r3, d8
 8009658:	f7f7 faa0 	bl	8000b9c <__aeabi_dcmplt>
 800965c:	2800      	cmp	r0, #0
 800965e:	f040 80b9 	bne.w	80097d4 <_dtoa_r+0x6fc>
 8009662:	9b04      	ldr	r3, [sp, #16]
 8009664:	429d      	cmp	r5, r3
 8009666:	f43f af75 	beq.w	8009554 <_dtoa_r+0x47c>
 800966a:	4b2f      	ldr	r3, [pc, #188]	; (8009728 <_dtoa_r+0x650>)
 800966c:	ec51 0b18 	vmov	r0, r1, d8
 8009670:	2200      	movs	r2, #0
 8009672:	f7f7 f821 	bl	80006b8 <__aeabi_dmul>
 8009676:	4b2c      	ldr	r3, [pc, #176]	; (8009728 <_dtoa_r+0x650>)
 8009678:	ec41 0b18 	vmov	d8, r0, r1
 800967c:	2200      	movs	r2, #0
 800967e:	4630      	mov	r0, r6
 8009680:	4639      	mov	r1, r7
 8009682:	f7f7 f819 	bl	80006b8 <__aeabi_dmul>
 8009686:	4606      	mov	r6, r0
 8009688:	460f      	mov	r7, r1
 800968a:	e7c4      	b.n	8009616 <_dtoa_r+0x53e>
 800968c:	ec51 0b17 	vmov	r0, r1, d7
 8009690:	f7f7 f812 	bl	80006b8 <__aeabi_dmul>
 8009694:	9b04      	ldr	r3, [sp, #16]
 8009696:	9d03      	ldr	r5, [sp, #12]
 8009698:	930d      	str	r3, [sp, #52]	; 0x34
 800969a:	ec41 0b18 	vmov	d8, r0, r1
 800969e:	4639      	mov	r1, r7
 80096a0:	4630      	mov	r0, r6
 80096a2:	f7f7 fab9 	bl	8000c18 <__aeabi_d2iz>
 80096a6:	9011      	str	r0, [sp, #68]	; 0x44
 80096a8:	f7f6 ff9c 	bl	80005e4 <__aeabi_i2d>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4630      	mov	r0, r6
 80096b2:	4639      	mov	r1, r7
 80096b4:	f7f6 fe48 	bl	8000348 <__aeabi_dsub>
 80096b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096ba:	3330      	adds	r3, #48	; 0x30
 80096bc:	f805 3b01 	strb.w	r3, [r5], #1
 80096c0:	9b04      	ldr	r3, [sp, #16]
 80096c2:	429d      	cmp	r5, r3
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	f04f 0200 	mov.w	r2, #0
 80096cc:	d134      	bne.n	8009738 <_dtoa_r+0x660>
 80096ce:	4b19      	ldr	r3, [pc, #100]	; (8009734 <_dtoa_r+0x65c>)
 80096d0:	ec51 0b18 	vmov	r0, r1, d8
 80096d4:	f7f6 fe3a 	bl	800034c <__adddf3>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4630      	mov	r0, r6
 80096de:	4639      	mov	r1, r7
 80096e0:	f7f7 fa7a 	bl	8000bd8 <__aeabi_dcmpgt>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d175      	bne.n	80097d4 <_dtoa_r+0x6fc>
 80096e8:	ec53 2b18 	vmov	r2, r3, d8
 80096ec:	4911      	ldr	r1, [pc, #68]	; (8009734 <_dtoa_r+0x65c>)
 80096ee:	2000      	movs	r0, #0
 80096f0:	f7f6 fe2a 	bl	8000348 <__aeabi_dsub>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f7 fa4e 	bl	8000b9c <__aeabi_dcmplt>
 8009700:	2800      	cmp	r0, #0
 8009702:	f43f af27 	beq.w	8009554 <_dtoa_r+0x47c>
 8009706:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009708:	1e6b      	subs	r3, r5, #1
 800970a:	930d      	str	r3, [sp, #52]	; 0x34
 800970c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009710:	2b30      	cmp	r3, #48	; 0x30
 8009712:	d0f8      	beq.n	8009706 <_dtoa_r+0x62e>
 8009714:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009718:	e04a      	b.n	80097b0 <_dtoa_r+0x6d8>
 800971a:	bf00      	nop
 800971c:	0800ba98 	.word	0x0800ba98
 8009720:	0800ba70 	.word	0x0800ba70
 8009724:	3ff00000 	.word	0x3ff00000
 8009728:	40240000 	.word	0x40240000
 800972c:	401c0000 	.word	0x401c0000
 8009730:	40140000 	.word	0x40140000
 8009734:	3fe00000 	.word	0x3fe00000
 8009738:	4baf      	ldr	r3, [pc, #700]	; (80099f8 <_dtoa_r+0x920>)
 800973a:	f7f6 ffbd 	bl	80006b8 <__aeabi_dmul>
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	e7ac      	b.n	800969e <_dtoa_r+0x5c6>
 8009744:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8009748:	9d03      	ldr	r5, [sp, #12]
 800974a:	4642      	mov	r2, r8
 800974c:	464b      	mov	r3, r9
 800974e:	4630      	mov	r0, r6
 8009750:	4639      	mov	r1, r7
 8009752:	f7f7 f8db 	bl	800090c <__aeabi_ddiv>
 8009756:	f7f7 fa5f 	bl	8000c18 <__aeabi_d2iz>
 800975a:	9004      	str	r0, [sp, #16]
 800975c:	f7f6 ff42 	bl	80005e4 <__aeabi_i2d>
 8009760:	4642      	mov	r2, r8
 8009762:	464b      	mov	r3, r9
 8009764:	f7f6 ffa8 	bl	80006b8 <__aeabi_dmul>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4630      	mov	r0, r6
 800976e:	4639      	mov	r1, r7
 8009770:	f7f6 fdea 	bl	8000348 <__aeabi_dsub>
 8009774:	9e04      	ldr	r6, [sp, #16]
 8009776:	9f06      	ldr	r7, [sp, #24]
 8009778:	3630      	adds	r6, #48	; 0x30
 800977a:	f805 6b01 	strb.w	r6, [r5], #1
 800977e:	9e03      	ldr	r6, [sp, #12]
 8009780:	1bae      	subs	r6, r5, r6
 8009782:	42b7      	cmp	r7, r6
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	d137      	bne.n	80097fa <_dtoa_r+0x722>
 800978a:	f7f6 fddf 	bl	800034c <__adddf3>
 800978e:	4642      	mov	r2, r8
 8009790:	464b      	mov	r3, r9
 8009792:	4606      	mov	r6, r0
 8009794:	460f      	mov	r7, r1
 8009796:	f7f7 fa1f 	bl	8000bd8 <__aeabi_dcmpgt>
 800979a:	b9c8      	cbnz	r0, 80097d0 <_dtoa_r+0x6f8>
 800979c:	4642      	mov	r2, r8
 800979e:	464b      	mov	r3, r9
 80097a0:	4630      	mov	r0, r6
 80097a2:	4639      	mov	r1, r7
 80097a4:	f7f7 f9f0 	bl	8000b88 <__aeabi_dcmpeq>
 80097a8:	b110      	cbz	r0, 80097b0 <_dtoa_r+0x6d8>
 80097aa:	9b04      	ldr	r3, [sp, #16]
 80097ac:	07d9      	lsls	r1, r3, #31
 80097ae:	d40f      	bmi.n	80097d0 <_dtoa_r+0x6f8>
 80097b0:	4620      	mov	r0, r4
 80097b2:	4659      	mov	r1, fp
 80097b4:	f000 fac8 	bl	8009d48 <_Bfree>
 80097b8:	2300      	movs	r3, #0
 80097ba:	702b      	strb	r3, [r5, #0]
 80097bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097be:	f10a 0001 	add.w	r0, sl, #1
 80097c2:	6018      	str	r0, [r3, #0]
 80097c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f43f acd5 	beq.w	8009176 <_dtoa_r+0x9e>
 80097cc:	601d      	str	r5, [r3, #0]
 80097ce:	e4d2      	b.n	8009176 <_dtoa_r+0x9e>
 80097d0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80097d4:	462b      	mov	r3, r5
 80097d6:	461d      	mov	r5, r3
 80097d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097dc:	2a39      	cmp	r2, #57	; 0x39
 80097de:	d108      	bne.n	80097f2 <_dtoa_r+0x71a>
 80097e0:	9a03      	ldr	r2, [sp, #12]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d1f7      	bne.n	80097d6 <_dtoa_r+0x6fe>
 80097e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097e8:	9903      	ldr	r1, [sp, #12]
 80097ea:	3201      	adds	r2, #1
 80097ec:	9209      	str	r2, [sp, #36]	; 0x24
 80097ee:	2230      	movs	r2, #48	; 0x30
 80097f0:	700a      	strb	r2, [r1, #0]
 80097f2:	781a      	ldrb	r2, [r3, #0]
 80097f4:	3201      	adds	r2, #1
 80097f6:	701a      	strb	r2, [r3, #0]
 80097f8:	e78c      	b.n	8009714 <_dtoa_r+0x63c>
 80097fa:	4b7f      	ldr	r3, [pc, #508]	; (80099f8 <_dtoa_r+0x920>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	f7f6 ff5b 	bl	80006b8 <__aeabi_dmul>
 8009802:	2200      	movs	r2, #0
 8009804:	2300      	movs	r3, #0
 8009806:	4606      	mov	r6, r0
 8009808:	460f      	mov	r7, r1
 800980a:	f7f7 f9bd 	bl	8000b88 <__aeabi_dcmpeq>
 800980e:	2800      	cmp	r0, #0
 8009810:	d09b      	beq.n	800974a <_dtoa_r+0x672>
 8009812:	e7cd      	b.n	80097b0 <_dtoa_r+0x6d8>
 8009814:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009816:	2a00      	cmp	r2, #0
 8009818:	f000 80c4 	beq.w	80099a4 <_dtoa_r+0x8cc>
 800981c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800981e:	2a01      	cmp	r2, #1
 8009820:	f300 80a8 	bgt.w	8009974 <_dtoa_r+0x89c>
 8009824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009826:	2a00      	cmp	r2, #0
 8009828:	f000 80a0 	beq.w	800996c <_dtoa_r+0x894>
 800982c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009830:	9e08      	ldr	r6, [sp, #32]
 8009832:	4645      	mov	r5, r8
 8009834:	9a07      	ldr	r2, [sp, #28]
 8009836:	2101      	movs	r1, #1
 8009838:	441a      	add	r2, r3
 800983a:	4620      	mov	r0, r4
 800983c:	4498      	add	r8, r3
 800983e:	9207      	str	r2, [sp, #28]
 8009840:	f000 fb3e 	bl	8009ec0 <__i2b>
 8009844:	4607      	mov	r7, r0
 8009846:	2d00      	cmp	r5, #0
 8009848:	dd0b      	ble.n	8009862 <_dtoa_r+0x78a>
 800984a:	9b07      	ldr	r3, [sp, #28]
 800984c:	2b00      	cmp	r3, #0
 800984e:	dd08      	ble.n	8009862 <_dtoa_r+0x78a>
 8009850:	42ab      	cmp	r3, r5
 8009852:	9a07      	ldr	r2, [sp, #28]
 8009854:	bfa8      	it	ge
 8009856:	462b      	movge	r3, r5
 8009858:	eba8 0803 	sub.w	r8, r8, r3
 800985c:	1aed      	subs	r5, r5, r3
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	9307      	str	r3, [sp, #28]
 8009862:	9b08      	ldr	r3, [sp, #32]
 8009864:	b1fb      	cbz	r3, 80098a6 <_dtoa_r+0x7ce>
 8009866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 809f 	beq.w	80099ac <_dtoa_r+0x8d4>
 800986e:	2e00      	cmp	r6, #0
 8009870:	dd11      	ble.n	8009896 <_dtoa_r+0x7be>
 8009872:	4639      	mov	r1, r7
 8009874:	4632      	mov	r2, r6
 8009876:	4620      	mov	r0, r4
 8009878:	f000 fbde 	bl	800a038 <__pow5mult>
 800987c:	465a      	mov	r2, fp
 800987e:	4601      	mov	r1, r0
 8009880:	4607      	mov	r7, r0
 8009882:	4620      	mov	r0, r4
 8009884:	f000 fb32 	bl	8009eec <__multiply>
 8009888:	4659      	mov	r1, fp
 800988a:	9009      	str	r0, [sp, #36]	; 0x24
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fa5b 	bl	8009d48 <_Bfree>
 8009892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009894:	469b      	mov	fp, r3
 8009896:	9b08      	ldr	r3, [sp, #32]
 8009898:	1b9a      	subs	r2, r3, r6
 800989a:	d004      	beq.n	80098a6 <_dtoa_r+0x7ce>
 800989c:	4659      	mov	r1, fp
 800989e:	4620      	mov	r0, r4
 80098a0:	f000 fbca 	bl	800a038 <__pow5mult>
 80098a4:	4683      	mov	fp, r0
 80098a6:	2101      	movs	r1, #1
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fb09 	bl	8009ec0 <__i2b>
 80098ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	4606      	mov	r6, r0
 80098b4:	dd7c      	ble.n	80099b0 <_dtoa_r+0x8d8>
 80098b6:	461a      	mov	r2, r3
 80098b8:	4601      	mov	r1, r0
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 fbbc 	bl	800a038 <__pow5mult>
 80098c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	4606      	mov	r6, r0
 80098c6:	dd76      	ble.n	80099b6 <_dtoa_r+0x8de>
 80098c8:	2300      	movs	r3, #0
 80098ca:	9308      	str	r3, [sp, #32]
 80098cc:	6933      	ldr	r3, [r6, #16]
 80098ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098d2:	6918      	ldr	r0, [r3, #16]
 80098d4:	f000 faa4 	bl	8009e20 <__hi0bits>
 80098d8:	f1c0 0020 	rsb	r0, r0, #32
 80098dc:	9b07      	ldr	r3, [sp, #28]
 80098de:	4418      	add	r0, r3
 80098e0:	f010 001f 	ands.w	r0, r0, #31
 80098e4:	f000 8086 	beq.w	80099f4 <_dtoa_r+0x91c>
 80098e8:	f1c0 0320 	rsb	r3, r0, #32
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	dd7f      	ble.n	80099f0 <_dtoa_r+0x918>
 80098f0:	f1c0 001c 	rsb	r0, r0, #28
 80098f4:	9b07      	ldr	r3, [sp, #28]
 80098f6:	4403      	add	r3, r0
 80098f8:	4480      	add	r8, r0
 80098fa:	4405      	add	r5, r0
 80098fc:	9307      	str	r3, [sp, #28]
 80098fe:	f1b8 0f00 	cmp.w	r8, #0
 8009902:	dd05      	ble.n	8009910 <_dtoa_r+0x838>
 8009904:	4659      	mov	r1, fp
 8009906:	4642      	mov	r2, r8
 8009908:	4620      	mov	r0, r4
 800990a:	f000 fbef 	bl	800a0ec <__lshift>
 800990e:	4683      	mov	fp, r0
 8009910:	9b07      	ldr	r3, [sp, #28]
 8009912:	2b00      	cmp	r3, #0
 8009914:	dd05      	ble.n	8009922 <_dtoa_r+0x84a>
 8009916:	4631      	mov	r1, r6
 8009918:	461a      	mov	r2, r3
 800991a:	4620      	mov	r0, r4
 800991c:	f000 fbe6 	bl	800a0ec <__lshift>
 8009920:	4606      	mov	r6, r0
 8009922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009924:	2b00      	cmp	r3, #0
 8009926:	d069      	beq.n	80099fc <_dtoa_r+0x924>
 8009928:	4631      	mov	r1, r6
 800992a:	4658      	mov	r0, fp
 800992c:	f000 fc4a 	bl	800a1c4 <__mcmp>
 8009930:	2800      	cmp	r0, #0
 8009932:	da63      	bge.n	80099fc <_dtoa_r+0x924>
 8009934:	2300      	movs	r3, #0
 8009936:	4659      	mov	r1, fp
 8009938:	220a      	movs	r2, #10
 800993a:	4620      	mov	r0, r4
 800993c:	f000 fa26 	bl	8009d8c <__multadd>
 8009940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009942:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009946:	4683      	mov	fp, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 818f 	beq.w	8009c6c <_dtoa_r+0xb94>
 800994e:	4639      	mov	r1, r7
 8009950:	2300      	movs	r3, #0
 8009952:	220a      	movs	r2, #10
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fa19 	bl	8009d8c <__multadd>
 800995a:	f1b9 0f00 	cmp.w	r9, #0
 800995e:	4607      	mov	r7, r0
 8009960:	f300 808e 	bgt.w	8009a80 <_dtoa_r+0x9a8>
 8009964:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009966:	2b02      	cmp	r3, #2
 8009968:	dc50      	bgt.n	8009a0c <_dtoa_r+0x934>
 800996a:	e089      	b.n	8009a80 <_dtoa_r+0x9a8>
 800996c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800996e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009972:	e75d      	b.n	8009830 <_dtoa_r+0x758>
 8009974:	9b06      	ldr	r3, [sp, #24]
 8009976:	1e5e      	subs	r6, r3, #1
 8009978:	9b08      	ldr	r3, [sp, #32]
 800997a:	42b3      	cmp	r3, r6
 800997c:	bfbf      	itttt	lt
 800997e:	9b08      	ldrlt	r3, [sp, #32]
 8009980:	9608      	strlt	r6, [sp, #32]
 8009982:	1af2      	sublt	r2, r6, r3
 8009984:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009986:	bfb6      	itet	lt
 8009988:	189b      	addlt	r3, r3, r2
 800998a:	1b9e      	subge	r6, r3, r6
 800998c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800998e:	9b06      	ldr	r3, [sp, #24]
 8009990:	bfb8      	it	lt
 8009992:	2600      	movlt	r6, #0
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfb5      	itete	lt
 8009998:	eba8 0503 	sublt.w	r5, r8, r3
 800999c:	9b06      	ldrge	r3, [sp, #24]
 800999e:	2300      	movlt	r3, #0
 80099a0:	4645      	movge	r5, r8
 80099a2:	e747      	b.n	8009834 <_dtoa_r+0x75c>
 80099a4:	9e08      	ldr	r6, [sp, #32]
 80099a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80099a8:	4645      	mov	r5, r8
 80099aa:	e74c      	b.n	8009846 <_dtoa_r+0x76e>
 80099ac:	9a08      	ldr	r2, [sp, #32]
 80099ae:	e775      	b.n	800989c <_dtoa_r+0x7c4>
 80099b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	dc18      	bgt.n	80099e8 <_dtoa_r+0x910>
 80099b6:	9b04      	ldr	r3, [sp, #16]
 80099b8:	b9b3      	cbnz	r3, 80099e8 <_dtoa_r+0x910>
 80099ba:	9b05      	ldr	r3, [sp, #20]
 80099bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099c0:	b9a3      	cbnz	r3, 80099ec <_dtoa_r+0x914>
 80099c2:	9b05      	ldr	r3, [sp, #20]
 80099c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099c8:	0d1b      	lsrs	r3, r3, #20
 80099ca:	051b      	lsls	r3, r3, #20
 80099cc:	b12b      	cbz	r3, 80099da <_dtoa_r+0x902>
 80099ce:	9b07      	ldr	r3, [sp, #28]
 80099d0:	3301      	adds	r3, #1
 80099d2:	9307      	str	r3, [sp, #28]
 80099d4:	f108 0801 	add.w	r8, r8, #1
 80099d8:	2301      	movs	r3, #1
 80099da:	9308      	str	r3, [sp, #32]
 80099dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f47f af74 	bne.w	80098cc <_dtoa_r+0x7f4>
 80099e4:	2001      	movs	r0, #1
 80099e6:	e779      	b.n	80098dc <_dtoa_r+0x804>
 80099e8:	2300      	movs	r3, #0
 80099ea:	e7f6      	b.n	80099da <_dtoa_r+0x902>
 80099ec:	9b04      	ldr	r3, [sp, #16]
 80099ee:	e7f4      	b.n	80099da <_dtoa_r+0x902>
 80099f0:	d085      	beq.n	80098fe <_dtoa_r+0x826>
 80099f2:	4618      	mov	r0, r3
 80099f4:	301c      	adds	r0, #28
 80099f6:	e77d      	b.n	80098f4 <_dtoa_r+0x81c>
 80099f8:	40240000 	.word	0x40240000
 80099fc:	9b06      	ldr	r3, [sp, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	dc38      	bgt.n	8009a74 <_dtoa_r+0x99c>
 8009a02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	dd35      	ble.n	8009a74 <_dtoa_r+0x99c>
 8009a08:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009a0c:	f1b9 0f00 	cmp.w	r9, #0
 8009a10:	d10d      	bne.n	8009a2e <_dtoa_r+0x956>
 8009a12:	4631      	mov	r1, r6
 8009a14:	464b      	mov	r3, r9
 8009a16:	2205      	movs	r2, #5
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 f9b7 	bl	8009d8c <__multadd>
 8009a1e:	4601      	mov	r1, r0
 8009a20:	4606      	mov	r6, r0
 8009a22:	4658      	mov	r0, fp
 8009a24:	f000 fbce 	bl	800a1c4 <__mcmp>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f73f adbd 	bgt.w	80095a8 <_dtoa_r+0x4d0>
 8009a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a30:	9d03      	ldr	r5, [sp, #12]
 8009a32:	ea6f 0a03 	mvn.w	sl, r3
 8009a36:	f04f 0800 	mov.w	r8, #0
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 f983 	bl	8009d48 <_Bfree>
 8009a42:	2f00      	cmp	r7, #0
 8009a44:	f43f aeb4 	beq.w	80097b0 <_dtoa_r+0x6d8>
 8009a48:	f1b8 0f00 	cmp.w	r8, #0
 8009a4c:	d005      	beq.n	8009a5a <_dtoa_r+0x982>
 8009a4e:	45b8      	cmp	r8, r7
 8009a50:	d003      	beq.n	8009a5a <_dtoa_r+0x982>
 8009a52:	4641      	mov	r1, r8
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 f977 	bl	8009d48 <_Bfree>
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 f973 	bl	8009d48 <_Bfree>
 8009a62:	e6a5      	b.n	80097b0 <_dtoa_r+0x6d8>
 8009a64:	2600      	movs	r6, #0
 8009a66:	4637      	mov	r7, r6
 8009a68:	e7e1      	b.n	8009a2e <_dtoa_r+0x956>
 8009a6a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009a6c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009a70:	4637      	mov	r7, r6
 8009a72:	e599      	b.n	80095a8 <_dtoa_r+0x4d0>
 8009a74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a76:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 80fd 	beq.w	8009c7a <_dtoa_r+0xba2>
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	dd05      	ble.n	8009a90 <_dtoa_r+0x9b8>
 8009a84:	4639      	mov	r1, r7
 8009a86:	462a      	mov	r2, r5
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fb2f 	bl	800a0ec <__lshift>
 8009a8e:	4607      	mov	r7, r0
 8009a90:	9b08      	ldr	r3, [sp, #32]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d05c      	beq.n	8009b50 <_dtoa_r+0xa78>
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 f915 	bl	8009cc8 <_Balloc>
 8009a9e:	4605      	mov	r5, r0
 8009aa0:	b928      	cbnz	r0, 8009aae <_dtoa_r+0x9d6>
 8009aa2:	4b80      	ldr	r3, [pc, #512]	; (8009ca4 <_dtoa_r+0xbcc>)
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009aaa:	f7ff bb2b 	b.w	8009104 <_dtoa_r+0x2c>
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	3202      	adds	r2, #2
 8009ab2:	0092      	lsls	r2, r2, #2
 8009ab4:	f107 010c 	add.w	r1, r7, #12
 8009ab8:	300c      	adds	r0, #12
 8009aba:	f7fe fddd 	bl	8008678 <memcpy>
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 fb12 	bl	800a0ec <__lshift>
 8009ac8:	9b03      	ldr	r3, [sp, #12]
 8009aca:	3301      	adds	r3, #1
 8009acc:	9306      	str	r3, [sp, #24]
 8009ace:	9b03      	ldr	r3, [sp, #12]
 8009ad0:	444b      	add	r3, r9
 8009ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad4:	9b04      	ldr	r3, [sp, #16]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	46b8      	mov	r8, r7
 8009adc:	9308      	str	r3, [sp, #32]
 8009ade:	4607      	mov	r7, r0
 8009ae0:	9b06      	ldr	r3, [sp, #24]
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	f7ff fa67 	bl	8008fbc <quorem>
 8009aee:	4603      	mov	r3, r0
 8009af0:	3330      	adds	r3, #48	; 0x30
 8009af2:	9007      	str	r0, [sp, #28]
 8009af4:	4641      	mov	r1, r8
 8009af6:	4658      	mov	r0, fp
 8009af8:	930c      	str	r3, [sp, #48]	; 0x30
 8009afa:	f000 fb63 	bl	800a1c4 <__mcmp>
 8009afe:	463a      	mov	r2, r7
 8009b00:	4681      	mov	r9, r0
 8009b02:	4631      	mov	r1, r6
 8009b04:	4620      	mov	r0, r4
 8009b06:	f000 fb79 	bl	800a1fc <__mdiff>
 8009b0a:	68c2      	ldr	r2, [r0, #12]
 8009b0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b0e:	4605      	mov	r5, r0
 8009b10:	bb02      	cbnz	r2, 8009b54 <_dtoa_r+0xa7c>
 8009b12:	4601      	mov	r1, r0
 8009b14:	4658      	mov	r0, fp
 8009b16:	f000 fb55 	bl	800a1c4 <__mcmp>
 8009b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	4629      	mov	r1, r5
 8009b20:	4620      	mov	r0, r4
 8009b22:	920a      	str	r2, [sp, #40]	; 0x28
 8009b24:	930c      	str	r3, [sp, #48]	; 0x30
 8009b26:	f000 f90f 	bl	8009d48 <_Bfree>
 8009b2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b2e:	9d06      	ldr	r5, [sp, #24]
 8009b30:	ea43 0102 	orr.w	r1, r3, r2
 8009b34:	9b08      	ldr	r3, [sp, #32]
 8009b36:	430b      	orrs	r3, r1
 8009b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b3a:	d10d      	bne.n	8009b58 <_dtoa_r+0xa80>
 8009b3c:	2b39      	cmp	r3, #57	; 0x39
 8009b3e:	d029      	beq.n	8009b94 <_dtoa_r+0xabc>
 8009b40:	f1b9 0f00 	cmp.w	r9, #0
 8009b44:	dd01      	ble.n	8009b4a <_dtoa_r+0xa72>
 8009b46:	9b07      	ldr	r3, [sp, #28]
 8009b48:	3331      	adds	r3, #49	; 0x31
 8009b4a:	9a04      	ldr	r2, [sp, #16]
 8009b4c:	7013      	strb	r3, [r2, #0]
 8009b4e:	e774      	b.n	8009a3a <_dtoa_r+0x962>
 8009b50:	4638      	mov	r0, r7
 8009b52:	e7b9      	b.n	8009ac8 <_dtoa_r+0x9f0>
 8009b54:	2201      	movs	r2, #1
 8009b56:	e7e2      	b.n	8009b1e <_dtoa_r+0xa46>
 8009b58:	f1b9 0f00 	cmp.w	r9, #0
 8009b5c:	db06      	blt.n	8009b6c <_dtoa_r+0xa94>
 8009b5e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009b60:	ea41 0909 	orr.w	r9, r1, r9
 8009b64:	9908      	ldr	r1, [sp, #32]
 8009b66:	ea59 0101 	orrs.w	r1, r9, r1
 8009b6a:	d120      	bne.n	8009bae <_dtoa_r+0xad6>
 8009b6c:	2a00      	cmp	r2, #0
 8009b6e:	ddec      	ble.n	8009b4a <_dtoa_r+0xa72>
 8009b70:	4659      	mov	r1, fp
 8009b72:	2201      	movs	r2, #1
 8009b74:	4620      	mov	r0, r4
 8009b76:	9306      	str	r3, [sp, #24]
 8009b78:	f000 fab8 	bl	800a0ec <__lshift>
 8009b7c:	4631      	mov	r1, r6
 8009b7e:	4683      	mov	fp, r0
 8009b80:	f000 fb20 	bl	800a1c4 <__mcmp>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	9b06      	ldr	r3, [sp, #24]
 8009b88:	dc02      	bgt.n	8009b90 <_dtoa_r+0xab8>
 8009b8a:	d1de      	bne.n	8009b4a <_dtoa_r+0xa72>
 8009b8c:	07da      	lsls	r2, r3, #31
 8009b8e:	d5dc      	bpl.n	8009b4a <_dtoa_r+0xa72>
 8009b90:	2b39      	cmp	r3, #57	; 0x39
 8009b92:	d1d8      	bne.n	8009b46 <_dtoa_r+0xa6e>
 8009b94:	9a04      	ldr	r2, [sp, #16]
 8009b96:	2339      	movs	r3, #57	; 0x39
 8009b98:	7013      	strb	r3, [r2, #0]
 8009b9a:	462b      	mov	r3, r5
 8009b9c:	461d      	mov	r5, r3
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ba4:	2a39      	cmp	r2, #57	; 0x39
 8009ba6:	d050      	beq.n	8009c4a <_dtoa_r+0xb72>
 8009ba8:	3201      	adds	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
 8009bac:	e745      	b.n	8009a3a <_dtoa_r+0x962>
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	dd03      	ble.n	8009bba <_dtoa_r+0xae2>
 8009bb2:	2b39      	cmp	r3, #57	; 0x39
 8009bb4:	d0ee      	beq.n	8009b94 <_dtoa_r+0xabc>
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	e7c7      	b.n	8009b4a <_dtoa_r+0xa72>
 8009bba:	9a06      	ldr	r2, [sp, #24]
 8009bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009bc2:	428a      	cmp	r2, r1
 8009bc4:	d02a      	beq.n	8009c1c <_dtoa_r+0xb44>
 8009bc6:	4659      	mov	r1, fp
 8009bc8:	2300      	movs	r3, #0
 8009bca:	220a      	movs	r2, #10
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f000 f8dd 	bl	8009d8c <__multadd>
 8009bd2:	45b8      	cmp	r8, r7
 8009bd4:	4683      	mov	fp, r0
 8009bd6:	f04f 0300 	mov.w	r3, #0
 8009bda:	f04f 020a 	mov.w	r2, #10
 8009bde:	4641      	mov	r1, r8
 8009be0:	4620      	mov	r0, r4
 8009be2:	d107      	bne.n	8009bf4 <_dtoa_r+0xb1c>
 8009be4:	f000 f8d2 	bl	8009d8c <__multadd>
 8009be8:	4680      	mov	r8, r0
 8009bea:	4607      	mov	r7, r0
 8009bec:	9b06      	ldr	r3, [sp, #24]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	9306      	str	r3, [sp, #24]
 8009bf2:	e775      	b.n	8009ae0 <_dtoa_r+0xa08>
 8009bf4:	f000 f8ca 	bl	8009d8c <__multadd>
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	4680      	mov	r8, r0
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	220a      	movs	r2, #10
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 f8c3 	bl	8009d8c <__multadd>
 8009c06:	4607      	mov	r7, r0
 8009c08:	e7f0      	b.n	8009bec <_dtoa_r+0xb14>
 8009c0a:	f1b9 0f00 	cmp.w	r9, #0
 8009c0e:	9a03      	ldr	r2, [sp, #12]
 8009c10:	bfcc      	ite	gt
 8009c12:	464d      	movgt	r5, r9
 8009c14:	2501      	movle	r5, #1
 8009c16:	4415      	add	r5, r2
 8009c18:	f04f 0800 	mov.w	r8, #0
 8009c1c:	4659      	mov	r1, fp
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4620      	mov	r0, r4
 8009c22:	9306      	str	r3, [sp, #24]
 8009c24:	f000 fa62 	bl	800a0ec <__lshift>
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4683      	mov	fp, r0
 8009c2c:	f000 faca 	bl	800a1c4 <__mcmp>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dcb2      	bgt.n	8009b9a <_dtoa_r+0xac2>
 8009c34:	d102      	bne.n	8009c3c <_dtoa_r+0xb64>
 8009c36:	9b06      	ldr	r3, [sp, #24]
 8009c38:	07db      	lsls	r3, r3, #31
 8009c3a:	d4ae      	bmi.n	8009b9a <_dtoa_r+0xac2>
 8009c3c:	462b      	mov	r3, r5
 8009c3e:	461d      	mov	r5, r3
 8009c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c44:	2a30      	cmp	r2, #48	; 0x30
 8009c46:	d0fa      	beq.n	8009c3e <_dtoa_r+0xb66>
 8009c48:	e6f7      	b.n	8009a3a <_dtoa_r+0x962>
 8009c4a:	9a03      	ldr	r2, [sp, #12]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d1a5      	bne.n	8009b9c <_dtoa_r+0xac4>
 8009c50:	f10a 0a01 	add.w	sl, sl, #1
 8009c54:	2331      	movs	r3, #49	; 0x31
 8009c56:	e779      	b.n	8009b4c <_dtoa_r+0xa74>
 8009c58:	4b13      	ldr	r3, [pc, #76]	; (8009ca8 <_dtoa_r+0xbd0>)
 8009c5a:	f7ff baac 	b.w	80091b6 <_dtoa_r+0xde>
 8009c5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f47f aa83 	bne.w	800916c <_dtoa_r+0x94>
 8009c66:	4b11      	ldr	r3, [pc, #68]	; (8009cac <_dtoa_r+0xbd4>)
 8009c68:	f7ff baa5 	b.w	80091b6 <_dtoa_r+0xde>
 8009c6c:	f1b9 0f00 	cmp.w	r9, #0
 8009c70:	dc03      	bgt.n	8009c7a <_dtoa_r+0xba2>
 8009c72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	f73f aec9 	bgt.w	8009a0c <_dtoa_r+0x934>
 8009c7a:	9d03      	ldr	r5, [sp, #12]
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4658      	mov	r0, fp
 8009c80:	f7ff f99c 	bl	8008fbc <quorem>
 8009c84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c88:	f805 3b01 	strb.w	r3, [r5], #1
 8009c8c:	9a03      	ldr	r2, [sp, #12]
 8009c8e:	1aaa      	subs	r2, r5, r2
 8009c90:	4591      	cmp	r9, r2
 8009c92:	ddba      	ble.n	8009c0a <_dtoa_r+0xb32>
 8009c94:	4659      	mov	r1, fp
 8009c96:	2300      	movs	r3, #0
 8009c98:	220a      	movs	r2, #10
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 f876 	bl	8009d8c <__multadd>
 8009ca0:	4683      	mov	fp, r0
 8009ca2:	e7eb      	b.n	8009c7c <_dtoa_r+0xba4>
 8009ca4:	0800b9fb 	.word	0x0800b9fb
 8009ca8:	0800b954 	.word	0x0800b954
 8009cac:	0800b978 	.word	0x0800b978

08009cb0 <_localeconv_r>:
 8009cb0:	4800      	ldr	r0, [pc, #0]	; (8009cb4 <_localeconv_r+0x4>)
 8009cb2:	4770      	bx	lr
 8009cb4:	20000190 	.word	0x20000190

08009cb8 <malloc>:
 8009cb8:	4b02      	ldr	r3, [pc, #8]	; (8009cc4 <malloc+0xc>)
 8009cba:	4601      	mov	r1, r0
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	f000 bbdf 	b.w	800a480 <_malloc_r>
 8009cc2:	bf00      	nop
 8009cc4:	2000003c 	.word	0x2000003c

08009cc8 <_Balloc>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ccc:	4604      	mov	r4, r0
 8009cce:	460d      	mov	r5, r1
 8009cd0:	b976      	cbnz	r6, 8009cf0 <_Balloc+0x28>
 8009cd2:	2010      	movs	r0, #16
 8009cd4:	f7ff fff0 	bl	8009cb8 <malloc>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	6260      	str	r0, [r4, #36]	; 0x24
 8009cdc:	b920      	cbnz	r0, 8009ce8 <_Balloc+0x20>
 8009cde:	4b18      	ldr	r3, [pc, #96]	; (8009d40 <_Balloc+0x78>)
 8009ce0:	4818      	ldr	r0, [pc, #96]	; (8009d44 <_Balloc+0x7c>)
 8009ce2:	2166      	movs	r1, #102	; 0x66
 8009ce4:	f000 fd92 	bl	800a80c <__assert_func>
 8009ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cec:	6006      	str	r6, [r0, #0]
 8009cee:	60c6      	str	r6, [r0, #12]
 8009cf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009cf2:	68f3      	ldr	r3, [r6, #12]
 8009cf4:	b183      	cbz	r3, 8009d18 <_Balloc+0x50>
 8009cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cfe:	b9b8      	cbnz	r0, 8009d30 <_Balloc+0x68>
 8009d00:	2101      	movs	r1, #1
 8009d02:	fa01 f605 	lsl.w	r6, r1, r5
 8009d06:	1d72      	adds	r2, r6, #5
 8009d08:	0092      	lsls	r2, r2, #2
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 fb58 	bl	800a3c0 <_calloc_r>
 8009d10:	b160      	cbz	r0, 8009d2c <_Balloc+0x64>
 8009d12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d16:	e00e      	b.n	8009d36 <_Balloc+0x6e>
 8009d18:	2221      	movs	r2, #33	; 0x21
 8009d1a:	2104      	movs	r1, #4
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f000 fb4f 	bl	800a3c0 <_calloc_r>
 8009d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d24:	60f0      	str	r0, [r6, #12]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e4      	bne.n	8009cf6 <_Balloc+0x2e>
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}
 8009d30:	6802      	ldr	r2, [r0, #0]
 8009d32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d36:	2300      	movs	r3, #0
 8009d38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d3c:	e7f7      	b.n	8009d2e <_Balloc+0x66>
 8009d3e:	bf00      	nop
 8009d40:	0800b985 	.word	0x0800b985
 8009d44:	0800ba0c 	.word	0x0800ba0c

08009d48 <_Bfree>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d4c:	4605      	mov	r5, r0
 8009d4e:	460c      	mov	r4, r1
 8009d50:	b976      	cbnz	r6, 8009d70 <_Bfree+0x28>
 8009d52:	2010      	movs	r0, #16
 8009d54:	f7ff ffb0 	bl	8009cb8 <malloc>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	6268      	str	r0, [r5, #36]	; 0x24
 8009d5c:	b920      	cbnz	r0, 8009d68 <_Bfree+0x20>
 8009d5e:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <_Bfree+0x3c>)
 8009d60:	4809      	ldr	r0, [pc, #36]	; (8009d88 <_Bfree+0x40>)
 8009d62:	218a      	movs	r1, #138	; 0x8a
 8009d64:	f000 fd52 	bl	800a80c <__assert_func>
 8009d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d6c:	6006      	str	r6, [r0, #0]
 8009d6e:	60c6      	str	r6, [r0, #12]
 8009d70:	b13c      	cbz	r4, 8009d82 <_Bfree+0x3a>
 8009d72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d74:	6862      	ldr	r2, [r4, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d7c:	6021      	str	r1, [r4, #0]
 8009d7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	0800b985 	.word	0x0800b985
 8009d88:	0800ba0c 	.word	0x0800ba0c

08009d8c <__multadd>:
 8009d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d90:	690e      	ldr	r6, [r1, #16]
 8009d92:	4607      	mov	r7, r0
 8009d94:	4698      	mov	r8, r3
 8009d96:	460c      	mov	r4, r1
 8009d98:	f101 0014 	add.w	r0, r1, #20
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	6805      	ldr	r5, [r0, #0]
 8009da0:	b2a9      	uxth	r1, r5
 8009da2:	fb02 8101 	mla	r1, r2, r1, r8
 8009da6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009daa:	0c2d      	lsrs	r5, r5, #16
 8009dac:	fb02 c505 	mla	r5, r2, r5, ip
 8009db0:	b289      	uxth	r1, r1
 8009db2:	3301      	adds	r3, #1
 8009db4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009db8:	429e      	cmp	r6, r3
 8009dba:	f840 1b04 	str.w	r1, [r0], #4
 8009dbe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009dc2:	dcec      	bgt.n	8009d9e <__multadd+0x12>
 8009dc4:	f1b8 0f00 	cmp.w	r8, #0
 8009dc8:	d022      	beq.n	8009e10 <__multadd+0x84>
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	42b3      	cmp	r3, r6
 8009dce:	dc19      	bgt.n	8009e04 <__multadd+0x78>
 8009dd0:	6861      	ldr	r1, [r4, #4]
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	3101      	adds	r1, #1
 8009dd6:	f7ff ff77 	bl	8009cc8 <_Balloc>
 8009dda:	4605      	mov	r5, r0
 8009ddc:	b928      	cbnz	r0, 8009dea <__multadd+0x5e>
 8009dde:	4602      	mov	r2, r0
 8009de0:	4b0d      	ldr	r3, [pc, #52]	; (8009e18 <__multadd+0x8c>)
 8009de2:	480e      	ldr	r0, [pc, #56]	; (8009e1c <__multadd+0x90>)
 8009de4:	21b5      	movs	r1, #181	; 0xb5
 8009de6:	f000 fd11 	bl	800a80c <__assert_func>
 8009dea:	6922      	ldr	r2, [r4, #16]
 8009dec:	3202      	adds	r2, #2
 8009dee:	f104 010c 	add.w	r1, r4, #12
 8009df2:	0092      	lsls	r2, r2, #2
 8009df4:	300c      	adds	r0, #12
 8009df6:	f7fe fc3f 	bl	8008678 <memcpy>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f7ff ffa3 	bl	8009d48 <_Bfree>
 8009e02:	462c      	mov	r4, r5
 8009e04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009e08:	3601      	adds	r6, #1
 8009e0a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009e0e:	6126      	str	r6, [r4, #16]
 8009e10:	4620      	mov	r0, r4
 8009e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e16:	bf00      	nop
 8009e18:	0800b9fb 	.word	0x0800b9fb
 8009e1c:	0800ba0c 	.word	0x0800ba0c

08009e20 <__hi0bits>:
 8009e20:	0c03      	lsrs	r3, r0, #16
 8009e22:	041b      	lsls	r3, r3, #16
 8009e24:	b9d3      	cbnz	r3, 8009e5c <__hi0bits+0x3c>
 8009e26:	0400      	lsls	r0, r0, #16
 8009e28:	2310      	movs	r3, #16
 8009e2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e2e:	bf04      	itt	eq
 8009e30:	0200      	lsleq	r0, r0, #8
 8009e32:	3308      	addeq	r3, #8
 8009e34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e38:	bf04      	itt	eq
 8009e3a:	0100      	lsleq	r0, r0, #4
 8009e3c:	3304      	addeq	r3, #4
 8009e3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e42:	bf04      	itt	eq
 8009e44:	0080      	lsleq	r0, r0, #2
 8009e46:	3302      	addeq	r3, #2
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	db05      	blt.n	8009e58 <__hi0bits+0x38>
 8009e4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e50:	f103 0301 	add.w	r3, r3, #1
 8009e54:	bf08      	it	eq
 8009e56:	2320      	moveq	r3, #32
 8009e58:	4618      	mov	r0, r3
 8009e5a:	4770      	bx	lr
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e7e4      	b.n	8009e2a <__hi0bits+0xa>

08009e60 <__lo0bits>:
 8009e60:	6803      	ldr	r3, [r0, #0]
 8009e62:	f013 0207 	ands.w	r2, r3, #7
 8009e66:	4601      	mov	r1, r0
 8009e68:	d00b      	beq.n	8009e82 <__lo0bits+0x22>
 8009e6a:	07da      	lsls	r2, r3, #31
 8009e6c:	d424      	bmi.n	8009eb8 <__lo0bits+0x58>
 8009e6e:	0798      	lsls	r0, r3, #30
 8009e70:	bf49      	itett	mi
 8009e72:	085b      	lsrmi	r3, r3, #1
 8009e74:	089b      	lsrpl	r3, r3, #2
 8009e76:	2001      	movmi	r0, #1
 8009e78:	600b      	strmi	r3, [r1, #0]
 8009e7a:	bf5c      	itt	pl
 8009e7c:	600b      	strpl	r3, [r1, #0]
 8009e7e:	2002      	movpl	r0, #2
 8009e80:	4770      	bx	lr
 8009e82:	b298      	uxth	r0, r3
 8009e84:	b9b0      	cbnz	r0, 8009eb4 <__lo0bits+0x54>
 8009e86:	0c1b      	lsrs	r3, r3, #16
 8009e88:	2010      	movs	r0, #16
 8009e8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e8e:	bf04      	itt	eq
 8009e90:	0a1b      	lsreq	r3, r3, #8
 8009e92:	3008      	addeq	r0, #8
 8009e94:	071a      	lsls	r2, r3, #28
 8009e96:	bf04      	itt	eq
 8009e98:	091b      	lsreq	r3, r3, #4
 8009e9a:	3004      	addeq	r0, #4
 8009e9c:	079a      	lsls	r2, r3, #30
 8009e9e:	bf04      	itt	eq
 8009ea0:	089b      	lsreq	r3, r3, #2
 8009ea2:	3002      	addeq	r0, #2
 8009ea4:	07da      	lsls	r2, r3, #31
 8009ea6:	d403      	bmi.n	8009eb0 <__lo0bits+0x50>
 8009ea8:	085b      	lsrs	r3, r3, #1
 8009eaa:	f100 0001 	add.w	r0, r0, #1
 8009eae:	d005      	beq.n	8009ebc <__lo0bits+0x5c>
 8009eb0:	600b      	str	r3, [r1, #0]
 8009eb2:	4770      	bx	lr
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	e7e8      	b.n	8009e8a <__lo0bits+0x2a>
 8009eb8:	2000      	movs	r0, #0
 8009eba:	4770      	bx	lr
 8009ebc:	2020      	movs	r0, #32
 8009ebe:	4770      	bx	lr

08009ec0 <__i2b>:
 8009ec0:	b510      	push	{r4, lr}
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	f7ff feff 	bl	8009cc8 <_Balloc>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	b928      	cbnz	r0, 8009eda <__i2b+0x1a>
 8009ece:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <__i2b+0x24>)
 8009ed0:	4805      	ldr	r0, [pc, #20]	; (8009ee8 <__i2b+0x28>)
 8009ed2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ed6:	f000 fc99 	bl	800a80c <__assert_func>
 8009eda:	2301      	movs	r3, #1
 8009edc:	6144      	str	r4, [r0, #20]
 8009ede:	6103      	str	r3, [r0, #16]
 8009ee0:	bd10      	pop	{r4, pc}
 8009ee2:	bf00      	nop
 8009ee4:	0800b9fb 	.word	0x0800b9fb
 8009ee8:	0800ba0c 	.word	0x0800ba0c

08009eec <__multiply>:
 8009eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	4614      	mov	r4, r2
 8009ef2:	690a      	ldr	r2, [r1, #16]
 8009ef4:	6923      	ldr	r3, [r4, #16]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	bfb8      	it	lt
 8009efa:	460b      	movlt	r3, r1
 8009efc:	460d      	mov	r5, r1
 8009efe:	bfbc      	itt	lt
 8009f00:	4625      	movlt	r5, r4
 8009f02:	461c      	movlt	r4, r3
 8009f04:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009f08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009f0c:	68ab      	ldr	r3, [r5, #8]
 8009f0e:	6869      	ldr	r1, [r5, #4]
 8009f10:	eb0a 0709 	add.w	r7, sl, r9
 8009f14:	42bb      	cmp	r3, r7
 8009f16:	b085      	sub	sp, #20
 8009f18:	bfb8      	it	lt
 8009f1a:	3101      	addlt	r1, #1
 8009f1c:	f7ff fed4 	bl	8009cc8 <_Balloc>
 8009f20:	b930      	cbnz	r0, 8009f30 <__multiply+0x44>
 8009f22:	4602      	mov	r2, r0
 8009f24:	4b42      	ldr	r3, [pc, #264]	; (800a030 <__multiply+0x144>)
 8009f26:	4843      	ldr	r0, [pc, #268]	; (800a034 <__multiply+0x148>)
 8009f28:	f240 115d 	movw	r1, #349	; 0x15d
 8009f2c:	f000 fc6e 	bl	800a80c <__assert_func>
 8009f30:	f100 0614 	add.w	r6, r0, #20
 8009f34:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009f38:	4633      	mov	r3, r6
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	4543      	cmp	r3, r8
 8009f3e:	d31e      	bcc.n	8009f7e <__multiply+0x92>
 8009f40:	f105 0c14 	add.w	ip, r5, #20
 8009f44:	f104 0314 	add.w	r3, r4, #20
 8009f48:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009f4c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009f50:	9202      	str	r2, [sp, #8]
 8009f52:	ebac 0205 	sub.w	r2, ip, r5
 8009f56:	3a15      	subs	r2, #21
 8009f58:	f022 0203 	bic.w	r2, r2, #3
 8009f5c:	3204      	adds	r2, #4
 8009f5e:	f105 0115 	add.w	r1, r5, #21
 8009f62:	458c      	cmp	ip, r1
 8009f64:	bf38      	it	cc
 8009f66:	2204      	movcc	r2, #4
 8009f68:	9201      	str	r2, [sp, #4]
 8009f6a:	9a02      	ldr	r2, [sp, #8]
 8009f6c:	9303      	str	r3, [sp, #12]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d808      	bhi.n	8009f84 <__multiply+0x98>
 8009f72:	2f00      	cmp	r7, #0
 8009f74:	dc55      	bgt.n	800a022 <__multiply+0x136>
 8009f76:	6107      	str	r7, [r0, #16]
 8009f78:	b005      	add	sp, #20
 8009f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7e:	f843 2b04 	str.w	r2, [r3], #4
 8009f82:	e7db      	b.n	8009f3c <__multiply+0x50>
 8009f84:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f88:	f1ba 0f00 	cmp.w	sl, #0
 8009f8c:	d020      	beq.n	8009fd0 <__multiply+0xe4>
 8009f8e:	f105 0e14 	add.w	lr, r5, #20
 8009f92:	46b1      	mov	r9, r6
 8009f94:	2200      	movs	r2, #0
 8009f96:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009f9a:	f8d9 b000 	ldr.w	fp, [r9]
 8009f9e:	b2a1      	uxth	r1, r4
 8009fa0:	fa1f fb8b 	uxth.w	fp, fp
 8009fa4:	fb0a b101 	mla	r1, sl, r1, fp
 8009fa8:	4411      	add	r1, r2
 8009faa:	f8d9 2000 	ldr.w	r2, [r9]
 8009fae:	0c24      	lsrs	r4, r4, #16
 8009fb0:	0c12      	lsrs	r2, r2, #16
 8009fb2:	fb0a 2404 	mla	r4, sl, r4, r2
 8009fb6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009fba:	b289      	uxth	r1, r1
 8009fbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009fc0:	45f4      	cmp	ip, lr
 8009fc2:	f849 1b04 	str.w	r1, [r9], #4
 8009fc6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009fca:	d8e4      	bhi.n	8009f96 <__multiply+0xaa>
 8009fcc:	9901      	ldr	r1, [sp, #4]
 8009fce:	5072      	str	r2, [r6, r1]
 8009fd0:	9a03      	ldr	r2, [sp, #12]
 8009fd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fd6:	3304      	adds	r3, #4
 8009fd8:	f1b9 0f00 	cmp.w	r9, #0
 8009fdc:	d01f      	beq.n	800a01e <__multiply+0x132>
 8009fde:	6834      	ldr	r4, [r6, #0]
 8009fe0:	f105 0114 	add.w	r1, r5, #20
 8009fe4:	46b6      	mov	lr, r6
 8009fe6:	f04f 0a00 	mov.w	sl, #0
 8009fea:	880a      	ldrh	r2, [r1, #0]
 8009fec:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009ff0:	fb09 b202 	mla	r2, r9, r2, fp
 8009ff4:	4492      	add	sl, r2
 8009ff6:	b2a4      	uxth	r4, r4
 8009ff8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009ffc:	f84e 4b04 	str.w	r4, [lr], #4
 800a000:	f851 4b04 	ldr.w	r4, [r1], #4
 800a004:	f8be 2000 	ldrh.w	r2, [lr]
 800a008:	0c24      	lsrs	r4, r4, #16
 800a00a:	fb09 2404 	mla	r4, r9, r4, r2
 800a00e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a012:	458c      	cmp	ip, r1
 800a014:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a018:	d8e7      	bhi.n	8009fea <__multiply+0xfe>
 800a01a:	9a01      	ldr	r2, [sp, #4]
 800a01c:	50b4      	str	r4, [r6, r2]
 800a01e:	3604      	adds	r6, #4
 800a020:	e7a3      	b.n	8009f6a <__multiply+0x7e>
 800a022:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1a5      	bne.n	8009f76 <__multiply+0x8a>
 800a02a:	3f01      	subs	r7, #1
 800a02c:	e7a1      	b.n	8009f72 <__multiply+0x86>
 800a02e:	bf00      	nop
 800a030:	0800b9fb 	.word	0x0800b9fb
 800a034:	0800ba0c 	.word	0x0800ba0c

0800a038 <__pow5mult>:
 800a038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a03c:	4615      	mov	r5, r2
 800a03e:	f012 0203 	ands.w	r2, r2, #3
 800a042:	4606      	mov	r6, r0
 800a044:	460f      	mov	r7, r1
 800a046:	d007      	beq.n	800a058 <__pow5mult+0x20>
 800a048:	4c25      	ldr	r4, [pc, #148]	; (800a0e0 <__pow5mult+0xa8>)
 800a04a:	3a01      	subs	r2, #1
 800a04c:	2300      	movs	r3, #0
 800a04e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a052:	f7ff fe9b 	bl	8009d8c <__multadd>
 800a056:	4607      	mov	r7, r0
 800a058:	10ad      	asrs	r5, r5, #2
 800a05a:	d03d      	beq.n	800a0d8 <__pow5mult+0xa0>
 800a05c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a05e:	b97c      	cbnz	r4, 800a080 <__pow5mult+0x48>
 800a060:	2010      	movs	r0, #16
 800a062:	f7ff fe29 	bl	8009cb8 <malloc>
 800a066:	4602      	mov	r2, r0
 800a068:	6270      	str	r0, [r6, #36]	; 0x24
 800a06a:	b928      	cbnz	r0, 800a078 <__pow5mult+0x40>
 800a06c:	4b1d      	ldr	r3, [pc, #116]	; (800a0e4 <__pow5mult+0xac>)
 800a06e:	481e      	ldr	r0, [pc, #120]	; (800a0e8 <__pow5mult+0xb0>)
 800a070:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a074:	f000 fbca 	bl	800a80c <__assert_func>
 800a078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a07c:	6004      	str	r4, [r0, #0]
 800a07e:	60c4      	str	r4, [r0, #12]
 800a080:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a088:	b94c      	cbnz	r4, 800a09e <__pow5mult+0x66>
 800a08a:	f240 2171 	movw	r1, #625	; 0x271
 800a08e:	4630      	mov	r0, r6
 800a090:	f7ff ff16 	bl	8009ec0 <__i2b>
 800a094:	2300      	movs	r3, #0
 800a096:	f8c8 0008 	str.w	r0, [r8, #8]
 800a09a:	4604      	mov	r4, r0
 800a09c:	6003      	str	r3, [r0, #0]
 800a09e:	f04f 0900 	mov.w	r9, #0
 800a0a2:	07eb      	lsls	r3, r5, #31
 800a0a4:	d50a      	bpl.n	800a0bc <__pow5mult+0x84>
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f7ff ff1e 	bl	8009eec <__multiply>
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	4680      	mov	r8, r0
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f7ff fe47 	bl	8009d48 <_Bfree>
 800a0ba:	4647      	mov	r7, r8
 800a0bc:	106d      	asrs	r5, r5, #1
 800a0be:	d00b      	beq.n	800a0d8 <__pow5mult+0xa0>
 800a0c0:	6820      	ldr	r0, [r4, #0]
 800a0c2:	b938      	cbnz	r0, 800a0d4 <__pow5mult+0x9c>
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f7ff ff0f 	bl	8009eec <__multiply>
 800a0ce:	6020      	str	r0, [r4, #0]
 800a0d0:	f8c0 9000 	str.w	r9, [r0]
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	e7e4      	b.n	800a0a2 <__pow5mult+0x6a>
 800a0d8:	4638      	mov	r0, r7
 800a0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0de:	bf00      	nop
 800a0e0:	0800bb60 	.word	0x0800bb60
 800a0e4:	0800b985 	.word	0x0800b985
 800a0e8:	0800ba0c 	.word	0x0800ba0c

0800a0ec <__lshift>:
 800a0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	6849      	ldr	r1, [r1, #4]
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0fa:	68a3      	ldr	r3, [r4, #8]
 800a0fc:	4607      	mov	r7, r0
 800a0fe:	4691      	mov	r9, r2
 800a100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a104:	f108 0601 	add.w	r6, r8, #1
 800a108:	42b3      	cmp	r3, r6
 800a10a:	db0b      	blt.n	800a124 <__lshift+0x38>
 800a10c:	4638      	mov	r0, r7
 800a10e:	f7ff fddb 	bl	8009cc8 <_Balloc>
 800a112:	4605      	mov	r5, r0
 800a114:	b948      	cbnz	r0, 800a12a <__lshift+0x3e>
 800a116:	4602      	mov	r2, r0
 800a118:	4b28      	ldr	r3, [pc, #160]	; (800a1bc <__lshift+0xd0>)
 800a11a:	4829      	ldr	r0, [pc, #164]	; (800a1c0 <__lshift+0xd4>)
 800a11c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a120:	f000 fb74 	bl	800a80c <__assert_func>
 800a124:	3101      	adds	r1, #1
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	e7ee      	b.n	800a108 <__lshift+0x1c>
 800a12a:	2300      	movs	r3, #0
 800a12c:	f100 0114 	add.w	r1, r0, #20
 800a130:	f100 0210 	add.w	r2, r0, #16
 800a134:	4618      	mov	r0, r3
 800a136:	4553      	cmp	r3, sl
 800a138:	db33      	blt.n	800a1a2 <__lshift+0xb6>
 800a13a:	6920      	ldr	r0, [r4, #16]
 800a13c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a140:	f104 0314 	add.w	r3, r4, #20
 800a144:	f019 091f 	ands.w	r9, r9, #31
 800a148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a14c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a150:	d02b      	beq.n	800a1aa <__lshift+0xbe>
 800a152:	f1c9 0e20 	rsb	lr, r9, #32
 800a156:	468a      	mov	sl, r1
 800a158:	2200      	movs	r2, #0
 800a15a:	6818      	ldr	r0, [r3, #0]
 800a15c:	fa00 f009 	lsl.w	r0, r0, r9
 800a160:	4302      	orrs	r2, r0
 800a162:	f84a 2b04 	str.w	r2, [sl], #4
 800a166:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16a:	459c      	cmp	ip, r3
 800a16c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a170:	d8f3      	bhi.n	800a15a <__lshift+0x6e>
 800a172:	ebac 0304 	sub.w	r3, ip, r4
 800a176:	3b15      	subs	r3, #21
 800a178:	f023 0303 	bic.w	r3, r3, #3
 800a17c:	3304      	adds	r3, #4
 800a17e:	f104 0015 	add.w	r0, r4, #21
 800a182:	4584      	cmp	ip, r0
 800a184:	bf38      	it	cc
 800a186:	2304      	movcc	r3, #4
 800a188:	50ca      	str	r2, [r1, r3]
 800a18a:	b10a      	cbz	r2, 800a190 <__lshift+0xa4>
 800a18c:	f108 0602 	add.w	r6, r8, #2
 800a190:	3e01      	subs	r6, #1
 800a192:	4638      	mov	r0, r7
 800a194:	612e      	str	r6, [r5, #16]
 800a196:	4621      	mov	r1, r4
 800a198:	f7ff fdd6 	bl	8009d48 <_Bfree>
 800a19c:	4628      	mov	r0, r5
 800a19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	e7c5      	b.n	800a136 <__lshift+0x4a>
 800a1aa:	3904      	subs	r1, #4
 800a1ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1b4:	459c      	cmp	ip, r3
 800a1b6:	d8f9      	bhi.n	800a1ac <__lshift+0xc0>
 800a1b8:	e7ea      	b.n	800a190 <__lshift+0xa4>
 800a1ba:	bf00      	nop
 800a1bc:	0800b9fb 	.word	0x0800b9fb
 800a1c0:	0800ba0c 	.word	0x0800ba0c

0800a1c4 <__mcmp>:
 800a1c4:	b530      	push	{r4, r5, lr}
 800a1c6:	6902      	ldr	r2, [r0, #16]
 800a1c8:	690c      	ldr	r4, [r1, #16]
 800a1ca:	1b12      	subs	r2, r2, r4
 800a1cc:	d10e      	bne.n	800a1ec <__mcmp+0x28>
 800a1ce:	f100 0314 	add.w	r3, r0, #20
 800a1d2:	3114      	adds	r1, #20
 800a1d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1e4:	42a5      	cmp	r5, r4
 800a1e6:	d003      	beq.n	800a1f0 <__mcmp+0x2c>
 800a1e8:	d305      	bcc.n	800a1f6 <__mcmp+0x32>
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	bd30      	pop	{r4, r5, pc}
 800a1f0:	4283      	cmp	r3, r0
 800a1f2:	d3f3      	bcc.n	800a1dc <__mcmp+0x18>
 800a1f4:	e7fa      	b.n	800a1ec <__mcmp+0x28>
 800a1f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1fa:	e7f7      	b.n	800a1ec <__mcmp+0x28>

0800a1fc <__mdiff>:
 800a1fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a200:	460c      	mov	r4, r1
 800a202:	4606      	mov	r6, r0
 800a204:	4611      	mov	r1, r2
 800a206:	4620      	mov	r0, r4
 800a208:	4617      	mov	r7, r2
 800a20a:	f7ff ffdb 	bl	800a1c4 <__mcmp>
 800a20e:	1e05      	subs	r5, r0, #0
 800a210:	d110      	bne.n	800a234 <__mdiff+0x38>
 800a212:	4629      	mov	r1, r5
 800a214:	4630      	mov	r0, r6
 800a216:	f7ff fd57 	bl	8009cc8 <_Balloc>
 800a21a:	b930      	cbnz	r0, 800a22a <__mdiff+0x2e>
 800a21c:	4b39      	ldr	r3, [pc, #228]	; (800a304 <__mdiff+0x108>)
 800a21e:	4602      	mov	r2, r0
 800a220:	f240 2132 	movw	r1, #562	; 0x232
 800a224:	4838      	ldr	r0, [pc, #224]	; (800a308 <__mdiff+0x10c>)
 800a226:	f000 faf1 	bl	800a80c <__assert_func>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	bfa4      	itt	ge
 800a236:	463b      	movge	r3, r7
 800a238:	4627      	movge	r7, r4
 800a23a:	4630      	mov	r0, r6
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	bfa6      	itte	ge
 800a240:	461c      	movge	r4, r3
 800a242:	2500      	movge	r5, #0
 800a244:	2501      	movlt	r5, #1
 800a246:	f7ff fd3f 	bl	8009cc8 <_Balloc>
 800a24a:	b920      	cbnz	r0, 800a256 <__mdiff+0x5a>
 800a24c:	4b2d      	ldr	r3, [pc, #180]	; (800a304 <__mdiff+0x108>)
 800a24e:	4602      	mov	r2, r0
 800a250:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a254:	e7e6      	b.n	800a224 <__mdiff+0x28>
 800a256:	693e      	ldr	r6, [r7, #16]
 800a258:	60c5      	str	r5, [r0, #12]
 800a25a:	6925      	ldr	r5, [r4, #16]
 800a25c:	f107 0114 	add.w	r1, r7, #20
 800a260:	f104 0914 	add.w	r9, r4, #20
 800a264:	f100 0e14 	add.w	lr, r0, #20
 800a268:	f107 0210 	add.w	r2, r7, #16
 800a26c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a270:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a274:	46f2      	mov	sl, lr
 800a276:	2700      	movs	r7, #0
 800a278:	f859 3b04 	ldr.w	r3, [r9], #4
 800a27c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a280:	fa1f f883 	uxth.w	r8, r3
 800a284:	fa17 f78b 	uxtah	r7, r7, fp
 800a288:	0c1b      	lsrs	r3, r3, #16
 800a28a:	eba7 0808 	sub.w	r8, r7, r8
 800a28e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a292:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a296:	fa1f f888 	uxth.w	r8, r8
 800a29a:	141f      	asrs	r7, r3, #16
 800a29c:	454d      	cmp	r5, r9
 800a29e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2a2:	f84a 3b04 	str.w	r3, [sl], #4
 800a2a6:	d8e7      	bhi.n	800a278 <__mdiff+0x7c>
 800a2a8:	1b2b      	subs	r3, r5, r4
 800a2aa:	3b15      	subs	r3, #21
 800a2ac:	f023 0303 	bic.w	r3, r3, #3
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	3415      	adds	r4, #21
 800a2b4:	42a5      	cmp	r5, r4
 800a2b6:	bf38      	it	cc
 800a2b8:	2304      	movcc	r3, #4
 800a2ba:	4419      	add	r1, r3
 800a2bc:	4473      	add	r3, lr
 800a2be:	469e      	mov	lr, r3
 800a2c0:	460d      	mov	r5, r1
 800a2c2:	4565      	cmp	r5, ip
 800a2c4:	d30e      	bcc.n	800a2e4 <__mdiff+0xe8>
 800a2c6:	f10c 0203 	add.w	r2, ip, #3
 800a2ca:	1a52      	subs	r2, r2, r1
 800a2cc:	f022 0203 	bic.w	r2, r2, #3
 800a2d0:	3903      	subs	r1, #3
 800a2d2:	458c      	cmp	ip, r1
 800a2d4:	bf38      	it	cc
 800a2d6:	2200      	movcc	r2, #0
 800a2d8:	441a      	add	r2, r3
 800a2da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a2de:	b17b      	cbz	r3, 800a300 <__mdiff+0x104>
 800a2e0:	6106      	str	r6, [r0, #16]
 800a2e2:	e7a5      	b.n	800a230 <__mdiff+0x34>
 800a2e4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a2e8:	fa17 f488 	uxtah	r4, r7, r8
 800a2ec:	1422      	asrs	r2, r4, #16
 800a2ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a2f2:	b2a4      	uxth	r4, r4
 800a2f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a2f8:	f84e 4b04 	str.w	r4, [lr], #4
 800a2fc:	1417      	asrs	r7, r2, #16
 800a2fe:	e7e0      	b.n	800a2c2 <__mdiff+0xc6>
 800a300:	3e01      	subs	r6, #1
 800a302:	e7ea      	b.n	800a2da <__mdiff+0xde>
 800a304:	0800b9fb 	.word	0x0800b9fb
 800a308:	0800ba0c 	.word	0x0800ba0c

0800a30c <__d2b>:
 800a30c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a310:	2101      	movs	r1, #1
 800a312:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 800a316:	4690      	mov	r8, r2
 800a318:	4699      	mov	r9, r3
 800a31a:	f7ff fcd5 	bl	8009cc8 <_Balloc>
 800a31e:	4604      	mov	r4, r0
 800a320:	b930      	cbnz	r0, 800a330 <__d2b+0x24>
 800a322:	4602      	mov	r2, r0
 800a324:	4b24      	ldr	r3, [pc, #144]	; (800a3b8 <__d2b+0xac>)
 800a326:	4825      	ldr	r0, [pc, #148]	; (800a3bc <__d2b+0xb0>)
 800a328:	f240 310a 	movw	r1, #778	; 0x30a
 800a32c:	f000 fa6e 	bl	800a80c <__assert_func>
 800a330:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a334:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a338:	bb2d      	cbnz	r5, 800a386 <__d2b+0x7a>
 800a33a:	f1b8 0200 	subs.w	r2, r8, #0
 800a33e:	9301      	str	r3, [sp, #4]
 800a340:	d026      	beq.n	800a390 <__d2b+0x84>
 800a342:	4668      	mov	r0, sp
 800a344:	9200      	str	r2, [sp, #0]
 800a346:	f7ff fd8b 	bl	8009e60 <__lo0bits>
 800a34a:	9900      	ldr	r1, [sp, #0]
 800a34c:	b1f0      	cbz	r0, 800a38c <__d2b+0x80>
 800a34e:	9a01      	ldr	r2, [sp, #4]
 800a350:	f1c0 0320 	rsb	r3, r0, #32
 800a354:	fa02 f303 	lsl.w	r3, r2, r3
 800a358:	430b      	orrs	r3, r1
 800a35a:	40c2      	lsrs	r2, r0
 800a35c:	6163      	str	r3, [r4, #20]
 800a35e:	9201      	str	r2, [sp, #4]
 800a360:	9b01      	ldr	r3, [sp, #4]
 800a362:	61a3      	str	r3, [r4, #24]
 800a364:	2b00      	cmp	r3, #0
 800a366:	bf14      	ite	ne
 800a368:	2202      	movne	r2, #2
 800a36a:	2201      	moveq	r2, #1
 800a36c:	6122      	str	r2, [r4, #16]
 800a36e:	b1c5      	cbz	r5, 800a3a2 <__d2b+0x96>
 800a370:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a374:	4405      	add	r5, r0
 800a376:	603d      	str	r5, [r7, #0]
 800a378:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a37c:	6030      	str	r0, [r6, #0]
 800a37e:	4620      	mov	r0, r4
 800a380:	b003      	add	sp, #12
 800a382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a38a:	e7d6      	b.n	800a33a <__d2b+0x2e>
 800a38c:	6161      	str	r1, [r4, #20]
 800a38e:	e7e7      	b.n	800a360 <__d2b+0x54>
 800a390:	a801      	add	r0, sp, #4
 800a392:	f7ff fd65 	bl	8009e60 <__lo0bits>
 800a396:	9b01      	ldr	r3, [sp, #4]
 800a398:	6163      	str	r3, [r4, #20]
 800a39a:	2201      	movs	r2, #1
 800a39c:	6122      	str	r2, [r4, #16]
 800a39e:	3020      	adds	r0, #32
 800a3a0:	e7e5      	b.n	800a36e <__d2b+0x62>
 800a3a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3aa:	6038      	str	r0, [r7, #0]
 800a3ac:	6918      	ldr	r0, [r3, #16]
 800a3ae:	f7ff fd37 	bl	8009e20 <__hi0bits>
 800a3b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3b6:	e7e1      	b.n	800a37c <__d2b+0x70>
 800a3b8:	0800b9fb 	.word	0x0800b9fb
 800a3bc:	0800ba0c 	.word	0x0800ba0c

0800a3c0 <_calloc_r>:
 800a3c0:	b513      	push	{r0, r1, r4, lr}
 800a3c2:	434a      	muls	r2, r1
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	9201      	str	r2, [sp, #4]
 800a3c8:	f000 f85a 	bl	800a480 <_malloc_r>
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	b118      	cbz	r0, 800a3d8 <_calloc_r+0x18>
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	f7fe f95e 	bl	8008694 <memset>
 800a3d8:	4620      	mov	r0, r4
 800a3da:	b002      	add	sp, #8
 800a3dc:	bd10      	pop	{r4, pc}
	...

0800a3e0 <_free_r>:
 800a3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	d048      	beq.n	800a478 <_free_r+0x98>
 800a3e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ea:	9001      	str	r0, [sp, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a3f2:	bfb8      	it	lt
 800a3f4:	18e4      	addlt	r4, r4, r3
 800a3f6:	f000 fa65 	bl	800a8c4 <__malloc_lock>
 800a3fa:	4a20      	ldr	r2, [pc, #128]	; (800a47c <_free_r+0x9c>)
 800a3fc:	9801      	ldr	r0, [sp, #4]
 800a3fe:	6813      	ldr	r3, [r2, #0]
 800a400:	4615      	mov	r5, r2
 800a402:	b933      	cbnz	r3, 800a412 <_free_r+0x32>
 800a404:	6063      	str	r3, [r4, #4]
 800a406:	6014      	str	r4, [r2, #0]
 800a408:	b003      	add	sp, #12
 800a40a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a40e:	f000 ba5f 	b.w	800a8d0 <__malloc_unlock>
 800a412:	42a3      	cmp	r3, r4
 800a414:	d90b      	bls.n	800a42e <_free_r+0x4e>
 800a416:	6821      	ldr	r1, [r4, #0]
 800a418:	1862      	adds	r2, r4, r1
 800a41a:	4293      	cmp	r3, r2
 800a41c:	bf04      	itt	eq
 800a41e:	681a      	ldreq	r2, [r3, #0]
 800a420:	685b      	ldreq	r3, [r3, #4]
 800a422:	6063      	str	r3, [r4, #4]
 800a424:	bf04      	itt	eq
 800a426:	1852      	addeq	r2, r2, r1
 800a428:	6022      	streq	r2, [r4, #0]
 800a42a:	602c      	str	r4, [r5, #0]
 800a42c:	e7ec      	b.n	800a408 <_free_r+0x28>
 800a42e:	461a      	mov	r2, r3
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	b10b      	cbz	r3, 800a438 <_free_r+0x58>
 800a434:	42a3      	cmp	r3, r4
 800a436:	d9fa      	bls.n	800a42e <_free_r+0x4e>
 800a438:	6811      	ldr	r1, [r2, #0]
 800a43a:	1855      	adds	r5, r2, r1
 800a43c:	42a5      	cmp	r5, r4
 800a43e:	d10b      	bne.n	800a458 <_free_r+0x78>
 800a440:	6824      	ldr	r4, [r4, #0]
 800a442:	4421      	add	r1, r4
 800a444:	1854      	adds	r4, r2, r1
 800a446:	42a3      	cmp	r3, r4
 800a448:	6011      	str	r1, [r2, #0]
 800a44a:	d1dd      	bne.n	800a408 <_free_r+0x28>
 800a44c:	681c      	ldr	r4, [r3, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	6053      	str	r3, [r2, #4]
 800a452:	4421      	add	r1, r4
 800a454:	6011      	str	r1, [r2, #0]
 800a456:	e7d7      	b.n	800a408 <_free_r+0x28>
 800a458:	d902      	bls.n	800a460 <_free_r+0x80>
 800a45a:	230c      	movs	r3, #12
 800a45c:	6003      	str	r3, [r0, #0]
 800a45e:	e7d3      	b.n	800a408 <_free_r+0x28>
 800a460:	6825      	ldr	r5, [r4, #0]
 800a462:	1961      	adds	r1, r4, r5
 800a464:	428b      	cmp	r3, r1
 800a466:	bf04      	itt	eq
 800a468:	6819      	ldreq	r1, [r3, #0]
 800a46a:	685b      	ldreq	r3, [r3, #4]
 800a46c:	6063      	str	r3, [r4, #4]
 800a46e:	bf04      	itt	eq
 800a470:	1949      	addeq	r1, r1, r5
 800a472:	6021      	streq	r1, [r4, #0]
 800a474:	6054      	str	r4, [r2, #4]
 800a476:	e7c7      	b.n	800a408 <_free_r+0x28>
 800a478:	b003      	add	sp, #12
 800a47a:	bd30      	pop	{r4, r5, pc}
 800a47c:	20014570 	.word	0x20014570

0800a480 <_malloc_r>:
 800a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a482:	1ccd      	adds	r5, r1, #3
 800a484:	f025 0503 	bic.w	r5, r5, #3
 800a488:	3508      	adds	r5, #8
 800a48a:	2d0c      	cmp	r5, #12
 800a48c:	bf38      	it	cc
 800a48e:	250c      	movcc	r5, #12
 800a490:	2d00      	cmp	r5, #0
 800a492:	4606      	mov	r6, r0
 800a494:	db01      	blt.n	800a49a <_malloc_r+0x1a>
 800a496:	42a9      	cmp	r1, r5
 800a498:	d903      	bls.n	800a4a2 <_malloc_r+0x22>
 800a49a:	230c      	movs	r3, #12
 800a49c:	6033      	str	r3, [r6, #0]
 800a49e:	2000      	movs	r0, #0
 800a4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a2:	f000 fa0f 	bl	800a8c4 <__malloc_lock>
 800a4a6:	4921      	ldr	r1, [pc, #132]	; (800a52c <_malloc_r+0xac>)
 800a4a8:	680a      	ldr	r2, [r1, #0]
 800a4aa:	4614      	mov	r4, r2
 800a4ac:	b99c      	cbnz	r4, 800a4d6 <_malloc_r+0x56>
 800a4ae:	4f20      	ldr	r7, [pc, #128]	; (800a530 <_malloc_r+0xb0>)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	b923      	cbnz	r3, 800a4be <_malloc_r+0x3e>
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f000 f998 	bl	800a7ec <_sbrk_r>
 800a4bc:	6038      	str	r0, [r7, #0]
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f000 f993 	bl	800a7ec <_sbrk_r>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	d123      	bne.n	800a512 <_malloc_r+0x92>
 800a4ca:	230c      	movs	r3, #12
 800a4cc:	6033      	str	r3, [r6, #0]
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f000 f9fe 	bl	800a8d0 <__malloc_unlock>
 800a4d4:	e7e3      	b.n	800a49e <_malloc_r+0x1e>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	1b5b      	subs	r3, r3, r5
 800a4da:	d417      	bmi.n	800a50c <_malloc_r+0x8c>
 800a4dc:	2b0b      	cmp	r3, #11
 800a4de:	d903      	bls.n	800a4e8 <_malloc_r+0x68>
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	441c      	add	r4, r3
 800a4e4:	6025      	str	r5, [r4, #0]
 800a4e6:	e004      	b.n	800a4f2 <_malloc_r+0x72>
 800a4e8:	6863      	ldr	r3, [r4, #4]
 800a4ea:	42a2      	cmp	r2, r4
 800a4ec:	bf0c      	ite	eq
 800a4ee:	600b      	streq	r3, [r1, #0]
 800a4f0:	6053      	strne	r3, [r2, #4]
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f000 f9ec 	bl	800a8d0 <__malloc_unlock>
 800a4f8:	f104 000b 	add.w	r0, r4, #11
 800a4fc:	1d23      	adds	r3, r4, #4
 800a4fe:	f020 0007 	bic.w	r0, r0, #7
 800a502:	1ac2      	subs	r2, r0, r3
 800a504:	d0cc      	beq.n	800a4a0 <_malloc_r+0x20>
 800a506:	1a1b      	subs	r3, r3, r0
 800a508:	50a3      	str	r3, [r4, r2]
 800a50a:	e7c9      	b.n	800a4a0 <_malloc_r+0x20>
 800a50c:	4622      	mov	r2, r4
 800a50e:	6864      	ldr	r4, [r4, #4]
 800a510:	e7cc      	b.n	800a4ac <_malloc_r+0x2c>
 800a512:	1cc4      	adds	r4, r0, #3
 800a514:	f024 0403 	bic.w	r4, r4, #3
 800a518:	42a0      	cmp	r0, r4
 800a51a:	d0e3      	beq.n	800a4e4 <_malloc_r+0x64>
 800a51c:	1a21      	subs	r1, r4, r0
 800a51e:	4630      	mov	r0, r6
 800a520:	f000 f964 	bl	800a7ec <_sbrk_r>
 800a524:	3001      	adds	r0, #1
 800a526:	d1dd      	bne.n	800a4e4 <_malloc_r+0x64>
 800a528:	e7cf      	b.n	800a4ca <_malloc_r+0x4a>
 800a52a:	bf00      	nop
 800a52c:	20014570 	.word	0x20014570
 800a530:	20014574 	.word	0x20014574

0800a534 <__ssputs_r>:
 800a534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a538:	688e      	ldr	r6, [r1, #8]
 800a53a:	429e      	cmp	r6, r3
 800a53c:	4682      	mov	sl, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	4690      	mov	r8, r2
 800a542:	461f      	mov	r7, r3
 800a544:	d838      	bhi.n	800a5b8 <__ssputs_r+0x84>
 800a546:	898a      	ldrh	r2, [r1, #12]
 800a548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a54c:	d032      	beq.n	800a5b4 <__ssputs_r+0x80>
 800a54e:	6825      	ldr	r5, [r4, #0]
 800a550:	6909      	ldr	r1, [r1, #16]
 800a552:	eba5 0901 	sub.w	r9, r5, r1
 800a556:	6965      	ldr	r5, [r4, #20]
 800a558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a55c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a560:	3301      	adds	r3, #1
 800a562:	444b      	add	r3, r9
 800a564:	106d      	asrs	r5, r5, #1
 800a566:	429d      	cmp	r5, r3
 800a568:	bf38      	it	cc
 800a56a:	461d      	movcc	r5, r3
 800a56c:	0553      	lsls	r3, r2, #21
 800a56e:	d531      	bpl.n	800a5d4 <__ssputs_r+0xa0>
 800a570:	4629      	mov	r1, r5
 800a572:	f7ff ff85 	bl	800a480 <_malloc_r>
 800a576:	4606      	mov	r6, r0
 800a578:	b950      	cbnz	r0, 800a590 <__ssputs_r+0x5c>
 800a57a:	230c      	movs	r3, #12
 800a57c:	f8ca 3000 	str.w	r3, [sl]
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a590:	6921      	ldr	r1, [r4, #16]
 800a592:	464a      	mov	r2, r9
 800a594:	f7fe f870 	bl	8008678 <memcpy>
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	6126      	str	r6, [r4, #16]
 800a5a6:	6165      	str	r5, [r4, #20]
 800a5a8:	444e      	add	r6, r9
 800a5aa:	eba5 0509 	sub.w	r5, r5, r9
 800a5ae:	6026      	str	r6, [r4, #0]
 800a5b0:	60a5      	str	r5, [r4, #8]
 800a5b2:	463e      	mov	r6, r7
 800a5b4:	42be      	cmp	r6, r7
 800a5b6:	d900      	bls.n	800a5ba <__ssputs_r+0x86>
 800a5b8:	463e      	mov	r6, r7
 800a5ba:	4632      	mov	r2, r6
 800a5bc:	6820      	ldr	r0, [r4, #0]
 800a5be:	4641      	mov	r1, r8
 800a5c0:	f000 f966 	bl	800a890 <memmove>
 800a5c4:	68a3      	ldr	r3, [r4, #8]
 800a5c6:	6822      	ldr	r2, [r4, #0]
 800a5c8:	1b9b      	subs	r3, r3, r6
 800a5ca:	4432      	add	r2, r6
 800a5cc:	60a3      	str	r3, [r4, #8]
 800a5ce:	6022      	str	r2, [r4, #0]
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	e7db      	b.n	800a58c <__ssputs_r+0x58>
 800a5d4:	462a      	mov	r2, r5
 800a5d6:	f000 f981 	bl	800a8dc <_realloc_r>
 800a5da:	4606      	mov	r6, r0
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d1e1      	bne.n	800a5a4 <__ssputs_r+0x70>
 800a5e0:	6921      	ldr	r1, [r4, #16]
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	f7ff fefc 	bl	800a3e0 <_free_r>
 800a5e8:	e7c7      	b.n	800a57a <__ssputs_r+0x46>
	...

0800a5ec <_svfiprintf_r>:
 800a5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f0:	4698      	mov	r8, r3
 800a5f2:	898b      	ldrh	r3, [r1, #12]
 800a5f4:	061b      	lsls	r3, r3, #24
 800a5f6:	b09d      	sub	sp, #116	; 0x74
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	4614      	mov	r4, r2
 800a5fe:	d50e      	bpl.n	800a61e <_svfiprintf_r+0x32>
 800a600:	690b      	ldr	r3, [r1, #16]
 800a602:	b963      	cbnz	r3, 800a61e <_svfiprintf_r+0x32>
 800a604:	2140      	movs	r1, #64	; 0x40
 800a606:	f7ff ff3b 	bl	800a480 <_malloc_r>
 800a60a:	6028      	str	r0, [r5, #0]
 800a60c:	6128      	str	r0, [r5, #16]
 800a60e:	b920      	cbnz	r0, 800a61a <_svfiprintf_r+0x2e>
 800a610:	230c      	movs	r3, #12
 800a612:	603b      	str	r3, [r7, #0]
 800a614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a618:	e0d1      	b.n	800a7be <_svfiprintf_r+0x1d2>
 800a61a:	2340      	movs	r3, #64	; 0x40
 800a61c:	616b      	str	r3, [r5, #20]
 800a61e:	2300      	movs	r3, #0
 800a620:	9309      	str	r3, [sp, #36]	; 0x24
 800a622:	2320      	movs	r3, #32
 800a624:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a628:	f8cd 800c 	str.w	r8, [sp, #12]
 800a62c:	2330      	movs	r3, #48	; 0x30
 800a62e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7d8 <_svfiprintf_r+0x1ec>
 800a632:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a636:	f04f 0901 	mov.w	r9, #1
 800a63a:	4623      	mov	r3, r4
 800a63c:	469a      	mov	sl, r3
 800a63e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a642:	b10a      	cbz	r2, 800a648 <_svfiprintf_r+0x5c>
 800a644:	2a25      	cmp	r2, #37	; 0x25
 800a646:	d1f9      	bne.n	800a63c <_svfiprintf_r+0x50>
 800a648:	ebba 0b04 	subs.w	fp, sl, r4
 800a64c:	d00b      	beq.n	800a666 <_svfiprintf_r+0x7a>
 800a64e:	465b      	mov	r3, fp
 800a650:	4622      	mov	r2, r4
 800a652:	4629      	mov	r1, r5
 800a654:	4638      	mov	r0, r7
 800a656:	f7ff ff6d 	bl	800a534 <__ssputs_r>
 800a65a:	3001      	adds	r0, #1
 800a65c:	f000 80aa 	beq.w	800a7b4 <_svfiprintf_r+0x1c8>
 800a660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a662:	445a      	add	r2, fp
 800a664:	9209      	str	r2, [sp, #36]	; 0x24
 800a666:	f89a 3000 	ldrb.w	r3, [sl]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 80a2 	beq.w	800a7b4 <_svfiprintf_r+0x1c8>
 800a670:	2300      	movs	r3, #0
 800a672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a67a:	f10a 0a01 	add.w	sl, sl, #1
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	9307      	str	r3, [sp, #28]
 800a682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a686:	931a      	str	r3, [sp, #104]	; 0x68
 800a688:	4654      	mov	r4, sl
 800a68a:	2205      	movs	r2, #5
 800a68c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a690:	4851      	ldr	r0, [pc, #324]	; (800a7d8 <_svfiprintf_r+0x1ec>)
 800a692:	f7f5 fe05 	bl	80002a0 <memchr>
 800a696:	9a04      	ldr	r2, [sp, #16]
 800a698:	b9d8      	cbnz	r0, 800a6d2 <_svfiprintf_r+0xe6>
 800a69a:	06d0      	lsls	r0, r2, #27
 800a69c:	bf44      	itt	mi
 800a69e:	2320      	movmi	r3, #32
 800a6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a4:	0711      	lsls	r1, r2, #28
 800a6a6:	bf44      	itt	mi
 800a6a8:	232b      	movmi	r3, #43	; 0x2b
 800a6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b4:	d015      	beq.n	800a6e2 <_svfiprintf_r+0xf6>
 800a6b6:	9a07      	ldr	r2, [sp, #28]
 800a6b8:	4654      	mov	r4, sl
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	f04f 0c0a 	mov.w	ip, #10
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6c6:	3b30      	subs	r3, #48	; 0x30
 800a6c8:	2b09      	cmp	r3, #9
 800a6ca:	d94e      	bls.n	800a76a <_svfiprintf_r+0x17e>
 800a6cc:	b1b0      	cbz	r0, 800a6fc <_svfiprintf_r+0x110>
 800a6ce:	9207      	str	r2, [sp, #28]
 800a6d0:	e014      	b.n	800a6fc <_svfiprintf_r+0x110>
 800a6d2:	eba0 0308 	sub.w	r3, r0, r8
 800a6d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	9304      	str	r3, [sp, #16]
 800a6de:	46a2      	mov	sl, r4
 800a6e0:	e7d2      	b.n	800a688 <_svfiprintf_r+0x9c>
 800a6e2:	9b03      	ldr	r3, [sp, #12]
 800a6e4:	1d19      	adds	r1, r3, #4
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	9103      	str	r1, [sp, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bfbb      	ittet	lt
 800a6ee:	425b      	neglt	r3, r3
 800a6f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a6f4:	9307      	strge	r3, [sp, #28]
 800a6f6:	9307      	strlt	r3, [sp, #28]
 800a6f8:	bfb8      	it	lt
 800a6fa:	9204      	strlt	r2, [sp, #16]
 800a6fc:	7823      	ldrb	r3, [r4, #0]
 800a6fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a700:	d10c      	bne.n	800a71c <_svfiprintf_r+0x130>
 800a702:	7863      	ldrb	r3, [r4, #1]
 800a704:	2b2a      	cmp	r3, #42	; 0x2a
 800a706:	d135      	bne.n	800a774 <_svfiprintf_r+0x188>
 800a708:	9b03      	ldr	r3, [sp, #12]
 800a70a:	1d1a      	adds	r2, r3, #4
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	9203      	str	r2, [sp, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	bfb8      	it	lt
 800a714:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a718:	3402      	adds	r4, #2
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7e8 <_svfiprintf_r+0x1fc>
 800a720:	7821      	ldrb	r1, [r4, #0]
 800a722:	2203      	movs	r2, #3
 800a724:	4650      	mov	r0, sl
 800a726:	f7f5 fdbb 	bl	80002a0 <memchr>
 800a72a:	b140      	cbz	r0, 800a73e <_svfiprintf_r+0x152>
 800a72c:	2340      	movs	r3, #64	; 0x40
 800a72e:	eba0 000a 	sub.w	r0, r0, sl
 800a732:	fa03 f000 	lsl.w	r0, r3, r0
 800a736:	9b04      	ldr	r3, [sp, #16]
 800a738:	4303      	orrs	r3, r0
 800a73a:	3401      	adds	r4, #1
 800a73c:	9304      	str	r3, [sp, #16]
 800a73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a742:	4826      	ldr	r0, [pc, #152]	; (800a7dc <_svfiprintf_r+0x1f0>)
 800a744:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a748:	2206      	movs	r2, #6
 800a74a:	f7f5 fda9 	bl	80002a0 <memchr>
 800a74e:	2800      	cmp	r0, #0
 800a750:	d038      	beq.n	800a7c4 <_svfiprintf_r+0x1d8>
 800a752:	4b23      	ldr	r3, [pc, #140]	; (800a7e0 <_svfiprintf_r+0x1f4>)
 800a754:	bb1b      	cbnz	r3, 800a79e <_svfiprintf_r+0x1b2>
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	3307      	adds	r3, #7
 800a75a:	f023 0307 	bic.w	r3, r3, #7
 800a75e:	3308      	adds	r3, #8
 800a760:	9303      	str	r3, [sp, #12]
 800a762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a764:	4433      	add	r3, r6
 800a766:	9309      	str	r3, [sp, #36]	; 0x24
 800a768:	e767      	b.n	800a63a <_svfiprintf_r+0x4e>
 800a76a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a76e:	460c      	mov	r4, r1
 800a770:	2001      	movs	r0, #1
 800a772:	e7a5      	b.n	800a6c0 <_svfiprintf_r+0xd4>
 800a774:	2300      	movs	r3, #0
 800a776:	3401      	adds	r4, #1
 800a778:	9305      	str	r3, [sp, #20]
 800a77a:	4619      	mov	r1, r3
 800a77c:	f04f 0c0a 	mov.w	ip, #10
 800a780:	4620      	mov	r0, r4
 800a782:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a786:	3a30      	subs	r2, #48	; 0x30
 800a788:	2a09      	cmp	r2, #9
 800a78a:	d903      	bls.n	800a794 <_svfiprintf_r+0x1a8>
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d0c5      	beq.n	800a71c <_svfiprintf_r+0x130>
 800a790:	9105      	str	r1, [sp, #20]
 800a792:	e7c3      	b.n	800a71c <_svfiprintf_r+0x130>
 800a794:	fb0c 2101 	mla	r1, ip, r1, r2
 800a798:	4604      	mov	r4, r0
 800a79a:	2301      	movs	r3, #1
 800a79c:	e7f0      	b.n	800a780 <_svfiprintf_r+0x194>
 800a79e:	ab03      	add	r3, sp, #12
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	462a      	mov	r2, r5
 800a7a4:	4b0f      	ldr	r3, [pc, #60]	; (800a7e4 <_svfiprintf_r+0x1f8>)
 800a7a6:	a904      	add	r1, sp, #16
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f7fe f81b 	bl	80087e4 <_printf_float>
 800a7ae:	1c42      	adds	r2, r0, #1
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	d1d6      	bne.n	800a762 <_svfiprintf_r+0x176>
 800a7b4:	89ab      	ldrh	r3, [r5, #12]
 800a7b6:	065b      	lsls	r3, r3, #25
 800a7b8:	f53f af2c 	bmi.w	800a614 <_svfiprintf_r+0x28>
 800a7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7be:	b01d      	add	sp, #116	; 0x74
 800a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c4:	ab03      	add	r3, sp, #12
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	462a      	mov	r2, r5
 800a7ca:	4b06      	ldr	r3, [pc, #24]	; (800a7e4 <_svfiprintf_r+0x1f8>)
 800a7cc:	a904      	add	r1, sp, #16
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	f7fe faae 	bl	8008d30 <_printf_i>
 800a7d4:	e7eb      	b.n	800a7ae <_svfiprintf_r+0x1c2>
 800a7d6:	bf00      	nop
 800a7d8:	0800bb6c 	.word	0x0800bb6c
 800a7dc:	0800bb76 	.word	0x0800bb76
 800a7e0:	080087e5 	.word	0x080087e5
 800a7e4:	0800a535 	.word	0x0800a535
 800a7e8:	0800bb72 	.word	0x0800bb72

0800a7ec <_sbrk_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d06      	ldr	r5, [pc, #24]	; (800a808 <_sbrk_r+0x1c>)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	f7fd fea6 	bl	8008548 <_sbrk>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d102      	bne.n	800a806 <_sbrk_r+0x1a>
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	b103      	cbz	r3, 800a806 <_sbrk_r+0x1a>
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	20014930 	.word	0x20014930

0800a80c <__assert_func>:
 800a80c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a80e:	4614      	mov	r4, r2
 800a810:	461a      	mov	r2, r3
 800a812:	4b09      	ldr	r3, [pc, #36]	; (800a838 <__assert_func+0x2c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4605      	mov	r5, r0
 800a818:	68d8      	ldr	r0, [r3, #12]
 800a81a:	b14c      	cbz	r4, 800a830 <__assert_func+0x24>
 800a81c:	4b07      	ldr	r3, [pc, #28]	; (800a83c <__assert_func+0x30>)
 800a81e:	9100      	str	r1, [sp, #0]
 800a820:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a824:	4906      	ldr	r1, [pc, #24]	; (800a840 <__assert_func+0x34>)
 800a826:	462b      	mov	r3, r5
 800a828:	f000 f80e 	bl	800a848 <fiprintf>
 800a82c:	f000 faa4 	bl	800ad78 <abort>
 800a830:	4b04      	ldr	r3, [pc, #16]	; (800a844 <__assert_func+0x38>)
 800a832:	461c      	mov	r4, r3
 800a834:	e7f3      	b.n	800a81e <__assert_func+0x12>
 800a836:	bf00      	nop
 800a838:	2000003c 	.word	0x2000003c
 800a83c:	0800bb7d 	.word	0x0800bb7d
 800a840:	0800bb8a 	.word	0x0800bb8a
 800a844:	0800bbb8 	.word	0x0800bbb8

0800a848 <fiprintf>:
 800a848:	b40e      	push	{r1, r2, r3}
 800a84a:	b503      	push	{r0, r1, lr}
 800a84c:	4601      	mov	r1, r0
 800a84e:	ab03      	add	r3, sp, #12
 800a850:	4805      	ldr	r0, [pc, #20]	; (800a868 <fiprintf+0x20>)
 800a852:	f853 2b04 	ldr.w	r2, [r3], #4
 800a856:	6800      	ldr	r0, [r0, #0]
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	f000 f88f 	bl	800a97c <_vfiprintf_r>
 800a85e:	b002      	add	sp, #8
 800a860:	f85d eb04 	ldr.w	lr, [sp], #4
 800a864:	b003      	add	sp, #12
 800a866:	4770      	bx	lr
 800a868:	2000003c 	.word	0x2000003c

0800a86c <__ascii_mbtowc>:
 800a86c:	b082      	sub	sp, #8
 800a86e:	b901      	cbnz	r1, 800a872 <__ascii_mbtowc+0x6>
 800a870:	a901      	add	r1, sp, #4
 800a872:	b142      	cbz	r2, 800a886 <__ascii_mbtowc+0x1a>
 800a874:	b14b      	cbz	r3, 800a88a <__ascii_mbtowc+0x1e>
 800a876:	7813      	ldrb	r3, [r2, #0]
 800a878:	600b      	str	r3, [r1, #0]
 800a87a:	7812      	ldrb	r2, [r2, #0]
 800a87c:	1e10      	subs	r0, r2, #0
 800a87e:	bf18      	it	ne
 800a880:	2001      	movne	r0, #1
 800a882:	b002      	add	sp, #8
 800a884:	4770      	bx	lr
 800a886:	4610      	mov	r0, r2
 800a888:	e7fb      	b.n	800a882 <__ascii_mbtowc+0x16>
 800a88a:	f06f 0001 	mvn.w	r0, #1
 800a88e:	e7f8      	b.n	800a882 <__ascii_mbtowc+0x16>

0800a890 <memmove>:
 800a890:	4288      	cmp	r0, r1
 800a892:	b510      	push	{r4, lr}
 800a894:	eb01 0402 	add.w	r4, r1, r2
 800a898:	d902      	bls.n	800a8a0 <memmove+0x10>
 800a89a:	4284      	cmp	r4, r0
 800a89c:	4623      	mov	r3, r4
 800a89e:	d807      	bhi.n	800a8b0 <memmove+0x20>
 800a8a0:	1e43      	subs	r3, r0, #1
 800a8a2:	42a1      	cmp	r1, r4
 800a8a4:	d008      	beq.n	800a8b8 <memmove+0x28>
 800a8a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8ae:	e7f8      	b.n	800a8a2 <memmove+0x12>
 800a8b0:	4402      	add	r2, r0
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	428a      	cmp	r2, r1
 800a8b6:	d100      	bne.n	800a8ba <memmove+0x2a>
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8c2:	e7f7      	b.n	800a8b4 <memmove+0x24>

0800a8c4 <__malloc_lock>:
 800a8c4:	4801      	ldr	r0, [pc, #4]	; (800a8cc <__malloc_lock+0x8>)
 800a8c6:	f000 bc17 	b.w	800b0f8 <__retarget_lock_acquire_recursive>
 800a8ca:	bf00      	nop
 800a8cc:	20014938 	.word	0x20014938

0800a8d0 <__malloc_unlock>:
 800a8d0:	4801      	ldr	r0, [pc, #4]	; (800a8d8 <__malloc_unlock+0x8>)
 800a8d2:	f000 bc12 	b.w	800b0fa <__retarget_lock_release_recursive>
 800a8d6:	bf00      	nop
 800a8d8:	20014938 	.word	0x20014938

0800a8dc <_realloc_r>:
 800a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8de:	4607      	mov	r7, r0
 800a8e0:	4614      	mov	r4, r2
 800a8e2:	460e      	mov	r6, r1
 800a8e4:	b921      	cbnz	r1, 800a8f0 <_realloc_r+0x14>
 800a8e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	f7ff bdc8 	b.w	800a480 <_malloc_r>
 800a8f0:	b922      	cbnz	r2, 800a8fc <_realloc_r+0x20>
 800a8f2:	f7ff fd75 	bl	800a3e0 <_free_r>
 800a8f6:	4625      	mov	r5, r4
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fc:	f000 fc62 	bl	800b1c4 <_malloc_usable_size_r>
 800a900:	42a0      	cmp	r0, r4
 800a902:	d20f      	bcs.n	800a924 <_realloc_r+0x48>
 800a904:	4621      	mov	r1, r4
 800a906:	4638      	mov	r0, r7
 800a908:	f7ff fdba 	bl	800a480 <_malloc_r>
 800a90c:	4605      	mov	r5, r0
 800a90e:	2800      	cmp	r0, #0
 800a910:	d0f2      	beq.n	800a8f8 <_realloc_r+0x1c>
 800a912:	4631      	mov	r1, r6
 800a914:	4622      	mov	r2, r4
 800a916:	f7fd feaf 	bl	8008678 <memcpy>
 800a91a:	4631      	mov	r1, r6
 800a91c:	4638      	mov	r0, r7
 800a91e:	f7ff fd5f 	bl	800a3e0 <_free_r>
 800a922:	e7e9      	b.n	800a8f8 <_realloc_r+0x1c>
 800a924:	4635      	mov	r5, r6
 800a926:	e7e7      	b.n	800a8f8 <_realloc_r+0x1c>

0800a928 <__sfputc_r>:
 800a928:	6893      	ldr	r3, [r2, #8]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	b410      	push	{r4}
 800a930:	6093      	str	r3, [r2, #8]
 800a932:	da08      	bge.n	800a946 <__sfputc_r+0x1e>
 800a934:	6994      	ldr	r4, [r2, #24]
 800a936:	42a3      	cmp	r3, r4
 800a938:	db01      	blt.n	800a93e <__sfputc_r+0x16>
 800a93a:	290a      	cmp	r1, #10
 800a93c:	d103      	bne.n	800a946 <__sfputc_r+0x1e>
 800a93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a942:	f000 b94b 	b.w	800abdc <__swbuf_r>
 800a946:	6813      	ldr	r3, [r2, #0]
 800a948:	1c58      	adds	r0, r3, #1
 800a94a:	6010      	str	r0, [r2, #0]
 800a94c:	7019      	strb	r1, [r3, #0]
 800a94e:	4608      	mov	r0, r1
 800a950:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <__sfputs_r>:
 800a956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a958:	4606      	mov	r6, r0
 800a95a:	460f      	mov	r7, r1
 800a95c:	4614      	mov	r4, r2
 800a95e:	18d5      	adds	r5, r2, r3
 800a960:	42ac      	cmp	r4, r5
 800a962:	d101      	bne.n	800a968 <__sfputs_r+0x12>
 800a964:	2000      	movs	r0, #0
 800a966:	e007      	b.n	800a978 <__sfputs_r+0x22>
 800a968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a96c:	463a      	mov	r2, r7
 800a96e:	4630      	mov	r0, r6
 800a970:	f7ff ffda 	bl	800a928 <__sfputc_r>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d1f3      	bne.n	800a960 <__sfputs_r+0xa>
 800a978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a97c <_vfiprintf_r>:
 800a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	460d      	mov	r5, r1
 800a982:	b09d      	sub	sp, #116	; 0x74
 800a984:	4614      	mov	r4, r2
 800a986:	4698      	mov	r8, r3
 800a988:	4606      	mov	r6, r0
 800a98a:	b118      	cbz	r0, 800a994 <_vfiprintf_r+0x18>
 800a98c:	6983      	ldr	r3, [r0, #24]
 800a98e:	b90b      	cbnz	r3, 800a994 <_vfiprintf_r+0x18>
 800a990:	f000 fb14 	bl	800afbc <__sinit>
 800a994:	4b89      	ldr	r3, [pc, #548]	; (800abbc <_vfiprintf_r+0x240>)
 800a996:	429d      	cmp	r5, r3
 800a998:	d11b      	bne.n	800a9d2 <_vfiprintf_r+0x56>
 800a99a:	6875      	ldr	r5, [r6, #4]
 800a99c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a99e:	07d9      	lsls	r1, r3, #31
 800a9a0:	d405      	bmi.n	800a9ae <_vfiprintf_r+0x32>
 800a9a2:	89ab      	ldrh	r3, [r5, #12]
 800a9a4:	059a      	lsls	r2, r3, #22
 800a9a6:	d402      	bmi.n	800a9ae <_vfiprintf_r+0x32>
 800a9a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9aa:	f000 fba5 	bl	800b0f8 <__retarget_lock_acquire_recursive>
 800a9ae:	89ab      	ldrh	r3, [r5, #12]
 800a9b0:	071b      	lsls	r3, r3, #28
 800a9b2:	d501      	bpl.n	800a9b8 <_vfiprintf_r+0x3c>
 800a9b4:	692b      	ldr	r3, [r5, #16]
 800a9b6:	b9eb      	cbnz	r3, 800a9f4 <_vfiprintf_r+0x78>
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 f96e 	bl	800ac9c <__swsetup_r>
 800a9c0:	b1c0      	cbz	r0, 800a9f4 <_vfiprintf_r+0x78>
 800a9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9c4:	07dc      	lsls	r4, r3, #31
 800a9c6:	d50e      	bpl.n	800a9e6 <_vfiprintf_r+0x6a>
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9cc:	b01d      	add	sp, #116	; 0x74
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	4b7b      	ldr	r3, [pc, #492]	; (800abc0 <_vfiprintf_r+0x244>)
 800a9d4:	429d      	cmp	r5, r3
 800a9d6:	d101      	bne.n	800a9dc <_vfiprintf_r+0x60>
 800a9d8:	68b5      	ldr	r5, [r6, #8]
 800a9da:	e7df      	b.n	800a99c <_vfiprintf_r+0x20>
 800a9dc:	4b79      	ldr	r3, [pc, #484]	; (800abc4 <_vfiprintf_r+0x248>)
 800a9de:	429d      	cmp	r5, r3
 800a9e0:	bf08      	it	eq
 800a9e2:	68f5      	ldreq	r5, [r6, #12]
 800a9e4:	e7da      	b.n	800a99c <_vfiprintf_r+0x20>
 800a9e6:	89ab      	ldrh	r3, [r5, #12]
 800a9e8:	0598      	lsls	r0, r3, #22
 800a9ea:	d4ed      	bmi.n	800a9c8 <_vfiprintf_r+0x4c>
 800a9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ee:	f000 fb84 	bl	800b0fa <__retarget_lock_release_recursive>
 800a9f2:	e7e9      	b.n	800a9c8 <_vfiprintf_r+0x4c>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f8:	2320      	movs	r3, #32
 800a9fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa02:	2330      	movs	r3, #48	; 0x30
 800aa04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800abc8 <_vfiprintf_r+0x24c>
 800aa08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa0c:	f04f 0901 	mov.w	r9, #1
 800aa10:	4623      	mov	r3, r4
 800aa12:	469a      	mov	sl, r3
 800aa14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa18:	b10a      	cbz	r2, 800aa1e <_vfiprintf_r+0xa2>
 800aa1a:	2a25      	cmp	r2, #37	; 0x25
 800aa1c:	d1f9      	bne.n	800aa12 <_vfiprintf_r+0x96>
 800aa1e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa22:	d00b      	beq.n	800aa3c <_vfiprintf_r+0xc0>
 800aa24:	465b      	mov	r3, fp
 800aa26:	4622      	mov	r2, r4
 800aa28:	4629      	mov	r1, r5
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f7ff ff93 	bl	800a956 <__sfputs_r>
 800aa30:	3001      	adds	r0, #1
 800aa32:	f000 80aa 	beq.w	800ab8a <_vfiprintf_r+0x20e>
 800aa36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa38:	445a      	add	r2, fp
 800aa3a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa3c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f000 80a2 	beq.w	800ab8a <_vfiprintf_r+0x20e>
 800aa46:	2300      	movs	r3, #0
 800aa48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa50:	f10a 0a01 	add.w	sl, sl, #1
 800aa54:	9304      	str	r3, [sp, #16]
 800aa56:	9307      	str	r3, [sp, #28]
 800aa58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa5c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa5e:	4654      	mov	r4, sl
 800aa60:	2205      	movs	r2, #5
 800aa62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa66:	4858      	ldr	r0, [pc, #352]	; (800abc8 <_vfiprintf_r+0x24c>)
 800aa68:	f7f5 fc1a 	bl	80002a0 <memchr>
 800aa6c:	9a04      	ldr	r2, [sp, #16]
 800aa6e:	b9d8      	cbnz	r0, 800aaa8 <_vfiprintf_r+0x12c>
 800aa70:	06d1      	lsls	r1, r2, #27
 800aa72:	bf44      	itt	mi
 800aa74:	2320      	movmi	r3, #32
 800aa76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa7a:	0713      	lsls	r3, r2, #28
 800aa7c:	bf44      	itt	mi
 800aa7e:	232b      	movmi	r3, #43	; 0x2b
 800aa80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa84:	f89a 3000 	ldrb.w	r3, [sl]
 800aa88:	2b2a      	cmp	r3, #42	; 0x2a
 800aa8a:	d015      	beq.n	800aab8 <_vfiprintf_r+0x13c>
 800aa8c:	9a07      	ldr	r2, [sp, #28]
 800aa8e:	4654      	mov	r4, sl
 800aa90:	2000      	movs	r0, #0
 800aa92:	f04f 0c0a 	mov.w	ip, #10
 800aa96:	4621      	mov	r1, r4
 800aa98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa9c:	3b30      	subs	r3, #48	; 0x30
 800aa9e:	2b09      	cmp	r3, #9
 800aaa0:	d94e      	bls.n	800ab40 <_vfiprintf_r+0x1c4>
 800aaa2:	b1b0      	cbz	r0, 800aad2 <_vfiprintf_r+0x156>
 800aaa4:	9207      	str	r2, [sp, #28]
 800aaa6:	e014      	b.n	800aad2 <_vfiprintf_r+0x156>
 800aaa8:	eba0 0308 	sub.w	r3, r0, r8
 800aaac:	fa09 f303 	lsl.w	r3, r9, r3
 800aab0:	4313      	orrs	r3, r2
 800aab2:	9304      	str	r3, [sp, #16]
 800aab4:	46a2      	mov	sl, r4
 800aab6:	e7d2      	b.n	800aa5e <_vfiprintf_r+0xe2>
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	1d19      	adds	r1, r3, #4
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	9103      	str	r1, [sp, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	bfbb      	ittet	lt
 800aac4:	425b      	neglt	r3, r3
 800aac6:	f042 0202 	orrlt.w	r2, r2, #2
 800aaca:	9307      	strge	r3, [sp, #28]
 800aacc:	9307      	strlt	r3, [sp, #28]
 800aace:	bfb8      	it	lt
 800aad0:	9204      	strlt	r2, [sp, #16]
 800aad2:	7823      	ldrb	r3, [r4, #0]
 800aad4:	2b2e      	cmp	r3, #46	; 0x2e
 800aad6:	d10c      	bne.n	800aaf2 <_vfiprintf_r+0x176>
 800aad8:	7863      	ldrb	r3, [r4, #1]
 800aada:	2b2a      	cmp	r3, #42	; 0x2a
 800aadc:	d135      	bne.n	800ab4a <_vfiprintf_r+0x1ce>
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	1d1a      	adds	r2, r3, #4
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	9203      	str	r2, [sp, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	bfb8      	it	lt
 800aaea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aaee:	3402      	adds	r4, #2
 800aaf0:	9305      	str	r3, [sp, #20]
 800aaf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800abd8 <_vfiprintf_r+0x25c>
 800aaf6:	7821      	ldrb	r1, [r4, #0]
 800aaf8:	2203      	movs	r2, #3
 800aafa:	4650      	mov	r0, sl
 800aafc:	f7f5 fbd0 	bl	80002a0 <memchr>
 800ab00:	b140      	cbz	r0, 800ab14 <_vfiprintf_r+0x198>
 800ab02:	2340      	movs	r3, #64	; 0x40
 800ab04:	eba0 000a 	sub.w	r0, r0, sl
 800ab08:	fa03 f000 	lsl.w	r0, r3, r0
 800ab0c:	9b04      	ldr	r3, [sp, #16]
 800ab0e:	4303      	orrs	r3, r0
 800ab10:	3401      	adds	r4, #1
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab18:	482c      	ldr	r0, [pc, #176]	; (800abcc <_vfiprintf_r+0x250>)
 800ab1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab1e:	2206      	movs	r2, #6
 800ab20:	f7f5 fbbe 	bl	80002a0 <memchr>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d03f      	beq.n	800aba8 <_vfiprintf_r+0x22c>
 800ab28:	4b29      	ldr	r3, [pc, #164]	; (800abd0 <_vfiprintf_r+0x254>)
 800ab2a:	bb1b      	cbnz	r3, 800ab74 <_vfiprintf_r+0x1f8>
 800ab2c:	9b03      	ldr	r3, [sp, #12]
 800ab2e:	3307      	adds	r3, #7
 800ab30:	f023 0307 	bic.w	r3, r3, #7
 800ab34:	3308      	adds	r3, #8
 800ab36:	9303      	str	r3, [sp, #12]
 800ab38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab3a:	443b      	add	r3, r7
 800ab3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab3e:	e767      	b.n	800aa10 <_vfiprintf_r+0x94>
 800ab40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab44:	460c      	mov	r4, r1
 800ab46:	2001      	movs	r0, #1
 800ab48:	e7a5      	b.n	800aa96 <_vfiprintf_r+0x11a>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	3401      	adds	r4, #1
 800ab4e:	9305      	str	r3, [sp, #20]
 800ab50:	4619      	mov	r1, r3
 800ab52:	f04f 0c0a 	mov.w	ip, #10
 800ab56:	4620      	mov	r0, r4
 800ab58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab5c:	3a30      	subs	r2, #48	; 0x30
 800ab5e:	2a09      	cmp	r2, #9
 800ab60:	d903      	bls.n	800ab6a <_vfiprintf_r+0x1ee>
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d0c5      	beq.n	800aaf2 <_vfiprintf_r+0x176>
 800ab66:	9105      	str	r1, [sp, #20]
 800ab68:	e7c3      	b.n	800aaf2 <_vfiprintf_r+0x176>
 800ab6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab6e:	4604      	mov	r4, r0
 800ab70:	2301      	movs	r3, #1
 800ab72:	e7f0      	b.n	800ab56 <_vfiprintf_r+0x1da>
 800ab74:	ab03      	add	r3, sp, #12
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	462a      	mov	r2, r5
 800ab7a:	4b16      	ldr	r3, [pc, #88]	; (800abd4 <_vfiprintf_r+0x258>)
 800ab7c:	a904      	add	r1, sp, #16
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f7fd fe30 	bl	80087e4 <_printf_float>
 800ab84:	4607      	mov	r7, r0
 800ab86:	1c78      	adds	r0, r7, #1
 800ab88:	d1d6      	bne.n	800ab38 <_vfiprintf_r+0x1bc>
 800ab8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab8c:	07d9      	lsls	r1, r3, #31
 800ab8e:	d405      	bmi.n	800ab9c <_vfiprintf_r+0x220>
 800ab90:	89ab      	ldrh	r3, [r5, #12]
 800ab92:	059a      	lsls	r2, r3, #22
 800ab94:	d402      	bmi.n	800ab9c <_vfiprintf_r+0x220>
 800ab96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab98:	f000 faaf 	bl	800b0fa <__retarget_lock_release_recursive>
 800ab9c:	89ab      	ldrh	r3, [r5, #12]
 800ab9e:	065b      	lsls	r3, r3, #25
 800aba0:	f53f af12 	bmi.w	800a9c8 <_vfiprintf_r+0x4c>
 800aba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aba6:	e711      	b.n	800a9cc <_vfiprintf_r+0x50>
 800aba8:	ab03      	add	r3, sp, #12
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	462a      	mov	r2, r5
 800abae:	4b09      	ldr	r3, [pc, #36]	; (800abd4 <_vfiprintf_r+0x258>)
 800abb0:	a904      	add	r1, sp, #16
 800abb2:	4630      	mov	r0, r6
 800abb4:	f7fe f8bc 	bl	8008d30 <_printf_i>
 800abb8:	e7e4      	b.n	800ab84 <_vfiprintf_r+0x208>
 800abba:	bf00      	nop
 800abbc:	0800bce4 	.word	0x0800bce4
 800abc0:	0800bd04 	.word	0x0800bd04
 800abc4:	0800bcc4 	.word	0x0800bcc4
 800abc8:	0800bb6c 	.word	0x0800bb6c
 800abcc:	0800bb76 	.word	0x0800bb76
 800abd0:	080087e5 	.word	0x080087e5
 800abd4:	0800a957 	.word	0x0800a957
 800abd8:	0800bb72 	.word	0x0800bb72

0800abdc <__swbuf_r>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	460e      	mov	r6, r1
 800abe0:	4614      	mov	r4, r2
 800abe2:	4605      	mov	r5, r0
 800abe4:	b118      	cbz	r0, 800abee <__swbuf_r+0x12>
 800abe6:	6983      	ldr	r3, [r0, #24]
 800abe8:	b90b      	cbnz	r3, 800abee <__swbuf_r+0x12>
 800abea:	f000 f9e7 	bl	800afbc <__sinit>
 800abee:	4b21      	ldr	r3, [pc, #132]	; (800ac74 <__swbuf_r+0x98>)
 800abf0:	429c      	cmp	r4, r3
 800abf2:	d12b      	bne.n	800ac4c <__swbuf_r+0x70>
 800abf4:	686c      	ldr	r4, [r5, #4]
 800abf6:	69a3      	ldr	r3, [r4, #24]
 800abf8:	60a3      	str	r3, [r4, #8]
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	071a      	lsls	r2, r3, #28
 800abfe:	d52f      	bpl.n	800ac60 <__swbuf_r+0x84>
 800ac00:	6923      	ldr	r3, [r4, #16]
 800ac02:	b36b      	cbz	r3, 800ac60 <__swbuf_r+0x84>
 800ac04:	6923      	ldr	r3, [r4, #16]
 800ac06:	6820      	ldr	r0, [r4, #0]
 800ac08:	1ac0      	subs	r0, r0, r3
 800ac0a:	6963      	ldr	r3, [r4, #20]
 800ac0c:	b2f6      	uxtb	r6, r6
 800ac0e:	4283      	cmp	r3, r0
 800ac10:	4637      	mov	r7, r6
 800ac12:	dc04      	bgt.n	800ac1e <__swbuf_r+0x42>
 800ac14:	4621      	mov	r1, r4
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 f93c 	bl	800ae94 <_fflush_r>
 800ac1c:	bb30      	cbnz	r0, 800ac6c <__swbuf_r+0x90>
 800ac1e:	68a3      	ldr	r3, [r4, #8]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	60a3      	str	r3, [r4, #8]
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	1c5a      	adds	r2, r3, #1
 800ac28:	6022      	str	r2, [r4, #0]
 800ac2a:	701e      	strb	r6, [r3, #0]
 800ac2c:	6963      	ldr	r3, [r4, #20]
 800ac2e:	3001      	adds	r0, #1
 800ac30:	4283      	cmp	r3, r0
 800ac32:	d004      	beq.n	800ac3e <__swbuf_r+0x62>
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	07db      	lsls	r3, r3, #31
 800ac38:	d506      	bpl.n	800ac48 <__swbuf_r+0x6c>
 800ac3a:	2e0a      	cmp	r6, #10
 800ac3c:	d104      	bne.n	800ac48 <__swbuf_r+0x6c>
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4628      	mov	r0, r5
 800ac42:	f000 f927 	bl	800ae94 <_fflush_r>
 800ac46:	b988      	cbnz	r0, 800ac6c <__swbuf_r+0x90>
 800ac48:	4638      	mov	r0, r7
 800ac4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac4c:	4b0a      	ldr	r3, [pc, #40]	; (800ac78 <__swbuf_r+0x9c>)
 800ac4e:	429c      	cmp	r4, r3
 800ac50:	d101      	bne.n	800ac56 <__swbuf_r+0x7a>
 800ac52:	68ac      	ldr	r4, [r5, #8]
 800ac54:	e7cf      	b.n	800abf6 <__swbuf_r+0x1a>
 800ac56:	4b09      	ldr	r3, [pc, #36]	; (800ac7c <__swbuf_r+0xa0>)
 800ac58:	429c      	cmp	r4, r3
 800ac5a:	bf08      	it	eq
 800ac5c:	68ec      	ldreq	r4, [r5, #12]
 800ac5e:	e7ca      	b.n	800abf6 <__swbuf_r+0x1a>
 800ac60:	4621      	mov	r1, r4
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 f81a 	bl	800ac9c <__swsetup_r>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d0cb      	beq.n	800ac04 <__swbuf_r+0x28>
 800ac6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac70:	e7ea      	b.n	800ac48 <__swbuf_r+0x6c>
 800ac72:	bf00      	nop
 800ac74:	0800bce4 	.word	0x0800bce4
 800ac78:	0800bd04 	.word	0x0800bd04
 800ac7c:	0800bcc4 	.word	0x0800bcc4

0800ac80 <__ascii_wctomb>:
 800ac80:	b149      	cbz	r1, 800ac96 <__ascii_wctomb+0x16>
 800ac82:	2aff      	cmp	r2, #255	; 0xff
 800ac84:	bf85      	ittet	hi
 800ac86:	238a      	movhi	r3, #138	; 0x8a
 800ac88:	6003      	strhi	r3, [r0, #0]
 800ac8a:	700a      	strbls	r2, [r1, #0]
 800ac8c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ac90:	bf98      	it	ls
 800ac92:	2001      	movls	r0, #1
 800ac94:	4770      	bx	lr
 800ac96:	4608      	mov	r0, r1
 800ac98:	4770      	bx	lr
	...

0800ac9c <__swsetup_r>:
 800ac9c:	4b32      	ldr	r3, [pc, #200]	; (800ad68 <__swsetup_r+0xcc>)
 800ac9e:	b570      	push	{r4, r5, r6, lr}
 800aca0:	681d      	ldr	r5, [r3, #0]
 800aca2:	4606      	mov	r6, r0
 800aca4:	460c      	mov	r4, r1
 800aca6:	b125      	cbz	r5, 800acb2 <__swsetup_r+0x16>
 800aca8:	69ab      	ldr	r3, [r5, #24]
 800acaa:	b913      	cbnz	r3, 800acb2 <__swsetup_r+0x16>
 800acac:	4628      	mov	r0, r5
 800acae:	f000 f985 	bl	800afbc <__sinit>
 800acb2:	4b2e      	ldr	r3, [pc, #184]	; (800ad6c <__swsetup_r+0xd0>)
 800acb4:	429c      	cmp	r4, r3
 800acb6:	d10f      	bne.n	800acd8 <__swsetup_r+0x3c>
 800acb8:	686c      	ldr	r4, [r5, #4]
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acc0:	0719      	lsls	r1, r3, #28
 800acc2:	d42c      	bmi.n	800ad1e <__swsetup_r+0x82>
 800acc4:	06dd      	lsls	r5, r3, #27
 800acc6:	d411      	bmi.n	800acec <__swsetup_r+0x50>
 800acc8:	2309      	movs	r3, #9
 800acca:	6033      	str	r3, [r6, #0]
 800accc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acd0:	81a3      	strh	r3, [r4, #12]
 800acd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acd6:	e03e      	b.n	800ad56 <__swsetup_r+0xba>
 800acd8:	4b25      	ldr	r3, [pc, #148]	; (800ad70 <__swsetup_r+0xd4>)
 800acda:	429c      	cmp	r4, r3
 800acdc:	d101      	bne.n	800ace2 <__swsetup_r+0x46>
 800acde:	68ac      	ldr	r4, [r5, #8]
 800ace0:	e7eb      	b.n	800acba <__swsetup_r+0x1e>
 800ace2:	4b24      	ldr	r3, [pc, #144]	; (800ad74 <__swsetup_r+0xd8>)
 800ace4:	429c      	cmp	r4, r3
 800ace6:	bf08      	it	eq
 800ace8:	68ec      	ldreq	r4, [r5, #12]
 800acea:	e7e6      	b.n	800acba <__swsetup_r+0x1e>
 800acec:	0758      	lsls	r0, r3, #29
 800acee:	d512      	bpl.n	800ad16 <__swsetup_r+0x7a>
 800acf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acf2:	b141      	cbz	r1, 800ad06 <__swsetup_r+0x6a>
 800acf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acf8:	4299      	cmp	r1, r3
 800acfa:	d002      	beq.n	800ad02 <__swsetup_r+0x66>
 800acfc:	4630      	mov	r0, r6
 800acfe:	f7ff fb6f 	bl	800a3e0 <_free_r>
 800ad02:	2300      	movs	r3, #0
 800ad04:	6363      	str	r3, [r4, #52]	; 0x34
 800ad06:	89a3      	ldrh	r3, [r4, #12]
 800ad08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad0c:	81a3      	strh	r3, [r4, #12]
 800ad0e:	2300      	movs	r3, #0
 800ad10:	6063      	str	r3, [r4, #4]
 800ad12:	6923      	ldr	r3, [r4, #16]
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	89a3      	ldrh	r3, [r4, #12]
 800ad18:	f043 0308 	orr.w	r3, r3, #8
 800ad1c:	81a3      	strh	r3, [r4, #12]
 800ad1e:	6923      	ldr	r3, [r4, #16]
 800ad20:	b94b      	cbnz	r3, 800ad36 <__swsetup_r+0x9a>
 800ad22:	89a3      	ldrh	r3, [r4, #12]
 800ad24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad2c:	d003      	beq.n	800ad36 <__swsetup_r+0x9a>
 800ad2e:	4621      	mov	r1, r4
 800ad30:	4630      	mov	r0, r6
 800ad32:	f000 fa07 	bl	800b144 <__smakebuf_r>
 800ad36:	89a0      	ldrh	r0, [r4, #12]
 800ad38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad3c:	f010 0301 	ands.w	r3, r0, #1
 800ad40:	d00a      	beq.n	800ad58 <__swsetup_r+0xbc>
 800ad42:	2300      	movs	r3, #0
 800ad44:	60a3      	str	r3, [r4, #8]
 800ad46:	6963      	ldr	r3, [r4, #20]
 800ad48:	425b      	negs	r3, r3
 800ad4a:	61a3      	str	r3, [r4, #24]
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	b943      	cbnz	r3, 800ad62 <__swsetup_r+0xc6>
 800ad50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad54:	d1ba      	bne.n	800accc <__swsetup_r+0x30>
 800ad56:	bd70      	pop	{r4, r5, r6, pc}
 800ad58:	0781      	lsls	r1, r0, #30
 800ad5a:	bf58      	it	pl
 800ad5c:	6963      	ldrpl	r3, [r4, #20]
 800ad5e:	60a3      	str	r3, [r4, #8]
 800ad60:	e7f4      	b.n	800ad4c <__swsetup_r+0xb0>
 800ad62:	2000      	movs	r0, #0
 800ad64:	e7f7      	b.n	800ad56 <__swsetup_r+0xba>
 800ad66:	bf00      	nop
 800ad68:	2000003c 	.word	0x2000003c
 800ad6c:	0800bce4 	.word	0x0800bce4
 800ad70:	0800bd04 	.word	0x0800bd04
 800ad74:	0800bcc4 	.word	0x0800bcc4

0800ad78 <abort>:
 800ad78:	b508      	push	{r3, lr}
 800ad7a:	2006      	movs	r0, #6
 800ad7c:	f000 fa52 	bl	800b224 <raise>
 800ad80:	2001      	movs	r0, #1
 800ad82:	f7fd fb85 	bl	8008490 <_exit>
	...

0800ad88 <__sflush_r>:
 800ad88:	898a      	ldrh	r2, [r1, #12]
 800ad8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8e:	4605      	mov	r5, r0
 800ad90:	0710      	lsls	r0, r2, #28
 800ad92:	460c      	mov	r4, r1
 800ad94:	d458      	bmi.n	800ae48 <__sflush_r+0xc0>
 800ad96:	684b      	ldr	r3, [r1, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dc05      	bgt.n	800ada8 <__sflush_r+0x20>
 800ad9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dc02      	bgt.n	800ada8 <__sflush_r+0x20>
 800ada2:	2000      	movs	r0, #0
 800ada4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adaa:	2e00      	cmp	r6, #0
 800adac:	d0f9      	beq.n	800ada2 <__sflush_r+0x1a>
 800adae:	2300      	movs	r3, #0
 800adb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adb4:	682f      	ldr	r7, [r5, #0]
 800adb6:	602b      	str	r3, [r5, #0]
 800adb8:	d032      	beq.n	800ae20 <__sflush_r+0x98>
 800adba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	075a      	lsls	r2, r3, #29
 800adc0:	d505      	bpl.n	800adce <__sflush_r+0x46>
 800adc2:	6863      	ldr	r3, [r4, #4]
 800adc4:	1ac0      	subs	r0, r0, r3
 800adc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adc8:	b10b      	cbz	r3, 800adce <__sflush_r+0x46>
 800adca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adcc:	1ac0      	subs	r0, r0, r3
 800adce:	2300      	movs	r3, #0
 800add0:	4602      	mov	r2, r0
 800add2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800add4:	6a21      	ldr	r1, [r4, #32]
 800add6:	4628      	mov	r0, r5
 800add8:	47b0      	blx	r6
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	d106      	bne.n	800adee <__sflush_r+0x66>
 800ade0:	6829      	ldr	r1, [r5, #0]
 800ade2:	291d      	cmp	r1, #29
 800ade4:	d82c      	bhi.n	800ae40 <__sflush_r+0xb8>
 800ade6:	4a2a      	ldr	r2, [pc, #168]	; (800ae90 <__sflush_r+0x108>)
 800ade8:	40ca      	lsrs	r2, r1
 800adea:	07d6      	lsls	r6, r2, #31
 800adec:	d528      	bpl.n	800ae40 <__sflush_r+0xb8>
 800adee:	2200      	movs	r2, #0
 800adf0:	6062      	str	r2, [r4, #4]
 800adf2:	04d9      	lsls	r1, r3, #19
 800adf4:	6922      	ldr	r2, [r4, #16]
 800adf6:	6022      	str	r2, [r4, #0]
 800adf8:	d504      	bpl.n	800ae04 <__sflush_r+0x7c>
 800adfa:	1c42      	adds	r2, r0, #1
 800adfc:	d101      	bne.n	800ae02 <__sflush_r+0x7a>
 800adfe:	682b      	ldr	r3, [r5, #0]
 800ae00:	b903      	cbnz	r3, 800ae04 <__sflush_r+0x7c>
 800ae02:	6560      	str	r0, [r4, #84]	; 0x54
 800ae04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae06:	602f      	str	r7, [r5, #0]
 800ae08:	2900      	cmp	r1, #0
 800ae0a:	d0ca      	beq.n	800ada2 <__sflush_r+0x1a>
 800ae0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae10:	4299      	cmp	r1, r3
 800ae12:	d002      	beq.n	800ae1a <__sflush_r+0x92>
 800ae14:	4628      	mov	r0, r5
 800ae16:	f7ff fae3 	bl	800a3e0 <_free_r>
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	6360      	str	r0, [r4, #52]	; 0x34
 800ae1e:	e7c1      	b.n	800ada4 <__sflush_r+0x1c>
 800ae20:	6a21      	ldr	r1, [r4, #32]
 800ae22:	2301      	movs	r3, #1
 800ae24:	4628      	mov	r0, r5
 800ae26:	47b0      	blx	r6
 800ae28:	1c41      	adds	r1, r0, #1
 800ae2a:	d1c7      	bne.n	800adbc <__sflush_r+0x34>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d0c4      	beq.n	800adbc <__sflush_r+0x34>
 800ae32:	2b1d      	cmp	r3, #29
 800ae34:	d001      	beq.n	800ae3a <__sflush_r+0xb2>
 800ae36:	2b16      	cmp	r3, #22
 800ae38:	d101      	bne.n	800ae3e <__sflush_r+0xb6>
 800ae3a:	602f      	str	r7, [r5, #0]
 800ae3c:	e7b1      	b.n	800ada2 <__sflush_r+0x1a>
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae44:	81a3      	strh	r3, [r4, #12]
 800ae46:	e7ad      	b.n	800ada4 <__sflush_r+0x1c>
 800ae48:	690f      	ldr	r7, [r1, #16]
 800ae4a:	2f00      	cmp	r7, #0
 800ae4c:	d0a9      	beq.n	800ada2 <__sflush_r+0x1a>
 800ae4e:	0793      	lsls	r3, r2, #30
 800ae50:	680e      	ldr	r6, [r1, #0]
 800ae52:	bf08      	it	eq
 800ae54:	694b      	ldreq	r3, [r1, #20]
 800ae56:	600f      	str	r7, [r1, #0]
 800ae58:	bf18      	it	ne
 800ae5a:	2300      	movne	r3, #0
 800ae5c:	eba6 0807 	sub.w	r8, r6, r7
 800ae60:	608b      	str	r3, [r1, #8]
 800ae62:	f1b8 0f00 	cmp.w	r8, #0
 800ae66:	dd9c      	ble.n	800ada2 <__sflush_r+0x1a>
 800ae68:	6a21      	ldr	r1, [r4, #32]
 800ae6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae6c:	4643      	mov	r3, r8
 800ae6e:	463a      	mov	r2, r7
 800ae70:	4628      	mov	r0, r5
 800ae72:	47b0      	blx	r6
 800ae74:	2800      	cmp	r0, #0
 800ae76:	dc06      	bgt.n	800ae86 <__sflush_r+0xfe>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae7e:	81a3      	strh	r3, [r4, #12]
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae84:	e78e      	b.n	800ada4 <__sflush_r+0x1c>
 800ae86:	4407      	add	r7, r0
 800ae88:	eba8 0800 	sub.w	r8, r8, r0
 800ae8c:	e7e9      	b.n	800ae62 <__sflush_r+0xda>
 800ae8e:	bf00      	nop
 800ae90:	20400001 	.word	0x20400001

0800ae94 <_fflush_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	690b      	ldr	r3, [r1, #16]
 800ae98:	4605      	mov	r5, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	b913      	cbnz	r3, 800aea4 <_fflush_r+0x10>
 800ae9e:	2500      	movs	r5, #0
 800aea0:	4628      	mov	r0, r5
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	b118      	cbz	r0, 800aeae <_fflush_r+0x1a>
 800aea6:	6983      	ldr	r3, [r0, #24]
 800aea8:	b90b      	cbnz	r3, 800aeae <_fflush_r+0x1a>
 800aeaa:	f000 f887 	bl	800afbc <__sinit>
 800aeae:	4b14      	ldr	r3, [pc, #80]	; (800af00 <_fflush_r+0x6c>)
 800aeb0:	429c      	cmp	r4, r3
 800aeb2:	d11b      	bne.n	800aeec <_fflush_r+0x58>
 800aeb4:	686c      	ldr	r4, [r5, #4]
 800aeb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0ef      	beq.n	800ae9e <_fflush_r+0xa>
 800aebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aec0:	07d0      	lsls	r0, r2, #31
 800aec2:	d404      	bmi.n	800aece <_fflush_r+0x3a>
 800aec4:	0599      	lsls	r1, r3, #22
 800aec6:	d402      	bmi.n	800aece <_fflush_r+0x3a>
 800aec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeca:	f000 f915 	bl	800b0f8 <__retarget_lock_acquire_recursive>
 800aece:	4628      	mov	r0, r5
 800aed0:	4621      	mov	r1, r4
 800aed2:	f7ff ff59 	bl	800ad88 <__sflush_r>
 800aed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aed8:	07da      	lsls	r2, r3, #31
 800aeda:	4605      	mov	r5, r0
 800aedc:	d4e0      	bmi.n	800aea0 <_fflush_r+0xc>
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	059b      	lsls	r3, r3, #22
 800aee2:	d4dd      	bmi.n	800aea0 <_fflush_r+0xc>
 800aee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aee6:	f000 f908 	bl	800b0fa <__retarget_lock_release_recursive>
 800aeea:	e7d9      	b.n	800aea0 <_fflush_r+0xc>
 800aeec:	4b05      	ldr	r3, [pc, #20]	; (800af04 <_fflush_r+0x70>)
 800aeee:	429c      	cmp	r4, r3
 800aef0:	d101      	bne.n	800aef6 <_fflush_r+0x62>
 800aef2:	68ac      	ldr	r4, [r5, #8]
 800aef4:	e7df      	b.n	800aeb6 <_fflush_r+0x22>
 800aef6:	4b04      	ldr	r3, [pc, #16]	; (800af08 <_fflush_r+0x74>)
 800aef8:	429c      	cmp	r4, r3
 800aefa:	bf08      	it	eq
 800aefc:	68ec      	ldreq	r4, [r5, #12]
 800aefe:	e7da      	b.n	800aeb6 <_fflush_r+0x22>
 800af00:	0800bce4 	.word	0x0800bce4
 800af04:	0800bd04 	.word	0x0800bd04
 800af08:	0800bcc4 	.word	0x0800bcc4

0800af0c <std>:
 800af0c:	2300      	movs	r3, #0
 800af0e:	b510      	push	{r4, lr}
 800af10:	4604      	mov	r4, r0
 800af12:	e9c0 3300 	strd	r3, r3, [r0]
 800af16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af1a:	6083      	str	r3, [r0, #8]
 800af1c:	8181      	strh	r1, [r0, #12]
 800af1e:	6643      	str	r3, [r0, #100]	; 0x64
 800af20:	81c2      	strh	r2, [r0, #14]
 800af22:	6183      	str	r3, [r0, #24]
 800af24:	4619      	mov	r1, r3
 800af26:	2208      	movs	r2, #8
 800af28:	305c      	adds	r0, #92	; 0x5c
 800af2a:	f7fd fbb3 	bl	8008694 <memset>
 800af2e:	4b05      	ldr	r3, [pc, #20]	; (800af44 <std+0x38>)
 800af30:	6263      	str	r3, [r4, #36]	; 0x24
 800af32:	4b05      	ldr	r3, [pc, #20]	; (800af48 <std+0x3c>)
 800af34:	62a3      	str	r3, [r4, #40]	; 0x28
 800af36:	4b05      	ldr	r3, [pc, #20]	; (800af4c <std+0x40>)
 800af38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af3a:	4b05      	ldr	r3, [pc, #20]	; (800af50 <std+0x44>)
 800af3c:	6224      	str	r4, [r4, #32]
 800af3e:	6323      	str	r3, [r4, #48]	; 0x30
 800af40:	bd10      	pop	{r4, pc}
 800af42:	bf00      	nop
 800af44:	0800b25d 	.word	0x0800b25d
 800af48:	0800b27f 	.word	0x0800b27f
 800af4c:	0800b2b7 	.word	0x0800b2b7
 800af50:	0800b2db 	.word	0x0800b2db

0800af54 <_cleanup_r>:
 800af54:	4901      	ldr	r1, [pc, #4]	; (800af5c <_cleanup_r+0x8>)
 800af56:	f000 b8af 	b.w	800b0b8 <_fwalk_reent>
 800af5a:	bf00      	nop
 800af5c:	0800ae95 	.word	0x0800ae95

0800af60 <__sfmoreglue>:
 800af60:	b570      	push	{r4, r5, r6, lr}
 800af62:	1e4a      	subs	r2, r1, #1
 800af64:	2568      	movs	r5, #104	; 0x68
 800af66:	4355      	muls	r5, r2
 800af68:	460e      	mov	r6, r1
 800af6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af6e:	f7ff fa87 	bl	800a480 <_malloc_r>
 800af72:	4604      	mov	r4, r0
 800af74:	b140      	cbz	r0, 800af88 <__sfmoreglue+0x28>
 800af76:	2100      	movs	r1, #0
 800af78:	e9c0 1600 	strd	r1, r6, [r0]
 800af7c:	300c      	adds	r0, #12
 800af7e:	60a0      	str	r0, [r4, #8]
 800af80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af84:	f7fd fb86 	bl	8008694 <memset>
 800af88:	4620      	mov	r0, r4
 800af8a:	bd70      	pop	{r4, r5, r6, pc}

0800af8c <__sfp_lock_acquire>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__sfp_lock_acquire+0x8>)
 800af8e:	f000 b8b3 	b.w	800b0f8 <__retarget_lock_acquire_recursive>
 800af92:	bf00      	nop
 800af94:	2001493c 	.word	0x2001493c

0800af98 <__sfp_lock_release>:
 800af98:	4801      	ldr	r0, [pc, #4]	; (800afa0 <__sfp_lock_release+0x8>)
 800af9a:	f000 b8ae 	b.w	800b0fa <__retarget_lock_release_recursive>
 800af9e:	bf00      	nop
 800afa0:	2001493c 	.word	0x2001493c

0800afa4 <__sinit_lock_acquire>:
 800afa4:	4801      	ldr	r0, [pc, #4]	; (800afac <__sinit_lock_acquire+0x8>)
 800afa6:	f000 b8a7 	b.w	800b0f8 <__retarget_lock_acquire_recursive>
 800afaa:	bf00      	nop
 800afac:	20014937 	.word	0x20014937

0800afb0 <__sinit_lock_release>:
 800afb0:	4801      	ldr	r0, [pc, #4]	; (800afb8 <__sinit_lock_release+0x8>)
 800afb2:	f000 b8a2 	b.w	800b0fa <__retarget_lock_release_recursive>
 800afb6:	bf00      	nop
 800afb8:	20014937 	.word	0x20014937

0800afbc <__sinit>:
 800afbc:	b510      	push	{r4, lr}
 800afbe:	4604      	mov	r4, r0
 800afc0:	f7ff fff0 	bl	800afa4 <__sinit_lock_acquire>
 800afc4:	69a3      	ldr	r3, [r4, #24]
 800afc6:	b11b      	cbz	r3, 800afd0 <__sinit+0x14>
 800afc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afcc:	f7ff bff0 	b.w	800afb0 <__sinit_lock_release>
 800afd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afd4:	6523      	str	r3, [r4, #80]	; 0x50
 800afd6:	4b13      	ldr	r3, [pc, #76]	; (800b024 <__sinit+0x68>)
 800afd8:	4a13      	ldr	r2, [pc, #76]	; (800b028 <__sinit+0x6c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	62a2      	str	r2, [r4, #40]	; 0x28
 800afde:	42a3      	cmp	r3, r4
 800afe0:	bf04      	itt	eq
 800afe2:	2301      	moveq	r3, #1
 800afe4:	61a3      	streq	r3, [r4, #24]
 800afe6:	4620      	mov	r0, r4
 800afe8:	f000 f820 	bl	800b02c <__sfp>
 800afec:	6060      	str	r0, [r4, #4]
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 f81c 	bl	800b02c <__sfp>
 800aff4:	60a0      	str	r0, [r4, #8]
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 f818 	bl	800b02c <__sfp>
 800affc:	2200      	movs	r2, #0
 800affe:	60e0      	str	r0, [r4, #12]
 800b000:	2104      	movs	r1, #4
 800b002:	6860      	ldr	r0, [r4, #4]
 800b004:	f7ff ff82 	bl	800af0c <std>
 800b008:	68a0      	ldr	r0, [r4, #8]
 800b00a:	2201      	movs	r2, #1
 800b00c:	2109      	movs	r1, #9
 800b00e:	f7ff ff7d 	bl	800af0c <std>
 800b012:	68e0      	ldr	r0, [r4, #12]
 800b014:	2202      	movs	r2, #2
 800b016:	2112      	movs	r1, #18
 800b018:	f7ff ff78 	bl	800af0c <std>
 800b01c:	2301      	movs	r3, #1
 800b01e:	61a3      	str	r3, [r4, #24]
 800b020:	e7d2      	b.n	800afc8 <__sinit+0xc>
 800b022:	bf00      	nop
 800b024:	0800b940 	.word	0x0800b940
 800b028:	0800af55 	.word	0x0800af55

0800b02c <__sfp>:
 800b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02e:	4607      	mov	r7, r0
 800b030:	f7ff ffac 	bl	800af8c <__sfp_lock_acquire>
 800b034:	4b1e      	ldr	r3, [pc, #120]	; (800b0b0 <__sfp+0x84>)
 800b036:	681e      	ldr	r6, [r3, #0]
 800b038:	69b3      	ldr	r3, [r6, #24]
 800b03a:	b913      	cbnz	r3, 800b042 <__sfp+0x16>
 800b03c:	4630      	mov	r0, r6
 800b03e:	f7ff ffbd 	bl	800afbc <__sinit>
 800b042:	3648      	adds	r6, #72	; 0x48
 800b044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b048:	3b01      	subs	r3, #1
 800b04a:	d503      	bpl.n	800b054 <__sfp+0x28>
 800b04c:	6833      	ldr	r3, [r6, #0]
 800b04e:	b30b      	cbz	r3, 800b094 <__sfp+0x68>
 800b050:	6836      	ldr	r6, [r6, #0]
 800b052:	e7f7      	b.n	800b044 <__sfp+0x18>
 800b054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b058:	b9d5      	cbnz	r5, 800b090 <__sfp+0x64>
 800b05a:	4b16      	ldr	r3, [pc, #88]	; (800b0b4 <__sfp+0x88>)
 800b05c:	60e3      	str	r3, [r4, #12]
 800b05e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b062:	6665      	str	r5, [r4, #100]	; 0x64
 800b064:	f000 f847 	bl	800b0f6 <__retarget_lock_init_recursive>
 800b068:	f7ff ff96 	bl	800af98 <__sfp_lock_release>
 800b06c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b070:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b074:	6025      	str	r5, [r4, #0]
 800b076:	61a5      	str	r5, [r4, #24]
 800b078:	2208      	movs	r2, #8
 800b07a:	4629      	mov	r1, r5
 800b07c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b080:	f7fd fb08 	bl	8008694 <memset>
 800b084:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b088:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b08c:	4620      	mov	r0, r4
 800b08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b090:	3468      	adds	r4, #104	; 0x68
 800b092:	e7d9      	b.n	800b048 <__sfp+0x1c>
 800b094:	2104      	movs	r1, #4
 800b096:	4638      	mov	r0, r7
 800b098:	f7ff ff62 	bl	800af60 <__sfmoreglue>
 800b09c:	4604      	mov	r4, r0
 800b09e:	6030      	str	r0, [r6, #0]
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d1d5      	bne.n	800b050 <__sfp+0x24>
 800b0a4:	f7ff ff78 	bl	800af98 <__sfp_lock_release>
 800b0a8:	230c      	movs	r3, #12
 800b0aa:	603b      	str	r3, [r7, #0]
 800b0ac:	e7ee      	b.n	800b08c <__sfp+0x60>
 800b0ae:	bf00      	nop
 800b0b0:	0800b940 	.word	0x0800b940
 800b0b4:	ffff0001 	.word	0xffff0001

0800b0b8 <_fwalk_reent>:
 800b0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0bc:	4606      	mov	r6, r0
 800b0be:	4688      	mov	r8, r1
 800b0c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0c4:	2700      	movs	r7, #0
 800b0c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0ca:	f1b9 0901 	subs.w	r9, r9, #1
 800b0ce:	d505      	bpl.n	800b0dc <_fwalk_reent+0x24>
 800b0d0:	6824      	ldr	r4, [r4, #0]
 800b0d2:	2c00      	cmp	r4, #0
 800b0d4:	d1f7      	bne.n	800b0c6 <_fwalk_reent+0xe>
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0dc:	89ab      	ldrh	r3, [r5, #12]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d907      	bls.n	800b0f2 <_fwalk_reent+0x3a>
 800b0e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	d003      	beq.n	800b0f2 <_fwalk_reent+0x3a>
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	47c0      	blx	r8
 800b0f0:	4307      	orrs	r7, r0
 800b0f2:	3568      	adds	r5, #104	; 0x68
 800b0f4:	e7e9      	b.n	800b0ca <_fwalk_reent+0x12>

0800b0f6 <__retarget_lock_init_recursive>:
 800b0f6:	4770      	bx	lr

0800b0f8 <__retarget_lock_acquire_recursive>:
 800b0f8:	4770      	bx	lr

0800b0fa <__retarget_lock_release_recursive>:
 800b0fa:	4770      	bx	lr

0800b0fc <__swhatbuf_r>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	460e      	mov	r6, r1
 800b100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b104:	2900      	cmp	r1, #0
 800b106:	b096      	sub	sp, #88	; 0x58
 800b108:	4614      	mov	r4, r2
 800b10a:	461d      	mov	r5, r3
 800b10c:	da07      	bge.n	800b11e <__swhatbuf_r+0x22>
 800b10e:	2300      	movs	r3, #0
 800b110:	602b      	str	r3, [r5, #0]
 800b112:	89b3      	ldrh	r3, [r6, #12]
 800b114:	061a      	lsls	r2, r3, #24
 800b116:	d410      	bmi.n	800b13a <__swhatbuf_r+0x3e>
 800b118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b11c:	e00e      	b.n	800b13c <__swhatbuf_r+0x40>
 800b11e:	466a      	mov	r2, sp
 800b120:	f000 f8f0 	bl	800b304 <_fstat_r>
 800b124:	2800      	cmp	r0, #0
 800b126:	dbf2      	blt.n	800b10e <__swhatbuf_r+0x12>
 800b128:	9a01      	ldr	r2, [sp, #4]
 800b12a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b12e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b132:	425a      	negs	r2, r3
 800b134:	415a      	adcs	r2, r3
 800b136:	602a      	str	r2, [r5, #0]
 800b138:	e7ee      	b.n	800b118 <__swhatbuf_r+0x1c>
 800b13a:	2340      	movs	r3, #64	; 0x40
 800b13c:	2000      	movs	r0, #0
 800b13e:	6023      	str	r3, [r4, #0]
 800b140:	b016      	add	sp, #88	; 0x58
 800b142:	bd70      	pop	{r4, r5, r6, pc}

0800b144 <__smakebuf_r>:
 800b144:	898b      	ldrh	r3, [r1, #12]
 800b146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b148:	079d      	lsls	r5, r3, #30
 800b14a:	4606      	mov	r6, r0
 800b14c:	460c      	mov	r4, r1
 800b14e:	d507      	bpl.n	800b160 <__smakebuf_r+0x1c>
 800b150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	6123      	str	r3, [r4, #16]
 800b158:	2301      	movs	r3, #1
 800b15a:	6163      	str	r3, [r4, #20]
 800b15c:	b002      	add	sp, #8
 800b15e:	bd70      	pop	{r4, r5, r6, pc}
 800b160:	ab01      	add	r3, sp, #4
 800b162:	466a      	mov	r2, sp
 800b164:	f7ff ffca 	bl	800b0fc <__swhatbuf_r>
 800b168:	9900      	ldr	r1, [sp, #0]
 800b16a:	4605      	mov	r5, r0
 800b16c:	4630      	mov	r0, r6
 800b16e:	f7ff f987 	bl	800a480 <_malloc_r>
 800b172:	b948      	cbnz	r0, 800b188 <__smakebuf_r+0x44>
 800b174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b178:	059a      	lsls	r2, r3, #22
 800b17a:	d4ef      	bmi.n	800b15c <__smakebuf_r+0x18>
 800b17c:	f023 0303 	bic.w	r3, r3, #3
 800b180:	f043 0302 	orr.w	r3, r3, #2
 800b184:	81a3      	strh	r3, [r4, #12]
 800b186:	e7e3      	b.n	800b150 <__smakebuf_r+0xc>
 800b188:	4b0d      	ldr	r3, [pc, #52]	; (800b1c0 <__smakebuf_r+0x7c>)
 800b18a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	6020      	str	r0, [r4, #0]
 800b190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b194:	81a3      	strh	r3, [r4, #12]
 800b196:	9b00      	ldr	r3, [sp, #0]
 800b198:	6163      	str	r3, [r4, #20]
 800b19a:	9b01      	ldr	r3, [sp, #4]
 800b19c:	6120      	str	r0, [r4, #16]
 800b19e:	b15b      	cbz	r3, 800b1b8 <__smakebuf_r+0x74>
 800b1a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f000 f8bf 	bl	800b328 <_isatty_r>
 800b1aa:	b128      	cbz	r0, 800b1b8 <__smakebuf_r+0x74>
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	f023 0303 	bic.w	r3, r3, #3
 800b1b2:	f043 0301 	orr.w	r3, r3, #1
 800b1b6:	81a3      	strh	r3, [r4, #12]
 800b1b8:	89a0      	ldrh	r0, [r4, #12]
 800b1ba:	4305      	orrs	r5, r0
 800b1bc:	81a5      	strh	r5, [r4, #12]
 800b1be:	e7cd      	b.n	800b15c <__smakebuf_r+0x18>
 800b1c0:	0800af55 	.word	0x0800af55

0800b1c4 <_malloc_usable_size_r>:
 800b1c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1c8:	1f18      	subs	r0, r3, #4
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	bfbc      	itt	lt
 800b1ce:	580b      	ldrlt	r3, [r1, r0]
 800b1d0:	18c0      	addlt	r0, r0, r3
 800b1d2:	4770      	bx	lr

0800b1d4 <_raise_r>:
 800b1d4:	291f      	cmp	r1, #31
 800b1d6:	b538      	push	{r3, r4, r5, lr}
 800b1d8:	4604      	mov	r4, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	d904      	bls.n	800b1e8 <_raise_r+0x14>
 800b1de:	2316      	movs	r3, #22
 800b1e0:	6003      	str	r3, [r0, #0]
 800b1e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1ea:	b112      	cbz	r2, 800b1f2 <_raise_r+0x1e>
 800b1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1f0:	b94b      	cbnz	r3, 800b206 <_raise_r+0x32>
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 f830 	bl	800b258 <_getpid_r>
 800b1f8:	462a      	mov	r2, r5
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b202:	f000 b817 	b.w	800b234 <_kill_r>
 800b206:	2b01      	cmp	r3, #1
 800b208:	d00a      	beq.n	800b220 <_raise_r+0x4c>
 800b20a:	1c59      	adds	r1, r3, #1
 800b20c:	d103      	bne.n	800b216 <_raise_r+0x42>
 800b20e:	2316      	movs	r3, #22
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	2001      	movs	r0, #1
 800b214:	e7e7      	b.n	800b1e6 <_raise_r+0x12>
 800b216:	2400      	movs	r4, #0
 800b218:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b21c:	4628      	mov	r0, r5
 800b21e:	4798      	blx	r3
 800b220:	2000      	movs	r0, #0
 800b222:	e7e0      	b.n	800b1e6 <_raise_r+0x12>

0800b224 <raise>:
 800b224:	4b02      	ldr	r3, [pc, #8]	; (800b230 <raise+0xc>)
 800b226:	4601      	mov	r1, r0
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	f7ff bfd3 	b.w	800b1d4 <_raise_r>
 800b22e:	bf00      	nop
 800b230:	2000003c 	.word	0x2000003c

0800b234 <_kill_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4d07      	ldr	r5, [pc, #28]	; (800b254 <_kill_r+0x20>)
 800b238:	2300      	movs	r3, #0
 800b23a:	4604      	mov	r4, r0
 800b23c:	4608      	mov	r0, r1
 800b23e:	4611      	mov	r1, r2
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	f7fd f915 	bl	8008470 <_kill>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d102      	bne.n	800b250 <_kill_r+0x1c>
 800b24a:	682b      	ldr	r3, [r5, #0]
 800b24c:	b103      	cbz	r3, 800b250 <_kill_r+0x1c>
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	bd38      	pop	{r3, r4, r5, pc}
 800b252:	bf00      	nop
 800b254:	20014930 	.word	0x20014930

0800b258 <_getpid_r>:
 800b258:	f7fd b902 	b.w	8008460 <_getpid>

0800b25c <__sread>:
 800b25c:	b510      	push	{r4, lr}
 800b25e:	460c      	mov	r4, r1
 800b260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b264:	f000 f882 	bl	800b36c <_read_r>
 800b268:	2800      	cmp	r0, #0
 800b26a:	bfab      	itete	ge
 800b26c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b26e:	89a3      	ldrhlt	r3, [r4, #12]
 800b270:	181b      	addge	r3, r3, r0
 800b272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b276:	bfac      	ite	ge
 800b278:	6563      	strge	r3, [r4, #84]	; 0x54
 800b27a:	81a3      	strhlt	r3, [r4, #12]
 800b27c:	bd10      	pop	{r4, pc}

0800b27e <__swrite>:
 800b27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b282:	461f      	mov	r7, r3
 800b284:	898b      	ldrh	r3, [r1, #12]
 800b286:	05db      	lsls	r3, r3, #23
 800b288:	4605      	mov	r5, r0
 800b28a:	460c      	mov	r4, r1
 800b28c:	4616      	mov	r6, r2
 800b28e:	d505      	bpl.n	800b29c <__swrite+0x1e>
 800b290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b294:	2302      	movs	r3, #2
 800b296:	2200      	movs	r2, #0
 800b298:	f000 f856 	bl	800b348 <_lseek_r>
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2a6:	81a3      	strh	r3, [r4, #12]
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	463b      	mov	r3, r7
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b2:	f7fb bef3 	b.w	800709c <_write_r>

0800b2b6 <__sseek>:
 800b2b6:	b510      	push	{r4, lr}
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2be:	f000 f843 	bl	800b348 <_lseek_r>
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	bf15      	itete	ne
 800b2c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2d2:	81a3      	strheq	r3, [r4, #12]
 800b2d4:	bf18      	it	ne
 800b2d6:	81a3      	strhne	r3, [r4, #12]
 800b2d8:	bd10      	pop	{r4, pc}

0800b2da <__sclose>:
 800b2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2de:	f000 b801 	b.w	800b2e4 <_close_r>
	...

0800b2e4 <_close_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	4d06      	ldr	r5, [pc, #24]	; (800b300 <_close_r+0x1c>)
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	4608      	mov	r0, r1
 800b2ee:	602b      	str	r3, [r5, #0]
 800b2f0:	f7fd f8f5 	bl	80084de <_close>
 800b2f4:	1c43      	adds	r3, r0, #1
 800b2f6:	d102      	bne.n	800b2fe <_close_r+0x1a>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	b103      	cbz	r3, 800b2fe <_close_r+0x1a>
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	bd38      	pop	{r3, r4, r5, pc}
 800b300:	20014930 	.word	0x20014930

0800b304 <_fstat_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4d07      	ldr	r5, [pc, #28]	; (800b324 <_fstat_r+0x20>)
 800b308:	2300      	movs	r3, #0
 800b30a:	4604      	mov	r4, r0
 800b30c:	4608      	mov	r0, r1
 800b30e:	4611      	mov	r1, r2
 800b310:	602b      	str	r3, [r5, #0]
 800b312:	f7fd f8f0 	bl	80084f6 <_fstat>
 800b316:	1c43      	adds	r3, r0, #1
 800b318:	d102      	bne.n	800b320 <_fstat_r+0x1c>
 800b31a:	682b      	ldr	r3, [r5, #0]
 800b31c:	b103      	cbz	r3, 800b320 <_fstat_r+0x1c>
 800b31e:	6023      	str	r3, [r4, #0]
 800b320:	bd38      	pop	{r3, r4, r5, pc}
 800b322:	bf00      	nop
 800b324:	20014930 	.word	0x20014930

0800b328 <_isatty_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d06      	ldr	r5, [pc, #24]	; (800b344 <_isatty_r+0x1c>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	f7fd f8ef 	bl	8008516 <_isatty>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_isatty_r+0x1a>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_isatty_r+0x1a>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	20014930 	.word	0x20014930

0800b348 <_lseek_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d07      	ldr	r5, [pc, #28]	; (800b368 <_lseek_r+0x20>)
 800b34c:	4604      	mov	r4, r0
 800b34e:	4608      	mov	r0, r1
 800b350:	4611      	mov	r1, r2
 800b352:	2200      	movs	r2, #0
 800b354:	602a      	str	r2, [r5, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	f7fd f8e8 	bl	800852c <_lseek>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_lseek_r+0x1e>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	b103      	cbz	r3, 800b366 <_lseek_r+0x1e>
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	20014930 	.word	0x20014930

0800b36c <_read_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d07      	ldr	r5, [pc, #28]	; (800b38c <_read_r+0x20>)
 800b370:	4604      	mov	r4, r0
 800b372:	4608      	mov	r0, r1
 800b374:	4611      	mov	r1, r2
 800b376:	2200      	movs	r2, #0
 800b378:	602a      	str	r2, [r5, #0]
 800b37a:	461a      	mov	r2, r3
 800b37c:	f7fd f892 	bl	80084a4 <_read>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_read_r+0x1e>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b103      	cbz	r3, 800b38a <_read_r+0x1e>
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	20014930 	.word	0x20014930

0800b390 <_init>:
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b392:	bf00      	nop
 800b394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b396:	bc08      	pop	{r3}
 800b398:	469e      	mov	lr, r3
 800b39a:	4770      	bx	lr

0800b39c <_fini>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	bf00      	nop
 800b3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3a2:	bc08      	pop	{r3}
 800b3a4:	469e      	mov	lr, r3
 800b3a6:	4770      	bx	lr
